[{"commit": "https://github.com/apache/lens/commit/d0b78e81b3299aedb81421a1ced92c56e948fd10", "parent": "https://github.com/apache/lens/commit/3d55b642a5a4cfa5b24522c4a54abfe6b9b3fc9c", "message": "LENS-1497: NPE while closing idle connections", "bug_id": "lens_1", "file": [{"additions": 13, "raw_url": "https://github.com/apache/lens/raw/d0b78e81b3299aedb81421a1ced92c56e948fd10/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java", "blob_url": "https://github.com/apache/lens/blob/d0b78e81b3299aedb81421a1ced92c56e948fd10/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java", "sha": "b9fcdd8bd89f395407b9653c5175c1665a775da6", "changes": 17, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java?ref=d0b78e81b3299aedb81421a1ced92c56e948fd10", "patch": "@@ -265,6 +265,11 @@ public void restoreSession(LensSessionHandle sessionHandle, String userName, Str\n       LensSessionHandle restoredSession = new LensSessionHandle(hiveSessionHandle.getHandleIdentifier().getPublicId(),\n         hiveSessionHandle.getHandleIdentifier().getSecretId());\n       SESSION_MAP.put(restoredSession.getPublicId().toString(), restoredSession);\n+      SessionUser sessionUser = SESSION_USER_INSTANCE_MAP.get(userName);\n+      if (sessionUser == null) {\n+        sessionUser = new SessionUser(userName);\n+        SESSION_USER_INSTANCE_MAP.put(userName, sessionUser);\n+      }\n       updateSessionsPerUser(userName);\n     } catch (HiveSQLException e) {\n       throw new LensException(\"Error restoring session \" + sessionHandle, e);\n@@ -340,10 +345,14 @@ private void decrementSessionCountForUser(LensSessionHandle sessionHandle, Strin\n     }\n     synchronized (sessionUser) {\n       Integer sessionCount = SESSIONS_PER_USER.get(userName);\n-      if (sessionCount == 1) {\n-        SESSIONS_PER_USER.remove(userName);\n-      } else {\n-        SESSIONS_PER_USER.put(userName, --sessionCount);\n+      if (null != sessionCount) {\n+        if (sessionCount == 1) {\n+          SESSIONS_PER_USER.remove(userName);\n+        } else {\n+          SESSIONS_PER_USER.put(userName, --sessionCount);\n+        }\n+      }else {\n+        log.info(\"Trying to decrement session count for non existing session {} for user {}: \",sessionHandle, userName);\n       }\n     }\n   }", "filename": "lens-server/src/main/java/org/apache/lens/server/BaseLensService.java"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/d0b78e81b3299aedb81421a1ced92c56e948fd10/lens-server/src/main/java/org/apache/lens/server/session/HiveSessionService.java", "blob_url": "https://github.com/apache/lens/blob/d0b78e81b3299aedb81421a1ced92c56e948fd10/lens-server/src/main/java/org/apache/lens/server/session/HiveSessionService.java", "sha": "31ac358d0a1747b1dbfe1d6dacaf0fb82556475d", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/session/HiveSessionService.java?ref=d0b78e81b3299aedb81421a1ced92c56e948fd10", "patch": "@@ -347,7 +347,9 @@ public synchronized void init(HiveConf hiveConf) {\n   public synchronized void start() {\n     super.start();\n \n-    sessionExpiryThread = Executors.newSingleThreadScheduledExecutor();\n+    sessionExpiryThread = Executors.newSingleThreadScheduledExecutor(runnable\n+      -> new Thread(runnable, \"Session-expiry-thread\"));\n+\n     int sessionExpiryInterval = getSessionExpiryInterval();\n     sessionExpiryThread.scheduleWithFixedDelay(sessionExpiryRunnable, sessionExpiryInterval,\n         sessionExpiryInterval, TimeUnit.SECONDS);", "filename": "lens-server/src/main/java/org/apache/lens/server/session/HiveSessionService.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/ae6bda33ed501e15dceeecea83c86adf189e4453", "parent": "https://github.com/apache/lens/commit/717214cf9f17337fa6769f03afb3391b39b014ee", "message": "LENS-1474 : Fix NPE in ExpressionResolver for SegmentationCandidate", "bug_id": "lens_2", "file": [{"additions": 11, "raw_url": "https://github.com/apache/lens/raw/ae6bda33ed501e15dceeecea83c86adf189e4453/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "blob_url": "https://github.com/apache/lens/blob/ae6bda33ed501e15dceeecea83c86adf189e4453/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "sha": "822e25e75f9c8d2bf481a14cee132bb1c207143a", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java?ref=ae6bda33ed501e15dceeecea83c86adf189e4453", "patch": "@@ -314,12 +314,14 @@ boolean hasAggregates() {\n     }\n \n     ExpressionContext getExpressionContext(String expr, String alias) {\n-      for (ExpressionContext ec : allExprsQueried.get(expr)) {\n-        if (ec.getSrcAlias().equals(alias)) {\n-          return ec;\n+      if (allExprsQueried.get(expr) != null) {\n+        for (ExpressionContext ec : allExprsQueried.get(expr)) {\n+          if (ec.getSrcAlias().equals(alias)) {\n+            return ec;\n+          }\n         }\n       }\n-      throw new IllegalArgumentException(\"no expression available for \" + expr + \" alias:\" + alias);\n+      return null;\n     }\n \n     boolean hasMeasures(String expr, CubeInterface cube) {\n@@ -511,8 +513,11 @@ private ASTNode getExprAst(ExpressionContext expressionContext) {\n       expressionContexts.add(expressionContext);\n       for (StorageCandidate sc : scSet) {\n         storageTableNames.add(sc.getStorageTable());\n-        expressionContexts.add(sc.getCubeQueryContext().getExprCtx()\n-          .getExpressionContext(expressionContext.getExprCol().getName(), expressionContext.getSrcAlias()));\n+        ExpressionContext ex = sc.getCubeQueryContext().getExprCtx().getExpressionContext(expressionContext.\n+            getExprCol().getName(), expressionContext.getSrcAlias());\n+        if (ex != null) {\n+          expressionContexts.add(ex);\n+        }\n       }\n       for (ExpressionContext ec : expressionContexts) {\n         for (CandidateTable table : ec.evaluableExpressions.keySet()) {", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/24d4f1531497e8b877fe185a0ef742b18acf125c", "parent": "https://github.com/apache/lens/commit/7c97071481e6efc0fcd22ee00887d5c365ef497c", "message": "LENS-1474 : Fix NPE in ExpressionResolver for SegmentationCandidate", "bug_id": "lens_3", "file": [{"additions": 11, "raw_url": "https://github.com/apache/lens/raw/24d4f1531497e8b877fe185a0ef742b18acf125c/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "blob_url": "https://github.com/apache/lens/blob/24d4f1531497e8b877fe185a0ef742b18acf125c/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "sha": "553468fe9b11ff85209776a76948b78a595ce182", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java?ref=24d4f1531497e8b877fe185a0ef742b18acf125c", "patch": "@@ -317,12 +317,14 @@ boolean hasAggregates() {\n     }\n \n     ExpressionContext getExpressionContext(String expr, String alias) {\n-      for (ExpressionContext ec : allExprsQueried.get(expr)) {\n-        if (ec.getSrcAlias().equals(alias)) {\n-          return ec;\n+      if (allExprsQueried.get(expr) != null) {\n+        for (ExpressionContext ec : allExprsQueried.get(expr)) {\n+          if (ec.getSrcAlias().equals(alias)) {\n+            return ec;\n+          }\n         }\n       }\n-      throw new IllegalArgumentException(\"no expression available for \" + expr + \" alias:\" + alias);\n+      return null;\n     }\n \n     boolean hasMeasures(String expr, CubeInterface cube) {\n@@ -540,8 +542,11 @@ private ASTNode getExprAst(ExpressionContext expressionContext) {\n       expressionContexts.add(expressionContext);\n       for (StorageCandidate sc : scSet) {\n         storageTableNames.add(sc.getStorageTable());\n-        expressionContexts.add(sc.getCubeQueryContext().getExprCtx()\n-          .getExpressionContext(expressionContext.getExprCol().getName(), expressionContext.getSrcAlias()));\n+        ExpressionContext ex = sc.getCubeQueryContext().getExprCtx().getExpressionContext(expressionContext.\n+            getExprCol().getName(), expressionContext.getSrcAlias());\n+        if (ex != null) {\n+          expressionContexts.add(ex);\n+        }\n       }\n       for (ExpressionContext ec : expressionContexts) {\n         for (CandidateTable table : ec.evaluableExpressions.keySet()) {", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/0debd08ca27e993990e55ce04fda795a487604bf", "parent": "https://github.com/apache/lens/commit/1924bbb018cbb4aa7cf8c0b2cf11376a053e3b9d", "message": "LENS-1199: NPE while closing session", "bug_id": "lens_4", "file": [{"additions": 5, "raw_url": "https://github.com/apache/lens/raw/0debd08ca27e993990e55ce04fda795a487604bf/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java", "blob_url": "https://github.com/apache/lens/blob/0debd08ca27e993990e55ce04fda795a487604bf/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java", "sha": "19a86c62db3c8345cf68176e71b273b56c9c3746", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/BaseLensService.java?ref=0debd08ca27e993990e55ce04fda795a487604bf", "patch": "@@ -306,13 +306,17 @@ private void doPasswdAuth(String userName, String password) {\n   public void closeSession(LensSessionHandle sessionHandle) throws LensException {\n     try {\n       LensSessionImpl session = getSession(sessionHandle);\n+      boolean shouldDecrementOpenedSessionCount = !session.getLensSessionPersistInfo().isMarkedForClose();\n       if (session.activeOperationsPresent()) {\n         session.markForClose();\n       } else {\n         cliService.closeSession(getHiveSessionHandle(sessionHandle));\n         SESSION_MAP.remove(sessionHandle.getPublicId().toString());\n+        log.info(\"Closed session {} for {} user\", sessionHandle, session.getLoggedInUser());\n+      }\n+      if (shouldDecrementOpenedSessionCount) {\n+        decrementSessionCountForUser(sessionHandle, session.getLoggedInUser());\n       }\n-      decrementSessionCountForUser(sessionHandle, session.getLoggedInUser());\n       if (!SESSION_MAP.containsKey(sessionHandle.getPublicId().toString())) {\n         // Inform query service\n         BaseLensService svc = LensServices.get().getService(QueryExecutionService.NAME);\n@@ -333,7 +337,6 @@ private void decrementSessionCountForUser(LensSessionHandle sessionHandle, Strin\n     }\n     synchronized (sessionUser) {\n       Integer sessionCount = SESSIONS_PER_USER.get(userName);\n-      log.info(\"Closed session {} for {} user\", sessionHandle, userName);\n       if (sessionCount == 1) {\n         SESSIONS_PER_USER.remove(userName);\n       } else {", "filename": "lens-server/src/main/java/org/apache/lens/server/BaseLensService.java"}, {"additions": 17, "raw_url": "https://github.com/apache/lens/raw/0debd08ca27e993990e55ce04fda795a487604bf/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java", "blob_url": "https://github.com/apache/lens/blob/0debd08ca27e993990e55ce04fda795a487604bf/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java", "sha": "33791eae0781cbd09f42a3047c7d807dbc282617", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java?ref=0debd08ca27e993990e55ce04fda795a487604bf", "patch": "@@ -26,6 +26,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Set;\n+import java.util.UUID;\n \n import javax.ws.rs.ClientErrorException;\n import javax.ws.rs.NotFoundException;\n@@ -41,6 +42,7 @@\n import org.apache.lens.api.LensSessionHandle;\n import org.apache.lens.api.StringList;\n import org.apache.lens.api.jaxb.LensJAXBContextResolver;\n+import org.apache.lens.api.query.*;\n import org.apache.lens.server.LensJerseyTest;\n import org.apache.lens.server.LensServerConf;\n import org.apache.lens.server.LensServices;\n@@ -483,6 +485,21 @@ public void testOpenSessionWithDatabase(MediaType mt) throws Exception {\n     }\n   }\n \n+  /**\n+   * Test multiple closeSession invocations for a session\n+   */\n+  @Test(dataProvider = \"mediaTypeData\")\n+  public void testCloseSessionMultipleTimes(MediaType mt) throws Exception {\n+    HiveSessionService sessionService = LensServices.get().getService(SessionService.NAME);\n+\n+    LensSessionHandle sessionHandle = sessionService.openSession(\"foo@localhost\", \"bar\", new HashMap<String, String>());\n+    Assert.assertNotNull(sessionHandle, \"Expected session to be opened\");\n+    sessionService.getSession(sessionHandle).addToActiveQueries(QueryHandle.fromString(UUID.randomUUID().toString()));\n+    // Closing multiple times should not cause any issues\n+    sessionService.closeSession(sessionHandle);\n+    sessionService.closeSession(sessionHandle);\n+  }\n+\n   /**\n    * Test acquire and release behaviour for closed sessions\n    */", "filename": "lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/4ffc235f4cbbb290dcf5e07da84185ec1aaa8437", "parent": "https://github.com/apache/lens/commit/480457a427a8ee8606ecd101527380ba24ad0124", "message": "Merge pull request #170 from InMobi/svc_stop_npe\n\nFix NPE in stop() when init() fails", "bug_id": "lens_5", "file": [{"additions": 6, "raw_url": "https://github.com/apache/lens/raw/4ffc235f4cbbb290dcf5e07da84185ec1aaa8437/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "blob_url": "https://github.com/apache/lens/blob/4ffc235f4cbbb290dcf5e07da84185ec1aaa8437/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "sha": "f345b7221c8b854d0057ff024a3d37f660429207", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServices.java?ref=4ffc235f4cbbb290dcf5e07da84185ec1aaa8437", "patch": "@@ -46,7 +46,7 @@\n import org.apache.lens.server.user.UserConfigLoaderFactory;\n \n /**\n- * The Class LensServices.\n+ * Manage lifecycle of all Lens services\n  */\n public class LensServices extends CompositeService implements ServiceProvider {\n \n@@ -313,7 +313,11 @@ public synchronized void stop() {\n       for (LensService service : lensServices) {\n         service.prepareStopping();\n       }\n-      timer.cancel();\n+\n+      if (timer != null) {\n+        timer.cancel();\n+      }\n+\n       try {\n         // persist all the services\n         persistLensServiceState();", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServices.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/0cdc2606b1f272bf300002baa895eb73f8961cf4", "parent": "https://github.com/apache/lens/commit/e07987cc33f48f4f5e92a365acc77abdcb06425e", "message": "Merge pull request #82 from InMobi/npes\n\nFix NPE in few places", "bug_id": "lens_6", "file": [{"additions": 7, "raw_url": "https://github.com/apache/lens/raw/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java", "blob_url": "https://github.com/apache/lens/blob/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java", "sha": "af1d6fb6dfdfaecc0729b6f9f69bcc8863e1a054", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java?ref=0cdc2606b1f272bf300002baa895eb73f8961cf4", "patch": "@@ -545,8 +545,9 @@ private GrillResultSet createResultSet(QueryContext context, boolean closeAfterF\n         // queries that do not have result\n         return null;\n       }\n-    } catch (HiveSQLException e) {\n-      throw new GrillException(\"Error creating result set\", e);\n+    } catch (HiveSQLException hiveErr) {\n+      handleHiveServerError(context, hiveErr);\n+      throw new GrillException(\"Error creating result set\", hiveErr);\n     }\n   }\n \n@@ -764,6 +765,10 @@ protected void checkInvalidSession(Exception e) {\n \n   protected void checkInvalidOperation(QueryHandle queryHandle, HiveSQLException exc) {\n     final OperationHandle operation = hiveHandles.get(queryHandle);\n+    if (operation == null) {\n+      LOG.info(\"No hive operation available for \" + queryHandle);\n+      return;\n+    }\n     if (exc.getMessage() != null && exc.getMessage().contains(\"Invalid OperationHandle:\")\n         && exc.getMessage().contains(operation.toString())) {\n       LOG.info(\"Hive operation \" + operation + \" for query \" + queryHandle + \" has become invalid\");", "filename": "grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java"}, {"additions": 6, "raw_url": "https://github.com/apache/lens/raw/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java", "sha": "1fbd29159934c2cc5947ef492a90cd579b8f5a7a", "changes": 13, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java?ref=0cdc2606b1f272bf300002baa895eb73f8961cf4", "patch": "@@ -396,11 +396,8 @@ private void updateStatus(final QueryHandle handle) throws GrillException {\n             ctx.setStatus(ctx.getDriverStatus().toQueryStatus());\n           } catch (GrillException exc) {\n             // Driver gave exception while updating status\n-            QueryStatus failedStatus =\n-                new QueryStatus(1.0, Status.FAILED, \"Status update failed\",\n-                    false, \"Status update failed\", exc.getMessage());\n-            ctx.setStatus(failedStatus);\n-            LOG.error(\"Status update failed for \" + handle + \" reason: \" + exc.getMessage());\n+            setFailedStatus(ctx, \"Status update failed\", exc.getMessage());\n+            LOG.error(\"Status update failed for \" + handle, exc);\n           }\n           //query is successfully executed by driver and\n           // if query result need not persisted, move the query to succeeded state\n@@ -487,15 +484,17 @@ public void run() {\n             FinishedGrillQuery finishedQuery = new FinishedGrillQuery(finished.getCtx());\n             if (finished.ctx.getStatus().getStatus()\n                 == Status.SUCCESSFUL) {\n-              GrillResultSet set = getResultset(finished.getCtx().getQueryHandle());\n-              if(set != null &&PersistentResultSet.class.isAssignableFrom(set.getClass())) {\n+              if (finished.ctx.getStatus().isResultSetAvailable()) {\n+                GrillResultSet set = getResultset(finished.getCtx().getQueryHandle());\n+                if(set != null &&PersistentResultSet.class.isAssignableFrom(set.getClass())) {\n                   GrillResultSetMetadata metadata = set.getMetadata();\n                   String outputPath = ((PersistentResultSet) set).getOutputPath();\n                   int rows = set.size();\n                   finishedQuery.setMetadataClass(metadata.getClass().getName());\n                   finishedQuery.setResult(outputPath);\n                   finishedQuery.setMetadata(mapper.writeValueAsString(metadata));\n                   finishedQuery.setRows(rows);\n+                }\n               }\n             }\n ", "filename": "grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java"}, {"additions": 5, "raw_url": "https://github.com/apache/lens/raw/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java", "blob_url": "https://github.com/apache/lens/blob/0cdc2606b1f272bf300002baa895eb73f8961cf4/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java", "sha": "9e4c9a4851581c192c03dcb8ba920b453aa5dae4", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java?ref=0cdc2606b1f272bf300002baa895eb73f8961cf4", "patch": "@@ -56,6 +56,11 @@ public void process(QueryEnded ended) {\n     QueryExecutionStatistics event = new QueryExecutionStatistics(\n         System.currentTimeMillis());\n     QueryContext ctx = queryService.getQueryContext(handle);\n+    if (ctx == null) {\n+      LOG.warn(\"Could not find the context for \" + handle + \" for event:\"\n+        + ended.getCurrentValue() + \". No stat generated\");\n+      return;\n+    }\n     event.setEndTime(ctx.getEndTime());\n     event.setStatus(ctx.getStatus());\n     event.setCause(ended.getCause() != null ? ended.getCause() : \"\");", "filename": "grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/fbe44ff0be1ceca163a3d74310fa10b5ac5918eb", "parent": "https://github.com/apache/lens/commit/68e01c2b40b15fc1f14e6071267823d77efd317c", "message": "LENS-1246 : Fix NPE in explainFailedAttempt in Lens Client", "bug_id": "lens_7", "file": [{"additions": 9, "raw_url": "https://github.com/apache/lens/raw/fbe44ff0be1ceca163a3d74310fa10b5ac5918eb/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java", "blob_url": "https://github.com/apache/lens/blob/fbe44ff0be1ceca163a3d74310fa10b5ac5918eb/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java", "sha": "3fd754e0d62ce5661fbe1dec0f0200a858ae5ad9", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java?ref=fbe44ff0be1ceca163a3d74310fa10b5ac5918eb", "patch": "@@ -58,15 +58,21 @@ public void explainFailedAttempt(LensClientServerConnectionException e) {\n     log.error(\"failed login attempt\", e);\n     switch (e.getErrorCode()) {\n     case 401:\n-      System.console().printf(\"username/password combination incorrect.\\n\");\n+      printError(\"username/password combination incorrect.\");\n       break;\n     case 500:\n-      System.console().printf(\"server unresponsive, Returned error code 500\\n\");\n+      printError(\"server unresponsive, Returned error code 500\");\n       break;\n     default:\n-      System.console().printf(\"ERROR: \" + e.getMessage() + \"\\n\");\n+      printError(\"ERROR: \" + e.getMessage());\n     }\n   }\n+  private void printError(String error) {\n+    if (System.console() != null) {\n+      System.console().printf(error + \"\\n\");\n+    }\n+    log.error(error);\n+  }\n \n   public LensClient getClient() {\n     if (client == null) {", "filename": "lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/77bc8c20b0a59f0349a9cfd8f51f48e00250b4b0", "parent": "https://github.com/apache/lens/commit/ca372c1dc28c79677d0f417370bf09fcf1a329e8", "message": "LENS-1246 : Fix NPE in explainFailedAttempt in Lens Client", "bug_id": "lens_8", "file": [{"additions": 9, "raw_url": "https://github.com/apache/lens/raw/77bc8c20b0a59f0349a9cfd8f51f48e00250b4b0/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java", "blob_url": "https://github.com/apache/lens/blob/77bc8c20b0a59f0349a9cfd8f51f48e00250b4b0/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java", "sha": "3fd754e0d62ce5661fbe1dec0f0200a858ae5ad9", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java?ref=77bc8c20b0a59f0349a9cfd8f51f48e00250b4b0", "patch": "@@ -58,15 +58,21 @@ public void explainFailedAttempt(LensClientServerConnectionException e) {\n     log.error(\"failed login attempt\", e);\n     switch (e.getErrorCode()) {\n     case 401:\n-      System.console().printf(\"username/password combination incorrect.\\n\");\n+      printError(\"username/password combination incorrect.\");\n       break;\n     case 500:\n-      System.console().printf(\"server unresponsive, Returned error code 500\\n\");\n+      printError(\"server unresponsive, Returned error code 500\");\n       break;\n     default:\n-      System.console().printf(\"ERROR: \" + e.getMessage() + \"\\n\");\n+      printError(\"ERROR: \" + e.getMessage());\n     }\n   }\n+  private void printError(String error) {\n+    if (System.console() != null) {\n+      System.console().printf(error + \"\\n\");\n+    }\n+    log.error(error);\n+  }\n \n   public LensClient getClient() {\n     if (client == null) {", "filename": "lens-client/src/main/java/org/apache/lens/client/LensClientSingletonWrapper.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/a89c1a6961d07b7beb80073a695981a9051047b6", "parent": "https://github.com/apache/lens/commit/0dfdaa9ecdd3f75cd8d8300e055822a99322cc2e", "message": "LENS-1214 : Fix NPE in await termination for query service", "bug_id": "lens_9", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/a89c1a6961d07b7beb80073a695981a9051047b6/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/a89c1a6961d07b7beb80073a695981a9051047b6/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "sha": "924466bccb50864fe323e69da548c0b4f9c19c01", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java?ref=a89c1a6961d07b7beb80073a695981a9051047b6", "patch": "@@ -1236,6 +1236,9 @@ private void awaitTermination(ExecutorService service) {\n   }\n \n   private void awaitTermination(QueryResultPurger service) {\n+    if (service == null) {\n+      return;\n+    }\n     try {\n       service.awaitTermination(1, TimeUnit.MINUTES);\n     } catch (InterruptedException e) {", "filename": "lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/020b651678969289ab12290d292d6043b734b144", "parent": "https://github.com/apache/lens/commit/df75a4b838f5572ff6ef2c7466681853ac00ecb4", "message": "LENS-1167 : Fix NPE when result formatting fails", "bug_id": "lens_10", "file": [{"additions": 4, "raw_url": "https://github.com/apache/lens/raw/020b651678969289ab12290d292d6043b734b144/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractFileFormatter.java", "blob_url": "https://github.com/apache/lens/blob/020b651678969289ab12290d292d6043b734b144/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractFileFormatter.java", "sha": "bafb2fbc6b5ee90197cecb0c30b73a77d7aa1124", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractFileFormatter.java?ref=020b651678969289ab12290d292d6043b734b144", "patch": "@@ -19,6 +19,7 @@\n package org.apache.lens.lib.query;\n \n import java.io.*;\n+import java.net.URI;\n \n import org.apache.lens.server.api.driver.LensResultSetMetadata;\n import org.apache.lens.server.api.query.QueryContext;\n@@ -94,15 +95,16 @@ public String getFinalOutputPath() {\n   @Override\n   public void writeExternal(ObjectOutput out) throws IOException {\n     out.writeUTF(metadata.toJson());\n-    out.writeUTF(finalPath.toString());\n+    out.writeObject(finalPath == null ? null : finalPath.toUri());\n     out.writeObject(numRows); // writeObject and readObject have handling for null objects\n     out.writeObject(fileSize);\n   }\n \n   @Override\n   public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n     metadata = LensResultSetMetadata.fromJson(in.readUTF());\n-    finalPath = new Path(in.readUTF());\n+    URI uri = (URI) in.readObject();\n+    finalPath = uri == null ? null : new Path(uri);\n     numRows = (Integer)in.readObject();\n     fileSize = (Long)in.readObject();\n   }", "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractFileFormatter.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/020b651678969289ab12290d292d6043b734b144/lens-server/src/main/java/org/apache/lens/server/query/ResultFormatter.java", "blob_url": "https://github.com/apache/lens/blob/020b651678969289ab12290d292d6043b734b144/lens-server/src/main/java/org/apache/lens/server/query/ResultFormatter.java", "sha": "41cf33bc311d3375b3eaab26d9b85bcc112a4b42", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/ResultFormatter.java?ref=020b651678969289ab12290d292d6043b734b144", "patch": "@@ -142,6 +142,8 @@ private void formatOutput(QueryContext ctx) {\n       metricsService.incrCounter(ResultFormatter.class, \"formatting-errors\");\n       log.warn(\"Exception while formatting result for {}\", queryHandle, e);\n       try {\n+        // set output formatter to null so that server restart is faster in case this query is not purged.\n+        ctx.setQueryOutputFormatter(null);\n         queryService.setFailedStatus(ctx, ERROR_MESSAGE, e);\n       } catch (LensException e1) {\n         log.error(\"Exception while setting failure for {}\", queryHandle, e1);", "filename": "lens-server/src/main/java/org/apache/lens/server/query/ResultFormatter.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/9b0a453de7059bf453a84f2c5945095151a6a9d7", "parent": "https://github.com/apache/lens/commit/d1a0e0e266b5f7ffd0ad1d5b742fb92e4a91eeb3", "message": "LENS-1357 : Fix NPE in stop lens services after a failed attempt of start", "bug_id": "lens_11", "file": [{"additions": 11, "raw_url": "https://github.com/apache/lens/raw/9b0a453de7059bf453a84f2c5945095151a6a9d7/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "blob_url": "https://github.com/apache/lens/blob/9b0a453de7059bf453a84f2c5945095151a6a9d7/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "sha": "a3e272ad8fe583cfbe529e6d2d6f4cc22ffc0ef3", "changes": 19, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServices.java?ref=9b0a453de7059bf453a84f2c5945095151a6a9d7", "patch": "@@ -411,16 +411,19 @@ public synchronized void stop() {\n       if (isServerStatePersistenceEnabled) {\n         try {\n           //1. shutdown serverSnapshotScheduler gracefully by allowing already triggered task (if any) to finish\n-          serverSnapshotScheduler.shutdown();\n-          try { //Wait for shutdown. Shutdown should be immediate in case no task is running at this point\n-            while (!serverSnapshotScheduler.awaitTermination(1, TimeUnit.MINUTES)) {\n-              log.info(\"Waiting for Lens-server-snapshotter to shutdown gracefully...\");\n+          if (serverSnapshotScheduler != null) {\n+            serverSnapshotScheduler.shutdown();\n+            try { //Wait for shutdown. Shutdown should be immediate in case no task is running at this point\n+              while (!serverSnapshotScheduler.awaitTermination(1, TimeUnit.MINUTES)) {\n+                log.info(\"Waiting for Lens-server-snapshotter to shutdown gracefully...\");\n+              }\n+            } catch (InterruptedException e) {\n+              log.error(\"Lens-server-snapshotter interrupted while shutting down\", e);\n             }\n-          } catch (InterruptedException e) {\n-            log.error(\"Lens-server-snapshotter interrupted while shutting down\" , e);\n+            log.info(\"Lens-server-snapshotter was shutdown\");\n+          } else {\n+            log.info(\"Lens-server-snapshotter wasn't started, so no need to shutdown\");\n           }\n-          log.info(\"Lens-server-snapshotter was shutdown\");\n-\n           //2. persist the latest state of all the services\n           persistLensServiceState();\n         } finally {", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServices.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/f4c6c11e9637107a63493b98e3bb7d50966e52c1", "parent": "https://github.com/apache/lens/commit/3862c384feae254d8360e4f530e5f2666327c4f9", "message": "LENS-775 : NPE on closing HadoopFileFormatter", "bug_id": "lens_12", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/f4c6c11e9637107a63493b98e3bb7d50966e52c1/lens-query-lib/src/main/java/org/apache/lens/lib/query/HadoopFileFormatter.java", "blob_url": "https://github.com/apache/lens/blob/f4c6c11e9637107a63493b98e3bb7d50966e52c1/lens-query-lib/src/main/java/org/apache/lens/lib/query/HadoopFileFormatter.java", "sha": "d556fb06f73da6643d764d38bfb7c08d0b3e38ee", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/HadoopFileFormatter.java?ref=f4c6c11e9637107a63493b98e3bb7d50966e52c1", "patch": "@@ -135,7 +135,9 @@ public void commit() throws IOException {\n    */\n   @Override\n   public void close() throws IOException {\n-    rowWriter.close(Reporter.NULL);\n+    if (null != rowWriter) {\n+      rowWriter.close(Reporter.NULL);\n+    }\n   }\n \n   @Override", "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/HadoopFileFormatter.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/e5a0ff19aa179fbc858dbb3f70308186875ec728", "parent": "https://github.com/apache/lens/commit/e6f585b73733e67ed0fddaa1cb6586ba527bc515", "message": "LENS-712 : Fixes NPE while initializing ScannedPaths", "bug_id": "lens_13", "file": [{"additions": 17, "raw_url": "https://github.com/apache/lens/raw/e5a0ff19aa179fbc858dbb3f70308186875ec728/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java", "blob_url": "https://github.com/apache/lens/blob/e5a0ff19aa179fbc858dbb3f70308186875ec728/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java", "sha": "4143525e4023176581153576c2b36c64f1e58980", "changes": 31, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java?ref=e5a0ff19aa179fbc858dbb3f70308186875ec728", "patch": "@@ -23,7 +23,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n-import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -69,7 +68,8 @@ public ScannedPaths(String path, String type) {\n    */\n   private List<String> getMatchedPaths(String path, String type) {\n     List<String> finalPaths = new ArrayList<>();\n-    FileSystem fs;\n+    InputStream resourceOrderIStream = null;\n+    FileSystem fs = null;\n \n     try {\n       fs = FileSystem.get(new URI(path), new Configuration());\n@@ -85,7 +85,6 @@ public ScannedPaths(String path, String type) {\n          * CASE 2 : DIR provided in path\n          **/\n         Path resourceOrderFile = null;\n-        InputStream resourceOrderIStream = null;\n         FileStatus[] statuses;\n         List<String> newMatches;\n         List<String> resources;\n@@ -99,8 +98,10 @@ public ScannedPaths(String path, String type) {\n           if (!fs.exists(resourceOrderFile)) {\n             /** Get matched resources recursively for all files **/\n             statuses = fs.globStatus(new Path(pt, \"*\"));\n-            for (FileStatus st : statuses) {\n-              finalPaths.add(st.getPath().toUri().toString());\n+            if (statuses != null) {\n+              for (FileStatus st : statuses) {\n+                finalPaths.add(st.getPath().toUri().toString());\n+              }\n             }\n           } else {\n             resourceFileFound = true;\n@@ -135,22 +136,24 @@ public ScannedPaths(String path, String type) {\n          * CASE 3 : REGEX provided in path\n          * */\n         FileStatus[] statuses = fs.globStatus(pt);\n-        for (FileStatus st : statuses) {\n-          List<String> newMatches = getMatchedPaths(st.getPath().toString(), type);\n-          if (newMatches != null) {\n-            finalPaths.addAll(newMatches);\n+        if (statuses != null) {\n+          for (FileStatus st : statuses) {\n+            List<String> newMatches = getMatchedPaths(st.getPath().toString(), type);\n+            if (newMatches != null) {\n+              finalPaths.addAll(newMatches);\n+            }\n           }\n         }\n       }\n \n       filterDirsAndJarType(fs, finalPaths);\n \n     } catch (FileNotFoundException fex) {\n-      log.error(\"File not found while scanning path.\", fex);\n-    } catch (URISyntaxException | IOException ex) {\n-      log.error(\"Exception while initializing PathScanner.\", ex);\n+      log.error(\"File not found while scanning path. Path: {}, Type: {}\", path, type, fex);\n     } catch (Exception e) {\n-      log.error(\"Exception while initializing PathScanner.\", e);\n+      log.error(\"Exception while initializing PathScanner. Path: {}, Type: {}\", path, type, e);\n+    } finally {\n+      IOUtils.closeQuietly(resourceOrderIStream);\n     }\n \n     return finalPaths;\n@@ -174,7 +177,7 @@ private void filterDirsAndJarType(FileSystem fs, List<String> matches) {\n         }\n       }\n     } catch (IOException e) {\n-      log.error(\"Exception while initializing filtering dirs.\", e);\n+      log.error(\"Exception while initializing filtering dirs\", e);\n     }\n   }\n }", "filename": "lens-server/src/main/java/org/apache/lens/server/util/ScannedPaths.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/c8d38f7cfdb630558339377e8b427c7fbee8b3cf", "parent": "https://github.com/apache/lens/commit/2e5748a8c5dcff9627b8d125820371f1d4667d61", "message": "LENS-648 : Fix NPE in CandidateTableResolver", "bug_id": "lens_14", "file": [{"additions": 43, "raw_url": "https://github.com/apache/lens/raw/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "sha": "f861ec7077a447d628912cb1ef639aebcdac8fd5", "changes": 79, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java?ref=c8d38f7cfdb630558339377e8b427c7fbee8b3cf", "patch": "@@ -544,23 +544,28 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n       Set<Dimension> dimSet = dimColEntry.getValue();\n       for (Dimension dim : dimSet) {\n         OptionalDimCtx optdim = cubeql.getOptionalDimensionMap().get(dim);\n-        candidatesReachableThroughRefs.addAll(optdim.requiredForCandidates);\n+        if (optdim != null) {\n+          candidatesReachableThroughRefs.addAll(optdim.requiredForCandidates);\n+        }\n       }\n       for (Dimension dim : dimSet) {\n-        for (CandidateTable candidate : removedCandidates.get(dim)) {\n-          if (!candidatesReachableThroughRefs.contains(candidate)) {\n-            if (candidate instanceof CandidateFact) {\n-              if (cubeql.getCandidateFacts().contains(candidate)) {\n-                LOG.info(\"Not considering fact:\" + candidate + \" as its required optional dims are not reachable\");\n-                cubeql.getCandidateFacts().remove(candidate);\n-                cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact,\n+        if (removedCandidates.get(dim) != null) {\n+          for (CandidateTable candidate : removedCandidates.get(dim)) {\n+            if (!candidatesReachableThroughRefs.contains(candidate)) {\n+              if (candidate instanceof CandidateFact) {\n+                if (cubeql.getCandidateFacts().contains(candidate)) {\n+                  LOG.info(\"Not considering fact:\" + candidate + \" as its required optional dims are not reachable\");\n+                  cubeql.getCandidateFacts().remove(candidate);\n+                  cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact,\n+                    CandidateTablePruneCause.columnNotFound(col));\n+                }\n+              } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())) {\n+                LOG.info(\"Not considering dimtable:\" + candidate + \" as its required optional dims are not reachable\");\n+                cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n+                cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(),\n+                  (CubeDimensionTable) candidate.getTable(),\n                   CandidateTablePruneCause.columnNotFound(col));\n               }\n-            } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())) {\n-              LOG.info(\"Not considering dimtable:\" + candidate + \" as its required optional dims are not reachable\");\n-              cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n-              cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n-                CandidateTablePruneCause.columnNotFound(col));\n             }\n           }\n         }\n@@ -583,32 +588,34 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n       Set<Dimension> dimSet = exprColEntry.getValue();\n       ExpressionContext ec = cubeql.getExprCtx().getExpressionContext(col.getExprCol(), col.getAlias());\n       for (Dimension dim : dimSet) {\n-        for (CandidateTable candidate : removedCandidates.get(dim)) {\n-          // check if evaluable expressions of this candidate are no more evaluable because dimension is not reachable\n-          // if no evaluable expressions exist, then remove the candidate\n-          Iterator<ExprSpecContext> escIter = ec.getEvaluableExpressions().get(candidate).iterator();\n-          while (escIter.hasNext()) {\n-            ExprSpecContext esc = escIter.next();\n-            if (esc.getExprDims().contains(dim)) {\n-              escIter.remove();\n+        if (removedCandidates.get(dim) != null) {\n+          for (CandidateTable candidate : removedCandidates.get(dim)) {\n+            // check if evaluable expressions of this candidate are no more evaluable because dimension is not reachable\n+            // if no evaluable expressions exist, then remove the candidate\n+            Iterator<ExprSpecContext> escIter = ec.getEvaluableExpressions().get(candidate).iterator();\n+            while (escIter.hasNext()) {\n+              ExprSpecContext esc = escIter.next();\n+              if (esc.getExprDims().contains(dim)) {\n+                escIter.remove();\n+              }\n             }\n-          }\n-          if (cubeql.getExprCtx().isEvaluable(col.getExprCol(), candidate)) {\n-            // candidate has other evaluable expressions\n-            continue;\n-          }\n-          if (candidate instanceof CandidateFact) {\n-            if (cubeql.getCandidateFacts().contains(candidate)) {\n-              LOG.info(\"Not considering fact:\" + candidate + \" as is not reachable through any optional dim\");\n-              cubeql.getCandidateFacts().remove(candidate);\n-              cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact,\n+            if (cubeql.getExprCtx().isEvaluable(col.getExprCol(), candidate)) {\n+              // candidate has other evaluable expressions\n+              continue;\n+            }\n+            if (candidate instanceof CandidateFact) {\n+              if (cubeql.getCandidateFacts().contains(candidate)) {\n+                LOG.info(\"Not considering fact:\" + candidate + \" as is not reachable through any optional dim\");\n+                cubeql.getCandidateFacts().remove(candidate);\n+                cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact,\n+                  CandidateTablePruneCause.expressionNotEvaluable(col.getExprCol()));\n+              }\n+            } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())) {\n+              LOG.info(\"Not considering dimtable:\" + candidate + \" as is not reachable through any optional dim\");\n+              cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n+              cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n                 CandidateTablePruneCause.expressionNotEvaluable(col.getExprCol()));\n             }\n-          } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())) {\n-            LOG.info(\"Not considering dimtable:\" + candidate + \" as is not reachable through any optional dim\");\n-            cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n-            cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n-              CandidateTablePruneCause.expressionNotEvaluable(col.getExprCol()));\n           }\n         }\n       }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java"}, {"additions": 15, "raw_url": "https://github.com/apache/lens/raw/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "blob_url": "https://github.com/apache/lens/blob/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "sha": "f9398588fc3127708fe57960771c9b02296e93ab", "changes": 16, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java?ref=c8d38f7cfdb630558339377e8b427c7fbee8b3cf", "patch": "@@ -745,6 +745,8 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n     cubeDimensions2.add(new BaseDimAttribute(new FieldSchema(\"dim11\", \"string\", \"basedim\")));\n     cubeDimensions2.add(new ReferencedDimAtrribute(new FieldSchema(\"dim12\", \"int\", \"ref dim\"), \"Dim2 refer\",\n       new TableReference(\"testdim2\", \"id\")));\n+    cubeDimensions2.add(new ReferencedDimAtrribute(new FieldSchema(\"dim22\", \"int\", \"ref dim\"), \"Dim2 refer\",\n+      \"dim2chain\", \"id\", null, null, null));\n \n     Map<String, String> cubeProperties = new HashMap<String, String>();\n     cubeProperties.put(MetastoreUtil.getCubeTimedDimensionListKey(BASE_CUBE_NAME),\n@@ -829,6 +831,16 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n             });\n           }\n         });\n+        add(new JoinChain(\"dim2chain\", \"dim2chain\", \"dim2chain\") {\n+          {\n+            addPath(new ArrayList<TableReference>() {\n+              {\n+                add(new TableReference(\"basecube\", \"dim2\"));\n+                add(new TableReference(\"testdim2\", \"id\"));\n+              }\n+            });\n+          }\n+        });\n       }\n     };\n \n@@ -861,6 +873,7 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n     dimensions.add(\"dim2\");\n     dimensions.add(\"dim11\");\n     dimensions.add(\"dim12\");\n+    dimensions.add(\"dim22\");\n     dimensions.add(\"d_time\");\n     dimensions.add(\"test_time_dim\");\n     client.createDerivedCube(BASE_CUBE_NAME, DERIVED_CUBE_NAME2, measures, dimensions, derivedProperties, 10L);\n@@ -941,7 +954,6 @@ private void createBaseCubeFacts(CubeMetastoreClient client) throws HiveExceptio\n     // create fact only with extra measures\n     factName = \"testFact2_BASE\";\n     factColumns = new ArrayList<FieldSchema>();\n-    factColumns.add(new FieldSchema(\"msr11\", \"int\", \"first measure\"));\n     factColumns.add(new FieldSchema(\"msr12\", \"float\", \"second measure\"));\n \n     // add dimensions of the cube\n@@ -988,6 +1000,8 @@ private void createBaseCubeFacts(CubeMetastoreClient client) throws HiveExceptio\n     factColumns.add(new FieldSchema(\"dim1\", \"string\", \"base dim\"));\n     factColumns.add(new FieldSchema(\"dim11\", \"string\", \"base dim\"));\n     factColumns.add(new FieldSchema(\"dim12\", \"string\", \"base dim\"));\n+    factColumns.add(new FieldSchema(\"dim22\", \"string\", \"base dim\"));\n+    factColumns.add(new FieldSchema(\"cityid\", \"int\", \"city id\"));\n \n     storageAggregatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     updates = new HashSet<UpdatePeriod>();", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java"}, {"additions": 14, "raw_url": "https://github.com/apache/lens/raw/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "blob_url": "https://github.com/apache/lens/blob/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "sha": "901b95e28121219d0f54ae6b81384f6e32f7e444", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java?ref=c8d38f7cfdb630558339377e8b427c7fbee8b3cf", "patch": "@@ -241,6 +241,20 @@ public void testCubeQueryWithTwoRefCols() throws Exception {\n     Assert.assertFalse(candidateFacts.contains(\"summary2\"));\n   }\n \n+  @Test\n+  public void testCubeQueryWithOptionalDimsRemoved() throws Exception {\n+    String hqlQuery = rewrite(\"select cityzip.code, dim22, msr11 from basecube where \" + TWO_DAYS_RANGE,\n+      conf);\n+    String joinExpr = \" join \" + getDbName()\n+      + \"c1_citytable citydim on basecube.cityid = citydim.id and (citydim.dt = 'latest') \"\n+      + \" join \" + getDbName() + \"c1_ziptable cityzip on citydim.zipcode = cityzip.code and (cityzip.dt = 'latest')\";\n+    String expected =\n+      getExpectedQuery(\"basecube\", \"select cityzip.code, basecube.dim22, basecube.msr11 FROM \",\n+        joinExpr, null, null, null,\n+        getWhereForHourly2days(\"basecube\", \"C1_testfact2_raw_base\"));\n+    TestCubeRewriter.compareQueries(hqlQuery, expected);\n+  }\n+\n   @Test\n   public void testDimensionQueryWithTwoRefCols() throws Exception {\n     Configuration tConf = new Configuration(conf);", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/resources/log4j.properties", "blob_url": "https://github.com/apache/lens/blob/c8d38f7cfdb630558339377e8b427c7fbee8b3cf/lens-cube/src/test/resources/log4j.properties", "sha": "deaf1e18e4f1ffdd45af87a212761717eaec2949", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/resources/log4j.properties?ref=c8d38f7cfdb630558339377e8b427c7fbee8b3cf", "patch": "@@ -32,5 +32,5 @@ log4j.appender.STDOUT.Threshold=WARN\n log4j.appender.TEST_LOG_FILE=org.apache.log4j.RollingFileAppender\n log4j.appender.TEST_LOG_FILE.File=target/test.log\n log4j.appender.TEST_LOG_FILE.layout=org.apache.log4j.PatternLayout\n-log4j.appender.TEST_LOG_FILE.layout.ConversionPattern=%d [%t] %-5p %c - %m%n\n+log4j.appender.TEST_LOG_FILE.layout.ConversionPattern=%d{dd MMM yyyy HH:mm:ss,SSS} [%t] %-5p %c %L %x - %m%n\n log4j.appender.TEST_LOG_FILE.Threshold=INFO", "filename": "lens-cube/src/test/resources/log4j.properties"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/17e663223314efe920ac8b87ed252649073bb7fe", "parent": "https://github.com/apache/lens/commit/4ded4c5c088f71f5cb6f4c7c76fd34ea25e3b7ec", "message": "LENS-574 : Fixing NPE in TestLensDAO", "bug_id": "lens_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/lens/raw/17e663223314efe920ac8b87ed252649073bb7fe/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java", "blob_url": "https://github.com/apache/lens/blob/17e663223314efe920ac8b87ed252649073bb7fe/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java", "sha": "f3f2cac25536a12c27a12ab20758acb8e9888b40", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java?ref=17e663223314efe920ac8b87ed252649073bb7fe", "patch": "@@ -76,7 +76,7 @@ public void testLensServerDAO() throws Exception {\n \n     try {\n       conn = service.lensServerDao.getConnection();\n-      stmt = conn.createStatement();\n+      stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\n       ResultSet rs = stmt.executeQuery(\"SELECT handle FROM finished_queries\");\n \n       JDBCResultSet jdbcResultSet = new JDBCResultSet(null, rs, false);", "filename": "lens-server/src/test/java/org/apache/lens/server/query/TestLensDAO.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/09419a577f6b4d4ac8890be10de7ddf256ef616b", "parent": "https://github.com/apache/lens/commit/6c4dba51bfebba2bd019508d2e44850ef964d150", "message": "LENS-849: NPE with CandidateTableResolver with expression dimensions", "bug_id": "lens_16", "file": [{"additions": 7, "raw_url": "https://github.com/apache/lens/raw/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "sha": "0ad761032b0a028aa8208d127aa06f3f55ee98f9", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java?ref=09419a577f6b4d4ac8890be10de7ddf256ef616b", "patch": "@@ -590,11 +590,13 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n           for (CandidateTable candidate : removedCandidates.get(dim)) {\n             // check if evaluable expressions of this candidate are no more evaluable because dimension is not reachable\n             // if no evaluable expressions exist, then remove the candidate\n-            Iterator<ExprSpecContext> escIter = ec.getEvaluableExpressions().get(candidate).iterator();\n-            while (escIter.hasNext()) {\n-              ExprSpecContext esc = escIter.next();\n-              if (esc.getExprDims().contains(dim)) {\n-                escIter.remove();\n+            if (ec.getEvaluableExpressions().get(candidate) != null) {\n+              Iterator<ExprSpecContext> escIter = ec.getEvaluableExpressions().get(candidate).iterator();\n+              while (escIter.hasNext()) {\n+                ExprSpecContext esc = escIter.next();\n+                if (esc.getExprDims().contains(dim)) {\n+                  escIter.remove();\n+                }\n               }\n             }\n             if (cubeql.getExprCtx().isEvaluable(col.getExprCol(), candidate)) {", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "blob_url": "https://github.com/apache/lens/blob/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "sha": "dc11b4ce4598bf6d1dc2dc7ad814bd8757ee34fd", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java?ref=09419a577f6b4d4ac8890be10de7ddf256ef616b", "patch": "@@ -698,6 +698,8 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n       new ExprSpec(\"avg(roundedmsr2)\", null, null), new ExprSpec(\"avg(equalsums)\", null, null),\n       new ExprSpec(\"case when substrexpr = 'xyz' then avg(msr5) when substrexpr = 'abc' then avg(msr4)/100 end\",\n         null, null)));\n+    exprs.add(new ExprColumn(new FieldSchema(\"msr2expr\", \"double\", \"nested expr\"), \"Nested expr\",\n+      new ExprSpec(\"case when cityStateName = 'xyz' then msr2 else 0 end\", null, null)));\n     exprs.add(new ExprColumn(new FieldSchema(\"nestedExprWithTimes\", \"double\", \"nested expr\"), \"Nested expr\",\n       new ExprSpec(\"avg(roundedmsr2)\", null, null), new ExprSpec(\"avg(equalsums)\", null, null),\n       new ExprSpec(\"case when substrexpr = 'xyz' then avg(msr5) when substrexpr = 'abc' then avg(msr4)/100 end\",", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java"}, {"additions": 12, "raw_url": "https://github.com/apache/lens/raw/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/TestExpressionResolver.java", "blob_url": "https://github.com/apache/lens/blob/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/TestExpressionResolver.java", "sha": "e90603ca1f3d80e7551e91edc7905b416a922e7c", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestExpressionResolver.java?ref=09419a577f6b4d4ac8890be10de7ddf256ef616b", "patch": "@@ -315,6 +315,17 @@ public void testMaterializedExpressionPickingExpression() throws Exception {\n     TestCubeRewriter.compareQueries(hqlQuery, expected);\n   }\n \n+  @Test\n+  public void testExpressionFieldWithOtherFields() throws Exception {\n+    // select with expression which requires dimension tables. And there is a candidate, which is removed because\n+    // the other fields which require the dimension tables as expression ones, are not reachable and\n+    // the expression is not evaluable on the candidate.\n+    LensException th =\n+      getLensExceptionInRewrite(\"select cityStateName, msr2expr, msr5, msr15 from testCube where \"\n+        + TWO_DAYS_RANGE, conf);\n+    Assert.assertEquals(th.getErrorCode(),\n+      LensCubeErrorCode.NO_CANDIDATE_FACT_AVAILABLE.getLensErrorInfo().getErrorCode());\n+  }\n   @Test\n   public void testMaterializedExpressionPickingMaterializedValue() throws Exception {\n     Configuration newConf = new Configuration(conf);\n@@ -371,7 +382,7 @@ public void testExpressionPruningForInvalidDim() throws Exception {\n     // since zipdim is not available in storage C2, first expression should be have been pruned\n     // And joining with statedim for second expression is not possible because of stateid missing in C2 tables\n     // or citydim.name missing in c2 tables.\n-    CubeQueryContext ctx = rewriteCtx(\"select citydim.name, cityaddress from\" + \" citydim\", newConf);\n+    CubeQueryContext ctx = rewriteCtx(\"select citydim.name, cityaddress from citydim\", newConf);\n     Assert.assertEquals(ctx.getDimPruningMsgs().get(ctx.getMetastoreClient().getDimension(\"citydim\"))\n       .get(ctx.getMetastoreClient().getDimensionTable(\"citytable\")).size(), 1);\n     CandidateTablePruneCause pruningMsg =", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestExpressionResolver.java"}, {"additions": 7, "raw_url": "https://github.com/apache/lens/raw/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/TestQuery.java", "blob_url": "https://github.com/apache/lens/blob/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-cube/src/test/java/org/apache/lens/cube/parse/TestQuery.java", "sha": "8e35ea9bd9cd727cc25ff011a03d6a38a6f0229f", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestQuery.java?ref=09419a577f6b4d4ac8890be10de7ddf256ef616b", "patch": "@@ -72,12 +72,14 @@ public TestQuery(String query) {\n      * Get the join query part, pre-join query and post-join query part from the trimmed query.\n      *\n      */\n-    if (trimmedQuery.indexOf(joinQueryPart) != -1) {\n+    if (StringUtils.isNotBlank(joinQueryPart)) {\n       this.preJoinQueryPart = trimmedQuery.substring(0, trimmedQuery.indexOf(joinQueryPart));\n-      if (getMinIndexOfClause() != -1) {\n-        this.postJoinQueryPart = trimmedQuery.substring(getMinIndexOfClause());\n-      }\n+      this.postJoinQueryPart = trimmedQuery.substring(getMinIndexOfClause());\n       prepareJoinStrings(trimmedQuery);\n+    } else {\n+      int minIndex = getMinIndexOfClause();\n+      this.preJoinQueryPart = trimmedQuery.substring(0, minIndex);\n+      this.postJoinQueryPart = trimmedQuery.substring(minIndex);\n     }\n   }\n \n@@ -162,7 +164,7 @@ private int getMinIndexOfClause(String query) {\n       }\n       minClauseIndex = clauseIndex < minClauseIndex ? clauseIndex : minClauseIndex;\n     }\n-    return minClauseIndex == Integer.MAX_VALUE ? -1 : minClauseIndex;\n+    return (minClauseIndex == Integer.MAX_VALUE || minClauseIndex == -1) ? query.length() : minClauseIndex;\n   }\n \n   private int getMinIndexOfJoinType() {", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestQuery.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestColumnarSQLRewriter.java", "blob_url": "https://github.com/apache/lens/blob/09419a577f6b4d4ac8890be10de7ddf256ef616b/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestColumnarSQLRewriter.java", "sha": "758f549d96d8a2102ea59f6c1481ee1b715fb54d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestColumnarSQLRewriter.java?ref=09419a577f6b4d4ac8890be10de7ddf256ef616b", "patch": "@@ -435,7 +435,7 @@ public void testRewrittenQuery() throws LensException {\n     String actual = qtest.rewrite(query, conf, hconf);\n \n     String expected = \"select ( sales_fact___fact . time_key ), ( time_dim___time_dim . day_of_week ), \"\n-            + \"week((time_dim__time_dim . day )), \"\n+            + \"week((time_dim___time_dim . day )), \"\n             + \"date(( time_dim___time_dim . day )), ( item_dim___item_dim . item_key ),  \"\n             + \"case  when (sum(alias2) =  0 ) then  0.0  else sum(alias2) end  as `dollars_sold` , \"\n             + \"format(sum(alias3),  4 ), format(avg(alias4),  '##################.###' ), \"", "filename": "lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestColumnarSQLRewriter.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/4f8647b2b1f5018cc6177edcb94294abd739f4c6", "parent": "https://github.com/apache/lens/commit/70cf0cc54fb223c00af708dea03938eda7e1cbf0", "message": "Fix NPE in few places", "bug_id": "lens_17", "file": [{"additions": 2, "raw_url": "https://github.com/apache/lens/raw/4f8647b2b1f5018cc6177edcb94294abd739f4c6/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java", "blob_url": "https://github.com/apache/lens/blob/4f8647b2b1f5018cc6177edcb94294abd739f4c6/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java", "sha": "224e30a048269a9d99fba437289e946180e68b6b", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java?ref=4f8647b2b1f5018cc6177edcb94294abd739f4c6", "patch": "@@ -722,7 +722,7 @@ protected boolean isSessionInvalid(HiveSQLException exc, SessionHandle sessionHa\n     }\n \n     // Check if there is underlying cause\n-    if (exc.getCause() instanceof HiveSQLException) {\n+    if (exc.getCause() != null && exc.getCause() instanceof HiveSQLException) {\n       isSessionInvalid((HiveSQLException) exc.getCause(), sessionHandle);\n     }\n     return false;\n@@ -771,7 +771,7 @@ protected void checkInvalidOperation(QueryHandle queryHandle, HiveSQLException e\n       return;\n     }\n \n-    if (exc.getCause() instanceof HiveSQLException) {\n+    if (exc.getCause() != null && exc.getCause() instanceof HiveSQLException) {\n       checkInvalidOperation(queryHandle, (HiveSQLException) exc.getCause());\n     }\n ", "filename": "grill-driver-hive/src/main/java/com/inmobi/grill/driver/hive/HiveDriver.java"}, {"additions": 5, "raw_url": "https://github.com/apache/lens/raw/4f8647b2b1f5018cc6177edcb94294abd739f4c6/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java", "blob_url": "https://github.com/apache/lens/blob/4f8647b2b1f5018cc6177edcb94294abd739f4c6/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java", "sha": "9e4c9a4851581c192c03dcb8ba920b453aa5dae4", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java?ref=4f8647b2b1f5018cc6177edcb94294abd739f4c6", "patch": "@@ -56,6 +56,11 @@ public void process(QueryEnded ended) {\n     QueryExecutionStatistics event = new QueryExecutionStatistics(\n         System.currentTimeMillis());\n     QueryContext ctx = queryService.getQueryContext(handle);\n+    if (ctx == null) {\n+      LOG.warn(\"Could not find the context for \" + handle + \" for event:\"\n+        + ended.getCurrentValue() + \". No stat generated\");\n+      return;\n+    }\n     event.setEndTime(ctx.getEndTime());\n     event.setStatus(ctx.getStatus());\n     event.setCause(ended.getCause() != null ? ended.getCause() : \"\");", "filename": "grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionStatisticsGenerator.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/382184c6bc383cda5a67f4645a2685cfd14f0109", "parent": "https://github.com/apache/lens/commit/25db3956a4d1d8df0fbd20f95cf07fb425490027", "message": "Fix NPE in closing queries", "bug_id": "lens_18", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/382184c6bc383cda5a67f4645a2685cfd14f0109/grill-examples/src/main/java/com/inmobi/grill/examples/SampleQueries.java", "blob_url": "https://github.com/apache/lens/blob/382184c6bc383cda5a67f4645a2685cfd14f0109/grill-examples/src/main/java/com/inmobi/grill/examples/SampleQueries.java", "sha": "bf62276b50dc36d120e59af8de7a3f75782fa3e0", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-examples/src/main/java/com/inmobi/grill/examples/SampleQueries.java?ref=382184c6bc383cda5a67f4645a2685cfd14f0109", "patch": "@@ -51,7 +51,9 @@ public static void main(String[] args) throws Exception {\n         System.exit(queries.retCode);\n       }\n     }finally {\n-      queries.close();\n+      if (queries != null) {\n+        queries.close();\n+      }\n     }\n   }\n ", "filename": "grill-examples/src/main/java/com/inmobi/grill/examples/SampleQueries.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/e71126cff02347d7926ca59a6555302893343a51", "parent": "https://github.com/apache/lens/commit/480457a427a8ee8606ecd101527380ba24ad0124", "message": "Fix NPE in stop() when init() fails", "bug_id": "lens_19", "file": [{"additions": 6, "raw_url": "https://github.com/apache/lens/raw/e71126cff02347d7926ca59a6555302893343a51/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "blob_url": "https://github.com/apache/lens/blob/e71126cff02347d7926ca59a6555302893343a51/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "sha": "f345b7221c8b854d0057ff024a3d37f660429207", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServices.java?ref=e71126cff02347d7926ca59a6555302893343a51", "patch": "@@ -46,7 +46,7 @@\n import org.apache.lens.server.user.UserConfigLoaderFactory;\n \n /**\n- * The Class LensServices.\n+ * Manage lifecycle of all Lens services\n  */\n public class LensServices extends CompositeService implements ServiceProvider {\n \n@@ -313,7 +313,11 @@ public synchronized void stop() {\n       for (LensService service : lensServices) {\n         service.prepareStopping();\n       }\n-      timer.cancel();\n+\n+      if (timer != null) {\n+        timer.cancel();\n+      }\n+\n       try {\n         // persist all the services\n         persistLensServiceState();", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServices.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/b33e6e18da3578afc442b016a7a168c8f0ba88db", "parent": "https://github.com/apache/lens/commit/558ac1c75c154a1b483900174c32e62d3ea2350c", "message": "LENS-575 : Fix NPE when unreachable dims are queried (amareshwari)", "bug_id": "lens_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/lens/raw/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-api/src/main/resources/cube-0.1.xsd", "blob_url": "https://github.com/apache/lens/blob/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-api/src/main/resources/cube-0.1.xsd", "sha": "cd898cce46645e4f6f2418ce598750b1f85a3e22", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-api/src/main/resources/cube-0.1.xsd?ref=b33e6e18da3578afc442b016a7a168c8f0ba88db", "patch": "@@ -448,7 +448,7 @@\n             </xs:documentation>\n           </xs:annotation>\n         </xs:attribute>\n-        <xs:attribute type=\"xs:boolean\" name=\"join_key\" default=\"false\">\n+        <xs:attribute type=\"xs:boolean\" name=\"join_key\" default=\"true\">\n           <xs:annotation>\n             <xs:documentation>\n               This flag will tell whether the attribute can be used as a join key or not", "filename": "lens-api/src/main/resources/cube-0.1.xsd"}, {"additions": 17, "raw_url": "https://github.com/apache/lens/raw/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "sha": "79d6d43079d6a39b6810e7d1a00279827712004b", "changes": 23, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java?ref=b33e6e18da3578afc442b016a7a168c8f0ba88db", "patch": "@@ -493,19 +493,30 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n       return;\n     }\n     // check for source columns for denorm columns\n-    Map<CandidateTable, List<String>> removedCandidates = new HashMap<CandidateTable, List<String>>();\n+    Map<CandidateTable, Collection<String>> removedCandidates = new HashMap<CandidateTable, Collection<String>>();\n     for (Map.Entry<Dimension, OptionalDimCtx> optdimEntry : cubeql.getOptionalDimensionMap().entrySet()) {\n       Dimension dim = optdimEntry.getKey();\n       OptionalDimCtx optdim = optdimEntry.getValue();\n       Iterator<CandidateTable> iter = optdim.requiredForCandidates.iterator();\n       while (iter.hasNext()) {\n         CandidateTable candidate = iter.next();\n-        List<String> colSet = cubeql.getAutoJoinCtx().getJoinPathFromColumns().get(dim).get(candidate.getBaseTable());\n-        if (!checkForColumnExists(candidate, colSet)) {\n-          LOG.info(\"Removing candidate\" + candidate + \" from requiredForCandidates of\" + dim + \", as columns:\" + colSet\n-            + \" do not exist\");\n+        boolean remove = false;\n+        if (cubeql.getAutoJoinCtx().getJoinPathFromColumns().get(dim) == null) {\n+          LOG.info(\"Removing candidate\" + candidate + \" from requiredForCandidates of\" + dim + \", as no join paths\"\n+            + \" exist\");\n+          remove = true;\n+          removedCandidates.put(candidate, optdim.colQueried);\n+        } else {\n+          List<String> colSet = cubeql.getAutoJoinCtx().getJoinPathFromColumns().get(dim).get(candidate.getBaseTable());\n+          if (!checkForColumnExists(candidate, colSet)) {\n+            LOG.info(\"Removing candidate\" + candidate + \" from requiredForCandidates of\" + dim + \", as columns:\"\n+              + colSet + \" do not exist\");\n+            remove = true;\n+            removedCandidates.put(candidate, colSet);\n+          }\n+        }\n+        if (remove) {\n           iter.remove();\n-          removedCandidates.put(candidate, colSet);\n         }\n       }\n     }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java"}, {"additions": 39, "raw_url": "https://github.com/apache/lens/raw/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "blob_url": "https://github.com/apache/lens/blob/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "sha": "49fabff9e100820f525ed9005182ac68f3b51132", "changes": 39, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java?ref=b33e6e18da3578afc442b016a7a168c8f0ba88db", "patch": "@@ -616,6 +616,8 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n       new TableReference(\"testdim2\", \"id\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"cdim2\", \"int\", \"ref dim\"), \"Dim2 refer\",\n       new TableReference(\"cycledim1\", \"id\"), NOW, null, null));\n+    cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"urdimid\", \"int\", \"ref dim\"), \"urdim refer\",\n+      new TableReference(\"unreachableDim\", \"id\"), null, null, null, false, 10L));\n \n     // denormalized reference\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"dim2big1\", \"bigint\", \"ref dim\"), \"Dim2 refer\",\n@@ -1573,6 +1575,8 @@ private void createTestDim2(CubeMetastoreClient client) throws HiveException {\n       new TableReference(\"citydim\", \"id\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"cityname\", \"string\", \"name\"), \"cityid\",\n       new TableReference(\"citydim\", \"name\"), null, null, 0.0, false));\n+    dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"urdimid\", \"int\", \"ref dim\"), \"urdim refer\",\n+      new TableReference(\"unreachableDim\", \"id\"), null, null, null, false, 10L));\n \n     // add ref dim through chain\n     dimAttrs.add(new ReferencedDimAtrribute(\n@@ -1909,6 +1913,40 @@ private void createZiptable(CubeMetastoreClient client) throws Exception {\n     client.createCubeDimensionTable(dimName, dimTblName, dimColumns, 0L, dumpPeriods, dimProps, storageTables);\n   }\n \n+  private void createUnReachabletable(CubeMetastoreClient client) throws Exception {\n+    String dimName = \"unreachableDim\";\n+\n+    Set<CubeDimAttribute> dimAttrs = new HashSet<CubeDimAttribute>();\n+    dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"id\", \"int\", \"code\")));\n+    dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"int\", \"code\")));\n+    Map<String, String> dimProps = new HashMap<String, String>();\n+    dimProps.put(MetastoreUtil.getDimTimedDimensionKey(dimName), TestCubeMetastoreClient.getDatePartitionKey());\n+    Dimension urDim = new Dimension(dimName, dimAttrs, dimProps, 0L);\n+    client.createDimension(urDim);\n+\n+    String dimTblName = \"unreachableDimTable\";\n+    List<FieldSchema> dimColumns = new ArrayList<FieldSchema>();\n+    dimColumns.add(new FieldSchema(\"id\", \"int\", \"code\"));\n+    dimColumns.add(new FieldSchema(\"name\", \"string\", \"field1\"));\n+\n+    Map<String, UpdatePeriod> dumpPeriods = new HashMap<String, UpdatePeriod>();\n+    ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n+    List<String> timePartCols = new ArrayList<String>();\n+    partCols.add(TestCubeMetastoreClient.getDatePartition());\n+    timePartCols.add(TestCubeMetastoreClient.getDatePartitionKey());\n+    StorageTableDesc s1 = new StorageTableDesc();\n+    s1.setInputFormat(TextInputFormat.class.getCanonicalName());\n+    s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n+    s1.setPartCols(partCols);\n+    s1.setTimePartCols(timePartCols);\n+    dumpPeriods.put(c1, HOURLY);\n+\n+    Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n+    storageTables.put(c1, s1);\n+\n+    client.createCubeDimensionTable(dimName, dimTblName, dimColumns, 0L, dumpPeriods, dimProps, storageTables);\n+  }\n+\n   private void createCountryTable(CubeMetastoreClient client) throws Exception {\n     String dimName = \"countrydim\";\n \n@@ -2050,6 +2088,7 @@ public void createSources(HiveConf conf, String dbName) throws Exception {\n       createCountryTable(client);\n       createStateTable(client);\n       createCubeFactsWithValidColumns(client);\n+      createUnReachabletable(client);\n     } catch (Exception exc) {\n       log.error(\"Exception while creating sources.\", exc);\n       throw exc;", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java"}, {"additions": 14, "raw_url": "https://github.com/apache/lens/raw/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/b33e6e18da3578afc442b016a7a168c8f0ba88db/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java", "sha": "ed0860503a170fa5d51c47a32366a12d0279718c", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java?ref=b33e6e18da3578afc442b016a7a168c8f0ba88db", "patch": "@@ -21,6 +21,8 @@\n \n import static org.apache.lens.cube.parse.CubeTestSetup.*;\n \n+import static org.testng.Assert.*;\n+\n import java.util.*;\n \n import org.apache.lens.cube.metadata.*;\n@@ -30,6 +32,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.ErrorMsg;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.parse.ParseException;\n import org.apache.hadoop.hive.ql.parse.SemanticException;\n@@ -739,4 +742,15 @@ public void testChainsWithMultipleStorage() throws ParseException, HiveException\n     Assert.assertFalse(cdimTables.contains(\"citytable3\"));\n     Assert.assertFalse(cdimTables.contains(\"citytable4\"));\n   }\n+\n+  @Test\n+  public void testUnreachableDim() throws ParseException, LensException {\n+    SemanticException e1 = getSemanticExceptionInRewrite(\"select urdimid from testdim2\", hconf);\n+    assertNotNull(e1);\n+    assertEquals(e1.getCanonicalErrorMsg().getErrorCode(), ErrorMsg.NO_DIM_HAS_COLUMN.getErrorCode());\n+\n+    SemanticException e2 = getSemanticExceptionInRewrite(\"select urdimid from testcube where \" + TWO_DAYS_RANGE, hconf);\n+    assertNotNull(e2);\n+    assertEquals(e2.getCanonicalErrorMsg().getErrorCode(), ErrorMsg.NO_CANDIDATE_FACT_AVAILABLE.getErrorCode());\n+  }\n }", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/992f815a09718a8449f15daa23f52304c1f12961", "parent": "https://github.com/apache/lens/commit/001970de5ff73bb6effba630c474550b286b2a3b", "message": "LENS-499: (incremental) Handle NPE in test cases", "bug_id": "lens_21", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/992f815a09718a8449f15daa23f52304c1f12961/lens-cube/src/main/java/org/apache/lens/cube/metadata/StorageConstants.java", "blob_url": "https://github.com/apache/lens/blob/992f815a09718a8449f15daa23f52304c1f12961/lens-cube/src/main/java/org/apache/lens/cube/metadata/StorageConstants.java", "sha": "8c1bca7ef7950cfbae15750b44cbfd09aff1bfc2", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/metadata/StorageConstants.java?ref=992f815a09718a8449f15daa23f52304c1f12961", "patch": "@@ -67,7 +67,9 @@ public static String getPartFilter(Map<String, String> parts) {\n \n   public static String getPartFilter(String partCol, String value, Map<String, String> parts) {\n     Map<String, String> allParts = Maps.newHashMap();\n-    allParts.putAll(parts);\n+    if (parts != null) {\n+      allParts.putAll(parts);\n+    }\n     allParts.put(partCol, value);\n     return getPartFilter(allParts);\n   }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/metadata/StorageConstants.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/8750e72169fa9b7c01b376bf165e9abcc9206e8d", "parent": "https://github.com/apache/lens/commit/44f4664c73f7ed6d8e2c7953ec59e0089aeb2c74", "message": "LENS-480 : Fix NPE while running Hive MR jobs (amareshwari)", "bug_id": "lens_22", "file": [{"additions": 2, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensApplication.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensApplication.java", "sha": "cb452e83e6edbe4f13a3f29b4ce0cbe45effcde3", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensApplication.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -28,7 +28,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.conf.Configuration;\n \n /**\n  * The Class LensApplication.\n@@ -40,7 +40,7 @@\n   public static final Log LOG = LogFactory.getLog(LensApplication.class);\n \n   /** The conf. */\n-  public static final HiveConf CONF = LensServerConf.get();\n+  public static final Configuration CONF = LensServerConf.getConf();\n \n   @Override\n   public Set<Class<?>> getClasses() {", "filename": "lens-server/src/main/java/org/apache/lens/server/LensApplication.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServer.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServer.java", "sha": "2f83fe1c46821fb8844ea405680da6a104ba75d6", "changes": 6, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServer.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -62,9 +62,6 @@\n   @Getter\n   private final List<HttpServer> serverList = new ArrayList<HttpServer>();\n \n-  /** The conf. */\n-  final HiveConf conf;\n-\n   /**\n    * This flag indicates that the lens server can run, When this is set to false, main thread bails out.\n    */\n@@ -87,7 +84,6 @@ static LensServer createLensServer(HiveConf conf) throws IOException {\n    * @throws IOException Signals that an I/O exception has occurred.\n    */\n   private LensServer(HiveConf conf) throws IOException {\n-    this.conf = conf;\n     startServices(conf);\n     String baseURI = conf.get(LensConfConstants.SERVER_BASE_URL, LensConfConstants.DEFAULT_SERVER_BASE_URL);\n     HttpServer server = GrizzlyHttpServerFactory.createHttpServer(UriBuilder.fromUri(baseURI).build(), getApp(),\n@@ -187,7 +183,7 @@ public static void main(String[] args) throws Exception {\n \n     printStartupMessage();\n     try {\n-      final LensServer thisServer = LensServer.createLensServer(LensServerConf.get());\n+      final LensServer thisServer = LensServer.createLensServer(LensServerConf.getHiveConf());\n \n       registerShutdownHook(thisServer);\n       registerDefaultExceptionHandler();", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServer.java"}, {"additions": 27, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServerConf.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServerConf.java", "sha": "4d333c6e3d4d79153cb811189ede91d78b5677f8", "changes": 31, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServerConf.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.lens.server;\n \n+import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.conf.HiveConf;\n \n /**\n@@ -29,22 +30,44 @@ private LensServerConf() {\n   }\n \n   private static final class ConfHolder {\n-    public static final HiveConf CONF = new HiveConf();\n+    public static final HiveConf HIVE_CONF = new HiveConf();\n+    // configuration object which does not load defaults and loads only lens*.xml files.\n+    public static final Configuration CONF = new Configuration(false);\n \n     static {\n+      HIVE_CONF.addResource(\"lensserver-default.xml\");\n+      HIVE_CONF.addResource(\"lens-site.xml\");\n       CONF.addResource(\"lensserver-default.xml\");\n       CONF.addResource(\"lens-site.xml\");\n     }\n   }\n \n   /**\n+   * The HiveConf object with lensserver-default.xml and lens-site.xml added.\n+   *\n    * @return the hive conf\n    */\n-  public static HiveConf get() {\n+  public static HiveConf getHiveConf() {\n+    return ConfHolder.HIVE_CONF;\n+  }\n+\n+  /**\n+   * The configuration object which does not load any defaults and loads only lens*.xml files. This is passed to\n+   * all drivers in configure\n+   *\n+   * @return the conf\n+   */\n+  public static Configuration getConf() {\n     return ConfHolder.CONF;\n   }\n \n-  public static HiveConf create() {\n-    return new HiveConf(ConfHolder.CONF);\n+  /**\n+   * Creates a new configuration object from Server HiveConf, Creation should would be called usually from tests\n+   * to modify some configurations.\n+   *\n+   * @return\n+   */\n+  public static HiveConf createHiveConf() {\n+    return new HiveConf(ConfHolder.HIVE_CONF);\n   }\n }", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServerConf.java"}, {"additions": 0, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "sha": "f6cb365dc35c016fca2edb3cf70b70448c993cf3", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServices.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -143,8 +143,6 @@ static void setInstance(LensServices newInstance) {\n   public synchronized void init(HiveConf hiveConf) {\n     if (getServiceState() == STATE.NOTINITED) {\n       conf = hiveConf;\n-      conf.addResource(\"lensserver-default.xml\");\n-      conf.addResource(\"lens-site.xml\");\n       conf.setVar(HiveConf.ConfVars.HIVE_SESSION_IMPL_CLASSNAME, LensSessionImpl.class.getCanonicalName());\n       serviceMode = conf.getEnum(SERVER_MODE,\n         SERVICE_MODE.valueOf(DEFAULT_SERVER_MODE));", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServices.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServletContextListener.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/LensServletContextListener.java", "sha": "61a0dd8ef960b78318cdd93fb11f61206cd49345", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServletContextListener.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -63,7 +63,7 @@ public void contextInitialized(ServletContextEvent sce) {\n     }\n \n     // start up all lens services\n-    HiveConf conf = LensServerConf.get();\n+    HiveConf conf = LensServerConf.getHiveConf();\n     LensServices services = LensServices.get();\n     services.init(conf);\n     services.start();", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServletContextListener.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "sha": "d53101051f8ef7573dfbbb798acf892f89bf7a61", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -40,6 +40,7 @@\n import org.apache.lens.api.query.QueryStatus.Status;\n import org.apache.lens.driver.cube.RewriteUtil;\n import org.apache.lens.driver.hive.HiveDriver;\n+import org.apache.lens.server.LensServerConf;\n import org.apache.lens.server.LensService;\n import org.apache.lens.server.LensServices;\n import org.apache.lens.server.api.LensConfConstants;\n@@ -304,7 +305,7 @@ private void loadDriversAndSelector() throws LensException {\n         try {\n           Class<?> clazz = Class.forName(driverClass);\n           LensDriver driver = (LensDriver) clazz.newInstance();\n-          driver.configure(conf);\n+          driver.configure(LensServerConf.getConf());\n \n           if (driver instanceof HiveDriver) {\n             driver.registerDriverEventListener(driverEventListener);", "filename": "lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/LensJerseyTest.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/LensJerseyTest.java", "sha": "7913845caea9f06f0db026ad06855cc87a7617ba", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/LensJerseyTest.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -98,7 +98,7 @@ protected URI getBaseUri() {\n   }\n \n   public HiveConf getServerConf() {\n-    return LensServerConf.get();\n+    return LensServerConf.getHiveConf();\n   }\n \n   /**\n@@ -119,7 +119,7 @@ public void startAll() throws Exception {\n     LensTestUtil.createTestDatabaseResources(new String[]{LensTestUtil.DB_WITH_JARS, LensTestUtil.DB_WITH_JARS_2},\n       hiveConf);\n \n-    LensServices.get().init(LensServerConf.get());\n+    LensServices.get().init(LensServerConf.getHiveConf());\n     LensServices.get().start();\n \n     // Check if mock service is started", "filename": "lens-server/src/test/java/org/apache/lens/server/LensJerseyTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/TestLensServer.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/TestLensServer.java", "sha": "eb27f61f5f7e09993e5fd9a27695f07683fa7dff", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/TestLensServer.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -34,7 +34,7 @@\n    */\n   @Test\n   public void testUIServer() throws IOException {\n-    HiveConf conf = new HiveConf(LensServerConf.get());\n+    HiveConf conf = LensServerConf.createHiveConf();\n     LensServer thisServer = LensServer.createLensServer(conf);\n     Assert.assertEquals(thisServer.getServerList().size(), 2);\n ", "filename": "lens-server/src/test/java/org/apache/lens/server/TestLensServer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/TestServiceProvider.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/TestServiceProvider.java", "sha": "af14fd6620376cc0e16103ec4eb7f650ab40c092", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/TestServiceProvider.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -42,7 +42,7 @@\n    */\n   @Test\n   public void testServiceProvider() throws Exception {\n-    HiveConf conf = LensServerConf.get();\n+    HiveConf conf = LensServerConf.getHiveConf();\n     Class<? extends ServiceProviderFactory> spfClass = conf.getClass(LensConfConstants.SERVICE_PROVIDER_FACTORY, null,\n       ServiceProviderFactory.class);\n ", "filename": "lens-server/src/test/java/org/apache/lens/server/TestServiceProvider.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/query/TestEventService.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/query/TestEventService.java", "sha": "ec752ffd66f142f99c108ab38a42468f4051e2b4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/query/TestEventService.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -179,7 +179,7 @@ public void onEvent(QueuePositionChange change) throws LensException {\n    */\n   @BeforeTest\n   public void setup() throws Exception {\n-    LensServices.get().init(LensServerConf.get());\n+    LensServices.get().init(LensServerConf.getHiveConf());\n     LensServices.get().start();\n     service = LensServices.get().getService(LensEventService.NAME);\n     assertNotNull(service);", "filename": "lens-server/src/test/java/org/apache/lens/server/query/TestEventService.java"}, {"additions": 16, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "sha": "0ab68c71667885abd7b43ea6f61345ec28a2553b", "changes": 16, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -1291,6 +1291,22 @@ public void testDefaultConfig() throws LensException {\n     Assert.assertEquals(queryService.getSession(lensSessionId).getHiveConf().getClassLoader(),\n       ctx.getDriverContext().getDriverConf(queryService.getDrivers().iterator().next()).getClassLoader());\n     Assert.assertTrue(ctx.isDriverQueryExplicitlySet());\n+    for (LensDriver driver : queryService.getDrivers()) {\n+      Configuration dconf = ctx.getDriverConf(driver);\n+      Assert.assertEquals(dconf.get(\"test.session.key\"), \"svalue\");\n+      // query specific conf\n+      Assert.assertEquals(dconf.get(\"test.query.conf\"), \"qvalue\");\n+      // lenssession default should be loaded\n+      Assert.assertNotNull(dconf.get(\"lens.query.enable.persistent.resultset\"));\n+      // lens site should be loaded\n+      Assert.assertEquals(dconf.get(\"test.lens.site.key\"), \"gsvalue\");\n+      // hive default variables should not be set\n+      Assert.assertNull(conf.get(\"hive.exec.local.scratchdir\"));\n+      // driver site should be loaded\n+      Assert.assertEquals(dconf.get(\"lens.driver.test.key\"), \"set\");\n+      // core default should not be loaded\n+      Assert.assertNull(dconf.get(\"fs.default.name\"));\n+    }\n   }\n \n   /**", "filename": "lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/session/TestSessionClassLoaders.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/session/TestSessionClassLoaders.java", "sha": "7dd4486b62ff8b09908cf040e2c75773efb26ff0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/session/TestSessionClassLoaders.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -43,7 +43,7 @@\n public class TestSessionClassLoaders {\n   private static final Log LOG = LogFactory.getLog(TestSessionClassLoaders.class);\n \n-  private final HiveConf conf = LensServerConf.create();\n+  private final HiveConf conf = LensServerConf.createHiveConf();\n   private HiveSessionService sessionService;\n \n   private static final String DB1 = TestSessionClassLoaders.class.getSimpleName() + \"_db1\";", "filename": "lens-server/src/test/java/org/apache/lens/server/session/TestSessionClassLoaders.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/session/TestSessionExpiry.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/session/TestSessionExpiry.java", "sha": "c1cb9da478f97d3dddf724cdfbacfa50ad786f59", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/session/TestSessionExpiry.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -43,7 +43,7 @@\n    * @throws Exception the exception\n    */\n   public void testSessionExpiry() throws Exception {\n-    HiveConf conf = LensServerConf.get();\n+    HiveConf conf = LensServerConf.getHiveConf();\n     conf.setVar(HiveConf.ConfVars.HIVE_SESSION_IMPL_CLASSNAME, LensSessionImpl.class.getName());\n     conf.setLong(LensConfConstants.SESSION_TIMEOUT_SECONDS, 1L);\n     CLIService cliService = new CLIService();", "filename": "lens-server/src/test/java/org/apache/lens/server/session/TestSessionExpiry.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/stats/TestLogStatisticsStore.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/stats/TestLogStatisticsStore.java", "sha": "c8a0ea5fe89b1a891691995fff754dc20d9ec8e5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/stats/TestLogStatisticsStore.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -79,7 +79,7 @@ public String getEventId() {\n   @Test\n   public void testLogStatisticsStore() throws Exception {\n     LogStatisticsStore store = new LogStatisticsStore();\n-    store.initialize(LensServerConf.get());\n+    store.initialize(LensServerConf.getHiveConf());\n     // Do some initialization work\n     StringWriter writer = new StringWriter();\n     Logger l = Logger.getLogger(MyLoggableLens.class);", "filename": "lens-server/src/test/java/org/apache/lens/server/stats/TestLogStatisticsStore.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/stats/TestStatisticsLogPartitionHandler.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/stats/TestStatisticsLogPartitionHandler.java", "sha": "f59131b52f18129d47bc0bed62d0fae7b3649a30", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/stats/TestStatisticsLogPartitionHandler.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -89,7 +89,7 @@ public void testPartitionHandler() throws Exception {\n   @Test\n   public void testQueryExecutionStatisticsTableCreation() throws Exception {\n     QueryExecutionStatistics stats = new QueryExecutionStatistics(System.currentTimeMillis());\n-    HiveConf conf = LensServerConf.get();\n+    HiveConf conf = LensServerConf.getHiveConf();\n     Table t = stats.getHiveTable(conf);\n     Hive h = getHiveClient(conf);\n     h.createTable(t);\n@@ -117,7 +117,7 @@ private File createDummyFile(String fileName) throws IOException {\n    */\n   private HiveConf configureHiveTables() {\n     assertNotNull(System.getProperty(\"hadoop.bin.path\"));\n-    HiveConf conf = LensServerConf.get();\n+    HiveConf conf = LensServerConf.getHiveConf();\n     try {\n       Hive hive = getHiveClient(conf);\n       Database database = new Database();", "filename": "lens-server/src/test/java/org/apache/lens/server/stats/TestStatisticsLogPartitionHandler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/user/TestUserConfigLoader.java", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/java/org/apache/lens/server/user/TestUserConfigLoader.java", "sha": "dd9351a79e104cb4f3a184ad25eb8982e3d03d89", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/user/TestUserConfigLoader.java?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -58,7 +58,7 @@\n    */\n   @BeforeTest(alwaysRun = true)\n   public void init() {\n-    conf = new HiveConf(LensServerConf.get());\n+    conf = new HiveConf(LensServerConf.getHiveConf());\n   }\n \n   /**", "filename": "lens-server/src/test/java/org/apache/lens/server/user/TestUserConfigLoader.java"}, {"additions": 5, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/resources/hivedriver-site.xml", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/resources/hivedriver-site.xml", "sha": "cd9c655f7a20f9cc9c9c92bd07bb18acb98d867f", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/resources/hivedriver-site.xml?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -72,4 +72,9 @@\n     <value>3</value>\n   </property>\n \n+  <property>\n+    <name>lens.driver.test.key</name>\n+    <value>set</value>\n+  </property>\n+\n </configuration>", "filename": "lens-server/src/test/resources/hivedriver-site.xml"}, {"additions": 5, "raw_url": "https://github.com/apache/lens/raw/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/resources/jdbcdriver-site.xml", "blob_url": "https://github.com/apache/lens/blob/8750e72169fa9b7c01b376bf165e9abcc9206e8d/lens-server/src/test/resources/jdbcdriver-site.xml", "sha": "1b14f546fa1b006f67eff16091fe736db2986b1f", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/resources/jdbcdriver-site.xml?ref=8750e72169fa9b7c01b376bf165e9abcc9206e8d", "patch": "@@ -47,4 +47,9 @@\n     <name>lens.driver.jdbc.explain.keyword</name>\n     <value>explain plan for</value>\n   </property>\n+  <property>\n+    <name>lens.driver.test.key</name>\n+    <value>set</value>\n+  </property>\n+\n </configuration>", "filename": "lens-server/src/test/resources/jdbcdriver-site.xml"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/511418a6be7d2f4e27c28531908d60a38efc19bb", "parent": "https://github.com/apache/lens/commit/1820fe0882084520f1f855e2ae4b58bdd4d41101", "message": "LENS-471 : Fix NPE while calculating priority (amareshwari)", "bug_id": "lens_23", "file": [{"additions": 4, "raw_url": "https://github.com/apache/lens/raw/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/priority/DurationBasedQueryPriorityDecider.java", "blob_url": "https://github.com/apache/lens/blob/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/priority/DurationBasedQueryPriorityDecider.java", "sha": "a26ed0c9ae2c54b7758f86c210b2b4c638ee5197", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/priority/DurationBasedQueryPriorityDecider.java?ref=511418a6be7d2f4e27c28531908d60a38efc19bb", "patch": "@@ -109,7 +109,10 @@ private float getDurationCost(AbstractQueryContext queryContext) throws LensExce\n   private float getTableWeights(Set<String> tables, AbstractQueryContext queryContext) {\n     float weight = 0;\n     for (String tblName : tables) {\n-      weight += queryContext.getDriverContext().getDriverRewriterPlan(driver).getTableWeight(tblName);\n+      Double tblWeight = queryContext.getDriverContext().getDriverRewriterPlan(driver).getTableWeight(tblName);\n+      if (tblWeight != null) {\n+        weight += tblWeight;\n+      }\n     }\n     return weight == 0 ? 1 : weight;\n   }", "filename": "lens-driver-hive/src/main/java/org/apache/lens/driver/hive/priority/DurationBasedQueryPriorityDecider.java"}, {"additions": 11, "raw_url": "https://github.com/apache/lens/raw/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java", "blob_url": "https://github.com/apache/lens/blob/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java", "sha": "36594e9570c0a341bd5f8c1756cf73c989c8f669", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java?ref=511418a6be7d2f4e27c28531908d60a38efc19bb", "patch": "@@ -809,6 +809,7 @@ public void testPriority() throws IOException, LensException, ParseException {\n     BufferedReader br = new BufferedReader(new InputStreamReader(\n       TestHiveDriver.class.getResourceAsStream(\"/priority_tests.data\")));\n     String line;\n+    int i = 0;\n     while ((line = br.readLine()) != null) {\n       String[] kv = line.split(\"\\\\s*:\\\\s*\");\n \n@@ -834,14 +835,18 @@ public QueryCost getCost() {\n             put(\"table1\", partitions);\n           }\n         });\n-      ctx.getDriverContext().getDriverRewriterPlan(driver).getTableWeights().putAll(\n-        new HashMap<String, Double>() {\n-          {\n-            put(\"table1\", 1.0);\n-          }\n-        });\n+      if (i < 1) {\n+        // table weights only for first calculation\n+        ctx.getDriverContext().getDriverRewriterPlan(driver).getTableWeights().putAll(\n+          new HashMap<String, Double>() {\n+            {\n+              put(\"table1\", 1.0);\n+            }\n+          });\n+      }\n       Assert.assertEquals(expected, driver.queryPriorityDecider.decidePriority(ctx));\n       Assert.assertEquals(Priority.NORMAL, alwaysNormalPriorityDecider.decidePriority(ctx));\n+      i++;\n     }\n     // test priority without fact partitions\n     AbstractQueryContext ctx = createContext(\"test priority query\", conf);", "filename": "lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-server-api/src/main/java/org/apache/lens/server/api/query/DriverSelectorQueryContext.java", "blob_url": "https://github.com/apache/lens/blob/511418a6be7d2f4e27c28531908d60a38efc19bb/lens-server-api/src/main/java/org/apache/lens/server/api/query/DriverSelectorQueryContext.java", "sha": "44eba2b0789755fc04993827294f452207aa3046", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server-api/src/main/java/org/apache/lens/server/api/query/DriverSelectorQueryContext.java?ref=511418a6be7d2f4e27c28531908d60a38efc19bb", "patch": "@@ -346,13 +346,13 @@ public void setDriverQueryPlan(LensDriver driver, DriverQueryPlan qp) {\n   void clearTransientStateAfterLaunch() {\n     for (DriverQueryContext driverCtx : driverQueryContextMap.values()) {\n       driverCtx.driverQueryPlan = null;\n-      driverCtx.rewriterPlan = null;\n     }\n   }\n \n   void clearTransientStateAfterCompleted() {\n     for (DriverQueryContext driverCtx : driverQueryContextMap.values()) {\n       driverCtx.driverSpecificConf = null;\n+      driverCtx.rewriterPlan = null;\n     }\n   }\n }", "filename": "lens-server-api/src/main/java/org/apache/lens/server/api/query/DriverSelectorQueryContext.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/c9edc68d85b37a33467d0010ff68dcccc6a8b101", "parent": "https://github.com/apache/lens/commit/954ee08c765e4648d3d81604bf307bb3117e8756", "message": "LENS-427 : NPE in CSVSerde (Sushil Mohanty) via jdhok", "bug_id": "lens_24", "file": [{"additions": 7, "raw_url": "https://github.com/apache/lens/raw/c9edc68d85b37a33467d0010ff68dcccc6a8b101/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java", "blob_url": "https://github.com/apache/lens/blob/c9edc68d85b37a33467d0010ff68dcccc6a8b101/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java", "sha": "98314566d6f614dadeb33bb8cad284fe65889bad", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java?ref=c9edc68d85b37a33467d0010ff68dcccc6a8b101", "patch": "@@ -151,9 +151,12 @@\n   @Override\n   public void initialize(final Configuration conf, final Properties tbl) throws SerDeException {\n     List<String> columnNames = new ArrayList<String>();\n-    String[] names = tbl.getProperty(LIST_COLUMNS).split(\"(?!\\\"),(?!\\\")\");\n-    for (String name : names) {\n-      columnNames.add(StringEscapeUtils.unescapeCsv(name));\n+\n+    if (tbl.getProperty(LIST_COLUMNS) != null) {\n+      String[] names = tbl.getProperty(LIST_COLUMNS).split(\"(?!\\\"),(?!\\\")\");\n+      for (String name : names) {\n+        columnNames.add(StringEscapeUtils.unescapeCsv(name));\n+      }\n     }\n     String columnTypeProperty = tbl.getProperty(LIST_COLUMN_TYPES);\n     columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);\n@@ -472,6 +475,7 @@ public ObjectInspector getObjectInspector() throws SerDeException {\n     return Text.class;\n   }\n \n+  @Override\n   public SerDeStats getSerDeStats() {\n     return null;\n   }", "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/CSVSerde.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/252d67b9c4ac3e28dcb7cc3f813a1f8c52798fb9", "parent": "https://github.com/apache/lens/commit/1b0e5846b6227cf2dbeb46e4c8e09eae328fc4ff", "message": "LENS-380 NPE while compressing the result (Amareshwari via jdhok)", "bug_id": "lens_25", "file": [{"additions": 6, "raw_url": "https://github.com/apache/lens/raw/252d67b9c4ac3e28dcb7cc3f813a1f8c52798fb9/lens-query-lib/src/main/java/org/apache/lens/lib/query/ZipFileFormatter.java", "blob_url": "https://github.com/apache/lens/blob/252d67b9c4ac3e28dcb7cc3f813a1f8c52798fb9/lens-query-lib/src/main/java/org/apache/lens/lib/query/ZipFileFormatter.java", "sha": "66969686a7d70ec02f3593c151c4f9c2c4f9b8b0", "changes": 11, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/ZipFileFormatter.java?ref=252d67b9c4ac3e28dcb7cc3f813a1f8c52798fb9", "patch": "@@ -115,7 +115,6 @@ public void setupOutputs() throws IOException {\n     } else {\n       out = new OutputStreamWriter(zipOut, encoding);\n     }\n-    System.out.println(\"Setup outputs done\");\n   }\n \n   private String getQueryResultFileName() {\n@@ -143,10 +142,12 @@ public void commit() throws IOException {\n   @Override\n   public void close() throws IOException {\n     if (!closed) {\n-      out.flush();\n-      zipOut.closeEntry();\n-      zipOut.close();\n-      out.close();\n+      if (out != null) {\n+        out.flush();\n+        zipOut.closeEntry();\n+        zipOut.close();\n+        out.close();\n+      }\n       closed = true;\n     }\n   }", "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/ZipFileFormatter.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/8ef8cf42bc9d2d31108929e628cf006e33cea3fb", "parent": "https://github.com/apache/lens/commit/ea2430e30d1f2564d6ecb34dba8a7ce1eae09f77", "message": "LENS-225 : Fix NPE in JoinResolver (Rajat Khandelwal via amareshwari)", "bug_id": "lens_26", "file": [{"additions": 6, "raw_url": "https://github.com/apache/lens/raw/8ef8cf42bc9d2d31108929e628cf006e33cea3fb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/8ef8cf42bc9d2d31108929e628cf006e33cea3fb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "sha": "7d8339bc36bc6ff9ad6c2ba9db045bdfb280e804", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=8ef8cf42bc9d2d31108929e628cf006e33cea3fb", "patch": "@@ -755,6 +755,8 @@ private void pruneAllPaths(final Map<Dimension, CandidateDim> dimsToQuery) {\n       }\n       // prune allPaths with qdims\n       LOG.info(\"pruning allPaths before generating all permutations.\");\n+      LOG.info(\"allPaths: \" + allPaths);\n+      LOG.info(\"qdims: \" + qdims);\n       pruneAllPathsWithQueriedDims(allPaths, qdims);\n \n       // Number of paths in each path set\n@@ -824,13 +826,11 @@ public void remove() {\n     private void pruneAllPathsWithQueriedDims\n       (Map<Aliased<Dimension>, List<SchemaGraph.JoinPath>> allPaths, Set<Dimension> qdims) {\n       Iterator<Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>>> iter = allPaths.entrySet().iterator();\n-      while(iter.hasNext()) {\n+      while (iter.hasNext()) {\n         Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>> cur = iter.next();\n-        if(cur.getKey().getAlias() == null) {\n-          if(!qdims.contains(cur.getKey().getObject())) {\n-            LOG.info(\"removing from allPaths: \" + cur);\n-            iter.remove();\n-          }\n+        if (!qdims.contains(cur.getKey().getObject())) {\n+          LOG.info(\"removing from allPaths: \" + cur);\n+          iter.remove();\n         }\n       }\n     }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "parent": "https://github.com/apache/lens/commit/39b0a4bb46b5725a1029d6313cd14ccf3e85ad5c", "message": "LENS-226 : Fixes NPE in JoinResolver (Rajat Khandelwal via amareshwari)", "bug_id": "lens_27", "file": [{"additions": 8, "raw_url": "https://github.com/apache/lens/raw/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/Aliased.java", "blob_url": "https://github.com/apache/lens/blob/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/Aliased.java", "sha": "56fe9fc1e0aef2786ac8c66a49032254efcbcaa1", "changes": 18, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/Aliased.java?ref=3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "patch": "@@ -18,23 +18,21 @@\n  */\n package org.apache.lens.cube.parse;\n \n-import lombok.AllArgsConstructor;\n-import lombok.EqualsAndHashCode;\n-import lombok.Getter;\n-import lombok.Setter;\n import org.apache.lens.cube.metadata.Named;\n \n-@EqualsAndHashCode\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n @AllArgsConstructor\n public class Aliased<T extends Named> {\n-  @Getter @Setter T object;\n-  @Getter @Setter String alias;\n-  public String getFinalAlias() {\n-    return alias == null ? object.getName() : alias;\n-  }\n+  T object;\n+  String alias;\n+\n   public static <K extends Named> Aliased<K> create(K obj) {\n     return create(obj, null);\n   }\n+\n   public static <K extends Named> Aliased<K> create(K obj, String alias) {\n     return new Aliased<K>(obj, alias);\n   }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/Aliased.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/DenormalizationResolver.java", "blob_url": "https://github.com/apache/lens/blob/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/DenormalizationResolver.java", "sha": "35c6da0581eea790dd2d52eb4707f0a37b53394e", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/DenormalizationResolver.java?ref=3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "patch": "@@ -401,7 +401,8 @@ public void rewriteContext(CubeQueryContext cubeql) throws SemanticException {\n           }\n \n           if (cubeql.getCandidateDimTables().get(dim).size() == 0) {\n-            throw new SemanticException(ErrorMsg.NO_DIM_HAS_COLUMN, cubeql.getColumnsQueried(dim.getName()).toString());\n+            throw new SemanticException(ErrorMsg.NO_DIM_HAS_COLUMN,\n+              dim.toString(), cubeql.getColumnsQueried(dim.getName()).toString());\n           }\n         }\n       }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/DenormalizationResolver.java"}, {"additions": 50, "raw_url": "https://github.com/apache/lens/raw/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "sha": "19289673f0999eddc64426467c3ff447ef944a2e", "changes": 62, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "patch": "@@ -171,19 +171,21 @@ public JoinTree mergeJoinChains(Map<Aliased<Dimension>, List<TableRelationship>>\n       return root;\n     }\n   }\n-\n+  @Data\n+  @ToString(exclude = \"parent\")\n+  @EqualsAndHashCode(exclude = \"parent\")\n   public static class JoinTree {\n     //parent of the node\n     JoinTree parent;\n     // current table is parentRelationship.destTable;\n     TableRelationship parentRelationship;\n     // Alias for the join clause\n-    @Getter @Setter String alias;\n+    String alias;\n     public Map<TableRelationship, JoinTree> subtrees = new LinkedHashMap<TableRelationship, JoinTree>();\n     // Number of nodes from root to this node. depth of root is 0. Unused for now.\n-    @Getter private int depthFromRoot;\n+    private int depthFromRoot;\n     // join type of the current table.\n-    @Getter @Setter JoinType joinType;\n+    JoinType joinType;\n \n     public static JoinTree createRoot() {\n       return new JoinTree(null, null, 0);\n@@ -227,7 +229,9 @@ public int getNumEdges() {\n       }\n       return ret;\n     }\n-\n+    public boolean isLeaf() {\n+      return this.subtrees.isEmpty();\n+    }\n     // Breadth First Traversal. Unused currently.\n     public Iterator<JoinTree> bft() {\n       return new Iterator<JoinTree>() {\n@@ -281,6 +285,18 @@ public void remove() {\n         }\n       };\n     }\n+\n+    public Set<JoinTree> leaves() {\n+      Set<JoinTree> leaves = new HashSet<JoinTree>();\n+      Iterator<JoinTree> dft = dft();\n+      while(dft.hasNext()) {\n+        JoinTree cur = dft.next();\n+        if(cur.isLeaf()) {\n+          leaves.add(cur);\n+        }\n+      }\n+      return leaves;\n+    }\n   }\n \n   /**\n@@ -420,16 +436,14 @@ public String getFromString(String fromTable, CandidateFact fact, Set<Dimension>\n         return fromString;\n       }\n       // Compute the merged join clause string for the min cost joinclause\n-      String clause = getMergedJoinClause(cubeql.getAutoJoinCtx().getJoinClause(fact), dimsToQuery,\n-          qdims, cubeql);\n+      String clause = getMergedJoinClause(cubeql.getAutoJoinCtx().getJoinClause(fact), dimsToQuery);\n \n       fromString += clause;\n       return fromString;\n     }\n \n     // Some refactoring needed to account for multiple join paths\n-    public String getMergedJoinClause(JoinClause joinClause,\n-      Map<Dimension, CandidateDim> dimsToQuery, Set<Dimension> qdims, CubeQueryContext cubeql) {\n+    public String getMergedJoinClause(JoinClause joinClause, Map<Dimension, CandidateDim> dimsToQuery) {\n       Set<String> clauses = new LinkedHashSet<String>();\n       String joinTypeStr = \"\";\n       JoinType joinType = JoinType.INNER;\n@@ -444,8 +458,6 @@ public String getMergedJoinClause(JoinClause joinClause,\n         }\n       }\n \n-      //TODO: prune from tails according to qdims.contains(dimensionAliased.getObject())) {\n-\n       Iterator<JoinTree> iter = joinClause.joinTree.dft();\n       while (iter.hasNext()) {\n         JoinTree cur = iter.next();\n@@ -734,11 +746,17 @@ private void pruneAllPaths(final Map<Dimension, CandidateDim> dimsToQuery) {\n      */\n     private Iterator<JoinClause> getJoinClausesForAllPaths(final CandidateFact fact,\n         final Set<Dimension> qdims, final CubeQueryContext cubeql) {\n-      Map<Aliased<Dimension>, List<SchemaGraph.JoinPath>> allPaths = this.allPaths;\n+      Map<Aliased<Dimension>, List<SchemaGraph.JoinPath>> allPaths;\n       // if fact is passed only look at paths possible from fact to dims\n       if (fact != null) {\n         allPaths = pruneFactPaths(cubeql.getCube(), fact);\n+      } else {\n+        allPaths = new LinkedHashMap<Aliased<Dimension>, List<SchemaGraph.JoinPath>>(this.allPaths);\n       }\n+      // prune allPaths with qdims\n+      LOG.info(\"pruning allPaths before generating all permutations.\");\n+      pruneAllPathsWithQueriedDims(allPaths, qdims);\n+\n       // Number of paths in each path set\n       final int groupSizes[] = new int[allPaths.values().size()];\n       // Total number of elements in the cartesian product\n@@ -797,6 +815,26 @@ public void remove() {\n       };\n     }\n \n+    /**\n+     * Given allPaths, it will remove entries where key is a non-join chain dimension and not contained\n+     * in qdims\n+     * @param allPaths\n+     * @param qdims\n+     */\n+    private void pruneAllPathsWithQueriedDims\n+      (Map<Aliased<Dimension>, List<SchemaGraph.JoinPath>> allPaths, Set<Dimension> qdims) {\n+      Iterator<Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>>> iter = allPaths.entrySet().iterator();\n+      while(iter.hasNext()) {\n+        Map.Entry<Aliased<Dimension>, List<SchemaGraph.JoinPath>> cur = iter.next();\n+        if(cur.getKey().getAlias() == null) {\n+          if(!qdims.contains(cur.getKey().getObject())) {\n+            LOG.info(\"removing from allPaths: \" + cur);\n+            iter.remove();\n+          }\n+        }\n+      }\n+    }\n+\n     public Set<Dimension> pickOptionalTables(final CandidateFact fact,\n         Set<Dimension> qdims, CubeQueryContext cubeql) throws SemanticException {\n       // Find the min cost join clause and add dimensions in the clause as optional dimensions", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java"}, {"additions": 103, "raw_url": "https://github.com/apache/lens/raw/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "blob_url": "https://github.com/apache/lens/blob/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "sha": "da9e778a6c35c21e12ed75ffb5a99dd04c572fa7", "changes": 229, "status": "modified", "deletions": 126, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java?ref=3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "patch": "@@ -21,20 +21,10 @@\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n+\n+import org.apache.lens.cube.metadata.*;\n \n-import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.api.Database;\n@@ -47,29 +37,11 @@\n import org.apache.hadoop.hive.ql.session.SessionState;\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.mapred.TextInputFormat;\n-import org.apache.lens.cube.metadata.BaseDimAttribute;\n-import org.apache.lens.cube.metadata.ColumnMeasure;\n-import org.apache.lens.cube.metadata.CubeDimAttribute;\n-import org.apache.lens.cube.metadata.CubeFactTable;\n-import org.apache.lens.cube.metadata.CubeMeasure;\n-import org.apache.lens.cube.metadata.CubeMetastoreClient;\n-import org.apache.lens.cube.metadata.Dimension;\n-import org.apache.lens.cube.metadata.ExprColumn;\n-import org.apache.lens.cube.metadata.HDFSStorage;\n-import org.apache.lens.cube.metadata.HierarchicalDimAttribute;\n-import org.apache.lens.cube.metadata.InlineDimAttribute;\n-import org.apache.lens.cube.metadata.JoinChain;\n-import org.apache.lens.cube.metadata.MetastoreConstants;\n-import org.apache.lens.cube.metadata.MetastoreUtil;\n-import org.apache.lens.cube.metadata.ReferencedDimAtrribute;\n-import org.apache.lens.cube.metadata.StorageConstants;\n-import org.apache.lens.cube.metadata.StoragePartitionDesc;\n-import org.apache.lens.cube.metadata.StorageTableDesc;\n-import org.apache.lens.cube.metadata.TableReference;\n-import org.apache.lens.cube.metadata.TestCubeMetastoreClient;\n-import org.apache.lens.cube.metadata.UpdatePeriod;\n+\n import org.testng.Assert;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n /*\n  * Here is the cube test setup\n  *\n@@ -151,7 +123,7 @@ public static void init() {\n     // Figure out last hour\n     cal.add(Calendar.HOUR_OF_DAY, -1);\n     lastHour = cal.getTime();\n-    log.debug(\"LastHour:{}\",lastHour);\n+    log.debug(\"LastHour:{}\", lastHour);\n \n     cal.setTime(now);\n     cal.add(Calendar.DAY_OF_MONTH, -1);\n@@ -173,14 +145,14 @@ public static void init() {\n     cal.add(Calendar.DAY_OF_MONTH, -2);\n     before4daysStart = cal.getTime();\n     twoDaysRangeBefore4days =\n-        \"time_range_in(dt, '\" + CubeTestSetup.getDateUptoHours(before4daysStart) + \"','\"\n-            + CubeTestSetup.getDateUptoHours(before4daysEnd) + \"')\";\n+      \"time_range_in(dt, '\" + CubeTestSetup.getDateUptoHours(before4daysStart) + \"','\"\n+        + CubeTestSetup.getDateUptoHours(before4daysEnd) + \"')\";\n \n     twoDaysRange = \"time_range_in(dt, '\" + getDateUptoHours(twodaysBack) + \"','\" + getDateUptoHours(now) + \"')\";\n     twoMonthsRangeUptoMonth =\n-        \"time_range_in(dt, '\" + getDateUptoMonth(twoMonthsBack) + \"','\" + getDateUptoMonth(now) + \"')\";\n+      \"time_range_in(dt, '\" + getDateUptoMonth(twoMonthsBack) + \"','\" + getDateUptoMonth(now) + \"')\";\n     twoMonthsRangeUptoHours =\n-        \"time_range_in(dt, '\" + getDateUptoHours(twoMonthsBack) + \"','\" + getDateUptoHours(now) + \"')\";\n+      \"time_range_in(dt, '\" + getDateUptoHours(twoMonthsBack) + \"','\" + getDateUptoHours(now) + \"')\";\n \n     // calculate lastHourTimeRange\n     setLastHourTimeRange();\n@@ -211,7 +183,7 @@ public static String getExpectedQuery(String cubeName, String selExpr, String wh\n   }\n \n   public static String getExpectedQuery(String cubeName, String selExpr, String whereExpr, String postWhereExpr,\n-      Map<String, String> storageTableToWhereClause, List<String> notLatestConditions) {\n+    Map<String, String> storageTableToWhereClause, List<String> notLatestConditions) {\n     StringBuilder expected = new StringBuilder();\n     int numTabs = storageTableToWhereClause.size();\n     Assert.assertEquals(1, numTabs);\n@@ -223,8 +195,8 @@ public static String getExpectedQuery(String cubeName, String selExpr, String wh\n       expected.append(cubeName);\n       expected.append(\" WHERE \");\n       expected.append(\"(\");\n-      if(notLatestConditions!= null) {\n-        for(String cond: notLatestConditions) {\n+      if (notLatestConditions != null) {\n+        for (String cond : notLatestConditions) {\n           expected.append(cond).append(\" AND \");\n         }\n       }\n@@ -240,10 +212,12 @@ public static String getExpectedQuery(String cubeName, String selExpr, String wh\n     }\n     return expected.toString();\n   }\n+\n   public static String getExpectedQuery(String cubeName, String selExpr, String whereExpr, String postWhereExpr,\n     String rangeWhere, String storageTable) {\n     return getExpectedQuery(cubeName, selExpr, whereExpr, postWhereExpr, rangeWhere, storageTable, null);\n   }\n+\n   public static String getExpectedQuery(String cubeName, String selExpr, String whereExpr, String postWhereExpr,\n     String rangeWhere, String storageTable, List<String> notLatestConditions) {\n     StringBuilder expected = new StringBuilder();\n@@ -253,8 +227,8 @@ public static String getExpectedQuery(String cubeName, String selExpr, String wh\n     expected.append(cubeName);\n     expected.append(\" WHERE \");\n     expected.append(\"(\");\n-    if(notLatestConditions!= null) {\n-      for(String cond: notLatestConditions) {\n+    if (notLatestConditions != null) {\n+      for (String cond : notLatestConditions) {\n         expected.append(cond).append(\" AND \");\n       }\n     }\n@@ -269,13 +243,15 @@ public static String getExpectedQuery(String cubeName, String selExpr, String wh\n     }\n     return expected.toString();\n   }\n+\n   public static String getExpectedQuery(String cubeName, String selExpr, String joinExpr, String whereExpr,\n     String postWhereExpr, List<String> joinWhereConds, Map<String, String> storageTableToWhereClause) {\n     return getExpectedQuery(cubeName, selExpr, joinExpr, whereExpr, postWhereExpr,\n       joinWhereConds, storageTableToWhereClause, null);\n   }\n+\n   public static String getExpectedQuery(String cubeName, String selExpr, String joinExpr, String whereExpr,\n-      String postWhereExpr, List<String> joinWhereConds, Map<String, String> storageTableToWhereClause,\n+    String postWhereExpr, List<String> joinWhereConds, Map<String, String> storageTableToWhereClause,\n     List<String> notLatestConditions) {\n     StringBuilder expected = new StringBuilder();\n     int numTabs = storageTableToWhereClause.size();\n@@ -289,8 +265,8 @@ public static String getExpectedQuery(String cubeName, String selExpr, String jo\n       expected.append(joinExpr);\n       expected.append(\" WHERE \");\n       expected.append(\"(\");\n-      if(notLatestConditions!= null) {\n-        for(String cond: notLatestConditions) {\n+      if (notLatestConditions != null) {\n+        for (String cond : notLatestConditions) {\n           expected.append(cond).append(\" AND \");\n         }\n       }\n@@ -326,12 +302,12 @@ public static String getDbName() {\n   }\n \n   public static Map<String, String> getWhereForDailyAndHourly2daysWithTimeDim(String cubeName, String timedDimension,\n-      String... storageTables) {\n+    String... storageTables) {\n     return getWhereForDailyAndHourly2daysWithTimeDim(cubeName, timedDimension, twodaysBack, now, storageTables);\n   }\n \n   public static Map<String, String> getWhereForDailyAndHourly2daysWithTimeDim(String cubeName, String timedDimension,\n-      Date from, Date to, String... storageTables) {\n+    Date from, Date to, String... storageTables) {\n     Map<String, String> storageTableToWhereClause = new LinkedHashMap<String, String>();\n     String whereClause = getWhereForDailyAndHourly2daysWithTimeDim(cubeName, timedDimension, from, to);\n     storageTableToWhereClause.put(getStorageTableString(storageTables), whereClause);\n@@ -351,14 +327,14 @@ private static String getStorageTableString(String... storageTables) {\n   }\n \n   public static String getWhereForDailyAndHourly2daysWithTimeDim(String cubeName, String timedDimension, Date from,\n-      Date to) {\n+    Date to) {\n     List<String> hourlyparts = new ArrayList<String>();\n     List<String> dailyparts = new ArrayList<String>();\n     Date dayStart;\n     if (!CubeTestSetup.isZerothHour()) {\n       addParts(hourlyparts, UpdatePeriod.HOURLY, from, DateUtil.getCeilDate(from, UpdatePeriod.DAILY));\n       addParts(hourlyparts, UpdatePeriod.HOURLY, DateUtil.getFloorDate(to, UpdatePeriod.DAILY),\n-          DateUtil.getFloorDate(to, UpdatePeriod.HOURLY));\n+        DateUtil.getFloorDate(to, UpdatePeriod.HOURLY));\n       dayStart = DateUtil.getCeilDate(from, UpdatePeriod.DAILY);\n     } else {\n       dayStart = from;\n@@ -384,7 +360,7 @@ public static String getWhereForDailyAndHourly2daysWithTimeDim(String cubeName,\n     if (!CubeTestSetup.isZerothHour()) {\n       addParts(hourlyparts, UpdatePeriod.HOURLY, twoMonthsBack, DateUtil.getCeilDate(twoMonthsBack, UpdatePeriod.DAILY));\n       addParts(hourlyparts, UpdatePeriod.HOURLY, DateUtil.getFloorDate(now, UpdatePeriod.DAILY),\n-          DateUtil.getFloorDate(now, UpdatePeriod.HOURLY));\n+        DateUtil.getFloorDate(now, UpdatePeriod.HOURLY));\n       dayStart = DateUtil.getCeilDate(twoMonthsBack, UpdatePeriod.DAILY);\n       monthStart = DateUtil.getCeilDate(twoMonthsBack, UpdatePeriod.MONTHLY);\n     }\n@@ -395,7 +371,7 @@ public static String getWhereForDailyAndHourly2daysWithTimeDim(String cubeName,\n       monthStart = DateUtil.getCeilDate(twoMonthsBack, UpdatePeriod.MONTHLY);\n     }\n     addParts(dailyparts, UpdatePeriod.DAILY, DateUtil.getFloorDate(now, UpdatePeriod.MONTHLY),\n-        DateUtil.getFloorDate(now, UpdatePeriod.DAILY));\n+      DateUtil.getFloorDate(now, UpdatePeriod.DAILY));\n     addParts(monthlyparts, UpdatePeriod.MONTHLY, monthStart, DateUtil.getFloorDate(now, UpdatePeriod.MONTHLY));\n     List<String> parts = new ArrayList<String>();\n     parts.addAll(dailyparts);\n@@ -429,7 +405,7 @@ public static String getWhereForDailyAndHourly2daysWithTimeDim(String cubeName,\n     List<String> parts = new ArrayList<String>();\n     addParts(parts, UpdatePeriod.MONTHLY, twoMonthsBack, DateUtil.getFloorDate(now, UpdatePeriod.MONTHLY));\n     storageTableToWhereClause.put(getDbName() + monthlyTable,\n-        StorageUtil.getWherePartClause(\"dt\", TEST_CUBE_NAME, parts));\n+      StorageUtil.getWherePartClause(\"dt\", TEST_CUBE_NAME, parts));\n     return storageTableToWhereClause;\n   }\n \n@@ -459,7 +435,7 @@ public static void addParts(List<String> partitions, UpdatePeriod updatePeriod,\n   }\n \n   public static String getExpectedQuery(String dimName, String selExpr, String postWhereExpr, String storageTable,\n-      boolean hasPart) {\n+    boolean hasPart) {\n     return getExpectedQuery(dimName, selExpr, null, null, postWhereExpr, storageTable, hasPart);\n   }\n \n@@ -468,8 +444,8 @@ public static String getExpectedQuery(String dimName, String selExpr, String pos\n     return new ArrayList<String>() {\n       {\n         try {\n-          for(FieldSchema fs: Hive.get().getTable(storageTableName).getPartitionKeys()) {\n-            if(!fs.getName().equals(timePart)) {\n+          for (FieldSchema fs : Hive.get().getTable(storageTableName).getPartitionKeys()) {\n+            if (!fs.getName().equals(timePart)) {\n               add(cubeName + \".\" + fs.getName() + \" != '\" + StorageConstants.LATEST_PARTITION_VALUE + \"'\");\n             }\n           }\n@@ -481,7 +457,7 @@ public static String getExpectedQuery(String dimName, String selExpr, String pos\n   }\n \n   public static String getExpectedQuery(String dimName, String selExpr, String joinExpr, String whereExpr,\n-      String postWhereExpr, String storageTable, boolean hasPart) {\n+    String postWhereExpr, String storageTable, boolean hasPart) {\n     StringBuilder expected = new StringBuilder();\n     String partWhere = null;\n     if (hasPart) {\n@@ -520,26 +496,26 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n     cubeMeasures = new HashSet<CubeMeasure>();\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"msr1\", \"int\", \"first measure\")));\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"msr2\", \"float\", \"second measure\"), \"Measure2\", null, \"SUM\",\n-        \"RS\"));\n+      \"RS\"));\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"msr3\", \"double\", \"third measure\"), \"Measure3\", null, \"MAX\",\n-        null));\n+      null));\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"msr4\", \"bigint\", \"fourth measure\"), \"Measure4\", null, \"COUNT\",\n-        null));\n+      null));\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"noAggrMsr\", \"bigint\", \"measure without a default aggregate\"),\n-        \"No aggregateMsr\", null, null, null));\n+      \"No aggregateMsr\", null, null, null));\n     cubeMeasures.add(new ColumnMeasure(new FieldSchema(\"newmeasure\", \"bigint\", \"measure available  from now\"),\n-        \"New measure\", null, null, null, now, null, 100.0));\n+      \"New measure\", null, null, null, now, null, 100.0));\n \n     cubeDimensions = new HashSet<CubeDimAttribute>();\n     List<CubeDimAttribute> locationHierarchy = new ArrayList<CubeDimAttribute>();\n     locationHierarchy.add(new ReferencedDimAtrribute(new FieldSchema(\"zipcode\", \"int\", \"zip\"), \"Zip refer\",\n-        new TableReference(\"zipdim\", \"code\")));\n+      new TableReference(\"zipdim\", \"code\")));\n     locationHierarchy.add(new ReferencedDimAtrribute(new FieldSchema(\"cityid\", \"int\", \"city\"), \"City refer\",\n-        new TableReference(\"citydim\", \"id\")));\n+      new TableReference(\"citydim\", \"id\")));\n     locationHierarchy.add(new ReferencedDimAtrribute(new FieldSchema(\"stateid\", \"int\", \"state\"), \"State refer\",\n-        new TableReference(\"statedim\", \"id\")));\n+      new TableReference(\"statedim\", \"id\")));\n     locationHierarchy.add(new ReferencedDimAtrribute(new FieldSchema(\"countryid\", \"int\", \"country\"), \"Country refer\",\n-        new TableReference(\"countrydim\", \"id\")));\n+      new TableReference(\"countrydim\", \"id\")));\n     List<String> regions = Arrays.asList(\"APAC\", \"EMEA\", \"USA\");\n     locationHierarchy.add(new InlineDimAttribute(new FieldSchema(\"regionname\", \"string\", \"region\"), regions));\n \n@@ -548,34 +524,34 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n     // Added for ambiguity test\n     cubeDimensions.add(new BaseDimAttribute(new FieldSchema(\"ambigdim1\", \"string\", \"used in testColumnAmbiguity\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"dim2\", \"int\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"testdim2\", \"id\")));\n+      new TableReference(\"testdim2\", \"id\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"cdim2\", \"int\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"cycledim1\", \"id\"), now, null, null));\n+      new TableReference(\"cycledim1\", \"id\"), now, null, null));\n \n     // denormalized reference\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"dim2big1\", \"bigint\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"testdim2\", \"bigid1\")));\n+      new TableReference(\"testdim2\", \"bigid1\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"dim2big2\", \"bigint\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"testdim2\", \"bigid2\")));\n+      new TableReference(\"testdim2\", \"bigid2\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"dim2bignew\", \"bigint\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"testdim2\", \"bigidnew\"), now, null, null));\n+      new TableReference(\"testdim2\", \"bigidnew\"), now, null, null));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"test_time_dim_hour_id\", \"int\", \"ref dim\"),\n-        \"Timedim reference\", new TableReference(\"hourdim\", \"id\"), null, null, null));\n+      \"Timedim reference\", new TableReference(\"hourdim\", \"id\"), null, null, null));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"test_time_dim_day_id\", \"int\", \"ref dim\"),\n-        \"Timedim reference\", new TableReference(\"daydim\", \"id\"), null, null, null));\n+      \"Timedim reference\", new TableReference(\"daydim\", \"id\"), null, null, null));\n     // not creating test_time_dim_hour_id2 ref dim attribute to avoid the reference in schema graph for other paths\n     // the column is only defined in chain\n     cubeDimensions.add(new BaseDimAttribute(new FieldSchema(\"test_time_dim_hour_id2\", \"int\", \"ref dim\")));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"testdim3id\", \"int\", \"direct id to testdim3\"),\n-        \"Timedim reference\", new TableReference(\"testdim3\", \"id\"), null, null, null));\n+      \"Timedim reference\", new TableReference(\"testdim3\", \"id\"), null, null, null));\n \n     List<TableReference> references = new ArrayList<TableReference>();\n     references.add(new TableReference(\"daydim\", \"full_date\"));\n     references.add(new TableReference(\"hourdim\", \"full_hour\"));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"test_time_dim\", \"date\", \"ref dim\"),\n-        \"Timedim full date\", references, null, null, null, false));\n+      \"Timedim full date\", references, null, null, null, false));\n     cubeDimensions.add(new ReferencedDimAtrribute(new FieldSchema(\"test_time_dim2\", \"date\", \"chained dim\"),\n-        \"Timedim full date\", \"timechain\", \"full_hour\", null, null, null));\n+      \"Timedim full date\", \"timechain\", \"full_hour\", null, null, null));\n \n     Set<JoinChain> joinchains = new HashSet<JoinChain>();\n     JoinChain timeChain = new JoinChain(\"timechain\", \"time chain\", \"time dim thru dim\");\n@@ -588,27 +564,27 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n     exprs = new HashSet<ExprColumn>();\n     exprs.add(new ExprColumn(new FieldSchema(\"avgmsr\", \"double\", \"avg measure\"), \"Avg Msr\", \"avg(msr1 + msr2)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"roundedmsr2\", \"double\", \"rounded measure2\"), \"Rounded msr2\",\n-        \"round(msr2/1000)\"));\n+      \"round(msr2/1000)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"msr6\", \"bigint\", \"sixth measure\"), \"Measure6\",\n-        \"sum(msr2) + max(msr3)/ count(msr4)\"));\n+      \"sum(msr2) + max(msr3)/ count(msr4)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"booleancut\", \"boolean\", \"a boolean expression\"), \"Boolean cut\",\n-        \"dim1 != 'x' AND dim2 != 10 \"));\n+      \"dim1 != 'x' AND dim2 != 10 \"));\n     exprs.add(new ExprColumn(new FieldSchema(\"substrexpr\", \"string\", \"a sub-string expression\"), \"Substr expr\",\n-        \"substr(dim1, 3)\"));\n+      \"substr(dim1, 3)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"indiasubstr\", \"boolean\", \"nested sub string expression\"), \"Nested expr\",\n-        \"substrexpr = 'INDIA'\"));\n+      \"substrexpr = 'INDIA'\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"refexpr\", \"string\", \"expression which facts and dimensions\"),\n-        \"Expr with cube and dim fields\", \"concat(dim1, \\\":\\\", citydim.name)\"));\n+      \"Expr with cube and dim fields\", \"concat(dim1, \\\":\\\", citydim.name)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"nocolexpr\", \"string\", \"expression which non existing colun\"),\n-        \"No col expr\", \"myfun(nonexist)\"));\n+      \"No col expr\", \"myfun(nonexist)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"newexpr\", \"string\", \"expression which non existing colun\"),\n-        \"new measure expr\", \"myfun(newmeasure)\"));\n+      \"new measure expr\", \"myfun(newmeasure)\"));\n     exprs.add(new ExprColumn(new FieldSchema(\"cityAndState\", \"String\", \"city and state together\"), \"City and State\",\n-        \"concat(citydim.name, \\\":\\\", statedim.name)\"));\n+      \"concat(citydim.name, \\\":\\\", statedim.name)\"));\n \n     Map<String, String> cubeProperties = new HashMap<String, String>();\n     cubeProperties.put(MetastoreUtil.getCubeTimedDimensionListKey(TEST_CUBE_NAME),\n-        \"dt,pt,it,et,test_time_dim,test_time_dim2\");\n+      \"dt,pt,it,et,test_time_dim,test_time_dim2\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"test_time_dim\", \"ttd\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"test_time_dim2\", \"ttd2\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"dt\", \"dt\");\n@@ -626,27 +602,27 @@ private void createCube(CubeMetastoreClient client) throws HiveException, ParseE\n     dimensions.add(\"dim1\");\n     dimensions.add(\"dim2\");\n     client\n-        .createDerivedCube(TEST_CUBE_NAME, DERIVED_CUBE_NAME, measures, dimensions, new HashMap<String, String>(), 5L);\n+      .createDerivedCube(TEST_CUBE_NAME, DERIVED_CUBE_NAME, measures, dimensions, new HashMap<String, String>(), 5L);\n   }\n \n   private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveException, ParseException {\n     Set<CubeMeasure> cubeMeasures2 = new HashSet<CubeMeasure>(cubeMeasures);\n     Set<CubeDimAttribute> cubeDimensions2 = new HashSet<CubeDimAttribute>(cubeDimensions);\n     cubeMeasures2.add(new ColumnMeasure(new FieldSchema(\"msr11\", \"int\", \"first measure\")));\n     cubeMeasures2.add(new ColumnMeasure(new FieldSchema(\"msr12\", \"float\", \"second measure\"), \"Measure2\", null, \"SUM\",\n-        \"RS\"));\n+      \"RS\"));\n     cubeMeasures2.add(new ColumnMeasure(new FieldSchema(\"msr13\", \"double\", \"third measure\"), \"Measure3\", null, \"MAX\",\n-        null));\n+      null));\n     cubeMeasures2.add(new ColumnMeasure(new FieldSchema(\"msr14\", \"bigint\", \"fourth measure\"), \"Measure4\", null,\n-        \"COUNT\", null));\n+      \"COUNT\", null));\n \n     cubeDimensions2.add(new BaseDimAttribute(new FieldSchema(\"dim11\", \"string\", \"basedim\")));\n     cubeDimensions2.add(new ReferencedDimAtrribute(new FieldSchema(\"dim12\", \"int\", \"ref dim\"), \"Dim2 refer\",\n-        new TableReference(\"testdim2\", \"id\")));\n+      new TableReference(\"testdim2\", \"id\")));\n \n     Map<String, String> cubeProperties = new HashMap<String, String>();\n     cubeProperties.put(MetastoreUtil.getCubeTimedDimensionListKey(BASE_CUBE_NAME),\n-        \"dt,pt,it,et,test_time_dim,test_time_dim2\");\n+      \"dt,pt,it,et,test_time_dim,test_time_dim2\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"test_time_dim\", \"ttd\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"test_time_dim2\", \"ttd2\");\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"dt\", \"dt\");\n@@ -655,7 +631,7 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n     cubeProperties.put(MetastoreConstants.TIMEDIM_TO_PART_MAPPING_PFX + \"pt\", \"pt\");\n     cubeProperties.put(MetastoreConstants.CUBE_ALL_FIELDS_QUERIABLE, \"false\");\n \n-    Set<JoinChain> joinchains = new HashSet<JoinChain>(){\n+    Set<JoinChain> joinchains = new HashSet<JoinChain>() {\n       {\n         add(new JoinChain(\"cityState\", \"city-state\", \"state thru city\") {\n           {\n@@ -677,19 +653,19 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n             });\n           }\n         });\n-        add(new JoinChain(\"cubeState\", \"cube-state\", \"state thru cube\"){\n+        add(new JoinChain(\"cubeState\", \"cube-state\", \"state thru cube\") {\n           {\n-            addPath(new ArrayList<TableReference>(){\n+            addPath(new ArrayList<TableReference>() {\n               {\n                 add(new TableReference(\"basecube\", \"stateid\"));\n                 add(new TableReference(\"statedim\", \"id\"));\n               }\n             });\n           }\n         });\n-        add(new JoinChain(\"cityZip\", \"city-zip\", \"zip thru city\"){\n+        add(new JoinChain(\"cityZip\", \"city-zip\", \"zip thru city\") {\n           {\n-            addPath(new ArrayList<TableReference>(){\n+            addPath(new ArrayList<TableReference>() {\n               {\n                 add(new TableReference(\"basecube\", \"cityid\"));\n                 add(new TableReference(\"citydim\", \"id\"));\n@@ -699,9 +675,9 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n             });\n           }\n         });\n-        add(new JoinChain(\"cubeStateCountry\", \"cube-state-country\", \"country through state\"){\n+        add(new JoinChain(\"cubeStateCountry\", \"cube-state-country\", \"country through state\") {\n           {\n-            addPath(new ArrayList<TableReference>(){\n+            addPath(new ArrayList<TableReference>() {\n               {\n                 add(new TableReference(\"basecube\", \"stateid\"));\n                 add(new TableReference(\"statedim\", \"id\"));\n@@ -711,9 +687,9 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n             });\n           }\n         });\n-        add(new JoinChain(\"cubeCityStateCountry\", \"cube-city-state-country\", \"country through state through city\"){\n+        add(new JoinChain(\"cubeCityStateCountry\", \"cube-city-state-country\", \"country through state through city\") {\n           {\n-            addPath(new ArrayList<TableReference>(){\n+            addPath(new ArrayList<TableReference>() {\n               {\n                 add(new TableReference(\"basecube\", \"cityid\"));\n                 add(new TableReference(\"citydim\", \"id\"));\n@@ -730,8 +706,8 @@ private void createBaseAndDerivedCubes(CubeMetastoreClient client) throws HiveEx\n \n     // add ref dim through chain\n     cubeDimensions2.add(new ReferencedDimAtrribute(\n-        new FieldSchema(\"cityStateCapital\", \"string\", \"State's capital thru city\"), \"State's capital thru city\",\n-        \"cityState\", \"capital\", null, null, null));\n+      new FieldSchema(\"cityStateCapital\", \"string\", \"State's capital thru city\"), \"State's capital thru city\",\n+      \"cityState\", \"capital\", null, null, null));\n     client.createCube(BASE_CUBE_NAME, cubeMeasures2, cubeDimensions2, exprs, joinchains, cubeProperties);\n \n     Map<String, String> derivedProperties = new HashMap<String, String>();\n@@ -876,7 +852,7 @@ private void createBaseCubeFacts(CubeMetastoreClient client) throws HiveExceptio\n     properties.put(MetastoreConstants.FACT_AGGREGATED_PROPERTY, \"false\");\n \n     client.createCubeFactTable(BASE_CUBE_NAME, factName, factColumns, storageAggregatePeriods, 100L, properties,\n-        storageTables);\n+      storageTables);\n \n     // create raw fact only with extra measures\n     factName = \"testFact3_RAW_BASE\";\n@@ -898,7 +874,7 @@ private void createBaseCubeFacts(CubeMetastoreClient client) throws HiveExceptio\n     storageTables.put(c1, s1);\n \n     client.createCubeFactTable(BASE_CUBE_NAME, factName, factColumns, storageAggregatePeriods, 100L, properties,\n-        storageTables);\n+      storageTables);\n \n   }\n \n@@ -987,6 +963,7 @@ private void createCubeFact(CubeMetastoreClient client) throws HiveException {\n       temp = cal.getTime();\n     }\n   }\n+\n   private void createCubeCheapFact(CubeMetastoreClient client) throws HiveException {\n     String factName = \"cheapFact\";\n     List<FieldSchema> factColumns = new ArrayList<FieldSchema>(cubeMeasures.size());\n@@ -1130,7 +1107,7 @@ private void createCubeFactOnlyHourly(CubeMetastoreClient client) throws HiveExc\n \n     // create cube fact\n     client\n-        .createCubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageAggregatePeriods, 10L, null, storageTables);\n+      .createCubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageAggregatePeriods, 10L, null, storageTables);\n     CubeFactTable fact2 = client.getFactTable(factName);\n     // Add all hourly partitions for two days\n     Calendar cal = Calendar.getInstance();\n@@ -1196,9 +1173,9 @@ private void createCubeFactOnlyHourlyRaw(CubeMetastoreClient client) throws Hive\n     properties.put(MetastoreConstants.FACT_AGGREGATED_PROPERTY, \"false\");\n \n     client.createCubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageAggregatePeriods, 100L, properties,\n-        storageTables);\n+      storageTables);\n     client.createCubeFactTable(BASE_CUBE_NAME, factName2, factColumns, storageAggregatePeriods, 100L, properties,\n-        storageTables);\n+      storageTables);\n     CubeFactTable fact2 = client.getFactTable(factName);\n     // Add all hourly partitions for two days\n     Calendar cal = Calendar.getInstance();\n@@ -1254,18 +1231,18 @@ private void createCityTbale(CubeMetastoreClient client) throws HiveException, P\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"ambigdim1\", \"string\", \"used in testColumnAmbiguity\")));\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"ambigdim2\", \"string\", \"used in testColumnAmbiguity\")));\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"nocandidatecol\", \"string\", \"used in testing no\" +\n-        \" candidate available\")));\n+      \" candidate available\")));\n     cityAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"stateid\", \"int\", \"state id\"), \"State refer\",\n-        new TableReference(\"statedim\", \"id\")));\n+      new TableReference(\"statedim\", \"id\")));\n     cityAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"statename\", \"string\", \"state name\"), \"State name\",\n-        new TableReference(\"statedim\", \"name\")));\n+      new TableReference(\"statedim\", \"name\")));\n     cityAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"zipcode\", \"int\", \"zip code\"), \"Zip refer\",\n-        new TableReference(\"zipdim\", \"code\")));\n+      new TableReference(\"zipdim\", \"code\")));\n     Map<String, String> dimProps = new HashMap<String, String>();\n     dimProps.put(MetastoreUtil.getDimTimedDimensionKey(\"citydim\"), TestCubeMetastoreClient.getDatePartitionKey());\n     Set<ExprColumn> exprs = new HashSet<ExprColumn>();\n     exprs.add(new ExprColumn(new FieldSchema(\"CityAddress\", \"string\", \"city with state and city and zip\"),\n-        \"City Address\", \"concat(citydim.name, \\\":\\\", statedim.name, \\\":\\\", countrydim.name, \\\":\\\", zipdim.code)\"));\n+      \"City Address\", \"concat(citydim.name, \\\":\\\", statedim.name, \\\":\\\", countrydim.name, \\\":\\\", zipdim.code)\"));\n     Dimension cityDim = new Dimension(\"citydim\", cityAttrs, exprs, dimProps, 0L);\n     client.createDimension(cityDim);\n \n@@ -1349,7 +1326,7 @@ private void createTestDim2(CubeMetastoreClient client) throws HiveException {\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"bigidnew\", \"bigint\", \"big id\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"name\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"testDim3id\", \"string\", \"f-key to testdim3\"), \"Dim3 refer\",\n-        new TableReference(\"testdim3\", \"id\")));\n+      new TableReference(\"testdim3\", \"id\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"cityId \", \"string\", \"name\")));\n \n     // add ref dim through chain\n@@ -1478,7 +1455,7 @@ private void createTestDim3(CubeMetastoreClient client) throws HiveException {\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"id\", \"int\", \"code\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"name\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"testDim4id\", \"string\", \"f-key to testdim4\"), \"Dim4 refer\",\n-        new TableReference(\"testdim4\", \"id\")));\n+      new TableReference(\"testdim4\", \"id\")));\n     Map<String, String> dimProps = new HashMap<String, String>();\n     dimProps.put(MetastoreUtil.getDimTimedDimensionKey(dimName), TestCubeMetastoreClient.getDatePartitionKey());\n     Dimension testDim3 = new Dimension(dimName, dimAttrs, dimProps, 0L);\n@@ -1562,7 +1539,7 @@ private void createCyclicDim1(CubeMetastoreClient client) throws HiveException {\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"id\", \"int\", \"code\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"name\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"cyleDim2Id\", \"string\", \"link to cyclic dim 2\"),\n-        \"cycle refer2\", new TableReference(\"cycleDim2\", \"id\")));\n+      \"cycle refer2\", new TableReference(\"cycleDim2\", \"id\")));\n     Map<String, String> dimProps = new HashMap<String, String>();\n     dimProps.put(MetastoreUtil.getDimTimedDimensionKey(dimName), TestCubeMetastoreClient.getDatePartitionKey());\n     Dimension cycleDim1 = new Dimension(dimName, dimAttrs, dimProps, 0L);\n@@ -1609,7 +1586,7 @@ private void createCyclicDim2(CubeMetastoreClient client) throws HiveException {\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"id\", \"int\", \"code\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"name\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"cyleDim1Id\", \"string\", \"link to cyclic dim 1\"),\n-        \"Cycle refer1\", new TableReference(\"cycleDim1\", \"id\")));\n+      \"Cycle refer1\", new TableReference(\"cycleDim1\", \"id\")));\n     Map<String, String> dimProps = new HashMap<String, String>();\n     dimProps.put(MetastoreUtil.getDimTimedDimensionKey(dimName), TestCubeMetastoreClient.getDatePartitionKey());\n     Dimension cycleDim2 = new Dimension(dimName, dimAttrs, dimProps, 0L);\n@@ -1706,6 +1683,7 @@ private void createCountryTable(CubeMetastoreClient client) throws Exception {\n     dimColumns.add(new FieldSchema(\"region\", \"string\", \"region name\"));\n     dimColumns.add(new FieldSchema(\"ambigdim2\", \"string\", \"used in\" + \" testColumnAmbiguity\"));\n \n+\n     Map<String, UpdatePeriod> dumpPeriods = new HashMap<String, UpdatePeriod>();\n     StorageTableDesc s1 = new StorageTableDesc();\n     s1.setInputFormat(TextInputFormat.class.getCanonicalName());\n@@ -1726,7 +1704,7 @@ private void createStateTable(CubeMetastoreClient client) throws Exception {\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"name\")));\n     dimAttrs.add(new BaseDimAttribute(new FieldSchema(\"capital\", \"string\", \"field2\")));\n     dimAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"countryid\", \"string\", \"link to country table\"),\n-        \"Country refer\", new TableReference(\"countrydim\", \"id\")));\n+      \"Country refer\", new TableReference(\"countrydim\", \"id\")));\n     Map<String, String> dimProps = new HashMap<String, String>();\n     dimProps.put(MetastoreUtil.getDimTimedDimensionKey(dimName), TestCubeMetastoreClient.getDatePartitionKey());\n     Dimension countryDim = new Dimension(dimName, dimAttrs, dimProps, 0L);\n@@ -1750,7 +1728,6 @@ private void createStateTable(CubeMetastoreClient client) throws Exception {\n     s1.setPartCols(partCols);\n     s1.setTimePartCols(timePartCols);\n     dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n-\n     Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n     storageTables.put(c1, s1);\n \n@@ -1865,7 +1842,7 @@ private void createCubeFactsWithValidColumns(CubeMetastoreClient client) throws\n     String validColumns = commonCols.toString() + \",dim1,testdim3id\";\n     properties.put(MetastoreUtil.getValidColumnsKey(factName), validColumns);\n     CubeFactTable fact1 =\n-        new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 10L, properties);\n+      new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 10L, properties);\n     client.createCubeTable(fact1, storageTables);\n     createPIEParts(client, fact1, c2);\n \n@@ -1875,7 +1852,7 @@ private void createCubeFactsWithValidColumns(CubeMetastoreClient client) throws\n     validColumns = commonCols.toString() + \",dim1,dim2\";\n     properties.put(MetastoreUtil.getValidColumnsKey(factName), validColumns);\n     CubeFactTable fact2 =\n-        new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 20L, properties);\n+      new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 20L, properties);\n     client.createCubeTable(fact2, storageTables);\n     createPIEParts(client, fact2, c2);\n \n@@ -1884,7 +1861,7 @@ private void createCubeFactsWithValidColumns(CubeMetastoreClient client) throws\n     validColumns = commonCols.toString() + \",dim1,dim2,cityid,stateid\";\n     properties.put(MetastoreUtil.getValidColumnsKey(factName), validColumns);\n     CubeFactTable fact3 =\n-        new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 30L, properties);\n+      new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 30L, properties);\n     client.createCubeTable(fact3, storageTables);\n     createPIEParts(client, fact3, c2);\n \n@@ -1896,10 +1873,10 @@ private void createCubeFactsWithValidColumns(CubeMetastoreClient client) throws\n     storageTables.put(c2, s2);\n     factName = \"summary4\";\n     properties = new HashMap<String, String>();\n-    validColumns = commonCols.toString() + \",dim1,dim2big1,dim2big2\";\n+    validColumns = commonCols.toString() + \",dim1,dim2big1,dim2big2,cityid\";\n     properties.put(MetastoreUtil.getValidColumnsKey(factName), validColumns);\n     CubeFactTable fact4 =\n-        new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 15L, properties);\n+      new CubeFactTable(TEST_CUBE_NAME, factName, factColumns, storageUpdatePeriods, 15L, properties);\n     client.createCubeTable(fact4, storageTables);\n     createPIEParts(client, fact4, c2);\n   }\n@@ -1970,7 +1947,7 @@ private void createPIEParts(CubeMetastoreClient client, CubeFactTable fact, Stri\n           timeParts.put(\"it\", itime);\n           timeParts.put(\"et\", itime);\n           StoragePartitionDesc sPartSpec =\n-              new StoragePartitionDesc(fact.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+            new StoragePartitionDesc(fact.getName(), timeParts, null, UpdatePeriod.HOURLY);\n           client.addPartition(sPartSpec, storageName);\n           pcal.add(Calendar.HOUR_OF_DAY, 1);\n           ical.add(Calendar.HOUR_OF_DAY, 1);", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java"}, {"additions": 11, "raw_url": "https://github.com/apache/lens/raw/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "blob_url": "https://github.com/apache/lens/blob/3dde9341aa0aa8f32c4beb4092285dfc9b46ac55/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "sha": "d14b095df7dc60c1acd0b507f739fb44e5646952", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java?ref=3dde9341aa0aa8f32c4beb4092285dfc9b46ac55", "patch": "@@ -55,9 +55,19 @@ public void testDenormsAsDirectFields() throws SemanticException, ParseException\n     String hqlQuery = rewrite(\"select dim2big1, max(msr3),\" + \" msr2 from testCube\" + \" where \" + twoDaysITRange, conf);\n     String expecteddim2big1 =\n         getExpectedQuery(cubeName, \"select testcube.dim2big1,\" + \" max(testcube.msr3), sum(testcube.msr2) FROM \", null,\n-            \" group by testcube.dim2big1\", getWhereForDailyAndHourly2daysWithTimeDim(cubeName, \"it\", \"C2_summary4\"),\n+          \" group by testcube.dim2big1\", getWhereForDailyAndHourly2daysWithTimeDim(cubeName, \"it\", \"C2_summary4\"),\n           getNotLatestConditions(cubeName, \"it\", \"C2_summary4\"));\n     TestCubeRewriter.compareQueries(expecteddim2big1, hqlQuery);\n+     // with another table\n+    hqlQuery = rewrite(\"select dim2big1, citydim.name, max(msr3),\" + \" msr2 from testCube\" + \" where \" + twoDaysITRange, conf);\n+    String expecteddim2big1WithAnotherTable = getExpectedQuery(cubeName,\n+      \"select testcube.dim2big1, citydim.name, max(testcube.msr3), sum(testcube.msr2) FROM \", \" JOIN \"\n+      + getDbName() + \"c1_citytable citydim \" + \"on testcube.cityid = citydim.id and citydim.dt = 'latest' \" , null,\n+      \" group by testcube.dim2big1, citydim.name\", null,\n+      getWhereForDailyAndHourly2daysWithTimeDim(cubeName, \"it\", \"C2_summary4\"),\n+      getNotLatestConditions(cubeName, \"it\", \"C2_summary4\"));\n+    TestCubeRewriter.compareQueries(expecteddim2big1WithAnotherTable, hqlQuery);\n+\n     hqlQuery = rewrite(\"select dim2big2, max(msr3),\" + \" msr2 from testCube\" + \" where \" + twoDaysITRange, conf);\n     String expecteddim2big2 =\n         getExpectedQuery(cubeName, \"select testcube.dim2big2, max(testcube.msr3), sum(testcube.msr2) FROM \", null,", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/db436ebd75c19c7672c93fa2625a431891d4cec8", "parent": "https://github.com/apache/lens/commit/3aaccf64f15146621914fd064c7e51f8d22274ba", "message": "LENS-223 Fix NPE while adding resource (Amareshwari via jdhok)", "bug_id": "lens_28", "file": [{"additions": 7, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-cli/pom.xml", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-cli/pom.xml", "sha": "2c6fcdae4ccf36d67427282332a300eea48291f3", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/pom.xml?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -84,6 +84,12 @@\n       <version>${project.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.lens</groupId>\n+      <artifactId>lens-driver-jdbc</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n \n     <dependency>\n       <groupId>org.springframework.shell</groupId>\n@@ -183,4 +189,4 @@\n     </plugins>\n   </build>\n \n-</project>\n\\ No newline at end of file\n+</project>", "filename": "lens-cli/pom.xml"}, {"additions": 7, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-client/pom.xml", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-client/pom.xml", "sha": "ea3bc8859a7b940e0a3a1328b4bcca9b536cf452", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-client/pom.xml?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -78,6 +78,12 @@\n       <scope>test</scope>\n       <type>test-jar</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.lens</groupId>\n+      <artifactId>lens-driver-jdbc</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.glassfish.jersey.media</groupId>\n       <artifactId>jersey-media-multipart</artifactId>\n@@ -119,4 +125,4 @@\n     </dependency>\n   </dependencies>\n \n-</project>\n\\ No newline at end of file\n+</project>", "filename": "lens-client/pom.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/HiveDriver.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/HiveDriver.java", "sha": "300cda1d40363e0ab487dc0207531a1b799cb18b", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-hive/src/main/java/org/apache/lens/driver/hive/HiveDriver.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -314,10 +314,9 @@ public HiveQueryPlan explain(AbstractQueryContext explainCtx) throws LensExcepti\n     explainConf.setClassLoader(explainCtx.getConf().getClassLoader());\n     explainConf.setBoolean(LensConfConstants.QUERY_PERSISTENT_RESULT_INDRIVER, false);\n     final String explainQuery = \"EXPLAIN EXTENDED \" + explainCtx.getDriverQuery(this);\n-    QueryContext explainQueryCtx = new QueryContext(explainQuery, explainCtx.getSubmittedUser(), new LensConf(),\n-      explainConf,\n-      Lists.newArrayList((LensDriver) this), (LensDriver) this, new Date().getTime());\n-    explainQueryCtx.setLensSessionIdentifier(explainCtx.getLensSessionIdentifier());\n+\n+    QueryContext explainQueryCtx = QueryContext.createContextWithSingleDriver(explainQuery,\n+        explainCtx.getSubmittedUser(), new LensConf(), explainConf, this, explainCtx.getLensSessionIdentifier());\n     // Get result set of explain\n     HiveInMemoryResultSet inMemoryResultSet = (HiveInMemoryResultSet) execute(explainQueryCtx);\n     List<String> explainOutput = new ArrayList<String>();", "filename": "lens-driver-hive/src/main/java/org/apache/lens/driver/hive/HiveDriver.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java", "sha": "648d227474c7d244f0229b4884a2457a66643ec6", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -129,7 +129,7 @@ public void setDB() {\n   }\n \n   protected QueryContext createContext(final String query, Configuration conf) throws LensException {\n-    QueryContext context = new QueryContext(query, \"testuser\", conf, drivers);\n+    QueryContext context = new QueryContext(query, \"testuser\", new LensConf(), conf, drivers);\n     // session id has to be set before calling setDriverQueriesAndPlans\n     context.setLensSessionIdentifier(sessionid);\n     context.setDriverQueriesAndPlans(new HashMap<LensDriver, String>() {{ put(driver, query); }} );\n@@ -138,7 +138,7 @@ protected QueryContext createContext(final String query, Configuration conf) thr\n   }\n \n   protected QueryContext createContext(PreparedQueryContext query, Configuration conf) {\n-    QueryContext context = new QueryContext(query, \"testuser\", conf);\n+    QueryContext context = new QueryContext(query, \"testuser\", new LensConf(), conf);\n     context.setLensSessionIdentifier(sessionid);\n     return context;\n   }", "filename": "lens-driver-hive/src/test/java/org/apache/lens/driver/hive/TestHiveDriver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/main/java/org/apache/lens/driver/jdbc/JDBCDriver.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/main/java/org/apache/lens/driver/jdbc/JDBCDriver.java", "sha": "0e5e27d1e9b3240a96ed460fe659acfebf271a54", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-jdbc/src/main/java/org/apache/lens/driver/jdbc/JDBCDriver.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -22,6 +22,7 @@\n import org.apache.hadoop.hive.ql.parse.ASTNode;\n import org.apache.hadoop.hive.ql.parse.HiveParser;\n import org.apache.hadoop.hive.ql.parse.ParseException;\n+import org.apache.lens.api.LensConf;\n import org.apache.lens.api.LensException;\n import org.apache.lens.api.query.QueryCost;\n import org.apache.lens.api.query.QueryHandle;\n@@ -583,10 +584,8 @@ public DriverQueryPlan explain(AbstractQueryContext explainCtx) throws LensExcep\n       explainQuery = rewrittenQuery.replaceAll(\"select \", \"select \"\n           + explainKeyword + \" \");\n     LOG.info(\"Explain Query : \" + explainQuery);\n-    final LensDriver driver = (LensDriver) this;\n-    QueryContext explainQueryCtx = new QueryContext(explainQuery, null,\n-        explainConf, new ArrayList<LensDriver>() {{ add(driver); }});\n-    explainQueryCtx.setLensSessionIdentifier(explainCtx.getLensSessionIdentifier());\n+    QueryContext explainQueryCtx = QueryContext.createContextWithSingleDriver(explainQuery, null,\n+        new LensConf(), explainConf, this, explainCtx.getLensSessionIdentifier());\n     QueryResult result = null;\n     try {\n       result = executeInternal(explainQueryCtx, explainQuery);", "filename": "lens-driver-jdbc/src/main/java/org/apache/lens/driver/jdbc/JDBCDriver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJDBCFinal.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJDBCFinal.java", "sha": "5ecfee456ac5fd929c3de74d1ecc12826cb5766b", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJDBCFinal.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -33,6 +33,7 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.session.SessionState;\n import org.apache.hive.service.cli.ColumnDescriptor;\n+import org.apache.lens.api.LensConf;\n import org.apache.lens.api.query.ResultRow;\n import org.apache.lens.driver.jdbc.ColumnarSQLRewriter;\n import org.apache.lens.driver.jdbc.JDBCDriver;\n@@ -189,7 +190,7 @@ public void testExecute1() throws Exception {\n         + \"where time_dim.day between '1900-01-01' and '1900-01-03' \"\n         + \"group by fact.time_key,time_dim.day_of_week,time_dim.day \" + \"order by dollars_sold desc\";\n \n-    QueryContext context = new QueryContext(query, \"SA\", baseConf, drivers);\n+    QueryContext context = new QueryContext(query, \"SA\", new LensConf(), baseConf, drivers);\n     context.setDriverQueriesAndPlans(new HashMap<LensDriver, String>() {{ put(driver, query); }} );\n     context.setSelectedDriver(driver);\n \n@@ -248,7 +249,7 @@ public void testExecute2() throws Exception {\n         + \"where time_dim.day between '1900-01-01' and '1900-01-04' \" + \"and location_dim.location_name = 'loc2' \"\n         + \"group by fact.time_key,time_dim.day_of_week,time_dim.day \" + \"order by dollars_sold  desc \";\n \n-    QueryContext context = new QueryContext(query, \"SA\", baseConf, drivers);\n+    QueryContext context = new QueryContext(query, \"SA\", new LensConf(), baseConf, drivers);\n     context.setDriverQueriesAndPlans(new HashMap<LensDriver, String>() {{ put(driver, query); }} );\n     context.setSelectedDriver(driver);\n     LensResultSet resultSet = driver.execute(context);", "filename": "lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJDBCFinal.java"}, {"additions": 4, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJdbcDriver.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJdbcDriver.java", "sha": "885daad49258eea05827ba62ecdf14db417c6512", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJdbcDriver.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -33,6 +33,7 @@\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.session.SessionState;\n import org.apache.hive.service.cli.ColumnDescriptor;\n+import org.apache.lens.api.LensConf;\n import org.apache.lens.api.LensException;\n import org.apache.lens.api.query.QueryHandle;\n import org.apache.lens.api.query.ResultRow;\n@@ -112,7 +113,7 @@ public void beforeMethod() throws Exception {\n   }\n \n   private QueryContext createQueryContext(final String query) throws LensException {\n-    QueryContext context = new QueryContext(query, \"SA\", baseConf, drivers);\n+    QueryContext context = new QueryContext(query, \"SA\", new LensConf(), baseConf, drivers);\n     context.setDriverQueriesAndPlans(new HashMap<LensDriver, String>() {\n       {\n         put(driver, query);\n@@ -421,7 +422,7 @@ public void testConnectionCloseForFailedQueries() throws Exception {\n     insertData(\"invalid_conn_close\");\n \n     final String query = \"SELECT * from invalid_conn_close2\";\n-    QueryContext ctx = new QueryContext(query, \"SA\", baseConf, drivers);\n+    QueryContext ctx = new QueryContext(query, \"SA\", new LensConf(), baseConf, drivers);\n \n     for (int i = 0; i < JDBCDriverConfConstants.JDBC_POOL_MAX_SIZE_DEFAULT; i++) {\n       driver.executeAsync(ctx);\n@@ -525,7 +526,7 @@ public void testCancelQuery() throws Exception {\n   @Test\n   public void testInvalidQuery() throws Exception {\n     final String query = \"SELECT * FROM invalid_table\";\n-    QueryContext ctx = new QueryContext(query, \"SA\", baseConf, drivers);\n+    QueryContext ctx = new QueryContext(query, \"SA\", new LensConf(), baseConf, drivers);\n     try {\n       LensResultSet rs = driver.execute(ctx);\n       fail(\"Should have thrown exception\");", "filename": "lens-driver-jdbc/src/test/java/org/apache/lens/driver/jdbc/TestJdbcDriver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-query-lib/src/test/java/org/apache/lens/lib/query/TestAbstractFileFormatter.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-query-lib/src/test/java/org/apache/lens/lib/query/TestAbstractFileFormatter.java", "sha": "0d441c8a5eb168a2292b72dd5ab537bf600bd421", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/test/java/org/apache/lens/lib/query/TestAbstractFileFormatter.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -26,6 +26,7 @@\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n+import org.apache.lens.api.LensConf;\n import org.apache.lens.api.LensException;\n import org.apache.lens.server.api.LensConfConstants;\n import org.apache.lens.server.api.driver.LensDriver;\n@@ -224,11 +225,8 @@ protected void testFormatter(Configuration conf, String charsetEncoding, String\n     } catch (LensException e) {\n       Assert.fail(e.getMessage());\n     }\n-    QueryContext ctx = new QueryContext(\"test writer query\", \"testuser\", conf, new ArrayList<LensDriver>() {\n-      {\n-        add(mockDriver);\n-      }\n-    });\n+    QueryContext ctx = QueryContext.createContextWithSingleDriver(\"test writer query\", \"testuser\", new LensConf(),\n+        conf, mockDriver, null);\n \n     ctx.setSelectedDriver(mockDriver);\n     formatter = createFormatter();", "filename": "lens-query-lib/src/test/java/org/apache/lens/lib/query/TestAbstractFileFormatter.java"}, {"additions": 22, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server-api/src/main/java/org/apache/lens/server/api/query/FinishedLensQuery.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server-api/src/main/java/org/apache/lens/server/api/query/FinishedLensQuery.java", "sha": "9dce0997da82368a104dce0306c6f1ef7dbcdb2a", "changes": 22, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server-api/src/main/java/org/apache/lens/server/api/query/FinishedLensQuery.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -18,6 +18,16 @@\n  */\n package org.apache.lens.server.api.query;\n \n+import java.util.Collection;\n+\n+import org.apache.lens.api.LensConf;\n+import org.apache.lens.api.LensException;\n+import org.apache.lens.api.query.QueryHandle;\n+import org.apache.lens.api.query.QueryStatus;\n+import org.apache.lens.server.api.driver.LensDriver;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n@@ -175,4 +185,16 @@ public FinishedLensQuery(QueryContext ctx) {\n     }\n   }\n \n+  public QueryContext toQueryContext(Configuration conf, Collection<LensDriver> drivers) throws LensException {\n+    QueryContext qctx = new QueryContext(userQuery, submitter, new LensConf(), conf, drivers, null, submissionTime);\n+    qctx.setQueryHandle(QueryHandle.fromString(handle));\n+    qctx.setEndTime(getEndTime());\n+    qctx.setStatusSkippingTransitionTest(new QueryStatus(0.0, QueryStatus.Status.valueOf(getStatus()),\n+        getErrorMessage() == null ? \"\" : getErrorMessage(), getResult() != null, null, null));\n+    qctx.getDriverStatus().setDriverStartTime(getDriverStartTime());\n+    qctx.getDriverStatus().setDriverFinishTime(getDriverEndTime());\n+    qctx.setResultSetPath(getResult());\n+    qctx.setQueryName(getQueryName());\n+    return qctx;\n+  }\n }", "filename": "lens-server-api/src/main/java/org/apache/lens/server/api/query/FinishedLensQuery.java"}, {"additions": 41, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryContext.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryContext.java", "sha": "7a5cf405c61240105bf650a514ea50ec7a7beed3", "changes": 99, "status": "modified", "deletions": 58, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryContext.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -19,7 +19,6 @@\n package org.apache.lens.server.api.query;\n \n import java.util.Collection;\n-import java.util.Date;\n import java.util.Map;\n import java.util.UUID;\n \n@@ -37,6 +36,8 @@\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\n \n+import com.google.common.collect.Lists;\n+\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -158,68 +159,19 @@\n   private String queryName;\n \n   /**\n-   * Instantiates a new query context.\n-   *\n-   * @param query the query\n-   * @param user  the user\n-   * @param conf  the conf\n-   */\n-  public QueryContext(String query, String user, Configuration conf, Collection<LensDriver> drivers) {\n-    this(query, user, new LensConf(), conf, drivers, new Date().getTime());\n-  }\n-\n-  /**\n-   * Instantiates a new query context.\n+   * Creates context from query\n    *\n    * @param query the query\n    * @param user  the user\n+   * @param qconf The query lensconf\n    * @param conf  the conf\n    */\n-  public QueryContext(String query, String user, Configuration conf, Collection<LensDriver> drivers, long\n-    submissionTime) {\n-    this(query, user, new LensConf(), conf, drivers, submissionTime);\n-  }\n-\n-  /**\n-   * Instantiates a new query context.\n-   *\n-   * @param query   the query\n-   * @param user    the user\n-   * @param qconf   the qconf\n-   * @param conf    the conf\n-   * @param drivers Collection of drivers\n-   */\n   public QueryContext(String query, String user, LensConf qconf, Configuration conf, Collection<LensDriver> drivers) {\n-    this(query, user, qconf, conf, drivers, null, new Date().getTime());\n-  }\n-\n-  /**\n-   * Instantiates a new query context.\n-   *\n-   * @param query   the query\n-   * @param user    the user\n-   * @param qconf   the qconf\n-   * @param conf    the conf\n-   * @param drivers Collection of drivers\n-   */\n-  public QueryContext(String query, String user, LensConf qconf, Configuration conf, Collection<LensDriver> drivers,\n-    Long submissionTime) {\n-    this(query, user, qconf, conf, drivers, null, submissionTime);\n+    this(query, user, qconf, conf, drivers, null);\n   }\n \n   /**\n-   * Instantiates a new query context.\n-   *\n-   * @param prepared the prepared\n-   * @param user     the user\n-   * @param conf     the conf\n-   */\n-  public QueryContext(PreparedQueryContext prepared, String user, Configuration conf) {\n-    this(prepared, user, new LensConf(), conf);\n-  }\n-\n-  /**\n-   * Instantiates a new query context.\n+   * Creates context from PreparedQueryContext\n    *\n    * @param prepared the prepared\n    * @param user     the user\n@@ -228,24 +180,37 @@ public QueryContext(PreparedQueryContext prepared, String user, Configuration co\n    */\n   public QueryContext(PreparedQueryContext prepared, String user, LensConf qconf, Configuration conf) {\n     this(prepared.getUserQuery(), user, qconf, mergeConf(prepared.getConf(), conf), prepared.getDriverContext()\n-      .getDriverQueryContextMap().keySet(),\n-      prepared.getDriverContext()\n-        .getSelectedDriver(), new Date().getTime());\n+      .getDriverQueryContextMap().keySet(), prepared.getDriverContext().getSelectedDriver());\n     setDriverContext(prepared.getDriverContext());\n     setSelectedDriverQuery(prepared.getSelectedDriverQuery());\n   }\n \n+  /**\n+   * Create context by passing drivers and selected driver\n+   *\n+   * @param userQuery The user query\n+   * @param user Submitted user\n+   * @param qconf The query LensConf\n+   * @param conf The configuration object\n+   * @param drivers All the drivers\n+   * @param selectedDriver SelectedDriver\n+   */\n+  private QueryContext(String userQuery, String user, LensConf qconf, Configuration conf,\n+      Collection<LensDriver> drivers, LensDriver selectedDriver) {\n+    this(userQuery, user, qconf, conf, drivers, selectedDriver, System.currentTimeMillis());\n+  }\n   /**\n    * Instantiates a new query context.\n    *\n    * @param userQuery      the user query\n    * @param user           the user\n    * @param qconf          the qconf\n    * @param conf           the conf\n+   * @param drivers        All the drivers\n    * @param selectedDriver the selected driver\n    * @param submissionTime the submission time\n    */\n-  public QueryContext(String userQuery, String user, LensConf qconf, Configuration conf,\n+  QueryContext(String userQuery, String user, LensConf qconf, Configuration conf,\n     Collection<LensDriver> drivers, LensDriver selectedDriver, long submissionTime) {\n     super(userQuery, user, qconf, conf, drivers);\n     this.submissionTime = submissionTime;\n@@ -266,6 +231,24 @@ public QueryContext(String userQuery, String user, LensConf qconf, Configuration\n     this.driverStatus = new DriverQueryStatus();\n   }\n \n+  /**\n+   * Utility create method to create context with single driver.\n+   *\n+   * @param query The user query\n+   * @param user The submitted query\n+   * @param qconf The query lens conf\n+   * @param conf Query configuration object - merged with session\n+   * @param driver The driver\n+   * @param lensSessionPublicId The session id\n+   *\n+   * @return QueryContext object\n+   */\n+  public static QueryContext createContextWithSingleDriver(String query, String user, LensConf qconf,\n+      Configuration conf, LensDriver driver, String lensSessionPublicId) {\n+    QueryContext ctx = new QueryContext(query, user, qconf, conf, Lists.newArrayList(driver), driver);\n+    ctx.setLensSessionIdentifier(lensSessionPublicId);\n+    return ctx;\n+  }\n \n   /**\n    * Merge conf.", "filename": "lens-server-api/src/main/java/org/apache/lens/server/api/query/QueryContext.java"}, {"additions": 6, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/pom.xml", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/pom.xml", "sha": "0fc0f4123b6b733ab62f72bfd894f35105c3acc6", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/pom.xml?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -68,7 +68,12 @@\n       <artifactId>lens-driver-hive</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.apache.lens</groupId>\n+      <artifactId>lens-driver-jdbc</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.lens</groupId>\n       <artifactId>lens-query-lib</artifactId>", "filename": "lens-server/pom.xml"}, {"additions": 24, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "sha": "1846379c5c4a32fd7dd7afda7e9f78e1a6fd10e8", "changes": 58, "status": "modified", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -83,6 +83,8 @@\n import org.codehaus.jackson.map.*;\n import org.codehaus.jackson.map.module.SimpleModule;\n \n+import com.google.common.collect.Lists;\n+\n /**\n  * The Class QueryExecutionServiceImpl.\n  */\n@@ -1336,17 +1338,7 @@ private QueryContext getQueryContext(LensSessionHandle sessionHandle, QueryHandl\n         if (query == null) {\n           throw new NotFoundException(\"Query not found \" + queryHandle);\n         }\n-        QueryContext finishedCtx = new QueryContext(query.getUserQuery(), query.getSubmitter(), conf,\n-                                                    drivers.values(), query.getSubmissionTime());\n-        finishedCtx.setQueryHandle(queryHandle);\n-        finishedCtx.setEndTime(query.getEndTime());\n-        finishedCtx.setStatusSkippingTransitionTest(new QueryStatus(0.0, QueryStatus.Status.valueOf(query.getStatus()),\n-                                                                    query.getErrorMessage() == null ? \"\" : query.getErrorMessage(), query.getResult() != null, null, null));\n-        finishedCtx.getDriverStatus().setDriverStartTime(query.getDriverStartTime());\n-        finishedCtx.getDriverStatus().setDriverFinishTime(query.getDriverEndTime());\n-        finishedCtx.setResultSetPath(query.getResult());\n-        finishedCtx.setQueryName(query.getQueryName());\n-        return finishedCtx;\n+        return query.toQueryContext(conf, drivers.values());\n       }\n       updateStatus(queryHandle);\n       return ctx;\n@@ -1816,9 +1808,10 @@ public QueryPlan explain(LensSessionHandle sessionHandle, String query, LensConf\n   public void addResource(LensSessionHandle sessionHandle, String type, String path) throws LensException {\n     try {\n       acquire(sessionHandle);\n+      String command = \"add \" + type.toLowerCase() + \" \" + path;\n       for (LensDriver driver : drivers.values()) {\n         if (driver instanceof HiveDriver) {\n-          driver.execute(createAddResourceQuery(sessionHandle, type, path));\n+          driver.execute(createResourceQuery(command, sessionHandle, driver));\n         }\n       }\n     } finally {\n@@ -1827,22 +1820,23 @@ public void addResource(LensSessionHandle sessionHandle, String type, String pat\n   }\n \n   /**\n-   * Creates the add resource query.\n+   * Creates the add/delete resource query.\n    *\n-   * @param sessionHandle the session handle\n-   * @param type          the type\n-   * @param path          the path\n-   * @return the query context\n-   * @throws LensException the lens exception\n-   */\n-  private QueryContext createAddResourceQuery(LensSessionHandle sessionHandle, String type, String path)\n-    throws LensException {\n-    String command = \"add \" + type.toLowerCase() + \" \" + path;\n-    LensConf conf = new LensConf();\n-    conf.addProperty(LensConfConstants.QUERY_PERSISTENT_RESULT_INDRIVER, \"false\");\n-    QueryContext addQuery = new QueryContext(command, getSession(sessionHandle).getLoggedInUser(), conf, getLensConf(\n-      sessionHandle, conf), drivers.values());\n-    addQuery.setLensSessionIdentifier(sessionHandle.getPublicId().toString());\n+   * @param command\n+   * @param sessionHandle\n+   * @param type\n+   * @param path\n+   * @param driver\n+   * @return\n+   * @throws LensException\n+   */\n+  private QueryContext createResourceQuery(String command, LensSessionHandle sessionHandle, LensDriver driver)\n+      throws LensException {\n+    LensConf qconf = new LensConf();\n+    qconf.addProperty(LensConfConstants.QUERY_PERSISTENT_RESULT_INDRIVER, \"false\");\n+    QueryContext addQuery = QueryContext.createContextWithSingleDriver(command,\n+        getSession(sessionHandle).getLoggedInUser(), qconf, getLensConf(\n+              sessionHandle, qconf), driver, sessionHandle.getPublicId().toString());\n     return addQuery;\n   }\n \n@@ -1858,12 +1852,7 @@ public void deleteResource(LensSessionHandle sessionHandle, String type, String\n       String command = \"delete \" + type.toLowerCase() + \" \" + path;\n       for (LensDriver driver : drivers.values()) {\n         if (driver instanceof HiveDriver) {\n-          LensConf conf = new LensConf();\n-          conf.addProperty(LensConfConstants.QUERY_PERSISTENT_RESULT_INDRIVER, \"false\");\n-          QueryContext addQuery = new QueryContext(command, getSession(sessionHandle).getLoggedInUser(), getLensConf(\n-            sessionHandle, conf), drivers.values());\n-          addQuery.setLensSessionIdentifier(sessionHandle.getPublicId().toString());\n-          driver.execute(addQuery);\n+          driver.execute(createResourceQuery(command, sessionHandle, driver));\n         }\n       }\n     } finally {\n@@ -2123,9 +2112,10 @@ protected void handleDriverSessionStart(DriverEvent event) {\n       if (resources != null && !resources.isEmpty()) {\n         for (LensSessionImpl.ResourceEntry resource : resources) {\n           LOG.info(\"Restoring resource \" + resource + \" for session \" + lensSession);\n+          String command = \"add \" + resource.getType().toLowerCase() + \" \" + resource.getLocation();\n           try {\n             // Execute add resource query in blocking mode\n-            hiveDriver.execute(createAddResourceQuery(sessionHandle, resource.getType(), resource.getLocation()));\n+            hiveDriver.execute(createResourceQuery(command, sessionHandle, hiveDriver));\n             resource.restoredResource();\n             LOG.info(\"Restored resource \" + resource + \" for session \" + lensSession);\n           } catch (Exception exc) {", "filename": "lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java"}, {"additions": 5, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "sha": "a886c850f1d157093802b130d76aa38f9537c8a1", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -1366,11 +1366,13 @@ public void testDefaultConfig() throws LensException {\n \n     final String query = \"select ID from \" + testTable;\n     QueryContext ctx = new QueryContext(query, null, queryConf, conf, queryService.getDrivers());\n-    Map<LensDriver, String> driverQueries = new HashMap<LensDriver, String>() {{ put(queryService.getDrivers()\n-        .iterator().next(), query); }};\n+    Map<LensDriver, String> driverQueries = new HashMap<LensDriver, String>();\n+    for (LensDriver driver :queryService.getDrivers()) {\n+      driverQueries.put(driver, query);\n+    }\n     ctx.setDriverQueriesAndPlans(driverQueries);\n \n-    Assert.assertEquals(queryService.getSession(lensSessionId).getHiveConf().getClassLoader() ,  ctx.getConf()\n+    Assert.assertEquals(queryService.getSession(lensSessionId).getHiveConf().getClassLoader(), ctx.getConf()\n       .getClassLoader());\n     Assert.assertEquals(queryService.getSession(lensSessionId).getHiveConf().getClassLoader(),\n         ctx.getDriverContext().getDriverConf(queryService.getDrivers().iterator().next()).getClassLoader());", "filename": "lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java"}, {"additions": 50, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/resources/jdbcdriver-site.xml", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/resources/jdbcdriver-site.xml", "sha": "116fddfe6b86900b91d2efeaa020499b12a78e0d", "changes": 50, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/resources/jdbcdriver-site.xml?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n+\n+<configuration>\n+  <property>\n+    <name>lens.driver.jdbc.driver.class</name>\n+    <value>org.hsqldb.jdbcDriver</value>\n+  </property>\n+  <property>\n+    <name>lens.driver.jdbc.db.uri</name>\n+    <value>jdbc:hsqldb:/tmp/db-storage.db;MODE=MYSQL</value>\n+  </property>\n+  <property>\n+    <name>lens.driver.jdbc.db.user</name>\n+    <value>SA</value>\n+  </property>\n+  <property>\n+    <name>lens.cube.query.driver.supported.storages</name>\n+    <value>mydb</value>\n+    <final>true</final>\n+  </property>\n+  <property>\n+    <name>lens.driver.jdbc.query.rewriter</name>\n+    <value>org.apache.lens.driver.jdbc.ColumnarSQLRewriter</value>\n+  </property>\n+  <property>\n+    <name>lens.driver.jdbc.explain.keyword</name>\n+    <value>explain plan for </value>\n+  </property>\n+</configuration>", "filename": "lens-server/src/test/resources/jdbcdriver-site.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/resources/lens-site.xml", "blob_url": "https://github.com/apache/lens/blob/db436ebd75c19c7672c93fa2625a431891d4cec8/lens-server/src/test/resources/lens-site.xml", "sha": "5779ba3c508157fd806db616885d3396d7a13bc3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/resources/lens-site.xml?ref=db436ebd75c19c7672c93fa2625a431891d4cec8", "patch": "@@ -24,7 +24,7 @@\n <configuration>\n <property>\n   <name>lens.server.drivers</name>\n-  <value>org.apache.lens.driver.hive.HiveDriver</value>\n+  <value>org.apache.lens.driver.hive.HiveDriver,org.apache.lens.driver.jdbc.JDBCDriver</value>\n </property>\n \n <property>", "filename": "lens-server/src/test/resources/lens-site.xml"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/cd9d76043c5bd72fbbfafed150abee898b3330b5", "parent": "https://github.com/apache/lens/commit/e18119aa219ebb62948c6c3b2fe8e336ea5fbeac", "message": "Fix NPE in explain with no exec or scanmode", "bug_id": "lens_29", "file": [{"additions": 4, "raw_url": "https://github.com/apache/lens/raw/cd9d76043c5bd72fbbfafed150abee898b3330b5/grill-server-api/src/main/java/com/inmobi/grill/server/api/driver/DriverQueryPlan.java", "blob_url": "https://github.com/apache/lens/blob/cd9d76043c5bd72fbbfafed150abee898b3330b5/grill-server-api/src/main/java/com/inmobi/grill/server/api/driver/DriverQueryPlan.java", "sha": "7e7b329f79a7f5cd2bd07576f3b1d0560db04f76", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server-api/src/main/java/com/inmobi/grill/server/api/driver/DriverQueryPlan.java?ref=cd9d76043c5bd72fbbfafed150abee898b3330b5", "patch": "@@ -27,7 +27,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import com.inmobi.grill.api.GrillException;\n import com.inmobi.grill.api.query.QueryCost;\n import com.inmobi.grill.api.query.QueryHandle;\n import com.inmobi.grill.api.query.QueryPlan;\n@@ -483,7 +482,9 @@ public int getNumAggreagateExprs() {\n   public QueryPlan toQueryPlan() throws UnsupportedEncodingException {\n     return new QueryPlan(numJoins, numGbys, numSels, numSelDi,\n         numHaving, numObys, numAggrExprs, numFilters, tablesQueried, hasSubQuery,\n-        execMode.name(), scanMode.name(), tableWeights, joinWeight, gbyWeight, filterWeight,\n-        havingWeight, obyWeight, selectWeight, null, URLEncoder.encode(getPlan(), \"UTF-8\"), getCost());\n+        execMode != null ? execMode.name() : null,\n+        scanMode != null ? scanMode.name() : null, tableWeights, joinWeight,\n+        gbyWeight, filterWeight, havingWeight, obyWeight, selectWeight, null,\n+        URLEncoder.encode(getPlan(), \"UTF-8\"), getCost());\n   }\n }", "filename": "grill-server-api/src/main/java/com/inmobi/grill/server/api/driver/DriverQueryPlan.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/0393d7bef931462d1aeb4a4eb2f067c0e05843eb", "parent": "https://github.com/apache/lens/commit/a70c8224a30aae5e0a08d71b2d04592df43d5c58", "message": "LENS-382 : Fixes NPE in JoinResolver for wrong chains (Sushil Mohanty via amareshwari)", "bug_id": "lens_30", "file": [{"additions": 1, "raw_url": "https://github.com/apache/lens/raw/0393d7bef931462d1aeb4a4eb2f067c0e05843eb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/0393d7bef931462d1aeb4a4eb2f067c0e05843eb/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "sha": "44c474a74de64d7c26f018087c8cc6c72657b048", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=0393d7bef931462d1aeb4a4eb2f067c0e05843eb", "patch": "@@ -664,7 +664,7 @@ public void pruneAllPathsForCandidateDims(Map<Dimension, Set<CandidateDim>> cand\n           for (AbstractCubeTable refTable : jp.getAllTables()) {\n             List<String> cols = jp.getColumnsForTable(refTable);\n             if (refTable instanceof Dimension) {\n-              if (cols != null && !dimColumns.get(refTable).containsAll(cols)) {\n+              if (cols != null && (dimColumns.get(refTable) == null || !dimColumns.get(refTable).containsAll(cols))) {\n                 // This path requires some columns from the cube which are not present in any candidate dim\n                 // Remove this path\n                 LOG.info(\"Removing join path:\" + jp + \" as columns :\" + cols + \" dont exist\");", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/39046c70bcc2fd4958bf7e153d396477e601cf2a", "parent": "https://github.com/apache/lens/commit/a7ed4c35f8d5240541e99e7d9b865710de970286", "message": "LENS-375 : Fix NPE when chain ref columns are created without defining chains (amareshwari)", "bug_id": "lens_31", "file": [{"additions": 5, "raw_url": "https://github.com/apache/lens/raw/39046c70bcc2fd4958bf7e153d396477e601cf2a/lens-server/src/main/java/org/apache/lens/server/metastore/JAXBUtils.java", "blob_url": "https://github.com/apache/lens/blob/39046c70bcc2fd4958bf7e153d396477e601cf2a/lens-server/src/main/java/org/apache/lens/server/metastore/JAXBUtils.java", "sha": "138797e441a6a131a3bb2c9d3c4743625fa18c93", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/metastore/JAXBUtils.java?ref=39046c70bcc2fd4958bf7e153d396477e601cf2a", "patch": "@@ -276,7 +276,11 @@ public static XDimAttribute xDimAttrFromHiveDimAttr(CubeDimAttribute cd, Abstrac\n         XChainColumn xcc = new XChainColumn();\n         xcc.setChainName(rd.getChainName());\n         xcc.setRefCol(rd.getRefColumn());\n-        xcc.setDestTable(baseTable.getChainByName(rd.getChainName()).getDestTable());\n+        if (baseTable.getChainByName(rd.getChainName()) == null) {\n+          LOG.error(\"Missing chain definition for \" + rd.getChainName());\n+        } else {\n+          xcc.setDestTable(baseTable.getChainByName(rd.getChainName()).getDestTable());\n+        }\n         refspec.setChainRefColumn(xcc);\n       } else {\n         refspec.setTableReferences(new XTableReferences());", "filename": "lens-server/src/main/java/org/apache/lens/server/metastore/JAXBUtils.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/a7ed4c35f8d5240541e99e7d9b865710de970286", "parent": "https://github.com/apache/lens/commit/a3e9d136e9f93121322774063e3cdd9f2d508dd9", "message": "LENS-296 : Fix NPE when non existing tables are queried (amareshwari)", "bug_id": "lens_32", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/main/java/org/apache/lens/cube/parse/ColumnResolver.java", "blob_url": "https://github.com/apache/lens/blob/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/main/java/org/apache/lens/cube/parse/ColumnResolver.java", "sha": "1aa33db8433e10d578abd2caf48095570e805d83", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ColumnResolver.java?ref=a7ed4c35f8d5240541e99e7d9b865710de970286", "patch": "@@ -69,7 +69,9 @@ private void extractColumns(CubeQueryContext cubeql) throws SemanticException {\n     for (String table : cubeql.getTblAliasToColumns().keySet()) {\n       try {\n         if (!CubeQueryContext.DEFAULT_TABLE.equalsIgnoreCase(table)) {\n-          cubeql.addQueriedTable(table);\n+          if (!cubeql.addQueriedTable(table)) {\n+            throw new SemanticException(ErrorMsg.NEITHER_CUBE_NOR_DIMENSION);\n+          }\n         }\n       } catch (HiveException e) {\n         throw new SemanticException(e);", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ColumnResolver.java"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "blob_url": "https://github.com/apache/lens/blob/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java", "sha": "fa23b8e42452552c9d400fcfa20d5d099458ffbc", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java?ref=a7ed4c35f8d5240541e99e7d9b865710de970286", "patch": "@@ -102,7 +102,9 @@ public void visit(TreeNode visited) throws SemanticException {\n \n   private ASTNode getExprAST(final CubeQueryContext cubeql, String table, String column) throws SemanticException {\n     if (cubeql.getQueriedTable(table) == null) {\n-      cubeql.addQueriedTable(table);\n+      if (!cubeql.addQueriedTable(table)) {\n+        throw new SemanticException(ErrorMsg.NEITHER_CUBE_NOR_DIMENSION);\n+      }\n     }\n     if (!(cubeql.getQueriedTable(table) instanceof AbstractBaseTable)) {\n       return null;", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/ExpressionResolver.java"}, {"additions": 7, "raw_url": "https://github.com/apache/lens/raw/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "blob_url": "https://github.com/apache/lens/blob/a7ed4c35f8d5240541e99e7d9b865710de970286/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "sha": "c9972e23419a00fb5729b854b8feea9b44b125a3", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java?ref=a7ed4c35f8d5240541e99e7d9b865710de970286", "patch": "@@ -201,4 +201,11 @@ public void testDimensionQuery() throws Exception {\n     Assert.assertEquals(e.getMessage(),\n       \"No dimension table has the queried columns for citydim, columns: [name, statename, nocandidatecol]\");\n   }\n+\n+  @Test\n+  public void testNonExistingDimension() throws Exception {\n+    SemanticException e = getSemanticExceptionInRewrite(\"select nonexist.name, msr2 from testCube where \"\n+      + TWO_DAYS_RANGE, conf);\n+    Assert.assertEquals(e.getMessage(), \"Neither cube nor dimensions accessed in the query\");\n+  }\n }", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/ea8b970b6cf7bdf6e2768d2012b55b075efbac3c", "parent": "https://github.com/apache/lens/commit/252d67b9c4ac3e28dcb7cc3f813a1f8c52798fb9", "message": "LENS-280 NPE when query fails with execute_timeout api (Amareshwari via jdhok)", "bug_id": "lens_33", "file": [{"additions": 3, "raw_url": "https://github.com/apache/lens/raw/ea8b970b6cf7bdf6e2768d2012b55b075efbac3c/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/ea8b970b6cf7bdf6e2768d2012b55b075efbac3c/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "sha": "2f4493827a8bf9de0ef609862ffdf862fa101e74", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java?ref=ea8b970b6cf7bdf6e2768d2012b55b075efbac3c", "patch": "@@ -1435,6 +1435,9 @@ private QueryHandleWithResultSet executeTimeoutInternal(LensSessionHandle sessio\n       }\n     }\n     QueryCompletionListener listener = new QueryCompletionListenerImpl(handle);\n+    if (getQueryContext(sessionHandle, handle).getSelectedDriver() == null) {\n+      return result;\n+    }\n     getQueryContext(sessionHandle, handle).getSelectedDriver()\n       .registerForCompletionNotification(handle, timeoutMillis, listener);\n     try {\n@@ -1448,7 +1451,6 @@ private QueryHandleWithResultSet executeTimeoutInternal(LensSessionHandle sessio\n       result.setResult(getResultset(handle).toQueryResult());\n     }\n     return result;\n-\n   }\n \n   /**", "filename": "lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java"}, {"additions": 30, "raw_url": "https://github.com/apache/lens/raw/ea8b970b6cf7bdf6e2768d2012b55b075efbac3c/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "blob_url": "https://github.com/apache/lens/blob/ea8b970b6cf7bdf6e2768d2012b55b075efbac3c/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java", "sha": "ea991b744d47dc7d330361d12c4d97835aa29ffe", "changes": 30, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java?ref=ea8b970b6cf7bdf6e2768d2012b55b075efbac3c", "patch": "@@ -1277,6 +1277,36 @@ public void testExecuteWithTimeoutQuery() throws IOException, InterruptedExcepti\n     validateInmemoryResult((InMemoryQueryResult) result.getResult());\n   }\n \n+  /**\n+   * Test execute with timeout query.\n+   *\n+   * @throws IOException          Signals that an I/O exception has occurred.\n+   * @throws InterruptedException the interrupted exception\n+   */\n+  @Test\n+  public void testExecuteWithTimeoutFailingQuery() throws IOException, InterruptedException {\n+    final WebTarget target = target().path(\"queryapi/queries\");\n+\n+    final FormDataMultiPart mp = new FormDataMultiPart();\n+    mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name(\"sessionid\").build(), lensSessionId,\n+      MediaType.APPLICATION_XML_TYPE));\n+    mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name(\"query\").build(), \"select ID from nonexist\"));\n+    mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name(\"operation\").build(), \"execute_with_timeout\"));\n+    // set a timeout value enough for tests\n+    mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name(\"timeoutmillis\").build(), \"300000\"));\n+    mp.bodyPart(new FormDataBodyPart(FormDataContentDisposition.name(\"conf\").fileName(\"conf\").build(), new LensConf(),\n+      MediaType.APPLICATION_XML_TYPE));\n+\n+    QueryHandleWithResultSet result = target.request().post(Entity.entity(mp, MediaType.MULTIPART_FORM_DATA_TYPE),\n+      QueryHandleWithResultSet.class);\n+    Assert.assertNotNull(result.getQueryHandle());\n+    Assert.assertNull(result.getResult());\n+\n+    LensQuery ctx = target.path(result.getQueryHandle().toString()).queryParam(\"sessionid\", lensSessionId).request()\n+      .get(LensQuery.class);\n+    Assert.assertEquals(ctx.getStatus().getStatus(), Status.FAILED);\n+  }\n+\n   /**\n    * Test default config.\n    *", "filename": "lens-server/src/test/java/org/apache/lens/server/query/TestQueryService.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/f28b1e4988474527c414bbb78a7981bfaad77611", "parent": "https://github.com/apache/lens/commit/765664c5e93325302a59e98ab73ddbb326dc1294", "message": "LENS-381 : Fix NPE for fetching result from JDBC (Sushil Mohanty via amareshwari)", "bug_id": "lens_34", "file": [{"additions": 1, "raw_url": "https://github.com/apache/lens/raw/f28b1e4988474527c414bbb78a7981bfaad77611/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractOutputFormatter.java", "blob_url": "https://github.com/apache/lens/blob/f28b1e4988474527c414bbb78a7981bfaad77611/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractOutputFormatter.java", "sha": "b89c350cb6bffa1d3eb12982ed957cc13fa03d3a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractOutputFormatter.java?ref=f28b1e4988474527c414bbb78a7981bfaad77611", "patch": "@@ -137,7 +137,7 @@ private void initColumnFields(LensResultSetMetadata metadata) {\n     StringBuilder typesSb = new StringBuilder();\n     StringBuilder headerTypes = new StringBuilder();\n \n-    if ((metadata != null) && (!metadata.getColumns().isEmpty())) {\n+    if ((metadata != null) && (metadata.getColumns() != null) && (!metadata.getColumns().isEmpty())) {\n       for (int pos = 0; pos < metadata.getColumns().size(); pos++) {\n         if (pos != 0) {\n           typesSb.append(\",\");", "filename": "lens-query-lib/src/main/java/org/apache/lens/lib/query/AbstractOutputFormatter.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/e5691d8d655c94cdd64e0d83028ec59735d73edc", "parent": "https://github.com/apache/lens/commit/09baa12880ba27c00323bbf881e9c69acb580117", "message": "LENS-865: Add/delete partition throws NPE when a part col doesn't exist in the table", "bug_id": "lens_35", "file": [{"additions": 6, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-api/src/main/java/org/apache/lens/api/APIResult.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-api/src/main/java/org/apache/lens/api/APIResult.java", "sha": "0cdee0dcbe4b44398aadc7f5be0f6692b91b34e0", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-api/src/main/java/org/apache/lens/api/APIResult.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -152,11 +152,13 @@ public static APIResult partial(Exception e) {\n   }\n \n   private static String extractCause(Throwable e) {\n-    String cause = null;\n-    while ((cause == null || cause.isEmpty()) && e != null) {\n-      cause = e.getMessage();\n+    StringBuilder cause = new StringBuilder();\n+    String sep = \"\";\n+    while (e != null) {\n+      cause.append(sep).append(e.getMessage());\n       e = e.getCause();\n+      sep = \": \";\n     }\n-    return cause;\n+    return cause.toString();\n   }\n }", "filename": "lens-api/src/main/java/org/apache/lens/api/APIResult.java"}, {"additions": 6, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-api/src/main/resources/lens-errors.conf", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-api/src/main/resources/lens-errors.conf", "sha": "ca8562f14fe9f45889ea59b055cdd1b001f02810", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-api/src/main/resources/lens-errors.conf?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -296,6 +296,12 @@ lensCubeErrorsForMetastore = [\n     httpStatusCode = ${BAD_REQUEST}\n     errorMsg = \"Problem in submitting entity: %s\"\n   }\n+\n+  {\n+      errorCode = 3102\n+      httpStatusCode = ${BAD_REQUEST}\n+      errorMsg = \"No timeline found for fact=%s, storage=%s, update period=%s, partition column=%s.\"\n+  }\n ]\n \n lensCubeErrors = ${lensCubeErrorsForQuery}${lensCubeErrorsForMetastore}", "filename": "lens-api/src/main/resources/lens-errors.conf"}, {"additions": 4, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/main/java/org/apache/lens/cube/error/LensCubeErrorCode.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/main/java/org/apache/lens/cube/error/LensCubeErrorCode.java", "sha": "6c5dc2f7fb2e2c3e53ed5a25adf464d734eca793", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/error/LensCubeErrorCode.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -21,6 +21,7 @@\n import org.apache.lens.server.api.LensErrorInfo;\n \n public enum LensCubeErrorCode {\n+  // Error codes less than 3100 are errors encountered while submitting a query\n   // Error codes same for drivers\n   SYNTAX_ERROR(3001, 0),\n   FIELDS_CANNOT_BE_QUERIED_TOGETHER(3002, 0),\n@@ -54,7 +55,9 @@\n   NO_CANDIDATE_DIM_STORAGE_TABLES(3029, 1300),\n   NO_STORAGE_TABLE_AVAIABLE(3030, 1400),\n   STORAGE_UNION_DISABLED(3031, 100),\n-  ERROR_IN_ENTITY_DEFINITION(3101, 100);\n+  // Error codes greater than 3100 are errors while doing a metastore operation.\n+  ERROR_IN_ENTITY_DEFINITION(3101, 100),\n+  TIMELINE_ABSENT(3102, 100);\n \n   public LensErrorInfo getLensErrorInfo() {\n     return this.errorInfo;", "filename": "lens-cube/src/main/java/org/apache/lens/cube/error/LensCubeErrorCode.java"}, {"additions": 30, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/main/java/org/apache/lens/cube/metadata/CubeMetastoreClient.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/main/java/org/apache/lens/cube/metadata/CubeMetastoreClient.java", "sha": "1f13617be4f964c8ed7326f57bd404ee354aa77f", "changes": 42, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/metadata/CubeMetastoreClient.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -25,6 +25,7 @@\n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import org.apache.lens.cube.error.LensCubeErrorCode;\n import org.apache.lens.cube.metadata.Storage.LatestInfo;\n import org.apache.lens.cube.metadata.Storage.LatestPartColumnInfo;\n import org.apache.lens.cube.metadata.timeline.PartitionTimeline;\n@@ -115,8 +116,7 @@ public Date getLatestDateOfCube(Cube cube, String timeDimension) throws HiveExce\n     for (CubeFactTable fact : getAllFacts(cube)) {\n       for (String storage : fact.getStorages()) {\n         for (UpdatePeriod updatePeriod : fact.getUpdatePeriods().get(storage)) {\n-          PartitionTimeline timeline = partitionTimelineCache.get(fact.getName(), storage, updatePeriod,\n-            partCol);\n+          PartitionTimeline timeline = partitionTimelineCache.get(fact.getName(), storage, updatePeriod, partCol);\n           if (timeline != null) {// this storage table is partitioned by partCol or not.\n             Date latest = timeline.getLatestDate();\n             if (latest != null && latest.after(max)) {\n@@ -424,8 +424,8 @@ public void commitAllBatchAdditions(String storageTable) throws HiveException, L\n     /** check partition existence in the appropriate timeline if it exists */\n     public boolean partitionTimeExists(String name, String storage, UpdatePeriod period, String partCol, Date partSpec)\n       throws HiveException, LensException {\n-      return get(name, storage, period, partCol) != null && get(name, storage, period, partCol).exists(TimePartition.of(\n-        period, partSpec));\n+      return get(name, storage, period, partCol) != null\n+        && get(name, storage, period, partCol).exists(TimePartition.of(period, partSpec));\n     }\n \n     /**\n@@ -437,12 +437,29 @@ public PartitionTimeline get(String fact, String storage, UpdatePeriod updatePer\n       return get(fact, storage) != null && get(fact, storage).get(updatePeriod) != null && get(fact, storage).get(\n         updatePeriod).get(partCol) != null ? get(fact, storage).get(updatePeriod).get(partCol) : null;\n     }\n+    /**\n+     * returns the timeline corresponding to fact-storage table, updatePeriod, partCol. throws exception if not\n+     * exists, which would most probably mean the combination is incorrect.\n+     */\n+    public PartitionTimeline getAndFailFast(String fact, String storage, UpdatePeriod updatePeriod, String partCol)\n+      throws HiveException, LensException {\n+      PartitionTimeline timeline = get(fact, storage, updatePeriod, partCol);\n+      if (timeline == null) {\n+        throw new LensException(LensCubeErrorCode.TIMELINE_ABSENT.getLensErrorInfo(),\n+          fact, storage, updatePeriod, partCol);\n+      }\n+      return timeline;\n+    }\n+\n \n     /** update partition timeline cache for addition of time partition */\n     public void updateForAddition(String cubeTableName, String storageName, UpdatePeriod updatePeriod,\n       Map<String, TreeSet<Date>> timePartSpec) throws HiveException, LensException {\n+      // fail fast. All part cols mentioned in all partitions should exist.\n+      for (String partCol : timePartSpec.keySet()) {\n+        getAndFailFast(cubeTableName, storageName, updatePeriod, partCol);\n+      }\n       for (Map.Entry<String, TreeSet<Date>> entry : timePartSpec.entrySet()) {\n-        //Assume timelines has all the time part columns.\n         for (Date dt : entry.getValue()) {\n           get(cubeTableName, storageName, updatePeriod, entry.getKey()).add(TimePartition.of(updatePeriod, dt));\n         }\n@@ -452,6 +469,10 @@ public void updateForAddition(String cubeTableName, String storageName, UpdatePe\n     /** update partition timeline cache for deletion of time partition */\n     public boolean updateForDeletion(String cubeTableName, String storageName, UpdatePeriod updatePeriod,\n       Map<String, Date> timePartSpec) throws HiveException, LensException {\n+      // fail fast. All part cols mentioned in all partitions should exist.\n+      for (String partCol : timePartSpec.keySet()) {\n+        getAndFailFast(cubeTableName, storageName, updatePeriod, partCol);\n+      }\n       boolean updated = false;\n       for (Map.Entry<String, Date> entry : timePartSpec.entrySet()) {\n         TimePartition part = TimePartition.of(updatePeriod, entry.getValue());\n@@ -1209,24 +1230,21 @@ boolean latestPartitionExists(String factOrDimTblName, String storageName, Strin\n     throws HiveException, LensException {\n     String storageTableName = MetastoreUtil.getStorageTableName(factOrDimTblName, Storage.getPrefix(storageName));\n     if (isDimensionTable(factOrDimTblName)) {\n-      return dimLatestPartitionExists(storageTableName, StorageConstants.getLatestPartFilter(latestPartCol));\n+      return dimTableLatestPartitionExists(storageTableName);\n     } else {\n       return !partitionTimelineCache.noPartitionsExist(factOrDimTblName, storageName, latestPartCol);\n     }\n   }\n \n-  private boolean dimLatestPartitionExists(String storageTableName, String latestPartCol) throws HiveException {\n+  private boolean dimTableLatestPartitionExistsInMetastore(String storageTableName, String latestPartCol)\n+    throws HiveException {\n     return partitionExistsByFilter(storageTableName, StorageConstants.getLatestPartFilter(latestPartCol));\n   }\n \n   public boolean dimTableLatestPartitionExists(String storageTableName) {\n     return latestLookupCache.contains(storageTableName.trim().toLowerCase());\n   }\n \n-  Partition getLatestPart(String storageTableName, String latestPartCol) throws HiveException {\n-    return getLatestPart(storageTableName, latestPartCol, null);\n-  }\n-\n   Partition getLatestPart(String storageTableName, String latestPartCol, Map<String, String> nonTimeParts)\n     throws HiveException {\n     List<Partition> latestParts =\n@@ -1471,7 +1489,7 @@ public CubeDimensionTable getDimensionTable(String tableName) throws HiveExcepti\n                   if (dimTable.hasStorageSnapshots(storageName)) {\n                     String storageTableName = getFactOrDimtableStorageTableName(dimTable.getName(),\n                       storageName);\n-                    if (dimLatestPartitionExists(storageTableName,\n+                    if (dimTableLatestPartitionExistsInMetastore(storageTableName,\n                       getDimension(dimTable.getDimName()).getTimedDimension())) {\n                       latestLookupCache.add(storageTableName.trim().toLowerCase());\n                     }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/metadata/CubeMetastoreClient.java"}, {"additions": 210, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/test/java/org/apache/lens/cube/metadata/TestCubeMetastoreClient.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-cube/src/test/java/org/apache/lens/cube/metadata/TestCubeMetastoreClient.java", "sha": "6b6f645ed9105fa535a63c12abdfa3f80d8a734c", "changes": 404, "status": "modified", "deletions": 194, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/metadata/TestCubeMetastoreClient.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -19,10 +19,16 @@\n \n package org.apache.lens.cube.metadata;\n \n+import static org.apache.lens.cube.metadata.UpdatePeriod.DAILY;\n+import static org.apache.lens.cube.metadata.UpdatePeriod.HOURLY;\n+import static org.apache.lens.cube.metadata.UpdatePeriod.MONTHLY;\n+\n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n \n import java.util.*;\n \n+import org.apache.lens.cube.error.LensCubeErrorCode;\n import org.apache.lens.cube.metadata.ExprColumn.ExprSpec;\n import org.apache.lens.cube.metadata.ReferencedDimAtrribute.ChainRefCol;\n import org.apache.lens.cube.metadata.timeline.EndsAndHolesPartitionTimeline;\n@@ -780,8 +786,8 @@ public void testCubeFact() throws Exception {\n     List<String> timePartCols = new ArrayList<String>();\n     partCols.add(getDatePartition());\n     timePartCols.add(getDatePartitionKey());\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     StorageTableDesc s1 = new StorageTableDesc();\n     s1.setInputFormat(TextInputFormat.class.getCanonicalName());\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n@@ -813,10 +819,20 @@ public void testCubeFact() throws Exception {\n \n     Map<String, Date> timeParts = new HashMap<String, Date>();\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n+    timeParts.put(\"non_existing_part_col\", now);\n+    // test error on adding invalid partition\n     // test partition\n-    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, HOURLY);\n+    try{\n+      client.addPartition(partSpec, c1);\n+      fail(\"Add should fail since non_existing_part_col is non-existing\");\n+    } catch(LensException e){\n+      assertEquals(e.getErrorCode(), LensCubeErrorCode.TIMELINE_ABSENT.getLensErrorInfo().getErrorCode());\n+    }\n+    timeParts.remove(\"non_existing_part_col\");\n+    partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, HOURLY);\n     client.addPartition(partSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -833,36 +849,36 @@ public void testCubeFact() throws Exception {\n     Map<String, Date> timeParts2 = new HashMap<String, Date>();\n     timeParts2.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus1);\n     StoragePartitionDesc partSpec2 =\n-      new StoragePartitionDesc(cubeFact.getName(), timeParts2, null, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeFact.getName(), timeParts2, null, HOURLY);\n     partSpec2.setInputFormat(SequenceFileInputFormat.class.getCanonicalName());\n     partSpec2.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     client.addPartition(partSpec2, c1);\n     assertEquals(client.getAllParts(storageTableName).size(), 2);\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts2,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts2,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     parts = client.getPartitionsByFilter(storageTableName, \"dt='latest'\");\n     assertEquals(parts.size(), 0);\n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts2, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts2, null, HOURLY);\n     assertEquals(client.getAllParts(storageTableName).size(), 1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n-    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts2,\n+    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts2,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     parts = client.getPartitionsByFilter(storageTableName, \"dt='latest'\");\n     assertEquals(parts.size(), 0);\n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts, null, HOURLY);\n     assertEquals(client.getAllParts(storageTableName).size(), 0);\n-    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n-    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts2,\n+    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts2,\n       new HashMap<String, String>()));\n     Assert.assertFalse(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -881,15 +897,15 @@ public void testAlterCubeFact() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n \n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n     partCols.add(getDatePartition());\n     timePartCols.add(getDatePartitionKey());\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     StorageTableDesc s1 = new StorageTableDesc();\n     s1.setInputFormat(TextInputFormat.class.getCanonicalName());\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n@@ -913,12 +929,12 @@ public void testAlterCubeFact() throws Exception {\n     Map<String, String> newProp = new HashMap<String, String>();\n     newProp.put(\"new.prop\", \"val\");\n     factTable.addProperties(newProp);\n-    factTable.addUpdatePeriod(c1, UpdatePeriod.MONTHLY);\n-    factTable.removeUpdatePeriod(c1, UpdatePeriod.HOURLY);\n+    factTable.addUpdatePeriod(c1, MONTHLY);\n+    factTable.removeUpdatePeriod(c1, HOURLY);\n     Set<UpdatePeriod> alterupdates = new HashSet<UpdatePeriod>();\n-    alterupdates.add(UpdatePeriod.HOURLY);\n-    alterupdates.add(UpdatePeriod.DAILY);\n-    alterupdates.add(UpdatePeriod.MONTHLY);\n+    alterupdates.add(HOURLY);\n+    alterupdates.add(DAILY);\n+    alterupdates.add(MONTHLY);\n     factTable.alterStorage(c2, alterupdates);\n \n     client.alterCubeFactTable(factName, factTable, storageTables);\n@@ -928,11 +944,11 @@ public void testAlterCubeFact() throws Exception {\n \n     Assert.assertTrue(altered.weight() == 100L);\n     Assert.assertTrue(altered.getProperties().get(\"new.prop\").equals(\"val\"));\n-    Assert.assertTrue(altered.getUpdatePeriods().get(c1).contains(UpdatePeriod.MONTHLY));\n-    Assert.assertFalse(altered.getUpdatePeriods().get(c1).contains(UpdatePeriod.HOURLY));\n-    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(UpdatePeriod.MONTHLY));\n-    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(UpdatePeriod.DAILY));\n-    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(UpdatePeriod.HOURLY));\n+    Assert.assertTrue(altered.getUpdatePeriods().get(c1).contains(MONTHLY));\n+    Assert.assertFalse(altered.getUpdatePeriods().get(c1).contains(HOURLY));\n+    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(MONTHLY));\n+    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(DAILY));\n+    Assert.assertTrue(altered.getUpdatePeriods().get(c2).contains(HOURLY));\n     Assert.assertTrue(altered.getCubeName().equalsIgnoreCase(CUBE_NAME.toLowerCase()));\n     boolean contains = false;\n     for (FieldSchema column : altered.getColumns()) {\n@@ -1026,8 +1042,8 @@ public void testCubeFactWithTwoTimedParts() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     FieldSchema testDtPart = new FieldSchema(\"mydate\", \"string\", \"date part\");\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n@@ -1071,9 +1087,9 @@ public void testCubeFactWithTwoTimedParts() throws Exception {\n     Map<String, Date> timeParts = new HashMap<String, Date>();\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts.put(testDtPart.getName(), testDt);\n-    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, HOURLY);\n     client.addPartition(partSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, testDtPart.getName()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n@@ -1086,9 +1102,9 @@ public void testCubeFactWithTwoTimedParts() throws Exception {\n     parts = client.getPartitionsByFilter(storageTableName, testDtPart.getName() + \"='latest'\");\n     assertEquals(parts.size(), 0);\n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts, null, HOURLY);\n     assertEquals(client.getAllParts(storageTableName).size(), 0);\n-    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertFalse(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1108,8 +1124,8 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     FieldSchema itPart = new FieldSchema(\"it\", \"string\", \"date part\");\n     FieldSchema etPart = new FieldSchema(\"et\", \"string\", \"date part\");\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n@@ -1158,55 +1174,55 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n \n     Table c1Table = client.getHiveTable(c1TableName);\n     Table c2Table = client.getHiveTable(c2TableName);\n-    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(UpdatePeriod.HOURLY,\n+    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(HOURLY,\n       getDatePartitionKey()), StoreAllPartitionTimeline.class.getCanonicalName());\n-    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(UpdatePeriod.HOURLY,\n+    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(HOURLY,\n       itPart.getName()), StoreAllPartitionTimeline.class.getCanonicalName());\n-    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(UpdatePeriod.HOURLY,\n+    c2Table.getParameters().put(MetastoreUtil.getPartitionTimelineStorageClassKey(HOURLY,\n       etPart.getName()), StoreAllPartitionTimeline.class.getCanonicalName());\n     client.pushHiveTable(c2Table);\n \n     // same before insertion.\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n     EndsAndHolesPartitionTimeline timelineDt = ((EndsAndHolesPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c1, UpdatePeriod.HOURLY, getDatePartitionKey()));\n+      factName, c1, HOURLY, getDatePartitionKey()));\n     EndsAndHolesPartitionTimeline timelineIt = ((EndsAndHolesPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c1, UpdatePeriod.HOURLY, itPart.getName()));\n+      factName, c1, HOURLY, itPart.getName()));\n     EndsAndHolesPartitionTimeline timelineEt = ((EndsAndHolesPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c1, UpdatePeriod.HOURLY, etPart.getName()));\n+      factName, c1, HOURLY, etPart.getName()));\n     StoreAllPartitionTimeline timelineDtC2 = ((StoreAllPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c2, UpdatePeriod.HOURLY, getDatePartitionKey()));\n+      factName, c2, HOURLY, getDatePartitionKey()));\n     StoreAllPartitionTimeline timelineItC2 = ((StoreAllPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c2, UpdatePeriod.HOURLY, itPart.getName()));\n+      factName, c2, HOURLY, itPart.getName()));\n     StoreAllPartitionTimeline timelineEtC2 = ((StoreAllPartitionTimeline) client.partitionTimelineCache.get(\n-      factName, c2, UpdatePeriod.HOURLY, etPart.getName()));\n+      factName, c2, HOURLY, etPart.getName()));\n \n     Map<String, Date> timeParts1 = new HashMap<String, Date>();\n     timeParts1.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts1.put(itPart.getName(), now);\n     timeParts1.put(etPart.getName(), now);\n     StoragePartitionDesc partSpec1 = new StoragePartitionDesc(cubeFact.getName(), timeParts1, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     Map<String, Date> timeParts2 = new HashMap<String, Date>();\n     timeParts2.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts2.put(etPart.getName(), nowPlus1);\n     Map<String, String> nonTimeSpec = new HashMap<String, String>();\n     nonTimeSpec.put(itPart.getName(), \"default\");\n     final StoragePartitionDesc partSpec2 = new StoragePartitionDesc(cubeFact.getName(), timeParts2, nonTimeSpec,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     Map<String, Date> timeParts3 = new HashMap<String, Date>();\n     timeParts3.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts3.put(etPart.getName(), now);\n     final StoragePartitionDesc partSpec3 = new StoragePartitionDesc(cubeFact.getName(), timeParts3, nonTimeSpec,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartitions(Arrays.asList(partSpec1, partSpec2, partSpec3), c1);\n     client.addPartitions(Arrays.asList(partSpec1, partSpec2, partSpec3), c2);\n-    PartitionTimeline timeline1Temp = client.partitionTimelineCache.get(factName, c1, UpdatePeriod.HOURLY,\n+    PartitionTimeline timeline1Temp = client.partitionTimelineCache.get(factName, c1, HOURLY,\n       getDatePartitionKey());\n-    PartitionTimeline timeline2Temp = client.partitionTimelineCache.get(factName, c2, UpdatePeriod.HOURLY,\n+    PartitionTimeline timeline2Temp = client.partitionTimelineCache.get(factName, c2, HOURLY,\n       getDatePartitionKey());\n \n     assertEquals(timeline1Temp.getClass(), EndsAndHolesPartitionTimeline.class);\n@@ -1215,11 +1231,11 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n     assertEquals(client.getAllParts(c1TableName).size(), 3);\n     assertEquals(client.getAllParts(c2TableName).size(), 3);\n \n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n \n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, now, now);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, now, nowPlus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, now, now);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, now, now);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, now, nowPlus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, now, now);\n \n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1234,27 +1250,27 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n     timeParts4.put(itPart.getName(), nowPlus1);\n     timeParts4.put(etPart.getName(), nowMinus1);\n     final StoragePartitionDesc partSpec4 = new StoragePartitionDesc(cubeFact.getName(), timeParts4, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n \n     Map<String, Date> timeParts5 = new HashMap<String, Date>();\n     timeParts5.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus1);\n     timeParts5.put(itPart.getName(), nowMinus1);\n     timeParts5.put(etPart.getName(), nowMinus2);\n     final StoragePartitionDesc partSpec5 = new StoragePartitionDesc(cubeFact.getName(), timeParts5, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartitions(Arrays.asList(partSpec4, partSpec5), c1);\n     client.addPartitions(Arrays.asList(partSpec4, partSpec5), c2);\n \n     assertEquals(client.getAllParts(c1TableName).size(), 5);\n     assertEquals(client.getAllParts(c2TableName).size(), 5);\n \n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n \n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, now, nowPlus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, nowPlus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, nowPlus1);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, now, nowPlus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, nowPlus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, nowPlus1);\n \n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1266,26 +1282,26 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n     timeParts6.put(itPart.getName(), nowMinus1);\n     timeParts6.put(etPart.getName(), nowMinus2);\n     final StoragePartitionDesc partSpec6 = new StoragePartitionDesc(cubeFact.getName(), timeParts6, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartition(partSpec6, c1);\n     client.addPartition(partSpec6, c2);\n \n     assertEquals(client.getAllParts(c1TableName).size(), 6);\n     assertEquals(client.getAllParts(c2TableName).size(), 6);\n \n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n \n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus2, nowPlus1, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, nowPlus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, nowPlus1);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus2, nowPlus1, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, nowPlus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, nowPlus1);\n \n     Map<String, Date> timeParts7 = new HashMap<String, Date>();\n     timeParts7.put(TestCubeMetastoreClient.getDatePartitionKey(), nowMinus5);\n     timeParts7.put(itPart.getName(), nowMinus5);\n     timeParts7.put(etPart.getName(), nowMinus5);\n     final StoragePartitionDesc partSpec7 = new StoragePartitionDesc(cubeFact.getName(), timeParts7, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartition(partSpec7, c1);\n     client.addPartition(partSpec7, c2);\n@@ -1312,98 +1328,98 @@ public void testCubeFactWithThreeTimedParts() throws Exception {\n     client.updatePartitions(factName, c2, c2Parts);\n     assertSamePartitions(client.getAllParts(c2TableName), c2Parts);\n \n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n \n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus2);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus2);\n \n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n     assertEquals(Hive.get(client.getConf()).getTable(c1TableName).getParameters().get(\n       MetastoreUtil.getPartitionTimelineCachePresenceKey()), \"true\");\n     assertEquals(Hive.get(client.getConf()).getTable(c2TableName).getParameters().get(\n       MetastoreUtil.getPartitionTimelineCachePresenceKey()), \"true\");\n \n     // alter tables and see timeline still exists\n     client.alterCubeFactTable(factName, cubeFact, storageTables);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n     assertEquals(Hive.get(client.getConf()).getTable(c1TableName).getParameters().get(\n       MetastoreUtil.getPartitionTimelineCachePresenceKey()), \"true\");\n     assertEquals(Hive.get(client.getConf()).getTable(c2TableName).getParameters().get(\n       MetastoreUtil.getPartitionTimelineCachePresenceKey()), \"true\");\n \n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts5, null, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts5, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts5, null, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts5, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 6);\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, itPart.getName()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, etPart.getName()));\n \n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n \n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus5, now, nowMinus4, nowMinus3, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus2);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus5, now, nowMinus4, nowMinus3, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus5, nowPlus1, nowMinus4, nowMinus3, nowMinus2);\n \n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts7, null, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts7, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts7, null, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts7, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 5);\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, itPart.getName()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, etPart.getName()));\n \n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, nowPlus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, nowPlus1);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, nowPlus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, nowPlus1);\n \n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts2, nonTimeSpec, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts2, nonTimeSpec, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts2, nonTimeSpec, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts2, nonTimeSpec, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 4);\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, itPart.getName()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1, etPart.getName()));\n \n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, now);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, nowPlus1);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, now);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, nowPlus1);\n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts4, null, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts4, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts4, null, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts4, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 3);\n \n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, now);\n-    client.dropPartition(cubeFact.getName(), c1, timeParts3, nonTimeSpec, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts3, nonTimeSpec, UpdatePeriod.HOURLY);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, nowMinus2, now, nowMinus1);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, nowMinus1, now);\n-\n-    client.dropPartition(cubeFact.getName(), c1, timeParts6, null, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts6, null, UpdatePeriod.HOURLY);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n-    assertTimeline(timelineDt, timelineDtC2, UpdatePeriod.HOURLY, now, now);\n-    assertTimeline(timelineEt, timelineEtC2, UpdatePeriod.HOURLY, now, now);\n-    assertTimeline(timelineIt, timelineItC2, UpdatePeriod.HOURLY, now, now);\n-    client.dropPartition(cubeFact.getName(), c1, timeParts1, null, UpdatePeriod.HOURLY);\n-    client.dropPartition(cubeFact.getName(), c2, timeParts1, null, UpdatePeriod.HOURLY);\n-    assertSameTimelines(factName, storages, UpdatePeriod.HOURLY, partColNames);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, now);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts3, nonTimeSpec, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts3, nonTimeSpec, HOURLY);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, nowMinus2, now, nowMinus1);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, nowMinus1, now);\n+\n+    client.dropPartition(cubeFact.getName(), c1, timeParts6, null, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts6, null, HOURLY);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n+    assertTimeline(timelineDt, timelineDtC2, HOURLY, now, now);\n+    assertTimeline(timelineEt, timelineEtC2, HOURLY, now, now);\n+    assertTimeline(timelineIt, timelineItC2, HOURLY, now, now);\n+    client.dropPartition(cubeFact.getName(), c1, timeParts1, null, HOURLY);\n+    client.dropPartition(cubeFact.getName(), c2, timeParts1, null, HOURLY);\n+    assertSameTimelines(factName, storages, HOURLY, partColNames);\n     Assert.assertTrue(timelineDt.isEmpty());\n     Assert.assertTrue(timelineEt.isEmpty());\n     Assert.assertTrue(timelineIt.isEmpty());\n@@ -1529,8 +1545,8 @@ public void testCubeFactWithWeight() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n     partCols.add(getDatePartition());\n@@ -1566,9 +1582,9 @@ public void testCubeFactWithWeight() throws Exception {\n     // test partition\n     Map<String, Date> timeParts = new HashMap<String, Date>();\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n-    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc partSpec = new StoragePartitionDesc(cubeFact.getName(), timeParts, null, HOURLY);\n     client.addPartition(partSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1577,8 +1593,8 @@ public void testCubeFactWithWeight() throws Exception {\n     assertEquals(parts.size(), 0);\n     assertEquals(client.getAllParts(storageTableName).size(), 1);\n \n-    client.dropPartition(cubeFact.getName(), c1, timeParts, null, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    client.dropPartition(cubeFact.getName(), c1, timeParts, null, HOURLY);\n+    Assert.assertFalse(client.factPartitionExists(cubeFact.getName(), c1, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertFalse(client.latestPartitionExists(cubeFact.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1603,8 +1619,8 @@ public void testCubeFactWithParts() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n     partCols.add(getDatePartition());\n@@ -1647,9 +1663,9 @@ public void testCubeFactWithParts() throws Exception {\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     // test partition\n     StoragePartitionDesc sPartSpec =\n-      new StoragePartitionDesc(cubeFactWithParts.getName(), timeParts, partSpec, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeFactWithParts.getName(), timeParts, partSpec, HOURLY);\n     client.addPartition(sPartSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFactWithParts.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFactWithParts.getName(), c1, HOURLY, timeParts,\n       partSpec));\n     Assert.assertTrue(client.latestPartitionExists(cubeFactWithParts.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1659,8 +1675,8 @@ public void testCubeFactWithParts() throws Exception {\n     List<Partition> parts = client.getPartitionsByFilter(storageTableName, \"dt='latest'\");\n     assertEquals(parts.size(), 0);\n \n-    client.dropPartition(cubeFactWithParts.getName(), c1, timeParts, partSpec, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.factPartitionExists(cubeFactWithParts.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    client.dropPartition(cubeFactWithParts.getName(), c1, timeParts, partSpec, HOURLY);\n+    Assert.assertFalse(client.factPartitionExists(cubeFactWithParts.getName(), c1, HOURLY, timeParts,\n       partSpec));\n     Assert.assertFalse(client.latestPartitionExists(cubeFactWithParts.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1685,8 +1701,8 @@ public void testCubeFactWithPartsAndTimedParts() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     FieldSchema testDtPart = new FieldSchema(\"mydate\", \"string\", \"date part\");\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n@@ -1734,9 +1750,9 @@ public void testCubeFactWithPartsAndTimedParts() throws Exception {\n     timeParts.put(testDtPart.getName(), testDt);\n     // test partition\n     StoragePartitionDesc sPartSpec =\n-      new StoragePartitionDesc(cubeFactWithParts.getName(), timeParts, partSpec, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeFactWithParts.getName(), timeParts, partSpec, HOURLY);\n     client.addPartition(sPartSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFactWithParts.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFactWithParts.getName(), c1, HOURLY, timeParts,\n       partSpec));\n     Assert.assertTrue(client.latestPartitionExists(cubeFactWithParts.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1747,8 +1763,8 @@ public void testCubeFactWithPartsAndTimedParts() throws Exception {\n \n     assertNoPartitionNamedLatest(storageTableName, \"dt\", testDtPart.getName());\n \n-    client.dropPartition(cubeFactWithParts.getName(), c1, timeParts, partSpec, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.factPartitionExists(cubeFactWithParts.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    client.dropPartition(cubeFactWithParts.getName(), c1, timeParts, partSpec, HOURLY);\n+    Assert.assertFalse(client.factPartitionExists(cubeFactWithParts.getName(), c1, HOURLY, timeParts,\n       partSpec));\n     Assert.assertFalse(client.latestPartitionExists(cubeFactWithParts.getName(), c1, testDtPart.getName()));\n     Assert.assertFalse(client.latestPartitionExists(cubeFactWithParts.getName(), c1,\n@@ -1774,8 +1790,8 @@ public void testCubeFactWithTwoStorages() throws Exception {\n \n     Map<String, Set<UpdatePeriod>> updatePeriods = new HashMap<String, Set<UpdatePeriod>>();\n     Set<UpdatePeriod> updates = new HashSet<UpdatePeriod>();\n-    updates.add(UpdatePeriod.HOURLY);\n-    updates.add(UpdatePeriod.DAILY);\n+    updates.add(HOURLY);\n+    updates.add(DAILY);\n     ArrayList<FieldSchema> partCols = new ArrayList<FieldSchema>();\n     List<String> timePartCols = new ArrayList<String>();\n     partCols.add(getDatePartition());\n@@ -1823,9 +1839,9 @@ public void testCubeFactWithTwoStorages() throws Exception {\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     // test partition\n     StoragePartitionDesc sPartSpec =\n-      new StoragePartitionDesc(cubeFactWithTwoStorages.getName(), timeParts, partSpec, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeFactWithTwoStorages.getName(), timeParts, partSpec, HOURLY);\n     client.addPartition(sPartSpec, c1);\n-    Assert.assertTrue(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c1, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c1, HOURLY, timeParts,\n       partSpec));\n     Assert.assertTrue(client.latestPartitionExists(cubeFactWithTwoStorages.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1835,9 +1851,9 @@ public void testCubeFactWithTwoStorages() throws Exception {\n     assertNoPartitionNamedLatest(storageTableName, \"dt\");\n \n     StoragePartitionDesc sPartSpec2 =\n-      new StoragePartitionDesc(cubeFactWithTwoStorages.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeFactWithTwoStorages.getName(), timeParts, null, HOURLY);\n     client.addPartition(sPartSpec2, c2);\n-    Assert.assertTrue(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c2, UpdatePeriod.HOURLY, timeParts,\n+    Assert.assertTrue(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c2, HOURLY, timeParts,\n       new HashMap<String, String>()));\n     Assert.assertTrue(client.latestPartitionExists(cubeFactWithTwoStorages.getName(), c2,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1846,15 +1862,15 @@ public void testCubeFactWithTwoStorages() throws Exception {\n \n     assertNoPartitionNamedLatest(storageTableName2, \"dt\");\n \n-    client.dropPartition(cubeFactWithTwoStorages.getName(), c1, timeParts, partSpec, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c1, UpdatePeriod.HOURLY,\n+    client.dropPartition(cubeFactWithTwoStorages.getName(), c1, timeParts, partSpec, HOURLY);\n+    Assert.assertFalse(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c1, HOURLY,\n       timeParts, partSpec));\n     Assert.assertFalse(client.latestPartitionExists(cubeFactWithTwoStorages.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     assertEquals(client.getAllParts(storageTableName).size(), 0);\n \n-    client.dropPartition(cubeFactWithTwoStorages.getName(), c2, timeParts, null, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c2, UpdatePeriod.HOURLY,\n+    client.dropPartition(cubeFactWithTwoStorages.getName(), c2, timeParts, null, HOURLY);\n+    Assert.assertFalse(client.factPartitionExists(cubeFactWithTwoStorages.getName(), c2, HOURLY,\n       timeParts, new HashMap<String, String>()));\n     Assert.assertFalse(client.latestPartitionExists(cubeFactWithTwoStorages.getName(), c2,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1881,7 +1897,7 @@ public void testCubeDimWithWeight() throws Exception {\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     s1.setPartCols(partCols);\n     s1.setTimePartCols(timePartCols);\n-    dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n+    dumpPeriods.put(c1, HOURLY);\n \n     Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n     storageTables.put(c1, s1);\n@@ -1913,7 +1929,7 @@ public void testCubeDimWithWeight() throws Exception {\n     // test partition\n     Map<String, Date> timeParts = new HashMap<String, Date>();\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n-    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(cubeDim.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(cubeDim.getName(), timeParts, null, HOURLY);\n     client.addPartition(sPartSpec, c1);\n     Assert.assertTrue(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n     Assert\n@@ -1924,9 +1940,9 @@ public void testCubeDimWithWeight() throws Exception {\n     assertEquals(1, parts.size());\n     assertEquals(TextInputFormat.class.getCanonicalName(), parts.get(0).getInputFormatClass().getCanonicalName());\n     assertEquals(parts.get(0).getParameters().get(MetastoreUtil.getLatestPartTimestampKey(\"dt\")),\n-      UpdatePeriod.HOURLY.format().format(now));\n+      HOURLY.format().format(now));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts, null, HOURLY);\n     Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n     Assert.assertFalse(client.latestPartitionExists(cubeDim.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n@@ -1954,7 +1970,7 @@ public void testCubeDim() throws Exception {\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     s1.setPartCols(partCols);\n     s1.setTimePartCols(timePartCols);\n-    dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n+    dumpPeriods.put(c1, HOURLY);\n \n     Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n     storageTables.put(c1, s1);\n@@ -1993,7 +2009,7 @@ public void testCubeDim() throws Exception {\n     Assert.assertFalse(client.dimTableLatestPartitionExists(storageTableName));\n     Map<String, Date> timeParts = new HashMap<String, Date>();\n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n-    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(cubeDim.getName(), timeParts, null, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(cubeDim.getName(), timeParts, null, HOURLY);\n     client.addPartition(sPartSpec, c1);\n     Assert.assertTrue(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n     Assert\n@@ -2005,7 +2021,7 @@ public void testCubeDim() throws Exception {\n     assertEquals(TextInputFormat.class.getCanonicalName(), parts.get(0).getInputFormatClass().getCanonicalName());\n     Assert.assertFalse(parts.get(0).getCols().contains(newcol));\n     assertEquals(parts.get(0).getParameters().get(MetastoreUtil.getLatestPartTimestampKey(\"dt\")),\n-      UpdatePeriod.HOURLY.format().format(now));\n+      HOURLY.format().format(now));\n \n     // Partition with different schema\n     cubeDim.alterColumn(newcol);\n@@ -2014,7 +2030,7 @@ public void testCubeDim() throws Exception {\n     Map<String, Date> timeParts2 = new HashMap<String, Date>();\n     timeParts2.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus1);\n     StoragePartitionDesc sPartSpec2 =\n-      new StoragePartitionDesc(cubeDim.getName(), timeParts2, null, UpdatePeriod.HOURLY);\n+      new StoragePartitionDesc(cubeDim.getName(), timeParts2, null, HOURLY);\n     sPartSpec2.setInputFormat(SequenceFileInputFormat.class.getCanonicalName());\n     sPartSpec2.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     client.addPartition(sPartSpec2, c1);\n@@ -2029,24 +2045,24 @@ public void testCubeDim() throws Exception {\n       .getCanonicalName());\n     Assert.assertTrue(parts.get(0).getCols().contains(newcol));\n     assertEquals(parts.get(0).getParameters().get(MetastoreUtil.getLatestPartTimestampKey(\"dt\")),\n-      UpdatePeriod.HOURLY.format().format(nowPlus1));\n+      HOURLY.format().format(nowPlus1));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts2, null, UpdatePeriod.HOURLY);\n-    Assert.assertTrue(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n-    Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts2));\n+    client.dropPartition(cubeDim.getName(), c1, timeParts, null, HOURLY);\n+    Assert.assertTrue(client.dimPartitionExists(cubeDim.getName(), c1, timeParts2));\n+    Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n     Assert\n       .assertTrue(client.latestPartitionExists(cubeDim.getName(), c1, TestCubeMetastoreClient.getDatePartitionKey()));\n     Assert.assertTrue(client.dimTableLatestPartitionExists(storageTableName));\n     parts = client.getPartitionsByFilter(storageTableName, \"dt='latest'\");\n     assertEquals(1, parts.size());\n     assertEquals(TextInputFormat.class.getCanonicalName(), parts.get(0).getInputFormatClass().getCanonicalName());\n     assertEquals(parts.get(0).getParameters().get(MetastoreUtil.getLatestPartTimestampKey(\"dt\")),\n-      UpdatePeriod.HOURLY.format().format(now));\n+      HOURLY.format().format(nowPlus1));\n     assertEquals(client.getAllParts(storageTableName).size(), 2);\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts, null, UpdatePeriod.HOURLY);\n-    Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n+    client.dropPartition(cubeDim.getName(), c1, timeParts2, null, HOURLY);\n     Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts2));\n+    Assert.assertFalse(client.dimPartitionExists(cubeDim.getName(), c1, timeParts));\n     Assert.assertFalse(client.latestPartitionExists(cubeDim.getName(), c1,\n       TestCubeMetastoreClient.getDatePartitionKey()));\n     assertEquals(client.getAllParts(storageTableName).size(), 0);\n@@ -2094,42 +2110,42 @@ public void testCubeDimWithNonTimeParts() throws Exception {\n \n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     nonTimeParts.put(\"region\", \"asia\");\n-    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    StoragePartitionDesc sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, HOURLY);\n     client.addPartition(sPartSpec, c3);\n     expectedLatestValues.put(\"asia\", now);\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), nowMinus1);\n     nonTimeParts.put(\"region\", \"africa\");\n-    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, HOURLY);\n     client.addPartition(sPartSpec, c3);\n     expectedLatestValues.put(\"asia\", now);\n     expectedLatestValues.put(\"africa\", nowMinus1);\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus1);\n     nonTimeParts.put(\"region\", \"africa\");\n-    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, HOURLY);\n     client.addPartition(sPartSpec, c3);\n     expectedLatestValues.put(\"asia\", now);\n     expectedLatestValues.put(\"africa\", nowPlus1);\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus3);\n     nonTimeParts.put(\"region\", \"asia\");\n-    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    sPartSpec = new StoragePartitionDesc(dimName, timeParts, nonTimeParts, HOURLY);\n     client.addPartition(sPartSpec, c3);\n     expectedLatestValues.put(\"asia\", nowPlus3);\n     expectedLatestValues.put(\"africa\", nowPlus1);\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n-    client.dropPartition(dimName, c3, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    client.dropPartition(dimName, c3, timeParts, nonTimeParts, HOURLY);\n     expectedLatestValues.put(\"asia\", now);\n     expectedLatestValues.put(\"africa\", nowPlus1);\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n     timeParts.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n-    client.dropPartition(dimName, c3, timeParts, nonTimeParts, UpdatePeriod.HOURLY);\n+    client.dropPartition(dimName, c3, timeParts, nonTimeParts, HOURLY);\n     expectedLatestValues.remove(\"asia\");\n     assertLatestForRegions(storageTableName, expectedLatestValues);\n \n@@ -2148,7 +2164,7 @@ private void assertLatestForRegions(String storageTableName, Map<String, Date> e\n     assertEquals(parts.size(), expectedLatestValues.size());\n     for (Partition part : parts) {\n       assertEquals(MetastoreUtil.getLatestTimeStampOfDimtable(part, getDatePartitionKey()),\n-        TimePartition.of(UpdatePeriod.HOURLY, expectedLatestValues.get(part.getSpec().get(\"region\"))).getDate());\n+        TimePartition.of(HOURLY, expectedLatestValues.get(part.getSpec().get(\"region\"))).getDate());\n     }\n   }\n \n@@ -2181,7 +2197,7 @@ public void testCubeDimWithThreeTimedParts() throws Exception {\n     s1.setTimePartCols(timePartCols);\n     String[] partColNames = new String[]{getDatePartitionKey(), itPart.getName(), etPart.getName()};\n     Map<String, UpdatePeriod> dumpPeriods = new HashMap<String, UpdatePeriod>();\n-    dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n+    dumpPeriods.put(c1, HOURLY);\n \n     Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n     storageTables.put(c1, s1);\n@@ -2218,55 +2234,55 @@ public void testCubeDimWithThreeTimedParts() throws Exception {\n     timeParts1.put(itPart.getName(), now);\n     timeParts1.put(etPart.getName(), now);\n     StoragePartitionDesc partSpec1 = new StoragePartitionDesc(cubeDim.getName(), timeParts1, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     Map<String, Date> timeParts2 = new HashMap<String, Date>();\n     timeParts2.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts2.put(etPart.getName(), nowPlus1);\n     Map<String, String> nonTimeSpec = new HashMap<String, String>();\n     nonTimeSpec.put(itPart.getName(), \"default\");\n     final StoragePartitionDesc partSpec2 = new StoragePartitionDesc(cubeDim.getName(), timeParts2, nonTimeSpec,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     Map<String, Date> timeParts3 = new HashMap<String, Date>();\n     timeParts3.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts3.put(etPart.getName(), now);\n     final StoragePartitionDesc partSpec3 = new StoragePartitionDesc(cubeDim.getName(), timeParts3, nonTimeSpec,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartitions(Arrays.asList(partSpec1, partSpec2, partSpec3), c1);\n     String c1TableName = MetastoreUtil.getFactOrDimtableStorageTableName(cubeDim.getName(), c1);\n     assertEquals(client.getAllParts(c1TableName).size(), 8);\n \n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, now, now, nowPlus1));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, now, now, nowPlus1));\n \n     Map<String, Date> timeParts4 = new HashMap<String, Date>();\n     timeParts4.put(TestCubeMetastoreClient.getDatePartitionKey(), now);\n     timeParts4.put(itPart.getName(), nowPlus1);\n     timeParts4.put(etPart.getName(), nowMinus1);\n     final StoragePartitionDesc partSpec4 = new StoragePartitionDesc(cubeDim.getName(), timeParts4, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n \n     Map<String, Date> timeParts5 = new HashMap<String, Date>();\n     timeParts5.put(TestCubeMetastoreClient.getDatePartitionKey(), nowPlus1);\n     timeParts5.put(itPart.getName(), nowMinus1);\n     timeParts5.put(etPart.getName(), nowMinus2);\n     final StoragePartitionDesc partSpec5 = new StoragePartitionDesc(cubeDim.getName(), timeParts5, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartitions(Arrays.asList(partSpec4, partSpec5), c1);\n \n     assertEquals(client.getAllParts(c1TableName).size(), 10);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, nowPlus1, nowPlus1, nowPlus1));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, nowPlus1, nowPlus1, nowPlus1));\n     Map<String, Date> timeParts6 = new HashMap<String, Date>();\n     timeParts6.put(TestCubeMetastoreClient.getDatePartitionKey(), nowMinus2);\n     timeParts6.put(itPart.getName(), nowMinus1);\n     timeParts6.put(etPart.getName(), nowMinus2);\n     final StoragePartitionDesc partSpec6 = new StoragePartitionDesc(cubeDim.getName(), timeParts6, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartition(partSpec6, c1);\n \n@@ -2278,38 +2294,38 @@ public void testCubeDimWithThreeTimedParts() throws Exception {\n     timeParts7.put(itPart.getName(), nowMinus5);\n     timeParts7.put(etPart.getName(), nowMinus5);\n     final StoragePartitionDesc partSpec7 = new StoragePartitionDesc(cubeDim.getName(), timeParts7, null,\n-      UpdatePeriod.HOURLY);\n+      HOURLY);\n \n     client.addPartition(partSpec7, c1);\n     assertEquals(client.getAllParts(c1TableName).size(), 12);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, nowPlus1, nowPlus1, nowPlus1));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, nowPlus1, nowPlus1, nowPlus1));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts5, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts5, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 11);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, now, nowPlus1, nowPlus1));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, now, nowPlus1, nowPlus1));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts7, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts7, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 10);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, now, nowPlus1, nowPlus1));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, now, nowPlus1, nowPlus1));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts2, nonTimeSpec, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts2, nonTimeSpec, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 9);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, now, nowPlus1, now));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, now, nowPlus1, now));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts4, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts4, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 8);\n-    assertEquals(getLatestValues(c1TableName, UpdatePeriod.HOURLY, partColNames, null),\n-      toPartitionArray(UpdatePeriod.HOURLY, now, now, now));\n+    assertEquals(getLatestValues(c1TableName, HOURLY, partColNames, null),\n+      toPartitionArray(HOURLY, now, now, now));\n \n-    client.dropPartition(cubeDim.getName(), c1, timeParts3, nonTimeSpec, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts3, nonTimeSpec, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 5);\n-    client.dropPartition(cubeDim.getName(), c1, timeParts6, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts6, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 4);\n-    client.dropPartition(cubeDim.getName(), c1, timeParts1, null, UpdatePeriod.HOURLY);\n+    client.dropPartition(cubeDim.getName(), c1, timeParts1, null, HOURLY);\n     assertEquals(client.getAllParts(c1TableName).size(), 0);\n     assertNoPartitionNamedLatest(c1TableName, partColNames);\n   }\n@@ -2331,7 +2347,7 @@ public void testAlterDim() throws Exception {\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     s1.setPartCols(partCols);\n     s1.setTimePartCols(timePartCols);\n-    dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n+    dumpPeriods.put(c1, HOURLY);\n \n     Map<String, StorageTableDesc> storageTables = new HashMap<String, StorageTableDesc>();\n     storageTables.put(c1, s1);\n@@ -2418,7 +2434,7 @@ public void testAlterDim() throws Exception {\n     s2.setInputFormat(TextInputFormat.class.getCanonicalName());\n     s2.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     client.addStorage(dimTable, c2, null, s2);\n-    client.addStorage(dimTable, c3, UpdatePeriod.DAILY, s1);\n+    client.addStorage(dimTable, c3, DAILY, s1);\n     Assert.assertTrue(client.tableExists(MetastoreUtil.getFactOrDimtableStorageTableName(dimTblName, c2)));\n     Assert.assertTrue(client.tableExists(MetastoreUtil.getFactOrDimtableStorageTableName(dimTblName, c3)));\n     CubeDimensionTable altered3 = client.getDimensionTable(dimTblName);\n@@ -2501,7 +2517,7 @@ public void testCubeDimWithTwoStorages() throws Exception {\n     s1.setOutputFormat(HiveIgnoreKeyTextOutputFormat.class.getCanonicalName());\n     s1.setPartCols(partCols);\n     s1.setTimePartCols(timePartCols);\n-    dumpPeriods.put(c1, UpdatePeriod.HOURLY);\n+    dumpPeriods.put(c1, HOURLY);\n \n     StorageTableDesc s2 = new StorageTableDesc();\n     s2.setInputFormat(TextInputFormat.class.getCanonicalName());", "filename": "lens-cube/src/test/java/org/apache/lens/cube/metadata/TestCubeMetastoreClient.java"}, {"additions": 7, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server-api/src/main/java/org/apache/lens/server/api/error/LensException.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server-api/src/main/java/org/apache/lens/server/api/error/LensException.java", "sha": "a1ffeb6a3007a00ee6e3668c26fb2c722a75dcc0", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server-api/src/main/java/org/apache/lens/server/api/error/LensException.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -55,6 +55,7 @@\n \n   @Getter\n   private final LensErrorInfo errorInfo;\n+  private String formattedErrorMsg;\n \n   public int getErrorCode() {\n     return errorInfo.getErrorCode();\n@@ -202,11 +203,16 @@ protected LensErrorTO buildLensErrorTO(final ErrorCollection errorCollection, fi\n \n   private LensErrorTO buildLensErrorTO(final ErrorCollection errorCollection, final LensError lensError) {\n \n-    final String formattedErrorMsg = getFormattedErrorMsg(lensError);\n+    formattedErrorMsg = getFormattedErrorMsg(lensError);\n     final String stackTrace = getStackTraceString();\n     return buildLensErrorTO(errorCollection, formattedErrorMsg, stackTrace);\n   }\n \n+  @Override\n+  public String getMessage() {\n+    return formattedErrorMsg != null ? formattedErrorMsg : super.getMessage();\n+  }\n+\n   @Override\n   public boolean equals(final Object o) {\n ", "filename": "lens-server-api/src/main/java/org/apache/lens/server/api/error/LensException.java"}, {"additions": 207, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server/src/main/java/org/apache/lens/server/metastore/MetastoreResource.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server/src/main/java/org/apache/lens/server/metastore/MetastoreResource.java", "sha": "fb937c600d3e59c1d1dd226dce6dd7671ada57ff", "changes": 384, "status": "modified", "deletions": 177, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/metastore/MetastoreResource.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -26,13 +26,17 @@\n import javax.ws.rs.core.MediaType;\n import javax.xml.bind.JAXBElement;\n \n-import org.apache.lens.api.*;\n+import org.apache.lens.api.APIResult;\n import org.apache.lens.api.APIResult.*;\n+import org.apache.lens.api.DateTime;\n+import org.apache.lens.api.LensSessionHandle;\n+import org.apache.lens.api.StringList;\n import org.apache.lens.api.metastore.*;\n import org.apache.lens.server.LensServices;\n import org.apache.lens.server.api.error.LensException;\n import org.apache.lens.server.api.metastore.CubeMetastoreService;\n \n+import org.apache.commons.lang.NotImplementedException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n \n@@ -52,11 +56,11 @@\n public class MetastoreResource {\n   public static final ObjectFactory X_CUBE_OBJECT_FACTORY = new ObjectFactory();\n \n-  public CubeMetastoreService getSvc() {\n+  public static CubeMetastoreService getSvc() {\n     return LensServices.get().getService(CubeMetastoreService.NAME);\n   }\n \n-  private void checkSessionId(LensSessionHandle sessionHandle) {\n+  private static void checkSessionId(LensSessionHandle sessionHandle) {\n     if (sessionHandle == null) {\n       throw new BadRequestException(\"Invalid session handle\");\n     }\n@@ -75,6 +79,154 @@ private void checkNonNullPartitionList(XPartitionList partitions) {\n     checkNonNullArgs(\"One partition is null\", partitions.getPartition().toArray());\n   }\n \n+  private static LensException processLensException(LensException exc) {\n+    if (exc != null) {\n+      exc.buildLensErrorTO(LensServices.get().getErrorCollection());\n+    }\n+    return exc;\n+  }\n+\n+  public enum Entity {\n+    DATABASE {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionHandle) throws LensException {\n+        return getSvc().getAllDatabases(sessionHandle);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          throw new NotImplementedException();\n+        } else {\n+          getSvc().dropDatabase(sessionid, entityName, cascade);\n+        }\n+      }\n+\n+    }, STORAGE {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionid) throws LensException {\n+        return getSvc().getAllStorageNames(sessionid);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          getSvc().dropStorage(sessionid, entityName);\n+        } else {\n+          throw new NotImplementedException();\n+        }\n+      }\n+    }, CUBE {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionHandle) throws LensException {\n+        return getSvc().getAllCubeNames(sessionHandle);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          getSvc().dropCube(sessionid, entityName);\n+        } else {\n+          throw new NotImplementedException();\n+        }\n+      }\n+    }, FACT {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionid) throws LensException {\n+        return getSvc().getAllFactNames(sessionid, null);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          throw new NotImplementedException();\n+        } else {\n+          getSvc().dropFactTable(sessionid, entityName, cascade);\n+        }\n+      }\n+    }, DIMENSION {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionid) throws LensException {\n+        return getSvc().getAllDimensionNames(sessionid);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          getSvc().dropDimension(sessionid, entityName);\n+        } else {\n+          throw new NotImplementedException();\n+        }\n+      }\n+    }, DIMTABLE {\n+      @Override\n+      public List<String> doGetAll(LensSessionHandle sessionid) throws LensException {\n+        return getSvc().getAllDimTableNames(sessionid, null);\n+      }\n+\n+      @Override\n+      public void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException {\n+        if (cascade == null) {\n+          throw new NotImplementedException();\n+        } else {\n+          getSvc().dropDimensionTable(sessionid, entityName, cascade);\n+        }\n+      }\n+    };\n+\n+    public abstract List<String> doGetAll(LensSessionHandle sessionid) throws LensException;\n+\n+    public abstract void doDelete(LensSessionHandle sessionid, String entityName, Boolean cascade) throws LensException;\n+\n+    public StringList getAll(LensSessionHandle sessionid) {\n+      checkSessionId(sessionid);\n+      List<String> allNames;\n+      try {\n+        allNames = doGetAll(sessionid);\n+      } catch (LensException e) {\n+        throw new WebApplicationException(e);\n+      }\n+      return new StringList(allNames);\n+    }\n+\n+    public APIResult delete(LensSessionHandle sessionid, String entityName, Boolean cascade) {\n+      log.info(\"Drop {} {} cascade: {}\", name(), entityName, cascade);\n+      checkSessionId(sessionid);\n+      try {\n+        doDelete(sessionid, entityName, cascade);\n+      } catch (LensException e) {\n+        checkTableNotFound(e, entityName);\n+        log.error(\"Error droping {} {}\", name(), entityName, e);\n+        return failure(processLensException(e));\n+      }\n+      return success();\n+    }\n+\n+    public APIResult delete(LensSessionHandle sessionid, String entityName) {\n+      return delete(sessionid, entityName, null);\n+    }\n+\n+    public APIResult deleteAll(LensSessionHandle sessionid, Boolean cascade) {\n+      checkSessionId(sessionid);\n+      List<String> entities;\n+      int numDeleted = 0;\n+      int numExpected = 0;\n+      LensException exc = null;\n+      try {\n+        entities = doGetAll(sessionid);\n+        numExpected = entities.size();\n+        for (String entity : entities) {\n+          doDelete(sessionid, entity, cascade);\n+          numDeleted++;\n+        }\n+      } catch (LensException e) {\n+        log.error(\"Error deleting cubes:\", e);\n+        exc = e;\n+      }\n+      return successOrPartialOrFailure(numDeleted, numExpected, processLensException(exc));\n+    }\n+  }\n+\n   /**\n    * API to know if metastore service is up and running\n    *\n@@ -96,14 +248,7 @@ public String getMessage() {\n   @GET\n   @Path(\"databases\")\n   public StringList getAllDatabases(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n-    checkSessionId(sessionid);\n-    List<String> allNames;\n-    try {\n-      allNames = getSvc().getAllDatabases(sessionid);\n-    } catch (LensException e) {\n-      throw new WebApplicationException(e);\n-    }\n-    return new StringList(allNames);\n+    return Entity.DATABASE.getAll(sessionid);\n   }\n \n   /**\n@@ -143,7 +288,7 @@ public APIResult setDatabase(@QueryParam(\"sessionid\") LensSessionHandle sessioni\n       return success();\n     } catch (LensException e) {\n       log.error(\"Error changing current database\", e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n   }\n \n@@ -161,15 +306,7 @@ public APIResult setDatabase(@QueryParam(\"sessionid\") LensSessionHandle sessioni\n   public APIResult dropDatabase(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @PathParam(\"dbName\") String dbName,\n     @QueryParam(\"cascade\") boolean cascade) {\n-    checkSessionId(sessionid);\n-    log.info(\"Drop database {} cascade?{}\", dbName, cascade);\n-    try {\n-      getSvc().dropDatabase(sessionid, dbName, cascade);\n-      return success();\n-    } catch (LensException e) {\n-      log.error(\"Error dropping {}\", dbName, e);\n-      return failure(e);\n-    }\n+    return Entity.DATABASE.delete(sessionid, dbName, cascade);\n   }\n \n   /**\n@@ -188,13 +325,12 @@ public APIResult createDatabase(@QueryParam(\"sessionid\") LensSessionHandle sessi\n     String dbName) {\n     checkSessionId(sessionid);\n     log.info(\"Create database {} Ignore Existing? {}\", dbName, ignoreIfExisting);\n-\n     try {\n       getSvc().createDatabase(sessionid, dbName, ignoreIfExisting);\n       return success();\n     } catch (LensException e) {\n       log.error(\"Error creating database {}\", dbName, e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n   }\n \n@@ -265,15 +401,16 @@ public StringList getAllCubes(@QueryParam(\"sessionid\") LensSessionHandle session\n     @QueryParam(\"type\") @DefaultValue(\"all\") String cubeTypes) {\n     checkSessionId(sessionid);\n     try {\n-      if (cubeTypes.equals(\"all\")) {\n+      switch (cubeTypes) {\n+      case \"all\":\n         return new StringList(getSvc().getAllCubeNames(sessionid));\n-      } else if (cubeTypes.equals(\"base\")) {\n+      case \"base\":\n         return new StringList(getSvc().getAllBaseCubeNames(sessionid));\n-      } else if (cubeTypes.equals(\"derived\")) {\n+      case \"derived\":\n         return new StringList(getSvc().getAllDerivedCubeNames(sessionid));\n-      } else if (cubeTypes.equals(\"queryable\")) {\n+      case \"queryable\":\n         return new StringList(getSvc().getAllQueryableCubeNames(sessionid));\n-      } else {\n+      default:\n         throw new BadRequestException(\"Invalid type \" + cubeTypes + \" Accepted\"\n           + \" values are 'all' or 'base' or 'derived' or 'queryable'\");\n       }\n@@ -294,20 +431,7 @@ public StringList getAllCubes(@QueryParam(\"sessionid\") LensSessionHandle session\n   @Path(\"cubes\")\n   public APIResult deleteAllCubes(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n     checkSessionId(sessionid);\n-    List<String> cubeNames = null;\n-    LensException exc = null;\n-    int numDeleted = 0;\n-    try {\n-      cubeNames = getSvc().getAllCubeNames(sessionid);\n-      for (String cubeName : cubeNames) {\n-        getSvc().dropCube(sessionid, cubeName);\n-        numDeleted++;\n-      }\n-    } catch (LensException e) {\n-      log.error(\"Error deleting cubes:\", e);\n-      exc = e;\n-    }\n-    return successOrPartialOrFailure(numDeleted, cubeNames.size(), exc);\n+    return Entity.CUBE.deleteAll(sessionid, null);\n   }\n \n   /**\n@@ -330,13 +454,13 @@ public APIResult createNewCube(@QueryParam(\"sessionid\") LensSessionHandle sessio\n         checkTableNotFound(e, ((XDerivedCube) cube).getParent());\n       }\n       log.error(\"Error creating cube {}\", cube.getName(), e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n \n \n-  private void checkTableNotFound(LensException e, String table) {\n+  private static void checkTableNotFound(LensException e, String table) {\n     List<String> messages = Lists.newArrayList();\n     messages.add(e.getMessage());\n     if (e.getCause() instanceof HiveException) {\n@@ -372,7 +496,7 @@ public APIResult updateCube(@QueryParam(\"sessionid\") LensSessionHandle sessionid\n       }\n       checkTableNotFound(e, cube.getName());\n       log.error(\"Error updating cube {}\", cube.getName(), e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -410,15 +534,7 @@ public APIResult updateCube(@QueryParam(\"sessionid\") LensSessionHandle sessionid\n   @Path(\"/cubes/{cubeName}\")\n   public APIResult dropCube(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @PathParam(\"cubeName\") String cubeName) {\n-    checkSessionId(sessionid);\n-    try {\n-      getSvc().dropCube(sessionid, cubeName);\n-    } catch (LensException e) {\n-      checkTableNotFound(e, cubeName);\n-      log.error(\"Error droping cube {}\", cubeName, e);\n-      return failure(e);\n-    }\n-    return success();\n+    return Entity.CUBE.delete(sessionid, cubeName, null);\n   }\n \n   /**\n@@ -432,12 +548,7 @@ public APIResult dropCube(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n   @Path(\"storages\")\n   public StringList getAllStorages(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n     checkSessionId(sessionid);\n-    try {\n-      return new StringList(getSvc().getAllStorageNames(sessionid));\n-    } catch (LensException e) {\n-      log.error(\"Error getting storages\", e);\n-      throw new WebApplicationException(e);\n-    }\n+    return Entity.STORAGE.getAll(sessionid);\n   }\n \n   /**\n@@ -456,7 +567,7 @@ public APIResult createNewStorage(@QueryParam(\"sessionid\") LensSessionHandle ses\n       getSvc().createStorage(sessionid, storage);\n     } catch (LensException e) {\n       log.error(\"Error creating storage {}\", storage.getName(), e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -471,22 +582,7 @@ public APIResult createNewStorage(@QueryParam(\"sessionid\") LensSessionHandle ses\n   @DELETE\n   @Path(\"storages\")\n   public APIResult deleteAllStorages(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n-    checkSessionId(sessionid);\n-    List<String> storageNames = null;\n-    LensException exc = null;\n-    int numDeleted = 0;\n-    try {\n-      storageNames = getSvc().getAllStorageNames(sessionid);\n-      for (String storageName : storageNames) {\n-        getSvc().dropStorage(sessionid, storageName);\n-        numDeleted++;\n-      }\n-    } catch (LensException e) {\n-      log.error(\"Error deleting storages:\", e);\n-      exc = e;\n-    }\n-    assert (numDeleted == storageNames.size() || exc != null);\n-    return successOrPartialOrFailure(numDeleted, storageNames.size(), exc);\n+    return Entity.STORAGE.deleteAll(sessionid, null);\n   }\n \n   /**\n@@ -508,7 +604,7 @@ public APIResult updateStorage(@QueryParam(\"sessionid\") LensSessionHandle sessio\n     } catch (LensException e) {\n       checkTableNotFound(e, storageName);\n       log.error(\"Error updating storage {}\", storageName, e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -545,15 +641,7 @@ public APIResult updateStorage(@QueryParam(\"sessionid\") LensSessionHandle sessio\n   @Path(\"/storages/{storage}\")\n   public APIResult dropStorage(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @PathParam(\"storage\") String storageName) {\n-    checkSessionId(sessionid);\n-    try {\n-      getSvc().dropStorage(sessionid, storageName);\n-    } catch (LensException e) {\n-      checkTableNotFound(e, storageName);\n-      log.error(\"Error dropping storage {}\", storageName, e);\n-      return failure(e);\n-    }\n-    return success();\n+    return Entity.STORAGE.delete(sessionid, storageName, null);\n   }\n \n   /**\n@@ -566,13 +654,7 @@ public APIResult dropStorage(@QueryParam(\"sessionid\") LensSessionHandle sessioni\n   @GET\n   @Path(\"dimensions\")\n   public StringList getAllDimensionNames(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n-    checkSessionId(sessionid);\n-    try {\n-      return new StringList(getSvc().getAllDimensionNames(sessionid));\n-    } catch (LensException e) {\n-      log.error(\"Error getting dimensions\", e);\n-      throw new WebApplicationException(e);\n-    }\n+    return Entity.DIMENSION.getAll(sessionid);\n   }\n \n   /**\n@@ -591,7 +673,7 @@ public APIResult createDimension(@QueryParam(\"sessionid\") LensSessionHandle sess\n       getSvc().createDimension(sessionid, dimension);\n     } catch (LensException e) {\n       log.error(\"Error creating dimension {}\", dimension.getName(), e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -606,21 +688,7 @@ public APIResult createDimension(@QueryParam(\"sessionid\") LensSessionHandle sess\n   @DELETE\n   @Path(\"dimensions\")\n   public APIResult deleteAllDimensions(@QueryParam(\"sessionid\") LensSessionHandle sessionid) {\n-    checkSessionId(sessionid);\n-    List<String> dimNames = null;\n-    int numDeleted = 0;\n-    LensException exc = null;\n-    try {\n-      dimNames = getSvc().getAllDimensionNames(sessionid);\n-      for (String dimName : dimNames) {\n-        getSvc().dropStorage(sessionid, dimName);\n-        numDeleted++;\n-      }\n-    } catch (LensException e) {\n-      log.error(\"Error deleting dimensions:\", e);\n-      exc = e;\n-    }\n-    return successOrPartialOrFailure(numDeleted, dimNames.size(), exc);\n+    return Entity.DIMENSION.deleteAll(sessionid, null);\n   }\n \n   /**\n@@ -642,7 +710,7 @@ public APIResult updateDimension(@QueryParam(\"sessionid\") LensSessionHandle sess\n     } catch (LensException e) {\n       checkTableNotFound(e, dimName);\n       log.error(\"Error updating dimension {}\", dimName, e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -679,15 +747,7 @@ public APIResult updateDimension(@QueryParam(\"sessionid\") LensSessionHandle sess\n   @Path(\"/dimensions/{dimName}\")\n   public APIResult dropDimension(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @PathParam(\"dimName\") String dimName) {\n-    checkSessionId(sessionid);\n-    try {\n-      getSvc().dropDimension(sessionid, dimName);\n-    } catch (LensException e) {\n-      checkTableNotFound(e, dimName);\n-      log.error(\"Error dropping dimension {}\", dimName, e);\n-      return failure(e);\n-    }\n-    return success();\n+    return Entity.DIMENSION.delete(sessionid, dimName, null);\n   }\n \n   /**\n@@ -742,7 +802,7 @@ public StringList getAllFactsOfCube(\n   @Path(\"/facts\")\n   public StringList getAllFacts(@QueryParam(\"sessionid\") LensSessionHandle sessionid) throws LensException {\n     checkSessionId(sessionid);\n-    return new StringList(getSvc().getAllFactNames(sessionid, null));\n+    return Entity.FACT.getAll(sessionid);\n   }\n \n   /**\n@@ -758,21 +818,7 @@ public StringList getAllFacts(@QueryParam(\"sessionid\") LensSessionHandle session\n   @Path(\"facts\")\n   public APIResult deleteAllFacts(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @DefaultValue(\"false\") @QueryParam(\"cascade\") boolean cascade) {\n-    checkSessionId(sessionid);\n-    List<String> factNames = null;\n-    int numDeleted = 0;\n-    LensException exc = null;\n-    try {\n-      factNames = getSvc().getAllCubeNames(sessionid);\n-      for (String factName : factNames) {\n-        getSvc().dropFactTable(sessionid, factName, cascade);\n-        numDeleted++;\n-      }\n-    } catch (LensException e) {\n-      log.error(\"Error deleting cubes:\", e);\n-      exc = e;\n-    }\n-    return successOrPartialOrFailure(numDeleted, factNames.size(), exc);\n+    return Entity.FACT.deleteAll(sessionid, cascade);\n   }\n \n   /**\n@@ -816,7 +862,7 @@ public APIResult createFactTable(@FormDataParam(\"sessionid\") LensSessionHandle s\n       getSvc().createFactTable(sessionid, fact);\n     } catch (LensException exc) {\n       log.error(\"Exception creating fact:\", exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -841,7 +887,7 @@ public APIResult updateFactTable(@QueryParam(\"sessionid\") LensSessionHandle sess\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error updating fact {}\", factName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -861,15 +907,7 @@ public APIResult dropFactTable(@QueryParam(\"sessionid\") LensSessionHandle sessio\n     @PathParam(\"factName\") String factName,\n     @DefaultValue(\"false\") @QueryParam(\"cascade\") boolean cascade)\n     throws LensException {\n-    checkSessionId(sessionid);\n-    try {\n-      getSvc().dropFactTable(sessionid, factName, cascade);\n-    } catch (LensException exc) {\n-      checkTableNotFound(exc, factName);\n-      log.error(\"Error dropping fact {}\", factName, exc);\n-      return failure(exc);\n-    }\n-    return success();\n+    return Entity.FACT.delete(sessionid, factName, cascade);\n   }\n \n   /**\n@@ -911,7 +949,7 @@ public APIResult dropAllStoragesOfFact(@QueryParam(\"sessionid\") LensSessionHandl\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error dropping storages of fact {}\", factName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -936,7 +974,7 @@ public APIResult addStorageToFact(\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error adding storage to fact {}\", factName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -962,7 +1000,7 @@ public APIResult dropStorageFromFact(\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error dropping storage of fact {}\", factName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1032,7 +1070,7 @@ public APIResult dropPartitionsOfFactStorageByFilter(@QueryParam(\"sessionid\") Le\n     } catch (LensException exc) {\n       log.warn(\"Got exception while dropping partition.\", exc);\n       checkTableNotFound(exc, factName);\n-      return partial(exc);\n+      return partial(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1060,7 +1098,7 @@ public APIResult addPartitionToFactStorage(@QueryParam(\"sessionid\") LensSessionH\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error adding partition to storage of fact {}:{}\", factName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n   }\n \n@@ -1088,7 +1126,7 @@ public APIResult updatePartitionOfFactStorage(@QueryParam(\"sessionid\") LensSessi\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error adding partition to storage of fact {}:{}\", factName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1117,7 +1155,7 @@ public APIResult addPartitionsToFactStorage(@QueryParam(\"sessionid\") LensSession\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error adding partition to storage of fact {}:{}\", factName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n   }\n \n@@ -1145,7 +1183,7 @@ public APIResult updatePartitionsOfFactStorage(@QueryParam(\"sessionid\") LensSess\n     } catch (LensException exc) {\n       checkTableNotFound(exc, factName);\n       log.error(\"Error adding partition to storage of fact {}:{}\", factName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1174,7 +1212,7 @@ public APIResult dropPartitionOfFactStorageByValues(@QueryParam(\"sessionid\") Len\n     } catch (LensException e) {\n       checkTableNotFound(e, factName);\n       log.error(\"Error dropping partition to storage of fact {}:{}\", factName, storage, e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -1188,7 +1226,7 @@ public APIResult dropPartitionOfFactStorageByValues(@QueryParam(\"sessionid\") Len\n   @GET\n   @Path(\"/dimtables\")\n   public StringList getAllDims(@QueryParam(\"sessionid\") LensSessionHandle sessionid) throws LensException {\n-    return new StringList(getSvc().getAllDimTableNames(sessionid, null));\n+    return Entity.DIMTABLE.getAll(sessionid);\n   }\n \n   /**\n@@ -1208,7 +1246,7 @@ public APIResult createDimensionTable(@FormDataParam(\"sessionid\") LensSessionHan\n       getSvc().createDimensionTable(sessionid, dimensionTable);\n     } catch (LensException exc) {\n       log.error(\"Error creating cube dimension table {}\", dimensionTable.getTableName(), exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1232,7 +1270,7 @@ public APIResult updateCubeDimension(@QueryParam(\"sessionid\") LensSessionHandle\n     } catch (LensException exc) {\n       checkTableNotFound(exc, dimTableName);\n       log.error(\"Error updating cube dimension table {}\", dimTableName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1251,15 +1289,7 @@ public APIResult updateCubeDimension(@QueryParam(\"sessionid\") LensSessionHandle\n   public APIResult dropDimensionTable(@QueryParam(\"sessionid\") LensSessionHandle sessionid,\n     @PathParam(\"dimTableName\") String dimension,\n     @QueryParam(\"cascade\") boolean cascade) {\n-    checkSessionId(sessionid);\n-    try {\n-      getSvc().dropDimensionTable(sessionid, dimension, cascade);\n-    } catch (LensException e) {\n-      checkTableNotFound(e, dimension);\n-      log.error(\"Error dropping cube dimension table {}\", dimension, e);\n-      return failure(e);\n-    }\n-    return success();\n+    return Entity.DIMTABLE.delete(sessionid, dimension, cascade);\n   }\n \n   /**\n@@ -1320,7 +1350,7 @@ public APIResult createDimensionStorage(@QueryParam(\"sessionid\") LensSessionHand\n     } catch (LensException e) {\n       checkTableNotFound(e, dimTableName);\n       log.error(\"Error creating dimension table storage {}:{}\", dimTableName, storageTbl.getStorageName(), e);\n-      return failure(e);\n+      return failure(processLensException(e));\n     }\n     return success();\n   }\n@@ -1360,7 +1390,7 @@ public APIResult dropAllStoragesOfDim(@QueryParam(\"sessionid\") LensSessionHandle\n     } catch (LensException exc) {\n       checkTableNotFound(exc, dimTableName);\n       log.error(\"Error dropping storages of dimension table {}\", dimTableName, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1385,7 +1415,7 @@ public APIResult dropStorageOfDim(@QueryParam(\"sessionid\") LensSessionHandle ses\n     } catch (LensException exc) {\n       checkTableNotFound(exc, dimTableName);\n       log.error(\"Error dropping storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1434,7 +1464,7 @@ public APIResult dropPartitionsOfDimStorageByFilter(@QueryParam(\"sessionid\") Len\n       getSvc().dropPartitionFromStorageByFilter(sessionid, dimTableName, storage, filter);\n     } catch (LensException exc) {\n       log.error(\"Error dropping partition on storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return partial(exc);\n+      return partial(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1461,7 +1491,7 @@ public APIResult dropPartitionsOfDimStorageByValue(@QueryParam(\"sessionid\") Lens\n         values);\n     } catch (LensException exc) {\n       log.error(\"Error dropping partitions on storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1489,7 +1519,7 @@ public APIResult addPartitionToDimStorage(@QueryParam(\"sessionid\") LensSessionHa\n         1);\n     } catch (LensException exc) {\n       log.error(\"Error adding partition to storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n   }\n \n@@ -1516,7 +1546,7 @@ public APIResult updatePartitionOfDimStorage(@QueryParam(\"sessionid\") LensSessio\n       getSvc().updatePartition(sessionid, dimTableName, storage, partition);\n     } catch (LensException exc) {\n       log.error(\"Error adding partition to storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }\n@@ -1544,7 +1574,7 @@ public APIResult addPartitionsToDimStorage(@QueryParam(\"sessionid\") LensSessionH\n         partitions.getPartition().size());\n     } catch (LensException exc) {\n       log.error(\"Error adding partition to storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n   }\n \n@@ -1571,7 +1601,7 @@ public APIResult updatePartitionsOfDimStorage(@QueryParam(\"sessionid\") LensSessi\n       getSvc().updatePartitions(sessionid, dimTableName, storage, partitions);\n     } catch (LensException exc) {\n       log.error(\"Error adding partition to storage of dimension table {}:{}\", dimTableName, storage, exc);\n-      return failure(exc);\n+      return failure(processLensException(exc));\n     }\n     return success();\n   }", "filename": "lens-server/src/main/java/org/apache/lens/server/metastore/MetastoreResource.java"}, {"additions": 28, "raw_url": "https://github.com/apache/lens/raw/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server/src/test/java/org/apache/lens/server/metastore/TestMetastoreService.java", "blob_url": "https://github.com/apache/lens/blob/e5691d8d655c94cdd64e0d83028ec59735d73edc/lens-server/src/test/java/org/apache/lens/server/metastore/TestMetastoreService.java", "sha": "5f9f6396954f56fa13914e546ece597c7fdeaa88", "changes": 40, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/metastore/TestMetastoreService.java?ref=e5691d8d655c94cdd64e0d83028ec59735d73edc", "patch": "@@ -477,9 +477,8 @@ public void testCreateCube() throws Exception {\n       result = target.queryParam(\"sessionid\", lensSessionId).request(\n         mediaType).post(Entity.xml(cubeObjectFactory.createXCube(dcube)), APIResult.class);\n       assertEquals(result.getStatus(), Status.FAILED);\n-      assertEquals(result.getMessage(), \"ERROR_IN_ENTITY_DEFINITION[Derived cube invalid: \"\n-        + \"Measures [random_measure] and Dim Attributes \"\n-        + \"[random_dim] were not present in parent cube testcube1]\");\n+      assertEquals(result.getMessage(), \"Problem in submitting entity: Derived cube invalid: Measures \"\n+        + \"[random_measure] and Dim Attributes [random_dim] were not present in parent cube testcube1\");\n       // create derived cube\n       dcube = createDerivedCube(\"testderived\", \"testCube1\", false);\n       result = target.queryParam(\"sessionid\", lensSessionId).request(\n@@ -856,9 +855,8 @@ public void testUpdateCube() throws Exception {\n       result =\n         target.queryParam(\"sessionid\", lensSessionId).request(mediaType).post(Entity.xml(element), APIResult.class);\n       assertEquals(result.getStatus(), Status.FAILED);\n-      assertEquals(result.getMessage(), \"ERROR_IN_ENTITY_DEFINITION[Derived cube invalid: \"\n-        + \"Measures [random_measure] and Dim Attributes \"\n-        + \"[random_dim] were not present in parent cube test_update]\");\n+      assertEquals(result.getMessage(), \"Problem in submitting entity: Derived cube invalid: Measures \"\n+        + \"[random_measure] and Dim Attributes [random_dim] were not present in parent cube test_update\");\n       dcube = createDerivedCube(\"test_update_derived\", cubeName, false);\n       // Create this cube first\n       element = cubeObjectFactory.createXCube(dcube);\n@@ -1960,14 +1958,15 @@ public void testFactStorages() throws Exception {\n   private XPartition createPartition(String cubeTableName, Date partDate) {\n     return createPartition(cubeTableName, partDate, \"dt\");\n   }\n-\n-  private XPartition createPartition(String cubeTableName, Date partDate, final String timeDimension) {\n-\n+  private XTimePartSpecElement createTimePartSpecElement(Date partDate, String timeDimension) {\n     XTimePartSpecElement timePart = cubeObjectFactory.createXTimePartSpecElement();\n     timePart.setKey(timeDimension);\n     timePart.setValue(JAXBUtils.getXMLGregorianCalendar(HOURLY.truncate(partDate)));\n+    return timePart;\n+  }\n+  private XPartition createPartition(String cubeTableName, Date partDate, final String timeDimension) {\n \n-    return createPartition(cubeTableName, Arrays.asList(timePart));\n+    return createPartition(cubeTableName, Arrays.asList(createTimePartSpecElement(partDate, timeDimension)));\n   }\n \n   private XPartition createPartition(String cubeTableName, final List<XTimePartSpecElement> timePartSpecs) {\n@@ -2116,8 +2115,18 @@ public void testFactStoragePartitions() throws Exception {\n         .post(null);\n       Assert.assertEquals(resp.getStatus(), 400);\n \n-      // Add a partition\n+      // Add wrong partition\n       final Date partDate = new Date();\n+      XPartition xp2 = createPartition(table, partDate);\n+      xp2.getTimePartitionSpec().getPartSpecElement()\n+        .add(createTimePartSpecElement(partDate, \"non_existant_time_part\"));\n+      partAddResult = target().path(\"metastore/facts/\").path(table).path(\"storages/S2/partition\")\n+        .queryParam(\"sessionid\", lensSessionId).request(mediaType)\n+        .post(Entity.xml(cubeObjectFactory.createXPartition(xp2)), APIResult.class);\n+      assertEquals(partAddResult.getStatus(), Status.FAILED);\n+      assertEquals(partAddResult.getMessage(), \"No timeline found for fact=testFactStoragePartitions, storage=S2, \"\n+        + \"update period=HOURLY, partition column=non_existant_time_part.\");\n+      // Add a partition\n       XPartition xp = createPartition(table, partDate);\n       partAddResult = target().path(\"metastore/facts/\").path(table).path(\"storages/S2/partition\")\n         .queryParam(\"sessionid\", lensSessionId).request(mediaType)\n@@ -2205,7 +2214,14 @@ public void testFactStoragePartitions() throws Exception {\n         .post(Entity.xml(cubeObjectFactory.createXPartition(xp)));\n       assertXMLError(resp);\n \n-\n+      // Try adding in batch with one partition being wrong wrt partition column.\n+      partAddResult = target().path(\"metastore/facts/\").path(table).path(\"storages/S2/partitions\")\n+        .queryParam(\"sessionid\", lensSessionId).request(mediaType)\n+        .post(Entity.xml(cubeObjectFactory.createXPartitionList(toXPartitionList(xp2))),\n+          APIResult.class);\n+      assertEquals(partAddResult.getStatus(), Status.FAILED);\n+      assertEquals(partAddResult.getMessage(), \"No timeline found for fact=testFactStoragePartitions, storage=S2, \"\n+        + \"update period=HOURLY, partition column=non_existant_time_part.\");\n       // Add in batch\n       partAddResult = target().path(\"metastore/facts/\").path(table).path(\"storages/S2/partitions\")\n         .queryParam(\"sessionid\", lensSessionId).request(mediaType)", "filename": "lens-server/src/test/java/org/apache/lens/server/metastore/TestMetastoreService.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/bf6c614e599cdc7cdf98a247d8806bff11fed214", "parent": "https://github.com/apache/lens/commit/9a877c54111374de366b3dad86ece8b22067f683", "message": "LENS-107 NPE in JoinResolver while running queries (amareshwari via\njdhok)", "bug_id": "lens_36", "file": [{"additions": 16, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "sha": "92c6a1778ce8225e37666a99b3b4657029b4e6d5", "changes": 28, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -40,7 +40,6 @@\n import org.apache.lens.cube.metadata.CubeFactTable;\n import org.apache.lens.cube.metadata.Dimension;\n import org.apache.lens.cube.metadata.JoinChain;\n-import org.apache.lens.cube.metadata.TableReference;\n import org.apache.lens.cube.parse.CandidateTablePruneCause.CubeTableCause;\n import org.apache.lens.cube.parse.CubeQueryContext.OptionalDimCtx;\n \n@@ -170,7 +169,7 @@ private void pruneOptionalDims(CubeQueryContext cubeql) {\n       while (iter.hasNext()) {\n         CandidateTable candidate = iter.next();\n         if (!allCandidates.contains(candidate)) {\n-          LOG.info(\"Removing candidate\" + candidate + \" from requiredForCandidates of\" + dim + \", as it is no more\" +\n+          LOG.info(\"Removing candidate \" + candidate + \" from requiredForCandidates of \" + dim + \", as it is no more\" +\n               \" candidate\");\n           iter.remove();\n           removedCandidates.add(candidate);\n@@ -182,8 +181,8 @@ private void pruneOptionalDims(CubeQueryContext cubeql) {\n       Dimension dim = optdimEntry.getKey();\n       OptionalDimCtx optdim = optdimEntry.getValue();\n       candidatesReachableThroughRefs.addAll(optdim.requiredForCandidates);\n-      if (optdim.requiredForCandidates.isEmpty() && !optdim.isRequiredInJoinChain) {\n-        LOG.info(\"Not considering optional dimension \" + dim + \" as,\" + \" all requiredForCandidates are removed\");\n+      if ((!optdim.colQueried.isEmpty() && optdim.requiredForCandidates.isEmpty()) && !optdim.isRequiredInJoinChain) {\n+        LOG.info(\"Not considering optional dimension \" + dim + \" as all requiredForCandidates are removed\");\n         tobeRemoved.add(dim);\n       }\n     }\n@@ -257,13 +256,18 @@ private void resolveCandidateFactTables(CubeQueryContext cubeql) throws Semantic\n \n         // go over join chains and prune facts that dont have any of the columns in each chain\n         for (JoinChain chain : cubeql.getJoinchains().values()) {\n+          OptionalDimCtx optdim = cubeql.getOptionalDimensionMap().get(chain.getDestTable());\n           if (!checkForColumnExists(cfact, chain.getSourceColumns())) {\n-            LOG.info(\"Not considering fact table:\" + cfact + \" as columns \" + chain.getSourceColumns()\n-                + \" are not available\");\n-            cubeql.addFactPruningMsgs(cfact.fact, new CandidateTablePruneCause(cfact.getName(),\n-                CubeTableCause.COLUMN_NOT_FOUND));\n-            toRemove = true;\n-            break;\n+            // check if chain is optional or not\n+            if (optdim == null || optdim.isRequiredInJoinChain\n+                || (optdim != null && optdim.requiredForCandidates.contains(cfact))) {\n+              LOG.info(\"Not considering fact table:\" + cfact + \" as columns \" + chain.getSourceColumns()\n+                  + \" are not available\");\n+              cubeql.addFactPruningMsgs(cfact.fact, new CandidateTablePruneCause(cfact.getName(),\n+                  CubeTableCause.COLUMN_NOT_FOUND));\n+              toRemove = true;\n+              break;\n+            }\n           }\n         }\n         // check if the candidate fact has atleast one measure queried\n@@ -489,8 +493,8 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n       Dimension dim = optdimEntry.getKey();\n       OptionalDimCtx optdim = optdimEntry.getValue();\n       candidatesReachableThroughRefs.addAll(optdim.requiredForCandidates);\n-      if (optdim.requiredForCandidates.isEmpty() && !optdim.isRequiredInJoinChain) {\n-        LOG.info(\"Not considering optional dimension \" + dim + \" as,\" + \" all requiredForCandidates are removed\");\n+      if ((!optdim.colQueried.isEmpty() && optdim.requiredForCandidates.isEmpty()) && !optdim.isRequiredInJoinChain) {\n+        LOG.info(\"Not considering optional dimension \" + dim + \" as all requiredForCandidates are removed\");\n         tobeRemoved.add(dim);\n       }\n     }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java"}, {"additions": 13, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java", "sha": "c8cd47df105777117410f8e7615952c291502047", "changes": 22, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -262,7 +262,6 @@ public void addOptionalDimTable(String alias, String col, CandidateTable candida\n       throws SemanticException {\n     alias = alias.toLowerCase();\n     try {\n-      LOG.info(\"Adding optional dimension:\" + alias);\n       if (!addQueriedTable(alias, true)) {\n         throw new SemanticException(\"Could not add queried table or chain:\" + alias);\n       }\n@@ -279,6 +278,7 @@ public void addOptionalDimTable(String alias, String col, CandidateTable candida\n       if (!optDim.isRequiredInJoinChain) {\n         optDim.isRequiredInJoinChain = isRequiredInJoin;\n       }\n+      LOG.info(\"Adding optional dimension:\" + dim + \" optDim:\" + optDim);\n     } catch (HiveException e) {\n       throw new SemanticException(e);\n     }\n@@ -750,26 +750,30 @@ public String toHQL() throws SemanticException {\n     } else {\n       dimsToQuery.putAll(pickCandidateDimsToQuery(denormTables));\n     }\n+    // Prune join paths once denorm tables are picked\n+    if (autoJoinCtx != null) {\n+      // prune join paths for picked fact and dimensions\n+      autoJoinCtx.pruneAllPaths(cube, cfacts, dimsToQuery);\n+    }\n     if (autoJoinCtx != null) {\n       // add optional dims from Join resolver\n-      Set<Dimension> joiningTables = autoJoinCtx.pickOptionalTables(dimsToQuery, this);\n+      Set<Dimension> joiningTables = new HashSet<Dimension>();\n       if (cfacts != null && cfacts.size() > 1) {\n-        // copy tables for each fact\n         for (CandidateFact cfact : cfacts) {\n-          factDimMap.get(cfact).addAll(joiningTables);\n+          Set<Dimension> factJoiningTables = autoJoinCtx.pickOptionalTables(cfact, factDimMap.get(cfact), this);\n+          factDimMap.get(cfact).addAll(factJoiningTables);\n+          joiningTables.addAll(factJoiningTables);\n         }\n+      } else {\n+        joiningTables.addAll(autoJoinCtx.pickOptionalTables(null,\n+            dimsToQuery!= null ? dimsToQuery.keySet() : null, this));\n       }\n       if (dimsToQuery == null) {\n         dimsToQuery = pickCandidateDimsToQuery(joiningTables);\n       } else {\n         dimsToQuery.putAll(pickCandidateDimsToQuery(joiningTables));\n       }\n     }\n-    // Prune join paths once denorm tables and joining tables are picked\n-    if (autoJoinCtx != null) {\n-      // prune join paths for picked fact and dimensions\n-      autoJoinCtx.pruneAllPaths(cube, cfacts, dimsToQuery);\n-    }\n     LOG.info(\"Picked Fact:\" + cfacts + \" dimsToQuery:\" + dimsToQuery);\n \n     if (cfacts != null) {", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java"}, {"additions": 116, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "sha": "f2027c0196a477b23f6d82507d93aec380678291", "changes": 158, "status": "modified", "deletions": 42, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -32,6 +32,8 @@\n import java.util.*;\n \n import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.logging.Log;\n@@ -67,17 +69,38 @@\n \n   private static final Log LOG = LogFactory.getLog(JoinResolver.class);\n \n+  @ToString\n   public static class JoinClause implements Comparable<JoinClause> {\n-    private final String clause;\n     private final int cost;\n-\n-    public JoinClause(String clause, int cost) {\n-      this.clause = clause;\n-      this.cost = cost;\n+    // all dimensions in path except target\n+    private final Set<Dimension> dimsInPath;\n+    private final Map<Dimension, List<TableRelationship>> chain;\n+    transient Map<AbstractCubeTable, Set<String>> chainColumns = new HashMap<AbstractCubeTable, Set<String>>();\n+\n+    public JoinClause(Map<Dimension, List<TableRelationship>> chain, Set<Dimension> dimsInPath) {\n+      this.chain = chain;\n+      this.cost = dimsInPath.size();\n+      this.dimsInPath = dimsInPath;\n     }\n \n-    public String getClause() {\n-      return clause;\n+    void initChainColumns() {\n+      for (List<TableRelationship> path : chain.values()) {\n+        for (TableRelationship edge : path) {\n+          Set<String> fcols = chainColumns.get(edge.getFromTable());\n+          if (fcols == null) {\n+            fcols = new HashSet<String>();\n+            chainColumns.put(edge.getFromTable(), fcols);\n+          }\n+          fcols.add(edge.getFromColumn());\n+\n+          Set<String> tocols = chainColumns.get(edge.getToTable());\n+          if (tocols == null) {\n+            tocols = new HashSet<String>();\n+            chainColumns.put(edge.getToTable(), tocols);\n+          }\n+          tocols.add(edge.getToColumn());\n+        }\n+      }\n     }\n \n     public int getCost() {\n@@ -119,6 +142,9 @@ public int compareTo(JoinClause joinClause) {\n     @Getter private Map<Dimension, Map<AbstractCubeTable, List<String>>> joinPathToColumns =\n         new HashMap<Dimension, Map<AbstractCubeTable, List<String>>>();\n \n+    // there can be separate join clause for each fact incase of multi fact queries\n+    @Getter Map<CandidateFact, JoinClause> factClauses = new HashMap<CandidateFact, JoinClause>();\n+    @Getter @Setter JoinClause minCostClause;\n     public AutoJoinContext(Map<Dimension, List<SchemaGraph.JoinPath>> allPaths,\n         Map<Dimension, OptionalDimCtx> optionalDimensions, Map<AbstractCubeTable, String> partialJoinConditions,\n         boolean partialJoinChains, Map<AbstractCubeTable, JoinType> tableJoinTypeMap, AbstractCubeTable autoJoinTarget,\n@@ -140,6 +166,12 @@ public AbstractCubeTable getAutoJoinTarget() {\n       return autoJoinTarget;\n     }\n \n+    private JoinClause getJoinClause(CandidateFact fact) {\n+      if (fact == null) {\n+        return minCostClause;\n+      }\n+      return factClauses.get(fact);\n+    }\n     // Populate map of tables to their columns which are present in any of the\n     // join paths\n     private void initJoinPathColumns() {\n@@ -217,21 +249,11 @@ public String getFromString(String fromTable, CandidateFact fact, Set<Dimension>\n       if (qdims == null || qdims.isEmpty()) {\n         return fromString;\n       }\n-      Iterator<JoinClause> itr = getJoinClausesForAllPaths(fact, dimsToQuery, qdims, cubeql);\n-      JoinClause minCostClause = null;\n+      // Compute the merged join clause string for the min cost joinclause\n+      String clause = getMergedJoinClause(cubeql.getAutoJoinCtx().getJoinClause(fact).chain, dimsToQuery,\n+          qdims, cubeql);\n \n-      while (itr.hasNext()) {\n-        JoinClause clause = itr.next();\n-        LOG.info(\"JoinClause \" + clause.getClause() + \" cost=\" + clause.getCost());\n-        if (minCostClause == null || minCostClause.getCost() > clause.getCost()) {\n-          minCostClause = clause;\n-        }\n-      }\n-\n-      if (minCostClause == null || StringUtils.isBlank(minCostClause.getClause())) {\n-        throw new SemanticException(ErrorMsg.NO_JOIN_PATH, dimsToQuery.keySet().toString(), autoJoinTarget.getName());\n-      }\n-      fromString += minCostClause.getClause();\n+      fromString += clause;\n       return fromString;\n     }\n \n@@ -357,6 +379,25 @@ public String getMergedJoinClause(Map<Dimension, List<TableRelationship>> joinCh\n       return StringUtils.join(clauses, \"\");\n     }\n \n+    public Set<Dimension> getDimsOnPath(Map<Dimension, List<TableRelationship>> joinChain, Set<Dimension> qdims) {\n+      Set<Dimension> dimsOnPath = new HashSet<Dimension>();\n+      for (Map.Entry<Dimension, List<TableRelationship>> entry : joinChain.entrySet()) {\n+        List<TableRelationship> chain = entry.getValue();\n+        Dimension table = entry.getKey();\n+\n+        // check if join with this dimension is required\n+        if (!qdims.contains(table)) {\n+          continue;\n+        }\n+\n+        for (int i = chain.size() - 1; i >= 0; i--) {\n+          TableRelationship rel = chain.get(i);\n+          dimsOnPath.add((Dimension)rel.getToTable());\n+        }\n+      }\n+      return dimsOnPath;\n+    }\n+\n     private String getStorageFilter(Map<Dimension, CandidateDim> dimsToQuery, AbstractCubeTable table) {\n       String whereClause = \"\";\n       if (dimsToQuery != null && dimsToQuery.get(table) != null) {\n@@ -438,8 +479,6 @@ public void pruneAllPathsForCandidateDims(Map<Dimension, Set<CandidateDim>> cand\n         }\n         dimColumns.put(dim, allColumns);\n       }\n-      System.out.println(\"All paths:\" + allPaths);\n-      System.out.println(\"dimColumns\" + dimColumns);\n       for (List<SchemaGraph.JoinPath> paths : allPaths.values()) {\n         for (int i = 0; i < paths.size(); i++) {\n           SchemaGraph.JoinPath jp = paths.get(i);\n@@ -524,7 +563,7 @@ private void pruneAllPaths(final Map<Dimension, CandidateDim> dimsToQuery) {\n      * all dimensions\n      */\n     private Iterator<JoinClause> getJoinClausesForAllPaths(final CandidateFact fact,\n-        final Map<Dimension, CandidateDim> dimsToQuery, final Set<Dimension> qdims, final CubeQueryContext cubeql) {\n+        final Set<Dimension> qdims, final CubeQueryContext cubeql) {\n       Map<Dimension, List<SchemaGraph.JoinPath>> allPaths = this.allPaths;\n       // if fact is passed only look at paths possible from fact to dims\n       if (fact != null) {\n@@ -555,7 +594,6 @@ private void pruneAllPaths(final Map<Dimension, CandidateDim> dimsToQuery) {\n       // Return a lazy iterator over all possible join chains\n       return new Iterator<JoinClause>() {\n         int sample = 0;\n-        Map<Dimension, List<TableRelationship>> chain = new LinkedHashMap<Dimension, List<TableRelationship>>();\n \n         @Override\n         public boolean hasNext() {\n@@ -564,6 +602,7 @@ public boolean hasNext() {\n \n         @Override\n         public JoinClause next() {\n+          Map<Dimension, List<TableRelationship>> chain = new LinkedHashMap<Dimension, List<TableRelationship>>();\n           //generate next permutation.\n           for(int i = groupSizes.length - 1, base=sample; i >= 0; base /= groupSizes[i], i--) {\n             selection[i] = base % groupSizes[i];\n@@ -574,12 +613,11 @@ public JoinClause next() {\n             chain.put(dimensions[i], path);\n           }\n \n-          // Compute the merged join chain for this path\n-          String clause = getMergedJoinClause(chain, dimsToQuery, qdims, cubeql);\n+          Set<Dimension> dimsOnPath = getDimsOnPath(chain, qdims);\n \n           sample++;\n           // Cost of join = number of tables joined in the clause\n-          return new JoinClause(clause, StringUtils.countMatches(clause, \"join\"));\n+          return new JoinClause(chain, dimsOnPath);\n         }\n \n         @Override\n@@ -589,24 +627,60 @@ public void remove() {\n       };\n     }\n \n-    public Set<Dimension> pickOptionalTables(final Map<Dimension, CandidateDim> dimsToQuery, CubeQueryContext cubeql) {\n-      pruneAllPaths(dimsToQuery);\n-\n+    public Set<Dimension> pickOptionalTables(final CandidateFact fact,\n+        Set<Dimension> qdims, CubeQueryContext cubeql) throws SemanticException {\n+      // Find the min cost join clause and add dimensions in the clause as optional dimensions \n       Set<Dimension> joiningOptionalTables = new HashSet<Dimension>();\n-      for (List<SchemaGraph.JoinPath> paths : allPaths.values()) {\n-        for (int i = 0; i < paths.size(); i++) {\n-          SchemaGraph.JoinPath jp = paths.get(i);\n-          for (AbstractCubeTable tbl : jp.getAllTables()) {\n-            if (tbl instanceof Dimension && !dimsToQuery.containsKey(tbl)) {\n-              Dimension dim = (Dimension) tbl;\n-              OptionalDimCtx optdim = cubeql.getOptionalDimensionMap().get(dim);\n-              if (optdim != null && optdim.isRequiredInJoinChain) {\n-                joiningOptionalTables.add(dim);\n-              }\n-            }\n+      if (qdims == null) {\n+        return joiningOptionalTables;\n+      }\n+      // find least cost path\n+      Iterator<JoinClause> itr = getJoinClausesForAllPaths(fact, qdims, cubeql);\n+      JoinClause minCostClause = null;\n+      while (itr.hasNext()) {\n+        JoinClause clause = itr.next();\n+        if (minCostClause == null || minCostClause.getCost() > clause.getCost()) {\n+          minCostClause = clause;\n+        }\n+      }\n+\n+      if (minCostClause == null) {\n+        throw new SemanticException(ErrorMsg.NO_JOIN_PATH, qdims.toString(), autoJoinTarget.getName());\n+      }\n+\n+      LOG.info(\"Fact:\" + fact + \" minCostClause:\" + minCostClause);\n+      if (fact != null) {\n+        cubeql.getAutoJoinCtx().getFactClauses().put(fact, minCostClause);\n+      } else {\n+        cubeql.getAutoJoinCtx().setMinCostClause(minCostClause);\n+      }\n+      for (Dimension dim : minCostClause.dimsInPath) {\n+        if (!qdims.contains(dim)) {\n+          joiningOptionalTables.add(dim);\n+        }\n+      }\n+\n+      minCostClause.initChainColumns();\n+      // prune candidate dims of joiningOptionalTables wrt joinging columns\n+      for (Dimension dim : joiningOptionalTables) {\n+        for (Iterator<CandidateDim> i = cubeql.getCandidateDimTables().get(dim).iterator(); i.hasNext();) {\n+          CandidateDim cdim = i.next();\n+          CubeDimensionTable dimtable = cdim.dimtable;\n+          if (!cdim.getColumns().containsAll(minCostClause.chainColumns.get(dim))) {\n+            i.remove();\n+            LOG.info(\"Not considering dimtable:\" + dimtable + \" as its columns are\"\n+                + \" not part of any join paths. Join columns:\" + minCostClause.chainColumns.get(dim));\n+            cubeql.addDimPruningMsgs(dim, cdim.dimtable, new CandidateTablePruneCause(dimtable.getName(),\n+                CubeTableCause.NO_COLUMN_PART_OF_A_JOIN_PATH));\n+            break;\n           }\n         }\n+        if (cubeql.getCandidateDimTables().get(dim).size() == 0) {\n+          throw new SemanticException(ErrorMsg.NO_DIM_HAS_COLUMN, dim.getName(),\n+              minCostClause.chainColumns.get(dim).toString());\n+        }\n       }\n+\n       return joiningOptionalTables;\n     }\n ", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java"}, {"additions": 6, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/StorageTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/cube/parse/StorageTableResolver.java", "sha": "36c46fbef87c8a6e07533eb871408e37eb31cea5", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/StorageTableResolver.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -157,6 +157,12 @@ public void rewriteContext(CubeQueryContext cubeql) throws SemanticException {\n         break;\n       case DIM_TABLE_AND_PARTITIONS:\n         resolveDimStorageTablesAndPartitions(cubeql);\n+        if (cubeql.getAutoJoinCtx() != null) {\n+          // After all candidates are pruned after storage resolver, prune join paths.\n+          cubeql.getAutoJoinCtx().pruneAllPaths(cubeql.getCube(), cubeql.getCandidateFactTables(), null);\n+          cubeql.getAutoJoinCtx().pruneAllPathsForCandidateDims(cubeql.getCandidateDimTables());\n+          cubeql.getAutoJoinCtx().refreshJoinPathColumns();\n+        }\n         break;\n     }\n     //Doing this on all three phases. Keep updating cubeql with the current identified missing partitions.", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/StorageTableResolver.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/driver/cube/RewriteUtil.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/main/java/org/apache/lens/driver/cube/RewriteUtil.java", "sha": "d2da97d3ad8d20690ff0d2e03d0ff860f6b70c90", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/driver/cube/RewriteUtil.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -255,7 +255,8 @@ static String getReplacedQuery(final String query) {\n             String finalQuery = builder.toString();\n             LOG.info(\"Final rewritten query for driver:\" + driver + \" is: \" + finalQuery);\n             driverQueries.put(driver, finalQuery);\n-          } catch (SemanticException e) {\n+          } catch (Exception e) {\n+            // we are catching all exceptions sothat other drivers can be picked in case of driver bugs\n             LOG.warn(\"Driver : \" + driver.getClass().getName() + \" Skipped for the query rewriting due to \", e);\n             rewriteFailure.append(\" Driver :\").append(driver.getClass().getName());\n             rewriteFailure.append(\" Cause :\" + e.getLocalizedMessage());", "filename": "lens-cube/src/main/java/org/apache/lens/driver/cube/RewriteUtil.java"}, {"additions": 30, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java", "sha": "5af1b03126415a629638843817e90aa1fa073ffd", "changes": 30, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -449,5 +449,35 @@ public void testMultiPaths() throws SemanticException, ParseException {\n       null, \"group by testdim3.name\",\n       null, getWhereForHourly2days(\"testcube\", \"c1_testfact2_raw\"));\n     TestCubeRewriter.compareQueries(expected, hqlQuery);\n+\n+    // resolve denorm variable through multi hop chain paths\n+    query = \"select testdim3id, avg(msr2) from testcube where \" + twoDaysRange;\n+    hqlQuery = rewrite(query, hconf);\n+    expected = getExpectedQuery(\"testcube\", \"select testdim3.id, avg(testcube.msr2) FROM \",\n+      \" join \" + getDbName() + \"c1_testdim2tbl testdim2 ON testcube.dim2 = testdim2.id and testdim2.dt = 'latest'\" +\n+      \" join \" + getDbName() + \"c1_testdim3tbl testdim3 ON testdim2.testdim3id = testdim3.id and testdim3.dt = 'latest'\",\n+      null, \"group by testdim3.id\",\n+      null, getWhereForHourly2days(\"testcube\", \"c1_testfact2_raw\"));\n+    TestCubeRewriter.compareQueries(expected, hqlQuery);\n+\n+    // test multi hops\n+    query = \"select testdim4.name, avg(msr2) from testcube where \" + twoDaysRange;\n+    hqlQuery = rewrite(query, hconf);\n+    expected = getExpectedQuery(\"testcube\", \"select testdim4.name, avg(testcube.msr2) FROM \",\n+      \" join \" + getDbName() + \"c1_testdim2tbl testdim2 ON testcube.dim2 = testdim2.id and testdim2.dt = 'latest'\" +\n+      \" join \" + getDbName() + \"c1_testdim3tbl testdim3 ON testdim2.testdim3id = testdim3.id and testdim3.dt = 'latest'\"\n+      + \" join \" + getDbName() + \"c1_testdim4tbl testdim4 ON testdim3.testDim4id = testdim4.id and\" +\n+      \" testdim4.dt = 'latest'\", null, \"group by testdim4.name\", null,\n+      getWhereForHourly2days(\"testcube\", \"c1_testfact2_raw\"));\n+    TestCubeRewriter.compareQueries(expected, hqlQuery);\n+\n+    query = \"select testdim4.name, sum(msr2) from testcube where \" + twoDaysRange;\n+    hqlQuery = rewrite(query, hconf);\n+    expected = getExpectedQuery(\"testcube\", \"select testdim4.name, sum(testcube.msr2) FROM \",\n+      \" join \" + getDbName() + \"c1_testdim3tbl testdim3 ON testcube.testdim3id = testdim3.id and testdim3.dt = 'latest'\"\n+      + \" join \" + getDbName() + \"c1_testdim4tbl testdim4 ON testdim3.testDim4id = testdim4.id and\" +\n+      \" testdim4.dt = 'latest'\", null, \"group by testdim4.name\", null,\n+      getWhereForDailyAndHourly2days(\"testcube\", \"c1_summary1\"));\n+    TestCubeRewriter.compareQueries(expected, hqlQuery);\n   }\n }", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestJoinResolver.java"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/bf6c614e599cdc7cdf98a247d8806bff11fed214/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java", "sha": "9521136367a8c8e67374801b2075a000cded16c3", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java?ref=bf6c614e599cdc7cdf98a247d8806bff11fed214", "patch": "@@ -1128,7 +1128,7 @@ public QueryPlan explainAndPrepare(LensSessionHandle sessionHandle, String query\n       plan.setPrepareHandle(prepared.getPrepareHandle());\n       return plan;\n     } catch (LensException e) {\n-      LOG.info(\"Explain and prepare failed\", e);\n+      LOG.error(\"Explain and prepare failed\", e);\n       QueryPlan plan;\n       if (e.getCause() != null && e.getCause().getMessage() != null) {\n         plan = new QueryPlan(true, e.getCause().getMessage());\n@@ -1790,6 +1790,7 @@ public QueryPlan explain(LensSessionHandle sessionHandle, String query, LensConf\n       explainQueryContext.setSelectedDriver(driverSelector.select(explainQueryContext, qconf));\n       return explainQueryContext.getSelectedDriverQueryPlan().toQueryPlan();\n     } catch (LensException e) {\n+      LOG.error(\"Error during explain :\" , e);\n       QueryPlan plan;\n       if (e.getCause() != null && e.getCause().getMessage() != null) {\n         plan = new QueryPlan(true, e.getCause().getMessage());", "filename": "lens-server/src/main/java/org/apache/lens/server/query/QueryExecutionServiceImpl.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/3838c6fc412e13efed9b1874d50705c47f6a7732", "parent": "https://github.com/apache/lens/commit/bd72a69a6d8f541a9c3385770dd45b1acd789ad6", "message": "LENS-89 getting NPE from checkForSourceReachabilityForDenormCandidates\nfor some queries (amareshwari via jdhok)", "bug_id": "lens_37", "file": [{"additions": 48, "raw_url": "https://github.com/apache/lens/raw/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "blob_url": "https://github.com/apache/lens/blob/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java", "sha": "1047352375f93888513071829063b24b208582b0", "changes": 55, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java?ref=3838c6fc412e13efed9b1874d50705c47f6a7732", "patch": "@@ -76,6 +76,8 @@ public void rewriteContext(CubeQueryContext cubeql) throws SemanticException {\n       populateCandidateTables(cubeql);\n       resolveCandidateFactTables(cubeql);\n       resolveCandidateDimTables(cubeql);\n+      // remove optional dims added whom requiredForCandidates have been removed\n+      pruneOptionalDims(cubeql);\n       checkForQueriedColumns = false;\n     } else {\n       // populate optional tables\n@@ -149,6 +151,43 @@ private void populateDimTables(Dimension dim, CubeQueryContext cubeql, boolean o\n     }\n   }\n \n+  private void pruneOptionalDims(CubeQueryContext cubeql) {\n+    Set<Dimension> tobeRemoved = new HashSet<Dimension>();\n+    Set<CandidateTable> allCandidates = new HashSet<CandidateTable>();\n+    allCandidates.addAll(cubeql.getCandidateFactTables());\n+    for (Set<CandidateDim> cdims : cubeql.getCandidateDimTables().values()) {\n+      allCandidates.addAll(cdims);\n+    }\n+    Set<CandidateTable> removedCandidates = new HashSet<CandidateTable>();\n+    for (Map.Entry<Dimension, OptionalDimCtx> optdimEntry : cubeql.getOptionalDimensionMap().entrySet()) {\n+      Dimension dim = optdimEntry.getKey();\n+      OptionalDimCtx optdim = optdimEntry.getValue();\n+      Iterator<CandidateTable> iter = optdim.requiredForCandidates.iterator();\n+      while (iter.hasNext()) {\n+        CandidateTable candidate = iter.next();\n+        if (!allCandidates.contains(candidate)) {\n+          LOG.info(\"Removing candidate\" + candidate + \" from requiredForCandidates of\" + dim + \", as it is no more\" +\n+              \" candidate\");\n+          iter.remove();\n+          removedCandidates.add(candidate);\n+        }\n+      }\n+    }\n+    Set<CandidateTable> candidatesReachableThroughRefs = new HashSet<CandidateTable>();\n+    for (Map.Entry<Dimension, OptionalDimCtx> optdimEntry : cubeql.getOptionalDimensionMap().entrySet()) {\n+      Dimension dim = optdimEntry.getKey();\n+      OptionalDimCtx optdim = optdimEntry.getValue();\n+      candidatesReachableThroughRefs.addAll(optdim.requiredForCandidates);\n+      if (optdim.requiredForCandidates.isEmpty() && !optdim.isRequiredInJoinChain) {\n+        LOG.info(\"Not considering optional dimension \" + dim + \" as,\" + \" all requiredForCandidates are removed\");\n+        tobeRemoved.add(dim);\n+      }\n+    }\n+    for (Dimension dim : tobeRemoved) {\n+      removeOptionalDim(cubeql, dim);\n+    }\n+  }\n+\n   private void removeOptionalDim(CubeQueryContext cubeql, Dimension dim) {\n     OptionalDimCtx optdim = cubeql.getOptionalDimensionMap().remove(dim);\n     // remove all the depending candidate table as well\n@@ -160,7 +199,7 @@ private void removeOptionalDim(CubeQueryContext cubeql, Dimension dim) {\n             CubeTableCause.INVALID_DENORM_TABLE));\n       } else {\n         LOG.info(\"Not considering dimtable:\" + candidate + \" as refered table does not have any valid dimtables\");\n-        cubeql.getCandidateDimTables().get(((CandidateDim) candidate).dimtable.getDimName()).remove(candidate);\n+        cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n         cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n             new CandidateTablePruneCause(candidate.getName(), CubeTableCause.INVALID_DENORM_TABLE));\n       }\n@@ -436,13 +475,15 @@ private void checkForSourceReachabilityForDenormCandidates(CubeQueryContext cube\n     for (CandidateTable candidate : removedCandidates) {\n       if (!candidatesReachableThroughRefs.contains(candidate)) {\n         if (candidate instanceof CandidateFact) {\n-          LOG.info(\"Not considering fact:\" + candidate + \" as is not reachable through any optional dim\");\n-          cubeql.getCandidateFactTables().remove(candidate);\n-          cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact, new CandidateTablePruneCause(candidate.getName(),\n-              CubeTableCause.COLUMN_NOT_FOUND));\n-        } else {\n+          if (cubeql.getCandidateFactTables().contains(candidate)) {\n+            LOG.info(\"Not considering fact:\" + candidate + \" as is not reachable through any optional dim\");\n+            cubeql.getCandidateFactTables().remove(candidate);\n+            cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact, new CandidateTablePruneCause(candidate.getName(),\n+                CubeTableCause.COLUMN_NOT_FOUND));\n+          }\n+        } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())){\n           LOG.info(\"Not considering dimtable:\" + candidate + \" as is not reachable through any optional dim\");\n-          cubeql.getCandidateDimTables().get(((CandidateDim) candidate).dimtable.getDimName()).remove(candidate);\n+          cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n           cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n               new CandidateTablePruneCause(candidate.getName(), CubeTableCause.COLUMN_NOT_FOUND));\n         }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CandidateTableResolver.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java", "blob_url": "https://github.com/apache/lens/blob/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java", "sha": "9f6c6a4889f52fac7bb7728697ac0e1bb19ec6e5", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java?ref=3838c6fc412e13efed9b1874d50705c47f6a7732", "patch": "@@ -27,6 +27,7 @@\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/CubeQueryContext.java"}, {"additions": 8, "raw_url": "https://github.com/apache/lens/raw/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "blob_url": "https://github.com/apache/lens/blob/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java", "sha": "822a6f55a50bab76ce0a20e0a8c5211fc77dc99a", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java?ref=3838c6fc412e13efed9b1874d50705c47f6a7732", "patch": "@@ -746,13 +746,15 @@ private void autoResolveJoins(CubeQueryContext cubeql) throws HiveException {\n           Set<CandidateTable> candidates = cubeql.getOptionalDimensionMap().get(joinee).requiredForCandidates;\n           for (CandidateTable candidate : candidates) {\n             if (candidate instanceof CandidateFact) {\n-              LOG.info(\"Not considering fact:\" + candidate + \" as there is no join path to \" + joinee);\n-              cubeql.getCandidateFactTables().remove(candidate);\n-              cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact, new CandidateTablePruneCause(\n-                  ((CandidateFact) candidate).fact.getName(), CubeTableCause.COLUMN_NOT_FOUND));\n-            } else {\n+              if (cubeql.getCandidateFactTables().contains(candidate)) {\n+                LOG.info(\"Not considering fact:\" + candidate + \" as there is no join path to \" + joinee);\n+                cubeql.getCandidateFactTables().remove(candidate);\n+                cubeql.addFactPruningMsgs(((CandidateFact) candidate).fact, new CandidateTablePruneCause(\n+                    ((CandidateFact) candidate).fact.getName(), CubeTableCause.COLUMN_NOT_FOUND));\n+              }\n+            } else if (cubeql.getCandidateDimTables().containsKey(((CandidateDim) candidate).getBaseTable())) {\n               LOG.info(\"Not considering dimtable:\" + candidate + \" as there is no join path to \" + joinee);\n-              cubeql.getCandidateDimTables().get(((CandidateDim) candidate).dimtable.getDimName()).remove(candidate);\n+              cubeql.getCandidateDimTables().get(((CandidateDim) candidate).getBaseTable()).remove(candidate);\n               cubeql.addDimPruningMsgs((Dimension) candidate.getBaseTable(), (CubeDimensionTable) candidate.getTable(),\n                   new CandidateTablePruneCause(candidate.getName(), CubeTableCause.COLUMN_NOT_FOUND));\n             }", "filename": "lens-cube/src/main/java/org/apache/lens/cube/parse/JoinResolver.java"}, {"additions": 21, "raw_url": "https://github.com/apache/lens/raw/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "blob_url": "https://github.com/apache/lens/blob/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java", "sha": "a4e45359a0a80248140baeec5095c713f090faac", "changes": 21, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java?ref=3838c6fc412e13efed9b1874d50705c47f6a7732", "patch": "@@ -1154,6 +1154,8 @@ private void createCityTbale(CubeMetastoreClient client) throws HiveException, P\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"name\", \"string\", \"city name\")));\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"ambigdim1\", \"string\", \"used in testColumnAmbiguity\")));\n     cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"ambigdim2\", \"string\", \"used in testColumnAmbiguity\")));\n+    cityAttrs.add(new BaseDimAttribute(new FieldSchema(\"nocandidatecol\", \"string\", \"used in testing no\" +\n+        \" candidate available\")));\n     cityAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"stateid\", \"int\", \"state id\"), \"State refer\",\n         new TableReference(\"statedim\", \"id\")));\n     cityAttrs.add(new ReferencedDimAtrribute(new FieldSchema(\"statename\", \"string\", \"state name\"), \"State name\",\n@@ -1200,6 +1202,25 @@ private void createCityTbale(CubeMetastoreClient client) throws HiveException, P\n     storageTables.put(c2, s2);\n \n     client.createCubeDimensionTable(cityDim.getName(), dimName, dimColumns, 0L, dumpPeriods, dimProps, storageTables);\n+\n+    dimName = \"citytable2\";\n+\n+    dimColumns = new ArrayList<FieldSchema>();\n+    dimColumns.add(new FieldSchema(\"id\", \"int\", \"code\"));\n+    dimColumns.add(new FieldSchema(\"stateid\", \"int\", \"state id\"));\n+\n+    storageTables = new HashMap<String, StorageTableDesc>();\n+    storageTables.put(c4, s2);\n+\n+    client.createCubeDimensionTable(cityDim.getName(), dimName, dimColumns, 0L, dumpPeriods, dimProps, storageTables);\n+\n+    dimName = \"citytable3\";\n+\n+    dimColumns = new ArrayList<FieldSchema>();\n+    dimColumns.add(new FieldSchema(\"id\", \"int\", \"code\"));\n+\n+    client.createCubeDimensionTable(cityDim.getName(), dimName, dimColumns, 0L, dumpPeriods, dimProps, storageTables);\n+\n   }\n \n   private void createTestDim2(CubeMetastoreClient client) throws HiveException {", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/CubeTestSetup.java"}, {"additions": 18, "raw_url": "https://github.com/apache/lens/raw/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "blob_url": "https://github.com/apache/lens/blob/3838c6fc412e13efed9b1874d50705c47f6a7732/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java", "sha": "42d5a70e1f09289ad1c8ee5e4328e8a5d23c3a28", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java?ref=3838c6fc412e13efed9b1874d50705c47f6a7732", "patch": "@@ -164,5 +164,23 @@ public void testDimensionQuery() throws Exception {\n         getExpectedQuery(\"citydim\", \"SELECT citydim.name, statedim.name FROM \", joinExpr, null, null, \"c1_citytable\",\n             true);\n     TestCubeRewriter.compareQueries(expected, hqlQuery);\n+\n+    hqlQuery = rewrite(\"select citydim.statename, citydim.name  from\" + \" citydim\", conf);\n+\n+    expected =\n+        getExpectedQuery(\"citydim\", \"SELECT statedim.name, citydim.name FROM \", joinExpr, null, null, \"c1_citytable\",\n+            true);\n+    TestCubeRewriter.compareQueries(expected, hqlQuery);\n+\n+    // Query would fail because citydim.nocandidatecol does not exist in any candidate\n+    Throwable th = null;\n+    try {\n+      hqlQuery = rewrite(\"select citydim.name, citydim.statename, citydim.nocandidatecol from citydim\", conf);\n+      Assert.fail();\n+    } catch (SemanticException e) {\n+      e.printStackTrace();\n+      th = e;\n+    }\n+    Assert.assertNotNull(th);\n   }\n }", "filename": "lens-cube/src/test/java/org/apache/lens/cube/parse/TestDenormalizationResolver.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/2dccd8810030f947ec308c7cc4e3705eb86c0664", "parent": "https://github.com/apache/lens/commit/853eceec3739b9187087fa804b13245cec9aa4af", "message": "Merge pull request #1 from sreekanth-r/npe\n\nFixing NullPointerException thrown while cube select queries", "bug_id": "lens_38", "file": [{"additions": 1, "raw_url": "https://github.com/apache/lens/raw/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-examples/src/main/resources/dim_table.xml", "blob_url": "https://github.com/apache/lens/blob/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-examples/src/main/resources/dim_table.xml", "sha": "a2eed3fc8d3e1d99af50ab02a3093d0356233c5b", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-examples/src/main/resources/dim_table.xml?ref=2dccd8810030f947ec308c7cc4e3705eb86c0664", "patch": "@@ -41,5 +41,6 @@\n   </storage_dump_periods>\n   <properties>\n     <properties name=\"dim1.prop\" value=\"d1\"/>\n+    <properties name=\"cube.dimensiontable.timed.dimension\" value=\"dt\"/>\n   </properties>\n </dimension_table>", "filename": "grill-examples/src/main/resources/dim_table.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-examples/src/main/resources/dim_table2.xml", "blob_url": "https://github.com/apache/lens/blob/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-examples/src/main/resources/dim_table2.xml", "sha": "1dbafea8ee572be66e537d9b946e1308c8fc8728", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-examples/src/main/resources/dim_table2.xml?ref=2dccd8810030f947ec308c7cc4e3705eb86c0664", "patch": "@@ -36,5 +36,6 @@\n   </storage_dump_periods>\n   <properties>\n     <properties name=\"dim2.prop\" value=\"d2\"/>\n+    <properties name=\"cube.dimensiontable.timed.dimension\" value=\"dt\"/>\n   </properties>\n </dimension_table>", "filename": "grill-examples/src/main/resources/dim_table2.xml"}, {"additions": 28, "raw_url": "https://github.com/apache/lens/raw/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-server/src/main/java/com/inmobi/grill/server/GrillService.java", "blob_url": "https://github.com/apache/lens/blob/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-server/src/main/java/com/inmobi/grill/server/GrillService.java", "sha": "618aba61679d19e8f0d56de1c8a21aed7a7ba2ec", "changes": 29, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server/src/main/java/com/inmobi/grill/server/GrillService.java?ref=2dccd8810030f947ec308c7cc4e3705eb86c0664", "patch": "@@ -21,6 +21,7 @@\n  */\n \n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.ws.rs.NotFoundException;\n \n@@ -44,6 +45,11 @@\n \n   private final CLIService cliService;\n \n+  //Static session map which is used by query submission thread to get the\n+  //grill session before submitting a query to hive server\n+  private static ConcurrentHashMap<String, GrillSessionHandle> sessionMap =\n+      new ConcurrentHashMap<String, GrillSessionHandle>();\n+\n   protected GrillService(String name, CLIService cliService) {\n     super(name);\n     this.cliService = cliService;\n@@ -83,14 +89,18 @@ public GrillSessionHandle openSession(String username, String password, Map<Stri\n     } catch (Exception e) {\n       throw new GrillException (e);\n     }\n-    return new GrillSessionHandle(sessionHandle.getHandleIdentifier().getPublicId(),\n+    GrillSessionHandle grillSession = new GrillSessionHandle(\n+        sessionHandle.getHandleIdentifier().getPublicId(),\n         sessionHandle.getHandleIdentifier().getSecretId());\n+    sessionMap.put(grillSession.getPublicId().toString(), grillSession);\n+    return grillSession;\n   }\n \n   public void closeSession(GrillSessionHandle sessionHandle)\n       throws GrillException {\n     try {\n       cliService.closeSession(getHiveSessionHandle(sessionHandle));\n+      sessionMap.remove(sessionHandle.getPublicId().toString());\n     } catch (Exception e) {\n       throw new GrillException (e);\n     }\n@@ -114,10 +124,27 @@ public void acquire(GrillSessionHandle sessionHandle) throws GrillException {\n     getSession(sessionHandle).acquire();\n   }\n \n+  /**\n+   * Acquire a grill session specified by the public UUID\n+   * @param sessionHandle public UUID of the session\n+   * @throws GrillException if session cannot be acquired\n+   */\n+  public void acquire(String sessionHandle) throws GrillException {\n+    getSession(sessionMap.get(sessionHandle)).acquire();\n+  }\n+\n   public void release(GrillSessionHandle sessionHandle) throws GrillException {\n     getSession(sessionHandle).release();\n   }\n \n+  /**\n+   * Releases a grill session specified by the public UUID\n+   * @throws GrillException if session cannot be released\n+   */\n+  public void release(String sessionHandle) throws GrillException {\n+    getSession(sessionMap.get(sessionHandle)).release();\n+  }\n+\n   public void addResource(GrillSessionHandle sessionHandle, String type,\n       String path) throws GrillException {\n   }", "filename": "grill-server/src/main/java/com/inmobi/grill/server/GrillService.java"}, {"additions": 21, "raw_url": "https://github.com/apache/lens/raw/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/2dccd8810030f947ec308c7cc4e3705eb86c0664/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java", "sha": "b773e0e79504377edfc99817f2cdd93e878593cb", "changes": 26, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/lens/contents/grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java?ref=2dccd8810030f947ec308c7cc4e3705eb86c0664", "patch": "@@ -234,13 +234,17 @@ public void run() {\n             if (ctx.getStatus().getStatus().equals(Status.QUEUED)) {\n               LOG.info(\"Launching query:\" + ctx.getDriverQuery());\n               try {\n+                //acquire session before any query operation.\n+                acquire(ctx.getGrillSessionIdentifier());\n                 rewriteAndSelect(ctx);\n                 ctx.getSelectedDriver().executeAsync(ctx);\n               } catch (GrillException e) {\n                 LOG.error(\"Error launching query \", e);\n                 String reason = e.getCause() != null ? e.getCause().getMessage() : e.getMessage();\n                 setFailedStatus(ctx, \"Launching query failed\", reason);\n                 continue;\n+              } finally {\n+                release(ctx.getGrillSessionIdentifier());\n               }\n               setLaunchedStatus(ctx);\n               LOG.info(\"Launched query \" + ctx.getQueryHandle());\n@@ -268,9 +272,12 @@ public void run() {\n           for (QueryContext ctx : launched) {\n             LOG.info(\"Polled status for \" + ctx.getQueryHandle());\n             try {\n+              acquire(ctx.getGrillSessionIdentifier());\n               updateStatus(ctx.getQueryHandle());\n             } catch (GrillException e) {\n               LOG.error(\"Error updating status \", e);\n+            } finally {\n+              release(ctx.getGrillSessionIdentifier());\n             }\n           }\n           Thread.sleep(pollInterval);\n@@ -398,8 +405,15 @@ private void fireStatusChangeEvent(QueryContext ctx, QueryStatus current, QueryS\n     public void run() {\n       LOG.info(\"Starting Query purger thread\");\n       while (!stopped && !queryPurger.isInterrupted()) {\n+        FinishedQuery finished = null;\n         try {\n-          FinishedQuery finished = finishedQueries.take();\n+          finished = finishedQueries.take();\n+        } catch (InterruptedException e) {\n+          LOG.info(\"QueryPurger has been interrupted, exiting\");\n+          return;\n+        }\n+        try {\n+          acquire(finished.getCtx().getGrillSessionIdentifier());\n           finished.getCtx().getSelectedDriver().closeQuery(\n               finished.getCtx().getQueryHandle());\n           allQueries.remove(finished.getCtx().getQueryHandle());\n@@ -409,11 +423,13 @@ public void run() {\n           LOG.info(\"Query purged: \" + finished.getCtx().getQueryHandle());\n         } catch (GrillException e) {\n           LOG.error(\"Error closing  query \", e);\n-        } catch (InterruptedException e) {\n-          LOG.info(\"QueryPurger has been interrupted, exiting\");\n-          return;\n-        } catch (Exception e) {\n+        }  catch (Exception e) {\n           LOG.error(\"Error in query purger\", e);\n+        } finally {\n+          try {\n+            release(finished.getCtx().getGrillSessionIdentifier());\n+          } catch (GrillException ignore) {\n+          }\n         }\n       }\n     }", "filename": "grill-server/src/main/java/com/inmobi/grill/server/query/QueryExecutionServiceImpl.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/1584f001fa3a3e5bcbf8483bd1350587e3fff653", "parent": "https://github.com/apache/lens/commit/6a4b247041d7aea64fce352556fadf47c7529e2c", "message": "LENS-484 : NPE when weight is not set in XFactTable object while creating fact table (Yash Sharma via Raghavendra Singh)", "bug_id": "lens_39", "file": [{"additions": 12, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-api/src/main/resources/cube-0.1.xsd", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-api/src/main/resources/cube-0.1.xsd", "sha": "719d10d94f638718d25c0b91f00abea75414ddf5", "changes": 14, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-api/src/main/resources/cube-0.1.xsd?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -626,13 +626,18 @@\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"weight\" type=\"xs:double\">\n+    <xs:attribute name=\"weight\" use=\"required\" >\n       <xs:annotation>\n         <xs:documentation>\n           The weight of the dimension table. LENS will use this attribute to determine the lightest\n           table when there are more than one eligible table for answering a query.\n         </xs:documentation>\n       </xs:annotation>\n+      <xs:simpleType>\n+        <xs:restriction base=\"xs:double\">\n+          <xs:minExclusive value=\"0\"></xs:minExclusive>\n+        </xs:restriction>\n+      </xs:simpleType>\n     </xs:attribute>\n   </xs:complexType>\n \n@@ -1157,13 +1162,18 @@\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"weight\" type=\"xs:double\">\n+    <xs:attribute name=\"weight\" use=\"required\" >\n       <xs:annotation>\n         <xs:documentation>\n           The weight of the fact table. LENS will use this attribute to decide the lightest table to\n           query when there are more than one eligible tables.\n         </xs:documentation>\n       </xs:annotation>\n+      <xs:simpleType>\n+        <xs:restriction base=\"xs:double\">\n+          <xs:minExclusive value=\"0\"></xs:minExclusive>\n+        </xs:restriction>\n+      </xs:simpleType>\n     </xs:attribute>\n   </xs:complexType>\n ", "filename": "lens-api/src/main/resources/cube-0.1.xsd"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommands.java", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommands.java", "sha": "13bfbd2469042cdb8751d54a670d4904af48c065", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommands.java?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -69,6 +69,8 @@ private void createSampleCube() throws URISyntaxException {\n     String cubeList = getCubeCommand().showCubes();\n     assertFalse(cubeList.contains(\"sample_cube\"), cubeList);\n     getCubeCommand().createCube(new File(cubeSpec.toURI()).getAbsolutePath());\n+    cubeList = getCubeCommand().showCubes();\n+    assertTrue(cubeList.contains(\"sample_cube\"), cubeList);\n   }\n \n   private void dropSampleCube() {", "filename": "lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommands.java"}, {"additions": 150, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommandsWithMissingWeight.java", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommandsWithMissingWeight.java", "sha": "73f3a7885cf06029b538a8bdab79a7cb12137ef9", "changes": 150, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommandsWithMissingWeight.java?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -0,0 +1,150 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.lens.cli;\n+\n+import java.io.*;\n+\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.apache.lens.cli.commands.LensCubeCommands;\n+import org.apache.lens.cli.commands.LensFactCommands;\n+import org.apache.lens.client.LensClient;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * The Class TestLensFactCommands.\n+ */\n+public class TestLensFactCommandsWithMissingWeight extends LensCliApplicationTest {\n+\n+  /** The Constant LOG. */\n+  private static final Logger LOG = LoggerFactory.getLogger(TestLensFactCommandsWithMissingWeight.class);\n+\n+  /** The Constant FACT_LOCAL. */\n+  public static final String FACT_LOCAL = \"fact_local_without_wt\";\n+\n+  /* The Constant for cube name */\n+  public static final String CUBE_NAME = \"cube_with_no_weight_facts\";\n+\n+  /* The Constant for fact name */\n+  public static final String FACT_NAME = \"fact_without_wt\";\n+\n+  /* The File name with cube details */\n+  public static final String CUBE_XML_FILE = \"cube_with_no_weight_facts.xml\";\n+\n+  /* The File name with fact details */\n+  public static final String FACT_XML_FILE = \"fact_without_weight.xml\";\n+\n+  /** The command. */\n+  private static LensFactCommands command = null;\n+  private static LensCubeCommands cubeCommands = null;\n+\n+  /**\n+   * Test fact commands.\n+   *\n+   * @throws java.io.IOException\n+   */\n+  @Test\n+  public void testFactCommands() throws IOException, URISyntaxException {\n+    dropSampleCubeIfExists();\n+    dropFactIfExists();\n+\n+    createSampleCube();\n+    addFactTable();\n+    dropSampleCube();\n+  }\n+\n+  private void createSampleCube() throws URISyntaxException {\n+    URL cubeSpec = TestLensCubeCommands.class.getClassLoader().getResource(CUBE_XML_FILE);\n+    String cubeList = getCubeCommand().showCubes();\n+    Assert.assertFalse(cubeList.contains(CUBE_NAME));\n+    getCubeCommand().createCube(new File(cubeSpec.toURI()).getAbsolutePath());\n+    cubeList = getCubeCommand().showCubes();\n+    Assert.assertTrue(cubeList.contains(CUBE_NAME));\n+  }\n+\n+  private void dropSampleCube() {\n+    getCubeCommand().dropCube(CUBE_NAME);\n+    TestLensStorageCommands.dropStorage(FACT_LOCAL);\n+  }\n+\n+  private static LensFactCommands getCommand() {\n+    if (command == null) {\n+      LensClient client = new LensClient();\n+      command = new LensFactCommands();\n+      command.setClient(client);\n+    }\n+    return command;\n+  }\n+\n+  private static LensCubeCommands getCubeCommand() {\n+    if (cubeCommands == null) {\n+      LensClient client = new LensClient();\n+      cubeCommands = new LensCubeCommands();\n+      cubeCommands.setClient(client);\n+    }\n+    return cubeCommands;\n+  }\n+\n+  /**\n+   * Adds the fact_without_wt table.\n+   *\n+   * @throws java.io.IOException\n+   */\n+  public static void addFactTable() throws IOException, URISyntaxException {\n+    LensFactCommands command = getCommand();\n+    String factList = command.showFacts(null);\n+    Assert.assertEquals(command.showFacts(CUBE_NAME), \"No fact found for \" + CUBE_NAME);\n+    Assert.assertEquals(\"No fact found\", factList, \"Fact tables should not be found.\");\n+    // add local storage before adding fact table\n+    TestLensStorageCommands.addLocalStorage(FACT_LOCAL);\n+    URL factSpec = TestLensFactCommandsWithMissingWeight.class.getClassLoader().getResource(FACT_XML_FILE);\n+    String response = null;\n+    response = command.createFact(new File(factSpec.toURI()).getAbsolutePath());\n+\n+    Assert.assertEquals(response, \"failed\", \"Fact table creation should not be successful.\");\n+    Assert.assertEquals(command.showFacts(CUBE_NAME), \"No fact found for \" + CUBE_NAME,\n+            \"Fact tables should not be found.\");\n+  }\n+\n+  /**\n+   * Drop fact_without_wt table if exixsts.\n+   */\n+  public static void dropFactIfExists() {\n+    LensFactCommands command = getCommand();\n+    String factList = command.showFacts(null);\n+    if (factList.contains(FACT_NAME)) {\n+      command.dropFact(FACT_NAME, false);\n+      TestLensStorageCommands.dropStorage(FACT_LOCAL);\n+    }\n+  }\n+\n+  private void dropSampleCubeIfExists() {\n+    String cubeList = getCubeCommand().showCubes();\n+    if (cubeList.contains(CUBE_NAME)) {\n+      getCubeCommand().dropCube(CUBE_NAME);\n+    }\n+  }\n+}", "filename": "lens-cli/src/test/java/org/apache/lens/cli/TestLensFactCommandsWithMissingWeight.java"}, {"additions": 47, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/cube_with_no_weight_facts.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/cube_with_no_weight_facts.xml", "sha": "263ca88d2cd0f15a50ae242675cc060dc9720b64", "changes": 47, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/cube_with_no_weight_facts.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+\n+-->\n+<x_base_cube name=\"cube_with_no_weight_facts\" xmlns=\"uri:lens:cube:0.1\"\n+ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+    <measures>\n+        <measure name=\"measure1\" type=\"BIGINT\" />\n+        <measure name=\"measure2\" type=\"INT\" default_aggr=\"SUM\" />\n+        <measure name=\"measure3\" type=\"FLOAT\" default_aggr=\"MAX\" start_time='2013-12-12T00:00:00' />\n+        <measure name=\"measure4\" type=\"DOUBLE\" default_aggr=\"MIN\" />\n+    </measures>\n+    <dim_attributes>\n+        <dim_attribute name=\"dim1\" type=\"INT\" />\n+        <dim_attribute name=\"dim2\" type=\"INT\" start_time='2013-12-01T00:00:00' />\n+        <dim_attribute name=\"dim3\" type=\"INT\">\n+            <ref_spec>\n+                <table_references>\n+                    <table_reference table=\"dim_table\" column=\"id\" />\n+                </table_references>\n+            </ref_spec>\n+        </dim_attribute>\n+    </dim_attributes>\n+    <expressions>\n+        <expression name=\"expr_msr5\" type=\"DOUBLE\">\n+            <expr_spec expr = \"measure3 + measure4\" end_time='2013-12-12T00:00:00'/>\n+            <expr_spec expr = \"measure3 + measure4 + 0.01\" start_time='2013-12-12T00:00:00'/>\n+        </expression>\n+    </expressions>\n+</x_base_cube>\n\\ No newline at end of file", "filename": "lens-cli/src/test/resources/cube_with_no_weight_facts.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim-local-storage-element.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim-local-storage-element.xml", "sha": "7a58aa3895eaf74f479e06db09a656d8e8ab3f82", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/dim-local-storage-element.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,15 +21,14 @@\n -->\n <x_storage_table_element xmlns=\"uri:lens:cube:0.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+  <update_periods>\n+    <update_period>DAILY</update_period>\n+  </update_periods>\n   <storage_name>dim_local</storage_name>\n-\n   <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/examples/local\">\n   <part_cols>\n     <column comment=\"Time column\" name=\"dt\" type=\"STRING\" />\n     </part_cols>\n     <time_part_cols>dt</time_part_cols>\n   </table_desc>\n-  <update_periods>\n-  <update_period>DAILY</update_period>\n-  </update_periods>\n </x_storage_table_element>", "filename": "lens-cli/src/test/resources/dim-local-storage-element.xml"}, {"additions": 4, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim_table.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim_table.xml", "sha": "96b2244dc33c988e00e673166c56a49299dc9fbd", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/dim_table.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"test_dim\" table_name=\"dim_table\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"test_dim\" table_name=\"dim_table\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\" />\n@@ -32,16 +32,16 @@\n   </properties>\n   <storage_tables>\n     <storage_table>\n+      <update_periods>\n+        <update_period>HOURLY</update_period>\n+      </update_periods>\n       <storage_name>local</storage_name>\n       <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/examples/local\">\n         <part_cols>\n           <column comment=\"Time column\" name=\"dt\" type=\"STRING\" />\n         </part_cols>\n         <time_part_cols>dt</time_part_cols>\n       </table_desc>\n-      <update_periods>\n-        <update_period>HOURLY</update_period>\n-      </update_periods>\n     </storage_table>\n   </storage_tables>\n </x_dimension_table>", "filename": "lens-cli/src/test/resources/dim_table.xml"}, {"additions": 4, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim_table2.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/dim_table2.xml", "sha": "000f06173c0d8fd0940e1f7a342b70450acfff61", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/dim_table2.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"test_dim\" table_name=\"dim_table2\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"test_dim\" table_name=\"dim_table2\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\" />\n@@ -32,7 +32,9 @@\n   </properties>\n   <storage_tables>\n     <storage_table>\n-      <update_periods>HOURLY</update_periods>\n+      <update_periods>\n+        <update_period>HOURLY</update_period>\n+      </update_periods>\n       <storage_name>dim_local</storage_name>\n       <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/examples/dim1\">\n         <part_cols>", "filename": "lens-cli/src/test/resources/dim_table2.xml"}, {"additions": 4, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/fact-local-storage-element.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/fact-local-storage-element.xml", "sha": "d9bb1119375d2a14a343385da0c623b8f3d8440d", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/fact-local-storage-element.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,15 +21,15 @@\n -->\n <x_storage_table_element xmlns=\"uri:lens:cube:0.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+  <update_periods>\n+    <update_period>HOURLY</update_period>\n+    <update_period>DAILY</update_period>\n+  </update_periods>\n   <storage_name>fact_local</storage_name>\n   <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/examples/local\">\n     <part_cols>\n       <column comment=\"Time column\" name=\"dt\" type=\"STRING\" />\n     </part_cols>\n     <time_part_cols>dt</time_part_cols>\n   </table_desc>\n-  <update_periods>\n-    <update_period>HOURLY</update_period>\n-    <update_period>DAILY</update_period>\n-  </update_periods>\n </x_storage_table_element>", "filename": "lens-cli/src/test/resources/fact-local-storage-element.xml"}, {"additions": 50, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/fact_without_weight.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/fact_without_weight.xml", "sha": "fc0c6703226b7cc8edfda9dc6da80c709328cab4", "changes": 50, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/fact_without_weight.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements. See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership. The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License. You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied. See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+\n+-->\n+<x_fact_table cube_name=\"cube_with_no_weight_facts\" name=\"fact_without_wt\" xmlns=\"uri:lens:cube:0.1\"\n+ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \" >\n+    <columns>\n+        <column comment=\"\" name=\"dim1\" type=\"INT\" />\n+        <column comment=\"\" name=\"measure1\" type=\"BIGINT\" />\n+        <column comment=\"\" name=\"measure2\" type=\"INT\" />\n+        <column comment=\"\" name=\"measure3\" type=\"FLOAT\" />\n+    </columns>\n+    <properties>\n+        <property name=\"fact_without_wt.prop\" value=\"f1\" />\n+        <property name=\"cube.fact.is.aggregated\" value=\"true\" />\n+    </properties>\n+    <storage_tables>\n+        <storage_table>\n+            <update_periods>\n+                <update_period>HOURLY</update_period>\n+                <update_period>DAILY</update_period>\n+                <update_period>MONTHLY</update_period>\n+            </update_periods>\n+            <storage_name>fact_local_without_wt</storage_name>\n+            <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/examples/fact_local_without_wt\">\n+                <part_cols>\n+                    <column comment=\"Time column\" name=\"dt\" type=\"STRING\" />\n+                </part_cols>\n+                <time_part_cols>dt</time_part_cols>\n+            </table_desc>\n+        </storage_table>\n+    </storage_tables>\n+</x_fact_table>\n\\ No newline at end of file", "filename": "lens-cli/src/test/resources/fact_without_weight.xml"}, {"additions": 10, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/sample-cube.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/sample-cube.xml", "sha": "f0eba571ad410e5ad6ee4f5266a37c03da55f3de", "changes": 20, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/sample-cube.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,18 +21,16 @@\n -->\n <x_base_cube name=\"sample_cube\" xmlns=\"uri:lens:cube:0.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+  <properties>\n+    <property name=\"sample_cube.prop\" value=\"sample\" />\n+    <property name=\"cube.sample_cube.timed.dimensions.list\" value=\"dt\" />\n+  </properties>\n   <measures>\n     <measure name=\"measure1\" type=\"BIGINT\" />\n     <measure name=\"measure2\" type=\"INT\" default_aggr=\"SUM\" />\n     <measure name=\"measure3\" type=\"FLOAT\" default_aggr=\"MAX\" start_time='2013-12-12T00:00:00' />\n     <measure name=\"measure4\" type=\"DOUBLE\" default_aggr=\"MIN\" />\n   </measures>\n-  <expressions>\n-    <expression name=\"expr_msr5\" type=\"DOUBLE\">\n-      <expr_spec expr = \"measure3 + measure4\" end_time='2013-12-12T00:00:00'/>\n-      <expr_spec expr = \"measure3 + measure4 + 0.01\" start_time='2013-12-12T00:00:00'/>\n-    </expression>\n-  </expressions>\n   <dim_attributes>\n     <dim_attribute name=\"dim1\" type=\"INT\" />\n     <dim_attribute name=\"dim2\" type=\"INT\" start_time='2013-12-01T00:00:00' />\n@@ -44,8 +42,10 @@\n       </ref_spec>\n     </dim_attribute>\n   </dim_attributes>\n-  <properties>\n-    <property name=\"sample_cube.prop\" value=\"sample\" />\n-    <property name=\"cube.sample_cube.timed.dimensions.list\" value=\"dt\" />\n-  </properties>\n+  <expressions>\n+    <expression name=\"expr_msr5\" type=\"DOUBLE\">\n+      <expr_spec expr = \"measure3 + measure4\" end_time='2013-12-12T00:00:00'/>\n+      <expr_spec expr = \"measure3 + measure4 + 0.01\" start_time='2013-12-12T00:00:00'/>\n+    </expression>\n+  </expressions>\n </x_base_cube>", "filename": "lens-cli/src/test/resources/sample-cube.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/test-dimension.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-cli/src/test/resources/test-dimension.xml", "sha": "a9b7c0833280d02edfc702402847c0821835cd73", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-cli/src/test/resources/test-dimension.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -24,8 +24,8 @@\n   <attributes>\n     <dim_attribute name=\"id\" type=\"INT\" />\n     <dim_attribute name=\"name\" type=\"STRING\" />\n-    <dim_attribute name=\"detail\" type=\"STRING\" start_time='2013-12-01-00:00' />\n-    <dim_attribute name=\"d2id\" type=\"INT\" start_time='2013-12-01-00:00'>\n+    <dim_attribute name=\"detail\" type=\"STRING\" start_time='2013-12-01T00:00:00' />\n+    <dim_attribute name=\"d2id\" type=\"INT\" start_time='2013-12-01T00:00:00'>\n       <ref_spec>\n         <table_references>\n           <table_reference table=\"test_dim2\" column=\"id\" />", "filename": "lens-cli/src/test/resources/test-dimension.xml"}, {"additions": 15, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-client/src/main/java/org/apache/lens/client/LensMetadataClient.java", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-client/src/main/java/org/apache/lens/client/LensMetadataClient.java", "sha": "44f4f1f49894f235568aabc3de128879a233b35c", "changes": 17, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-client/src/main/java/org/apache/lens/client/LensMetadataClient.java?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.nio.charset.Charset;\n@@ -33,10 +34,13 @@\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n+import javax.xml.XMLConstants;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.JAXBElement;\n import javax.xml.bind.JAXBException;\n import javax.xml.bind.Unmarshaller;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n \n import org.apache.lens.api.APIResult;\n import org.apache.lens.api.APIResult.Status;\n@@ -52,6 +56,8 @@\n import org.glassfish.jersey.media.multipart.FormDataMultiPart;\n import org.glassfish.jersey.media.multipart.MultiPartFeature;\n \n+import org.xml.sax.SAXException;\n+\n import com.google.common.base.Joiner;\n import com.google.common.io.Files;\n \n@@ -67,10 +73,17 @@\n \n   static {\n     try {\n+      ClassLoader classLoader = LensMetadataClient.class.getClassLoader();\n+      SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+      URI uri = classLoader.getResource(\"cube-0.1.xsd\").toURI();\n+      LOG.info(\"URI for cube schema: \" + uri.toString());\n+      Schema schema = sf.newSchema(uri.toURL());\n       JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);\n       JAXB_UNMARSHALLER = jaxbContext.createUnmarshaller();\n-    } catch (JAXBException e) {\n-      throw new RuntimeException(\"Could not initialize JAXBCOntext\");\n+      JAXB_UNMARSHALLER.setSchema(schema);\n+    } catch (JAXBException | URISyntaxException | MalformedURLException | SAXException e) {\n+      LOG.error(\"Could not initialize JAXBContext. \", e);\n+      throw new RuntimeException(\"Could not initialize JAXBContext. \", e);\n     }\n   }\n ", "filename": "lens-client/src/main/java/org/apache/lens/client/LensMetadataClient.java"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/city_subset.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/city_subset.xml", "sha": "18c78472be2799d5d0a6f1ec616a9757261a2382", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/city_subset.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"city\" table_name=\"city_subset\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"city\" table_name=\"city_subset\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/city_subset.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/customer_table.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/customer_table.xml", "sha": "af308c26e223f0a17d39c613f06724b74a6ceb40", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/customer_table.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"customer\" table_name=\"customer_table\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"customer\" table_name=\"customer_table\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/customer_table.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table.xml", "sha": "10c9ac0f009fe52999f7bd6c7afc7108963bb24f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/dim_table.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"sample_dim\" table_name=\"dim_table\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"sample_dim\" table_name=\"dim_table\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/dim_table.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table2.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table2.xml", "sha": "e72f9c599fc702760629865ca12b5672f58b1170", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/dim_table2.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"sample_dim2\" table_name=\"dim_table2\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"sample_dim2\" table_name=\"dim_table2\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/dim_table2.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table3.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table3.xml", "sha": "7955426d0564e69f0937fa1367c8d701ce2fb34e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/dim_table3.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"sample_db_dim\" table_name=\"dim_table3\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"sample_db_dim\" table_name=\"dim_table3\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/dim_table3.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table4.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/dim_table4.xml", "sha": "9de1cd7c107b40845315a33e603068cf47a83fc5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/dim_table4.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"sample_dim\" table_name=\"dim_table4\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"sample_dim\" table_name=\"dim_table4\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/dim_table4.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/product_db_table.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/product_db_table.xml", "sha": "867d37bda1acbba36d1c0e08cf009654dde0a275", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/product_db_table.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"product\" table_name=\"product_db_table\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"product\" table_name=\"product_db_table\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/product_db_table.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/product_table.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/product_table.xml", "sha": "303f3ad71cbd63e343e6e5e444f7535a46cce865", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/product_table.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -19,7 +19,7 @@\n   under the License.\n \n -->\n-<x_dimension_table dimension_name=\"product\" table_name=\"product_table\" weight=\"0.0\" xmlns=\"uri:lens:cube:0.1\"\n+<x_dimension_table dimension_name=\"product\" table_name=\"product_table\" weight=\"100.0\" xmlns=\"uri:lens:cube:0.1\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n   <columns>\n     <column comment=\"ID\" name=\"id\" type=\"INT\"/>", "filename": "lens-examples/src/main/resources/product_table.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-aggr-fact1.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-aggr-fact1.xml", "sha": "728c77548ddcf22002c8927ba57a9fad8e01cf31", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/sales-aggr-fact1.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -64,14 +64,14 @@\n       <storage_name>mydb</storage_name>\n       <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/db-storage.db\"\n         storage_handler_name=\"org.apache.lens.storage.db.DBStorageHandler\">\n-        <table_parameters>\n-          <property name=\"lens.metastore.native.db.name\" value=\"default\"/>\n-        </table_parameters>\n         <part_cols>\n           <column comment=\"Process time partition\" name=\"pt\" type=\"STRING\"/>\n           <column comment=\"Order time partition\" name=\"ot\" type=\"STRING\"/>\n           <column comment=\"Delivery time partition\" name=\"dt\" type=\"STRING\"/>\n         </part_cols>\n+        <table_parameters>\n+          <property name=\"lens.metastore.native.db.name\" value=\"default\"/>\n+        </table_parameters>\n         <time_part_cols>pt</time_part_cols>\n         <time_part_cols>ot</time_part_cols>\n         <time_part_cols>dt</time_part_cols>", "filename": "lens-examples/src/main/resources/sales-aggr-fact1.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-aggr-fact2.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-aggr-fact2.xml", "sha": "61edf64a0297bd670973198b53f5da0943881633", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/sales-aggr-fact2.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -58,14 +58,14 @@\n       <storage_name>mydb</storage_name>\n       <table_desc external=\"true\" field_delimiter=\",\" table_location=\"/tmp/db-storage.db\"\n         storage_handler_name=\"org.apache.lens.storage.db.DBStorageHandler\">\n-        <table_parameters>\n-          <property name=\"lens.metastore.native.db.name\" value=\"default\"/>\n-        </table_parameters>\n         <part_cols>\n           <column comment=\"Process time partition\" name=\"pt\" type=\"STRING\"/>\n           <column comment=\"Order time partition\" name=\"ot\" type=\"STRING\"/>\n           <column comment=\"Delivery time partition\" name=\"dt\" type=\"STRING\"/>\n         </part_cols>\n+        <table_parameters>\n+          <property name=\"lens.metastore.native.db.name\" value=\"default\"/>\n+        </table_parameters>\n         <time_part_cols>pt</time_part_cols>\n         <time_part_cols>ot</time_part_cols>\n         <time_part_cols>dt</time_part_cols>", "filename": "lens-examples/src/main/resources/sales-aggr-fact2.xml"}, {"additions": 20, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-cube.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sales-cube.xml", "sha": "4923aa398ea20cddbdb60e6219597f43b66782a6", "changes": 40, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/sales-cube.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,6 +21,13 @@\n -->\n <x_base_cube name=\"sales\" xmlns=\"uri:lens:cube:0.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+  <properties>\n+    <property name=\"cube.sales.timed.dimensions.list\" value=\"order_time,delivery_time\" />\n+    <property name=\"cube.timedim.partition.order_time\" value=\"ot\" />\n+    <property name=\"cube.timedim.partition.delivery_time\" value=\"dt\" />\n+    <property name=\"cube.timedim.relation.order_time\" value=\"delivery_time+[-20 days,-1 hour]\" />\n+    <!-- means dt-20days <= ot <= dt-1hour -->\n+  </properties>\n   <measures>\n     <measure name=\"unit_sales\" type=\"BIGINT\" default_aggr=\"SUM\" display_string=\"Unit Sales\" format_string=\"#,###\"/>\n     <measure name=\"store_sales\" type=\"DOUBLE\" default_aggr=\"SUM\" display_string=\"Store Sales\" format_string=\"#,###.##\"/>\n@@ -36,16 +43,6 @@\n     <measure name=\"rating\" type=\"FLOAT\" default_aggr=\"AVG\"\n       display_string=\"Rating\"/>\n   </measures>\n-  <expressions>\n-    <expression name=\"profit\" type=\"DOUBLE\" display_string=\"Profit\">\n-      <expr_spec expr=\"store_sales - store_cost\"/>\n-    </expression>\n-    <expression name=\"promotion_sales\" type=\"DOUBLE\" display_string=\"Promotion sales\">\n-      <expr_spec expr=\"sum(case when promotion_id = 0 then 0 else store_sales end)\" start_time='2015-04-12T00:00:00'/>\n-      <expr_spec expr=\"sum(case when promotion_id = -1 then 0 when promotion_id = -1 then 0 else store_sales end)\"\n-       end_time=\"2015-04-12T00:00:00\"/>\n-    </expression>\n-  </expressions>\n   <dim_attributes>\n     <dim_attribute name=\"customer_id\" type=\"INT\" />\n     <dim_attribute name=\"product_id\" type=\"INT\" />\n@@ -58,24 +55,34 @@\n     <dim_attribute name=\"production_city_id\" type=\"INT\" />\n     <dim_attribute name=\"delivery_city_id\" type=\"INT\" />\n     <dim_attribute name=\"customer_city_name\" type=\"string\" description=\"City name to which the customer belongs\"\n-      display_string=\"Customer City\">\n+                   display_string=\"Customer City\">\n       <ref_spec>\n         <chain_ref_column chain_name=\"customer_city\" ref_col=\"name\" />\n       </ref_spec>\n     </dim_attribute>\n     <dim_attribute name=\"production_city_name\" type=\"STRING\" description=\"City name in which the product was produced\"\n-      display_string=\"Production City\">\n+                   display_string=\"Production City\">\n       <ref_spec>\n         <chain_ref_column chain_name=\"production_city\" ref_col=\"name\" />\n       </ref_spec>\n     </dim_attribute>\n     <dim_attribute name=\"delivery_city_name\" type=\"STRING\" description=\"City name to which the product was delivered\"\n-      display_string=\"Delivery City\">\n+                   display_string=\"Delivery City\">\n       <ref_spec>\n         <chain_ref_column chain_name=\"delivery_city\" ref_col=\"name\" />\n       </ref_spec>\n     </dim_attribute>\n   </dim_attributes>\n+  <expressions>\n+    <expression name=\"profit\" type=\"DOUBLE\" display_string=\"Profit\">\n+      <expr_spec expr=\"store_sales - store_cost\"/>\n+    </expression>\n+    <expression name=\"promotion_sales\" type=\"DOUBLE\" display_string=\"Promotion sales\">\n+      <expr_spec expr=\"sum(case when promotion_id = 0 then 0 else store_sales end)\" start_time='2015-04-12T00:00:00'/>\n+      <expr_spec expr=\"sum(case when promotion_id = -1 then 0 when promotion_id = -1 then 0 else store_sales end)\"\n+       end_time=\"2015-04-12T00:00:00\"/>\n+    </expression>\n+  </expressions>\n   <join_chains>\n     <join_chain name=\"customer_details\">\n       <paths>\n@@ -150,11 +157,4 @@\n       </paths>\n     </join_chain>\n   </join_chains>\n-  <properties>\n-    <property name=\"cube.sales.timed.dimensions.list\" value=\"order_time,delivery_time\" />\n-    <property name=\"cube.timedim.partition.order_time\" value=\"ot\" />\n-    <property name=\"cube.timedim.partition.delivery_time\" value=\"dt\" />\n-    <property name=\"cube.timedim.relation.order_time\" value=\"delivery_time+[-20 days,-1 hour]\" />\n-    <!-- means dt-20days <= ot <= dt-1hour -->\n-  </properties>\n </x_base_cube>", "filename": "lens-examples/src/main/resources/sales-cube.xml"}, {"additions": 9, "raw_url": "https://github.com/apache/lens/raw/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sample-cube.xml", "blob_url": "https://github.com/apache/lens/blob/1584f001fa3a3e5bcbf8483bd1350587e3fff653/lens-examples/src/main/resources/sample-cube.xml", "sha": "7b784eaee9cdb1b12a02f3b7ce58746e6da7811f", "changes": 18, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-examples/src/main/resources/sample-cube.xml?ref=1584f001fa3a3e5bcbf8483bd1350587e3fff653", "patch": "@@ -21,18 +21,15 @@\n -->\n <x_base_cube name=\"sample_cube\" xmlns=\"uri:lens:cube:0.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"uri:lens:cube:0.1 cube-0.1.xsd \">\n+  <properties>\n+    <property name=\"cube.sample_cube.timed.dimensions.list\" value=\"dt\"/>\n+  </properties>\n   <measures>\n     <measure name=\"measure1\" type=\"BIGINT\"/>\n     <measure name=\"measure2\" type=\"INT\" default_aggr=\"SUM\"/>\n     <measure name=\"measure3\" type=\"FLOAT\" default_aggr=\"MAX\" start_time='2013-12-12T00:00:00'/>\n     <measure name=\"measure4\" type=\"DOUBLE\" default_aggr=\"MIN\"/>\n   </measures>\n-  <expressions>\n-    <expression name=\"expr_msr5\" type=\"DOUBLE\">\n-      <expr_spec expr = \"measure3 + measure4\" start_time='2013-12-12T00:00:00' />\n-      <expr_spec expr = \"measure3 + measure4 + 0.01\" end_time='2013-12-12T00:00:00'/>\n-    </expression>\n-  </expressions>\n   <dim_attributes>\n     <dim_attribute name=\"dim1\" type=\"INT\"/>\n     <dim_attribute name=\"dim2\" type=\"INT\" start_time='2013-12-01T00:00:00'/>\n@@ -44,7 +41,10 @@\n       </ref_spec>\n     </dim_attribute>\n   </dim_attributes>\n-  <properties>\n-    <property name=\"cube.sample_cube.timed.dimensions.list\" value=\"dt\"/>\n-  </properties>\n+  <expressions>\n+    <expression name=\"expr_msr5\" type=\"DOUBLE\">\n+      <expr_spec expr = \"measure3 + measure4\" start_time='2013-12-12T00:00:00' />\n+      <expr_spec expr = \"measure3 + measure4 + 0.01\" end_time='2013-12-12T00:00:00'/>\n+    </expression>\n+  </expressions>\n </x_base_cube>", "filename": "lens-examples/src/main/resources/sample-cube.xml"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/e21f7501b768c6816aeb35da93c638de93795841", "parent": "https://github.com/apache/lens/commit/fab4c569f04e793a44aeceadee52a86b40352ddd", "message": "Merge pull request #173 from InMobi/svc_stop_npe\n\nFixed errors when shutting down server in case of failed init", "bug_id": "lens_40", "file": [{"additions": 11, "raw_url": "https://github.com/apache/lens/raw/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/EventServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/EventServiceImpl.java", "sha": "aadd0e1b0af3efe1b975bfa378516f7a0564336c", "changes": 20, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/EventServiceImpl.java?ref=e21f7501b768c6816aeb35da93c638de93795841", "patch": "@@ -197,19 +197,21 @@ public synchronized void start() {\n    */\n   @Override\n   public void stop() {\n-    List<Runnable> pending = eventHandlerPool.shutdownNow();\n-    if (pending != null && !pending.isEmpty()) {\n-      StringBuilder pendingMsg = new StringBuilder(\"Pending Events:\");\n-      for (Runnable handler : pending) {\n-        if (handler instanceof EventHandler) {\n-          pendingMsg.append(((EventHandler) handler).event.getEventId()).append(\",\");\n+    if (eventHandlerPool != null) {\n+      List<Runnable> pending = eventHandlerPool.shutdownNow();\n+      if (pending != null && !pending.isEmpty()) {\n+        StringBuilder pendingMsg = new StringBuilder(\"Pending Events:\");\n+        for (Runnable handler : pending) {\n+          if (handler instanceof EventHandler) {\n+            pendingMsg.append(((EventHandler) handler).event.getEventId()).append(\",\");\n+          }\n         }\n+        LOG.info(\"Event listener service stopped while \" + pending.size() + \" events still pending\");\n+        LOG.info(pendingMsg.toString());\n       }\n-      LOG.info(\"Event listener service stopped while \" + pending.size() + \" events still pending\");\n-      LOG.info(pendingMsg.toString());\n     }\n-    super.stop();\n     LOG.info(\"Event service stopped\");\n+    super.stop();\n   }\n \n   public Map<Class<? extends LensEvent>, List<LensEventListener>> getEventListeners() {", "filename": "lens-server/src/main/java/org/apache/lens/server/EventServiceImpl.java"}, {"additions": 18, "raw_url": "https://github.com/apache/lens/raw/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "blob_url": "https://github.com/apache/lens/blob/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/LensServices.java", "sha": "fe2fc75bda5e5bf5a6e1c35a2d644026dcfed1ee", "changes": 34, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensServices.java?ref=e21f7501b768c6816aeb35da93c638de93795841", "patch": "@@ -266,24 +266,26 @@ private void setupPersistedState() throws IOException, ClassNotFoundException {\n    */\n   private synchronized void persistLensServiceState() throws IOException {\n     if (conf.getBoolean(LensConfConstants.SERVER_RESTART_ENABLED, LensConfConstants.DEFAULT_SERVER_RESTART_ENABLED)) {\n-      FileSystem fs = persistDir.getFileSystem(conf);\n-      LOG.info(\"Persisting server state in \" + persistDir);\n-\n-      for (LensService service : lensServices) {\n-        LOG.info(\"Persisting state of service:\" + service.getName());\n-        Path serviceWritePath = new Path(persistDir, service.getName() + \".out\");\n-        ObjectOutputStream out = null;\n-        try {\n-          out = new ObjectOutputStream(fs.create(serviceWritePath));\n-          service.writeExternal(out);\n-        } finally {\n-          if (out != null) {\n-            out.close();\n+      if (persistDir != null) {\n+        FileSystem fs = persistDir.getFileSystem(conf);\n+        LOG.info(\"Persisting server state in \" + persistDir);\n+\n+        for (LensService service : lensServices) {\n+          LOG.info(\"Persisting state of service:\" + service.getName());\n+          Path serviceWritePath = new Path(persistDir, service.getName() + \".out\");\n+          ObjectOutputStream out = null;\n+          try {\n+            out = new ObjectOutputStream(fs.create(serviceWritePath));\n+            service.writeExternal(out);\n+          } finally {\n+            if (out != null) {\n+              out.close();\n+            }\n           }\n+          Path servicePath = getServicePersistPath(service);\n+          fs.rename(serviceWritePath, servicePath);\n+          LOG.info(\"Persisted service \" + service.getName() + \" to \" + servicePath);\n         }\n-        Path servicePath = getServicePersistPath(service);\n-        fs.rename(serviceWritePath, servicePath);\n-        LOG.info(\"Persisted service \" + service.getName() + \" to \" + servicePath);\n       }\n     } else {\n       LOG.info(\"Server restart is not enabled. Not persisting the server state\");", "filename": "lens-server/src/main/java/org/apache/lens/server/LensServices.java"}, {"additions": 13, "raw_url": "https://github.com/apache/lens/raw/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/MetricsServiceImpl.java", "blob_url": "https://github.com/apache/lens/blob/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/main/java/org/apache/lens/server/MetricsServiceImpl.java", "sha": "b0774e087572c73804fde4203a615d230b620739", "changes": 17, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/MetricsServiceImpl.java?ref=e21f7501b768c6816aeb35da93c638de93795841", "patch": "@@ -279,11 +279,20 @@ public synchronized void start() {\n   public synchronized void stop() {\n     // unregister\n     LensEventService eventService = (LensEventService) LensServices.get().getService(LensEventService.NAME);\n-    eventService.removeListener(queryStatusListener);\n-    queryStatusListener.stop();\n-    for (ScheduledReporter reporter : reporters) {\n-      reporter.stop();\n+    if (eventService != null) {\n+      eventService.removeListener(queryStatusListener);\n+    }\n+\n+    if (queryStatusListener != null) {\n+      queryStatusListener.stop();\n     }\n+\n+    if (reporters != null) {\n+      for (ScheduledReporter reporter : reporters) {\n+        reporter.stop();\n+      }\n+    }\n+\n     LOG.info(\"Stopped metrics service\");\n     super.stop();\n   }", "filename": "lens-server/src/main/java/org/apache/lens/server/MetricsServiceImpl.java"}, {"additions": 56, "raw_url": "https://github.com/apache/lens/raw/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/test/java/org/apache/lens/server/TestStartupOnMetastoreDown.java", "blob_url": "https://github.com/apache/lens/blob/e21f7501b768c6816aeb35da93c638de93795841/lens-server/src/test/java/org/apache/lens/server/TestStartupOnMetastoreDown.java", "sha": "2254bd873831a194c87b66333ee3dfa51eb991b3", "changes": 56, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/TestStartupOnMetastoreDown.java?ref=e21f7501b768c6816aeb35da93c638de93795841", "patch": "@@ -0,0 +1,56 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.lens.server;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.hive.conf.HiveConf;\n+import org.apache.hadoop.hive.ql.metadata.Hive;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+public class TestStartupOnMetastoreDown {\n+  private static Log LOG = LogFactory.getLog(TestStartupOnMetastoreDown.class);\n+\n+  // @Test\n+  public void testServicesStartOnMetastoreDown() throws Exception {\n+    LensServices services = new LensServices(LensServices.LENS_SERVICES_NAME);\n+    HiveConf hiveConf = new HiveConf();\n+\n+    // Set metastore uri to an invalid location\n+    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS, \"thrift://localhost:49153\");\n+\n+    try {\n+      services.init(hiveConf);\n+      Assert.fail(\"Expected init to fail because of invalid metastore config\");\n+    } catch (Throwable th) {\n+      Assert.assertTrue(th.getMessage().contains(\n+          \"Unable to instantiate org.apache.hadoop.hive.metastore.HiveMetaStoreClient\"));\n+    } finally {\n+      try {\n+        services.stop();\n+      } catch (Exception exc) {\n+        LOG.error(\"Error stopping services\", exc);\n+        Assert.fail(\"services.stop() got unexpected exception \" + exc);\n+      }\n+      Hive.closeCurrent();\n+    }\n+  }\n+\n+}", "filename": "lens-server/src/test/java/org/apache/lens/server/TestStartupOnMetastoreDown.java"}], "repo": "lens"}, {"commit": "https://github.com/apache/lens/commit/51486b8e357fab15ff7bd9c84c7ffd73fd250ce6", "parent": "https://github.com/apache/lens/commit/deb47dc310f97f5bac0b8584e3f29774df53ac01", "message": "LENS-300: Handles cases when LensSessionHandle object is null(Jaideep Dhok via prongs)\nWe were getting NPE when session is gone but the query launched by the session is still getting submitted", "bug_id": "lens_41", "file": [{"additions": 16, "raw_url": "https://github.com/apache/lens/raw/51486b8e357fab15ff7bd9c84c7ffd73fd250ce6/lens-server/src/main/java/org/apache/lens/server/LensService.java", "blob_url": "https://github.com/apache/lens/blob/51486b8e357fab15ff7bd9c84c7ffd73fd250ce6/lens-server/src/main/java/org/apache/lens/server/LensService.java", "sha": "dd6d41c8ad6ef855184cab1c6c108989d20da366", "changes": 18, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/main/java/org/apache/lens/server/LensService.java?ref=51486b8e357fab15ff7bd9c84c7ffd73fd250ce6", "patch": "@@ -29,6 +29,7 @@\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.ClientErrorException;\n import javax.ws.rs.NotAuthorizedException;\n+import javax.ws.rs.NotFoundException;\n \n import org.apache.lens.api.LensConf;\n import org.apache.lens.api.LensException;\n@@ -227,6 +228,10 @@ public SessionManager getSessionManager() {\n    * @return the session\n    */\n   public LensSessionImpl getSession(LensSessionHandle sessionHandle) {\n+    if (sessionHandle == null) {\n+      throw new ClientErrorException(\"Session is null \" + sessionHandle, 400);\n+    }\n+\n     try {\n       return ((LensSessionImpl) getSessionManager().getSession(getHiveSessionHandle(sessionHandle)));\n     } catch (HiveSQLException exc) {\n@@ -254,7 +259,13 @@ public void acquire(LensSessionHandle sessionHandle) {\n    * @param sessionHandle public UUID of the session\n    */\n   public void acquire(String sessionHandle) {\n-    acquire(sessionMap.get(sessionHandle));\n+    LensSessionHandle handle = sessionMap.get(sessionHandle);\n+\n+    if (handle == null) {\n+      throw new NotFoundException(\"Session handle not found \" + sessionHandle);\n+    }\n+\n+    acquire(handle);\n   }\n \n   /**\n@@ -276,7 +287,10 @@ public void release(LensSessionHandle sessionHandle) {\n    * @throws LensException if session cannot be released\n    */\n   public void release(String sessionHandle) throws LensException {\n-    getSession(sessionMap.get(sessionHandle)).release();\n+    LensSessionHandle handle = sessionMap.get(sessionHandle);\n+    if (handle != null) {\n+      getSession(handle).release();\n+    }\n   }\n \n   /**", "filename": "lens-server/src/main/java/org/apache/lens/server/LensService.java"}, {"additions": 34, "raw_url": "https://github.com/apache/lens/raw/51486b8e357fab15ff7bd9c84c7ffd73fd250ce6/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java", "blob_url": "https://github.com/apache/lens/blob/51486b8e357fab15ff7bd9c84c7ffd73fd250ce6/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java", "sha": "73621a32f12a29897e1b0b58da834b3c37fc9447", "changes": 34, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/lens/contents/lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java?ref=51486b8e357fab15ff7bd9c84c7ffd73fd250ce6", "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.util.HashMap;\n \n import javax.ws.rs.ClientErrorException;\n import javax.ws.rs.NotFoundException;\n@@ -432,4 +433,37 @@ public void testOpenSessionWithDatabase() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test acquire and release behaviour for closed sessions\n+   */\n+  @Test\n+  public void testAcquireReleaseClosedSession() throws Exception {\n+    HiveSessionService sessionService = LensServices.get().getService(SessionService.NAME);\n+\n+    LensSessionHandle sessionHandle = sessionService.openSession(\"foo@localhost\", \"bar\", new HashMap<String, String>());\n+    Assert.assertNotNull(sessionHandle, \"Expected session to be opened\");\n+\n+    sessionService.closeSession(sessionHandle);\n+    final String sessionIdentifier = sessionHandle.getPublicId().toString();\n+\n+    try {\n+      sessionService.acquire(sessionIdentifier);\n+      // Above statement should throw notfound exception\n+      Assert.fail(\"Should not reach here since above statement should have thrown NotFoundException\");\n+    } catch (NotFoundException nfe) {\n+      // Pass\n+    } finally {\n+      // Should not do anything\n+      sessionService.release(sessionIdentifier);\n+    }\n+\n+    // Get session for null handle should throw bad request\n+    try {\n+      sessionService.getSession(sessionHandle);\n+      Assert.fail(\"Above statement should have thrown erorr\");\n+    } catch (ClientErrorException cee) {\n+      // PASS\n+    }\n+  }\n+\n }", "filename": "lens-server/src/test/java/org/apache/lens/server/session/TestSessionResource.java"}], "repo": "lens"}]
