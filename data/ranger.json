{
    "ranger_29f8f20": {
        "bug_id": "ranger_29f8f20",
        "commit": "https://github.com/apache/ranger/commit/29f8f2027f7703dcb144f4bd87499fe3d8459a88",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java?ref=29f8f2027f7703dcb144f4bd87499fe3d8459a88",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.ranger.common.SortField;\n import org.apache.ranger.common.SearchField.DATA_TYPE;\n import org.apache.ranger.common.SearchField.SEARCH_TYPE;\n+import org.apache.ranger.common.UserSessionBase;\n import org.apache.ranger.entity.XXContextEnricherDef;\n import org.apache.ranger.entity.XXAccessTypeDef;\n import org.apache.ranger.entity.XXEnumDef;\n@@ -158,13 +159,14 @@ public RangerServiceDef getPopulatedViewObject(XXServiceDef xServiceDef) {\n \t\treturn this.populateViewBean(xServiceDef);\n \t}\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n \tpublic RangerServiceDefList searchRangerServiceDefs(SearchFilter searchFilter) {\n \t\tList<RangerServiceDef> serviceDefList = new ArrayList<RangerServiceDef>();\n \t\tRangerServiceDefList retList = new RangerServiceDefList();\n \n \t\tList<XXServiceDef> xSvcDefList = (List<XXServiceDef>) searchResources(searchFilter, searchFields, sortFields, retList);\n-\t\tList<String> userRoleList = ContextUtil.getCurrentUserSession().getUserRoleList();\n+\t\tUserSessionBase sessionBase = ContextUtil.getCurrentUserSession();\n+\t\tList<String> userRoleList = (sessionBase != null) ? sessionBase.getUserRoleList() : null;\n+\n \t\tfor (XXServiceDef xSvcDef : xSvcDefList) {\n \t\t\tif(userRoleList != null && !userRoleList.contains(RangerConstants.ROLE_KEY_ADMIN)){\n \t\t\t\tif(xSvcDef!=null && !\"KMS\".equalsIgnoreCase(xSvcDef.getName())){",
                "raw_url": "https://github.com/apache/ranger/raw/29f8f2027f7703dcb144f4bd87499fe3d8459a88/security-admin/src/main/java/org/apache/ranger/service/RangerServiceDefService.java",
                "sha": "33a2da375790d6a75ef9a0fbf70029e563ade6bb",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\nSigned-off-by: sneethiraj <sneethir@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/ab4683eb1fa325494b36b516ef2d80a2962f4548",
        "repo": "ranger",
        "unit_tests": [
            "TestRangerServiceDefService.java"
        ]
    },
    "ranger_2a3ada0": {
        "bug_id": "ranger_2a3ada0",
        "commit": "https://github.com/apache/ranger/commit/2a3ada00603b17093678a78c4106ca91a4b5a2fd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "deletions": 1,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "patch": "@@ -293,7 +293,7 @@ private void initLoginInfo() {\n \t\tif (prop != null) {\n \t\t\tuserName = prop.getProperty(RANGER_LOGIN_USER_NAME_PROP);\n \t\t\tkeyTabFile = prop.getProperty(RANGER_LOGIN_KEYTAB_FILE_PROP);\n-\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP).trim())) {\n+\t\t\tif (!StringUtils.isEmpty(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP))) {\n \t\t\t\ttry {\n \t\t\t\t\tenableHiveMetastoreLookup = Boolean.valueOf(prop.getProperty(ENABLE_HIVE_METASTORE_LOOKUP,\"false\").trim());\n \t\t\t\t} catch (Exception e) {",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/agents-common/src/main/java/org/apache/ranger/plugin/client/HadoopConfigHolder.java",
                "sha": "fabbdcbb0b007852aaaa854cbe9df6074598f0e6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java?ref=2a3ada00603b17093678a78c4106ca91a4b5a2fd",
                "deletions": 2,
                "filename": "hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "patch": "@@ -53,7 +53,7 @@ public HdfsClient(String serviceName, Map<String,String> connectionProperties) {\n     for (Map.Entry<String, String> entry: connectionProperties.entrySet())  {\n       String key = entry.getKey();\n       String value = entry.getValue();\n-      if (!rangerInternalPropertyKeys.contains(key)) {\n+      if (!rangerInternalPropertyKeys.contains(key) && value != null) {\n         conf.set(key, value);\n       }\n     }\n@@ -253,7 +253,7 @@ public static void validateConnectionConfigs(Map<String, String> configs)\n \t  String lookupPrincipal=null;\n \t  try{\n \t\t  lookupPrincipal = SecureClientLogin.getPrincipal(configs.get(\"lookupprincipal\"), java.net.InetAddress.getLocalHost().getCanonicalHostName());\n-\t  }catch(Exception e){\t\n+\t  }catch(Exception e){\n \t\t  //do nothing\n \t  }\n \t  String lookupKeytab = configs.get(\"lookupkeytab\");",
                "raw_url": "https://github.com/apache/ranger/raw/2a3ada00603b17093678a78c4106ca91a4b5a2fd/hdfs-agent/src/main/java/org/apache/ranger/services/hdfs/client/HdfsClient.java",
                "sha": "cd5c0130c46c9d03fd863a04acac7feeb6ebdb71",
                "status": "modified"
            }
        ],
        "message": "RANGER-1530 - NPE in HadoopConfigHolder",
        "parent": "https://github.com/apache/ranger/commit/770f274d04f1a438b90d3cb6643d587558f6bbf7",
        "repo": "ranger",
        "unit_tests": [
            "HdfsClientTest.java"
        ]
    },
    "ranger_3a57aa3": {
        "bug_id": "ranger_3a57aa3",
        "commit": "https://github.com/apache/ranger/commit/3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "deletions": 0,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "patch": "@@ -600,6 +600,7 @@ public RangerPolicy createPolicy(RangerPolicy policy) throws Exception {\n \t\tcreateNewResourcesForPolicy(policy, xCreatedPolicy, resources);\n \t\tcreateNewPolicyItemsForPolicy(policy, xCreatedPolicy, policyItems, xServiceDef);\n \t\t\n+\t\thandlePolicyUpdate(service);\n \t\tRangerPolicy createdPolicy = policyService.getPopulatedViewObject(xCreatedPolicy);\n \t\tdataHistService.createObjectDataHistory(createdPolicy, RangerDataHistService.ACTION_CREATE);\n \t\t",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "sha": "292a9b9b32b916b9a3d001a461f3321fcbfddcdb",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "deletions": 12,
                "filename": "security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "patch": "@@ -27,6 +27,8 @@\n import java.util.Map.Entry;\n \n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n import org.apache.ranger.db.RangerDaoManager;\n import org.apache.ranger.entity.XXGroup;\n import org.apache.ranger.entity.XXUser;\n@@ -45,7 +47,8 @@\n \n @Component\n public class ServiceUtil {\n-\t\n+\tstatic final Logger LOG = Logger.getLogger(ServiceUtil.class);\n+\n \tstatic Map<String, Integer> mapServiceTypeToAssetType = new HashMap<String, Integer>();\n \tstatic Map<String, Integer> mapAccessTypeToPermType   = new HashMap<String, Integer>();\n \t\n@@ -119,15 +122,21 @@ public VXAsset toVXAsset(RangerService service) {\n \t\t\treturn null;\n \t\t}\n \n-\t\tVXAsset ret = new VXAsset();\n+\t\tVXAsset ret = null;\n \n-\t\trangerObjectToDataObject(service, ret);\n-\n-\t\tret.setAssetType(toAssetType(service.getType()));\n-\t\tret.setName(service.getName());\n-\t\tret.setDescription(service.getDescription());\n-\t\tret.setActiveStatus(service.getIsEnabled() ? RangerCommonEnums.STATUS_ENABLED : RangerCommonEnums.STATUS_DISABLED);\n-\t\tret.setConfig(jsonUtil.readMapToString(service.getConfigs()));\n+\t\tInteger assetType = toAssetType(service.getType());\n+\t\t\n+\t\tif(assetType != null) {\n+\t\t\tret = new VXAsset();\n+\t\n+\t\t\trangerObjectToDataObject(service, ret);\n+\t\n+\t\t\tret.setAssetType(toAssetType(service.getType()));\n+\t\t\tret.setName(service.getName());\n+\t\t\tret.setDescription(service.getDescription());\n+\t\t\tret.setActiveStatus(service.getIsEnabled() ? RangerCommonEnums.STATUS_ENABLED : RangerCommonEnums.STATUS_DISABLED);\n+\t\t\tret.setConfig(jsonUtil.readMapToString(service.getConfigs()));\n+\t\t}\n \n \t\treturn ret;\n \t}\n@@ -188,6 +197,8 @@ public RangerPolicy toRangerPolicy(VXResource resource, RangerService service) {\n \t\t\tList<RangerPolicyItemAccess> accessList = new ArrayList<RangerPolicyItemAccess>();\n \t\t\tString                       ipAddress  = null;\n \n+\t\t\tRangerPolicy.RangerPolicyItem policyItem = new RangerPolicy.RangerPolicyItem();\n+\n \t\t\tfor(VXPermMap permMap : entry.getValue()) {\n \t\t\t\tif(permMap.getPermFor() == AppConstants.XA_PERM_FOR_USER) {\n \t\t\t\t\tString userName = getUserName(permMap);\n@@ -203,13 +214,17 @@ public RangerPolicy toRangerPolicy(VXResource resource, RangerService service) {\n \t\t\t\t\t}\t\t\t\t\t\n \t\t\t\t} \n \n-\t\t\t\taccessList.add(new RangerPolicyItemAccess(toAccessType(permMap.getPermType())));\n+\t\t\t\tString accessType = toAccessType(permMap.getPermType());\n+\t\t\t\t\n+\t\t\t\tif(StringUtils.equalsIgnoreCase(accessType, \"Admin\")) {\n+\t\t\t\t\tpolicyItem.setDelegateAdmin(Boolean.TRUE);\n+\t\t\t\t} else {\n+\t\t\t\t\taccessList.add(new RangerPolicyItemAccess(accessType));\n+\t\t\t\t}\n \n \t\t\t\tipAddress = permMap.getIpAddress();\n \t\t\t}\n \t\t\t\n-\t\t\tRangerPolicy.RangerPolicyItem policyItem = new RangerPolicy.RangerPolicyItem();\n-\n \t\t\tpolicyItem.setUsers(userList);\n \t\t\tpolicyItem.setGroups(groupList);\n \t\t\tpolicyItem.setAccesses(accessList);",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/common/ServiceUtil.java",
                "sha": "d26f4c5caee7450281c3b4434385d1b28508e2f5",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/ranger/blob/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java?ref=3a57aa3c324b5d3580209cdf96cd19451ee5efd5",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "patch": "@@ -239,10 +239,14 @@ public VXAssetList searchXAssets(@Context HttpServletRequest request) {\n \t\tList<RangerService> services = serviceREST.getServices(request);\n \n \t\tif(services != null) {\n-\t\t\tList<VXAsset> assets = new ArrayList<VXAsset>(services.size());\n+\t\t\tList<VXAsset> assets = new ArrayList<VXAsset>();\n \n \t\t\tfor(RangerService service : services) {\n-\t\t\t\tassets.add(serviceUtil.toVXAsset(service));\n+\t\t\t\tVXAsset asset = serviceUtil.toVXAsset(service);\n+\t\t\t\t\n+\t\t\t\tif(asset != null) {\n+\t\t\t\t\tassets.add(asset);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tret.setVXAssets(assets);",
                "raw_url": "https://github.com/apache/ranger/raw/3a57aa3c324b5d3580209cdf96cd19451ee5efd5/security-admin/src/main/java/org/apache/ranger/rest/AssetREST.java",
                "sha": "753a3bf08dd5f9465b2b63d7a5701ad87e937810",
                "status": "modified"
            }
        ],
        "message": "RANGER-203: fix to update policyVersion in service on policy-create; fix for NPE in legacy repository retrieval API",
        "parent": "https://github.com/apache/ranger/commit/aceff0e8ebedb490d8e4446fab8829a138fadd4b",
        "repo": "ranger",
        "unit_tests": [
            "TestAssetREST.java"
        ]
    },
    "ranger_3bed641": {
        "bug_id": "ranger_3bed641",
        "commit": "https://github.com/apache/ranger/commit/3bed641fe69ba15d69a0c88a81eecab905fff8e0",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/ranger/blob/3bed641fe69ba15d69a0c88a81eecab905fff8e0/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java?ref=3bed641fe69ba15d69a0c88a81eecab905fff8e0",
                "deletions": 14,
                "filename": "hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "patch": "@@ -477,14 +477,16 @@ public void processResult(RangerAccessResult result) {\n \n \t\tauditEvent = super.getAuthzEvents(result);\n \n-\t\tRangerAccessRequest  request      = result.getAccessRequest();\n-\t\tRangerAccessResource resource     = request.getResource();\n-\t\tString               resourcePath = resource != null ? resource.getAsString() : null;\n-\n-\t\tauditEvent.setEventTime(request.getAccessTime());\n-\t\tauditEvent.setAccessType(request.getAction());\n-\t\tauditEvent.setResourcePath(this.pathToBeValidated);\n-\t\tauditEvent.setResultReason(resourcePath);\n+\t\tif (auditEvent != null) {\n+\t\t\tRangerAccessRequest request = result.getAccessRequest();\n+\t\t\tRangerAccessResource resource = request.getResource();\n+\t\t\tString resourcePath = resource != null ? resource.getAsString() : null;\n+\n+\t\t\tauditEvent.setEventTime(request.getAccessTime());\n+\t\t\tauditEvent.setAccessType(request.getAction());\n+\t\t\tauditEvent.setResourcePath(this.pathToBeValidated);\n+\t\t\tauditEvent.setResultReason(resourcePath);\n+\t\t}\n \n \t\tif(LOG.isDebugEnabled()) {\n \t\t\tLOG.debug(\"<== RangerHdfsAuditHandler.logAudit(\" + result + \"): \" + auditEvent);\n@@ -496,11 +498,13 @@ public void logHadoopEvent(String path, FsAction action, boolean accessGranted)\n \t\t\tLOG.debug(\"==> RangerHdfsAuditHandler.logHadoopEvent(\" + path + \", \" + action + \", \" + accessGranted + \")\");\n \t\t}\n \n-\t\tauditEvent.setResultReason(path);\n-\t\tauditEvent.setAccessResult((short) (accessGranted ? 1 : 0));\n-\t\tauditEvent.setAccessType(action == null ? null : action.toString());\n-\t\tauditEvent.setAclEnforcer(HadoopModuleName);\n-\t\tauditEvent.setPolicyId(-1);\n+\t\tif(auditEvent != null) {\n+\t\t\tauditEvent.setResultReason(path);\n+\t\t\tauditEvent.setAccessResult((short) (accessGranted ? 1 : 0));\n+\t\t\tauditEvent.setAccessType(action == null ? null : action.toString());\n+\t\t\tauditEvent.setAclEnforcer(HadoopModuleName);\n+\t\t\tauditEvent.setPolicyId(-1);\n+\t\t}\n \n \t\tif(LOG.isDebugEnabled()) {\n \t\t\tLOG.debug(\"<== RangerHdfsAuditHandler.logHadoopEvent(\" + path + \", \" + action + \", \" + accessGranted + \"): \" + auditEvent);\n@@ -512,7 +516,7 @@ public void flushAudit() {\n \t\t\tLOG.debug(\"==> RangerHdfsAuditHandler.flushAudit(\" + isAuditEnabled + \", \" + auditEvent + \")\");\n \t\t}\n \n-\t\tif(isAuditEnabled && !StringUtils.isEmpty(auditEvent.getAccessType())) {\n+\t\tif(isAuditEnabled && auditEvent != null && !StringUtils.isEmpty(auditEvent.getAccessType())) {\n \t\t\tString username = auditEvent.getUser();\n \n \t\t\tboolean skipLog = (username != null && excludeUsers != null && excludeUsers.contains(username)) ;",
                "raw_url": "https://github.com/apache/ranger/raw/3bed641fe69ba15d69a0c88a81eecab905fff8e0/hdfs-agent/src/main/java/org/apache/ranger/authorization/hadoop/RangerHdfsAuthorizer.java",
                "sha": "2b52670d1fdb25208e2fbee420ce12d5da775f60",
                "status": "modified"
            }
        ],
        "message": "RANGER-274: Fixed NPE in RangerHdfsAuthorizer when audit is done without any Ranger policy allowing audit\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/3a0982b5133ab9d786956d15e07d65f2af6401b9",
        "repo": "ranger",
        "unit_tests": [
            "RangerHdfsAuthorizerTest.java"
        ]
    },
    "ranger_9f639f3": {
        "bug_id": "ranger_9f639f3",
        "commit": "https://github.com/apache/ranger/commit/9f639f3c5876c7134f43df33467691a2b01735a7",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ranger/blob/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=9f639f3c5876c7134f43df33467691a2b01735a7",
                "deletions": 8,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "patch": "@@ -2880,14 +2880,16 @@ public static void persistVersionChange(RangerDaoManager daoMgr, Long id, VERSIO\n \n \t\t} else {\n \t\t\tXXService service = daoMgr.getXXService().getById(id);\n-\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n-\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n-\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n-\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n-\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n-\n-\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\tif (service != null) {\n+\t\t\t\tserviceVersionInfoDbObj = new XXServiceVersionInfo();\n+\t\t\t\tserviceVersionInfoDbObj.setServiceId(service.getId());\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setPolicyUpdateTime(new Date());\n+\t\t\t\tserviceVersionInfoDbObj.setTagVersion(1L);\n+\t\t\t\tserviceVersionInfoDbObj.setTagUpdateTime(new Date());\n+\n+\t\t\t\tserviceVersionInfoDao.create(serviceVersionInfoDbObj);\n+\t\t\t}\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/9f639f3c5876c7134f43df33467691a2b01735a7/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "sha": "6c699cad9d946c7e125594f93d0f477edb242bfa",
                "status": "modified"
            }
        ],
        "message": "RANGER-2186: Part II - check for NPE when incrementing service-specific policy and tag versions after update transaction is committed",
        "parent": "https://github.com/apache/ranger/commit/46a75938bfa58676044361b597bd52d1496804a0",
        "repo": "ranger",
        "unit_tests": [
            "TestServiceDBStore.java"
        ]
    },
    "ranger_ab0b91f": {
        "bug_id": "ranger_ab0b91f",
        "commit": "https://github.com/apache/ranger/commit/ab0b91fd666feb034a7a3c06d419d915f8c6721d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "deletions": 4,
                "filename": "security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.commons.collections.MapUtils;\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.Validate;\n import org.apache.log4j.Logger;\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.springframework.stereotype.Component;\n@@ -42,7 +43,7 @@\n \tfinal static Logger logger = Logger.getLogger(RangerSearchUtil.class);\n \t\n \tpublic SearchFilter getSearchFilter(@Nonnull HttpServletRequest request, List<SortField> sortFields) {\n-\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {\n@@ -112,9 +113,7 @@ public SearchFilter getSearchFilterFromLegacyRequestForRepositorySearch(HttpServ\n \n \n \tpublic SearchFilter getSearchFilterFromLegacyRequest(HttpServletRequest request, List<SortField> sortFields) {\n-\t\tif (request == null) {\n-\t\t\treturn null;\n-\t\t}\n+\t\tValidate.notNull(request, \"request\");\n \t\tSearchFilter ret = new SearchFilter();\n \n \t\tif (MapUtils.isEmpty(request.getParameterMap())) {",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/common/RangerSearchUtil.java",
                "sha": "94374ab2fe4f749326460bb81606cc6115ef2b9f",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/ranger/blob/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java?ref=ab0b91fd666feb034a7a3c06d419d915f8c6721d",
                "deletions": 17,
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "patch": "@@ -2089,7 +2089,7 @@ public void importPoliciesFromFile(\n \t\t\t\t\t\t\tLOG.debug(\"Deleting Policy from provided services in servicesMapJson file...\");\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(sourceServices) && CollectionUtils.isNotEmpty(destinationServices)) {\n-\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices, null);\n+\t\t\t\t\t\t\tdeletePoliciesProvidedInServiceMap(sourceServices, destinationServices);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \n@@ -2303,16 +2303,14 @@ public void importPoliciesFromFile(\n \t}\n \t\n \tprivate void deletePoliciesProvidedInServiceMap(\n-\t\t\tList<String> sourceServices, List<String> destinationServices,\n-\t\t\tHttpServletRequest request) {\n+\t\t\tList<String> sourceServices, List<String> destinationServices) {\n \t\tint totalDeletedPilicies = 0;\n \t\tif (CollectionUtils.isNotEmpty(sourceServices)\n \t\t\t\t&& CollectionUtils.isNotEmpty(destinationServices)) {\n \t\t\tRangerPolicyValidator validator = validatorFactory.getPolicyValidator(svcStore);\n \t\t\tfor (int i = 0; i < sourceServices.size(); i++) {\n \t\t\t\tif (!destinationServices.get(i).isEmpty()) {\n-\t\t\t\t\tRangerPolicyList servicePolicies = null;\n-\t\t\t\t\tservicePolicies = getServicePoliciesByName(destinationServices.get(i), request);\n+\t\t\t\t\tfinal RangerPolicyList servicePolicies = getServicePolicies(destinationServices.get(i), new SearchFilter());\n \t\t\t\t\tif (servicePolicies != null) {\n \t\t\t\t\t\tList<RangerPolicy> rangerPolicyList = servicePolicies.getPolicies();\n \t\t\t\t\t\tif (CollectionUtils.isNotEmpty(rangerPolicyList)) {\n@@ -2535,11 +2533,20 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tLOG.debug(\"==> ServiceREST.getServicePolicies(\" + serviceName + \")\");\n \t\t}\n \n-\t\tRangerPolicyList ret  = new RangerPolicyList();\n-\t\tRangerPerfTracer perf = null;\n-\n \t\tSearchFilter filter = searchUtil.getSearchFilter(request, policyService.sortFields);\n \n+\t\tRangerPolicyList ret = getServicePolicies(serviceName, filter);\n+\n+\t\tif (LOG.isDebugEnabled()) {\n+\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n+\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n+\t\t}\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate RangerPolicyList getServicePolicies(String serviceName, SearchFilter filter) {\n+\t\tRangerPerfTracer perf = null;\n \t\ttry {\n \t\t\tif(RangerPerfTracer.isPerfTraceEnabled(PERF_LOG)) {\n \t\t\t\tperf = RangerPerfTracer.getPerfTracer(PERF_LOG, \"ServiceREST.getServicePolicies(serviceName=\" + serviceName + \")\");\n@@ -2548,7 +2555,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t\tif(isAdminUserWithNoFilterParams(filter)) {\n \t\t\t\tPList<RangerPolicy> policies = svcStore.getPaginatedServicePolicies(serviceName, filter);\n \n-\t\t\t\tret = toRangerPolicyList(policies);\n+\t\t\t\treturn toRangerPolicyList(policies);\n \t\t\t} else {\n \t\t\t\t// get all policies from the store; pick the page to return after applying filter\n \t\t\t\tint savedStartIndex = filter == null ? 0 : filter.getStartIndex();\n@@ -2568,7 +2575,7 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \n \t\t\t\tservicePolicies = applyAdminAccessFilter(servicePolicies);\n \n-\t\t\t\tret = toRangerPolicyList(servicePolicies, filter);\n+\t\t\t\treturn toRangerPolicyList(servicePolicies, filter);\n \t\t\t}\n \t\t} catch(WebApplicationException excp) {\n \t\t\tthrow excp;\n@@ -2579,13 +2586,6 @@ public RangerPolicyList getServicePoliciesByName(@PathParam(\"name\") String servi\n \t\t} finally {\n \t\t\tRangerPerfTracer.log(perf);\n \t\t}\n-\n-\t\tif (LOG.isDebugEnabled()) {\n-\t\t\tLOG.debug(\"<== ServiceREST.getServicePolicies(\" + serviceName + \"): count=\"\n-\t\t\t\t\t+ (ret == null ? 0 : ret.getListSize()));\n-\t\t}\n-\n-\t\treturn ret;\n \t}\n \n \t@GET",
                "raw_url": "https://github.com/apache/ranger/raw/ab0b91fd666feb034a7a3c06d419d915f8c6721d/security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
                "sha": "1bff8158fccdff6a3b67f184797f5d339de9da73",
                "status": "modified"
            }
        ],
        "message": "RANGER-2016 : fix NPE caused by a code path, where a HttpServletRequest is passed as null, and re-introduce the non-null validity check",
        "parent": "https://github.com/apache/ranger/commit/5f6e6ce72e16343c47b5294b93e15b81f4ebf475",
        "repo": "ranger",
        "unit_tests": [
            "TestServiceREST.java"
        ]
    },
    "ranger_f8bea62": {
        "bug_id": "ranger_f8bea62",
        "commit": "https://github.com/apache/ranger/commit/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "patch": "@@ -204,8 +204,7 @@ public ServiceTags getServiceTagsIfUpdated(long lastKnownVersion) throws Excepti\n \n \t\tServiceTags ret;\n \n-\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED)\n-\t\t\t\t.queryParam(RangerRESTUtils.SERVICE_NAME_PARAM, serviceName)\n+\t\tWebResource webResource = createWebResource(RangerRESTUtils.REST_URL_GET_SERVICE_TAGS_IF_UPDATED + serviceName)\n \t\t\t\t.queryParam(RangerRESTUtils.LAST_KNOWN_TAG_VERSION_PARAM, Long.toString(lastKnownVersion))\n \t\t\t\t.queryParam(RangerRESTUtils.REST_PARAM_PLUGIN_ID, pluginId);\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/admin/client/RangerAdminRESTClient.java",
                "sha": "de138ed9edb1ef14fc7b7693705be88c517dda83",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 14,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "patch": "@@ -69,29 +69,25 @@ public void setReceiver(RangerTagReceiver receiver) {\n \n \t@Override\n \tpublic void retrieveTags() {\n-\t\tif (adminClient != null) {\n+\t\tif (adminClient != null && receiver != null) {\n \t\t\tServiceTags serviceTags = null;\n-\t\t\tlong savedLastKnownVersion = lastKnownVersion;\n \t\t\ttry {\n \t\t\t\tserviceTags = adminClient.getServiceTagsIfUpdated(lastKnownVersion);\n-\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n \t\t\t} catch (Exception exp) {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources\");\n+\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - Error retrieving resources, exception=\", exp);\n \t\t\t}\n \n-\t\t\tif (receiver != null && serviceTags != null) {\n-\t\t\t\tif (serviceTags.getTagVersion() != null && serviceTags.getTagVersion().longValue() > savedLastKnownVersion) {\n-\t\t\t\t\treceiver.setServiceTags(serviceTags);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - no updates to tags !!\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tif (serviceTags != null) {\n+\t\t\t\tLOG.info(\"RangerAdminTagRetriever.retrieveTags() - Updating tags-cache to new version of tags, lastKnownVersion=\" + lastKnownVersion + \"; newVersion=\" + serviceTags.getTagVersion());\n+\t\t\t\tlastKnownVersion = serviceTags.getTagVersion();\n+\t\t\t\treceiver.setServiceTags(serviceTags);\n \t\t\t} else {\n-\t\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No receiver to send resources to \");\n+\t\t\t\tif (LOG.isDebugEnabled()) {\n+\t\t\t\t\tLOG.debug(\"RangerAdminTagRetriever.retrieveTags() - No need to update tags-cache. lastKnownVersion=\" + lastKnownVersion);\n+\t\t\t\t}\n \t\t\t}\n \t\t} else {\n-\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No Tag Provider ...\");\n+\t\t\tLOG.error(\"RangerAdminTagRetriever.retrieveTags() - No admin client to get tags from or no tag receiver to update tag-cache\");\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerAdminTagRetriever.java",
                "sha": "889fbbcee0429f8ee13de389087a8b35bfa35719",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 5,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "patch": "@@ -161,17 +161,14 @@ public void setServiceTags(final ServiceTags serviceTags) {\n \n \t\t\tfor (RangerServiceResourceMatcher resourceMatcher : resourceMatchers) {\n \n-\t\t\t\tRangerServiceResource serviceResource = resourceMatcher.getServiceResource();\n-\t\t\t\tRangerPolicyResourceMatcher matcher = resourceMatcher.getPolicyResourceMatcher();\n-\n-\t\t\t\tboolean matchResult = matcher.isMatch(resource);\n+\t\t\t\tboolean matchResult = resourceMatcher.isMatch(resource);\n \n \t\t\t\tif (matchResult) {\n \t\t\t\t\tif (ret == null) {\n \t\t\t\t\t\tret = new ArrayList<RangerTag>();\n \t\t\t\t\t}\n \t\t\t\t\t// Find tags from serviceResource\n-\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, serviceResource));\n+\t\t\t\t\tret.addAll(getTagsForServiceResource(serviceTags, resourceMatcher.getServiceResource()));\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/contextenricher/RangerTagProvider.java",
                "sha": "83600c927880447527acd1745f7681da3b282188",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 5,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "patch": "@@ -1026,6 +1026,7 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\tfilter.setParam(SearchFilter.TAG_RESOURCE_SERVICE_NAME, serviceName);\n \n \t\t\tList<RangerServiceResource> serviceResources = getServiceResources(filter);\n+\t\t\tList<RangerServiceResource> filteredServiceResources = new ArrayList<RangerServiceResource>();\n \n \t\t\tMap<Long, RangerTag> tagsMap = new HashMap<Long, RangerTag>();\n \t\t\tMap<Long, List<Long>> resourceToTagIdsMap = new HashMap<Long, List<Long>>();\n@@ -1040,14 +1041,11 @@ public ServiceTags getServiceTagsIfUpdated(String serviceName, Long lastKnownVer\n \t\t\t\t\t\ttagIdList.add(tag.getId());\n \t\t\t\t\t}\n \t\t\t\t\tresourceToTagIdsMap.put(serviceResource.getId(), tagIdList);\n+\t\t\t\t\tfilteredServiceResources.add(serviceResource);\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (MapUtils.isEmpty(resourceToTagIdsMap)) {\n-\t\t\t\tserviceResources.clear();\n-\t\t\t}\n-\n-\t\t\tret.setServiceResources(serviceResources);\n+\t\t\tret.setServiceResources(filteredServiceResources);\n \t\t\tret.setResourceToTagIds(resourceToTagIdsMap);\n \t\t\tret.setTags(tagsMap);\n ",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/store/file/TagFileStore.java",
                "sha": "0b4f0cad7f0bba8721088dc977a0b65e22df68e2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "patch": "@@ -40,9 +40,9 @@\n \tpublic static final String REST_URL_SERVICE_GRANT_ACCESS              = \"/service/plugins/services/grant/\";\n \tpublic static final String REST_URL_SERVICE_REVOKE_ACCESS             = \"/service/plugins/services/revoke/\";\n \n-\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download\";\n+\tpublic static final String REST_URL_GET_SERVICE_TAGS_IF_UPDATED = \"/service/tags/download/\";\n \tpublic static final String SERVICE_NAME_PARAM = \"serviceName\";\n-\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"tagVersion\";\n+\tpublic static final String LAST_KNOWN_TAG_VERSION_PARAM = \"lastKnownVersion\";\n \tpublic static final String PATTERN_PARAM = \"pattern\";\n \n \tpublic static final String REST_URL_LOOKUP_TAG_NAMES = \"/service/tags/lookup\";",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/main/java/org/apache/ranger/plugin/util/RangerRESTUtils.java",
                "sha": "ad113fef7100832aad656a61562ee06591f9493e",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 31,
                "filename": "agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "patch": "@@ -40,68 +40,66 @@\n import org.apache.ranger.plugin.util.SearchFilter;\n import org.apache.ranger.plugin.util.ServiceTags;\n import org.junit.BeforeClass;\n+import org.junit.AfterClass;\n import org.junit.Test;\n \n \n public class TestTagStore {\n \tstatic TagStore tagStore = null;\n \tstatic TagValidator validator = null;\n-\n+\tstatic RangerServiceDef serviceDef = null;\n+\tstatic RangerService service = null;\n \tstatic SearchFilter filter = null;\n-\tstatic Path filePath = new Path(\"file:///etc/ranger/data/ranger-admin-test-site.xml\");\n+\n+\tstatic String tmpDir = null;\n+\tstatic Path filePath = null;\n+\n \tstatic Configuration config = new Configuration();\n \n \tstatic final String serviceDefJsonFile = \"/admin/service-defs/test-hive-servicedef.json\";\n \tstatic final String serviceName = \"tag-unit-test-TestTagStore\";\n \n-\tstatic final String crcSuffix = \".crc\";\n-\tstatic final String jsonSuffix = \".json\";\n-\n \tstatic Gson gsonBuilder = null;\n-\tstatic RangerServiceDef serviceDef = null;\n-\tstatic RangerService service = null;\n \n \t@BeforeClass\n \tpublic static void setupTest() throws Exception {\n \n-\t\ttearDownAfterClass(crcSuffix);\n-\t\ttearDownAfterClass(jsonSuffix);\n+\t\ttmpDir = \"file://\" + System.getProperty(\"java.io.tmpdir\");\n \n-\t\tFileSystem fs = filePath.getFileSystem(config);\n-\n-\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n-\t\tOutputStreamWriter writer = null;\n-\n-\t\twriter = new OutputStreamWriter(outStream);\n-\n-\t\twriter.write(\"<configuration>\\n\" +\n+\t\tString textTemplate = \"<configuration>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.tag.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n \t\t\t\t\"        <property>\\n\" +\n \t\t\t\t\"                <name>ranger.service.store.file.dir</name>\\n\" +\n-\t\t\t\t\"                <value>file:///etc/ranger/data</value>\\n\" +\n+\t\t\t\t\"                <value>%s</value>\\n\" +\n \t\t\t\t\"        </property>\\n\" +\n-\t\t\t\t\"</configuration>\\n\");\n+\t\t\t\t\"</configuration>\\n\";\n+\n+\t\tString text = String.format(textTemplate, tmpDir, tmpDir);\n \n+\t\tString fileName =  tmpDir + \"/ranger-admin-test-site.xml\";\n+\t\tfilePath = new Path(fileName);\n+\t\tFileSystem fs = filePath.getFileSystem(config);\n+\n+\t\tFSDataOutputStream outStream = fs.create(filePath, true);\n+\n+\t\tOutputStreamWriter writer = new OutputStreamWriter(outStream);\n+\t\twriter.write(text);\n \t\twriter.close();\n \n \t\tRangerConfiguration config = RangerConfiguration.getInstance();\n \t\tconfig.addResource(filePath);\n \n-\t\ttagStore = TagFileStore.getInstance();\n-\t\ttagStore.init();\n-\n-\t\tServiceStore svcStore;\n-\n-\t\tsvcStore = new ServiceFileStore();\n+\t\tServiceStore svcStore = new ServiceFileStore();\n \t\tsvcStore.init();\n \n+\t\ttagStore = TagFileStore.getInstance();\n+\t\ttagStore.init();\n \t\ttagStore.setServiceStore(svcStore);\n \n \t\tvalidator = new TagValidator();\n-\n \t\tvalidator.setTagStore(tagStore);\n \n \t\tgsonBuilder = new GsonBuilder().setDateFormat(\"yyyyMMdd-HH:mm:ss.SSS-Z\")\n@@ -110,17 +108,20 @@ public static void setupTest() throws Exception {\n \n \t\tInputStream inStream = TestTagStore.class.getResourceAsStream(serviceDefJsonFile);\n \t\tInputStreamReader reader = new InputStreamReader(inStream);\n+\n \t\tserviceDef = gsonBuilder.fromJson(reader, RangerServiceDef.class);\n+\n \t\tservice = svcStore.createService(new RangerService(serviceDef.getName(), serviceName, serviceName, null, null));\n+\n \t\treader.close();\n \t\tinStream.close();\n \n \t}\n \n-\t//@AfterClass\n-\tpublic static void tearDownAfterClass(String suffix) throws Exception {\n+\t@AfterClass\n+\tpublic static void tearDownAfterClass() throws Exception {\n \n-\t\tPath dirPath = new Path(\"file:///etc/ranger/data\");\n+\t\tPath dirPath = new Path(tmpDir);\n \t\tFileSystem fs = dirPath.getFileSystem(config);\n \n \t\ttry {\n@@ -132,7 +133,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t\t\t\twhile (files.hasNext()) {\n \t\t\t\t\t\tLocatedFileStatus fileStatus = files.next();\n \t\t\t\t\t\tPath path = fileStatus.getPath();\n-\t\t\t\t\t\tif (fs.isFile(path) && path.getName().endsWith(suffix)) {\n+\t\t\t\t\t\tif (fs.isFile(path)) {\n \t\t\t\t\t\t\tfs.delete(path, true);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -142,6 +143,7 @@ public static void tearDownAfterClass(String suffix) throws Exception {\n \t\t}\n \n \t\tfs.delete(filePath, true);\n+\n \t}\n \n \t@Test",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/agents-common/src/test/java/org/apache/ranger/plugin/store/TestTagStore.java",
                "sha": "54241585facebff41cb6ae486e26c87cdef47f9a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 0,
                "filename": "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "patch": "@@ -1027,6 +1027,7 @@ public RangerService createService(RangerService service) throws Exception {\n \n \t\t// While creating, value of version should be 1.\n \t\tservice.setVersion(new Long(1));\n+\t\tservice.setTagVersion(new Long(1));\n \n \t\tif (populateExistingBaseFields) {\n \t\t\tsvcServiceWithAssignedId.setPopulateExistingBaseFields(true);",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
                "sha": "a4765acd83d381dde11a01a9a249531ca3733469",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 2,
                "filename": "security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "patch": "@@ -29,8 +29,8 @@\n \tstatic final String RESOURCES_RESOURCE       = \"/resources/\";\n \tstatic final String RESOURCE_RESOURCE        = \"/resource/\";\n \tstatic final String TAGRESOURCEMAPS_RESOURCE = \"/tagresourcemaps/\";\n-\tstatic final String TAGNAMES_RESOURCE        = \"/tags/names/\";\n-\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/tags/lookup/\";\n+\tstatic final String TAGNAMES_RESOURCE        = \"/names/\";\n+\tstatic final String LOOKUP_TAGS_RESOURCE     = \"/lookup/\";\n \tstatic final String TAGS_DOWNLOAD            = \"/download/\";\n \n \tpublic static final String SERVICE_NAME_PARAM           = \"serviceName\";",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/rest/TagRESTConstants.java",
                "sha": "91525df50a70c8e96fba462ebcffa39bc0400718",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ranger/blob/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ranger/contents/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java?ref=f8bea62bccbca1eaf16083dec4cf1b43ac9b439d",
                "deletions": 0,
                "filename": "security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "patch": "@@ -95,7 +95,9 @@ protected XXServiceBase mapViewToEntityBean(RangerService vObj, XXServiceBase xO\n \t\txObj.setName(vObj.getName());\n \t\txObj.setTagService(tagServiceId);\n \t\txObj.setPolicyVersion(vObj.getPolicyVersion());\n+\t\txObj.setTagVersion(vObj.getTagVersion());\n \t\txObj.setPolicyUpdateTime(vObj.getPolicyUpdateTime());\n+\t\txObj.setTagUpdateTime(vObj.getTagUpdateTime());\n \t\txObj.setDescription(vObj.getDescription());\n \t\txObj.setIsEnabled(vObj.getIsEnabled());\n \t\treturn xObj;\n@@ -113,7 +115,9 @@ protected RangerService mapEntityToViewBean(RangerService vObj, XXServiceBase xO\n \t\tvObj.setDescription(xObj.getDescription());\n \t\tvObj.setTagService(xTagService != null ? xTagService.getName() : null);\n \t\tvObj.setPolicyVersion(xObj.getPolicyVersion());\n+\t\tvObj.setTagVersion(xObj.getTagVersion());\n \t\tvObj.setPolicyUpdateTime(xObj.getPolicyUpdateTime());\n+\t\tvObj.setTagUpdateTime(xObj.getTagUpdateTime());\n \t\tvObj.setIsEnabled(xObj.getIsenabled());\n \t\treturn vObj;\n \t}",
                "raw_url": "https://github.com/apache/ranger/raw/f8bea62bccbca1eaf16083dec4cf1b43ac9b439d/security-admin/src/main/java/org/apache/ranger/service/RangerServiceServiceBase.java",
                "sha": "3cbeaf0bdfbc9aca20b44387a39fb1f970e1f1c0",
                "status": "modified"
            }
        ],
        "message": "RANGER-274: Fixed minor bugs, potential NPE, REST resource path. Fixed service creation\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/ranger/commit/5876e22723c3ba82c405efbb29d97fae28e189aa",
        "repo": "ranger",
        "unit_tests": [
            "TestRangerServiceServiceBase.java"
        ]
    }
}