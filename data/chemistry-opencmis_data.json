[{"commit": "https://github.com/apache/chemistry-opencmis/commit/cebe459f5d25d5d48de6a56cadc319d294c122d1", "parent": "https://github.com/apache/chemistry-opencmis/commit/76da412c16a0294635d38a4ee8f17d432724dfed", "message": "CMIS-958: Server: fix possible NPE in browser binding\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1715161 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/cebe459f5d25d5d48de6a56cadc319d294c122d1/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/ObjectService.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/cebe459f5d25d5d48de6a56cadc319d294c122d1/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/ObjectService.java", "sha": "2fba24daea7b36a78639eed24fe554e36f6326db", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/ObjectService.java?ref=cebe459f5d25d5d48de6a56cadc319d294c122d1", "patch": "@@ -492,7 +492,7 @@ public void serve(CallContext context, CmisService service, String repositoryId,\n             for (int i = 0; i < n; i++) {\n                 String id = objectIds.get(i);\n                 String changeToken = (changeTokens != null && changeTokens.size() > i ? changeTokens.get(i) : null);\n-                if (changeToken.length() == 0) {\n+                if (changeToken != null && changeToken.length() == 0) {\n                     changeToken = null;\n                 }\n                 objectIdAndChangeToken.add(new BulkUpdateObjectIdAndChangeTokenImpl(id, changeToken));", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/ObjectService.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/3f83e97ac546475a1bbadfdbbbd647b03a537834", "parent": "https://github.com/apache/chemistry-opencmis/commit/7cd6117f8ca12b68ac76ba700321934f9725110b", "message": "avoid unnecessary NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1693550 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_2", "file": [{"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/3f83e97ac546475a1bbadfdbbbd647b03a537834/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/shared/ThresholdOutputStream.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/3f83e97ac546475a1bbadfdbbbd647b03a537834/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/shared/ThresholdOutputStream.java", "sha": "d63adceaff0e29f8b8a8a1b6b80ecafd566f9cd9", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/shared/ThresholdOutputStream.java?ref=3f83e97ac546475a1bbadfdbbbd647b03a537834", "patch": "@@ -661,7 +661,8 @@ public int available() throws IOException {\n \n         @Override\n         public boolean markSupported() {\n-            return stream.markSupported();\n+            // always supported for a BufferedInputStream\n+            return true;\n         }\n \n         @Override", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/shared/ThresholdOutputStream.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/a3927589d161084d91fc3732183aa624cdf6ba5d", "parent": "https://github.com/apache/chemistry-opencmis/commit/9e41a920755379d82e99f4bf97cf38c544b450b8", "message": "Increase code robustness against NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1677604 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_3", "file": [{"additions": 78, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/BaseServiceValidatorImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/BaseServiceValidatorImpl.java", "sha": "829ae329a96ae7672d50542154fc0b9f8a750176", "changes": 118, "status": "modified", "deletions": 40, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/BaseServiceValidatorImpl.java?ref=a3927589d161084d91fc3732183aa624cdf6ba5d", "patch": "@@ -209,16 +209,26 @@ protected void checkCreatablePropertyTypes(String repositoryId,\n             Collection<PropertyDefinition<?>> propertyDefinitions) {\r\n         RepositoryInfo repositoryInfo = fStoreManager.getRepositoryInfo(repositoryId);\r\n         RepositoryCapabilities repositoryCapabilities = repositoryInfo.getCapabilities();\r\n+        if (null == repositoryCapabilities) {\r\n+        \treturn;\r\n+        }\r\n         CreatablePropertyTypes creatablePropertyTypes = repositoryCapabilities.getCreatablePropertyTypes();\r\n+        if (null == creatablePropertyTypes) {\r\n+        \treturn;\r\n+        }\r\n \r\n         Set<PropertyType> creatablePropertyTypeSet = creatablePropertyTypes.canCreate();\r\n+        if (null == creatablePropertyTypeSet) {\r\n+        \treturn;\r\n+        }\r\n+\r\n         for (PropertyDefinition<?> propertyDefinition : propertyDefinitions) {\r\n             if (!creatablePropertyTypeSet.contains(propertyDefinition.getPropertyType()))\r\n                 throw new CmisConstraintException(\"propertyDefinition \" + propertyDefinition.getId()\r\n                         + \"is of not creatable type \" + propertyDefinition.getPropertyType());\r\n \r\n             // mandatory properties must have a default value\r\n-            if (propertyDefinition.isRequired() && (propertyDefinition.getDefaultValue() == null)) {\r\n+            if (Boolean.TRUE.equals(propertyDefinition.isRequired()) && (propertyDefinition.getDefaultValue() == null)) {\r\n                 throw new CmisConstraintException(\"property: \" + propertyDefinition.getId()\r\n                         + \"required properties must have a default value\");\r\n             }\r\n@@ -233,97 +243,113 @@ protected void checkSettableAttributes(String repositoryId, TypeDefinition oldTy\n \r\n         if (null == newTypeSettableAttributes)\r\n             return; // no restrictions defined\r\n-        if (newTypeSettableAttributes.canSetControllableAcl() && newTypeSettableAttributes.canSetControllablePolicy()\r\n-                && newTypeSettableAttributes.canSetCreatable() && newTypeSettableAttributes.canSetDescription()\r\n-                && newTypeSettableAttributes.canSetDisplayName() && newTypeSettableAttributes.canSetFileable()\r\n-                && newTypeSettableAttributes.canSetFulltextIndexed() && newTypeSettableAttributes.canSetId()\r\n-                && newTypeSettableAttributes.canSetIncludedInSupertypeQuery()\r\n-                && newTypeSettableAttributes.canSetLocalName() && newTypeSettableAttributes.canSetLocalNamespace()\r\n-                && newTypeSettableAttributes.canSetQueryable() && newTypeSettableAttributes.canSetQueryName())\r\n+        if (Boolean.TRUE.equals( newTypeSettableAttributes.canSetControllableAcl())\r\n+        \t\t&& Boolean.TRUE.equals( newTypeSettableAttributes.canSetControllablePolicy())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetCreatable()) \r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetDescription())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetDisplayName()) \r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetFileable())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetFulltextIndexed()) \r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetId())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetIncludedInSupertypeQuery())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetLocalName()) \r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetLocalNamespace())\r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetQueryable()) \r\n+        \t\t&& Boolean.TRUE.equals(newTypeSettableAttributes.canSetQueryName()))\r\n             return; // all is allowed\r\n-        if (!newTypeSettableAttributes.canSetControllableAcl()\r\n-                && oldTypeDefinition.isControllableAcl() != newTypeDefinition.isControllableAcl())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetControllableAcl())\r\n+                && !isSameAs(oldTypeDefinition.isControllableAcl(), newTypeDefinition.isControllableAcl()))\r\n             throw new CmisConstraintException(\"controllableAcl is not settable in repository \" + repositoryId\r\n                     + \", but \" + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId()\r\n                     + \" differ in controllableAcl\");\r\n-        if (!newTypeSettableAttributes.canSetControllablePolicy()\r\n-                && oldTypeDefinition.isControllablePolicy() != newTypeDefinition.isControllablePolicy())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetControllablePolicy())\r\n+                && !isSameAs(oldTypeDefinition.isControllablePolicy(), newTypeDefinition.isControllablePolicy()))\r\n             throw new CmisConstraintException(\"controllablePolicy is not settable in repository \" + repositoryId\r\n                     + \", but \" + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId()\r\n                     + \" differ in controllablePolicy\");\r\n-        if (!newTypeSettableAttributes.canSetCreatable()\r\n-                && oldTypeDefinition.isCreatable() != newTypeDefinition.isCreatable())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetCreatable())\r\n+                && !isSameAs(oldTypeDefinition.isCreatable(), newTypeDefinition.isCreatable()))\r\n             throw new CmisConstraintException(\"isCreatable is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in isCreatable\");\r\n-        if (!newTypeSettableAttributes.canSetDescription()\r\n-                && !oldTypeDefinition.getDescription().equals(newTypeDefinition.getDescription()))\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetDescription())\r\n+                && !isSameAs(oldTypeDefinition.getDescription(), newTypeDefinition.getDescription()))\r\n             throw new CmisConstraintException(\"description is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their description\");\r\n-        if (!newTypeSettableAttributes.canSetDisplayName()\r\n-                && !oldTypeDefinition.getDisplayName().equals(newTypeDefinition.getDisplayName()))\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetDisplayName())\r\n+                && !isSameAs(oldTypeDefinition.getDisplayName(), newTypeDefinition.getDisplayName()))\r\n             throw new CmisConstraintException(\"displayName is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their displayName\");\r\n-        if (!newTypeSettableAttributes.canSetFileable()\r\n-                && oldTypeDefinition.isFileable() != newTypeDefinition.isFileable())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetFileable())\r\n+                && !isSameAs(oldTypeDefinition.isFileable(), newTypeDefinition.isFileable()))\r\n             throw new CmisConstraintException(\"fileable is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in isFileable\");\r\n-        if (!newTypeSettableAttributes.canSetFulltextIndexed()\r\n-                && oldTypeDefinition.isFulltextIndexed() != newTypeDefinition.isFulltextIndexed())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetFulltextIndexed())\r\n+                && !isSameAs(oldTypeDefinition.isFulltextIndexed(), newTypeDefinition.isFulltextIndexed()))\r\n             throw new CmisConstraintException(\"fulltextIndexed is not settable in repository \" + repositoryId\r\n                     + \", but \" + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId()\r\n                     + \" differ in isFulltextIndexed\");\r\n-        // TODO how can the ids differ?\r\n-        if (!newTypeSettableAttributes.canSetId() && oldTypeDefinition.getId() != newTypeDefinition.getId())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetId()) && !isSameAs(oldTypeDefinition.getId(), newTypeDefinition.getId()))\r\n             throw new CmisConstraintException(\"id is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their id\");\r\n-        if (!newTypeSettableAttributes.canSetIncludedInSupertypeQuery()\r\n-                && oldTypeDefinition.isIncludedInSupertypeQuery() != newTypeDefinition.isIncludedInSupertypeQuery())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetIncludedInSupertypeQuery())\r\n+                && !isSameAs(oldTypeDefinition.isIncludedInSupertypeQuery(), newTypeDefinition.isIncludedInSupertypeQuery()))\r\n             throw new CmisConstraintException(\"includedInSupertypeQuery is not settable in repository \" + repositoryId\r\n                     + \", but \" + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId()\r\n                     + \" differ in their isIncludedInSupertypeQuery\");\r\n-        if (!newTypeSettableAttributes.canSetLocalName()\r\n-                && !oldTypeDefinition.getLocalName().equals(newTypeDefinition.getLocalName()))\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetLocalName())\r\n+                && !isSameAs(oldTypeDefinition.getLocalName(), newTypeDefinition.getLocalName()))\r\n             throw new CmisConstraintException(\"localName is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their localName\");\r\n-        if (!newTypeSettableAttributes.canSetLocalNamespace()\r\n-                && !oldTypeDefinition.getLocalNamespace().equals(newTypeDefinition.getLocalNamespace()))\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetLocalNamespace())\r\n+                && !isSameAs(oldTypeDefinition.getLocalNamespace(), newTypeDefinition.getLocalNamespace()))\r\n             throw new CmisConstraintException(\"localNamespace is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId()\r\n                     + \" differ in their localNamespace\");\r\n-        if (!newTypeSettableAttributes.canSetQueryable()\r\n-                && oldTypeDefinition.isQueryable() != newTypeDefinition.isQueryable())\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetQueryable())\r\n+                && !isSameAs(oldTypeDefinition.isQueryable(), newTypeDefinition.isQueryable()))\r\n             throw new CmisConstraintException(\"queryable is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their isQueryable\");\r\n-        if (!newTypeSettableAttributes.canSetQueryName()\r\n-                && !oldTypeDefinition.getQueryName().equals(newTypeDefinition.getQueryName()))\r\n+        if (Boolean.FALSE.equals(newTypeSettableAttributes.canSetQueryName())\r\n+                && !isSameAs(oldTypeDefinition.getQueryName(), newTypeDefinition.getQueryName()))\r\n             throw new CmisConstraintException(\"queryName is not settable in repository \" + repositoryId + \", but \"\r\n                     + oldTypeDefinition.getId() + \" and \" + newTypeDefinition.getId() + \" differ in their queryName\");\r\n     }\r\n \r\n+    // returns true if both are null or equal, avoid NPE\r\n+    public static boolean isSameAs(Object object1, Object object2) {\r\n+        if (object1 == object2) {\r\n+            return true;\r\n+        }\r\n+        if ((object1 == null) || (object2 == null)) {\r\n+            return false;\r\n+        }\r\n+        return object1.equals(object2);\r\n+    }\r\n+  \r\n     protected void checkUpdatePropertyDefinitions(Map<String, PropertyDefinition<?>> oldPropertyDefinitions,\r\n             Map<String, PropertyDefinition<?>> newPropertyDefinitions) {\r\n         for (PropertyDefinition<?> newPropertyDefinition : newPropertyDefinitions.values()) {\r\n             PropertyDefinition<?> oldPropertyDefinition = oldPropertyDefinitions.get(newPropertyDefinition.getId());\r\n \r\n-            if (oldPropertyDefinition.isInherited())\r\n+            if (Boolean.TRUE.equals(oldPropertyDefinition.isInherited()))\r\n                 throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n                         + \" update of inherited properties is not allowed\");\r\n-            if (!(oldPropertyDefinition.isRequired()) && newPropertyDefinition.isRequired())\r\n+            if (!(Boolean.TRUE.equals(oldPropertyDefinition.isRequired())) && Boolean.TRUE.equals(newPropertyDefinition.isRequired()))\r\n                 throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n                         + \" optional properties must not be changed to required\");\r\n-            if (oldPropertyDefinition.getPropertyType() != newPropertyDefinition.getPropertyType())\r\n+            if (!isSameAs(oldPropertyDefinition.getPropertyType(), newPropertyDefinition.getPropertyType()))\r\n                 throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n                         + \" cannot update the propertyType (\" + oldPropertyDefinition.getPropertyType() + \")\");\r\n-            if (oldPropertyDefinition.getCardinality() != newPropertyDefinition.getCardinality())\r\n+            if (!isSameAs(oldPropertyDefinition.getCardinality(), newPropertyDefinition.getCardinality()))\r\n                 throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n                         + \" cannot update the cardinality (\" + oldPropertyDefinition.getCardinality() + \")\");\r\n \r\n-            if (oldPropertyDefinition.isOpenChoice() && !newPropertyDefinition.isOpenChoice())\r\n+            if (!isSameAs(oldPropertyDefinition.isOpenChoice(), newPropertyDefinition.isOpenChoice()))\r\n                 throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n                         + \" open choice cannot change from true to false\");\r\n \r\n             // check choices\r\n-            if (!oldPropertyDefinition.isOpenChoice()) {\r\n+            if (Boolean.FALSE.equals(oldPropertyDefinition.isOpenChoice())) {\r\n                 List<?> oldChoices = oldPropertyDefinition.getChoices();\r\n                 if (null == oldChoices)\r\n                     throw new CmisConstraintException(\"property: \" + oldPropertyDefinition.getId()\r\n@@ -409,6 +435,14 @@ protected void checkUpdatePropertyDefinitions(Map<String, PropertyDefinition<?>>\n     }\r\n \r\n     protected void checkUpdateType(TypeDefinition updateType, TypeDefinition type) {\r\n+    \tif (updateType.getId() == null) {\r\n+            throw new CmisConstraintException(\"type id cannot be null: \" + updateType.getDisplayName() + \", \"\r\n+                    + type.getId());\r\n+    \t}\r\n+    \tif (updateType.getBaseTypeId() == null) {\r\n+            throw new CmisConstraintException(\"type base id cannot be null: \" + updateType.getDisplayName() + \", \"\r\n+                    + type.getId());\r\n+    \t}\r\n         if (!updateType.getId().equals(type.getId()))\r\n             throw new CmisConstraintException(\"type to update must be of the same id: \" + updateType.getId() + \", \"\r\n                     + type.getId());\r\n@@ -433,6 +467,10 @@ protected TypeDefinition checkExistingTypeId(String repositoryId, String typeId)\n     }\r\n \r\n     protected void checkBasicType(TypeDefinition type) {\r\n+    \tif (type.getId() == null) {\r\n+            throw new CmisConstraintException(\"type id cannot be null: \" + type.getDisplayName() + \", \"\r\n+                    + type.getId());\r\n+    \t}\r\n         if (type.getId().equals(type.getBaseTypeId().value()))\r\n             throw new CmisInvalidArgumentException(\"type \" + type.getId()\r\n                     + \" is a basic type, basic types are read-only\");\r", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/BaseServiceValidatorImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/DocumentVersionImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/DocumentVersionImpl.java", "sha": "7ce6fde627e5b435f7d11f92c2edabae39ff3a73", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/DocumentVersionImpl.java?ref=a3927589d161084d91fc3732183aa624cdf6ba5d", "patch": "@@ -137,9 +137,9 @@ private boolean isLatestVersion() {\n \n         if (hasPwc) {\n             // CMIS 1.1 forbids it for PWC\n-            isLatestVersion = allVers.size() > 1 && allVers.get(allVers.size() - 2).equals(this);\n+            isLatestVersion = allVers.size() > 1 && allVers.get(allVers.size() - 2) == this;\n         } else {\n-            isLatestVersion = allVers.get(allVers.size() - 1).equals(this);\n+            isLatestVersion = allVers.get(allVers.size() - 1) == this;\n         }\n \n         return isLatestVersion;", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/DocumentVersionImpl.java"}, {"additions": 7, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-test/chemistry-opencmis-test-tools/src/main/java/org/apache/chemistry/opencmis/tools/mapper/PropertyMapperExif.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/a3927589d161084d91fc3732183aa624cdf6ba5d/chemistry-opencmis-test/chemistry-opencmis-test-tools/src/main/java/org/apache/chemistry/opencmis/tools/mapper/PropertyMapperExif.java", "sha": "35771f9e92493beac0298508bdeb3695a43cad73", "changes": 14, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-test/chemistry-opencmis-test-tools/src/main/java/org/apache/chemistry/opencmis/tools/mapper/PropertyMapperExif.java?ref=a3927589d161084d91fc3732183aa624cdf6ba5d", "patch": "@@ -163,7 +163,7 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n         String hexStr = getHexString(tag.getTagType());\n \n         // Handle all tags corresponding to their directory specifics\n-        if (GpsDirectory.class == dir.getClass()) {\n+        if (dir instanceof GpsDirectory) {\n             // first check for those tags that need special consideration:\n             if (GpsDirectory.TAG_GPS_LONGITUDE == tag.getTagType()) {\n                 Object ref = dir.getObject(GpsDirectory.TAG_GPS_LONGITUDE_REF);\n@@ -223,7 +223,7 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n                     LOG.error(\"Found a multi-value tag \" + tag + \": multi value not implemented\");\n                     return null;\n                 }\n-                if (clazz == Rational.class) {\n+                if (src instanceof Rational) {\n                     // expect a CMIS decimal property\n                     if (propType != PropertyType.DECIMAL) {\n                         throw new MapperException(\"Tag value has type Rational and expected CMIS Decimal, but found: \"\n@@ -243,15 +243,15 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n                         double d = ((Rational) src).doubleValue();\n                         res = d;\n                     }\n-                } else if (clazz == Integer.class) {\n+                } else if (src instanceof Integer) {\n                     if (propType != PropertyType.INTEGER) {\n                         throw new MapperException(\"Tag value has type Integer and expected CMIS Integer, but found: \"\n                                 + propType + \" for tag: \" + tag);\n                     }\n                     // convert to a long\n                     long l = ((Integer) src).longValue();\n                     res = l;\n-                } else if (clazz == String.class) {\n+                } else if (src instanceof String) {\n                     if (propType != PropertyType.STRING && propType != PropertyType.ID && propType != PropertyType.URI\n                             && propType != PropertyType.HTML && propType != PropertyType.DATETIME) {\n                         throw new MapperException(\"Tag value has type String and expected CMIS String, but found: \"\n@@ -279,7 +279,7 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n                         String s = (String) src;\n                         res = s;\n                     }\n-                } else if (clazz == Date.class) {\n+                } else if (src instanceof Date) {\n                     if (propType != PropertyType.DATETIME) {\n                         throw new MapperException(\"Tag value has type Date and expected CMIS DateTime, but found: \"\n                                 + propType + \" for tag: \" + tag);\n@@ -290,7 +290,7 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n                     GregorianCalendar cal = new GregorianCalendar();\n                     cal.setTime(date);\n                     res = cal;\n-                } else if (clazz == Boolean.class) {\n+                } else if (src instanceof Boolean) {\n                     if (propType != PropertyType.BOOLEAN) {\n                         throw new MapperException(\"Tag value has type Boolean and expected CMIS Boolean, but found: \"\n                                 + propType + \" for tag: \" + tag);\n@@ -317,7 +317,7 @@ public Object convertValue(Directory dir, Tag tag, PropertyType propType) {\n                 Object src = dir.getObject(tag.getTagType());\n                 Class<?> clazz = src.getClass();\n \n-                if (clazz == Integer.class) {\n+                if (src instanceof Integer) {\n                     if (propType != PropertyType.INTEGER) {\n                         throw new MapperException(\"Tag value has type Integer and expected CMIS Integer, but found: \"\n                                 + propType + \" for tag: \" + tag);", "filename": "chemistry-opencmis-test/chemistry-opencmis-test-tools/src/main/java/org/apache/chemistry/opencmis/tools/mapper/PropertyMapperExif.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/a16cbc9aa3f25fc1da6f0848c90b29c4c1d4b095", "parent": "https://github.com/apache/chemistry-opencmis/commit/c0e3fed36e344fcf071645543119c58dc372a1c5", "message": "InMemory: fix NPE in getCOntentChanges\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1588002 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_4", "file": [{"additions": 3, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/a16cbc9aa3f25fc1da6f0848c90b29c4c1d4b095/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryDiscoveryServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/a16cbc9aa3f25fc1da6f0848c90b29c4c1d4b095/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryDiscoveryServiceImpl.java", "sha": "8289ab20f4fd6e4e31843630844312c67ea07e7d", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryDiscoveryServiceImpl.java?ref=a16cbc9aa3f25fc1da6f0848c90b29c4c1d4b095", "patch": "@@ -81,6 +81,9 @@ public ObjectList getContentChanges(CallContext context, String repositoryId, Ho\n         long timestamp = System.currentTimeMillis() - 60 * 1000;\n         // convert ObjectInFolderContainerList to objectList\n         List<ObjectData> lod = new ArrayList<ObjectData>();\n+        if (null == maxItems) {\n+            maxItems = BigInteger.valueOf(ITEMS_AVAILABLE);\n+        }\n         int last = Math.min(ITEMS_AVAILABLE, token + maxItems.intValue());\n \n         for (int i = token; i < last; i++) {", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryDiscoveryServiceImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9", "parent": "https://github.com/apache/chemistry-opencmis/commit/90a4982d4f053d5c2c1d64455268d765f8ad9381", "message": "InMemory: Fix an NPE in bulkUpdateProperties when using AtomPub\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1459195 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_5", "file": [{"additions": 4, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "sha": "d9075e5801ba63c3aa868dc5bb34d9fa29c5a105", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java?ref=2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9", "patch": "@@ -788,17 +788,18 @@ public void appendContentStream(CallContext context, String repositoryId, Holder\n     \n     public List<BulkUpdateObjectIdAndChangeToken> bulkUpdateProperties(CallContext context, String repositoryId,\n             List<BulkUpdateObjectIdAndChangeToken> objectIdAndChangeToken, Properties properties,\n-            List<String> addSecondaryTypeIds, List<String> removeSecondaryTypeIds, ExtensionsData extension) {\n+            List<String> addSecondaryTypeIds, List<String> removeSecondaryTypeIds, ExtensionsData extension,\n+            ObjectInfoHandler objectInfos) {\n \n         List<BulkUpdateObjectIdAndChangeToken> result = new ArrayList<BulkUpdateObjectIdAndChangeToken>();\n         for ( BulkUpdateObjectIdAndChangeToken obj: objectIdAndChangeToken) {\n             Holder<String> objId = new Holder<String>(obj.getId());\n             Holder<String> changeToken = new Holder<String>(obj.getChangeToken());\n             try {\n-                updateProperties(context, repositoryId, objId, changeToken, properties, null, null, null);\n+                updateProperties(context, repositoryId, objId, changeToken, properties, null, null, objectInfos);\n                 result.add(new BulkUpdateObjectIdAndChangeTokenImpl(obj.getId(), changeToken.getValue()));\n             } catch (Exception e) {\n-                LOG.error(\"updating properties in bulk uapdate failed for object\" + obj.getId() + \": \", e);\n+                LOG.error(\"updating properties in bulk upadate failed for object\" + obj.getId() + \": \", e);\n             }\n         }\n         return result;", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryService.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryService.java", "sha": "b6a419c54bb908b5e5f2b0ead534ac7c7f4dc8a1", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryService.java?ref=2b2aa4a0b66bc80a87f4eeb07ce903b7679843d9", "patch": "@@ -338,7 +338,7 @@ public void appendContentStream(String repositoryId, Holder<String> objectId, Ho\n             List<BulkUpdateObjectIdAndChangeToken> objectIdAndChangeToken, Properties properties,\n             List<String> addSecondaryTypeIds, List<String> removeSecondaryTypeIds, ExtensionsData extension) {\n         return fObjSvc.bulkUpdateProperties(getCallContext(), repositoryId, objectIdAndChangeToken, properties,\n-                addSecondaryTypeIds, removeSecondaryTypeIds, extension);\n+                addSecondaryTypeIds, removeSecondaryTypeIds, extension, this);\n     }\n \n     // --- versioning service ---", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryService.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/56b9d7b0076790767a9e6ff66531661991613876", "parent": "https://github.com/apache/chemistry-opencmis/commit/d21080a221bbafac7a307d4bd94330c5d9d70b1e", "message": "InMemory: fix NPE when creating types without properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1457690 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_6", "file": [{"additions": 9, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/56b9d7b0076790767a9e6ff66531661991613876/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeValidator.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/56b9d7b0076790767a9e6ff66531661991613876/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeValidator.java", "sha": "4d21c2817ad0b401ddb8fc30191d051cb089ca0a", "changes": 16, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeValidator.java?ref=56b9d7b0076790767a9e6ff66531661991613876", "patch": "@@ -155,14 +155,16 @@ private static void completeAbstractTypeDefinition(AbstractTypeDefinition td) {\n         td.setTypeMutability(tm);\r\n         td.setExtensions(td.getExtensions());\r\n         \r\n-        Map<String, PropertyDefinition<?>> propDefsNew = new HashMap<String, PropertyDefinition<?>>();\r\n-        Map<String, PropertyDefinition<?>> propDefs = td.getPropertyDefinitions();\r\n-        for (PropertyDefinition<?> pd : propDefs.values()) {\r\n-            AbstractPropertyDefinition<?> pdNew = completePropertyDef(pd);\r\n-            adjustPropertyNamesAndId(pdNew);\r\n-            propDefsNew.put(pdNew.getId(), pd);\r\n+        if (null != td.getPropertyDefinitions()) {\r\n+            Map<String, PropertyDefinition<?>> propDefsNew = new HashMap<String, PropertyDefinition<?>>();\r\n+            Map<String, PropertyDefinition<?>> propDefs = td.getPropertyDefinitions();\r\n+            for (PropertyDefinition<?> pd : propDefs.values()) {\r\n+                AbstractPropertyDefinition<?> pdNew = completePropertyDef(pd);\r\n+                adjustPropertyNamesAndId(pdNew);\r\n+                propDefsNew.put(pdNew.getId(), pd);\r\n+            }\r\n+            td.setPropertyDefinitions(propDefsNew);\r\n         }\r\n-        td.setPropertyDefinitions(propDefsNew);\r\n     }\r\n \r\n     private static void checkProperties(TypeManager tm, Collection<PropertyDefinition<?>> pds) {\r", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeValidator.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/01f332e35f738a775febed24374c1c6090e0ead9", "parent": "https://github.com/apache/chemistry-opencmis/commit/9d4d6cb5ee56ea1701179f05811be4aff4825d7b", "message": "InMemory: Fix an NPE when creating types without properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1439182 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_7", "file": [{"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/01f332e35f738a775febed24374c1c6090e0ead9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/01f332e35f738a775febed24374c1c6090e0ead9/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java", "sha": "5c2d4be2d38c893c523d8f1e7f620becaae9632c", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java?ref=01f332e35f738a775febed24374c1c6090e0ead9", "patch": "@@ -153,7 +153,8 @@ public TypeDefinition createType(String repositoryId, TypeDefinition type, Exten\n             throw new CmisInvalidArgumentException(\"Unknown repository \" + repositoryId);\n         \n         TypeValidator.checkType(typeManager, type);\n-        TypeValidator.checkProperties(typeManager, type.getPropertyDefinitions().values());\n+        if (null != type.getPropertyDefinitions())\n+            TypeValidator.checkProperties(typeManager, type.getPropertyDefinitions().values());\n         \n         typeManager.addTypeDefinition(type);\n         return type;", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/e298d8cac1d916e34972e2f9d305a8a556e6cc2d", "parent": "https://github.com/apache/chemistry-opencmis/commit/aef805a9e9ce8b9af26daf4f26ae1f18b3ec036e", "message": "Workbench: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1389525 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_8", "file": [{"additions": 3, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/e298d8cac1d916e34972e2f9d305a8a556e6cc2d/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/model/ClientModel.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/e298d8cac1d916e34972e2f9d305a8a556e6cc2d/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/model/ClientModel.java", "sha": "8710939c3e53454deb9d903ff9b78addd20db242", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/model/ClientModel.java?ref=e298d8cac1d916e34972e2f9d305a8a556e6cc2d", "patch": "@@ -190,7 +190,9 @@ public synchronized ObjectId loadFolder(String folderId, boolean byPath) throws\n     }\n \n     public synchronized void reloadFolder() throws Exception {\n-        loadFolder(currentFolder.getId(), false);\n+        if (currentFolder != null) {\n+            loadFolder(currentFolder.getId(), false);\n+        }\n     }\n \n     public synchronized void loadObject(String objectId) throws Exception {", "filename": "chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/model/ClientModel.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/13193407a7bb4f798db0f73d21a4bdfd94e22ca0", "parent": "https://github.com/apache/chemistry-opencmis/commit/a366d0527d2cd587b79b30ee32465ea4b6f0c7ef", "message": "InMemrory: avoid NPE in query if types do not match\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1367759 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_9", "file": [{"additions": 9, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/13193407a7bb4f798db0f73d21a4bdfd94e22ca0/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/13193407a7bb4f798db0f73d21a4bdfd94e22ca0/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "sha": "cc2324be50880baa01d514a15a56ca7c6f13cfc4", "changes": 14, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java?ref=13193407a7bb4f798db0f73d21a4bdfd94e22ca0", "patch": "@@ -473,11 +473,15 @@ public Boolean walkLike(Tree opNode, Tree colNode, Tree stringNode) {\n \n             String propVal = (String) PropertyUtil.getProperty(so, colRef.getPropertyId(), pd);\n             \n-            String pattern = translatePattern((String) rVal); // SQL to Java\n-                                                              // regex\n-                                                              // syntax\n-            Pattern p = Pattern.compile(pattern);\n-            return p.matcher(propVal).matches();\n+            if (null == propVal) {\n+            \treturn false;\n+            } else {\n+            \tString pattern = translatePattern((String) rVal); // SQL to Java\n+            \t// regex\n+            \t// syntax\n+            \tPattern p = Pattern.compile(pattern);\n+            \treturn p.matcher(propVal).matches();\n+            }\n         }\n \n         @Override", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/ddc2e2475c9728039c6482032226290fcb536643", "parent": "https://github.com/apache/chemistry-opencmis/commit/198d19f4367bfe439a8db42de96da58826e92cba", "message": "Workbench: fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1325723 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_10", "file": [{"additions": 1, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/ddc2e2475c9728039c6482032226290fcb536643/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/ClientHelper.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/ddc2e2475c9728039c6482032226290fcb536643/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/ClientHelper.java", "sha": "3438bf993a27bc8726f2f014d98dda6a583b9d21", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/ClientHelper.java?ref=ddc2e2475c9728039c6482032226290fcb536643", "patch": "@@ -117,7 +117,7 @@ public static void showError(Component parent, Exception ex) {\n             exceptionName = ((CmisBaseException) ex).getExceptionName();\n         }\n \n-        StringBuilder sb = new StringBuilder(ex.getMessage());\n+        StringBuilder sb = new StringBuilder(ex.getMessage() == null ? \"null\" : ex.getMessage());\n \n         int width = 80;\n         while (sb.length() > width) {", "filename": "chemistry-opencmis-workbench/chemistry-opencmis-workbench/src/main/java/org/apache/chemistry/opencmis/workbench/ClientHelper.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/8f408d4b8a2cc40c50d0f9db0b0ac7ca71b966ee", "parent": "https://github.com/apache/chemistry-opencmis/commit/a642289d119e4944eee7c3e41967c0bd7760e6ca", "message": "Browser Binding: fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1245398 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_11", "file": [{"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/8f408d4b8a2cc40c50d0f9db0b0ac7ca71b966ee/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/BrowserBindingUtils.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/8f408d4b8a2cc40c50d0f9db0b0ac7ca71b966ee/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/BrowserBindingUtils.java", "sha": "417610d8b3538f0b910ff595467f0c8ee5ca2d0d", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/BrowserBindingUtils.java?ref=8f408d4b8a2cc40c50d0f9db0b0ac7ca71b966ee", "patch": "@@ -240,9 +240,9 @@ public static Properties createProperties(ControlParser controlParser, String ty\n \n             PropertyData<?> propertyData = null;\n \n-            if (singleValuePropertyMap.containsKey(i)) {\n+            if (singleValuePropertyMap != null && singleValuePropertyMap.containsKey(i)) {\n                 propertyData = createPropertyData(propDef, singleValuePropertyMap.get(i));\n-            } else if (multiValuePropertyMap.containsKey(i)) {\n+            } else if (multiValuePropertyMap != null && multiValuePropertyMap.containsKey(i)) {\n                 propertyData = createPropertyData(propDef, controlParser.getValues(Constants.CONTROL_PROP_VALUE, i));\n             } else {\n                 propertyData = createPropertyData(propDef, null);", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-bindings/src/main/java/org/apache/chemistry/opencmis/server/impl/browser/BrowserBindingUtils.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/5c54d15e29b2e589beb9220d297268b8b2ec830c", "parent": "https://github.com/apache/chemistry-opencmis/commit/86444d3e30b17614905a5bef6c09f0e190125f71", "message": "Fix NPE with query on system properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1200245 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_12", "file": [{"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/5c54d15e29b2e589beb9220d297268b8b2ec830c/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/5c54d15e29b2e589beb9220d297268b8b2ec830c/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "sha": "4a197c87c6c5ba11289df0c1d70840d603b93cd0", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java?ref=5c54d15e29b2e589beb9220d297268b8b2ec830c", "patch": "@@ -465,7 +465,8 @@ public Boolean walkLike(Tree opNode, Tree colNode, Tree stringNode) {\n                 throw new IllegalStateException(\"LIKE is not allowed for multi-value properties \");\n             }\n \n-            String propVal = (String) so.getProperties().get(colRef.getPropertyId()).getFirstValue();\n+            String propVal = (String) PropertyUtil.getProperty(so, colRef.getPropertyId());\n+            \n             String pattern = translatePattern((String) rVal); // SQL to Java\n                                                               // regex\n                                                               // syntax", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/86444d3e30b17614905a5bef6c09f0e190125f71", "parent": "https://github.com/apache/chemistry-opencmis/commit/c5bad00a675f717b1af1de4183501f9580eb92cc", "message": "fix NPE in InMemory implementation of setContentStream [CMIS-470]\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1199630 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_13", "file": [{"additions": 3, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/86444d3e30b17614905a5bef6c09f0e190125f71/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/86444d3e30b17614905a5bef6c09f0e190125f71/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "sha": "8c6e305275bdac29b04dc1c57258a4518fcc2061", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java?ref=86444d3e30b17614905a5bef6c09f0e190125f71", "patch": "@@ -534,6 +534,9 @@ public void setContentStream(CallContext context, String repositoryId, Holder<St\n \n         LOG.debug(\"start setContentStream()\");\n         Content content;\n+        if ( null == overwriteFlag ) {\n+            overwriteFlag = Boolean.TRUE;\n+        }\n \n         StoredObject so = validator.setContentStream(context, repositoryId, objectId, overwriteFlag, extension);\n ", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/95912e73f432d60ff19ab1cbc241486d8df93000", "parent": "https://github.com/apache/chemistry-opencmis/commit/7297b7f93dca95faf7c3c5372a4878181ed8980a", "message": "minor stuff: add logging, avoid an NPE, remove obsolete code\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1198902 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_14", "file": [{"additions": 5, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeManagerImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeManagerImpl.java", "sha": "512ef0ceb3f227edd8fd37fb07d4ca81a6268991", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeManagerImpl.java?ref=95912e73f432d60ff19ab1cbc241486d8df93000", "patch": "@@ -38,7 +38,8 @@\n import org.apache.chemistry.opencmis.inmemory.types.InMemoryFolderTypeDefinition;\n import org.apache.chemistry.opencmis.inmemory.types.InMemoryPolicyTypeDefinition;\n import org.apache.chemistry.opencmis.inmemory.types.InMemoryRelationshipTypeDefinition;\n-import org.apache.chemistry.opencmis.server.support.TypeManager;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n /**\n  * Class that manages a type system for a repository types can be added, the\n@@ -49,6 +50,7 @@\n  */\n public class TypeManagerImpl implements TypeManagerCreatable {\n \n+    private static final Log LOG = LogFactory.getLog(TypeManagerImpl.class.getName());\n     /**\n      * map from repository id to a types map\n      */\n@@ -159,6 +161,8 @@ public void addTypeDefinition(TypeDefinition cmisType) {\n         Map<String, PropertyDefinition<?>> propDefs = typeContainer.getTypeDefinition().getPropertyDefinitions();\n         addInheritedProperties(propDefs, parentTypeContainer.getTypeDefinition());\n \n+        LOG.info(\"Adding type definition with name \" + cmisType.getLocalName() + \" and id \" \n+                + cmisType.getId() + \" to repository.\");\n         // add type to type map\n         fTypesMap.put(cmisType.getId(), typeContainer);\n     }", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/TypeManagerImpl.java"}, {"additions": 7, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryServiceFactoryImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryServiceFactoryImpl.java", "sha": "3599d1964e4ca8c4ffeae7317046d5fd95613b5c", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryServiceFactoryImpl.java?ref=95912e73f432d60ff19ab1cbc241486d8df93000", "patch": "@@ -23,6 +23,7 @@\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -35,9 +36,11 @@\n import javax.xml.bind.Unmarshaller;\n \n import org.apache.chemistry.opencmis.commons.data.RepositoryInfo;\n+import org.apache.chemistry.opencmis.commons.definitions.PropertyDefinition;\n import org.apache.chemistry.opencmis.commons.definitions.TypeDefinition;\n import org.apache.chemistry.opencmis.commons.enums.BaseTypeId;\n import org.apache.chemistry.opencmis.commons.impl.Converter;\n+import org.apache.chemistry.opencmis.commons.impl.dataobjects.AbstractTypeDefinition;\n import org.apache.chemistry.opencmis.commons.impl.dataobjects.BindingsObjectFactoryImpl;\n import org.apache.chemistry.opencmis.commons.impl.jaxb.CmisTypeDefinitionType;\n import org.apache.chemistry.opencmis.commons.impl.server.AbstractServiceFactory;\n@@ -211,7 +214,11 @@ private void importTypesFromFile(TypeManagerCreatable tmc, String typeDefsFileNa\n             Unmarshaller u = InMemoryJaxbHelper.createUnmarshaller();\n             JAXBElement<TypeDefinitions> types = (JAXBElement<TypeDefinitions>) u.unmarshal(is);\n             for (CmisTypeDefinitionType td: types.getValue().getTypeDefinitions()) {\n+                LOG.debug(\"Found type in file: \" + td.getLocalName());\n                 typeDef = Converter.convert(td);\n+                if (typeDef.getPropertyDefinitions() == null) {\n+                    ((AbstractTypeDefinition)typeDef).setPropertyDefinitions( new LinkedHashMap<String, PropertyDefinition<?>>());\n+                }\n                 tmc.addTypeDefinition(typeDef);\n             }\n         } catch (Exception e) {", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryServiceFactoryImpl.java"}, {"additions": 0, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/StoreManagerImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/95912e73f432d60ff19ab1cbc241486d8df93000/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/StoreManagerImpl.java", "sha": "430d6b599756cd753fa881feeef9786c719bab4f", "changes": 39, "status": "modified", "deletions": 39, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/StoreManagerImpl.java?ref=95912e73f432d60ff19ab1cbc241486d8df93000", "patch": "@@ -319,45 +319,6 @@ private void initTypeSystem(String repositoryId, String typeCreatorClassName) {\n         typeManager.initTypeSystem(typeDefs);\n     }\n \n-    private void initTypeSystemNOP(String repositoryId, String fileName) {\n-        TypeManagerImpl typeManager = fMapRepositoryToTypeManager.get(repositoryId);\n-        if (null == typeManager) {\n-            throw new RuntimeException(\"Unknown repository \" + repositoryId);\n-        }\n-\n-        if (null == fileName) {\n-            LOG.warn(\"No file name for type definitions given, no types will be created.\");\n-            typeManager.initTypeSystem(null);\n-            return;\n-        }\n-\n-        InputStream is = this.getClass().getResourceAsStream(\"/\" + fileName);\n-\n-        List<TypeDefinition> typeDefs = new  ArrayList<TypeDefinition>();\n-        TypeDefinition typeDef = null;\n-        if (null == is) {\n-            LOG.warn(\"Resource file with type definitions \" + fileName\n-                    + \" could not be found, no types will be created.\");\n-            return;\n-        }\n-\n-        try {\n-            Unmarshaller u = InMemoryJaxbHelper.createUnmarshaller();\n-//            JAXBElement<CmisTypeDefinitionType> type = (JAXBElement<CmisTypeDefinitionType>) u.unmarshal(is);\n-//            typeDef = Converter.convert(type.getValue());\n-            JAXBElement<TypeDefinitions> types = (JAXBElement<TypeDefinitions>) u.unmarshal(is);\n-            for (CmisTypeDefinitionType td: types.getValue().getTypeDefinitions()) {\n-                typeDef = Converter.convert(td);\n-                typeDefs.add(typeDef);\n-            }\n-\n-        } catch (Exception e) {\n-            LOG.error(\"Could not load type definitions from file '\" + fileName + \"': \" + e);\n-        }\n-\n-        typeManager.initTypeSystem(typeDefs);\n-    }\n-\n     private RepositoryInfo createRepositoryInfo(String repositoryId) {\n         ObjectStore objStore = getObjectStore(repositoryId);\n         String rootFolderId = objStore.getRootFolder().getId();", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/StoreManagerImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/f92d15db2e501c4a41fa40d766a0e389879bae0e", "parent": "https://github.com/apache/chemistry-opencmis/commit/efbfa7daf17c4e1012b8812a5e07b4b4594069c4", "message": "fix an NPE in createDocumentFromSource\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1185883 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_15", "file": [{"additions": 6, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/f92d15db2e501c4a41fa40d766a0e389879bae0e/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/f92d15db2e501c4a41fa40d766a0e389879bae0e/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java", "sha": "6edd2c8752b5e1bb5316dd9da345a1fea8321025", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java?ref=f92d15db2e501c4a41fa40d766a0e389879bae0e", "patch": "@@ -133,10 +133,12 @@ public String createDocumentFromSource(CallContext context, String repositoryId,\n         for (PropertyData<?> prop : existingProps.getProperties().values()) {\n             newPD.addProperty(prop);\n         }\n-        // overwrite all new properties\n-        for (PropertyData<?> prop : properties.getProperties().values()) {\n-            newPD.addProperty(prop);\n-        }\n+        \n+        if (null != properties)\n+            // overwrite all new properties\n+            for (PropertyData<?> prop : properties.getProperties().values()) {\n+                newPD.addProperty(prop);\n+            }\n \n         String res = createDocument(context, repositoryId, newPD, folderId, content, versioningState, policies,\n                 addAces, removeAces, null);", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryObjectServiceImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/b9ca0f7af6bbdb5dc0a3998b93db4c90a320f72c", "parent": "https://github.com/apache/chemistry-opencmis/commit/3e3e88b0b06084019335fe490d65b64307de4f8b", "message": "small fix: prevent NPE in converter if ACL is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1073115 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_16", "file": [{"additions": 3, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/b9ca0f7af6bbdb5dc0a3998b93db4c90a320f72c/chemistry-opencmis-commons/chemistry-opencmis-commons-impl/src/main/java/org/apache/chemistry/opencmis/commons/impl/Converter.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/b9ca0f7af6bbdb5dc0a3998b93db4c90a320f72c/chemistry-opencmis-commons/chemistry-opencmis-commons-impl/src/main/java/org/apache/chemistry/opencmis/commons/impl/Converter.java", "sha": "aa293d77f3c5f2d452c6f2f520f2252cf41cc42f", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-commons/chemistry-opencmis-commons-impl/src/main/java/org/apache/chemistry/opencmis/commons/impl/Converter.java?ref=b9ca0f7af6bbdb5dc0a3998b93db4c90a320f72c", "patch": "@@ -2268,6 +2268,9 @@ public static CmisObjectInFolderContainerType convert(ObjectInFolderContainer co\n      * Converts an access control list object.\n      */\n     public static Acl convert(CmisACLType acl) {\n+        if (acl == null)\n+            return null;\n+        \n         Acl result = convert(acl.getACL(), acl.isExact());\n \n         // handle extensions", "filename": "chemistry-opencmis-commons/chemistry-opencmis-commons-impl/src/main/java/org/apache/chemistry/opencmis/commons/impl/Converter.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/08637782730ab3108c5b304aaa09fae720a87b3f", "parent": "https://github.com/apache/chemistry-opencmis/commit/89424ccdee23fbee0adb0cbd323fea91703bc648", "message": "Avoid NPE if includePropertyDefinitions is null in getType... calls\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/chemistry/opencmis/trunk@999789 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_17", "file": [{"additions": 6, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/08637782730ab3108c5b304aaa09fae720a87b3f/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/08637782730ab3108c5b304aaa09fae720a87b3f/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java", "sha": "0ba06c766d1be6702f847174fdd5a098d1f7489d", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java?ref=08637782730ab3108c5b304aaa09fae720a87b3f", "patch": "@@ -61,6 +61,7 @@ public RepositoryInfo getRepositoryInfo(CallContext context, String repositoryId\n     public TypeDefinitionList getTypeChildren(CallContext context, String repositoryId, String typeId,\n             Boolean includePropertyDefinitions, BigInteger maxItems, BigInteger skipCount, ExtensionsData extension) {\n \n+        boolean inclPropDefs = includePropertyDefinitions == null ? false : includePropertyDefinitions;\n         getRepositoryInfoFromStoreManager(repositoryId); // just to check if\n         // repository\n         // exists\n@@ -75,7 +76,7 @@ public TypeDefinitionList getTypeChildren(CallContext context, String repository\n             children = fStoreManager.getRootTypes(repositoryId);\n         } else {\n             children = getTypeDescendants(context, repositoryId, typeId, BigInteger.valueOf(1),\n-                    includePropertyDefinitions, null);\n+                    inclPropDefs, null);\n         }\n         result.setNumItems(BigInteger.valueOf(children.size()));\n         result.setHasMoreItems(children.size() > max - skip);\n@@ -110,18 +111,19 @@ public TypeDefinition getTypeDefinition(CallContext context, String repositoryId\n         getRepositoryInfoFromStoreManager(repositoryId); // just to check if\n         // repository\n         // exists\n-\n+        boolean inclPropDefs = includePropertyDefinitions == null ? false : includePropertyDefinitions;\n+        \n         if (depth != null && depth.intValue() == 0)\n             throw new CmisInvalidArgumentException(\"depth == 0 is illegal in getTypeDescendants\");\n \n         List<TypeDefinitionContainer> result = null;\n         if (typeId == null) {\n             // spec says that depth must be ignored in this case\n             Collection<TypeDefinitionContainer> tmp = fStoreManager.getTypeDefinitionList(repositoryId,\n-                    includePropertyDefinitions);\n+                    inclPropDefs);\n             result = new ArrayList<TypeDefinitionContainer>(tmp);\n         } else {\n-            TypeDefinitionContainer tc = fStoreManager.getTypeById(repositoryId, typeId, includePropertyDefinitions,\n+            TypeDefinitionContainer tc = fStoreManager.getTypeById(repositoryId, typeId, inclPropDefs,\n                     depth == null ? -1 : depth.intValue());\n             if (tc == null)\n                 throw new CmisInvalidArgumentException(\"unknown type id: \" + typeId);", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/server/InMemoryRepositoryServiceImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/c7277d2f9e3ef45e662c553d24071313669e86da", "parent": "https://github.com/apache/chemistry-opencmis/commit/a5e6d880a2f9bd79191494e97c7a27ef58f49537", "message": "fixed CMIS-221: NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/chemistry/opencmis/trunk@955635 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_18", "file": [{"additions": 1, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/c7277d2f9e3ef45e662c553d24071313669e86da/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/PersistentDocumentImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/c7277d2f9e3ef45e662c553d24071313669e86da/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/PersistentDocumentImpl.java", "sha": "1529401b1afcddc42986d9bd7cc455beebefdf7a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/PersistentDocumentImpl.java?ref=c7277d2f9e3ef45e662c553d24071313669e86da", "patch": "@@ -255,7 +255,7 @@ public ObjectId checkIn(boolean major, Map<String, ?> properties, ContentStream\n      * org.apache.opencmis.client.api.Document#getObjectOfLatestVersion(boolean)\r\n      */\r\n     public Document getObjectOfLatestVersion(boolean major) {\r\n-        return getObjectOfLatestVersion(major, null);\r\n+        return getObjectOfLatestVersion(major, getSession().getDefaultContext());\r\n     }\r\n \r\n     /*\r", "filename": "chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/PersistentDocumentImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/0043ae0c1c842e82ca57fd2484221c8be3318d61", "parent": "https://github.com/apache/chemistry-opencmis/commit/2e88bc40bf1938cb2902685a7676d2dff56528b4", "message": "Client: fixed a potential NPE when connected to an incompliant server\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1672013 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_19", "file": [{"additions": 4, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/0043ae0c1c842e82ca57fd2484221c8be3318d61/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/AbstractFilableCmisObject.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/0043ae0c1c842e82ca57fd2484221c8be3318d61/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/AbstractFilableCmisObject.java", "sha": "0e37e5622b3339cd8f9b190ec783d819ae88ba3c", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/AbstractFilableCmisObject.java?ref=0043ae0c1c842e82ca57fd2484221c8be3318d61", "patch": "@@ -117,6 +117,10 @@\n             }\n \n             String folderPath = ((String) pathProperty.getFirstValue());\n+            if (folderPath == null) {\n+                // the repository sent a folder without a valid path...\n+                throw new CmisRuntimeException(\"Repository sent invalid data! No path property value!\");\n+            }\n             paths.add(folderPath + (folderPath.endsWith(\"/\") ? \"\" : \"/\") + p.getRelativePathSegment());\n         }\n ", "filename": "chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/AbstractFilableCmisObject.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/7fa7d11a536c07ea1fdd3ad10a2c40a75cb161a7", "parent": "https://github.com/apache/chemistry-opencmis/commit/a1d9c73c6a5e53dc4fa463f518d2e4d8c5e9bd79", "message": "server-support: upgrade maven antlr plugin to avoid NPE with Java8\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1643999 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/7fa7d11a536c07ea1fdd3ad10a2c40a75cb161a7/chemistry-opencmis-server/chemistry-opencmis-server-support/pom.xml", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/7fa7d11a536c07ea1fdd3ad10a2c40a75cb161a7/chemistry-opencmis-server/chemistry-opencmis-server-support/pom.xml", "sha": "5eb6c3f878f0ecde5a4dd5b8bf7534c456680ee1", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-support/pom.xml?ref=7fa7d11a536c07ea1fdd3ad10a2c40a75cb161a7", "patch": "@@ -73,7 +73,7 @@\n             <plugin>\n                 <groupId>org.antlr</groupId>\n                 <artifactId>antlr3-maven-plugin</artifactId>\n-                <version>3.5</version>\n+                <version>3.5.2</version>\n                 <configuration>\n                     <excludes>\n                         <exclude>**/CmisBase*.g</exclude>", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-support/pom.xml"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/1331f4bad4f0b51e960bab93c5f69bcaf83df33b", "parent": "https://github.com/apache/chemistry-opencmis/commit/bf66ff6334e6566db56c9bacd4c359054b19ee28", "message": "Avoid NPE in TypeValidator when verifying properties and no type id is given\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1576870 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_21", "file": [{"additions": 6, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/1331f4bad4f0b51e960bab93c5f69bcaf83df33b/chemistry-opencmis-server/chemistry-opencmis-server-support/src/main/java/org/apache/chemistry/opencmis/server/support/TypeValidator.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/1331f4bad4f0b51e960bab93c5f69bcaf83df33b/chemistry-opencmis-server/chemistry-opencmis-server-support/src/main/java/org/apache/chemistry/opencmis/server/support/TypeValidator.java", "sha": "a280955e287ed4b4766991ce81ebc0b8dd2d93bb", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-support/src/main/java/org/apache/chemistry/opencmis/server/support/TypeValidator.java?ref=1331f4bad4f0b51e960bab93c5f69bcaf83df33b", "patch": "@@ -255,6 +255,9 @@ public void validate(PropertyDefinition<String> propDef, PropertyData<String> pr\n         if (properties != null) {\n             for (PropertyData<?> prop : properties.getProperties().values()) {\n                 String propertyId = prop.getId();\n+                if (null == propertyId) {\n+                    throw new CmisInvalidArgumentException(\"Property id cannot be null\");\n+                }                \n                 BaseTypeId baseTypeId = typeDef.getBaseTypeId();\n \n                 // check that all mandatory attributes are present\n@@ -300,6 +303,9 @@ public void validate(PropertyDefinition<String> propDef, PropertyData<String> pr\n \n             for (PropertyData<?> prop : properties.getProperties().values()) {\n                 String propertyId = prop.getId();\n+                if (null == propertyId) {\n+                    throw new CmisInvalidArgumentException(\"Property id cannot be null\");\n+                }\n                 BaseTypeId baseTypeId = typeDef.getBaseTypeId();\n \n                 // check that all mandatory attributes are present", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-support/src/main/java/org/apache/chemistry/opencmis/server/support/TypeValidator.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/5540f52d1842608fd15b59e22ff00c796de3a395", "parent": "https://github.com/apache/chemistry-opencmis/commit/5575fa710a08db06eda105a23d3da15d065cdd59", "message": "Fix NPE in order by on a system property for query [CMIS-510]\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1294498 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_22", "file": [{"additions": 5, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/5540f52d1842608fd15b59e22ff00c796de3a395/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/5540f52d1842608fd15b59e22ff00c796de3a395/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java", "sha": "d56aa3160c62c8c3fdbb2c1eea6c780db059f6ab", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java?ref=5540f52d1842608fd15b59e22ff00c796de3a395", "patch": "@@ -183,8 +183,11 @@ public int compare(StoredObject so1, StoredObject so2) {\n \n                 if (sel instanceof ColumnReference) {\n                     String propId = ((ColumnReference) sel).getPropertyId();\n-                    Object propVal1 = so1.getProperties().get(propId).getFirstValue();\n-                    Object propVal2 = so2.getProperties().get(propId).getFirstValue();\n+                    PropertyDefinition<?> pd = ((ColumnReference) sel).getPropertyDefinition();\n+                    \n+                    Object propVal1 = PropertyUtil.getProperty(so1, propId, pd);\n+                    Object propVal2 = PropertyUtil.getProperty(so2, propId, pd);\n+\n                     if (propVal1 == null && propVal2 == null) {\n                         result = 0;\n                     } else if (propVal1 == null) {", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/query/InMemoryQueryProcessor.java"}, {"additions": 13, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/5540f52d1842608fd15b59e22ff00c796de3a395/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/query/EvalQueryTest.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/5540f52d1842608fd15b59e22ff00c796de3a395/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/query/EvalQueryTest.java", "sha": "8c97ee3bbfe7724d32cfb850ef8c4addde6b96e4", "changes": 14, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/query/EvalQueryTest.java?ref=5540f52d1842608fd15b59e22ff00c796de3a395", "patch": "@@ -473,7 +473,19 @@ public void testOrderByBool() {\n         assertTrue(resultContainsAtPos(\"alpha\", 2, res) || resultContainsAtPos(\"alpha\", 1, res) || resultContainsAtPos(\"alpha\", 0, res));\n         assertTrue(resultContainsAtPos(\"gamma\", 2, res) || resultContainsAtPos(\"gamma\", 1, res) || resultContainsAtPos(\"gamma\", 0, res));\n         assertTrue(resultContainsAtPos(\"delta\", 2, res) || resultContainsAtPos(\"delta\", 1, res) || resultContainsAtPos(\"delta\", 0, res));\n-}\n+    }\n+    \n+    // reported JIRA issue CMIS-510\n+    @Test\n+    public void testOrderBySystemProperties() {\n+        String statement = \"SELECT * from cmis:document ORDER BY \"+ PropertyIds.NAME;\n+        ObjectList res = doQuery(statement);\n+        assertEquals(5, res.getObjects().size());\n+        statement = \"SELECT * from cmis:document ORDER BY \" + PropertyIds.CREATION_DATE + \" ASC\";\n+        assertEquals(5, res.getObjects().size());\n+        statement = \"SELECT * from cmis:document ORDER BY \" + PropertyIds.LAST_MODIFICATION_DATE + \" DESC\";\n+        assertEquals(5, res.getObjects().size());\n+    }\n \n     @Test\n     public void testIsNull() {", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/query/EvalQueryTest.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89", "parent": "https://github.com/apache/chemistry-opencmis/commit/5b81d441d222d259a95648aa4bc8c7e1a6f81891", "message": "avoid NPE when creating unfiled documents as non-admin users, improve unit test [CMIS-490]\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1222640 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_23", "file": [{"additions": 2, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/InMemoryServiceValidatorImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/InMemoryServiceValidatorImpl.java", "sha": "7133fe51d1b900333079e2226871102b453ce2f5", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/InMemoryServiceValidatorImpl.java?ref=f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89", "patch": "@@ -211,7 +211,8 @@ public StoredObject createDocument(CallContext context, String repositoryId, Str\n             ExtensionsData extension) {\r\n \r\n         StoredObject folder = super.createDocument(context, repositoryId, folderId, extension);\r\n-        checkWriteAccess(repositoryId, context.getUsername(), folder);\r\n+        if (null != folder) // not if unfiled\r\n+            checkWriteAccess(repositoryId, context.getUsername(), folder);\r\n         return folder;\r\n     }\r\n \r", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/storedobj/impl/InMemoryServiceValidatorImpl.java"}, {"additions": 12, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/MultiFilingTest.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/MultiFilingTest.java", "sha": "1bbf99b97d82fd6022ac0d444bc4cbbae1add280", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/MultiFilingTest.java?ref=f2fcdf03048114af7bfd9cd6ebdf74c3372ebb89", "patch": "@@ -38,6 +38,7 @@\n import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n import org.apache.chemistry.opencmis.commons.exceptions.CmisNameConstraintViolationException;\n import org.apache.chemistry.opencmis.commons.exceptions.CmisNotSupportedException;\n+import org.apache.chemistry.opencmis.commons.server.CallContext;\n import org.apache.chemistry.opencmis.commons.spi.Holder;\n import org.apache.chemistry.opencmis.inmemory.types.InMemoryFolderTypeDefinition;\n import org.apache.commons.logging.Log;\n@@ -83,6 +84,12 @@ public void testCreateUnfiledDocument() {\n \n         assertNotNull(res);\n         assertEquals(res.size(), 0);\n+        \n+        // test with a different user than Admin:\n+        switchCallContext(\"Alice\");\n+        docId = createDocument(UNFILED_DOC_NAME + \"_2\", null, DOCUMENT_TYPE_ID, true);\n+        docId2 = getDocument(docId);\n+        assertEquals(docId, docId2);\n \n         LOG.debug(\"End testCreatUnfiledDocument()\");\n     }\n@@ -285,4 +292,9 @@ private String createVersionedDocument() {\n                 VersioningState.MAJOR, true);\n \n     }\n+\n+    private void switchCallContext(String user) {\n+        ((DummyCallContext) fTestCallContext).put(CallContext.USERNAME, user);\n+    }\n+\n }", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/MultiFilingTest.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/cd5d9619b63f27d50069c7f697b4962e8f729dff", "parent": "https://github.com/apache/chemistry-opencmis/commit/b94eac82b138de4c8336127c862d91d373e23d6b", "message": "Fix NPE in InMemoryRepository if no objectId is in property filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/chemistry/opencmis/trunk@1035689 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_24", "file": [{"additions": 10, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/cd5d9619b63f27d50069c7f697b4962e8f729dff/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/FilterParser.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/cd5d9619b63f27d50069c7f697b4962e8f729dff/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/FilterParser.java", "sha": "b7cf6bbfa1e1d118648cac19700f34b278bff941", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/FilterParser.java?ref=cd5d9619b63f27d50069c7f697b4962e8f729dff", "patch": "@@ -22,10 +22,13 @@\n  * @author Jens\n  */\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+\n public class FilterParser {\n \n     public static boolean isContainedInFilter(String propertyId, List<String> requestedIds) {\n@@ -41,6 +44,13 @@ public static boolean isContainedInFilter(String propertyId, List<String> reques\n             List<String> requestedIds = Arrays.asList(filter.split(\",\\\\s*\")); // comma\n             // plus\n             // whitespace\n+            \n+            // add object id because this is always needed in AtomPub binding:\n+            if (!(requestedIds.contains(PropertyIds.OBJECT_ID))) {\n+                requestedIds = new ArrayList<String>(requestedIds); // copy immutable list\n+                requestedIds.add(PropertyIds.OBJECT_ID);\n+            }\n+            \n             if (requestedIds.contains(\"*\"))\n                 requestedIds = Collections.singletonList(\"*\");\n             return requestedIds;", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/main/java/org/apache/chemistry/opencmis/inmemory/FilterParser.java"}, {"additions": 27, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/cd5d9619b63f27d50069c7f697b4962e8f729dff/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/ObjectServiceTest.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/cd5d9619b63f27d50069c7f697b4962e8f729dff/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/ObjectServiceTest.java", "sha": "aee534d44bfc2fe57a1157d7acf527297aff58bb", "changes": 33, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/ObjectServiceTest.java?ref=cd5d9619b63f27d50069c7f697b4962e8f729dff", "patch": "@@ -842,6 +842,23 @@ public void testDefaultPropertiesFolder() {\n         log.info(\"... testDefaultPropertiesFolder() finished.\");\n     }\n \n+    @Test\n+    public void testGetObjectNoObjectIdInFilter() {\n+        log.info(\"starting testGetObjectNoObjectIdInFilter() ...\");\n+        log.info(\"  creating object\");\n+        String id = createDocument(fRootFolderId, false);\n+        if (id != null)\n+            log.info(\"  createDocument succeeded with created id: \" + id);\n+\n+        log.info(\"  getting object\");\n+        String filter = PropertyIds.NAME + \",\" + PropertyIds.CREATION_DATE + \",\" + PropertyIds.LAST_MODIFICATION_DATE;\n+        ObjectData res = fObjSvc.getObject(fRepositoryId, id, filter, false, IncludeRelationships.NONE, null, false, false, null);\n+\n+        String returnedId = res.getId();\n+        assertEquals(id, returnedId);\n+        log.info(\"... testGetObjectNoObjectIdInFilter() finished.\");\n+    }\n+\n     private void verifyAllowableActionsDocument(Set<Action> actions, boolean isVersioned, boolean hasContent) {\n         assertTrue(actions.contains(Action.CAN_DELETE_OBJECT));\n         assertTrue(actions.contains(Action.CAN_UPDATE_PROPERTIES));\n@@ -979,11 +996,15 @@ private void testReturnedProperties(String objectId, String objectName, String t\n             Map<String, PropertyData<?>> props) {\n         super.testReturnedProperties(objectId, props);\n \n-        PropertyData<?> pd = props.get(PropertyIds.NAME);\n-        assertNotNull(pd);\n-        assertEquals(objectName, pd.getFirstValue());\n-        pd = props.get(PropertyIds.OBJECT_TYPE_ID);\n-        assertEquals(typeId, pd.getFirstValue());\n+        if (null != objectName) {\n+            PropertyData<?> pd = props.get(PropertyIds.NAME);\n+            assertNotNull(pd);\n+            assertEquals(objectName, pd.getFirstValue());\n+        }\n+        if (null != typeId) {\n+            PropertyData<?> pd = props.get(PropertyIds.OBJECT_TYPE_ID);\n+            assertEquals(typeId, pd.getFirstValue());\n+        }\n     }\n \n     private String createDocumentWithCustomType(String folderId, boolean withContent) {\n@@ -1198,5 +1219,5 @@ private static InMemoryFolderTypeDefinition createFolderTypeWithDefault() {\n             return cmisFolderType;\n         }\n     }\n-\n+    \n }", "filename": "chemistry-opencmis-server/chemistry-opencmis-server-inmemory/src/test/java/org/apache/chemistry/opencmis/inmemory/ObjectServiceTest.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/1a9ac20d017acbb06c39d1c7a9bcdff8f79054ab", "parent": "https://github.com/apache/chemistry-opencmis/commit/5ee8c191a697edf5b474a8bc2a32bb2fc7341b15", "message": "Avoid NPE if children list of a folder is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/chemistry/trunk/opencmis@928744 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_25", "file": [{"additions": 10, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/1a9ac20d017acbb06c39d1c7a9bcdff8f79054ab/opencmis-server/opencmis-server-support/src/main/java/org/apache/opencmis/server/support/ObjectInfoHelper.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/1a9ac20d017acbb06c39d1c7a9bcdff8f79054ab/opencmis-server/opencmis-server-support/src/main/java/org/apache/opencmis/server/support/ObjectInfoHelper.java", "sha": "5671c66818b0ec1859f6220bbd9d982c338b2f07", "changes": 20, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/opencmis-server/opencmis-server-support/src/main/java/org/apache/opencmis/server/support/ObjectInfoHelper.java?ref=1a9ac20d017acbb06c39d1c7a9bcdff8f79054ab", "patch": "@@ -348,7 +348,7 @@ public void fillObjectInfoHolder(\n         ObjectInFolderList objList,\r\n         ObjectInfoHolder objectInfos)\r\n     {\r\n-        if (null == objectInfos || null == objList)\r\n+        if (null == objectInfos || null == objList || objList.getObjects() == null)\r\n             return;\r\n \r\n         // Fill object information for all children in result list\r\n@@ -405,7 +405,6 @@ public void fillObjectInfoHolderFolderContainer(\n     {\r\n         if (null == objectInfos || null == oifcList)\r\n             return;\r\n-\r\n           \r\n         for (ObjectInFolderContainer object : oifcList) {\r\n             fillObjectInfoHolderFolderContainer(context, repositoryId, object, objectInfos);\r\n@@ -418,16 +417,17 @@ private void fillObjectInfoHolderFolderContainer(\n         ObjectInFolderContainer oifc,\r\n         ObjectInfoHolder objectInfos)\r\n     {\r\n-        if (null == objectInfos || null == oifc)\r\n-            return;\r\n+      if (null == objectInfos || null == oifc || oifc.getObject() == null\r\n+          || oifc.getObject().getObject() == null)\r\n+        return;\r\n \r\n-        fillObjectInfoHolder(context, repositoryId, oifc.getObject().getObject(), objectInfos);\r\n+      fillObjectInfoHolder(context, repositoryId, oifc.getObject().getObject(), objectInfos);\r\n \r\n-        if (null!=oifc.getChildren())\r\n-            for (ObjectInFolderContainer object : oifc.getChildren()) {\r\n-                // call recursively\r\n-                fillObjectInfoHolderFolderContainer(context, repositoryId, object, objectInfos);\r\n-            }    \r\n+      if (null!=oifc.getChildren())\r\n+        for (ObjectInFolderContainer object : oifc.getChildren()) {\r\n+          // call recursively\r\n+          fillObjectInfoHolderFolderContainer(context, repositoryId, object, objectInfos);\r\n+        }    \r\n     }\r\n \r\n     private Boolean getBooleanProperty(Map<String, PropertyData<?>> props, String key) {\r", "filename": "opencmis-server/opencmis-server-support/src/main/java/org/apache/opencmis/server/support/ObjectInfoHelper.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/26cef44ce727ce406f4127e7b3f22e2743f24ea7", "parent": "https://github.com/apache/chemistry-opencmis/commit/c73c74418744f43a77ac9a4a970a9ee2edb4d7b9", "message": "Fix NPE when retrieving empty list of folder children via OpenCMIS folder.getChildren()\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/chemistry/trunk/opencmis@920861 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_26", "file": [{"additions": 6, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/26cef44ce727ce406f4127e7b3f22e2743f24ea7/opencmis-client/opencmis-client-impl/src/main/java/org/apache/opencmis/client/runtime/PersistentFolderImpl.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/26cef44ce727ce406f4127e7b3f22e2743f24ea7/opencmis-client/opencmis-client-impl/src/main/java/org/apache/opencmis/client/runtime/PersistentFolderImpl.java", "sha": "6aa9562bc505bc79c95a0b129231f8c400bf196c", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/opencmis-client/opencmis-client-impl/src/main/java/org/apache/opencmis/client/runtime/PersistentFolderImpl.java?ref=26cef44ce727ce406f4127e7b3f22e2743f24ea7", "patch": "@@ -240,9 +240,12 @@ protected FetchResult fetchPage(int pageNumber) {\n \r\n         // convert objects\r\n         List<CmisObject> page = new ArrayList<CmisObject>();\r\n-        for (ObjectInFolderData objectData : children.getObjects()) {\r\n-          if (objectData.getObject() != null) {\r\n-            page.add(objectFactory.convertObject(objectData.getObject(), ctxt));\r\n+        List<ObjectInFolderData> childObjects = children.getObjects();\r\n+        if (childObjects != null) {\r\n+          for (ObjectInFolderData objectData : childObjects) {\r\n+            if (objectData.getObject() != null) {\r\n+              page.add(objectFactory.convertObject(objectData.getObject(), ctxt));\r\n+            }\r\n           }\r\n         }\r\n \r", "filename": "opencmis-client/opencmis-client-impl/src/main/java/org/apache/opencmis/client/runtime/PersistentFolderImpl.java"}], "repo": "chemistry-opencmis"}, {"commit": "https://github.com/apache/chemistry-opencmis/commit/706398aa35d8e4b08ca0725482f86de8b57370de", "parent": "https://github.com/apache/chemistry-opencmis/commit/561aa939276f12279cac9885bb2f4a4025e261d7", "message": "OpenCMIS Client: added workaround for repositories that send an empty list and set the hasMoreItems flag to true (for example in the response of getChildren()) -> prevents NPEs and endless loops\n\ngit-svn-id: https://svn.apache.org/repos/asf/chemistry/opencmis/trunk@1702282 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "chemistry-opencmis_27", "file": [{"additions": 5, "raw_url": "https://github.com/apache/chemistry-opencmis/raw/706398aa35d8e4b08ca0725482f86de8b57370de/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/util/CollectionIterator.java", "blob_url": "https://github.com/apache/chemistry-opencmis/blob/706398aa35d8e4b08ca0725482f86de8b57370de/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/util/CollectionIterator.java", "sha": "318c0eeed666a8f0507cf7d5ecf36f7e36ed110c", "changes": 16, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/chemistry-opencmis/contents/chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/util/CollectionIterator.java?ref=706398aa35d8e4b08ca0725482f86de8b57370de", "patch": "@@ -39,11 +39,6 @@ public CollectionIterator(long skipCount, AbstractPageFetcher<T> pageFetcher) {\n         super(skipCount, pageFetcher);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see java.util.Iterator#hasNext()\n-     */\n     @Override\n     public boolean hasNext() {\n         Page<T> page = getCurrentPage();\n@@ -52,7 +47,11 @@ public boolean hasNext() {\n         }\n \n         List<T> items = page.getItems();\n-        if (items != null && getSkipOffset() < items.size()) {\n+        if (items == null || items.isEmpty()) {\n+            return false;\n+        }\n+\n+        if (getSkipOffset() < items.size()) {\n             return true;\n         }\n \n@@ -69,11 +68,6 @@ public boolean hasNext() {\n         return (getSkipCount() + getSkipOffset()) < totalItems;\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see java.util.Iterator#next()\n-     */\n     @Override\n     public T next() {\n         Page<T> page = getCurrentPage();", "filename": "chemistry-opencmis-client/chemistry-opencmis-client-impl/src/main/java/org/apache/chemistry/opencmis/client/runtime/util/CollectionIterator.java"}], "repo": "chemistry-opencmis"}]
