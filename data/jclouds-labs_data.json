[
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/686b608f08ba60be71c9b8bc48b027fbf429d5b5",
        "file": [
            {
                "patch": "@@ -48,10 +48,10 @@\n \n    private static final Map<State, NodeMetadata.Status> serverStateToNodeStatus = ImmutableMap.<State, NodeMetadata.Status>builder()\n          .put(State.PENDING_DELETE, NodeMetadata.Status.PENDING).put(State.PENDING_CHANGE, NodeMetadata.Status.PENDING)\n-         .put(State.FAILED_ADD, NodeMetadata.Status.ERROR).put(State.FAILED_CHANGE, NodeMetadata.Status.ERROR)\n-         .put(State.FAILED_DELETE, NodeMetadata.Status.ERROR).put(State.DELETED, NodeMetadata.Status.TERMINATED)\n-         .put(State.NORMAL, NodeMetadata.Status.RUNNING).put(State.UNRECOGNIZED, NodeMetadata.Status.UNRECOGNIZED)\n-         .build();\n+         .put(State.PENDING_ADD, NodeMetadata.Status.PENDING).put(State.FAILED_ADD, NodeMetadata.Status.ERROR)\n+         .put(State.FAILED_CHANGE, NodeMetadata.Status.ERROR).put(State.FAILED_DELETE, NodeMetadata.Status.ERROR)\n+         .put(State.DELETED, NodeMetadata.Status.TERMINATED).put(State.NORMAL, NodeMetadata.Status.RUNNING)\n+         .put(State.UNRECOGNIZED, NodeMetadata.Status.UNRECOGNIZED).build();\n \n    private final Supplier<Set<? extends Location>> locations;\n    private final GroupNamingConvention nodeNamingConvention;\n@@ -80,7 +80,9 @@ public NodeMetadata apply(final ServerWithExternalIp serverWithExternalIp) {\n       builder.hardware(serverToHardware.apply(serverWithExternalIp.server()));\n       builder.imageId(server.sourceImageId());\n       builder.operatingSystem(operatingSystemToOperatingSystem.apply(server.guest().operatingSystem()));\n-      builder.status(serverStateToNodeStatus.get(server.state()));\n+      builder.status(server.started() ?\n+            serverStateToNodeStatus.get(server.state()) :\n+            NodeMetadata.Status.SUSPENDED);\n \n       Set<String> privateAddresses = new HashSet<String>();\n       if (server.networkInfo() != null) {",
                "additions": 7,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadata.java",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "403e4e45ed9c2ab774f90949fb33ee15e51bc087",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadata.java",
                "filename": "dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadata.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadata.java?ref=686b608f08ba60be71c9b8bc48b027fbf429d5b5"
            },
            {
                "patch": "@@ -18,7 +18,6 @@\n \n import com.google.auto.value.AutoValue;\n import com.google.common.collect.ImmutableList;\n-import org.jclouds.javax.annotation.Nullable;\n import org.jclouds.json.SerializedNames;\n \n import java.util.Date;\n@@ -32,7 +31,6 @@\n       type = TYPE;\n    }\n \n-   @Nullable\n    public abstract String osImageKey();\n \n    @SerializedNames({ \"id\", \"name\", \"description\", \"cluster\", \"guest\", \"datacenterId\", \"cpu\", \"memoryGb\", \"nic\", \"disk\",",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/OsImage.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "7b179e5138a7ba0c6bd877034b3839b30e4b1952",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/OsImage.java",
                "filename": "dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/OsImage.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/OsImage.java?ref=686b608f08ba60be71c9b8bc48b027fbf429d5b5"
            },
            {
                "patch": "@@ -22,7 +22,7 @@\n \n public enum State {\n \n-   NORMAL, FAILED_ADD, FAILED_CHANGE, FAILED_DELETE, PENDING_DELETE, DELETED, UNRECOGNIZED, PENDING_CHANGE, PENDING_CLEAN, REQUIRES_SUPPORT;\n+   NORMAL, FAILED_ADD, FAILED_CHANGE, FAILED_DELETE, PENDING_DELETE, DELETED, UNRECOGNIZED, PENDING_CHANGE, PENDING_ADD, PENDING_CLEAN, REQUIRES_SUPPORT;\n \n    @Override\n    public String toString() {",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/State.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e0dbe54ea37db2085dbea603db9150c17c4979e4",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/State.java",
                "filename": "dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/State.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/dimensiondata/src/main/java/org/jclouds/dimensiondata/cloudcontrol/domain/State.java?ref=686b608f08ba60be71c9b8bc48b027fbf429d5b5"
            },
            {
                "patch": "@@ -106,7 +106,7 @@ public void setUp() throws Exception {\n \n       server = Server.builder().id(\"serverId\").name(serverName).datacenterId(datacenterId)\n             .networkInfo(NetworkInfo.create(networkDomainId, nic, new ArrayList<NIC>())).cpu(cpu).deployed(true)\n-            .state(State.NORMAL).sourceImageId(\"imageId\").started(false).createTime(new Date()).memoryGb(1024)\n+            .state(State.NORMAL).sourceImageId(\"imageId\").started(true).createTime(new Date()).memoryGb(1024)\n             .guest(Guest.builder().osCustomization(false).operatingSystem(os).build()).build();\n \n       serverWithNatRuleToNodeMetadata = new ServerWithNatRuleToNodeMetadata(locations, conventionFactory,\n@@ -140,7 +140,7 @@ public void testApplyWithNullables() {\n \n       server = Server.builder().id(\"serverId\").name(serverName).datacenterId(datacenterId)\n             .networkInfo(NetworkInfo.create(networkDomainId, nic, new ArrayList<NIC>())).cpu(cpu).deployed(true)\n-            .state(State.DELETED).sourceImageId(\"imageId\").started(false).createTime(new Date()).memoryGb(1024)\n+            .state(State.DELETED).sourceImageId(\"imageId\").started(true).createTime(new Date()).memoryGb(1024)\n             .guest(Guest.builder().osCustomization(false).operatingSystem(os).build()).build();\n \n       serverWithExternalIp = ServerWithExternalIp.create(server, null);\n@@ -155,6 +155,33 @@ public void testApplyWithNullables() {\n             NodeMetadata.Status.TERMINATED, ImmutableSet.<String>of(), ImmutableSet.<String>of());\n    }\n \n+   @Test(dependsOnMethods = \"testApplyWithNullables\")\n+   public void testApplyServerStopped() {\n+\n+      server = Server.builder().id(\"serverId\").name(serverName).datacenterId(datacenterId)\n+            .networkInfo(NetworkInfo.create(networkDomainId, nic, new ArrayList<NIC>())).cpu(cpu).deployed(true)\n+            .state(State.DELETED).sourceImageId(\"imageId\").started(false).createTime(new Date()).memoryGb(1024)\n+            .guest(Guest.builder().osCustomization(false).operatingSystem(os).build()).build();\n+\n+      serverWithExternalIp = ServerWithExternalIp.create(server, externalIp);\n+\n+      org.jclouds.compute.domain.OperatingSystem operatingSystem = org.jclouds.compute.domain.OperatingSystem.builder()\n+            .description(\"Windows 10 x64\").name(\"Win10x64\").is64Bit(true).family(OsFamily.WINDOWS).build();\n+\n+      expect(image.getId()).andReturn(\"imageId\");\n+      expect(image.getOperatingSystem()).andReturn(operatingSystem);\n+      expect(nic.privateIpv4()).andReturn(\"192.168.1.1\").anyTimes();\n+      expect(nodeNamingConvention.groupInUniqueNameOrNull(serverName)).andReturn(\"[\" + serverName + \"]\").anyTimes();\n+      expect(serverToHardware.apply(server)).andReturn(hardware);\n+      expect(operatingSystemToOperatingSystem.apply(os)).andReturn(operatingSystem);\n+\n+      EasyMock.replay(nodeNamingConvention, serverImageApi, image, nic, serverToHardware, operatingSystemToOperatingSystem);\n+\n+      assertNodeMetadata(serverWithNatRuleToNodeMetadata.apply(serverWithExternalIp), operatingSystem,\n+                  serverWithExternalIp.server().sourceImageId(), NodeMetadata.Status.SUSPENDED,\n+                  ImmutableSet.of(nic.privateIpv4()), ImmutableSet.of(externalIp));\n+   }\n+\n    private void assertNodeMetadata(NodeMetadata result, org.jclouds.compute.domain.OperatingSystem os, String imageId,\n          NodeMetadata.Status status, ImmutableSet<String> privateIpAddresses, ImmutableSet<String> publicIpAddresses) {\n       assertNotNull(result);",
                "additions": 29,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/test/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadataTest.java",
                "status": "modified",
                "changes": 31,
                "deletions": 2,
                "sha": "5f83775ff41d4d54351f7b398d8690b4517ce5b9",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/686b608f08ba60be71c9b8bc48b027fbf429d5b5/dimensiondata/src/test/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadataTest.java",
                "filename": "dimensiondata/src/test/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadataTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/dimensiondata/src/test/java/org/jclouds/dimensiondata/cloudcontrol/compute/functions/ServerWithNatRuleToNodeMetadataTest.java?ref=686b608f08ba60be71c9b8bc48b027fbf429d5b5"
            }
        ],
        "bug_id": "jclouds-labs_1",
        "parent": "https://github.com/apache/jclouds-labs/commit/6dec3774ab82616bac5deb977d9003eea8845632",
        "message": "JCLOUD-96-JCLOUD-91-Fix NPE and Remove Nullable osImageKey From OsImage",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/550ca7d5c22a82564501eeef15009a0806b443c7",
        "file": [
            {
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.azurecompute.arm.domain.IdReference;\n import org.jclouds.azurecompute.arm.domain.IpConfiguration;\n import org.jclouds.azurecompute.arm.domain.NetworkInterfaceCard;\n+import org.jclouds.azurecompute.arm.domain.PublicIPAddress;\n import org.jclouds.azurecompute.arm.domain.RegionAndId;\n import org.jclouds.azurecompute.arm.domain.ResourceGroup;\n import org.jclouds.azurecompute.arm.domain.StorageProfile;\n@@ -247,8 +248,10 @@ private NetworkInterfaceCard getNetworkInterfaceCard(IdReference networkInterfac\n             for (IpConfiguration ipConfiguration : networkInterfaceCard.properties().ipConfigurations()) {\n                if (ipConfiguration.properties().publicIPAddress() != null) {\n                   String publicIpId = ipConfiguration.properties().publicIPAddress().id();\n-                  publicIpAddresses.add(api.getPublicIPAddressApi(resourceGroup)\n-                        .get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId))).properties().ipAddress());\n+                  PublicIPAddress publicIp = api.getPublicIPAddressApi(resourceGroup).get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId)));\n+                  if (publicIp != null && publicIp.properties().ipAddress() != null) {\n+                     publicIpAddresses.add(publicIp.properties().ipAddress());\n+                  }\n                }\n             }\n          }",
                "additions": 5,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/550ca7d5c22a82564501eeef15009a0806b443c7/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "6b7ef3008c891b611454985a51cc8cca21d9e8aa",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/550ca7d5c22a82564501eeef15009a0806b443c7/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "filename": "azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java?ref=550ca7d5c22a82564501eeef15009a0806b443c7"
            }
        ],
        "bug_id": "jclouds-labs_2",
        "parent": "https://github.com/apache/jclouds-labs/commit/83c58388e6339d88bd4be94fa78146133acb9ee2",
        "message": "Fix NPE in ARM VirtualMachineToNodeMetadata",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/fe24698d81bde3f615dd13bed8a0b33c84ebf865",
        "file": [
            {
                "patch": "@@ -117,8 +117,11 @@ public NodeMetadata apply(final Deployment from) {\n       // TODO: CloudService name is required (see JCLOUDS-849): waiting for JCLOUDS-853.\n       final CloudService cloudService = api.getCloudServiceApi().get(from.name());\n       if (cloudService != null) {\n+         final String location = cloudService.location() != null\n+                 ? cloudService.location()\n+                 : api.getAffinityGroupApi().get(cloudService.affinityGroup()).location();\n          builder.location(FluentIterable.from(locations.get()).\n-                 firstMatch(LocationPredicates.idEquals(cloudService.location())).\n+                 firstMatch(LocationPredicates.idEquals(location)).\n                  orNull());\n       }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/fe24698d81bde3f615dd13bed8a0b33c84ebf865/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "622fd9ce5b1e2f0e07d8453ef6479b98e61d5aca",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/fe24698d81bde3f615dd13bed8a0b33c84ebf865/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java?ref=fe24698d81bde3f615dd13bed8a0b33c84ebf865"
            }
        ],
        "bug_id": "jclouds-labs_3",
        "parent": "https://github.com/apache/jclouds-labs/commit/4ff9889fc938b1bf628dcfe8425f9eff8aa68d85",
        "message": "[JCLOUDS-1088] fix NPE in DeploymentToNodeMetadata.apply\n\nThe NPE is caused by passing the value of CloudService.location()\nto LocationPredicates.idEquals which throws a NPE when the argument\nis null. However, CloudService.location() is @Nullable and is null\nwhen the cloud service is associated with an affinity group.\n\nThe solution in this commit checks if CloudService.location() is null\nand if it is, the location is obtained from the affinity group.",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/3cb51e006d54cb6eeb766df589e2ce1ae0edfd90",
        "file": [
            {
                "patch": "@@ -147,7 +147,7 @@ public void testUpdateNetwork() {\n    @Test(testName = \"POST /admin/network/{id}/action/reset\")\n    public void testResetNetwork() { \n       // TODO assert that network is deployed somehow\n-      Task resetNetworkTask = networkClient.resetNetwork(network.getHref());\n+      Task resetNetworkTask = networkClient.resetNetwork(networkRef.getHref());\n       Checks.checkTask(resetNetworkTask);\n       assertTrue(retryTaskSuccess.apply(resetNetworkTask), String.format(TASK_COMPLETE_TIMELY, \"resetNetworkTask\"));\n       network = networkClient.getNetwork(network.getHref());",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/3cb51e006d54cb6eeb766df589e2ce1ae0edfd90/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c5c6d9eee2886ad24d48bcb911cf09cb39613214",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/3cb51e006d54cb6eeb766df589e2ce1ae0edfd90/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "filename": "vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java?ref=3cb51e006d54cb6eeb766df589e2ce1ae0edfd90"
            }
        ],
        "bug_id": "jclouds-labs_4",
        "parent": "https://github.com/apache/jclouds-labs/commit/2a9dd510a98190b2961542d7dc7c6491cca46dbf",
        "message": "avoid NPE in testResetNetwork",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/45cb397b551f9e56870cac8639ca1172df106fe1",
        "file": [
            {
                "patch": "@@ -45,7 +45,7 @@ private ThrowVCloudErrorOn4xx() { }\n    public Object apply(Exception from) {\n       Iterable<HttpResponseException> throwables = Iterables.filter(Throwables.getCausalChain(from), HttpResponseException.class);\n       HttpResponseException exception = Iterables.getFirst(throwables, null);\n-      if (exception != null && exception.getResponse().getStatusCode() >= 400 && exception.getResponse().getStatusCode() < 500) {\n+      if (exception != null && exception.getResponse() != null && exception.getResponse().getStatusCode() >= 400 && exception.getResponse().getStatusCode() < 500) {\n          try {\n             Error error = JAXB.unmarshal(InputSuppliers.of(exception.getContent()).getInput(), Error.class);\n             throw new VCloudDirectorException(error);",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/45cb397b551f9e56870cac8639ca1172df106fe1/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "89d959711c9675a2144dae47b5fd22b2b0fe7e86",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/45cb397b551f9e56870cac8639ca1172df106fe1/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "filename": "vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java?ref=45cb397b551f9e56870cac8639ca1172df106fe1"
            }
        ],
        "bug_id": "jclouds-labs_5",
        "parent": "https://github.com/apache/jclouds-labs/commit/c6a1371a6b8944f7e05ce530b2ec6c8508151b29",
        "message": "guard against NPE",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/21865afac901cfe4b6f91949a287bf6a2722a2d4",
        "file": [
            {
                "patch": "@@ -53,7 +53,7 @@ public void handleError(HttpCommand command, HttpResponse response) {\n       String message = data != null\n             ? new String(data)\n             : String.format(\"%s -> %s\", command.getCurrentRequest().getRequestLine(), response.getStatusLine());\n-      Exception exception = new HttpResponseException(command, response, response.getPayload().getContentMetadata().getContentType());\n+      Exception exception = new HttpResponseException(command, response, message);\n       \n       // Try to create a VCloudDirectorException from XML payload\n       if (response.getPayload().getContentMetadata().getContentType().startsWith(VCloudDirectorMediaType.ERROR)) {",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/21865afac901cfe4b6f91949a287bf6a2722a2d4/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5d209865c756285be955f3a36e3baf11cea209b1",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/21865afac901cfe4b6f91949a287bf6a2722a2d4/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "filename": "vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java?ref=21865afac901cfe4b6f91949a287bf6a2722a2d4"
            }
        ],
        "bug_id": "jclouds-labs_6",
        "parent": "https://github.com/apache/jclouds-labs/commit/3d803fd09753b8e01c5056ef46aefa8839597a2e",
        "message": "Fixed NPE in error handler",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/7923b6c7fb6b336b548b6aa65698c4797a2d8661",
        "file": [
            {
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.vcloud.director.v1_5.domain.Reference;\n import org.jclouds.vcloud.director.v1_5.domain.User;\n import org.jclouds.vcloud.director.v1_5.internal.BaseVCloudDirectorClientLiveTest;\n+import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n@@ -73,7 +74,7 @@\n \n    @Override\n    @BeforeClass(inheritGroups = true)\n-   public void setupRequiredClients() {\n+   protected void setupRequiredClients() {\n       catalogClient = context.getApi().getAdminCatalogClient();\n       orgRef = Iterables.getFirst(context.getApi().getOrgClient().getOrgList().getOrgs(), null).toAdminReference(endpoint);\n    }\n@@ -186,36 +187,47 @@ public void testPublishCatalog() {\n       \n       assertTrue(catalog.isPublished(), String.format(OBJ_FIELD_EQ, \n             CATALOG, \"isPublished\", true, catalog.isPublished()));\n-      \n    }\n    \n    @Test(testName = \"DELETE /admin/catalog/{id}\",\n-         dependsOnMethods = { \"testUpdateCatalog\" } )\n+         dependsOnMethods = { \"testCreateCatalog\" } )\n    public void testDeleteCatalog() {\n //      assertEquals(catalog.getCatalogItems().getCatalogItems().size(), 0, \n //            String.format(OBJ_FIELD_EMPTY_TO_DELETE, \"Catalog\", \"CatalogItems\", \n //                  catalog.getCatalogItems().getCatalogItems().toString()));\n-      catalogClient.deleteCatalog(catalog.getHref());\n+      AdminCatalog deleteCatalog = AdminCatalog.builder()\n+            .name(\"Test Catalog \" + random.nextInt())\n+            .description(\"created by testCreateCatalog()\")\n+            .build();\n+      deleteCatalog = catalogClient.createCatalog(orgRef.getHref(), deleteCatalog);\n+      catalogClient.deleteCatalog(deleteCatalog.getHref());\n       \n       Error expected = Error.builder()\n             .message(\"No access to entity \\\"(com.vmware.vcloud.entity.catalog:\"+\n-                  catalog.getId().substring(\"urn:vcloud:catalog:\".length())+\")\\\".\")\n+                  deleteCatalog.getId().substring(\"urn:vcloud:catalog:\".length())+\")\\\".\")\n             .majorErrorCode(403)\n             .minorErrorCode(\"ACCESS_TO_RESOURCE_IS_FORBIDDEN\")\n             .build();\n       \n       try {\n-         catalog = catalogClient.getCatalog(catalog.getHref());\n+         deleteCatalog = catalogClient.getCatalog(deleteCatalog.getHref());\n          fail(\"Should give HTTP 403 error\");\n       } catch (VCloudDirectorException vde) {\n          assertEquals(vde.getError(), expected);\n-         catalog = null;\n+         deleteCatalog = null;\n       } catch (Exception e) {\n          fail(\"Should have thrown a VCloudDirectorException\");\n       }\n       \n-      if (catalog != null) { // guard against NPE on the .toStrings\n-         assertNull(catalog, String.format(OBJ_DEL, CATALOG, catalog.toString()));\n+      if (deleteCatalog != null) { // guard against NPE on the .toStrings\n+         assertNull(deleteCatalog, String.format(OBJ_DEL, CATALOG, deleteCatalog.toString()));\n+      }\n+   }\n+   \n+   @AfterClass\n+   protected void tidyUp() {\n+      if (catalog != null) {\n+         catalogClient.deleteCatalog(catalog.getHref());\n       }\n    }\n }",
                "additions": 21,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/7923b6c7fb6b336b548b6aa65698c4797a2d8661/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "status": "modified",
                "changes": 30,
                "deletions": 9,
                "sha": "32277c4ce56f03446ce40f685e3c4088bbb993ad",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/7923b6c7fb6b336b548b6aa65698c4797a2d8661/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "filename": "vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java?ref=7923b6c7fb6b336b548b6aa65698c4797a2d8661"
            }
        ],
        "bug_id": "jclouds-labs_7",
        "parent": "https://github.com/apache/jclouds-labs/commit/ac9270e30c40f635569cd09438e87e50abce4f43",
        "message": "fix NPE and test ordering",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/56191b757bb7cf37cd6e9b207ad7840c791d817e",
        "file": [
            {
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.jclouds.vcloud.director.testng;\n \n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.Set;\n \n@@ -104,7 +106,9 @@ private String getApi(ITestResult res) {\n    }\n \n    private String getOperation(ITestResult res) {\n-      return res.getMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class).testName();\n+      Method method = res.getMethod().getConstructorOrMethod().getMethod();\n+      Test test = method.getAnnotation(Test.class);\n+      return test != null ? test.testName() : method.getName();\n    }\n \n    private String getDuration() {",
                "additions": 5,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/56191b757bb7cf37cd6e9b207ad7840c791d817e/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "6abbb96dce756cf644e3c43f3511e8a12ec24a28",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/56191b757bb7cf37cd6e9b207ad7840c791d817e/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "filename": "vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java?ref=56191b757bb7cf37cd6e9b207ad7840c791d817e"
            }
        ],
        "bug_id": "jclouds-labs_8",
        "parent": "https://github.com/apache/jclouds-labs/commit/add43bf3d38d6860c41d5cd509032e369e821466",
        "message": "NPE guard in test formatter",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef",
        "file": [
            {
                "patch": "@@ -16,25 +16,26 @@\n  */\n package org.jclouds.docker.domain;\n \n+import org.jclouds.javax.annotation.Nullable;\n import org.jclouds.json.SerializedNames;\n \n import com.google.auto.value.AutoValue;\n \n @AutoValue\n public abstract class Port {\n-   public abstract String ip();\n+   @Nullable public abstract String ip();\n \n    public abstract int privatePort();\n \n-   public abstract int publicPort();\n+   @Nullable public abstract Integer publicPort();\n \n    public abstract String type();\n \n    Port() {\n    }\n \n    @SerializedNames({ \"IP\", \"PrivatePort\", \"PublicPort\", \"Type\" })\n-   public static Port create(String ip, int privatePort, int publicPort, String type) {\n+   public static Port create(String ip, int privatePort, Integer publicPort, String type) {\n       return new AutoValue_Port(ip, privatePort, publicPort, type);\n    }\n }",
                "additions": 4,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "45fa96602d65080c2f346886faf716487a3a67e5",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "filename": "docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/domain/Port.java?ref=46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef"
            },
            {
                "patch": "@@ -39,15 +39,13 @@ public String resource() {\n    @Override\n    @Consumes(MediaType.APPLICATION_JSON)\n    public List<ContainerSummary> expected() {\n-      return ImmutableList.of(\n-              ContainerSummary.create(\"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a9\",\n-                      ImmutableList.of(\"/hopeful_mclean\"),\n-                      \"1395472605\",\n-                      \"jclouds/ubuntu:latest\",\n-                      \"/usr/sbin/sshd -D\",\n-                      ImmutableList.of(Port.create(\"0.0.0.0\", 22, 49231, \"tcp\")),\n-                      \"Up 55 seconds\")\n-      );\n+      return ImmutableList.of(ContainerSummary.create(\n+            \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a9\", ImmutableList.of(\"/hopeful_mclean\"),\n+            \"1395472605\", \"jclouds/ubuntu:latest\", \"/usr/sbin/sshd -D\",\n+            ImmutableList.of(Port.create(\"0.0.0.0\", 22, 49231, \"tcp\")), \"Up 55 seconds\"), ContainerSummary.create(\n+            \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a2\", ImmutableList.of(\"/hopeful_mclean\"),\n+            \"1395472605\", \"jclouds/ubuntu:latest\", \"/usr/sbin/sshd -D\",\n+            ImmutableList.of(Port.create(null, 22, null, \"tcp\")), \"Up 55 seconds\"));\n    }\n \n }",
                "additions": 7,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "status": "modified",
                "changes": 16,
                "deletions": 9,
                "sha": "39565bf63b99f1c406843c31c669c325760b2479",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "filename": "docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java?ref=46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef"
            },
            {
                "patch": "@@ -16,5 +16,21 @@\n       }\n     ],\n     \"Status\": \"Up 55 seconds\"\n+  },\n+  {\n+    \"Command\": \"/usr/sbin/sshd -D\",\n+    \"Created\": 1395472605,\n+    \"Id\": \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a2\",\n+    \"Image\": \"jclouds/ubuntu:latest\",\n+    \"Names\": [\n+      \"/hopeful_mclean\"\n+    ],\n+    \"Ports\": [\n+      {\n+        \"PrivatePort\": 22,\n+        \"Type\": \"tcp\"\n+      }\n+    ],\n+    \"Status\": \"Up 55 seconds\"\n   }\n ]\n\\ No newline at end of file",
                "additions": 16,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/test/resources/containers.json",
                "status": "modified",
                "changes": 16,
                "deletions": 0,
                "sha": "e7e7e3be1e20fa672aff919f6af99697b7c13cad",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef/docker/src/test/resources/containers.json",
                "filename": "docker/src/test/resources/containers.json",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/test/resources/containers.json?ref=46aec3aa2bdb362d7ba9a17cb1c3c9b0509b30ef"
            }
        ],
        "bug_id": "jclouds-labs_9",
        "parent": "https://github.com/apache/jclouds-labs/commit/42afafd015858a404b53f04131ff7363357bc825",
        "message": "JCLOUDS-1041: Fix NPE when deserializing Port in Docker 1.9.1",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/3ecf9e43ccf4923a72920128584da7c332dff73b",
        "file": [
            {
                "patch": "@@ -28,7 +28,9 @@\n import org.testng.TestListenerAdapter;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicates;\n+import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n \n@@ -79,15 +81,16 @@ private String resultForState(ITestResult res, String state) {\n    }\n \n    private String getApi(ITestResult res) {\n-      return Iterables.find(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      Optional<String> found = Iterables.tryFind(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      return found.isPresent() ? found.get() : \"\";\n    }\n \n    private String getOperation(ITestResult res) {\n-      return res.getMethod().getDescription();\n+      return Strings.nullToEmpty(res.getMethod().getDescription());\n    }\n \n    private String getTest(ITestResult res) {\n-      return res.getName();\n+      return Strings.nullToEmpty(res.getName());\n    }\n \n    private String getStart(ITestResult res) {",
                "additions": 6,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/3ecf9e43ccf4923a72920128584da7c332dff73b/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "status": "modified",
                "changes": 9,
                "deletions": 3,
                "sha": "fac0e0f41cda73367162ecd8ef98947a29db8d9b",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/3ecf9e43ccf4923a72920128584da7c332dff73b/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "filename": "vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java?ref=3ecf9e43ccf4923a72920128584da7c332dff73b"
            }
        ],
        "bug_id": "jclouds-labs_10",
        "parent": "https://github.com/apache/jclouds-labs/commit/807cbc5b19734c9e8907bc534e1e042b7b699c16",
        "message": "Issue 830: Fixing NPE in test listener",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/9069e39fd95ae74724a1e7599ae8c89e0d9b7351",
        "file": [
            {
                "patch": "@@ -119,10 +119,8 @@ protected void setupCredentials() {\n    }\n \n    protected void ensureIdentityPropertyIsSpecifiedOrTakeFromDefaults() {\n-      Properties defaultVBoxProperties = new VirtualBoxPropertiesBuilder().build();\n       if (!System.getProperties().containsKey(\"test.\" + provider + \".identity\"))\n-         System.setProperty(\"test.\" + provider + \".identity\",\n-                  defaultVBoxProperties.getProperty(Constants.PROPERTY_IDENTITY));\n+         System.setProperty(\"test.\" + provider + \".identity\", \"administrator\");\n    }\n \n    @BeforeClass(groups = \"live\")",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/9069e39fd95ae74724a1e7599ae8c89e0d9b7351/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 3,
                "sha": "33c55a390d610c224c4b67b1c4e50bfd5ae52c71",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/9069e39fd95ae74724a1e7599ae8c89e0d9b7351/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "filename": "virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java?ref=9069e39fd95ae74724a1e7599ae8c89e0d9b7351"
            }
        ],
        "bug_id": "jclouds-labs_11",
        "parent": "https://github.com/apache/jclouds-labs/commit/c4e6c22a0a83f4567866a50f87f070f931167f7a",
        "message": "added mock identity prop to prevent NPE in some cases",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/969951d9b897fe7d249525cea935caaa04660bda",
        "file": [
            {
                "patch": "@@ -25,35 +25,35 @@\n     *               When TTY is disabled, the stream is multiplexed to separate stdout and stderr.\n     * @return AttachOptions\n     */\n-   public AttachOptions stream(Boolean stream) {\n-      this.queryParameters.put(\"stream\", stream.toString());\n+   public AttachOptions stream(boolean stream) {\n+      this.queryParameters.put(\"stream\", String.valueOf(stream));\n       return this;\n    }\n \n    /**\n     * @param logs require logs to be attached. Default false.\n     * @return AttachOptions\n     */\n-   public AttachOptions logs(Boolean logs) {\n-      this.queryParameters.put(\"logs\", logs.toString());\n+   public AttachOptions logs(boolean logs) {\n+      this.queryParameters.put(\"logs\", String.valueOf(logs));\n       return this;\n    }\n \n    /**\n     * @param stdin if stream=true, attach to stdin. Default false\n     * @return AttachOptions\n     */\n-   public AttachOptions stdin(Boolean stdin) {\n-      this.queryParameters.put(\"stdin\", stdin.toString());\n+   public AttachOptions stdin(boolean stdin) {\n+      this.queryParameters.put(\"stdin\", String.valueOf(stdin));\n       return this;\n    }\n \n    /**\n     * @param stdout if logs=true, return stdout log, if stream=true, attach to stdout. Default false\n     * @return\n     */\n-   public AttachOptions stdout(Boolean stdout) {\n-      this.queryParameters.put(\"stdout\", stdout.toString());\n+   public AttachOptions stdout(boolean stdout) {\n+      this.queryParameters.put(\"stdout\", String.valueOf(stdout));\n       return this;\n    }\n \n@@ -62,8 +62,8 @@ public AttachOptions stdout(Boolean stdout) {\n     * @param stderr if logs=true, return stderr log, if stream=true, attach to stderr. Default false\n     * @return\n     */\n-   public AttachOptions stderr(Boolean stderr) {\n-      this.queryParameters.put(\"stderr\", stderr.toString());\n+   public AttachOptions stderr(boolean stderr) {\n+      this.queryParameters.put(\"stderr\", String.valueOf(stderr));\n       return this;\n    }\n \n@@ -72,39 +72,39 @@ public AttachOptions stderr(Boolean stderr) {\n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stream\n        */\n-      public static AttachOptions stream(Boolean stream) {\n+      public static AttachOptions stream(boolean stream) {\n          AttachOptions options = new AttachOptions();\n          return options.stream(stream);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#logs(Boolean)\n        */\n-      public static AttachOptions logs(Boolean logs) {\n+      public static AttachOptions logs(boolean logs) {\n          AttachOptions options = new AttachOptions();\n          return options.logs(logs);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stdin(Boolean)\n        */\n-      public static AttachOptions stdin(Boolean stdin) {\n+      public static AttachOptions stdin(boolean stdin) {\n          AttachOptions options = new AttachOptions();\n          return options.stdin(stdin);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stdout(Boolean)\n        */\n-      public static AttachOptions stdout(Boolean stdout) {\n+      public static AttachOptions stdout(boolean stdout) {\n          AttachOptions options = new AttachOptions();\n          return options.stdout(stdout);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stderr(Boolean)\n        */\n-      public static AttachOptions stderr(Boolean stderr) {\n+      public static AttachOptions stderr(boolean stderr) {\n          AttachOptions options = new AttachOptions();\n          return options.stderr(stderr);\n       }",
                "additions": 15,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "status": "modified",
                "changes": 30,
                "deletions": 15,
                "sha": "3c21865621ba48e38c1f795a91239e7a5654b8a8",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            },
            {
                "patch": "@@ -25,13 +25,13 @@ public BuildOptions tag(String tag) {\n       return this;\n    }\n \n-   public BuildOptions verbose(Boolean verbose) {\n-      this.queryParameters.put(\"verbose\", verbose.toString());\n+   public BuildOptions verbose(boolean verbose) {\n+      this.queryParameters.put(\"verbose\", String.valueOf(verbose));\n       return this;\n    }\n \n-   public BuildOptions nocache(Boolean nocache) {\n-      this.queryParameters.put(\"nocache\", nocache.toString());\n+   public BuildOptions nocache(boolean nocache) {\n+      this.queryParameters.put(\"nocache\", String.valueOf(nocache));\n       return this;\n    }\n \n@@ -48,15 +48,15 @@ public static BuildOptions tag(String tag) {\n       /**\n        * @see BuildOptions#verbose(Boolean)\n        */\n-      public static BuildOptions verbose(Boolean verbose) {\n+      public static BuildOptions verbose(boolean verbose) {\n          BuildOptions options = new BuildOptions();\n          return options.verbose(verbose);\n       }\n \n       /**\n        * @see BuildOptions#nocache(Boolean)\n        */\n-      public static BuildOptions nocache(Boolean nocache) {\n+      public static BuildOptions nocache(boolean nocache) {\n          BuildOptions options = new BuildOptions();\n          return options.nocache(nocache);\n       }",
                "additions": 6,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "6653a56c3e396a5db30427908774f24d3e3ce809",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            },
            {
                "patch": "@@ -20,13 +20,13 @@\n \n public class DeleteImageOptions extends BaseHttpRequestOptions {\n \n-   public DeleteImageOptions force(Boolean force) {\n-      this.queryParameters.put(\"force\", force.toString());\n+   public DeleteImageOptions force(boolean force) {\n+      this.queryParameters.put(\"force\", String.valueOf(force));\n       return this;\n    }\n \n-   public DeleteImageOptions noPrune(Boolean noPrune) {\n-      this.queryParameters.put(\"noPrune\", noPrune.toString());\n+   public DeleteImageOptions noPrune(boolean noPrune) {\n+      this.queryParameters.put(\"noPrune\", String.valueOf(noPrune));\n       return this;\n    }\n \n@@ -35,15 +35,15 @@ public DeleteImageOptions noPrune(Boolean noPrune) {\n       /**\n        * @see DeleteImageOptions#force\n        */\n-      public static DeleteImageOptions force(Boolean force) {\n+      public static DeleteImageOptions force(boolean force) {\n          DeleteImageOptions options = new DeleteImageOptions();\n          return options.force(force);\n       }\n \n       /**\n        * @see DeleteImageOptions#noPrune\n        */\n-      public static DeleteImageOptions noPrune(Boolean noPrune) {\n+      public static DeleteImageOptions noPrune(boolean noPrune) {\n          DeleteImageOptions options = new DeleteImageOptions();\n          return options.noPrune(noPrune);\n       }",
                "additions": 6,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "c284fd9a10a58597ea76c393472ae52b041fb8fb",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            },
            {
                "patch": "@@ -20,8 +20,8 @@\n \n public class ListContainerOptions extends BaseHttpRequestOptions {\n \n-   public ListContainerOptions all(Boolean all) {\n-      this.queryParameters.put(\"all\", all.toString());\n+   public ListContainerOptions all(boolean all) {\n+      this.queryParameters.put(\"all\", String.valueOf(all));\n       return this;\n    }\n \n@@ -50,7 +50,7 @@ public ListContainerOptions size(Integer size) {\n       /**\n        * @see ListContainerOptions#all\n        */\n-      public static ListContainerOptions all(Boolean all) {\n+      public static ListContainerOptions all(boolean all) {\n          ListContainerOptions options = new ListContainerOptions();\n          return options.all(all);\n       }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "173f6fba86b7bf357753baabd48549e432aca23c",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            },
            {
                "patch": "@@ -20,16 +20,16 @@\n \n public class ListImageOptions extends BaseHttpRequestOptions {\n \n-   public ListImageOptions all(Boolean all) {\n-      this.queryParameters.put(\"all\", all.toString());\n+   public ListImageOptions all(boolean all) {\n+      this.queryParameters.put(\"all\", String.valueOf(all));\n       return this;\n    }\n \n    public static class Builder {\n       /**\n        * @see ListImageOptions#all\n        */\n-      public static ListImageOptions all(Boolean all) {\n+      public static ListImageOptions all(boolean all) {\n          ListImageOptions options = new ListImageOptions();\n          return options.all(all);\n       }",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "f4704d0a9d24d0e483f25426ed9c88846a85f872",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            },
            {
                "patch": "@@ -20,13 +20,13 @@\n \n public class RemoveContainerOptions extends BaseHttpRequestOptions {\n \n-   public RemoveContainerOptions verbose(Boolean verbose) {\n-      this.queryParameters.put(\"verbose\", verbose.toString());\n+   public RemoveContainerOptions verbose(boolean verbose) {\n+      this.queryParameters.put(\"verbose\", String.valueOf(verbose));\n       return this;\n    }\n \n-   public RemoveContainerOptions force(Boolean force) {\n-      this.queryParameters.put(\"force\", force.toString());\n+   public RemoveContainerOptions force(boolean force) {\n+      this.queryParameters.put(\"force\", String.valueOf(force));\n       return this;\n    }\n    \n@@ -36,32 +36,32 @@ public RemoveContainerOptions force(Boolean force) {\n     * @param volume If set to true the volume associated to the container will be removed. \n     * Otherwise it will not be removed.\n     */\n-   public RemoveContainerOptions volume(Boolean volume) {\n-       this.queryParameters.put(\"v\", volume.toString());\n+   public RemoveContainerOptions volume(boolean volume) {\n+       this.queryParameters.put(\"v\", String.valueOf(volume));\n        return this;\n     }\n \n    public static class Builder {\n       /**\n        * @see RemoveContainerOptions#verbose\n        */\n-      public static RemoveContainerOptions verbose(Boolean verbose) {\n+      public static RemoveContainerOptions verbose(boolean verbose) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.verbose(verbose);\n       }\n \n       /**\n        * @see RemoveContainerOptions#force\n        */\n-      public static RemoveContainerOptions force(Boolean force) {\n+      public static RemoveContainerOptions force(boolean force) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.force(force);\n       }\n       \n       /**\n        * @see RemoveContainerOptions#volume\n        */\n-      public static RemoveContainerOptions volume(Boolean volume) {\n+      public static RemoveContainerOptions volume(boolean volume) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.volume(volume);\n       }",
                "additions": 9,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "status": "modified",
                "changes": 18,
                "deletions": 9,
                "sha": "f4a67955b8f748bf3944b527ec72eea150cb6e28",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/969951d9b897fe7d249525cea935caaa04660bda/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "filename": "docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java?ref=969951d9b897fe7d249525cea935caaa04660bda"
            }
        ],
        "bug_id": "jclouds-labs_12",
        "parent": "https://github.com/apache/jclouds-labs/commit/589b202eaa61639896e1e6cd53854ef56f608d90",
        "message": "Options use boolean primitive instead of object\n\nThe Boolean object makes passing null value possible, which would cause NPE.",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/f9b393de0e66f100a764e502c7f95508fc6e9053",
        "file": [
            {
                "patch": "@@ -1,8 +1,8 @@\n-## Annotation processing ##\n+## Annotation processing\n In order for value object and service loader auto-generation, you will need to enable annotation processing in your IDE.\n If you notice any inconsistencies in your IDE after you enable annotation processing, try rerunning \"Make Project\".\n \n-## Setting up test credentials ##\n+## Setting up test credentials\n \n Azure requests are signed by via SSL certificate. You need to upload one into your account in order to run tests.\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/README.md",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "7d251d75336c595c38c346965a0dcd8d2f4c2ee6",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/README.md",
                "filename": "azurecompute/README.md",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/README.md?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -35,7 +35,7 @@\n   <properties>\n     <test.jclouds.azurecompute.subscription-id>FIXME_subscription-id</test.jclouds.azurecompute.subscription-id>\n     <!-- note that there's no prefix of \"test.\" in the url.  This is to ensure that jclouds inteprets the value, as opposed to maven -->\n-    <test.azurecompute.endpoint>https://management.core.windows.net/${jclouds.azurecompute.subscription-id}</test.azurecompute.endpoint>\n+    <test.azurecompute.endpoint>https://management.core.windows.net/${test.jclouds.azurecompute.subscription-id}</test.azurecompute.endpoint>\n     <test.azurecompute.api-version>2014-10-01</test.azurecompute.api-version>\n     <test.azurecompute.build-version />\n     <test.azurecompute.identity>/path/to/cert.p12</test.azurecompute.identity>",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/pom.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e950f164fa9a656e52f7ac50adff7b197b1bd263",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/pom.xml",
                "filename": "azurecompute/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/pom.xml?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -21,8 +21,6 @@\n import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_TIMEOUT;\n import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_FORMAT;\n import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_REGEXP;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TEMPLATE;\n-\n import java.net.URI;\n import java.util.Properties;\n \n@@ -50,7 +48,6 @@ public AzureComputeProviderMetadata() {\n \n    public static Properties defaultProperties() {\n       final Properties properties = AzureManagementApiMetadata.defaultProperties();\n-      properties.setProperty(TEMPLATE, \"osFamily=UBUNTU,loginUser=jclouds\");\n       properties.setProperty(OPERATION_TIMEOUT, \"60000\");\n       properties.setProperty(OPERATION_POLL_INITIAL_PERIOD, \"5\");\n       properties.setProperty(OPERATION_POLL_MAX_PERIOD, \"15\");",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/AzureComputeProviderMetadata.java",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "731b52fb8e25c10fd01e7af629e49f9e26d551c8",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/AzureComputeProviderMetadata.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/AzureComputeProviderMetadata.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/AzureComputeProviderMetadata.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -29,7 +29,6 @@\n public final class DeploymentParamsToXML implements Binder {\n \n    @Override\n-   @SuppressWarnings(\"unchecked\")\n    public <R extends HttpRequest> R bindToRequest(R request, Object input) {\n       DeploymentParams params = DeploymentParams.class.cast(input);\n \n@@ -60,6 +59,12 @@\n                     .e(\"JoinDomain\").t(params.name()).up()\n                     .up() // Domain Join\n                     .e(\"StoredCertificateSettings\").up()\n+                    .e(\"WinRM\")\n+                    .e(\"Listeners\")\n+                    .e(\"Listener\")\n+                    .e(\"Protocol\").t(\"http\").up().up().up().up()\n+                    .e(\"AdminUsername\").t(params.username()).up()\n+                    .e(\"AdminPassword\").t(params.username()).up()\n                     .up(); // Windows ConfigurationSet\n          } else if (params.os() == OSImage.Type.LINUX) {\n             XMLBuilder configBuilder = builder.e(\"ConfigurationSet\"); // Linux\n@@ -90,12 +95,13 @@\n          }\n \n          inputEndpoints.up();\n-         //configBuilder.e(\"SubnetNames\").up().up();\n \n          XMLBuilder subnetNames = configBuilder.e(\"SubnetNames\");\n-         for (String subnetName : params.subnetNames()) {\n-            subnetNames.e(\"SubnetName\").t(subnetName).up()\n-                    .up(); //subnetName\n+         if (!params.subnetNames().isEmpty()) {\n+            for (String subnetName : params.subnetNames()) {\n+               subnetNames.e(\"SubnetName\").t(subnetName).up()\n+                       .up(); //subnetName\n+            }\n          }\n \n          builder.up() //ConfigurationSets\n@@ -105,21 +111,21 @@\n                  .e(\"HostCaching\").t(\"ReadWrite\").up()\n                  .e(\"MediaLink\").t(params.mediaLink().toASCIIString()).up()\n                  // TODO\n-                 /// If you are using a VM image, it must be specified as VMImageName for the role, \n+                 /// If you are using a VM image, it must be specified as VMImageName for the role,\n                  // not as SourceImageNamefor OSVirtualHardDisk.</Message></Error>]\n                  .e(\"SourceImageName\").t(params.sourceImageName()).up()\n                  .e(\"OS\").t(params.os() == LINUX ? \"Linux\" : \"Windows\").up()\n                  .up() //OSVirtualHardDisk\n                  .e(\"RoleSize\").t(params.size().getText()).up()\n                  .up() //Role\n-                 .up() //RoleList\n-                 .e(\"VirtualNetworkName\").t(params.virtualNetworkName()).up();\n-         \n+                 .up(); //RoleList\n+         if (params.virtualNetworkName() != null) {\n+            builder.up().up().up().e(\"VirtualNetworkName\").t(params.virtualNetworkName()).up();\n+         }\n          if (params.reservedIPName() != null) {\n             builder.up().up().up().e(\"ReservedIPName\").t(params.reservedIPName()).up();\n          }\n-         \n-         // TODO: Undeprecate this method as forcing users to wrap a String in guava's ByteSource is not great.\n+\n          return (R) request.toBuilder().payload(builder.asString()).build();\n       } catch (Exception e) {\n          throw propagate(e);",
                "additions": 17,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/binders/DeploymentParamsToXML.java",
                "status": "modified",
                "changes": 28,
                "deletions": 11,
                "sha": "c220551fa33f901e680a5411f3fd8b88e1ab70b3",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/binders/DeploymentParamsToXML.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/binders/DeploymentParamsToXML.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/binders/DeploymentParamsToXML.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -52,8 +52,10 @@\n                           .up(); //InputEndpoint\n                }\n                XMLBuilder subnetNames = configBuilder.e(\"SubnetNames\");\n-               for (Role.ConfigurationSet.SubnetName subnetName : configurationSet.subnetNames()) {\n-                  subnetNames.e(\"SubnetName\").t(subnetName.name()).up();\n+               if (!configurationSet.subnetNames().isEmpty()) {\n+                  for (Role.ConfigurationSet.SubnetName subnetName : configurationSet.subnetNames()) {\n+                     subnetNames.e(\"SubnetName\").t(subnetName.name()).up();\n+                  }\n                }\n                if (configurationSet.networkSecurityGroup() != null\n                        && !configurationSet.networkSecurityGroup().isEmpty()) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/binders/RoleToXML.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "e5f1b26ba383362f9798456f7dce44a2e3e47594",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/binders/RoleToXML.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/binders/RoleToXML.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/binders/RoleToXML.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,11 +16,11 @@\n  */\n package org.jclouds.azurecompute.compute;\n \n+import static com.google.common.base.Objects.firstNonNull;\n import static com.google.common.base.Predicates.notNull;\n import static java.lang.String.format;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.jclouds.util.Predicates2.retry;\n-\n import java.net.URI;\n import java.util.List;\n import java.util.Set;\n@@ -32,18 +32,19 @@\n \n import org.jclouds.azurecompute.AzureComputeApi;\n import org.jclouds.azurecompute.compute.config.AzureComputeServiceContextModule.AzureComputeConstants;\n+import org.jclouds.azurecompute.compute.functions.OSImageToImage;\n+import org.jclouds.azurecompute.compute.options.AzureComputeTemplateOptions;\n import org.jclouds.azurecompute.config.AzureComputeProperties;\n import org.jclouds.azurecompute.domain.CloudService;\n import org.jclouds.azurecompute.domain.Deployment;\n+import org.jclouds.azurecompute.domain.Deployment.RoleInstance;\n import org.jclouds.azurecompute.domain.DeploymentParams;\n import org.jclouds.azurecompute.domain.DeploymentParams.ExternalEndpoint;\n import org.jclouds.azurecompute.domain.Location;\n import org.jclouds.azurecompute.domain.OSImage;\n-import org.jclouds.azurecompute.domain.RoleSize;\n-import org.jclouds.azurecompute.domain.Deployment.RoleInstance;\n import org.jclouds.azurecompute.domain.Role;\n-import org.jclouds.azurecompute.compute.functions.OSImageToImage;\n-import org.jclouds.azurecompute.options.AzureComputeTemplateOptions;\n+import org.jclouds.azurecompute.domain.RoleSize;\n+import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n import org.jclouds.compute.ComputeServiceAdapter;\n import org.jclouds.compute.domain.OsFamily;\n import org.jclouds.compute.domain.Template;\n@@ -59,7 +60,6 @@\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n \n /**\n  * Defines the connection between the {@link AzureComputeApi} implementation and the jclouds\n@@ -71,6 +71,7 @@\n    private static final String DEFAULT_LOGIN_USER = \"jclouds\";\n \n    private static final String DEFAULT_LOGIN_PASSWORD = \"Azur3Compute!\";\n+   public static final String POST_SHUTDOWN_ACTION = \"StoppedDeallocated\";\n \n    @Resource\n    @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n@@ -98,35 +99,30 @@\n       // azure-specific options\n       final AzureComputeTemplateOptions templateOptions = template.getOptions().as(AzureComputeTemplateOptions.class);\n \n-      final String loginUser = templateOptions.getLoginUser() == null\n-              ? DEFAULT_LOGIN_USER : templateOptions.getLoginUser();\n-      final String loginPassword = templateOptions.getLoginPassword() == null\n-              ? DEFAULT_LOGIN_PASSWORD : templateOptions.getLoginPassword();\n+      final String loginUser = firstNonNull(templateOptions.getLoginUser(), DEFAULT_LOGIN_USER);\n+      final String loginPassword = firstNonNull(templateOptions.getLoginPassword(), DEFAULT_LOGIN_PASSWORD);\n       final String location = template.getLocation().getId();\n       final int[] inboundPorts = template.getOptions().getInboundPorts();\n \n-      final String storageAccountName = templateOptions.getStorageAccountName().get();\n-      final String virtualNetworkName = templateOptions.getVirtualNetworkName().get();\n-      final String reservedIPAddress = templateOptions.getReservedIPName().orNull();\n-      final String subnetName = templateOptions.getSubnetName().get();\n+      final String storageAccountName = templateOptions.getStorageAccountName();\n \n-      logger.debug(\"Creating a cloud service with name '%s', label '%s' in location '%s'\", name, name, location);\n-      final String createCloudServiceRequestId\n-              = api.getCloudServiceApi().createWithLabelInLocation(name, name, location);\n+      String message = String.format(\"Creating a cloud service with name '%s', label '%s' in location '%s'\", name, name, location);\n+      logger.debug(message);\n+      final String createCloudServiceRequestId = api.getCloudServiceApi().createWithLabelInLocation(name, name, location);\n       if (!operationSucceededPredicate.apply(createCloudServiceRequestId)) {\n-         final String message = generateIllegalStateExceptionMessage(\n-                 createCloudServiceRequestId, azureComputeConstants.operationTimeout());\n-         logger.warn(message);\n-         throw new IllegalStateException(message);\n+         final String exceptionMessage = generateIllegalStateExceptionMessage(message, createCloudServiceRequestId, azureComputeConstants.operationTimeout());\n+         logger.warn(exceptionMessage);\n+         throw new IllegalStateException(exceptionMessage);\n       }\n       logger.info(\"Cloud Service (%s) created with operation id: %s\", name, createCloudServiceRequestId);\n \n-      final OSImage.Type os = template.getImage().getOperatingSystem().getFamily() == OsFamily.WINDOWS\n-              ? OSImage.Type.WINDOWS : OSImage.Type.LINUX;\n+      final OSImage.Type os = template.getImage().getOperatingSystem().getFamily() == OsFamily.WINDOWS ?\n+              OSImage.Type.WINDOWS : OSImage.Type.LINUX;\n       final Set<ExternalEndpoint> externalEndpoints = Sets.newHashSet();\n       for (int inboundPort : inboundPorts) {\n          externalEndpoints.add(ExternalEndpoint.inboundTcpToLocalPort(inboundPort, inboundPort));\n       }\n+\n       final DeploymentParams params = DeploymentParams.builder()\n               .name(name)\n               .os(os)\n@@ -136,26 +132,25 @@\n               .mediaLink(createMediaLink(storageAccountName, name))\n               .size(RoleSize.Type.fromString(template.getHardware().getName()))\n               .externalEndpoints(externalEndpoints)\n-              .subnetName(subnetName)\n-              .virtualNetworkName(virtualNetworkName)\n-              .reservedIPName(reservedIPAddress)\n+              .virtualNetworkName(templateOptions.getVirtualNetworkName())\n+              .subnetNames(templateOptions.getSubnetNames())\n               .build();\n \n-      logger.debug(\"Creating a deployment with params '%s' ...\", params);\n+      message = String.format(\"Creating a deployment with params '%s' ...\", params);\n+      logger.debug(message);\n \n       if (!new ConflictManagementPredicate(api) {\n          @Override\n          protected String operation() {\n             return api.getDeploymentApiForService(name).create(params);\n          }\n       }.apply(name)) {\n-         final String message = generateIllegalStateExceptionMessage(\n-                 createCloudServiceRequestId, azureComputeConstants.operationTimeout());\n-         logger.warn(message);\n+         final String illegalStateExceptionMessage = generateIllegalStateExceptionMessage(message, createCloudServiceRequestId, azureComputeConstants.operationTimeout());\n+         logger.warn(illegalStateExceptionMessage);\n          logger.debug(\"Deleting cloud service (%s) ...\", name);\n          deleteCloudService(name);\n          logger.debug(\"Cloud service (%s) deleted.\", name);\n-         throw new IllegalStateException(message);\n+         throw new IllegalStateException(illegalStateExceptionMessage);\n       }\n \n       logger.info(\"Deployment created with name: %s\", name);\n@@ -171,25 +166,23 @@ public boolean apply(final String name) {\n             return !deployments.isEmpty();\n          }\n       }, azureComputeConstants.operationTimeout(), 1, SECONDS).apply(name)) {\n-         final String message = format(\"Deployment %s was not created within %sms so it will be destroyed.\",\n+         final String illegalStateExceptionMessage = format(\"Deployment %s was not created within %sms so it will be destroyed.\",\n                  name, azureComputeConstants.operationTimeout());\n-         logger.warn(message);\n+         logger.warn(illegalStateExceptionMessage);\n \n          api.getDeploymentApiForService(name).delete(name);\n          api.getCloudServiceApi().delete(name);\n \n-         throw new IllegalStateException(message);\n+         throw new IllegalStateException(illegalStateExceptionMessage);\n       }\n \n       final Deployment deployment = deployments.iterator().next();\n-      return new NodeAndInitialCredentials<Deployment>(deployment, name,\n-              LoginCredentials.builder().user(loginUser).password(loginPassword).build());\n-   }\n \n-   public static String generateIllegalStateExceptionMessage(final String operationId, final long timeout) {\n-      final String warnMessage = format(\"%s has not been completed within %sms.\", operationId, timeout);\n-      return format(\"%s. Please, try by increasing `%s` and try again\",\n-              warnMessage, AzureComputeProperties.OPERATION_TIMEOUT);\n+      // check if the role inside the deployment is ready\n+      checkRoleStatusInDeployment(name, deployment);\n+\n+      return new NodeAndInitialCredentials<Deployment>(deployment, name,\n+              LoginCredentials.builder().user(loginUser).password(loginPassword).authenticateSudo(true).build());\n    }\n \n    @Override\n@@ -299,67 +292,33 @@ public boolean apply(final RoleInstance input) {\n    private void trackRequest(final String requestId) {\n       if (!operationSucceededPredicate.apply(requestId)) {\n          final String message = generateIllegalStateExceptionMessage(\n-                 requestId, azureComputeConstants.operationTimeout());\n+                 \"tracking request\", requestId, azureComputeConstants.operationTimeout());\n          logger.warn(message);\n          throw new IllegalStateException(message);\n       }\n    }\n \n-   private List<CloudService> getCloudServicesForDeployment(final String id) {\n-      return FluentIterable.from(api.getCloudServiceApi().list()).filter(new Predicate<CloudService>() {\n-\n-         @Override\n-         public boolean apply(final CloudService input) {\n-            final Deployment deployment\n-                    = input.status() == CloudService.Status.DELETING || input.status() == CloudService.Status.DELETED\n-                            ? null\n-                            : api.getDeploymentApiForService(input.name()).get(id);\n-            return deployment != null && deployment.status() != Deployment.Status.DELETING;\n-         }\n-      }).toList();\n-   }\n-\n-   public Deployment internalDestroyNode(final String id) {\n-      Deployment deployment = null;\n-\n-      for (CloudService cloudService : getCloudServicesForDeployment(id)) {\n-         final List<Deployment> nodes = Lists.newArrayList();\n-         retry(new Predicate<String>() {\n-            @Override\n-            public boolean apply(final String input) {\n-               final Deployment deployment = getNode(id);\n-               if (deployment != null) {\n-                  nodes.add(deployment);\n-               }\n-               return !nodes.isEmpty();\n-            }\n-         }, 30 * 60, 1, SECONDS).apply(id);\n+   public Deployment internalDestroyNode(final String nodeId) {\n \n-         if (!nodes.isEmpty()) {\n-            deployment = nodes.iterator().next();\n-         }\n+      Deployment deployment = getDeploymentFromNodeId(nodeId);\n \n-         final String cloudServiceName = cloudService.name();\n-         logger.debug(\"Deleting deployment(%s) of cloud service (%s)\", id, cloudServiceName);\n+      if (deployment == null) return null;\n \n-         if (!new ConflictManagementPredicate(api, operationSucceededPredicate) {\n+      final String deploymentName = deployment.name();\n+      String message = String.format(\"Deleting deployment(%s) of cloud service (%s)\", nodeId, deploymentName);\n+      logger.debug(message);\n \n-            @Override\n-            protected String operation() {\n-               return api.getDeploymentApiForService(cloudServiceName).delete(id);\n+         if (deployment != null) {\n+            for (Role role : deployment.roleList()) {\n+               trackRequest(api.getVirtualMachineApiForDeploymentInService(deploymentName, role.roleName()).shutdown(nodeId, POST_SHUTDOWN_ACTION));\n             }\n-         }.apply(id)) {\n-            final String message = generateIllegalStateExceptionMessage(\n-                    \"Delete deployment\", azureComputeConstants.operationTimeout());\n-            logger.warn(message);\n-            throw new IllegalStateException(message);\n-         }\n \n-         logger.debug(\"Deleting cloud service (%s) ...\", cloudServiceName);\n-         trackRequest(api.getCloudServiceApi().delete(cloudServiceName));\n-         logger.debug(\"Cloud service (%s) deleted.\", cloudServiceName);\n+            deleteDeployment(deploymentName, nodeId);\n+\n+            logger.debug(\"Deleting cloud service (%s) ...\", deploymentName);\n+            trackRequest(api.getCloudServiceApi().delete(deploymentName));\n+            logger.debug(\"Cloud service (%s) deleted.\", deploymentName);\n \n-         if (deployment != null) {\n             for (Role role : deployment.roleList()) {\n                final Role.OSVirtualHardDisk disk = role.osVirtualHardDisk();\n                if (disk != null) {\n@@ -369,22 +328,41 @@ protected String operation() {\n                      protected String operation() {\n                         return api.getDiskApi().delete(disk.diskName());\n                      }\n-                  }.apply(id)) {\n-                     final String message = generateIllegalStateExceptionMessage(\n+                  }.apply(nodeId)) {\n+                     final String illegalStateExceptionMessage = generateIllegalStateExceptionMessage(\"Delete disk \" + disk.diskName(),\n                              \"Delete disk\", azureComputeConstants.operationTimeout());\n-                     logger.warn(message);\n+                     logger.warn(illegalStateExceptionMessage);\n                   }\n                }\n             }\n          }\n-      }\n-\n       return deployment;\n    }\n \n+   public Deployment getDeploymentFromNodeId(final String nodeId) {\n+      final List<Deployment> nodes = Lists.newArrayList();\n+      retry(new Predicate<String>() {\n+         @Override\n+         public boolean apply(final String input) {\n+            final Deployment deployment = getNode(nodeId);\n+            if (deployment != null) {\n+               nodes.add(deployment);\n+            }\n+            return !nodes.isEmpty();\n+         }\n+      }, 30 * 60, 1, SECONDS).apply(nodeId);\n+\n+      return Iterables.getFirst(nodes, null);\n+   }\n+\n    @Override\n    public void destroyNode(final String id) {\n-      internalDestroyNode(id);\n+      logger.debug(\"Destroying %s ...\", id);\n+      if (internalDestroyNode(id) != null) {\n+         logger.debug(\"Destroyed %s!\", id);\n+      } else {\n+         logger.warn(\"Can't destroy %s!\", id);\n+      }\n    }\n \n    @Override\n@@ -412,7 +390,7 @@ public void suspendNode(final String id) {\n       final CloudService cloudService = api.getCloudServiceApi().get(id);\n       if (cloudService != null) {\n          logger.debug(\"Suspending %s ...\", id);\n-         trackRequest(api.getVirtualMachineApiForDeploymentInService(id, cloudService.name()).shutdown(id));\n+         trackRequest(api.getVirtualMachineApiForDeploymentInService(id, cloudService.name()).shutdown(id, POST_SHUTDOWN_ACTION));\n          logger.debug(\"Suspended %s\", id);\n       }\n    }\n@@ -455,7 +433,7 @@ protected String operation() {\n          }\n \n       }.apply(name)) {\n-         final String deleteMessage = generateIllegalStateExceptionMessage(\n+         final String deleteMessage = generateIllegalStateExceptionMessage(\"Delete cloud service \" + name,\n                  \"CloudService delete\", azureComputeConstants.operationTimeout());\n          logger.warn(deleteMessage);\n          throw new IllegalStateException(deleteMessage);\n@@ -471,10 +449,53 @@ protected String operation() {\n          }\n \n       }.apply(id)) {\n-         final String deleteMessage = generateIllegalStateExceptionMessage(\n+         final String deleteMessage = generateIllegalStateExceptionMessage(\"Delete deployment \" + cloudServiceName,\n                  \"Deployment delete\", azureComputeConstants.operationTimeout());\n          logger.warn(deleteMessage);\n          throw new IllegalStateException(deleteMessage);\n       }\n    }\n+\n+\n+   private void checkRoleStatusInDeployment(final String name, Deployment deployment) {\n+      if (!retry(new Predicate<Deployment>() {\n+\n+         @Override\n+         public boolean apply(Deployment deployment) {\n+            deployment = api.getDeploymentApiForService(deployment.name()).get(name);\n+            if (deployment.roleInstanceList() == null || deployment.roleInstanceList().isEmpty()) return false;\n+            return Iterables.all(deployment.roleInstanceList(), new Predicate<RoleInstance>() {\n+               @Override\n+               public boolean apply(RoleInstance input) {\n+                  if (input.instanceStatus() == Deployment.InstanceStatus.PROVISIONING_FAILED) {\n+                     final String message = format(\"Deployment %s is in provisioning failed status, so it will be destroyed.\", name);\n+                     logger.warn(message);\n+\n+                     api.getDeploymentApiForService(name).delete(name);\n+                     api.getCloudServiceApi().delete(name);\n+\n+                     throw new IllegalStateException(message);\n+                  }\n+                  return input.instanceStatus() == Deployment.InstanceStatus.READY_ROLE;\n+               }\n+            });\n+         }\n+      }, azureComputeConstants.operationTimeout(), 1, SECONDS).apply(deployment)) {\n+         final String message = format(\"Role %s has not reached the READY_ROLE within %sms so it will be destroyed.\",\n+                 deployment.name(), azureComputeConstants.operationTimeout());\n+         logger.warn(message);\n+\n+         api.getDeploymentApiForService(name).delete(name);\n+         api.getCloudServiceApi().delete(name);\n+\n+         throw new IllegalStateException(message);\n+      }\n+   }\n+\n+   public static String generateIllegalStateExceptionMessage(String prefix, final String operationId, final long timeout) {\n+      final String warnMessage = format(\"%s - %s has not been completed within %sms.\", prefix, operationId, timeout);\n+      return format(\"%s. Please, try by increasing `%s` and try again\",\n+              warnMessage, AzureComputeProperties.OPERATION_TIMEOUT);\n+   }\n+\n }",
                "additions": 120,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapter.java",
                "status": "modified",
                "changes": 219,
                "deletions": 99,
                "sha": "ec605eaeeea53c59242c0e803a7617b8ffdee7e6",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapter.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapter.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -21,7 +21,6 @@\n import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_TIMEOUT;\n import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_FORMAT;\n import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_REGEXP;\n-\n import java.util.concurrent.TimeUnit;\n \n import javax.inject.Named;\n@@ -34,14 +33,13 @@\n import org.jclouds.azurecompute.compute.functions.LocationToLocation;\n import org.jclouds.azurecompute.compute.functions.OSImageToImage;\n import org.jclouds.azurecompute.compute.functions.RoleSizeToHardware;\n+import org.jclouds.azurecompute.compute.options.AzureComputeTemplateOptions;\n import org.jclouds.azurecompute.compute.strategy.GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes;\n import org.jclouds.azurecompute.compute.strategy.UseNodeCredentialsButOverrideFromTemplate;\n-import org.jclouds.azurecompute.compute.strategy.impl.AzureAdaptingComputeServiceStrategies;\n import org.jclouds.azurecompute.domain.Deployment;\n import org.jclouds.azurecompute.domain.Location;\n import org.jclouds.azurecompute.domain.OSImage;\n import org.jclouds.azurecompute.domain.RoleSize;\n-import org.jclouds.azurecompute.options.AzureComputeTemplateOptions;\n import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n import org.jclouds.compute.ComputeServiceAdapter;\n import org.jclouds.compute.config.ComputeServiceAdapterContextModule;\n@@ -51,7 +49,6 @@\n import org.jclouds.compute.options.TemplateOptions;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.PrioritizeCredentialsFromTemplate;\n-import org.jclouds.compute.strategy.impl.AdaptingComputeServiceStrategies;\n \n import com.google.common.base.Function;\n import com.google.common.base.Predicate;\n@@ -74,8 +71,6 @@ protected void configure() {\n       }).to(RoleSizeToHardware.class);\n       bind(new TypeLiteral<Function<Deployment, NodeMetadata>>() {\n       }).to(DeploymentToNodeMetadata.class);\n-      bind(new TypeLiteral<AdaptingComputeServiceStrategies<Deployment, RoleSize, OSImage, Location>>() {\n-      }).to(AzureAdaptingComputeServiceStrategies.class);\n \n       bind(PrioritizeCredentialsFromTemplate.class).to(UseNodeCredentialsButOverrideFromTemplate.class);\n       bind(new TypeLiteral<Function<Location, org.jclouds.domain.Location>>() {",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/config/AzureComputeServiceContextModule.java",
                "status": "modified",
                "changes": 7,
                "deletions": 6,
                "sha": "8d902d149cf2aca6cedc0e8cffb3141ab16b8983",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/config/AzureComputeServiceContextModule.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/config/AzureComputeServiceContextModule.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/config/AzureComputeServiceContextModule.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -17,7 +17,7 @@\n package org.jclouds.azurecompute.compute.extensions;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n+import static org.jclouds.azurecompute.compute.AzureComputeServiceAdapter.generateIllegalStateExceptionMessage;\n import java.util.List;\n import java.util.Set;\n \n@@ -27,16 +27,14 @@\n \n import org.jclouds.azurecompute.AzureComputeApi;\n import org.jclouds.azurecompute.compute.config.AzureComputeServiceContextModule.AzureComputeConstants;\n-import org.jclouds.azurecompute.domain.CloudService;\n import org.jclouds.azurecompute.domain.Deployment;\n-import org.jclouds.azurecompute.domain.Deployment.Status;\n import org.jclouds.azurecompute.domain.NetworkConfiguration;\n import org.jclouds.azurecompute.domain.NetworkConfiguration.VirtualNetworkSite;\n import org.jclouds.azurecompute.domain.NetworkSecurityGroup;\n import org.jclouds.azurecompute.domain.Role;\n import org.jclouds.azurecompute.domain.Rule;\n-import org.jclouds.azurecompute.util.NetworkSecurityGroups;\n import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n+import org.jclouds.azurecompute.util.NetworkSecurityGroups;\n import org.jclouds.compute.domain.SecurityGroup;\n import org.jclouds.compute.domain.SecurityGroupBuilder;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n@@ -48,12 +46,10 @@\n \n import com.google.common.base.Function;\n import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n import com.google.common.base.Splitter;\n import com.google.common.collect.FluentIterable;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Multimap;\n-import static org.jclouds.azurecompute.compute.AzureComputeServiceAdapter.generateIllegalStateExceptionMessage;\n \n /**\n  * An extension to compute service to allow for the manipulation of {@link org.jclouds.compute.domain.SecurityGroup}s.\n@@ -154,7 +150,7 @@ public SecurityGroup createSecurityGroup(final String name, final Location locat\n               name, name, location.getId(), null, null);\n       final String createNSGRequestId = api.getNetworkSecurityGroupApi().create(networkSecurityGroup);\n       if (!operationSucceededPredicate.apply(createNSGRequestId)) {\n-         final String message = generateIllegalStateExceptionMessage(\n+         final String message = generateIllegalStateExceptionMessage(\"Create NSG\" + name,\n                  createNSGRequestId, azureComputeConstants.operationTimeout());\n          logger.warn(message);\n          throw new IllegalStateException(message);\n@@ -195,7 +191,7 @@ protected String operation() {\n                                    virtualNetworkName, subnetName, id);\n                         }\n                      }.apply(id)) {\n-                        final String message = generateIllegalStateExceptionMessage(\n+                        final String message = generateIllegalStateExceptionMessage(\"Remove NSG\" + id + \" from subnet \" + subnetName,\n                                 \"Remove security group from subnet\", azureComputeConstants.operationTimeout());\n                         logger.warn(message);\n                         throw new IllegalStateException(message);\n@@ -225,59 +221,6 @@ public SecurityGroup addIpPermission(final IpPermission ipPermission, final Secu\n       // add rule to NSG\n       addRuleToNetworkSecurityGroup(id, ruleName, priority, ipPermission);\n \n-      // add endpoint to VM\n-      for (final CloudService service : api.getCloudServiceApi().list()) {\n-         // TODO filter deployments\n-         final Deployment deployment = api.getDeploymentApiForService(service.name()).get(service.name());\n-         if (deployment != null && deployment.status() != Status.DELETING) {\n-            for (Deployment.VirtualIP vip : Iterables.filter(deployment.virtualIPs(), Predicates.notNull())) {\n-               for (final Role role : deployment.roleList()) {\n-                  for (Role.ConfigurationSet configurationSet : role.configurationSets()) {\n-                     if (ipPermission.getFromPort() < ipPermission.getToPort()) {\n-                        for (int i = ipPermission.getFromPort(); i <= ipPermission.getToPort(); i++) {\n-                           final String name = NetworkSecurityGroups.createRuleName(\n-                                   azureComputeConstants.tcpRuleFormat(), i, i);\n-                           configurationSet.inputEndpoints().add(createInputEndpoint(\n-                                   name,\n-                                   ipPermission.getIpProtocol().name(),\n-                                   vip.address(),\n-                                   i));\n-                        }\n-                     } else {\n-                        configurationSet.inputEndpoints().add(createInputEndpoint(\n-                                ruleName,\n-                                ipPermission.getIpProtocol().name(),\n-                                vip.address(),\n-                                ipPermission.getToPort()));\n-                     }\n-                  }\n-\n-                  if (!new ConflictManagementPredicate(api, operationSucceededPredicate) {\n-\n-                     @Override\n-                     protected String operation() {\n-                        // Check for deployment validity\n-                        final Deployment deployment = api.getDeploymentApiForService(\n-                                service.name()).get(service.name());\n-                        if (deployment == null || deployment.status() == Status.DELETING) {\n-                           return null;\n-                        } else {\n-                           return api.getVirtualMachineApiForDeploymentInService(\n-                                   deployment.name(), deployment.name()).\n-                                   updateRole(role.roleName(), role);\n-                        }\n-                     }\n-                  }.apply(role.roleName())) {\n-                     final String message = generateIllegalStateExceptionMessage(\n-                             \"Operation\", azureComputeConstants.operationTimeout());\n-                     logger.warn(message);\n-                     throw new IllegalStateException(message);\n-                  }\n-               }\n-            }\n-         }\n-      }\n-\n       return transformNetworkSecurityGroupToSecurityGroup(id);\n    }\n \n@@ -315,50 +258,6 @@ public SecurityGroup removeIpPermission(final IpPermission ipPermission, final S\n       // remove rule to NSG\n       removeRuleFromNetworkSecurityGroup(id, ruleName);\n \n-      // TODO remove endpoint from VM\n-      for (final CloudService service : api.getCloudServiceApi().list()) {\n-         // TODO remove endpoint from VM\n-         final Deployment deployment = api.getDeploymentApiForService(service.name()).get(service.name());\n-         if (deployment != null && deployment.status() != Status.DELETING) {\n-            for (Deployment.VirtualIP vip : Iterables.filter(deployment.virtualIPs(), Predicates.notNull())) {\n-               for (final Role role : deployment.roleList()) {\n-                  for (Role.ConfigurationSet configurationSet : role.configurationSets()) {\n-                     for (int i = ipPermission.getFromPort(); i <= ipPermission.getToPort(); i++) {\n-                        final String name = NetworkSecurityGroups.createRuleName(\n-                                azureComputeConstants.tcpRuleFormat(), i, i);\n-                        configurationSet.inputEndpoints().remove(createInputEndpoint(\n-                                name,\n-                                ipPermission.\n-                                getIpProtocol().name().toLowerCase(),\n-                                vip.address(),\n-                                i));\n-                     }\n-                  }\n-\n-                  if (!new ConflictManagementPredicate(api, operationSucceededPredicate) {\n-                     @Override\n-                     protected String operation() {\n-                        // Check for deployment validity\n-                        final Deployment deployment = api.getDeploymentApiForService(\n-                                service.name()).get(service.name());\n-                        if (deployment == null || deployment.status() == Status.DELETING) {\n-                           return null;\n-                        } else {\n-                           return api.getVirtualMachineApiForDeploymentInService(\n-                                   deployment.name(), deployment.name()).updateRole(role.roleName(), role);\n-                        }\n-                     }\n-                  }.apply(role.roleName())) {\n-                     final String message = generateIllegalStateExceptionMessage(\n-                             \"Operation\", azureComputeConstants.operationTimeout());\n-                     logger.warn(message);\n-                     throw new IllegalStateException(message);\n-                  }\n-               }\n-            }\n-         }\n-      }\n-\n       return transformNetworkSecurityGroupToSecurityGroup(id);\n    }\n \n@@ -473,7 +372,7 @@ private void addRuleToNetworkSecurityGroup(final String networkSecurityGroupId,\n                               destinationPortRange, // destinationPortRange\n                               Rule.Protocol.fromString(protocol)));\n       if (!operationSucceededPredicate.apply(setRuleToNSGRequestId)) {\n-         final String message = generateIllegalStateExceptionMessage(\n+         final String message = generateIllegalStateExceptionMessage(\"Add rule \" + ruleName,\n                  setRuleToNSGRequestId, azureComputeConstants.operationTimeout());\n          logger.warn(message);\n          throw new IllegalStateException(message);\n@@ -483,27 +382,11 @@ private void addRuleToNetworkSecurityGroup(final String networkSecurityGroupId,\n    private void removeRuleFromNetworkSecurityGroup(final String id, final String ruleName) {\n       String setRuleToNSGRequestId = api.getNetworkSecurityGroupApi().deleteRule(id, ruleName);\n       if (!operationSucceededPredicate.apply(setRuleToNSGRequestId)) {\n-         final String message = generateIllegalStateExceptionMessage(\n+         final String message = generateIllegalStateExceptionMessage(\"Remove rule \" + ruleName,\n                  setRuleToNSGRequestId, azureComputeConstants.operationTimeout());\n          logger.warn(message);\n          throw new IllegalStateException(message);\n       }\n    }\n \n-   private Role.ConfigurationSet.InputEndpoint createInputEndpoint(\n-           final String ruleName, final String protocol, final String address, final int port) {\n-\n-      return Role.ConfigurationSet.InputEndpoint.create(\n-              ruleName,\n-              protocol,\n-              port,\n-              port,\n-              address,\n-              false, // enabledDirectServerReturn\n-              null, // loadBalancerName\n-              null, // loadBalancerProbe\n-              null //idleTimeoutInMinutes\n-      );\n-   }\n-\n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "status": "modified",
                "changes": 129,
                "deletions": 123,
                "sha": "f24c5fe8469634a89775aa2f6df5b55abee49744",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/extensions/AzureComputeSecurityGroupExtension.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,15 +16,16 @@\n  */\n package org.jclouds.azurecompute.compute.functions;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import java.util.Map;\n import java.util.Set;\n \n import javax.inject.Inject;\n \n import org.jclouds.azurecompute.AzureComputeApi;\n+import org.jclouds.azurecompute.domain.CloudService;\n import org.jclouds.azurecompute.domain.Deployment;\n import org.jclouds.azurecompute.domain.Deployment.RoleInstance;\n-import org.jclouds.azurecompute.domain.CloudService;\n import org.jclouds.collect.Memoized;\n import org.jclouds.compute.domain.NodeMetadata;\n import org.jclouds.compute.domain.NodeMetadataBuilder;\n@@ -35,7 +36,6 @@\n \n import com.google.common.base.Function;\n import com.google.common.base.Optional;\n-import com.google.common.base.Preconditions;\n import com.google.common.base.Supplier;\n import com.google.common.collect.FluentIterable;\n import com.google.common.collect.ImmutableMap;\n@@ -53,6 +53,7 @@\n            put(Deployment.InstanceStatus.FAILED_STARTING_ROLE, NodeMetadata.Status.ERROR).\n            put(Deployment.InstanceStatus.FAILED_STARTING_VM, NodeMetadata.Status.ERROR).\n            put(Deployment.InstanceStatus.PREPARING, NodeMetadata.Status.PENDING).\n+           put(Deployment.InstanceStatus.PROVISIONING, NodeMetadata.Status.PENDING).\n            put(Deployment.InstanceStatus.READY_ROLE, NodeMetadata.Status.RUNNING).\n            put(Deployment.InstanceStatus.RESTARTING_ROLE, NodeMetadata.Status.PENDING).\n            put(Deployment.InstanceStatus.STARTING_ROLE, NodeMetadata.Status.PENDING).\n@@ -97,7 +98,7 @@\n            RoleSizeToHardware roleSizeToHardware, Map<String, Credentials> credentialStore) {\n \n       this.nodeNamingConvention = namingConvention.createWithoutPrefix();\n-      this.locations = Preconditions.checkNotNull(locations, \"locations\");\n+      this.locations = checkNotNull(locations, \"locations\");\n       this.osImageToImage = osImageToImage;\n       this.roleSizeToHardware = roleSizeToHardware;\n       this.credentialStore = credentialStore;\n@@ -135,11 +136,13 @@ public NodeMetadata apply(final Deployment from) {\n        */\n       if (from.status() != null) {\n          final Optional<RoleInstance> roleInstance = tryFindFirstRoleInstanceInDeployment(from);\n-         if (roleInstance.isPresent()) {\n+         if (roleInstance.isPresent() && roleInstance.get().instanceStatus() != null) {\n             builder.status(INSTANCESTATUS_TO_NODESTATUS.get(roleInstance.get().instanceStatus()));\n          } else {\n             builder.status(STATUS_TO_NODESTATUS.get(from.status()));\n          }\n+      } else {\n+         builder.status(NodeMetadata.Status.UNRECOGNIZED);\n       }\n \n       final Set<String> publicIpAddresses = Sets.newLinkedHashSet();",
                "additions": 7,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "status": "modified",
                "changes": 11,
                "deletions": 4,
                "sha": "b26532beeb2f00ceca16af24c3206595ec8c8edb",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/DeploymentToNodeMetadata.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -20,6 +20,8 @@\n import org.jclouds.compute.domain.Hardware;\n import org.jclouds.compute.domain.HardwareBuilder;\n import org.jclouds.compute.domain.Processor;\n+import org.jclouds.compute.domain.Volume;\n+import org.jclouds.compute.domain.VolumeBuilder;\n \n import com.google.common.base.Function;\n import com.google.common.collect.ImmutableList;\n@@ -34,29 +36,12 @@ public Hardware apply(RoleSize from) {\n               hypervisor(\"Hyper-V\").\n               processors(ImmutableList.of(new Processor(from.cores(), 2))).\n               ram(from.memoryInMb());\n-\n-      // TODO volumes\n-\t\t/*\n-       * if (from.s() != null) {\n-       * builder.volumes(\n-       * FluentIterable.from(from.getVirtualGuestBlockDevices()).filter(new Predicate<VirtualGuestBlockDevice>() {\n-       * @Override\n-       * public boolean apply(VirtualGuestBlockDevice input) {\n-       * return input.getMountType().equals(\"Disk\");\n-       * }\n-       * })\n-       * .transform(new Function<VirtualGuestBlockDevice, Volume>() {\n-       * @Override\n-       * public Volume apply(VirtualGuestBlockDevice item) {\n-       * float volumeSize = item.getVirtualDiskImage().getCapacity();\n-       * return new VolumeImpl(\n-       * item.getId() + \"\",\n-       * from.isLocalDiskFlag() ? Volume.Type.LOCAL : Volume.Type.SAN,\n-       * volumeSize, null, item.getBootableFlag() == 1, false);\n-       * }\n-       * }).toSet());\n-       * }\n-       */\n+      if (from.virtualMachineResourceDiskSizeInMb() != null) {\n+         builder.volume(new VolumeBuilder()\n+                 .size(Float.valueOf(from.virtualMachineResourceDiskSizeInMb()))\n+                 .type(Volume.Type.LOCAL)\n+                 .build());\n+      }\n       return builder.build();\n    }\n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/RoleSizeToHardware.java",
                "status": "modified",
                "changes": 31,
                "deletions": 23,
                "sha": "5421531c44cf86d223a73dd7148c063ce6a3d893",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/RoleSizeToHardware.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/RoleSizeToHardware.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/functions/RoleSizeToHardware.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -0,0 +1,418 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.azurecompute.compute.options;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jclouds.compute.options.TemplateOptions;\n+import org.jclouds.domain.LoginCredentials;\n+import org.jclouds.javax.annotation.Nullable;\n+import org.jclouds.scriptbuilder.domain.Statement;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Contains options supported by the {@link org.jclouds.compute.ComputeService#createNodesInGroup(\n+ * String, int, org.jclouds.compute.options.TemplateOptions)} operation.\n+ *\n+ * <h2>Usage</h2> The recommended way to instantiate a {@link AzureComputeTemplateOptions} object is to statically\n+ * import {@code AzureComputeTemplateOptions.*} and invoke a static creation method followed by an instance mutator (if\n+ * needed):\n+ * <p>\n+ *\n+ * <pre>\n+ * import static org.jclouds.compute.options.AzureComputeTemplateOptions.Builder.*;\n+ * ComputeService client = // get connection\n+ * templateBuilder.options(inboundPorts(22, 80, 8080, 443));\n+ * Set&lt;? extends NodeMetadata&gt; set = client.createNodesInGroup(tag, 2, templateBuilder.build());\n+ * </pre>\n+ *\n+ */\n+public class AzureComputeTemplateOptions extends TemplateOptions implements Cloneable {\n+\n+   protected String virtualNetworkName;\n+   protected List<String> subnetNames = ImmutableList.of();\n+   protected String storageAccountName;\n+   protected String storageAccountType;\n+   protected String networkSecurityGroupName;\n+   protected String reservedIPName;\n+\n+   @Override\n+   public AzureComputeTemplateOptions clone() {\n+      final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+      copyTo(options);\n+      return options;\n+   }\n+\n+   @Override\n+   public void copyTo(final TemplateOptions to) {\n+      super.copyTo(to);\n+      if (to instanceof AzureComputeTemplateOptions) {\n+         final AzureComputeTemplateOptions eTo = AzureComputeTemplateOptions.class.cast(to);\n+         eTo.virtualNetworkName(virtualNetworkName);\n+         if (!subnetNames.isEmpty()) {\n+            eTo.subnetNames(subnetNames);\n+         }\n+         eTo.storageAccountName(storageAccountName);\n+         eTo.storageAccountType(storageAccountType);\n+         eTo.reservedIPName(reservedIPName);\n+      }\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o) return true;\n+      if (!(o instanceof AzureComputeTemplateOptions)) return false;\n+      if (!super.equals(o)) return false;\n+\n+      AzureComputeTemplateOptions that = (AzureComputeTemplateOptions) o;\n+\n+      if (networkSecurityGroupName != null ? !networkSecurityGroupName.equals(that.networkSecurityGroupName) : that.networkSecurityGroupName != null)\n+         return false;\n+      if (reservedIPName != null ? !reservedIPName.equals(that.reservedIPName) : that.reservedIPName != null) return false;\n+      if (storageAccountName != null ? !storageAccountName.equals(that.storageAccountName) : that.storageAccountName != null) return false;\n+      if (storageAccountType != null ? !storageAccountType.equals(that.storageAccountType) : that.storageAccountType != null) return false;\n+      if (subnetNames != null ? !subnetNames.equals(that.subnetNames) : that.subnetNames != null) return false;\n+      if (virtualNetworkName != null ? !virtualNetworkName.equals(that.virtualNetworkName) : that.virtualNetworkName != null) return false;\n+\n+      return true;\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      int result = super.hashCode();\n+      result = 31 * result + (virtualNetworkName != null ? virtualNetworkName.hashCode() : 0);\n+      result = 31 * result + (subnetNames != null ? subnetNames.hashCode() : 0);\n+      result = 31 * result + (storageAccountName != null ? storageAccountName.hashCode() : 0);\n+      result = 31 * result + (storageAccountType != null ? storageAccountType.hashCode() : 0);\n+      result = 31 * result + (networkSecurityGroupName != null ? networkSecurityGroupName.hashCode() : 0);\n+      result = 31 * result + (reservedIPName != null ? reservedIPName.hashCode() : 0);\n+      return result;\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return Objects.toStringHelper(this)\n+              .add(\"virtualNetworkName\", virtualNetworkName)\n+              .add(\"subnetNames\", subnetNames)\n+              .add(\"storageAccountName\", storageAccountName)\n+              .add(\"storageAccountType\", storageAccountType)\n+              .add(\"networkSecurityGroupName\", networkSecurityGroupName)\n+              .add(\"reservedIPName\", reservedIPName)\n+              .toString();\n+   }\n+\n+   public AzureComputeTemplateOptions virtualNetworkName(@Nullable String virtualNetworkName) {\n+      this.virtualNetworkName = virtualNetworkName;\n+      return this;\n+   }\n+\n+   public AzureComputeTemplateOptions subnetNames(Iterable<String> subnetNames) {\n+      this.subnetNames = ImmutableList.copyOf(checkNotNull(subnetNames, \"subnetNames\"));\n+      return this;\n+   }\n+\n+   public AzureComputeTemplateOptions subnetNames(String...subnetNames) {\n+      return subnetNames(ImmutableList.copyOf(checkNotNull(subnetNames, \"subnetNames\")));\n+   }\n+\n+\n+   public AzureComputeTemplateOptions networkSecurityGroupName(@Nullable String networkSecurityGroupName) {\n+      this.networkSecurityGroupName = networkSecurityGroupName;\n+      return this;\n+   }\n+\n+   public AzureComputeTemplateOptions storageAccountName(@Nullable String storageAccountName) {\n+      this.storageAccountName = storageAccountName;\n+      return this;\n+   }\n+\n+   public AzureComputeTemplateOptions storageAccountType(@Nullable String storageAccountType) {\n+      this.storageAccountType = storageAccountType;\n+      return this;\n+   }\n+\n+   public AzureComputeTemplateOptions reservedIPName(@Nullable String reservedIPName) {\n+      this.reservedIPName = reservedIPName;\n+      return this;\n+   }\n+\n+   public String getVirtualNetworkName() {\n+      return virtualNetworkName;\n+   }\n+\n+   public List<String> getSubnetNames() {\n+      return subnetNames;\n+   }\n+\n+   public String getStorageAccountName() {\n+      return storageAccountName;\n+   }\n+\n+   public String getStorageAccountType() {\n+      return storageAccountType;\n+   }\n+\n+   public String getNetworkSecurityGroupName() {\n+      return networkSecurityGroupName;\n+   }\n+\n+   public String getReservedIPName() {\n+      return reservedIPName;\n+   }\n+\n+   public static class Builder {\n+\n+      /**\n+       * @see #virtualNetworkName\n+       */\n+      public static AzureComputeTemplateOptions virtualNetworkName(final String virtualNetworkName) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.virtualNetworkName(virtualNetworkName);\n+      }\n+\n+      /**\n+       * @see #subnetNames\n+       */\n+      public static AzureComputeTemplateOptions subnetNames(String...subnetNames) {\n+         AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.subnetNames(subnetNames);\n+      }\n+\n+      /**\n+       * @see #subnetNames\n+       */\n+      public static AzureComputeTemplateOptions subnetNames(Iterable<String> subnetNames) {\n+         AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.subnetNames(subnetNames);\n+      }\n+\n+      /**\n+       * @see #storageAccountName\n+       */\n+      public static AzureComputeTemplateOptions storageAccountName(final String storageAccountName) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.storageAccountName(storageAccountName);\n+      }\n+\n+      /**\n+       * @see #storageAccountType\n+       */\n+      public static AzureComputeTemplateOptions storageAccountType(final String storageAccountType) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.storageAccountType(storageAccountType);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#inboundPorts(int...)\n+       */\n+      public static AzureComputeTemplateOptions inboundPorts(final int... ports) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.inboundPorts(ports);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#blockOnPort(int, int)\n+       */\n+      public static AzureComputeTemplateOptions blockOnPort(final int port, final int seconds) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.blockOnPort(port, seconds);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#userMetadata(java.util.Map)\n+       */\n+      public static AzureComputeTemplateOptions userMetadata(final Map<String, String> userMetadata) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.userMetadata(userMetadata);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#userMetadata(String, String)\n+       */\n+      public static AzureComputeTemplateOptions userMetadata(final String key, final String value) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.userMetadata(key, value);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#nodeNames(Iterable)\n+       */\n+      public static AzureComputeTemplateOptions nodeNames(final Iterable<String> nodeNames) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.nodeNames(nodeNames);\n+      }\n+\n+      /**\n+       * @see org.jclouds.compute.options.TemplateOptions#networks(Iterable)\n+       */\n+      public static AzureComputeTemplateOptions networks(final Iterable<String> networks) {\n+         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n+         return options.networks(networks);\n+      }\n+   }\n+\n+   // methods that only facilitate returning the correct object type\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions blockOnPort(int port, int seconds) {\n+      return AzureComputeTemplateOptions.class.cast(super.blockOnPort(port, seconds));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions inboundPorts(int... ports) {\n+      return AzureComputeTemplateOptions.class.cast(super.inboundPorts(ports));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions authorizePublicKey(String publicKey) {\n+      return AzureComputeTemplateOptions.class.cast(super.authorizePublicKey(publicKey));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions installPrivateKey(String privateKey) {\n+      return AzureComputeTemplateOptions.class.cast(super.installPrivateKey(privateKey));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions blockUntilRunning(boolean blockUntilRunning) {\n+      return AzureComputeTemplateOptions.class.cast(super.blockUntilRunning(blockUntilRunning));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions dontAuthorizePublicKey() {\n+      return AzureComputeTemplateOptions.class.cast(super.dontAuthorizePublicKey());\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions nameTask(String name) {\n+      return AzureComputeTemplateOptions.class.cast(super.nameTask(name));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions runAsRoot(boolean runAsRoot) {\n+      return AzureComputeTemplateOptions.class.cast(super.runAsRoot(runAsRoot));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions runScript(Statement script) {\n+      return AzureComputeTemplateOptions.class.cast(super.runScript(script));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions overrideLoginCredentials(LoginCredentials overridingCredentials) {\n+      return AzureComputeTemplateOptions.class.cast(super.overrideLoginCredentials(overridingCredentials));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions overrideLoginPassword(String password) {\n+      return AzureComputeTemplateOptions.class.cast(super.overrideLoginPassword(password));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions overrideLoginPrivateKey(String privateKey) {\n+      return AzureComputeTemplateOptions.class.cast(super.overrideLoginPrivateKey(privateKey));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions overrideLoginUser(String loginUser) {\n+      return AzureComputeTemplateOptions.class.cast(super.overrideLoginUser(loginUser));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions overrideAuthenticateSudo(boolean authenticateSudo) {\n+      return AzureComputeTemplateOptions.class.cast(super.overrideAuthenticateSudo(authenticateSudo));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions userMetadata(Map<String, String> userMetadata) {\n+      return AzureComputeTemplateOptions.class.cast(super.userMetadata(userMetadata));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions userMetadata(String key, String value) {\n+      return AzureComputeTemplateOptions.class.cast(super.userMetadata(key, value));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions nodeNames(Iterable<String> nodeNames) {\n+      return AzureComputeTemplateOptions.class.cast(super.nodeNames(nodeNames));\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public AzureComputeTemplateOptions networks(Iterable<String> networks) {\n+      return AzureComputeTemplateOptions.class.cast(super.networks(networks));\n+   }\n+\n+}",
                "additions": 418,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/options/AzureComputeTemplateOptions.java",
                "status": "added",
                "changes": 418,
                "deletions": 0,
                "sha": "ed31e71b0658cf2595ffaa2b2c603bf1f30c9bc1",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/options/AzureComputeTemplateOptions.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/options/AzureComputeTemplateOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/options/AzureComputeTemplateOptions.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.azurecompute.compute.predicates;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+\n+import org.jclouds.azurecompute.domain.StorageService;\n+\n+import com.google.common.base.Predicate;\n+\n+/**\n+ * Predicates for working with {@link StorageService} collections.\n+ */\n+public class StorageServicePredicates {\n+\n+\n+   public static Predicate<StorageService> sameLocation(final String location) {\n+      checkNotNull(location, \"location must be defined\");\n+\n+      return new Predicate<StorageService>() {\n+         @Override\n+         public boolean apply(StorageService storageService) {\n+            return storageService.storageServiceProperties().location().equals(location);\n+         }\n+\n+         @Override\n+         public String toString() {\n+            return \"sameLocation(\" + location + \")\";\n+         }\n+      };\n+   }\n+\n+   public static Predicate<StorageService> status(final StorageService.Status status) {\n+      checkNotNull(status, \"status must be defined\");\n+\n+      return new Predicate<StorageService>() {\n+         @Override\n+         public boolean apply(StorageService storageService) {\n+            return storageService.storageServiceProperties().status() == status;\n+         }\n+\n+         @Override\n+         public String toString() {\n+            return \"status(\" + status + \")\";\n+         }\n+      };\n+   }\n+\n+   public static Predicate<StorageService> matchesName(final String defaultStorageAccountPrefix) {\n+      checkNotNull(defaultStorageAccountPrefix, \"defaultStorageAccountPrefix must be defined\");\n+\n+      return new Predicate<StorageService>() {\n+         @Override\n+         public boolean apply(StorageService storageService) {\n+            return storageService.serviceName().matches(format(\"^%s[a-z]{10}$\", defaultStorageAccountPrefix));\n+         }\n+\n+         @Override\n+         public String toString() {\n+            return \"matchesName(\" + defaultStorageAccountPrefix + \")\";\n+         }\n+      };\n+   }\n+\n+}",
                "additions": 80,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/predicates/StorageServicePredicates.java",
                "status": "added",
                "changes": 80,
                "deletions": 0,
                "sha": "4b8d3f2501dbf4c1b724e35ce507ca97b02f227c",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/predicates/StorageServicePredicates.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/predicates/StorageServicePredicates.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/predicates/StorageServicePredicates.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,28 +16,26 @@\n  */\n package org.jclouds.azurecompute.compute.strategy;\n \n+import static com.google.common.base.Objects.firstNonNull;\n import static com.google.common.base.Predicates.and;\n import static com.google.common.base.Predicates.notNull;\n import static com.google.common.collect.Iterables.tryFind;\n import static java.lang.String.format;\n import static org.jclouds.azurecompute.compute.config.AzureComputeServiceContextModule.AzureComputeConstants;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.UUID;\n import java.util.concurrent.atomic.AtomicReference;\n \n import javax.inject.Named;\n import javax.inject.Singleton;\n \n import org.jclouds.azurecompute.AzureComputeApi;\n+import org.jclouds.azurecompute.compute.options.AzureComputeTemplateOptions;\n+import org.jclouds.azurecompute.compute.predicates.StorageServicePredicates;\n import org.jclouds.azurecompute.config.AzureComputeProperties;\n-import org.jclouds.azurecompute.domain.NetworkConfiguration;\n-import org.jclouds.azurecompute.domain.NetworkSecurityGroup;\n-import org.jclouds.azurecompute.domain.StorageService;\n import org.jclouds.azurecompute.domain.CreateStorageServiceParams;\n-import org.jclouds.azurecompute.options.AzureComputeTemplateOptions;\n+import org.jclouds.azurecompute.domain.StorageService;\n import org.jclouds.compute.config.CustomizationResponse;\n import org.jclouds.compute.domain.NodeMetadata;\n import org.jclouds.compute.domain.Template;\n@@ -49,11 +47,7 @@\n \n import com.google.common.base.Optional;\n import com.google.common.base.Predicate;\n-import com.google.common.collect.FluentIterable;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Iterables;\n import com.google.common.collect.Multimap;\n-import com.google.common.collect.Sets;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n import com.google.inject.Inject;\n@@ -63,21 +57,10 @@\n         extends CreateNodesWithGroupEncodedIntoNameThenAddToSet {\n \n    private static final String DEFAULT_STORAGE_ACCOUNT_PREFIX = \"jclouds\";\n-\n    private static final String DEFAULT_STORAGE_SERVICE_TYPE = \"Standard_GRS\";\n \n-   private static final String DEFAULT_VIRTUAL_NETWORK_NAME = \"jclouds-virtual-network\";\n-\n-   private static final String DEFAULT_ADDRESS_SPACE_ADDRESS_PREFIX = \"10.0.0.0/20\";\n-\n-   private static final String DEFAULT_SUBNET_NAME = \"jclouds-1\";\n-\n-   private static final String DEFAULT_SUBNET_ADDRESS_PREFIX = \"10.0.0.0/23\";\n-\n    private final AzureComputeApi api;\n-\n    private final Predicate<String> operationSucceededPredicate;\n-\n    private final AzureComputeConstants azureComputeConstants;\n \n    @Inject\n@@ -113,69 +96,29 @@ protected GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes(\n            final Multimap<NodeMetadata, CustomizationResponse> customizationResponses) {\n \n       final AzureComputeTemplateOptions templateOptions = template.getOptions().as(AzureComputeTemplateOptions.class);\n-      final String storageAccountName = templateOptions.getStorageAccountName().\n-              or(generateStorageServiceName(DEFAULT_STORAGE_ACCOUNT_PREFIX));\n       final String location = template.getLocation().getId();\n-      final String storageAccountType = templateOptions.getStorageAccountType().or(DEFAULT_STORAGE_SERVICE_TYPE);\n-      final String virtualNetworkName = templateOptions.getVirtualNetworkName().or(DEFAULT_VIRTUAL_NETWORK_NAME);\n-      final String subnetName = templateOptions.getSubnetName().or(DEFAULT_SUBNET_NAME);\n-      final String addressSpaceAddressPrefix = templateOptions.getAddressSpaceAddressPrefix().\n-              or(DEFAULT_ADDRESS_SPACE_ADDRESS_PREFIX);\n-      final String subnetAddressPrefix = templateOptions.getSubnetAddressPrefix().or(DEFAULT_SUBNET_ADDRESS_PREFIX);\n-      final Set<String> networkSecurityGroupNames = templateOptions.getGroups().isEmpty() ? Sets.<String>newHashSet() : templateOptions.getGroups();\n-\n-      // get or create storage service\n-      final StorageService storageService = tryFindExistingStorageServiceAccountOrCreate(\n-              api, location, storageAccountName, storageAccountType);\n-      templateOptions.storageAccountName(storageService.serviceName());\n-\n-      // check existence or create virtual network\n-      checkExistingVirtualNetworkNamedOrCreate(\n-              virtualNetworkName, location, subnetName, addressSpaceAddressPrefix, subnetAddressPrefix);\n-      templateOptions.virtualNetworkName(virtualNetworkName);\n-      templateOptions.subnetName(subnetName);\n-\n-      // add network security group to the subnet\n-      if (!networkSecurityGroupNames.isEmpty()) {\n-         String networkSecurityGroupName = Iterables.get(networkSecurityGroupNames, 0);\n-         logger.warn(\"Only network security group '%s' will be applied to subnet '%s'.\",\n-                 networkSecurityGroupName, subnetName);\n-         final NetworkSecurityGroup networkSecurityGroupAppliedToSubnet = api.getNetworkSecurityGroupApi().\n-                 getNetworkSecurityGroupAppliedToSubnet(virtualNetworkName, subnetName);\n-         if (networkSecurityGroupAppliedToSubnet != null) {\n-            if (!networkSecurityGroupAppliedToSubnet.name().equals(networkSecurityGroupName)) {\n-               logger.debug(\"Removing a networkSecurityGroup %s is already applied to subnet '%s' ...\",\n-                       networkSecurityGroupName, subnetName);\n-               // remove existing nsg from subnet\n-               String removeFromSubnetRequestId = api.getNetworkSecurityGroupApi().\n-                       removeFromSubnet(virtualNetworkName, subnetName, networkSecurityGroupAppliedToSubnet.name());\n-               if (!operationSucceededPredicate.apply(removeFromSubnetRequestId)) {\n-                  final String warnMessage = format(\n-                          \"Remove existing networkSecurityGroup(%s) to subnet(%s) has not been completed \"\n-                          + \"within %sms.\", networkSecurityGroupName, subnetName,\n-                          azureComputeConstants.operationTimeout());\n-                  logger.warn(warnMessage);\n-                  final String illegalStateExceptionMessage = format(\n-                          \"%s. Please, try by increasing `%s` and try again\",\n-                          AzureComputeProperties.OPERATION_TIMEOUT, warnMessage);\n-                  throw new IllegalStateException(illegalStateExceptionMessage);\n-               }\n-            }\n-         }\n-         // add nsg to subnet\n-         logger.debug(\"Adding a networkSecurityGroup %s is already applied to subnet '%s' of virtual network %s ...\",\n-                 networkSecurityGroupName, subnetName, virtualNetworkName);\n-         final String addToSubnetId = api.getNetworkSecurityGroupApi().addToSubnet(virtualNetworkName, subnetName,\n-                 networkSecurityGroupName);\n-         if (!operationSucceededPredicate.apply(addToSubnetId)) {\n-            final String warnMessage = format(\"Add networkSecurityGroup(%s) to subnet(%s) has not been completed \"\n-                    + \"within %sms.\", networkSecurityGroupName, subnetName, azureComputeConstants.operationTimeout());\n-            logger.warn(warnMessage);\n-            final String illegalStateExceptionMessage = format(\"%s. Please, try by increasing `%s` and try again\",\n-                    AzureComputeProperties.OPERATION_TIMEOUT, warnMessage);\n-            throw new IllegalStateException(illegalStateExceptionMessage);\n+      final String storageAccountName = templateOptions.getStorageAccountName();\n+      final String storageAccountType = firstNonNull(templateOptions.getStorageAccountType(), DEFAULT_STORAGE_SERVICE_TYPE);\n+      final String virtualNetworkName = templateOptions.getVirtualNetworkName();\n+\n+      final StorageService storageService;\n+      if (storageAccountName != null) {\n+         if (api.getStorageAccountApi().get(storageAccountName) == null) {\n+            String message = String.format(\"storageAccountName %s specified via AzureComputeTemplateOptions doesn't exist\", storageAccountName);\n+            logger.error(message);\n+            throw new IllegalStateException(message);\n          }\n+      } else { // get suitable or create storage service\n+         storageService = tryFindExistingStorageServiceAccountOrCreate(api, location, generateStorageServiceName(DEFAULT_STORAGE_ACCOUNT_PREFIX), storageAccountType);\n+         templateOptions.storageAccountName(storageService.serviceName());\n+      }\n+\n+      if (virtualNetworkName != null && templateOptions.getSubnetNames().isEmpty()) {\n+         String message = \"AzureComputeTemplateOption.subnetNames must not be empty, if AzureComputeTemplateOption.virtualNetworkName is defined.\";\n+         logger.warn(message);\n+         throw new IllegalArgumentException(message);\n       }\n+\n       return super.execute(group, count, template, goodNodes, badNodes, customizationResponses);\n    }\n \n@@ -184,36 +127,35 @@ protected GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes(\n     * the location, otherwise it creates a new storage service account with name and type in the location\n     */\n    private StorageService tryFindExistingStorageServiceAccountOrCreate(\n-           final AzureComputeApi api, final String location, final String name, final String type) {\n+           final AzureComputeApi api, final String location, final String storageAccountName, final String type) {\n \n       final List<StorageService> storageServices = api.getStorageAccountApi().list();\n       logger.debug(\"Looking for a suitable existing storage account ...\");\n \n-      @SuppressWarnings(\"unchecked\")\n-      final Predicate<StorageService> storageServicePredicate = and(notNull(),\n-              new SameLocationAndCreatedStorageServicePredicate(location), new Predicate<StorageService>() {\n-                 @Override\n-                 public boolean apply(final StorageService input) {\n-                    return input.serviceName().matches(format(\"^%s[a-z]{10}$\", DEFAULT_STORAGE_ACCOUNT_PREFIX));\n-                 }\n-              });\n+      final Predicate<StorageService> storageServicePredicate = and(\n+              notNull(),\n+              StorageServicePredicates.sameLocation(location),\n+              StorageServicePredicates.status(StorageService.Status.Created),\n+              StorageServicePredicates.matchesName(DEFAULT_STORAGE_ACCOUNT_PREFIX)\n+      );\n+\n       final Optional<StorageService> storageServiceOptional = tryFind(storageServices, storageServicePredicate);\n       if (storageServiceOptional.isPresent()) {\n          final StorageService storageService = storageServiceOptional.get();\n          logger.debug(\"Found a suitable existing storage service account '%s'\", storageService);\n          return storageService;\n       } else {\n          // create\n-         if (!checkAvailability(name)) {\n-            logger.warn(\"The storage service account name %s is not available\", name);\n+         if (!checkAvailability(storageAccountName)) {\n+            logger.warn(\"The storage service account name %s is not available\", storageAccountName);\n             throw new IllegalStateException(format(\"Can't create a valid storage account with name %s. \"\n-                    + \"Please, try by choosing a different `storageAccountName` in templateOptions and try again\", name));\n+                    + \"Please, try by choosing a different `storageAccountName` in templateOptions and try again\", storageAccountName));\n          }\n-         logger.debug(\"Creating a storage service account '%s' in location '%s' ...\", name, location);\n+         logger.debug(\"Creating a storage service account '%s' in location '%s' ...\", storageAccountName, location);\n          final String createStorageServiceRequestId = api.getStorageAccountApi().create(\n                  CreateStorageServiceParams.builder()\n-                 .serviceName(name)\n-                 .label(name)\n+                 .serviceName(storageAccountName)\n+                 .label(storageAccountName)\n                  .location(location)\n                  .accountType(StorageService.AccountType.valueOf(type))\n                  .build());\n@@ -225,54 +167,10 @@ public boolean apply(final StorageService input) {\n                     warnMessage, AzureComputeProperties.OPERATION_TIMEOUT);\n             throw new IllegalStateException(illegalStateExceptionMessage);\n          }\n-         return api.getStorageAccountApi().get(name);\n-      }\n-   }\n-\n-   private void checkExistingVirtualNetworkNamedOrCreate(\n-           final String virtualNetworkName, final String location, final String subnetName,\n-           final String addressSpaceAddressPrefix, final String subnetAddressPrefix) {\n-\n-      logger.debug(\"Looking for a virtual network named '%s' ...\", virtualNetworkName);\n-      final Optional<NetworkConfiguration.VirtualNetworkSite> networkSiteOptional\n-              = getVirtualNetworkNamed(virtualNetworkName);\n-      if (networkSiteOptional.isPresent()) {\n-         return;\n-      }\n-      final NetworkConfiguration networkConfiguration = NetworkConfiguration.create(\n-              NetworkConfiguration.VirtualNetworkConfiguration.create(null,\n-                      ImmutableList.of(NetworkConfiguration.VirtualNetworkSite.create(\n-                                      UUID.randomUUID().toString(),\n-                                      virtualNetworkName,\n-                                      location,\n-                                      NetworkConfiguration.AddressSpace.create(addressSpaceAddressPrefix),\n-                                      ImmutableList.of(NetworkConfiguration.Subnet.create(\n-                                                      subnetName, subnetAddressPrefix, null))))\n-              )\n-      );\n-      logger.debug(\"Creating a virtual network with configuration '%s' ...\", networkConfiguration);\n-      final String setNetworkConfigurationRequestId = api.getVirtualNetworkApi().set(networkConfiguration);\n-      if (!operationSucceededPredicate.apply(setNetworkConfigurationRequestId)) {\n-         final String warnMessage = format(\"Network configuration (%s) has not been completed within %sms.\",\n-                 networkConfiguration, azureComputeConstants.operationTimeout());\n-         logger.warn(warnMessage);\n-         final String illegalStateExceptionMessage = format(\"%s. Please, try by increasing `%s` and try again\",\n-                 AzureComputeProperties.OPERATION_TIMEOUT, warnMessage);\n-         throw new IllegalStateException(illegalStateExceptionMessage);\n+         return api.getStorageAccountApi().get(storageAccountName);\n       }\n    }\n \n-   private Optional<NetworkConfiguration.VirtualNetworkSite> getVirtualNetworkNamed(final String virtualNetworkName) {\n-      return FluentIterable.from(api.getVirtualNetworkApi().list())\n-              .filter(new Predicate<NetworkConfiguration.VirtualNetworkSite>() {\n-                 @Override\n-                 public boolean apply(final NetworkConfiguration.VirtualNetworkSite input) {\n-                    return input.name().equals(virtualNetworkName);\n-                 }\n-              })\n-              .first();\n-   }\n-\n    private boolean checkAvailability(final String name) {\n       return api.getStorageAccountApi().isAvailable(name).result();\n    }\n@@ -289,18 +187,4 @@ private static String generateStorageServiceName(final String prefix) {\n       return builder.toString();\n    }\n \n-   private static class SameLocationAndCreatedStorageServicePredicate implements Predicate<StorageService> {\n-\n-      private final String location;\n-\n-      public SameLocationAndCreatedStorageServicePredicate(final String location) {\n-         this.location = location;\n-      }\n-\n-      @Override\n-      public boolean apply(final StorageService input) {\n-         return input.storageServiceProperties().location().equals(location)\n-                 && input.storageServiceProperties().status().equals(\"Created\");\n-      }\n-   }\n }",
                "additions": 39,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes.java",
                "status": "modified",
                "changes": 194,
                "deletions": 155,
                "sha": "0b49637c076bd9183b399f93b180938096ed360a",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/GetOrCreateStorageServiceAndVirtualNetworkThenCreateNodes.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.jclouds.azurecompute.compute.strategy.impl;\n-\n-import com.google.common.base.Function;\n-import java.util.Map;\n-import javax.inject.Inject;\n-import org.jclouds.azurecompute.compute.AzureComputeServiceAdapter;\n-import org.jclouds.azurecompute.domain.Deployment;\n-import org.jclouds.azurecompute.domain.Location;\n-import org.jclouds.azurecompute.domain.OSImage;\n-import org.jclouds.azurecompute.domain.RoleSize;\n-import org.jclouds.compute.ComputeServiceAdapter;\n-import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n-import org.jclouds.compute.domain.Image;\n-import org.jclouds.compute.domain.NodeMetadata;\n-import org.jclouds.compute.strategy.PrioritizeCredentialsFromTemplate;\n-import org.jclouds.compute.strategy.impl.AdaptingComputeServiceStrategies;\n-import org.jclouds.domain.Credentials;\n-\n-public class AzureAdaptingComputeServiceStrategies\n-        extends AdaptingComputeServiceStrategies<Deployment, RoleSize, OSImage, Location> {\n-\n-   private final AzureComputeServiceAdapter client;\n-\n-   private final Function<Deployment, NodeMetadata> nodeMetadataAdapter;\n-\n-   @Inject\n-   public AzureAdaptingComputeServiceStrategies(\n-           final Map<String, Credentials> credentialStore,\n-           final PrioritizeCredentialsFromTemplate prioritizeCredentialsFromTemplate,\n-           final ComputeServiceAdapter<Deployment, RoleSize, OSImage, Location> client,\n-           final Function<Deployment, NodeMetadata> nodeMetadataAdapter,\n-           final Function<OSImage, Image> imageAdapter,\n-           final AddDefaultCredentialsToImage addDefaultCredentialsToImage) {\n-\n-      super(credentialStore,\n-              prioritizeCredentialsFromTemplate,\n-              client,\n-              nodeMetadataAdapter,\n-              imageAdapter,\n-              addDefaultCredentialsToImage);\n-\n-      this.client = (AzureComputeServiceAdapter) client;\n-      this.nodeMetadataAdapter = nodeMetadataAdapter;\n-   }\n-\n-   @Override\n-   public NodeMetadata destroyNode(final String id) {\n-      final Deployment node = client.internalDestroyNode(id);\n-      return node == null\n-              ? null\n-              : nodeMetadataAdapter.apply(node);\n-   }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/impl/AzureAdaptingComputeServiceStrategies.java",
                "status": "removed",
                "changes": 70,
                "deletions": 70,
                "sha": "c99f3a4fe56d13023f9e0f0eec9591fe65cce745",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/impl/AzureAdaptingComputeServiceStrategies.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/impl/AzureAdaptingComputeServiceStrategies.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/compute/strategy/impl/AzureAdaptingComputeServiceStrategies.java?ref=1c5df25cf92626b9657257f959b40c25650e65fc"
            },
            {
                "patch": "@@ -96,6 +96,7 @@ public static Status fromString(final String text) {\n       FAILED_STARTING_VM(\"FailedStartingVM\", false),\n       UNRESPONSIVE_ROLE(\"UnresponsiveRole\"),\n       PROVISIONING(\"Provisioning\"),\n+      PROVISIONING_FAILED(\"ProvisioningFailed\", false),\n       /**\n        * Not parsable into one of the above.\n        */",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/domain/Deployment.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "a1db92f175908f461d7b6d0a5d22c9f183dca2da",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/domain/Deployment.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/domain/Deployment.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/domain/Deployment.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,18 +16,16 @@\n  */\n package org.jclouds.azurecompute.domain;\n \n-import static com.google.common.collect.ImmutableList.copyOf;\n-\n import java.net.URI;\n-import java.util.Collection;\n import java.util.List;\n+import java.util.Set;\n \n import org.jclouds.javax.annotation.Nullable;\n+import org.jclouds.rest.annotations.SinceApiVersion;\n \n import com.google.auto.value.AutoValue;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n-import org.jclouds.rest.annotations.SinceApiVersion;\n+import com.google.common.collect.ImmutableSet;\n \n /**\n  * To create a new deployment/role\n@@ -106,7 +104,7 @@ public static ExternalEndpoint inboundUdpToLocalPort(final int port, final int l\n     */\n    public abstract OSImage.Type os();\n \n-   public abstract List<ExternalEndpoint> externalEndpoints();\n+   public abstract Set<ExternalEndpoint> externalEndpoints();\n \n    /**\n     * {@link org.jclouds.azurecompute.domain.NetworkConfiguration.VirtualNetworkSite#name}\n@@ -128,138 +126,49 @@ public static ExternalEndpoint inboundUdpToLocalPort(final int port, final int l\n \n    public abstract List<String> subnetNames();\n \n-   public Builder toBuilder() {\n-      return builder().fromDeploymentParams(this);\n-   }\n-\n    public static Builder builder() {\n-      return new Builder();\n+      return new AutoValue_DeploymentParams.Builder()\n+              .externalEndpoints(ImmutableSet.<ExternalEndpoint> of())\n+              .subnetNames(ImmutableList.<String> of());\n    }\n \n-   public static final class Builder {\n-\n-      private String name;\n-\n-      private RoleSize.Type size;\n-\n-      private String username;\n-\n-      private String password;\n-\n-      private String sourceImageName;\n-\n-      private URI mediaLink;\n-\n-      private OSImage.Type os;\n-\n-      private List<ExternalEndpoint> externalEndpoints = Lists.newArrayList();\n-\n-      private String virtualNetworkName;\n-\n-      private String reservedIPName;\n-\n-      private List<String> subnetNames = Lists.newArrayList();\n-\n-      public Builder name(final String name) {\n-         this.name = name;\n-         return this;\n-      }\n-\n-      public Builder size(final RoleSize.Type size) {\n-         this.size = size;\n-         return this;\n-      }\n-\n-      public Builder username(final String username) {\n-         this.username = username;\n-         return this;\n-      }\n-\n-      public Builder password(final String password) {\n-         this.password = password;\n-         return this;\n-      }\n+   abstract Builder toBuilder();\n \n-      public Builder sourceImageName(final String sourceImageName) {\n-         this.sourceImageName = sourceImageName;\n-         return this;\n-      }\n+   @AutoValue.Builder\n+   public abstract static class Builder {\n+      public abstract Builder name(String name);\n+      public abstract Builder size(RoleSize.Type roleSize);\n+      public abstract Builder username(String username);\n+      public abstract Builder password(String password);\n+      public abstract Builder sourceImageName(String sourceImageName);\n+      public abstract Builder mediaLink(URI mediaLink);\n+      public abstract Builder os(OSImage.Type os);\n+      public abstract Builder externalEndpoints(Set<ExternalEndpoint> externalEndpoints);\n+      public abstract Builder virtualNetworkName(String virtualNetworkName);\n+      public abstract Builder reservedIPName(String reservedIPName);\n+      public abstract Builder subnetNames(List<String> subnetNames);\n \n-      public Builder mediaLink(final URI mediaLink) {\n-         this.mediaLink = mediaLink;\n-         return this;\n-      }\n+      abstract Set<ExternalEndpoint> externalEndpoints();\n+      abstract List<String> subnetNames();\n \n-      public Builder os(final OSImage.Type os) {\n-         this.os = os;\n-         return this;\n-      }\n-\n-      public Builder externalEndpoint(final ExternalEndpoint endpoint) {\n-         externalEndpoints.add(endpoint);\n-         return this;\n-      }\n-\n-      public Builder externalEndpoints(final Collection<ExternalEndpoint> externalEndpoints) {\n-         this.externalEndpoints.addAll(externalEndpoints);\n-         return this;\n-      }\n-\n-      public Builder virtualNetworkName(final String virtualNetworkName) {\n-         this.virtualNetworkName = virtualNetworkName;\n-         return this;\n-      }\n-\n-      public Builder reservedIPName(final String reservedIPName) {\n-         this.reservedIPName = reservedIPName;\n-         return this;\n-      }\n-\n-      public Builder subnetName(final String subnetName) {\n-         subnetNames.add(subnetName);\n-         return this;\n-      }\n-\n-      public Builder subnetNames(final Collection<String> subnetNames) {\n-         this.subnetNames.addAll(subnetNames);\n-         return this;\n-      }\n+      abstract DeploymentParams autoBuild();\n \n       public DeploymentParams build() {\n-         return DeploymentParams.create(\n-                 name,\n-                 size,\n-                 username,\n-                 password,\n-                 sourceImageName,\n-                 mediaLink,\n-                 os,\n-                 ImmutableList.copyOf(externalEndpoints),\n-                 virtualNetworkName,\n-                 reservedIPName,\n-                 ImmutableList.copyOf(subnetNames));\n-      }\n-\n-      public Builder fromDeploymentParams(final DeploymentParams deploymentParams) {\n-         return name(deploymentParams.name())\n-                 .size(deploymentParams.size())\n-                 .username(deploymentParams.username())\n-                 .password(deploymentParams.password())\n-                 .sourceImageName(deploymentParams.sourceImageName())\n-                 .mediaLink(deploymentParams.mediaLink())\n-                 .os(deploymentParams.os())\n-                 .externalEndpoints(deploymentParams.externalEndpoints())\n-                 .subnetNames(deploymentParams.subnetNames())\n-                 .reservedIPName(reservedIPName);\n+         externalEndpoints(externalEndpoints() != null ? ImmutableSet.copyOf(externalEndpoints()) : null);\n+         subnetNames(subnetNames() != null ? ImmutableList.copyOf(subnetNames()) : null);\n+         return autoBuild();\n       }\n    }\n \n-   private static DeploymentParams create(final String name, final RoleSize.Type size,\n-           final String username, final String password, final String sourceImageName,\n-           final URI mediaLink, final OSImage.Type os, final List<ExternalEndpoint> externalEndpoints,\n-           final String virtualNetworkName, final String reservedIPName, final List<String> subnetNames) {\n-\n-      return new AutoValue_DeploymentParams(name, size, username, password, sourceImageName, mediaLink, os,\n-              copyOf(externalEndpoints), virtualNetworkName, reservedIPName, copyOf(subnetNames));\n+   public static DeploymentParams create(String name, RoleSize.Type size, String username,\n+                                         String password, String sourceImageName, URI mediaLink,\n+                                         OSImage.Type os, Set<ExternalEndpoint> externalEndpoints,\n+                                         String virtualNetworkName, String reservedIPName,\n+                                         List<String> subnetNames) {\n+      return builder().name(name).size(size).username(username).password(password)\n+              .sourceImageName(sourceImageName).mediaLink(mediaLink).os(os)\n+              .externalEndpoints(externalEndpoints).virtualNetworkName(virtualNetworkName)\n+              .reservedIPName(reservedIPName).subnetNames(subnetNames)\n+              .build();\n    }\n }",
                "additions": 37,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/domain/DeploymentParams.java",
                "status": "modified",
                "changes": 165,
                "deletions": 128,
                "sha": "2cf93ad6b692aadc3cad146b019a438c9b617eec",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/domain/DeploymentParams.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/domain/DeploymentParams.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/domain/DeploymentParams.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -81,6 +81,19 @@\n    String capture(@PathParam(\"name\") String name, @PayloadParam(\"imageName\") String imageName,\n            @PayloadParam(\"imageLabel\") String imageLabel);\n \n+   /**\n+    * http://msdn.microsoft.com/en-us/library/jj157195\n+    */\n+   @Named(\"ShutdownRole\")\n+   @POST\n+   @Path(\"/roleinstances/{name}/Operations\")\n+   @Produces(MediaType.APPLICATION_XML)\n+   @ResponseParser(ParseRequestIdHeader.class)\n+   @Payload(value = \"<ShutdownRoleOperation xmlns=\\\"http://schemas.microsoft.com/windowsazure\\\">\"\n+           + \"<OperationType>ShutdownRoleOperation</OperationType>\" +\n+           \"<PostShutdownAction>{postShutdownAction}</PostShutdownAction></ShutdownRoleOperation>\")\n+   String shutdown(@PathParam(\"name\") String name, @PayloadParam(\"postShutdownAction\") String postShutdownAction);\n+\n    /**\n     * http://msdn.microsoft.com/en-us/library/jj157195\n     */",
                "additions": 13,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/features/VirtualMachineApi.java",
                "status": "modified",
                "changes": 13,
                "deletions": 0,
                "sha": "2285a9d5551df1585f1ae045cf0f4a6a19edbb34",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/features/VirtualMachineApi.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/features/VirtualMachineApi.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/features/VirtualMachineApi.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -1,344 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.jclouds.azurecompute.options;\n-\n-import java.util.Map;\n-\n-import org.jclouds.compute.options.TemplateOptions;\n-\n-import com.google.common.base.Optional;\n-\n-/**\n- * Contains options supported by the {@link org.jclouds.compute.ComputeService#createNodesInGroup(\n- * String, int, org.jclouds.compute.options.TemplateOptions)} operation.\n- *\n- * <h2>Usage</h2> The recommended way to instantiate a {@link AzureComputeTemplateOptions} object is to statically\n- * import {@code AzureComputeTemplateOptions.*} and invoke a static creation method followed by an instance mutator (if\n- * needed):\n- * <p>\n- *\n- * <pre>\n- * import static org.jclouds.compute.options.AzureComputeTemplateOptions.Builder.*;\n- * ComputeService client = // get connection\n- * templateBuilder.options(inboundPorts(22, 80, 8080, 443));\n- * Set&lt;? extends NodeMetadata&gt; set = client.createNodesInGroup(tag, 2, templateBuilder.build());\n- * </pre>\n- *\n- */\n-public class AzureComputeTemplateOptions extends TemplateOptions implements Cloneable {\n-\n-   private Optional<String> virtualNetworkName = Optional.absent();\n-\n-   private Optional<String> addressSpaceAddressPrefix = Optional.absent();\n-\n-   private Optional<String> subnetName = Optional.absent();\n-\n-   private Optional<String> subnetAddressPrefix = Optional.absent();\n-\n-   private Optional<String> storageAccountName = Optional.absent();\n-\n-   private Optional<String> storageAccountType = Optional.absent();\n-\n-   private Optional<String> networkSecurityGroupName = Optional.absent();\n-\n-   private Optional<String> reservedIPName = Optional.absent();\n-\n-   @Override\n-   public AzureComputeTemplateOptions clone() {\n-      final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-      copyTo(options);\n-      return options;\n-   }\n-\n-   @Override\n-   public void copyTo(final TemplateOptions to) {\n-      super.copyTo(to);\n-      if (to instanceof AzureComputeTemplateOptions) {\n-         final AzureComputeTemplateOptions eTo = AzureComputeTemplateOptions.class.cast(to);\n-         if (virtualNetworkName.isPresent()) {\n-            eTo.virtualNetworkName(virtualNetworkName.get());\n-         }\n-         if (addressSpaceAddressPrefix.isPresent()) {\n-            eTo.addressSpaceAddressPrefix(addressSpaceAddressPrefix.get());\n-         }\n-         if (subnetName.isPresent()) {\n-            eTo.subnetName(subnetName.get());\n-         }\n-         if (networkSecurityGroupName.isPresent()) {\n-            eTo.subnetName(networkSecurityGroupName.get());\n-         }\n-         if (subnetAddressPrefix.isPresent()) {\n-            eTo.subnetAddressPrefix(subnetAddressPrefix.get());\n-         }\n-         if (storageAccountName.isPresent()) {\n-            eTo.storageAccountName(storageAccountName.get());\n-         }\n-         if (storageAccountType.isPresent()) {\n-            eTo.storageAccountType(storageAccountType.get());\n-         }\n-         if (reservedIPName.isPresent()) {\n-            eTo.reservedIPName(reservedIPName.get());\n-         }\n-      }\n-   }\n-\n-   public TemplateOptions virtualNetworkName(final String virtualNetworkName) {\n-      this.virtualNetworkName = Optional.of(virtualNetworkName);\n-      return this;\n-   }\n-\n-   public TemplateOptions addressSpaceAddressPrefix(final String addressSpaceAddressPrefix) {\n-      this.addressSpaceAddressPrefix = Optional.of(addressSpaceAddressPrefix);\n-      return this;\n-   }\n-\n-   public TemplateOptions subnetName(final String subnetName) {\n-      this.subnetName = Optional.of(subnetName);\n-      return this;\n-   }\n-\n-   public TemplateOptions networkSecurityGroupName(final String networkSecurityGroupName) {\n-      this.networkSecurityGroupName = Optional.of(networkSecurityGroupName);\n-      return this;\n-   }\n-\n-   public TemplateOptions subnetAddressPrefix(final String subnetAddressPrefix) {\n-      this.subnetAddressPrefix = Optional.of(subnetAddressPrefix);\n-      return this;\n-   }\n-\n-   public TemplateOptions storageAccountName(final String storageAccountName) {\n-      this.storageAccountName = Optional.of(storageAccountName);\n-      return this;\n-   }\n-\n-   public TemplateOptions storageAccountType(final String storageAccountType) {\n-      this.storageAccountType = Optional.of(storageAccountType);\n-      return this;\n-   }\n-\n-   public TemplateOptions reservedIPName(final String reservedIPName) {\n-      this.reservedIPName = Optional.of(reservedIPName);\n-      return this;\n-   }\n-\n-   public Optional<String> getVirtualNetworkName() {\n-      return virtualNetworkName;\n-   }\n-\n-   public Optional<String> getAddressSpaceAddressPrefix() {\n-      return addressSpaceAddressPrefix;\n-   }\n-\n-   public Optional<String> getSubnetName() {\n-      return subnetName;\n-   }\n-\n-   public Optional<String> getSubnetAddressPrefix() {\n-      return subnetAddressPrefix;\n-   }\n-\n-   public Optional<String> getStorageAccountName() {\n-      return storageAccountName;\n-   }\n-\n-   public Optional<String> getStorageAccountType() {\n-      return storageAccountType;\n-   }\n-\n-   public Optional<String> getNetworkSecurityGroupName() {\n-      return networkSecurityGroupName;\n-   }\n-\n-   public Optional<String> getReservedIPName() {\n-      return reservedIPName;\n-   }\n-\n-   public static class Builder {\n-\n-      /**\n-       * @see #virtualNetworkName\n-       */\n-      public static AzureComputeTemplateOptions virtualNetworkName(final String virtualNetworkName) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.virtualNetworkName(virtualNetworkName));\n-      }\n-\n-      /**\n-       * @see #addressSpaceAddressPrefix\n-       */\n-      public static AzureComputeTemplateOptions addressSpaceAddressPrefix(final String addressSpaceAddressPrefix) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.addressSpaceAddressPrefix(addressSpaceAddressPrefix));\n-      }\n-\n-      /**\n-       * @see #subnetName\n-       */\n-      public static AzureComputeTemplateOptions subnetName(final String subnetName) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.subnetName(subnetName));\n-      }\n-\n-      /**\n-       * @see #networkSecurityGroupName\n-       */\n-      public static AzureComputeTemplateOptions networkSecurityGroupName(final String networkSecurityGroupName) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.subnetName(networkSecurityGroupName));\n-      }\n-\n-      /**\n-       * @see #subnetAddressPrefix\n-       */\n-      public static AzureComputeTemplateOptions subnetAddressPrefix(final String subnetAddressPrefix) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.subnetAddressPrefix(subnetAddressPrefix));\n-      }\n-\n-      /**\n-       * @see #storageAccountName\n-       */\n-      public static AzureComputeTemplateOptions storageAccountName(final String storageAccountName) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.storageAccountName(storageAccountName));\n-      }\n-\n-      /**\n-       * @see #storageAccountType\n-       */\n-      public static AzureComputeTemplateOptions storageAccountType(final String storageAccountType) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.storageAccountType(storageAccountType));\n-      }\n-\n-      // methods that only facilitate returning the correct object type\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#inboundPorts(int...)\n-       */\n-      public static AzureComputeTemplateOptions inboundPorts(final int... ports) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.inboundPorts(ports));\n-      }\n-\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#blockOnPort(int, int)\n-       */\n-      public static AzureComputeTemplateOptions blockOnPort(final int port, final int seconds) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.blockOnPort(port, seconds));\n-      }\n-\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#userMetadata(java.util.Map)\n-       */\n-      public static AzureComputeTemplateOptions userMetadata(final Map<String, String> userMetadata) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.userMetadata(userMetadata));\n-      }\n-\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#userMetadata(String, String)\n-       */\n-      public static AzureComputeTemplateOptions userMetadata(final String key, final String value) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.userMetadata(key, value));\n-      }\n-\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#nodeNames(Iterable)\n-       */\n-      public static AzureComputeTemplateOptions nodeNames(final Iterable<String> nodeNames) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.nodeNames(nodeNames));\n-      }\n-\n-      /**\n-       * @see org.jclouds.compute.options.TemplateOptions#networks(Iterable)\n-       */\n-      public static AzureComputeTemplateOptions networks(final Iterable<String> networks) {\n-         final AzureComputeTemplateOptions options = new AzureComputeTemplateOptions();\n-         return AzureComputeTemplateOptions.class.cast(options.networks(networks));\n-      }\n-   }\n-\n-   // methods that only facilitate returning the correct object type\n-   /**\n-    * @see org.jclouds.compute.options.TemplateOptions#blockOnPort(int, int)\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions blockOnPort(final int port, final int seconds) {\n-      return AzureComputeTemplateOptions.class.cast(super.blockOnPort(port, seconds));\n-   }\n-\n-   /**\n-    * @see org.jclouds.compute.options.TemplateOptions#inboundPorts(int...)\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions inboundPorts(final int... ports) {\n-      return AzureComputeTemplateOptions.class.cast(super.inboundPorts(ports));\n-   }\n-\n-   /**\n-    * @see org.jclouds.compute.options.TemplateOptions#authorizePublicKey(String)\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions authorizePublicKey(final String publicKey) {\n-      return AzureComputeTemplateOptions.class.cast(super.authorizePublicKey(publicKey));\n-   }\n-\n-   /**\n-    * @see org.jclouds.compute.options.TemplateOptions#installPrivateKey(String)\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions installPrivateKey(final String privateKey) {\n-      return AzureComputeTemplateOptions.class.cast(super.installPrivateKey(privateKey));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions userMetadata(final Map<String, String> userMetadata) {\n-      return AzureComputeTemplateOptions.class.cast(super.userMetadata(userMetadata));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions userMetadata(final String key, final String value) {\n-      return AzureComputeTemplateOptions.class.cast(super.userMetadata(key, value));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions nodeNames(final Iterable<String> nodeNames) {\n-      return AzureComputeTemplateOptions.class.cast(super.nodeNames(nodeNames));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public AzureComputeTemplateOptions networks(final Iterable<String> networks) {\n-      return AzureComputeTemplateOptions.class.cast(super.networks(networks));\n-   }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/main/java/org/jclouds/azurecompute/options/AzureComputeTemplateOptions.java",
                "status": "removed",
                "changes": 344,
                "deletions": 344,
                "sha": "7ffdd1945aa180c7be5f94aad69435135a492e7a",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/main/java/org/jclouds/azurecompute/options/AzureComputeTemplateOptions.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/options/AzureComputeTemplateOptions.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/options/AzureComputeTemplateOptions.java?ref=1c5df25cf92626b9657257f959b40c25650e65fc"
            },
            {
                "patch": "@@ -19,9 +19,6 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.jclouds.azurecompute.domain.Operation.Status.FAILED;\n-\n-import com.google.common.base.Predicate;\n-\n import java.util.concurrent.CancellationException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n@@ -37,6 +34,8 @@\n import org.jclouds.logging.Logger;\n import org.jclouds.util.Predicates2;\n \n+import com.google.common.base.Predicate;\n+\n /**\n  * Conflict errors (409 response status code) management predicate.\n  */\n@@ -103,7 +102,7 @@ protected String operation() {\n    /**\n     * {@inheritDoc }\n     *\n-    * @param input interested object/operaton descripton or requestId.\n+    * @param input interested object/operation description or requestId.\n     * @return predicate evaluation.\n     */\n    @Override",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/util/ConflictManagementPredicate.java",
                "status": "modified",
                "changes": 7,
                "deletions": 4,
                "sha": "1f940bfaa2005343eda0cc64a8dac7e8e1ccd603",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/main/java/org/jclouds/azurecompute/util/ConflictManagementPredicate.java",
                "filename": "azurecompute/src/main/java/org/jclouds/azurecompute/util/ConflictManagementPredicate.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/main/java/org/jclouds/azurecompute/util/ConflictManagementPredicate.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.jclouds.azurecompute;\n-\n-import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_POLL_INITIAL_PERIOD;\n-import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_POLL_MAX_PERIOD;\n-import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_TIMEOUT;\n-import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_FORMAT;\n-import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_REGEXP;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TEMPLATE;\n-\n-import com.google.auto.service.AutoService;\n-import java.net.URI;\n-import java.util.Properties;\n-import org.jclouds.azurecompute.domain.Region;\n-import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n-import org.jclouds.providers.ProviderMetadata;\n-\n-@AutoService(ProviderMetadata.class)\n-public class AzureComputeProviderMetadataLive extends AzureComputeProviderMetadata {\n-\n-   @Override\n-   public Builder toBuilder() {\n-      return new Builder().fromProviderMetadata(this);\n-   }\n-\n-   public AzureComputeProviderMetadataLive() {\n-      super(new Builder());\n-   }\n-\n-   public static Properties defaultProperties() {\n-      final Properties properties = AzureManagementApiMetadata.defaultProperties();\n-      properties.setProperty(TEMPLATE, \"osFamily=UBUNTU,osVersionMatches=.*14\\\\.10,loginUser=jclouds,\"\n-              + \"locationId=\" + BaseAzureComputeApiLiveTest.LOCATION);\n-      properties.setProperty(OPERATION_TIMEOUT, \"600000\");\n-      properties.setProperty(OPERATION_POLL_INITIAL_PERIOD, \"5\");\n-      properties.setProperty(OPERATION_POLL_MAX_PERIOD, \"15\");\n-      properties.setProperty(TCP_RULE_FORMAT, \"tcp_%s-%s\");\n-      properties.setProperty(TCP_RULE_REGEXP, \"tcp_\\\\d{1,5}-\\\\d{1,5}\");\n-      return properties;\n-   }\n-\n-   public AzureComputeProviderMetadataLive(final Builder builder) {\n-      super(builder);\n-   }\n-\n-   public static class Builder extends AzureComputeProviderMetadata.Builder {\n-\n-      protected Builder() {\n-         id(\"azurecompute\")\n-                 .name(\"Microsoft Azure Service Management Service\")\n-                 .apiMetadata(new AzureManagementApiMetadata())\n-                 .endpoint(\"https://management.core.windows.net/SUBSCRIPTION_ID\")\n-                 .homepage(URI.create(\"https://www.windowsazure.com/\"))\n-                 .console(URI.create(\"https://windows.azure.com/default.aspx\"))\n-                 .linkedServices(\"azureblob\", \"azurequeue\", \"azuretable\")\n-                 .iso3166Codes(Region.iso3166Codes())\n-                 .defaultProperties(AzureComputeProviderMetadataLive.defaultProperties());\n-      }\n-\n-      @Override\n-      public AzureComputeProviderMetadataLive build() {\n-         return new AzureComputeProviderMetadataLive(this);\n-      }\n-\n-      @Override\n-      public Builder fromProviderMetadata(final ProviderMetadata providerMetadata) {\n-         super.fromProviderMetadata(providerMetadata);\n-         return this;\n-      }\n-   }\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/test/java/org/jclouds/azurecompute/AzureComputeProviderMetadataLive.java",
                "status": "removed",
                "changes": 86,
                "deletions": 86,
                "sha": "c09f0d0b2cbdb158bced9fa917609aad56d0d42a",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/test/java/org/jclouds/azurecompute/AzureComputeProviderMetadataLive.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/AzureComputeProviderMetadataLive.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/AzureComputeProviderMetadataLive.java?ref=1c5df25cf92626b9657257f959b40c25650e65fc"
            },
            {
                "patch": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.azurecompute.binders;\n+\n+import static org.testng.Assert.assertEquals;\n+import java.net.URI;\n+\n+import org.jclouds.azurecompute.domain.DeploymentParams;\n+import org.jclouds.azurecompute.domain.OSImage;\n+import org.jclouds.azurecompute.domain.RoleSize;\n+import org.jclouds.http.HttpRequest;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Tests behavior of {@code DeploymentParamsToXML}\n+ */\n+@Test(groups = \"unit\")\n+public class DeploymentParamsToXMLTest {\n+   Injector injector = Guice.createInjector();\n+   DeploymentParamsToXML binder = injector\n+         .getInstance(DeploymentParamsToXML.class);\n+\n+   public void testDeploymentParamsToXmlString() {\n+      DeploymentParams.Builder paramsBuilder = DeploymentParams.builder()\n+              .name(\"name\")\n+              .os(OSImage.Type.LINUX)\n+              .username(\"loginUser\")\n+              .password(\"loginPassword\")\n+              .sourceImageName(\"sourceImageName\")\n+              .mediaLink(URI.create(\"http://medialink\"))\n+              .size(RoleSize.Type.BASIC_A0)\n+              .externalEndpoints(ImmutableSet.of(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22)))\n+              .virtualNetworkName(\"virtualNetworkName\")\n+              .reservedIPName(\"reservedIPName\")\n+              .subnetNames(ImmutableList.of(\"subnetName\"));\n+\n+      HttpRequest request = HttpRequest.builder().method(\"POST\").endpoint(\"http://localhost\")\n+            .addFormParam(\"InstanceId\", \"i-foo\").build();\n+      request = binder.bindToRequest(request, paramsBuilder.build());\n+      assertEquals(\n+            request.getPayload().getRawContent(),\n+            \"<Deployment xmlns=\\\"http://schemas.microsoft.com/windowsazure\\\"><Name>name</Name><DeploymentSlot>Production</DeploymentSlot><Label>name</Label><RoleList><Role><RoleName>name</RoleName><RoleType>PersistentVMRole</RoleType><ConfigurationSets><ConfigurationSet><ConfigurationSetType>LinuxProvisioningConfiguration</ConfigurationSetType><HostName>name</HostName><UserName>loginUser</UserName><UserPassword>loginPassword</UserPassword><DisableSshPasswordAuthentication>false</DisableSshPasswordAuthentication><SSH><PublicKeys/><KeyPairs/></SSH></ConfigurationSet><ConfigurationSet><ConfigurationSetType>NetworkConfiguration</ConfigurationSetType><InputEndpoints><InputEndpoint><LocalPort>22</LocalPort><Name>tcp_22-22</Name><Port>22</Port><Protocol>tcp</Protocol></InputEndpoint></InputEndpoints><SubnetNames><SubnetName>subnetName</SubnetName></SubnetNames></ConfigurationSet></ConfigurationSets><DataVirtualHardDisks/><OSVirtualHardDisk><HostCaching>ReadWrite</HostCaching><MediaLink>http://medialink</MediaLink><SourceImageName>sourceImageName</SourceImageName><OS>Linux</OS></OSVirtualHardDisk><RoleSize>Basic_A0</RoleSize></Role></RoleList><VirtualNetworkName>virtualNetworkName</VirtualNetworkName><ReservedIPName>reservedIPName</ReservedIPName></Deployment>\");\n+   }\n+\n+}",
                "additions": 64,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/binders/DeploymentParamsToXMLTest.java",
                "status": "added",
                "changes": 64,
                "deletions": 0,
                "sha": "cc21a9835804704994f42d85f17b8053a2f35db8",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/binders/DeploymentParamsToXMLTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/binders/DeploymentParamsToXMLTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/binders/DeploymentParamsToXMLTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -1,177 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.jclouds.azurecompute.compute;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertNotNull;\n-\n-import com.google.common.base.Predicate;\n-import com.google.common.collect.Sets;\n-import java.util.Properties;\n-import java.util.Random;\n-import java.util.Set;\n-\n-import org.jclouds.azurecompute.AzureComputeApi;\n-import org.jclouds.azurecompute.domain.Deployment;\n-import org.jclouds.azurecompute.domain.RoleSize;\n-import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n-import org.jclouds.azurecompute.options.AzureComputeTemplateOptions;\n-import org.jclouds.compute.ComputeServiceAdapter.NodeAndInitialCredentials;\n-import org.jclouds.compute.domain.ExecResponse;\n-import org.jclouds.compute.domain.Template;\n-import org.jclouds.compute.domain.TemplateBuilder;\n-import org.jclouds.ssh.SshClient;\n-import org.jclouds.ssh.SshClient.Factory;\n-import org.jclouds.sshj.config.SshjSshClientModule;\n-\n-import org.testng.annotations.Test;\n-import org.testng.annotations.AfterGroups;\n-\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Iterables;\n-import com.google.common.net.HostAndPort;\n-import com.google.common.net.InetAddresses;\n-import com.google.inject.Injector;\n-import com.google.inject.Module;\n-import java.util.Arrays;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.jclouds.util.Predicates2.retry;\n-\n-@Test(groups = \"live\", singleThreaded = true, testName = \"AzureComputeServiceAdapterLiveTest\")\n-public class AzureComputeServiceAdapterLiveTest extends BaseAzureComputeApiLiveTest {\n-\n-   private AzureComputeServiceAdapter adapter;\n-\n-   private TemplateBuilder templateBuilder;\n-\n-   private Factory sshFactory;\n-\n-   private String storageServiceName = null;\n-\n-   @Override\n-   protected String getStorageServiceName() {\n-      if (storageServiceName == null) {\n-         storageServiceName = String.format(\"%3.20sacsa\", System.getProperty(\"user.name\") + RAND).toLowerCase();\n-      }\n-      return storageServiceName;\n-   }\n-\n-   @Override\n-   protected AzureComputeApi create(final Properties props, final Iterable<Module> modules) {\n-      final Injector injector = newBuilder().modules(modules).overrides(props).buildInjector();\n-      adapter = injector.getInstance(AzureComputeServiceAdapter.class);\n-      templateBuilder = injector.getInstance(TemplateBuilder.class);\n-      sshFactory = injector.getInstance(SshClient.Factory.class);\n-      return injector.getInstance(AzureComputeApi.class);\n-   }\n-\n-   @Test\n-   public void testListLocations() {\n-      assertFalse(Iterables.isEmpty(adapter.listLocations()), \"locations must not be empty\");\n-   }\n-\n-   @Test\n-   public void testListImages() {\n-      assertFalse(Iterables.isEmpty(adapter.listImages()), \"images must not be empty\");\n-   }\n-\n-   /**\n-    * Functionally equivalent to {@link AzureComputeServiceContextLiveTest#testLaunchNode()}.\n-    */\n-   @Test\n-   public void testCreateNodeWithGroupEncodedIntoNameThenStoreCredentials() {\n-      final String groupName = String.format(\"%s%d-group-acsalt\",\n-              System.getProperty(\"user.name\"),\n-              new Random(999).nextLong());\n-\n-      final String name = String.format(\"%1.5s%dacsalt\", System.getProperty(\"user.name\"), new Random(999).nextInt());\n-\n-      templateBuilder.imageId(BaseAzureComputeApiLiveTest.IMAGE_NAME);\n-      templateBuilder.hardwareId(\"BASIC_A0\");\n-      templateBuilder.locationId(BaseAzureComputeApiLiveTest.LOCATION);\n-      final Template template = templateBuilder.build();\n-\n-      // test passing custom options\n-      final AzureComputeTemplateOptions options = template.getOptions().as(AzureComputeTemplateOptions.class);\n-      options.inboundPorts(22);\n-      options.storageAccountName(getStorageServiceName());\n-      options.virtualNetworkName(VIRTUAL_NETWORK_NAME);\n-      options.subnetName(DEFAULT_SUBNET_NAME);\n-      options.addressSpaceAddressPrefix(DEFAULT_ADDRESS_SPACE);\n-      options.subnetAddressPrefix(DEFAULT_SUBNET_ADDRESS_SPACE);\n-      options.nodeNames(Arrays.asList(name));\n-\n-      NodeAndInitialCredentials<Deployment> deployment = null;\n-      try {\n-         deployment = adapter.createNodeWithGroupEncodedIntoName(groupName, name, template);\n-         assertEquals(deployment.getNode().name(), name);\n-         assertEquals(deployment.getNodeId(), deployment.getNode().name());\n-\n-         // wait for node to start...\n-         final Set<Deployment> nodes = Sets.newHashSet();\n-         retry(new Predicate<String>() {\n-\n-            @Override\n-            public boolean apply(final String input) {\n-               final Deployment node = adapter.getNode(input);\n-               if (node != null) {\n-                  nodes.add(node);\n-               }\n-               return !nodes.isEmpty();\n-            }\n-         }, 600, 30, 30, SECONDS).apply(name);\n-\n-         assertFalse(nodes.isEmpty());\n-         final Deployment node = nodes.iterator().next();\n-         assert InetAddresses.isInetAddress(node.virtualIPs().get(0).address()) : deployment;\n-\n-         final SshClient client = sshFactory.create(\n-                 HostAndPort.fromParts(node.virtualIPs().get(0).address(), 22),\n-                 deployment.getCredentials());\n-         client.connect();\n-         final ExecResponse hello = client.exec(\"echo hello\");\n-         assertEquals(hello.getOutput().trim(), \"hello\");\n-      } finally {\n-         if (deployment != null) {\n-            adapter.destroyNode(deployment.getNodeId());\n-         }\n-      }\n-   }\n-\n-   @Test\n-   public void testListHardwareProfiles() {\n-      final Iterable<RoleSize> roleSizes = adapter.listHardwareProfiles();\n-      assertFalse(Iterables.isEmpty(roleSizes));\n-\n-      for (RoleSize roleSize : roleSizes) {\n-         assertNotNull(roleSize);\n-      }\n-   }\n-\n-   @AfterGroups(groups = \"live\", alwaysRun = true)\n-   @Override\n-   protected void tearDown() {\n-      super.tearDown();\n-   }\n-\n-   @Override\n-   protected Iterable<Module> setupModules() {\n-      return ImmutableSet.<Module>of(getLoggingModule(), new SshjSshClientModule());\n-   }\n-\n-}",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapterLiveTest.java",
                "status": "removed",
                "changes": 177,
                "deletions": 177,
                "sha": "f4b6f563d1e4b934c94ab6127c6a2f7a9ff9d841",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/1c5df25cf92626b9657257f959b40c25650e65fc/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapterLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapterLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceAdapterLiveTest.java?ref=1c5df25cf92626b9657257f959b40c25650e65fc"
            },
            {
                "patch": "@@ -17,126 +17,111 @@\n package org.jclouds.azurecompute.compute;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.testng.Assert.assertTrue;\n-import java.util.Arrays;\n+import static org.jclouds.compute.predicates.NodePredicates.inGroup;\n+import static org.jclouds.compute.predicates.NodePredicates.runningInGroup;\n+import java.util.Map;\n import java.util.Random;\n import java.util.Set;\n \n-import org.jclouds.azurecompute.AzureComputeApi;\n+import org.jclouds.azurecompute.compute.options.AzureComputeTemplateOptions;\n import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n-import org.jclouds.azurecompute.options.AzureComputeTemplateOptions;\n-import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n import org.jclouds.compute.RunNodesException;\n+import org.jclouds.compute.RunScriptOnNodesException;\n import org.jclouds.compute.domain.ExecResponse;\n import org.jclouds.compute.domain.NodeMetadata;\n import org.jclouds.compute.domain.Template;\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.internal.BaseComputeServiceContextLiveTest;\n-import org.jclouds.ssh.SshClient;\n import org.jclouds.sshj.config.SshjSshClientModule;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n+import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import com.google.common.collect.Iterables;\n-import com.google.common.reflect.TypeToken;\n import com.google.inject.Module;\n \n @Test(groups = \"live\", testName = \"AzureComputeServiceContextLiveTest\")\n public class AzureComputeServiceContextLiveTest extends BaseComputeServiceContextLiveTest {\n \n-   private static final int RAND = new Random().nextInt(999);\n-\n-   private AzureComputeApi api;\n-\n-   private String storageServiceName = null;\n-\n-   protected String getStorageServiceName() {\n-      if (storageServiceName == null) {\n-         storageServiceName = String.format(\"%3.20sacsc\", System.getProperty(\"user.name\") + RAND).toLowerCase();\n-      }\n-      return storageServiceName;\n-   }\n-\n-   @BeforeClass\n-   public void setup() {\n-      api = newBuilder().\n-              modules(setupModules()).\n-              overrides(setupProperties()).\n-              buildApi(new TypeToken<AzureComputeApi>(getClass()) {\n-\n-                 private static final long serialVersionUID = 309104475566522958L;\n-\n-              });\n-   }\n-\n-   @AfterClass(alwaysRun = true)\n-   public void tearDown() {\n-      assertTrue(new ConflictManagementPredicate(api) {\n-\n-         @Override\n-         protected String operation() {\n-            return api.getStorageAccountApi().delete(getStorageServiceName());\n-         }\n-      }.apply(getStorageServiceName()));\n-   }\n+   private static final int COUNT = 2;\n \n    @Override\n    protected Module getSshModule() {\n       return new SshjSshClientModule();\n    }\n \n    public AzureComputeServiceContextLiveTest() {\n-      super();\n-\n       provider = \"azurecompute\";\n    }\n \n-   /**\n-    * Functionally equivalent to\n-    * {@link AzureComputeServiceAdapterLiveTest#testCreateNodeWithGroupEncodedIntoNameThenStoreCredentials}.\n-    *\n-    * @throws RunNodesException\n-    */\n+\n    @Test\n-   public void testLaunchNode() throws RunNodesException {\n+   public void testWindowsNode() throws RunNodesException {\n+      final String groupName = String.format(\"win-%s\", System.getProperty(\"user.name\"));\n+\n+      final TemplateBuilder templateBuilder = view.getComputeService().templateBuilder();\n+      //templateBuilder.imageId(\"3a50f22b388a4ff7ab41029918570fa6__Windows-Server-2012-Essentials-20141204-enus\");\n+      templateBuilder.imageId(\"a699494373c04fc0bc8f2bb1389d6106__Nano_TP4_Azure_20151118_8GB.vhd\");\n+      templateBuilder.hardwareId(\"BASIC_A2\");\n+      templateBuilder.locationId(BaseAzureComputeApiLiveTest.LOCATION);\n+      final Template template = templateBuilder.build();\n \n-       final String groupName = String.format(\"%s%d-group-acsclt\",\n-              System.getProperty(\"user.name\"),\n-              new Random(999).nextInt());\n+      // test passing custom options\n+      final AzureComputeTemplateOptions options = template.getOptions().as(AzureComputeTemplateOptions.class);\n+      options.inboundPorts(5985);\n \n-      final String name = String.format(\"%1.5s%dacsclt\", System.getProperty(\"user.name\"), new Random(999).nextInt());\n+      try {\n+         Set<? extends NodeMetadata> nodes = view.getComputeService().createNodesInGroup(groupName, 1, template);\n+         assertThat(nodes).hasSize(1);\n+      } finally {\n+         view.getComputeService().destroyNodesMatching(inGroup(groupName));\n+      }\n+   }\n+\n+   @Test\n+   public void testLaunchNodes() throws RunNodesException {\n+      final int rand = new Random().nextInt(999);\n+      final String groupName = String.format(\"%s%d-group-acsclt\", System.getProperty(\"user.name\"), rand);\n \n       final TemplateBuilder templateBuilder = view.getComputeService().templateBuilder();\n       templateBuilder.imageId(BaseAzureComputeApiLiveTest.IMAGE_NAME);\n       templateBuilder.hardwareId(\"BASIC_A0\");\n       templateBuilder.locationId(BaseAzureComputeApiLiveTest.LOCATION);\n-      final Template tmp = templateBuilder.build();\n+      final Template template = templateBuilder.build();\n \n       // test passing custom options\n-      final AzureComputeTemplateOptions options = tmp.getOptions().as(AzureComputeTemplateOptions.class);\n+      final AzureComputeTemplateOptions options = template.getOptions().as(AzureComputeTemplateOptions.class);\n       options.inboundPorts(22);\n-      options.storageAccountName(getStorageServiceName());\n-      options.virtualNetworkName(BaseAzureComputeApiLiveTest.VIRTUAL_NETWORK_NAME);\n-      options.subnetName(BaseAzureComputeApiLiveTest.DEFAULT_SUBNET_NAME);\n-      options.addressSpaceAddressPrefix(BaseAzureComputeApiLiveTest.DEFAULT_ADDRESS_SPACE);\n-      options.subnetAddressPrefix(BaseAzureComputeApiLiveTest.DEFAULT_SUBNET_ADDRESS_SPACE);\n-      options.nodeNames(Arrays.asList(name));\n-\n-      NodeMetadata node = null;\n+\n       try {\n-         final Set<? extends NodeMetadata> nodes = view.getComputeService().createNodesInGroup(groupName, 1, tmp);\n-         node = Iterables.getOnlyElement(nodes);\n+         Set<? extends NodeMetadata> nodes = view.getComputeService().createNodesInGroup(groupName, COUNT, template);\n+         assertThat(nodes).hasSize(COUNT);\n \n-         final SshClient client = view.utils().sshForNode().apply(node);\n-         client.connect();\n-         final ExecResponse hello = client.exec(\"echo hello\");\n-         assertThat(hello.getOutput().trim()).isEqualTo(\"hello\");\n-      } finally {\n-         if (node != null) {\n-            view.getComputeService().destroyNode(node.getId());\n+         Map<? extends NodeMetadata, ExecResponse> responses = view.getComputeService().runScriptOnNodesMatching(runningInGroup(groupName), \"echo hello\");\n+         assertThat(responses).hasSize(COUNT);\n+\n+         for (ExecResponse execResponse : responses.values()) {\n+            assertThat(execResponse.getOutput().trim()).isEqualTo(\"hello\");\n          }\n+      } catch (RunScriptOnNodesException e) {\n+         Assert.fail();\n+      } finally {\n+         view.getComputeService().destroyNodesMatching(inGroup(groupName));\n       }\n    }\n \n+   @Test(expectedExceptions = { IllegalStateException.class })\n+   public void testNotExistingStorageAccount() throws RunNodesException {\n+      final int rand = new Random().nextInt(999);\n+      final String groupName = String.format(\"%s%d-group-acsclt\", System.getProperty(\"user.name\"), rand);\n+\n+      final String storageServiceName = \"not3x1st1ng\";\n+\n+      final Template template = view.getComputeService().templateBuilder().build();\n+\n+      // test passing custom options\n+      final AzureComputeTemplateOptions options = template.getOptions().as(AzureComputeTemplateOptions.class);\n+      options.storageAccountName(storageServiceName);\n+\n+      Set<? extends NodeMetadata> nodes = view.getComputeService().createNodesInGroup(groupName, 1, template);\n+   }\n+\n }",
                "additions": 62,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceContextLiveTest.java",
                "status": "modified",
                "changes": 139,
                "deletions": 77,
                "sha": "dbcfd387f52145769d77e742edc384c7816b3d8c",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceContextLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceContextLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceContextLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,20 +16,27 @@\n  */\n package org.jclouds.azurecompute.compute;\n \n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.inject.Module;\n+import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n import org.jclouds.compute.domain.NodeMetadata;\n+import org.jclouds.compute.domain.Template;\n+import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.internal.BaseComputeServiceLiveTest;\n import org.jclouds.sshj.config.SshjSshClientModule;\n import org.testng.annotations.Test;\n \n-@Test(groups = {\"integration\", \"live\"}, singleThreaded = true, testName = \"AzureComputeServiceLiveTest\")\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.inject.Module;\n+\n+@Test(groups = {\"integration\", \"live\"}, singleThreaded = true, testName = \"AzureComputeServiceLiveTest\", alwaysRun = false)\n public class AzureComputeServiceLiveTest extends BaseComputeServiceLiveTest {\n \n    public AzureComputeServiceLiveTest() {\n       super();\n       provider = \"azurecompute\";\n+      // this is 30 seconds by default, but Azure will take anyway longer because we need to wait for a non-null\n+      // Deployment object to be returned: see the end of AzureComputeServiceAdapter#createNodeWithGroupEncodedIntoName\n+      nonBlockDurationSeconds = 600;\n    }\n \n    @Override\n@@ -42,16 +49,15 @@ protected void checkTagsInNodeEquals(final NodeMetadata node, final ImmutableSet\n       // Azure does not support tags\n    }\n \n-   @Override\n-   public void testOptionToNotBlock() throws Exception {\n-      // this is 30 seconds by default, but Azure will take anyway longer because we need to wait for a non-null\n-      // Deployment object to be returned: see the end of AzureComputeServiceAdapter#createNodeWithGroupEncodedIntoName\n-      nonBlockDurationSeconds = 120;\n-      super.testOptionToNotBlock();\n-   }\n-\n    @Override\n    protected Module getSshModule() {\n       return new SshjSshClientModule();\n    }\n+\n+   protected Template buildTemplate(TemplateBuilder templateBuilder) {\n+      return templateBuilder.imageId(BaseAzureComputeApiLiveTest.IMAGE_NAME)\n+              .hardwareId(\"BASIC_A1\")\n+              .locationId(BaseAzureComputeApiLiveTest.LOCATION)\n+              .build();\n+   }\n }",
                "additions": 18,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceLiveTest.java",
                "status": "modified",
                "changes": 30,
                "deletions": 12,
                "sha": "6eb022008bd8e314fe9737002ee61f4a06cc1254",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/compute/AzureComputeServiceLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -19,30 +19,29 @@\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.jclouds.util.Predicates2.retry;\n+import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.assertEquals;\n-\n+import java.util.List;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import org.jclouds.azurecompute.compute.AzureComputeServiceAdapter;\n import org.jclouds.azurecompute.domain.CloudService;\n+import org.jclouds.azurecompute.domain.CloudServiceProperties;\n import org.jclouds.azurecompute.domain.Deployment;\n import org.jclouds.azurecompute.domain.DeploymentParams;\n import org.jclouds.azurecompute.domain.OSImage;\n+import org.jclouds.azurecompute.domain.Role;\n import org.jclouds.azurecompute.domain.RoleSize;\n-import org.jclouds.azurecompute.domain.CloudServiceProperties;\n import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n+import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import com.google.common.base.Predicate;\n-import com.google.common.collect.Iterables;\n-import java.util.List;\n-import java.util.logging.Level;\n-import org.jclouds.azurecompute.domain.Role;\n-import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n+import com.google.common.collect.ImmutableSet;\n \n @Test(groups = \"live\", testName = \"DeploymentApiLiveTest\", singleThreaded = true)\n public class DeploymentApiLiveTest extends BaseAzureComputeApiLiveTest {\n@@ -93,10 +92,8 @@ public void testCreate() {\n               .mediaLink(AzureComputeServiceAdapter.createMediaLink(storageService.serviceName(), DEPLOYMENT))\n               .username(\"test\")\n               .password(\"supersecurePassword1!\")\n-              .size(RoleSize.Type.BASIC_A2)\n-              .subnetName(Iterables.get(virtualNetworkSite.subnets(), 0).name())\n-              .virtualNetworkName(virtualNetworkSite.name())\n-              .externalEndpoint(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22))\n+              .size(RoleSize.Type.BASIC_A0)\n+              .externalEndpoints(ImmutableSet.of(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22)))\n               .build();\n       final String requestId = api().create(params);\n       assertTrue(operationSucceeded.apply(requestId), requestId);\n@@ -110,7 +107,6 @@ public void testCreate() {\n       assertThat(deployment.slot()).isEqualTo(Deployment.Slot.PRODUCTION);\n       assertThat(deployment.roleList().size()).isEqualTo(1);\n       assertThat(deployment.roleInstanceList().size()).isEqualTo(1);\n-      assertThat(deployment.virtualNetworkName()).isEqualTo(virtualNetworkSite.name());\n \n    }\n ",
                "additions": 9,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiLiveTest.java",
                "status": "modified",
                "changes": 22,
                "deletions": 13,
                "sha": "6982300d0491791e0d28fcf56e4b034d912644f8",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -19,7 +19,6 @@\n import static org.jclouds.azurecompute.domain.DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort;\n import static org.jclouds.azurecompute.domain.DeploymentParams.ExternalEndpoint.inboundUdpToLocalPort;\n import static org.testng.Assert.assertEquals;\n-\n import java.net.URI;\n \n import org.jclouds.azurecompute.domain.DeploymentParams;\n@@ -30,6 +29,7 @@\n import org.jclouds.azurecompute.xml.ListOSImagesHandlerTest;\n import org.testng.annotations.Test;\n \n+import com.google.common.collect.ImmutableSet;\n import com.squareup.okhttp.mockwebserver.MockWebServer;\n \n @Test(groups = \"unit\", testName = \"DeploymentApiMockTest\")\n@@ -51,8 +51,8 @@ public void testCreateLinux() throws Exception {\n                  .username(\"username\").password(\"testpwd\")\n                  .virtualNetworkName(\"my-virtualNetworkName\")\n                  .reservedIPName(\"myreservedip\")\n-                 .externalEndpoint(inboundTcpToLocalPort(80, 8080))\n-                 .externalEndpoint(inboundUdpToLocalPort(53, 53)).build();\n+                 .externalEndpoints(ImmutableSet.of(inboundTcpToLocalPort(80, 8080), inboundUdpToLocalPort(53, 53)))\n+                 .build();\n \n          assertEquals(api.create(params), \"request-1\");\n \n@@ -77,8 +77,8 @@ public void testCreateWindows() throws Exception {\n                  .sourceImageName(OSImage.name()).mediaLink(OSImage.mediaLink()).os(OSImage.os())\n                  .username(\"username\").password(\"testpwd\")\n                  .virtualNetworkName(\"my-virtualNetworkName\")\n-                 .externalEndpoint(inboundTcpToLocalPort(80, 8080))\n-                 .externalEndpoint(inboundUdpToLocalPort(53, 53)).build();\n+                 .externalEndpoints(ImmutableSet.of(inboundTcpToLocalPort(80, 8080), inboundUdpToLocalPort(53, 53)))\n+                 .build();\n \n          assertEquals(api.create(params), \"request-1\");\n ",
                "additions": 5,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiMockTest.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "7d35311d10c61cb47082b2b8d44ed9bbcbc4f30d",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiMockTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiMockTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/DeploymentApiMockTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -98,7 +98,8 @@ private void checkDisk(Disk disk) {\n       }\n \n       if (disk.sourceImage() != null) {\n-         assertTrue(images.contains(disk.sourceImage()), \"SourceImage not in \" + images + \" :\" + disk);\n+      //TODO disk can be generated from a `VM Image` that listDisk doesn't consider\n+      //   assertTrue(images.contains(disk.sourceImage()), \"SourceImage not in \" + images + \" :\" + disk);\n       }\n \n       if (disk.affinityGroup() != null) {",
                "additions": 2,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DiskApiLiveTest.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "1847f1f0bbcc0b509bd6030f829cc4bf17281878",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/DiskApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/DiskApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/DiskApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -28,9 +28,6 @@\n import org.jclouds.azurecompute.domain.Rule;\n import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n \n-import static org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest.DEFAULT_SUBNET_NAME;\n-import static org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest.LOCATION;\n-import static org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest.VIRTUAL_NETWORK_NAME;\n import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n \n import org.testng.annotations.AfterClass;\n@@ -44,14 +41,6 @@\n \n    private static final String GROUP2 = System.getProperty(\"user.name\") + RAND + \"-2\";\n \n-   public static final String ADDRESS_SPACE = \"10.10.0.0/20\";\n-\n-   public static final String SUBNET_ADDRESS_SPACE = \"10.10.0.0/23\";\n-\n-   public static final String NETWORK_NAME = \"secgrp-vnetsite\";\n-\n-   public static final String SUBNET_NAME = \"secgrp-subnet\";\n-\n    @BeforeClass\n    public void groupSetup() {\n       // ----------------------------\n@@ -108,7 +97,7 @@ public void get() {\n       assertEquals(group.name(), GROUP1);\n       assertEquals(group.label(), GROUP1 + \" security group\");\n       assertEquals(group.location(), LOCATION);\n-      assertNull(group.state());\n+      assertTrue(group.state() == NetworkSecurityGroup.State.CREATED);\n       assertTrue(group.rules().isEmpty());\n    }\n \n@@ -118,7 +107,7 @@ public void getFullDetails() {\n       assertEquals(group.name(), GROUP2);\n       assertEquals(group.label(), GROUP2 + \" security group\");\n       assertEquals(group.location(), LOCATION);\n-      assertNull(group.state());\n+      assertTrue(group.state() == NetworkSecurityGroup.State.CREATED);\n       assertFalse(group.rules().isEmpty());\n    }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/NetworkSecurityGroupApiLiveTest.java",
                "status": "modified",
                "changes": 15,
                "deletions": 13,
                "sha": "7e41eb7ef6fcf1db445f7a438380ea937e0e4e8a",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/NetworkSecurityGroupApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/NetworkSecurityGroupApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/NetworkSecurityGroupApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -22,26 +22,20 @@\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n-import org.jclouds.azurecompute.domain.AffinityGroup;\n import org.jclouds.azurecompute.domain.Location;\n import org.jclouds.azurecompute.domain.OSImage;\n import org.jclouds.azurecompute.internal.AbstractAzureComputeApiLiveTest;\n-\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n import com.google.common.base.Function;\n-import com.google.common.base.Splitter;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Sets;\n \n @Test(groups = \"live\", testName = \"OSImageApiLiveTest\")\n public class OSImageApiLiveTest extends AbstractAzureComputeApiLiveTest {\n \n    private ImmutableSet<String> locations;\n \n-   private ImmutableSet<String> groups;\n-\n    @BeforeClass(groups = {\"integration\", \"live\"})\n    @Override\n    public void setup() {\n@@ -54,13 +48,6 @@ public String apply(final Location location) {\n             return location.name();\n          }\n       }));\n-      groups = ImmutableSet.copyOf(transform(api.getAffinityGroupApi().list(), new Function<AffinityGroup, String>() {\n-\n-         @Override\n-         public String apply(final AffinityGroup group) {\n-            return group.name();\n-         }\n-      }));\n    }\n \n    public void testList() {\n@@ -84,10 +71,6 @@ private void checkOSImage(final OSImage osImage) {\n                  \"MediaLink should be an http(s) url\" + osImage);\n       }\n \n-      ImmutableSet<String> osImageLocations = ImmutableSet.copyOf(Splitter.on(';').splitToList(osImage.location()));\n-      assertFalse(Sets.intersection(osImageLocations, locations).isEmpty(),\n-              \"No shared locations between \" + locations + \" and \" + osImageLocations);\n-\n       // Ex. Dirty data in RightScale eula field comes out as an empty string.\n       assertFalse(osImage.eula().contains(\"\"));\n       if (osImage.affinityGroup() != null) {",
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/OSImageApiLiveTest.java",
                "status": "modified",
                "changes": 17,
                "deletions": 17,
                "sha": "edff8941fbba053d3e38180cc024f66e8f1688a3",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/OSImageApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/OSImageApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/OSImageApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -22,30 +22,29 @@\n import static org.testng.Assert.assertNotEquals;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n+import java.net.URI;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n \n-import com.google.common.base.Predicate;\n-import com.google.common.collect.ImmutableSet;\n-\n-import com.google.common.collect.Iterables;\n import org.jclouds.azurecompute.compute.AzureComputeServiceAdapter;\n+import org.jclouds.azurecompute.domain.CaptureVMImageParams;\n+import org.jclouds.azurecompute.domain.CloudService;\n import org.jclouds.azurecompute.domain.Deployment;\n import org.jclouds.azurecompute.domain.DeploymentParams;\n-import org.jclouds.azurecompute.domain.VMImage;\n-import org.jclouds.azurecompute.domain.RoleSize;\n import org.jclouds.azurecompute.domain.OSImage;\n-import org.jclouds.azurecompute.domain.CloudService;\n-import org.jclouds.azurecompute.domain.CaptureVMImageParams;\n+import org.jclouds.azurecompute.domain.RoleSize;\n+import org.jclouds.azurecompute.domain.VMImage;\n import org.jclouds.azurecompute.domain.VMImageParams;\n import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n-import java.net.URI;\n-import java.util.List;\n-import java.util.Date;\n-import java.text.SimpleDateFormat;\n+import com.google.common.base.Predicate;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n \n @Test(groups = \"live\", testName = \"VMImageApiLiveTest\")\n public class VMImageApiLiveTest extends BaseAzureComputeApiLiveTest {\n@@ -91,9 +90,7 @@ public boolean apply(String input) {\n                 .username(\"test\")\n                 .password(\"supersecurePassword1!\")\n                 .size(RoleSize.Type.BASIC_A2)\n-                .subnetName(Iterables.get(virtualNetworkSite.subnets(), 0).name())\n-                .virtualNetworkName(virtualNetworkSite.name())\n-                .externalEndpoint(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22))\n+                .externalEndpoints(ImmutableSet.of(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22)))\n                 .build();\n         Deployment deployment = getOrCreateDeployment(cloudService.name(), params);\n         Deployment.RoleInstance roleInstance = getFirstRoleInstanceInDeployment(DEPLOYMENT);\n@@ -201,6 +198,12 @@ protected String operation() {\n                 return api.getDiskApi().delete(diskName);\n             }\n         }.apply(diskName));\n+       assertTrue(new ConflictManagementPredicate(api) {\n+          @Override\n+          protected String operation() {\n+             return api.getCloudServiceApi().delete(cloudService.name());\n+          }\n+       }.apply(cloudService.name()));\n         super.tearDown();\n     }\n ",
                "additions": 18,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VMImageApiLiveTest.java",
                "status": "modified",
                "changes": 33,
                "deletions": 15,
                "sha": "556e73f19a047d666e50334dee1d87730cc55327",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VMImageApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/VMImageApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/VMImageApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -20,10 +20,6 @@\n import static org.jclouds.azurecompute.domain.Deployment.InstanceStatus.READY_ROLE;\n import static org.jclouds.util.Predicates2.retry;\n import static org.testng.Assert.assertTrue;\n-\n-import com.google.common.base.Predicate;\n-import com.google.common.collect.Iterables;\n-\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -42,6 +38,10 @@\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n+import com.google.common.base.Predicate;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+\n /*\n  * Note: Live test for CaptureVMImage method is in VMImageApiLiveTest class\n  */\n@@ -75,7 +75,7 @@ public boolean apply(String input) {\n             RoleInstance roleInstance = getFirstRoleInstanceInDeployment(input);\n             return roleInstance != null && roleInstance.instanceStatus() == READY_ROLE;\n          }\n-      }, 600, 5, 5, SECONDS);\n+      }, 600, 5, 15, SECONDS);\n \n       roleInstanceStopped = retry(new Predicate<String>() {\n \n@@ -84,7 +84,7 @@ public boolean apply(String input) {\n             RoleInstance roleInstance = getFirstRoleInstanceInDeployment(input);\n             return roleInstance != null && roleInstance.instanceStatus() == Deployment.InstanceStatus.STOPPED_VM;\n          }\n-      }, 600, 5, 5, SECONDS);\n+      }, 600, 5, 15, SECONDS);\n \n       final DeploymentParams params = DeploymentParams.builder()\n               .name(DEPLOYMENT)\n@@ -93,10 +93,8 @@ public boolean apply(String input) {\n               .mediaLink(AzureComputeServiceAdapter.createMediaLink(storageService.serviceName(), DEPLOYMENT))\n               .username(\"test\")\n               .password(\"supersecurePassword1!\")\n-              .size(RoleSize.Type.BASIC_A2)\n-              .subnetName(Iterables.get(virtualNetworkSite.subnets(), 0).name())\n-              .virtualNetworkName(virtualNetworkSite.name())\n-              .externalEndpoint(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22))\n+              .size(RoleSize.Type.BASIC_A0)\n+              .externalEndpoints(ImmutableSet.of(DeploymentParams.ExternalEndpoint.inboundTcpToLocalPort(22, 22)))\n               .build();\n       getOrCreateDeployment(cloudService.name(), params);\n       RoleInstance roleInstance = getFirstRoleInstanceInDeployment(DEPLOYMENT);\n@@ -173,8 +171,9 @@ protected String operation() {\n       Logger.getAnonymousLogger().log(Level.INFO, \"roleInstance restarted: {0}\", roleInstance);\n    }\n \n-   @AfterClass(alwaysRun = true)\n-   public void cleanup() {\n+   @AfterClass\n+   @Override\n+   protected void tearDown() {\n       if (cloudService != null && api.getDeploymentApiForService(cloudService.name()).get(DEPLOYMENT) != null) {\n          final List<Role> roles = api.getDeploymentApiForService(cloudService.name()).get(DEPLOYMENT).roleList();\n \n@@ -186,14 +185,6 @@ protected String operation() {\n             }\n          }.apply(DEPLOYMENT));\n \n-         assertTrue(new ConflictManagementPredicate(api) {\n-\n-            @Override\n-            protected String operation() {\n-               return api.getCloudServiceApi().delete(cloudService.name());\n-            }\n-         }.apply(cloudService.name()));\n-\n          for (Role r : roles) {\n             final Role.OSVirtualHardDisk disk = r.osVirtualHardDisk();\n             if (disk != null) {\n@@ -206,6 +197,16 @@ protected String operation() {\n                }.apply(disk.diskName()));\n             }\n          }\n+\n+         assertTrue(new ConflictManagementPredicate(api) {\n+\n+            @Override\n+            protected String operation() {\n+               return api.getCloudServiceApi().delete(cloudService.name());\n+            }\n+         }.apply(cloudService.name()));\n+\n+         super.tearDown();\n       }\n    }\n ",
                "additions": 21,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualMachineApiLiveTest.java",
                "status": "modified",
                "changes": 41,
                "deletions": 20,
                "sha": "22d50e61f2f1331e53e03e3ebe6d666cc266d676",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualMachineApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualMachineApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualMachineApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -19,35 +19,37 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n-import static org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest.VIRTUAL_NETWORK_NAME;\n-\n-import com.google.common.base.Predicates;\n+import java.util.List;\n \n+import org.jclouds.azurecompute.AzureTestUtils;\n import org.jclouds.azurecompute.domain.NetworkConfiguration;\n import org.jclouds.azurecompute.domain.NetworkConfiguration.VirtualNetworkSite;\n import org.jclouds.azurecompute.internal.BaseAzureComputeApiLiveTest;\n-\n+import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n+import org.testng.annotations.AfterSuite;\n+import org.testng.annotations.BeforeSuite;\n import org.testng.annotations.Test;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n \n-import org.jclouds.azurecompute.AzureTestUtils;\n-import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n-import org.testng.annotations.AfterSuite;\n-import org.testng.annotations.BeforeSuite;\n-\n-import java.util.List;\n-\n @Test(groups = \"live\", testName = \"VirtualNetworkApiLiveTest\", singleThreaded = true)\n public class VirtualNetworkApiLiveTest extends BaseAzureComputeApiLiveTest {\n \n+   private static final String DEFAULT_ADDRESS_SPACE = \"10.0.0.0/20\";\n+   private static final String DEFAULT_SUBNET_ADDRESS_SPACE = \"10.0.0.0/23\";\n+   private List<VirtualNetworkSite> initialVirtualNetworkSite;\n+\n    @BeforeSuite\n    @Override\n    public void setup() {\n       super.setup();\n \n+      initialVirtualNetworkSite = AzureTestUtils.getVirtualNetworkSite(api);\n+\n+      virtualNetworkSite = getOrCreateVirtualNetworkSite(VIRTUAL_NETWORK_NAME, LOCATION);\n+\n       final List<VirtualNetworkSite> virtualNetworkSites = Lists.newArrayList(Iterables.filter(\n               AzureTestUtils.getVirtualNetworkSite(api),\n               new AzureTestUtils.SameVirtualNetworkSiteNamePredicate(VIRTUAL_NETWORK_NAME)));\n@@ -74,18 +76,13 @@ public void setup() {\n    protected void tearDown() {\n       super.tearDown();\n \n-      final List<VirtualNetworkSite> virtualNetworkSites = Lists.newArrayList(Iterables.filter(api.\n-              getVirtualNetworkApi().list(),\n-              Predicates.not(new AzureTestUtils.SameVirtualNetworkSiteNamePredicate(VIRTUAL_NETWORK_NAME))));\n-\n+      final NetworkConfiguration networkConfiguration = NetworkConfiguration.create(NetworkConfiguration.VirtualNetworkConfiguration.create(null, initialVirtualNetworkSite));\n       assertTrue(new ConflictManagementPredicate(api) {\n-\n          @Override\n          protected String operation() {\n-            return api.getVirtualNetworkApi().set(NetworkConfiguration.create(\n-                    NetworkConfiguration.VirtualNetworkConfiguration.create(null, virtualNetworkSites)));\n+            return api.getVirtualNetworkApi().set(networkConfiguration);\n          }\n-      }.apply(VIRTUAL_NETWORK_NAME));\n+      }.apply(\"Revert VirtualNetworkConfiguration\"));\n    }\n \n    @Test",
                "additions": 16,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualNetworkApiLiveTest.java",
                "status": "modified",
                "changes": 35,
                "deletions": 19,
                "sha": "705a37789383711ab8f27f43edb8f128b37d6ea8",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualNetworkApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualNetworkApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/features/VirtualNetworkApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -16,14 +16,22 @@\n  */\n package org.jclouds.azurecompute.internal;\n \n-import com.google.common.base.Predicate;\n-import java.util.Random;\n import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_POLL_INITIAL_PERIOD;\n+import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_POLL_MAX_PERIOD;\n+import static org.jclouds.azurecompute.config.AzureComputeProperties.OPERATION_TIMEOUT;\n+import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_FORMAT;\n+import static org.jclouds.azurecompute.config.AzureComputeProperties.TCP_RULE_REGEXP;\n+import java.util.Properties;\n+import java.util.Random;\n+\n import org.jclouds.apis.BaseApiLiveTest;\n import org.jclouds.azurecompute.AzureComputeApi;\n+import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n+import org.jclouds.compute.config.ComputeServiceProperties;\n import org.testng.annotations.BeforeClass;\n \n-import org.jclouds.azurecompute.util.ConflictManagementPredicate;\n+import com.google.common.base.Predicate;\n \n public abstract class AbstractAzureComputeApiLiveTest extends BaseApiLiveTest<AzureComputeApi> {\n \n@@ -35,6 +43,18 @@ public AbstractAzureComputeApiLiveTest() {\n       provider = \"azurecompute\";\n    }\n \n+   @Override protected Properties setupProperties() {\n+      Properties properties = super.setupProperties();\n+      properties.put(ComputeServiceProperties.POLL_INITIAL_PERIOD, 1000);\n+      properties.put(ComputeServiceProperties.POLL_MAX_PERIOD, 10000);\n+      properties.setProperty(OPERATION_TIMEOUT, \"60000\");\n+      properties.setProperty(OPERATION_POLL_INITIAL_PERIOD, \"5\");\n+      properties.setProperty(OPERATION_POLL_MAX_PERIOD, \"15\");\n+      properties.setProperty(TCP_RULE_FORMAT, \"tcp_%s-%s\");\n+      properties.setProperty(TCP_RULE_REGEXP, \"tcp_\\\\d{1,5}-\\\\d{1,5}\");\n+      return properties;\n+   }\n+\n    @BeforeClass\n    @Override\n    public void setup() {",
                "additions": 23,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/internal/AbstractAzureComputeApiLiveTest.java",
                "status": "modified",
                "changes": 26,
                "deletions": 3,
                "sha": "47bfb5a805c7abd4bfee33d31d8e2fa2ec2ca2dc",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/internal/AbstractAzureComputeApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/internal/AbstractAzureComputeApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/internal/AbstractAzureComputeApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -79,7 +79,6 @@ public void setup() {\n       super.setup();\n \n       operationSucceeded = new ConflictManagementPredicate(api, 600, 5, 5, SECONDS);\n-      virtualNetworkSite = getOrCreateVirtualNetworkSite(VIRTUAL_NETWORK_NAME, LOCATION);\n \n       final CreateStorageServiceParams params = CreateStorageServiceParams.builder().\n               serviceName(getStorageServiceName()).\n@@ -96,12 +95,14 @@ protected void tearDown() {\n       super.tearDown();\n \n       assertTrue(new ConflictManagementPredicate(api) {\n-\n          @Override\n          protected String operation() {\n             return api.getStorageAccountApi().delete(getStorageServiceName());\n          }\n       }.apply(getStorageServiceName()));\n+\n+\n+\n    }\n \n    protected CloudService getOrCreateCloudService(final String cloudServiceName, final String location) {",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/internal/BaseAzureComputeApiLiveTest.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "f32f9431b05b95259ac1e50ae1c1247e749528e2",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/java/org/jclouds/azurecompute/internal/BaseAzureComputeApiLiveTest.java",
                "filename": "azurecompute/src/test/java/org/jclouds/azurecompute/internal/BaseAzureComputeApiLiveTest.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/java/org/jclouds/azurecompute/internal/BaseAzureComputeApiLiveTest.java?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "patch": "@@ -1 +1 @@\n-<Deployment xmlns=\"http://schemas.microsoft.com/windowsazure\"><Name>mydeployment</Name><DeploymentSlot>Production</DeploymentSlot><Label>mydeployment</Label><RoleList><Role><RoleName>mydeployment</RoleName><RoleType>PersistentVMRole</RoleType><ConfigurationSets><ConfigurationSet><ConfigurationSetType>WindowsProvisioningConfiguration</ConfigurationSetType><ComputerName>mydeployment</ComputerName><AdminPassword>testpwd</AdminPassword><ResetPasswordOnFirstLogon>false</ResetPasswordOnFirstLogon><EnableAutomaticUpdate>false</EnableAutomaticUpdate><DomainJoin><Credentials><Domain>mydeployment</Domain><Username>username</Username><Password>testpwd</Password></Credentials><JoinDomain>mydeployment</JoinDomain></DomainJoin><StoredCertificateSettings/></ConfigurationSet><ConfigurationSet><ConfigurationSetType>NetworkConfiguration</ConfigurationSetType><InputEndpoints><InputEndpoint><LocalPort>8080</LocalPort><Name>tcp_80-8080</Name><Port>80</Port><Protocol>tcp</Protocol></InputEndpoint><InputEndpoint><LocalPort>53</LocalPort><Name>udp_53-53</Name><Port>53</Port><Protocol>udp</Protocol></InputEndpoint></InputEndpoints><SubnetNames/></ConfigurationSet></ConfigurationSets><DataVirtualHardDisks/><OSVirtualHardDisk><HostCaching>ReadWrite</HostCaching><MediaLink>http://blobs/disks/mydeployment/MSFT__Win2K8R2SP1-120612-1520-121206-01-en-us-30GB.vhd</MediaLink><SourceImageName>MSFT__Win2K8R2SP1-120612-1520-121206-01-en-us-30GB.vhd</SourceImageName><OS>Windows</OS></OSVirtualHardDisk><RoleSize>Medium</RoleSize></Role></RoleList><VirtualNetworkName>my-virtualNetworkName</VirtualNetworkName></Deployment>\n\\ No newline at end of file\n+<Deployment xmlns=\"http://schemas.microsoft.com/windowsazure\"><Name>mydeployment</Name><DeploymentSlot>Production</DeploymentSlot><Label>mydeployment</Label><RoleList><Role><RoleName>mydeployment</RoleName><RoleType>PersistentVMRole</RoleType><ConfigurationSets><ConfigurationSet><ConfigurationSetType>WindowsProvisioningConfiguration</ConfigurationSetType><ComputerName>mydeployment</ComputerName><AdminPassword>testpwd</AdminPassword><ResetPasswordOnFirstLogon>false</ResetPasswordOnFirstLogon><EnableAutomaticUpdate>false</EnableAutomaticUpdate><DomainJoin><Credentials><Domain>mydeployment</Domain><Username>username</Username><Password>testpwd</Password></Credentials><JoinDomain>mydeployment</JoinDomain></DomainJoin><StoredCertificateSettings/><WinRM><Listeners><Listener><Protocol>http</Protocol></Listener></Listeners></WinRM><AdminUsername>username</AdminUsername><AdminPassword>username</AdminPassword></ConfigurationSet><ConfigurationSet><ConfigurationSetType>NetworkConfiguration</ConfigurationSetType><InputEndpoints><InputEndpoint><LocalPort>8080</LocalPort><Name>tcp_80-8080</Name><Port>80</Port><Protocol>tcp</Protocol></InputEndpoint><InputEndpoint><LocalPort>53</LocalPort><Name>udp_53-53</Name><Port>53</Port><Protocol>udp</Protocol></InputEndpoint></InputEndpoints><SubnetNames/></ConfigurationSet></ConfigurationSets><DataVirtualHardDisks/><OSVirtualHardDisk><HostCaching>ReadWrite</HostCaching><MediaLink>http://blobs/disks/mydeployment/MSFT__Win2K8R2SP1-120612-1520-121206-01-en-us-30GB.vhd</MediaLink><SourceImageName>MSFT__Win2K8R2SP1-120612-1520-121206-01-en-us-30GB.vhd</SourceImageName><OS>Windows</OS></OSVirtualHardDisk><RoleSize>Medium</RoleSize></Role></RoleList><VirtualNetworkName>my-virtualNetworkName</VirtualNetworkName></Deployment>",
                "additions": 1,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/resources/deploymentparams-windows.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "6a54e1ffb73ba9aa12ccd91c0862ae3ea9d24d44",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/resources/deploymentparams-windows.xml",
                "filename": "azurecompute/src/test/resources/deploymentparams-windows.xml",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/resources/deploymentparams-windows.xml?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            },
            {
                "additions": 0,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/resources/logback-test.xml",
                "previous_filename": "azurecompute/src/test/resources/logback.xml",
                "status": "renamed",
                "changes": 0,
                "deletions": 0,
                "sha": "c823913f6f35791ecd1ba2c245cbd8b88d2f07fa",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/f9b393de0e66f100a764e502c7f95508fc6e9053/azurecompute/src/test/resources/logback-test.xml",
                "filename": "azurecompute/src/test/resources/logback-test.xml",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/azurecompute/src/test/resources/logback-test.xml?ref=f9b393de0e66f100a764e502c7f95508fc6e9053"
            }
        ],
        "bug_id": "jclouds-labs_13",
        "parent": "https://github.com/apache/jclouds-labs/commit/1c5df25cf92626b9657257f959b40c25650e65fc",
        "message": "[JCLOUDS-981,JCLOUDS-982] remove Optional from AzureComputeTemplateOptions\n\n- fix reuse of existing storage service during deployment\n- use AutoValue.Builder in DeployParams\n- make network creation optional\n- remove AzureComuteAdapterLiveTest b/c not meaningful\n- fix DiskLiveTest\n- fix OSImageApiLiveTest\n- fix VMImageApiLiveTest\n- fix VirtualMachineApiLiveTest\n- fix NetworkSecurityGroupApiLiveTest\n- fix AzureComputeServiceContextLiveTest.testListSizes\n- simplify AzureComputeServiceContextModule\n- add AdminUsername to DeploymentParamsToXML for Windows images\n- fix NPE in DeploymentToNodeMetadata.status\n- add check role status into deployment\n- modify deployemtParamsToXml\n- fix VM deletion\n- fix DeploymentApiMockTest",
        "repo": "jclouds-labs"
    },
    {
        "commit": "https://github.com/apache/jclouds-labs/commit/7eb9fb0372c161ebffb0f3671b0c817c6da59c9d",
        "file": [
            {
                "patch": "@@ -215,7 +215,10 @@ public VirtualMachine getNode(final String id) {\n \n    @Override\n    public void destroyNode(final String id) {\n+      VirtualMachineMonitor monitor = monitoringService.getVirtualMachineMonitor();\n       VirtualMachine vm = getNode(id);\n+      vm.undeploy(true);\n+      monitor.awaitCompletionUndeploy(vm);\n       vm.delete();\n    }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/jclouds-labs/raw/7eb9fb0372c161ebffb0f3671b0c817c6da59c9d/abiquo/src/main/java/org/jclouds/abiquo/compute/strategy/AbiquoComputeServiceAdapter.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "bec572e9cb38af0dca7c0622370265a078b343aa",
                "blob_url": "https://github.com/apache/jclouds-labs/blob/7eb9fb0372c161ebffb0f3671b0c817c6da59c9d/abiquo/src/main/java/org/jclouds/abiquo/compute/strategy/AbiquoComputeServiceAdapter.java",
                "filename": "abiquo/src/main/java/org/jclouds/abiquo/compute/strategy/AbiquoComputeServiceAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/jclouds-labs/contents/abiquo/src/main/java/org/jclouds/abiquo/compute/strategy/AbiquoComputeServiceAdapter.java?ref=7eb9fb0372c161ebffb0f3671b0c817c6da59c9d"
            }
        ],
        "bug_id": "jclouds-labs_14",
        "parent": "https://github.com/apache/jclouds-labs/commit/726b1f3ee39c7bbe29aad9830c55b2ef0a9b57cf",
        "message": "JCLOUDS-171: Fixed NPE when destroying nodes in Abiquo\n\nThere was a race condition when destroying a node in Abiquo\nusing the ComputeService: jclouds performed the active wait\nuntil the node was in state TERMINATED, and used the transformation\nfunctions to convert an Abiquo VirtualMachine to a NodeMetadata. If the\nnode was effectively deleted during this transformation, a NPE\nwas raised. This is because there are a couple of API calls that are\nexecuted in that transformation to retrieve all information required\nto build the NodeMetadata.\n\nTo prevent this, the AbiquoComputeServiceAdapter will block until the\nnode has been actually deleted instead of delegating that to jclouds.\nThis way there is no need to run the transformation functions that had\nthe race condition.",
        "repo": "jclouds-labs"
    }
]