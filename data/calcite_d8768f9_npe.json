[
    {
        "repo": "calcite",
        "commit": "https://github.com/apache/calcite/commit/d8768f9c07fa3927475902e27c13c8bc39687897",
        "bug_id": "calcite_d8768f9",
        "message": "[CALCITE-3082] Fix NPE in SqlUtil#getSelectListItem\n\nQueries similar to `SELECT 1 UNION SELECT 2, 3` might cause Calcite\nvalidator to throw an NPE exception instead of a proper error message.\n\nWhen validating operands of a set operation, if operands don't have\nmatching schema, and if one of the operand doesn't have a FROM clause,\nSqlUtil#getSelectListItem throws NPE.\n\nFixing by adding a proper check.",
        "parent": "https://github.com/apache/calcite/commit/037250b99d6db8a605b64780a3643f784d07d308",
        "patched_files": [
            "SqlUtil.java",
            "SqlValidator.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/calcite/raw/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/main/java/org/apache/calcite/sql/SqlUtil.java",
                "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/main/java/org/apache/calcite/sql/SqlUtil.java?ref=d8768f9c07fa3927475902e27c13c8bc39687897",
                "filename": "core/src/main/java/org/apache/calcite/sql/SqlUtil.java",
                "deletions": 1,
                "sha": "469f83d2dd3bf089c7837c4c0479fae53729d2f9",
                "blob_url": "https://github.com/apache/calcite/blob/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/main/java/org/apache/calcite/sql/SqlUtil.java",
                "patch": "@@ -692,7 +692,7 @@ public static SqlNode getSelectListItem(SqlNode query, int i) {\n     case SELECT:\n       SqlSelect select = (SqlSelect) query;\n       final SqlNode from = stripAs(select.getFrom());\n-      if (from.getKind() == SqlKind.VALUES) {\n+      if (from != null && from.getKind() == SqlKind.VALUES) {\n         // They wrote \"VALUES (x, y)\", but the validator has\n         // converted this into \"SELECT * FROM VALUES (x, y)\".\n         return getSelectListItem(from, i);",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/calcite/raw/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "contents_url": "https://api.github.com/repos/apache/calcite/contents/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java?ref=d8768f9c07fa3927475902e27c13c8bc39687897",
                "filename": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "deletions": 0,
                "sha": "c5e4b61c5263386bc6870ceb8fb5e7930c5f804a",
                "blob_url": "https://github.com/apache/calcite/blob/d8768f9c07fa3927475902e27c13c8bc39687897/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
                "patch": "@@ -5626,6 +5626,11 @@ public void testInvalidGroupByWithInvalidTableName() {\n         \"select 1 from (values (^'x'^)) union\\n\"\n             + \"(values ('a'))\",\n         \"Type mismatch in column 1 of UNION\");\n+\n+    checkFails(\n+        \"select 1, ^2^, 3 union\\n \"\n+            + \"select deptno, name, deptno from dept\",\n+        \"Type mismatch in column 2 of UNION\");\n   }\n \n   @Test public void testValuesTypeMismatchFails() {",
                "changes": 5
            }
        ],
        "unit_tests": [
            "SqlValidatorTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java",
        "buggy_files": [
            "core/src/main/java/org/apache/calcite/sql/SqlUtil.java",
            "core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java"
        ],
        "fixed": true
    }
]