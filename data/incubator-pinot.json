{
    "incubator-pinot_08a2919": {
        "bug_id": "incubator-pinot_08a2919",
        "commit": "https://github.com/apache/incubator-pinot/commit/08a29193b546f652002f3f80ca7046fa41405953",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/08a29193b546f652002f3f80ca7046fa41405953/pinot-common/src/main/java/com/linkedin/pinot/common/data/Schema.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/data/Schema.java?ref=08a29193b546f652002f3f80ca7046fa41405953",
                "deletions": 1,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/data/Schema.java",
                "patch": "@@ -252,7 +252,7 @@ public boolean evaluate(Object object) {\n \n   @JsonIgnore(true)\n   public String getTimeColumnName() {\n-    return timeFieldSpec.getName();\n+    return (timeFieldSpec != null) ? timeFieldSpec.getName() : null;\n   }\n \n   public TimeFieldSpec getTimeFieldSpec() {",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/08a29193b546f652002f3f80ca7046fa41405953/pinot-common/src/main/java/com/linkedin/pinot/common/data/Schema.java",
                "sha": "c5e25ba62e432793947ddb60f57a2437ecebcca3",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\nRB=495083\nR=kgopalak,xiafu,jfim,dpatel\nA=dpatel",
        "parent": "https://github.com/apache/incubator-pinot/commit/aad717eb4050a375ef586d7f638204fc5079902d",
        "repo": "incubator-pinot",
        "unit_tests": [
            "SchemaTest.java"
        ]
    },
    "incubator-pinot_0a32309": {
        "bug_id": "incubator-pinot_0a32309",
        "commit": "https://github.com/apache/incubator-pinot/commit/0a3230928a52814f6926b38038a2f0c9bc704f31",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/0a3230928a52814f6926b38038a2f0c9bc704f31/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/validators/DetectionConfigValidator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/validators/DetectionConfigValidator.java?ref=0a3230928a52814f6926b38038a2f0c9bc704f31",
                "deletions": 1,
                "filename": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/validators/DetectionConfigValidator.java",
                "patch": "@@ -159,7 +159,7 @@ private void validateMetricAlertConfig(Map<String, Object> detectionYaml, String\n     // Check if the metric defined in the config exists\n     MetricConfigDTO metricConfig = provider.fetchMetric(metric, dataset);\n     Preconditions.checkArgument(metricConfig != null,\n-        \"Metric doesn't exist in our records. Metric \" + metric + \" in sub-alert \" + alertName);\n+        \"Metric doesn't exist in our records. Metric \" + metric + \" Dataset \" + dataset + \" in sub-alert \" + alertName);\n \n     // Check if the dataset defined in the config exists\n     DatasetConfigDTO datasetConfig = provider",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/0a3230928a52814f6926b38038a2f0c9bc704f31/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/validators/DetectionConfigValidator.java",
                "sha": "cc31aa5ab1c28cb839c9c2d1b3d8242c85a044a2",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/0a3230928a52814f6926b38038a2f0c9bc704f31/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java?ref=0a3230928a52814f6926b38038a2f0c9bc704f31",
                "deletions": 4,
                "filename": "thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java",
                "patch": "@@ -234,10 +234,12 @@ private Response processBadRequestResponse(String type, String operation, String\n     Map<String, String> responseMessage = new HashMap<>();\n     LOG.warn(\"Validation error while {} {} with payload {}\", operation, type, payload, e);\n     responseMessage.put(\"message\", \"Validation Error in \" + type + \"! \" + e.getMessage());\n-    StringWriter sw = new StringWriter();\n-    PrintWriter pw = new PrintWriter(sw);\n-    e.getCause().printStackTrace(pw);\n-    responseMessage.put(\"more-info\", \"Error = \" + sw.toString());\n+    if (e.getCause() != null) {\n+      StringWriter sw = new StringWriter();\n+      PrintWriter pw = new PrintWriter(sw);\n+      e.getCause().printStackTrace(pw);\n+      responseMessage.put(\"more-info\", \"Error = \" + sw.toString());\n+    }\n     return Response.status(Response.Status.BAD_REQUEST).entity(responseMessage).build();\n   }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/0a3230928a52814f6926b38038a2f0c9bc704f31/thirdeye/thirdeye-pinot/src/main/java/org/apache/pinot/thirdeye/detection/yaml/YamlResource.java",
                "sha": "8ddc66f269ed5dd4fa81327448a36f460d2ef1ac",
                "status": "modified"
            }
        ],
        "message": "[TE] fix create alert error message NPE (#4594)\n\nThis PR fixes the create alert error message null pointer exception.",
        "parent": "https://github.com/apache/incubator-pinot/commit/5e525d095cfc5d5aa20a2f3de4f9f46d15c4fa22",
        "repo": "incubator-pinot",
        "unit_tests": [
            "YamlResourceTest.java"
        ]
    },
    "incubator-pinot_151c4b3": {
        "bug_id": "incubator-pinot_151c4b3",
        "commit": "https://github.com/apache/incubator-pinot/commit/151c4b32b3ea476a5f308cc1b1dd823ac70e9281",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/151c4b32b3ea476a5f308cc1b1dd823ac70e9281/pinot-common/src/main/java/com/linkedin/pinot/common/utils/time/TimeUtils.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/utils/time/TimeUtils.java?ref=151c4b32b3ea476a5f308cc1b1dd823ac70e9281",
                "deletions": 1,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/utils/time/TimeUtils.java",
                "patch": "@@ -29,9 +29,16 @@\n     }\n   }\n \n+  /**\n+   * Converts timeValue in timeUnitString to milliseconds\n+   * @param timeUnitString the time unit string to convert, such as DAYS or SECONDS\n+   * @param timeValue the time value to convert to milliseconds\n+   * @return corresponding value in milliseconds or LONG.MIN_VALUE if timeUnitString is invalid\n+   *         Returning LONG.MIN_VALUE gives consistent beahvior with the java library\n+   */\n   public static long toMillis(String timeUnitString, String timeValue) {\n     TimeUnit timeUnit = timeUnitFromString(timeUnitString);\n-    return timeUnit.toMillis(Long.parseLong(timeValue));\n+    return (timeUnit == null) ? Long.MIN_VALUE : timeUnit.toMillis(Long.parseLong(timeValue));\n   }\n \n   /**",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/151c4b32b3ea476a5f308cc1b1dd823ac70e9281/pinot-common/src/main/java/com/linkedin/pinot/common/utils/time/TimeUtils.java",
                "sha": "dfaa7300a1bca24229e17ef6086fe3c40f194c8a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/151c4b32b3ea476a5f308cc1b1dd823ac70e9281/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/strategy/TimeRetentionStrategy.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/strategy/TimeRetentionStrategy.java?ref=151c4b32b3ea476a5f308cc1b1dd823ac70e9281",
                "deletions": 7,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/strategy/TimeRetentionStrategy.java",
                "patch": "@@ -37,14 +37,12 @@\n   private Duration _retentionDuration;\n \n   public TimeRetentionStrategy(String timeUnit, String timeValue) throws Exception {\n-    try {\n-      _retentionDuration = new Duration(TimeUtils.toMillis(timeUnit, timeValue));\n-      if (_retentionDuration.getMillis() <= 0) {\n-        throw new RuntimeException(\"No retention value set.\");\n-      }\n-    } catch (Exception e) {\n+    long retentionMillis = TimeUtils.toMillis(timeUnit, timeValue);\n+    if (retentionMillis == Long.MIN_VALUE) {\n+      LOGGER.error(\"Failed to set retention duration, timeUnit: {}, timeValue: {}\", timeUnit, timeValue);\n       _retentionDuration = null;\n-      throw e;\n+    } else {\n+      _retentionDuration = new Duration(TimeUtils.toMillis(timeUnit, timeValue));\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/151c4b32b3ea476a5f308cc1b1dd823ac70e9281/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/strategy/TimeRetentionStrategy.java",
                "sha": "add13c6bf01906b48f0ff6e679d9062423119a82",
                "status": "modified"
            }
        ],
        "message": "[PINOT 2095] Make TimeRetentionStrategy constructors consistent\n\nTimeRetentionsStrategy could throw NPE for bad time unit values.\nThe behavior of the constructors and rest of the code was also\ninconsistent in handling errors and negative values. This commit\nfixes it.\n\nRB=575997\nG=pinot-dev-reviewers\nR=kgopalak,jfim,ssubrama,dpatel,mshrivas\nA=ssubrama",
        "parent": "https://github.com/apache/incubator-pinot/commit/29b2d19e511c8a264d6688eaedd6fbb57c99506e",
        "repo": "incubator-pinot",
        "unit_tests": [
            "TimeRetentionStrategyTest.java"
        ]
    },
    "incubator-pinot_1696da4": {
        "bug_id": "incubator-pinot_1696da4",
        "commit": "https://github.com/apache/incubator-pinot/commit/1696da4c6e7226349e9bcea36097a1ab5c256537",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/1696da4c6e7226349e9bcea36097a1ab5c256537/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=1696da4c6e7226349e9bcea36097a1ab5c256537",
                "deletions": 4,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -904,13 +904,12 @@ public synchronized PinotResourceManagerResponse addSegment(SegmentMetadata segm\n   }\n \n   private boolean updateExistedSegment(SegmentZKMetadata segmentZKMetadata) {\n-    String resourceName = null;\n+    final String resourceName;\n     if (segmentZKMetadata instanceof RealtimeSegmentZKMetadata) {\n-      resourceName = BrokerRequestUtils.buildRealtimeResourceNameForResource(resourceName);\n+      resourceName = BrokerRequestUtils.buildRealtimeResourceNameForResource(segmentZKMetadata.getResourceName());\n     } else {\n-      resourceName = BrokerRequestUtils.getOfflineResourceNameForResource(resourceName);\n+      resourceName = BrokerRequestUtils.getOfflineResourceNameForResource(segmentZKMetadata.getResourceName());\n     }\n-    segmentZKMetadata.getResourceName();\n     final String segmentName = segmentZKMetadata.getSegmentName();\n \n     final IdealState currentIdealState = _helixAdmin.getResourceIdealState(_helixClusterName, resourceName);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/1696da4c6e7226349e9bcea36097a1ab5c256537/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "9910a0cb6c3c5de5762f6b9dc4c5c13431ebf3bb",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE\n\nRB=452779\nR=kgopalak,xiafu,jfim,dpatel\nA=pneppall",
        "parent": "https://github.com/apache/incubator-pinot/commit/9fd90799603c105e22111e0874915d44503105fd",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_1cb9b44": {
        "bug_id": "incubator-pinot_1cb9b44",
        "commit": "https://github.com/apache/incubator-pinot/commit/1cb9b44c1cd470662d22b3113c8dec4e11612e03",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/1cb9b44c1cd470662d22b3113c8dec4e11612e03/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java?ref=1cb9b44c1cd470662d22b3113c8dec4e11612e03",
                "deletions": 2,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "patch": "@@ -1,11 +1,13 @@\n package com.linkedin.pinot.controller.api.restlet.resources;\n \n+import com.linkedin.pinot.common.data.Schema;\n import java.io.File;\n import java.io.IOException;\n \n import com.linkedin.pinot.common.metrics.ControllerMeter;\n import com.linkedin.pinot.controller.api.ControllerRestApplication;\n import org.apache.commons.io.FileUtils;\n+import org.restlet.data.MediaType;\n import org.restlet.data.Status;\n import org.restlet.representation.Representation;\n import org.restlet.representation.StringRepresentation;\n@@ -72,8 +74,15 @@ private Representation getTableSchema(\n       AbstractTableConfig config;\n       try {\n         config = _pinotHelixResourceManager.getTableConfig(tableName, TableType.OFFLINE);\n-        return new StringRepresentation(_pinotHelixResourceManager.getSchema(config.getValidationConfig().getSchemaName()).getJSONSchema()\n-            .toString());\n+        String schemaName = config.getValidationConfig().getSchemaName();\n+        Schema schema = _pinotHelixResourceManager.getSchema(schemaName);\n+        if (schema == null) {\n+          setStatus(Status.CLIENT_ERROR_NOT_FOUND);\n+          StringRepresentation repr = new StringRepresentation(\"{\\\"error\\\": \\\"Schema \" + schemaName + \" not found\\\"\");\n+          repr.setMediaType(MediaType.APPLICATION_JSON);\n+          return repr;\n+        }\n+        return new StringRepresentation(schema.getJSONSchema().toString());\n       } catch (Exception e) {\n         LOGGER.error(\"Caught exception while fetching schema for a offline table : {} \", tableName, e);\n         ControllerRestApplication.getControllerMetrics().addMeteredGlobalValue(ControllerMeter.CONTROLLER_TABLE_SCHEMA_GET_ERROR, 1L);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/1cb9b44c1cd470662d22b3113c8dec4e11612e03/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "sha": "691941059cab484ea88d7f0c3c9d1e5ff2b1ecd3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/1cb9b44c1cd470662d22b3113c8dec4e11612e03/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=1cb9b44c1cd470662d22b3113c8dec4e11612e03",
                "deletions": 2,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.Predicate;\n import org.apache.helix.AccessOption;\n@@ -863,10 +864,9 @@ public boolean deleteSchema(Schema schema) {\n    * @throws JsonMappingException\n    * @throws IOException\n    */\n-  public Schema getSchema(String schemaName) throws JsonParseException, JsonMappingException, IOException {\n+  public @Nullable Schema getSchema(String schemaName) throws JsonParseException, JsonMappingException, IOException {\n     PinotHelixPropertyStoreZnRecordProvider propertyStoreHelper =\n         PinotHelixPropertyStoreZnRecordProvider.forSchema(_propertyStore);\n-    LOGGER.info(\"found schema {} \", schemaName);\n     ZNRecord record = propertyStoreHelper.get(schemaName);\n     return record != null ? SchemaUtils.fromZNRecord(record) : null;\n   }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/1cb9b44c1cd470662d22b3113c8dec4e11612e03/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "d3734137476e81fc62fd2d24e3b857ebc9e76f8e",
                "status": "modified"
            }
        ],
        "message": "Fix NPE and return 404 if schema is not found (#696)\n\nOn controller REST API call to read table schema, return\r\n404 if the schema is not found. This also fixes NPE issue.",
        "parent": "https://github.com/apache/incubator-pinot/commit/00047a7af24721cd3ed82c4a74aebb4e659432be",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_21bb2b8": {
        "bug_id": "incubator-pinot_21bb2b8",
        "commit": "https://github.com/apache/incubator-pinot/commit/21bb2b849e6de348406516ed84ce7532703d1e2e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/21bb2b849e6de348406516ed84ce7532703d1e2e/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=21bb2b849e6de348406516ed84ce7532703d1e2e",
                "deletions": 2,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -1114,8 +1114,10 @@ public void deleteRealtimeTable(String tableName) {\n     // Remove groupId/PartitionId mapping for realtime table type.\n     for (String instance : getAllInstancesForTable(realtimeTableName)) {\n       InstanceZKMetadata instanceZKMetadata = ZKMetadataProvider.getInstanceZKMetadata(getPropertyStore(), instance);\n-      instanceZKMetadata.removeResource(realtimeTableName);\n-      ZKMetadataProvider.setInstanceZKMetadata(getPropertyStore(), instanceZKMetadata);\n+      if (instanceZKMetadata != null) {\n+        instanceZKMetadata.removeResource(realtimeTableName);\n+        ZKMetadataProvider.setInstanceZKMetadata(getPropertyStore(), instanceZKMetadata);\n+      }\n     }\n \n     // dropping table",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/21bb2b849e6de348406516ed84ce7532703d1e2e/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "efe20f6ce11e4615aa4b49e49524d936aa6690b6",
                "status": "modified"
            }
        ],
        "message": "Fixed DELETE table to not throw NPE when table has only LLC consumer type (#421)",
        "parent": "https://github.com/apache/incubator-pinot/commit/e2992e6d1bd421ce79faad5ac4ce31cf3132739e",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_30722d3": {
        "bug_id": "incubator-pinot_30722d3",
        "commit": "https://github.com/apache/incubator-pinot/commit/30722d3429fee28f5cba7ef6cc992338c362c68a",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/30722d3429fee28f5cba7ef6cc992338c362c68a/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java?ref=30722d3429fee28f5cba7ef6cc992338c362c68a",
                "deletions": 0,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "patch": "@@ -172,6 +172,12 @@ private void updateDeletionStrategiesForEntireCluster() {\n       LOGGER.error(\"Error getting offline table config from property store!\", e);\n       return tableToDeletionStrategyMap;\n     }\n+\n+    if (offlineTableConfig == null) {\n+      LOGGER.info(\"Table config null for table: {}, treating it as refresh only table.\", offlineTableName);\n+      return tableToDeletionStrategyMap;\n+    }\n+    \n     if (offlineTableConfig.getValidationConfig().getSegmentPushType().equalsIgnoreCase(\"REFRESH\")) {\n       LOGGER.info(\"Table: {} is a refresh only table.\", offlineTableName);\n       return tableToDeletionStrategyMap;",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/30722d3429fee28f5cba7ef6cc992338c362c68a/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "sha": "f59b467ecbf36c68e29e33e96f26cb3398d0db65",
                "status": "modified"
            }
        ],
        "message": "[PINOT-1978]: Fix for NPE in Retention Manager",
        "parent": "https://github.com/apache/incubator-pinot/commit/3a533fc9625b85de2b816d92fc5b3954abf01417",
        "repo": "incubator-pinot",
        "unit_tests": [
            "RetentionManagerTest.java"
        ]
    },
    "incubator-pinot_319e1aa": {
        "bug_id": "incubator-pinot_319e1aa",
        "commit": "https://github.com/apache/incubator-pinot/commit/319e1aa8d6e1ed3b1a129606df6731d662204520",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/319e1aa8d6e1ed3b1a129606df6731d662204520/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java?ref=319e1aa8d6e1ed3b1a129606df6731d662204520",
                "deletions": 1,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "patch": "@@ -191,7 +191,7 @@ private void updateDeletionStrategiesForEntireCluster() {\n \n     AbstractTableConfig realtimeTableConfig;\n     try {\n-      realtimeTableConfig = ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(), realtimeTableName);\n+      realtimeTableConfig = ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(), realtimeTableName);\n     } catch (Exception e) {\n       LOGGER.error(\"Error getting realtime table config from property store!\", e);\n       return tableToDeletionStrategyMap;",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/319e1aa8d6e1ed3b1a129606df6731d662204520/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "sha": "c678b2ebd3860351cfbfaeba612928546634af89",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #17 from fx19880617/master\n\nFixing realtime retention NPE",
        "parent": "https://github.com/apache/incubator-pinot/commit/c875cc0a91046c21f5cfd53fbb98a24c13ce34b1",
        "repo": "incubator-pinot",
        "unit_tests": [
            "RetentionManagerTest.java"
        ]
    },
    "incubator-pinot_51c7a0f": {
        "bug_id": "incubator-pinot_51c7a0f",
        "commit": "https://github.com/apache/incubator-pinot/commit/51c7a0f6b87f78d73a146607e5e8f4cdb8a6edd9",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/51c7a0f6b87f78d73a146607e5e8f4cdb8a6edd9/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=51c7a0f6b87f78d73a146607e5e8f4cdb8a6edd9",
                "deletions": 9,
                "filename": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -44,7 +44,6 @@\n import javax.annotation.Nullable;\n import org.apache.commons.configuration.Configuration;\n import org.apache.helix.AccessOption;\n-import org.apache.helix.BaseDataAccessor;\n import org.apache.helix.ClusterMessagingService;\n import org.apache.helix.Criteria;\n import org.apache.helix.HelixAdmin;\n@@ -801,10 +800,9 @@ public boolean isServerTenantDeletable(String tenantName) {\n \n   public Set<String> getAllBrokerTenantNames() {\n     Set<String> tenantSet = new HashSet<>();\n-    List<String> instancesInCluster = _helixAdmin.getInstancesInCluster(_helixClusterName);\n-    for (String instanceName : instancesInCluster) {\n-      InstanceConfig config = _helixDataAccessor.getProperty(_keyBuilder.instanceConfig(instanceName));\n-      for (String tag : config.getTags()) {\n+    List<InstanceConfig> instanceConfigs = getAllHelixInstanceConfigs();\n+    for (InstanceConfig instanceConfig : instanceConfigs) {\n+      for (String tag : instanceConfig.getTags()) {\n         if (TagNameUtils.isBrokerTag(tag)) {\n           tenantSet.add(TagNameUtils.getTenantNameFromTag(tag));\n         }\n@@ -815,10 +813,9 @@ public boolean isServerTenantDeletable(String tenantName) {\n \n   public Set<String> getAllServerTenantNames() {\n     Set<String> tenantSet = new HashSet<>();\n-    List<String> instancesInCluster = _helixAdmin.getInstancesInCluster(_helixClusterName);\n-    for (String instanceName : instancesInCluster) {\n-      InstanceConfig config = _helixDataAccessor.getProperty(_keyBuilder.instanceConfig(instanceName));\n-      for (String tag : config.getTags()) {\n+    List<InstanceConfig> instanceConfigs = getAllHelixInstanceConfigs();\n+    for (InstanceConfig instanceConfig : instanceConfigs) {\n+      for (String tag : instanceConfig.getTags()) {\n         if (TagNameUtils.isServerTag(tag)) {\n           tenantSet.add(TagNameUtils.getTenantNameFromTag(tag));\n         }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/51c7a0f6b87f78d73a146607e5e8f4cdb8a6edd9/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "6ea61c18ba25049557a8b30e55898f16cf611a2e",
                "status": "modified"
            }
        ],
        "message": "Modify get tenant names APIs (#4688)\n\nThis PR modifies the logic of getting tenant name APIs.\r\n\r\nThe previous code firstly gets the list of instance names from /INSTANCES ZNode and then gets the instance config one by one from /CONFIG/PARTICIPANT/INSTANCES ZNode. Whereas these two ZNodes may be inconsistent.\r\nThat's why we sometimes encounter flaky NPE when calling these APIs.",
        "parent": "https://github.com/apache/incubator-pinot/commit/ce298bae09b316b40fa1af65ce96af2bdfcbc286",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_537212a": {
        "bug_id": "incubator-pinot_537212a",
        "commit": "https://github.com/apache/incubator-pinot/commit/537212a0c9f4f958b7c80508a97eae44a4234789",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/537212a0c9f4f958b7c80508a97eae44a4234789/pinot-common/src/main/java/com/linkedin/pinot/common/utils/helix/HelixHelper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/utils/helix/HelixHelper.java?ref=537212a0c9f4f958b7c80508a97eae44a4234789",
                "deletions": 3,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/utils/helix/HelixHelper.java",
                "patch": "@@ -338,12 +338,16 @@ public IdealState apply(IdealState idealState) {\n         try {\n           targetInstances = getInstancesForSegment.call();\n         } catch (Exception e) {\n-          LOGGER.error(\"Unable to get new instances for segment uploading.\");\n+          LOGGER.error(\"Unable to get new instances for uploading segment {}, table {}\", segmentName, tableName);\n           return null;\n         }\n \n-        for (final String instance : targetInstances) {\n-          idealState.setPartitionState(segmentName, instance, ONLINE);\n+        if (targetInstances == null || targetInstances.size() == 0) {\n+          LOGGER.warn(\"No instances assigned for segment {}, table {}\", segmentName, tableName);\n+        } else {\n+          for (final String instance : targetInstances) {\n+            idealState.setPartitionState(segmentName, instance, ONLINE);\n+          }\n         }\n \n         idealState.setNumPartitions(idealState.getNumPartitions() + 1);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/537212a0c9f4f958b7c80508a97eae44a4234789/pinot-common/src/main/java/com/linkedin/pinot/common/utils/helix/HelixHelper.java",
                "sha": "5cfc0adcd127fb9cc2786100799d3407f5f2f527",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/537212a0c9f4f958b7c80508a97eae44a4234789/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=537212a0c9f4f958b7c80508a97eae44a4234789",
                "deletions": 0,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -1337,6 +1337,12 @@ private boolean updateExistedSegment(SegmentZKMetadata segmentZKMetadata) {\n     do {\n       final IdealState idealState = _helixAdmin.getResourceIdealState(_helixClusterName, tableName);\n       final Set<String> instanceSet = idealState.getInstanceSet(segmentName);\n+      if (instanceSet == null || instanceSet.size() == 0) {\n+        // We are trying to refresh a segment, but there are no instances currently assigned for fielding this segment.\n+        // When those instances do come up, the segment will be uploaded correctly, so return success but log a warning.\n+        LOGGER.warn(\"No instances as yet for segment {}, table {}\", segmentName, tableName);\n+        return true;\n+      }\n       for (final String instance : instanceSet) {\n         idealState.setPartitionState(segmentName, instance, \"OFFLINE\");\n       }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/537212a0c9f4f958b7c80508a97eae44a4234789/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "4397e3cbee73cf15c5c5643b4bb1aa702ab67c06",
                "status": "modified"
            }
        ],
        "message": "[EKG-85543] Fix NPE on segment refresh when no instances exist for the table.\n\nSegments can be added when there are no instances for a table, but if one is refreshed,\nwe throw an NPE. This happens only in state-changed based refresh, however.",
        "parent": "https://github.com/apache/incubator-pinot/commit/ecfe52cc4a23c2c29c5bb61baaa040d8933b12c2",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_55faf77": {
        "bug_id": "incubator-pinot_55faf77",
        "commit": "https://github.com/apache/incubator-pinot/commit/55faf779594eaebfb5edceb47eeed0d2818cf32f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/55faf779594eaebfb5edceb47eeed0d2818cf32f/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java?ref=55faf779594eaebfb5edceb47eeed0d2818cf32f",
                "deletions": 1,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "patch": "@@ -173,7 +173,7 @@ private void updateDeletionStrategiesForEntireCluster() {\n       return tableToDeletionStrategyMap;\n     }\n \n-    if (offlineTableConfig == null) {\n+    if (offlineTableConfig == null || offlineTableConfig.getValidationConfig() == null) {\n       LOGGER.info(\"Table config null for table: {}, treating it as refresh only table.\", offlineTableName);\n       return tableToDeletionStrategyMap;\n     }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/55faf779594eaebfb5edceb47eeed0d2818cf32f/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "sha": "5b4e0eebcbab0e6782042de6fb31251362f6ff5a",
                "status": "modified"
            }
        ],
        "message": "PINOT-1978 NPE fix when an offline table has no validation config\n\nRB=558304\nG=pinot-dev-reviewers\nR=kgopalak,xiafu,jfim,dpatel,mshrivas\nA=mshrivas",
        "parent": "https://github.com/apache/incubator-pinot/commit/aef7db88ff8563cbe59189ccda4eeefab55cffd4",
        "repo": "incubator-pinot",
        "unit_tests": [
            "RetentionManagerTest.java"
        ]
    },
    "incubator-pinot_6e209e4": {
        "bug_id": "incubator-pinot_6e209e4",
        "commit": "https://github.com/apache/incubator-pinot/commit/6e209e4e0ef138f8c21d597aeb20d1993fd1af2b",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/6e209e4e0ef138f8c21d597aeb20d1993fd1af2b/pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java?ref=6e209e4e0ef138f8c21d597aeb20d1993fd1af2b",
                "deletions": 2,
                "filename": "pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.annotation.Nullable;\n import org.apache.helix.HelixAdmin;\n import org.apache.helix.HelixDataAccessor;\n import org.apache.helix.HelixManager;\n@@ -209,6 +210,7 @@ public synchronized String getStatusDescription() {\n           getResourceListAsString(), _instanceName);\n     }\n \n+    @Nullable\n     protected abstract T getState(String resourceName);\n \n     protected abstract Map<String, String> getPartitionStateMap(T state);\n@@ -381,12 +383,21 @@ public IdealStateAndCurrentStateMatchServiceStatusCallback(HelixManager helixMan\n       super(helixManager, clusterName, instanceName, resourcesToMonitor, minResourcesStartPercent);\n     }\n \n+    /**\n+     * Returns the current state for the given resource, or {@code null} if instance is not live or current state does\n+     * not exist.\n+     */\n+    @Nullable\n     @Override\n     protected CurrentState getState(String resourceName) {\n       PropertyKey.Builder keyBuilder = _helixDataAccessor.keyBuilder();\n       LiveInstance liveInstance = _helixDataAccessor.getProperty(keyBuilder.liveInstance(_instanceName));\n-      String sessionId = liveInstance.getSessionId();\n-      return _helixDataAccessor.getProperty(keyBuilder.currentState(_instanceName, sessionId, resourceName));\n+      if (liveInstance == null) {\n+        return null;\n+      } else {\n+        String sessionId = liveInstance.getSessionId();\n+        return _helixDataAccessor.getProperty(keyBuilder.currentState(_instanceName, sessionId, resourceName));\n+      }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/6e209e4e0ef138f8c21d597aeb20d1993fd1af2b/pinot-common/src/main/java/org/apache/pinot/common/utils/ServiceStatus.java",
                "sha": "2079dbeb64c849fdd2bc8220dca5a02d8f914f77",
                "status": "modified"
            }
        ],
        "message": "Handle NPE from getting live instance (#4528)",
        "parent": "https://github.com/apache/incubator-pinot/commit/0a13d98760cf5ac557e5ea47766b68a4ad3131b7",
        "repo": "incubator-pinot",
        "unit_tests": [
            "ServiceStatusTest.java"
        ]
    },
    "incubator-pinot_72a3b62": {
        "bug_id": "incubator-pinot_72a3b62",
        "commit": "https://github.com/apache/incubator-pinot/commit/72a3b62fbae38654331b9602234746da19ef3b8d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/72a3b62fbae38654331b9602234746da19ef3b8d/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java?ref=72a3b62fbae38654331b9602234746da19ef3b8d",
                "deletions": 1,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "patch": "@@ -191,7 +191,7 @@ private void updateDeletionStrategiesForEntireCluster() {\n \n     AbstractTableConfig realtimeTableConfig;\n     try {\n-      realtimeTableConfig = ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(), realtimeTableName);\n+      realtimeTableConfig = ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(), realtimeTableName);\n     } catch (Exception e) {\n       LOGGER.error(\"Error getting realtime table config from property store!\", e);\n       return tableToDeletionStrategyMap;",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/72a3b62fbae38654331b9602234746da19ef3b8d/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "sha": "c678b2ebd3860351cfbfaeba612928546634af89",
                "status": "modified"
            }
        ],
        "message": "Fixing realtime retention NPE",
        "parent": "https://github.com/apache/incubator-pinot/commit/3494074e27ae4000a4e9362329df87ec994a7a66",
        "repo": "incubator-pinot",
        "unit_tests": [
            "RetentionManagerTest.java"
        ]
    },
    "incubator-pinot_75063b9": {
        "bug_id": "incubator-pinot_75063b9",
        "commit": "https://github.com/apache/incubator-pinot/commit/75063b91d6eb1450afe481998343028ddbc947cf",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/75063b91d6eb1450afe481998343028ddbc947cf/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=75063b91d6eb1450afe481998343028ddbc947cf",
                "deletions": 5,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -940,7 +940,7 @@ private boolean updateExistedSegment(SegmentZKMetadata segmentZKMetadata) {\n         idealState.setPartitionState(segmentName, instance, \"OFFLINE\");\n       }\n       updateSuccessful = helixDataAccessor.updateProperty(idealStatePropertyKey, idealState);\n-    } while(!updateSuccessful);\n+    } while (!updateSuccessful);\n \n     // Wait until the partitions are offline in the external view\n     LOGGER.info(\"Wait until segment - \" + segmentName + \" to be OFFLINE in ExternalView\");\n@@ -958,7 +958,7 @@ private boolean updateExistedSegment(SegmentZKMetadata segmentZKMetadata) {\n         idealState.setPartitionState(segmentName, instance, \"ONLINE\");\n       }\n       updateSuccessful = helixDataAccessor.updateProperty(idealStatePropertyKey, idealState);\n-    } while(!updateSuccessful);\n+    } while (!updateSuccessful);\n \n     LOGGER.info(\"Refresh is done for segment - \" + segmentName);\n     return true;\n@@ -977,10 +977,14 @@ private boolean ifExternalViewChangeReflectedForState(String resourceName, Strin\n       isSucess = true;\n       ExternalView externalView = _helixAdmin.getResourceExternalView(_helixClusterName, resourceName);\n       Map<String, String> segmentStatsMap = externalView.getStateMap(segmentName);\n-      for (String instance : segmentStatsMap.keySet()) {\n-        if (!segmentStatsMap.get(instance).equalsIgnoreCase(targerStates)) {\n-          isSucess = false;\n+      if (segmentStatsMap != null) {\n+        for (String instance : segmentStatsMap.keySet()) {\n+          if (!segmentStatsMap.get(instance).equalsIgnoreCase(targerStates)) {\n+            isSucess = false;\n+          }\n         }\n+      } else {\n+        isSucess = false;\n       }\n       if (isSucess) {\n         break;",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/75063b91d6eb1450afe481998343028ddbc947cf/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "07d35ca12c4bacebe6a25e7248dd61e1b1310438",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE from uploading large segment.\n\nRB=458028\nR=xiafu\nA=jfim",
        "parent": "https://github.com/apache/incubator-pinot/commit/eb98e5dfc35aa03638c6b6bb08636d631eac7d76",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_7c70b57": {
        "bug_id": "incubator-pinot_7c70b57",
        "commit": "https://github.com/apache/incubator-pinot/commit/7c70b577a586c184d8cd635d2850c3946f1de149",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/7c70b577a586c184d8cd635d2850c3946f1de149/pinot-broker/src/main/java/com/linkedin/pinot/broker/broker/helix/HelixBrokerStarter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-broker/src/main/java/com/linkedin/pinot/broker/broker/helix/HelixBrokerStarter.java?ref=7c70b577a586c184d8cd635d2850c3946f1de149",
                "deletions": 2,
                "filename": "pinot-broker/src/main/java/com/linkedin/pinot/broker/broker/helix/HelixBrokerStarter.java",
                "patch": "@@ -145,8 +145,13 @@ private void addInstanceTagIfNeeded(String clusterName, String instanceName) {\n   }\n \n   private RoutingTableBuilder getRoutingTableBuilder(Configuration routingTableBuilderConfig) {\n-    String routingTableBuilderKey = routingTableBuilderConfig.getString(\"class\", null);\n-    RoutingTableBuilder routingTableBuilder = RoutingTableBuilderFactory.get(routingTableBuilderKey);\n+    RoutingTableBuilder routingTableBuilder;\n+    try {\n+      String routingTableBuilderKey = routingTableBuilderConfig.getString(\"class\", null);\n+      routingTableBuilder = RoutingTableBuilderFactory.get(routingTableBuilderKey);\n+    } catch (Exception e) {\n+      return null;\n+    }\n     if (routingTableBuilder == null) {\n       return null;\n     }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/7c70b577a586c184d8cd635d2850c3946f1de149/pinot-broker/src/main/java/com/linkedin/pinot/broker/broker/helix/HelixBrokerStarter.java",
                "sha": "5c0f87b8073950105f900eac8bb9db92f241a2e7",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE in getting routing table builder\n\nRB=489957\nR=xiafu\nA=jfim",
        "parent": "https://github.com/apache/incubator-pinot/commit/a699a293905cbfff80a37b66d4949c2c838f660b",
        "repo": "incubator-pinot",
        "unit_tests": [
            "HelixBrokerStarterTest.java"
        ]
    },
    "incubator-pinot_7d7d361": {
        "bug_id": "incubator-pinot_7d7d361",
        "commit": "https://github.com/apache/incubator-pinot/commit/7d7d361c687688eed71063cae7eb0e3aa8e40414",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/7d7d361c687688eed71063cae7eb0e3aa8e40414/pinot-core/src/main/java/com/linkedin/pinot/core/data/readers/CSVRecordReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/data/readers/CSVRecordReader.java?ref=7d7d361c687688eed71063cae7eb0e3aa8e40414",
                "deletions": 3,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/data/readers/CSVRecordReader.java",
                "patch": "@@ -54,7 +54,7 @@ public CSVRecordReader(String dataFile, RecordReaderConfig config, Schema schema\n     _schema = schema;\n \n     _config = config;\n-    _delimiterString = _config.getCsvDelimiter();\n+    _delimiterString = (_config != null) ? _config.getCsvDelimiter() : \",\";\n   }\n \n   @Override\n@@ -112,15 +112,15 @@ public void close() throws Exception {\n   }\n \n   private String getValueForColumn(CSVRecord record, String column) {\n-    if (_config.columnIsDate(column)) {\n+    if ((_config != null) && (_config.columnIsDate(column))) {\n       return dateToDaysSinceEpochMilli(record.get(column)).toString();\n     } else {\n       return record.get(column);\n     }\n   }\n \n   private Long dateToDaysSinceEpochMilli(String token) {\n-    if (token == null) {\n+    if ((token == null) || (_config == null)) {\n       return 0L;\n     }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/7d7d361c687688eed71063cae7eb0e3aa8e40414/pinot-core/src/main/java/com/linkedin/pinot/core/data/readers/CSVRecordReader.java",
                "sha": "1d27aec3cda374177fe665889cccff8f6dce8e9d",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\nRB=494158\nR=kgopalak,xiafu,jfim,dpatel\nA=jfim",
        "parent": "https://github.com/apache/incubator-pinot/commit/8a4f6e4ee4c6ea59f1b8a2c60f448822adf409f3",
        "repo": "incubator-pinot",
        "unit_tests": [
            "CSVRecordReaderTest.java"
        ]
    },
    "incubator-pinot_83b3512": {
        "bug_id": "incubator-pinot_83b3512",
        "commit": "https://github.com/apache/incubator-pinot/commit/83b3512def190c49233a14280e5c178169ff155f",
        "file": [
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/segment/SegmentMetadata.java",
                "changes": 150,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/segment/SegmentMetadata.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 100,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/segment/SegmentMetadata.java",
                "patch": "@@ -15,158 +15,108 @@\n  */\n package com.linkedin.pinot.common.segment;\n \n-import java.io.File;\n+import com.linkedin.pinot.common.data.MetricFieldSpec;\n+import com.linkedin.pinot.common.data.Schema;\n import java.util.Map;\n-\n import javax.annotation.Nullable;\n import org.joda.time.Duration;\n import org.joda.time.Interval;\n \n-import com.linkedin.pinot.common.data.Schema;\n-\n \n /**\n- * SegmentMetadata holds segment level management information and data\n- * statistics.\n+ * The <code>SegmentMetadata</code> class holds the segment level management information and data statistics.\n  */\n public interface SegmentMetadata {\n-  /**\n-   * @return\n-   */\n-  public String getTableName();\n \n-  /**\n-   * @return\n-   */\n-  public String getIndexType();\n+  String getTableName();\n \n-  /**\n-   * @return\n-   */\n-  public Duration getTimeGranularity();\n+  String getIndexType();\n \n-  /**\n-   * @return\n-   */\n-  public Interval getTimeInterval();\n+  Duration getTimeGranularity();\n \n-  /**\n-   * @return\n-   */\n-  public String getCrc();\n+  Interval getTimeInterval();\n \n-  /**\n-   * @return\n-   */\n-  public String getVersion();\n+  String getCrc();\n \n-  /**\n-   * @return\n-   */\n-  public Schema getSchema();\n+  String getVersion();\n \n-  /**\n-   * @return\n-   */\n-  public String getShardingKey();\n+  Schema getSchema();\n \n-  /**\n-   * @return\n-   */\n-  public int getTotalDocs();\n+  String getShardingKey();\n+\n+  int getTotalDocs();\n \n-  /**\n-   *\n-   * @return\n-   */\n   int getTotalRawDocs();\n \n-  /**\n-   * @return\n-   */\n-  public String getIndexDir();\n+  String getIndexDir();\n \n-  /**\n-   * @return\n-   */\n-  public String getName();\n+  String getName();\n \n-  /**\n-   * @return\n-   */\n-  public long getIndexCreationTime();\n+  long getIndexCreationTime();\n \n   /**\n-   * Returns the last time that this segment was pushed or Long.MIN_VALUE if it has never been\n-   * pushed.\n+   * Get the last time that this segment was pushed or <code>Long.MIN_VALUE</code> if it has never been pushed.\n    */\n-  public long getPushTime();\n+  long getPushTime();\n \n   /**\n-   * Returns the last time that this segment was refreshed or Long.MIN_VALUE if it has never been\n-   * refreshed.\n+   * Get the last time that this segment was refreshed or <code>Long.MIN_VALUE</code> if it has never been refreshed.\n    */\n-  public long getRefreshTime();\n+  long getRefreshTime();\n \n-  /**\n-   * Returns if a column has dictionary or not.\n-   */\n-  public boolean hasDictionary(String columnName);\n+  boolean hasDictionary(String columnName);\n \n-  /** Returns true if the segment has a StarTree index defined */\n-  public boolean hasStarTree();\n+  boolean hasStarTree();\n \n-  /**\n-   * Returns the StarTreeMetadata for the segment\n-   * @return\n-   */\n-  public StarTreeMetadata getStarTreeMetadata();\n+  @Nullable\n+  StarTreeMetadata getStarTreeMetadata();\n \n   /**\n-   * returns the forward Index file name with appropriate extension for a given version\n-   * @param column\n-   * @return\n+   * Get the forward index file name with appropriate extension for a given version.\n+   *\n+   * @param column column name.\n+   * @param segmentVersion segment version.\n+   * @return forward index file name.\n    */\n   String getForwardIndexFileName(String column, String segmentVersion);\n \n   /**\n-   * returns the dictionary file name with appropriate extension for a given version\n-   * @param column\n-   * @return\n+   * Get the dictionary file name with appropriate extension for a given version.\n+   *\n+   * @param column column name.\n+   * @param segmentVersion segment version.\n+   * @return dictionary file name.\n    */\n   String getDictionaryFileName(String column, String segmentVersion);\n \n   /**\n-   * returns the bitmap inverted index file name with appropriate extension for a given version\n-   * @param column\n-   * @return\n+   * Get the bitmap inverted index file name with appropriate extension for a given version.\n+   *\n+   * @param column column name.\n+   * @param segmentVersion segment version.\n+   * @return bitmap inverted index file name.\n    */\n   String getBitmapInvertedIndexFileName(String column, String segmentVersion);\n \n-  /**\n-   * returns the name of the component that created the segment\n-   * @return\n-   */\n   @Nullable\n   String getCreatorName();\n \n-  /**\n-   * returns the padding character\n-   * @return\n-   */\n-  Character getPaddingCharacter();\n+  char getPaddingCharacter();\n \n-  /**\n-   * returns Hll Log2m parameter\n-   * @return\n-   */\n   int getHllLog2m();\n \n   /**\n-   * @return\n+   * Get the derived column name for the given original column and derived metric type.\n+   *\n+   * @param column original column name.\n+   * @param derivedMetricType derived metric type.\n+   * @return derived column name if exists.\n+   *         null if not.\n    */\n-  public Map<String, String> toMap();\n+  @Nullable\n+  String getDerivedColumn(String column, MetricFieldSpec.DerivedMetricType derivedMetricType);\n \n-  public boolean close();\n+  Map<String, String> toMap();\n \n+  boolean close();\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/segment/SegmentMetadata.java",
                "sha": "120b5b0c250ac3b0c7c1341f7bdc2dac1a60b1d4",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/segment/StarTreeMetadata.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/segment/StarTreeMetadata.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 13,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/segment/StarTreeMetadata.java",
                "patch": "@@ -16,8 +16,6 @@\n package com.linkedin.pinot.common.segment;\n \n import java.util.List;\n-import java.util.Map;\n-import javax.annotation.Nullable;\n \n \n /**\n@@ -32,8 +30,6 @@\n   private long _maxLeafRecords;\n   private long _skipMaterializationCardinality;\n \n-  private Map<String, String> _hllOriginToDerivedColumnMap;\n-\n   public StarTreeMetadata() {\n   }\n \n@@ -76,13 +72,4 @@ public void setSkipMaterializationCardinality(Long skipMaterializationCardinalit\n   public void setSkipMaterializationForDimensions(List<String> skipMaterializationForDimensions) {\n     _skipMaterializationForDimensions = skipMaterializationForDimensions;\n   }\n-\n-  @Nullable\n-  public String getDerivedHllColumnFromOrigin(String originColumn) {\n-    return _hllOriginToDerivedColumnMap.get(originColumn);\n-  }\n-\n-  public void setHllOriginToDerivedColumnMap(Map<String, String> hllOriginToDerivedColumnMap) {\n-    _hllOriginToDerivedColumnMap = hllOriginToDerivedColumnMap;\n-  }\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/segment/StarTreeMetadata.java",
                "sha": "36cdb1d1193a49118049a03b62157c9f284acaf1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 42,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "patch": "@@ -15,7 +15,6 @@\n  */\n package com.linkedin.pinot.common.utils.request;\n \n-import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSet;\n import com.linkedin.pinot.common.request.AggregationInfo;\n import com.linkedin.pinot.common.request.BrokerRequest;\n@@ -31,14 +30,14 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nullable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n \n public class RequestUtils {\n+  private RequestUtils() {\n+  }\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(RequestUtils.class);\n   private static final String USE_STAR_TREE_KEY = \"useStarTree\";\n \n   /**\n@@ -220,45 +219,6 @@ public static boolean isFitForStarTreeIndex(SegmentMetadata segmentMetadata, Fil\n     return true;\n   }\n \n-  /**\n-   * Must be called after a successful check of {@link #isFitForStarTreeIndex}\n-   * @return true if no fasthll aggregation or rewriting successful, false otherwise\n-   */\n-  public static boolean performFastHllRewriting(SegmentMetadata segmentMetadata, BrokerRequest brokerRequest) {\n-    List<AggregationInfo> aggregationsInfo = brokerRequest.getAggregationsInfo();\n-    StarTreeMetadata starTreeMetadata = segmentMetadata.getStarTreeMetadata();\n-    Map<AggregationInfo, String> fastHllAggregationInfoToDerivedColumnNameMap = new HashMap<>();\n-    // Check if all fasthll derived columns exist\n-    for (AggregationInfo aggregationInfo : aggregationsInfo) {\n-      if (aggregationInfo.getAggregationType().toLowerCase().equals(\"fasthll\")) {\n-        String derivedColumn = extractDerivedColumn(aggregationInfo, starTreeMetadata);\n-        if (derivedColumn == null) {\n-          // If derivedColumn does not exist, which means we need to aggregate directly on original column,\n-          // in that case, star tree can not be used since no generated star tree docs are available.\n-          return false;\n-        } else {\n-          fastHllAggregationInfoToDerivedColumnNameMap.put(aggregationInfo, derivedColumn);\n-        }\n-      }\n-    }\n-    // Rewrite all fasthll derived columns\n-    for (AggregationInfo aggregationInfo : fastHllAggregationInfoToDerivedColumnNameMap.keySet()) {\n-      String derivedColumn = fastHllAggregationInfoToDerivedColumnNameMap.get(aggregationInfo);\n-      LOGGER.info(\"Performed rewriting to fasthll({})\", derivedColumn);\n-      aggregationInfo.getAggregationParams().put(\"column\", derivedColumn);\n-    }\n-    return true;\n-  }\n-\n-  @Nullable\n-  private static String extractDerivedColumn(AggregationInfo aggregationInfo, StarTreeMetadata starTreeMetadata) {\n-    String[] columns = aggregationInfo.getAggregationParams().get(\"column\").trim().split(\",\");\n-    Preconditions.checkArgument(columns.length == 1);\n-    String aggrColumn = columns[0];\n-    return starTreeMetadata.getDerivedHllColumnFromOrigin(aggrColumn);\n-  }\n-\n-\n   /**\n    * This method returns the value of {@link #USE_STAR_TREE_KEY} boolean flag specified in the debug options\n    * in broker request. If the flag is not specified in the debug options, it returns true.",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "sha": "0d46df09e1f7fe8c6235e3432884003461c31459",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-controller/src/test/java/com/linkedin/pinot/controller/helix/retention/RetentionManagerTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/com/linkedin/pinot/controller/helix/retention/RetentionManagerTest.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 2,
                "filename": "pinot-controller/src/test/java/com/linkedin/pinot/controller/helix/retention/RetentionManagerTest.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package com.linkedin.pinot.controller.helix.retention;\n \n+import com.linkedin.pinot.common.data.MetricFieldSpec;\n import com.linkedin.pinot.core.startree.hll.HllConstants;\n import java.io.File;\n import java.io.IOException;\n@@ -452,12 +453,14 @@ public String getBitmapInvertedIndexFileName(String column, String segmentVersio\n         throw new UnsupportedOperationException(\"getBitmapInvertedIndexFileName not supported in \" + this.getClass());\n       }\n \n-      @Nullable @Override public String getCreatorName() {\n+      @Nullable\n+      @Override\n+      public String getCreatorName() {\n         return null;\n       }\n \n       @Override\n-      public Character getPaddingCharacter() {\n+      public char getPaddingCharacter() {\n         return V1Constants.Str.DEFAULT_STRING_PAD_CHAR;\n       }\n \n@@ -466,6 +469,11 @@ public int getHllLog2m() {\n         return HllConstants.DEFAULT_LOG2M;\n       }\n \n+      @Nullable\n+      @Override\n+      public String getDerivedColumn(String column, MetricFieldSpec.DerivedMetricType derivedMetricType) {\n+        return null;\n+      }\n     };\n     return segmentMetadata;\n   }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-controller/src/test/java/com/linkedin/pinot/controller/helix/retention/RetentionManagerTest.java",
                "sha": "fcf74592a23fdf8be8ad8c20d7e1b9cdde2105b9",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-controller/src/test/java/com/linkedin/pinot/controller/validation/ValidationManagerTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/com/linkedin/pinot/controller/validation/ValidationManagerTest.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 2,
                "filename": "pinot-controller/src/test/java/com/linkedin/pinot/controller/validation/ValidationManagerTest.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package com.linkedin.pinot.controller.validation;\n \n+import com.linkedin.pinot.common.data.MetricFieldSpec;\n import com.linkedin.pinot.common.metrics.ControllerMetrics;\n import com.yammer.metrics.core.MetricsRegistry;\n import java.util.ArrayList;\n@@ -541,6 +542,7 @@ public boolean hasStarTree() {\n       return false;\n     }\n \n+    @Nullable\n     @Override\n     public StarTreeMetadata getStarTreeMetadata() {\n       return null;\n@@ -564,18 +566,26 @@ public String getBitmapInvertedIndexFileName(String column, String segmentVersio\n       return null;\n     }\n \n-    @Nullable @Override public String getCreatorName() {\n+    @Nullable\n+    @Override\n+    public String getCreatorName() {\n       return null;\n     }\n \n     @Override\n-    public Character getPaddingCharacter() {\n+    public char getPaddingCharacter() {\n       return V1Constants.Str.DEFAULT_STRING_PAD_CHAR;\n     }\n \n     @Override\n     public int getHllLog2m() {\n       return HllConstants.DEFAULT_LOG2M;\n     }\n+\n+    @Nullable\n+    @Override\n+    public String getDerivedColumn(String column, MetricFieldSpec.DerivedMetricType derivedMetricType) {\n+      return null;\n+    }\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-controller/src/test/java/com/linkedin/pinot/controller/validation/ValidationManagerTest.java",
                "sha": "976325577260f90e2ba30beb3f2ace1abfb622b9",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationGroupByPlanNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationGroupByPlanNode.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 3,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationGroupByPlanNode.java",
                "patch": "@@ -61,9 +61,6 @@ public AggregationGroupByPlanNode(IndexSegment indexSegment, BrokerRequest broke\n       }\n       String columns = aggregationInfo.getAggregationParams().get(\"column\").trim();\n       aggregationGroupByRelatedColumns.addAll(Arrays.asList(columns.split(\",\")));\n-      if (aggregationInfo.getAggregationType().equalsIgnoreCase(\"fasthll\")) {\n-        aggregationGroupByRelatedColumns.add(columns + HllConstants.DEFAULT_HLL_DERIVE_COLUMN_SUFFIX);\n-      }\n     }\n     aggregationGroupByRelatedColumns.addAll(_groupBy.getColumns());\n     return aggregationGroupByRelatedColumns.toArray(new String[aggregationGroupByRelatedColumns.size()]);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationGroupByPlanNode.java",
                "sha": "e1007349436fd2e2178799bb94d39369f9101e77",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationPlanNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationPlanNode.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 3,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationPlanNode.java",
                "patch": "@@ -58,9 +58,6 @@ public AggregationPlanNode(IndexSegment indexSegment, BrokerRequest brokerReques\n       if (!aggregationInfo.getAggregationType().equalsIgnoreCase(\"count\")) {\n         String columns = aggregationInfo.getAggregationParams().get(\"column\").trim();\n         aggregationRelatedColumns.addAll(Arrays.asList(columns.split(\",\")));\n-        if (aggregationInfo.getAggregationType().equalsIgnoreCase(\"fasthll\")) {\n-          aggregationRelatedColumns.add(columns + HllConstants.DEFAULT_HLL_DERIVE_COLUMN_SUFFIX);\n-        }\n       }\n     }\n     return aggregationRelatedColumns.toArray(new String[aggregationRelatedColumns.size()]);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/AggregationPlanNode.java",
                "sha": "39e13bad5d8c5a4460509d0d66257bbd4476af87",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 3,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java",
                "patch": "@@ -63,9 +63,8 @@ public Operator run() {\n     long start = System.currentTimeMillis();\n     Operator operator;\n     FilterQueryTree filterQueryTree = RequestUtils.generateFilterQueryTree(_brokerRequest);\n-    if (_segment.getSegmentMetadata().hasStarTree() &&\n-        RequestUtils.isFitForStarTreeIndex(_segment.getSegmentMetadata(), filterQueryTree, _brokerRequest) &&\n-        RequestUtils.performFastHllRewriting(_segment.getSegmentMetadata(), _brokerRequest)) {\n+    if (_segment.getSegmentMetadata().hasStarTree()\n+        && RequestUtils.isFitForStarTreeIndex(_segment.getSegmentMetadata(), filterQueryTree, _brokerRequest)) {\n       operator = new StarTreeIndexOperator(_segment, _brokerRequest);\n     } else {\n       operator = constructPhysicalOperator(filterQueryTree);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java",
                "sha": "476ddcc91cf2819fb72a8997cc806749fef40723",
                "status": "modified"
            },
            {
                "additions": 93,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/BrokerRequestPreProcessor.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/BrokerRequestPreProcessor.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 0,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/BrokerRequestPreProcessor.java",
                "patch": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (C) 2014-2016 LinkedIn Corp. (pinot-core@linkedin.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.linkedin.pinot.core.plan.maker;\n+\n+import com.linkedin.pinot.common.data.MetricFieldSpec;\n+import com.linkedin.pinot.common.request.AggregationInfo;\n+import com.linkedin.pinot.common.request.BrokerRequest;\n+import com.linkedin.pinot.common.segment.SegmentMetadata;\n+import com.linkedin.pinot.core.indexsegment.IndexSegment;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\n+/**\n+ * The <code>BrokerRequestPreProcessor</code> class provides the utility to pre-process the {@link BrokerRequest}.\n+ * <p>After the pre-process, the {@link BrokerRequest} should not be further changed.\n+ */\n+public class BrokerRequestPreProcessor {\n+  private BrokerRequestPreProcessor() {\n+  }\n+\n+  /**\n+   * Pre-process the {@link BrokerRequest}.\n+   * <p>Will apply the changes directly to the passed in object.\n+   * <p>The following steps are performed:\n+   * <ul>\n+   *   <li>Rewrite 'fasthll' column name.</li>\n+   * </ul>\n+   *\n+   * @param indexSegments list of index segments.\n+   * @param brokerRequest broker request.\n+   */\n+  public static void preProcess(List<IndexSegment> indexSegments, BrokerRequest brokerRequest) {\n+    if (brokerRequest.isSetAggregationsInfo()) {\n+      List<AggregationInfo> aggregationsInfo = brokerRequest.getAggregationsInfo();\n+      rewriteFastHllColumnName(indexSegments, aggregationsInfo);\n+    }\n+  }\n+\n+  /**\n+   * Rewrite 'fasthll' column name.\n+   *\n+   * @param indexSegments list of index segments.\n+   * @param aggregationsInfo list of aggregation info.\n+   */\n+  private static void rewriteFastHllColumnName(List<IndexSegment> indexSegments,\n+      List<AggregationInfo> aggregationsInfo) {\n+    // Consistent check.\n+    for (AggregationInfo aggregationInfo : aggregationsInfo) {\n+      if (aggregationInfo.getAggregationType().equalsIgnoreCase(\"fasthll\")) {\n+        String column = aggregationInfo.getAggregationParams().get(\"column\").trim();\n+        boolean isFirstSegment = true;\n+        String firstSegmentName = null;\n+        String hllDerivedColumn = null;\n+        for (IndexSegment indexSegment : indexSegments) {\n+          SegmentMetadata segmentMetadata = indexSegment.getSegmentMetadata();\n+          if (isFirstSegment) {\n+            // Use metadata from first index segment to perform rewrite.\n+            isFirstSegment = false;\n+            firstSegmentName = segmentMetadata.getName();\n+            hllDerivedColumn = segmentMetadata.getDerivedColumn(column, MetricFieldSpec.DerivedMetricType.HLL);\n+            if (hllDerivedColumn != null) {\n+              aggregationInfo.getAggregationParams().put(\"column\", hllDerivedColumn);\n+            }\n+          } else {\n+            // Perform consistency check on other index segments.\n+            String hllDerivedColumnToCheck =\n+                segmentMetadata.getDerivedColumn(column, MetricFieldSpec.DerivedMetricType.HLL);\n+            if (!Objects.equals(hllDerivedColumn, hllDerivedColumnToCheck)) {\n+              throw new RuntimeException(\n+                  \"Found inconsistency HLL derived column name. In segment \" + firstSegmentName + \": \"\n+                      + hllDerivedColumn + \"; In segment \" + segmentMetadata.getName() + \": \"\n+                      + hllDerivedColumnToCheck);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/BrokerRequestPreProcessor.java",
                "sha": "f4b4035f1a4c1df9aec2e70998c763f2ee25b63b",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/InstancePlanMakerImplV2.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/InstancePlanMakerImplV2.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 2,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/InstancePlanMakerImplV2.java",
                "patch": "@@ -92,12 +92,19 @@ public PlanNode makeInnerSegmentPlan(IndexSegment indexSegment, BrokerRequest br\n   @Override\n   public Plan makeInterSegmentPlan(List<SegmentDataManager> segmentDataManagers, BrokerRequest brokerRequest,\n       ExecutorService executorService, long timeOutMs) {\n-    List<PlanNode> planNodes = new ArrayList<>();\n+    // TODO: pass in List<IndexSegment> directly.\n+    List<IndexSegment> indexSegments = new ArrayList<>(segmentDataManagers.size());\n     for (SegmentDataManager segmentDataManager : segmentDataManagers) {\n-      IndexSegment indexSegment = segmentDataManager.getSegment();\n+      indexSegments.add(segmentDataManager.getSegment());\n+    }\n+    BrokerRequestPreProcessor.preProcess(indexSegments, brokerRequest);\n+\n+    List<PlanNode> planNodes = new ArrayList<>();\n+    for (IndexSegment indexSegment : indexSegments) {\n       planNodes.add(makeInnerSegmentPlan(indexSegment, brokerRequest));\n     }\n     CombinePlanNode combinePlanNode = new CombinePlanNode(planNodes, brokerRequest, executorService, timeOutMs);\n+\n     return new GlobalPlanImplV0(new InstanceResponsePlanNode(combinePlanNode));\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/plan/maker/InstancePlanMakerImplV2.java",
                "sha": "9f1ad6d82499979dea5a0180112c979e949b85a9",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/query/utils/SimpleSegmentMetadata.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/query/utils/SimpleSegmentMetadata.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 2,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/query/utils/SimpleSegmentMetadata.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package com.linkedin.pinot.core.query.utils;\n \n+import com.linkedin.pinot.common.data.MetricFieldSpec;\n import com.linkedin.pinot.common.segment.StarTreeMetadata;\n import com.linkedin.pinot.core.segment.creator.impl.V1Constants;\n import com.linkedin.pinot.core.startree.hll.HllConstants;\n@@ -172,6 +173,7 @@ public boolean hasStarTree() {\n     return false;\n   }\n \n+  @Nullable\n   @Override\n   public StarTreeMetadata getStarTreeMetadata() {\n     return null;\n@@ -195,11 +197,14 @@ public String getBitmapInvertedIndexFileName(String column, String segmentVersio\n     return null;\n   }\n \n-  @Nullable @Override public String getCreatorName() {\n+  @Nullable\n+  @Override\n+  public String getCreatorName() {\n     return null;\n   }\n \n-  @Override public Character getPaddingCharacter() {\n+  @Override\n+  public char getPaddingCharacter() {\n     return _paddingCharacter;\n   }\n \n@@ -208,4 +213,9 @@ public int getHllLog2m() {\n     return HllConstants.DEFAULT_LOG2M;\n   }\n \n+  @Nullable\n+  @Override\n+  public String getDerivedColumn(String column, MetricFieldSpec.DerivedMetricType derivedMetricType) {\n+    return null;\n+  }\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/query/utils/SimpleSegmentMetadata.java",
                "sha": "efb66f202813d196be0d9666cf35f400daadd1f9",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/SegmentMetadataImpl.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/SegmentMetadataImpl.java?ref=83b3512def190c49233a14280e5c178169ff155f",
                "deletions": 35,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/SegmentMetadataImpl.java",
                "patch": "@@ -85,6 +85,7 @@\n   private String _creatorName;\n   private char _paddingCharacter = V1Constants.Str.DEFAULT_STRING_PAD_CHAR;\n   private int _hllLog2m = HllConstants.DEFAULT_LOG2M;\n+  private final Map<String, String> _hllDerivedColumnMap = new HashMap<>();\n \n   public SegmentMetadataImpl(File indexDir) throws ConfigurationException, IOException {\n     LOGGER.debug(\"SegmentMetadata location: {}\", indexDir);\n@@ -284,28 +285,27 @@ private void init() {\n       }\n     }\n \n-    // Column Metadata\n-    for (final String column : _allColumns) {\n-      _columnMetadataMap.put(column,\n-          ColumnMetadata.fromPropertiesConfiguration(column, _segmentMetadataPropertiesConfiguration));\n-    }\n-\n-    // Segment Name\n+    // Set segment name.\n     _segmentName = _segmentMetadataPropertiesConfiguration.getString(Segment.SEGMENT_NAME);\n \n-    // Set hll log2m\n+    // Set hll log2m.\n     _hllLog2m = _segmentMetadataPropertiesConfiguration.getInt(Segment.SEGMENT_HLL_LOG2M, HllConstants.DEFAULT_LOG2M);\n \n-    // StarTree config here\n-    _hasStarTree = _segmentMetadataPropertiesConfiguration.getBoolean(\n-        MetadataKeys.StarTree.STAR_TREE_ENABLED, false);\n-    if (_hasStarTree) {\n-      initStarTreeMetadata();\n+    // Build column metadata map, schema and hll derived column map.\n+    for (String column : _allColumns) {\n+      ColumnMetadata columnMetadata =\n+          ColumnMetadata.fromPropertiesConfiguration(column, _segmentMetadataPropertiesConfiguration);\n+      _columnMetadataMap.put(column, columnMetadata);\n+      _schema.addField(columnMetadata.getFieldSpec());\n+      if (columnMetadata.getDerivedMetricType() == MetricFieldSpec.DerivedMetricType.HLL) {\n+        _hllDerivedColumnMap.put(columnMetadata.getOriginColumnName(), columnMetadata.getColumnName());\n+      }\n     }\n \n-    // Build Schema\n-    for (final String column : _columnMetadataMap.keySet()) {\n-      _schema.addField(_columnMetadataMap.get(column).getFieldSpec());\n+    // Build star-tree metadata.\n+    _hasStarTree = _segmentMetadataPropertiesConfiguration.getBoolean(MetadataKeys.StarTree.STAR_TREE_ENABLED, false);\n+    if (_hasStarTree) {\n+      initStarTreeMetadata();\n     }\n   }\n \n@@ -315,23 +315,6 @@ private void init() {\n   private void initStarTreeMetadata() {\n     _starTreeMetadata = new StarTreeMetadata();\n \n-    // Build Derived Column Map\n-    Map<String, String> hllOriginToDerivedColumnMap = new HashMap<>();\n-    for (final ColumnMetadata columnMetadata : _columnMetadataMap.values()) {\n-      MetricFieldSpec.DerivedMetricType derivedMetricType = columnMetadata.getDerivedMetricType();\n-      if (derivedMetricType != null) {\n-        switch (derivedMetricType) {\n-          case HLL:\n-            hllOriginToDerivedColumnMap.put(columnMetadata.getOriginColumnName(), columnMetadata.getColumnName());\n-            break;\n-          default:\n-            throw new IllegalArgumentException(\n-                columnMetadata.getDerivedMetricType() + \" type is not supported in building derived columns.\");\n-        }\n-      }\n-    }\n-    _starTreeMetadata.setHllOriginToDerivedColumnMap(hllOriginToDerivedColumnMap);\n-\n     // Set the maxLeafRecords\n     String maxLeafRecordsString =\n         _segmentMetadataPropertiesConfiguration.getString(\n@@ -533,6 +516,7 @@ public boolean hasStarTree() {\n     return _hasStarTree;\n   }\n \n+  @Nullable\n   @Override\n   public StarTreeMetadata getStarTreeMetadata() {\n     return _starTreeMetadata;\n@@ -568,11 +552,14 @@ public String getBitmapInvertedIndexFileName(String column, String segmentVersio\n     return column + V1Constants.Indexes.BITMAP_INVERTED_INDEX_FILE_EXTENSION;\n   }\n \n-  @Nullable @Override public String getCreatorName() {\n+  @Nullable\n+  @Override\n+  public String getCreatorName() {\n     return _creatorName;\n   }\n \n-  @Override public Character getPaddingCharacter() {\n+  @Override\n+  public char getPaddingCharacter() {\n     return _paddingCharacter;\n   }\n \n@@ -581,6 +568,17 @@ public int getHllLog2m() {\n     return _hllLog2m;\n   }\n \n+  @Nullable\n+  @Override\n+  public String getDerivedColumn(String column, MetricFieldSpec.DerivedMetricType derivedMetricType) {\n+    switch (derivedMetricType) {\n+      case HLL:\n+        return _hllDerivedColumnMap.get(column);\n+      default:\n+        throw new IllegalArgumentException();\n+    }\n+  }\n+\n   /**\n    * Converts segment metadata to json\n    * @param columnFilter list only  the columns in the set. Lists all the columns if",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/83b3512def190c49233a14280e5c178169ff155f/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/SegmentMetadataImpl.java",
                "sha": "76007d16f15f660818de15909dca3d038e94bb23",
                "status": "modified"
            }
        ],
        "message": "Fix FastHLL throw NPE. (#849)\n\nAdd BrokerRequestPreProcessor class to pre-process the broker request.\r\nMove hll derived column name map from StarTreeMetadata to SegmentMetadata.\r\nRewrite the hll derived column name before making the plan node.",
        "parent": "https://github.com/apache/incubator-pinot/commit/cb866d837f72232201daa394b7188a1bd61199e9",
        "repo": "incubator-pinot",
        "unit_tests": [
            "SegmentMetadataImplTest.java"
        ]
    },
    "incubator-pinot_a365190": {
        "bug_id": "incubator-pinot_a365190",
        "commit": "https://github.com/apache/incubator-pinot/commit/a365190dfbfe6adc7836bf8f33ed100f2674e58a",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/a365190dfbfe6adc7836bf8f33ed100f2674e58a/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java?ref=a365190dfbfe6adc7836bf8f33ed100f2674e58a",
                "deletions": 18,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package com.linkedin.pinot.controller.helix.core.retention;\n \n+import com.linkedin.pinot.common.config.SegmentsValidationAndRetentionConfig;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -165,30 +166,41 @@ private void updateDeletionStrategiesForEntireCluster() {\n   private Map<String, RetentionStrategy> handleOfflineDeletionStrategy(String offlineTableName) {\n     Map<String, RetentionStrategy> tableToDeletionStrategyMap = new HashMap<String, RetentionStrategy>();\n \n-    AbstractTableConfig offlineTableConfig;\n     try {\n-      offlineTableConfig = ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(), offlineTableName);\n-    } catch (Exception e) {\n-      LOGGER.error(\"Error getting offline table config from property store!\", e);\n-      return tableToDeletionStrategyMap;\n-    }\n+      AbstractTableConfig offlineTableConfig;\n \n-    if (offlineTableConfig == null || offlineTableConfig.getValidationConfig() == null) {\n-      LOGGER.info(\"Table config null for table: {}, treating it as refresh only table.\", offlineTableName);\n-      return tableToDeletionStrategyMap;\n-    }\n-    \n-    if (offlineTableConfig.getValidationConfig().getSegmentPushType().equalsIgnoreCase(\"REFRESH\")) {\n-      LOGGER.info(\"Table: {} is a refresh only table.\", offlineTableName);\n-      return tableToDeletionStrategyMap;\n-    }\n-    try {\n-      TimeRetentionStrategy timeRetentionStrategy = new TimeRetentionStrategy(offlineTableConfig.getValidationConfig().getRetentionTimeUnit(),\n-          offlineTableConfig.getValidationConfig().getRetentionTimeValue());\n+      try {\n+        offlineTableConfig = ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(), offlineTableName);\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error getting offline table config from property store!\", e);\n+        return tableToDeletionStrategyMap;\n+      }\n+\n+      if (offlineTableConfig == null || offlineTableConfig.getValidationConfig() == null) {\n+        LOGGER.info(\"Table config null for table: {}, treating it as refresh only table.\", offlineTableName);\n+        return tableToDeletionStrategyMap;\n+      }\n+\n+      SegmentsValidationAndRetentionConfig validationConfig = offlineTableConfig.getValidationConfig();\n+\n+      if (validationConfig.getSegmentPushType() == null || validationConfig.getSegmentPushType().isEmpty()) {\n+        LOGGER.info(\"Segment push type for table {} is empty, skipping retention processing\");\n+        return tableToDeletionStrategyMap;\n+      }\n+\n+      if (\"REFRESH\".equalsIgnoreCase(validationConfig.getSegmentPushType())) {\n+        LOGGER.info(\"Table: {} is a refresh only table.\", offlineTableName);\n+        return tableToDeletionStrategyMap;\n+      }\n+\n+      TimeRetentionStrategy timeRetentionStrategy = new TimeRetentionStrategy(\n+          validationConfig.getRetentionTimeUnit(),\n+          validationConfig.getRetentionTimeValue());\n       tableToDeletionStrategyMap.put(offlineTableName, timeRetentionStrategy);\n     } catch (Exception e) {\n       LOGGER.error(\"Error creating TimeRetentionStrategy for table: {}\", offlineTableName, e);\n     }\n+\n     return tableToDeletionStrategyMap;\n   }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/a365190dfbfe6adc7836bf8f33ed100f2674e58a/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/retention/RetentionManager.java",
                "sha": "a88d9eb700ff603aafa0b364fd3d4e9af8f32645",
                "status": "modified"
            }
        ],
        "message": "PINOT-1978 NPE fix for retention\n\nRB=558948\nG=pinot-dev-reviewers\nR=kgopalak,xiafu,jfim,dpatel,mshrivas\nA=mshrivas",
        "parent": "https://github.com/apache/incubator-pinot/commit/908b5e1bba7341dd7a5ecbfd06241e39f52ebe19",
        "repo": "incubator-pinot",
        "unit_tests": [
            "RetentionManagerTest.java"
        ]
    },
    "incubator-pinot_aefdb82": {
        "bug_id": "incubator-pinot_aefdb82",
        "commit": "https://github.com/apache/incubator-pinot/commit/aefdb82bb164e79ed75a1a745bf563e2bca1f0a8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/aefdb82bb164e79ed75a1a745bf563e2bca1f0a8/pinot-core/src/main/java/com/linkedin/pinot/core/startree/OffHeapStarTreeBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/startree/OffHeapStarTreeBuilder.java?ref=aefdb82bb164e79ed75a1a745bf563e2bca1f0a8",
                "deletions": 1,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/startree/OffHeapStarTreeBuilder.java",
                "patch": "@@ -439,7 +439,7 @@ private int constructStarTree(StarTreeIndexNode node, int startDocId, int endDoc\n     }\n \n     // Return if star node does not need to be created.\n-    if (skipStarNodeCreationForDimensions.contains(splitDimensionName)) {\n+    if (skipStarNodeCreationForDimensions != null && skipStarNodeCreationForDimensions.contains(splitDimensionName)) {\n       return docsAdded;\n     }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/aefdb82bb164e79ed75a1a745bf563e2bca1f0a8/pinot-core/src/main/java/com/linkedin/pinot/core/startree/OffHeapStarTreeBuilder.java",
                "sha": "6bec1e7a7935632a7a8b791e8da9b3b400045de9",
                "status": "modified"
            }
        ],
        "message": "Build Fix, added null check to avoid NPE",
        "parent": "https://github.com/apache/incubator-pinot/commit/36935d7de6e2e8dd77cd8323fc8968a7b99c0b0a",
        "repo": "incubator-pinot",
        "unit_tests": [
            "OffHeapStarTreeBuilderTest.java"
        ]
    },
    "incubator-pinot_c53fbd2": {
        "bug_id": "incubator-pinot_c53fbd2",
        "commit": "https://github.com/apache/incubator-pinot/commit/c53fbd219fe48bd8ddc98a2b54ba1056386a90d9",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/c53fbd219fe48bd8ddc98a2b54ba1056386a90d9/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java?ref=c53fbd219fe48bd8ddc98a2b54ba1056386a90d9",
                "deletions": 20,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "patch": "@@ -1,5 +1,7 @@\n package com.linkedin.pinot.controller.api.restlet.resources;\n \n+import com.google.common.base.Preconditions;\n+import com.linkedin.pinot.common.config.TableNameBuilder;\n import java.io.File;\n import java.io.IOException;\n import org.apache.commons.io.FileUtils;\n@@ -55,41 +57,44 @@ public Representation get() {\n       \"/tables/{tableName}/schema/\"\n   })\n   private Representation getTableSchema(\n-      @Parameter(name = \"tableName\", in = \"path\", description = \"Table name for which to get the schema\", required = true)\n-      String tableName) {\n+      @Parameter(name = \"tableName\", in = \"path\", description = \"Table name for which to get the schema\",\n+          required = true) String tableName) {\n     if (_pinotHelixResourceManager.hasRealtimeTable(tableName)) {\n       try {\n         AbstractTableConfig config = _pinotHelixResourceManager.getTableConfig(tableName, TableType.REALTIME);\n-        return new StringRepresentation(_pinotHelixResourceManager.getSchema(config.getValidationConfig().getSchemaName()).getJSONSchema()\n-            .toString());\n+        String schemaName = config.getValidationConfig().getSchemaName();\n+        Schema schema = _pinotHelixResourceManager.getSchema(schemaName);\n+        Preconditions.checkNotNull(schema, \"Failed to fetch schema: %s for REALTIME table: %s\", schemaName, tableName);\n+        return new StringRepresentation(schema.getJSONSchema());\n       } catch (Exception e) {\n-        LOGGER.error(\"Caught exception while fetching schema for a realtime table : {} \", tableName, e);\n-        ControllerRestApplication.getControllerMetrics().addMeteredGlobalValue(ControllerMeter.CONTROLLER_TABLE_SCHEMA_GET_ERROR, 1L);\n+        LOGGER.error(\"Caught exception while fetching schema for REALTIME table: {} \", tableName, e);\n+        ControllerRestApplication.getControllerMetrics()\n+            .addMeteredGlobalValue(ControllerMeter.CONTROLLER_TABLE_SCHEMA_GET_ERROR, 1L);\n         setStatus(Status.SERVER_ERROR_INTERNAL);\n         return PinotSegmentUploadRestletResource.exceptionToStringRepresentation(e);\n       }\n-    } else {\n-      AbstractTableConfig config;\n+    }\n+\n+    if (_pinotHelixResourceManager.hasOfflineTable(tableName)) {\n+      // For OFFLINE table, schema name is the same as table name\n+      String schemaName = TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(tableName);\n       try {\n-        config = _pinotHelixResourceManager.getTableConfig(tableName, TableType.OFFLINE);\n-        String schemaName = config.getValidationConfig().getSchemaName();\n-        Schema schema = null;\n-        if (schemaName != null && !schemaName.isEmpty()) {\n-          schema = _pinotHelixResourceManager.getSchema(schemaName);\n-        }\n+        Schema schema = _pinotHelixResourceManager.getSchema(schemaName);\n         if (schema == null) {\n           setStatus(Status.CLIENT_ERROR_NOT_FOUND);\n-          StringRepresentation repr = new StringRepresentation(\"{\\\"error\\\": \\\"Schema \" + schemaName + \" not found\\\"\");\n-          repr.setMediaType(MediaType.APPLICATION_JSON);\n-          return repr;\n+          return new StringRepresentation(\"Error: schema \" + schemaName + \" not found\");\n         }\n-        return new StringRepresentation(schema.getJSONSchema().toString());\n+        return new StringRepresentation(schema.getJSONSchema());\n       } catch (Exception e) {\n-        LOGGER.error(\"Caught exception while fetching schema for a offline table : {} \", tableName, e);\n-        ControllerRestApplication.getControllerMetrics().addMeteredGlobalValue(ControllerMeter.CONTROLLER_TABLE_SCHEMA_GET_ERROR, 1L);\n+        LOGGER.error(\"Caught exception while fetching schema for OFFLINE table :{} \", tableName, e);\n+        ControllerRestApplication.getControllerMetrics()\n+            .addMeteredGlobalValue(ControllerMeter.CONTROLLER_TABLE_SCHEMA_GET_ERROR, 1L);\n         setStatus(Status.SERVER_ERROR_INTERNAL);\n         return PinotSegmentUploadRestletResource.exceptionToStringRepresentation(e);\n       }\n     }\n+\n+    setStatus(Status.CLIENT_ERROR_NOT_FOUND);\n+    return new StringRepresentation(\"Error: table \" + tableName + \" not found\");\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/c53fbd219fe48bd8ddc98a2b54ba1056386a90d9/pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/PinotTableSchema.java",
                "sha": "2ec8fe42201a1b44f7c863145faffac1ff0d6790",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/c53fbd219fe48bd8ddc98a2b54ba1056386a90d9/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=c53fbd219fe48bd8ddc98a2b54ba1056386a90d9",
                "deletions": 9,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -936,15 +936,10 @@ public boolean deleteSchema(Schema schema) {\n     }\n     return false;\n   }\n-  /**\n-   *\n-   * @param schemaName\n-   * @return\n-   * @throws JsonParseException\n-   * @throws JsonMappingException\n-   * @throws IOException\n-   */\n-  public @Nullable Schema getSchema(String schemaName) throws JsonParseException, JsonMappingException, IOException {\n+\n+  @Nullable\n+  public Schema getSchema(String schemaName)\n+      throws IOException {\n     PinotHelixPropertyStoreZnRecordProvider propertyStoreHelper =\n         PinotHelixPropertyStoreZnRecordProvider.forSchema(_propertyStore);\n     ZNRecord record = propertyStoreHelper.get(schemaName);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/c53fbd219fe48bd8ddc98a2b54ba1056386a90d9/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "68dc728d6429a2a84f02c23e7bef578555fe8dd6",
                "status": "modified"
            }
        ],
        "message": "Fix NPE from getTableSchema (#1284)\n\nWhen table does not exist, it will throw NPE.\r\nFor OFFLINE table, schema name should be the same as table name.",
        "parent": "https://github.com/apache/incubator-pinot/commit/bd85e25513213c19d93fbe77fed6558250356b2a",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    },
    "incubator-pinot_e299338": {
        "bug_id": "incubator-pinot_e299338",
        "commit": "https://github.com/apache/incubator-pinot/commit/e29933810a701e2e8c4690465ccb8774a0324180",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-common/src/main/java/com/linkedin/pinot/common/response/ServerInstance.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/response/ServerInstance.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 0,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/response/ServerInstance.java",
                "patch": "@@ -48,6 +48,8 @@\n   /** IP Address. Not used in equals/hash-code generation **/\n   private final InetAddress _ipAddress;\n \n+  private final int _seq;\n+\n   /**\n    * Use this constructor if the name and port are embedded as string with \":\" as delimiter\n    *\n@@ -58,6 +60,10 @@ public ServerInstance(String namePortStr) {\n   }\n \n   public ServerInstance(String name, int port) {\n+    this(name, port, 0);\n+  }\n+\n+  public ServerInstance(String name, int port, int seq) {\n     super();\n     InetAddress ipAddr = null;\n     try {\n@@ -70,6 +76,7 @@ public ServerInstance(String name, int port) {\n     _ipAddress = ipAddr;\n     _hostname = _ipAddress != null ? _ipAddress.getHostName() : name;\n     _port = port;\n+    _seq = seq;\n   }\n \n   public String getHostname() {\n@@ -90,6 +97,7 @@ public int hashCode() {\n     int result = 1;\n     result = (prime * result) + (_hostname == null ? 0 : _hostname.hashCode());\n     result = (prime * result) + _port;\n+    result = (prime * result) + _seq;\n     return result;\n   }\n \n@@ -115,6 +123,9 @@ public boolean equals(Object obj) {\n     if (_port != other._port) {\n       return false;\n     }\n+    if (_seq != other._seq) {\n+      return false;\n+    }\n     return true;\n   }\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-common/src/main/java/com/linkedin/pinot/common/response/ServerInstance.java",
                "sha": "c9ce11ce541a568c1e769ffc8a375469c8771477",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 1,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "patch": "@@ -84,7 +84,7 @@ private static FilterQueryTree buildFilterQuery(Integer id, Map<Integer, FilterQ\n     List<Integer> children = q.getNestedFilterQueryIds();\n \n     List<FilterQueryTree> c = null;\n-    if (null != children) {\n+    if (null != children && !children.isEmpty()) {\n       c = new ArrayList<FilterQueryTree>();\n       for (final Integer i : children) {\n         final FilterQueryTree t = buildFilterQuery(i, queryMap);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-common/src/main/java/com/linkedin/pinot/common/utils/request/RequestUtils.java",
                "sha": "59a937fb2c86f2f4868ecb666230d532b5ebff01",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/datasource/RealtimeColumnDataSource.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/datasource/RealtimeColumnDataSource.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 13,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/datasource/RealtimeColumnDataSource.java",
                "patch": "@@ -37,6 +37,7 @@\n \n public class RealtimeColumnDataSource implements DataSource {\n \n+  private static final int REALTIME_DICTIONARY_INIT_ID = 1;\n   private final FieldSpec spec;\n   private final MutableDictionaryReader dictionary;\n   private final Map<Object, Pair<Long, Object>> docIdMap;\n@@ -165,7 +166,7 @@ public boolean setPredicate(Predicate predicate) {\n             notINHolder.or(invertedINdex.getDocIdSetFor(i));\n           }\n         }\n-\n+        filteredDocIdBitmap = notINHolder;\n         break;\n       case RANGE:\n         String rangeStart = \"\";\n@@ -187,24 +188,24 @@ public boolean setPredicate(Predicate predicate) {\n         final String upper = rangeString.split(\",\")[1].substring(0, rangeString.split(\",\")[1].length() - 1);\n \n         if (lower.equals(\"*\")) {\n-          rangeStart = dictionary.getString(0);\n+          rangeStart = dictionary.getString(REALTIME_DICTIONARY_INIT_ID);\n+          incLower = true;\n+        } else {\n+          rangeStart = lower;\n         }\n \n         if (upper.equals(\"*\")) {\n-          rangeEnd = dictionary.getString(dictionary.length() - 1);\n-        }\n-\n-        List<Integer> rangeCollector = new ArrayList<Integer>();\n-\n-        for (int i = 0; i < dictionary.length(); i++) {\n-          if (dictionary.inRange(rangeStart, rangeEnd, i, incLower, incUpper)) {\n-            rangeCollector.add(i);\n-          }\n+          rangeEnd = dictionary.getString(dictionary.length());\n+          incUpper = true;\n+        } else {\n+          rangeEnd = upper;\n         }\n \n         MutableRoaringBitmap rangeBitmap = new MutableRoaringBitmap();\n-        for (Integer dicId : rangeCollector) {\n-          rangeBitmap.or(invertedINdex.getDocIdSetFor(dicId));\n+        for (int dicId = 1; dicId <= dictionary.length(); dicId++) {\n+          if (dictionary.inRange(rangeStart, rangeEnd, dicId, incLower, incUpper)) {\n+            rangeBitmap.or(invertedINdex.getDocIdSetFor(dicId));\n+          }\n         }\n \n         filteredDocIdBitmap = rangeBitmap;",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/datasource/RealtimeColumnDataSource.java",
                "sha": "16ff3fd2fb8659ee49dcb464c30233b89baf391b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/dictionary/MutableDictionaryReader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/dictionary/MutableDictionaryReader.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 1,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/dictionary/MutableDictionaryReader.java",
                "patch": "@@ -66,7 +66,7 @@ public int getInt(int dictionaryId) {\n \n   @Override\n   public String getString(int dictionaryId) {\n-    return ((String) dictionaryIdBiMap.get(new Integer(dictionaryId)));\n+    return dictionaryIdBiMap.get(new Integer(dictionaryId)).toString();\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/realtime/impl/dictionary/MutableDictionaryReader.java",
                "sha": "aa908b576b48227dda2033e60aae3f60a580646f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/data/source/ColumnDataSourceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/data/source/ColumnDataSourceImpl.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 2,
                "filename": "pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/data/source/ColumnDataSourceImpl.java",
                "patch": "@@ -125,7 +125,6 @@ public boolean setPredicate(Predicate p) {\n             holderNEQ.or(invertedIndex.getImmutable(i));\n           }\n         }\n-\n         filteredBitmap = holderNEQ;\n         break;\n       case IN:\n@@ -202,7 +201,8 @@ public boolean setPredicate(Predicate p) {\n         }\n \n         if (rangeStartIndex > rangeEndIndex) {\n-          return false;\n+          filteredBitmap = new MutableRoaringBitmap();\n+          return true;\n         }\n \n         final MutableRoaringBitmap rangeBitmapHolder = invertedIndex.getMutable(rangeStartIndex);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-core/src/main/java/com/linkedin/pinot/core/segment/index/data/source/ColumnDataSourceImpl.java",
                "sha": "041274423368957a561579e5decf49ab13eab1c1",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-transport/src/main/java/com/linkedin/pinot/requestHandler/BrokerRequestHandler.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-transport/src/main/java/com/linkedin/pinot/requestHandler/BrokerRequestHandler.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 24,
                "filename": "pinot-transport/src/main/java/com/linkedin/pinot/requestHandler/BrokerRequestHandler.java",
                "patch": "@@ -186,37 +186,44 @@ private BrokerRequest getRealtimeBrokerRequest(BrokerRequest request) {\n   }\n \n   private void attachTimeBoundary(String hybridResourceName, BrokerRequest offlineRequest, boolean isOfflineRequest) {\n-    TimeBoundaryInfo timeBoundaryInfo = _timeBoundaryService.getTimeBoundaryInfoFor(hybridResourceName);\n+    TimeBoundaryInfo timeBoundaryInfo = _timeBoundaryService.getTimeBoundaryInfoFor(\n+        BrokerRequestUtils.getOfflineResourceNameForResource(hybridResourceName));\n     if (timeBoundaryInfo == null || timeBoundaryInfo.getTimeColumn() == null || timeBoundaryInfo.getTimeValue() == null) {\n       return;\n     }\n     FilterQuery timeFilterQuery = new FilterQuery();\n     timeFilterQuery.setOperator(FilterOperator.RANGE);\n     timeFilterQuery.setColumn(timeBoundaryInfo.getTimeColumn());\n+    timeFilterQuery.setNestedFilterQueryIds(new ArrayList<Integer>());\n     List<String> values = new ArrayList<String>();\n     if (isOfflineRequest) {\n       values.add(\"(*,\" + timeBoundaryInfo.getTimeValue() + \")\");\n     } else {\n-      values.add(\"[\" + timeBoundaryInfo.getTimeValue() + \", *)\");\n+      values.add(\"[\" + timeBoundaryInfo.getTimeValue() + \",*)\");\n     }\n     timeFilterQuery.setValue(values);\n+    timeFilterQuery.setId(-1);\n     FilterQuery currentFilterQuery = offlineRequest.getFilterQuery();\n-\n-    FilterQuery andFilterQuery = new FilterQuery();\n-    andFilterQuery.setOperator(FilterOperator.AND);\n-    List<Integer> nestedFilterQueryIds = new ArrayList<Integer>();\n-    nestedFilterQueryIds.add(currentFilterQuery.getId());\n-    nestedFilterQueryIds.add(timeFilterQuery.getId());\n-    andFilterQuery.setNestedFilterQueryIds(nestedFilterQueryIds);\n-    andFilterQuery.setId(andFilterQuery.hashCode());\n-\n-    FilterQueryMap filterSubQueryMap = offlineRequest.getFilterSubQueryMap();\n-\n-    filterSubQueryMap.putToFilterQueryMap(timeFilterQuery.getId(), timeFilterQuery);\n-    filterSubQueryMap.putToFilterQueryMap(andFilterQuery.getId(), andFilterQuery);\n-\n-    offlineRequest.setFilterQuery(andFilterQuery);\n-    offlineRequest.setFilterSubQueryMap(filterSubQueryMap);\n+    if (currentFilterQuery != null) {\n+      FilterQuery andFilterQuery = new FilterQuery();\n+      andFilterQuery.setOperator(FilterOperator.AND);\n+      List<Integer> nestedFilterQueryIds = new ArrayList<Integer>();\n+      nestedFilterQueryIds.add(currentFilterQuery.getId());\n+      nestedFilterQueryIds.add(timeFilterQuery.getId());\n+      andFilterQuery.setNestedFilterQueryIds(nestedFilterQueryIds);\n+      andFilterQuery.setId(-2);\n+      FilterQueryMap filterSubQueryMap = offlineRequest.getFilterSubQueryMap();\n+      filterSubQueryMap.putToFilterQueryMap(timeFilterQuery.getId(), timeFilterQuery);\n+      filterSubQueryMap.putToFilterQueryMap(andFilterQuery.getId(), andFilterQuery);\n+\n+      offlineRequest.setFilterQuery(andFilterQuery);\n+      offlineRequest.setFilterSubQueryMap(filterSubQueryMap);\n+    } else {\n+      FilterQueryMap filterSubQueryMap = new FilterQueryMap();\n+      filterSubQueryMap.putToFilterQueryMap(timeFilterQuery.getId(), timeFilterQuery);\n+      offlineRequest.setFilterQuery(timeFilterQuery);\n+      offlineRequest.setFilterSubQueryMap(filterSubQueryMap);\n+    }\n   }\n \n   private Object getDataTableFromBrokerRequest(final BrokerRequest request, BucketingSelection overriddenSelection)\n@@ -225,7 +232,7 @@ private Object getDataTableFromBrokerRequest(final BrokerRequest request, Bucket\n     final long routingStartTime = System.nanoTime();\n     RoutingTableLookupRequest rtRequest = new RoutingTableLookupRequest(request.getQuerySource().getResourceName());\n     Map<ServerInstance, SegmentIdSet> segmentServices = _routingTable.findServers(rtRequest);\n-    if (segmentServices == null) {\n+    if (segmentServices == null || segmentServices.isEmpty()) {\n       LOGGER.info(\"Not found ServerInstances to Segments Mapping:\");\n       return null;\n     }\n@@ -320,11 +327,11 @@ private Object getDataTableFromBrokerRequestList(final BrokerRequest federatedBr\n       final long routingStartTime = System.nanoTime();\n       RoutingTableLookupRequest rtRequest = new RoutingTableLookupRequest(request.getQuerySource().getResourceName());\n       Map<ServerInstance, SegmentIdSet> segmentServices = _routingTable.findServers(rtRequest);\n-      if (segmentServices == null) {\n-        LOGGER.info(\"Not found ServerInstances to Segments Mapping:\");\n-        return null;\n+      if (segmentServices == null || segmentServices.isEmpty()) {\n+        LOGGER.info(\"Not found ServerInstances to Segments Mapping for resource - \" + rtRequest.getResourceName());\n+        continue;\n       }\n-      LOGGER.info(\"Find ServerInstances to Segments Mapping:\");\n+      LOGGER.info(\"Find ServerInstances to Segments Mapping for resource - \" + rtRequest.getResourceName());\n       for (ServerInstance serverInstance : segmentServices.keySet()) {\n         LOGGER.info(serverInstance + \" : \" + segmentServices.get(serverInstance));\n       }\n@@ -363,6 +370,7 @@ private Object getDataTableFromBrokerRequestList(final BrokerRequest federatedBr\n         Map<ServerInstance, Throwable> errors = response.getError();\n \n         if (null != responses) {\n+          int responseSeq = 0;\n           for (Entry<ServerInstance, ByteBuf> e : responses.entrySet()) {\n             try {\n               ByteBuf b = e.getValue();\n@@ -372,8 +380,9 @@ private Object getDataTableFromBrokerRequestList(final BrokerRequest federatedBr\n               }\n               b.readBytes(b2);\n               DataTable r2 = new DataTable(b2);\n+              // Hybrid requests may get response from same instance, so we need to distinguish them.\n               ServerInstance decoratedServerInstance =\n-                  new ServerInstance(e.getKey().getHostname() + \"_\" + request.hashCode(), e.getKey().getPort());\n+                  new ServerInstance(e.getKey().getHostname(), e.getKey().getPort(), (responseSeq++));\n               instanceResponseMap.put(decoratedServerInstance, r2);\n             } catch (Exception ex) {\n               LOGGER.error(\"Got exceptions in collect query result for instance \" + e.getKey() + \", error: \"",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-transport/src/main/java/com/linkedin/pinot/requestHandler/BrokerRequestHandler.java",
                "sha": "215855402a8eb9ab48951ac782fe04b097b3498a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/e29933810a701e2e8c4690465ccb8774a0324180/pinot-transport/src/main/java/com/linkedin/pinot/routing/HelixExternalViewBasedTimeBoundaryService.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-transport/src/main/java/com/linkedin/pinot/routing/HelixExternalViewBasedTimeBoundaryService.java?ref=e29933810a701e2e8c4690465ccb8774a0324180",
                "deletions": 5,
                "filename": "pinot-transport/src/main/java/com/linkedin/pinot/routing/HelixExternalViewBasedTimeBoundaryService.java",
                "patch": "@@ -58,17 +58,14 @@ public synchronized void updateTimeBoundaryService(ExternalView externalView) {\n     OfflineDataResourceZKMetadata offlineDataResourceZKMetadata = ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore, resourceName);\n     TimeUnit resourceTimeUnit = getTimeUnitFromString(offlineDataResourceZKMetadata.getTimeType());\n \n-    if (offlineSegmentZKMetadatas.get(0).getTimeUnit() != null) {\n+    if (!offlineSegmentZKMetadatas.isEmpty() && offlineSegmentZKMetadatas.get(0).getTimeUnit() != null) {\n       long maxTimeValue = -1;\n       for (OfflineSegmentZKMetadata offlineSegmentZKMetadata : offlineSegmentZKMetadatas) {\n         long endTime = resourceTimeUnit.convert(offlineSegmentZKMetadata.getEndTime(), offlineSegmentZKMetadata.getTimeUnit());\n-        if (maxTimeValue < endTime) {\n-          maxTimeValue = endTime;\n-        }\n+        maxTimeValue = Math.max(maxTimeValue, endTime);\n       }\n \n       TimeBoundaryInfo timeBoundaryInfo = new TimeBoundaryInfo();\n-      offlineDataResourceZKMetadata.getTimeType();\n       timeBoundaryInfo.setTimeColumn(offlineDataResourceZKMetadata.getTimeColumnName());\n       timeBoundaryInfo.setTimeValue(Long.toString(maxTimeValue));\n       _timeBoundaryInfoMap.put(resourceName, timeBoundaryInfo);",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/e29933810a701e2e8c4690465ccb8774a0324180/pinot-transport/src/main/java/com/linkedin/pinot/routing/HelixExternalViewBasedTimeBoundaryService.java",
                "sha": "d57635109238aa5fc6f347763beb1e81672d8c1d",
                "status": "modified"
            }
        ],
        "message": "Bug fixing for federated broker test.\n1. fix logic for RealtimeColumnDataSource set range predicate as for\nrealtime dictionary, dictId is from 1 to dictionary size.\n2. in MutableDictionaryReader, getString is also used for other data\ntype dictionary, so change it to toString().\n3. fixing  offline ColumnDataSourceImpl would set filteredBitMap to null\nin Range query, which actually should be an empty bitMap.\nThis is the root cause of DummyBlock get called.\n4. fixing NPE in HelixExternalViewBasedTimeBoundaryService.\n5. fixing time filter attching logic in BrokerRequestHandler for no\nfilter request.\n6. changing attached time filters' ids to -1 and -2 to avoid potiential\nduplicated.\n\nRB=453859\nR=xiafu\nA=kgopalak,jfim",
        "parent": "https://github.com/apache/incubator-pinot/commit/2a3cfbb468cd58ca23fc6aebab5f7d8bcab31663",
        "repo": "incubator-pinot",
        "unit_tests": [
            "HelixExternalViewBasedTimeBoundaryServiceTest.java"
        ]
    },
    "incubator-pinot_f462737": {
        "bug_id": "incubator-pinot_f462737",
        "commit": "https://github.com/apache/incubator-pinot/commit/f46273747d5aedc0a10aefbcb7b0a0078516695e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/f46273747d5aedc0a10aefbcb7b0a0078516695e/pinot-common/src/main/java/com/linkedin/pinot/common/utils/ServiceStatus.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/com/linkedin/pinot/common/utils/ServiceStatus.java?ref=f46273747d5aedc0a10aefbcb7b0a0078516695e",
                "deletions": 0,
                "filename": "pinot-common/src/main/java/com/linkedin/pinot/common/utils/ServiceStatus.java",
                "patch": "@@ -122,6 +122,11 @@ public Status getServiceStatus() {\n         }\n \n         for (String partition : idealState.getPartitionSet()) {\n+          // If this partition is not in the external view, then it hasn't finished starting up\n+          if (!externalView.getPartitionSet().contains(partition)) {\n+            return Status.STARTING;\n+          }\n+\n           String idealStateStatus = idealState.getInstanceStateMap(partition).get(_instanceName);\n           String externalViewStatus = externalView.getStateMap(partition).get(_instanceName);\n ",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/f46273747d5aedc0a10aefbcb7b0a0078516695e/pinot-common/src/main/java/com/linkedin/pinot/common/utils/ServiceStatus.java",
                "sha": "aaf7348c93304ed5fa4475398cfd3a624520149d",
                "status": "modified"
            }
        ],
        "message": "Fix service status NPE (#1006)\n\nFix the service status API throwing NPE if there are zero replicas for\na segment.",
        "parent": "https://github.com/apache/incubator-pinot/commit/a79a8c3280e517746213a77348b807ca4025710e",
        "repo": "incubator-pinot",
        "unit_tests": [
            "ServiceStatusTest.java"
        ]
    },
    "incubator-pinot_f975fcb": {
        "bug_id": "incubator-pinot_f975fcb",
        "commit": "https://github.com/apache/incubator-pinot/commit/f975fcbbcb8b7a03f90389c387e30ebf44bc6ba1",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/incubator-pinot/blob/f975fcbbcb8b7a03f90389c387e30ebf44bc6ba1/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=f975fcbbcb8b7a03f90389c387e30ebf44bc6ba1",
                "deletions": 3,
                "filename": "pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -464,15 +464,20 @@ public PinotResourceManagerResponse rebuildBrokerResourceFromHelixTags(final Str\n \n     try {\n       final TableType tableType = TableNameBuilder.getTableTypeFromTableName(tableName);\n+      AbstractTableConfig tableConfig;\n       if (tableType == TableType.OFFLINE) {\n-        tenantConfig = ZKMetadataProvider.getOfflineTableConfig(getPropertyStore(), tableName).getTenantConfig();\n+        tableConfig = ZKMetadataProvider.getOfflineTableConfig(getPropertyStore(), tableName);\n       } else if (tableType == TableType.REALTIME) {\n-        tenantConfig = ZKMetadataProvider.getRealtimeTableConfig(getPropertyStore(), tableName).getTenantConfig();\n+        tableConfig = ZKMetadataProvider.getRealtimeTableConfig(getPropertyStore(), tableName);\n       } else {\n         return new PinotResourceManagerResponse(\"Table \" + tableName + \" does not have a table type\", false);\n       }\n+      if (tableConfig == null) {\n+        return new PinotResourceManagerResponse(\"Table \" + tableName + \" does not exist\", false);\n+      }\n+      tenantConfig = tableConfig.getTenantConfig();\n     } catch (Exception e) {\n-      LOGGER.warn(\"Caught exception while rebuilding broker resource from Helix tags for table {}\", e, tableName);\n+      LOGGER.warn(\"Caught exception while getting tenant config for table {}\", tableName, e);\n       return new PinotResourceManagerResponse(\n           \"Failed to fetch broker tag for table \" + tableName + \" due to exception: \" + e.getMessage(), false);\n     }",
                "raw_url": "https://github.com/apache/incubator-pinot/raw/f975fcbbcb8b7a03f90389c387e30ebf44bc6ba1/pinot-controller/src/main/java/com/linkedin/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "sha": "8f0703448383c707677a7557f4d50c90d4b587d9",
                "status": "modified"
            }
        ],
        "message": "Fix NPE and log message when rebuilding broker resource (#1125)",
        "parent": "https://github.com/apache/incubator-pinot/commit/7d1c7079c677d100e14bc87fed17a52b445162ea",
        "repo": "incubator-pinot",
        "unit_tests": [
            "PinotHelixResourceManagerTest.java"
        ]
    }
}