{
    "attic-whirr_2ed7015": {
        "bug_id": "attic-whirr_2ed7015",
        "commit": "https://github.com/apache/attic-whirr/commit/2ed7015a55fbef55a0dedf4372ba12163c606763",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-whirr/blob/2ed7015a55fbef55a0dedf4372ba12163c606763/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/CHANGES.txt?ref=2ed7015a55fbef55a0dedf4372ba12163c606763",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -70,6 +70,9 @@ Trunk (unreleased changes)\n     WHIRR-165. Hadoop integration tests fail due to WHIRR-160 changes.\n     (tomwhite)\n \n+    WHIRR-180. ListClusterCommand.run throws a NullPointerException for\n+    unrecognized service names. (Andrei Savu via tomwhite)\n+\n Release 0.2.0 - 2010-11-04\n \n   NEW FEATURES",
                "raw_url": "https://github.com/apache/attic-whirr/raw/2ed7015a55fbef55a0dedf4372ba12163c606763/CHANGES.txt",
                "sha": "a3ac990e7bf234b520562a1996b0d7e8ab212b82",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-whirr/blob/2ed7015a55fbef55a0dedf4372ba12163c606763/cli/src/main/java/org/apache/whirr/cli/command/ListClusterCommand.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/cli/src/main/java/org/apache/whirr/cli/command/ListClusterCommand.java?ref=2ed7015a55fbef55a0dedf4372ba12163c606763",
                "deletions": 1,
                "filename": "cli/src/main/java/org/apache/whirr/cli/command/ListClusterCommand.java",
                "patch": "@@ -61,7 +61,7 @@ public int run(InputStream in, PrintStream out, PrintStream err,\n     try {\n       ClusterSpec clusterSpec = getClusterSpec(optionSet);\n \n-      Service service = factory.create(clusterSpec.getServiceName());\n+      Service service = createService(clusterSpec.getServiceName());\n       Set<? extends NodeMetadata> nodes = service.getNodes(clusterSpec);\n       for (NodeMetadata node : nodes) {\n         out.println(Joiner.on('\\t').join(node.getId(), node.getImageId(),",
                "raw_url": "https://github.com/apache/attic-whirr/raw/2ed7015a55fbef55a0dedf4372ba12163c606763/cli/src/main/java/org/apache/whirr/cli/command/ListClusterCommand.java",
                "sha": "2020875303aa9586f26f5fcb28c07ab3abc36d11",
                "status": "modified"
            }
        ],
        "message": "WHIRR-180. ListClusterCommand.run throws a NullPointerException for unrecognized service names. Contributed by Andrei Savu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/whirr/trunk@1054523 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-whirr/commit/be6895806b64c5e9cc9eea2f69a13cf2c6c38ec8",
        "patched_files": [
            "ListClusterCommand.java",
            "CHANGES.txt"
        ],
        "repo": "attic-whirr",
        "unit_tests": [
            "ListClusterCommandTest.java"
        ]
    },
    "attic-whirr_a8abb71": {
        "bug_id": "attic-whirr_a8abb71",
        "commit": "https://github.com/apache/attic-whirr/commit/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-whirr/blob/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/CHANGES.txt",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/CHANGES.txt?ref=a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -25,6 +25,9 @@ Trunk (unreleased changes)\n     WHIRR-97. Lucid is not stable on EC2. Default is now the Amazon Linux AMI\n     on EC2. (tomwhite)\n \n+    WHIRR-102. unknown service NPEs cli, should print the bad service\n+    to console (phunt)\n+\n Release 0.1.0 - 2010-09-02\n \n   INCOMPATIBLE CHANGES",
                "raw_url": "https://github.com/apache/attic-whirr/raw/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/CHANGES.txt",
                "sha": "e0fce771c467fed6bd625b4e372ab10f8d86e05e",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-whirr/blob/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/AbstractClusterSpecCommand.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/cli/src/main/java/org/apache/whirr/cli/command/AbstractClusterSpecCommand.java?ref=a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
                "deletions": 8,
                "filename": "cli/src/main/java/org/apache/whirr/cli/command/AbstractClusterSpecCommand.java",
                "patch": "@@ -22,8 +22,6 @@\n import static org.apache.whirr.service.ClusterSpec.Property.IDENTITY;\n import static org.apache.whirr.service.ClusterSpec.Property.SERVICE_NAME;\n \n-import com.google.common.collect.Maps;\n-\n import java.util.EnumSet;\n import java.util.Map;\n \n@@ -38,25 +36,28 @@\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.whirr.cli.Command;\n import org.apache.whirr.service.ClusterSpec;\n-import org.apache.whirr.service.ServiceFactory;\n import org.apache.whirr.service.ClusterSpec.Property;\n+import org.apache.whirr.service.Service;\n+import org.apache.whirr.service.ServiceFactory;\n+\n+import com.google.common.collect.Maps;\n \n /**\n  * An abstract command for interacting with clusters.\n  */\n-public abstract class ClusterSpecCommand extends Command {\n+public abstract class AbstractClusterSpecCommand extends Command {\n \n   protected ServiceFactory factory;\n-  \n+\n   protected OptionParser parser = new OptionParser();\n   private Map<Property, OptionSpec> optionSpecs;\n   private OptionSpec<String> configOption = parser.accepts(\"config\")\n     .withRequiredArg().ofType(String.class);\n \n-  public ClusterSpecCommand(String name, String description, ServiceFactory factory) {\n+  public AbstractClusterSpecCommand(String name, String description, ServiceFactory factory) {\n     super(name, description);\n     this.factory = factory;\n-    \n+\n     optionSpecs = Maps.newHashMap();\n     for (Property property : EnumSet.allOf(Property.class)) {\n       ArgumentAcceptingOptionSpec<?> spec = parser.accepts(property.getSimpleName())\n@@ -68,7 +69,7 @@ public ClusterSpecCommand(String name, String description, ServiceFactory factor\n       optionSpecs.put(property, spec);\n     }\n   }\n-  \n+\n   protected ClusterSpec getClusterSpec(OptionSet optionSet) throws ConfigurationException {\n     Configuration optionsConfig = new PropertiesConfiguration();\n     for (Map.Entry<Property, OptionSpec> entry : optionSpecs.entrySet()) {\n@@ -98,4 +99,19 @@ protected ClusterSpec getClusterSpec(OptionSet optionSet) throws ConfigurationEx\n     return new ClusterSpec(config);\n   }\n \n+  /**\n+   * Create the specified service\n+   * @param serviceName\n+   * @return\n+   * @throws IllegalArgumentException if serviceName is not found\n+   */\n+  protected Service createService(String serviceName) {\n+    Service service = factory.create(serviceName);\n+    if (service == null) {\n+      throw new IllegalArgumentException(\"Unable to find service \"\n+          + serviceName + \", exiting\");\n+    }\n+    return service;\n+  }\n+\n }",
                "previous_filename": "cli/src/main/java/org/apache/whirr/cli/command/ClusterSpecCommand.java",
                "raw_url": "https://github.com/apache/attic-whirr/raw/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/AbstractClusterSpecCommand.java",
                "sha": "c32c7c912c55c21c141dd36ba66c8339861dfc36",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-whirr/blob/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/DestroyClusterCommand.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/cli/src/main/java/org/apache/whirr/cli/command/DestroyClusterCommand.java?ref=a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
                "deletions": 2,
                "filename": "cli/src/main/java/org/apache/whirr/cli/command/DestroyClusterCommand.java",
                "patch": "@@ -33,7 +33,7 @@\n /**\n  * A command to destroy a running cluster (terminate and cleanup).\n  */\n-public class DestroyClusterCommand extends ClusterSpecCommand {\n+public class DestroyClusterCommand extends AbstractClusterSpecCommand {\n \n   public DestroyClusterCommand() throws IOException {\n     this(new ServiceFactory());\n@@ -56,7 +56,7 @@ public int run(InputStream in, PrintStream out, PrintStream err,\n     try {\n       ClusterSpec clusterSpec = getClusterSpec(optionSet);\n \n-      Service service = factory.create(clusterSpec.getServiceName());\n+      Service service = createService(clusterSpec.getServiceName());\n       service.destroyCluster(clusterSpec);\n       return 0;\n     } catch (IllegalArgumentException e) {",
                "raw_url": "https://github.com/apache/attic-whirr/raw/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/DestroyClusterCommand.java",
                "sha": "62239d1b5443e286073c50199b01f0a3573bd656",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-whirr/blob/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/LaunchClusterCommand.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/cli/src/main/java/org/apache/whirr/cli/command/LaunchClusterCommand.java?ref=a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
                "deletions": 2,
                "filename": "cli/src/main/java/org/apache/whirr/cli/command/LaunchClusterCommand.java",
                "patch": "@@ -34,7 +34,7 @@\n /**\n  * A command to launch a new cluster.\n  */\n-public class LaunchClusterCommand extends ClusterSpecCommand {\n+public class LaunchClusterCommand extends AbstractClusterSpecCommand {\n \n   public LaunchClusterCommand() throws IOException {\n     this(new ServiceFactory());\n@@ -57,7 +57,7 @@ public int run(InputStream in, PrintStream out, PrintStream err,\n     \n     try {\n       ClusterSpec clusterSpec = getClusterSpec(optionSet);\n-      Service service = factory.create(clusterSpec.getServiceName());\n+      Service service = createService(clusterSpec.getServiceName());\n       Cluster cluster = service.launchCluster(clusterSpec);\n       out.printf(\"Started cluster of %s instances\\n\",\n           cluster.getInstances().size());",
                "raw_url": "https://github.com/apache/attic-whirr/raw/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/main/java/org/apache/whirr/cli/command/LaunchClusterCommand.java",
                "sha": "1656b98bea85962f4e28ad472202d22d307c5ee3",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/attic-whirr/blob/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/test/java/org/apache/whirr/cli/command/AbstractClusterSpecCommandTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/cli/src/test/java/org/apache/whirr/cli/command/AbstractClusterSpecCommandTest.java?ref=a8abb71c6cdc1a62ac68d2ee458245f82ff004e0",
                "deletions": 4,
                "filename": "cli/src/test/java/org/apache/whirr/cli/command/AbstractClusterSpecCommandTest.java",
                "patch": "@@ -31,25 +31,46 @@\n import org.apache.whirr.service.ServiceFactory;\n import org.junit.Test;\n \n-public class ClusterSpecCommandTest {\n+public class AbstractClusterSpecCommandTest {\n \n   @Test\n   public void testOverrides() throws Exception {\n-    ClusterSpecCommand clusterSpecCommand = new ClusterSpecCommand(\"name\",\n+    AbstractClusterSpecCommand clusterSpecCommand = new AbstractClusterSpecCommand(\"name\",\n         \"description\", new ServiceFactory()) {\n       @Override\n       public int run(InputStream in, PrintStream out, PrintStream err,\n           List<String> args) throws Exception {\n         return 0;\n       }\n     };\n-    \n+\n     OptionSet optionSet = clusterSpecCommand.parser.parse(\n         \"--service-name\", \"overridden-test-service\",\n         \"--config\", \"whirr-override-test.properties\");\n     ClusterSpec clusterSpec = clusterSpecCommand.getClusterSpec(optionSet);\n     assertThat(clusterSpec.getServiceName(), is(\"overridden-test-service\"));\n     assertThat(clusterSpec.getClusterName(), is(\"test-cluster\"));\n   }\n-  \n+\n+  /**\n+   * Ensure that an invalid service name causes failure\n+   */\n+  @Test(expected=IllegalArgumentException.class)\n+  public void testCreateServer_InvalidServiceName() throws Exception {\n+    AbstractClusterSpecCommand clusterSpecCommand = new AbstractClusterSpecCommand(\"name\",\n+        \"description\", new ServiceFactory()) {\n+      @Override\n+      public int run(InputStream in, PrintStream out, PrintStream err,\n+          List<String> args) throws Exception {\n+        return 0;\n+      }\n+    };\n+\n+    OptionSet optionSet = clusterSpecCommand.parser.parse(\n+        \"--service-name\", \"foo\",\n+        \"--config\", \"whirr-override-test.properties\");\n+    ClusterSpec clusterSpec = clusterSpecCommand.getClusterSpec(optionSet);\n+    // this should fail - non-existent service\n+    clusterSpecCommand.createService(\"bar\");\n+  }\n }",
                "previous_filename": "cli/src/test/java/org/apache/whirr/cli/command/ClusterSpecCommandTest.java",
                "raw_url": "https://github.com/apache/attic-whirr/raw/a8abb71c6cdc1a62ac68d2ee458245f82ff004e0/cli/src/test/java/org/apache/whirr/cli/command/AbstractClusterSpecCommandTest.java",
                "sha": "0c362c2a92e73e01956453632cfa90443f9fc4c0",
                "status": "renamed"
            }
        ],
        "message": "WHIRR-102. unknown service NPEs cli, should print the bad service to console\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/whirr/trunk@1003237 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-whirr/commit/93ab02e153706ea0b3db0e27b24ce667d3c3f27a",
        "patched_files": [
            "CHANGES.txt",
            "DestroyClusterCommand.java",
            "AbstractClusterSpecCommand.java",
            "LaunchClusterCommand.java"
        ],
        "repo": "attic-whirr",
        "unit_tests": [
            "LaunchClusterCommandTest.java",
            "DestroyClusterCommandTest.java",
            "AbstractClusterSpecCommandTest.java"
        ]
    },
    "attic-whirr_f7049ac": {
        "bug_id": "attic-whirr_f7049ac",
        "commit": "https://github.com/apache/attic-whirr/commit/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-whirr/blob/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/CHANGES.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/CHANGES.txt?ref=f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680",
                "deletions": 0,
                "filename": "CHANGES.txt",
                "patch": "@@ -41,6 +41,8 @@ Trunk (unreleased changes)\n \n     WHIRR-377. Fix broken CLI logging config. (asavu via tomwhite)\n \n+    WHIRR-394. NPE used for flow control (David Alves via asavu)\n+\n Release 0.6.0 - 2011-08-17\n \n   NEW FEATURES",
                "raw_url": "https://github.com/apache/attic-whirr/raw/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/CHANGES.txt",
                "sha": "6139230adcffb709a779d0ddf10a9588b8c85881",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/attic-whirr/blob/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/main/java/org/apache/whirr/HandlerMapFactory.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/core/src/main/java/org/apache/whirr/HandlerMapFactory.java?ref=f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680",
                "deletions": 11,
                "filename": "core/src/main/java/org/apache/whirr/HandlerMapFactory.java",
                "patch": "@@ -56,24 +56,33 @@ protected ReturnHandlerByRoleOrPrefix(Map<String, ClusterActionHandlerFactory> f\n       public ClusterActionHandler apply(String arg0) {\n          checkNotNull(arg0, \"role\");\n          for (String prefix : factoryMap.keySet()) {\n-            if (arg0.startsWith(prefix))\n-               return factoryMap.get(prefix).create(arg0.substring(prefix.length()));\n+            if (arg0.startsWith(prefix)) {\n+               return checkNotNull(\n+                 factoryMap.get(prefix).create(arg0.substring(prefix.length())),\n+                 \"Unable to create the action handler\"\n+               );\n+            }\n          }\n-         return handlerMap.get(arg0);\n+         return checkNotNull(handlerMap.get(arg0), \"Action handler not found\");\n       }\n    }\n \n    public static Map<String, ClusterActionHandler> create() {\n-      return create(ServiceLoader.load(ClusterActionHandlerFactory.class), ServiceLoader\n-               .load(ClusterActionHandler.class));\n+      return create(ServiceLoader.load(ClusterActionHandlerFactory.class),\n+        ServiceLoader.load(ClusterActionHandler.class));\n    }\n \n-   public static Map<String, ClusterActionHandler> create(Iterable<ClusterActionHandlerFactory> factories,\n-            Iterable<ClusterActionHandler> handlers) {\n-      Map<String, ClusterActionHandlerFactory> factoryMap = indexFactoriesByRolePrefix(checkNotNull(factories,\n-               \"factories\"));\n-      Map<String, ClusterActionHandler> handlerMap = indexHandlersByRole(checkNotNull(handlers, \"handlers\"));\n-      return new MapMaker().makeComputingMap(new ReturnHandlerByRoleOrPrefix(factoryMap, handlerMap));\n+   public static Map<String, ClusterActionHandler> create(\n+      Iterable<ClusterActionHandlerFactory> factories,\n+      Iterable<ClusterActionHandler> handlers\n+   ) {\n+      Map<String, ClusterActionHandlerFactory> factoryMap =\n+          indexFactoriesByRolePrefix(checkNotNull(factories, \"factories\"));\n+      Map<String, ClusterActionHandler> handlerMap =\n+          indexHandlersByRole(checkNotNull(handlers, \"handlers\"));\n+\n+      return new MapMaker().makeComputingMap(\n+        new ReturnHandlerByRoleOrPrefix(factoryMap, handlerMap));\n    }\n \n    static Map<String, ClusterActionHandlerFactory> indexFactoriesByRolePrefix(",
                "raw_url": "https://github.com/apache/attic-whirr/raw/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/main/java/org/apache/whirr/HandlerMapFactory.java",
                "sha": "388838cc7ff3bbe855c9202e1857cc0b729b585c",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-whirr/blob/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/main/java/org/apache/whirr/actions/ScriptBasedClusterAction.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/core/src/main/java/org/apache/whirr/actions/ScriptBasedClusterAction.java?ref=f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680",
                "deletions": 14,
                "filename": "core/src/main/java/org/apache/whirr/actions/ScriptBasedClusterAction.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.whirr.actions;\n \n import com.google.common.base.Function;\n+import com.google.common.collect.ComputationException;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n \n@@ -35,6 +36,8 @@\n import org.apache.whirr.service.jclouds.StatementBuilder;\n import org.jclouds.compute.ComputeServiceContext;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n /**\n  * A {@link ClusterAction} that provides the base functionality for running\n  * scripts on instances in the cluster.\n@@ -46,7 +49,7 @@\n   protected ScriptBasedClusterAction(Function<ClusterSpec, ComputeServiceContext> getCompute,\n       final Map<String, ClusterActionHandler> handlerMap) {\n     super(getCompute);\n-    this.handlerMap = handlerMap;\n+    this.handlerMap = checkNotNull(handlerMap, \"handlerMap\");\n   }\n   \n   protected abstract void doAction(Map<InstanceTemplate, ClusterActionEvent> eventMap)\n@@ -68,13 +71,11 @@ public Cluster execute(ClusterSpec clusterSpec, Cluster cluster) throws IOExcept\n \n       eventMap.put(instanceTemplate, event);\n       for (String role : instanceTemplate.getRoles()) {\n-        try {\n-          handlerMap.get(role).beforeAction(event);\n-        } catch (NullPointerException e) {\n-          throw new IllegalArgumentException(\"No handler for role \" + role);\n-        }\n+        safeGetActionHandler(role).beforeAction(event);\n       }\n-      newCluster = event.getCluster(); // cluster may have been updated by handler \n+\n+      // cluster may have been updated by handler\n+      newCluster = event.getCluster();\n     }\n     \n     doAction(eventMap);\n@@ -83,19 +84,34 @@ public Cluster execute(ClusterSpec clusterSpec, Cluster cluster) throws IOExcept\n     newCluster = Iterables.get(eventMap.values(), 0).getCluster();\n \n     for (InstanceTemplate instanceTemplate : clusterSpec.getInstanceTemplates()) {\n+      ClusterActionEvent event = eventMap.get(instanceTemplate);\n       for (String role : instanceTemplate.getRoles()) {\n-        ClusterActionEvent event = eventMap.get(instanceTemplate);\n         event.setCluster(newCluster);\n-        try {\n-          handlerMap.get(role).afterAction(event);\n-        } catch (NullPointerException e) {\n-          throw new IllegalArgumentException(\"No handler for role \" + role);\n-        }\n-        newCluster = event.getCluster(); // cluster may have been updated by handler \n+        safeGetActionHandler(role).afterAction(event);\n+\n+        // cluster may have been updated by handler\n+        newCluster = event.getCluster();\n       }\n     }\n     \n     return newCluster;\n   }\n \n+  /**\n+   * Try to get an {@see ClusterActionHandler } instance or throw an\n+   * IllegalArgumentException if not found for this role name\n+   */\n+  private ClusterActionHandler safeGetActionHandler(String role) {\n+    try {\n+      ClusterActionHandler handler = handlerMap.get(role);\n+      if (handler == null) {\n+        throw new IllegalArgumentException(\"No handler for role \" + role);\n+      }\n+      return handler;\n+\n+    } catch (ComputationException e) {\n+      throw new IllegalArgumentException(e.getCause());\n+    }\n+  }\n+\n }",
                "raw_url": "https://github.com/apache/attic-whirr/raw/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/main/java/org/apache/whirr/actions/ScriptBasedClusterAction.java",
                "sha": "fc9ec09b70858c901d39bc10599a6a594d70ffe2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-whirr/blob/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/test/java/org/apache/whirr/actions/BootstrapClusterActionTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/attic-whirr/contents/core/src/test/java/org/apache/whirr/actions/BootstrapClusterActionTest.java?ref=f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680",
                "deletions": 4,
                "filename": "core/src/test/java/org/apache/whirr/actions/BootstrapClusterActionTest.java",
                "patch": "@@ -78,7 +78,7 @@\n     LoggerFactory.getLogger(BootstrapClusterActionTest.class);\n \n   @SuppressWarnings(\"unchecked\")\n-@Test\n+  @Test\n   public void testDoActionRetriesSucceed() throws Exception {\n     CompositeConfiguration config = new CompositeConfiguration();\n     if (System.getProperty(\"config\") != null) {\n@@ -408,8 +408,8 @@ public void testSubroleNotSupported() throws Exception {\n     when(puppetHandlerFactory.getRolePrefix()).thenReturn(\"puppet\");\n     when(handler.getRole()).thenReturn(\"something-else\");\n \n-    Map<String, ClusterActionHandler> handlerMap = HandlerMapFactory.create(ImmutableSet.of(puppetHandlerFactory),\n-          ImmutableSet.of(handler));\n+    Map<String, ClusterActionHandler> handlerMap = HandlerMapFactory.create(\n+      ImmutableSet.of(puppetHandlerFactory), ImmutableSet.of(handler));\n \n     Function<ClusterSpec, ComputeServiceContext> getCompute = mock(Function.class);\n     ComputeServiceContext serviceContext = mock(ComputeServiceContext.class);\n@@ -426,7 +426,7 @@ public void testSubroleNotSupported() throws Exception {\n     \n     Map<Set<String>, Stack<Integer>> reaction = Maps.newHashMap();\n     Stack<Integer> nnStack = new Stack<Integer>();\n-    nnStack.push(new Integer(1));\n+    nnStack.push(1);\n     reaction.put(nn, nnStack);\n     \n     nodeStarterFactory = new TestNodeStarterFactory(reaction);",
                "raw_url": "https://github.com/apache/attic-whirr/raw/f7049ac35ee2ca52fc55b06c03fcf70ecd1e0680/core/src/test/java/org/apache/whirr/actions/BootstrapClusterActionTest.java",
                "sha": "f7e93d2f9d8d29994c61f3d698c8b9e9cbc866db",
                "status": "modified"
            }
        ],
        "message": "WHIRR-394. NPE used for flow control (David Alves via asavu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/whirr/trunk@1183382 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-whirr/commit/7f122af763dd5dbcf7fb5829e7be00a5e5536281",
        "patched_files": [
            "HandlerMapFactory.java",
            "ScriptBasedClusterAction.java",
            "BootstrapClusterAction.java",
            "CHANGES.txt"
        ],
        "repo": "attic-whirr",
        "unit_tests": [
            "BootstrapClusterActionTest.java"
        ]
    }
}