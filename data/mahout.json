{
    "mahout_0b04779": {
        "bug_id": "mahout_0b04779",
        "commit": "https://github.com/apache/mahout/commit/0b04779565a30f0e1e6debb6c2ce846fb1df1447",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/mahout/blob/0b04779565a30f0e1e6debb6c2ce846fb1df1447/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java?ref=0b04779565a30f0e1e6debb6c2ce846fb1df1447",
                "deletions": 8,
                "filename": "core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "patch": "@@ -91,20 +91,20 @@ public void addInstance(String correctLabel, String classifiedLabel) {\n   }\n   \n   public int getCount(String correctLabel, String classifiedLabel) {\n-    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n-        || labelMap.containsKey(classifiedLabel)\n-        || defaultLabel.equals(classifiedLabel),\n-        \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(correctLabel),\n+                                \"Label not found: \" + correctLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(classifiedLabel),\n+                                \"Label not found: \" + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n     int classifiedId = labelMap.get(classifiedLabel);\n     return confusionMatrix[correctId][classifiedId];\n   }\n   \n   public void putCount(String correctLabel, String classifiedLabel, int count) {\n-    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n-        || labelMap.containsKey(classifiedLabel)\n-        || defaultLabel.equals(classifiedLabel),\n-        \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(correctLabel),\n+                                \"Label not found: \" + correctLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(classifiedLabel),\n+                                \"Label not found: \" + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n     int classifiedId = labelMap.get(classifiedLabel);\n     confusionMatrix[correctId][classifiedId] = count;",
                "raw_url": "https://github.com/apache/mahout/raw/0b04779565a30f0e1e6debb6c2ce846fb1df1447/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "sha": "7a6ea940b573c6fda441315276ef39da98bc877b",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-604 avoid an NPE by updating Preconditions check\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1070798 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/75d18373ebd5ebf291ffcd58f2d51fc1ca2fe358",
        "repo": "mahout",
        "unit_tests": [
            "ConfusionMatrixTest.java"
        ]
    },
    "mahout_2cd3ea3": {
        "bug_id": "mahout_2cd3ea3",
        "commit": "https://github.com/apache/mahout/commit/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/mahout/blob/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b/core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/common/AbstractJob.java?ref=2cd3ea39e3dc70f1ffcffae92cb0901894bed63b",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "patch": "@@ -612,7 +612,7 @@ public void setConf(Configuration conf) {\n     // If running in an Oozie workflow as a Java action, need to add the\n     // Configuration resource provided by Oozie to this job's config.\n     String oozieActionConfXml = System.getProperty(\"oozie.action.conf.xml\");\n-    if (oozieActionConfXml != null) {\n+    if (oozieActionConfXml != null && conf != null) {\n       conf.addResource(new Path(\"file:///\", oozieActionConfXml));\n       log.info(\"Added Oozie action Configuration resource {0} to the Hadoop Configuration\", oozieActionConfXml);\n     }      ",
                "raw_url": "https://github.com/apache/mahout/raw/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b/core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "sha": "fb18b59ddf4a92a22094c1607dd6576bc23759d7",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-1033 avoid NPE on null conf\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1352837 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/1608f61a2092a021a28b37b1d06fbaedf8049a5a",
        "repo": "mahout",
        "unit_tests": [
            "AbstractJobTest.java"
        ]
    },
    "mahout_2ebfee7": {
        "bug_id": "mahout_2ebfee7",
        "commit": "https://github.com/apache/mahout/commit/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/mahout/blob/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java?ref=2ebfee75b9e21e8819fe8782fe978dc3ad3b0539",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "patch": "@@ -107,7 +107,9 @@ public int run(String[] args) throws IOException {\n     recommenderConf.set(RecommenderMapper.COOCCURRENCE_PATH, cooccurrencePath);\n     recommenderConf.set(RecommenderMapper.ITEMID_INDEX_PATH, itemIDIndexPath);\n     recommenderConf.setInt(RecommenderMapper.RECOMMENDATIONS_PER_USER, recommendationsPerUser);\n-    recommenderConf.set(RecommenderMapper.USERS_FILE, usersFile);\n+    if (usersFile != null) {\n+      recommenderConf.set(RecommenderMapper.USERS_FILE, usersFile);\n+    }\n     recommenderConf.setClass(\"mapred.output.compression.codec\", GzipCodec.class, CompressionCodec.class);\n     JobClient.runJob(recommenderConf);\n     return 0;",
                "raw_url": "https://github.com/apache/mahout/raw/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "sha": "4b7872533acf3dcfc74bad35610c53bc678096b5",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE with no users file\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@929067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/53d3cc8acccf0fea554d0a197f09207b22c1adec",
        "repo": "mahout",
        "unit_tests": [
            "RecommenderJobTest.java"
        ]
    },
    "mahout_41b0a8b": {
        "bug_id": "mahout_41b0a8b",
        "commit": "https://github.com/apache/mahout/commit/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/mahout/blob/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java?ref=41b0a8bc33964f7a1e5e186fd125cc53f1de2b52",
                "deletions": 18,
                "filename": "core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "patch": "@@ -93,17 +93,13 @@ private MahoutDriver() {\n \n   public static void main(String[] args) throws Throwable {\n     ProgramDriver programDriver = new ProgramDriver();\n-    Properties mainClasses = new Properties();\n-    InputStream propsStream = Thread.currentThread()\n-                                    .getContextClassLoader()\n-                                    .getResourceAsStream(\"driver.classes.props\");\n \n-    try {\n-      mainClasses.load(propsStream);\n-    } catch (IOException e) {\n-      //try getting the default one\n-      propsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"driver.classes.default.props\");\n-      mainClasses.load(propsStream);\n+    Properties mainClasses = loadProperties(\"driver.classes.props\");\n+    if (mainClasses == null) {\n+      mainClasses = loadProperties(\"driver.classes.default.props\");\n+    }\n+    if (mainClasses == null) {\n+      throw new IOException(\"Can't load any properties file?\");\n     }\n \n     boolean foundShortName = false;\n@@ -123,15 +119,10 @@ public static void main(String[] args) throws Throwable {\n     }\n     shift(args);\n \n-    InputStream defaultsStream = Thread.currentThread()\n-                                       .getContextClassLoader()\n-                                       .getResourceAsStream(progName + \".props\");\n-\n-    Properties mainProps = new Properties();\n-    if (defaultsStream != null) { // can't find props file, use empty props.\n-      mainProps.load(defaultsStream);\n-    } else {\n+    Properties mainProps = loadProperties(progName + \".props\");\n+    if (mainProps == null) {\n       log.warn(\"No \" + progName + \".props found on classpath, will use command-line arguments only\");\n+      mainProps = new Properties();\n     }\n     Map<String,String[]> argMap = new HashMap<String,String[]>();\n     int i = 0;\n@@ -187,6 +178,24 @@ public static void main(String[] args) throws Throwable {\n     }\n   }\n \n+  private static Properties loadProperties(String resource) throws IOException {\n+    InputStream propsStream =\n+        Thread.currentThread().getContextClassLoader().getResourceAsStream(\"driver.classes.props\");\n+    if (propsStream != null) {\n+      try {\n+        Properties properties = new Properties();\n+        properties.load(propsStream);\n+        return properties;\n+      } catch (IOException ioe) {\n+        log.warn(\"Error while loading {}\", resource, ioe);\n+        // Continue\n+      } finally {\n+        propsStream.close();\n+      }\n+    }\n+    return null;\n+  }\n+\n   private static String[] shift(String[] args) {\n     System.arraycopy(args, 1, args, 0, args.length - 1);\n     args[args.length - 1] = null;",
                "raw_url": "https://github.com/apache/mahout/raw/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "sha": "5cbb81d197f0107776d5e66599545d6b4bc54d86",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-584 Avoid NPE when main props file can't be found\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1059891 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/76da194b25659aab6bc5ac1ae0787376132c950e",
        "repo": "mahout",
        "unit_tests": [
            "MahoutDriverTest.java"
        ]
    },
    "mahout_76da194": {
        "bug_id": "mahout_76da194",
        "commit": "https://github.com/apache/mahout/commit/76da194b25659aab6bc5ac1ae0787376132c950e",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/mahout/blob/76da194b25659aab6bc5ac1ae0787376132c950e/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java?ref=76da194b25659aab6bc5ac1ae0787376132c950e",
                "deletions": 22,
                "filename": "core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "patch": "@@ -18,7 +18,9 @@\n package org.apache.mahout.classifier;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n@@ -32,17 +34,12 @@\n  * See http://en.wikipedia.org/wiki/Confusion_matrix for background\n  */\n public class ConfusionMatrix implements Summarizable {\n-  \n-  private final Collection<String> labels;\n-  \n-  private final Map<String,Integer> labelMap = new HashMap<String,Integer>();\n-  \n+\n+  private final Map<String,Integer> labelMap = new LinkedHashMap<String,Integer>();\n   private final int[][] confusionMatrix;\n-  \n   private String defaultLabel = \"unknown\";\n   \n   public ConfusionMatrix(Collection<String> labels, String defaultLabel) {\n-    this.labels = labels;\n     confusionMatrix = new int[labels.size() + 1][labels.size() + 1];\n     this.defaultLabel = defaultLabel;\n     for (String label : labels) {\n@@ -56,14 +53,14 @@ public ConfusionMatrix(Collection<String> labels, String defaultLabel) {\n   }\n   \n   public Collection<String> getLabels() {\n-    return labels;\n+    return Collections.unmodifiableCollection(labelMap.keySet());\n   }\n   \n   public double getAccuracy(String label) {\n     int labelId = labelMap.get(label);\n     int labelTotal = 0;\n     int correct = 0;\n-    for (int i = 0; i < labels.size(); i++) {\n+    for (int i = 0; i < labelMap.size(); i++) {\n       labelTotal += confusionMatrix[labelId][i];\n       if (i == labelId) {\n         correct = confusionMatrix[labelId][i];\n@@ -80,7 +77,7 @@ public int getCorrect(String label) {\n   public double getTotal(String label) {\n     int labelId = labelMap.get(label);\n     int labelTotal = 0;\n-    for (int i = 0; i < labels.size(); i++) {\n+    for (int i = 0; i < labelMap.size(); i++) {\n       labelTotal += confusionMatrix[labelId][i];\n     }\n     return labelTotal;\n@@ -95,8 +92,8 @@ public void addInstance(String correctLabel, String classifiedLabel) {\n   }\n   \n   public int getCount(String correctLabel, String classifiedLabel) {\n-    Preconditions.checkArgument(!labels.contains(correctLabel)\n-        || labels.contains(classifiedLabel)\n+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n+        || labelMap.containsKey(classifiedLabel)\n         || defaultLabel.equals(classifiedLabel),\n         \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n@@ -105,8 +102,8 @@ public int getCount(String correctLabel, String classifiedLabel) {\n   }\n   \n   public void putCount(String correctLabel, String classifiedLabel, int count) {\n-    Preconditions.checkArgument(!labels.contains(correctLabel)\n-        || labels.contains(classifiedLabel)\n+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n+        || labelMap.containsKey(classifiedLabel)\n         || defaultLabel.equals(classifiedLabel),\n         \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n@@ -123,9 +120,9 @@ public void incrementCount(String correctLabel, String classifiedLabel) {\n   }\n   \n   public ConfusionMatrix merge(ConfusionMatrix b) {\n-    Preconditions.checkArgument(labels.size() == b.getLabels().size(), \"The label sizes do not match\");\n-    for (String correctLabel : this.labels) {\n-      for (String classifiedLabel : this.labels) {\n+    Preconditions.checkArgument(labelMap.size() == b.getLabels().size(), \"The label sizes do not match\");\n+    for (String correctLabel : this.labelMap.keySet()) {\n+      for (String classifiedLabel : this.labelMap.keySet()) {\n         incrementCount(correctLabel, classifiedLabel, b.getCount(correctLabel, classifiedLabel));\n       }\n     }\n@@ -139,16 +136,15 @@ public String summarize() {\n     returnString.append(\"Confusion Matrix\\n\");\n     returnString.append(\"-------------------------------------------------------\").append('\\n');\n     \n-    for (String correctLabel : this.labels) {\n-      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5))\n-          .append('\\t');\n+    for (String correctLabel : this.labelMap.keySet()) {\n+      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5)).append('\\t');\n     }\n     \n     returnString.append(\"<--Classified as\").append('\\n');\n     \n-    for (String correctLabel : this.labels) {\n+    for (String correctLabel : this.labelMap.keySet()) {\n       int labelTotal = 0;\n-      for (String classifiedLabel : this.labels) {\n+      for (String classifiedLabel : this.labelMap.keySet()) {\n         returnString.append(\n           StringUtils.rightPad(Integer.toString(getCount(correctLabel, classifiedLabel)), 5)).append('\\t');\n         labelTotal += getCount(correctLabel, classifiedLabel);",
                "raw_url": "https://github.com/apache/mahout/raw/76da194b25659aab6bc5ac1ae0787376132c950e/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "sha": "e332bec6315d888febab789719bc96a7acfe4a31",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-569 Fix a certain NPE because labels/labelsMap go out of sync somehow\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1059847 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/5baba6ec444157370bc9c999d3b8f374d9d7aea1",
        "repo": "mahout",
        "unit_tests": [
            "ConfusionMatrixTest.java"
        ]
    },
    "mahout_88c5af9": {
        "bug_id": "mahout_88c5af9",
        "commit": "https://github.com/apache/mahout/commit/88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/driver.classes.props",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/conf/driver.classes.props?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
                "deletions": 0,
                "filename": "conf/driver.classes.props",
                "patch": "@@ -10,6 +10,7 @@ org.apache.mahout.clustering.dirichlet.DirichletDriver = dirichlet : Dirichlet C\n org.apache.mahout.clustering.meanshift.MeanShiftCanopyDriver = meanshift : Mean Shift clustering\n org.apache.mahout.clustering.canopy.CanopyDriver = canopy : Canopy clustering\n org.apache.mahout.math.hadoop.TransposeJob = transpose : Take the transpose of a matrix\n+org.apache.mahout.math.hadoop.MatrixMultiplicationJob = matrixmult : Take the produc of two matrices\n org.apache.mahout.utils.vectors.lucene.Driver = lucene.vector : Generate Vectors from a Lucene index\n org.apache.mahout.text.SequenceFilesFromDirectory = seqdirectory : Generate sequence files (of Text) from a directory\n org.apache.mahout.text.SparseVectorsFromSequenceFiles = seq2sparse: Sparse Vector generation from Text sequence files",
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/driver.classes.props",
                "sha": "1472a9ec2f3639053d9de0778bff81f6e2ba7a9f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/matrixmult.props",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/conf/matrixmult.props?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
                "deletions": 0,
                "filename": "conf/matrixmult.props",
                "patch": "@@ -0,0 +1,6 @@\n+#nra|numRowsA = \n+#nca|numColsA =\n+#nrb|numRowsB = \n+#ncb|numColsB =\n+#ia|inputPathA = \n+#ib|inputPathB = ",
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/matrixmult.props",
                "sha": "95218b3f19959062b1004ccf1a4283c47f1aca88",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "patch": "@@ -79,6 +79,9 @@ public int run(String[] strings) throws Exception {\n     addOption(\"inputPathB\", \"ib\", \"Path to the second input matrix\");\n \n     Map<String, String> argMap = parseArguments(strings);\n+    if(argMap == null) {\n+      return -1;\n+    }\n \n     DistributedRowMatrix a = new DistributedRowMatrix(argMap.get(\"--inputPathA\"),\n                                                       argMap.get(\"--tempDir\"),",
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "sha": "cb2c4e293a56b45b2f37a4a6be4971e5ce728b58",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "patch": "@@ -17,7 +17,6 @@\n \n package org.apache.mahout.math.hadoop.decomposer;\n \n-import org.apache.commons.cli2.Option;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n@@ -74,18 +73,28 @@ public int run(String[] strings) throws Exception {\n     int numCols = Integer.parseInt(parsedArgs.get(\"--numCols\"));\n     boolean isSymmetric = Boolean.parseBoolean(parsedArgs.get(\"--symmetric\"));\n     int desiredRank = Integer.parseInt(parsedArgs.get(\"--rank\"));\n+    return run(inputPathString, outputTmpPathString, numRows, numCols, isSymmetric, desiredRank);\n+  }\n+\n+  public int run(String inputPathString,\n+                 String outputTmpPathString,\n+                 int numRows,\n+                 int numCols,\n+                 boolean isSymmetric,\n+                 int desiredRank) throws Exception {\n+    Configuration originalConfig = getConf();\n     Matrix eigenVectors = new DenseMatrix(desiredRank, numCols);\n     List<Double> eigenValues = new ArrayList<Double>();\n     String outputEigenVectorPath =  originalConfig.get(\"mapred.output.dir\");\n-    \n+\n     DistributedRowMatrix matrix = new DistributedRowMatrix(inputPathString,\n                                                            outputTmpPathString,\n                                                            numRows,\n                                                            numCols);\n     matrix.configure(new JobConf(originalConfig));\n     solve(matrix, desiredRank, eigenVectors, eigenValues, isSymmetric);\n \n-    serializeOutput(eigenVectors, eigenValues, outputEigenVectorPath);  \n+    serializeOutput(eigenVectors, eigenValues, outputEigenVectorPath);\n     return 0;\n   }\n ",
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "sha": "293e776ecda294fd7cd24dc3f8aced4582d0a849",
                "status": "modified"
            }
        ],
        "message": "Add MatrixMultiplication job back to the possibly choices of the mahout driver, and stop throwing NPE upon $MAHOUT_HOME/bin/mahout (svd|matrixmult) -h\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@953484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/964db4a8ae51fb0d896dcd03836c6056ff317898",
        "repo": "mahout",
        "unit_tests": [
            "TestDistributedLanczosSolver.java"
        ]
    },
    "mahout_b7ef42c": {
        "bug_id": "mahout_b7ef42c",
        "commit": "https://github.com/apache/mahout/commit/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/mahout/blob/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java?ref=b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3",
                "deletions": 0,
                "filename": "utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "patch": "@@ -136,6 +136,7 @@ public int run(String[] args) throws Exception {\n     if (hasOption(NUM_WORDS_OPTION)) {\n       setNumTopFeatures(Integer.parseInt(getOption(NUM_WORDS_OPTION)));\n     }\n+    init();\n     printClusters(null);\n     return 0;\n   }",
                "raw_url": "https://github.com/apache/mahout/raw/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "sha": "3888e731852c9329e155522db2c23c16f79b454a",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-167 MAHOUT-427: Fixed NPE in ClusterDumper due to missing call to init() in ClusterDumper.run(String[]);\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@967309 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/b64eb1cc7459f94a0140304e658e6faf97191b7f",
        "repo": "mahout",
        "unit_tests": [
            "TestClusterDumper.java"
        ]
    },
    "mahout_ff31f37": {
        "bug_id": "mahout_ff31f37",
        "commit": "https://github.com/apache/mahout/commit/ff31f377268456d212763b9c60d9205acd3ab1ba",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/mahout/blob/ff31f377268456d212763b9c60d9205acd3ab1ba/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java?ref=ff31f377268456d212763b9c60d9205acd3ab1ba",
                "deletions": 1,
                "filename": "examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "patch": "@@ -114,7 +114,7 @@ public static void main(String[] args) throws IOException {\n       output.printf(Locale.ENGLISH, \"%d\\n\", lmp.getNumFeatures());\n       output.printf(Locale.ENGLISH, \"%s ~ \", lmp.getTargetVariable());\n       String sep = \"\";\n-      for (String v : csv.getPredictors()) {\n+      for (String v : csv.getTraceDictionary().keySet()) {\n         double weight = predictorWeight(lr, 0, csv, v);\n         if (weight != 0) {\n           output.printf(Locale.ENGLISH, \"%s%.3f*%s\", sep, weight, v);",
                "raw_url": "https://github.com/apache/mahout/raw/ff31f377268456d212763b9c60d9205acd3ab1ba/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "sha": "05fe973bba388b482002e5155f8c4d9127405e61",
                "status": "modified"
            }
        ],
        "message": "MAHOUT-674 fix NPE by using right map key\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1094764 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mahout/commit/8049eff6dd48dc2621219c51e1eef97dd62165c8",
        "repo": "mahout",
        "unit_tests": [
            "TrainLogisticTest.java"
        ]
    }
}