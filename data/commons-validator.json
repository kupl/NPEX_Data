{
    "commons-validator_31c6291": {
        "bug_id": "commons-validator_31c6291",
        "commit": "https://github.com/apache/commons-validator/commit/31c6291b50b2e7db420081838decde25b313c214",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-validator/blob/31c6291b50b2e7db420081838decde25b313c214/src/share/org/apache/commons/validator/ValidatorResources.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-validator/contents/src/share/org/apache/commons/validator/ValidatorResources.java?ref=31c6291b50b2e7db420081838decde25b313c214",
                "deletions": 7,
                "filename": "src/share/org/apache/commons/validator/ValidatorResources.java",
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/ValidatorResources.java,v 1.22 2003/05/29 03:34:35 dgraham Exp $\n- * $Revision: 1.22 $\n- * $Date: 2003/05/29 03:34:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/ValidatorResources.java,v 1.23 2003/06/05 01:17:43 dgraham Exp $\n+ * $Revision: 1.23 $\n+ * $Date: 2003/06/05 01:17:43 $\n  *\n  * ====================================================================\n  *\n@@ -92,7 +92,7 @@\n  *\n  * @author David Winterfeldt\n  * @author David Graham\n- * @version $Revision: 1.22 $ $Date: 2003/05/29 03:34:35 $\n+ * @version $Revision: 1.23 $ $Date: 2003/06/05 01:17:43 $\n  */\n public class ValidatorResources implements Serializable {\n \n@@ -330,7 +330,8 @@ private String buildLocale(String lang, String country, String variant) {\n      * @deprecated Use getForm() instead.\n      */\n     public Form get(Locale locale, Object formKey) {\n-        return this.getForm(locale, formKey.toString());\n+        String key = (formKey == null) ? null : formKey.toString();\n+        return this.getForm(locale, key);\n     }\n     \n     /**\n@@ -369,8 +370,9 @@ public Form get(\n         String country,\n         String variant,\n         Object formKey) {\n-\n-        return this.getForm(language, country, variant, formKey.toString());\n+            \n+\t\tString key = (formKey == null) ? null : formKey.toString();\n+\t\treturn this.getForm(language, country, variant, key);\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/commons-validator/raw/31c6291b50b2e7db420081838decde25b313c214/src/share/org/apache/commons/validator/ValidatorResources.java",
                "sha": "bb483903c7a08be0d9134928261540f15d22cdac",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in deprecated get() methods for PR# 20432.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140014 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-validator/commit/082cb92ef2c7e6231e06498be75f675074f00b8a",
        "repo": "commons-validator",
        "unit_tests": [
            "ValidatorResourcesTest.java"
        ]
    },
    "commons-validator_32f010d": {
        "bug_id": "commons-validator_32f010d",
        "commit": "https://github.com/apache/commons-validator/commit/32f010d15a450a3c119719eef09dd1865c55bc8a",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/commons-validator/blob/32f010d15a450a3c119719eef09dd1865c55bc8a/src/share/org/apache/commons/validator/Field.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/commons-validator/contents/src/share/org/apache/commons/validator/Field.java?ref=32f010d15a450a3c119719eef09dd1865c55bc8a",
                "deletions": 26,
                "filename": "src/share/org/apache/commons/validator/Field.java",
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/Field.java,v 1.18 2003/06/08 06:03:16 dgraham Exp $\n- * $Revision: 1.18 $\n- * $Date: 2003/06/08 06:03:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/Field.java,v 1.19 2003/06/12 01:04:11 dgraham Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2003/06/12 01:04:11 $\n  *\n  * ====================================================================\n  *\n@@ -83,7 +83,7 @@\n  *\n  * @author David Winterfeldt\n  * @author David Graham\n- * @version $Revision: 1.18 $ $Date: 2003/06/08 06:03:16 $\n+ * @version $Revision: 1.19 $ $Date: 2003/06/12 01:04:11 $\n  * @see org.apache.commons.validator.Form\n  */\n public class Field implements Cloneable, Serializable {\n@@ -701,32 +701,37 @@ public List getDependencyList() {\n      * Creates and returns a copy of this object.\n      */\n     public Object clone() {\n+        Field field = null;\n         try {\n-            Field field = (Field) super.clone();\n-            \n-            field.args = new Map[this.args.length];\n-            for (int i = 0; i < this.args.length; i++) {\n-                Map argMap = new HashMap(this.args[i]);\n-                Iterator iter = argMap.keySet().iterator();\n-                while (iter.hasNext()) {\n-                    String validatorName = (String) iter.next();\n-                    Arg arg = (Arg) argMap.get(validatorName);\n-                    argMap.put(validatorName, arg.clone());\n-                }\n-                field.args[i] = argMap;\n-            }\n-\n-            field.hVars = ValidatorUtils.copyFastHashMap(hVars);\n-            field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);\n-            field.hArg0 = ValidatorUtils.copyFastHashMap(hArg0);\n-            field.hArg1 = ValidatorUtils.copyFastHashMap(hArg1);\n-            field.hArg2 = ValidatorUtils.copyFastHashMap(hArg2);\n-            field.hArg3 = ValidatorUtils.copyFastHashMap(hArg3);\n-\n-            return field;\n+            field = (Field) super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new InternalError(e.toString());\n         }\n+\n+        field.args = new Map[this.args.length];\n+        for (int i = 0; i < this.args.length; i++) {\n+            if (this.args[i] == null) {\n+                continue;\n+            }\n+\n+            Map argMap = new HashMap(this.args[i]);\n+            Iterator iter = argMap.keySet().iterator();\n+            while (iter.hasNext()) {\n+                String validatorName = (String) iter.next();\n+                Arg arg = (Arg) argMap.get(validatorName);\n+                argMap.put(validatorName, arg.clone());\n+            }\n+            field.args[i] = argMap;\n+        }\n+\n+        field.hVars = ValidatorUtils.copyFastHashMap(hVars);\n+        field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);\n+        field.hArg0 = ValidatorUtils.copyFastHashMap(hArg0);\n+        field.hArg1 = ValidatorUtils.copyFastHashMap(hArg1);\n+        field.hArg2 = ValidatorUtils.copyFastHashMap(hArg2);\n+        field.hArg3 = ValidatorUtils.copyFastHashMap(hArg3);\n+\n+        return field;\n     }    \n \n     /**",
                "raw_url": "https://github.com/apache/commons-validator/raw/32f010d15a450a3c119719eef09dd1865c55bc8a/src/share/org/apache/commons/validator/Field.java",
                "sha": "70c9f68d7a85ed6d69c6cf60ccd9cc7804810b36",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in clone().\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@140028 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-validator/commit/7585bea24bffed95b10fa83d39495db9cbc2624b",
        "repo": "commons-validator",
        "unit_tests": [
            "FieldTest.java"
        ]
    },
    "commons-validator_4ebe542": {
        "bug_id": "commons-validator_4ebe542",
        "commit": "https://github.com/apache/commons-validator/commit/4ebe54236b7548f7c9b397b97f8012ec991e7cf2",
        "file": [
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/commons-validator/blob/4ebe54236b7548f7c9b397b97f8012ec991e7cf2/src/share/org/apache/commons/validator/UrlValidator.java",
                "changes": 105,
                "contents_url": "https://api.github.com/repos/apache/commons-validator/contents/src/share/org/apache/commons/validator/UrlValidator.java?ref=4ebe54236b7548f7c9b397b97f8012ec991e7cf2",
                "deletions": 44,
                "filename": "src/share/org/apache/commons/validator/UrlValidator.java",
                "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/UrlValidator.java,v 1.12 2003/05/03 20:53:59 dgraham Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/05/03 20:53:59 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/UrlValidator.java,v 1.13 2003/05/03 21:14:51 dgraham Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/05/03 21:14:51 $\n  *\n  * ====================================================================\n  *\n@@ -114,7 +114,7 @@\n  *\n  * @author Robert Leland\n  * @author David Graham\n- * @version $Revision: 1.12 $ $Date: 2003/05/03 20:53:59 $\n+ * @version $Revision: 1.13 $ $Date: 2003/05/03 21:14:51 $\n  */\n public class UrlValidator implements Serializable {\n     \n@@ -217,7 +217,7 @@\n     /**\n      * The set of schemes that are allowed to be in a URL.\n      */\n-\tprivate Set allowedSchemes = null;\n+\tprivate Set allowedSchemes = new HashSet();\n     \n     /**\n      * If no schemes are provided, default to this set.\n@@ -271,51 +271,50 @@ public UrlValidator(String[] schemes, int options) {\n             schemes = this.defaultSchemes;\n         }\n         \n-    \tthis.allowedSchemes = new HashSet(Arrays.asList(schemes));\n+    \tthis.allowedSchemes.addAll(Arrays.asList(schemes));\n \t}\n \n \t/**\n \t * <p>Checks if a field has a valid url address.</p>\n \t *\n-\t * @param value The value validation is being performed on.\n+\t * @param value The value validation is being performed on.  A <code>null</code>\n+     * value is considered invalid.\n \t * @return true if the url is valid.\n \t */\n \tpublic boolean isValid(String value) {\n-\t\ttry {\n-\t\t\tPerl5Util matchUrlPat = new Perl5Util();\n-\t\t\tPerl5Util matchAsciiPat = new Perl5Util();\n+\t\tif (value == null) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!matchAsciiPat.match(LEGAL_ASCII_PATTERN, value)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tPerl5Util matchUrlPat = new Perl5Util();\n+\t\tPerl5Util matchAsciiPat = new Perl5Util();\n \n-\t\t\t// Check the whole url address structure\n-\t\t\tif (!matchUrlPat.match(URL_PATTERN, value)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!matchAsciiPat.match(LEGAL_ASCII_PATTERN, value)) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!isValidScheme(matchUrlPat.group(PARSE_URL_SCHEME))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t// Check the whole url address structure\n+\t\tif (!matchUrlPat.match(URL_PATTERN, value)) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!isValidAuthority(matchUrlPat.group(PARSE_URL_AUTHORITY))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!isValidScheme(matchUrlPat.group(PARSE_URL_SCHEME))) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!isValidPath(matchUrlPat.group(PARSE_URL_PATH))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!isValidAuthority(matchUrlPat.group(PARSE_URL_AUTHORITY))) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!isValidQuery(matchUrlPat.group(PARSE_URL_QUERY))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!isValidPath(matchUrlPat.group(PARSE_URL_PATH))) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t\tif (!isValidFragment(matchUrlPat.group(PARSE_URL_FRAGMENT))) {\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\tif (!isValidQuery(matchUrlPat.group(PARSE_URL_QUERY))) {\n+\t\t\treturn false;\n+\t\t}\n \n-\t\t} catch (Exception e) {\n-\t\t\t// TODO Do we need to catch Exception?\n+\t\tif (!isValidFragment(matchUrlPat.group(PARSE_URL_FRAGMENT))) {\n \t\t\treturn false;\n \t\t}\n \n@@ -325,26 +324,40 @@ public boolean isValid(String value) {\n \t/**\n \t * Validate scheme. If schemes[] was initialized to a non null,\n \t * then only those scheme's are allowed.  Note this is slightly different\n-\t * than for the Constructor.\n-\t * @param scheme The scheme to validate.\n-\t * @return   true is valid.\n+\t * than for the constructor.\n+\t * @param scheme The scheme to validate.  A <code>null</code> value is considered\n+     * invalid.\n+\t * @return true if valid.\n \t */\n \tprotected boolean isValidScheme(String scheme) {\n+\t\tif (scheme == null) {\n+\t\t\treturn false;\n+\t\t}\n+        \n \t\tPerl5Util schemeMatcher = new Perl5Util();\n-\t\tboolean bValid = schemeMatcher.match(SCHEME_PATTERN, scheme);\n-\t\tif (bValid) {\n-\t\t\tif (allowedSchemes != null) {\n-\t\t\t\tbValid = allowedSchemes.contains(scheme);\n+\t\tif (!schemeMatcher.match(SCHEME_PATTERN, scheme)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (this.options.isOff(ALLOW_ALL_SCHEMES)) {\n+\n+\t\t\tif (!this.allowedSchemes.contains(scheme)) {\n+\t\t\t\treturn false;\n \t\t\t}\n \t\t}\n-\t\treturn bValid;\n+\n+\t\treturn true;\n \t}\n \n \t/**\n \t * Returns true if the authority is properly formatted.  An authority is the combination\n-\t * of hostname and port.\n+\t * of hostname and port.  A <code>null</code> authority value is considered invalid.\n \t */\n \tprotected boolean isValidAuthority(String authority) {\n+\t\tif (authority == null) {\n+\t\t\treturn false;\n+\t\t}\n+        \n \t\tPerl5Util authorityMatcher = new Perl5Util();\n \t\tPerl5Util matchIPV4Pat = new Perl5Util();\n \t\t\n@@ -440,9 +453,13 @@ protected boolean isValidAuthority(String authority) {\n \t}\n \n     /**\n-     * Returns true if the path is valid.\n+     * Returns true if the path is valid.  A <code>null</code> value is considered invalid.\n      */\n \tprotected boolean isValidPath(String path) {\n+\t\tif (path == null) {\n+\t\t\treturn false;\n+\t\t}\n+        \n \t\tPerl5Util pathMatcher = new Perl5Util();\n \n \t\tif (!pathMatcher.match(PATH_PATTERN, path)) {",
                "raw_url": "https://github.com/apache/commons-validator/raw/4ebe54236b7548f7c9b397b97f8012ec991e7cf2/src/share/org/apache/commons/validator/UrlValidator.java",
                "sha": "8a6fb2e20518260e773a8f079aeac6482e956409",
                "status": "modified"
            }
        ],
        "message": "Removed catch Exception block.  This was masking several\nNPEs that were being relied upon to indicate invalid urls.  By\nremoving exception handling from the normal program flow I\nimproved test performance by 33%.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/validator/trunk@139960 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-validator/commit/674d8a5069d08354309c29b88312159b561f31d8",
        "repo": "commons-validator",
        "unit_tests": [
            "UrlValidatorTest.java"
        ]
    }
}