{
    "pulsar_271c6ee": {
        "bug_id": "pulsar_271c6ee",
        "commit": "https://github.com/apache/pulsar/commit/271c6ee56a007506020ecf317c88df95e4511714",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/pulsar/blob/271c6ee56a007506020ecf317c88df95e4511714/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java?ref=271c6ee56a007506020ecf317c88df95e4511714",
                "deletions": 9,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "patch": "@@ -160,15 +160,6 @@\n         this.readCompacted = conf.isReadCompacted();\n         this.subscriptionInitialPosition = conf.getSubscriptionInitialPosition();\n \n-        TopicName topicName = TopicName.get(topic);\n-        if (topicName.isPersistent()) {\n-            this.acknowledgmentsGroupingTracker =\n-                new PersistentAcknowledgmentsGroupingTracker(this, conf, client.eventLoopGroup());\n-        } else {\n-            this.acknowledgmentsGroupingTracker =\n-                NonPersistentAcknowledgmentGroupingTracker.of();\n-        }\n-\n         if (client.getConfiguration().getStatsIntervalSeconds() > 0) {\n             stats = new ConsumerStatsRecorderImpl(client, conf, this);\n         } else {\n@@ -203,6 +194,15 @@\n             new Backoff(100, TimeUnit.MILLISECONDS, 60, TimeUnit.SECONDS, 0, TimeUnit.MILLISECONDS),\n             this);\n \n+        TopicName topicName = TopicName.get(topic);\n+        if (topicName.isPersistent()) {\n+            this.acknowledgmentsGroupingTracker =\n+                new PersistentAcknowledgmentsGroupingTracker(this, conf, client.eventLoopGroup());\n+        } else {\n+            this.acknowledgmentsGroupingTracker =\n+                NonPersistentAcknowledgmentGroupingTracker.of();\n+        }\n+\n         grabCnx();\n     }\n ",
                "raw_url": "https://github.com/apache/pulsar/raw/271c6ee56a007506020ecf317c88df95e4511714/pulsar-client/src/main/java/org/apache/pulsar/client/impl/ConsumerImpl.java",
                "sha": "da04534d942bafd55f2d99372025e56145e65842",
                "status": "modified"
            }
        ],
        "message": "Fixed initialization order of acknowledgmentsGroupingTracker in ConsumerImpl (#2399)\n\n### Motivation\r\n\r\nWith delayed acks enabled (the default), there is a potential race condition that lead to a NPE:\r\n\r\n```\r\njava.lang.NullPointerException\r\n    at org.apache.pulsar.client.impl.ConsumerImpl.getClientCnx(ConsumerImpl.java:1446)\r\n    at org.apache.pulsar.client.impl.PersistentAcknowledgmentsGroupingTracker.flush(PersistentAcknowledgmentsGroupingTracker.java:154)\r\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n    ...\r\n```\r\n\r\nThe reason is that the delayed ack commit task gets scheduled (eg: in 100ms) and might be executed before the the main thread has finished initializing the `ConsumerImpl` instance.\r\n\r\n### Modifications\r\n\r\nReordered the initialization in `ConsumerImpl` constructor to make sure `connectionHandler` is already set when we create the `PersistentAcknowledgmentsGroupingTracker` instance.",
        "parent": "https://github.com/apache/pulsar/commit/90d86c0fe31fd614c9aa9037f900305661ece879",
        "repo": "pulsar",
        "unit_tests": [
            "ConsumerImplTest.java"
        ]
    },
    "pulsar_46f3829": {
        "bug_id": "pulsar_46f3829",
        "commit": "https://github.com/apache/pulsar/commit/46f3829b1fce7a633ea41834760c42ad754af8ce",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pulsar/blob/46f3829b1fce7a633ea41834760c42ad754af8ce/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java?ref=46f3829b1fce7a633ea41834760c42ad754af8ce",
                "deletions": 0,
                "filename": "pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "patch": "@@ -582,6 +582,10 @@ private void inferMissingArguments(FunctionConfig functionConfig) {\n         }\n \n         private void inferMissingFunctionName(FunctionConfig functionConfig) {\n+            if (isNull(functionConfig.getClassName())) {\n+                throw new IllegalArgumentException(\"You must specify a class name for the function\");\n+            }\n+\n             String [] domains = functionConfig.getClassName().split(\"\\\\.\");\n             if (domains.length == 0) {\n                 functionConfig.setName(functionConfig.getClassName());",
                "raw_url": "https://github.com/apache/pulsar/raw/46f3829b1fce7a633ea41834760c42ad754af8ce/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java",
                "sha": "65a1db2e3c7781c2b40ebb70c3db62af3d07f6d0",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in Pulsar Functions CLI  (#1776)\n\nAs it stands, an NPE is thrown if you try to `create` or `localrun` a function with neither a class name nor a function name supplied, as the CLI will attempt to infer a function name from a class name that is `null`.",
        "parent": "https://github.com/apache/pulsar/commit/d7ab96d3ecb84e3e1e8ff83a1d6a9bceab38eaf6",
        "repo": "pulsar",
        "unit_tests": [
            "CmdFunctionsTest.java"
        ]
    },
    "pulsar_52659ae": {
        "bug_id": "pulsar_52659ae",
        "commit": "https://github.com/apache/pulsar/commit/52659ae7680db4f9d2bdc6468dcc3b135a915be5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pulsar/blob/52659ae7680db4f9d2bdc6468dcc3b135a915be5/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java?ref=52659ae7680db4f9d2bdc6468dcc3b135a915be5",
                "deletions": 1,
                "filename": "pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
                "patch": "@@ -100,7 +100,7 @@ public void write(Record<byte[]> record) {\n     }\n \n     public KeyValue<String, byte[]> extractKeyValue(Record<byte[]> record) {\n-        String key = record.getKey().orElseGet(null);\n+        String key = record.getKey().orElse(\"\");\n         return new KeyValue<>(key, record.getValue());\n     }\n ",
                "raw_url": "https://github.com/apache/pulsar/raw/52659ae7680db4f9d2bdc6468dcc3b135a915be5/pulsar-io/elastic-search/src/main/java/org/apache/pulsar/io/elasticsearch/ElasticSearchSink.java",
                "sha": "9552541be2412c057e5c3cfc1ef358aef27da391",
                "status": "modified"
            }
        ],
        "message": "[Issue 3896] [pulsar-io] Fix NPE in ElasticSearchSink (#3899)\n\n* Fix NPE in ElasticSearchSink.\r\n\r\n* Init by an empty string",
        "parent": "https://github.com/apache/pulsar/commit/fd8aa4fadb0702758e9086411689e4dbe67115b6",
        "repo": "pulsar",
        "unit_tests": [
            "ElasticSearchSinkTests.java"
        ]
    },
    "pulsar_5766844": {
        "bug_id": "pulsar_5766844",
        "commit": "https://github.com/apache/pulsar/commit/57668440104fb56ce932287190f5203e2073bd62",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pulsar/blob/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java?ref=57668440104fb56ce932287190f5203e2073bd62",
                "deletions": 4,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
                "patch": "@@ -18,11 +18,8 @@\n  */\n package org.apache.pulsar.functions.instance;\n \n-import static com.google.common.base.Preconditions.checkState;\n-\n import com.google.gson.Gson;\n import com.google.gson.reflect.TypeToken;\n-import java.nio.ByteBuffer;\n import lombok.Getter;\n import lombok.Setter;\n import org.apache.commons.lang.StringUtils;\n@@ -36,22 +33,26 @@\n import org.apache.pulsar.functions.api.Context;\n import org.apache.pulsar.functions.api.SerDe;\n import org.apache.pulsar.functions.api.utils.DefaultSerDe;\n-import org.apache.pulsar.functions.proto.InstanceCommunication.MetricsData;\n import org.apache.pulsar.functions.instance.state.StateContextImpl;\n+import org.apache.pulsar.functions.proto.InstanceCommunication.MetricsData;\n import org.apache.pulsar.functions.utils.Reflections;\n import org.slf4j.Logger;\n \n import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.LinkedList;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.TimeUnit;\n \n+import static com.google.common.base.Preconditions.checkState;\n+\n /**\n  * This class implements the Context interface exposed to the user.\n  */\n@@ -141,6 +142,9 @@ public String getCurrentMessageTopicName() {\n \n     @Override\n     public Collection<String> getInputTopics() {\n+        if (inputConsumer == null) {\n+            return new LinkedList<>();\n+        }\n         if (inputConsumer instanceof MultiTopicsConsumerImpl) {\n             return ((MultiTopicsConsumerImpl) inputConsumer).getTopics();\n         } else {\n@@ -302,6 +306,10 @@ public ByteBuffer getState(String key) {\n     //TODO remove topic argument\n     @Override\n     public CompletableFuture<Void> ack(byte[] messageId) {\n+        // if inputConsumer is null, then ack is a no-op\n+        if (inputConsumer == null) {\n+            return CompletableFuture.completedFuture(null);\n+        }\n         MessageId actualMessageId = null;\n         try {\n             actualMessageId = MessageId.fromByteArray(messageId);",
                "raw_url": "https://github.com/apache/pulsar/raw/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java",
                "sha": "e2887bf37b65ebda2d7a282d6ea1ba7f4e1a6ed6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java?ref=57668440104fb56ce932287190f5203e2073bd62",
                "deletions": 4,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java",
                "patch": "@@ -21,6 +21,7 @@\n import lombok.AccessLevel;\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.pulsar.client.api.Consumer;\n import org.apache.pulsar.client.api.MessageId;\n import org.apache.pulsar.client.api.PulsarClient;\n import org.apache.pulsar.functions.api.Function;\n@@ -51,13 +52,13 @@ public JavaInstance(InstanceConfig config, Object userClassObject,\n         // TODO: cache logger instances by functions?\n         Logger instanceLog = LoggerFactory.getLogger(\"function-\" + config.getFunctionDetails().getName());\n \n+        Consumer consumer = null;\n         if (source instanceof PulsarSource) {\n-            this.context = new ContextImpl(config, instanceLog, pulsarClient, clsLoader,\n-                    ((PulsarSource) source).getInputConsumer());\n-        } else {\n-            this.context = null;\n+            consumer = ((PulsarSource) source).getInputConsumer();\n         }\n \n+        this.context = new ContextImpl(config, instanceLog, pulsarClient, clsLoader, consumer);\n+\n         // create the functions\n         if (userClassObject instanceof Function) {\n             this.function = (Function) userClassObject;",
                "raw_url": "https://github.com/apache/pulsar/raw/57668440104fb56ce932287190f5203e2073bd62/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstance.java",
                "sha": "3bd563ebf5a22328a5f48399039671070bf77171",
                "status": "modified"
            }
        ],
        "message": "fix bug in concerning ContextImpl (#2052)\n\nNPE thrown when submitting a source because context is null",
        "parent": "https://github.com/apache/pulsar/commit/124dfafeb3ab92f55ce5fb2de4220f3ea57a803c",
        "repo": "pulsar",
        "unit_tests": [
            "JavaInstanceTest.java"
        ]
    },
    "pulsar_64d2b18": {
        "bug_id": "pulsar_64d2b18",
        "commit": "https://github.com/apache/pulsar/commit/64d2b18d2d511cb0a498d7d618fc6861c1064cee",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/64d2b18d2d511cb0a498d7d618fc6861c1064cee/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java?ref=64d2b18d2d511cb0a498d7d618fc6861c1064cee",
                "deletions": 2,
                "filename": "pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "patch": "@@ -57,7 +57,7 @@\n \n     private final String consumerName;\n     private final Consumer consumer;\n-    private WorkerConfig workerConfig;\n+    private final WorkerConfig workerConfig;\n     private PulsarAdmin pulsarAdminClient;\n     private final CompletableFuture<Void> firstConsumerEventFuture;\n     private final AtomicBoolean isLeader = new AtomicBoolean();\n@@ -71,6 +71,7 @@\n \n     MembershipManager(WorkerConfig workerConfig, PulsarClient client)\n             throws PulsarClientException {\n+        this.workerConfig = workerConfig;\n         consumerName = String.format(\n             \"%s:%s:%d\",\n             workerConfig.getWorkerId(),\n@@ -90,7 +91,6 @@\n                 .setConsumerName(consumerName)\n                 .setConsumerEventListener(this)\n         );\n-        this.workerConfig = workerConfig;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/pulsar/raw/64d2b18d2d511cb0a498d7d618fc6861c1064cee/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java",
                "sha": "9723c1aab2025f2cfa503b1d785ac98f7ac397df",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on serializing MembershipManager (#235)\n\n\r\n\r\n*Problem*\r\n\r\nIf we assign workerConfig after setting consumer listener, when `ConsumerStats` tries to dump the consumer configuration,\r\nit will throw NPE.\r\n\r\n*Solution*\r\n\r\nhttps://github.com/apache/incubator-pulsar/pull/1260 tried to ignore listener fields for json serialization\r\n\r\nthis change focus on avoiding NPE on serializing MembershipManager",
        "parent": "https://github.com/apache/pulsar/commit/fe6747b002aae29a5622c7d3b8d4edcc2bfa3d48",
        "repo": "pulsar",
        "unit_tests": [
            "MembershipManagerTest.java"
        ]
    },
    "pulsar_8335d7c": {
        "bug_id": "pulsar_8335d7c",
        "commit": "https://github.com/apache/pulsar/commit/8335d7cb0c85ebcd054b80f5da91cbc419d25121",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/8335d7cb0c85ebcd054b80f5da91cbc419d25121/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java?ref=8335d7cb0c85ebcd054b80f5da91cbc419d25121",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "patch": "@@ -542,7 +542,9 @@ public void closeFailed(ManagedLedgerException exception, Object ctx) {\n                     disconnectFuture.complete(null);\n                 }).exceptionally(exception -> {\n                     IS_FENCED_UPDATER.set(this, FALSE);\n-                    dispatcher.reset();\n+                    if (dispatcher != null) {\n+                        dispatcher.reset();\n+                    }\n                     log.error(\"[{}][{}] Error disconnecting consumers from subscription\", topicName, subName,\n                             exception);\n                     disconnectFuture.completeExceptionally(exception);",
                "raw_url": "https://github.com/apache/pulsar/raw/8335d7cb0c85ebcd054b80f5da91cbc419d25121/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentSubscription.java",
                "sha": "65f5f9763449c27712d6dc8a6e524979158e7a9d",
                "status": "modified"
            }
        ],
        "message": "Fix: NPE when cursor failed to close empty subscription (#1662)",
        "parent": "https://github.com/apache/pulsar/commit/02eff26259b43d3fac646d80f8256f9308baba1d",
        "repo": "pulsar",
        "unit_tests": [
            "PersistentSubscriptionTest.java"
        ]
    },
    "pulsar_84a519f": {
        "bug_id": "pulsar_84a519f",
        "commit": "https://github.com/apache/pulsar/commit/84a519fa7389c3d2609d7445c72c2b6750c607f0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pulsar/blob/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java?ref=84a519fa7389c3d2609d7445c72c2b6750c607f0",
                "deletions": 2,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "patch": "@@ -99,6 +99,7 @@\n import org.apache.pulsar.broker.service.BrokerServiceException.ServerMetadataException;\n import org.apache.pulsar.broker.service.BrokerServiceException.ServiceUnitNotReadyException;\n import org.apache.pulsar.broker.service.nonpersistent.NonPersistentTopic;\n+import org.apache.pulsar.broker.service.persistent.DispatchRateLimiter;\n import org.apache.pulsar.broker.service.persistent.PersistentDispatcherMultipleConsumers;\n import org.apache.pulsar.broker.service.persistent.PersistentTopic;\n import org.apache.pulsar.broker.stats.ClusterReplicationMetrics;\n@@ -1372,8 +1373,8 @@ private void updateSubscriptionMessageDispatchRate() {\n             forEachTopic(topic -> {\n                 topic.getSubscriptions().forEach((subName, persistentSubscription) -> {\n                     Dispatcher dispatcher = persistentSubscription.getDispatcher();\n-                    if (dispatcher.getRateLimiter().isPresent()) {\n-                        dispatcher.getRateLimiter().get().updateDispatchRate();\n+                    if (dispatcher != null) {\n+                        dispatcher.getRateLimiter().ifPresent(DispatchRateLimiter::updateDispatchRate);\n                     }\n                 });\n             });",
                "raw_url": "https://github.com/apache/pulsar/raw/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/BrokerService.java",
                "sha": "346b97700adc0d5e0b1ad980368b967b28e12ecd",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pulsar/blob/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java?ref=84a519fa7389c3d2609d7445c72c2b6750c607f0",
                "deletions": 4,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "patch": "@@ -63,6 +63,7 @@\n import org.apache.pulsar.broker.service.BrokerServiceException.TopicTerminatedException;\n import org.apache.pulsar.broker.service.BrokerServiceException.UnsupportedVersionException;\n import org.apache.pulsar.broker.service.Consumer;\n+import org.apache.pulsar.broker.service.Dispatcher;\n import org.apache.pulsar.broker.service.Producer;\n import org.apache.pulsar.broker.service.Replicator;\n import org.apache.pulsar.broker.service.ServerCnx;\n@@ -269,8 +270,12 @@ private void initializeDispatchRateLimiterIfNeeded(Optional<Policies> policies)\n             }\n \n             // dispatch rate limiter for each subscription\n-            subscriptions.forEach((name, subscription) ->\n-                subscription.getDispatcher().initializeDispatchRateLimiterIfNeeded(policies));\n+            subscriptions.forEach((name, subscription) -> {\n+                Dispatcher dispatcher = subscription.getDispatcher();\n+                if (dispatcher != null) {\n+                    dispatcher.initializeDispatchRateLimiterIfNeeded(policies);\n+                }\n+            });\n \n             // dispatch rate limiter for each replicator\n             replicators.forEach((name, replicator) ->\n@@ -1673,8 +1678,9 @@ private boolean shouldTopicBeRetained() {\n         });\n         subscriptions.forEach((subName, sub) -> {\n             sub.getConsumers().forEach(Consumer::checkPermissions);\n-            if (sub.getDispatcher().getRateLimiter().isPresent()) {\n-                sub.getDispatcher().getRateLimiter().get().onPoliciesUpdate(data);\n+            Dispatcher dispatcher = sub.getDispatcher();\n+            if (dispatcher != null) {\n+                dispatcher.getRateLimiter().ifPresent(rateLimiter -> rateLimiter.onPoliciesUpdate(data));\n             }\n         });\n         replicators.forEach((name, replicator) ->",
                "raw_url": "https://github.com/apache/pulsar/raw/84a519fa7389c3d2609d7445c72c2b6750c607f0/pulsar-broker/src/main/java/org/apache/pulsar/broker/service/persistent/PersistentTopic.java",
                "sha": "d541d0a734c56484a3140814c6a32025ef6b3282",
                "status": "modified"
            }
        ],
        "message": "[pulsar-broker] Fix bug that namespace policies does not take effect due to NPE (#5408)\n\n* Fix bug that namespace policies does not take effect due to NPE\r\n\r\n* Prevent NPE if Dispatcher and DispatchRateLimiter return to null",
        "parent": "https://github.com/apache/pulsar/commit/ddf5429efb91e43386d506061b196330cbaae473",
        "repo": "pulsar",
        "unit_tests": [
            "PersistentTopicTest.java"
        ]
    },
    "pulsar_90f6b9e": {
        "bug_id": "pulsar_90f6b9e",
        "commit": "https://github.com/apache/pulsar/commit/90f6b9ed550347b1e3bfe07c67833987b27087e7",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/90f6b9ed550347b1e3bfe07c67833987b27087e7/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java?ref=90f6b9ed550347b1e3bfe07c67833987b27087e7",
                "deletions": 6,
                "filename": "pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "patch": "@@ -142,12 +142,14 @@ public void received(Consumer<T> consumer, Message<T> message) {\n \n     @Override\n     public void close() throws Exception {\n-        inputConsumers.forEach(consumer -> {\n-            try {\n-                consumer.close();\n-            } catch (PulsarClientException e) {\n-            }\n-        });\n+        if (inputConsumers != null ) {\n+            inputConsumers.forEach(consumer -> {\n+                try {\n+                    consumer.close();\n+                } catch (PulsarClientException e) {\n+                }\n+            });\n+        }\n     }\n \n     @SuppressWarnings(\"unchecked\")",
                "raw_url": "https://github.com/apache/pulsar/raw/90f6b9ed550347b1e3bfe07c67833987b27087e7/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/source/PulsarSource.java",
                "sha": "ff41dc846db5905e73a0ab1c4173297069072031",
                "status": "modified"
            }
        ],
        "message": "Fix: NPE in pulsar source close (#3246)",
        "parent": "https://github.com/apache/pulsar/commit/db26946520d3fe2c66bc0bc7c87815a8ef3754f4",
        "repo": "pulsar",
        "unit_tests": [
            "PulsarSourceTest.java"
        ]
    },
    "pulsar_f452e6f": {
        "bug_id": "pulsar_f452e6f",
        "commit": "https://github.com/apache/pulsar/commit/f452e6f817b5a613ded49a20ab2549fd5e34718c",
        "file": [
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/pulsar/blob/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java?ref=f452e6f817b5a613ded49a20ab2549fd5e34718c",
                "deletions": 0,
                "filename": "pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.pulsar.client.impl;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n \n import java.util.concurrent.TimeUnit;\n \n@@ -150,6 +151,48 @@ public void testSharedAckedNormalTopic() throws Exception {\n         assertEquals(size, 5);\n     }\n \n+    @Test(timeOut = testTimeout)\n+    public void testUnAckedMessageTrackerSize() throws Exception {\n+        String key = \"testUnAckedMessageTrackerSize\";\n+        final String topicName = \"persistent://prop/use/ns-abc/topic-\" + key;\n+        final String subscriptionName = \"my-ex-subscription-\" + key;\n+        final String messagePredicate = \"my-message-\" + key + \"-\";\n+        final int totalMessages = 15;\n+\n+        // 1. producer connect\n+        Producer<byte[]> producer = pulsarClient.newProducer().topic(topicName)\n+            .enableBatching(false)\n+            .messageRoutingMode(MessageRoutingMode.SinglePartition)\n+            .create();\n+\n+        // 2. Create consumer,doesn't set the ackTimeout\n+        Consumer<byte[]> consumer = pulsarClient.newConsumer().topic(topicName).subscriptionName(subscriptionName)\n+                .receiverQueueSize(50).subscriptionType(SubscriptionType.Shared).subscribe();\n+\n+        // 3. producer publish messages\n+        for (int i = 0; i < totalMessages / 3; i++) {\n+            String message = messagePredicate + i;\n+            log.info(\"Producer produced: \" + message);\n+            producer.send(message.getBytes());\n+        }\n+\n+        // 4. Receiver receives the message, doesn't ack\n+        Message<byte[]> message = consumer.receive();\n+        while (message != null) {\n+            String data = new String(message.getData());\n+            log.info(\"Consumer received : \" + data);\n+            message = consumer.receive(100, TimeUnit.MILLISECONDS);\n+        }\n+        UnAckedMessageTracker unAckedMessageTracker = ((ConsumerImpl<byte[]>) consumer).getUnAckedMessageTracker();\n+        long size = unAckedMessageTracker.size();\n+        log.info(key + \" Unacked Message Tracker size is \" + size);\n+        // 5. If ackTimeout is not set, UnAckedMessageTracker is a disabled method\n+        assertEquals(size, 0);\n+        assertTrue(unAckedMessageTracker.add(null));\n+        assertTrue(unAckedMessageTracker.remove(null));\n+        assertEquals(unAckedMessageTracker.removeMessagesTill(null), 0);\n+    }\n+\n     @Test(timeOut = testTimeout)\n     public void testExclusiveAckedNormalTopic() throws Exception {\n         String key = \"testExclusiveAckedNormalTopic\";",
                "raw_url": "https://github.com/apache/pulsar/raw/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/PerMessageUnAcknowledgedRedeliveryTest.java",
                "sha": "508de46482db0123b05c061691714cdaf0848686",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pulsar/blob/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java?ref=f452e6f817b5a613ded49a20ab2549fd5e34718c",
                "deletions": 0,
                "filename": "pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java",
                "patch": "@@ -54,6 +54,11 @@\n         public void clear() {\n         }\n \n+        @Override\n+        long size() {\n+            return 0;\n+        }\n+\n         @Override\n         public boolean add(MessageId m) {\n             return true;",
                "raw_url": "https://github.com/apache/pulsar/raw/f452e6f817b5a613ded49a20ab2549fd5e34718c/pulsar-client/src/main/java/org/apache/pulsar/client/impl/UnAckedMessageTracker.java",
                "sha": "0ab17d98b7d6d5354763f470579f2cad2e83eded",
                "status": "modified"
            }
        ],
        "message": "NPE in UnAckedMessageTrackerDisabled#size (#4535) (#4536)",
        "parent": "https://github.com/apache/pulsar/commit/0fd988d32f64ba7a8fde5f74ba18056af35d302c",
        "repo": "pulsar",
        "unit_tests": [
            "UnAckedMessageTrackerTest.java"
        ]
    },
    "pulsar_f8b051a": {
        "bug_id": "pulsar_f8b051a",
        "commit": "https://github.com/apache/pulsar/commit/f8b051a6f732653ef26ee68d239c1ae005e85a4a",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "deletions": 0,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.pulsar.broker.loadbalance.ResourceDescription;\n import org.apache.pulsar.broker.loadbalance.ResourceUnit;\n \n+import com.google.common.base.Objects;\n+\n public class SimpleResourceUnit implements ResourceUnit {\n \n     private String resourceId;\n@@ -66,4 +68,10 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return this.resourceId.hashCode();\n     }\n+\n+    @Override\n+    public String toString() {\n+        return Objects.toStringHelper(this).add(\"resourceId\", resourceId).toString();\n+    }\n+    \n }",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/SimpleResourceUnit.java",
                "sha": "12f76474c0f54ba59adf898bda3cfd96f6355b45",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "deletions": 1,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java",
                "patch": "@@ -256,7 +256,8 @@ public String getNamespaceBundle(@PathParam(\"destination-domain\") String destina\n                             }\n \n                             if (!lookupResult.isPresent()) {\n-                                lookupfuture.complete(newLookupErrorResponse(ServerError.ServiceNotReady, \"Namespace bundle is not owned by any broker\", requestId));\n+                                lookupfuture.complete(newLookupErrorResponse(ServerError.ServiceNotReady,\n+                                        \"No broker was available to own \" + fqdn, requestId));\n                                 return;\n                             }\n ",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/lookup/DestinationLookup.java",
                "sha": "71eb2cd86f77319343f98254a86cff320e0c82d6",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/pulsar/blob/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/pulsar/contents/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java?ref=f8b051a6f732653ef26ee68d239c1ae005e85a4a",
                "deletions": 7,
                "filename": "pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.pulsar.broker.ServiceConfiguration;\n import org.apache.pulsar.broker.admin.AdminResource;\n import org.apache.pulsar.broker.loadbalance.LoadManager;\n+import org.apache.pulsar.broker.loadbalance.ResourceUnit;\n import org.apache.pulsar.broker.lookup.LookupResult;\n import org.apache.pulsar.broker.service.BrokerServiceException.ServiceUnitNotReadyException;\n import org.apache.pulsar.client.admin.PulsarAdmin;\n@@ -333,7 +334,12 @@ private void searchForCandidateBroker(NamespaceBundle bundle,\n \n             if (candidateBroker == null) {\n                 if (!this.loadManager.get().isCentralized() || pulsar.getLeaderElectionService().isLeader()) {\n-                    candidateBroker = getLeastLoadedFromLoadManager(bundle);\n+                    Optional<String> availableBroker = getLeastLoadedFromLoadManager(bundle);\n+                    if (!availableBroker.isPresent()) {\n+                        lookupFuture.complete(Optional.empty());\n+                        return;\n+                    }\n+                    candidateBroker = availableBroker.get();\n                 } else {\n                     if (authoritative) {\n                         // leader broker already assigned the current broker as owner\n@@ -452,13 +458,19 @@ private boolean isBrokerActive(String candidateBroker) throws KeeperException, I\n      * @return\n      * @throws Exception\n      */\n-    private String getLeastLoadedFromLoadManager(ServiceUnitId serviceUnit) throws Exception {\n-        String lookupAddress = loadManager.get().getLeastLoaded(serviceUnit).getResourceId();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"{} : redirecting to the least loaded broker, lookup address={}\", pulsar.getWebServiceAddress(),\n-                    lookupAddress);\n+    private Optional<String> getLeastLoadedFromLoadManager(ServiceUnitId serviceUnit) throws Exception {\n+        ResourceUnit leastLoadedBroker = loadManager.get().getLeastLoaded(serviceUnit);\n+        if (leastLoadedBroker != null) {\n+            String lookupAddress = leastLoadedBroker.getResourceId();\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"{} : redirecting to the least loaded broker, lookup address={}\",\n+                        pulsar.getWebServiceAddress(), lookupAddress);\n+            }\n+            return Optional.of(lookupAddress);\n+        } else {\n+            LOG.warn(\"No broker is available for {}\", serviceUnit);\n+            return Optional.empty();\n         }\n-        return lookupAddress;\n     }\n \n     public void unloadNamespace(NamespaceName ns) throws Exception {",
                "raw_url": "https://github.com/apache/pulsar/raw/f8b051a6f732653ef26ee68d239c1ae005e85a4a/pulsar-broker/src/main/java/org/apache/pulsar/broker/namespace/NamespaceService.java",
                "sha": "7c8ad491a7d81ecf354b635c066c932fb5bae1d8",
                "status": "modified"
            }
        ],
        "message": "Handle NPE at load-manager when leader couldn't find available broker (#726)\n\n* Handle NPE at load-manager when leader couldn't find available broker\r\n\r\n* avoid throwing exception\r\n\r\n* return empty lookup-result if broker not found",
        "parent": "https://github.com/apache/pulsar/commit/aa40ebbe02f9b4f60b7f3910c293c50c18f35687",
        "repo": "pulsar",
        "unit_tests": [
            "NamespaceServiceTest.java"
        ]
    }
}