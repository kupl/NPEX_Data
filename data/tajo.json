{
    "tajo_1cdd018": {
        "bug_id": "tajo_1cdd018",
        "commit": "https://github.com/apache/tajo/commit/1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87/CHANGES",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -255,6 +255,8 @@ Release 0.11.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-1829: Fix DelimitedTextFileAppender NPE in negative tests. (jinho)\n+\n     TAJO-1674: Validation of CTAS schema mismatch. (hyunsik)\n \n     TAJO-1819: Cannot find existing tables when pgsql catalog starts up. ",
                "raw_url": "https://github.com/apache/tajo/raw/1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87/CHANGES",
                "sha": "303dbe38e06f7a905ec24b9fa443115d1dcee99a",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/tajo/blob/1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java?ref=1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87",
                "deletions": 19,
                "filename": "tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "patch": "@@ -137,6 +137,22 @@ public void init() throws IOException {\n         throw new FileNotFoundException(path.toString());\n       }\n \n+      if (enabledStats) {\n+        this.stats = new TableStatistics(this.schema);\n+      }\n+\n+      if(serializer != null) {\n+        serializer.release();\n+      }\n+      serializer = getLineSerde().createSerializer(schema, meta);\n+      serializer.init();\n+\n+      bufferSize = conf.getInt(WRITE_BUFFER_SIZE, DEFAULT_BUFFER_SIZE);\n+      if (os == null) {\n+        os = new NonSyncByteArrayOutputStream(bufferSize);\n+      }\n+      os.reset();\n+\n       if (this.meta.containsOption(StorageConstants.COMPRESSION_CODEC)) {\n         String codecName = this.meta.getOption(StorageConstants.COMPRESSION_CODEC);\n         codecFactory = new CompressionCodecFactory(conf);\n@@ -163,19 +179,6 @@ public void init() throws IOException {\n         outputStream = new DataOutputStream(new BufferedOutputStream(fos));\n       }\n \n-      if (enabledStats) {\n-        this.stats = new TableStatistics(this.schema);\n-      }\n-\n-      serializer = getLineSerde().createSerializer(schema, meta);\n-      serializer.init();\n-\n-      bufferSize = conf.getInt(WRITE_BUFFER_SIZE, DEFAULT_BUFFER_SIZE);\n-      if (os == null) {\n-        os = new NonSyncByteArrayOutputStream(bufferSize);\n-      }\n-\n-      os.reset();\n       pos = fos.getPos();\n       bufferedBytes = 0;\n       super.init();\n@@ -219,20 +222,22 @@ public long getOffset() throws IOException {\n \n     @Override\n     public void flush() throws IOException {\n-      flushBuffer();\n-      outputStream.flush();\n+      if(inited) {\n+        flushBuffer();\n+        outputStream.flush();\n+      }\n     }\n \n     @Override\n     public void close() throws IOException {\n \n       try {\n-        serializer.release();\n-\n-        if(outputStream != null){\n-          flush();\n+        if(serializer != null) {\n+          serializer.release();\n         }\n \n+        flush();\n+\n         // Statistical section\n         if (enabledStats) {\n           stats.setNumBytes(getOffset());",
                "raw_url": "https://github.com/apache/tajo/raw/1cdd018d92f0400ffbfc09d07a1dfd18d9b13d87/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "sha": "bc1d7ba9ba3c2cfa00b5f13fb899a28c148b3c07",
                "status": "modified"
            }
        ],
        "message": "TAJO-1829: Fix DelimitedTextFileAppender NPE in negative tests.\n\nCloses #747",
        "parent": "https://github.com/apache/tajo/commit/c66d0b4708814ed8f7a1ae530338e1fcf87caddc",
        "repo": "tajo",
        "unit_tests": [
            "TestDelimitedTextFile.java"
        ]
    },
    "tajo_4f3a46c": {
        "bug_id": "tajo_4f3a46c",
        "commit": "https://github.com/apache/tajo/commit/4f3a46c3646ca7a551916c57c980b2862a9dbb4e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/CHANGES",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=4f3a46c3646ca7a551916c57c980b2862a9dbb4e",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -136,6 +136,8 @@ Release 0.11.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-1623: INSERT INTO with wrong target columns causes NPE. (hyunsik)\n+\n     TAJO-1621: Compilation error with hadoop 2.7.0. (jinho)\n \n     TAJO-1619: JDBC program is stuck after closing. (jihoon)",
                "raw_url": "https://github.com/apache/tajo/raw/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/CHANGES",
                "sha": "aeda418207758ce0fc4cb4a3bb120df360bf677b",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tajo/blob/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-core/src/test/java/org/apache/tajo/QueryTestCaseBase.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/java/org/apache/tajo/QueryTestCaseBase.java?ref=4f3a46c3646ca7a551916c57c980b2862a9dbb4e",
                "deletions": 4,
                "filename": "tajo-core/src/test/java/org/apache/tajo/QueryTestCaseBase.java",
                "patch": "@@ -306,24 +306,32 @@ private static VerificationState verify(String query) throws PlanningException {\n     return state;\n   }\n \n-  public void assertValidSQL(String fileName) throws PlanningException, IOException {\n-    Path queryFilePath = getQueryFilePath(fileName);\n-    String query = FileUtil.readTextFile(new File(queryFilePath.toUri()));\n+  public void assertValidSQL(String query) throws PlanningException, IOException {\n     VerificationState state = verify(query);\n     if (state.getErrorMessages().size() > 0) {\n       fail(state.getErrorMessages().get(0));\n     }\n   }\n \n-  public void assertInvalidSQL(String fileName) throws PlanningException, IOException {\n+  public void assertValidSQLFromFile(String fileName) throws PlanningException, IOException {\n     Path queryFilePath = getQueryFilePath(fileName);\n     String query = FileUtil.readTextFile(new File(queryFilePath.toUri()));\n+    assertValidSQL(query);\n+  }\n+\n+  public void assertInvalidSQL(String query) throws PlanningException, IOException {\n     VerificationState state = verify(query);\n     if (state.getErrorMessages().size() == 0) {\n       fail(PreLogicalPlanVerifier.class.getSimpleName() + \" cannot catch any verification error: \" + query);\n     }\n   }\n \n+  public void assertInvalidSQLFromFile(String fileName) throws PlanningException, IOException {\n+    Path queryFilePath = getQueryFilePath(fileName);\n+    String query = FileUtil.readTextFile(new File(queryFilePath.toUri()));\n+    assertInvalidSQL(query);\n+  }\n+\n   public void assertPlanError(String fileName) throws PlanningException, IOException {\n     Path queryFilePath = getQueryFilePath(fileName);\n     String query = FileUtil.readTextFile(new File(queryFilePath.toUri()));",
                "raw_url": "https://github.com/apache/tajo/raw/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-core/src/test/java/org/apache/tajo/QueryTestCaseBase.java",
                "sha": "9a92e909a079c8231986989ab42b5dc3860575db",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tajo/blob/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-core/src/test/java/org/apache/tajo/engine/planner/TestQueryValidation.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/java/org/apache/tajo/engine/planner/TestQueryValidation.java?ref=4f3a46c3646ca7a551916c57c980b2862a9dbb4e",
                "deletions": 5,
                "filename": "tajo-core/src/test/java/org/apache/tajo/engine/planner/TestQueryValidation.java",
                "patch": "@@ -25,19 +25,26 @@\n import java.io.IOException;\n \n public class TestQueryValidation extends QueryTestCaseBase {\n+\n+  @Test\n+  public void testInsertWithWrongTargetColumn() throws Exception {\n+    executeString(\"CREATE TABLE T1 (col1 int, col2 int)\").close();\n+    assertInvalidSQL(\"INSERT INTO T1 (col1, col3) select l_orderkey, l_partkey from default.lineitem\");\n+  }\n+\n   @Test\n   public void testLimitClauses() throws PlanningException, IOException {\n     // select * from lineitem limit 3;\n-    assertValidSQL(\"valid_limit_1.sql\");\n+    assertValidSQLFromFile(\"valid_limit_1.sql\");\n \n     // select * from lineitem limit l_orderkey;\n-    assertInvalidSQL(\"invalid_limit_1.sql\");\n+    assertInvalidSQLFromFile(\"invalid_limit_1.sql\");\n   }\n \n   @Test\n   public void testGroupByClauses() throws PlanningException, IOException {\n     // select l_orderkey from lineitem group by l_orderkey;\n-    assertValidSQL(\"valid_groupby_1.sql\");\n+    assertValidSQLFromFile(\"valid_groupby_1.sql\");\n \n     // select * from lineitem group by l_orderkey;\n     assertPlanError(\"error_groupby_1.sql\");\n@@ -48,12 +55,12 @@ public void testGroupByClauses() throws PlanningException, IOException {\n   @Test\n   public void testCaseWhenExprs() throws PlanningException, IOException {\n     // See TAJO-1098\n-    assertInvalidSQL(\"invalid_casewhen_1.sql\");\n+    assertInvalidSQLFromFile(\"invalid_casewhen_1.sql\");\n   }\n \n   @Test\n   public void testUnsupportedStoreType() throws PlanningException, IOException {\n     // See TAJO-1249\n-    assertInvalidSQL(\"invalid_store_format.sql\");\n+    assertInvalidSQLFromFile(\"invalid_store_format.sql\");\n   }\n }",
                "raw_url": "https://github.com/apache/tajo/raw/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-core/src/test/java/org/apache/tajo/engine/planner/TestQueryValidation.java",
                "sha": "fd60a5e53f6edc4b2a763abf36aa07215da62612",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tajo/blob/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java?ref=4f3a46c3646ca7a551916c57c980b2862a9dbb4e",
                "deletions": 0,
                "filename": "tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "patch": "@@ -1564,6 +1564,12 @@ private InsertNode buildInsertIntoTablePlan(PlanContext context, InsertNode inse\n       Schema targetColumns = new Schema();\n       for (int i = 0; i < targets.length; i++) {\n         Column targetColumn = desc.getLogicalSchema().getColumn(targets[i]);\n+\n+        if (targetColumn == null) {\n+          throw new PlanningException(\"column \\\"\" + targets[i] + \"\\\" of relation \\\"\" +\n+              desc.getName() + \"\\\" does not exist\");\n+        }\n+\n         targetColumns.addColumn(targetColumn);\n       }\n       insertNode.setTargetSchema(targetColumns);",
                "raw_url": "https://github.com/apache/tajo/raw/4f3a46c3646ca7a551916c57c980b2862a9dbb4e/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "sha": "5571cdf0f230ca5e2889e6e335f0219d52121fb3",
                "status": "modified"
            }
        ],
        "message": "TAJO-1623: INSERT INTO with wrong target columns causes NPE.\n\nCloses #587",
        "parent": "https://github.com/apache/tajo/commit/1872df94355bed50a3ac55ffd7632ab532bdb506",
        "repo": "tajo",
        "unit_tests": [
            "TestLogicalPlanner.java"
        ]
    },
    "tajo_5893e74": {
        "bug_id": "tajo_5893e74",
        "commit": "https://github.com/apache/tajo/commit/5893e74978d99d25b40af4ae465471493abbb89e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tajo/blob/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/ColumnStat.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/engine/src/main/java/nta/catalog/statistics/ColumnStat.java?ref=5893e74978d99d25b40af4ae465471493abbb89e",
                "deletions": 3,
                "filename": "engine/src/main/java/nta/catalog/statistics/ColumnStat.java",
                "patch": "@@ -107,7 +107,7 @@ public Datum getMaxValue() {\n     if (!p.hasMaxValue()) {\n       return null;\n     }\n-    this.maxValue = TupleUtil.createFromBytes(column.getDataType(), p.getMaxValue().toByteArray());\n+    this.maxValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMaxValue().toByteArray());\n \n     return this.maxValue;\n   }\n@@ -191,10 +191,10 @@ public void initFromProto() {\n       this.numNulls = p.getNumNulls();\n     }\n     if (this.minValue == null && p.hasMinValue()) {\n-      this.minValue = TupleUtil.createFromBytes(column.getDataType(), p.getMinValue().toByteArray());\n+      this.minValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMinValue().toByteArray());\n     }\n     if (this.maxValue == null && p.hasMaxValue()) {\n-      this.maxValue = TupleUtil.createFromBytes(column.getDataType(), p.getMaxValue().toByteArray());\n+      this.maxValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMaxValue().toByteArray());\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/tajo/raw/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/ColumnStat.java",
                "sha": "0247071c2bd025fca7ed24e2aa41f532911f0cb1",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tajo/blob/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java?ref=5893e74978d99d25b40af4ae465471493abbb89e",
                "deletions": 0,
                "filename": "engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java",
                "patch": "@@ -1,13 +1,18 @@\n package nta.catalog.statistics;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.logging.Log;\n \n import java.util.List;\n \n /**\n  * @author Hyunsik Choi\n  */\n public class StatisticsUtil {\n+  private static final Log LOG = LogFactory.getLog(StatisticsUtil.class);\n+\n   public static StatSet aggregate(List<StatSet> statSets) {\n     StatSet aggregated = new StatSet();\n \n@@ -38,6 +43,10 @@ public static TableStat aggregate(List<TableStat> tableStats) {\n       // aggregate column stats for each table\n       for (int i = 0; i < ts.getColumnStats().size(); i++) {\n         ColumnStat cs = ts.getColumnStats().get(i);\n+        if (cs == null) {\n+          LOG.warn(\"ERROR: One of column stats is NULL (expected column: \" + css[i].getColumn() + \")\");\n+          continue;\n+        }\n         css[i].setNumDistVals(css[i].getNumDistValues() + cs.getNumDistValues());\n         css[i].setNumNulls(css[i].getNumNulls() + cs.getNumNulls());\n         if (!cs.minIsNotSet() && (css[i].minIsNotSet() ||",
                "raw_url": "https://github.com/apache/tajo/raw/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java",
                "sha": "d1ed8598b4f5bc71da053e0343cba76026ff233c",
                "status": "modified"
            }
        ],
        "message": "TAJO-802: StatisticsUtil.aggregate incurs NPE\n\nChange-Id: I0f84a623952a21f645521dd9aa6baaeaddeff0f4\nReviewed-on: https://dbserver.korea.ac.kr/reviews/234\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>",
        "parent": "https://github.com/apache/tajo/commit/94b25a9a983a6dedeb240d635fc2f47cf23bc6ed",
        "repo": "tajo",
        "unit_tests": [
            "TestStatisticsUtil.java"
        ]
    },
    "tajo_5e024f9": {
        "bug_id": "tajo_5e024f9",
        "commit": "https://github.com/apache/tajo/commit/5e024f947b441fb49f5740deab119867eb655795",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tajo/blob/5e024f947b441fb49f5740deab119867eb655795/CHANGES",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=5e024f947b441fb49f5740deab119867eb655795",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -179,6 +179,9 @@ Release 0.10.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-1316: NPE occurs when performing window functions after join.\n+    (jihun)\n+\n     TAJO-1325: Invalid history cleaner timeout. (jinho)\n \n     TAJO-1283: ORDER BY with the first descending order causes wrong results.",
                "raw_url": "https://github.com/apache/tajo/raw/5e024f947b441fb49f5740deab119867eb655795/CHANGES",
                "sha": "e9a93324b71c1083ad6f843a60804732d4d1a801",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/tajo/blob/5e024f947b441fb49f5740deab119867eb655795/tajo-core/src/test/java/org/apache/tajo/engine/function/TestBuiltinFunctions.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/java/org/apache/tajo/engine/function/TestBuiltinFunctions.java?ref=5e024f947b441fb49f5740deab119867eb655795",
                "deletions": 0,
                "filename": "tajo-core/src/test/java/org/apache/tajo/engine/function/TestBuiltinFunctions.java",
                "patch": "@@ -352,4 +352,42 @@ public void testSplitPartNested() throws Exception {\n     assertResultSet(res);\n     cleanupQuery(res);\n   }\n+  \n+  @Test\n+  public void testRankWithTwoTables() throws Exception {\n+    KeyValueSet tableOptions = new KeyValueSet();\n+    tableOptions.set(StorageConstants.TEXT_DELIMITER, StorageConstants.DEFAULT_FIELD_DELIMITER);\n+    tableOptions.set(StorageConstants.TEXT_NULL, \"\\\\\\\\N\");\n+    \n+    Schema schema = new Schema();\n+    schema.addColumn(\"id\", TajoDataTypes.Type.INT4);\n+    String[] data = new String[] {\"1\", \"3\", \"2\", \"4\"};\n+    TajoTestingCluster.createTable(\"rank_table1\", schema, tableOptions, data, 1);\n+    schema = new Schema();\n+    schema.addColumn(\"refid\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"value\", TajoDataTypes.Type.TEXT);\n+    data = new String[] {\"1|efgh\", \"2|abcd\", \"4|erjk\", \"8|dfef\"};\n+    TajoTestingCluster.createTable(\"rank_table2\", schema, tableOptions, data, 1);\n+    ResultSet res = null;\n+    \n+    try {\n+      res = executeString(\"select rank() over (order by id) from rank_table1 a, rank_table2 b \"\n+          + \" where a.id = b.refid\");\n+      String expectedString = \"?windowfunction\\n\" +\n+          \"-------------------------------\\n\" +\n+          \"1\\n\" +\n+          \"2\\n\" +\n+          \"3\\n\";\n+      \n+      assertEquals(expectedString, resultSetToString(res));\n+    } finally {\n+      if (res != null) {\n+        try {\n+        res.close();\n+        } catch(Throwable ignored) {}\n+      }\n+      executeString(\"DROP TABLE rank_table1 PURGE\");\n+      executeString(\"DROP TABLE rank_table2 PURGE\");\n+    }\n+  }\n }",
                "raw_url": "https://github.com/apache/tajo/raw/5e024f947b441fb49f5740deab119867eb655795/tajo-core/src/test/java/org/apache/tajo/engine/function/TestBuiltinFunctions.java",
                "sha": "9f687865fc54c3e0f05074b638799eb7b2ceaf26",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/5e024f947b441fb49f5740deab119867eb655795/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java?ref=5e024f947b441fb49f5740deab119867eb655795",
                "deletions": 2,
                "filename": "tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "patch": "@@ -22,7 +22,6 @@\n import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-import org.apache.commons.lang.math.NumberUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n@@ -1221,7 +1220,8 @@ private LogicalNode createCartesianProduct(PlanContext context, LogicalNode left\n       NamedExpr namedExpr = it.next();\n       try {\n         evalNode = exprAnnotator.createEvalNode(context, namedExpr.getExpr(), NameResolvingMode.LEGACY);\n-        if (EvalTreeUtil.findDistinctAggFunction(evalNode).size() == 0) {\n+        if (EvalTreeUtil.findDistinctAggFunction(evalNode).size() == 0 \n+            && EvalTreeUtil.findWindowFunction(evalNode).size() == 0) {\n           block.namedExprsMgr.markAsEvaluated(namedExpr.getAlias(), evalNode);\n           newlyEvaluatedExprs.add(namedExpr.getAlias());\n         }",
                "raw_url": "https://github.com/apache/tajo/raw/5e024f947b441fb49f5740deab119867eb655795/tajo-plan/src/main/java/org/apache/tajo/plan/LogicalPlanner.java",
                "sha": "babcb1ef24b42a870c86ea6e6409d9764f369bf2",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/tajo/blob/5e024f947b441fb49f5740deab119867eb655795/tajo-plan/src/main/java/org/apache/tajo/plan/expr/EvalTreeUtil.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-plan/src/main/java/org/apache/tajo/plan/expr/EvalTreeUtil.java?ref=5e024f947b441fb49f5740deab119867eb655795",
                "deletions": 0,
                "filename": "tajo-plan/src/main/java/org/apache/tajo/plan/expr/EvalTreeUtil.java",
                "patch": "@@ -486,6 +486,28 @@ public void visit(EvalNode node) {\n       return this.aggFucntions;\n     }\n   }\n+  \n+  public static Set<WindowFunctionEval> findWindowFunction(EvalNode expr) {\n+    AllWindowFunctionFinder finder = new AllWindowFunctionFinder();\n+    expr.postOrder(finder);\n+    return finder.getWindowFunctionSet();\n+  }\n+  \n+  public static class AllWindowFunctionFinder implements EvalNodeVisitor {\n+    private Set<WindowFunctionEval> windowFunctions = Sets.newHashSet();\n+\n+    @Override\n+    public void visit(EvalNode node) {\n+      if (node.getType() == EvalType.WINDOW_FUNCTION) {\n+        WindowFunctionEval field = (WindowFunctionEval) node;\n+        windowFunctions.add(field);\n+      }\n+    }\n+    \n+    public Set<WindowFunctionEval> getWindowFunctionSet() {\n+      return windowFunctions;\n+    }\n+  }\n \n   public static <T extends EvalNode> Collection<T> findEvalsByType(EvalNode evalNode, EvalType type) {\n     EvalFinder finder = new EvalFinder(type);",
                "raw_url": "https://github.com/apache/tajo/raw/5e024f947b441fb49f5740deab119867eb655795/tajo-plan/src/main/java/org/apache/tajo/plan/expr/EvalTreeUtil.java",
                "sha": "f1d4498a851fcbe56795f6f7d983547d3c2fd854",
                "status": "modified"
            }
        ],
        "message": "TAJO-1316: NPE occurs when performing window functions after join\n\nCloses #372",
        "parent": "https://github.com/apache/tajo/commit/ae7862b284371069522a853df6a1db8249428644",
        "repo": "tajo",
        "unit_tests": [
            "TestEvalTreeUtil.java"
        ]
    },
    "tajo_5f9330b": {
        "bug_id": "tajo_5f9330b",
        "commit": "https://github.com/apache/tajo/commit/5f9330b101d20760dffd96ec5191134352b5a6aa",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/CHANGES",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -40,6 +40,9 @@ Release 0.9.0 - unreleased\n     (Hyoungjun Kim via hyunsik)\n \n   BUG FIXES\n+ \n+    TAJO-833: NPE occurs when using the column as a alias name in the multiple \n+    DISTINCT. (Hyoungjun Kim via hyunsik)\n \n     TAJO-821: IllegalStateException occurs when a NettyClientBase object is created \n     within single thread. (hyoungjunkim via jinho)",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/CHANGES",
                "sha": "3d1ec45a1f8090845053b25c9f1dbbe9732ab2c5",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/eval/FieldEval.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/eval/FieldEval.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 1,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/eval/FieldEval.java",
                "patch": "@@ -42,7 +42,12 @@ public FieldEval(Column column) {\n \t@Override\n \tpublic Datum eval(Schema schema, Tuple tuple) {\n \t  if (fieldId == -1) {\n-\t    fieldId = schema.getColumnId(column.getQualifiedName());\n+      // TODO - column namespace should be improved to simplify name handling and resolving.\n+      if (column.hasQualifier()) {\n+        fieldId = schema.getColumnId(column.getQualifiedName());\n+      } else {\n+        fieldId = schema.getColumnIdByName(column.getSimpleName());\n+      }\n       if (fieldId == -1) {\n         throw new IllegalStateException(\"No Such Column Reference: \" + column + \", schema: \" + schema);\n       }",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/eval/FieldEval.java",
                "sha": "20af8542a6aad46c99757a985d40aef812e83781",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/global/builder/DistinctGroupbyBuilder.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/planner/global/builder/DistinctGroupbyBuilder.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 5,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/planner/global/builder/DistinctGroupbyBuilder.java",
                "patch": "@@ -263,7 +263,11 @@ private DistinctGroupbyNode buildBaseDistinctGroupByNode(GlobalPlanContext conte\n     int[] secondStageColumnIds = new int[secondStageDistinctNode.getOutSchema().size()];\n     int columnIdIndex = 0;\n     for (Column column: secondStageDistinctNode.getGroupingColumns()) {\n-      secondStageColumnIds[originOutputSchema.getColumnId(column.getQualifiedName())] = columnIdIndex;\n+      if (column.hasQualifier()) {\n+        secondStageColumnIds[originOutputSchema.getColumnId(column.getQualifiedName())] = columnIdIndex;\n+      } else {\n+        secondStageColumnIds[originOutputSchema.getColumnIdByName(column.getSimpleName())] = columnIdIndex;\n+      }\n       columnIdIndex++;\n     }\n \n@@ -312,8 +316,12 @@ private DistinctGroupbyNode buildBaseDistinctGroupByNode(GlobalPlanContext conte\n           int targetIdx = originGroupColumns.size() + uniqueDistinctColumn.size() + aggFuncIdx;\n           Target aggFuncTarget = oldTargets[targetIdx];\n           secondGroupbyTargets.add(aggFuncTarget);\n-          int outputColumnId = originOutputSchema.getColumnId(aggFuncTarget.getNamedColumn().getQualifiedName());\n-          secondStageColumnIds[outputColumnId] = columnIdIndex;\n+          Column column = aggFuncTarget.getNamedColumn();\n+          if (column.hasQualifier()) {\n+            secondStageColumnIds[originOutputSchema.getColumnId(column.getQualifiedName())] = columnIdIndex;\n+          } else {\n+            secondStageColumnIds[originOutputSchema.getColumnIdByName(column.getSimpleName())] = columnIdIndex;\n+          }\n           columnIdIndex++;\n         }\n         secondStageGroupbyNode.setTargets(secondGroupbyTargets.toArray(new Target[]{}));\n@@ -336,8 +344,12 @@ private DistinctGroupbyNode buildBaseDistinctGroupByNode(GlobalPlanContext conte\n           secondStageAggFunction.setArgs(new EvalNode[] {firstEval});\n \n           Target secondTarget = secondStageGroupbyNode.getTargets()[secondStageGroupbyNode.getGroupingColumns().length + aggFuncIdx];\n-          int outputColumnId = originOutputSchema.getColumnId(secondTarget.getNamedColumn().getQualifiedName());\n-          secondStageColumnIds[outputColumnId] = columnIdIndex;\n+          Column column = secondTarget.getNamedColumn();\n+          if (column.hasQualifier()) {\n+            secondStageColumnIds[originOutputSchema.getColumnId(column.getQualifiedName())] = columnIdIndex;\n+          } else {\n+            secondStageColumnIds[originOutputSchema.getColumnIdByName(column.getSimpleName())] = columnIdIndex;\n+          }\n           columnIdIndex++;\n           aggFuncIdx++;\n         }",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/global/builder/DistinctGroupbyBuilder.java",
                "sha": "8727b84eefc400ee9b304cebf6ca47e4b6aebd12",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/AggregationExec.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/AggregationExec.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 1,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/AggregationExec.java",
                "patch": "@@ -49,7 +49,11 @@ public AggregationExec(final TaskAttemptContext context, GroupbyNode plan,\n     Column col;\n     for (int idx = 0; idx < plan.getGroupingColumns().length; idx++) {\n       col = keyColumns[idx];\n-      groupingKeyIds[idx] = inSchema.getColumnId(col.getQualifiedName());\n+      if (col.hasQualifier()) {\n+        groupingKeyIds[idx] = inSchema.getColumnId(col.getQualifiedName());\n+      } else {\n+        groupingKeyIds[idx] = inSchema.getColumnIdByName(col.getSimpleName());\n+      }\n     }\n \n     if (plan.hasAggFunctions()) {",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/AggregationExec.java",
                "sha": "2a671e63068786aa582a4df46f489c23b6829905",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbyHashAggregationExec.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbyHashAggregationExec.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 11,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbyHashAggregationExec.java",
                "patch": "@@ -40,7 +40,6 @@\n \n   private HashAggregator[] hashAggregators;\n   private PhysicalExec child;\n-  private int distinctGroupingKeyNum;\n   private int distinctGroupingKeyIds[];\n   private boolean first = true;\n   private int groupbyNodeNum;\n@@ -58,14 +57,22 @@ public DistinctGroupbyHashAggregationExec(TaskAttemptContext context, DistinctGr\n     this.child = subOp;\n     this.child.init();\n \n-    distinctGroupingKeyNum = plan.getGroupingColumns().length;\n-    distinctGroupingKeyIds = new int[distinctGroupingKeyNum];\n-\n-    Column[] keyColumns = plan.getGroupingColumns();\n-    Column col;\n-    for (int idx = 0; idx < plan.getGroupingColumns().length; idx++) {\n-      col = keyColumns[idx];\n-      distinctGroupingKeyIds[idx] = inSchema.getColumnId(col.getQualifiedName());\n+    List<Integer> distinctGroupingKeyIdList = new ArrayList<Integer>();\n+    for (Column col: plan.getGroupingColumns()) {\n+      int keyIndex;\n+      if (col.hasQualifier()) {\n+        keyIndex = inSchema.getColumnId(col.getQualifiedName());\n+      } else {\n+        keyIndex = inSchema.getColumnIdByName(col.getSimpleName());\n+      }\n+      if (!distinctGroupingKeyIdList.contains(keyIndex)) {\n+        distinctGroupingKeyIdList.add(keyIndex);\n+      }\n+    }\n+    int idx = 0;\n+    distinctGroupingKeyIds = new int[distinctGroupingKeyIdList.size()];\n+    for (Integer intVal: distinctGroupingKeyIdList) {\n+      distinctGroupingKeyIds[idx++] = intVal.intValue();\n     }\n \n     List<GroupbyNode> groupbyNodes = plan.getGroupByNodes();\n@@ -152,6 +159,34 @@ public Tuple next() throws IOException {\n       return null;\n     }\n \n+\n+    /*\n+    Tuple materialization example\n+    =============================\n+\n+    Output Tuple Index: 0(l_orderkey), 1(l_partkey), 2(default.lineitem.l_suppkey), 5(default.lineitem.\n+    l_partkey), 8(sum)\n+\n+              select\n+                  lineitem.l_orderkey as l_orderkey,\n+                  lineitem.l_partkey as l_partkey,\n+                  count(distinct lineitem.l_partkey) as cnt1,\n+                  count(distinct lineitem.l_suppkey) as cnt2,\n+                  sum(lineitem.l_quantity) as sum1\n+              from\n+                  lineitem\n+              group by\n+                  lineitem.l_orderkey, lineitem.l_partkey\n+\n+    The above case will result in the following materialization\n+    ------------------------------------------------------------\n+\n+    l_orderkey  l_partkey  default.lineitem.l_suppkey  l_orderkey  l_partkey  default.lineitem.l_partkey  l_orderkey  l_partkey  sum\n+        1            1              7311                   1            1                1                    1           1      53.0\n+        1            1              7706\n+\n+    */\n+\n     currentAggregatedTuples = new ArrayList<Tuple>();\n     int listIndex = 0;\n     while (true) {\n@@ -296,9 +331,14 @@ public HashAggregator(GroupbyNode groupbyNode) throws IOException {\n       List<Integer> groupingKeyIdList = new ArrayList<Integer>(distinctGroupingKeyIdSet);\n       Column[] keyColumns = groupbyNode.getGroupingColumns();\n       Column col;\n-      for (int idx = 0; idx < groupbyNode.getGroupingColumns().length; idx++) {\n+      for (int idx = 0; idx < keyColumns.length; idx++) {\n         col = keyColumns[idx];\n-        int keyIndex = inSchema.getColumnId(col.getQualifiedName());\n+        int keyIndex;\n+        if (col.hasQualifier()) {\n+          keyIndex = inSchema.getColumnId(col.getQualifiedName());\n+        } else {\n+          keyIndex = inSchema.getColumnIdByName(col.getSimpleName());\n+        }\n         if (!distinctGroupingKeyIdSet.contains(keyIndex)) {\n           groupingKeyIdList.add(keyIndex);\n         }",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbyHashAggregationExec.java",
                "sha": "8daad0b2bc9c2036ee8eac75b96d5989984c9fe2",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbySortAggregationExec.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbySortAggregationExec.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 7,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbySortAggregationExec.java",
                "patch": "@@ -18,7 +18,6 @@\n \n package org.apache.tajo.engine.planner.physical;\n \n-import org.apache.tajo.catalog.Column;\n import org.apache.tajo.catalog.statistics.TableStats;\n import org.apache.tajo.engine.planner.logical.DistinctGroupbyNode;\n import org.apache.tajo.engine.planner.logical.GroupbyNode;\n@@ -34,8 +33,6 @@\n \n   private boolean finished = false;\n \n-  private int distinctGroupingKeyNum;\n-\n   private Tuple[] currentTuples;\n   private int outColumnNum;\n   private int groupbyNodeNum;\n@@ -49,9 +46,6 @@ public DistinctGroupbySortAggregationExec(final TaskAttemptContext context, Dist\n     this.aggregateExecs = aggregateExecs;\n     this.groupbyNodeNum = plan.getGroupByNodes().size();\n \n-    final Column[] keyColumns = plan.getGroupingColumns();\n-    distinctGroupingKeyNum = keyColumns.length;\n-\n     currentTuples = new Tuple[groupbyNodeNum];\n     outColumnNum = outSchema.size();\n \n@@ -116,7 +110,6 @@ public Tuple next() throws IOException {\n         mergeTupleIndex++;\n       }\n     }\n-\n     return mergedTuple;\n   }\n ",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/DistinctGroupbySortAggregationExec.java",
                "sha": "fd79725da3e1776edbc876621c0fdf0a045e9891",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/SortAggregateExec.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/SortAggregateExec.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 1,
                "filename": "tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/SortAggregateExec.java",
                "patch": "@@ -57,7 +57,6 @@ public Tuple next() throws IOException {\n     Tuple outputTuple = null;\n \n     while(!context.isStopped() && (tuple = child.next()) != null) {\n-\n       // get a key tuple\n       currentKey = new VTuple(groupingKeyIds.length);\n       for(int i = 0; i < groupingKeyIds.length; i++) {",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/main/java/org/apache/tajo/engine/planner/physical/SortAggregateExec.java",
                "sha": "9a415d1d6c2f7501287c2ed5ba88543978d323fb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/java/org/apache/tajo/engine/query/TestGroupByQuery.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/java/org/apache/tajo/engine/query/TestGroupByQuery.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 0,
                "filename": "tajo-core/src/test/java/org/apache/tajo/engine/query/TestGroupByQuery.java",
                "patch": "@@ -249,6 +249,10 @@ public final void testDistinctAggregationCasebyCase() throws Exception {\n     res = executeFile(\"testDistinctAggregation_case7.sql\");\n     assertResultSet(res, \"testDistinctAggregation_case7.result\");\n     res.close();\n+\n+    res = executeFile(\"testDistinctAggregation_case8.sql\");\n+    assertResultSet(res, \"testDistinctAggregation_case8.result\");\n+    res.close();\n   }\n \n   @Test",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/java/org/apache/tajo/engine/query/TestGroupByQuery.java",
                "sha": "1263bbecfe9bfe5014f257ebdaeb60a9b7fa44ea",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/resources/queries/TestGroupByQuery/testDistinctAggregation_case8.sql",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/resources/queries/TestGroupByQuery/testDistinctAggregation_case8.sql?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 0,
                "filename": "tajo-core/src/test/resources/queries/TestGroupByQuery/testDistinctAggregation_case8.sql",
                "patch": "@@ -0,0 +1,10 @@\n+select\n+    lineitem.l_orderkey as l_orderkey,\n+    lineitem.l_partkey as l_partkey,\n+    count(distinct lineitem.l_partkey) as cnt1,\n+    count(distinct lineitem.l_suppkey) as cnt2,\n+    sum(lineitem.l_quantity) as sum1\n+from\n+    lineitem\n+group by\n+    lineitem.l_orderkey, lineitem.l_partkey\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/resources/queries/TestGroupByQuery/testDistinctAggregation_case8.sql",
                "sha": "ed8e363c1fea975059b453f05cf09c565e0acb60",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/resources/results/TestGroupByQuery/testDistinctAggregation_case8.result",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/test/resources/results/TestGroupByQuery/testDistinctAggregation_case8.result?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 0,
                "filename": "tajo-core/src/test/resources/results/TestGroupByQuery/testDistinctAggregation_case8.result",
                "patch": "@@ -0,0 +1,6 @@\n+l_orderkey,l_partkey,cnt1,cnt2,sum1\n+-------------------------------\n+1,1,1,2,53.0\n+2,2,1,1,38.0\n+3,2,1,1,45.0\n+3,3,1,1,49.0\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-core/src/test/resources/results/TestGroupByQuery/testDistinctAggregation_case8.result",
                "sha": "e2348966ee6ac9750cc6f50af4d0b41bd329079f",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tajo/blob/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-storage/src/main/java/org/apache/tajo/storage/TupleComparator.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-storage/src/main/java/org/apache/tajo/storage/TupleComparator.java?ref=5f9330b101d20760dffd96ec5191134352b5a6aa",
                "deletions": 1,
                "filename": "tajo-storage/src/main/java/org/apache/tajo/storage/TupleComparator.java",
                "patch": "@@ -58,7 +58,11 @@ public TupleComparator(Schema schema, SortSpec[] sortKeys) {\n     this.asc = new boolean[sortKeys.length];\n     this.nullFirsts = new boolean[sortKeys.length];\n     for (int i = 0; i < sortKeys.length; i++) {\n-      this.sortKeyIds[i] = schema.getColumnId(sortKeys[i].getSortKey().getQualifiedName());\n+      if (sortKeys[i].getSortKey().hasQualifier()) {\n+        this.sortKeyIds[i] = schema.getColumnId(sortKeys[i].getSortKey().getQualifiedName());\n+      } else {\n+        this.sortKeyIds[i] = schema.getColumnIdByName(sortKeys[i].getSortKey().getSimpleName());\n+      }\n           \n       this.asc[i] = sortKeys[i].isAscending();\n       this.nullFirsts[i]= sortKeys[i].isNullFirst();\n@@ -160,4 +164,18 @@ public TupleComparatorProto getProto() {\n \n     return builder.build();\n   }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+\n+    String prefix = \"\";\n+    for (int i = 0; i < sortKeyIds.length; i++) {\n+      sb.append(prefix).append(\"SortKeyId=\").append(sortKeyIds[i])\n+        .append(\",Asc=\").append(asc[i])\n+        .append(\",NullFirst=\").append(nullFirsts[i]);\n+      prefix = \" ,\";\n+    }\n+    return sb.toString();\n+  }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tajo/raw/5f9330b101d20760dffd96ec5191134352b5a6aa/tajo-storage/src/main/java/org/apache/tajo/storage/TupleComparator.java",
                "sha": "51388a47c9afb6d5d81d5a09c7e62bb0696948d5",
                "status": "modified"
            }
        ],
        "message": "TAJO-833: NPE occurs when using the column as a alias name in the multiple DISTINCT. (Hyoungjun Kim via hyunsik)\n\nCloses #11",
        "parent": "https://github.com/apache/tajo/commit/d0528d1bcb5b57b2287fd435701234cd226e8ac2",
        "repo": "tajo",
        "unit_tests": [
            "TestTupleComparator.java"
        ]
    },
    "tajo_83228ce": {
        "bug_id": "tajo_83228ce",
        "commit": "https://github.com/apache/tajo/commit/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/CHANGES",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -188,6 +188,8 @@ Release 0.11.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-1697: RCFile progress causes NPE occasionally. (jinho)\n+\n     TAJO-1689: Metrics file reporter prints histogram metric without group name.\n     (hyunsik)\n ",
                "raw_url": "https://github.com/apache/tajo/raw/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/CHANGES",
                "sha": "aef8235c12dce4e380e9f26a10dbf9cb1e311e4c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/rcfile/RCFile.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/rcfile/RCFile.java?ref=83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3",
                "deletions": 0,
                "filename": "tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/rcfile/RCFile.java",
                "patch": "@@ -1651,6 +1651,8 @@ public Tuple next() throws IOException {\n \n     @Override\n     public float getProgress() {\n+      if(!inited) return super.getProgress();\n+\n       try {\n         if(!more) {\n           return 1.0f;",
                "raw_url": "https://github.com/apache/tajo/raw/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/rcfile/RCFile.java",
                "sha": "99c727c527259d209dee2d8af9a5a434c7a27633",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java?ref=83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3",
                "deletions": 0,
                "filename": "tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "patch": "@@ -359,6 +359,8 @@ public TextLineSerDe getLineSerde() {\n \n     @Override\n     public float getProgress() {\n+      if(!inited) return super.getProgress();\n+\n       try {\n         if (!reader.isReadable()) {\n           return 1.0f;",
                "raw_url": "https://github.com/apache/tajo/raw/83228ce670370e7a8b2fa74c8683b8f1bd7b0ae3/tajo-storage/tajo-storage-hdfs/src/main/java/org/apache/tajo/storage/text/DelimitedTextFile.java",
                "sha": "4a691df3a75c0f84bbbdac3f171c72775b979e55",
                "status": "modified"
            }
        ],
        "message": "TAJO-1697: RCFile progress causes NPE occasionally. (jinho)\n\nCloses #641",
        "parent": "https://github.com/apache/tajo/commit/1706746cee6dc51f5013aa46f14db0fcfffd1728",
        "repo": "tajo",
        "unit_tests": [
            "TestDelimitedTextFile.java"
        ]
    },
    "tajo_ab0d094": {
        "bug_id": "tajo_ab0d094",
        "commit": "https://github.com/apache/tajo/commit/ab0d0948966ae905bc46419a164fa672af813716",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tajo/blob/ab0d0948966ae905bc46419a164fa672af813716/CHANGES",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=ab0d0948966ae905bc46419a164fa672af813716",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -54,6 +54,8 @@ Release 0.12.0 - unreleased\n \n   SUB TASKS\n \n+    TAJO-1936: NPE when calling the query result REST api(DaeMyung Kang)\n+\n     TAJO-1909: Eliminate remained explicit diamond expressions.\n     (Contributed by Dongkyu Hwangbo, committed by hyunsik)\n ",
                "raw_url": "https://github.com/apache/tajo/raw/ab0d0948966ae905bc46419a164fa672af813716/CHANGES",
                "sha": "4d64ae1ab999ede1b3e6c1ca05547f0745b78458",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tajo/blob/ab0d0948966ae905bc46419a164fa672af813716/tajo-core-tests/src/test/java/org/apache/tajo/ws/rs/resources/TestQueryResultResource.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core-tests/src/test/java/org/apache/tajo/ws/rs/resources/TestQueryResultResource.java?ref=ab0d0948966ae905bc46419a164fa672af813716",
                "deletions": 1,
                "filename": "tajo-core-tests/src/test/java/org/apache/tajo/ws/rs/resources/TestQueryResultResource.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import javax.ws.rs.BadRequestException;\n import javax.ws.rs.client.Client;\n import javax.ws.rs.client.ClientBuilder;\n import javax.ws.rs.client.Entity;\n@@ -58,7 +59,6 @@\n import static org.junit.Assert.*;\n \n public class TestQueryResultResource extends QueryTestCaseBase {\n-\n   private URI restServiceURI;\n   private URI sessionsURI;\n   private URI queriesURI;\n@@ -150,6 +150,17 @@ public void testGetQueryResult() throws Exception {\n     assertNotNull(response.getResultset().getLink());\n   }\n \n+  @Test(expected = BadRequestException.class)\n+  public void testGetQueryResultWithoutSessionId() throws Exception {\n+    String sessionId = generateNewSessionAndGetId();\n+    URI queryIdURI = sendNewQueryResquest(sessionId, \"select * from lineitem\");\n+    URI queryResultURI = new URI(queryIdURI + \"/result\");\n+\n+    GetQueryResultDataResponse response = restClient.target(queryResultURI)\n+            .request()\n+            .get(new GenericType<>(GetQueryResultDataResponse.class));\n+  }\n+\n   @Test\n   public void testGetQueryResultNotFound() throws Exception {\n     String sessionId = generateNewSessionAndGetId();",
                "raw_url": "https://github.com/apache/tajo/raw/ab0d0948966ae905bc46419a164fa672af813716/tajo-core-tests/src/test/java/org/apache/tajo/ws/rs/resources/TestQueryResultResource.java",
                "sha": "2ab1add1ca37fb577f3c707449e9b51d5a184950",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tajo/blob/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResource.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResource.java?ref=ab0d0948966ae905bc46419a164fa672af813716",
                "deletions": 0,
                "filename": "tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResource.java",
                "patch": "@@ -213,6 +213,12 @@ public Response submitQuery(@HeaderParam(tajoSessionIdHeaderName) String session\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       JerseyResourceDelegateContextKey<SubmitQueryRequest> submitQueryRequestKey =\n           JerseyResourceDelegateContextKey.valueOf(submitQueryRequestKeyName, SubmitQueryRequest.class);",
                "raw_url": "https://github.com/apache/tajo/raw/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResource.java",
                "sha": "defb342adeee075d78a46446a98deacd50aa0b28",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tajo/blob/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResultResource.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResultResource.java?ref=ab0d0948966ae905bc46419a164fa672af813716",
                "deletions": 0,
                "filename": "tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResultResource.java",
                "patch": "@@ -155,6 +155,12 @@ public Response getQueryResult(@HeaderParam(QueryResource.tajoSessionIdHeaderNam\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       \n       response = JerseyResourceDelegateUtil.runJerseyResourceDelegate(\n@@ -256,6 +262,12 @@ public Response getQueryResultSet(@HeaderParam(QueryResource.tajoSessionIdHeader\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       JerseyResourceDelegateContextKey<Long> cacheIdKey =\n           JerseyResourceDelegateContextKey.valueOf(cacheIdKeyName, Long.class);",
                "raw_url": "https://github.com/apache/tajo/raw/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/QueryResultResource.java",
                "sha": "243806051a3bbed6b1cdd6b98262a8828b7d26c1",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/tajo/blob/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/SessionsResource.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/SessionsResource.java?ref=ab0d0948966ae905bc46419a164fa672af813716",
                "deletions": 0,
                "filename": "tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/SessionsResource.java",
                "patch": "@@ -177,6 +177,12 @@ public Response removeSession(@PathParam(\"session-id\") String sessionId) {\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       \n       response = JerseyResourceDelegateUtil.runJerseyResourceDelegate(\n@@ -239,6 +245,12 @@ public Response getAllSessionVariables(@PathParam(\"session-id\") String sessionId\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       \n       response = JerseyResourceDelegateUtil.runJerseyResourceDelegate(\n@@ -308,6 +320,12 @@ public Response updateSessionVariables(@PathParam(\"session-id\") String sessionId\n       initializeContext();\n       JerseyResourceDelegateContextKey<String> sessionIdKey =\n           JerseyResourceDelegateContextKey.valueOf(sessionIdKeyName, String.class);\n+\n+      if (sessionId == null || sessionId.isEmpty()) {\n+        return ResourcesUtil.createBadRequestResponse(LOG, \"Session id is required. Please refer the header \" +\n+                QueryResource.tajoSessionIdHeaderName);\n+      }\n+\n       context.put(sessionIdKey, sessionId);\n       JerseyResourceDelegateContextKey<Map> variablesMapKey =\n           JerseyResourceDelegateContextKey.valueOf(variablesKeyName, Map.class);",
                "raw_url": "https://github.com/apache/tajo/raw/ab0d0948966ae905bc46419a164fa672af813716/tajo-core/src/main/java/org/apache/tajo/ws/rs/resources/SessionsResource.java",
                "sha": "b8655e90a55198abe308ce771eed330f861a9c01",
                "status": "modified"
            }
        ],
        "message": "Squashed commit of the following:\n\ncommit 783a4236a265c5c3f743b6cf14878bc0b0857d9e\nAuthor: charsyam <charsyam@charsyamui-MacBook-Pro.local>\nDate:   Sun Oct 18 01:21:08 2015 +0900\n\n    TAJO-1936: Fix NPE\n\n    apply review\n\n    remove unused import\n\n    remove invalid conf",
        "parent": "https://github.com/apache/tajo/commit/1842ee194b2dcb295ebf875a6193e295ac3974a8",
        "repo": "tajo",
        "unit_tests": [
            "TestSessionsResource.java"
        ]
    },
    "tajo_d3727c7": {
        "bug_id": "tajo_d3727c7",
        "commit": "https://github.com/apache/tajo/commit/d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tajo/blob/d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1/CHANGES",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/CHANGES?ref=d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -127,6 +127,9 @@ Release 0.9.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-1020: TajoContainerProxy::assignExecutionBlock causes NPE by race.\n+    (hyunsik)\n+\n     TAJO-986: Task scheduler gets incorrect task size. (Mai Hai Thanh via jihoon)\n \n     TAJO-873: Query status is still RUNNING after session expired.",
                "raw_url": "https://github.com/apache/tajo/raw/d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1/CHANGES",
                "sha": "269c3070465501bb6f11774b4d29ee4f8e46d723",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tajo/blob/d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1/tajo-common/src/main/java/org/apache/tajo/util/KeyValueSet.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tajo/contents/tajo-common/src/main/java/org/apache/tajo/util/KeyValueSet.java?ref=d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1",
                "deletions": 12,
                "filename": "tajo-common/src/main/java/org/apache/tajo/util/KeyValueSet.java",
                "patch": "@@ -37,9 +37,7 @@\n   public static final String TRUE_STR = \"true\";\n   public static final String FALSE_STR = \"false\";\n \n-\tprivate KeyValueSetProto.Builder builder = KeyValueSetProto.newBuilder();\n-\t\n-\t@Expose private Map<String,String> keyVals;\n+  @Expose private Map<String,String> keyVals;\n \t\n \tpublic KeyValueSet() {\n     keyVals = TUtil.newHashMap();\n@@ -221,27 +219,22 @@ public boolean equals(Object object) {\n \t@Override\n   public Object clone() throws CloneNotSupportedException {    \n     KeyValueSet keyValueSet = (KeyValueSet) super.clone();\n-    keyValueSet.builder = KeyValueSetProto.newBuilder();\n     keyValueSet.keyVals = keyVals != null ? new HashMap<String, String>(keyVals) : null;\n     return keyValueSet;\n \t}\n \t\n \t@Override\n \tpublic KeyValueSetProto getProto() {\n-    if (builder == null) {\n-      builder = KeyValueSetProto.newBuilder();\n-    } else {\n-      builder.clear();\n-    }\n+    KeyValueSetProto.Builder builder = KeyValueSetProto.newBuilder();\n \n-    KeyValueProto.Builder kvBuilder;\n+    KeyValueProto.Builder kvBuilder = KeyValueProto.newBuilder();\n     if(this.keyVals != null) {\n       for(Entry<String,String> kv : keyVals.entrySet()) {\n-        kvBuilder = KeyValueProto.newBuilder();\n         kvBuilder.setKey(kv.getKey());\n-\n         kvBuilder.setValue(kv.getValue());\n         builder.addKeyval(kvBuilder.build());\n+\n+        kvBuilder.clear();\n       }\n     }\n     return builder.build();",
                "raw_url": "https://github.com/apache/tajo/raw/d3727c73560f4d4c0fd3d2ead84b577e6f3a51b1/tajo-common/src/main/java/org/apache/tajo/util/KeyValueSet.java",
                "sha": "c1e7092c131cf7dbd2f0e03030ad8367ab0153c4",
                "status": "modified"
            }
        ],
        "message": "TAJO-1020: TajoContainerProxy::assignExecutionBlock causes NPE by race condition.\n\nCloses #127",
        "parent": "https://github.com/apache/tajo/commit/1ab39706ec3fafe4edeef857d49db8dcace9c2d6",
        "repo": "tajo",
        "unit_tests": [
            "TestKeyValueSet.java"
        ]
    }
}