{
    "aries_3ccf0a3": {
        "bug_id": "aries_3ccf0a3",
        "commit": "https://github.com/apache/aries/commit/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/aries/blob/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java?ref=3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4",
                "deletions": 19,
                "filename": "blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "patch": "@@ -63,17 +63,18 @@\n  *\n  * @version $Rev$, $Date$\n  */\n+@SuppressWarnings(\"rawtypes\")\n public class BeanRecipe extends AbstractRecipe {\n-\t\n-\tstatic class UnwrapperedBeanHolder {\n-\t\tfinal Object unwrapperedBean;\n-\t\tfinal BeanRecipe recipe;\n-\t\t\n-\t\tpublic UnwrapperedBeanHolder(Object unwrapperedBean, BeanRecipe recipe) {\n-\t\t\tthis.unwrapperedBean = unwrapperedBean;\n-\t\t\tthis.recipe = recipe;\n-\t\t}\n-\t}\n+\n+    static class UnwrapperedBeanHolder {\n+        final Object unwrapperedBean;\n+        final BeanRecipe recipe;\n+\n+        public UnwrapperedBeanHolder(Object unwrapperedBean, BeanRecipe recipe) {\n+            this.unwrapperedBean = unwrapperedBean;\n+            this.recipe = recipe;\n+        }\n+    }\n \n     public class VoidableCallable implements Callable<Object>, Voidable {\n \n@@ -274,7 +275,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                 }\n             }\n         }\n-\n+        \n         if (factory != null) {\n             // look for instance method on factory object\n             Object factoryObj = factory.create();\n@@ -284,7 +285,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                 try {\n                     factoryObj = ((ReferenceRecipe.ServiceProxyWrapper) factoryObj).convert(new ReifiedType(Object.class));\n                 } catch (Exception e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (factoryObj instanceof UnwrapperedBeanHolder) {\n             \tfactoryObj = wrap((UnwrapperedBeanHolder) factoryObj, Object.class);\n@@ -297,7 +298,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Method, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = invoke(match.getKey(), factoryObj, match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n                 throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + factoryObj.getClass().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n@@ -312,12 +313,12 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Method, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = invoke(match.getKey(), null, match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n-                throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n+                throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n             } else {\n-                throw new ComponentDefinitionException(\"Multiple matching factory methods \" + factoryMethod + \" found on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n+                throw new ComponentDefinitionException(\"Multiple matching factory methods \" + factoryMethod + \" found on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n             }\n         } else {\n             if (getType() == null) {\n@@ -330,18 +331,23 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Constructor, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = newInstance(match.getKey(), match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n-                throw new ComponentDefinitionException(\"Unable to find a matching constructor on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n+                throw new ComponentDefinitionException(\"Unable to find a matching constructor on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n             } else {\n-                throw new ComponentDefinitionException(\"Multiple matching constructors found on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n+                throw new ComponentDefinitionException(\"Multiple matching constructors found on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n             }\n         }\n         \n         return instance;\n     }\n \n+    private String getTypeName() {\n+        Class<?> type = getType();\n+        return type == null ? null : type.getName();\n+    }\n+\n     private Map<Method, List<Object>> findMatchingMethods(Class type, String name, boolean instance, List<Object> args, List<ReifiedType> types) {\n         Map<Method, List<Object>> matches = new HashMap<Method, List<Object>>();\n         // Get constructors",
                "raw_url": "https://github.com/apache/aries/raw/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "sha": "579757e63438ecba38358807f38cd15e994629de",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1353] Adding check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1692109 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/f934967c742b8d9492356df42a498603b67c4e31",
        "repo": "aries",
        "unit_tests": [
            "BeanRecipeTest.java"
        ]
    },
    "aries_5d8bf06": {
        "bug_id": "aries_5d8bf06",
        "commit": "https://github.com/apache/aries/commit/5d8bf069c29c85fd53459d9d51303991cfb114e4",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aries/blob/5d8bf069c29c85fd53459d9d51303991cfb114e4/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java?ref=5d8bf069c29c85fd53459d9d51303991cfb114e4",
                "deletions": 4,
                "filename": "jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "patch": "@@ -83,14 +83,17 @@ private ServiceEventData(){\n     }\n     \n     public ServiceEventData(ServiceEvent serviceEvent) {\n+        @SuppressWarnings(\"rawtypes\")\n         ServiceReference serviceReference = serviceEvent.getServiceReference();\n         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);\n         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);\n-        Bundle bundle = serviceReference.getBundle();\n-        this.bundleId = bundle.getBundleId();\n-        this.bundleLocation = bundle.getLocation();\n-        this.bundleSymbolicName = bundle.getSymbolicName();\n         this.eventType = serviceEvent.getType();\n+        Bundle bundle = serviceReference.getBundle();\n+        if (bundle != null) {\n+            this.bundleId = bundle.getBundleId();\n+            this.bundleLocation = bundle.getLocation();\n+            this.bundleSymbolicName = bundle.getSymbolicName();\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/aries/raw/5d8bf069c29c85fd53459d9d51303991cfb114e4/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "sha": "d6c4bc742e5799d3da4a7253d67320032f37f983",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1468] Fixing NPE in case bundle is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1718800 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/ebebf42249010d8414d549d59652ddf900104dfb",
        "repo": "aries",
        "unit_tests": [
            "ServiceEventDataTest.java"
        ]
    },
    "aries_747408d": {
        "bug_id": "aries_747408d",
        "commit": "https://github.com/apache/aries/commit/747408d08adb76c8f140a4fb211c69fff1a2b966",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries/blob/747408d08adb76c8f140a4fb211c69fff1a2b966/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java?ref=747408d08adb76c8f140a4fb211c69fff1a2b966",
                "deletions": 2,
                "filename": "subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "patch": "@@ -19,6 +19,7 @@\n \r\n import org.apache.aries.subsystem.obr.internal.AbstractRequirement;\r\n import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;\r\n+import org.osgi.framework.namespace.BundleNamespace;\r\n import org.osgi.resource.Capability;\r\n import org.osgi.resource.Namespace;\r\n import org.osgi.resource.Resource;\r\n@@ -63,11 +64,17 @@ public boolean matches(Capability capability) {\n \t\t/* (1) The Felix OBR specific \"mandatory:<*\" syntax must be stripped out of the filter.\r\n \t\t * (2) The namespace must be translated.\r\n \t\t */\r\n-\t\tresult.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, requirement.getFilter()\r\n+\t\tString namespace = getNamespace();\r\n+\t\tString filter = requirement.getFilter()\r\n \t\t\t\t.replaceAll(\"\\\\(mandatory\\\\:\\\\<\\\\*[^\\\\)]*\\\\)\", \"\")\r\n \t\t\t\t.replaceAll(\"\\\\(service\\\\=[^\\\\)]*\\\\)\", \"\")\r\n \t\t\t\t.replaceAll(\"objectclass\", \"objectClass\")\r\n-\t\t\t\t.replaceAll(requirement.getName() + '=', getNamespace() + '='));\r\n+\t\t\t\t.replaceAll(requirement.getName() + '=', namespace + '=');\r\n+\t\tif (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {\r\n+\t\t\tfilter = filter.replaceAll(\"symbolicname\", namespace)\r\n+\t\t\t\t\t.replaceAll(\"version\", BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE);\r\n+\t\t}\r\n+\t\tresult.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, filter);\r\n \t\tresult.put(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, requirement.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY);\r\n \t\tresult.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, requirement.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE);\r\n \t\treturn Collections.unmodifiableMap(result);\r",
                "raw_url": "https://github.com/apache/aries/raw/747408d08adb76c8f140a4fb211c69fff1a2b966/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "sha": "75c156e14d9646121388b77020e1bf0cfc105a90",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1522] NullPointerException (NPE) when creating a RequireBundleHeader using the filter provided by FelixRequirementAdapter.\n\nWhen adapting a requirement in the \"bundle\" namespace from OBR, the adapter must replace \"symbolicname\" with \"osgi.wiring.bundle\" and \"version\" with \"bundle-version\" in the filter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1738988 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/7b902515666570a50f70ecd150f685a5151bf4ca",
        "repo": "aries",
        "unit_tests": [
            "FelixRequirementAdapterTest.java"
        ]
    },
    "aries_c2f094a": {
        "bug_id": "aries_c2f094a",
        "commit": "https://github.com/apache/aries/commit/c2f094a717b61645c0551eed10eedff47a6920bc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aries/blob/c2f094a717b61645c0551eed10eedff47a6920bc/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java?ref=c2f094a717b61645c0551eed10eedff47a6920bc",
                "deletions": 1,
                "filename": "jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "patch": "@@ -111,7 +111,8 @@ public void add(final BundleContext ctx, ServiceKey k)\n       BundleContext systemBundle = AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {\n         public BundleContext run()\n         {\n-          return ctx.getBundle(0).getBundleContext();\n+        \t Bundle system = ctx.getBundle(0); \n+        \t return system == null ? null : system.getBundleContext(); \n         }\n       });\n       if (systemBundle == null) systemBundle = ctx;",
                "raw_url": "https://github.com/apache/aries/raw/c2f094a717b61645c0551eed10eedff47a6920bc/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "sha": "b2e4db0341e05b121e14590e53827f6c1a4322c6",
                "status": "modified"
            }
        ],
        "message": "Aries-971: ServiceHelper.CacheClearoutListener.add(BundleContext, ServiceKey) causes NPE if system bundle is hidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1413680 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/03c135f43ca38d9627708610a976df44b7cab584",
        "repo": "aries",
        "unit_tests": [
            "ServiceHelperTest.java"
        ]
    },
    "aries_c7411e8": {
        "bug_id": "aries_c7411e8",
        "commit": "https://github.com/apache/aries/commit/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java?ref=c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
                "deletions": 10,
                "filename": "proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "patch": "@@ -18,8 +18,6 @@\n  */\n package org.apache.aries.proxy.impl;\n \n-import java.util.Dictionary;\n-import java.util.Hashtable;\n \n import org.apache.aries.proxy.ProxyManager;\n import org.osgi.framework.BundleActivator;\n@@ -55,14 +53,7 @@ public void start(BundleContext context)\n         //if ASM is available then we should also try weaving\n         Class<?> cls = Class.forName(\"org.apache.aries.proxy.impl.weaving.ProxyWeavingHook\",\n         \t\ttrue, ProxyManagerActivator.class.getClassLoader());\n-        Dictionary<String,String> props = new Hashtable<String,String>();\n-        // SubsystemResource.java also uses this constant. \n-        //   While it could be turned into a static final constant, note that this\n-        //   is also a non-standard workaround in the absence of a solution in the spec. \n-        // See the associated OSGi spec bug. \n-        props.put(\"osgi.woven.packages\", \"org.apache.aries.proxy.weaving,org.apache.aries.proxy\");\n-        context.registerService(\"org.osgi.framework.hooks.weaving.WeavingHook\",\n-            cls.getConstructor(BundleContext.class).newInstance(context), props);\n+        cls.getConstructor(BundleContext.class).newInstance(context);\n       } catch (Throwable t) {\n         //We don't care about this, we just won't have registered the hook\n       }",
                "raw_url": "https://github.com/apache/aries/raw/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "sha": "40b140f758ec04f3bcfda9c250be3429e8106d4f",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/aries/blob/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java?ref=c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
                "deletions": 7,
                "filename": "proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "patch": "@@ -19,6 +19,8 @@\n package org.apache.aries.proxy.impl.weaving;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Dictionary;\r\n+import java.util.Hashtable;\r\n import java.util.List;\r\n import java.util.regex.Pattern;\r\n \r\n@@ -33,6 +35,7 @@\n import org.osgi.framework.hooks.weaving.WeavingException;\r\n import org.osgi.framework.hooks.weaving.WeavingHook;\r\n import org.osgi.framework.hooks.weaving.WovenClass;\r\n+import org.osgi.framework.wiring.BundleWiring;\r\n import org.osgi.util.tracker.ServiceTracker;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -60,20 +63,34 @@\n   private final ServiceTracker controllers;\r\n \r\n   public ProxyWeavingHook(BundleContext context) {\r\n-    enabled = parseMatchers(context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null, WEAVING_ENABLED_CLASSES_DEFAULT);\r\n+    String enabledProp = context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null;\r\n+    enabled = parseMatchers(enabledProp, WEAVING_ENABLED_CLASSES_DEFAULT);\r\n     disabled = parseMatchers(context != null ? context.getProperty(WEAVING_DISABLED_CLASSES) : null, WEAVING_DISABLED_CLASSES_DEFAULT);\r\n     controllers = new ServiceTracker(context, ProxyWeavingController.class.getName(), null);\r\n     controllers.open();\r\n+    \r\n+    if (!\"none\".equals(enabledProp)) {\r\n+        Dictionary<String,String> props = new Hashtable<String,String>();\r\n+        // SubsystemResource.java also uses this constant. \r\n+        //   While it could be turned into a static final constant, note that this\r\n+        //   is also a non-standard workaround in the absence of a solution in the spec. \r\n+        // See the associated OSGi spec bug. \r\n+        props.put(\"osgi.woven.packages\", \"org.apache.aries.proxy.weaving,org.apache.aries.proxy\");\r\n+        context.registerService(\"org.osgi.framework.hooks.weaving.WeavingHook\", this, props);\r\n+    }\r\n   }\r\n \r\n   public final void weave(WovenClass wovenClass) {\r\n+    BundleWiring bw = wovenClass.getBundleWiring();\r\n     \r\n-    Bundle b = wovenClass.getBundleWiring().getBundle();\r\n-    \r\n-    if(b.getBundleId() == 0 || \r\n-        b.getSymbolicName().startsWith(\"org.apache.aries.proxy\") ||\r\n-        b.getSymbolicName().startsWith(\"org.apache.aries.util\")) {\r\n-      return;\r\n+    if (bw != null) {\r\n+        Bundle b = bw.getBundle();\r\n+        \r\n+        if(b.getBundleId() == 0 || \r\n+            b.getSymbolicName().startsWith(\"org.apache.aries.proxy\") ||\r\n+            b.getSymbolicName().startsWith(\"org.apache.aries.util\")) {\r\n+          return;\r\n+        }\r\n     }\r\n \r\n     if (!isEnabled(wovenClass.getClassName()) || isDisabled(wovenClass.getClassName())) {\r",
                "raw_url": "https://github.com/apache/aries/raw/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "sha": "e0f8fd8e4102355165c3eba173db7969ede9d346",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1126] Prevent an NPE in ProxyWeavingHook and allow a setting to bypass it completely\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1533600 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/c8a8b8fcc78498994d9f012ff189eb8fca89f3fb",
        "repo": "aries",
        "unit_tests": [
            "ProxyWeavingHookTest.java"
        ]
    }
}