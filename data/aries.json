{
    "aries_016463f": {
        "bug_id": "aries_016463f",
        "commit": "https://github.com/apache/aries/commit/016463ffc13aa95ee8bc781bc7be07135c942c2f",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java",
                "patch": "@@ -70,4 +70,13 @@ public String getName() {\n \tpublic String getValue() {\n \t\treturn value;\n \t}\n+\t\n+\tpublic String toString() {\n+\t\treturn new StringBuilder(getClass().getName())\n+\t\t.append(\": name=\")\n+\t\t.append(name)\n+\t\t.append(\", value=\")\n+\t\t.append(value)\n+\t\t.toString();\n+\t}\n }",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/AbstractHeader.java",
                "sha": "faea2d8ae0cc7a06d37110254bfb30d7f0d2e6d5",
                "status": "modified"
            },
            {
                "additions": 62,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 40,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "patch": "@@ -273,8 +273,7 @@ public AriesSubsystem() throws Exception {\n \t\t\t}\r\n \t\t\t// TODO Escaping 'this' reference.\r\n \t\t\ts.add(this);\r\n-\t\t\t// TODO What the heck is going on here? Don't we need to add the bundle revision\r\n-\t\t\t// as a constituent as well?\r\n+\t\t\tconstituents.add(br);\r\n \t\t}\r\n \t\t// TODO End proof of concept.\r\n \t\tLOGGER.debug(LOG_EXIT, \"init\");\r\n@@ -312,17 +311,17 @@ public AriesSubsystem(String location, InputStream content, AriesSubsystem paren\n \t\t\tthrow new SubsystemException(e);\r\n \t\t}\r\n \t\tenvironment = new SubsystemEnvironment(this);\r\n-\t\tif (archive.getSubsystemManifest() == null) {\r\n-\t\t\t// TODO Since it's optional to use the subsystem URI, it might be\r\n-\t\t\t// better to create the URI in a try/catch block and throw an\r\n-\t\t\t// exception with a message indicating we received a subsystem\r\n-\t\t\t// with no manifest and no subsystem URI.\r\n-\t\t\tarchive.setSubsystemManifest(new SubsystemManifest(\r\n-\t\t\t\t\turi.getSymbolicName(), \r\n-\t\t\t\t\turi.getVersion(), \r\n-\t\t\t\t\tarchive.getResources()));\r\n-\t\t}\r\n-\t\tregion = createRegion(getSymbolicName() + ';' + getVersion() + ';' + getType() + ';' + getSubsystemId());\r\n+\t\t// Make sure the relevant headers are derived, if absent.\r\n+\t\tarchive.setSubsystemManifest(new SubsystemManifest(\r\n+\t\t\t\tarchive.getSubsystemManifest(),\r\n+\t\t\t\turi == null ? null : uri.getSymbolicName(), \r\n+\t\t\t\turi == null ? null : uri.getVersion(), \r\n+\t\t\t\tarchive.getResources()));\r\n+\t\t// Unscoped subsystems don't get their own region. They share the region with their scoped parent.\r\n+\t\tif (isFeature())\r\n+\t\t\tregion = parents.get(0).region;\r\n+\t\telse\r\n+\t\t\tregion = createRegion(getSymbolicName() + ';' + getVersion() + ';' + getType() + ';' + getSubsystemId());\r\n \t}\r\n \t\r\n \tpublic AriesSubsystem(SubsystemArchive archive, AriesSubsystem parent) throws Exception {\r\n@@ -338,7 +337,11 @@ public AriesSubsystem(SubsystemArchive archive, AriesSubsystem parent) throws Ex\n \t\tdirectory = new File(parent.directory, directoryName);\r\n \t\tenvironment = new SubsystemEnvironment(this);\r\n \t\tparents.add(parent);\r\n-\t\tregion = createRegion(getSymbolicName() + ';' + getVersion() + ';' + getType() + ';' + getSubsystemId());\r\n+\t\t// Unscoped subsystems don't get their own region. They share the region with their scoped parent.\r\n+\t\tif (isFeature())\r\n+\t\t\tregion = parents.get(0).region;\r\n+\t\telse\r\n+\t\t\tregion = createRegion(getSymbolicName() + ';' + getVersion() + ';' + getType() + ';' + getSubsystemId());\r\n \t}\r\n \t\r\n \tpublic SubsystemArchive getArchive() {\r\n@@ -349,6 +352,10 @@ public SubsystemArchive getArchive() {\n \tpublic BundleContext getBundleContext() {\r\n \t\tif (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLED).contains(getState()))\r\n \t\t\treturn null;\r\n+\t\t// Features, and unscoped subsystems in general, do not have their own region context\r\n+\t\t// bundle but rather share with the scoped subsystem in the same region.\r\n+\t\tif (isFeature())\r\n+\t\t\treturn parents.get(0).getBundleContext();\r\n \t\treturn region.getBundle(RegionContextBundleHelper.SYMBOLICNAME_PREFIX + id, RegionContextBundleHelper.VERSION).getBundleContext();\r\n \t}\r\n \t\r\n@@ -366,15 +373,7 @@ public BundleContext getBundleContext() {\n \r\n \t@Override\r\n \tpublic synchronized Collection<Resource> getConstituents() {\r\n-\t\tCollection<Resource> resources = new HashSet<Resource>();\r\n-\t\tif (isRoot() || isApplication() || isComposite()) {\r\n-\t\t\tSet<Long> bundleIds = region.getBundleIds();\r\n-\t\t\tBundleContext context = getBundleContext();\r\n-\t\t\tfor (Long bundleId : bundleIds)\r\n-\t\t\t\tresources.add(context.getBundle(bundleId).adapt(BundleRevision.class));\r\n-\t\t}\r\n-\t\tresources.addAll(constituents);\r\n-\t\treturn Collections.unmodifiableCollection(resources);\r\n+\t\treturn Collections.unmodifiableCollection(constituents);\r\n \t}\r\n \r\n \t@Override\r\n@@ -548,7 +547,7 @@ public synchronized void start() throws SubsystemException {\n \t\t\t\tcoordination.end();\r\n \t\t\t} catch (CoordinationException e) {\r\n \t\t\t\tLOGGER.error(\r\n-\t\t\t\t\t\t\"An error occurred while starting in a resource in subsystem \"\r\n+\t\t\t\t\t\t\"An error occurred while starting a resource in subsystem \"\r\n \t\t\t\t\t\t\t\t+ this, e);\r\n \t\t\t\tsetState(State.RESOLVED);\r\n \t\t\t}\r\n@@ -619,7 +618,8 @@ else if (getState() == State.ACTIVE) {\n \t\tdeleteFile(directory);\r\n \t\tsetState(State.UNINSTALLED);\r\n \t\tActivator.getInstance().getSubsystemServiceRegistrar().unregister(this);\r\n-\t\tRegionContextBundleHelper.uninstallRegionContextBundle(this);\r\n+\t\tif (!isFeature())\r\n+\t\t\tconstituents.remove(RegionContextBundleHelper.uninstallRegionContextBundle(this));\r\n \t}\r\n \t\r\n \tvoid bundleChanged(BundleEvent event) {\r\n@@ -650,7 +650,8 @@ Region getRegion() {\n \t}\r\n \t\r\n \tsynchronized void install() throws Exception {\r\n-\t\tRegionContextBundleHelper.installRegionContextBundle(this);\r\n+\t\tif (!isFeature())\r\n+\t\t\tconstituents.add(RegionContextBundleHelper.installRegionContextBundle(this));\r\n \t\tActivator.getInstance().getSubsystemServiceRegistrar().register(this);\r\n \t\tList<Resource> contentResources = new ArrayList<Resource>();\r\n \t\tList<Resource> transitiveDependencies = new ArrayList<Resource>();\r\n@@ -717,13 +718,29 @@ else if (getState() != State.ACTIVE) {\n \t\t\treturn;\r\n \t\t}\r\n \t\tsetState(State.STOPPING);\r\n-\t\tfor (Resource resource : constituents) {\r\n+\t\t// Stop child subsystems first.\r\n+\t\tfor (AriesSubsystem subsystem : children) {\r\n \t\t\ttry {\r\n-\t\t\t\tstopResource(resource);\r\n-\t\t\t} catch (Exception e) {\r\n+\t\t\t\tstopResource(subsystem);\r\n+\t\t\t}\r\n+\t\t\tcatch (Exception e) {\r\n \t\t\t\tLOGGER.error(\"An error occurred while stopping resource \"\r\n-\t\t\t\t\t\t+ resource + \" of subsystem \" + this, e);\r\n-\t\t\t\t// TODO Should FAILED go out for each failure?\r\n+\t\t\t\t\t\t+ subsystem + \" of subsystem \" + this, e);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t// For non-root subsystems, stop any remaining constituents.\r\n+\t\tif (!isRoot()){\r\n+\t\t\tfor (Resource resource : constituents) {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\t// Don't stop the region context bundle.\r\n+\t\t\t\t\tif (ResourceHelper.getSymbolicNameAttribute(resource).startsWith(RegionContextBundleHelper.SYMBOLICNAME_PREFIX))\r\n+\t\t\t\t\t\tcontinue;\r\n+\t\t\t\t\tstopResource(resource);\r\n+\t\t\t\t} catch (Exception e) {\r\n+\t\t\t\t\tLOGGER.error(\"An error occurred while stopping resource \"\r\n+\t\t\t\t\t\t\t+ resource + \" of subsystem \" + this, e);\r\n+\t\t\t\t\t// TODO Should FAILED go out for each failure?\r\n+\t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\t// TODO Can we automatically assume it actually is resolved?\r\n@@ -823,11 +840,6 @@ private AriesSubsystem getProvisionTo(Resource resource, boolean transitive) {\n \t\t\twhile (!provisionTo.parents.isEmpty())\r\n \t\t\t\tprovisionTo = provisionTo.parents.get(0);\r\n \t\t}\r\n-\t\telse {\r\n-\t\t\twhile (provisionTo.isFeature())\r\n-\t\t\t\t// Feature resources should be provisioned into the first parent that's not a feature.\r\n-\t\t\t\tprovisionTo = provisionTo.parents.get(0);\r\n-\t\t}\r\n \t\treturn provisionTo;\r\n \t}\r\n \r\n@@ -842,7 +854,7 @@ private void installBundleResource(Resource resource, Coordination coordination,\n \t\t\t}\r\n \t\t\telse {\r\n \t\t\t\tInputStream content = ((RepositoryContent)resource).getContent();\r\n-\t\t\t\tString location = provisionTo.getSubsystemId() + '@' + provisionTo.getSymbolicName() + '@' + content;\r\n+\t\t\t\tString location = provisionTo.getSubsystemId() + \"@\" + provisionTo.getSymbolicName() + \"@\" + ResourceHelper.getSymbolicNameAttribute(resource);\r\n \t\t\t\tBundle bundle = provisionTo.region.installBundle(location, content);\r\n \t\t\t\trevision = bundle.adapt(BundleRevision.class);\r\n \t\t\t}\r\n@@ -854,15 +866,18 @@ private void installBundleResource(Resource resource, Coordination coordination,\n \t\t\t\tresourceToSubsystems.put(revision, subsystems);\r\n \t\t\t}\r\n \t\t\tsubsystems.add(this);\r\n+\t\t\t\r\n \t\t}\r\n \t\tfinal AriesSubsystem constituentOf = getConstituentOf(resource, provisionTo, transitive);\r\n+\t\tconstituentOf.constituents.add(revision);\r\n \t\tcoordination.addParticipant(new Participant() {\r\n \t\t\tpublic void ended(Coordination coordination) throws Exception {\r\n-\t\t\t\tconstituentOf.constituents.add(revision);\r\n+\t\t\t\t// noop\r\n \t\t\t}\r\n \t\r\n \t\t\tpublic void failed(Coordination coordination) throws Exception {\r\n \t\t\t\tsynchronized (resourceToSubsystems) {\r\n+\t\t\t\t\tconstituentOf.constituents.remove(revision);\r\n \t\t\t\t\tSet<AriesSubsystem> subsystems = resourceToSubsystems.get(revision);\r\n \t\t\t\t\tsubsystems.remove(AriesSubsystem.this);\r\n \t\t\t\t\tif (subsystems.isEmpty()) {\r\n@@ -880,6 +895,8 @@ private void installResource(Resource resource, Coordination coordination, boole\n \t\t\tinstallSubsystemResource(resource, coordination, transitive);\r\n \t\telse if (ResourceConstants.IDENTITY_TYPE_BUNDLE.equals(type))\r\n \t\t\tinstallBundleResource(resource, coordination, transitive);\r\n+\t\telse if (ResourceConstants.IDENTITY_TYPE_FRAGMENT.equals(type))\r\n+\t\t\tinstallBundleResource(resource, coordination, transitive);\r\n \t\telse\r\n \t\t\tthrow new SubsystemException(\"Unsupported resource type: \" + type);\r\n \t}\r\n@@ -986,6 +1003,8 @@ else if (isComposite()) {\n \r\n \tprivate void startBundleResource(Resource resource, Coordination coordination) throws BundleException {\r\n \t\tfinal Bundle bundle = ((BundleRevision)resource).getBundle();\r\n+\t\tif ((bundle.getState() & (Bundle.STARTING | Bundle.ACTIVE)) != 0)\r\n+\t\t\treturn;\r\n \t\tbundle.start(Bundle.START_TRANSIENT);\r\n \t\tif (coordination == null)\r\n \t\t\treturn;\r\n@@ -1003,10 +1022,13 @@ public void failed(Coordination coordination) throws Exception {\n \tprivate void startResource(Resource resource, Coordination coordination) throws BundleException, IOException {\r\n \t\tString type = ResourceHelper.getTypeAttribute(resource);\r\n \t\t// TODO Add to constants.\r\n-\t\tif (\"osgi.subsystem\".equals(type))\r\n+\t\tif (SubsystemConstants.IDENTITY_TYPE_SUBSYSTEM.equals(type))\r\n \t\t\tstartSubsystemResource(resource, coordination);\r\n \t\telse if (ResourceConstants.IDENTITY_TYPE_BUNDLE.equals(type))\r\n \t\t\tstartBundleResource(resource, coordination);\r\n+\t\telse if (ResourceConstants.IDENTITY_TYPE_FRAGMENT.equals(type)) {\r\n+\t\t\t// Fragments are not started.\r\n+\t\t}\r\n \t\telse\r\n \t\t\tthrow new SubsystemException(\"Unsupported resource type: \" + type);\r\n \t}\r\n@@ -1034,7 +1056,7 @@ private void stopBundleResource(Resource resource) throws BundleException {\n \tprivate void stopResource(Resource resource) throws BundleException, IOException {\r\n \t\tString type = ResourceHelper.getTypeAttribute(resource);\r\n \t\t// TODO Add to constants.\r\n-\t\tif (\"osgi.subsystem\".equals(type))\r\n+\t\tif (SubsystemConstants.IDENTITY_TYPE_SUBSYSTEM.equals(type))\r\n \t\t\tstopSubsystemResource(resource);\r\n \t\telse if (ResourceConstants.IDENTITY_TYPE_BUNDLE.equals(type))\r\n \t\t\tstopBundleResource(resource);\r",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "sha": "bba737b1f15bbfa6ac7c4a89a4fab75a91a9eeda",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 4,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java",
                "patch": "@@ -12,17 +12,18 @@\n import org.osgi.framework.BundleException;\r\n import org.osgi.framework.Constants;\r\n import org.osgi.framework.Version;\r\n+import org.osgi.framework.wiring.BundleRevision;\r\n \r\n public class RegionContextBundleHelper {\r\n \tpublic static final String SYMBOLICNAME_PREFIX = \"org.osgi.service.subsystem.region.context.\";\r\n \tpublic static final Version VERSION = Version.parseVersion(\"1.0.0\");\r\n \t\r\n-\tpublic static void installRegionContextBundle(AriesSubsystem subsystem) throws BundleException, IOException {\r\n+\tpublic static BundleRevision installRegionContextBundle(AriesSubsystem subsystem) throws BundleException, IOException {\r\n \t\tString symbolicName = SYMBOLICNAME_PREFIX + subsystem.getSubsystemId();\r\n \t\tString location = subsystem.getLocation() + '/' + subsystem.getSubsystemId();\r\n \t\tBundle b = subsystem.getRegion().getBundle(symbolicName, VERSION);\r\n \t\tif (b != null)\r\n-\t\t\treturn;\r\n+\t\t\treturn b.adapt(BundleRevision.class);\r\n \t\tBundle t = subsystem.getRegion().installBundle(location + \"/temp\", createTempBundle(symbolicName));\r\n \t\ttry {\r\n \t\t\tt.start();\r\n@@ -36,19 +37,21 @@ public static void installRegionContextBundle(AriesSubsystem subsystem) throws B\n \t\t}\r\n \t\t// The region context bundle must be started persistently.\r\n \t\tb.start();\r\n+\t\treturn b.adapt(BundleRevision.class);\r\n \t}\r\n \t\r\n-\tpublic static void uninstallRegionContextBundle(AriesSubsystem subsystem) {\r\n+\tpublic static BundleRevision uninstallRegionContextBundle(AriesSubsystem subsystem) {\r\n \t\tString symbolicName = SYMBOLICNAME_PREFIX + subsystem.getSubsystemId();\r\n \t\tBundle bundle = subsystem.getRegion().getBundle(symbolicName, VERSION);\r\n \t\tif (bundle == null)\r\n-\t\t\treturn;\r\n+\t\t\tthrow new IllegalStateException(\"Missing region context bundle: \" + symbolicName);\r\n \t\ttry {\r\n \t\t\tbundle.uninstall();\r\n \t\t}\r\n \t\tcatch (BundleException e) {\r\n \t\t\t// TODO Should we really eat this? At least log it?\r\n \t\t}\r\n+\t\treturn bundle.adapt(BundleRevision.class);\r\n \t}\r\n \t\r\n \tprivate static InputStream createRegionContextBundle(String symbolicName) throws IOException {\r",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RegionContextBundleHelper.java",
                "sha": "5cd0506e3484afb1ed63a4d0ff23eb854f0781c3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BasicTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BasicTest.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 2,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BasicTest.java",
                "patch": "@@ -115,7 +115,7 @@ public void testEmptyFeature() throws Exception {\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n-\t\t\t\tuninstallSubsystem(emptyFeature);\n+\t\t\t\tuninstallUnscopedSubsystem(emptyFeature);\n \t\t\t}\n \t\t\tcatch (AssertionError e) {\n \t\t\t\tif (error == null)\n@@ -152,7 +152,7 @@ public void testEmptySubsystem() throws Exception {\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n-\t\t\t\tuninstallSubsystem(emptySubsystem);\n+\t\t\t\tuninstallScopedSubsystem(emptySubsystem);\n \t\t\t}\n \t\t\tcatch (AssertionError e) {\n \t\t\t\tif (error == null)",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BasicTest.java",
                "sha": "34f603ee0d3f2fa5eac6bc4ae7e3bfc990ce07f8",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 5,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "patch": "@@ -112,7 +112,7 @@ public void testFeature1() throws Exception {\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n-\t\t\t\tuninstallSubsystem(feature1);\n+\t\t\t\tuninstallUnscopedSubsystem(feature1);\n \t\t\t\tif (feature2 != null) {\n \t\t\t\t\tassertEvent(feature2, Subsystem.State.UNINSTALLING, 5000);\n \t\t\t\t\tassertEvent(feature2, Subsystem.State.UNINSTALLED, 5000);\n@@ -135,7 +135,7 @@ public void testPersistence() throws Exception {\n \t\ttry {\n \t\t\tassertFeature3(feature3Before);\n \t\t\t// Uninstall then reinstall the subsystem for a more robust test of the subsystem ID persistence.\n-\t\t\tuninstallSubsystem(feature3Before);\n+\t\t\tuninstallUnscopedSubsystem(feature3Before);\n \t\t\tfeature3Before = installSubsystemFromFile(\"feature3.ssa\");\n \t\t\tassertLastId(2);\n \t\t\tassertFeature3(feature3Before);\n@@ -156,7 +156,7 @@ public void testPersistence() throws Exception {\n \t\t\ttry {\n \t\t\t\tif (feature3After != null) {\n \t\t\t\t\tstopSubsystem(feature3After);\n-\t\t\t\t\tuninstallSubsystem(feature3After);\n+\t\t\t\t\tuninstallUnscopedSubsystem(feature3After);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (AssertionError e) {\n@@ -178,7 +178,7 @@ public void testSharedContent() throws Exception {\n \t\t\twhile (!feature2.getState().equals(Subsystem.State.INSTALLED))\n \t\t\t\tThread.sleep(100);\n \t\t\tassertConstituent(feature2, \"org.apache.aries.subsystem.itests.tb3\", Version.parseVersion(\"1.0.0\"), ResourceConstants.IDENTITY_TYPE_BUNDLE);\n-\t\t\tuninstallSubsystem(feature2);\n+\t\t\tuninstallUnscopedSubsystem(feature2);\n \t\t\tassertNotChild(feature1, feature2);\n \t\t\tassertConstituent(feature1, \"org.apache.aries.subsystem.itests.tb3\", Version.parseVersion(\"1.0.0\"), ResourceConstants.IDENTITY_TYPE_BUNDLE);\n \t\t}\n@@ -188,7 +188,7 @@ public void testSharedContent() throws Exception {\n \t\t}\n \t\tfinally {\n \t\t\ttry {\n-\t\t\t\tuninstallSubsystem(feature1);\n+\t\t\t\tuninstallUnscopedSubsystem(feature1);\n \t\t\t}\n \t\t\tcatch (AssertionError e) {\n \t\t\t\tif (error == null)",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "sha": "307ea3b071534c3e8c23da2e8c2df89f74ecf490",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 1,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java",
                "patch": "@@ -77,7 +77,7 @@ public void testReturnExistingSubsystemWithSameLocation() throws Exception {\n \t\t\tassertSame(subsystem1, subsystem2);\n \t\t}\n \t\tfinally {\n-\t\t\tuninstallSubsystem(subsystem1);\n+\t\t\tuninstallUnscopedSubsystem(subsystem1);\n \t\t}\n \t}\n }",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/InstallTest.java",
                "sha": "b20c662c2262a88ba9f78e5b02ba78781f3ade1c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/aries/blob/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java?ref=016463ffc13aa95ee8bc781bc7be07135c942c2f",
                "deletions": 2,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "patch": "@@ -494,18 +494,26 @@ protected void stopSubsystem(Subsystem subsystem) throws Exception {\n \t\tassertState(State.RESOLVED, subsystem);\r\n \t}\r\n \t\r\n+\tprotected void uninstallScopedSubsystem(Subsystem subsystem) throws Exception {\r\n+\t\tBundle b = getRegionContextBundle(subsystem);\r\n+\t\tuninstallSubsystem(subsystem);\r\n+\t\tassertEquals(\"Region context bundle not uninstalled\", Bundle.UNINSTALLED, b.getState());\r\n+\t}\r\n+\t\r\n \tprotected void uninstallSubsystem(Subsystem subsystem) throws Exception {\r\n \t\tassertState(EnumSet.of(State.INSTALLED, State.RESOLVED), subsystem);\r\n \t\tsubsystemEvents.clear();\r\n \t\tCollection<Subsystem> parents = subsystem.getParents();\r\n-\t\tBundle b = getRegionContextBundle(subsystem);\r\n \t\tsubsystem.uninstall();\r\n \t\tassertEvent(subsystem, State.UNINSTALLING, 5000);\r\n \t\tassertEvent(subsystem, State.UNINSTALLED, 5000);\r\n \t\tassertState(State.UNINSTALLED, subsystem);\r\n-\t\tassertEquals(\"Region context bundle not uninstalled\", Bundle.UNINSTALLED, b.getState());\r\n \t\tfor (Subsystem parent : parents)\r\n \t\t\tassertNotChild(parent, subsystem);\r\n \t\tassertNotDirectory(subsystem);\r\n \t}\r\n+\t\r\n+\tprotected void uninstallUnscopedSubsystem(Subsystem subsystem) throws Exception {\r\n+\t\tuninstallSubsystem(subsystem);\r\n+\t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/016463ffc13aa95ee8bc781bc7be07135c942c2f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "sha": "89eca537f68026b67d88462706e5dd0b417c785b",
                "status": "modified"
            }
        ],
        "message": "ARIES-825: Update subsystems to latest Subsystem, Resolver, and Repository APIs.\n\n(1) added toString() in AbstractHeader\n(2) fixed issue where Subsystem-Content manifest header was not being derived when subsystem has manifest with no content header\n(3) fixed issue where feature constituents were being assigned to the scoped subsystem within the same region\n(4) fixed issue where region context bundles were being generated for features\n(5) fixed NPE issue in getBundleContext() for features\n(6) fixed issue with generation of unique location when installing bundle resources\n(7) now supports resource type osgi.fragment on subsystem lifecycle operations\n(8) fixed issue where already started bundles were being called with start(START_TRANSIENT)\n(9) root subsystem will now only stop child subsystems\n(10) child subsystems should be stopped before any other constituents for all subsystems\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1243908 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/c63b63790d92350a2b285f1c2ad4d716af26251b",
        "repo": "aries",
        "unit_tests": [
            "AriesSubsystemTest.java"
        ]
    },
    "aries_03c135f": {
        "bug_id": "aries_03c135f",
        "commit": "https://github.com/apache/aries/commit/03c135f43ca38d9627708610a976df44b7cab584",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/aries/blob/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java?ref=03c135f43ca38d9627708610a976df44b7cab584",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "patch": "@@ -93,12 +93,24 @@ private void handleInstalledEvent(BundleEvent event) {\n \t\t\thandleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);\r\n \t}\r\n \t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n \tprivate void handleUninstalledEvent(BundleEvent event) {\r\n \t\tBundle bundle = event.getBundle();\r\n \t\tBundleRevision revision = bundleToRevision.remove(bundle);\r\n \t\tif (ThreadLocalSubsystem.get() != null)\r\n \t\t\treturn;\r\n-\t\tfor (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision)))\r\n+\t\tCollection<BasicSubsystem> subsystems;\r\n+\t\tif (revision == null) {\r\n+\t\t\t// The bundle was installed while the bundle event hook was unregistered.\r\n+\t\t\tObject[] o = Activator.getInstance().getSubsystems().getSubsystemsByBundle(bundle);\r\n+\t\t\tif (o == null)\r\n+\t\t\t\treturn;\r\n+\t\t\trevision = (BundleRevision)o[0];\r\n+\t\t\tsubsystems = (Collection<BasicSubsystem>)o[1];\r\n+\t\t}\r\n+\t\telse\r\n+\t\t\tsubsystems = Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision));\r\n+\t\tfor (BasicSubsystem subsystem : subsystems)\r\n \t\t\tResourceUninstaller.newInstance(revision, subsystem).uninstall();\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "sha": "b283e5d49a7205f557116bdbb0e2161256668529",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/aries/blob/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java?ref=03c135f43ca38d9627708610a976df44b7cab584",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java",
                "patch": "@@ -108,6 +108,14 @@ public int hashCode() {\n \t\tpublic Bundle getBundle() {\n \t\t\treturn revision.getBundle();\n \t\t}\n+\t\t\n+\t\tpublic Resource getResource() {\n+\t\t\treturn resource;\n+\t\t}\n+\t\t\n+\t\tpublic BundleRevision getRevision() {\n+\t\t\treturn revision;\n+\t\t}\n \n \t\t@Override\n \t\tpublic String getSymbolicName() {",
                "raw_url": "https://github.com/apache/aries/raw/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java",
                "sha": "d57370afe92ec35b99da31f6bc075f04c035d795",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/aries/blob/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java?ref=03c135f43ca38d9627708610a976df44b7cab584",
                "deletions": 2,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "patch": "@@ -13,12 +13,14 @@\n  */\n package org.apache.aries.subsystem.core.internal;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n \n import org.apache.aries.util.filesystem.FileSystem;\n+import org.osgi.framework.BundleException;\n import org.osgi.resource.Resource;\n import org.osgi.service.coordinator.Coordination;\n import org.osgi.service.coordinator.Participant;\n@@ -90,8 +92,7 @@ private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Ex\n \t\taddReference(subsystem);\n \t\taddConstituent(subsystem);\n \t\taddSubsystem(subsystem);\n-\t\tif (subsystem.isScoped())\n-\t\t\tRegionContextBundleHelper.installRegionContextBundle(subsystem);\n+\t\tinstallRegionContextBundle(subsystem);\n \t\tActivator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);\n \t\tComparator<Resource> comparator = new InstallResourceComparator();\n \t\t// Install dependencies first...\n@@ -128,6 +129,23 @@ private BasicSubsystem installRawSubsystemResource(RawSubsystemResource resource\n \t\treturn installSubsystemResource(subsystemResource);\n \t}\n \t\n+\tprivate void installRegionContextBundle(final BasicSubsystem subsystem) throws BundleException, IOException {\n+\t\tif (!subsystem.isScoped())\n+\t\t\treturn;\n+\t\tRegionContextBundleHelper.installRegionContextBundle(subsystem);\n+\t\tcoordination.addParticipant(new Participant() {\n+\t\t\t@Override\n+\t\t\tpublic void ended(Coordination coordination) throws Exception {\n+\t\t\t\t// Nothing\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void failed(Coordination coordination) throws Exception {\n+\t\t\t\tRegionContextBundleHelper.uninstallRegionContextBundle(subsystem);\n+\t\t\t}\n+\t\t});\n+\t}\n+\t\n \tprivate BasicSubsystem installRepositoryContent(RepositoryContent resource) throws Exception {\n \t\tRawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(resource.getContent()));\n \t\treturn installRawSubsystemResource(rawSubsystemResource);",
                "raw_url": "https://github.com/apache/aries/raw/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "sha": "d53427c7afc2092ff86e6013a7688cf2832d7886",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/aries/blob/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java?ref=03c135f43ca38d9627708610a976df44b7cab584",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.wiring.BundleRevision;\n@@ -190,6 +191,27 @@ public BasicSubsystem getSubsystemByLocation(String location) {\n \t\treturn new ArrayList<BasicSubsystem>(idToSubsystem.values());\n \t}\n \t\n+\t// TODO Not very pretty. A quick fix.\n+\tpublic Object[] getSubsystemsByBundle(Bundle bundle) {\n+\t\tBundleRevision revision = null;\n+\t\tArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();\n+\t\tsynchronized (subsystemToConstituents) {\n+\t\t\tfor (BasicSubsystem subsystem : subsystemToConstituents.keySet()) {\n+\t\t\t\tfor (Resource constituent : getConstituents(subsystem)) {\n+\t\t\t\t\tif (constituent instanceof BundleConstituent &&\n+\t\t\t\t\t\t\t((BundleConstituent)constituent).getBundle() == bundle) {\n+\t\t\t\t\t\tresult.add(subsystem);\n+\t\t\t\t\t\trevision = ((BundleConstituent)constituent).getRevision();\n+\t\t\t\t\t}\n+\t\t\t\t}\t\n+\t\t\t}\n+\t\t}\n+\t\tresult.trimToSize();\n+\t\tif (revision == null)\n+\t\t\treturn null;\n+\t\treturn new Object[]{revision, result};\n+\t}\n+\t\n \tpublic Collection<BasicSubsystem> getSubsystemsByConstituent(Resource constituent) {\n \t\tArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();\n \t\tsynchronized (subsystemToConstituents) {",
                "raw_url": "https://github.com/apache/aries/raw/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java",
                "sha": "e70bf25d049ad37f0eaf799df8601f481faa5c22",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/aries/blob/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java?ref=03c135f43ca38d9627708610a976df44b7cab584",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java",
                "patch": "@@ -116,4 +116,41 @@ public void testInstallWhileImplBundleUninstalled() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/*\n+\t * Test that bundles installed when the bundle event hook is unavailable\n+\t * (i.e. when the subsystems core bundle is stopped) are handled properly\n+\t * by the hook when uninstalled.\n+\t * \n+\t * See https://issues.apache.org/jira/browse/ARIES-967.\n+\t */\n+\t@Test\n+\tpublic void testBundleEventHook() throws Exception {\n+\t\tBundle core = getSubsystemCoreBundle();\n+\t\t// Stop the subsystems core bundle so the bundle event hook is not registered.\n+\t\tcore.stop();\n+\t\ttry {\n+\t\t\t// Install an unmanaged bundle that will not be seen by the bundle event hook.\n+\t\t\tBundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));\n+\t\t\ttry {\n+\t\t\t\t// Restart the subsystems core bundle.\n+\t\t\t\tcore.start();\n+\t\t\t\t// Bundle A should be detected as a constituent of the root subsystem.\n+\t\t\t\tassertConstituent(getRootSubsystem(), BUNDLE_A);\n+\t\t\t\t// Uninstall bundle A so that it is seen by the bundle event hook.\n+\t\t\t\ta.uninstall();\n+\t\t\t\t// Bundle A should no longer be a constituent of the root subsystem.\n+\t\t\t\tassertNotConstituent(getRootSubsystem(), BUNDLE_A);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tuninstallSilently(a);\n+\t\t\t}\n+\t\t}\n+\t\tfinally {\n+\t\t\ttry {\n+\t\t\t\tcore.start();\n+\t\t\t}\n+\t\t\tcatch (Exception e) {}\n+\t\t}\n+\t}\n }",
                "raw_url": "https://github.com/apache/aries/raw/03c135f43ca38d9627708610a976df44b7cab584/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java",
                "sha": "0c5f83dbfa1d6cad393bc38c636a01b794ff74af",
                "status": "modified"
            }
        ],
        "message": "[ARIES-967] NPE in org.apache.aries.subsystem.core.internal.BundleEventHook.event() at server shutdown.\n\nUpdated the bundle event hook to handle the case where it receives an uninstalled event for a bundle that is not in its\ninternal data structure because the hook was not registered when the bundle was installed.\n\nAlso fixed another issue where region context bundles of subsystems that failed to install at certain points were not\nbeing uninstalled.\n\nAdded some new tests highlighting unmanaged bundle behavior.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1412179 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/405291ed574ee0378f842bdf1fa243ee77b17569",
        "repo": "aries",
        "unit_tests": [
            "BundleEventHookTest.java"
        ]
    },
    "aries_0b8e09c": {
        "bug_id": "aries_0b8e09c",
        "commit": "https://github.com/apache/aries/commit/0b8e09c83972e95113c8b7f5c35df518d27f44d0",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/aries/blob/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java?ref=0b8e09c83972e95113c8b7f5c35df518d27f44d0",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java",
                "patch": "@@ -84,6 +84,27 @@ public boolean contains(Resource resource) {\n \t\t\t\t\t\t\tResourceHelper.getTypeAttribute(resource));\n \t\t}\n \t\t\n+\t\t@Override\n+\t\tpublic boolean equals(Object o) {\n+\t\t\tif (o == this)\n+\t\t\t\treturn true;\n+\t\t\tif (!(o instanceof Clause))\n+\t\t\t\treturn false;\n+\t\t\tClause that = (Clause)o;\n+\t\t\treturn getSymbolicName().equals(that.getSymbolicName())\n+\t\t\t\t\t&& getDeployedVersion().equals(that.getDeployedVersion())\n+\t\t\t\t\t&& getType().equals(that.getType());\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\tint result = 17;\n+\t\t\tresult = 31 * result + getSymbolicName().hashCode();\n+\t\t\tresult = 31 * result + getDeployedVersion().hashCode();\n+\t\t\tresult = 31 * result + getType().hashCode();\n+\t\t\treturn result;\n+\t\t}\n+\t\t\n \t\t@Override\n \t\tpublic Attribute getAttribute(String name) {\n \t\t\tParameter result = parameters.get(name);",
                "raw_url": "https://github.com/apache/aries/raw/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/DeployedContentHeader.java",
                "sha": "1569d2aa555c1fea0d17ea55ea59181c2750152d",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/aries/blob/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java?ref=0b8e09c83972e95113c8b7f5c35df518d27f44d0",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "patch": "@@ -358,6 +358,20 @@ synchronized SubsystemResource getResource() {\n \t\t\tcatch (Exception e) {\n \t\t\t\tthrow new SubsystemException(e);\n \t\t\t}\n+\t\t\tCollection<DeployedContentHeader.Clause> missingResources = resource.getMissingResources();\n+\t\t\tif (!missingResources.isEmpty()) {\n+\t\t\t\tif (isRoot())\n+\t\t\t\t\t// We don't care if the root subsystem has missing resources\n+\t\t\t\t\t// because they are either (1) extraneous bundles outside of\n+\t\t\t\t\t// the subsystems API or (2) provisioned dependencies of\n+\t\t\t\t\t// other subsystems. Those that fall in the latter category\n+\t\t\t\t\t// will be detected by the dependent subsystems.\n+\t\t\t\t\tremovedContent(missingResources);\n+\t\t\t\telse\n+\t\t\t\t\t// If a non-root subsystem has missing dependencies, let's\n+\t\t\t\t\t// fail fast for now.\n+\t\t\t\t\tthrow new SubsystemException(\"Missing resources: \" + missingResources);\n+\t\t\t}\n \t\t}\n \t\treturn resource;\n \t}\n@@ -427,9 +441,17 @@ void removedContent(Resource resource) {\n \t\tDeployedContentHeader.Clause clause = header.getClause(resource);\n \t\tif (clause == null)\n \t\t\treturn;\n+\t\tremovedContent(Collections.singleton(clause));\n+\t}\n+\t\n+\tvoid removedContent(Collection<DeployedContentHeader.Clause> content) {\n+\t\tDeploymentManifest manifest = getDeploymentManifest();\n+\t\tDeployedContentHeader header = manifest.getDeployedContentHeader();\n+\t\tif (header == null)\n+\t\t\treturn;\n \t\tCollection<DeployedContentHeader.Clause> clauses = new ArrayList<DeployedContentHeader.Clause>(header.getClauses());\n \t\tfor (Iterator<DeployedContentHeader.Clause> i = clauses.iterator(); i.hasNext();)\n-\t\t\tif (clause.equals(i.next())) {\n+\t\t\tif (content.contains(i.next())) {\n \t\t\t\ti.remove();\n \t\t\t\tbreak;\n \t\t\t}",
                "raw_url": "https://github.com/apache/aries/raw/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "sha": "b2876fd7401698ebb77d4a03df01e77a6729cadb",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/aries/blob/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java?ref=0b8e09c83972e95113c8b7f5c35df518d27f44d0",
                "deletions": 3,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java",
                "patch": "@@ -46,6 +46,7 @@\n import org.eclipse.equinox.region.RegionDigraph;\r\n import org.eclipse.equinox.region.RegionFilter;\r\n import org.eclipse.equinox.region.RegionFilterBuilder;\r\n+import org.osgi.framework.Bundle;\r\n import org.osgi.framework.BundleContext;\r\n import org.osgi.framework.BundleException;\r\n import org.osgi.framework.InvalidSyntaxException;\r\n@@ -76,6 +77,7 @@\n \tprivate final Collection<Resource> installableContent = new HashSet<Resource>();\r\n \tprivate final Collection<Resource> installableDependencies = new HashSet<Resource>();\r\n \tprivate final Collection<Resource> mandatoryResources = new HashSet<Resource>();\r\n+\tprivate final Collection<DeployedContentHeader.Clause> missingResources = new HashSet<DeployedContentHeader.Clause>();\r\n \tprivate final Collection<Resource> optionalResources = new HashSet<Resource>();\r\n \tprivate final AriesSubsystem parent;\r\n \tprivate final Repository preferredProviderRepository;\r\n@@ -159,6 +161,10 @@ public String getLocation() {\n \t\treturn resource.getLocation().getValue();\r\n \t}\r\n \t\r\n+\tpublic Collection<DeployedContentHeader.Clause> getMissingResources() {\r\n+\t\treturn missingResources;\r\n+\t}\r\n+\t\r\n \tpublic Collection<AriesSubsystem> getParents() {\r\n \t\tif (parent == null) {\r\n \t\t\tHeader<?> header = getDeploymentManifest().getHeaders().get(DeploymentManifest.ARIESSUBSYSTEM_PARENTS);\r\n@@ -290,6 +296,10 @@ private void addDependency(Resource resource) {\n \t\t\tsharedDependencies.add(resource);\r\n \t}\r\n \t\r\n+\tprivate void addMissingResource(DeployedContentHeader.Clause resource) {\r\n+\t\tmissingResources.add(resource);\r\n+\t}\r\n+\t\r\n \tprivate void addValidCapabilities(Collection<Capability> from, Collection<Capability> to) throws BundleException, IOException, InvalidSyntaxException, URISyntaxException {\r\n \t\tfor (Capability c : from)\r\n \t\t\tif (isValid(c))\r\n@@ -332,8 +342,9 @@ private void computeContentResources(DeploymentManifest manifest) throws BundleE\n \t\t\tfor (DeployedContentHeader.Clause clause : header.getClauses()) {\r\n \t\t\t\tResource resource = findContent(clause);\r\n \t\t\t\tif (resource == null)\r\n-\t\t\t\t\tthrow new SubsystemException(\"Resource does not exist: \" + clause);\r\n-\t\t\t\taddContentResource(resource);\r\n+\t\t\t\t\taddMissingResource(clause);\r\n+\t\t\t\telse\r\n+\t\t\t\t\taddContentResource(resource);\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n@@ -531,7 +542,10 @@ private Resource findContent(DeployedContentHeader.Clause clause) throws BundleE\n \t\tif (resourceId != -1) {\r\n \t\t\tString type = clause.getType();\r\n \t\t\tif (IdentityNamespace.TYPE_BUNDLE.equals(type) || IdentityNamespace.TYPE_FRAGMENT.equals(type)) {\r\n-\t\t\t\treturn Activator.getInstance().getBundleContext().getBundle(0).getBundleContext().getBundle(resourceId).adapt(BundleRevision.class);\r\n+\t\t\t\tBundle resource = Activator.getInstance().getBundleContext().getBundle(0).getBundleContext().getBundle(resourceId);\r\n+\t\t\t\tif (resource == null)\r\n+\t\t\t\t\treturn null;\r\n+\t\t\t\treturn resource.adapt(BundleRevision.class);\r\n \t\t\t}\r\n \t\t\telse\r\n \t\t\t\treturn Activator.getInstance().getSubsystems().getSubsystemById(resourceId);\r",
                "raw_url": "https://github.com/apache/aries/raw/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java",
                "sha": "a9c7461ebb61afa187ceacbb4187bee8679314a7",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/aries/blob/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java?ref=0b8e09c83972e95113c8b7f5c35df518d27f44d0",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java",
                "patch": "@@ -14,6 +14,7 @@\n package org.apache.aries.subsystem.itests;\r\n \r\n import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.fail;\r\n \r\n import java.io.File;\r\n import java.io.IOException;\r\n@@ -102,6 +103,34 @@ public void testSymbolicName() {\n \t\tassertEquals(\"Wrong root symbolic name\", getRootSubsystem().getSymbolicName(), \"org.osgi.service.subsystem.root\");\r\n \t}\r\n \t\r\n+\t@Test\r\n+\tpublic void testUninstallRootRegionBundleWithNoBundleEventHook() throws Exception {\r\n+\t\t// Install an extraneous bundle into the root region. The bundle will\r\n+\t\t// be recorded in the root subsystem's persistent memory.\r\n+\t\tBundle bundleA = bundleContext.installBundle(new File(BUNDLE_A).toURI().toURL().toString());\r\n+\t\ttry {\r\n+\t\t\tBundle core = getSubsystemCoreBundle();\r\n+\t\t\t// Stop the subsystems bundle in order to unregister the bundle\r\n+\t\t\t// event hook.\r\n+\t\t\tcore.stop();\r\n+\t\t\t// Uninstall the bundle so it won't be there on restart.\r\n+\t\t\tbundleA.uninstall();\r\n+\t\t\ttry {\r\n+\t\t\t\t// Start the subsystems bundle and ensure the root subsystem\r\n+\t\t\t\t// recovers from the uninstalled bundle being in persistent\r\n+\t\t\t\t// memory.\r\n+\t\t\t\tcore.start();\r\n+\t\t\t}\r\n+\t\t\tcatch (BundleException e) {\r\n+\t\t\t\tfail(\"Could not start subsystems bundle after uninstalling a root region bundle with no bundle event hook registered\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tfinally {\r\n+\t\t\tif (Bundle.UNINSTALLED != bundleA.getState())\r\n+\t\t\t\tbundleA.uninstall();\r\n+\t\t}\r\n+\t}\r\n+\t\r\n \t@Test\r\n \tpublic void testVersion() {\r\n \t\tassertEquals(\"Wrong root version\", getRootSubsystem().getVersion(), Version.parseVersion(\"1.0.0\"));\r",
                "raw_url": "https://github.com/apache/aries/raw/0b8e09c83972e95113c8b7f5c35df518d27f44d0/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/RootSubsystemTest.java",
                "sha": "cf9bd65009469cb8e2202f311400d999cacbfc1a",
                "status": "modified"
            }
        ],
        "message": "ARIES-922: If a bundle is uninstalled from the root region while the bundle event hook is not registered but remains in persistent memory, root initialization will no longer fail with an NPE. The missing bundle is simply removed from memory.\n\nA failure will still occur if the same thing happens for a non-root subsystem. I left it that way for now for fail-fast purposes since it would be very bad for someone to muck around with the deployed content of a non-root subsystem outside of the subsystems API. It might be reasonable in the future to make this more intelligent by checking to see if the missing resource is optional or trying to re-deploy it from a repository.\n\nAlso added a new test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1382116 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/68bf8a459ae446c4d17ddf6c46621def3fc45787",
        "repo": "aries",
        "unit_tests": [
            "AriesSubsystemTest.java"
        ]
    },
    "aries_0ef78dc": {
        "bug_id": "aries_0ef78dc",
        "commit": "https://github.com/apache/aries/commit/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/aries/blob/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java?ref=0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b",
                "deletions": 3,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "patch": "@@ -15,6 +15,7 @@\n \r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n+import java.util.Collections;\r\n import java.util.List;\r\n import java.util.concurrent.ConcurrentHashMap;\r\n \r\n@@ -43,7 +44,7 @@ public BundleEventHook() {\n \tpublic void event(BundleEvent event, Collection<BundleContext> contexts) {\r\n \t\tif ((event.getType() & (BundleEvent.INSTALLED | BundleEvent.UNINSTALLED)) == 0)\r\n \t\t\treturn;\r\n-\t\t// Protected against deadlock when the bundle event hook receives an\r\n+\t\t// Protect against deadlock when the bundle event hook receives an\r\n \t\t// event before subsystems has fully initialized, in which case the\r\n \t\t// events are queued and processed once initialization is complete.\r\n \t\tsynchronized (this) {\r\n@@ -80,6 +81,12 @@ private Subsystems getSubsystems() {\n \t\treturn activator.getSubsystems();\r\n \t}\r\n \t\r\n+\t/*\r\n+\t * Note that because some events may be processed asynchronously, we can no\r\n+\t * longer rely on the guarantees that a synchronous event brings. For\r\n+\t * example, bundle revisions adapted from bundles included in events may be\r\n+\t * null.\r\n+\t */\r\n \tprivate void handleEvent(BundleEvent event) {\r\n \t\tswitch (event.getType()) {\r\n \t\t\tcase BundleEvent.INSTALLED:\r\n@@ -93,13 +100,22 @@ private void handleEvent(BundleEvent event) {\n \t\t}\r\n \t}\r\n \t\r\n+\t/*\r\n+\t * This method guards against an uninstalled origin bundle. Guards against a\r\n+\t * null bundle revision are done elsewhere. It is assumed the bundle\r\n+\t * revision is never null once we get here.\r\n+\t */\r\n \tprivate void handleExplicitlyInstalledBundleBundleContext(BundleRevision originRevision, BundleRevision bundleRevision) {\r\n \t\t// The bundle needs to be associated with all subsystems that are \r\n \t\t// associated with the bundle whose context was used to install the \r\n \t\t// bundle.\r\n \t\tCollection<BasicSubsystem> subsystems = getSubsystems().getSubsystemsReferencing(originRevision);\r\n \t\tif (subsystems.isEmpty())\r\n-\t\t\tthrow new IllegalStateException(\"Orphaned bundle revision detected: \" + originRevision);\r\n+\t\t\t// If subsystems does not know about the origin bundle for some\r\n+\t\t\t// reason (e.g., the event is being processed asynchronously\r\n+\t\t\t// and the origin bundle has been uninstalled), associate the\r\n+\t\t\t// installed bundle with the root subsystem.\r\n+\t\t\tsubsystems = Collections.singleton(getSubsystems().getRootSubsystem());\r\n \t\tfor (BasicSubsystem s : subsystems)\r\n \t\t\tUtils.installResource(bundleRevision, s);\r\n \t}\r\n@@ -124,13 +140,17 @@ private void handleInstalledEvent(BundleEvent event) {\n \t\tBundleRevision originRevision = origin.adapt(BundleRevision.class);\r\n \t\tBundle bundle = event.getBundle();\r\n \t\tBundleRevision bundleRevision = bundle.adapt(BundleRevision.class);\r\n+\t\tif (bundleRevision == null)\r\n+\t\t\t// The event is being processed asynchronously and the installed\r\n+\t\t\t// bundle has been uninstalled. Nothing we can do.\r\n+\t\t\treturn;\r\n \t\tbundleToRevision.put(bundle, bundleRevision);\r\n \t\t// Only handle explicitly installed bundles. An explicitly installed\r\n \t\t// bundle is a bundle that was installed using some other bundle's\r\n \t\t// BundleContext or using RegionDigraph.\r\n \t\tif (ThreadLocalSubsystem.get() != null)\r\n \t\t\treturn;\r\n-\t\tif (\"org.eclipse.equionox.region\".equals(origin.getSymbolicName()))\r\n+\t\tif (\"org.eclipse.equinox.region\".equals(origin.getSymbolicName()))\r\n \t\t\t// The bundle was installed using RegionDigraph.\r\n \t\t\thandleExplicitlyInstalledBundleRegionDigraph(origin, bundleRevision);\r\n \t\telse\r",
                "raw_url": "https://github.com/apache/aries/raw/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java",
                "sha": "2e774176f3bd7096804aded92cd545d53e4776f8",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries/blob/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java?ref=0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b",
                "deletions": 6,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "patch": "@@ -27,6 +27,8 @@\n import org.osgi.service.repository.RepositoryContent;\n import org.osgi.service.subsystem.Subsystem.State;\n \n+import com.sun.org.apache.bcel.internal.generic.GETSTATIC;\n+\n public class SubsystemResourceInstaller extends ResourceInstaller {\n \tpublic SubsystemResourceInstaller(Coordination coordination, Resource resource, BasicSubsystem subsystem) {\n \t\tsuper(coordination, resource, subsystem);\n@@ -83,17 +85,15 @@ public void failed(Coordination arg0) throws Exception {\n \t}\n \t\n \tprivate BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Exception {\n-\t\t// If the state is null, this is a brand new subsystem. If the state is\n-\t\t// not null, this is a persisted subsystem. For brand new subsystems,\n-\t\t// an INSTALLING event must be propagated.\n-\t\tif (subsystem.getState() == null)\n-\t\t\tsubsystem.setState(State.INSTALLING);\n \t\taddChild(subsystem);\n \t\taddReference(subsystem);\n \t\taddConstituent(subsystem);\n \t\taddSubsystem(subsystem);\n \t\tinstallRegionContextBundle(subsystem);\n-\t\tActivator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);\n+\t\t// This will emit the initial service event for INSTALLING subsystems.\n+\t\t// The first event for RESOLVED (i.e. persisted) subsystems is emitted later.\n+\t\tif (State.INSTALLING.equals(subsystem.getState()))\n+\t\t\tActivator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);\n \t\tComparator<Resource> comparator = new InstallResourceComparator();\n \t\t// Install dependencies first...\n \t\tList<Resource> dependencies = new ArrayList<Resource>(subsystem.getResource().getInstallableDependencies());\n@@ -121,6 +121,9 @@ private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Ex\n \t\t// in which case an INSTALLED event must be propagated.\n \t\tif (State.INSTALLING.equals(subsystem.getState()))\n \t\t\tsubsystem.setState(State.INSTALLED);\n+\t\telse\n+\t\t\t// This is a persisted subsystem in the RESOLVED state. Emit the first service event.\n+\t\t\tActivator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);\n \t\treturn subsystem;\n \t}\n \t",
                "raw_url": "https://github.com/apache/aries/raw/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java",
                "sha": "3885fc6f72863c06f890a8ff9be267b338120dea",
                "status": "modified"
            },
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/aries/blob/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java",
                "changes": 123,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java?ref=0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java",
                "patch": "@@ -18,45 +18,65 @@\n  */\n package org.apache.aries.subsystem.itests;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n \n+import org.eclipse.equinox.region.RegionDigraph;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;\n import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleException;\n import org.osgi.framework.ServiceEvent;\n import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.framework.namespace.IdentityNamespace;\n+import org.osgi.service.subsystem.Subsystem;\n+import org.osgi.service.subsystem.SubsystemConstants;\n \n @RunWith(MavenConfiguredJUnit4TestRunner.class)\n public class BundleEventHookTest extends SubsystemTest {\n     /*\n \t * Bundle-SymbolicName: bundle.a.jar\n \t */\n \tprivate static final String BUNDLE_A = \"bundle.a.jar\";\n+\t/*\n+\t * Bundle-SymbolicName: bundle.b.jar\n+\t */\n+\tprivate static final String BUNDLE_B = \"bundle.b.jar\";\n \t\n \t@Before\n \tpublic static void createApplications() throws Exception {\n \t\tif (createdApplications) {\n \t\t\treturn;\n \t\t}\n \t\tcreateBundleA();\n+\t\tcreateBundleB();\n \t\tcreatedApplications = true;\n \t}\n \t\n \tprivate static void createBundleA() throws IOException {\n \t\tcreateBundle(BUNDLE_A);\n \t}\n+\t\n+\tprivate static void createBundleB() throws IOException {\n+\t\tcreateBundle(BUNDLE_B);\n+\t}\n     \n     /*\n      * See https://issues.apache.org/jira/browse/ARIES-982.\n@@ -124,4 +144,107 @@ public void run() {\n     \t\texecutor.shutdownNow();\n     \t}\n     }\n+    \n+    /*\n+     * Because bundle events are queued for later asynchronous processing while\n+     * the root subsystem is initializing, it is possible to see an installed\n+     * event for a bundle that has been uninstalled (i.e. the bundle revision\n+     * will be null). These events should be ignored.\n+     */\n+    @Test\n+    public void testIgnoreUninstalledBundleInAsyncInstalledEvent() throws Exception {\n+    \tfinal Bundle core = getSubsystemCoreBundle();\n+    \tcore.stop();\n+    \tfinal AtomicReference<Bundle> a = new AtomicReference<Bundle>();\n+    \tbundleContext.addServiceListener(\n+    \t\t\tnew ServiceListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void serviceChanged(ServiceEvent event) {\n+\t\t\t\t\t\tif ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (a.get() != null)\n+\t\t\t\t\t\t\t// We've been here before and already done what needs doing.\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();\n+\t\t\t\t\t\tSubsystem s = bundleContext.getService(sr);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Queue up the installed event.\n+\t\t\t\t\t\t\ta.set(core.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));\n+\t\t\t\t\t\t\t// Ensure the bundle will be uninstalled before the event is processed.\n+\t\t\t\t\t\t\ta.get().uninstall();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Exception e) {\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+    \t\t\t}, \n+    \t\t\t\"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))\");\n+    \ttry {\n+    \t\t// Before the fix, this would fail due to an NPE resulting from a\n+    \t\t// null bundle revision.\n+    \t\tcore.start();\n+    \t}\n+    \tcatch (BundleException e) {\n+    \t\te.printStackTrace();\n+    \t\tfail(\"Subsystems failed to handle an asynchronous bundle installed event after the bundle was uninstalled\");\n+    \t}\n+    \tassertBundleState(a.get(), Bundle.UNINSTALLED);\n+    \tSubsystem root = getRootSubsystem();\n+    \tassertState(Subsystem.State.ACTIVE, root);\n+    \tassertNotConstituent(root, a.get().getSymbolicName());\n+    }\n+    \n+    /*\n+     * Because bundle events are queued for later asynchronous processing while\n+     * the root subsystem is initializing, it is possible to see an installed\n+     * event whose origin bundle has been uninstalled (i.e. the origin bundle's\n+     * revision will be null). These events should result in the installed\n+     * bundle being associated with the root subsystem.\n+     */\n+    @Test\n+    public void testIgnoreUninstalledOriginBundleInAsyncInstalledEvent() throws Exception {\n+    \tfinal Bundle core = getSubsystemCoreBundle();\n+    \tcore.stop();\n+    \tfinal Bundle b = bundleContext.installBundle(BUNDLE_B, new FileInputStream(BUNDLE_B));\n+    \t// Ensure bundle B has a context.\n+    \tb.start();\n+    \tfinal AtomicReference<Bundle> a = new AtomicReference<Bundle>();\n+    \tbundleContext.addServiceListener(\n+    \t\t\tnew ServiceListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void serviceChanged(ServiceEvent event) {\n+\t\t\t\t\t\tif ((event.getType() & (ServiceEvent.REGISTERED | ServiceEvent.MODIFIED)) == 0)\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tif (a.get() != null)\n+\t\t\t\t\t\t\t// We've been here before and already done what needs doing.\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\tServiceReference<Subsystem> sr = (ServiceReference<Subsystem>)event.getServiceReference();\n+\t\t\t\t\t\tSubsystem s = bundleContext.getService(sr);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Queue up the installed event for bundle A using B's context.\n+\t\t\t\t\t\t\ta.set(b.getBundleContext().installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A)));\n+\t\t\t\t\t\t\t// Ensure the origin bundle will be uninstalled before the event is processed.\n+\t\t\t\t\t\t\tb.uninstall();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (Exception e) {\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+    \t\t\t}, \n+    \t\t\t\"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0)(subsystem.state=RESOLVED))\");\n+    \ttry {\n+    \t\t// Before the fix, this would fail due to an NPE resulting from a\n+    \t\t// null bundle revision.\n+    \t\tcore.start();\n+    \t}\n+    \tcatch (BundleException e) {\n+    \t\te.printStackTrace();\n+    \t\tfail(\"Subsystems failed to handle an asynchronous bundle installed event after the origin bundle was uninstalled\");\n+    \t}\n+    \tassertBundleState(a.get(), Bundle.INSTALLED);\n+    \tassertBundleState(b, Bundle.UNINSTALLED);\n+    \tSubsystem root = getRootSubsystem();\n+    \tassertState(Subsystem.State.ACTIVE, root);\n+    \tassertConstituent(root, a.get().getSymbolicName());\n+    }\n }",
                "raw_url": "https://github.com/apache/aries/raw/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/BundleEventHookTest.java",
                "sha": "1425fc249c0c4f8ae6ecff1c75669fa721d30357",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java?ref=0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b",
                "deletions": 1,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "patch": "@@ -715,7 +715,7 @@ protected AriesSubsystem getRootAriesSubsystem() {\n \t}\n \t\n \tprotected Subsystem getRootSubsystem() {\n-\t\treturn getOsgiService(Subsystem.class);\n+\t\treturn getOsgiService(Subsystem.class, \"(&(objectClass=org.osgi.service.subsystem.Subsystem)(subsystem.id=0))\", DEFAULT_TIMEOUT);\n \t}\n \t\n \tprotected Subsystem getRootSubsystemInState(Subsystem.State state, long timeout) throws InterruptedException {",
                "raw_url": "https://github.com/apache/aries/raw/0ef78dc80e3b9ab1e160359cb9f9144fd0ed6b5b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "sha": "0fdd683fdb2fae8f8596ef46e3e620b6d19ebd4f",
                "status": "modified"
            }
        ],
        "message": "Bundle event hook NPE and unresolved persisted subsystems.\n\nFixed NPE in bundle event hook when processing asynchronous installed events whose bundle or origin bundle revision\nwas null because the bundle was uninstalled.\n\nFixed issue where persisted subsystems were registered in the RESOLVED state before they were actually resolved.\n\nAdded bundle event hook tests for null bundle and origin bundle revisions when processing asynchronous events.\n\nFixed issue in itests where subsystems other than root could be returned from utility method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1443681 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/5d0bcf8055b68005206d80e8cadb95a102aa4dd1",
        "repo": "aries",
        "unit_tests": [
            "BundleEventHookTest.java"
        ]
    },
    "aries_3ccf0a3": {
        "bug_id": "aries_3ccf0a3",
        "commit": "https://github.com/apache/aries/commit/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/aries/blob/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java?ref=3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4",
                "deletions": 19,
                "filename": "blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "patch": "@@ -63,17 +63,18 @@\n  *\n  * @version $Rev$, $Date$\n  */\n+@SuppressWarnings(\"rawtypes\")\n public class BeanRecipe extends AbstractRecipe {\n-\t\n-\tstatic class UnwrapperedBeanHolder {\n-\t\tfinal Object unwrapperedBean;\n-\t\tfinal BeanRecipe recipe;\n-\t\t\n-\t\tpublic UnwrapperedBeanHolder(Object unwrapperedBean, BeanRecipe recipe) {\n-\t\t\tthis.unwrapperedBean = unwrapperedBean;\n-\t\t\tthis.recipe = recipe;\n-\t\t}\n-\t}\n+\n+    static class UnwrapperedBeanHolder {\n+        final Object unwrapperedBean;\n+        final BeanRecipe recipe;\n+\n+        public UnwrapperedBeanHolder(Object unwrapperedBean, BeanRecipe recipe) {\n+            this.unwrapperedBean = unwrapperedBean;\n+            this.recipe = recipe;\n+        }\n+    }\n \n     public class VoidableCallable implements Callable<Object>, Voidable {\n \n@@ -274,7 +275,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                 }\n             }\n         }\n-\n+        \n         if (factory != null) {\n             // look for instance method on factory object\n             Object factoryObj = factory.create();\n@@ -284,7 +285,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                 try {\n                     factoryObj = ((ReferenceRecipe.ServiceProxyWrapper) factoryObj).convert(new ReifiedType(Object.class));\n                 } catch (Exception e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (factoryObj instanceof UnwrapperedBeanHolder) {\n             \tfactoryObj = wrap((UnwrapperedBeanHolder) factoryObj, Object.class);\n@@ -297,7 +298,7 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Method, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = invoke(match.getKey(), factoryObj, match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n                 throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + factoryObj.getClass().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n@@ -312,12 +313,12 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Method, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = invoke(match.getKey(), null, match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n-                throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n+                throw new ComponentDefinitionException(\"Unable to find a matching factory method \" + factoryMethod + \" on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n             } else {\n-                throw new ComponentDefinitionException(\"Multiple matching factory methods \" + factoryMethod + \" found on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n+                throw new ComponentDefinitionException(\"Multiple matching factory methods \" + factoryMethod + \" found on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n             }\n         } else {\n             if (getType() == null) {\n@@ -330,18 +331,23 @@ private Object getInstance() throws ComponentDefinitionException {\n                     Map.Entry<Constructor, List<Object>> match = matches.entrySet().iterator().next();\n                     instance = newInstance(match.getKey(), match.getValue().toArray());\n                 } catch (Throwable e) {\n-                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getType().getName(), getRealCause(e));\n+                    throw new ComponentDefinitionException(\"Error when instantiating bean \" + getName() + \" of class \" + getTypeName(), getRealCause(e));\n                 }\n             } else if (matches.size() == 0) {\n-                throw new ComponentDefinitionException(\"Unable to find a matching constructor on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n+                throw new ComponentDefinitionException(\"Unable to find a matching constructor on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName());\n             } else {\n-                throw new ComponentDefinitionException(\"Multiple matching constructors found on class \" + getType().getName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n+                throw new ComponentDefinitionException(\"Multiple matching constructors found on class \" + getTypeName() + \" for arguments \" + args + \" when instanciating bean \" + getName() + \": \" + matches.keySet());\n             }\n         }\n         \n         return instance;\n     }\n \n+    private String getTypeName() {\n+        Class<?> type = getType();\n+        return type == null ? null : type.getName();\n+    }\n+\n     private Map<Method, List<Object>> findMatchingMethods(Class type, String name, boolean instance, List<Object> args, List<ReifiedType> types) {\n         Map<Method, List<Object>> matches = new HashMap<Method, List<Object>>();\n         // Get constructors",
                "raw_url": "https://github.com/apache/aries/raw/3ccf0a36d5a8377bf0ccbecb8791cbee28aa01a4/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "sha": "579757e63438ecba38358807f38cd15e994629de",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1353] Adding check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1692109 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/f934967c742b8d9492356df42a498603b67c4e31",
        "repo": "aries",
        "unit_tests": [
            "BeanRecipeTest.java"
        ]
    },
    "aries_40ce35a": {
        "bug_id": "aries_40ce35a",
        "commit": "https://github.com/apache/aries/commit/40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java",
                "patch": "@@ -116,7 +116,19 @@ public static RepositoryAdmin getRepositoryAdmin() {\n \t * A naive implementation serving as a placeholder until a real Resolver comes along.\n \t */\n \tpublic static Resolver getResolver() {\n-\t\treturn new SubsystemResolver();\n+//\t\treturn new SubsystemResolver();\n+\t\tServiceTracker st = new ServiceTracker(context, Resolver.class.getName(), null);\n+\t\ttry {\n+\t\t\tst.open();\n+\t\t\treturn (Resolver)st.waitForService(5000);\n+\t\t}\n+\t\tcatch (InterruptedException e) {\n+\t\t\tThread.currentThread().interrupt();\n+\t\t\treturn null;\n+\t\t}\n+\t\tfinally {\n+\t\t\tst.close();\n+\t\t}\n \t}\n \t\n \tprivate final BundleListener bundleListener = new SubsystemSynchronousBundleListener();",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java",
                "sha": "49ee167dcfb88a516d058d822f6257111fd7a544",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "patch": "@@ -700,6 +700,7 @@ private synchronized void install() throws Exception {\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\tcatch (Exception e) {\r\n+\t\t\t\t// TODO Log this exception? If not, who's responsible for logging it?\r\n \t\t\t\tcoordination.fail(e);\r\n \t\t\t}\r\n \t\t\tfinally {\r\n@@ -713,7 +714,15 @@ private void installBundleResource(Resource resource, Coordination coordination,\n \t\tBundle bundle;\r\n \t\tsynchronized (resourceToSubsystems) {\r\n \t\t\tif (resource instanceof BundleRevision) {\r\n-\t\t\t\tresourceToSubsystems.get(resource).add(this);\r\n+\t\t\t\t// This means the resource is a bundle that's already been installed, but we still need to establish the resource->subsystem relationship.\r\n+\t\t\t\t// TODO The null check is necessary for when the bundle is in the root subsystem. Currently, the root subsystem is not initialized with\r\n+\t\t\t\t// these relationships. Need to decide if that would be better.\r\n+\t\t\t\tSet<Subsystem> subsystems = resourceToSubsystems.get(resource);\r\n+\t\t\t\tif (subsystems == null) {\r\n+\t\t\t\t\tsubsystems = new HashSet<Subsystem>();\r\n+\t\t\t\t\tresourceToSubsystems.put(resource, subsystems);\r\n+\t\t\t\t}\r\n+\t\t\t\tsubsystems.add(this);\r\n \t\t\t\treturn;\r\n \t\t\t}\r\n \t\t\tprovisionTo = getProvisionTo(resource, transitive);\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "sha": "437615cdb67b8eac469cfacc3b3bbe48f0080bba",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java",
                "patch": "@@ -102,6 +102,7 @@ private OsgiIdentityRequirement(Filter filter, Resource resource, boolean transi\n \t\tthis.filter = filter;\r\n \t\tthis.resource = resource;\r\n \t\tthis.transitive = transitive;\r\n+\t\tdirectives.put(Constants.FILTER_DIRECTIVE, filter.toString());\r\n \t\tdirectives.put(ResourceConstants.IDENTITY_SINGLETON_DIRECTIVE, Boolean.FALSE.toString());\r\n \t\tdirectives.put(Constants.EFFECTIVE_DIRECTIVE, Constants.EFFECTIVE_RESOLVE);\r\n \t}\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/OsgiIdentityRequirement.java",
                "sha": "e96fd055abc7644f0e3c1a0200ec4d4d85bdd77c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/SubsystemEnvironment.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/SubsystemEnvironment.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 5,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/SubsystemEnvironment.java",
                "patch": "@@ -69,6 +69,8 @@ public SubsystemEnvironment(AriesSubsystem subsystem) throws IOException, URISyn\n \t\t// This means we're looking for capabilities satisfying a requirement within a content resource or transitive dependency.\r\n \t\tfindArchiveProviders(capabilities, requirement, false);\r\n \t\tfindRepositoryServiceProviders(capabilities, requirement, false);\r\n+\t\t// TODO The following is a quick fix to ensure this environment always returns capabilities provided by the system bundle. Needs some more thought.\r\n+\t\tfindConstituentProviders(requirement, capabilities);\r\n \t\treturn capabilities;\r\n \t}\r\n \t\r\n@@ -89,11 +91,8 @@ public URL getContent(Resource resource) {\n \r\n \t@Override\r\n \tpublic Map<Resource, List<Wire>> getWiring() {\r\n-\t\tMap<Resource, List<Wire>> wiring = new HashMap<Resource, List<Wire>>();\r\n-\t\tfor (Resource resource : resourceToRepository.keySet()) {\r\n-\t\t\twiring.put(resource, Collections.EMPTY_LIST);\r\n-\t\t}\r\n-\t\treturn wiring;\r\n+\t\t// TODO When will this ever return an existing wiring?\r\n+\t\treturn Collections.EMPTY_MAP;\r\n \t}\r\n \t\r\n \tpublic boolean isContentResource(Resource resource) {\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/SubsystemEnvironment.java",
                "sha": "2d96664dc8ffd05f00096573df514ed6730cb4c0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixCapabilityAdapter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixCapabilityAdapter.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixCapabilityAdapter.java",
                "patch": "@@ -34,7 +34,9 @@ public FelixCapabilityAdapter(org.apache.felix.bundlerepository.Capability capab\n \t}\r\n \r\n \tpublic Map<String, Object> getAttributes() {\r\n-\t\treturn capability.getPropertiesAsMap();\r\n+\t\tMap<String, Object> result = capability.getPropertiesAsMap();\r\n+\t\tresult.put(getNamespace(), result.get(capability.getName()));\r\n+\t\treturn result;\r\n \t}\r\n \r\n \tpublic Map<String, String> getDirectives() {\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixCapabilityAdapter.java",
                "sha": "da0c829e4e8b9d0e57f6a984b668eac13eeca1d8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixRequirementAdapter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixRequirementAdapter.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixRequirementAdapter.java",
                "patch": "@@ -42,7 +42,12 @@ public FelixRequirementAdapter(org.apache.felix.bundlerepository.Requirement req\n \r\n \tpublic Map<String, String> getDirectives() {\r\n \t\tMap<String, String> result = new HashMap<String, String>(1);\r\n-\t\tresult.put(Constants.FILTER_DIRECTIVE, requirement.getFilter());\r\n+\t\t/* (1) The Felix OBR specific \"mandatory:<*\" syntax must be stripped out of the filter.\r\n+\t\t * (2) The namespace must be translated.\r\n+\t\t */\r\n+\t\tresult.put(Constants.FILTER_DIRECTIVE, requirement.getFilter()\r\n+\t\t\t\t.replaceAll(\"\\\\(mandatory\\\\:\\\\<\\\\*[^\\\\)]*\\\\)\", \"\")\r\n+\t\t\t\t.replaceAll(requirement.getName() + '=', getNamespace() + '='));\r\n \t\treturn result;\r\n \t}\r\n \r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixRequirementAdapter.java",
                "sha": "5b4f9d2a75f361c59562a6cddc78dc1f5644402e",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixResourceAdapter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixResourceAdapter.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixResourceAdapter.java",
                "patch": "@@ -23,8 +23,19 @@\n import org.osgi.framework.resource.Requirement;\r\n import org.osgi.framework.resource.Resource;\r\n import org.osgi.framework.resource.ResourceConstants;\r\n+import org.osgi.framework.wiring.BundleRevision;\r\n \r\n public class FelixResourceAdapter implements Resource {\r\n+\tprivate static String toFelixNamespace(String namespace) {\r\n+\t\tif (BundleRevision.BUNDLE_NAMESPACE.equals(namespace))\r\n+\t\t\treturn org.apache.felix.bundlerepository.Capability.BUNDLE;\r\n+\t\tif (BundleRevision.HOST_NAMESPACE.equals(namespace))\r\n+\t\t\treturn org.apache.felix.bundlerepository.Capability.FRAGMENT;\r\n+\t\tif (BundleRevision.PACKAGE_NAMESPACE.equals(namespace))\r\n+\t\t\treturn org.apache.felix.bundlerepository.Capability.PACKAGE;\r\n+\t\treturn namespace;\r\n+\t}\r\n+\t\r\n \tprivate final org.apache.felix.bundlerepository.Resource resource;\r\n \t\r\n \tpublic FelixResourceAdapter(final org.apache.felix.bundlerepository.Resource resource) {\r\n@@ -55,6 +66,7 @@ public int hashCode() {\n \t}\r\n \t\r\n \tpublic List<Capability> getCapabilities(String namespace) {\r\n+\t\tnamespace = toFelixNamespace(namespace);\r\n \t\torg.apache.felix.bundlerepository.Capability[] capabilities = resource.getCapabilities();\r\n \t\tArrayList<Capability> result = new ArrayList<Capability>(capabilities.length);\r\n \t\tif (namespace == null || namespace.equals(ResourceConstants.IDENTITY_NAMESPACE)) {\r\n@@ -81,6 +93,7 @@ public int hashCode() {\n \t}\r\n \r\n \tpublic List<Requirement> getRequirements(String namespace) {\r\n+\t\tnamespace = toFelixNamespace(namespace);\r\n \t\torg.apache.felix.bundlerepository.Requirement[] requirements = resource.getRequirements();\r\n \t\tArrayList<Requirement> result = new ArrayList<Requirement>(requirements.length);\r\n \t\tfor (final org.apache.felix.bundlerepository.Requirement requirement : requirements) {\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/FelixResourceAdapter.java",
                "sha": "24cc17425d4babd965afe3a959018967d5df829e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/OsgiCapabilityAdapter.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/OsgiCapabilityAdapter.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 2,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/OsgiCapabilityAdapter.java",
                "patch": "@@ -15,6 +15,7 @@\n \r\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n+import java.util.HashMap;\r\n import java.util.Map;\r\n \r\n import org.apache.felix.bundlerepository.Capability;\r\n@@ -44,13 +45,20 @@ public String getName() {\n \tpublic Property[] getProperties() {\r\n \t\tMap<String, Object> attributes = capability.getAttributes();\r\n \t\tCollection<Property> result = new ArrayList<Property>(attributes.size());\r\n-\t\tfor (final Map.Entry<String, Object> entry : capability.getAttributes().entrySet())\r\n+\t\tfor (final Map.Entry<String, Object> entry : capability.getAttributes().entrySet()) {\r\n+\t\t\tif (entry.getKey().equals(capability.getNamespace())) {\r\n+\t\t\t\tresult.add(new FelixProperty(getName(), entry.getValue()));\r\n+\t\t\t\tcontinue;\r\n+\t\t\t}\r\n \t\t\tresult.add(new FelixProperty(entry));\r\n+\t\t}\r\n \t\treturn result.toArray(new Property[result.size()]);\r\n \t}\r\n \r\n \t@SuppressWarnings(\"rawtypes\")\r\n \tpublic Map getPropertiesAsMap() {\r\n-\t\treturn capability.getAttributes();\r\n+\t\tMap<String, Object> result = new HashMap<String, Object>(capability.getAttributes());\r\n+\t\tresult.put(getName(), result.get(capability.getNamespace()));\r\n+\t\treturn result;\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/obr/felix/OsgiCapabilityAdapter.java",
                "sha": "7bb1d6e037d08c878756926fb82e737f25ba0ae4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-itests/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/pom.xml?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/pom.xml",
                "patch": "@@ -39,6 +39,11 @@\n             <artifactId>services</artifactId>\n             <version>3.3.0-v20110523</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.equinox</groupId>\n+            <artifactId>org.eclipse.equinox.resolver</artifactId>\n+            <version>1.0.0-SNAPSHOT</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.eclipse.equinox</groupId>\n             <artifactId>org.eclipse.equinox.event</artifactId>",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-itests/pom.xml",
                "sha": "6e763f239f1a54007d4a6b498479b812a01f5fdd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java?ref=40ce35ae675d8b2d902c64bf90fd95cffc81d33b",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "patch": "@@ -125,6 +125,7 @@ public int size() {\n \t\t\t\t// Bundles\r\n \t\t\t\tmavenBundle(\"org.eclipse.osgi\", \"services\").version(\"3.3.0-v20110523\"),\r\n \t\t\t\tmavenBundle(\"org.eclipse.equinox\", \"region\").version(\"1.0.0.v20110518\"),\r\n+\t\t\t\tmavenBundle(\"org.eclipse.equinox\", \"org.eclipse.equinox.resolver\").version(\"1.0.0-SNAPSHOT\"),\r\n \t\t\t\tmavenBundle(\"org.apache.aries.testsupport\", \"org.apache.aries.testsupport.unit\"),\r\n \t\t\t\tmavenBundle(\"org.apache.aries.application\", \"org.apache.aries.application.api\"),\r\n \t\t\t\tmavenBundle(\"org.apache.aries\", \"org.apache.aries.util\"),\r",
                "raw_url": "https://github.com/apache/aries/raw/40ce35ae675d8b2d902c64bf90fd95cffc81d33b/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "sha": "02e6374144c7467faa6e4393c37ab7a9ea4c1057",
                "status": "modified"
            }
        ],
        "message": "ARIES-748: Update subsystems to use Equinox impl of org.osgi.service.resolver.Resolver\n\nThe initial API and implementation of the Equinox org.osgi.service.resolver (RFC 112) is available in the master branches of the rt.equinox.bundles and rt.equinox.framework git repositories. I updated subsystems to make use of it. Previously, a quick and dirty Resolver adaptor wrapped around the existing Felix OBR implementation was used. Note the subsystems impl uses a registered Resolver service, so making use of the Equinox resolver simply meant adding the bundle to the itests project. When Felix releases their implementation of org.osgi.service.resolver, the two will (hopefully) be interchangeable. \n\nUsing the Equinox resolver highlighted some shortcomings in the subsystems implementation, which were fixed and are listed below. \n\n(1) Updated subsystem-itests to bring in the Equinox resolver. \n(2) Updated SubsystemEnvironment to return all capabilities that match a requirement, even those from the root subsystem (i.e. from the system bundle and any other already installed bundles). Previously, Felix OBR had been automatically providing these via the Resolver adaptor since Felix OBR has a built-in system repository. However, for the RFC 112 resolver, the expectation is the Environment will provide everything. \n(3) Fixed an issue where the resource -> subsystem relationship was not being established for resources in the root subsystem causing an NPE. \n(4) The FelixRequirementAdaptor must strip out the \"mandatory:<*\" clause from the filter or InvalidSyntaxException occurs. \n(5) OsgiIdentityRequirement now includes the filter directive. \n(6) Added namespace translations to FelixResourceAdaptor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1171761 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/af11b678e211764c1154bfc59de9ca1dcb17e2e7",
        "repo": "aries",
        "unit_tests": [
            "AriesSubsystemTest.java",
            "FelixCapabilityAdapterTest.java",
            "FelixRequirementAdapterTest.java",
            "FelixResourceAdapterTest.java"
        ]
    },
    "aries_46274f3": {
        "bug_id": "aries_46274f3",
        "commit": "https://github.com/apache/aries/commit/46274f389f95f43db239779a2b1820b2691b5f4f",
        "file": [
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "changes": 106,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 28,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "patch": "@@ -433,21 +433,14 @@ public SubsystemArchive getArchive() {\n \t\r\n \t@Override\r\n \tpublic BundleContext getBundleContext() {\r\n-\t\tif (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLED).contains(getState()))\r\n+\t\tif (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLED).contains(\r\n+\t\t\t\tgetState()))\r\n \t\t\treturn null;\r\n-\t\tRegion region = this.region;\r\n-\t\tSubsystem subsystem = this;\r\n-\t\t// Features, and unscoped subsystems in general, do not have their own region context\r\n-\t\t// bundle but rather share with the scoped subsystem in the same region.\r\n-\t\tif (isFeature()) {\r\n-\t\t\tfor (Subsystem parent : getParents()) {\r\n-\t\t\t\tif (!((AriesSubsystem)parent).isFeature()) {\r\n-\t\t\t\t\tregion = ((AriesSubsystem)parent).getRegion();\r\n-\t\t\t\t\tsubsystem = parent;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn region.getBundle(RegionContextBundleHelper.SYMBOLICNAME_PREFIX + subsystem.getSubsystemId(), RegionContextBundleHelper.VERSION).getBundleContext();\r\n+\t\tAriesSubsystem subsystem = findScopedSubsystemInRegion();\r\n+\t\treturn region.getBundle(\r\n+\t\t\t\tRegionContextBundleHelper.SYMBOLICNAME_PREFIX\r\n+\t\t\t\t\t\t+ subsystem.getSubsystemId(),\r\n+\t\t\t\tRegionContextBundleHelper.VERSION).getBundleContext();\r\n \t}\r\n \t\r\n \t@Override\r\n@@ -706,7 +699,7 @@ void install() {\n \t\t\t\t.getServiceProvider().getService(Coordinator.class)\r\n \t\t\t\t.create(getSymbolicName() + \"-\" + getSubsystemId(), 0);\r\n \t\ttry {\r\n-\t\t\tinstall(coordination);\r\n+\t\t\tinstall(coordination, null);\r\n \t\t} catch (Exception e) {\r\n \t\t\tcoordination.fail(e);\r\n \t\t} finally {\r\n@@ -800,6 +793,34 @@ protected synchronized void waitForStateChange() {\n \t\t}\r\n \t}\r\n \t\r\n+\tprivate void addSubsystemServiceImportToSharingPolicy(\r\n+\t\t\tRegionFilterBuilder builder) throws InvalidSyntaxException {\r\n+\t\tbuilder.allow(\r\n+\t\t\t\tRegionFilter.VISIBLE_SERVICE_NAMESPACE,\r\n+\t\t\t\tnew StringBuilder(\"(&(\")\r\n+\t\t\t\t\t\t.append(org.osgi.framework.Constants.OBJECTCLASS)\r\n+\t\t\t\t\t\t.append('=').append(Subsystem.class.getName())\r\n+\t\t\t\t\t\t.append(\")(\")\r\n+\t\t\t\t\t\t.append(Constants.SubsystemServicePropertyRegions)\r\n+\t\t\t\t\t\t.append('=').append(region.getName())\r\n+\t\t\t\t\t\t.append(\"))\").toString());\r\n+\t}\r\n+\t\r\n+\tprivate void addSubsystemServiceImportToSharingPolicy(RegionFilterBuilder builder, Region to)\r\n+\t\t\tthrows InvalidSyntaxException, BundleException {\r\n+\t\t// TODO This check seems brittle. There is apparently no constant for\r\n+\t\t// the root region's name in Digraph.\r\n+\t\tif (to.getName().equals(\"org.eclipse.equinox.region.kernel\"))\r\n+\t\t\taddSubsystemServiceImportToSharingPolicy(builder);\r\n+\t\telse {\r\n+\t\t\tto = findRootRegion();\r\n+\t\t\tbuilder = to.getRegionDigraph().createRegionFilterBuilder();\r\n+\t\t\taddSubsystemServiceImportToSharingPolicy(builder);\r\n+\t\t\tRegionFilter regionFilter = builder.build();\r\n+\t\t\tregion.connectRegion(to, regionFilter);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n \tprivate void checkRoot() {\r\n \t\tif (isRoot()) {\r\n \t\t\tthrow new SubsystemException(\"This operation may not be performed on the root subsystem\");\r\n@@ -817,6 +838,24 @@ private Region createRegion(String name) throws BundleException {\n \t\treturn region;\r\n \t}\r\n \t\r\n+\tprivate Region findRootRegion() {\r\n+\t\treturn findRootSubsystem().region;\r\n+\t}\r\n+\t\r\n+\tprivate AriesSubsystem findRootSubsystem() {\r\n+\t\tAriesSubsystem root = this;\r\n+\t\twhile (!root.isRoot())\r\n+\t\t\troot = ((AriesSubsystem)root.getParents().iterator().next());\r\n+\t\treturn root;\r\n+\t}\r\n+\t\r\n+\tprivate AriesSubsystem findScopedSubsystemInRegion() {\r\n+\t\tAriesSubsystem result = this;\r\n+\t\twhile (!result.isScoped())\r\n+\t\t\tresult = (AriesSubsystem)result.getParents().iterator().next();\r\n+\t\treturn result;\r\n+\t}\r\n+\t\r\n \tprivate DeploymentManifest getDeploymentManifest() throws IOException, URISyntaxException {\r\n //\t\tif (archive.getDeploymentManifest() == null) {\r\n \t\t\tarchive.setDeploymentManifest(new DeploymentManifest(\r\n@@ -834,10 +873,10 @@ private DeploymentManifest getDeploymentManifest() throws IOException, URISyntax\n \t\treturn archive.getDeploymentManifest();\r\n \t}\r\n \t\r\n-\tprivate synchronized void install(Coordination coordination) throws Exception {\r\n+\tprivate synchronized void install(Coordination coordination, AriesSubsystem parent) throws Exception {\r\n \t\tif (!isFeature())\r\n \t\t\tRegionContextBundleHelper.installRegionContextBundle(this);\r\n-\t\tActivator.getInstance().getSubsystemServiceRegistrar().register(this);\r\n+\t\tActivator.getInstance().getSubsystemServiceRegistrar().register(this, parent);\r\n \t\tSet<Resource> contentResources = new TreeSet<Resource>(\r\n \t\t\t\tnew Comparator<Resource>() {\r\n \t\t\t\t\t@Override\r\n@@ -917,6 +956,7 @@ private synchronized Subsystem install(String location, InputStream content, Coo\n \t\t\t\t\t\t&& subsystem.getVersion().equals(ssr.getSubsystemManifest().getSubsystemVersionHeader().getVersion())\r\n \t\t\t\t\t\t&& subsystem.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType())))\r\n \t\t\t\t\tthrow new SubsystemException(\"Location already exists but symbolic name, version, and type are not the same: \" + location);\r\n+\t\t\t\tsubsystemInstalling(subsystem);\r\n \t\t\t\tsubsystemInstalled(subsystem);\r\n \t\t\t\treturn subsystem;\r\n \t\t\t}\r\n@@ -926,6 +966,7 @@ private synchronized Subsystem install(String location, InputStream content, Coo\n \t\t\tif (subsystem != null) {\r\n \t\t\t\tif (!subsystem.getType().equals(ssr.getSubsystemManifest().getSubsystemTypeHeader().getType()))\r\n \t\t\t\t\tthrow new SubsystemException(\"Subsystem already exists in target region but has a different type: \" + location);\r\n+\t\t\t\tsubsystemInstalling(subsystem);\r\n \t\t\t\tsubsystemInstalled(subsystem);\r\n \t\t\t\treturn subsystem;\r\n \t\t\t}\r\n@@ -1050,7 +1091,7 @@ else if (resource instanceof SubsystemResource) {\n \t\t// before the child. This results in the child (i.e. this subsystem) being uninstalled as part\r\n \t\t// of that process, but its state has not moved from INSTALLING to INSTALL_FAILED, which results\r\n \t\t// in an eternal wait for a state change.\r\n-\t\tsubsystemInstalled(subsystem);\r\n+\t\tsubsystemInstalling(subsystem);\r\n \t\tcoordination.addParticipant(new Participant() {\r\n \t\t\tpublic void ended(Coordination coordination) throws Exception {\r\n \t\t\t\t// noop\r\n@@ -1062,17 +1103,24 @@ public void failed(Coordination coordination) throws Exception {\n \t\t\t\tsubsystemUninstalled(subsystem);\r\n \t\t\t}\r\n \t\t});\r\n-\t\tsubsystem.install(coordination);\r\n+\t\tsubsystem.install(coordination, this);\r\n+\t\tsubsystemInstalled(subsystem);\r\n \t\treturn subsystem;\r\n \t}\r\n \r\n \tprivate boolean isRoot() {\r\n \t\treturn ROOT_LOCATION.equals(getLocation());\r\n \t}\r\n \t\r\n+\tprivate boolean isScoped() {\r\n+\t\treturn isApplication() || isComposite();\r\n+\t}\r\n+\t\r\n \tprivate void resolve() {\r\n \t\tsetState(State.RESOLVING);\r\n \t\ttry {\r\n+\t\t\tfor (Subsystem child : subsystemGraph.getChildren(this))\r\n+\t\t\t\t((AriesSubsystem)child).resolve();\r\n \t\t\t// TODO I think this is insufficient. Do we need both\r\n \t\t\t// pre-install and post-install environments for the Resolver?\r\n \t\t\tCollection<Bundle> bundles = getBundles();\r\n@@ -1166,15 +1214,12 @@ private void setExportIsolationPolicy(RegionFilterBuilder builder, SubsystemExpo\n \t}\r\n \r\n \tprivate void setImportIsolationPolicy() throws BundleException, IOException, InvalidSyntaxException, URISyntaxException {\r\n-\t\tif (isRoot())\r\n-\t\t\t// Nothing to do if this is the root subsystem.\r\n-\t\t\treturn;\r\n-\t\tif (isFeature())\r\n-\t\t\t// Features share the same isolation as that of their scoped parent.\r\n+\t\tif (isRoot() || isFeature())\r\n \t\t\treturn;\r\n \t\tRegion from = region;\r\n-\t\tRegion to = ((AriesSubsystem)getParents().iterator().next()).region;\r\n \t\tRegionFilterBuilder builder = from.getRegionDigraph().createRegionFilterBuilder();\r\n+\t\tRegion to = ((AriesSubsystem)getParents().iterator().next()).region;\r\n+\t\taddSubsystemServiceImportToSharingPolicy(builder, to);\r\n \t\tif (isApplication() || isComposite()) {\r\n \t\t\t// Both applications and composites have Import-Package headers that require processing.\r\n \t\t\t// In the case of applications, the header is generated.\r\n@@ -1330,13 +1375,18 @@ private void stopSubsystemResource(Resource resource) throws IOException {\n \t}\r\n \t\r\n \tprivate synchronized void subsystemInstalled(AriesSubsystem subsystem) {\r\n+\t\tActivator.getInstance().getSubsystemServiceRegistrar().addRegion(subsystem, region);\r\n+\t}\r\n+\t\r\n+\tprivate synchronized void subsystemInstalling(AriesSubsystem subsystem) {\r\n \t\tlocationToSubsystem.put(subsystem.getLocation(), subsystem);\r\n \t\tsubsystemGraph.add(this, subsystem);\r\n \t\taddResourceToSubsystem(subsystem, this);\r\n \t\tconstituents.add(subsystem);\r\n \t}\r\n \t\r\n \tprivate synchronized void subsystemUninstalled(AriesSubsystem subsystem) {\r\n+\t\tActivator.getInstance().getSubsystemServiceRegistrar().removeRegion(subsystem, region);\r\n \t\tconstituents.remove(subsystem);\r\n \t\tremoveResourceToSubsystem(subsystem, this);\r\n \t\tsubsystemGraph.remove(subsystem);\r\n@@ -1345,7 +1395,8 @@ private synchronized void subsystemUninstalled(AriesSubsystem subsystem) {\n \t\r\n \tprivate void uninstall(boolean changeState) {\r\n \t\tif (changeState)\r\n-\t\t\tsetState(State.UNINSTALLING);\r\n+\t\t\tsetState(State.INSTALLED);\r\n+\t\tsetState(State.UNINSTALLING);\r\n \t\t// Uninstall child subsystems first.\r\n \t\tfor (Subsystem subsystem : getChildren()) {\r\n \t\t\ttry {\r\n@@ -1378,8 +1429,7 @@ private void uninstall(boolean changeState) {\n \t\tsubsystemGraph.remove(this);\r\n \t\tlocationToSubsystem.remove(location);\r\n \t\tdeleteFile(directory);\r\n-\t\tif (changeState)\r\n-\t\t\tsetState(State.UNINSTALLED);\r\n+\t\tsetState(State.UNINSTALLED);\r\n \t\tActivator.getInstance().getSubsystemServiceRegistrar().unregister(this);\r\n \t\tif (!isFeature())\r\n \t\t\tRegionContextBundleHelper.uninstallRegionContextBundle(this);\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "sha": "f1d0122da51f6282c8da1f7ddc15ad3f06d95607",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 0,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java",
                "patch": "@@ -4,6 +4,7 @@\n \tpublic static final String BundleSymbolicName = org.osgi.framework.Constants.BUNDLE_SYMBOLICNAME;\r\n \tpublic static final String BundleVersion = org.osgi.framework.Constants.BUNDLE_VERSION;\r\n \tpublic static final String RegionContextBundleSymbolicNamePrefix = \"org.osgi.service.subsystem.region.context.\";\r\n+\tpublic static final String SubsystemServicePropertyRegions = \"org.apache.aries.subsystem.service.regions\";\r\n \t\r\n \tprivate Constants() {}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Constants.java",
                "sha": "f537f4111050a3fdf889d34e2c31dd885905ad54",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 15,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java",
                "patch": "@@ -26,9 +26,7 @@ public boolean equals(Object o) {\n \t\t\tif (!(o instanceof SubsystemWrapper))\r\n \t\t\t\treturn false;\r\n \t\t\tSubsystemWrapper that = (SubsystemWrapper)o;\r\n-\t\t\treturn s.getSymbolicName().equals(that.s.getSymbolicName())\r\n-\t\t\t\t\t&& s.getVersion().equals(that.s.getVersion())\r\n-\t\t\t\t\t&& s.getType().equals(that.s.getType());\r\n+\t\t\treturn s.getLocation().equals(that.s.getLocation());\r\n \t\t}\r\n \t\t\r\n \t\tpublic Subsystem getSubsystem() {\r\n@@ -37,28 +35,24 @@ public Subsystem getSubsystem() {\n \t\t\r\n \t\t@Override\r\n \t\tpublic int hashCode() {\r\n-\t\t\tint result = 17;\r\n-\t\t\tresult = result + 31 * s.getSymbolicName().hashCode();\r\n-\t\t\tresult = result + 31 * s.getVersion().hashCode();\r\n-\t\t\tresult = result + 31 * s.getType().hashCode();\r\n-\t\t\treturn result;\r\n+\t\t\treturn s.getLocation().hashCode();\r\n \t\t}\r\n \t\t\r\n \t\t@Override\r\n \t\tpublic String toString() {\r\n-\t\t\treturn new StringBuilder().append(s.getClass().getName())\r\n-\t\t\t\t\t.append(\": symbolicName=\").append(s.getSymbolicName())\r\n+\t\t\treturn new StringBuilder(\"location=\").append(s.getLocation())\r\n+\t\t\t\t\t.append(\", symbolicName=\").append(s.getSymbolicName())\r\n \t\t\t\t\t.append(\", version=\").append(s.getVersion())\r\n \t\t\t\t\t.append(\", type=\").append(s.getType()).toString();\r\n \t\t}\r\n \t}\r\n \tprivate final Map<SubsystemWrapper, Collection<SubsystemWrapper>> adjacencyList = new HashMap<SubsystemWrapper, Collection<SubsystemWrapper>>();\r\n \t\r\n-\tpublic SubsystemGraph(Subsystem root) {\r\n+\tpublic SubsystemGraph(AriesSubsystem root) {\r\n \t\tadjacencyList.put(new SubsystemWrapper(root), new HashSet<SubsystemWrapper>());\r\n \t}\r\n \t\r\n-\tpublic synchronized void add(Subsystem parent, Subsystem child) {\r\n+\tpublic synchronized void add(AriesSubsystem parent, AriesSubsystem child) {\r\n \t\tSubsystemWrapper parentWrap = new SubsystemWrapper(parent);\r\n \t\tSubsystemWrapper childWrap = new SubsystemWrapper(child);\r\n \t\tif (containsAncestor(childWrap, parentWrap))\r\n@@ -76,7 +70,7 @@ public synchronized void add(Subsystem parent, Subsystem child) {\n \t\tsubsystems.add(childWrap);\r\n \t}\r\n \t\r\n-\tpublic synchronized Collection<Subsystem> getChildren(Subsystem parent) {\r\n+\tpublic synchronized Collection<Subsystem> getChildren(AriesSubsystem parent) {\r\n \t\tCollection<SubsystemWrapper> children = adjacencyList.get(new SubsystemWrapper(parent));\r\n \t\tif (children == null || children.isEmpty())\r\n \t\t\treturn Collections.emptySet();\r\n@@ -86,7 +80,7 @@ public synchronized void add(Subsystem parent, Subsystem child) {\n  \t\treturn Collections.unmodifiableCollection(result);\r\n \t}\r\n \t\r\n-\tpublic synchronized Collection<Subsystem> getParents(Subsystem child) {\r\n+\tpublic synchronized Collection<Subsystem> getParents(AriesSubsystem child) {\r\n \t\tCollection<SubsystemWrapper> parents = getParents(new SubsystemWrapper(child));\r\n \t\tCollection<Subsystem> result = new ArrayList<Subsystem>(parents.size());\r\n \t\tfor (SubsystemWrapper parent : parents) {\r\n@@ -95,7 +89,7 @@ public synchronized void add(Subsystem parent, Subsystem child) {\n \t\treturn Collections.unmodifiableCollection(result);\r\n \t}\r\n \t\r\n-\tpublic synchronized void remove(Subsystem subsystem) {\r\n+\tpublic synchronized void remove(AriesSubsystem subsystem) {\r\n \t\tSubsystemWrapper subsystemWrap = new SubsystemWrapper(subsystem);\r\n \t\tCollection<SubsystemWrapper> parents = getParents(subsystemWrap);\r\n \t\tfor (SubsystemWrapper parent : parents)\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemGraph.java",
                "sha": "0a96d2a01a36e3a372401ef16c429ca19321b63b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 2,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java",
                "patch": "@@ -3,6 +3,7 @@\n import org.apache.aries.subsystem.core.archive.SubsystemContentHeader;\r\n import org.apache.aries.subsystem.core.archive.SubsystemManifest;\r\n import org.osgi.framework.VersionRange;\r\n+import org.osgi.service.subsystem.SubsystemConstants;\r\n import org.osgi.service.subsystem.SubsystemException;\r\n \r\n public class SubsystemManifestValidator {\r\n@@ -18,9 +19,10 @@ public static void validate(AriesSubsystem subsystem, SubsystemManifest manifest\n \t\t\t}\r\n \t\t}\r\n \t\telse if (subsystem.isFeature()) {\r\n-\t\t\tif (manifest.getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies()) {\r\n+\t\t\tif (manifest.getSubsystemTypeHeader().getProvisionPolicyDirective().isAcceptDependencies())\r\n \t\t\t\tthrow new SubsystemException(\"Feature subsystems may not declare a provision-policy of acceptDependencies\");\r\n-\t\t\t}\r\n+\t\t\tif (manifest.getHeaders().get(SubsystemConstants.PREFERRED_PROVIDER) != null)\r\n+\t\t\t\tthrow new SubsystemException(\"Feature subsystems may not declare a \" + SubsystemConstants.PREFERRED_PROVIDER + \" header\");\r\n \t\t}\r\n \t}\r\n \t\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemManifestValidator.java",
                "sha": "d3368cee4829c3bbb55d2f29468033c8c0d2ba4b",
                "status": "modified"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 15,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java",
                "patch": "@@ -1,11 +1,15 @@\n package org.apache.aries.subsystem.core.internal;\r\n \r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n import java.util.Dictionary;\r\n import java.util.HashMap;\r\n+import java.util.HashSet;\r\n import java.util.Hashtable;\r\n import java.util.Iterator;\r\n import java.util.Map;\r\n \r\n+import org.eclipse.equinox.region.Region;\r\n import org.osgi.framework.BundleContext;\r\n import org.osgi.framework.ServiceRegistration;\r\n import org.osgi.service.subsystem.Subsystem;\r\n@@ -21,12 +25,43 @@ public SubsystemServiceRegistrar(BundleContext context) {\n \t\tthis.context = context;\r\n \t}\r\n \t\r\n-\tpublic synchronized void register(Subsystem subsystem) {\r\n-\t\tif (map.containsKey(subsystem))\r\n-\t\t\tthrow new IllegalStateException(\"Subsystem '\" + subsystem + \"' already has service registration '\" + map.get(subsystem) + \"'\");\r\n+\tpublic synchronized void addRegion(AriesSubsystem subsystem, Region region) {\r\n+\t\tServiceRegistration<Subsystem> registration = map.get(subsystem);\r\n+\t\tif (registration == null)\r\n+\t\t\tthrow new IllegalStateException(\"Subsystem '\" + subsystem + \"' is not registered\");\r\n+\t\tCollection<String> currentRegions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);\r\n+\t\tString regionName = region.getName();\r\n+\t\tif (currentRegions.contains(regionName))\r\n+\t\t\treturn;\r\n+\t\tCollection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);\r\n+\t\tnewRegions.addAll(currentRegions);\r\n+\t\tnewRegions.add(regionName);\r\n \t\tDictionary<String, Object> properties = properties(subsystem);\r\n-\t\tServiceRegistration<Subsystem> registration = context.registerService(Subsystem.class, subsystem, properties);\r\n-\t\tmap.put(subsystem, registration);\r\n+\t\tproperties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));\r\n+\t\tregistration.setProperties(properties);\r\n+\t}\r\n+\t\r\n+\tpublic synchronized void register(AriesSubsystem child, AriesSubsystem parent) {\r\n+\t\tif (map.containsKey(child))\r\n+\t\t\tthrow new IllegalStateException(\"Subsystem '\" + child + \"' already has service registration '\" + map.get(child) + \"'\");\r\n+\t\tDictionary<String, Object> properties = properties(child, parent);\r\n+\t\tServiceRegistration<Subsystem> registration = context.registerService(Subsystem.class, child, properties);\r\n+\t\tmap.put(child, registration);\r\n+\t}\r\n+\t\r\n+\tpublic synchronized void removeRegion(AriesSubsystem subsystem, Region region) {\r\n+\t\tServiceRegistration<Subsystem> registration = map.get(subsystem);\r\n+\t\tif (registration == null)\r\n+\t\t\treturn;\r\n+\t\tCollection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);\r\n+\t\tString regionName = region.getName();\r\n+\t\tif (regions == null || !regions.contains(regionName))\r\n+\t\t\treturn;\r\n+\t\tregions = new HashSet<String>(regions);\r\n+\t\tregions.remove(regionName);\r\n+\t\tDictionary<String, Object> properties = properties(subsystem);\r\n+\t\tproperties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(regions));\r\n+\t\tregistration.setProperties(properties);\r\n \t}\r\n \t\r\n \tpublic synchronized void unregister(Subsystem subsystem) {\r\n@@ -44,21 +79,43 @@ public synchronized void unregisterAll() {\n \t\t}\r\n \t}\r\n \t\r\n-\tpublic synchronized void update(Subsystem subsystem) {\r\n+\tpublic synchronized void update(AriesSubsystem subsystem) {\r\n \t\tServiceRegistration<Subsystem> registration = map.get(subsystem);\r\n \t\tif (registration == null)\r\n \t\t\tthrow new IllegalStateException(\"Subsystem '\" + subsystem + \"' is not registered\");\r\n-\t\tDictionary<String, Object> properties = properties(subsystem);\r\n+\t\tDictionary<String, Object> properties = properties(subsystem, registration);\r\n \t\tregistration.setProperties(properties);\r\n \t}\r\n \t\r\n-\tprivate Dictionary<String, Object> properties(Subsystem subsystem) {\r\n-\t\tDictionary<String, Object> properties = new Hashtable<String, Object>();\r\n-\t\tproperties.put(SubsystemConstants.SUBSYSTEM_ID_PROPERTY, subsystem.getSubsystemId());\r\n-\t\tproperties.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY, subsystem.getSymbolicName());\r\n-\t\tproperties.put(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY, subsystem.getVersion());\r\n-\t\tproperties.put(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY, subsystem.getType());\r\n-\t\tproperties.put(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY, subsystem.getState());\r\n-\t\treturn properties;\r\n+\tprivate Dictionary<String, Object> properties(AriesSubsystem subsystem) {\r\n+\t\tDictionary<String, Object> result = new Hashtable<String, Object>();\r\n+\t\tresult.put(SubsystemConstants.SUBSYSTEM_ID_PROPERTY, subsystem.getSubsystemId());\r\n+\t\tresult.put(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME_PROPERTY, subsystem.getSymbolicName());\r\n+\t\tresult.put(SubsystemConstants.SUBSYSTEM_VERSION_PROPERTY, subsystem.getVersion());\r\n+\t\tresult.put(SubsystemConstants.SUBSYSTEM_TYPE_PROPERTY, subsystem.getType());\r\n+\t\tresult.put(SubsystemConstants.SUBSYSTEM_STATE_PROPERTY, subsystem.getState());\r\n+\t\tresult.put(Constants.SubsystemServicePropertyRegions, Collections.singleton(subsystem.getRegion().getName()));\r\n+\t\treturn result;\r\n+\t}\r\n+\t\r\n+\tprivate Dictionary<String, Object> properties(AriesSubsystem child, AriesSubsystem parent) {\r\n+\t\tDictionary<String, Object> result = properties(child);\r\n+\t\tif (parent == null)\r\n+\t\t\treturn result;\r\n+\t\tCollection<String> currentRegions = (Collection<String>)result.get(Constants.SubsystemServicePropertyRegions);\r\n+\t\tCollection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);\r\n+\t\tnewRegions.addAll(currentRegions);\r\n+\t\tnewRegions.add(parent.getRegion().getName());\r\n+\t\tresult.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));\r\n+\t\treturn result;\r\n+\t}\r\n+\t\r\n+\tprivate Dictionary<String, Object> properties(AriesSubsystem subsystem, ServiceRegistration<Subsystem> registration) {\r\n+\t\tDictionary<String, Object> result = properties(subsystem);\r\n+\t\tCollection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);\r\n+\t\tif (regions == null)\r\n+\t\t\treturn result;\r\n+\t\tresult.put(Constants.SubsystemServicePropertyRegions, regions);\r\n+\t\treturn result;\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java",
                "sha": "2cf86cc22c4051ce5233b436a958d255e8736f69",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 12,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java",
                "patch": "@@ -5,14 +5,22 @@\n \r\n import org.osgi.framework.Version;\r\n import org.osgi.service.subsystem.Subsystem;\r\n-import org.osgi.service.subsystem.SubsystemConstants;\r\n \r\n public class TargetRegion {\r\n \tCollection<Subsystem> region = new HashSet<Subsystem>();\r\n \r\n-\tpublic TargetRegion(AriesSubsystem target) {\r\n-\t\tregion.add(target);\r\n-\t\taddToRegion(target.getChildren());\r\n+\tpublic TargetRegion(AriesSubsystem subsystem) {\r\n+\t\t// Find the scoped subsystem that controls the region.\r\n+\t\tAriesSubsystem controllingScopedSubsystem = subsystem;\r\n+\t\twhile (controllingScopedSubsystem.isFeature())\r\n+\t\t\tcontrollingScopedSubsystem = (AriesSubsystem)subsystem.getParents().iterator().next();\r\n+\t\t// The scoped subsystem controlling the region is part of the region.\r\n+\t\tregion.add(controllingScopedSubsystem);\r\n+\t\t// All children of the scoped subsystem are part of the region. If the\r\n+\t\t// child is a feature, then all descendants of the child that are\r\n+\t\t// features and part of an unbroken line of features are part of the\r\n+\t\t// region.\r\n+\t\taddChildrenToRegion(controllingScopedSubsystem);\r\n \t}\r\n \r\n \tpublic boolean contains(Subsystem subsystem) {\r\n@@ -32,15 +40,25 @@ public Subsystem find(String symbolicName, Version version) {\n \t\t}\r\n \t\treturn null;\r\n \t}\r\n-\r\n-\tprivate void addToRegion(Collection<Subsystem> children) {\r\n-\t\tfor (Subsystem child : children) {\r\n-\t\t\tif (SubsystemConstants.SUBSYSTEM_TYPE_FEATURE.equals(child\r\n-\t\t\t\t\t.getSubsystemHeaders(null).get(\r\n-\t\t\t\t\t\t\tSubsystemConstants.SUBSYSTEM_TYPE))) {\r\n-\t\t\t\taddToRegion(child.getChildren());\r\n-\t\t\t}\r\n+\t\r\n+\tprivate void addChildrenToRegion(AriesSubsystem controllingScopedSubsystem) {\r\n+\t\tfor (Subsystem child : controllingScopedSubsystem.getChildren()) {\r\n \t\t\tregion.add(child);\r\n+\t\t\t// If the child is a feature, all of its children that are features\r\n+\t\t\t// must be added as well.\r\n+\t\t\tif (((AriesSubsystem)child).isFeature())\r\n+\t\t\t\taddFeatureDescendentsToRegion((AriesSubsystem)child);\r\n \t\t}\r\n \t}\r\n+\t\r\n+\tprivate void addFeatureDescendentsToRegion(AriesSubsystem parent) {\r\n+\t\tfor (Subsystem child : parent.getChildren())\r\n+\t\t\t// If the descendant is not a feature, skip it.\r\n+\t\t\tif (((AriesSubsystem)child).isFeature()) {\r\n+\t\t\t\tregion.add(child);\r\n+\t\t\t\t// All descendants that are features and part of an unbroken\r\n+\t\t\t\t// line of features must be added.\r\n+\t\t\t\taddFeatureDescendentsToRegion((AriesSubsystem)child);\r\n+\t\t\t}\r\n+\t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/TargetRegion.java",
                "sha": "196ea8c0965f5057bcb79bf43288316e069e1ff3",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/tmp/SubsystemResource.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/tmp/SubsystemResource.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 6,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/tmp/SubsystemResource.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.aries.subsystem.core.archive.SubsystemManifest;\r\n import org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader;\r\n import org.apache.aries.subsystem.core.archive.SubsystemTypeHeader;\r\n+import org.apache.aries.subsystem.core.archive.SubsystemVersionHeader;\r\n import org.apache.aries.subsystem.core.internal.Activator;\r\n import org.apache.aries.subsystem.core.internal.SubsystemUri;\r\n import org.apache.aries.subsystem.core.resource.BundleResource;\r\n@@ -44,6 +45,7 @@\n public abstract class SubsystemResource implements Resource {\r\n \tprotected static class Location {\r\n \t\tprivate final String symbolicName;\r\n+\t\tprivate final URL url;\r\n \t\tprivate final String value;\r\n \t\tprivate final Version version;\r\n \t\t\r\n@@ -53,6 +55,7 @@ public Location(String location) throws MalformedURLException, URISyntaxExceptio\n \t\t\tif (location.startsWith(\"subsystem://\"))\r\n \t\t\t\turi = new SubsystemUri(location);\r\n \t\t\tsymbolicName = uri == null ? null : uri.getSymbolicName();\r\n+\t\t\turl = uri == null ? null : uri.getURL();\r\n \t\t\tversion = uri == null ? null : uri.getVersion();\r\n \t\t}\r\n \t\t\r\n@@ -67,23 +70,28 @@ public String getValue() {\n \t\tpublic Version getVersion() {\r\n \t\t\treturn version;\r\n \t\t}\r\n+\t\t\r\n+\t\tpublic InputStream open() throws IOException {\r\n+\t\t\treturn url == null ? new URL(value).openStream() : url.openStream();\r\n+\t\t}\r\n \t}\r\n \t\r\n \tprotected static final Pattern PATTERN = Pattern.compile(\"([^@]+)(?:@(.+))?.esa\");\r\n \t\r\n \tpublic static SubsystemResource newInstance(String location, InputStream content) throws IOException, URISyntaxException {\r\n+\t\tLocation loc = new Location(location);\r\n \t\tif (content == null)\r\n-\t\t\tcontent = new URL(location).openStream();\r\n+\t\t\tcontent = loc.open();\r\n \t\tIDirectory directory = FileSystem.getFSRoot(content);\r\n \t\tSubsystemManifest manifest = computeSubsystemManifest(directory);\r\n \t\tString type = manifest.getSubsystemTypeHeader().getType();\r\n \t\t// TODO Make an enum out of the types?\r\n \t\tif (SubsystemTypeHeader.TYPE_APPLICATION.equals(type))\r\n-\t\t\treturn new ApplicationResource(new Location(location), directory, manifest);\r\n+\t\t\treturn new ApplicationResource(loc, directory, manifest);\r\n \t\tif (SubsystemTypeHeader.TYPE_COMPOSITE.equals(type))\r\n-\t\t\treturn new CompositeResource(new Location(location), directory, manifest);\r\n+\t\t\treturn new CompositeResource(loc, directory, manifest);\r\n \t\tif (SubsystemTypeHeader.TYPE_FEATURE.equals(type))\r\n-\t\t\treturn new FeatureResource(new Location(location), directory, manifest);\r\n+\t\t\treturn new FeatureResource(loc, directory, manifest);\r\n \t\tthrow new SubsystemException(\"Unsupported subsystem type: \" + type);\r\n \t}\r\n \t\r\n@@ -209,6 +217,10 @@ protected void addSubsystemSymbolicNameHeader(SubsystemManifest.Builder builder,\n \t\taddHeader(builder, computeSubsystemSymbolicNameHeader(manifest));\r\n \t}\r\n \t\r\n+\tprotected void addSubsystemVersionHeader(SubsystemManifest.Builder builder, SubsystemManifest manifest) {\r\n+\t\taddHeader(builder, computeSubsystemVersionHeader(manifest));\r\n+\t}\r\n+\t\r\n \tprotected List<Capability> computeCapabilities() {\r\n \t\treturn subsystemManifest.toCapabilities(this);\r\n \t}\r\n@@ -322,14 +334,22 @@ protected SubsystemManifest computeSubsystemManifestAfterRequirements(SubsystemM\n \tprotected SubsystemManifest computeSubsystemManifestBeforeRequirements(SubsystemManifest manifest) {\r\n \t\tSubsystemManifest.Builder builder = new SubsystemManifest.Builder().manifest(manifest);\r\n \t\taddSubsystemSymbolicNameHeader(builder, manifest);\r\n+\t\taddSubsystemVersionHeader(builder, manifest);\r\n \t\taddSubsystemContentHeader(builder, manifest);\r\n \t\treturn builder.build();\r\n \t}\r\n \t\r\n \tprotected SubsystemSymbolicNameHeader computeSubsystemSymbolicNameHeader(SubsystemManifest manifest) {\r\n-\t\tHeader<?> header = manifest.getSubsystemSymbolicNameHeader();\r\n+\t\tSubsystemSymbolicNameHeader header = manifest.getSubsystemSymbolicNameHeader();\r\n \t\tif (header == null)\r\n \t\t\theader = new SubsystemSymbolicNameHeader(location.getSymbolicName());\r\n-\t\treturn (SubsystemSymbolicNameHeader)header;\r\n+\t\treturn header;\r\n+\t}\r\n+\t\r\n+\tprotected SubsystemVersionHeader computeSubsystemVersionHeader(SubsystemManifest manifest) {\r\n+\t\tSubsystemVersionHeader header = manifest.getSubsystemVersionHeader();\r\n+\t\tif (header.getVersion().equals(Version.emptyVersion) && location.getVersion() != null)\r\n+\t\t\theader = new SubsystemVersionHeader(location.getVersion());\r\n+\t\treturn header;\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/tmp/SubsystemResource.java",
                "sha": "e2e813a4238b9da10cd3506f0bef86ca9b15bffa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "patch": "@@ -114,6 +114,7 @@ public void testFeature1() throws Exception {\n \t\t\ttry {\n \t\t\t\tuninstallSubsystem(feature1);\n \t\t\t\tif (feature2 != null) {\n+\t\t\t\t\tassertEvent(feature2, Subsystem.State.INSTALLED, 5000);\n \t\t\t\t\tassertEvent(feature2, Subsystem.State.UNINSTALLING, 5000);\n \t\t\t\t\tassertEvent(feature2, Subsystem.State.UNINSTALLED, 5000);\n \t\t\t\t\tassertNotChild(feature1, feature2);",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/FeatureTest.java",
                "sha": "7a16b8836dd04200a12c3448ffb4a5bb723489a0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java?ref=46274f389f95f43db239779a2b1820b2691b5f4f",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "patch": "@@ -707,6 +707,7 @@ protected void uninstallSubsystem(Subsystem subsystem) throws Exception {\n \t\t\t\t|| subsystem.getType().equals(SubsystemConstants.SUBSYSTEM_TYPE_COMPOSITE))\r\n \t\t\tb = getRegionContextBundle(subsystem);\r\n \t\tsubsystem.uninstall();\r\n+\t\tassertEvent(subsystem, State.INSTALLED, 5000);\r\n \t\tassertEvent(subsystem, State.UNINSTALLING, 5000);\r\n \t\tassertEvent(subsystem, State.UNINSTALLED, 5000);\r\n \t\tassertState(State.UNINSTALLED, subsystem);\r",
                "raw_url": "https://github.com/apache/aries/raw/46274f389f95f43db239779a2b1820b2691b5f4f/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java",
                "sha": "aba00f4ee4ddb029efc6e9381b8ab8d640981681",
                "status": "modified"
            }
        ],
        "message": "ARIES-825: Update subsystems to latest Subsystem, Resolver, and Repository APIs.\n\n(1) Fixed issue where default version specified in subsystem URI was not being used.\n(2) Fixed issue where embedded URL within subsystem URI was not being used.\n(3) Fixed issue where feature installations were not failed when Preferred-Provider header was declared.\n(4) Fixed issue with equals and hashCode of SubsystemGraph where symbolic name, version, and type were being used. Either location or ID should be used instead.\n(5) Fixed issue where target region was being computed incorrectly.\n(6) Added support for subsystem service visibility rules by region.\n(7) Fixed issue where getBundleContext() would throw an NPE for features that only had features as parents.\n(8) Child subsystems will now be resolved before the parent's bundles. This puts the events in the expected order as well as insures the child's export policy is applied in order to satisfy any dependencies within the parent.\n(9) Added INSTALLED as a transitional event when uninstalling a subsystem.\n(10) Fixed issue where UNINSTALLING and UNINSTALLED events were not taking place from the INSTALL_FAILED state.\n(11) Updated tests to expect transitional INSTALLED state when uninstalling a subsystem.\n(12) Fixed issue with SubsystemResource.Location.open() where provided location string was not being used as a last resort.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1311274 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/9d7a71353728a5a8ea739be02a09e7e91e73d6ff",
        "repo": "aries",
        "unit_tests": [
            "AriesSubsystemTest.java"
        ]
    },
    "aries_46843bd": {
        "bug_id": "aries_46843bd",
        "commit": "https://github.com/apache/aries/commit/46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/aries/blob/46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java?ref=46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c",
                "deletions": 1,
                "filename": "blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "patch": "@@ -680,7 +680,12 @@ private Object addInterceptors(final Object original)\n         List<Interceptor> interceptors = reg.getInterceptors(interceptorLookupKey);\n         if (interceptors != null && interceptors.size() > 0) {\n             try {\n-              intercepted = BlueprintExtender.getProxyManager().createProxy(FrameworkUtil.getBundle(original.getClass()), \n+              Bundle b = FrameworkUtil.getBundle(original.getClass());\n+              if (b == null) {\n+                // we have a class from the framework parent, so use our bundle for proxying.\n+                b = blueprintContainer.getBundleContext().getBundle();\n+              }\n+              intercepted = BlueprintExtender.getProxyManager().createProxy(b, \n                   ProxyUtils.asList(original.getClass()), ProxyUtils.passThrough(original), \n                   new Collaborator(interceptorLookupKey, interceptors));\n             } catch (org.apache.aries.proxy.UnableToProxyException e) {",
                "raw_url": "https://github.com/apache/aries/raw/46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java",
                "sha": "d8f997e093a6bd341c6af88a44317f9aa04b3ea7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/aries/blob/46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java?ref=46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c",
                "deletions": 1,
                "filename": "blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java",
                "patch": "@@ -449,6 +449,10 @@ public Object getService(Bundle bundle, ServiceRegistration registration) {\n             Object intercepted;\n             try {\n                 Bundle b = FrameworkUtil.getBundle(original.getClass());\n+                if (b == null) {\n+                  // we have a class from the framework parent, so use our bundle for proxying.\n+                  b = blueprintContainer.getBundleContext().getBundle();\n+                }\n                 Callable<Object> target = ProxyUtils.passThrough(original);\n                 InvocationHandlerWrapper collaborator = new Collaborator(cm, interceptors);\n                 try {\n@@ -464,7 +468,8 @@ public Object getService(Bundle bundle, ServiceRegistration registration) {\n                         classes, target, collaborator);\n                 }\n             } catch (Throwable u) {\n-                LOGGER.info(\"A problem occurred trying to create a proxy object. Returning the original object instead.\", u);\n+                Bundle b = blueprintContainer.getBundleContext().getBundle();\n+                LOGGER.info(\"Unable to create a proxy object for the service \" + getName() + \" defined in bundle \" + b.getSymbolicName() + \" at version \" + b.getVersion() + \" with id \" + b.getBundleId() + \". Returning the original object instead.\", u);\n                 LOGGER.debug(LOG_EXIT, \"getService\", original);\n                 return original;\n             }",
                "raw_url": "https://github.com/apache/aries/raw/46843bd25c7c7eb0db63f7fc0ce6c0725bd24b5c/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java",
                "sha": "d64270c5e18467204ae93762c55976fa45007f93",
                "status": "modified"
            }
        ],
        "message": "ARIES-526 Fix NPE when proxying for JDK defined classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/aries/trunk@1052392 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/9f53b8292380d859cb07fe71e9fddfdf7e55789e",
        "repo": "aries",
        "unit_tests": [
            "BeanRecipeTest.java"
        ]
    },
    "aries_5d8bf06": {
        "bug_id": "aries_5d8bf06",
        "commit": "https://github.com/apache/aries/commit/5d8bf069c29c85fd53459d9d51303991cfb114e4",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aries/blob/5d8bf069c29c85fd53459d9d51303991cfb114e4/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java?ref=5d8bf069c29c85fd53459d9d51303991cfb114e4",
                "deletions": 4,
                "filename": "jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "patch": "@@ -83,14 +83,17 @@ private ServiceEventData(){\n     }\n     \n     public ServiceEventData(ServiceEvent serviceEvent) {\n+        @SuppressWarnings(\"rawtypes\")\n         ServiceReference serviceReference = serviceEvent.getServiceReference();\n         this.serviceId = (Long) serviceReference.getProperty(Constants.SERVICE_ID);\n         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);\n-        Bundle bundle = serviceReference.getBundle();\n-        this.bundleId = bundle.getBundleId();\n-        this.bundleLocation = bundle.getLocation();\n-        this.bundleSymbolicName = bundle.getSymbolicName();\n         this.eventType = serviceEvent.getType();\n+        Bundle bundle = serviceReference.getBundle();\n+        if (bundle != null) {\n+            this.bundleId = bundle.getBundleId();\n+            this.bundleLocation = bundle.getLocation();\n+            this.bundleSymbolicName = bundle.getSymbolicName();\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/aries/raw/5d8bf069c29c85fd53459d9d51303991cfb114e4/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceEventData.java",
                "sha": "d6c4bc742e5799d3da4a7253d67320032f37f983",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1468] Fixing NPE in case bundle is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1718800 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/ebebf42249010d8414d549d59652ddf900104dfb",
        "repo": "aries",
        "unit_tests": [
            "ServiceEventDataTest.java"
        ]
    },
    "aries_747408d": {
        "bug_id": "aries_747408d",
        "commit": "https://github.com/apache/aries/commit/747408d08adb76c8f140a4fb211c69fff1a2b966",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries/blob/747408d08adb76c8f140a4fb211c69fff1a2b966/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java?ref=747408d08adb76c8f140a4fb211c69fff1a2b966",
                "deletions": 2,
                "filename": "subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "patch": "@@ -19,6 +19,7 @@\n \r\n import org.apache.aries.subsystem.obr.internal.AbstractRequirement;\r\n import org.apache.aries.subsystem.obr.internal.NamespaceTranslator;\r\n+import org.osgi.framework.namespace.BundleNamespace;\r\n import org.osgi.resource.Capability;\r\n import org.osgi.resource.Namespace;\r\n import org.osgi.resource.Resource;\r\n@@ -63,11 +64,17 @@ public boolean matches(Capability capability) {\n \t\t/* (1) The Felix OBR specific \"mandatory:<*\" syntax must be stripped out of the filter.\r\n \t\t * (2) The namespace must be translated.\r\n \t\t */\r\n-\t\tresult.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, requirement.getFilter()\r\n+\t\tString namespace = getNamespace();\r\n+\t\tString filter = requirement.getFilter()\r\n \t\t\t\t.replaceAll(\"\\\\(mandatory\\\\:\\\\<\\\\*[^\\\\)]*\\\\)\", \"\")\r\n \t\t\t\t.replaceAll(\"\\\\(service\\\\=[^\\\\)]*\\\\)\", \"\")\r\n \t\t\t\t.replaceAll(\"objectclass\", \"objectClass\")\r\n-\t\t\t\t.replaceAll(requirement.getName() + '=', getNamespace() + '='));\r\n+\t\t\t\t.replaceAll(requirement.getName() + '=', namespace + '=');\r\n+\t\tif (BundleNamespace.BUNDLE_NAMESPACE.equals(namespace)) {\r\n+\t\t\tfilter = filter.replaceAll(\"symbolicname\", namespace)\r\n+\t\t\t\t\t.replaceAll(\"version\", BundleNamespace.CAPABILITY_BUNDLE_VERSION_ATTRIBUTE);\r\n+\t\t}\r\n+\t\tresult.put(Namespace.REQUIREMENT_FILTER_DIRECTIVE, filter);\r\n \t\tresult.put(Namespace.REQUIREMENT_RESOLUTION_DIRECTIVE, requirement.isOptional() ? Namespace.RESOLUTION_OPTIONAL : Namespace.RESOLUTION_MANDATORY);\r\n \t\tresult.put(Namespace.REQUIREMENT_CARDINALITY_DIRECTIVE, requirement.isMultiple() ? Namespace.CARDINALITY_MULTIPLE : Namespace.CARDINALITY_SINGLE);\r\n \t\treturn Collections.unmodifiableMap(result);\r",
                "raw_url": "https://github.com/apache/aries/raw/747408d08adb76c8f140a4fb211c69fff1a2b966/subsystem/subsystem-obr/src/main/java/org/apache/aries/subsystem/util/felix/FelixRequirementAdapter.java",
                "sha": "75c156e14d9646121388b77020e1bf0cfc105a90",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1522] NullPointerException (NPE) when creating a RequireBundleHeader using the filter provided by FelixRequirementAdapter.\n\nWhen adapting a requirement in the \"bundle\" namespace from OBR, the adapter must replace \"symbolicname\" with \"osgi.wiring.bundle\" and \"version\" with \"bundle-version\" in the filter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1738988 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/7b902515666570a50f70ecd150f685a5151bf4ca",
        "repo": "aries",
        "unit_tests": [
            "FelixRequirementAdapterTest.java"
        ]
    },
    "aries_7d307f9": {
        "bug_id": "aries_7d307f9",
        "commit": "https://github.com/apache/aries/commit/7d307f907cace61b04fc6f4822b4502558c3e564",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/aries/blob/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java?ref=7d307f907cace61b04fc6f4822b4502558c3e564",
                "deletions": 7,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "patch": "@@ -585,18 +585,19 @@ public synchronized void start() throws SubsystemException {\n \t\t\t\tstartResource(resource, coordination);\r\n \t\t\t}\r\n \t\t\tsetState(State.ACTIVE);\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tcoordination.fail(e);\r\n+\t\t} catch (Throwable t) {\r\n+\t\t\tcoordination.fail(t);\r\n \t\t\t// TODO Need to reinstate complete isolation by disconnecting the\r\n \t\t\t// region and transition to INSTALLED.\r\n \t\t} finally {\r\n \t\t\ttry {\r\n \t\t\t\tcoordination.end();\r\n \t\t\t} catch (CoordinationException e) {\r\n-\t\t\t\tLOGGER.error(\r\n-\t\t\t\t\t\t\"An error occurred while starting a resource in subsystem \"\r\n-\t\t\t\t\t\t\t\t+ this, e);\r\n \t\t\t\tsetState(State.RESOLVED);\r\n+\t\t\t\tThrowable t = e.getCause();\r\n+\t\t\t\tif (t instanceof SubsystemException)\r\n+\t\t\t\t\tthrow (SubsystemException)t;\r\n+\t\t\t\tthrow new SubsystemException(t);\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n@@ -1044,9 +1045,12 @@ private void resolve() {\n \t\t\t// TODO Could avoid calling setState (and notifyAll) here and\r\n \t\t\t// avoid the need for a lock.\r\n \t\t\tsetState(State.RESOLVED);\r\n-\t\t} catch (Exception e) {\r\n+\t\t}\r\n+\t\tcatch (Throwable t) {\r\n \t\t\tsetState(State.INSTALLED);\r\n-\t\t\tthrow new SubsystemException(e);\r\n+\t\t\tif (t instanceof SubsystemException)\r\n+\t\t\t\tthrow (SubsystemException)t;\r\n+\t\t\tthrow new SubsystemException(t);\r\n \t\t}\r\n \t}\r\n \t\r",
                "raw_url": "https://github.com/apache/aries/raw/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AriesSubsystem.java",
                "sha": "ef1e1ab10b04716b021b8c566850ff11481841c9",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/aries/blob/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemFileResource.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemFileResource.java?ref=7d307f907cace61b04fc6f4822b4502558c3e564",
                "deletions": 24,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemFileResource.java",
                "patch": "@@ -7,17 +7,21 @@\n import java.util.ArrayList;\r\n import java.util.Collections;\r\n import java.util.List;\r\n+import java.util.Map.Entry;\r\n import java.util.jar.Manifest;\r\n import java.util.regex.Matcher;\r\n import java.util.regex.Pattern;\r\n \r\n+import org.apache.aries.subsystem.core.archive.Header;\r\n+import org.apache.aries.subsystem.core.archive.HeaderFactory;\r\n+import org.apache.aries.subsystem.core.archive.SubsystemManifest;\r\n import org.apache.aries.subsystem.core.archive.SubsystemSymbolicNameHeader;\r\n+import org.apache.aries.subsystem.core.archive.SubsystemTypeHeader;\r\n+import org.apache.aries.subsystem.core.archive.SubsystemVersionHeader;\r\n import org.apache.aries.subsystem.core.internal.OsgiIdentityCapability;\r\n import org.apache.aries.util.filesystem.FileSystem;\r\n import org.apache.aries.util.filesystem.IDirectory;\r\n import org.apache.aries.util.manifest.ManifestProcessor;\r\n-import org.osgi.framework.Version;\r\n-import org.osgi.framework.namespace.IdentityNamespace;\r\n import org.osgi.resource.Capability;\r\n import org.osgi.resource.Requirement;\r\n import org.osgi.resource.Resource;\r\n@@ -32,49 +36,64 @@\n \tprivate final IDirectory directory;\r\n \tprivate final File file;\r\n \tprivate final String location;\r\n+\tprivate final List<Requirement> requirements;\r\n \t\r\n \tpublic SubsystemFileResource(File content) throws IOException {\r\n \t\tfile = content;\r\n \t\tdirectory = FileSystem.getFSRoot(content);\r\n \t\tManifest manifest = ManifestProcessor.obtainManifestFromAppDir(directory, \"OSGI-INF/DEPLOYMENT.MF\");\r\n \t\tif (manifest == null)\r\n \t\t\tmanifest = ManifestProcessor.obtainManifestFromAppDir(directory, \"OSGI-INF/SUBSYSTEM.MF\");\r\n-\t\tString symbolicName = null;\r\n-\t\tVersion version = Version.emptyVersion;\r\n-\t\tString type = SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION;\r\n-\t\tif (manifest != null) {\r\n-\t\t\tString value = manifest.getMainAttributes().getValue(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME);\r\n-\t\t\tif (value != null)\r\n-\t\t\t\tsymbolicName = new SubsystemSymbolicNameHeader(value).getSymbolicName();\r\n-\t\t\tvalue = manifest.getMainAttributes().getValue(SubsystemConstants.SUBSYSTEM_VERSION);\r\n-\t\t\tif (value != null)\r\n-\t\t\t\tversion = Version.parseVersion(value);\r\n-\t\t\tvalue = manifest.getMainAttributes().getValue(SubsystemConstants.SUBSYSTEM_TYPE);\r\n-\t\t\tif (value != null)\r\n-\t\t\t\ttype = value;\r\n-\t\t}\r\n+\t\t\r\n+\t\tString symbolicName = manifest == null ? null : manifest.getMainAttributes().getValue(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME);\r\n \t\tMatcher matcher = PATTERN.matcher(content.getName());\r\n \t\tif (symbolicName == null) {\r\n \t\t\tif (!matcher.matches())\r\n \t\t\t\tthrow new IllegalArgumentException(\"No symbolic name\");\r\n \t\t\tsymbolicName = new SubsystemSymbolicNameHeader(matcher.group(1)).getSymbolicName();\r\n \t\t}\r\n-\t\tif (version == Version.emptyVersion && matcher.matches()) {\r\n+\t\tSubsystemManifest.Builder builder = new SubsystemManifest.Builder(symbolicName);\r\n+\t\tif (manifest != null)\r\n+\t\t\tfor (Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\r\n+\t\t\t\tString key = String.valueOf(entry.getKey());\r\n+\t\t\t\tif (key.equals(SubsystemManifest.SUBSYSTEM_SYMBOLICNAME))\r\n+\t\t\t\t\tcontinue;\r\n+\t\t\t\tbuilder.header(HeaderFactory.createHeader(key, String.valueOf(entry.getValue())));\r\n+\t\t\t}\r\n+\t\tSubsystemManifest subsystemManifest = builder.build();\r\n+\t\tSubsystemVersionHeader version = SubsystemVersionHeader.DEFAULT;\r\n+\t\tSubsystemTypeHeader type = SubsystemTypeHeader.DEFAULT;\r\n+\t\tHeader<?> value = subsystemManifest.getSubsystemVersionHeader();\r\n+\t\tif (value != null)\r\n+\t\t\tversion = (SubsystemVersionHeader)value;\r\n+\t\tvalue = subsystemManifest.getSubsystemTypeHeader();\r\n+\t\tif (value != null)\r\n+\t\t\ttype = (SubsystemTypeHeader)value;\r\n+\t\tif (version == SubsystemVersionHeader.DEFAULT && matcher.matches()) {\r\n \t\t\tString group = matcher.group(2);\r\n \t\t\tif (group != null)\r\n-\t\t\t\tversion = Version.parseVersion(group);\r\n+\t\t\t\tversion = new SubsystemVersionHeader(group);\r\n \t\t}\r\n-\t\tList<Capability> capabilities = new ArrayList<Capability>(1);\r\n-\t\tcapabilities.add(new OsgiIdentityCapability(this, symbolicName, version, type));\r\n+\t\tList<Capability> capabilities;\r\n+\t\tList<Requirement> requirements;\r\n+\t\tcapabilities = subsystemManifest.toCapabilities(this);\r\n+\t\trequirements = subsystemManifest.toRequirements(this);\r\n+\t\tcapabilities.add(new OsgiIdentityCapability(this, symbolicName, version.getVersion(), type.getType()));\r\n \t\tthis.capabilities = Collections.unmodifiableList(capabilities);\r\n-\t\tlocation = \"subsystem://?\" + SubsystemConstants.SUBSYSTEM_SYMBOLICNAME + '=' + symbolicName + '&' + SubsystemConstants.SUBSYSTEM_VERSION + '=' + version;\r\n+\t\tthis.requirements = Collections.unmodifiableList(requirements);\r\n+\t\tlocation = \"subsystem://?\" + SubsystemConstants.SUBSYSTEM_SYMBOLICNAME + '=' + symbolicName + '&' + SubsystemConstants.SUBSYSTEM_VERSION + '=' + version.getVersion();\r\n \t}\r\n \t\r\n \t@Override\r\n \tpublic List<Capability> getCapabilities(String namespace) {\r\n-\t\tif (namespace == null || IdentityNamespace.IDENTITY_NAMESPACE.equals(namespace))\r\n+\t\tif (namespace == null)\r\n \t\t\treturn capabilities;\r\n-\t\treturn Collections.emptyList();\r\n+\t\tArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());\r\n+\t\tfor (Capability capability : capabilities)\r\n+\t\t\tif (namespace.equals(capability.getNamespace()))\r\n+\t\t\t\tresult.add(capability);\r\n+\t\tresult.trimToSize();\r\n+\t\treturn result;\r\n \t}\r\n \r\n \t@Override\r\n@@ -93,6 +112,13 @@ public String getLocation() {\n \r\n \t@Override\r\n \tpublic List<Requirement> getRequirements(String namespace) {\r\n-\t\treturn Collections.emptyList();\r\n+\t\tif (namespace == null)\r\n+\t\t\treturn requirements;\r\n+\t\tArrayList<Requirement> result = new ArrayList<Requirement>(requirements.size());\r\n+\t\tfor (Requirement requirement : requirements)\r\n+\t\t\tif (namespace.equals(requirement.getNamespace()))\r\n+\t\t\t\tresult.add(requirement);\r\n+\t\tresult.trimToSize();\r\n+\t\treturn result;\r\n \t}\r\n }\r",
                "raw_url": "https://github.com/apache/aries/raw/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemFileResource.java",
                "sha": "3074124b16dd5a77f9a5710743f0930284d89243",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/aries/blob/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemStreamResource.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemStreamResource.java?ref=7d307f907cace61b04fc6f4822b4502558c3e564",
                "deletions": 9,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemStreamResource.java",
                "patch": "@@ -10,7 +10,6 @@\n import java.util.Collections;\r\n import java.util.List;\r\n import java.util.Map.Entry;\r\n-import java.util.jar.Attributes;\r\n import java.util.jar.Manifest;\r\n \r\n import org.apache.aries.subsystem.core.archive.Header;\r\n@@ -64,20 +63,20 @@ public SubsystemStreamResource(String location, InputStream content) throws IOEx\n \t\t\tIOUtils.close(content);\r\n \t\t}\r\n \t\tManifest manifest = ManifestProcessor.obtainManifestFromAppDir(directory, \"OSGI-INF/SUBSYSTEM.MF\");\r\n-\t\tAttributes attributes = manifest.getMainAttributes();\r\n-\t\tString symbolicName = attributes.getValue(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME);\r\n+\t\tString symbolicName = manifest == null ? null : manifest.getMainAttributes().getValue(SubsystemConstants.SUBSYSTEM_SYMBOLICNAME);\r\n \t\tif (symbolicName == null) {\r\n \t\t\tif (uri == null)\r\n \t\t\t\tthrow new IllegalArgumentException(\"No symbolic name\");\r\n \t\t\tsymbolicName = uri.getSymbolicName();\r\n \t\t}\r\n \t\tSubsystemManifest.Builder builder = new SubsystemManifest.Builder(symbolicName);\r\n-\t\tfor (Entry<Object, Object> entry : attributes.entrySet()) {\r\n-\t\t\tString key = String.valueOf(entry.getKey());\r\n-\t\t\tif (key.equals(SubsystemManifest.SUBSYSTEM_SYMBOLICNAME))\r\n-\t\t\t\tcontinue;\r\n-\t\t\tbuilder.header(HeaderFactory.createHeader(key, String.valueOf(entry.getValue())));\r\n-\t\t}\r\n+\t\tif (manifest != null)\r\n+\t\t\tfor (Entry<Object, Object> entry : manifest.getMainAttributes().entrySet()) {\r\n+\t\t\t\tString key = String.valueOf(entry.getKey());\r\n+\t\t\t\tif (key.equals(SubsystemManifest.SUBSYSTEM_SYMBOLICNAME))\r\n+\t\t\t\t\tcontinue;\r\n+\t\t\t\tbuilder.header(HeaderFactory.createHeader(key, String.valueOf(entry.getValue())));\r\n+\t\t\t}\r\n \t\tSubsystemManifest subsystemManifest = builder.build();\r\n \t\tSubsystemVersionHeader version = SubsystemVersionHeader.DEFAULT;\r\n \t\tSubsystemTypeHeader type = SubsystemTypeHeader.DEFAULT;\r",
                "raw_url": "https://github.com/apache/aries/raw/7d307f907cace61b04fc6f4822b4502558c3e564/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/resource/SubsystemStreamResource.java",
                "sha": "6b819e21447652e6910eab9e64ecf5622d88a26c",
                "status": "modified"
            }
        ],
        "message": "ARIES-825: Update subsystems to latest Subsystem, Resolver, and Repository APIs.\n\n(1) Fixed NPE in SubsystemStreamResource when no subsystem manifest exists.\n(2) Reduced nested exceptions when starting a subsystem fails.\n(3) Added initial support for capabilities and requirements on subsystem resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1302667 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/f5a660135a71c74cafa914c52030609ab40d060f",
        "repo": "aries",
        "unit_tests": [
            "AriesSubsystemTest.java"
        ]
    },
    "aries_a4fee5d": {
        "bug_id": "aries_a4fee5d",
        "commit": "https://github.com/apache/aries/commit/a4fee5d66e621920e368ccb3fc0e02795991a7c0",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/aries/blob/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java?ref=a4fee5d66e621920e368ccb3fc0e02795991a7c0",
                "deletions": 5,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.List;\r\n import java.util.jar.JarEntry;\r\n import java.util.jar.JarOutputStream;\r\n+import java.util.jar.Manifest;\r\n \r\n import org.apache.aries.subsystem.core.archive.BundleManifest;\r\n import org.apache.aries.subsystem.core.archive.BundleRequiredExecutionEnvironmentHeader;\r\n@@ -49,17 +50,26 @@\n import org.apache.aries.util.filesystem.IDirectory;\r\n import org.apache.aries.util.filesystem.IFile;\r\n import org.apache.aries.util.io.IOUtils;\r\n+import org.osgi.framework.Constants;\r\n import org.osgi.namespace.service.ServiceNamespace;\r\n import org.osgi.resource.Capability;\r\n import org.osgi.resource.Requirement;\r\n import org.osgi.resource.Resource;\r\n import org.osgi.service.subsystem.SubsystemException;\r\n \r\n public class BundleResource implements Resource, org.apache.aries.subsystem.core.repository.RepositoryContent {\r\n-\tprivate static BundleManifest computeManifest(IDirectory directory) {\r\n-\t\treturn new BundleManifest(org.apache.aries.util.manifest.BundleManifest\r\n-\t\t\t\t.fromBundle(directory)\r\n-\t\t\t\t.getRawManifest());\r\n+\tprivate static BundleManifest computeManifest(IDirectory directory, IFile content) {\r\n+\t\torg.apache.aries.util.manifest.BundleManifest bm = \r\n+\t\t\t\torg.apache.aries.util.manifest.BundleManifest.fromBundle(directory);\r\n+\t\tif (bm == null) {\r\n+\t\t\tthrow new IllegalArgumentException(\"File \\\"\" + content.getName() + \"\\\" contains no bundle manifest META-INF/MANIFEST.MF.\");\r\n+\t\t}\r\n+\t\tManifest m = bm.getRawManifest();\r\n+\t\tBundleManifest result = new BundleManifest(m);\r\n+\t\tif (result.getHeader(Constants.BUNDLE_SYMBOLICNAME) == null) {\r\n+\t\t\tthrow new IllegalArgumentException(\"File \\\"\" + content.getName() + \"\\\" has a META-INF/MANIFEST.MF with no Bundle-SymbolicName header.\");\r\n+\t\t}\r\n+\t\treturn result;\r\n \t}\r\n \t\r\n \tprivate final List<Capability> capabilities = new ArrayList<Capability>();\r\n@@ -70,7 +80,7 @@ private static BundleManifest computeManifest(IDirectory directory) {\n \tpublic BundleResource(IFile content) {\r\n \t\tthis.content = content;\r\n \t\tIDirectory dir = content.isDirectory() ? content.convert() : content.convertNested();\r\n-\t\tmanifest = computeManifest(dir);\r\n+\t\tmanifest = computeManifest(dir, content);\r\n \t\tcomputeRequirementsAndCapabilities(dir);\r\n \t}\r\n \r",
                "raw_url": "https://github.com/apache/aries/raw/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java",
                "sha": "7342de74aa1231325d5ca0208962aea7bab77faa",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/aries/blob/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java?ref=a4fee5d66e621920e368ccb3fc0e02795991a7c0",
                "deletions": 3,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java",
                "patch": "@@ -467,9 +467,16 @@ private void addResource(IFile file, IDirectory content, SubsystemManifest manif\n             IOException, ResolutionException, MalformedURLException {\n         String name = file.getName();\n         if (name.endsWith(\".esa\")) {\n-        \tresult.add(new RawSubsystemResource(convertFileToLocation(file), content, parentSubsystem));\n+            result.add(new RawSubsystemResource(convertFileToLocation(file), content, parentSubsystem));\n         } else if (name.endsWith(\".jar\")) {\n-            result.add(new BundleResource(file));\n+            try {\n+                result.add(new BundleResource(file));\n+            } catch (IllegalArgumentException e) {\n+                // Ignore if the resource is an invalid bundle or not a bundle at all.\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"File \\\"\" + file.getName() + \"\\\" in subsystem with location \\\"\" + location + \"\\\" will be ignored because it is not recognized as a supported resource.\", e);\n+                }\n+            }\n         } else {\n             // This is a different type of file. Add a file resource for it if there is a custom content handler for it.\n             FileResource fr = new FileResource(file);\n@@ -493,7 +500,7 @@ private void addResource(IFile file, IDirectory content, SubsystemManifest manif\n             } catch (Exception e) {\n                 // Ignore if the resource is an invalid bundle or not a bundle at all.\n                 if (logger.isDebugEnabled()) {\n-                    logger.debug(\"File \\\"\" + file.getName() + \"\\\" in subsystem with location \\\"\" + location + \"\\\" will be ignored because it is not recognized as a supported resource\", e);\n+                    logger.debug(\"File \\\"\" + file.getName() + \"\\\" in subsystem with location \\\"\" + location + \"\\\" will be ignored because it is not recognized as a supported resource.\", e);\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/aries/raw/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/RawSubsystemResource.java",
                "sha": "905b629c53949e9764fc385e97ae35a21032d81b",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/aries/blob/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/pom.xml",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/pom.xml?ref=a4fee5d66e621920e368ccb3fc0e02795991a7c0",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/pom.xml",
                "patch": "@@ -332,6 +332,21 @@\n                 <artifactId>maven-jar-plugin</artifactId>\n                 <version>2.3</version>\n                 <executions>\n+                     <execution>\n+                        <id>tb1-nobsn</id>\n+                        <goals>\n+                            <goal>jar</goal>\n+                        </goals>\n+                        <configuration>\n+                            <excludes>\n+                                <exclude>**/*</exclude>\n+                            </excludes>\n+                            <classesDirectory>${project.build.directory}/test-classes</classesDirectory>\n+                            <outputDirectory>${project.build.directory}/test-classes/nobsn</outputDirectory>\n+                            <finalName>tb1</finalName>\n+                        </configuration>\n+                        <phase>process-test-classes</phase>\n+                    </execution>\n                     <execution>\n                         <id>tb1-application1</id>\n                         <goals>",
                "raw_url": "https://github.com/apache/aries/raw/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/pom.xml",
                "sha": "f270262e86bb45d2c0b118c6b0cba8a4d9223da3",
                "status": "modified"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/aries/blob/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoBSNTest.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoBSNTest.java?ref=a4fee5d66e621920e368ccb3fc0e02795991a7c0",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoBSNTest.java",
                "patch": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.aries.subsystem.itests;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+\n+import org.apache.aries.subsystem.itests.util.TestCapability;\n+import org.apache.aries.subsystem.itests.util.TestRepository;\n+import org.apache.aries.subsystem.itests.util.TestRepositoryContent;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.Constants;\n+import org.osgi.framework.Version;\n+import org.osgi.framework.namespace.IdentityNamespace;\n+import org.osgi.framework.namespace.PackageNamespace;\n+import org.osgi.resource.Resource;\n+import org.osgi.service.repository.Repository;\n+import org.osgi.service.subsystem.Subsystem;\n+import org.osgi.service.subsystem.SubsystemConstants;\n+\n+public class NoBSNTest extends SubsystemTest {\n+\t\n+\t@Override\n+\tpublic void createApplications() throws Exception {\n+\t\tcreateApplication(\"nobsn\", \"tb1.jar\");\n+\t}\n+\t\n+\n+    \n+\t/*\n+\t * Subsystem application1 has content bundle tb1.jar.\n+\t * Bundle tb1.jar has an import package dependency on org.apache.aries.subsystem.itests.tb3.\n+\t */\n+    @Test\n+    public void testApplication1() throws Exception {\n+        Subsystem nobsn = installSubsystemFromFile(\"nobsn.esa\");\n+        try {\n+            assertSymbolicName(\"org.apache.aries.subsystem.nobsn\", nobsn);\n+            assertVersion(\"0.0.0\", nobsn);\n+            assertType(SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION, nobsn);\n+            assertChildren(0, nobsn);\n+            assertConstituents(1, nobsn);\n+            startSubsystem(nobsn);\n+        }\n+        finally {\n+           stopSubsystemSilently(nobsn);\n+           uninstallSubsystemSilently(nobsn);\n+        }\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/aries/raw/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/NoBSNTest.java",
                "sha": "12e0ffd62ee1f724629b524427c9cdf36a666786",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/src/test/resources/nobsn/OSGI-INF/SUBSYSTEM.MF",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-itests/src/test/resources/nobsn/OSGI-INF/SUBSYSTEM.MF?ref=a4fee5d66e621920e368ccb3fc0e02795991a7c0",
                "deletions": 0,
                "filename": "subsystem/subsystem-itests/src/test/resources/nobsn/OSGI-INF/SUBSYSTEM.MF",
                "patch": "@@ -0,0 +1 @@\n+Subsystem-SymbolicName: org.apache.aries.subsystem.nobsn",
                "raw_url": "https://github.com/apache/aries/raw/a4fee5d66e621920e368ccb3fc0e02795991a7c0/subsystem/subsystem-itests/src/test/resources/nobsn/OSGI-INF/SUBSYSTEM.MF",
                "sha": "7ac45864ce1c9c9c69af13bfcf8fca64849810ab",
                "status": "added"
            }
        ],
        "message": "ARIES-1729 - Including resources with no manifest or bundle symbolic names causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1797109 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/ea4555fb4b2c4fdbea0d31665a9ab0d649548f3e",
        "repo": "aries",
        "unit_tests": [
            "BundleResourceTest.java"
        ]
    },
    "aries_acbb886": {
        "bug_id": "aries_acbb886",
        "commit": "https://github.com/apache/aries/commit/acbb886b72b6e393e1288aa93870056ed565f185",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/acbb886b72b6e393e1288aa93870056ed565f185/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java?ref=acbb886b72b6e393e1288aa93870056ed565f185",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java",
                "patch": "@@ -76,7 +76,7 @@ public BundleRevisionResource(BundleRevision revision) {\n         Activator activator = Activator.getInstance();\n         ServiceModeller modeller = activator.getServiceModeller();\n         if (modeller == null)\n-            return null;\n+            return Collections.emptyList();\n         ServiceModeller.ServiceModel model =\n                 modeller.computeRequirementsAndCapabilities(this, new BundleDirectory(revision.getBundle()));\n         return model.getServiceRequirements();",
                "raw_url": "https://github.com/apache/aries/raw/acbb886b72b6e393e1288aa93870056ed565f185/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleRevisionResource.java",
                "sha": "206734bbd1da467023b149919fdc4db0895a5426",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/aries/blob/acbb886b72b6e393e1288aa93870056ed565f185/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/BundleRevisionResourceTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/BundleRevisionResourceTest.java?ref=acbb886b72b6e393e1288aa93870056ed565f185",
                "deletions": 1,
                "filename": "subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/BundleRevisionResourceTest.java",
                "patch": "@@ -43,9 +43,16 @@ public void tearDown() throws Exception {\n     }\n \n     @Test\n-    public void testNoServiceCapabilities() {\n+    public void testNoModellerServiceCapabilities() {\n         BundleRevision br = EasyMock.createNiceMock(BundleRevision.class);\n         BundleRevisionResource brr = new BundleRevisionResource(br);\n         assertEquals(0, brr.getCapabilities(\"osgi.service\").size());\n     }\n+\n+    @Test\n+    public void testNoModellerServiceRequirements() {\n+        BundleRevision br = EasyMock.createNiceMock(BundleRevision.class);\n+        BundleRevisionResource brr = new BundleRevisionResource(br);\n+        assertEquals(0, brr.getRequirements(\"osgi.service\").size());\n+    }\n }",
                "raw_url": "https://github.com/apache/aries/raw/acbb886b72b6e393e1288aa93870056ed565f185/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/BundleRevisionResourceTest.java",
                "sha": "da84ca251284fa9f927c669cfe4309cf20d41f8a",
                "status": "modified"
            }
        ],
        "message": "ARIES-1214 NPE in subsystem-core when used without modeller.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1603766 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/743914b81f293515b3770c0ec20c73334f48bd7f",
        "repo": "aries",
        "unit_tests": [
            "BundleRevisionResourceTest.java"
        ]
    },
    "aries_c2f094a": {
        "bug_id": "aries_c2f094a",
        "commit": "https://github.com/apache/aries/commit/c2f094a717b61645c0551eed10eedff47a6920bc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aries/blob/c2f094a717b61645c0551eed10eedff47a6920bc/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java?ref=c2f094a717b61645c0551eed10eedff47a6920bc",
                "deletions": 1,
                "filename": "jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "patch": "@@ -111,7 +111,8 @@ public void add(final BundleContext ctx, ServiceKey k)\n       BundleContext systemBundle = AccessController.doPrivileged(new PrivilegedAction<BundleContext>() {\n         public BundleContext run()\n         {\n-          return ctx.getBundle(0).getBundleContext();\n+        \t Bundle system = ctx.getBundle(0); \n+        \t return system == null ? null : system.getBundleContext(); \n         }\n       });\n       if (systemBundle == null) systemBundle = ctx;",
                "raw_url": "https://github.com/apache/aries/raw/c2f094a717b61645c0551eed10eedff47a6920bc/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java",
                "sha": "b2e4db0341e05b121e14590e53827f6c1a4322c6",
                "status": "modified"
            }
        ],
        "message": "Aries-971: ServiceHelper.CacheClearoutListener.add(BundleContext, ServiceKey) causes NPE if system bundle is hidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1413680 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/03c135f43ca38d9627708610a976df44b7cab584",
        "repo": "aries",
        "unit_tests": [
            "ServiceHelperTest.java"
        ]
    },
    "aries_c7411e8": {
        "bug_id": "aries_c7411e8",
        "commit": "https://github.com/apache/aries/commit/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries/blob/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java?ref=c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
                "deletions": 10,
                "filename": "proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "patch": "@@ -18,8 +18,6 @@\n  */\n package org.apache.aries.proxy.impl;\n \n-import java.util.Dictionary;\n-import java.util.Hashtable;\n \n import org.apache.aries.proxy.ProxyManager;\n import org.osgi.framework.BundleActivator;\n@@ -55,14 +53,7 @@ public void start(BundleContext context)\n         //if ASM is available then we should also try weaving\n         Class<?> cls = Class.forName(\"org.apache.aries.proxy.impl.weaving.ProxyWeavingHook\",\n         \t\ttrue, ProxyManagerActivator.class.getClassLoader());\n-        Dictionary<String,String> props = new Hashtable<String,String>();\n-        // SubsystemResource.java also uses this constant. \n-        //   While it could be turned into a static final constant, note that this\n-        //   is also a non-standard workaround in the absence of a solution in the spec. \n-        // See the associated OSGi spec bug. \n-        props.put(\"osgi.woven.packages\", \"org.apache.aries.proxy.weaving,org.apache.aries.proxy\");\n-        context.registerService(\"org.osgi.framework.hooks.weaving.WeavingHook\",\n-            cls.getConstructor(BundleContext.class).newInstance(context), props);\n+        cls.getConstructor(BundleContext.class).newInstance(context);\n       } catch (Throwable t) {\n         //We don't care about this, we just won't have registered the hook\n       }",
                "raw_url": "https://github.com/apache/aries/raw/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/ProxyManagerActivator.java",
                "sha": "40b140f758ec04f3bcfda9c250be3429e8106d4f",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/aries/blob/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java?ref=c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81",
                "deletions": 7,
                "filename": "proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "patch": "@@ -19,6 +19,8 @@\n package org.apache.aries.proxy.impl.weaving;\r\n \r\n import java.util.ArrayList;\r\n+import java.util.Dictionary;\r\n+import java.util.Hashtable;\r\n import java.util.List;\r\n import java.util.regex.Pattern;\r\n \r\n@@ -33,6 +35,7 @@\n import org.osgi.framework.hooks.weaving.WeavingException;\r\n import org.osgi.framework.hooks.weaving.WeavingHook;\r\n import org.osgi.framework.hooks.weaving.WovenClass;\r\n+import org.osgi.framework.wiring.BundleWiring;\r\n import org.osgi.util.tracker.ServiceTracker;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -60,20 +63,34 @@\n   private final ServiceTracker controllers;\r\n \r\n   public ProxyWeavingHook(BundleContext context) {\r\n-    enabled = parseMatchers(context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null, WEAVING_ENABLED_CLASSES_DEFAULT);\r\n+    String enabledProp = context != null ? context.getProperty(WEAVING_ENABLED_CLASSES) : null;\r\n+    enabled = parseMatchers(enabledProp, WEAVING_ENABLED_CLASSES_DEFAULT);\r\n     disabled = parseMatchers(context != null ? context.getProperty(WEAVING_DISABLED_CLASSES) : null, WEAVING_DISABLED_CLASSES_DEFAULT);\r\n     controllers = new ServiceTracker(context, ProxyWeavingController.class.getName(), null);\r\n     controllers.open();\r\n+    \r\n+    if (!\"none\".equals(enabledProp)) {\r\n+        Dictionary<String,String> props = new Hashtable<String,String>();\r\n+        // SubsystemResource.java also uses this constant. \r\n+        //   While it could be turned into a static final constant, note that this\r\n+        //   is also a non-standard workaround in the absence of a solution in the spec. \r\n+        // See the associated OSGi spec bug. \r\n+        props.put(\"osgi.woven.packages\", \"org.apache.aries.proxy.weaving,org.apache.aries.proxy\");\r\n+        context.registerService(\"org.osgi.framework.hooks.weaving.WeavingHook\", this, props);\r\n+    }\r\n   }\r\n \r\n   public final void weave(WovenClass wovenClass) {\r\n+    BundleWiring bw = wovenClass.getBundleWiring();\r\n     \r\n-    Bundle b = wovenClass.getBundleWiring().getBundle();\r\n-    \r\n-    if(b.getBundleId() == 0 || \r\n-        b.getSymbolicName().startsWith(\"org.apache.aries.proxy\") ||\r\n-        b.getSymbolicName().startsWith(\"org.apache.aries.util\")) {\r\n-      return;\r\n+    if (bw != null) {\r\n+        Bundle b = bw.getBundle();\r\n+        \r\n+        if(b.getBundleId() == 0 || \r\n+            b.getSymbolicName().startsWith(\"org.apache.aries.proxy\") ||\r\n+            b.getSymbolicName().startsWith(\"org.apache.aries.util\")) {\r\n+          return;\r\n+        }\r\n     }\r\n \r\n     if (!isEnabled(wovenClass.getClassName()) || isDisabled(wovenClass.getClassName())) {\r",
                "raw_url": "https://github.com/apache/aries/raw/c7411e8631c2a3e66c0d49fad9f8b5a287c5ac81/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/ProxyWeavingHook.java",
                "sha": "e0f8fd8e4102355165c3eba173db7969ede9d346",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1126] Prevent an NPE in ProxyWeavingHook and allow a setting to bypass it completely\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1533600 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/c8a8b8fcc78498994d9f012ff189eb8fca89f3fb",
        "repo": "aries",
        "unit_tests": [
            "ProxyWeavingHookTest.java"
        ]
    },
    "aries_e53efdd": {
        "bug_id": "aries_e53efdd",
        "commit": "https://github.com/apache/aries/commit/e53efdd282b4107f5c7c4803d0a2b159dcc12f35",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/aries/blob/e53efdd282b4107f5c7c4803d0a2b159dcc12f35/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java?ref=e53efdd282b4107f5c7c4803d0a2b159dcc12f35",
                "deletions": 0,
                "filename": "spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java",
                "patch": "@@ -72,6 +72,11 @@ public Void run() {\n     }\r\n \r\n     public static void fixContextClassloader(String cls, String method, Class<?> clsArg, ClassLoader bundleLoader) {\r\n+        if (BaseActivator.activator == null) {\r\n+            // The system is not yet initialized. We can't do anything.\r\n+            return;\r\n+        }\r\n+\r\n         if (!(bundleLoader instanceof BundleReference)) {\r\n             BaseActivator.activator.log(LogService.LOG_WARNING, \"Classloader of consuming bundle doesn't implement BundleReference: \" + bundleLoader);\r\n             return;\r",
                "raw_url": "https://github.com/apache/aries/raw/e53efdd282b4107f5c7c4803d0a2b159dcc12f35/spi-fly/spi-fly-core/src/main/java/org/apache/aries/spifly/Util.java",
                "sha": "087344d04f46b896656ba0c8626a9c0666567421",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/aries/blob/e53efdd282b4107f5c7c4803d0a2b159dcc12f35/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/UtilTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/aries/contents/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/UtilTest.java?ref=e53efdd282b4107f5c7c4803d0a2b159dcc12f35",
                "deletions": 0,
                "filename": "spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/UtilTest.java",
                "patch": "@@ -102,6 +102,39 @@ public void start(BundleContext context) throws Exception {\n         assertSame(providerCL, Thread.currentThread().getContextClassLoader());\r\n     }\r\n \r\n+    @Test\r\n+    public void testNotInitialized() throws Exception {\r\n+        BaseActivator.activator = null;\r\n+\r\n+        URL url = getClass().getResource(\"/embedded3.jar\");\r\n+        assertNotNull(\"precondition\", url);\r\n+\r\n+        Bundle providerBundle = EasyMock.createMock(Bundle.class);\r\n+        final ClassLoader providerCL = new TestBundleClassLoader(new URL [] {url}, getClass().getClassLoader(), providerBundle);\r\n+        EasyMock.expect(providerBundle.getBundleId()).andReturn(42L).anyTimes();\r\n+        EasyMock.expect(providerBundle.getEntryPaths((String) EasyMock.anyObject())).andReturn(null).anyTimes();\r\n+        Dictionary<String, String> providerHeaders = new Hashtable<String, String>();\r\n+        providerHeaders.put(Constants.BUNDLE_CLASSPATH, \".,embedded3.jar\");\r\n+        EasyMock.expect(providerBundle.getHeaders()).andReturn(providerHeaders).anyTimes();\r\n+        EasyMock.expect(providerBundle.getResource(\"embedded3.jar\")).andReturn(url).anyTimes();\r\n+        EasyMock.expect(providerBundle.loadClass((String) EasyMock.anyObject())).andAnswer(new IAnswer<Class<?>>() {\r\n+            @Override\r\n+            public Class<?> answer() throws Throwable {\r\n+                return providerCL.loadClass((String) EasyMock.getCurrentArguments()[0]);\r\n+            }\r\n+        }).anyTimes();\r\n+        EasyMock.replay(providerBundle);\r\n+\r\n+        Bundle clientBundle = EasyMock.createMock(Bundle.class);\r\n+        EasyMock.replay(clientBundle);\r\n+        ClassLoader clientCL = new TestBundleClassLoader(new URL [] {}, getClass().getClassLoader(), clientBundle);\r\n+\r\n+        Thread.currentThread().setContextClassLoader(null);\r\n+        Util.fixContextClassloader(ServiceLoader.class.getName(), \"load\", MySPI.class, clientCL);\r\n+        assertSame(\"The system is not yet initialized, so the TCCL should not be set\",\r\n+                null, Thread.currentThread().getContextClassLoader());\r\n+    }\r\n+\r\n     private static class TestBundleClassLoader extends URLClassLoader implements BundleReference {\r\n         private final Bundle bundle;\r\n \r",
                "raw_url": "https://github.com/apache/aries/raw/e53efdd282b4107f5c7c4803d0a2b159dcc12f35/spi-fly/spi-fly-core/src/test/java/org/apache/aries/spifly/UtilTest.java",
                "sha": "c06b7a27459d4283b0657e172520f7ca6c43818f",
                "status": "modified"
            }
        ],
        "message": "[SPI Fly] Fix for NPE.\n\nUnit test included.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/aries/trunk@1566678 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries/commit/c78de942cb826ed9c8913ec024cb06d790692906",
        "repo": "aries",
        "unit_tests": [
            "UtilTest.java"
        ]
    }
}