{
    "fineract-cn-teller_b4cd1e9": {
        "bug_id": "fineract-cn-teller_b4cd1e9",
        "commit": "https://github.com/apache/fineract-cn-teller/commit/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/EventConstants.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/api/src/main/java/io/mifos/teller/api/v1/EventConstants.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "api/src/main/java/io/mifos/teller/api/v1/EventConstants.java",
                "patch": "@@ -39,6 +39,8 @@\n   String SELECTOR_PAUSE_TELLER = SELECTOR_NAME + \" = '\" + PAUSE_TELLER + \"'\";\n   String DELETE_TELLER = \"delete-teller\";\n   String SELECTOR_DELETE_TELLER = SELECTOR_NAME + \" = '\" + DELETE_TELLER + \"'\";\n+  String SAVE_DENOMINATION = \"post-teller-denomination\";\n+  String SELECTOR_SAVE_DENOMINATION = SELECTOR_NAME + \" = '\" + SAVE_DENOMINATION + \"'\";\n \n   String INIT_TRANSACTION = \"init-transaction\";\n   String SELECTOR_INIT_TRANSACTION = SELECTOR_NAME + \" = '\" + INIT_TRANSACTION + \"'\";",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/EventConstants.java",
                "sha": "15ab0e60163d6f445941b5f81865bdb42d0b3b60",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/client/TellerManager.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/api/src/main/java/io/mifos/teller/api/v1/client/TellerManager.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "api/src/main/java/io/mifos/teller/api/v1/client/TellerManager.java",
                "patch": "@@ -20,6 +20,7 @@\n import io.mifos.core.api.util.CustomFeignClientsConfiguration;\n import io.mifos.teller.api.v1.domain.Teller;\n import io.mifos.teller.api.v1.domain.TellerBalanceSheet;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n import io.mifos.teller.api.v1.domain.TellerManagementCommand;\n import io.mifos.teller.api.v1.domain.TellerTransaction;\n import io.mifos.teller.api.v1.domain.TellerTransactionCosts;\n@@ -197,4 +198,33 @@ void confirm(@PathVariable(\"tellerCode\") final String tellerCode,\n   })\n   void deleteTeller(@PathVariable(\"officeIdentifier\") final String officeIdentifier,\n                     @PathVariable(\"tellerCode\") final String tellerCode);\n+\n+  @RequestMapping(\n+      value = \"/offices/{officeIdentifier}/teller/{tellerCode}/denominations\",\n+      method = RequestMethod.POST,\n+      consumes = MediaType.APPLICATION_JSON_VALUE,\n+      produces = MediaType.APPLICATION_JSON_VALUE\n+  )\n+  @ThrowsExceptions({\n+      @ThrowsException(status = HttpStatus.NOT_FOUND, exception = TellerNotFoundException.class),\n+      @ThrowsException(status = HttpStatus.CONFLICT, exception = TellerValidationException.class)\n+  })\n+  void saveTellerDenomination(@PathVariable(\"officeIdentifier\") final String officeIdentifier,\n+                              @PathVariable(\"tellerCode\") final String tellerCode,\n+                              @RequestBody @Valid final TellerDenomination tellerDenomination);\n+\n+  @RequestMapping(\n+      value = \"/offices/{officeIdentifier}/teller/{tellerCode}/denominations\",\n+      method = RequestMethod.GET,\n+      consumes = MediaType.APPLICATION_JSON_VALUE,\n+      produces = MediaType.ALL_VALUE\n+  )\n+  @ThrowsExceptions({\n+      @ThrowsException(status = HttpStatus.NOT_FOUND, exception = TellerNotFoundException.class),\n+      @ThrowsException(status = HttpStatus.CONFLICT, exception = TellerValidationException.class)\n+  })\n+  List<TellerDenomination> fetchTellerDenominations(\n+      @PathVariable(\"officeIdentifier\") final String officeIdentifier,\n+      @PathVariable(\"tellerCode\") final String tellerCode,\n+      @RequestParam(value = \"dateRange\", required = false) final String dateRange);\n }",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/client/TellerManager.java",
                "sha": "83e9743bd31f8ec25e3eaff2f77b4779433053a1",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/domain/Teller.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/api/src/main/java/io/mifos/teller/api/v1/domain/Teller.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "api/src/main/java/io/mifos/teller/api/v1/domain/Teller.java",
                "patch": "@@ -44,6 +44,9 @@\n   private String vaultAccountIdentifier;\n   @ValidIdentifier(maxLength = 34)\n   private String chequesReceivableAccount;\n+  @ValidIdentifier(maxLength = 34)\n+  private String cashOverShortAccount;\n+  private Boolean denominationRequired = Boolean.FALSE;\n   private String assignedEmployee;\n   private State state;\n   private String createdBy;\n@@ -105,6 +108,22 @@ public void setChequesReceivableAccount(final String chequesReceivableAccount) {\n     this.chequesReceivableAccount = chequesReceivableAccount;\n   }\n \n+  public String getCashOverShortAccount() {\n+    return this.cashOverShortAccount;\n+  }\n+\n+  public void setCashOverShortAccount(final String cashOverShortAccount) {\n+    this.cashOverShortAccount = cashOverShortAccount;\n+  }\n+\n+  public Boolean getDenominationRequired() {\n+    return this.denominationRequired;\n+  }\n+\n+  public void setDenominationRequired(final Boolean denominationRequired) {\n+    this.denominationRequired = denominationRequired;\n+  }\n+\n   public String getAssignedEmployee() {\n     return this.assignedEmployee;\n   }",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/domain/Teller.java",
                "sha": "f303a5ba32548ace88b89e7d01bb788c647d2881",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/domain/TellerDenomination.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/api/src/main/java/io/mifos/teller/api/v1/domain/TellerDenomination.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "api/src/main/java/io/mifos/teller/api/v1/domain/TellerDenomination.java",
                "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller.api.v1.domain;\n+\n+import io.mifos.core.lang.validation.constraints.ValidIdentifier;\n+import org.hibernate.validator.constraints.Range;\n+\n+import javax.validation.constraints.NotNull;\n+import java.math.BigDecimal;\n+\n+public class TellerDenomination {\n+\n+  @NotNull\n+  @Range(min = -9999999999L, max = 9999999999L)\n+  private BigDecimal countedTotal;\n+  private String note;\n+  @ValidIdentifier(optional = true)\n+  private String adjustingJournalEntry;\n+  private String createdOn;\n+  private String createdBy;\n+\n+  public TellerDenomination() {\n+    super();\n+  }\n+\n+  public String getCreatedOn() {\n+    return this.createdOn;\n+  }\n+\n+  public void setCreatedOn(final String createdOn) {\n+    this.createdOn = createdOn;\n+  }\n+\n+  public BigDecimal getCountedTotal() {\n+    return this.countedTotal;\n+  }\n+\n+  public void setCountedTotal(final BigDecimal countedTotal) {\n+    this.countedTotal = countedTotal;\n+  }\n+\n+  public String getNote() {\n+    return this.note;\n+  }\n+\n+  public void setNote(final String note) {\n+    this.note = note;\n+  }\n+\n+  public String getAdjustingJournalEntry() {\n+    return this.adjustingJournalEntry;\n+  }\n+\n+  public void setAdjustingJournalEntry(final String adjustingJournalEntry) {\n+    this.adjustingJournalEntry = adjustingJournalEntry;\n+  }\n+\n+  public String getCreatedBy() {\n+    return this.createdBy;\n+  }\n+\n+  public void setCreatedBy(final String createdBy) {\n+    this.createdBy = createdBy;\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/api/src/main/java/io/mifos/teller/api/v1/domain/TellerDenomination.java",
                "sha": "bfaf854ec8985887c21c5da72ec8ea63e6c93ae0",
                "status": "added"
            },
            {
                "additions": 269,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/TestTellerDenomination.java",
                "changes": 269,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/component-test/src/main/java/io/mifos/teller/TestTellerDenomination.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "component-test/src/main/java/io/mifos/teller/TestTellerDenomination.java",
                "patch": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller;\n+\n+import com.google.common.collect.Lists;\n+import io.mifos.accounting.api.v1.domain.Account;\n+import io.mifos.accounting.api.v1.domain.AccountEntry;\n+import io.mifos.accounting.api.v1.domain.AccountEntryPage;\n+import io.mifos.accounting.api.v1.domain.JournalEntry;\n+import io.mifos.core.lang.DateRange;\n+import io.mifos.teller.api.v1.EventConstants;\n+import io.mifos.teller.api.v1.client.TellerValidationException;\n+import io.mifos.teller.api.v1.domain.Teller;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n+import io.mifos.teller.api.v1.domain.TellerManagementCommand;\n+import io.mifos.teller.api.v1.domain.UnlockDrawerCommand;\n+import io.mifos.teller.util.TellerGenerator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Matchers;\n+import org.mockito.Mockito;\n+\n+import java.math.BigDecimal;\n+import java.time.Clock;\n+import java.time.LocalDate;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class TestTellerDenomination extends AbstractTellerTest {\n+\n+  public TestTellerDenomination() {\n+    super();\n+  }\n+\n+  @Test\n+  public void shouldProcessDenomination() throws Exception {\n+    final String officeIdentifier = RandomStringUtils.randomAlphabetic(32);\n+    final BigDecimal openingAmount = BigDecimal.valueOf(20000.00D);\n+\n+    final Teller teller = this.prepareTeller(officeIdentifier, openingAmount);\n+\n+    super.testSubject.post(teller.getCode(), \"PAUSE\");\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.PAUSE_TELLER, teller.getCode()));\n+\n+    final AccountEntry openingAmountEntry = new AccountEntry();\n+    openingAmountEntry.setType(AccountEntry.Type.DEBIT.name());\n+    openingAmountEntry.setMessage(ServiceConstants.TX_REPAYMENT);\n+    openingAmountEntry.setAmount(openingAmount.doubleValue());\n+\n+    final AccountEntryPage accountEntryPage = new AccountEntryPage();\n+    accountEntryPage.setAccountEntries(Lists.newArrayList(openingAmountEntry));\n+    accountEntryPage.setTotalPages(1);\n+    accountEntryPage.setTotalElements(Integer.valueOf(accountEntryPage.getAccountEntries().size()).longValue());\n+\n+    Mockito\n+        .doAnswer(invocation -> accountEntryPage)\n+        .when(super.accountingServiceSpy)\n+        .fetchAccountEntries(Matchers.eq(teller.getTellerAccountIdentifier()), Matchers.anyString(),\n+            Matchers.eq(0), Matchers.anyInt());\n+\n+    final TellerDenomination tellerDenomination = new TellerDenomination();\n+    tellerDenomination.setCountedTotal(openingAmount);\n+    tellerDenomination.setNote(\"Nothing has happened.\");\n+\n+    super.testSubject.saveTellerDenomination(officeIdentifier, teller.getCode(), tellerDenomination);\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.SAVE_DENOMINATION, teller.getCode()));\n+\n+    Mockito\n+        .verify(super.accountingServiceSpy, Mockito.atMost(1))\n+        .postJournalEntry(Matchers.any(JournalEntry.class));\n+\n+    final LocalDate now = LocalDate.now(Clock.systemUTC());\n+    final DateRange dateRange = new DateRange(now, now);\n+    final List<TellerDenomination> tellerDenominations =\n+        super.testSubject.fetchTellerDenominations(officeIdentifier, teller.getCode(), dateRange.toString());\n+\n+    Assert.assertEquals(1, tellerDenominations.size());\n+    Assert.assertNull(tellerDenominations.get(0).getAdjustingJournalEntry());\n+\n+    this.closeTeller(officeIdentifier, teller.getCode());\n+  }\n+\n+  @Test\n+  public void shouldProcessDenominationOver() throws Exception {\n+    final String officeIdentifier = RandomStringUtils.randomAlphabetic(32);\n+    final BigDecimal openingAmount = BigDecimal.valueOf(20000.00D);\n+\n+    final Teller teller = this.prepareTeller(officeIdentifier, openingAmount);\n+\n+    super.testSubject.post(teller.getCode(), \"PAUSE\");\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.PAUSE_TELLER, teller.getCode()));\n+\n+    final AccountEntry openingAmountEntry = new AccountEntry();\n+    openingAmountEntry.setType(AccountEntry.Type.DEBIT.name());\n+    openingAmountEntry.setMessage(ServiceConstants.TX_REPAYMENT);\n+    openingAmountEntry.setAmount(openingAmount.doubleValue());\n+\n+    final AccountEntryPage accountEntryPage = new AccountEntryPage();\n+    accountEntryPage.setAccountEntries(Lists.newArrayList(openingAmountEntry));\n+    accountEntryPage.setTotalPages(1);\n+    accountEntryPage.setTotalElements(Integer.valueOf(accountEntryPage.getAccountEntries().size()).longValue());\n+\n+    Mockito\n+        .doAnswer(invocation -> accountEntryPage)\n+        .when(super.accountingServiceSpy)\n+        .fetchAccountEntries(Matchers.eq(teller.getTellerAccountIdentifier()), Matchers.anyString(),\n+            Matchers.eq(0), Matchers.anyInt());\n+\n+    final TellerDenomination tellerDenomination = new TellerDenomination();\n+    tellerDenomination.setCountedTotal(openingAmount.add(BigDecimal.valueOf(1000.00D)));\n+    tellerDenomination.setNote(\"Teller is over.\");\n+\n+    super.testSubject.saveTellerDenomination(officeIdentifier, teller.getCode(), tellerDenomination);\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.SAVE_DENOMINATION, teller.getCode()));\n+\n+    Mockito\n+        .verify(super.accountingServiceSpy, Mockito.atMost(2))\n+        .postJournalEntry(Matchers.any(JournalEntry.class));\n+\n+    final LocalDate now = LocalDate.now(Clock.systemUTC());\n+    final DateRange dateRange = new DateRange(now, now);\n+    final List<TellerDenomination> tellerDenominations =\n+        super.testSubject.fetchTellerDenominations(officeIdentifier, teller.getCode(), dateRange.toString());\n+\n+    Assert.assertEquals(1, tellerDenominations.size());\n+    Assert.assertNotNull(tellerDenominations.get(0).getAdjustingJournalEntry());\n+\n+    this.closeTeller(officeIdentifier, teller.getCode());\n+  }\n+\n+  @Test\n+  public void shouldProcessDenominationShort() throws Exception {\n+    final String officeIdentifier = RandomStringUtils.randomAlphabetic(32);\n+    final BigDecimal openingAmount = BigDecimal.valueOf(20000.00D);\n+\n+    final Teller teller = this.prepareTeller(officeIdentifier, openingAmount);\n+\n+    super.testSubject.post(teller.getCode(), \"PAUSE\");\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.PAUSE_TELLER, teller.getCode()));\n+\n+    final AccountEntry openingAmountEntry = new AccountEntry();\n+    openingAmountEntry.setType(AccountEntry.Type.DEBIT.name());\n+    openingAmountEntry.setMessage(ServiceConstants.TX_REPAYMENT);\n+    openingAmountEntry.setAmount(openingAmount.doubleValue());\n+\n+    final AccountEntryPage accountEntryPage = new AccountEntryPage();\n+    accountEntryPage.setAccountEntries(Lists.newArrayList(openingAmountEntry));\n+    accountEntryPage.setTotalPages(1);\n+    accountEntryPage.setTotalElements(Integer.valueOf(accountEntryPage.getAccountEntries().size()).longValue());\n+\n+    Mockito\n+        .doAnswer(invocation -> accountEntryPage)\n+        .when(super.accountingServiceSpy)\n+        .fetchAccountEntries(Matchers.eq(teller.getTellerAccountIdentifier()), Matchers.anyString(),\n+            Matchers.eq(0), Matchers.anyInt());\n+\n+    final TellerDenomination tellerDenomination = new TellerDenomination();\n+    tellerDenomination.setCountedTotal(openingAmount.subtract(BigDecimal.valueOf(1000.00D)));\n+    tellerDenomination.setNote(\"Teller is short.\");\n+\n+    super.testSubject.saveTellerDenomination(officeIdentifier, teller.getCode(), tellerDenomination);\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.SAVE_DENOMINATION, teller.getCode()));\n+\n+    Mockito\n+        .verify(super.accountingServiceSpy, Mockito.atMost(2))\n+        .postJournalEntry(Matchers.any(JournalEntry.class));\n+\n+    final LocalDate now = LocalDate.now(Clock.systemUTC());\n+    final DateRange dateRange = new DateRange(now, now);\n+    final List<TellerDenomination> tellerDenominations =\n+        super.testSubject.fetchTellerDenominations(officeIdentifier, teller.getCode(), dateRange.toString());\n+\n+    Assert.assertEquals(1, tellerDenominations.size());\n+    Assert.assertNotNull(tellerDenominations.get(0).getAdjustingJournalEntry());\n+\n+    this.closeTeller(officeIdentifier, teller.getCode());\n+  }\n+\n+  @Test\n+  public void shouldNotProcessDenominationIsActive() throws Exception {\n+    final String officeIdentifier = RandomStringUtils.randomAlphabetic(32);\n+    final BigDecimal openingAmount = BigDecimal.valueOf(20000.00D);\n+\n+    final Teller teller = this.prepareTeller(officeIdentifier, openingAmount);\n+\n+    final TellerDenomination tellerDenomination = new TellerDenomination();\n+    tellerDenomination.setCountedTotal(openingAmount.subtract(BigDecimal.valueOf(1000.00D)));\n+\n+    try {\n+      super.testSubject.saveTellerDenomination(officeIdentifier, teller.getCode(), tellerDenomination);\n+      Assert.fail();\n+    } catch (final TellerValidationException tvex) {\n+      // do nothing ... expected\n+    }\n+\n+    this.closeTeller(officeIdentifier, teller.getCode());\n+  }\n+\n+  private Teller prepareTeller(final String officeIdentifier, BigDecimal openingAmount)  throws Exception {\n+    final Teller teller = TellerGenerator.createRandomTeller();\n+\n+    Mockito.doAnswer(invocation -> true)\n+        .when(super.organizationServiceSpy).officeExists(Matchers.eq(officeIdentifier));\n+\n+    Mockito.doAnswer(invocation -> Optional.of(new Account()))\n+        .when(super.accountingServiceSpy).findAccount(Matchers.eq(teller.getTellerAccountIdentifier()));\n+\n+    Mockito.doAnswer(invocation -> Optional.of(new Account()))\n+        .when(super.accountingServiceSpy).findAccount(Matchers.eq(teller.getVaultAccountIdentifier()));\n+\n+    Mockito.doAnswer(invocation -> Optional.of(new Account()))\n+        .when(super.accountingServiceSpy).findAccount(Matchers.eq(teller.getChequesReceivableAccount()));\n+\n+    Mockito.doAnswer(invocation -> Optional.of(new Account()))\n+        .when(super.accountingServiceSpy).findAccount(Matchers.eq(teller.getCashOverShortAccount()));\n+\n+    super.testSubject.create(officeIdentifier, teller);\n+\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.POST_TELLER, teller.getCode()));\n+\n+    final TellerManagementCommand command = new TellerManagementCommand();\n+    command.setAction(TellerManagementCommand.Action.OPEN.name());\n+    command.setAdjustment(TellerManagementCommand.Adjustment.DEBIT.name());\n+    command.setAmount(openingAmount);\n+    command.setAssignedEmployeeIdentifier(AbstractTellerTest.TEST_USER);\n+\n+    Mockito.doAnswer(invocation -> true)\n+        .when(super.organizationServiceSpy).employeeExists(Matchers.eq(command.getAssignedEmployeeIdentifier()));\n+\n+    super.testSubject.post(officeIdentifier, teller.getCode(), command);\n+\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.OPEN_TELLER, teller.getCode()));\n+\n+    final UnlockDrawerCommand unlockDrawerCommand = new UnlockDrawerCommand();\n+    unlockDrawerCommand.setEmployeeIdentifier(AbstractTellerTest.TEST_USER);\n+    unlockDrawerCommand.setPassword(teller.getPassword());\n+\n+    super.testSubject.unlockDrawer(teller.getCode(), unlockDrawerCommand);\n+\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.AUTHENTICATE_TELLER, teller.getCode()));\n+\n+    return teller;\n+  }\n+\n+  private void closeTeller(final String officeIdentifier, final String tellerCode) throws Exception {\n+    final TellerManagementCommand closeTellerCommand = new TellerManagementCommand();\n+    closeTellerCommand.setAction(TellerManagementCommand.Action.CLOSE.name());\n+    closeTellerCommand.setAmount(BigDecimal.ZERO);\n+    closeTellerCommand.setAdjustment(TellerManagementCommand.Adjustment.NONE.name());\n+\n+    super.testSubject.post(officeIdentifier, tellerCode, closeTellerCommand);\n+    Assert.assertTrue(super.eventRecorder.wait(EventConstants.CLOSE_TELLER, tellerCode));\n+\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/TestTellerDenomination.java",
                "sha": "b5366b49529351f8805fff51e635e0c9e7071b5f",
                "status": "added"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/listener/TellerEventListener.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/component-test/src/main/java/io/mifos/teller/listener/TellerEventListener.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 1,
                "filename": "component-test/src/main/java/io/mifos/teller/listener/TellerEventListener.java",
                "patch": "@@ -124,4 +124,16 @@ public void onDeleteTeller(@Header(TenantHeaderFilter.TENANT_HEADER) final Strin\n                              final String payload) {\n     this.logger.debug(\"Teller {} created.\", payload);\n     this.eventRecorder.event(tenant, EventConstants.DELETE_TELLER, payload, String.class);\n-  }}\n+  }\n+\n+  @JmsListener(\n+      destination = EventConstants.DESTINATION,\n+      selector = EventConstants.SELECTOR_SAVE_DENOMINATION,\n+      subscription = EventConstants.DESTINATION\n+  )\n+  public void onSaveDenomination(@Header(TenantHeaderFilter.TENANT_HEADER) final String tenant,\n+                                 final String payload) {\n+    this.logger.debug(\"Teller {} created.\", payload);\n+    this.eventRecorder.event(tenant, EventConstants.SAVE_DENOMINATION, payload, String.class);\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/listener/TellerEventListener.java",
                "sha": "2a061bf1ea6497586d0ab0739edde2a7326b9820",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/util/TellerGenerator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/component-test/src/main/java/io/mifos/teller/util/TellerGenerator.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "component-test/src/main/java/io/mifos/teller/util/TellerGenerator.java",
                "patch": "@@ -33,6 +33,7 @@ public static Teller createRandomTeller() {\n     teller.setTellerAccountIdentifier(RandomStringUtils.randomAlphanumeric(34));\n     teller.setVaultAccountIdentifier(RandomStringUtils.randomAlphanumeric(34));\n     teller.setChequesReceivableAccount(RandomStringUtils.randomAlphanumeric(34));\n+    teller.setCashOverShortAccount(RandomStringUtils.randomAlphanumeric(34));\n     teller.setCashdrawLimit(BigDecimal.valueOf(10000L));\n \n     return teller;",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/component-test/src/main/java/io/mifos/teller/util/TellerGenerator.java",
                "sha": "134d8b891490c960bcc8e6c6e213552456f7eea3",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/command/TellerDenominationCommand.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/command/TellerDenominationCommand.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/command/TellerDenominationCommand.java",
                "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller.service.internal.command;\n+\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n+\n+import java.math.BigDecimal;\n+\n+public class TellerDenominationCommand {\n+\n+  private final String tellerCode;\n+  private final BigDecimal expectedBalance;\n+  private final TellerDenomination tellerDenomination;\n+\n+  public TellerDenominationCommand(final String tellerCode,\n+                                   final BigDecimal expectedBalance,\n+                                   final TellerDenomination tellerDenomination) {\n+    super();\n+    this.tellerCode = tellerCode;\n+    this.expectedBalance = expectedBalance;\n+    this.tellerDenomination = tellerDenomination;\n+  }\n+\n+  public String tellerCode() {\n+    return this.tellerCode;\n+  }\n+\n+  public BigDecimal expectedBalance() {\n+    return this.expectedBalance;\n+  }\n+\n+  public TellerDenomination tellerDenomination() {\n+    return this.tellerDenomination;\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/command/TellerDenominationCommand.java",
                "sha": "a88b63350c46d1a0a39c0ac9c482d7d3b4af4e5e",
                "status": "added"
            },
            {
                "additions": 76,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/command/handler/TellerAggregate.java",
                "changes": 76,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/command/handler/TellerAggregate.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/command/handler/TellerAggregate.java",
                "patch": "@@ -28,6 +28,7 @@\n import io.mifos.teller.ServiceConstants;\n import io.mifos.teller.api.v1.EventConstants;\n import io.mifos.teller.api.v1.domain.Teller;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n import io.mifos.teller.api.v1.domain.TellerManagementCommand;\n import io.mifos.teller.api.v1.domain.UnlockDrawerCommand;\n import io.mifos.teller.service.internal.command.ChangeTellerCommand;\n@@ -37,7 +38,10 @@\n import io.mifos.teller.service.internal.command.DrawerUnlockCommand;\n import io.mifos.teller.service.internal.command.OpenTellerCommand;\n import io.mifos.teller.service.internal.command.PauseTellerCommand;\n+import io.mifos.teller.service.internal.command.TellerDenominationCommand;\n import io.mifos.teller.service.internal.mapper.TellerMapper;\n+import io.mifos.teller.service.internal.repository.TellerDenominationEntity;\n+import io.mifos.teller.service.internal.repository.TellerDenominationRepository;\n import io.mifos.teller.service.internal.repository.TellerEntity;\n import io.mifos.teller.service.internal.repository.TellerRepository;\n import io.mifos.teller.service.internal.service.helper.AccountingService;\n@@ -61,6 +65,7 @@\n \n   private final Logger logger;\n   private final TellerRepository tellerRepository;\n+  private final TellerDenominationRepository tellerDenominationRepository;\n   private final OrganizationService organizationService;\n   private final AccountingService accountingService;\n   private final HashGenerator hashGenerator;\n@@ -69,13 +74,15 @@\n   @Autowired\n   public TellerAggregate(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger logger,\n                          final TellerRepository tellerRepository,\n+                         final TellerDenominationRepository tellerDenominationRepository,\n                          final OrganizationService organizationService,\n                          final AccountingService accountingService,\n                          final HashGenerator hashGenerator,\n                          final SaltGenerator saltGenerator) {\n     super();\n     this.logger = logger;\n     this.tellerRepository = tellerRepository;\n+    this.tellerDenominationRepository = tellerDenominationRepository;\n     this.organizationService = organizationService;\n     this.accountingService = accountingService;\n     this.hashGenerator = hashGenerator;\n@@ -295,6 +302,33 @@ public String process(final DeleteTellerCommand deleteTellerCommand) {\n     return null;\n   }\n \n+  @Transactional\n+  @CommandHandler\n+  @EventEmitter(selectorName = EventConstants.SELECTOR_NAME, selectorValue = EventConstants.SAVE_DENOMINATION)\n+  public String process(final TellerDenominationCommand tellerDenominationCommand) {\n+    final String tellerCode = tellerDenominationCommand.tellerCode();\n+    final Optional<TellerEntity> optionalTeller = this.tellerRepository.findByIdentifier(tellerCode);\n+    final TellerEntity tellerEntity = optionalTeller.orElseThrow(\n+        () -> ServiceException.notFound(\"Teller {0} not found.\", tellerCode)\n+    );\n+\n+    final TellerDenomination tellerDenomination = tellerDenominationCommand.tellerDenomination();\n+    final TellerDenominationEntity tellerDenominationEntity = new TellerDenominationEntity();\n+    tellerDenominationEntity.setTeller(tellerEntity);\n+    tellerDenominationEntity.setCountedTotal(tellerDenomination.getCountedTotal());\n+    tellerDenominationEntity.setNote(tellerDenomination.getNote());\n+    tellerDenominationEntity.setCreatedBy(UserContextHolder.checkedGetUser());\n+    tellerDenominationEntity.setCreatedOn(LocalDateTime.now(Clock.systemUTC()));\n+\n+    this.adjustDenominatedTellerBalance(\n+        tellerEntity, tellerDenominationCommand.expectedBalance(), tellerDenomination.getCountedTotal()\n+    ).ifPresent(tellerDenominationEntity::setAdjustingJournalEntry);\n+\n+    this.tellerDenominationRepository.save(tellerDenominationEntity);\n+\n+    return tellerCode;\n+  }\n+\n   private boolean checkPreconditions(final String officeIdentifier, final Teller teller) {\n     boolean pass = true;\n \n@@ -367,5 +401,47 @@ private JournalEntry createJournalEntry(final TellerEntity tellerEntity, final T\n \n     return journalEntry;\n   }\n+\n+  private Optional<String> adjustDenominatedTellerBalance(final TellerEntity tellerEntity,\n+                                              final BigDecimal expectedBalance,\n+                                              final BigDecimal countedTotal) {\n+    if (expectedBalance.compareTo(countedTotal) != 0) {\n+      final JournalEntry journalEntry = new JournalEntry();\n+      journalEntry.setTransactionIdentifier(RandomStringUtils.randomNumeric(32));\n+      journalEntry.setTransactionDate(DateConverter.toIsoString(LocalDateTime.now(Clock.systemUTC())));\n+      journalEntry.setClerk(UserContextHolder.checkedGetUser());\n+      journalEntry.setMessage(\"Teller denomination adjustment.\");\n+\n+      final Debtor debtor = new Debtor();\n+      final Creditor creditor = new Creditor();\n+      final BigDecimal adjustment = expectedBalance.subtract(countedTotal);\n+      if (adjustment.signum() == -1) {\n+        final BigDecimal value = adjustment.negate();\n+        journalEntry.setTransactionType(ServiceConstants.TX_DEPOSIT_ADJUSTMENT);\n+\n+        debtor.setAccountNumber(tellerEntity.getTellerAccountIdentifier());\n+        debtor.setAmount(value.toString());\n+        journalEntry.setDebtors(Sets.newHashSet(debtor));\n+\n+        creditor.setAccountNumber(tellerEntity.getCashOverShortAccount());\n+        creditor.setAmount(value.toString());\n+        journalEntry.setCreditors(Sets.newHashSet(creditor));\n+      } else {\n+        journalEntry.setTransactionType(ServiceConstants.TX_CREDIT_ADJUSTMENT);\n+\n+        debtor.setAccountNumber(tellerEntity.getCashOverShortAccount());\n+        debtor.setAmount(adjustment.toString());\n+        journalEntry.setDebtors(Sets.newHashSet(debtor));\n+\n+        creditor.setAccountNumber(tellerEntity.getTellerAccountIdentifier());\n+        creditor.setAmount(adjustment.toString());\n+        journalEntry.setCreditors(Sets.newHashSet(creditor));\n+      }\n+\n+      this.accountingService.postJournalEntry(journalEntry);\n+      return Optional.of(journalEntry.getTransactionIdentifier());\n+    }\n+    return Optional.empty();\n+  }\n }\n ",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/command/handler/TellerAggregate.java",
                "sha": "a4f01f61f3504546afbfa826bba99d348242b300",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerDenominationMapper.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerDenominationMapper.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/mapper/TellerDenominationMapper.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller.service.internal.mapper;\n+\n+import io.mifos.core.lang.DateConverter;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n+import io.mifos.teller.service.internal.repository.TellerDenominationEntity;\n+\n+public class TellerDenominationMapper {\n+\n+  private TellerDenominationMapper() {\n+    super();\n+  }\n+\n+  public static TellerDenomination map(final TellerDenominationEntity tellerDenominationEntity) {\n+    final TellerDenomination tellerDenomination = new TellerDenomination();\n+    tellerDenomination.setCountedTotal(tellerDenominationEntity.getCountedTotal());\n+    tellerDenomination.setNote(tellerDenominationEntity.getNote());\n+    tellerDenomination.setAdjustingJournalEntry(tellerDenominationEntity.getAdjustingJournalEntry());\n+    tellerDenomination.setCreatedBy(tellerDenominationEntity.getCreatedBy());\n+    tellerDenomination.setCreatedOn(DateConverter.toIsoString(tellerDenominationEntity.getCreatedOn()));\n+    return tellerDenomination;\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerDenominationMapper.java",
                "sha": "e55ad1e920731b409a5cb8621437e8557cad0b2e",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerMapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerMapper.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/mapper/TellerMapper.java",
                "patch": "@@ -33,6 +33,7 @@ public static Teller map(final TellerEntity tellerEntity) {\n     teller.setCashdrawLimit(tellerEntity.getCashdrawLimit());\n     teller.setAssignedEmployee(tellerEntity.getAssignedEmployeeIdentifier());\n     teller.setChequesReceivableAccount(tellerEntity.getChequesReceivableAccount());\n+    teller.setCashOverShortAccount(tellerEntity.getCashOverShortAccount());\n     teller.setState(tellerEntity.getState());\n     if (tellerEntity.getCreatedBy() != null) {\n       teller.setCreatedBy(tellerEntity.getCreatedBy());\n@@ -58,6 +59,7 @@ public static TellerEntity map(final String officeIdentifier, final Teller telle\n     tellerEntity.setTellerAccountIdentifier(teller.getTellerAccountIdentifier());\n     tellerEntity.setVaultAccountIdentifier(teller.getVaultAccountIdentifier());\n     tellerEntity.setChequesReceivableAccount(teller.getChequesReceivableAccount());\n+    tellerEntity.setCashOverShortAccount(teller.getCashOverShortAccount());\n     tellerEntity.setCashdrawLimit(teller.getCashdrawLimit());\n     tellerEntity.setAssignedEmployeeIdentifier(teller.getAssignedEmployee());\n     if (teller.getState() != null) {",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/mapper/TellerMapper.java",
                "sha": "baeea0da83c020f307b9c61c00aa083810defaf0",
                "status": "modified"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationEntity.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationEntity.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationEntity.java",
                "patch": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller.service.internal.repository;\n+\n+import io.mifos.core.mariadb.util.LocalDateTimeConverter;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import java.math.BigDecimal;\n+import java.time.LocalDateTime;\n+\n+@Entity\n+@Table(name = \"tajet_teller_denominations\")\n+public class TellerDenominationEntity {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"id\")\n+  private Long id;\n+  @ManyToOne\n+  @JoinColumn(name = \"teller_id\")\n+  private TellerEntity teller;\n+  @Column(name = \"counted_total\", nullable = false)\n+  private BigDecimal countedTotal;\n+  @Column(name = \"note\", nullable = true)\n+  private String note;\n+  @Column(name = \"adjusting_journal_entry\", nullable = true)\n+  private String adjustingJournalEntry;\n+  @Convert(converter = LocalDateTimeConverter.class)\n+  @Column(name = \"created_on\", nullable = false)\n+  private LocalDateTime createdOn;\n+  @Column(name = \"created_by\")\n+  private String createdBy;\n+\n+  public TellerDenominationEntity() {\n+    super();\n+  }\n+\n+  public Long getId() {\n+    return this.id;\n+  }\n+\n+  public void setId(final Long id) {\n+    this.id = id;\n+  }\n+\n+  public TellerEntity getTeller() {\n+    return this.teller;\n+  }\n+\n+  public void setTeller(final TellerEntity teller) {\n+    this.teller = teller;\n+  }\n+\n+  public BigDecimal getCountedTotal() {\n+    return this.countedTotal;\n+  }\n+\n+  public void setCountedTotal(final BigDecimal countedTotal) {\n+    this.countedTotal = countedTotal;\n+  }\n+\n+  public String getNote() {\n+    return this.note;\n+  }\n+\n+  public void setNote(final String note) {\n+    this.note = note;\n+  }\n+\n+  public String getAdjustingJournalEntry() {\n+    return this.adjustingJournalEntry;\n+  }\n+\n+  public void setAdjustingJournalEntry(final String adjustingJournalEntry) {\n+    this.adjustingJournalEntry = adjustingJournalEntry;\n+  }\n+\n+  public LocalDateTime getCreatedOn() {\n+    return this.createdOn;\n+  }\n+\n+  public void setCreatedOn(final LocalDateTime createdOn) {\n+    this.createdOn = createdOn;\n+  }\n+\n+  public String getCreatedBy() {\n+    return this.createdBy;\n+  }\n+\n+  public void setCreatedBy(final String createdBy) {\n+    this.createdBy = createdBy;\n+  }\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationEntity.java",
                "sha": "24c238ed5110d6515b819624cf17b67a662a749a",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationRepository.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationRepository.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationRepository.java",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2017 The Mifos Initiative.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.mifos.teller.service.internal.repository;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+\n+public interface TellerDenominationRepository extends JpaRepository<TellerDenominationEntity,Long> {\n+\n+  List<TellerDenominationEntity> findByTellerAndCreatedOnBetweenOrderByCreatedOnDesc(\n+      final TellerEntity tellerEntity, final LocalDateTime startDate, final LocalDateTime endDate);\n+}",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerDenominationRepository.java",
                "sha": "ddef60384ef2364eae4465e08647343e5f86cddc",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerEntity.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/repository/TellerEntity.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/repository/TellerEntity.java",
                "patch": "@@ -51,6 +51,8 @@\n   private String vaultAccountIdentifier;\n   @Column(name = \"cheques_receivable_account\", nullable = false, length = 34)\n   private String chequesReceivableAccount;\n+  @Column(name = \"cash_over_short_account\", nullable = false, length = 34)\n+  private String cashOverShortAccount;\n   @Column(name = \"assigned_employee_identifier\", nullable = true, length = 32)\n   private String assignedEmployeeIdentifier;\n   @Column(name = \"a_state\", nullable = false, length = 256)\n@@ -148,6 +150,14 @@ public void setChequesReceivableAccount(final String chequesReceivableAccount) {\n     this.chequesReceivableAccount = chequesReceivableAccount;\n   }\n \n+  public String getCashOverShortAccount() {\n+    return this.cashOverShortAccount;\n+  }\n+\n+  public void setCashOverShortAccount(final String cashOverShortAccount) {\n+    this.cashOverShortAccount = cashOverShortAccount;\n+  }\n+\n   public String getAssignedEmployeeIdentifier() {\n     return this.assignedEmployeeIdentifier;\n   }",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/repository/TellerEntity.java",
                "sha": "c8c156bfc4b7c1e9befff16e910fd82ce65097ff",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/service/TellerManagementService.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/service/TellerManagementService.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/service/TellerManagementService.java",
                "patch": "@@ -20,10 +20,13 @@\n import io.mifos.teller.ServiceConstants;\n import io.mifos.teller.api.v1.domain.Teller;\n import io.mifos.teller.api.v1.domain.TellerBalanceSheet;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n import io.mifos.teller.api.v1.domain.TellerEntry;\n import io.mifos.teller.api.v1.domain.TellerTransaction;\n+import io.mifos.teller.service.internal.mapper.TellerDenominationMapper;\n import io.mifos.teller.service.internal.mapper.TellerEntryMapper;\n import io.mifos.teller.service.internal.mapper.TellerMapper;\n+import io.mifos.teller.service.internal.repository.TellerDenominationRepository;\n import io.mifos.teller.service.internal.repository.TellerEntity;\n import io.mifos.teller.service.internal.repository.TellerRepository;\n import io.mifos.teller.service.internal.repository.TellerTransactionEntity;\n@@ -47,15 +50,18 @@\n \n   private final TellerRepository tellerRepository;\n   private final TellerTransactionRepository tellerTransactionRepository;\n+  private final TellerDenominationRepository tellerDenominationRepository;\n   private final AccountingService accountingService;\n \n   @Autowired\n   public TellerManagementService(final TellerRepository tellerRepository,\n                                  final TellerTransactionRepository tellerTransactionRepository,\n+                                 final TellerDenominationRepository tellerDenominationRepository,\n                                  final AccountingService accountingService) {\n     super();\n     this.tellerRepository = tellerRepository;\n     this.tellerTransactionRepository = tellerTransactionRepository;\n+    this.tellerDenominationRepository = tellerDenominationRepository;\n     this.accountingService = accountingService;\n   }\n \n@@ -142,6 +148,22 @@ public TellerBalanceSheet getBalance(final String tellerCode) {\n     return tellerBalanceSheet;\n   }\n \n+  public List<TellerDenomination> fetchTellerDenominations(\n+      final String tellerCode, final LocalDateTime startDate, final LocalDateTime endDate) {\n+    final ArrayList<TellerDenomination> tellerDenominations = new ArrayList<>();\n+    this.tellerRepository.findByIdentifier(tellerCode).ifPresent(tellerEntity ->\n+      tellerDenominations.addAll(\n+          this.tellerDenominationRepository.findByTellerAndCreatedOnBetweenOrderByCreatedOnDesc(\n+              tellerEntity, startDate, endDate)\n+              .stream()\n+              .map(TellerDenominationMapper::map)\n+              .collect(Collectors.toList())\n+      )\n+    );\n+\n+    return tellerDenominations;\n+  }\n+\n   private List<TellerEntry> fetchTellerEntries(final String accountIdentifier, final String dateRange, final Integer pageIndex) {\n     final ArrayList<TellerEntry> tellerEntries = new ArrayList<>();\n ",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/service/TellerManagementService.java",
                "sha": "4c093ddd512d78638f081adee92d8d6129b11255",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/service/helper/AccountingService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/internal/service/helper/AccountingService.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 1,
                "filename": "service/src/main/java/io/mifos/teller/service/internal/service/helper/AccountingService.java",
                "patch": "@@ -56,7 +56,8 @@ public AccountingService(@Qualifier(ServiceConstants.LOGGER_NAME) final Logger l\n \n       return accountPage.getAccounts()\n           .stream()\n-          .filter(account -> account.getAlternativeAccountNumber().equals(accountIdentifier))\n+          .filter(account -> account.getAlternativeAccountNumber() != null\n+              && account.getAlternativeAccountNumber().equals(accountIdentifier))\n           .findFirst();\n     }\n   }",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/internal/service/helper/AccountingService.java",
                "sha": "c9aca29002b500f222e6792e08e42ae649bee629",
                "status": "modified"
            },
            {
                "additions": 82,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/rest/TellerManagementRestController.java",
                "changes": 82,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/java/io/mifos/teller/service/rest/TellerManagementRestController.java?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/java/io/mifos/teller/service/rest/TellerManagementRestController.java",
                "patch": "@@ -18,17 +18,21 @@\n import io.mifos.anubis.annotation.AcceptedTokenType;\n import io.mifos.anubis.annotation.Permittable;\n import io.mifos.core.command.gateway.CommandGateway;\n+import io.mifos.core.lang.DateConverter;\n+import io.mifos.core.lang.DateRange;\n import io.mifos.core.lang.ServiceException;\n import io.mifos.teller.ServiceConstants;\n import io.mifos.teller.api.v1.PermittableGroupIds;\n import io.mifos.teller.api.v1.domain.Teller;\n import io.mifos.teller.api.v1.domain.TellerBalanceSheet;\n+import io.mifos.teller.api.v1.domain.TellerDenomination;\n import io.mifos.teller.api.v1.domain.TellerManagementCommand;\n import io.mifos.teller.service.internal.command.ChangeTellerCommand;\n import io.mifos.teller.service.internal.command.CloseTellerCommand;\n import io.mifos.teller.service.internal.command.CreateTellerCommand;\n import io.mifos.teller.service.internal.command.DeleteTellerCommand;\n import io.mifos.teller.service.internal.command.OpenTellerCommand;\n+import io.mifos.teller.service.internal.command.TellerDenominationCommand;\n import io.mifos.teller.service.internal.service.TellerManagementService;\n import io.mifos.teller.service.internal.service.helper.AccountingService;\n import io.mifos.teller.service.internal.service.helper.OrganizationService;\n@@ -41,10 +45,14 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.bind.annotation.RestController;\n \n import javax.validation.Valid;\n+import java.time.Clock;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n import java.util.List;\n import java.util.Optional;\n \n@@ -89,6 +97,8 @@ public TellerManagementRestController(@Qualifier(ServiceConstants.LOGGER_NAME) f\n     this.verifyOffice(officeIdentifier);\n     this.verifyAccount(teller.getTellerAccountIdentifier());\n     this.verifyAccount(teller.getVaultAccountIdentifier());\n+    this.verifyAccount(teller.getChequesReceivableAccount());\n+    this.verifyAccount(teller.getCashOverShortAccount());\n \n     this.commandGateway.process(new CreateTellerCommand(officeIdentifier, teller));\n \n@@ -148,6 +158,8 @@ public TellerManagementRestController(@Qualifier(ServiceConstants.LOGGER_NAME) f\n     this.verifyOffice(officeIdentifier);\n     this.verifyAccount(teller.getTellerAccountIdentifier());\n     this.verifyAccount(teller.getVaultAccountIdentifier());\n+    this.verifyAccount(teller.getChequesReceivableAccount());\n+    this.verifyAccount(teller.getCashOverShortAccount());\n \n     this.commandGateway.process(new ChangeTellerCommand(officeIdentifier, teller));\n \n@@ -165,6 +177,7 @@ public TellerManagementRestController(@Qualifier(ServiceConstants.LOGGER_NAME) f\n   ResponseEntity<Void> post(@PathVariable(\"officeIdentifier\") final String officeIdentifier,\n                             @PathVariable(\"tellerCode\") final String tellerCode,\n                             @RequestBody @Valid final TellerManagementCommand tellerManagementCommand) {\n+    this.verifyOffice(officeIdentifier);\n     final Teller teller = this.verifyTeller(tellerCode);\n \n     final TellerManagementCommand.Action action = TellerManagementCommand.Action.valueOf(tellerManagementCommand.getAction());\n@@ -180,6 +193,14 @@ public TellerManagementRestController(@Qualifier(ServiceConstants.LOGGER_NAME) f\n         if (teller.getState().equals(Teller.State.CLOSED.name())) {\n           throw ServiceException.badRequest(\"Teller {0} is already closed.\", tellerCode);\n         }\n+        if (teller.getDenominationRequired()) {\n+          final LocalDateTime lastOpenedOn = DateConverter.fromIsoString(teller.getLastOpenedOn());\n+          if (this.tellerManagementService\n+              .fetchTellerDenominations(tellerCode, lastOpenedOn, LocalDateTime.now(Clock.systemUTC()))\n+              .isEmpty()) {\n+            throw ServiceException.conflict(\"Denomination for teller {0} required.\", tellerCode);\n+          }\n+        }\n         this.commandGateway.process(new CloseTellerCommand(tellerCode, tellerManagementCommand));\n         break;\n       default:\n@@ -227,6 +248,67 @@ public TellerManagementRestController(@Qualifier(ServiceConstants.LOGGER_NAME) f\n     return ResponseEntity.accepted().build();\n   }\n \n+  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.TELLER_MANAGEMENT)\n+  @RequestMapping(\n+      value = \"/{tellerCode}/denominations\",\n+      method = RequestMethod.POST,\n+      consumes = MediaType.APPLICATION_JSON_VALUE,\n+      produces = MediaType.APPLICATION_JSON_VALUE\n+  )\n+  public\n+  @ResponseBody\n+  ResponseEntity<Void> saveTellerDenomination(@PathVariable(\"officeIdentifier\") final String officeIdentifier,\n+                                              @PathVariable(\"tellerCode\") final String tellerCode,\n+                                              @RequestBody @Valid final TellerDenomination tellerDenomination) {\n+    this.verifyOffice(officeIdentifier);\n+    final Teller teller = this.verifyTeller(tellerCode);\n+    if (!teller.getState().equals(Teller.State.PAUSED.name())) {\n+      throw ServiceException.conflict(\"Teller {0} is still in use.\", tellerCode);\n+    }\n+\n+    if (teller.getCashOverShortAccount() == null) {\n+      throw ServiceException.badRequest(\"Cash over/short account for teller {0} not set.\", tellerCode);\n+    }\n+\n+    this.verifyAccount(teller.getCashOverShortAccount());\n+\n+    final TellerBalanceSheet tellerBalanceSheet = this.tellerManagementService.getBalance(tellerCode);\n+\n+    this.commandGateway.process(\n+        new TellerDenominationCommand(tellerCode, tellerBalanceSheet.getCashOnHand(), tellerDenomination));\n+\n+    return ResponseEntity.accepted().build();\n+  }\n+\n+  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.TELLER_MANAGEMENT)\n+  @RequestMapping(\n+      value = \"/{tellerCode}/denominations\",\n+      method = RequestMethod.GET,\n+      consumes = MediaType.ALL_VALUE,\n+      produces = MediaType.APPLICATION_JSON_VALUE\n+  )\n+  public\n+  @ResponseBody\n+  ResponseEntity<List<TellerDenomination>> fetchTellerDenominations(\n+      @PathVariable(\"officeIdentifier\") final String officeIdentifier,\n+      @PathVariable(\"tellerCode\") final String tellerCode,\n+      @RequestParam(value = \"dateRange\", required = false) final String dateRange) {\n+    this.verifyOffice(officeIdentifier);\n+    this.verifyTeller(tellerCode);\n+\n+    final DateRange dateRangeHolder;\n+    if (dateRange != null) {\n+      dateRangeHolder = DateRange.fromIsoString(dateRange);\n+    } else {\n+      final LocalDate now = LocalDate.now();\n+      dateRangeHolder = new DateRange(now.minusMonths(1L).plusDays(1L), now);\n+    }\n+    return ResponseEntity.ok(\n+        this.tellerManagementService.fetchTellerDenominations(\n+            tellerCode, dateRangeHolder.getStartDateTime(), dateRangeHolder.getEndDateTime())\n+    );\n+  }\n+\n   private void verifyAccount(final String accountIdentifier) {\n     if (!this.accountingService.findAccount(accountIdentifier).isPresent()) {\n       throw ServiceException.badRequest(\"Account {0} not found.\", accountIdentifier);",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/java/io/mifos/teller/service/rest/TellerManagementRestController.java",
                "sha": "752e180821013ddd280e3788eb262850af8a696d",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/fineract-cn-teller/blob/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/resources/db/migrations/mariadb/V5__add_teller_denomination.sql",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/fineract-cn-teller/contents/service/src/main/resources/db/migrations/mariadb/V5__add_teller_denomination.sql?ref=b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6",
                "deletions": 0,
                "filename": "service/src/main/resources/db/migrations/mariadb/V5__add_teller_denomination.sql",
                "patch": "@@ -0,0 +1,29 @@\n+--\n+-- Copyright 2017 The Mifos Initiative.\n+--\n+-- Licensed under the Apache License, Version 2.0 (the \"License\");\n+-- you may not use this file except in compliance with the License.\n+-- You may obtain a copy of the License at\n+--\n+--    http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing, software\n+-- distributed under the License is distributed on an \"AS IS\" BASIS,\n+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+-- See the License for the specific language governing permissions and\n+-- limitations under the License.\n+--\n+\n+ALTER TABLE tajet_teller ADD cash_over_short_account VARCHAR(34) NULL;\n+\n+CREATE TABLE tajet_teller_denominations (\n+  id                      BIGINT        NOT NULL AUTO_INCREMENT,\n+  teller_id               BIGINT        NOT NULL,\n+  counted_total           NUMERIC(15,5) NOT NULL,\n+  note                    VARCHAR(512)  NULL,\n+  adjusting_journal_entry VARCHAR(32)   NULL,\n+  created_on              TIMESTAMP(3)  NOT NULL,\n+  created_by              VARCHAR(32)   NOT NULL,\n+  CONSTRAINT tajet_teller_denominations PRIMARY KEY (id),\n+  CONSTRAINT tajet_teller_denominations_fk FOREIGN KEY (teller_id) REFERENCES tajet_teller (id)\n+);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/fineract-cn-teller/raw/b4cd1e9aabbe9c2f97c851633d1e3091a5e816b6/service/src/main/resources/db/migrations/mariadb/V5__add_teller_denomination.sql",
                "sha": "301f5b1a6bc7ec22430aeda5e894e01094f89173",
                "status": "added"
            }
        ],
        "message": "Merge pull request #24 from markusgeiss/develop\n\nfixed NPE and added teller denomination capabilities",
        "parent": "https://github.com/apache/fineract-cn-teller/commit/4d97fb3ec9adeca635da7fe7655d03b080c1a5f9",
        "patched_files": [
            "TellerDenominationRepository.java",
            "TellerManagementService.java",
            "TellerManagementRestController.java",
            "TellerEntity.java",
            "Teller.java",
            "TellerAggregate.java",
            "TellerDenominationMapper.java",
            "TellerDenomination.java",
            "TellerEventListener.java",
            "TellerDenominationCommand.java",
            "TellerMapper.java",
            "TellerDenominationEntity.java",
            "V5__add_teller_denomination.sql",
            "TellerGenerator.java",
            "EventConstants.java",
            "TellerManager.java",
            "AccountingService.java"
        ],
        "repo": "fineract-cn-teller",
        "unit_tests": [
            "TestTellerDenomination.java"
        ]
    }
}