[
    {
        "repo": "tinkerpop",
        "commit": "https://github.com/apache/tinkerpop/commit/3d70c3d15d4591acab84420f86991cd98a187c38",
        "bug_id": "tinkerpop_3d70c3d",
        "message": "fixed an NPE bug in profiling GroupSideEffectStep. It has to deal with how GroupSideEffectStep breaks apart the valueTraversal into a pre/post-traversal for pre-proecessing and reduction. While I was testing, I found another bug where if the reducing traversal has no data, then don't .next() it. Basically, it is possible for Profiling to get a traversal that has not been next'd because the traversal's pre/post was being worked with.",
        "parent": "https://github.com/apache/tinkerpop/commit/b4d0ef98aee1bde018698e726f0374ce61a37f3a",
        "patched_files": [
            "CHANGELOG.asciidoc",
            "GroupStep.java",
            "GroupSideEffectStep.java",
            "GroovyGroupTest.groovy",
            "DefaultTraversalMetrics.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/CHANGELOG.asciidoc",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/CHANGELOG.asciidoc?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "CHANGELOG.asciidoc",
                "deletions": 0,
                "sha": "766b135eb239710e62e9b719d7e0144b5c3a3119",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/CHANGELOG.asciidoc",
                "patch": "@@ -26,6 +26,7 @@ image::https://raw.githubusercontent.com/apache/tinkerpop/master/docs/static/ima\n TinkerPop 3.2.4 (Release Date: NOT OFFICIALLY RELEASED YET)\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n+* Fixed a `NullPointerException` bug with profiling `GroupSideEffectStep` in OLTP.\n * Improved ability to release resources in `GraphProvider` instances in the test suite.\n * Added a `force` option for killing sessions without waiting for transaction close or timeout of a currently running job or multiple jobs.\n * Deprecated `Session.kill()` and `Session.manualKill()`.",
                "changes": 1
            },
            {
                "status": "modified",
                "additions": 20,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/map/GroupStep.java",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/map/GroupStep.java?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/map/GroupStep.java",
                "deletions": 13,
                "sha": "737c5f9ccc165be802c5565c1a144a5f12d9ec0d",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/map/GroupStep.java",
                "patch": "@@ -22,7 +22,6 @@\n import org.apache.tinkerpop.gremlin.process.traversal.Step;\n import org.apache.tinkerpop.gremlin.process.traversal.Traversal;\n import org.apache.tinkerpop.gremlin.process.traversal.Traverser;\n-import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;\n import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__;\n import org.apache.tinkerpop.gremlin.process.traversal.lambda.ElementValueTraversal;\n import org.apache.tinkerpop.gremlin.process.traversal.lambda.FunctionTraverser;\n@@ -61,8 +60,8 @@\n \n     private char state = 'k';\n     private Traversal.Admin<S, K> keyTraversal = null;\n-    private Traversal.Admin<S, ?> preTraversal;\n-    private Traversal.Admin<S, V> valueTraversal;\n+    private Traversal.Admin<S, ?> preTraversal = null;\n+    private Traversal.Admin<S, V> valueTraversal = null;\n \n     public GroupStep(final Traversal.Admin traversal) {\n         super(traversal);\n@@ -109,10 +108,12 @@ public String toString() {\n \n     @Override\n     public List<Traversal.Admin<?, ?>> getLocalChildren() {\n-        final List<Traversal.Admin<?, ?>> children = new ArrayList<>(2);\n+        final List<Traversal.Admin<?, ?>> children = new ArrayList<>(3);\n         if (null != this.keyTraversal)\n-            children.add((Traversal.Admin) this.keyTraversal);\n+            children.add(this.keyTraversal);\n         children.add(this.valueTraversal);\n+        if (null != this.preTraversal)\n+            children.add(this.preTraversal);\n         return children;\n     }\n \n@@ -127,7 +128,8 @@ public String toString() {\n         if (null != this.keyTraversal)\n             clone.keyTraversal = this.keyTraversal.clone();\n         clone.valueTraversal = this.valueTraversal.clone();\n-        clone.preTraversal = this.integrateChild(GroupStep.generatePreTraversal(clone.valueTraversal));\n+        if (null != this.preTraversal)\n+            clone.preTraversal = this.preTraversal.clone();\n         return clone;\n     }\n \n@@ -332,26 +334,30 @@ private void readObject(final ObjectInputStream inputStream) throws IOException,\n \n     public static Traversal.Admin<?, ?> generatePreTraversal(final Traversal.Admin<?, ?> valueTraversal) {\n         if (!TraversalHelper.hasStepOfAssignableClass(Barrier.class, valueTraversal))\n-            return valueTraversal;\n+            return valueTraversal.clone();\n         final Traversal.Admin<?, ?> first = __.identity().asAdmin();\n+        boolean updated = false;\n         for (final Step step : valueTraversal.getSteps()) {\n             if (step instanceof Barrier)\n                 break;\n             first.addStep(step.clone());\n+            updated = true;\n         }\n-        return first.getSteps().size() == 1 ? null : first;\n+        return updated ? first : null;\n     }\n \n     public static <K, V> Map<K, V> doFinalReduction(final Map<K, Object> map, final Traversal.Admin<?, V> valueTraversal) {\n         final Map<K, V> reducedMap = new HashMap<>(map.size());\n         final Barrier reducingBarrierStep = TraversalHelper.getFirstStepOfAssignableClass(Barrier.class, valueTraversal).orElse(null);\n         IteratorUtils.removeOnNext(map.entrySet().iterator()).forEachRemaining(entry -> {\n-            valueTraversal.reset();\n             if (null == reducingBarrierStep) {\n-                reducedMap.put(entry.getKey(), entry.getValue() instanceof TraverserSet ?\n-                        ((TraverserSet<V>) entry.getValue()).iterator().next().get() :\n-                        (V) entry.getValue());\n+                if (entry.getValue() instanceof TraverserSet) {\n+                    if (!((TraverserSet) entry.getValue()).isEmpty())\n+                        reducedMap.put(entry.getKey(), ((TraverserSet<V>) entry.getValue()).peek().get());\n+                } else\n+                    reducedMap.put(entry.getKey(), (V) entry.getValue());\n             } else {\n+                valueTraversal.reset();\n                 if (entry.getValue() instanceof Traverser.Admin)\n                     ((Step) reducingBarrierStep).addStart((Traverser.Admin) entry.getValue());\n                 else if (entry.getValue() instanceof TraverserSet)\n@@ -361,7 +367,8 @@ else if (entry.getValue() instanceof Pair) {\n                     reducingBarrierStep.addBarrier((((Pair) entry.getValue()).getValue1()));\n                 } else\n                     reducingBarrierStep.addBarrier(entry.getValue());\n-                reducedMap.put(entry.getKey(), valueTraversal.next());\n+                if (valueTraversal.hasNext())\n+                    reducedMap.put(entry.getKey(), valueTraversal.next());\n             }\n         });\n         assert map.isEmpty();",
                "changes": 33
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStep.java",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStep.java?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStep.java",
                "deletions": 4,
                "sha": "f2699e0ef8b187d508b79c6acd2e71f59f192e7d",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStep.java",
                "patch": "@@ -45,7 +45,7 @@\n     private char state = 'k';\n     private Traversal.Admin<S, K> keyTraversal = null;\n     private Traversal.Admin<S, ?> preTraversal = null;\n-    private Traversal.Admin<S, V> valueTraversal = this.integrateChild(__.fold().asAdmin());\n+    private Traversal.Admin<S, V> valueTraversal = null;\n     ///\n     private String sideEffectKey;\n \n@@ -99,10 +99,12 @@ public String toString() {\n \n     @Override\n     public List<Traversal.Admin<?, ?>> getLocalChildren() {\n-        final List<Traversal.Admin<?, ?>> children = new ArrayList<>(2);\n+        final List<Traversal.Admin<?, ?>> children = new ArrayList<>(3);\n         if (null != this.keyTraversal)\n-            children.add((Traversal.Admin) this.keyTraversal);\n+            children.add(this.keyTraversal);\n         children.add(this.valueTraversal);\n+        if (null != this.preTraversal)\n+            children.add(this.preTraversal);\n         return children;\n     }\n \n@@ -117,7 +119,8 @@ public String toString() {\n         if (null != this.keyTraversal)\n             clone.keyTraversal = this.keyTraversal.clone();\n         clone.valueTraversal = this.valueTraversal.clone();\n-        clone.preTraversal = this.integrateChild(GroupStep.generatePreTraversal(clone.valueTraversal));\n+        if (null != this.preTraversal)\n+            clone.preTraversal = this.preTraversal.clone();\n         return clone;\n     }\n ",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 39,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/DefaultTraversalMetrics.java",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/DefaultTraversalMetrics.java?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/DefaultTraversalMetrics.java",
                "deletions": 37,
                "sha": "ecf28e002d01e85c5c4e9150e3b95b66be826896",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/DefaultTraversalMetrics.java",
                "patch": "@@ -37,6 +37,7 @@\n \n /**\n  * @author Bob Briody (http://bobbriody.com)\n+ * @author Marko A. Rodriguez (http://markorodriguez.com)\n  */\n public final class DefaultTraversalMetrics implements TraversalMetrics, Serializable {\n     /**\n@@ -61,29 +62,29 @@ public DefaultTraversalMetrics() {\n      */\n     public DefaultTraversalMetrics(final long totalStepDurationNs, final List<MutableMetrics> metricsMap) {\n         this.totalStepDuration = totalStepDurationNs;\n-        this.computedMetrics = new LinkedHashMap<>(metrics.size());\n-        metricsMap.forEach(m -> computedMetrics.put(m.getId(), m.getImmutableClone()));\n+        this.computedMetrics = new LinkedHashMap<>(this.metrics.size());\n+        metricsMap.forEach(metric -> this.computedMetrics.put(metric.getId(), metric.getImmutableClone()));\n     }\n \n     @Override\n     public long getDuration(final TimeUnit unit) {\n-        return unit.convert(totalStepDuration, MutableMetrics.SOURCE_UNIT);\n+        return unit.convert(this.totalStepDuration, MutableMetrics.SOURCE_UNIT);\n     }\n \n     @Override\n     public Metrics getMetrics(final int index) {\n         // adjust index to account for the injected profile steps\n-        return (Metrics) computedMetrics.get(indexToLabelMap.get(index));\n+        return this.computedMetrics.get(this.indexToLabelMap.get(index));\n     }\n \n     @Override\n     public Metrics getMetrics(final String id) {\n-        return computedMetrics.get(id);\n+        return this.computedMetrics.get(id);\n     }\n \n     @Override\n     public Collection<ImmutableMetrics> getMetrics() {\n-        return computedMetrics.values();\n+        return this.computedMetrics.values();\n     }\n \n     @Override\n@@ -96,7 +97,7 @@ public String toString() {\n \n         sb.append(\"\\n=============================================================================================================\");\n \n-        appendMetrics(computedMetrics.values(), sb, 0);\n+        appendMetrics(this.computedMetrics.values(), sb, 0);\n \n         // Append total duration\n         sb.append(String.format(\"%n%50s %21s %11s %15.3f %8s\",\n@@ -150,25 +151,25 @@ private void appendMetrics(final Collection<? extends Metrics> metrics, final St\n \n     private void computeTotals() {\n         // Create temp list of ordered metrics\n-        List<MutableMetrics> tempMetrics = new ArrayList<>(metrics.size());\n-        for (String label : indexToLabelMap.values()) {\n+        final List<MutableMetrics> tempMetrics = new ArrayList<>(this.metrics.size());\n+        for (final String label : this.indexToLabelMap.values()) {\n             // The indexToLabelMap is sorted by index (key)\n-            tempMetrics.add(metrics.get(label).clone());\n+            tempMetrics.add(this.metrics.get(label).clone());\n         }\n \n         // Calculate total duration\n         this.totalStepDuration = 0;\n-        tempMetrics.forEach(m -> this.totalStepDuration += m.getDuration(MutableMetrics.SOURCE_UNIT));\n+        tempMetrics.forEach(metric -> this.totalStepDuration += metric.getDuration(MutableMetrics.SOURCE_UNIT));\n \n         // Assign %'s\n         tempMetrics.forEach(m -> {\n-            double dur = m.getDuration(TimeUnit.NANOSECONDS) * 100.d / this.totalStepDuration;\n+            final double dur = m.getDuration(TimeUnit.NANOSECONDS) * 100.d / this.totalStepDuration;\n             m.setAnnotation(PERCENT_DURATION_KEY, dur);\n         });\n \n         // Store immutable instances of the calculated metrics\n-        computedMetrics = new LinkedHashMap<>(metrics.size());\n-        tempMetrics.forEach(it -> computedMetrics.put(it.getId(), it.getImmutableClone()));\n+        this.computedMetrics = new LinkedHashMap<>(this.metrics.size());\n+        tempMetrics.forEach(it -> this.computedMetrics.put(it.getId(), it.getImmutableClone()));\n     }\n \n     public static DefaultTraversalMetrics merge(final Iterator<DefaultTraversalMetrics> toMerge) {\n@@ -186,7 +187,7 @@ public static DefaultTraversalMetrics merge(final Iterator<DefaultTraversalMetri\n \n                     newTraversalMetrics.metrics.put(metricsId, aggregateMetrics);\n                     // Set the index of the Metrics\n-                    for (Map.Entry<Integer, String> entry : inTraversalMetrics.indexToLabelMap.entrySet()) {\n+                    for (final Map.Entry<Integer, String> entry : inTraversalMetrics.indexToLabelMap.entrySet()) {\n                         if (metricsId.equals(entry.getValue())) {\n                             newTraversalMetrics.indexToLabelMap.put(entry.getKey(), metricsId);\n                             break;\n@@ -199,7 +200,7 @@ public static DefaultTraversalMetrics merge(final Iterator<DefaultTraversalMetri\n         return newTraversalMetrics;\n     }\n \n-    public void setMetrics(Traversal.Admin traversal, boolean onGraphComputer) {\n+    public void setMetrics(final Traversal.Admin traversal, final boolean onGraphComputer) {\n         addTopLevelMetrics(traversal, onGraphComputer);\n         handleNestedTraversals(traversal, null, onGraphComputer);\n         computeTotals();\n@@ -222,36 +223,37 @@ private void addTopLevelMetrics(Traversal.Admin traversal, final boolean onGraph\n         }\n     }\n \n-    private void handleNestedTraversals(Traversal.Admin traversal, MutableMetrics parentMetrics, boolean onGraphComputer) {\n+    private void handleNestedTraversals(final Traversal.Admin traversal, final MutableMetrics parentMetrics, final boolean onGraphComputer) {\n         long prevDur = 0;\n-        for (int ii = 0; ii < traversal.getSteps().size(); ii++) {\n-            Step step = (Step) traversal.getSteps().get(ii);\n-            if (!(step instanceof ProfileStep)) {\n+        for (int i = 0; i < traversal.getSteps().size(); i++) {\n+            final Step step = (Step) traversal.getSteps().get(i);\n+            if (!(step instanceof ProfileStep))\n                 continue;\n-            }\n \n             final MutableMetrics metrics = onGraphComputer ?\n                     traversal.getSideEffects().get(step.getId()) :\n                     ((ProfileStep) step).getMetrics();\n \n-            if (!onGraphComputer) {\n-                // subtract upstream duration.\n-                long durBeforeAdjustment = metrics.getDuration(TimeUnit.NANOSECONDS);\n-                // adjust duration\n-                metrics.setDuration(metrics.getDuration(TimeUnit.NANOSECONDS) - prevDur, TimeUnit.NANOSECONDS);\n-                prevDur = durBeforeAdjustment;\n-            }\n-\n-            if (parentMetrics != null) {\n-                parentMetrics.addNested(metrics);\n-            }\n+            if (null != metrics) { // this happens when a particular branch never received a .next() call (the metrics were never initialized)\n+                if (!onGraphComputer) {\n+                    // subtract upstream duration.\n+                    long durBeforeAdjustment = metrics.getDuration(TimeUnit.NANOSECONDS);\n+                    // adjust duration\n+                    metrics.setDuration(metrics.getDuration(TimeUnit.NANOSECONDS) - prevDur, TimeUnit.NANOSECONDS);\n+                    prevDur = durBeforeAdjustment;\n+                }\n \n-            if (step.getPreviousStep() instanceof TraversalParent) {\n-                for (Traversal.Admin<?, ?> t : ((TraversalParent) step.getPreviousStep()).getLocalChildren()) {\n-                    handleNestedTraversals(t, metrics, onGraphComputer);\n+                if (parentMetrics != null) {\n+                    parentMetrics.addNested(metrics);\n                 }\n-                for (Traversal.Admin<?, ?> t : ((TraversalParent) step.getPreviousStep()).getGlobalChildren()) {\n-                    handleNestedTraversals(t, metrics, onGraphComputer);\n+\n+                if (step.getPreviousStep() instanceof TraversalParent) {\n+                    for (Traversal.Admin<?, ?> t : ((TraversalParent) step.getPreviousStep()).getLocalChildren()) {\n+                        handleNestedTraversals(t, metrics, onGraphComputer);\n+                    }\n+                    for (Traversal.Admin<?, ?> t : ((TraversalParent) step.getPreviousStep()).getGlobalChildren()) {\n+                        handleNestedTraversals(t, metrics, onGraphComputer);\n+                    }\n                 }\n             }\n         }",
                "changes": 76
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-groovy-test/src/main/groovy/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroovyGroupTest.groovy",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-groovy-test/src/main/groovy/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroovyGroupTest.groovy?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "gremlin-groovy-test/src/main/groovy/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroovyGroupTest.groovy",
                "deletions": 0,
                "sha": "84da296561380006687fcd3f09f406d3a4787b07",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-groovy-test/src/main/groovy/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroovyGroupTest.groovy",
                "patch": "@@ -118,5 +118,10 @@ public abstract class GroovyGroupTest {\n         public Traversal<Vertex, Map<String, Map<String, Number>>> get_g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXweight_sumXX() {\n             new ScriptTraversal<>(g, \"gremlin-groovy\", \"g.V.out('followedBy').group.by('songType').by(bothE().group.by(label).by(values('weight').sum))\")\n         }\n+\n+        @Override\n+        public Traversal<Vertex, Map<String, String>> get_g_V_groupXmX_byXnameX_byXinXknowsX_nameX_capXmX() {\n+            new ScriptTraversal<>(g, \"gremlin-groovy\", \"g.V.group('m').by('name').by(__.in('knows').name).cap('m')\")\n+        }\n     }\n }",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 23,
                "raw_url": "https://github.com/apache/tinkerpop/raw/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-test/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupTest.java",
                "contents_url": "https://api.github.com/repos/apache/tinkerpop/contents/gremlin-test/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupTest.java?ref=3d70c3d15d4591acab84420f86991cd98a187c38",
                "filename": "gremlin-test/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupTest.java",
                "deletions": 0,
                "sha": "036c8c8a8342f383be1eda15b510aaef92d11ba4",
                "blob_url": "https://github.com/apache/tinkerpop/blob/3d70c3d15d4591acab84420f86991cd98a187c38/gremlin-test/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupTest.java",
                "patch": "@@ -88,6 +88,8 @@\n \n     public abstract Traversal<Vertex, Map<String, Map<String, Number>>> get_g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXweight_sumXX();\n \n+    public abstract Traversal<Vertex, Map<String, String>> get_g_V_groupXmX_byXnameX_byXinXknowsX_nameX_capXmX();\n+\n     @Test\n     @LoadGraphWith(MODERN)\n     public void g_V_group_byXnameX() {\n@@ -364,6 +366,7 @@ public void g_V_repeatXunionXoutXknowsX_groupXaX_byXageX__outXcreatedX_groupXbX_\n     @LoadGraphWith(MODERN)\n     public void g_V_group_byXbothE_countX_byXgroup_byXlabelXX() {\n         final Traversal<Vertex, Map<Long, Map<String, List<Vertex>>>> traversal = get_g_V_group_byXbothE_countX_byXgroup_byXlabelXX();\n+        printTraversalForm(traversal);\n         final Map<Long, Map<String, List<Vertex>>> map = traversal.next();\n         assertFalse(traversal.hasNext());\n         assertEquals(2, map.size());\n@@ -399,6 +402,7 @@ public void g_V_group_byXbothE_countX_byXgroup_byXlabelXX() {\n     @LoadGraphWith(GRATEFUL)\n     public void g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXweight_sumXX() {\n         final Traversal<Vertex, Map<String, Map<String, Number>>> traversal = get_g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXweight_sumXX();\n+        printTraversalForm(traversal);\n         final Map<String, Map<String, Number>> map = traversal.next();\n         assertFalse(traversal.hasNext());\n         assertEquals(3, map.size());\n@@ -423,6 +427,20 @@ public void g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXw\n         assertEquals(0, subMap.get(\"sungBy\").intValue());\n     }\n \n+    @Test\n+    @LoadGraphWith(MODERN)\n+    public void g_V_groupXmX_byXnameX_byXinXknowsX_nameX_capXmX() {\n+        final Traversal<Vertex, Map<String, String>> traversal = get_g_V_groupXmX_byXnameX_byXinXknowsX_nameX_capXmX();\n+        printTraversalForm(traversal);\n+        final Map<String, String> map = traversal.next();\n+        assertFalse(traversal.hasNext());\n+        assertEquals(2, map.size());\n+        assertEquals(\"marko\", map.get(\"vadas\"));\n+        assertEquals(\"marko\", map.get(\"josh\"));\n+\n+        checkSideEffects(traversal.asAdmin().getSideEffects(), \"m\", HashMap.class);\n+    }\n+\n     public static class Traversals extends GroupTest {\n \n         @Override\n@@ -514,5 +532,10 @@ public void g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXw\n         public Traversal<Vertex, Map<String, Map<String, Number>>> get_g_V_outXfollowedByX_group_byXsongTypeX_byXbothE_group_byXlabelX_byXweight_sumXX() {\n             return g.V().out(\"followedBy\").<String, Map<String, Number>>group().by(\"songType\").by(__.bothE().group().by(T.label).by(__.values(\"weight\").sum()));\n         }\n+\n+        @Override\n+        public Traversal<Vertex, Map<String, String>> get_g_V_groupXmX_byXnameX_byXinXknowsX_nameX_capXmX() {\n+            return g.V().group(\"m\").by(\"name\").by(__.in(\"knows\").values(\"name\")).cap(\"m\");\n+        }\n     }\n }",
                "changes": 23
            }
        ],
        "unit_tests": [
            "GroupSideEffectStepTest.java",
            "GroupStepTest.java",
            "GroupTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "gremlin-core/src/test/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStepTest.java",
        "buggy_files": [
            "CHANGELOG.asciidoc",
            "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/map/GroupStep.java",
            "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroupSideEffectStep.java",
            "gremlin-groovy-test/src/main/groovy/org/apache/tinkerpop/gremlin/process/traversal/step/sideEffect/GroovyGroupTest.groovy",
            "gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/process/traversal/util/DefaultTraversalMetrics.java"
        ],
        "fixed": true
    }
]