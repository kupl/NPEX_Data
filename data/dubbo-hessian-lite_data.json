[
    {
        "repo": "dubbo-hessian-lite",
        "message": "pull request#131: \u4fee\u590d\u5f53urls==null\u65f6,\u62a5NullPointerException",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/2d274ec8a36ceb9a85a60fc838affc88e99f8371",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/5526dd8d2e80741e311e5466fc24392b2421eb00",
        "bug_id": "dubbo-hessian-lite_1",
        "file": [
            {
                "sha": "f3979b28324bcede3d7bdf4e54a68b064df09dd0",
                "filename": "dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/2d274ec8a36ceb9a85a60fc838affc88e99f8371/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/2d274ec8a36ceb9a85a60fc838affc88e99f8371/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-registry/dubbo-registry-api/src/main/java/com/alibaba/dubbo/registry/integration/RegistryDirectory.java?ref=2d274ec8a36ceb9a85a60fc838affc88e99f8371",
                "patch": "@@ -123,10 +123,11 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n      * @return\r\n      */\r\n     public static List<Configurator> toConfigurators(List<URL> urls) {\r\n-        List<Configurator> configurators = new ArrayList<Configurator>(urls.size());\r\n         if (urls == null || urls.size() == 0) {\r\n-            return configurators;\r\n+            return Collections.emptyList();\r\n         }\r\n+\r\n+        List<Configurator> configurators = new ArrayList<Configurator>(urls.size());\r\n         for (URL url : urls) {\r\n             if (Constants.EMPTY_PROTOCOL.equals(url.getProtocol())) {\r\n                 configurators.clear();\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "fix(AbstractProxyInvoker):fix NPE problem(#788)\n\nNPE bug fixed.",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/48fdbb0ee955fc542f9abe1df772f600a79bc09d",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/0d2781ea506986f866539248452a97c490cede2b",
        "bug_id": "dubbo-hessian-lite_2",
        "file": [
            {
                "sha": "9369fbeb2cf3a15b097ff3b8f71e3217995e9557",
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/48fdbb0ee955fc542f9abe1df772f600a79bc09d/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/48fdbb0ee955fc542f9abe1df772f600a79bc09d/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/proxy/AbstractProxyInvoker.java?ref=48fdbb0ee955fc542f9abe1df772f600a79bc09d",
                "patch": "@@ -81,8 +81,8 @@ public Result invoke(Invocation invocation) throws RpcException {\n \n     @Override\n     public String toString() {\n-        return getInterface() + \" -> \" + getUrl() == null ? \" \" : getUrl().toString();\n+        return getInterface() + \" -> \" + (getUrl() == null ? \" \" : getUrl().toString());\n     }\n \n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "pull request#131: \u4fee\u590d\u5f53value == null &&\u3000entry.getValue() \uff1d= null \u65f6\u8bed\u53e5if(value == null && entry.getValue() != null || !value.equals(entry.getValue())) \u62a5NullPointerException",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/5526dd8d2e80741e311e5466fc24392b2421eb00",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/c5c017dcba089d8b4c7e7e42b51cd2664194c138",
        "bug_id": "dubbo-hessian-lite_3",
        "file": [
            {
                "sha": "d89f5735d58ebb6a5fb5bf48c622f3720078ad01",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "patch": "@@ -966,9 +966,16 @@ public URL addParameters(Map<String, String> parameters) {\n         boolean hasAndEqual = true;\r\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n             String value = getParameters().get(entry.getKey());\r\n-            if (value == null && entry.getValue() != null || !value.equals(entry.getValue())) {\r\n-                hasAndEqual = false;\r\n-                break;\r\n+            if (value == null) {\r\n+                if (entry.getValue() != null) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n+            } else {\r\n+                if (!value.equals(entry.getValue())) {\r\n+                    hasAndEqual = false;\r\n+                    break;\r\n+                }\r\n             }\r\n         }\r\n         // \u5982\u679c\u6ca1\u6709\u4fee\u6539\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\r",
                "deletions": 3
            },
            {
                "sha": "ddd21f55a708786a50e41961ee94ad204c7d592d",
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/5526dd8d2e80741e311e5466fc24392b2421eb00/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/URLTest.java?ref=5526dd8d2e80741e311e5466fc24392b2421eb00",
                "patch": "@@ -16,7 +16,6 @@\n package com.alibaba.dubbo.common;\r\n \r\n import com.alibaba.dubbo.common.utils.CollectionUtils;\r\n-\r\n import org.junit.Test;\r\n \r\n import java.io.File;\r\n@@ -633,4 +632,11 @@ public void test_Path() throws Exception {\n         assertEquals(\"path\", url.getPath());\r\n     }\r\n \r\n+    @Test\r\n+    public void testAddParameters() throws Exception {\r\n+        URL url = URL.valueOf(\"dubbo://127.0.0.1:20880\");\r\n+        Map<String, String> parameters = new HashMap<String, String>();\r\n+        parameters.put(\"version\", null);\r\n+        url.addParameters(parameters);\r\n+    }\r\n }\n\\ No newline at end of file",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "    #1597: CacheFilter,when value is null,it will throw NPE(if use ehcache for jcache),why not check null here (#1828)",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/d03ff27bd0c2e77689bfe11f16f5e9276dc62081",
        "bug_id": "dubbo-hessian-lite_4",
        "file": [
            {
                "sha": "e034cbbc96d5479d77b7aafa8d4fe021a606ac55",
                "filename": "dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "patch": "@@ -52,7 +52,7 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n                     return new RpcResult(value);\r\n                 }\r\n                 Result result = invoker.invoke(invocation);\r\n-                if (!result.hasException()) {\r\n+                if (!result.hasException() && result.getValue() != null) {\r\n                     cache.put(key, result.getValue());\r\n                 }\r\n                 return result;\r",
                "deletions": 1
            },
            {
                "sha": "760605c9ab60495e77125bcb2dab6d0ca040b700",
                "filename": "dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/a6d8f1c5b20d30b3fe3206332d56bc6de1baa282/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java?ref=a6d8f1c5b20d30b3fe3206332d56bc6de1baa282",
                "patch": "@@ -44,6 +44,8 @@\n     private Invoker<?> invoker = mock(Invoker.class);\n     private Invoker<?> invoker1 = mock(Invoker.class);\n     private Invoker<?> invoker2 = mock(Invoker.class);\n+    private Invoker<?> invoker3 = mock(Invoker.class);\n+    private Invoker<?> invoker4 = mock(Invoker.class);\n     private String cacheType;\n     private CacheFactory cacheFactory;\n \n@@ -77,6 +79,11 @@ public void setUp() throws Exception {\n         given(invoker2.invoke(invocation)).willReturn(new RpcResult(\"value2\"));\n         given(invoker2.getUrl()).willReturn(url);\n \n+        given(invoker3.invoke(invocation)).willReturn(new RpcResult(new RuntimeException()));\n+        given(invoker3.getUrl()).willReturn(url);\n+\n+        given(invoker4.invoke(invocation)).willReturn(new RpcResult());\n+        given(invoker4.getUrl()).willReturn(url);\n     }\n \n     @Test\n@@ -89,6 +96,7 @@ public void testNonArgsMethod() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n     }\n \n     @Test\n@@ -101,5 +109,30 @@ public void testMethodWithArgs() {\n         RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n         RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n         Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n+        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n+    }\n+\n+    @Test\n+    public void testException() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg2\"});\n+\n+        cacheFilter.invoke(invoker3, invocation);\n+        RpcResult rpcResult = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult.getValue(), \"value2\");\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        invocation.setMethodName(\"echo1\");\n+        invocation.setParameterTypes(new Class<?>[]{String.class});\n+        invocation.setArguments(new Object[]{\"arg3\"});\n+\n+        cacheFilter.invoke(invoker4, invocation);\n+        RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n+        RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n+        Assert.assertEquals(rpcResult1.getValue(), \"value1\");\n+        Assert.assertEquals(rpcResult2.getValue(), \"value1\");\n     }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "Merge pull request #1118, fix hessian deserialization NPE problem for java.sql.Time.\n\nAdd null check for java.sql.Time.",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/d192720920a6d7096b6dc4c3b80b38c8177ff077",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/96a6db7f5cc7873fe7a3e714b24984fe852f1b15",
        "bug_id": "dubbo-hessian-lite_5",
        "file": [
            {
                "sha": "e75b21155445d00a1f6d2d3140aebc428800e36d",
                "filename": "hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/d192720920a6d7096b6dc4c3b80b38c8177ff077/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/d192720920a6d7096b6dc4c3b80b38c8177ff077/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java?ref=d192720920a6d7096b6dc4c3b80b38c8177ff077",
                "patch": "@@ -621,7 +621,7 @@ void deserialize(AbstractHessianInput in, Object obj)\n \n             try {\n                 java.util.Date date = (java.util.Date) in.readObject();\n-                value = new java.sql.Time(date.getTime());\n+                if (date != null) value = new java.sql.Time(date.getTime());\n \n                 _field.set(obj, value);\n             } catch (Exception e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "avoid NPE when date is null",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/6b9452afb330194279e1998bc03a1159895c89e9",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/66139d567eef8198101368b5d8ea37458767cae4",
        "bug_id": "dubbo-hessian-lite_6",
        "file": [
            {
                "sha": "6f448c140de0dd64f691d830f636be93e8974bfc",
                "filename": "hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/6b9452afb330194279e1998bc03a1159895c89e9/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/6b9452afb330194279e1998bc03a1159895c89e9/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/hessian-lite/src/main/java/com/alibaba/com/caucho/hessian/io/JavaDeserializer.java?ref=6b9452afb330194279e1998bc03a1159895c89e9",
                "patch": "@@ -601,7 +601,7 @@ void deserialize(AbstractHessianInput in, Object obj)\n \n       try {\n         java.util.Date date = (java.util.Date) in.readObject();\n-        value = new java.sql.Date(date.getTime());\n+        if (date != null) value = new java.sql.Date(date.getTime());\n \n         _field.set(obj, value);\n       } catch (Exception e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "Merge pull request from #775 from hollyshi:patch-2\n\nThe operator '+' has a higher operation priority than '?:'. A NPE will be thrown if getUrl() returns null, which is not expected.",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/aabcbc3bb97c52889175e9e7659158932429e928",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/933cacaa2368e518226d455c1d96ec55964caa75",
        "bug_id": "dubbo-hessian-lite_7",
        "file": [
            {
                "sha": "e27c2b1a798aa4ec14d807da18771b4510bd5697",
                "filename": "dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/listener/ListenerInvokerWrapper.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/aabcbc3bb97c52889175e9e7659158932429e928/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/listener/ListenerInvokerWrapper.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/aabcbc3bb97c52889175e9e7659158932429e928/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/listener/ListenerInvokerWrapper.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-rpc/dubbo-rpc-api/src/main/java/com/alibaba/dubbo/rpc/listener/ListenerInvokerWrapper.java?ref=aabcbc3bb97c52889175e9e7659158932429e928",
                "patch": "@@ -76,7 +76,7 @@ public Result invoke(Invocation invocation) throws RpcException {\n \r\n     @Override\r\n     public String toString() {\r\n-        return getInterface() + \" -> \" + getUrl() == null ? \" \" : getUrl().toString();\r\n+        return getInterface() + \" -> \" + (getUrl() == null ? \" \" : getUrl().toString());\r\n     }\r\n \r\n     public void destroy() {\r\n@@ -97,4 +97,4 @@ public void destroy() {\n         }\r\n     }\r\n \r\n-}\n\\ No newline at end of file\n+}\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "Extension: Eager Thread Pool (#1568)\n\n* Extension: Enhanced Thread Pool\r\nA thread pool that can provide faster processing speeds when there are more tasks (of course it consumes more resources)\r\n* When the number of tasks exceeds the core size, a new thread is first started to execute the task instead of putting it into the queue.\r\n* When the number of tasks is lower than the core size for a long time, the core size threads are maintained and redundant threads are recycled.\r\n* Compared to the fixed pool\uff1aWhen there are more tasks, provide more workers to handle the tasks.\r\n* Compared to the cached pool\uff1aThe task queue in the cached pool is actually a SynchronousQueue and does not have the ability to cache tasks.\r\n* Whether to fail fail or put into a queue when a thread runs out\uff1aBoth are feasible and need to consider which way should be applied according to the business scenario. Delayed scenarios are not allowed. Failfast is more reasonable than queues. However, if there is a certain tolerance for delays, queues are more reasonable than failfast.\r\n\r\n* remove * in import\r\n\r\n* add license to fix ci failure\r\n\r\n* rename the thread pool to EagerThreadPool\r\nmodify sth with the code review\r\nformat the code file\r\n\r\n* remove '*' in import statement\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* throw NullPointerException if the param is null.\r\n\r\n* catch throwable and decrease submitted task count anyway",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/9f48d8dbdd06e60faf84809a19a8c4e47733c38d",
        "bug_id": "dubbo-hessian-lite_8",
        "file": [
            {
                "sha": "eb4e1f3feb72f47634de8733efd434768dac7bf7",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java",
                "status": "added",
                "changes": 56,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPool.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import com.alibaba.dubbo.common.Constants;\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * EagerThreadPool\n+ * When the core threads are all in busy,\n+ * create new thread instead of putting task into blocking queue.\n+ */\n+public class EagerThreadPool implements ThreadPool {\n+\n+    @Override\n+    public Executor getExecutor(URL url) {\n+        String name = url.getParameter(Constants.THREAD_NAME_KEY, Constants.DEFAULT_THREAD_NAME);\n+        int cores = url.getParameter(Constants.CORE_THREADS_KEY, Constants.DEFAULT_CORE_THREADS);\n+        int threads = url.getParameter(Constants.THREADS_KEY, Integer.MAX_VALUE);\n+        int queues = url.getParameter(Constants.QUEUES_KEY, Constants.DEFAULT_QUEUES);\n+        int alive = url.getParameter(Constants.ALIVE_KEY, Constants.DEFAULT_ALIVE);\n+\n+        // init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues <= 0 ? 1 : queues);\n+        EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, url));\n+        taskQueue.setExecutor(executor);\n+        return executor;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "47f84c52794b9a352c406db6f91119dc98d82770",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java",
                "status": "added",
                "changes": 84,
                "additions": 84,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutor.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * EagerThreadPoolExecutor\n+ */\n+public class EagerThreadPoolExecutor extends ThreadPoolExecutor {\n+\n+    /**\n+     * task count\n+     */\n+    private final AtomicInteger submittedTaskCount = new AtomicInteger(0);\n+\n+    public EagerThreadPoolExecutor(int corePoolSize,\n+                                   int maximumPoolSize,\n+                                   long keepAliveTime,\n+                                   TimeUnit unit, TaskQueue<Runnable> workQueue,\n+                                   ThreadFactory threadFactory,\n+                                   RejectedExecutionHandler handler) {\n+        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n+    }\n+\n+    /**\n+     * @return current tasks which are executed\n+     */\n+    public int getSubmittedTaskCount() {\n+        return submittedTaskCount.get();\n+    }\n+\n+    @Override\n+    protected void afterExecute(Runnable r, Throwable t) {\n+        submittedTaskCount.decrementAndGet();\n+    }\n+\n+    @Override\n+    public void execute(Runnable command) {\n+        if (command == null) {\n+            throw new NullPointerException();\n+        }\n+        // do not increment in method beforeExecute!\n+        submittedTaskCount.incrementAndGet();\n+        try {\n+            super.execute(command);\n+        } catch (RejectedExecutionException rx) {\n+            // retry to offer the task into queue.\n+            final TaskQueue queue = (TaskQueue) super.getQueue();\n+            try {\n+                if (!queue.retryOffer(command, 0, TimeUnit.MILLISECONDS)) {\n+                    submittedTaskCount.decrementAndGet();\n+                    throw new RejectedExecutionException(\"Queue capacity is full.\");\n+                }\n+            } catch (InterruptedException x) {\n+                submittedTaskCount.decrementAndGet();\n+                throw new RejectedExecutionException(x);\n+            }\n+        } catch (Throwable t) {\n+            // decrease any way\n+            submittedTaskCount.decrementAndGet();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7e7d87051a9cd0962386968f8dfc30daa8f9c063",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java",
                "status": "added",
                "changes": 79,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * TaskQueue in the EagerThreadPoolExecutor\n+ * It offer a task if the executor's submittedTaskCount less than currentPoolThreadSize\n+ * or the currentPoolThreadSize more than executor's maximumPoolSize.\n+ * That can make the executor create new worker\n+ * when the task num is bigger than corePoolSize but less than maximumPoolSize.\n+ */\n+public class TaskQueue<R extends Runnable> extends LinkedBlockingQueue<Runnable> {\n+\n+    private static final long serialVersionUID = -2635853580887179627L;\n+\n+    private EagerThreadPoolExecutor executor;\n+\n+    public TaskQueue(int capacity) {\n+        super(capacity);\n+    }\n+\n+    public void setExecutor(EagerThreadPoolExecutor exec) {\n+        executor = exec;\n+    }\n+\n+    @Override\n+    public boolean offer(Runnable runnable) {\n+        if (executor == null) {\n+            throw new RejectedExecutionException(\"The task queue does not have executor!\");\n+        }\n+\n+        int currentPoolThreadSize = executor.getPoolSize();\n+        // have free worker. put task into queue to let the worker deal with task.\n+        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n+            return super.offer(runnable);\n+        }\n+\n+        // return false to let executor create new worker.\n+        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n+            return false;\n+        }\n+\n+        // currentPoolThreadSize >= max\n+        return super.offer(runnable);\n+    }\n+\n+    /**\n+     * retry offer task\n+     *\n+     * @param o task\n+     * @return offer success or not\n+     * @throws RejectedExecutionException if executor is terminated.\n+     */\n+    public boolean retryOffer(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {\n+        if (executor.isShutdown()) {\n+            throw new RejectedExecutionException(\"Executor is shutdown!\");\n+        }\n+        return super.offer(o, timeout, unit);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "8d87177b7415c8e2aa7d15514700d6cddb923f57",
                "filename": "dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/resources/META-INF/dubbo/internal/com.alibaba.dubbo.common.threadpool.ThreadPool?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -1,3 +1,4 @@\n fixed=com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\n cached=com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\n limited=com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\n+eager=com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool",
                "deletions": 0
            },
            {
                "sha": "a9aeca2c949474ebf35457dd8b1a14d71256308b",
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java",
                "status": "added",
                "changes": 93,
                "additions": 93,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/EagerThreadPoolExecutorTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -0,0 +1,93 @@\n+package com.alibaba.dubbo.common.threadpool.support.eager;\n+\n+\n+import com.alibaba.dubbo.common.URL;\n+import com.alibaba.dubbo.common.extension.ExtensionLoader;\n+import com.alibaba.dubbo.common.threadpool.ThreadPool;\n+import com.alibaba.dubbo.common.threadpool.support.AbortPolicyWithReport;\n+import com.alibaba.dubbo.common.utils.NamedThreadFactory;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EagerThreadPoolExecutorTest {\n+\n+    private static final URL URL = new URL(\"dubbo\", \"localhost\", 8080);\n+\n+    /**\n+     * It print like this:\n+     * thread number in current pool\uff1a1,  task number in task queue\uff1a0 executor size: 1\n+     * thread number in current pool\uff1a2,  task number in task queue\uff1a0 executor size: 2\n+     * thread number in current pool\uff1a3,  task number in task queue\uff1a0 executor size: 3\n+     * thread number in current pool\uff1a4,  task number in task queue\uff1a0 executor size: 4\n+     * thread number in current pool\uff1a5,  task number in task queue\uff1a0 executor size: 5\n+     * thread number in current pool\uff1a6,  task number in task queue\uff1a0 executor size: 6\n+     * thread number in current pool\uff1a7,  task number in task queue\uff1a0 executor size: 7\n+     * thread number in current pool\uff1a8,  task number in task queue\uff1a0 executor size: 8\n+     * thread number in current pool\uff1a9,  task number in task queue\uff1a0 executor size: 9\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a4 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a3 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a2 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a1 executor size: 10\n+     * thread number in current pool\uff1a10,  task number in task queue\uff1a0 executor size: 10\n+     * <p>\n+     * We can see , when the core threads are in busy,\n+     * the thread pool create thread (but thread nums always less than max) instead of put task into queue.\n+     */\n+    @Test\n+    public void testEagerThreadPool() throws Exception {\n+        String name = \"eager-tf\";\n+        int queues = 5;\n+        int cores = 5;\n+        int threads = 10;\n+        // alive 1 second\n+        long alive = 1000;\n+\n+        //init queue and executor\n+        TaskQueue<Runnable> taskQueue = new TaskQueue<Runnable>(queues);\n+        final EagerThreadPoolExecutor executor = new EagerThreadPoolExecutor(cores,\n+                threads,\n+                alive,\n+                TimeUnit.MILLISECONDS,\n+                taskQueue,\n+                new NamedThreadFactory(name, true),\n+                new AbortPolicyWithReport(name, URL));\n+        taskQueue.setExecutor(executor);\n+\n+        for (int i = 0; i < 15; i++) {\n+            Thread.sleep(50);\n+            executor.execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.out.println(\"thread number in current pool\uff1a\"\n+                            + executor.getPoolSize()\n+                            + \",  task number in task queue\uff1a\"\n+                            + executor.getQueue().size()\n+                            + \" executor size: \"\n+                            + executor.getPoolSize());\n+                    try {\n+                        Thread.sleep(1000);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            });\n+        }\n+        Thread.sleep(5000);\n+        // cores theads are all alive.\n+        Assert.assertTrue(\"more than cores threads alive!\", executor.getPoolSize() == cores);\n+    }\n+\n+    @Test\n+    public void testSPI() {\n+        ExecutorService executorService = (ExecutorService) ExtensionLoader\n+                .getExtensionLoader(ThreadPool.class)\n+                .getExtension(\"eager\")\n+                .getExecutor(URL);\n+        Assert.assertTrue(\"test spi fail!\",\n+                executorService.getClass().getSimpleName().equals(\"EagerThreadPoolExecutor\"));\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "8b11281ac5c8cbb2e7c3d8cee78097e6e3b94a3c",
                "filename": "dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/38f45eec3ad193a7b35ea0f9dfdce7cb30611705/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/test/java/com/alibaba/dubbo/common/utils/ConfigUtilsTest.java?ref=38f45eec3ad193a7b35ea0f9dfdce7cb30611705",
                "patch": "@@ -116,6 +116,7 @@ public void test_loadProperties_oneFile_notRootPath() throws Exception {\n         expected.put(\"fixed\", \"com.alibaba.dubbo.common.threadpool.support.fixed.FixedThreadPool\");\n         expected.put(\"cached\", \"com.alibaba.dubbo.common.threadpool.support.cached.CachedThreadPool\");\n         expected.put(\"limited\", \"com.alibaba.dubbo.common.threadpool.support.limited.LimitedThreadPool\");\n+        expected.put(\"eager\", \"com.alibaba.dubbo.common.threadpool.support.eager.EagerThreadPool\");\n \n         Assert.assertEquals(expected, p);\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "DUBBO-573 Version.getVersion\u51faNPE",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/a55c10d7c5a819c80f4252299ea49dd20feeeb47",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/85310c7d674e0f0f0951c9a605e6dda37d7c262e",
        "bug_id": "dubbo-hessian-lite_9",
        "file": [
            {
                "sha": "716426932e2b0c2a5b4a5721ec0157900ffc4756",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/a55c10d7c5a819c80f4252299ea49dd20feeeb47/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/a55c10d7c5a819c80f4252299ea49dd20feeeb47/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java",
                "status": "modified",
                "changes": 37,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/Version.java?ref=a55c10d7c5a819c80f4252299ea49dd20feeeb47",
                "patch": "@@ -16,6 +16,7 @@\n package com.alibaba.dubbo.common;\n \n import java.net.URL;\n+import java.security.CodeSource;\n import java.util.Enumeration;\n import java.util.HashSet;\n import java.util.Set;\n@@ -75,26 +76,32 @@ public static String getVersion(Class<?> cls, String defaultVersion) {\n             }\n             if (version == null || version.length() == 0) {\n                 // \u5982\u679c\u89c4\u8303\u4e2d\u6ca1\u6709\u7248\u672c\u53f7\uff0c\u57fa\u4e8ejar\u5305\u540d\u83b7\u53d6\u7248\u672c\u53f7\n-                String file = cls.getProtectionDomain().getCodeSource().getLocation().getFile();\n-                if (file != null && file.length() > 0 && file.endsWith(\".jar\")) {\n-                    file = file.substring(0, file.length() - 4);\n-                    int i = file.lastIndexOf('/');\n-                    if (i >= 0) {\n-                        file = file.substring(i + 1);\n-                    }\n-                    i = file.indexOf(\"-\");\n-                    if (i >= 0) {\n-                        file = file.substring(i + 1);\n-                    }\n-                    while (file.length() > 0 && ! Character.isDigit(file.charAt(0))) {\n+                CodeSource codeSource = cls.getProtectionDomain().getCodeSource();\n+                if(codeSource == null) {\n+                    logger.info(\"No codeSource for class \" + cls.getName() + \" when getVersion, use default version \" + defaultVersion);\n+                }\n+                else {\n+                    String file = codeSource.getLocation().getFile();\n+                    if (file != null && file.length() > 0 && file.endsWith(\".jar\")) {\n+                        file = file.substring(0, file.length() - 4);\n+                        int i = file.lastIndexOf('/');\n+                        if (i >= 0) {\n+                            file = file.substring(i + 1);\n+                        }\n                         i = file.indexOf(\"-\");\n                         if (i >= 0) {\n                             file = file.substring(i + 1);\n-                        } else {\n-                            break;\n                         }\n+                        while (file.length() > 0 && ! Character.isDigit(file.charAt(0))) {\n+                            i = file.indexOf(\"-\");\n+                            if (i >= 0) {\n+                                file = file.substring(i + 1);\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+                        version = file;\n                     }\n-                    version = file;\n                 }\n             }\n             // \u8fd4\u56de\u7248\u672c\u53f7\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de\u7f3a\u7701\u7248\u672c\u53f7",
                "deletions": 15
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "DUBBO-54 fix NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@982 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/49fbd32cd858759febfc166c20a2883a7d1b2df8",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/70cad53ff7a956b59bdfc44f2a80aa7979ee9c6f",
        "bug_id": "dubbo-hessian-lite_10",
        "file": [
            {
                "sha": "65f243e7e15725ab80f83e827eb8906a8f72f893",
                "filename": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/49fbd32cd858759febfc166c20a2883a7d1b2df8/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java?ref=49fbd32cd858759febfc166c20a2883a7d1b2df8",
                "patch": "@@ -104,7 +104,7 @@ public RegistryDirectory(Class<T> serviceType, URL url) {\n         this.serviceKey = url.getServiceKey();\r\n         this.queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(RpcConstants.REFER_KEY));\r\n         this.directoryUrl = url.removeParameter(RpcConstants.REFER_KEY).addParameters(queryMap);\r\n-        String group = directoryUrl.getParameter( Constants.GROUP_KEY );\r\n+        String group = directoryUrl.getParameter( Constants.GROUP_KEY, \"\" );\r\n         this.multiGroup = \"*\".equals(group) || group.contains( \",\" );\r\n     }\r\n \r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "DUBBO-48 accesslogFilter NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@234 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/bb3fe6d19bbc1703ab3b578da23da2d4d3790ac0",
        "bug_id": "dubbo-hessian-lite_11",
        "file": [
            {
                "sha": "a6ea17401b6ad835df3f7d987f55d51fefc09011",
                "filename": "dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/068a7d99e79b4ef3ff5d75342e2f847bd81f2c76/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-rpc/src/main/java/com/alibaba/dubbo/rpc/filter/AccessLogFilter.java?ref=068a7d99e79b4ef3ff5d75342e2f847bd81f2c76",
                "patch": "@@ -89,7 +89,7 @@ public void run() {\n                             Set<String> logSet = entry.getValue();\n                             File file = new File(accesslog);\n                             File dir = file.getParentFile();\n-                            if (! dir.exists()) {\n+                            if (null!=dir&&! dir.exists()) {\n                                 dir.mkdirs();\n                             }\n                             if (logger.isDebugEnabled()) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "\u6dfb\u52a0\u9057\u6f0f@Extension\uff0cfix UT NPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@1016 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/c9b576fbefb087636c7c786a255eec9415d45260",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/d367af90496db43658c46f06c525b3eeeaf39bac",
        "bug_id": "dubbo-hessian-lite_12",
        "file": [
            {
                "sha": "dd1cb5ad7a4026146c0e1dd2a391c9b6095409dd",
                "filename": "dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProxyFactory.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/c9b576fbefb087636c7c786a255eec9415d45260/dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProxyFactory.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/c9b576fbefb087636c7c786a255eec9415d45260/dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProxyFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-rpc-rmi/src/main/java/com/alibaba/dubbo/rpc/protocol/rmi/RmiProxyFactory.java?ref=c9b576fbefb087636c7c786a255eec9415d45260",
                "patch": "@@ -17,6 +17,7 @@\n \r\n import java.rmi.Remote;\r\n \r\n+import com.alibaba.dubbo.common.Extension;\r\n import com.alibaba.dubbo.common.URL;\r\n import com.alibaba.dubbo.rpc.Invoker;\r\n \r\n@@ -25,6 +26,7 @@\n  * \r\n  * @author william.liangf\r\n  */\r\n+@Extension\r\n public interface RmiProxyFactory {\r\n \r\n     <T> Remote getProxy(Invoker<T> invoker);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "\u6dfb\u52a0null\u5224\u65ad\uff0c\u907f\u514dNPE\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@260 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/b013e7bdf87bca5244b6602854ff7acf4820f4c4",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/6dbfb5c37e640a549e25a7b6fd2df9698bad5474",
        "bug_id": "dubbo-hessian-lite_13",
        "file": [
            {
                "sha": "f48005f0720bba68a7ccbb3c0bc219ee187e47aa",
                "filename": "dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/b013e7bdf87bca5244b6602854ff7acf4820f4c4/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-common/src/main/java/com/alibaba/dubbo/common/URL.java?ref=b013e7bdf87bca5244b6602854ff7acf4820f4c4",
                "patch": "@@ -880,7 +880,7 @@ public String toParameterString(String... parameters) {\n \t}\r\n \t\r\n \tprivate void buildParameters(StringBuilder buf, boolean concat, String[] parameters) {\r\n-\t    if (getParameters().size() > 0) {\r\n+\t    if (getParameters() !=null && getParameters().size() > 0) {\r\n             List<String> includes = (parameters == null || parameters.length == 0 ? null : Arrays.asList(parameters));\r\n             boolean first = true;\r\n             for (Map.Entry<String, String> entry : new TreeMap<String, String>(getParameters()).entrySet()) {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "DUBBO-11 NPE\u95ee\u9898\u89e3\u51b3.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@109 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/12673832b1bce1655e07e8dc97e10fa09f59f52c",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/1aa17bca4a4650fb2078bf8e090408ba182f5702",
        "bug_id": "dubbo-hessian-lite_14",
        "file": [
            {
                "sha": "2530f8935f62e3f5015b0e858195af263253a5e0",
                "filename": "dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/12673832b1bce1655e07e8dc97e10fa09f59f52c/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-rpc-default/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/filter/FutureFilter.java?ref=12673832b1bce1655e07e8dc97e10fa09f59f52c",
                "patch": "@@ -70,8 +70,17 @@ private void asyncCallback(final Invoker<?> invoker, final Invocation invocation\n         if (f instanceof FutureAdapter) {\r\n             ResponseFuture future = ((FutureAdapter<?>)f).getFuture();\r\n             future.setCallback(new ResponseCallback() {\r\n-                public void done(Object response) {\r\n-                    Result result = (Result) response;\r\n+                public void done(Object rpcResult) {\r\n+                    if (rpcResult == null){\r\n+                        logger.error(new IllegalStateException(\"invalid result value : null, expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    ///must be rpcResult\r\n+                    if (! (rpcResult instanceof Result)){\r\n+                        logger.error(new IllegalStateException(\"invalid result type :\" + rpcResult.getClass() + \", expected \"+Result.class.getName()));\r\n+                        return;\r\n+                    }\r\n+                    Result result = (Result) rpcResult;\r\n                     if (result.hasException()) {\r\n                         fireThrowCallback(invoker, invocation, result.getException());\r\n                     } else {\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "dubbo-hessian-lite",
        "message": "DUBBO-11 NPE\u95ee\u9898\u89e3\u51b3.\n\ngit-svn-id: http://code.alibabatech.com/svn/dubbo/trunk@108 1a56cb94-b969-4eaa-88fa-be21384802f2",
        "commit": "https://github.com/apache/dubbo-hessian-lite/commit/1aa17bca4a4650fb2078bf8e090408ba182f5702",
        "parent": "https://github.com/apache/dubbo-hessian-lite/commit/59b36ef7de9a4c7f5f3824fb6207a2bfde5d963b",
        "bug_id": "dubbo-hessian-lite_15",
        "file": [
            {
                "sha": "25e4e2d52e7d7bd437d3c337990cbb536bfec437",
                "filename": "dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "blob_url": "https://github.com/apache/dubbo-hessian-lite/blob/1aa17bca4a4650fb2078bf8e090408ba182f5702/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "raw_url": "https://github.com/apache/dubbo-hessian-lite/raw/1aa17bca4a4650fb2078bf8e090408ba182f5702/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java",
                "status": "modified",
                "changes": 98,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/dubbo-hessian-lite/contents/dubbo-remoting/src/main/java/com/alibaba/dubbo/remoting/exchange/support/DefaultFuture.java?ref=1aa17bca4a4650fb2078bf8e090408ba182f5702",
                "patch": "@@ -15,25 +15,25 @@\n  */\r\n package com.alibaba.dubbo.remoting.exchange.support;\n \n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.locks.Condition;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-import com.alibaba.dubbo.common.Constants;\n-import com.alibaba.dubbo.common.logger.Logger;\n-import com.alibaba.dubbo.common.logger.LoggerFactory;\n-import com.alibaba.dubbo.remoting.Channel;\n-import com.alibaba.dubbo.remoting.RemotingException;\n-import com.alibaba.dubbo.remoting.TimeoutException;\n-import com.alibaba.dubbo.remoting.exchange.ResponseCallback;\n-import com.alibaba.dubbo.remoting.exchange.ResponseFuture;\n-import com.alibaba.dubbo.remoting.exchange.Request;\n-import com.alibaba.dubbo.remoting.exchange.Response;\n+import java.text.SimpleDateFormat;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.locks.Condition;\r\n+import java.util.concurrent.locks.Lock;\r\n+import java.util.concurrent.locks.ReentrantLock;\r\n+\r\n+import com.alibaba.dubbo.common.Constants;\r\n+import com.alibaba.dubbo.common.logger.Logger;\r\n+import com.alibaba.dubbo.common.logger.LoggerFactory;\r\n+import com.alibaba.dubbo.remoting.Channel;\r\n+import com.alibaba.dubbo.remoting.RemotingException;\r\n+import com.alibaba.dubbo.remoting.TimeoutException;\r\n+import com.alibaba.dubbo.remoting.exchange.Request;\r\n+import com.alibaba.dubbo.remoting.exchange.Response;\r\n+import com.alibaba.dubbo.remoting.exchange.ResponseCallback;\r\n+import com.alibaba.dubbo.remoting.exchange.ResponseFuture;\r\n \n /**\n  * DefaultFuture.\n@@ -143,20 +143,53 @@ public void setCallback(ResponseCallback callback) {\n         }\n     }\r\n     private void invokeCallback(ResponseCallback c){\r\n-        if (c == null){\r\n+        ResponseCallback callbackCopy = c;\r\n+        if (callbackCopy == null){\r\n             throw new NullPointerException(\"callback cannot be null.\");\r\n         }\r\n-        ResponseCallback callbackCopy = c;\r\n         c = null;\r\n-        Object result = null;\r\n-        try {\r\n-            result = returnFromResponse();\r\n-        } catch (Throwable e) {\r\n-            callbackCopy.caught(e);\r\n+        Response res = response;\r\n+        if (res == null) {\r\n+            throw new IllegalStateException(\"response cannot be null. url:\"+channel.getUrl());\r\n+        }\r\n+        \r\n+        if (res.getStatus() == Response.OK) {\r\n+            try {\r\n+                callbackCopy.done(res.getResult());\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error .reasult:\" + res.getResult() + \",url:\" + channel.getUrl(), e);\r\n+            }\r\n+        } else if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\r\n+            try {\r\n+                TimeoutException te = new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\r\n+                callbackCopy.caught(te);\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error ,url:\" + channel.getUrl(), e);\r\n+            }\r\n+        } else {\r\n+            try {\r\n+                RuntimeException re = new RuntimeException(res.getErrorMessage());\r\n+                callbackCopy.caught(re);\r\n+            } catch (Exception e) {\r\n+                logger.error(\"callback invoke error ,url:\" + channel.getUrl(), e);\r\n+            }\r\n         }\r\n-        callbackCopy.done(result);\r\n     }\n \n+    private Object returnFromResponse() throws RemotingException {\r\n+        Response res = response;\r\n+        if (res == null) {\r\n+            throw new IllegalStateException(\"response cannot be null\");\r\n+        }\r\n+        if (res.getStatus() == Response.OK) {\r\n+            return res.getResult();\r\n+        }\r\n+        if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\r\n+            throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\r\n+        }\r\n+        throw new RemotingException(channel, res.getErrorMessage());\r\n+    }\r\n+\r\n     private long getId() {\n         return id;\n     }\n@@ -228,17 +261,6 @@ private void doReceived(Response res) {\n         }\n     }\n \n-    private Object returnFromResponse() throws RemotingException {\n-        Response res = response;\n-        if (res.getStatus() == Response.OK) {\n-            return response.getResult();\n-        }\n-        if (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) {\n-            throw new TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());\n-        }\n-        throw new RemotingException(channel, res.getErrorMessage());\n-    }\n-    \n     private String getTimeoutMessage(boolean scan) {\n         long nowTimestamp = System.currentTimeMillis();\n         return (sent > 0 ? \"Waiting server-side response timeout\" : \"Sending request timeout in client-side\")",
                "deletions": 38
            }
        ]
    }
]