[
    {
        "repo": "jackrabbit-oak",
        "commit": "https://github.com/apache/jackrabbit-oak/commit/e094b0d2c7a340a201a522a6d082f71315594ef4",
        "bug_id": "jackrabbit-oak_e094b0d",
        "message": "OAK-7078: NullPointerException in FilteredSortedSetDocValuesFacetCounts during query evaluation\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/trunk@1819048 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/jackrabbit-oak/commit/16af76e4ba5db12e52686c3579ec1a20124405f1",
        "patched_files": [
            "FilteredSortedSetDocValuesFacetCounts.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e094b0d2c7a340a201a522a6d082f71315594ef4/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/FilteredSortedSetDocValuesFacetCounts.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/FilteredSortedSetDocValuesFacetCounts.java?ref=e094b0d2c7a340a201a522a6d082f71315594ef4",
                "filename": "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/FilteredSortedSetDocValuesFacetCounts.java",
                "deletions": 0,
                "sha": "46ac345b87001bc64106ec4b0e5ecaf5e3a016ae",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e094b0d2c7a340a201a522a6d082f71315594ef4/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/FilteredSortedSetDocValuesFacetCounts.java",
                "patch": "@@ -60,6 +60,10 @@ public FilteredSortedSetDocValuesFacetCounts(DefaultSortedSetDocValuesReaderStat\n     public FacetResult getTopChildren(int topN, String dim, String... path) throws IOException {\n         FacetResult topChildren = super.getTopChildren(topN, dim, path);\n \n+        if (topChildren == null) {\n+            return null;\n+        }\n+\n         LabelAndValue[] labelAndValues = topChildren.labelValues;\n \n         for (ScoreDoc scoreDoc : docs.scoreDocs) {",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 31,
                "raw_url": "https://github.com/apache/jackrabbit-oak/raw/e094b0d2c7a340a201a522a6d082f71315594ef4/oak-lucene/src/test/java/org/apache/jackrabbit/oak/jcr/query/FacetTest.java",
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-oak/contents/oak-lucene/src/test/java/org/apache/jackrabbit/oak/jcr/query/FacetTest.java?ref=e094b0d2c7a340a201a522a6d082f71315594ef4",
                "filename": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/jcr/query/FacetTest.java",
                "deletions": 0,
                "sha": "63d01e0e5d092727c2d4c0c38c15bd5bf8b7c899",
                "blob_url": "https://github.com/apache/jackrabbit-oak/blob/e094b0d2c7a340a201a522a6d082f71315594ef4/oak-lucene/src/test/java/org/apache/jackrabbit/oak/jcr/query/FacetTest.java",
                "patch": "@@ -25,6 +25,8 @@\n import javax.jcr.query.Query;\n import javax.jcr.query.QueryManager;\n import javax.jcr.query.QueryResult;\n+import javax.jcr.query.RowIterator;\n+import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.jackrabbit.core.query.AbstractQueryTest;\n@@ -602,6 +604,35 @@ public void testFacetRetrievalNumberOfFacetsConfiguredLowerThanDefault() throws\n         assertEquals(7, facets.size());\n     }\n \n+    // OAK-7078\n+    public void testFacetsOfResultSetThatDoesntContainDim() throws Exception {\n+        Node content = testRootNode.addNode(\"absentDimFacets\");\n+\n+        // create a document with a simple/tags property\n+        Node foo = content.addNode(\"foo\");\n+        Node fooSimple = foo.addNode(\"jc\");\n+        foo.setProperty(\"text\", \"lorem lorem\");\n+        fooSimple.setProperty(\"text\", new String[]{\"tag1\", \"tag2\"});\n+        // now create a document without simple/tags property\n+        Node bar = content.addNode(\"bar\");\n+        bar.setProperty(\"text\", \"lorem ipsum\");\n+\n+        superuser.save();\n+\n+        String query = \"select [rep:facet(jc/text)] from [nt:base] where contains(*, 'ipsum')\";\n+\n+        Query q = qm.createQuery(query, Query.JCR_SQL2);\n+        QueryResult result = q.execute();\n+        FacetResult facetResult = new FacetResult(result);\n+        assertNotNull(facetResult);\n+        assertTrue(facetResult.getDimensions().isEmpty());\n+\n+        RowIterator rows = result.getRows();\n+        assertTrue(rows.hasNext());\n+        assertEquals(bar.getPath(), rows.nextRow().getPath());\n+        assertFalse(rows.hasNext());\n+    }\n+\n     private void markIndexForReindex() throws RepositoryException {\n         superuser.getNode(\"/oak:index/luceneGlobal\").setProperty(REINDEX_PROPERTY_NAME, true);\n     }",
                "changes": 31
            }
        ],
        "unit_tests": [
            "FacetTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "oak-lucene/src/test/java/org/apache/jackrabbit/oak/jcr/query/FacetTest.java",
        "buggy_files": [
            "oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/util/FilteredSortedSetDocValuesFacetCounts.java"
        ],
        "fixed": true
    }
]