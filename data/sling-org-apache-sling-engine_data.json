[
    {
        "repo": "sling-org-apache-sling-engine",
        "message": "SLING-4339 : NullPointerException at org.apache.sling.engine.impl.parameters.RequestParameterSupportConfigurer.getFileLocation(RequestParameterSupportConfigurer.java:132)\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1657190 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/713e428389aaa2c52f0ebc808600e5eab91b8864",
        "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/dae1c7776bf900bee4ecd807219670678c32f4fd",
        "bug_id": "sling-org-apache-sling-engine_1",
        "file": [
            {
                "sha": "e3e3054cea69ae88a00517bf63a171302973254d",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/pom.xml",
                "status": "modified",
                "changes": 9,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/pom.xml?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -104,15 +104,6 @@\n                 <extensions>true</extensions>\n                 <configuration>\n                     <instructions>\n-                        <Export-Package>\n-                            org.apache.sling.engine;version=2.2;provide:=true,\n-                            org.apache.sling.engine.servlets;version=2.0.6;provide:=true,\n-                            org.apache.sling.engine.jmx;version=1.0;provide:=true\n-                        </Export-Package>\n-                        <Private-Package>\n-                            org.apache.sling.engine.impl,\n-                            org.apache.sling.engine.impl.*\n-                        </Private-Package>\n                         <Import-Package>\n                             javax.servlet;javax.servlet.http;version=\"[2.3,4)\",\n                             javax.servlet.descriptor;version=\"[2.6,4)\";resolution:=optional,",
                "deletions": 9
            },
            {
                "sha": "3cd50b6f0bc1ca24ffc4083233c659d7de7ab05b",
                "filename": "src/main/java/org/apache/sling/engine/RequestLog.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/RequestLog.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/RequestLog.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/RequestLog.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.sling.engine;\n \n+import aQute.bnd.annotation.ConsumerType;\n+\n /**\n  * The <code>RequestLog</code> interface defines the API to be implemented by\n  * providers of destinations for request log information. To be able to any\n@@ -27,6 +29,7 @@\n  * @deprecated Use the request progress tracker instead.\n  */\n @Deprecated\n+@ConsumerType\n public interface RequestLog {\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "3797af1dff0594228012afecec810b3fd9ea271e",
                "filename": "src/main/java/org/apache/sling/engine/SlingRequestProcessor.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/SlingRequestProcessor.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/SlingRequestProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/SlingRequestProcessor.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -26,13 +26,16 @@\n \n import org.apache.sling.api.resource.ResourceResolver;\n \n+import aQute.bnd.annotation.ProviderType;\n+\n /**\n  * The <code>SlingRequestProcessor</code> interface defines the service which\n  * may be called to handle HTTP requests.\n  * <p>\n  * This interface is implemented by this bundle and is not intended to be\n  * implemented by bundles other than this.\n  */\n+@ProviderType\n public interface SlingRequestProcessor {\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "35fed68732d7460ebad291efd8bf71e54cb7c80f",
                "filename": "src/main/java/org/apache/sling/engine/SlingSettingsService.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/SlingSettingsService.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/SlingSettingsService.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/SlingSettingsService.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -18,11 +18,14 @@\n  */\n package org.apache.sling.engine;\n \n+import aQute.bnd.annotation.ProviderType;\n+\n /**\n  * The <code>SlingSettingsService</code> provides basic Sling settings.\n  * @deprecated Use the {@link org.apache.sling.settings.SlingSettingsService}\n  */\n @Deprecated\n+@ProviderType\n public interface SlingSettingsService {\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "f62120ce57b16731a5ba6bdd6db05cdd83db0887",
                "filename": "src/main/java/org/apache/sling/engine/impl/parameters/RequestParameterSupportConfigurer.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/impl/parameters/RequestParameterSupportConfigurer.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/impl/parameters/RequestParameterSupportConfigurer.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/parameters/RequestParameterSupportConfigurer.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -26,8 +26,6 @@\n import org.apache.felix.scr.annotations.Deactivate;\n import org.apache.felix.scr.annotations.Property;\n import org.apache.felix.scr.annotations.Reference;\n-import org.apache.felix.scr.annotations.ReferencePolicy;\n-import org.apache.felix.scr.annotations.ReferenceStrategy;\n import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.apache.sling.settings.SlingSettingsService;\n import org.osgi.service.component.ComponentContext;\n@@ -39,11 +37,6 @@\n         name = RequestParameterSupportConfigurer.PID,\n         label = \"Apache Sling Request Parameter Handling\",\n         description = \"Configures Sling's request parameter handling.\")\n-@Reference(\n-        name = \"SlingSetting\",\n-        referenceInterface = SlingSettingsService.class,\n-        policy = ReferencePolicy.DYNAMIC,\n-        strategy = ReferenceStrategy.LOOKUP)\n public class RequestParameterSupportConfigurer {\n \n     static final String PID = \"org.apache.sling.engine.parameters\";\n@@ -96,6 +89,9 @@\n             description = \"The maximum size allowed for multipart/form-data requests. The default is -1, which means unlimited.\")\n     private static final String PROP_MAX_REQUEST_SIZE = \"request.max\";\n \n+    @Reference\n+    private SlingSettingsService settignsService;\n+\n     @Activate\n     @Deactivate\n     private void configure(ComponentContext context) {\n@@ -128,8 +124,7 @@ private String getFileLocation(final ComponentContext context, String fileLocati\n         if (fileLocation != null) {\n             File file = new File(fileLocation);\n             if (!file.isAbsolute()) {\n-                final SlingSettingsService settings = (SlingSettingsService) context.locateService(\"SlingSettings\");\n-                file = new File(settings.getSlingHomePath(), fileLocation);\n+                file = new File(this.settignsService.getSlingHomePath(), fileLocation);\n                 fileLocation = file.getAbsolutePath();\n             }\n             if (file.exists()) {",
                "deletions": 9
            },
            {
                "sha": "18b1d88dcd5ae9bf037b11f73a534bb7da7f5eb4",
                "filename": "src/main/java/org/apache/sling/engine/jmx/RequestProcessorMBean.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/jmx/RequestProcessorMBean.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/jmx/RequestProcessorMBean.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/jmx/RequestProcessorMBean.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -16,9 +16,12 @@\n  */\n package org.apache.sling.engine.jmx;\n \n+import aQute.bnd.annotation.ProviderType;\n+\n /**\n  * This is the management interface for the SlingRequestProcessor.\n  */\n+@ProviderType\n public interface RequestProcessorMBean {\n \n     /**\n@@ -96,7 +99,7 @@\n      * @see #resetStatistics()\n      */\n     double getStandardDeviationPeakRecursionDepth();\n-    \n+\n     /**\n      * Returns the maximum servlet call count since last\n      * resetting the statistics.\n@@ -105,15 +108,15 @@\n      */\n     int getMaxServletCallCount();\n \n-    \n+\n     /**\n      * Returns the minimum servlet call count since last\n      * resetting the statistics.\n      *\n      * @see #resetStatistics()\n      */\n     int getMinServletCallCount();\n-    \n+\n     /**\n      * Returns the mean servlet call count since last\n      * resetting the statistics.",
                "deletions": 3
            },
            {
                "sha": "715071e3b083559335bc61031775d4d29d260eed",
                "filename": "src/main/java/org/apache/sling/engine/jmx/package-info.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/jmx/package-info.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/jmx/package-info.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/jmx/package-info.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+@Version(\"1.0.2\")\n+package org.apache.sling.engine.jmx;\n+\n+import aQute.bnd.annotation.Version;\n+",
                "deletions": 0
            },
            {
                "sha": "0f533fc02cedf8f6cdd60948735e1e0e3b258066",
                "filename": "src/main/java/org/apache/sling/engine/package-info.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/package-info.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/package-info.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/package-info.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+@Version(\"2.2\")\n+package org.apache.sling.engine;\n+\n+import aQute.bnd.annotation.Version;\n+",
                "deletions": 0
            },
            {
                "sha": "552a35151e52c77f6272333ed62ca76c43bca3fd",
                "filename": "src/main/java/org/apache/sling/engine/servlets/ErrorHandler.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/servlets/ErrorHandler.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/servlets/ErrorHandler.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/servlets/ErrorHandler.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -23,11 +23,14 @@\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.SlingHttpServletResponse;\n \n+import aQute.bnd.annotation.ConsumerType;\n+\n /**\n  * The <code>ErrorHandler</code> defines the interface of the service used by\n  * the Sling to handle calls to <code>HttpServletResponse.sendError</code> and\n  * to handle uncaught <code>Throwable</code>s.\n  */\n+@ConsumerType\n public interface ErrorHandler {\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "05864a4f77acce0cffee4d0a840f808e1bf2702a",
                "filename": "src/main/java/org/apache/sling/engine/servlets/package-info.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/servlets/package-info.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/713e428389aaa2c52f0ebc808600e5eab91b8864/src/main/java/org/apache/sling/engine/servlets/package-info.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/servlets/package-info.java?ref=713e428389aaa2c52f0ebc808600e5eab91b8864",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+@Version(\"2.0.8\")\n+package org.apache.sling.engine.servlets;\n+\n+import aQute.bnd.annotation.Version;\n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "sling-org-apache-sling-engine",
        "message": "SLING-2307 Prevent NullPointerException when called before the ContentData is setup like for example when handling request processing start in the RequestLogger.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1207950 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/1285ddb2d23f1e96a8c9292f773e87417d449d6e",
        "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/a9b570b5799065409dbd84ee46e2f62faec391ad",
        "bug_id": "sling-org-apache-sling-engine_2",
        "file": [
            {
                "sha": "b84b96a88d4fd6958d2686c48f8b505f42532645",
                "filename": "src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/1285ddb2d23f1e96a8c9292f773e87417d449d6e/src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/1285ddb2d23f1e96a8c9292f773e87417d449d6e/src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/SlingHttpServletRequestImpl.java?ref=1285ddb2d23f1e96a8c9292f773e87417d449d6e",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.engine.impl.helper.NullResourceBundle;\n import org.apache.sling.engine.impl.parameters.ParameterSupport;\n+import org.apache.sling.engine.impl.request.ContentData;\n import org.apache.sling.engine.impl.request.RequestData;\n import org.apache.sling.engine.impl.request.SlingRequestDispatcher;\n import org.osgi.service.http.HttpContext;\n@@ -95,7 +96,8 @@ ParameterSupport getParameterSupport() {\n     }\n \n     public Resource getResource() {\n-        return getRequestData().getContentData().getResource();\n+        final ContentData cd = getRequestData().getContentData();\n+        return (cd == null) ? null : cd.getResource();\n     }\n \n     public ResourceResolver getResourceResolver() {\n@@ -206,7 +208,8 @@ public Cookie getCookie(String name) {\n      * @see org.apache.sling.api.SlingHttpServletRequest#getRequestPathInfo()\n      */\n     public RequestPathInfo getRequestPathInfo() {\n-        return getRequestData().getContentData().getRequestPathInfo();\n+        final ContentData cd = getRequestData().getContentData();\n+        return (cd == null) ? null : cd.getRequestPathInfo();\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "sling-org-apache-sling-engine",
        "message": "SLING-1217 Apply patch supplied by Marc Speck (thanks alot) preventing NPE when disablig loggers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@886104 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/0f364203ccfa6c76bd3edaca6c5b66715816435a",
        "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/685c5fa6c70ef71c7051c7351729085dcb95e59a",
        "bug_id": "sling-org-apache-sling-engine_3",
        "file": [
            {
                "sha": "2131dde526e73c2c7139e07e883c1e88d524d970",
                "filename": "src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/0f364203ccfa6c76bd3edaca6c5b66715816435a/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/0f364203ccfa6c76bd3edaca6c5b66715816435a/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java?ref=0f364203ccfa6c76bd3edaca6c5b66715816435a",
                "patch": "@@ -194,6 +194,9 @@ protected void activate(\n                 REQUEST_LOG_ENTRY_FORMAT, requestLogName, requestLogType);\n             this.requestLogExit = this.createRequestLoggerService(bundleContext, false,\n                 REQUEST_LOG_EXIT_FORMAT, requestLogName, requestLogType);\n+            \n+            this.bindRequestLoggerService(this.requestLogEntry);\n+            this.bindRequestLoggerService(this.requestLogExit);\n         }\n \n         // prepare the access logger if a name is configured and the\n@@ -207,12 +210,9 @@ protected void activate(\n \n             this.accessLog = this.createRequestLoggerService(bundleContext, false,\n                 ACCESS_LOG_FORMAT, accessLogName, accessLogType);\n-        }\n \n-        // finally have the loggers added to the respective lists for later use\n-        this.bindRequestLoggerService(this.requestLogEntry);\n-        this.bindRequestLoggerService(this.requestLogExit);\n-        this.bindRequestLoggerService(this.accessLog);\n+            this.bindRequestLoggerService(this.accessLog);\n+        }\n     }\n \n     /**",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "sling-org-apache-sling-engine",
        "message": "SLING-868 : Prevent NPE if no authentication handlers can be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/sling/trunk@766012 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/dbd2a245dee3228392345905b128ccb3da99448b",
        "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/0e25dc1e82a88e999d6172767176942e454ae29e",
        "bug_id": "sling-org-apache-sling-engine_4",
        "file": [
            {
                "sha": "879cefd113f93f4aa2d493660535e957bf0d9007",
                "filename": "src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/dbd2a245dee3228392345905b128ccb3da99448b/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/dbd2a245dee3228392345905b128ccb3da99448b/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java",
                "status": "modified",
                "changes": 74,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java?ref=dbd2a245dee3228392345905b128ccb3da99448b",
                "patch": "@@ -334,62 +334,64 @@ private Repository getRepository() throws MissingRepositoryException {\n \n     private static Map<String,Map<String, AuthenticationHandlerInfo[]>> EMPTY_PROTOCOL_MAP = new HashMap<String, Map<String,AuthenticationHandlerInfo[]>>();\n     private static AuthenticationHandlerInfo[] EMPTY_INFO = new AuthenticationHandlerInfo[0];\n-    \n+\n     private AuthenticationHandlerInfo[] findApplicableAuthenticationHandlers(HttpServletRequest request) {\n          Map<String, Map<String, AuthenticationHandlerInfo[]>> byProtocolMap = getAuthenticationHandlers();\n-         \n+\n          Map<String, AuthenticationHandlerInfo[]> byHostMap = byProtocolMap.get(request.getScheme());\n-         if(byHostMap == null) {\n+         if (byHostMap == null) {\n             byHostMap = byProtocolMap.get(\"\");\n          }\n-         \n-         String hostname = request.getServerName() + \n+\n+         String hostname = request.getServerName() +\n             (request.getServerPort() != 80 && request.getServerPort() != 443 ? \":\" + request.getServerPort() : \"\");\n-         \n-         AuthenticationHandlerInfo[] infos = byHostMap.get(hostname);\n-         if(infos == null) {\n-             infos = byHostMap.get(\"\");\n-         }\n-         \n-         if(infos != null) {\n-             return infos;\n+\n+         AuthenticationHandlerInfo[] infos = null;\n+         if ( byHostMap != null ) {\n+             infos = byHostMap.get(hostname);\n+             if (infos == null) {\n+                 infos = byHostMap.get(\"\");\n+             }\n+             if (infos != null) {\n+                 return infos;\n+             }\n          }\n-         \n+\n          return EMPTY_INFO;\n     }\n-    \n+\n     private Map<String, Map<String, AuthenticationHandlerInfo[]>> getAuthenticationHandlers() {\n         if (authHandlerCache == null\n             || authHandlerTrackerCount < authHandlerTracker.getTrackingCount()) {\n             final ServiceReference[] services = authHandlerTracker.getServiceReferences();\n             if ( services == null || services.length == 0 ) {\n                 this.authHandlerCache = EMPTY_PROTOCOL_MAP;\n             } else {\n-                final Map<String, Map<String, List<AuthenticationHandlerInfo>>> byProtocolMap = new HashMap<String, Map<String,List<AuthenticationHandlerInfo>>>(); \n+                final Map<String, Map<String, List<AuthenticationHandlerInfo>>> byProtocolMap = new HashMap<String, Map<String,List<AuthenticationHandlerInfo>>>();\n                 int regPathCount = 0;\n-                \n+\n                 for (int i = 0; i < services.length; i++) {\n                     final String paths[] = OsgiUtil.toStringArray(services[i].getProperty(AuthenticationHandler.PATH_PROPERTY));\n-                    \n+\n                     if ( paths != null && paths.length > 0 ) {\n                         final AuthenticationHandler handler = (AuthenticationHandler) authHandlerTracker.getService(services[i]);\n-                        \n+\n                         for(int m = 0; m < paths.length; m++) {\n                             if ( paths[m] != null && paths[m].length() > 0 ) {\n                                 String path = paths[m];\n                                 String host = \"\";\n                                 String protocol = \"\";\n-                                \n+\n                                 if(path.startsWith(\"http://\") || path.startsWith(\"https://\")) {\n                                     int idxProtocolEnd = path.indexOf(\"://\");\n                                     protocol = path.substring(0,idxProtocolEnd);\n                                     path = path.substring(idxProtocolEnd + 1);\n                                 }\n-                                \n+\n                                 if (path.startsWith(\"//\")) {\n                                     int idxHostEnd = path.indexOf(\"/\",2);\n                                     idxHostEnd = idxHostEnd == -1 ? path.length() : idxHostEnd;\n-                                    \n+\n                                     if(path.length() > 2) {\n                                         host = path.substring(2,idxHostEnd);\n                                         if(idxHostEnd < path.length()) {\n@@ -400,22 +402,22 @@ private Repository getRepository() throws MissingRepositoryException {\n                                     } else {\n                                         path=\"/\";\n                                     }\n-                                } \n-                                \n+                                }\n+\n                                 AuthenticationHandlerInfo newInfo = new AuthenticationHandlerInfo(path, host, protocol, handler);\n-                                \n+\n                                 Map<String, List<AuthenticationHandlerInfo>> byHostMap = byProtocolMap.get(protocol);\n                                 if(byHostMap == null) {\n                                     byHostMap = new HashMap<String, List<AuthenticationHandlerInfo>>();\n                                     byProtocolMap.put(protocol, byHostMap);\n                                 }\n-                                \n+\n                                 List<AuthenticationHandlerInfo> byPathList = byHostMap.get(host);\n                                 if(byPathList == null) {\n                                     byPathList = new ArrayList<AuthenticationHandlerInfo>();\n                                     byHostMap.put(host, byPathList);\n                                 }\n-                                \n+\n                                 byPathList.add(newInfo);\n                                 regPathCount++;\n                             }\n@@ -426,24 +428,24 @@ private Repository getRepository() throws MissingRepositoryException {\n                     authHandlerCache = EMPTY_PROTOCOL_MAP;\n                 } else {\n                     authHandlerCache = new HashMap<String, Map<String,AuthenticationHandlerInfo[]>>();\n-                    \n+\n                     for(Map.Entry<String, Map<String,List<AuthenticationHandlerInfo>>> protocolEntry : byProtocolMap.entrySet()) {\n                         Map<String,List<AuthenticationHandlerInfo>> hostMap = protocolEntry.getValue();\n-                        \n+\n                         Map<String, AuthenticationHandlerInfo[]> finalHostMap = authHandlerCache.get(protocolEntry.getKey());\n                         if(finalHostMap == null) {\n                             finalHostMap = new HashMap<String, AuthenticationHandlerInfo[]>();\n                             authHandlerCache.put(protocolEntry.getKey(), finalHostMap);\n                         }\n-                        \n+\n                         for(Map.Entry<String,List<AuthenticationHandlerInfo>> hostEntry : hostMap.entrySet()) {\n                             List<AuthenticationHandlerInfo> pathList = hostEntry.getValue();\n-                            \n+\n                             Collections.sort(pathList, AuthenticationHandlerInfoComparator.SINGLETON);\n-                            \n-                            final AuthenticationHandlerInfo[] authInfos = \n+\n+                            final AuthenticationHandlerInfo[] authInfos =\n                                 pathList.toArray(new AuthenticationHandlerInfo[pathList.size()]);\n-                            \n+\n                             finalHostMap.put(hostEntry.getKey(), authInfos);\n                         }\n                     }\n@@ -464,7 +466,7 @@ private AuthenticationInfo getAuthenticationInfo(\n         if (pathInfo == null || pathInfo.length() == 0) {\n             pathInfo = \"/\";\n         }\n-        \n+\n         AuthenticationHandlerInfo[] local = findApplicableAuthenticationHandlers(request);\n         for (int i = 0; i < local.length; i++) {\n             if ( pathInfo.startsWith(local[i].path) ) {\n@@ -475,7 +477,7 @@ private AuthenticationInfo getAuthenticationInfo(\n                 }\n             }\n         }\n-        \n+\n         // no handler found for the request ....\n         log.debug(\"getCredentials: no handler could extract credentials\");\n         return null;",
                "deletions": 36
            }
        ]
    }
]