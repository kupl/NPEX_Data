[{"commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/0f364203ccfa6c76bd3edaca6c5b66715816435a", "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/685c5fa6c70ef71c7051c7351729085dcb95e59a", "message": "SLING-1217 Apply patch supplied by Marc Speck (thanks alot) preventing NPE when disablig loggers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@886104 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-engine_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/0f364203ccfa6c76bd3edaca6c5b66715816435a/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/0f364203ccfa6c76bd3edaca6c5b66715816435a/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java", "sha": "2131dde526e73c2c7139e07e883c1e88d524d970", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java?ref=0f364203ccfa6c76bd3edaca6c5b66715816435a", "patch": "@@ -194,6 +194,9 @@ protected void activate(\n                 REQUEST_LOG_ENTRY_FORMAT, requestLogName, requestLogType);\n             this.requestLogExit = this.createRequestLoggerService(bundleContext, false,\n                 REQUEST_LOG_EXIT_FORMAT, requestLogName, requestLogType);\n+            \n+            this.bindRequestLoggerService(this.requestLogEntry);\n+            this.bindRequestLoggerService(this.requestLogExit);\n         }\n \n         // prepare the access logger if a name is configured and the\n@@ -207,12 +210,9 @@ protected void activate(\n \n             this.accessLog = this.createRequestLoggerService(bundleContext, false,\n                 ACCESS_LOG_FORMAT, accessLogName, accessLogType);\n-        }\n \n-        // finally have the loggers added to the respective lists for later use\n-        this.bindRequestLoggerService(this.requestLogEntry);\n-        this.bindRequestLoggerService(this.requestLogExit);\n-        this.bindRequestLoggerService(this.accessLog);\n+            this.bindRequestLoggerService(this.accessLog);\n+        }\n     }\n \n     /**", "filename": "src/main/java/org/apache/sling/engine/impl/log/RequestLogger.java"}], "repo": "sling-org-apache-sling-engine"}, {"commit": "https://github.com/apache/sling-org-apache-sling-engine/commit/dbd2a245dee3228392345905b128ccb3da99448b", "parent": "https://github.com/apache/sling-org-apache-sling-engine/commit/0e25dc1e82a88e999d6172767176942e454ae29e", "message": "SLING-868 : Prevent NPE if no authentication handlers can be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/sling/trunk@766012 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-engine_2", "file": [{"additions": 38, "raw_url": "https://github.com/apache/sling-org-apache-sling-engine/raw/dbd2a245dee3228392345905b128ccb3da99448b/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-engine/blob/dbd2a245dee3228392345905b128ccb3da99448b/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java", "sha": "879cefd113f93f4aa2d493660535e957bf0d9007", "changes": 74, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-engine/contents/src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java?ref=dbd2a245dee3228392345905b128ccb3da99448b", "patch": "@@ -334,62 +334,64 @@ private Repository getRepository() throws MissingRepositoryException {\n \n     private static Map<String,Map<String, AuthenticationHandlerInfo[]>> EMPTY_PROTOCOL_MAP = new HashMap<String, Map<String,AuthenticationHandlerInfo[]>>();\n     private static AuthenticationHandlerInfo[] EMPTY_INFO = new AuthenticationHandlerInfo[0];\n-    \n+\n     private AuthenticationHandlerInfo[] findApplicableAuthenticationHandlers(HttpServletRequest request) {\n          Map<String, Map<String, AuthenticationHandlerInfo[]>> byProtocolMap = getAuthenticationHandlers();\n-         \n+\n          Map<String, AuthenticationHandlerInfo[]> byHostMap = byProtocolMap.get(request.getScheme());\n-         if(byHostMap == null) {\n+         if (byHostMap == null) {\n             byHostMap = byProtocolMap.get(\"\");\n          }\n-         \n-         String hostname = request.getServerName() + \n+\n+         String hostname = request.getServerName() +\n             (request.getServerPort() != 80 && request.getServerPort() != 443 ? \":\" + request.getServerPort() : \"\");\n-         \n-         AuthenticationHandlerInfo[] infos = byHostMap.get(hostname);\n-         if(infos == null) {\n-             infos = byHostMap.get(\"\");\n-         }\n-         \n-         if(infos != null) {\n-             return infos;\n+\n+         AuthenticationHandlerInfo[] infos = null;\n+         if ( byHostMap != null ) {\n+             infos = byHostMap.get(hostname);\n+             if (infos == null) {\n+                 infos = byHostMap.get(\"\");\n+             }\n+             if (infos != null) {\n+                 return infos;\n+             }\n          }\n-         \n+\n          return EMPTY_INFO;\n     }\n-    \n+\n     private Map<String, Map<String, AuthenticationHandlerInfo[]>> getAuthenticationHandlers() {\n         if (authHandlerCache == null\n             || authHandlerTrackerCount < authHandlerTracker.getTrackingCount()) {\n             final ServiceReference[] services = authHandlerTracker.getServiceReferences();\n             if ( services == null || services.length == 0 ) {\n                 this.authHandlerCache = EMPTY_PROTOCOL_MAP;\n             } else {\n-                final Map<String, Map<String, List<AuthenticationHandlerInfo>>> byProtocolMap = new HashMap<String, Map<String,List<AuthenticationHandlerInfo>>>(); \n+                final Map<String, Map<String, List<AuthenticationHandlerInfo>>> byProtocolMap = new HashMap<String, Map<String,List<AuthenticationHandlerInfo>>>();\n                 int regPathCount = 0;\n-                \n+\n                 for (int i = 0; i < services.length; i++) {\n                     final String paths[] = OsgiUtil.toStringArray(services[i].getProperty(AuthenticationHandler.PATH_PROPERTY));\n-                    \n+\n                     if ( paths != null && paths.length > 0 ) {\n                         final AuthenticationHandler handler = (AuthenticationHandler) authHandlerTracker.getService(services[i]);\n-                        \n+\n                         for(int m = 0; m < paths.length; m++) {\n                             if ( paths[m] != null && paths[m].length() > 0 ) {\n                                 String path = paths[m];\n                                 String host = \"\";\n                                 String protocol = \"\";\n-                                \n+\n                                 if(path.startsWith(\"http://\") || path.startsWith(\"https://\")) {\n                                     int idxProtocolEnd = path.indexOf(\"://\");\n                                     protocol = path.substring(0,idxProtocolEnd);\n                                     path = path.substring(idxProtocolEnd + 1);\n                                 }\n-                                \n+\n                                 if (path.startsWith(\"//\")) {\n                                     int idxHostEnd = path.indexOf(\"/\",2);\n                                     idxHostEnd = idxHostEnd == -1 ? path.length() : idxHostEnd;\n-                                    \n+\n                                     if(path.length() > 2) {\n                                         host = path.substring(2,idxHostEnd);\n                                         if(idxHostEnd < path.length()) {\n@@ -400,22 +402,22 @@ private Repository getRepository() throws MissingRepositoryException {\n                                     } else {\n                                         path=\"/\";\n                                     }\n-                                } \n-                                \n+                                }\n+\n                                 AuthenticationHandlerInfo newInfo = new AuthenticationHandlerInfo(path, host, protocol, handler);\n-                                \n+\n                                 Map<String, List<AuthenticationHandlerInfo>> byHostMap = byProtocolMap.get(protocol);\n                                 if(byHostMap == null) {\n                                     byHostMap = new HashMap<String, List<AuthenticationHandlerInfo>>();\n                                     byProtocolMap.put(protocol, byHostMap);\n                                 }\n-                                \n+\n                                 List<AuthenticationHandlerInfo> byPathList = byHostMap.get(host);\n                                 if(byPathList == null) {\n                                     byPathList = new ArrayList<AuthenticationHandlerInfo>();\n                                     byHostMap.put(host, byPathList);\n                                 }\n-                                \n+\n                                 byPathList.add(newInfo);\n                                 regPathCount++;\n                             }\n@@ -426,24 +428,24 @@ private Repository getRepository() throws MissingRepositoryException {\n                     authHandlerCache = EMPTY_PROTOCOL_MAP;\n                 } else {\n                     authHandlerCache = new HashMap<String, Map<String,AuthenticationHandlerInfo[]>>();\n-                    \n+\n                     for(Map.Entry<String, Map<String,List<AuthenticationHandlerInfo>>> protocolEntry : byProtocolMap.entrySet()) {\n                         Map<String,List<AuthenticationHandlerInfo>> hostMap = protocolEntry.getValue();\n-                        \n+\n                         Map<String, AuthenticationHandlerInfo[]> finalHostMap = authHandlerCache.get(protocolEntry.getKey());\n                         if(finalHostMap == null) {\n                             finalHostMap = new HashMap<String, AuthenticationHandlerInfo[]>();\n                             authHandlerCache.put(protocolEntry.getKey(), finalHostMap);\n                         }\n-                        \n+\n                         for(Map.Entry<String,List<AuthenticationHandlerInfo>> hostEntry : hostMap.entrySet()) {\n                             List<AuthenticationHandlerInfo> pathList = hostEntry.getValue();\n-                            \n+\n                             Collections.sort(pathList, AuthenticationHandlerInfoComparator.SINGLETON);\n-                            \n-                            final AuthenticationHandlerInfo[] authInfos = \n+\n+                            final AuthenticationHandlerInfo[] authInfos =\n                                 pathList.toArray(new AuthenticationHandlerInfo[pathList.size()]);\n-                            \n+\n                             finalHostMap.put(hostEntry.getKey(), authInfos);\n                         }\n                     }\n@@ -464,7 +466,7 @@ private AuthenticationInfo getAuthenticationInfo(\n         if (pathInfo == null || pathInfo.length() == 0) {\n             pathInfo = \"/\";\n         }\n-        \n+\n         AuthenticationHandlerInfo[] local = findApplicableAuthenticationHandlers(request);\n         for (int i = 0; i < local.length; i++) {\n             if ( pathInfo.startsWith(local[i].path) ) {\n@@ -475,7 +477,7 @@ private AuthenticationInfo getAuthenticationInfo(\n                 }\n             }\n         }\n-        \n+\n         // no handler found for the request ....\n         log.debug(\"getCredentials: no handler could extract credentials\");\n         return null;", "filename": "src/main/java/org/apache/sling/engine/impl/auth/SlingAuthenticator.java"}], "repo": "sling-org-apache-sling-engine"}]
