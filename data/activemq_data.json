[
    {
        "parent": "https://github.com/apache/activemq/commit/bf3a9f44f625ef26e3c687be92e73ee1e9288d6f",
        "bug_id": "activemq_1",
        "file": [
            {
                "additions": 1,
                "sha": "ba1a0c2f5c29b63caf0e995eb2829d057e9cd681",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "deletions": 0,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82",
                "patch": "@@ -808,6 +808,7 @@ public void run() {\n                                 if (!isPermissableDestination(message.getDestination(), true)) {\n                                     return;\n                                 }\n+                                safeWaitUntilStarted();\n                                 // message being forwarded - we need to\n                                 // propagate the response to our local send\n                                 if (canDuplexDispatch(message)) {",
                "changes": 1,
                "blob_url": "https://github.com/apache/activemq/blob/7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java"
            },
            {
                "additions": 155,
                "sha": "48c20ec2d8ccb038685b908f3ca886508b047173",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82/activemq-unit-tests/src/test/java/org/apache/activemq/network/DuplexStartNpeTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/network/DuplexStartNpeTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/network/DuplexStartNpeTest.java?ref=7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82",
                "patch": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.network;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.broker.BrokerPlugin;\n+import org.apache.activemq.broker.BrokerPluginSupport;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.ConnectionContext;\n+import org.apache.activemq.command.ActiveMQDestination;\n+import org.apache.activemq.command.ActiveMQQueue;\n+import org.apache.activemq.command.ActiveMQTextMessage;\n+import org.apache.activemq.command.ConnectionInfo;\n+import org.apache.activemq.util.TestUtils;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.jms.Connection;\n+import javax.jms.JMSException;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import static junit.framework.TestCase.assertNotNull;\n+\n+public class DuplexStartNpeTest {\n+    private static final Logger LOG = LoggerFactory.getLogger(DuplexStartNpeTest.class);\n+    final ActiveMQQueue dest = new ActiveMQQueue(\"QQ\");\n+    final List<BrokerService> brokerServices = new ArrayList<>();\n+    final List<Connection> connections = new ArrayList();\n+    final static String urlString = \"tcp://localhost:\" + TestUtils.findOpenPort();\n+    final static int NUM_MESSAGES = 10;\n+\n+    @Test\n+    public void reproduceNpe() throws Exception {\n+        BrokerService broker0 = createBroker();\n+\n+        NetworkConnector networkConnector = broker0.addNetworkConnector(\"masterslave:(\" + urlString + \",\" + urlString + \")\");\n+        networkConnector.setDuplex(true);\n+        networkConnector.setStaticBridge(true);\n+\n+        // ensure there is demand on start\n+        networkConnector.setStaticallyIncludedDestinations(Arrays.<ActiveMQDestination>asList(new ActiveMQQueue[]{dest}));\n+\n+\n+        broker0.start();\n+\n+        publish(broker0.getVmConnectorURI());\n+\n+\n+        BrokerService broker1 = createBroker();\n+        broker1.addConnector(urlString);\n+\n+        broker1.setPlugins(new BrokerPlugin[] {\n+                new BrokerPluginSupport() {\n+                    @Override\n+                    public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {\n+                        super.addConnection(context, info);\n+\n+                        if (info.getClientId() != null  && info.getClientId().contains(\"_duplex_\")) {\n+                            LOG.info(\"New connection for broker1: \" + info);\n+                            // snooz on return to simulate stall\n+                            TimeUnit.MILLISECONDS.sleep(500);\n+                        }\n+                    }\n+                }\n+        });\n+\n+        broker1.start();\n+\n+        // get the message over the bridge\n+        consume(new URI(urlString));\n+    }\n+\n+    private void consume(URI uri) throws Exception {\n+        MessageConsumer messageConsumer = connectionFactory(uri).createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE).createConsumer(dest);\n+        for (int i=0; i<NUM_MESSAGES; i++) {\n+            assertNotNull(\"got message: \" + i, messageConsumer.receive(5000));\n+        }\n+    }\n+\n+    private void publish(URI uri) throws Exception {\n+        MessageProducer messageProducer = connectionFactory(uri).createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE).createProducer(dest);\n+        for (int i=0; i<NUM_MESSAGES; i++) {\n+            messageProducer.send(new ActiveMQTextMessage());\n+        }\n+    }\n+\n+\n+    private ActiveMQConnectionFactory connectionFactory(URI uri) {\n+        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(uri) {\n+            @Override\n+            public Connection createConnection() throws JMSException {\n+                Connection connection = super.createConnection();\n+                connections.add(connection);\n+                // auto start!\n+                connection.start();\n+                return connection;\n+            }\n+        };\n+        connectionFactory.setWatchTopicAdvisories(false);\n+        return connectionFactory;\n+    }\n+\n+    private BrokerService createBroker() {\n+        BrokerService brokerService = new BrokerService();\n+        brokerService.setBrokerName(\"B\" + brokerServices.size());\n+        brokerService.setBrokerId(brokerService.getBrokerName());\n+        brokerService.setPersistent(false);\n+        brokerService.setUseJmx(false);\n+        brokerService.setAdvisorySupport(false);\n+        brokerServices.add(brokerService);\n+        return  brokerService;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        for (Connection connection : connections) {\n+            try {\n+                connection.close();\n+            } catch (Exception ignored) {}\n+        }\n+        connections.clear();\n+\n+        for (BrokerService brokerService : brokerServices) {\n+            try {\n+                brokerService.stop();\n+            } catch (Exception ignored) {}\n+        }\n+        brokerServices.clear();\n+    }\n+\n+}",
                "changes": 155,
                "blob_url": "https://github.com/apache/activemq/blob/7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82/activemq-unit-tests/src/test/java/org/apache/activemq/network/DuplexStartNpeTest.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-7193 - resolve intermittent NPE on duplex network connector start; wait for start completion before dispatching inbound messages, fix and test",
        "commit": "https://github.com/apache/activemq/commit/7404b43f2d9c5bbf4ab4ec89ae111d5bf1527d82"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/83514ef799cb71c3ed1ee1f81553d87383f2cd42",
        "bug_id": "activemq_2",
        "file": [
            {
                "additions": 3,
                "sha": "7aa61a269c2ba9a04abe788d0e111d93af00d0bf",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3ea18f4ed1caa078e5c55b09a93fcd686b633d75/activemq-jdbc-store/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java",
                "deletions": 1,
                "filename": "activemq-jdbc-store/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jdbc-store/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java?ref=3ea18f4ed1caa078e5c55b09a93fcd686b633d75",
                "patch": "@@ -188,8 +188,10 @@ public void execute() throws Exception {\n                 while (iterator.hasNext()) {\n                     SubscriptionKey subscriptionKey = iterator.next();\n                     MessageId identity = cpAckedLastAckLocations.get(subscriptionKey);\n+                    MessageAck ack = new MessageAck();\n+                    ack.setMessageID(identity);\n                     longTermStore.acknowledge(transactionTemplate.getContext(), subscriptionKey.clientId,\n-                                              subscriptionKey.subscriptionName, identity, null);\n+                                              subscriptionKey.subscriptionName, identity, ack);\n                 }\n \n             }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/3ea18f4ed1caa078e5c55b09a93fcd686b633d75/activemq-jdbc-store/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java"
            }
        ],
        "repo": "activemq",
        "message": "fix npe in long time failing ci JournalDurableSubscriptionTest",
        "commit": "https://github.com/apache/activemq/commit/3ea18f4ed1caa078e5c55b09a93fcd686b633d75"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2ce1c1352fb64ecf1d3018e2b0f7cabeba99b589",
        "bug_id": "activemq_3",
        "file": [
            {
                "additions": 4,
                "sha": "624b10fa7e3a1cc4e27d6acb9bea9b87efa2d09c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/703b7b151017fe117363e5598146e157bad78265/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java",
                "deletions": 0,
                "filename": "activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java?ref=703b7b151017fe117363e5598146e157bad78265",
                "patch": "@@ -231,6 +231,10 @@ public int compare(DestinationMapEntry entry1, DestinationMapEntry entry2) {\n     @SuppressWarnings(\"rawtypes\")\n     //Used to filter out any child/unmatching entries\n     private boolean isMatchOrParent(final ActiveMQDestination destination, final DestinationMapEntry entry) {\n+        //If destination not set then do not filter out\n+        if (entry.getDestination() == null) {\n+            return true;\n+        }\n         final DestinationFilter filter = DestinationFilter.parseFilter(entry.getDestination());\n         return destination.equals(entry.getDestination()) || filter.matches(destination);\n     }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/703b7b151017fe117363e5598146e157bad78265/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-6901 - Add NPE check inside DestinationMap filter",
        "commit": "https://github.com/apache/activemq/commit/703b7b151017fe117363e5598146e157bad78265"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/1db36d864d4199894d873bf7d7dfae5a23399de1",
        "bug_id": "activemq_4",
        "file": [
            {
                "additions": 1,
                "sha": "c193c46fca37b48838f2183c681ac61dad39a279",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/72613aaba6d2641b8635e54e2fb4a28c14da2021/activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java",
                "deletions": 1,
                "filename": "activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java?ref=72613aaba6d2641b8635e54e2fb4a28c14da2021",
                "patch": "@@ -800,7 +800,7 @@ public void commitAdd(ConnectionContext context, final MessageId messageId, fina\n     public void commitRemove(ConnectionContext context, MessageAck ack) throws IOException {\n         TransactionContext c = getTransactionContext(context);\n         try {\n-            getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getFutureOrSequenceLong(), null);\n+            getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getEntryLocator(), null);\n         } catch (SQLException e) {\n             JDBCPersistenceAdapter.log(\"JDBC Failure: \", e);\n             throw IOExceptionSupport.create(\"Failed to commit last ack: \" + ack + \". Reason: \" + e,e);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/72613aaba6d2641b8635e54e2fb4a28c14da2021/activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java"
            },
            {
                "additions": 130,
                "sha": "50cb1c9937e328e1917a60c50c33c9b90376258e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/72613aaba6d2641b8635e54e2fb4a28c14da2021/activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java?ref=72613aaba6d2641b8635e54e2fb4a28c14da2021",
                "patch": "@@ -619,6 +619,136 @@ public int getFormatId() {\n \n     }\n \n+    @Test\n+    public void testMoveInTwoBranchesPreparedAckRecoveryRestartRollback() throws Exception {\n+\n+        factory = new ActiveMQXAConnectionFactory(\n+                connectionUri + \"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=\" + messagesExpected);\n+\n+        factory.setWatchTopicAdvisories(false);\n+        sendMessages(messagesExpected);\n+\n+        ActiveMQXAConnection activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();\n+        activeMQXAConnection.start();\n+        XASession xaSession = activeMQXAConnection.createXASession();\n+\n+        Destination destination = xaSession.createQueue(\"TEST\");\n+        MessageConsumer consumer = xaSession.createConsumer(destination);\n+\n+        XAResource resource = xaSession.getXAResource();\n+\n+        final Xid tid = createXid();\n+        byte[] branch = tid.getBranchQualifier();\n+        final byte[] branch2  = Arrays.copyOf(branch, branch.length);\n+        branch2[0] = '!';\n+\n+        Xid branchTid = new Xid() {\n+            @Override\n+            public int getFormatId() {\n+                return tid.getFormatId();\n+            }\n+\n+            @Override\n+            public byte[] getGlobalTransactionId() {\n+                return tid.getGlobalTransactionId();\n+            }\n+\n+            @Override\n+            public byte[] getBranchQualifier() {\n+                return branch2;\n+            }\n+        };\n+\n+        resource.start(tid, XAResource.TMNOFLAGS);\n+\n+        int messagesReceived = 0;\n+\n+        Message message = null;\n+\n+        for (int i = 0; i < messagesExpected; i++) {\n+\n+            try {\n+                LOG.debug(\"Receiving message \" + (messagesReceived + 1) + \" of \" + messagesExpected);\n+                message = consumer.receive(2000);\n+                LOG.info(\"Received : \" + message);\n+                messagesReceived++;\n+            } catch (Exception e) {\n+                LOG.debug(\"Caught exception:\", e);\n+            }\n+        }\n+\n+        resource.end(tid, XAResource.TMSUCCESS);\n+\n+        ActiveMQXAConnection activeMQXAConnectionSend = (ActiveMQXAConnection) factory.createXAConnection();\n+        activeMQXAConnectionSend.start();\n+        XASession xaSessionSend = activeMQXAConnection.createXASession();\n+\n+        Destination destinationSend = xaSessionSend.createQueue(\"TEST_MOVE\");\n+        MessageProducer producer = xaSessionSend.createProducer(destinationSend);\n+\n+        XAResource resourceSend = xaSessionSend.getXAResource();\n+        resourceSend.start(branchTid, XAResource.TMNOFLAGS);\n+\n+        ActiveMQMessage toSend = (ActiveMQMessage) xaSessionSend.createTextMessage();\n+        toSend.setTransactionId(new XATransactionId(branchTid));\n+        producer.send(toSend);\n+\n+        resourceSend.end(branchTid, XAResource.TMSUCCESS);\n+        resourceSend.prepare(branchTid);\n+\n+        // ack on TEST is prepared\n+        resource.prepare(tid);\n+\n+        // send to TEST_MOVE is rolledback\n+        resourceSend.rollback(branchTid);\n+\n+        consumer.close();\n+\n+        LOG.info(\"Prepared\");\n+        dumpMessages();\n+\n+        broker = restartBroker();\n+\n+        LOG.info(\"New broker\");\n+        dumpMessages();\n+\n+        ObjectName queueViewMBeanName = new ObjectName(\"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST\");\n+        QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()\n+                .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);\n+\n+        assertEquals(\"size\", 0, proxy.getQueueSize());\n+\n+        assertNull(regularReceive(\"TEST_MOVE\"));\n+\n+        ObjectName queueMoveViewMBeanName = new ObjectName(\"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE\");\n+        QueueViewMBean moveProxy = (QueueViewMBean) broker.getManagementContext()\n+                .newProxyInstance(queueMoveViewMBeanName, QueueViewMBean.class, true);\n+\n+        assertEquals(\"enq\", 0, moveProxy.getDequeueCount());\n+        assertEquals(\"size\", 0, moveProxy.getQueueSize());\n+\n+        assertEquals(\"size 0\", 0, moveProxy.getQueueSize());\n+\n+        factory = new ActiveMQXAConnectionFactory(\n+                connectionUri + \"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries=\" + messagesExpected);\n+        factory.setWatchTopicAdvisories(false);\n+\n+        activeMQXAConnection = (ActiveMQXAConnection) factory.createXAConnection();\n+        activeMQXAConnection.start();\n+        xaSession = activeMQXAConnection.createXASession();\n+\n+        resource = xaSession.getXAResource();\n+        resource.rollback(tid);\n+\n+        assertEquals(\"size\", 1, proxy.getQueueSize());\n+        assertEquals(\"c size\", 1, proxy.cursorSize());\n+\n+        assertNotNull(regularReceive(\"TEST\"));\n+\n+        assertEquals(\"size\", 0, proxy.getQueueSize());\n+        assertEquals(\"c size\", 0, proxy.cursorSize());\n+        assertEquals(\"dq\", 1, proxy.getDequeueCount());\n+    }\n \n \n     @Test",
                "changes": 130,
                "blob_url": "https://github.com/apache/activemq/blob/72613aaba6d2641b8635e54e2fb4a28c14da2021/activemq-unit-tests/src/test/java/org/apache/activemq/store/jdbc/XACompletionTest.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-6707 - ensure entryLocator is used for rollback of prepared add to avoid NPE, relates to AMQ-5567",
        "commit": "https://github.com/apache/activemq/commit/72613aaba6d2641b8635e54e2fb4a28c14da2021"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/35b7ac250b5fa0b8c8dbf728881cc9dbf6edce19",
        "bug_id": "activemq_5",
        "file": [
            {
                "additions": 8,
                "sha": "cd9067d2d460d0c01a46154768b861e88729bd2c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8f30866fdf89f25188a358f1b1c161b2f06de3f5/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 6,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=8f30866fdf89f25188a358f1b1c161b2f06de3f5",
                "patch": "@@ -762,12 +762,14 @@ protected void matched(Location key, Long value) {\n \n             for (Long sequenceId : matches) {\n                 MessageKeys keys = sd.orderIndex.remove(tx, sequenceId);\n-                sd.locationIndex.remove(tx, keys.location);\n-                sd.messageIdIndex.remove(tx, keys.messageId);\n-                metadata.producerSequenceIdTracker.rollback(keys.messageId);\n-                undoCounter++;\n-                decrementAndSubSizeToStoreStat(key, keys.location.getSize());\n-                // TODO: do we need to modify the ack positions for the pub sub case?\n+                if (keys != null) {\n+                    sd.locationIndex.remove(tx, keys.location);\n+                    sd.messageIdIndex.remove(tx, keys.messageId);\n+                    metadata.producerSequenceIdTracker.rollback(keys.messageId);\n+                    undoCounter++;\n+                    decrementAndSubSizeToStoreStat(key, keys.location.getSize());\n+                    // TODO: do we need to modify the ack positions for the pub sub case?\n+                }\n             }\n         }\n ",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/8f30866fdf89f25188a358f1b1c161b2f06de3f5/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-6063\n\nFixing potential NullPointerException during KahaDB index recovery.",
        "commit": "https://github.com/apache/activemq/commit/8f30866fdf89f25188a358f1b1c161b2f06de3f5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ee65ca4ee5fb277204bd084eab356479ff1f05d8",
        "bug_id": "activemq_6",
        "file": [
            {
                "additions": 2,
                "sha": "1c6adec79bc03ae7c3d5b12c44e5834169ab83a1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "deletions": 2,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala?ref=ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7",
                "patch": "@@ -929,7 +929,7 @@ class LevelDBClient(store: LevelDBStore) {\n \n   var wal_append_position = 0L\n \n-  def stop() = {\n+  def stop() = this.synchronized {\n     if( writeExecutor!=null ) {\n       writeExecutor.shutdown\n       writeExecutor.awaitTermination(60, TimeUnit.SECONDS)\n@@ -945,7 +945,7 @@ class LevelDBClient(store: LevelDBStore) {\n           index.close\n           index = null\n         }\n-        if (log.isOpen) {\n+        if (log!=null && log.isOpen) {\n           log.close\n           copyDirtyIndexToSnapshot\n           wal_append_position = log.appender_limit",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala"
            },
            {
                "additions": 30,
                "sha": "98aaf6d09664841ce79a801d02ce74761e9cea8c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala",
                "deletions": 0,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala?ref=ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7",
                "patch": "@@ -184,6 +184,12 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n   val topicsById = collection.mutable.HashMap[Long, LevelDBStore#LevelDBTopicMessageStore]()\n   val plists = collection.mutable.HashMap[String, LevelDBStore#LevelDBPList]()\n \n+  def check_running = {\n+    if( this.isStopped ) {\n+      throw new IOException(\"Store has been stopped\")\n+    }\n+  }\n+\n   def init() = {}\n \n   def createDefaultLocker() = {\n@@ -664,6 +670,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     lastSeq.set(db.getLastQueueEntrySeq(key))\n \n     def doAdd(uow: DelayableUOW, message: Message, delay:Boolean): CountDownFuture[AnyRef] = {\n+      check_running\n       val seq = lastSeq.incrementAndGet()\n       message.incrementReferenceCount()\n       uow.addCompleteListener({\n@@ -674,6 +681,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n \n     override def asyncAddQueueMessage(context: ConnectionContext, message: Message) = asyncAddQueueMessage(context, message, false)\n     override def asyncAddQueueMessage(context: ConnectionContext, message: Message, delay: Boolean): Future[AnyRef] = {\n+      check_running\n       message.getMessageId.setEntryLocator(null)\n       if(  message.getTransactionId!=null ) {\n         transaction(message.getTransactionId).add(this, message, delay)\n@@ -687,6 +695,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n \n     override def addMessage(context: ConnectionContext, message: Message) = addMessage(context, message, false)\n     override def addMessage(context: ConnectionContext, message: Message, delay: Boolean): Unit = {\n+      check_running\n       waitOn(asyncAddQueueMessage(context, message, delay))\n     }\n \n@@ -695,6 +704,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     override def removeAsyncMessage(context: ConnectionContext, ack: MessageAck): Unit = {\n+      check_running\n       if(  ack.getTransactionId!=null ) {\n         transaction(ack.getTransactionId).remove(this, ack)\n       } else {\n@@ -705,10 +715,12 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def removeMessage(context: ConnectionContext, ack: MessageAck): Unit = {\n+      check_running\n       removeAsyncMessage(context, ack)\n     }\n \n     def getMessage(id: MessageId): Message = {\n+      check_running\n       var message: Message = db.getMessage(id)\n       if (message == null) {\n         throw new IOException(\"Message id not found: \" + id)\n@@ -717,6 +729,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def removeAllMessages(context: ConnectionContext): Unit = {\n+      check_running\n       db.collectionEmpty(key)\n       cursorPosition = 0\n     }\n@@ -730,6 +743,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def recover(listener: MessageRecoveryListener): Unit = {\n+      check_running\n       cursorPosition = db.cursorMessages(preparedAcks, key, listener, 0)\n     }\n \n@@ -738,6 +752,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def recoverNextMessages(maxReturned: Int, listener: MessageRecoveryListener): Unit = {\n+      check_running\n       cursorPosition = db.cursorMessages(preparedAcks, key, listener, cursorPosition, maxReturned)\n     }\n \n@@ -802,6 +817,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def addSubsciption(info: SubscriptionInfo, retroactive: Boolean) = {\n+      check_running\n       var sub = db.addSubscription(key, info)\n       subscriptions.synchronized {\n         subscriptions.put((info.getClientId, info.getSubcriptionName), sub)\n@@ -815,14 +831,17 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def getAllSubscriptions: Array[SubscriptionInfo] = subscriptions.synchronized {\n+      check_running\n       subscriptions.values.map(_.info).toArray\n     }\n \n     def lookupSubscription(clientId: String, subscriptionName: String): SubscriptionInfo = subscriptions.synchronized {\n+      check_running\n       subscriptions.get((clientId, subscriptionName)).map(_.info).getOrElse(null)\n     }\n \n     def deleteSubscription(clientId: String, subscriptionName: String): Unit = {\n+      check_running\n       subscriptions.synchronized {\n         subscriptions.remove((clientId, subscriptionName))\n       }.foreach(db.removeSubscription(_))\n@@ -839,6 +858,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def acknowledge(context: ConnectionContext, clientId: String, subscriptionName: String, messageId: MessageId, ack: MessageAck): Unit = {\n+      check_running\n       lookup(clientId, subscriptionName).foreach { sub =>\n         var position = db.queuePosition(messageId)\n         if(  ack.getTransactionId!=null ) {\n@@ -855,23 +875,27 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def resetBatching(clientId: String, subscriptionName: String): Unit = {\n+      check_running\n       lookup(clientId, subscriptionName).foreach { sub =>\n         sub.cursorPosition = 0\n       }\n     }\n     def recoverSubscription(clientId: String, subscriptionName: String, listener: MessageRecoveryListener): Unit = {\n+      check_running\n       lookup(clientId, subscriptionName).foreach { sub =>\n         sub.cursorPosition = db.cursorMessages(preparedAcks, key, listener, sub.cursorPosition.max(sub.lastAckPosition+1))\n       }\n     }\n \n     def recoverNextMessages(clientId: String, subscriptionName: String, maxReturned: Int, listener: MessageRecoveryListener): Unit = {\n+      check_running\n       lookup(clientId, subscriptionName).foreach { sub =>\n         sub.cursorPosition = db.cursorMessages(preparedAcks, key, listener, sub.cursorPosition.max(sub.lastAckPosition+1), maxReturned)\n       }\n     }\n \n     def getMessageCount(clientId: String, subscriptionName: String): Int = {\n+      check_running\n       lookup(clientId, subscriptionName) match {\n         case Some(sub) =>\n           (lastSeq.get - sub.lastAckPosition).toInt\n@@ -889,24 +913,28 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n \n     def getName: String = name\n     def destroy() = {\n+      check_running\n       removePList(name)\n     }\n \n     def addFirst(id: String, bs: ByteSequence): AnyRef = {\n+      check_running\n       var pos = lastSeq.decrementAndGet()\n       add(pos, id, bs)\n       listSize.incrementAndGet()\n       new java.lang.Long(pos)\n     }\n \n     def addLast(id: String, bs: ByteSequence): AnyRef = {\n+      check_running\n       var pos = lastSeq.incrementAndGet()\n       add(pos, id, bs)\n       listSize.incrementAndGet()\n       new java.lang.Long(pos)\n     }\n \n     def add(pos:Long, id: String, bs: ByteSequence) = {\n+      check_running\n       val encoded_key = encodeLongLong(key, pos)\n       val encoded_id = new UTF8Buffer(id)\n       val os = new DataByteArrayOutputStream(2+encoded_id.length+bs.length)\n@@ -917,6 +945,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     }\n \n     def remove(position: AnyRef): Boolean = {\n+      check_running\n       val pos = position.asInstanceOf[java.lang.Long].longValue()\n       val encoded_key = encodeLongLong(key, pos)\n       db.plistGet(encoded_key) match {\n@@ -933,6 +962,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     def size(): Long = listSize.get()\n \n     def iterator() = new PListIterator() {\n+      check_running\n       val prefix = LevelDBClient.encodeLong(key)\n       var dbi = db.plistIterator\n       var last_key:Array[Byte] = _",
                "changes": 30,
                "blob_url": "https://github.com/apache/activemq/blob/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala"
            },
            {
                "additions": 2,
                "sha": "f50e556fbb25fee6cc8b463bc694f20c2bf0ba88",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/MasterLevelDBStore.scala",
                "deletions": 1,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/MasterLevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/MasterLevelDBStore.scala?ref=ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7",
                "patch": "@@ -137,7 +137,8 @@ class MasterLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n       def onAccept(transport: Transport) {\n         transport.setDispatchQueue(createQueue(\"connection from \"+transport.getRemoteAddress))\n         transport.setBlockingExecutor(blocking_executor)\n-        new Session(transport)\n+        new Session(transport).start\n+\n       }\n       def onAcceptError(error: Exception) {\n         warn(error)",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/MasterLevelDBStore.scala"
            },
            {
                "additions": 10,
                "sha": "4239a0ba0045fb185578223dadb59c8660295fba",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "deletions": 6,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala?ref=ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7",
                "patch": "@@ -107,25 +107,28 @@ class SlaveLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n         session.handler = wal_handler(session)\n       }\n     })\n+    wal_session.start\n   }\n \n   def stop_connections(cb:Task) = {\n     var then = ^{\n       unstash(directory)\n       cb.run()\n     }\n-    if( wal_session !=null ) {\n+    val wal_session_copy = wal_session\n+    if( wal_session_copy !=null ) {\n+      wal_session = null\n       val next = then\n       then = ^{\n-        wal_session.transport.stop(next)\n-        wal_session = null\n+        wal_session_copy.transport.stop(next)\n       }\n     }\n-    if( transfer_session !=null ) {\n+    val transfer_session_copy = transfer_session\n+    if( transfer_session_copy !=null ) {\n+      transfer_session = null\n       val next = then\n       then = ^{\n-        transfer_session.transport.stop(next)\n-        transfer_session = null\n+        transfer_session_copy.transport.stop(next)\n       }\n     }\n     then.run();\n@@ -414,6 +417,7 @@ class SlaveLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n         pending_log_removes.clear()\n       }\n     })\n+    transfer_session.start\n     state.snapshot_position\n   }\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/activemq/blob/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala"
            },
            {
                "additions": 4,
                "sha": "b13b6806d84217996097df4b1e0163c3972eed34",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/TransportHandler.scala",
                "deletions": 1,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/TransportHandler.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/TransportHandler.scala?ref=ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7",
                "patch": "@@ -33,7 +33,10 @@ abstract class TransportHandler(val transport: Transport) extends TransportListe\n \n   transport.setProtocolCodec(codec)\n   transport.setTransportListener(this)\n-  transport.start(NOOP)\n+\n+  def start = {\n+    transport.start(NOOP)\n+  }\n \n   def onTransportConnected = transport.resumeRead()\n   def onTransportDisconnected() = {}",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/TransportHandler.scala"
            }
        ],
        "repo": "activemq",
        "message": "Avoid NullPointerExceptions that can occur during leveldb replication M/S state transitions.",
        "commit": "https://github.com/apache/activemq/commit/ef45a5f8ffa0c5c36f1fb98f377ca0cb54b9cbd7"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/de4f4e406fa9182d705c52c3dc32e762572e45fc",
        "bug_id": "activemq_7",
        "file": [
            {
                "additions": 1,
                "sha": "f2b176d5e5778c4d62508697e2eccacf9c400a3e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java",
                "deletions": 4,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java?ref=bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7",
                "patch": "@@ -117,7 +117,7 @@ protected void consumeMessage(Message message, List<Message> messageList) {\n                         ActiveMQMessage mqMessage = (ActiveMQMessage) message;\n                         MessageId id = mqMessage.getMessageId();\n                         dbConnection = sharedDs.getConnection();\n-                        PreparedStatement s = dbConnection.prepareStatement(((JDBCPersistenceAdapter) connectedToBroker().getPersistenceAdapter()).getStatements().getFindMessageStatement());\n+                        PreparedStatement s = dbConnection.prepareStatement(findStatement);\n                         s.setString(1, id.getProducerId().toString());\n                         s.setLong(2, id.getProducerSequenceId());\n                         ResultSet rs = s.executeQuery();\n@@ -143,7 +143,4 @@ protected void consumeMessage(Message message, List<Message> messageList) {\n         }\n     }\n \n-    private BrokerService connectedToBroker() {\n-        return ((ActiveMQConnection)receiveConnection).getBrokerInfo().getBrokerName().equals(\"master\") ? master : slave.get();\n-    }\n }",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/DbRestartJDBCQueueMasterSlaveTest.java"
            },
            {
                "additions": 2,
                "sha": "1d987bfeb461abee70d30f417575b7660aae2de2",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java?ref=bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7",
                "patch": "@@ -38,11 +38,13 @@\n     protected SyncCreateDataSource sharedDs;\n     protected String MASTER_URL = \"tcp://localhost:62001\";\n     protected String SLAVE_URL  = \"tcp://localhost:62002\";\n+    protected String findStatement;\n \n     protected void setUp() throws Exception {\n         // startup db\n         sharedDs = new SyncCreateDataSource((EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory()));\n         super.setUp();\n+        findStatement = ((JDBCPersistenceAdapter) master.getPersistenceAdapter()).getStatements().getFindMessageStatement();\n     }\n \n     protected void tearDown() throws Exception {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7/activemq-unit-tests/src/test/java/org/apache/activemq/broker/ft/JDBCQueueMasterSlaveTest.java"
            }
        ],
        "repo": "activemq",
        "message": "address npe in intermittent failure in ci",
        "commit": "https://github.com/apache/activemq/commit/bf5b1fcfce6b8f5ee216ddeabc39039b04a78fb7"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/b37b9eb5afed8261f657b5847e8691b3804d0f60",
        "bug_id": "activemq_8",
        "file": [
            {
                "additions": 1,
                "sha": "8f4c9fd32d29d0bd6d025f66a3925167e4701ded",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8447e1af2d45479fb602a6c16982e7b00b52a5b0/activemq-camel/src/main/java/org/apache/activemq/camel/component/OriginalDestinationPropagateStrategy.java",
                "deletions": 1,
                "filename": "activemq-camel/src/main/java/org/apache/activemq/camel/component/OriginalDestinationPropagateStrategy.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-camel/src/main/java/org/apache/activemq/camel/component/OriginalDestinationPropagateStrategy.java?ref=8447e1af2d45479fb602a6c16982e7b00b52a5b0",
                "patch": "@@ -40,7 +40,7 @@ public void onMessageCreated(Message message, Session session, Exchange exchange\n         if (exchange.getIn() instanceof JmsMessage) {\n             JmsMessage msg = exchange.getIn(JmsMessage.class);\n             Message jms = msg.getJmsMessage();\n-            if (message instanceof ActiveMQMessage) {\n+            if (jms != null && jms instanceof ActiveMQMessage && message instanceof ActiveMQMessage) {\n                 ActiveMQMessage amq = (ActiveMQMessage) jms;\n                 if (amq.getOriginalDestination() == null) {\n                     ActiveMQDestination from = amq.getDestination();",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/8447e1af2d45479fb602a6c16982e7b00b52a5b0/activemq-camel/src/main/java/org/apache/activemq/camel/component/OriginalDestinationPropagateStrategy.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-6402: Fixed potential NPE in OriginalDestinationPropagateStrategy",
        "commit": "https://github.com/apache/activemq/commit/8447e1af2d45479fb602a6c16982e7b00b52a5b0"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4ef1fc74cf8068b5c41cc1f4d1c97967658a465b",
        "bug_id": "activemq_9",
        "file": [
            {
                "additions": 27,
                "sha": "0611be77c13c46f945489c353fae430a5ee9a132",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 22,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=2731f04f1ca81312d08ffc21c0ceb09513165b7c",
                "patch": "@@ -1524,7 +1524,7 @@ void updateIndex(Transaction tx, KahaUpdateMessageCommand updateMessageCommand,\n                 decrementAndSubSizeToStoreStat(command.getDestination(), previousKeys.location.getSize());\n \n                 //update all the subscription metrics\n-                if (enableSubscriptionStatistics && location.getSize() != previousKeys.location.getSize()) {\n+                if (enableSubscriptionStatistics && sd.ackPositions != null && location.getSize() != previousKeys.location.getSize()) {\n                     Iterator<Entry<String, SequenceSet>> iter = sd.ackPositions.iterator(tx);\n                     while (iter.hasNext()) {\n                         Entry<String, SequenceSet> e = iter.next();\n@@ -2970,33 +2970,38 @@ public LastAck getLastAck(Transaction tx, StoredDestination sd, String subscript\n         return sd.subscriptionAcks.get(tx, subscriptionKey);\n     }\n \n-    public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n-        SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n-        if (messageSequences != null) {\n-            long result = messageSequences.rangeSize();\n-            // if there's anything in the range the last value is always the nextMessage marker, so remove 1.\n-            return result > 0 ? result - 1 : 0;\n+    protected long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n+        if (sd.ackPositions != null) {\n+            SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n+            if (messageSequences != null) {\n+                long result = messageSequences.rangeSize();\n+                // if there's anything in the range the last value is always the nextMessage marker, so remove 1.\n+                return result > 0 ? result - 1 : 0;\n+            }\n         }\n \n         return 0;\n     }\n \n-    public long getStoredMessageSize(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n-        //grab the messages attached to this subscription\n-        SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n-\n+    protected long getStoredMessageSize(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {\n         long locationSize = 0;\n-        if (messageSequences != null) {\n-            Sequence head = messageSequences.getHead();\n-            if (head != null) {\n-                //get an iterator over the order index starting at the first unacked message\n-                //and go over each message to add up the size\n-                Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx,\n-                        new MessageOrderCursor(head.getFirst()));\n-\n-                while (iterator.hasNext()) {\n-                    Entry<Long, MessageKeys> entry = iterator.next();\n-                    locationSize += entry.getValue().location.getSize();\n+\n+        if (sd.ackPositions != null) {\n+            //grab the messages attached to this subscription\n+            SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);\n+\n+            if (messageSequences != null) {\n+                Sequence head = messageSequences.getHead();\n+                if (head != null) {\n+                    //get an iterator over the order index starting at the first unacked message\n+                    //and go over each message to add up the size\n+                    Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx,\n+                            new MessageOrderCursor(head.getFirst()));\n+\n+                    while (iterator.hasNext()) {\n+                        Entry<Long, MessageKeys> entry = iterator.next();\n+                        locationSize += entry.getValue().location.getSize();\n+                    }\n                 }\n             }\n         }",
                "changes": 49,
                "blob_url": "https://github.com/apache/activemq/blob/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            },
            {
                "additions": 41,
                "sha": "4deb1e07b950f06102685451c611d428e531767b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
                "deletions": 0,
                "filename": "activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java?ref=2731f04f1ca81312d08ffc21c0ceb09513165b7c",
                "patch": "@@ -17,9 +17,12 @@\n package org.apache.activemq.store.kahadb;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n \n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.command.ActiveMQQueue;\n@@ -36,20 +39,41 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+@RunWith(Parameterized.class)\n public class MessageDatabaseSizeTest {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MessageDatabaseSizeTest.class);\n \n+    @Parameters(name = \"subStatsEnabled={0}\")\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][] {\n+                // Subscription stats on\n+                {true},\n+                // Subscription stats off\n+                {false}\n+        });\n+    }\n+\n     @Rule\n     public TemporaryFolder dataDir = new TemporaryFolder(new File(\"target\"));\n     private final String payload = new String(new byte[1024]);\n \n     private BrokerService broker = null;\n     private final ActiveMQQueue destination = new ActiveMQQueue(\"Test\");\n     private KahaDBPersistenceAdapter adapter;\n+    private boolean subStatsEnabled;\n+\n+    public MessageDatabaseSizeTest(boolean subStatsEnabled) {\n+        super();\n+        this.subStatsEnabled = subStatsEnabled;\n+    }\n+\n \n     protected void startBroker() throws Exception {\n         broker = new BrokerService();\n@@ -58,6 +82,7 @@ protected void startBroker() throws Exception {\n         broker.setUseJmx(true);\n         broker.setDataDirectory(dataDir.getRoot().getAbsolutePath());\n         adapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();\n+        adapter.setEnableSubscriptionStatistics(subStatsEnabled);\n         broker.start();\n         LOG.info(\"Starting broker..\");\n     }\n@@ -101,6 +126,22 @@ public void testUpdateMessageSameLocation() throws Exception {\n         assertEquals(existingSize, messageStore.getMessageSize());\n     }\n \n+    @Test\n+    public void testUpdateMessageSameLocationDifferentSize() throws Exception {\n+        final KahaDBStore store = adapter.getStore();\n+        MessageId messageId = new MessageId(\"111:222:333\");\n+        ActiveMQTextMessage textMessage = getMessage(new MessageId(\"111:222:333\"));\n+\n+        //Add a single message and update once so we can compare the size consistently\n+        MessageStore messageStore = store.createQueueMessageStore(destination);\n+        messageStore.addMessage(broker.getAdminConnectionContext(), textMessage);\n+        textMessage.setText(\"new size of message\");\n+        messageStore.updateMessage(textMessage);\n+\n+        assertNotNull(findMessageLocation(messageId.toString(), store.convert(destination)));\n+\n+    }\n+\n     /**\n      * Test that when updating an existing message to a different location in the\n      * journal that the index size doesn't change",
                "changes": 41,
                "blob_url": "https://github.com/apache/activemq/blob/2731f04f1ca81312d08ffc21c0ceb09513165b7c/activemq-kahadb-store/src/test/java/org/apache/activemq/store/kahadb/MessageDatabaseSizeTest.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-6642: Fix potential NPE on updateMessage\n\nFixing potential NPE when calling updateMessage on a Queue store in\nKahaDB if subscription statistics are enabled.  Also reduced the\nvisibily from public to protected to subscription statistic related\nmethods that shouldn't be public and added null pointer checks there as\nwell.\n\nhttps://issues.apache.org/jira/browse/AMQ-6642",
        "commit": "https://github.com/apache/activemq/commit/2731f04f1ca81312d08ffc21c0ceb09513165b7c"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/61fcd4cfd1a843d7ff5fd23d60351d7fd1c46c2b",
        "bug_id": "activemq_10",
        "file": [
            {
                "additions": 3,
                "sha": "08577e18735bc993e89af28e77ac50bd181471df",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f533b42f31095ad5b70d57f130fffbce2708a1cf/activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleJDBCAdapter.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleJDBCAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleJDBCAdapter.java?ref=f533b42f31095ad5b70d57f130fffbce2708a1cf",
                "patch": "@@ -52,6 +52,9 @@ public void setStatements(Statements statements) {\n     protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException {\n         // Get as a BLOB\n         Blob aBlob = rs.getBlob(index);\n+        if (aBlob == null) {\n+            return null;\n+        }\n         return aBlob.getBytes(1, (int) aBlob.length());\n     }\n }",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/f533b42f31095ad5b70d57f130fffbce2708a1cf/activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleJDBCAdapter.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@411728 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/f533b42f31095ad5b70d57f130fffbce2708a1cf"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f8bc19b96da752e216de2c5c543a7d8523512a03",
        "bug_id": "activemq_11",
        "file": [
            {
                "additions": 21,
                "sha": "0b9955538172c568e0cb6afe425de6ce93d1ba54",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a9c7f7122badd6bc46237cdeeaa64e892d9fa045/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java",
                "deletions": 4,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java?ref=a9c7f7122badd6bc46237cdeeaa64e892d9fa045",
                "patch": "@@ -115,9 +115,9 @@\n \n     protected ActiveMQQueue QUEUE_NAME = new ActiveMQQueue(\"duptest.store\");\n \n-    private final CountDownLatch stopConsumerBroker = new CountDownLatch(1);\n-    private final CountDownLatch consumerBrokerRestarted = new CountDownLatch(1);\n-    private final CountDownLatch consumerRestartedAndMessageForwarded = new CountDownLatch(1);\n+    private CountDownLatch stopConsumerBroker;\n+    private CountDownLatch consumerBrokerRestarted;\n+    private CountDownLatch consumerRestartedAndMessageForwarded;\n \n     private EmbeddedDataSource localDataSource;\n \n@@ -134,6 +134,15 @@ public static void dbHomeSysProp() throws Exception {\n         System.setProperty(\"derby.system.home\", new File(IOHelper.getDefaultDataDirectory()).getCanonicalPath());\n     }\n \n+    public void repeat() throws Exception {\n+        for (int i=0; i<10; i++) {\n+            LOG.info(\"Iteration: \" + i);\n+            testConsumerBrokerRestart();\n+            tearDown();\n+            setUp();\n+        }\n+    }\n+\n     @Test\n     public void testConsumerBrokerRestart() throws Exception {\n \n@@ -155,7 +164,11 @@ public Object call() throws Exception {\n                     MessageConsumer messageConsumer = consumerSession.createConsumer(QUEUE_NAME);\n \n                     while (true) {\n-                        TextMessage textMsg = (TextMessage) messageConsumer.receive(5000);\n+                        TextMessage textMsg = (TextMessage) messageConsumer.receive(1000);\n+\n+                        if (textMsg == null) {\n+                            textMsg = (TextMessage) messageConsumer.receive(4000);\n+                        }\n \n                         if (textMsg == null) {\n                             return receivedMessageCount;\n@@ -266,6 +279,10 @@ private void produceMessages() throws JMSException {\n     @Before\n     public void setUp() throws Exception {\n         LOG.debug(\"Running with enableCursorAudit set to {}\", this.enableCursorAudit);\n+        stopConsumerBroker = new CountDownLatch(1);\n+        consumerBrokerRestarted = new CountDownLatch(1);\n+        consumerRestartedAndMessageForwarded = new CountDownLatch(1);\n+\n         doSetUp();\n     }\n ",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/a9c7f7122badd6bc46237cdeeaa64e892d9fa045/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ4952Test.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-6411 - tidy up latch between runs. Have not seen repeat of npe yet",
        "commit": "https://github.com/apache/activemq/commit/a9c7f7122badd6bc46237cdeeaa64e892d9fa045"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/b9fad53fc650a9026391bef0fd74aea1bea7ec1b",
        "bug_id": "activemq_12",
        "file": [
            {
                "additions": 5,
                "sha": "effe5fd1786738e650ea484ea681158e92b57a29",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/de4f4e406fa9182d705c52c3dc32e762572e45fc/activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java",
                "deletions": 2,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java?ref=de4f4e406fa9182d705c52c3dc32e762572e45fc",
                "patch": "@@ -336,6 +336,7 @@ public void testBrokerZeroPrefetchConfig() throws Exception {\n         MessageConsumer consumer = session.createConsumer(brokerZeroQueue);\n \n         TextMessage answer = (TextMessage)consumer.receive(5000);\n+        assertNotNull(\"Consumer should have read a message\", answer);\n         assertEquals(\"Should have received a message!\", answer.getText(), \"Msg1\");\n     }\n \n@@ -393,12 +394,14 @@ protected void startBroker() throws Exception {\n \n     @Override\n     protected void tearDown() throws Exception {\n-        connection.close();\n+        try {\n+            connection.close();\n+        } catch (Exception ex) {}\n+\n         super.tearDown();\n     }\n \n     protected Queue createQueue() {\n         return new ActiveMQQueue(getDestinationString() + \"?consumer.prefetchSize=0\");\n     }\n-\n }",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/de4f4e406fa9182d705c52c3dc32e762572e45fc/activemq-unit-tests/src/test/java/org/apache/activemq/ZeroPrefetchConsumerTest.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix NPE case so a meaningful error is reported on failure.",
        "commit": "https://github.com/apache/activemq/commit/de4f4e406fa9182d705c52c3dc32e762572e45fc"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4386750fdb6938bd36669b5c8168aef8d772041e",
        "bug_id": "activemq_13",
        "file": [
            {
                "additions": 6,
                "sha": "3bf4bbd11cfeac7101d96c89941eccc25ccd6275",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/30ff378a35471120d8d0a0f96367c5684fc43daf/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/TrapMessageInJDBCStoreTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/bugs/TrapMessageInJDBCStoreTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/TrapMessageInJDBCStoreTest.java?ref=30ff378a35471120d8d0a0f96367c5684fc43daf",
                "patch": "@@ -36,15 +36,18 @@\n import junit.framework.TestCase;\n import org.apache.activemq.ActiveMQConnectionFactory;\n import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.TransportConnection;\n import org.apache.activemq.store.jdbc.DataSourceServiceSupport;\n import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;\n import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;\n import org.apache.activemq.store.jdbc.TransactionContext;\n import org.apache.activemq.util.IOHelper;\n import org.apache.activemq.util.LeaseLockerIOExceptionHandler;\n import org.apache.derby.jdbc.EmbeddedDataSource;\n+import org.apache.log4j.Level;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.slf4j.impl.Log4jLoggerAdapter;\n \n /**\n  * Test to demostrate a message trapped in the JDBC store and not\n@@ -107,6 +110,9 @@ protected BrokerService createBroker(boolean withJMX) throws Exception {\n \n     public void testDBCommitException() throws Exception {\n \n+        org.apache.log4j.Logger serviceLogger = org.apache.log4j.Logger.getLogger(TransportConnection.class.getName() + \".Service\");\n+        serviceLogger.setLevel (Level.TRACE);\n+\n         broker = this.createBroker(false);\n         broker.deleteAllMessages();\n         broker.start();",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/30ff378a35471120d8d0a0f96367c5684fc43daf/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/TrapMessageInJDBCStoreTest.java"
            }
        ],
        "repo": "activemq",
        "message": "increase service logging, seems npe in the mix on intermittent failure",
        "commit": "https://github.com/apache/activemq/commit/30ff378a35471120d8d0a0f96367c5684fc43daf"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/dc19d28af92a5fce4969352c53f02b11ee3f59e9",
        "bug_id": "activemq_14",
        "file": [
            {
                "additions": 4,
                "sha": "025510bc4d40df9e9aface4a2dfd4d5ff527002f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a01578ad4c93da5b28b76a9ef534394e5dcbb887/activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java",
                "deletions": 2,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java?ref=a01578ad4c93da5b28b76a9ef534394e5dcbb887",
                "patch": "@@ -99,8 +99,10 @@ public boolean keepAlive() {\n \n     @Override\n     public void doStop(ServiceStopper stopper) throws Exception {\n-        lockFile.unlock();\n-        lockFile=null;\n+        if (lockFile != null) {\n+            lockFile.unlock();\n+            lockFile = null;\n+        }\n     }\n \n     public File getDirectory() {",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/a01578ad4c93da5b28b76a9ef534394e5dcbb887/activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java"
            },
            {
                "additions": 7,
                "sha": "ac8b86eb9b10b6e1936a7c4e85b6a370ea6589a8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a01578ad4c93da5b28b76a9ef534394e5dcbb887/activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java?ref=a01578ad4c93da5b28b76a9ef534394e5dcbb887",
                "patch": "@@ -59,6 +59,13 @@ public SharedFileLockerTest() {\n \n     }\n \n+    @Test\n+    public void testStopNoStart() throws Exception {\n+        SharedFileLocker locker1 = new SharedFileLocker();\n+        locker1.setDirectory(testFolder.getRoot());\n+        locker1.stop();\n+    }\n+\n     @Test\n     public void testLoop() throws Exception {\n         // Increase the number of iterations if you are debugging races",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/a01578ad4c93da5b28b76a9ef534394e5dcbb887/activemq-unit-tests/src/test/java/org/apache/activemq/store/SharedFileLockerTest.java"
            }
        ],
        "repo": "activemq",
        "message": "fix stop/stop or stop no start NPE on sharedfilelocker",
        "commit": "https://github.com/apache/activemq/commit/a01578ad4c93da5b28b76a9ef534394e5dcbb887"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/21fe8cac7d05247c381fc351596c3a56b89a03cd",
        "bug_id": "activemq_15",
        "file": [
            {
                "additions": 2,
                "sha": "6cc252fe569d4e6e405c84a9022abdb028e7fe72",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/70c698f9889d84fd574f324e791c41d8ac75c85a/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java",
                "deletions": 2,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java?ref=70c698f9889d84fd574f324e791c41d8ac75c85a",
                "patch": "@@ -43,7 +43,7 @@\n  *\n  * @org.apache.xbean.XBean element=\"mKahaDB\"\n  */\n-public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter {\n+public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {\n     static final Logger LOG = LoggerFactory.getLogger(MultiKahaDBPersistenceAdapter.class);\n \n     final static ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue(\">\"), new ActiveMQTopic(\">\")});\n@@ -438,12 +438,12 @@ public void init() throws Exception {\n \n     @Override\n     public void setBrokerService(BrokerService brokerService) {\n+        this.brokerService = brokerService;\n         for (PersistenceAdapter persistenceAdapter : adapters) {\n             if( persistenceAdapter instanceof BrokerServiceAware ) {\n                 ((BrokerServiceAware)persistenceAdapter).setBrokerService(getBrokerService());\n             }\n         }\n-        this.brokerService = brokerService;\n     }\n \n     public BrokerService getBrokerService() {",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/70c698f9889d84fd574f324e791c41d8ac75c85a/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java"
            }
        ],
        "repo": "activemq",
        "message": "Fixes NPE that was occurring.",
        "commit": "https://github.com/apache/activemq/commit/70c698f9889d84fd574f324e791c41d8ac75c85a"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/726bc97bae8874ff14fba1bf7ae326ba4c3568f9",
        "bug_id": "activemq_16",
        "file": [
            {
                "additions": 6,
                "sha": "b875fe01974f9941ef1af2a9ab5c4289db79a8bb",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6588aea8e1b5e72a8bc12f6963556632faad8d96/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "deletions": 4,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala?ref=6588aea8e1b5e72a8bc12f6963556632faad8d96",
                "patch": "@@ -1014,10 +1014,12 @@ class LevelDBClient(store: LevelDBStore) {\n           debug(\"Gracefuly closed the index\")\n           copyDirtyIndexToSnapshot\n         }\n-        if (log!=null && log.isOpen) {\n-          log.close\n-          stored_wal_append_position = log.appender_limit\n-          log = null\n+        this synchronized {\n+          if (log!=null && log.isOpen) {\n+            log.close\n+            stored_wal_append_position = log.appender_limit\n+            log = null\n+          }\n         }\n         if( plist!=null ) {\n           plist.close",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/6588aea8e1b5e72a8bc12f6963556632faad8d96/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala"
            },
            {
                "additions": 7,
                "sha": "d0730aed732a566d0f04671af81728815b7f2efb",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6588aea8e1b5e72a8bc12f6963556632faad8d96/activemq-leveldb-store/src/test/java/org/apache/activemq/leveldb/test/ElectingLevelDBStoreTest.java",
                "deletions": 7,
                "filename": "activemq-leveldb-store/src/test/java/org/apache/activemq/leveldb/test/ElectingLevelDBStoreTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/test/java/org/apache/activemq/leveldb/test/ElectingLevelDBStoreTest.java?ref=6588aea8e1b5e72a8bc12f6963556632faad8d96",
                "patch": "@@ -87,16 +87,16 @@ public void testElection() throws Exception {\n         // Start sending messages to the master.\n         ArrayList<String> expected_list = new ArrayList<String>();\n         MessageStore ms = master.createQueueMessageStore(new ActiveMQQueue(\"TEST\"));\n-        final int TOTAL = 500;\n+        final int TOTAL = 2;\n         for (int i = 0; i < TOTAL; i++) {\n-            if (i % ((int) (TOTAL * 0.10)) == 0) {\n+            //if (i % ((int) (TOTAL * 0.10)) == 0) {\n                 LOG.info(\"\" + (100 * i / TOTAL) + \"% done\");\n-            }\n+            //}\n \n-            if( i == 250 ) {\n+            if( i == 1 ) {\n \n-                LOG.info(\"Checking master state\");\n-                assertEquals(expected_list, getMessages(ms));\n+                //LOG.info(\"Checking master state\");\n+                //assertEquals(expected_list, getMessages(ms));\n \n                 // mid way, lets kill the master..\n                 LOG.info(\"Killing Master.\");\n@@ -141,7 +141,7 @@ public void testElection() throws Exception {\n         assertEquals(expected_list, messagesInStore);\n     }\n \n-    @Test(timeout = 1000 * 60 * 10)\n+    //@Test(timeout = 1000 * 60 * 10)\n     public void testZooKeeperServerFailure() throws Exception {\n \n         final ArrayList<ElectingLevelDBStore> stores = new ArrayList<ElectingLevelDBStore>();",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/6588aea8e1b5e72a8bc12f6963556632faad8d96/activemq-leveldb-store/src/test/java/org/apache/activemq/leveldb/test/ElectingLevelDBStoreTest.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid npe causing hang on shutdown, sync shutdown of log",
        "commit": "https://github.com/apache/activemq/commit/6588aea8e1b5e72a8bc12f6963556632faad8d96"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/838bbebeeba7e217cafa0f081d125efdc9faf0ad",
        "bug_id": "activemq_17",
        "file": [
            {
                "additions": 7,
                "sha": "74b1039f79ae6b4df3c08149f421341235aa86f6",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/57fc29b6ce5b80930021733c313862b817e6b537/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionMetaData.java",
                "deletions": 5,
                "filename": "activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionMetaData.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionMetaData.java?ref=57fc29b6ce5b80930021733c313862b817e6b537",
                "patch": "@@ -43,11 +43,13 @@\n             Package p = Package.getPackage(\"org.apache.activemq\");\n             if (p != null) {\n                 version = p.getImplementationVersion();\n-                Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+).*\");\n-                Matcher m = pattern.matcher(version);\n-                if (m.matches()) {\n-                    major = Integer.parseInt(m.group(1));\n-                    minor = Integer.parseInt(m.group(2));\n+                if (version != null) {\n+                    Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+).*\");\n+                    Matcher m = pattern.matcher(version);\n+                    if (m.matches()) {\n+                        major = Integer.parseInt(m.group(1));\n+                        minor = Integer.parseInt(m.group(2));\n+                    }\n                 }\n             }\n         } catch (Throwable e) {",
                "changes": 12,
                "blob_url": "https://github.com/apache/activemq/blob/57fc29b6ce5b80930021733c313862b817e6b537/activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionMetaData.java"
            }
        ],
        "repo": "activemq",
        "message": "remove npe when no jars on classpath, in ide",
        "commit": "https://github.com/apache/activemq/commit/57fc29b6ce5b80930021733c313862b817e6b537"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ad00e1fe52bba3efab77f528712953fa8e9666ca",
        "bug_id": "activemq_18",
        "file": [
            {
                "additions": 7,
                "sha": "f701ebccdeb97049af673f3071d7f220fb4002e6",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f58683ea07c49aa567a3dc888b12b7de92918ed6/activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java",
                "deletions": 6,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java?ref=f58683ea07c49aa567a3dc888b12b7de92918ed6",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import javax.jms.Connection;\n import javax.jms.InvalidSelectorException;\n@@ -355,15 +356,14 @@ public String sendTextMessage(Map<String, String> headers, String body, String u\n         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUrl);\n         Connection connection = null;\n         try {\n-\n             connection = cf.createConnection(userName, password);\n             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n             MessageProducer producer = session.createProducer(dest);\n             ActiveMQTextMessage msg = (ActiveMQTextMessage) session.createTextMessage(body);\n \n-            for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {\n-                Map.Entry entry = (Map.Entry) iter.next();\n-                msg.setObjectProperty((String) entry.getKey(), entry.getValue());\n+            for (Iterator<Entry<String, String>> iter = headers.entrySet().iterator(); iter.hasNext();) {\n+                Entry<String, String> entry = iter.next();\n+                msg.setObjectProperty(entry.getKey(), entry.getValue());\n             }\n \n             producer.setDeliveryMode(msg.getJMSDeliveryMode());\n@@ -383,9 +383,10 @@ public String sendTextMessage(Map<String, String> headers, String body, String u\n             return msg.getJMSMessageID();\n \n         } finally {\n-            connection.close();\n+            if (connection != null) {\n+                connection.close();\n+            }\n         }\n-\n     }\n \n     @Override",
                "changes": 13,
                "blob_url": "https://github.com/apache/activemq/blob/f58683ea07c49aa567a3dc888b12b7de92918ed6/activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5959\n\nAdd check to avoid NPE",
        "commit": "https://github.com/apache/activemq/commit/f58683ea07c49aa567a3dc888b12b7de92918ed6"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/3826a23ed5e77115170f3ac57dc2385234473f1b",
        "bug_id": "activemq_19",
        "file": [
            {
                "additions": 11,
                "sha": "4d00415c45fdf084001ef6de5a1e6d1191ee1138",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/dea05884710b451bbdf74d91719e7c8be95af7b4/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java",
                "deletions": 1,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java?ref=dea05884710b451bbdf74d91719e7c8be95af7b4",
                "patch": "@@ -19,12 +19,16 @@\n import javax.jms.Connection;\n \n import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * \n  */\n public class JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest extends JmsTopicSendReceiveWithTwoConnectionsTest {\n-\n+    protected static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.class);\n     protected PooledConnectionFactory senderConnectionFactory = new PooledConnectionFactory(\"vm://localhost?broker.persistent=false\");\n \n     protected Connection createSendConnection() throws Exception {\n@@ -41,4 +45,10 @@ protected void tearDown() throws Exception {\n         senderConnectionFactory.stop();\n     }\n \n+    @Override   // TODO remove this method when AMQ-4991 is fixed\n+    @Ignore(\"See AMQ-4991\") // Ignore doesn't really work here with JUnit3 runner, just adding as documentation\n+    public void testSendReceive() throws Exception {\n+        //super.testSendReceive();\n+    }\n+\n }",
                "changes": 12,
                "blob_url": "https://github.com/apache/activemq/blob/dea05884710b451bbdf74d91719e7c8be95af7b4/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java"
            }
        ],
        "repo": "activemq",
        "message": "Added @Ignore to testSendReceive because of NPE.  See AMQ-4991",
        "commit": "https://github.com/apache/activemq/commit/dea05884710b451bbdf74d91719e7c8be95af7b4"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/13ec9949397848c57653845b35e8003f8c490ebd",
        "bug_id": "activemq_20",
        "file": [
            {
                "additions": 1,
                "sha": "1a9949e807b1f5eb4ea0fb2824b0ba0b5bc4c819",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/67ae2bd8a486d065495eff97997c33cd7cf9f160/activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java",
                "deletions": 0,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java?ref=67ae2bd8a486d065495eff97997c33cd7cf9f160",
                "patch": "@@ -657,6 +657,7 @@ public boolean isDuplicate(MessageId id) {\n                 for (Message message : toExpire) {\n                     for (DurableTopicSubscription sub : durableSubscribers.values()) {\n                         if (!sub.isActive()) {\n+                            message.setRegionDestination(this);\n                             messageExpired(connectionContext, sub, message);\n                         }\n                     }",
                "changes": 1,
                "blob_url": "https://github.com/apache/activemq/blob/67ae2bd8a486d065495eff97997c33cd7cf9f160/activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-6070 - fix npe in org.apache.activemq.usecases.ExpiredMessagesWithNoConsumerTest#testExpireMessagesForDurableSubscriber",
        "commit": "https://github.com/apache/activemq/commit/67ae2bd8a486d065495eff97997c33cd7cf9f160"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/6a2ffca57e72a92fa90eed578d9be15be59686a3",
        "bug_id": "activemq_21",
        "file": [
            {
                "additions": 17,
                "sha": "bb4e0b2bc8d5f3e7c04869eb409197011e26078a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/1271d2ea032f234e7c83301a52845ed001c5831a/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "deletions": 5,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java?ref=1271d2ea032f234e7c83301a52845ed001c5831a",
                "patch": "@@ -46,8 +46,9 @@\n     private String noSpaceMessage = \"space\";\n     private String sqlExceptionMessage = \"\"; // match all\n     private long resumeCheckSleepPeriod = 5*1000;\n-    private AtomicBoolean handlingException = new AtomicBoolean(false);\n+    private final AtomicBoolean handlingException = new AtomicBoolean(false);\n \n+    @Override\n     public void handle(IOException exception) {\n         if (ignoreAllErrors) {\n             LOG.info(\"Ignoring IO exception, \" + exception, exception);\n@@ -69,10 +70,17 @@ public void handle(IOException exception) {\n         if (ignoreSQLExceptions) {\n             Throwable cause = exception;\n             while (cause != null) {\n-                String message = cause.getMessage();\n-                if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {\n-                    LOG.info(\"Ignoring SQLException, \" + exception, cause);\n-                    return;\n+                if (cause instanceof SQLException) {\n+                    String message = cause.getMessage();\n+\n+                    if (message == null) {\n+                        message = \"\";\n+                    }\n+\n+                    if (message.contains(sqlExceptionMessage)) {\n+                        LOG.info(\"Ignoring SQLException, \" + exception, cause);\n+                        return;\n+                    }\n                 }\n                 cause = cause.getCause();\n             }\n@@ -83,6 +91,7 @@ public void handle(IOException exception) {\n                 LOG.info(\"Initiating stop/restart of transports on \" + broker + \" due to IO exception, \" + exception, exception);\n \n                 new Thread(\"IOExceptionHandler: stop transports\") {\n+                    @Override\n                     public void run() {\n                         try {\n                             ServiceStopper stopper = new ServiceStopper();\n@@ -93,6 +102,7 @@ public void run() {\n                         } finally {\n                             // resume again\n                             new Thread(\"IOExceptionHandler: restart transports\") {\n+                                @Override\n                                 public void run() {\n                                     try {\n                                         while (hasLockOwnership() && isPersistenceAdapterDown()) {\n@@ -154,6 +164,7 @@ private boolean isPersistenceAdapterDown() {\n     private void stopBroker(Exception exception) {\n         LOG.info(\"Stopping \" + broker + \" due to exception, \" + exception, exception);\n         new Thread(\"IOExceptionHandler: stopping \" + broker) {\n+            @Override\n             public void run() {\n                 try {\n                     if( broker.isRestartAllowed() ) {\n@@ -171,6 +182,7 @@ protected boolean hasLockOwnership() throws IOException {\n         return true;\n     }\n \n+    @Override\n     public void setBrokerService(BrokerService broker) {\n         this.broker = broker;\n     }",
                "changes": 22,
                "blob_url": "https://github.com/apache/activemq/blob/1271d2ea032f234e7c83301a52845ed001c5831a/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5758\n\nFix for potential NPE.",
        "commit": "https://github.com/apache/activemq/commit/1271d2ea032f234e7c83301a52845ed001c5831a"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/35df815fb86d201e63b4f0f2d53bee3bae5c0752",
        "bug_id": "activemq_22",
        "file": [
            {
                "additions": 9,
                "sha": "cef252009f8e32127088bebfe67622bac8219ea1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455a628305dc49476d7033701901d119db3fffdb/activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "deletions": 4,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=455a628305dc49476d7033701901d119db3fffdb",
                "patch": "@@ -658,13 +658,18 @@ public void run() {\n     }\n \n     private void doStartPersistenceAdapter() throws Exception {\n-        getPersistenceAdapter().setUsageManager(getProducerSystemUsage());\n-        getPersistenceAdapter().setBrokerName(getBrokerName());\n-        LOG.info(\"Using Persistence Adapter: {}\", getPersistenceAdapter());\n+        PersistenceAdapter persistenceAdapterToStart = getPersistenceAdapter();\n+        if (persistenceAdapterToStart == null) {\n+            checkStartException();\n+            throw new ConfigurationException(\"Cannot start null persistence adapter\");\n+        }\n+        persistenceAdapterToStart.setUsageManager(getProducerSystemUsage());\n+        persistenceAdapterToStart.setBrokerName(getBrokerName());\n+        LOG.info(\"Using Persistence Adapter: {}\", persistenceAdapterToStart);\n         if (deleteAllMessagesOnStartup) {\n             deleteAllMessages();\n         }\n-        getPersistenceAdapter().start();\n+        persistenceAdapterToStart.start();\n \n         getTempDataStore();\n         if (tempDataStore != null) {",
                "changes": 13,
                "blob_url": "https://github.com/apache/activemq/blob/455a628305dc49476d7033701901d119db3fffdb/activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java"
            },
            {
                "additions": 3,
                "sha": "8ea0af80188b67c4c540e40b16a3e6f9239b88c2",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455a628305dc49476d7033701901d119db3fffdb/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/StartAndConcurrentStopBrokerTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/usecases/StartAndConcurrentStopBrokerTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/StartAndConcurrentStopBrokerTest.java?ref=455a628305dc49476d7033701901d119db3fffdb",
                "patch": "@@ -46,6 +46,7 @@\n import javax.management.QueryExp;\n import javax.management.ReflectionException;\n import javax.management.loading.ClassLoaderRepository;\n+import org.apache.activemq.ConfigurationException;\n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.broker.BrokerStoppedException;\n import org.junit.Test;\n@@ -286,6 +287,7 @@ public void run() {\n                     broker.getManagementContext().setMBeanServer(mBeanServer);\n                     broker.start();\n                 } catch (BrokerStoppedException expected) {\n+                } catch (ConfigurationException expected) {\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                     error.set(e);\n@@ -330,6 +332,7 @@ public void run() {\n                     brokerTwo.getManagementContext().setMBeanServer(mBeanServer);\n                     brokerTwo.start();\n                 } catch (BrokerStoppedException expected) {\n+                } catch (ConfigurationException expected) {\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                     error.set(e);",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/455a628305dc49476d7033701901d119db3fffdb/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/StartAndConcurrentStopBrokerTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-6086 - avoid logging npe on attempted start of persistence adapter post stop",
        "commit": "https://github.com/apache/activemq/commit/455a628305dc49476d7033701901d119db3fffdb"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2050498c6788a925efa24630803328286468c079",
        "bug_id": "activemq_23",
        "file": [
            {
                "additions": 14,
                "sha": "75bd6feb064f1bf928b5bed09c38b57085654eb4",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java",
                "deletions": 12,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java?ref=243db1c289e8e1394adc7751a7a545af6df06fc9",
                "patch": "@@ -171,7 +171,7 @@ public void start() throws Exception {\n     public void stop() throws Exception {\n         // Only need to do this once, all future oneway calls will now\n         // fail as will any asnyc jobs in the task runner.\n-        if (disposed.compareAndSet(false, true) && started.get()) {\n+        if (disposed.compareAndSet(false, true)) {\n \n             TaskRunner tr = taskRunner;\n             LinkedBlockingQueue<Object> mq = this.messageQueue;\n@@ -193,18 +193,20 @@ public void stop() throws Exception {\n                 tr = null;\n             }\n \n-            // let the peer know that we are disconnecting after attempting\n-            // to cleanly shutdown the async tasks so that this is the last\n-            // command it see's.\n-            try {\n-                peer.transportListener.onCommand(new ShutdownInfo());\n-            } catch (Exception ignore) {\n-            }\n+            if (peer.transportListener != null) {\n+                // let the peer know that we are disconnecting after attempting\n+                // to cleanly shutdown the async tasks so that this is the last\n+                // command it see's.\n+                try {\n+                    peer.transportListener.onCommand(new ShutdownInfo());\n+                } catch (Exception ignore) {\n+                }\n \n-            // let any requests pending a response see an exception\n-            try {\n-                peer.transportListener.onException(new TransportDisposedIOException(\"peer (\" + this + \") stopped.\"));\n-            } catch (Exception ignore) {\n+                // let any requests pending a response see an exception\n+                try {\n+                    peer.transportListener.onException(new TransportDisposedIOException(\"peer (\" + this + \") stopped.\"));\n+                } catch (Exception ignore) {\n+                }\n             }\n \n             // shutdown task runner factory",
                "changes": 26,
                "blob_url": "https://github.com/apache/activemq/blob/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java"
            },
            {
                "additions": 2,
                "sha": "dfb5dfde47a42851823d3e9ddd6abe2218296dd1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/AMQ1925Test.java",
                "deletions": 2,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/AMQ1925Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/AMQ1925Test.java?ref=243db1c289e8e1394adc7751a7a545af6df06fc9",
                "patch": "@@ -266,7 +266,7 @@ public void testAMQ1925_TXBegin() throws Exception {\n \n \t\tboolean restartDone = false;\n \t\tfor (int i = 0; i < MESSAGE_COUNT; i++) {\n-\t\t\tMessage message = consumer.receive(500);\n+\t\t\tMessage message = consumer.receive(5000);\n \t\t\tassertNotNull(message);\n \n \t\t\tif (i == 222 && !restartDone) {\n@@ -307,7 +307,7 @@ public void testAMQ1925_TXCommited() throws Exception {\n \t\t\t\t.createQueue(QUEUE_NAME));\n \n \t\tfor (int i = 0; i < MESSAGE_COUNT; i++) {\n-\t\t\tMessage message = consumer.receive(500);\n+\t\t\tMessage message = consumer.receive(5000);\n \t\t\tassertNotNull(message);\n \n \t\t\tassertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-unit-tests/src/test/java/org/apache/activemq/transport/failover/AMQ1925Test.java"
            },
            {
                "additions": 3,
                "sha": "29b6e7297c651ca831f60f73e2a35239b283534c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/QueueBrowsingTest.java",
                "deletions": 1,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/usecases/QueueBrowsingTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/QueueBrowsingTest.java?ref=243db1c289e8e1394adc7751a7a545af6df06fc9",
                "patch": "@@ -17,6 +17,8 @@\n package org.apache.activemq.usecases;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n \n import java.io.IOException;\n import java.net.URI;\n@@ -209,6 +211,6 @@ public void testMemoryLimit() throws Exception {\n         }\n \n         browser.close();\n-        assertEquals(maxPageSize + 1, received);\n+        assertTrue(\"got at least maxPageSize\", received >= maxPageSize);\n     }\n }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/243db1c289e8e1394adc7751a7a545af6df06fc9/activemq-unit-tests/src/test/java/org/apache/activemq/usecases/QueueBrowsingTest.java"
            }
        ],
        "repo": "activemq",
        "message": "rework npe avoidance in vmtransport stop to resolve thread leakage test failure",
        "commit": "https://github.com/apache/activemq/commit/243db1c289e8e1394adc7751a7a545af6df06fc9"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ad770ea79d9eaf9e40216ed2e116b2544fcd8e3e",
        "bug_id": "activemq_24",
        "file": [
            {
                "additions": 1,
                "sha": "ef1b1e2d0f38ed30b70565b9449c23d21557adb7",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a56996dd6cc1249223899555ae2e6c66d7acb9e2/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java",
                "deletions": 1,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java?ref=a56996dd6cc1249223899555ae2e6c66d7acb9e2",
                "patch": "@@ -171,7 +171,7 @@ public void start() throws Exception {\n     public void stop() throws Exception {\n         // Only need to do this once, all future oneway calls will now\n         // fail as will any asnyc jobs in the task runner.\n-        if (disposed.compareAndSet(false, true)) {\n+        if (disposed.compareAndSet(false, true) && started.get()) {\n \n             TaskRunner tr = taskRunner;\n             LinkedBlockingQueue<Object> mq = this.messageQueue;",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/a56996dd6cc1249223899555ae2e6c66d7acb9e2/activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid npe on network bridge failure, dispose when not started on vm transport",
        "commit": "https://github.com/apache/activemq/commit/a56996dd6cc1249223899555ae2e6c66d7acb9e2"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d1dface01a7b253c6bec17c8ef1187288235357d",
        "bug_id": "activemq_25",
        "file": [
            {
                "additions": 6,
                "sha": "815b9dfe2f56464db10a6f09eb026556a354810d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f4a2543def0d7240fc97f850a53f6be48dc74562/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 4,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=f4a2543def0d7240fc97f850a53f6be48dc74562",
                "patch": "@@ -1348,10 +1348,12 @@ long updateIndex(Transaction tx, KahaAddMessageCommand command, Location locatio\n             sd.locationIndex.put(tx, location, previous);\n             metadata.lastUpdate = location;\n             // remove ack positions\n-            Iterator<Entry<String, SequenceSet>> it = sd.ackPositions.iterator(tx);\n-            while (it.hasNext()) {\n-                Entry<String, SequenceSet> entry = it.next();\n-                entry.getValue().remove(id);\n+            if (sd.subscriptions != null && !sd.subscriptions.isEmpty(tx)) {\n+                Iterator<Entry<String, SequenceSet>> it = sd.ackPositions.iterator(tx);\n+                while (it.hasNext()) {\n+                    Entry<String, SequenceSet> entry = it.next();\n+                    entry.getValue().remove(id);\n+                }\n             }\n \n         }",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/f4a2543def0d7240fc97f850a53f6be48dc74562/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5960 - durable sub pendingQueueSize after force shutdown - fix npe test failure",
        "commit": "https://github.com/apache/activemq/commit/f4a2543def0d7240fc97f850a53f6be48dc74562"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4a2af3ab072c67408e477f3e41388310f8f414db",
        "bug_id": "activemq_26",
        "file": [
            {
                "additions": 2,
                "sha": "2242d7380b2558b757e23c49aca1c537110e8c9d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c391321d1b5b59542d847717654b0d4dba54cf2f/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "deletions": 0,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=c391321d1b5b59542d847717654b0d4dba54cf2f",
                "patch": "@@ -348,6 +348,7 @@ private void collectBrokerInfos() {\n             remoteBrokerInfo = futureRemoteBrokerInfo.get();\n             if (remoteBrokerInfo == null) {\n                 fireBridgeFailed();\n+                return;\n             }\n         } catch (Exception e) {\n             serviceRemoteException(e);\n@@ -358,6 +359,7 @@ private void collectBrokerInfos() {\n             localBrokerInfo = futureLocalBrokerInfo.get();\n             if (localBrokerInfo == null) {\n                 fireBridgeFailed();\n+                return;\n             }\n \n             // Before we try and build the bridge lets check if we are in a loop",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c391321d1b5b59542d847717654b0d4dba54cf2f/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5315\n\nFix for potential NPE on transport error.",
        "commit": "https://github.com/apache/activemq/commit/c391321d1b5b59542d847717654b0d4dba54cf2f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/47ebd80b6ba3cf2e753a47cab4bbff9576e840f7",
        "bug_id": "activemq_27",
        "file": [
            {
                "additions": 6,
                "sha": "4ca23c370f01e0301a7d80e2a025b4cf71f9a0b3",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java",
                "deletions": 2,
                "filename": "activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java?ref=5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.activemq.broker.region.Subscription;\n import org.apache.activemq.broker.region.TopicRegion;\n import org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy;\n+import org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor;\n import org.apache.activemq.command.ActiveMQBytesMessage;\n import org.apache.activemq.command.ActiveMQDestination;\n import org.apache.activemq.command.ActiveMQMapMessage;\n@@ -500,7 +501,11 @@ private void resendRetainedMessages(String topicName, ActiveMQDestination destin\n             for (Subscription subscription : dest.getConsumers()) {\n                 if (subscription.getConsumerInfo().getConsumerId().equals(consumerId)) {\n                     try {\n-                        ((org.apache.activemq.broker.region.Topic)dest).recoverRetroactiveMessages(connectionContext, subscription);\n+                        if (dest instanceof org.apache.activemq.broker.region.Topic) {\n+                            ((org.apache.activemq.broker.region.Topic)dest).recoverRetroactiveMessages(connectionContext, subscription);\n+                        } else if (dest instanceof VirtualTopicInterceptor) {\n+                            ((VirtualTopicInterceptor)dest).getTopic().recoverRetroactiveMessages(connectionContext, subscription);\n+                        }\n                         if (subscription instanceof PrefetchSubscription) {\n                             // request dispatch for prefetch subs\n                             PrefetchSubscription prefetchSubscription = (PrefetchSubscription) subscription;\n@@ -917,7 +922,6 @@ private String convertMQTTToActiveMQ(String name) {\n                 case '>':\n                     chars[i] = '#';\n                     break;\n-\n                 case '+':\n                     chars[i] = '*';\n                     break;",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java"
            },
            {
                "additions": 3,
                "sha": "c4571dc500a0fc070c20b71dce52b6bbaca5191f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
                "deletions": 4,
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java?ref=5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468",
                "patch": "@@ -518,14 +518,14 @@ public void testRetainedMessage() throws Exception {\n             assertEquals(RETAIN, new String(msg.getPayload()));\n             msg.ack();\n             assertNull(connection.receive(500, TimeUnit.MILLISECONDS));\n-            connection.unsubscribe(new String[]{\"TopicA\"});\n+            connection.unsubscribe(new String[]{TOPICA});\n \n             // clear retained message and check that we don't receive it\n             connection.publish(TOPICA, \"\".getBytes(), QoS.AT_MOST_ONCE, true);\n             connection.subscribe(new Topic[]{new Topic(TOPICA, QoS.AT_LEAST_ONCE)});\n             msg = connection.receive(500, TimeUnit.MILLISECONDS);\n             assertNull(\"Retained message not cleared for \" + clientId, msg);\n-            connection.unsubscribe(new String[]{\"TopicA\"});\n+            connection.unsubscribe(new String[]{TOPICA});\n \n             // set retained message again and check\n             connection.publish(TOPICA, RETAIN.getBytes(), QoS.EXACTLY_ONCE, true);\n@@ -547,8 +547,7 @@ public void testRetainedMessage() throws Exception {\n             msg.ack();\n             assertNull(connection.receive(500, TimeUnit.MILLISECONDS));\n \n-            connection.unsubscribe(new String[]{\"TopicA\"});\n-\n+            connection.unsubscribe(new String[]{TOPICA});\n             connection.disconnect();\n         }\n     }",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5298\n\nFix the NPE case",
        "commit": "https://github.com/apache/activemq/commit/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c34851fd57bc7ef3fc2c847d71ae4cd8f32670e3",
        "bug_id": "activemq_28",
        "file": [
            {
                "additions": 2,
                "sha": "3d6178bcea3cb0799500704f50c06396da29954a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "deletions": 3,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -880,7 +880,7 @@ class LevelDBClient(store: LevelDBStore) {\n         index.put(key, baos.toByteArray)\n       }\n       catch {\n-        case e => throw e\n+        case e : Throwable => throw e\n       }\n     }\n     def storeList[T <: AnyRef](key:Array[Byte], list:Array[Long]) {\n@@ -895,7 +895,7 @@ class LevelDBClient(store: LevelDBStore) {\n         index.put(key, baos.toByteArray)\n       }\n       catch {\n-        case e => throw e\n+        case e : Throwable => throw e\n       }\n     }\n     def storeObject(key:Array[Byte], o:Object) = {\n@@ -1657,7 +1657,6 @@ class LevelDBClient(store: LevelDBStore) {\n     }\n \n     import collection.JavaConversions._\n-    lastIndexSnapshotPos\n \n     // drop the logs that are no longer referenced.\n     for( (x,y) <- logRefs.toSeq ) {",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala"
            },
            {
                "additions": 15,
                "sha": "04eaf1673050df628a376a8c27e058607f83bd57",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala",
                "deletions": 1,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -314,7 +314,7 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n     return 0\n   }\n \n-  def createTransactionStore = this\n+  def createTransactionStore = new LevelDBTransactionStore(this)\n \n   val transactions = new ConcurrentHashMap[TransactionId, Transaction]()\n \n@@ -1021,6 +1021,20 @@ class LevelDBStore extends LockableServiceSupport with BrokerServiceAware with P\n \n   }\n \n+  class LevelDBTransactionStore(val store:LevelDBStore) extends TransactionStore {\n+    def start() = {}\n+\n+    def stop() = {}\n+\n+    def prepare(txid: TransactionId) = store.prepare(txid)\n+\n+    def commit(txid: TransactionId, wasPrepared: Boolean, preCommit: Runnable, postCommit: Runnable) = store.commit(txid, wasPrepared, preCommit, postCommit)\n+\n+    def rollback(txid: TransactionId) = store.rollback(txid)\n+\n+    def recover(listener: TransactionRecoveryListener) = store.recover(listener)\n+  }\n+\n   ///////////////////////////////////////////////////////////////////////////\n   // The following methods actually have nothing to do with JMS txs... It's more like\n   // operation batch.. we handle that in the DBManager tho..",
                "changes": 16,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBStore.scala"
            },
            {
                "additions": 6,
                "sha": "87209878ab197b119f79b18e214ca54131f736bc",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "deletions": 6,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -132,27 +132,27 @@ class SlaveLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n   }\n \n   def stop_connections(cb:Task) = {\n-    var then = ^{\n+    var task = ^{\n       unstash(directory)\n       cb.run()\n     }\n     val wal_session_copy = wal_session\n     if( wal_session_copy !=null ) {\n       wal_session = null\n-      val next = then\n-      then = ^{\n+      val next = task\n+      task = ^{\n         wal_session_copy.transport.stop(next)\n       }\n     }\n     val transfer_session_copy = transfer_session\n     if( transfer_session_copy !=null ) {\n       transfer_session = null\n-      val next = then\n-      then = ^{\n+      val next = task\n+      task = ^{\n         transfer_session_copy.transport.stop(next)\n       }\n     }\n-    then.run();\n+    task.run();\n   }\n \n ",
                "changes": 12,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala"
            },
            {
                "additions": 2,
                "sha": "a66d7b31530837d3b34a6cd1aba9496d61975f42",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/groups/ClusteredSingleton.scala",
                "deletions": 1,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/groups/ClusteredSingleton.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/groups/ClusteredSingleton.scala?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -27,6 +27,7 @@ import java.lang.{IllegalStateException, String}\n import beans.BeanProperty\n import com.fasterxml.jackson.annotation.JsonProperty\n import org.apache.zookeeper.KeeperException.NoNodeException\n+import scala.reflect.ClassTag\n \n /**\n  * @author <a href=\"http://hiramchirino.com\">Hiram Chirino</a>\n@@ -162,7 +163,7 @@ class ClusteredSingletonWatcher[T <: NodeState](val stateClass:Class[T]) extends\n   }\n \n   def masters = this.synchronized {\n-    _members.mapValues(_.head._2).toArray.map(_._2).toArray(new ClassManifest[T] {\n+    _members.mapValues(_.head._2).toArray.map(_._2).toArray(new ClassTag[T] {\n       def runtimeClass = stateClass\n       override def erasure = stateClass\n     })",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/groups/ClusteredSingleton.scala"
            },
            {
                "additions": 3,
                "sha": "b004c8c994dd9ce990a299497be79518dc92493c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/util/FileSupport.scala",
                "deletions": 3,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/util/FileSupport.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/util/FileSupport.scala?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -252,7 +252,7 @@ object ProcessSupport {\n               FileSupport.copy(in, out)\n             }\n           } catch {\n-            case _ =>\n+            case _ : Throwable =>\n           }\n         }\n       } else {\n@@ -266,7 +266,7 @@ object ProcessSupport {\n               FileSupport.copy(in, out)\n             }\n           } catch {\n-            case _ =>\n+            case _ : Throwable =>\n           }\n         }\n       } else {\n@@ -280,7 +280,7 @@ object ProcessSupport {\n               FileSupport.copy(in, err)\n             }\n           } catch {\n-            case _ =>\n+            case _ : Throwable =>\n           }\n         }\n       } else {",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/util/FileSupport.scala"
            },
            {
                "additions": 80,
                "sha": "e0c7609f43d3c700f7f94d69bf9151bd5bb37691",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/test/scala/org/apache/activemq/leveldb/test/PListTest.java",
                "deletions": 0,
                "filename": "activemq-leveldb-store/src/test/scala/org/apache/activemq/leveldb/test/PListTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/test/scala/org/apache/activemq/leveldb/test/PListTest.java?ref=3c69127524048d358eb467aff98b61e1a30e0d69",
                "patch": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.leveldb.test;\n+\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.activemq.leveldb.LevelDBStore;\n+import org.apache.activemq.store.PersistenceAdapter;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.jms.Connection;\n+import javax.jms.DeliveryMode;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import java.io.File;\n+\n+public class PListTest {\n+\n+    protected BrokerService brokerService;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        brokerService = new BrokerService();\n+        brokerService.addConnector(\"tcp://localhost:0\");\n+\n+        LevelDBStore store = new LevelDBStore();\n+        store.setDirectory(new File(\"target/activemq-data/haleveldb\"));\n+        store.deleteAllMessages();\n+        brokerService.setPersistenceAdapter(store);\n+\n+        PolicyMap policyMap = new PolicyMap();\n+        PolicyEntry policy = new PolicyEntry();\n+        policy.setMemoryLimit(1);\n+        policyMap.setDefaultEntry(policy);\n+        brokerService.setDestinationPolicy(policyMap);\n+\n+        brokerService.start();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (brokerService != null && brokerService.isStopped()) {\n+            brokerService.stop();\n+        }\n+    }\n+\n+    @Test\n+    public void testBrokerStop() throws Exception {\n+        ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getServer().getConnectURI().toString());\n+        Connection conn = factory.createConnection();\n+        Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+        MessageProducer producer = sess.createProducer(sess.createQueue(\"TEST\"));\n+        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+        for (int i = 0; i < 10000; i++) {\n+            producer.send(sess.createTextMessage(i + \" message\"));\n+        }\n+        brokerService.stop();\n+        brokerService.waitUntilStopped();\n+    }\n+\n+}",
                "changes": 80,
                "blob_url": "https://github.com/apache/activemq/blob/3c69127524048d358eb467aff98b61e1a30e0d69/activemq-leveldb-store/src/test/scala/org/apache/activemq/leveldb/test/PListTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-4349 - stopping leveldb throws NPE",
        "commit": "https://github.com/apache/activemq/commit/3c69127524048d358eb467aff98b61e1a30e0d69"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/08bb172f3c6fc39e5164b5ee8f875a809faa126b",
        "bug_id": "activemq_29",
        "file": [
            {
                "additions": 1,
                "sha": "0ed08e44190349a70ff930bff4d9c3546d802c2c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76/activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java",
                "deletions": 1,
                "filename": "activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java?ref=fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76",
                "patch": "@@ -863,7 +863,7 @@ public void onActiveMQCommand(Command command) throws IOException, JMSException\n             StompSubscription sub = subscriptionsByConsumerId.get(md.getConsumerId());\n             if (sub != null) {\n                 String ackId = null;\n-                if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO) {\n+                if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO && md.getMessage() != null) {\n                     AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);\n                     ackId = this.ACK_ID_GENERATOR.generateId();\n                     this.pedingAcks.put(ackId, pendingAck);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76/activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java"
            },
            {
                "additions": 34,
                "sha": "23e0754314cd2ae099981c0ce9e866047d2a7245",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java",
                "deletions": 0,
                "filename": "activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java?ref=fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76",
                "patch": "@@ -424,4 +424,38 @@ public void testQueueBrowerSubscription() throws Exception {\n         stompConnection.sendFrame(frame);\n     }\n \n+    @Test\n+    public void testQueueBrowerNotInAutoAckMode() throws Exception {\n+        String connectFrame = \"STOMP\\n\" +\n+                              \"login:system\\n\" +\n+                              \"passcode:manager\\n\" +\n+                              \"accept-version:1.2\\n\" +\n+                              \"host:localhost\\n\" +\n+                              \"\\n\" + Stomp.NULL;\n+\n+        stompConnection.sendFrame(connectFrame);\n+\n+        String f = stompConnection.receiveFrame();\n+        LOG.debug(\"Broker sent: \" + f);\n+        assertTrue(f.startsWith(\"CONNECTED\"));\n+\n+        String subscribe = \"SUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +\n+                           \"ack:client\\n\" + \"id:12345\\n\" + \"browser:true\\n\\n\" + Stomp.NULL;\n+        stompConnection.sendFrame(subscribe);\n+\n+        // We should now get a browse done message\n+        StompFrame browseDone = stompConnection.receive();\n+        LOG.debug(\"Browse Done: \" + browseDone.toString());\n+        assertEquals(Stomp.Responses.MESSAGE, browseDone.getAction());\n+        assertEquals(\"12345\", browseDone.getHeaders().get(Stomp.Headers.Message.SUBSCRIPTION));\n+        assertEquals(\"end\", browseDone.getHeaders().get(Stomp.Headers.Message.BROWSER));\n+        assertTrue(browseDone.getHeaders().get(Stomp.Headers.Message.DESTINATION) != null);\n+\n+        String unsub = \"UNSUBSCRIBE\\n\" + \"destination:/queue/\" + getQueueName() + \"\\n\" +\n+                       \"id:12345\\n\\n\" + Stomp.NULL;\n+        stompConnection.sendFrame(unsub);\n+\n+        String frame = \"DISCONNECT\\n\" + \"\\n\\n\" + Stomp.NULL;\n+        stompConnection.sendFrame(frame);\n+    }\n }",
                "changes": 34,
                "blob_url": "https://github.com/apache/activemq/blob/fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76/activemq-stomp/src/test/java/org/apache/activemq/transport/stomp/Stomp12Test.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5159\n\nFix an NPE condition",
        "commit": "https://github.com/apache/activemq/commit/fdc2551eb8c314602a0cc4d4ded9a7fd15e3ec76"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ec249f4dac29b0b566703b9235f25aacfa2b6ac6",
        "bug_id": "activemq_30",
        "file": [
            {
                "additions": 9,
                "sha": "1e12751f4654c6fafec9dff4ab55710f00eb393a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java",
                "deletions": 9,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java?ref=f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c",
                "patch": "@@ -294,18 +294,18 @@ private boolean isRunning() {\n \n     private void connect() {\n         synchronized ( connectWork ) {\n-        if (!running) {\n-            return;\n-        }\n+            if (!running) {\n+                return;\n+            }\n \n-        try {\n-            workManager.scheduleWork(connectWork, WorkManager.INDEFINITE, null, null);\n-        } catch (WorkException e) {\n-            running = false;\n-            LOG.error(\"Work Manager did not accept work: \", e);\n+            try {\n+                workManager.scheduleWork(connectWork, WorkManager.INDEFINITE, null, null);\n+            } catch (WorkException e) {\n+                running = false;\n+                LOG.error(\"Work Manager did not accept work: \", e);\n+            }\n         }\n     }\n-    }\n \n     /**\n      * ",
                "changes": 18,
                "blob_url": "https://github.com/apache/activemq/blob/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java"
            },
            {
                "additions": 4,
                "sha": "c6d91eff804b936991ad0a679aa015dea2970283",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java",
                "deletions": 1,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java?ref=f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c",
                "patch": "@@ -127,7 +127,10 @@ public int prepare(Xid arg0) throws XAException {\n     }\n \n     public Xid[] recover(int arg0) throws XAException {\n-        return transactionContext.recover(arg0);\n+        Xid[] answer = null;\n+        answer = transactionContext.recover(arg0);\n+        LOG.trace(\"{} recover({}) = {}\", new Object[]{this, arg0, answer});\n+        return answer;\n     }\n \n     public void rollback(Xid arg0) throws XAException {",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java"
            },
            {
                "additions": 7,
                "sha": "25de03d4f1b989dbc11413ce85bef3a561517245",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java",
                "deletions": 1,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java?ref=f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c",
                "patch": "@@ -30,6 +30,7 @@\n import javax.resource.spi.UnavailableException;\n import javax.resource.spi.endpoint.MessageEndpoint;\n \n+import org.apache.activemq.ActiveMQConnection;\n import org.apache.activemq.ActiveMQQueueSession;\n import org.apache.activemq.ActiveMQSession;\n import org.apache.activemq.ActiveMQTopicSession;\n@@ -60,7 +61,12 @@ public ServerSessionPoolImpl(ActiveMQEndpointWorker activeMQAsfEndpointWorker, i\n     private ServerSessionImpl createServerSessionImpl() throws JMSException {\n         MessageActivationSpec activationSpec = activeMQAsfEndpointWorker.endpointActivationKey.getActivationSpec();\n         int acknowledge = (activeMQAsfEndpointWorker.transacted) ? Session.SESSION_TRANSACTED : activationSpec.getAcknowledgeModeForSession();\n-        final ActiveMQSession session = (ActiveMQSession)activeMQAsfEndpointWorker.getConnection().createSession(activeMQAsfEndpointWorker.transacted, acknowledge);\n+        final ActiveMQConnection connection = activeMQAsfEndpointWorker.getConnection();\n+        if (connection == null) {\n+            // redispatch of pending prefetched messages after disconnect can have a null connection\n+            return null;\n+        }\n+        final ActiveMQSession session = (ActiveMQSession)connection.createSession(activeMQAsfEndpointWorker.transacted, acknowledge);\n         MessageEndpoint endpoint;\n         try {\n             int batchSize = 0;",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid ugly npe post endpoint disassociate and add additional trace to recovery",
        "commit": "https://github.com/apache/activemq/commit/f42d56c1f8601d96fa53ff59ce69f9a97dd31e9c"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/190a44bf25a7484e3a0c6178890c953824fbdf3c",
        "bug_id": "activemq_31",
        "file": [
            {
                "additions": 9,
                "sha": "685bb60b6d943b52840fd2eaecdaa9ced9418494",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a059bf4a9013539899bfdf49aebd868b867e2b82/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java",
                "deletions": 2,
                "filename": "activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java?ref=a059bf4a9013539899bfdf49aebd868b867e2b82",
                "patch": "@@ -63,6 +63,7 @@\n     private final Runnable readChecker = new Runnable() {\n         long lastReceiveTime = System.currentTimeMillis();\n \n+        @Override\n         public void run() {\n \n             long now = System.currentTimeMillis();\n@@ -86,6 +87,7 @@ public void run() {\n                     LOG.debug(\"No message received since last read check for \" + MQTTInactivityMonitor.this.toString() + \"! Throwing InactivityIOException.\");\n                 }\n                 ASYNC_TASKS.execute(new Runnable() {\n+                    @Override\n                     public void run() {\n                         onException(new InactivityIOException(\"Channel was inactive for too (>\" + (readKeepAliveTime+readGraceTime) + \") long: \" + next.getRemoteAddress()));\n                     }\n@@ -102,16 +104,19 @@ public MQTTInactivityMonitor(Transport next, WireFormat wireFormat) {\n         super(next);\n     }\n \n+    @Override\n     public void start() throws Exception {\n         next.start();\n         startMonitorThread();\n     }\n \n+    @Override\n     public void stop() throws Exception {\n         stopMonitorThread();\n         next.stop();\n     }\n \n+    @Override\n     public void onCommand(Object command) {\n         inReceive.set(true);\n         try {\n@@ -121,6 +126,7 @@ public void onCommand(Object command) {\n         }\n     }\n \n+    @Override\n     public void oneway(Object o) throws IOException {\n         // To prevent the inactivity monitor from sending a message while we\n         // are performing a send we take the lock.\n@@ -140,13 +146,13 @@ private void doOnewaySend(Object command) throws IOException {\n         next.oneway(command);\n     }\n \n+    @Override\n     public void onException(IOException error) {\n         if (failed.compareAndSet(false, true)) {\n             stopMonitorThread();\n             if (protocolConverter != null) {\n                 protocolConverter.onTransportError();\n             }\n-            protocolConverter.onTransportError();\n             transportListener.onException(error);\n         }\n     }\n@@ -236,7 +242,8 @@ synchronized void stopMonitorThread() {\n         }\n     }\n \n-    private ThreadFactory factory = new ThreadFactory() {\n+    private final ThreadFactory factory = new ThreadFactory() {\n+        @Override\n         public Thread newThread(Runnable runnable) {\n             Thread thread = new Thread(runnable, \"MQTTInactivityMonitor Async Task: \" + runnable);\n             thread.setDaemon(true);",
                "changes": 11,
                "blob_url": "https://github.com/apache/activemq/blob/a059bf4a9013539899bfdf49aebd868b867e2b82/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5051\n\nfix potential NPE",
        "commit": "https://github.com/apache/activemq/commit/a059bf4a9013539899bfdf49aebd868b867e2b82"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/770539d530acc7fcf38b946318e49c76cab0114b",
        "bug_id": "activemq_32",
        "file": [
            {
                "additions": 1,
                "sha": "175f74de957ff917ceb898d246957e013ea9edac",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/95d20e5b47aeb179493fba5b1f40df9f237538db/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledProducer.java",
                "deletions": 1,
                "filename": "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledProducer.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledProducer.java?ref=95d20e5b47aeb179493fba5b1f40df9f237538db",
                "patch": "@@ -86,7 +86,7 @@ public void send(Destination destination, Message message, int deliveryMode, int\n         // just in case let only one thread send at once\n         synchronized (messageProducer) {\n \n-            if (anonymous && !this.destination.equals(destination)) {\n+            if (anonymous && this.destination != null && !this.destination.equals(destination)) {\n                 throw new UnsupportedOperationException(\"This producer can only send messages to: \" + this.destination);\n             }\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/95d20e5b47aeb179493fba5b1f40df9f237538db/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledProducer.java"
            },
            {
                "additions": 0,
                "sha": "05ba17790a3eaa1737580d5a60a9354720dc0248",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/95d20e5b47aeb179493fba5b1f40df9f237538db/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java",
                "deletions": 7,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java?ref=95d20e5b47aeb179493fba5b1f40df9f237538db",
                "patch": "@@ -44,11 +44,4 @@ protected void tearDown() throws Exception {\n         super.tearDown();\n         senderConnectionFactory.stop();\n     }\n-\n-    @Override   // TODO remove this method when AMQ-4991 is fixed\n-    @Ignore(\"See AMQ-4991\") // Ignore doesn't really work here with JUnit3 runner, just adding as documentation\n-    public void testSendReceive() throws Exception {\n-        //super.testSendReceive();\n-    }\n-\n }",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/95d20e5b47aeb179493fba5b1f40df9f237538db/activemq-unit-tests/src/test/java/org/apache/activemq/pool/JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-4991 - fix npe and reinstate test",
        "commit": "https://github.com/apache/activemq/commit/95d20e5b47aeb179493fba5b1f40df9f237538db"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/9920d70580e02d83bb5f2a472a5e53e177865aac",
        "bug_id": "activemq_33",
        "file": [
            {
                "additions": 4,
                "sha": "e63b234aaf9de6c4ec63dede32108a5721bc8a1d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/4f7235d964be851fc4f00a37ce7bd598077cfd9d/activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java?ref=4f7235d964be851fc4f00a37ce7bd598077cfd9d",
                "patch": "@@ -125,7 +125,10 @@ public void deleteAllMessages() throws IOException {\n                 store.delete();\n             }\n         }\n-        transactionStore.delete();\n+\n+        if (transactionStore != null) {\n+            transactionStore.delete();\n+        }\n     }\n \n     public boolean isUseExternalMessageReferences() {",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/4f7235d964be851fc4f00a37ce7bd598077cfd9d/activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java"
            },
            {
                "additions": 9,
                "sha": "ca9e23d98390dad2d4f470d90a992e3a161afa14",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/java/org/apache/activemq/config/ConfigTest.java",
                "deletions": 0,
                "filename": "assembly/src/test/java/org/apache/activemq/config/ConfigTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/assembly/src/test/java/org/apache/activemq/config/ConfigTest.java?ref=4f7235d964be851fc4f00a37ce7bd598077cfd9d",
                "patch": "@@ -51,6 +51,15 @@\n     protected static final String DERBY_ROOT = \"target/test-data/\";\n     protected static final String CONF_ROOT = \"src/sample-conf/\";\n \n+    static {\n+        System.setProperty(\"javax.net.ssl.trustStore\", \"src/test/resources/client.keystore\");\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"password\");\n+        System.setProperty(\"javax.net.ssl.trustStoreType\", \"jks\");\n+        System.setProperty(\"javax.net.ssl.keyStore\", \"src/test/resources/server.keystore\");\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"password\");\n+        System.setProperty(\"javax.net.ssl.keyStoreType\", \"jks\");\n+    }\n+\n     /*\n      * IMPORTANT NOTE: Assertions checking for the existence of the derby directory will fail if the first derby\n      *                 directory is not created under target/test-data/. The test in unable to change the derby",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/java/org/apache/activemq/config/ConfigTest.java"
            },
            {
                "additions": 0,
                "sha": "85806727779f7b648400bb41b54beecb4f4cf74a",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/resources/client.keystore",
                "deletions": 0,
                "filename": "assembly/src/test/resources/client.keystore",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/assembly/src/test/resources/client.keystore?ref=4f7235d964be851fc4f00a37ce7bd598077cfd9d",
                "changes": 0,
                "blob_url": "https://github.com/apache/activemq/blob/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/resources/client.keystore"
            },
            {
                "additions": 0,
                "sha": "d9223d80a8c5fa04f74d1bb3a5dbd5f276b0588d",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/resources/server.keystore",
                "deletions": 0,
                "filename": "assembly/src/test/resources/server.keystore",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/assembly/src/test/resources/server.keystore?ref=4f7235d964be851fc4f00a37ce7bd598077cfd9d",
                "changes": 0,
                "blob_url": "https://github.com/apache/activemq/blob/4f7235d964be851fc4f00a37ce7bd598077cfd9d/assembly/src/test/resources/server.keystore"
            }
        ],
        "repo": "activemq",
        "message": "- Setup keystores for ssl used by ConfigTest.java\n- Prevented NullPointerException in MemoryPersistenceAdapter\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@386769 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/4f7235d964be851fc4f00a37ce7bd598077cfd9d"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/46bc26cea50f4917ad8ecbf79416a62e5cd4bbb3",
        "bug_id": "activemq_34",
        "file": [
            {
                "additions": 21,
                "sha": "726352b7a5c0d430a284bc1510a428aa17739c0b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0514fcf8826efdba7544034d0000915f25f61437/activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java",
                "deletions": 13,
                "filename": "activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java?ref=0514fcf8826efdba7544034d0000915f25f61437",
                "patch": "@@ -30,8 +30,8 @@\n /**\n  * A simple DiscoveryAgent that allows static configuration of the discovered\n  * services.\n- * \n- * \n+ *\n+ *\n  */\n public class SimpleDiscoveryAgent implements DiscoveryAgent {\n \n@@ -53,33 +53,36 @@\n         private int connectFailures;\n         private long reconnectDelay = initialReconnectDelay;\n         private long connectTime = System.currentTimeMillis();\n-        private AtomicBoolean failed = new AtomicBoolean(false);\n+        private final AtomicBoolean failed = new AtomicBoolean(false);\n \n         public SimpleDiscoveryEvent(String service) {\n             super(service);\n         }\n \n-\t\tpublic SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {\n-\t\t\tsuper(copy);\n-\t\t\tconnectFailures = copy.connectFailures;\n-\t\t\treconnectDelay = copy.reconnectDelay;\n-\t\t\tconnectTime = copy.connectTime;\n-\t\t\tfailed.set(copy.failed.get());\n-\t\t}\n-        \n+        public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {\n+            super(copy);\n+            connectFailures = copy.connectFailures;\n+            reconnectDelay = copy.reconnectDelay;\n+            connectTime = copy.connectTime;\n+            failed.set(copy.failed.get());\n+        }\n+\n         @Override\n         public String toString() {\n             return \"[\" + serviceName + \", failed:\" + failed + \", connectionFailures:\" + connectFailures + \"]\";\n         }\n     }\n \n+    @Override\n     public void setDiscoveryListener(DiscoveryListener listener) {\n         this.listener = listener;\n     }\n \n+    @Override\n     public void registerService(String name) throws IOException {\n     }\n \n+    @Override\n     public void start() throws Exception {\n         taskRunner = new TaskRunnerFactory();\n         taskRunner.init();\n@@ -90,10 +93,13 @@ public void start() throws Exception {\n         }\n     }\n \n+    @Override\n     public void stop() throws Exception {\n         running.set(false);\n \n-        taskRunner.shutdown();\n+        if (taskRunner != null) {\n+            taskRunner.shutdown();\n+        }\n \n         // TODO: Should we not remove the services on the listener?\n \n@@ -121,16 +127,18 @@ public void setServices(URI services[]) {\n         }\n     }\n \n+    @Override\n     public void serviceFailed(DiscoveryEvent devent) throws IOException {\n \n         final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent;\n         if (sevent.failed.compareAndSet(false, true)) {\n \n             listener.onServiceRemove(sevent);\n             taskRunner.execute(new Runnable() {\n+                @Override\n                 public void run() {\n                     SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent);\n-                \t\n+\n                     // We detect a failed connection attempt because the service\n                     // fails right away.\n                     if (event.connectTime + minConnectTime > System.currentTimeMillis()) {",
                "changes": 34,
                "blob_url": "https://github.com/apache/activemq/blob/0514fcf8826efdba7544034d0000915f25f61437/activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5442\n\nAdd check to avoid any NPE from stop without start called.",
        "commit": "https://github.com/apache/activemq/commit/0514fcf8826efdba7544034d0000915f25f61437"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/31d99b6aa92aed27acfd90a4d2a278c077a47a33",
        "bug_id": "activemq_35",
        "file": [
            {
                "additions": 1,
                "sha": "8ad3bac09a9d101899ff5df06de3453776339d34",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/93092f7ea0e231cd7d615f8ee6420c9b73a5367f/activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java",
                "deletions": 1,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java?ref=93092f7ea0e231cd7d615f8ee6420c9b73a5367f",
                "patch": "@@ -772,7 +772,7 @@ public void networkBridgeStopped(BrokerInfo brokerInfo) {\n \n     private void handleFireFailure(String message, Throwable cause) {\n         LOG.warn(\"Failed to fire {} advisory, reason: {}\", message, cause);\n-        LOG.debug(\"{} detail: {}\", message, cause);\n+        LOG.debug(\"{} detail: {}\", message, cause, cause);\n     }\n \n     protected void fireAdvisory(ConnectionContext context, ActiveMQTopic topic, Command command) throws Exception {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/93092f7ea0e231cd7d615f8ee6420c9b73a5367f/activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java"
            },
            {
                "additions": 1,
                "sha": "d447ebdc4dad6f80fd6bfcdaa48a8ddf1c80c8b5",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/93092f7ea0e231cd7d615f8ee6420c9b73a5367f/activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "deletions": 1,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java?ref=93092f7ea0e231cd7d615f8ee6420c9b73a5367f",
                "patch": "@@ -286,12 +286,12 @@ public boolean recoverMessage(Message message) {\n             }\n             // Message could have expired while it was being\n             // loaded..\n+            message.setRegionDestination(Queue.this);\n             if (message.isExpired() && broker.isExpired(message)) {\n                 toExpire.add(message);\n                 return true;\n             }\n             if (hasSpace()) {\n-                message.setRegionDestination(Queue.this);\n                 messagesLock.writeLock().lock();\n                 try {\n                     try {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/93092f7ea0e231cd7d615f8ee6420c9b73a5367f/activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-6070 - rework regression - KahaDBStoreRecoveryExpiryTest had NPE in the logs, region dest not set on recovery listener for expiry case",
        "commit": "https://github.com/apache/activemq/commit/93092f7ea0e231cd7d615f8ee6420c9b73a5367f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/bbc039fceb85239667563f8c852db6ed016b73f8",
        "bug_id": "activemq_36",
        "file": [
            {
                "additions": 10,
                "sha": "f61c5ac56bf014aba0b9ff30d3cd0deb1fbb7765",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/60bdfc061cf3ced688a6b5aca9f00c4a3390312a/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "deletions": 7,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=60bdfc061cf3ced688a6b5aca9f00c4a3390312a",
                "patch": "@@ -107,7 +107,7 @@\n     protected static final String DURABLE_SUB_PREFIX = \"NC-DS_\";\n     protected final Transport localBroker;\n     protected final Transport remoteBroker;\n-    protected IdGenerator idGenerator;\n+    protected IdGenerator idGenerator = new IdGenerator();\n     protected final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();\n     protected ConnectionInfo localConnectionInfo;\n     protected ConnectionInfo remoteConnectionInfo;\n@@ -381,8 +381,6 @@ private void collectBrokerInfos() {\n             remoteBrokerName = remoteBrokerInfo.getBrokerName();\n             if (configuration.isUseBrokerNamesAsIdSeed()) {\n                 idGenerator = new IdGenerator(brokerService.getBrokerName() + \"->\" + remoteBrokerName);\n-            } else {\n-                idGenerator = new IdGenerator();\n             }\n         } catch (Throwable e) {\n             serviceLocalException(e);\n@@ -433,10 +431,15 @@ private void doStartLocalAndRemoteBridges() {\n     }\n \n     private void startLocalBridge() throws Throwable {\n-        if (localBridgeStarted.compareAndSet(false, true)) {\n+        if (!bridgeFailed.get() && localBridgeStarted.compareAndSet(false, true)) {\n             synchronized (this) {\n                 LOG.trace(\"{} starting local Bridge, localBroker={}\", configuration.getBrokerName(), localBroker);\n                 if (!disposed.get()) {\n+\n+                    if (idGenerator == null) {\n+                        throw new IllegalStateException(\"Id Generator cannot be null\");\n+                    }\n+\n                     localConnectionInfo = new ConnectionInfo();\n                     localConnectionInfo.setConnectionId(new ConnectionId(idGenerator.generateId()));\n                     localClientId = configuration.getName() + \"_\" + remoteBrokerName + \"_inbound_\" + configuration.getBrokerName();\n@@ -518,7 +521,7 @@ private void startLocalBridge() throws Throwable {\n     }\n \n     protected void startRemoteBridge() throws Exception {\n-        if (remoteBridgeStarted.compareAndSet(false, true)) {\n+        if (!bridgeFailed.get() && remoteBridgeStarted.compareAndSet(false, true)) {\n             LOG.trace(\"{} starting remote Bridge, remoteBroker={}\", configuration.getBrokerName(), remoteBroker);\n             synchronized (this) {\n                 if (!isCreatedByDuplex()) {\n@@ -810,8 +813,8 @@ public void run() {\n         } else if (data.getClass() == RemoveSubscriptionInfo.class) {\n             RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);\n             SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());\n-            for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {\n-                DemandSubscription ds = (DemandSubscription) i.next();\n+            for (Iterator<DemandSubscription> i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {\n+                DemandSubscription ds = i.next();\n                 boolean removed = ds.getDurableRemoteSubs().remove(subscriptionInfo);\n                 if (removed) {\n                     if (ds.getDurableRemoteSubs().isEmpty()) {",
                "changes": 17,
                "blob_url": "https://github.com/apache/activemq/blob/60bdfc061cf3ced688a6b5aca9f00c4a3390312a/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5315\n\nFix for possible NPE during start with immediate bridge failure.",
        "commit": "https://github.com/apache/activemq/commit/60bdfc061cf3ced688a6b5aca9f00c4a3390312a"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/bd442a3388b0f127c8f8b9fad5e4888b77bb42c3",
        "bug_id": "activemq_37",
        "file": [
            {
                "additions": 24,
                "sha": "e7365661cb8c1c71d22c88b77df5c9a5145bc92b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6bfa13b6e707fb3465a9193cd44c478514fcd948/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
                "deletions": 18,
                "filename": "activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java?ref=6bfa13b6e707fb3465a9193cd44c478514fcd948",
                "patch": "@@ -147,7 +147,7 @@ public PreviouslyDeliveredMap(TransactionId transactionId) {\n     private boolean clearDeliveredList;\n     AtomicInteger inProgressClearRequiredFlag = new AtomicInteger(0);\n \n-    private MessageAck pendingAck;\n+    private volatile MessageAck pendingAck;\n     private long lastDeliveredSequenceId = -1;\n \n     private IOException failureError;\n@@ -780,19 +780,22 @@ void clearMessagesInProgress() {\n     void deliverAcks() {\n         MessageAck ack = null;\n         if (deliveryingAcknowledgements.compareAndSet(false, true)) {\n+            //Capture the pendingAck reference in case the optimizeAcknowledge dispatch\n+            //thread mutates it\n+            final MessageAck oldPendingAck = pendingAck;\n             if (isAutoAcknowledgeEach()) {\n                 synchronized(deliveredMessages) {\n                     ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);\n                     if (ack != null) {\n                         deliveredMessages.clear();\n                         ackCounter = 0;\n                     } else {\n-                        ack = pendingAck;\n+                        ack = oldPendingAck;\n                         pendingAck = null;\n                     }\n                 }\n-            } else if (pendingAck != null && pendingAck.isStandardAck()) {\n-                ack = pendingAck;\n+            } else if (oldPendingAck != null && oldPendingAck.isStandardAck()) {\n+                ack = oldPendingAck;\n                 pendingAck = null;\n             }\n             if (ack != null) {\n@@ -971,8 +974,9 @@ private void afterMessageIsConsumed(MessageDispatch md, boolean messageExpired)\n                                     // we won't sent standard acks with every msg just\n                                     // because the deliveredCounter just below\n                                     // 0.5 * prefetch as used in ackLater()\n-                                    if (pendingAck != null && deliveredCounter > 0) {\n-                                        session.sendAck(pendingAck);\n+                                    final MessageAck oldPendingAck = pendingAck;\n+                                    if (oldPendingAck != null && deliveredCounter > 0) {\n+                                        session.sendAck(oldPendingAck);\n                                         pendingAck = null;\n                                         deliveredCounter = 0;\n                                     }\n@@ -1035,29 +1039,31 @@ private void ackLater(MessageDispatch md, byte ackType) throws JMSException {\n \n         deliveredCounter++;\n \n-        MessageAck oldPendingAck = pendingAck;\n-        pendingAck = new MessageAck(md, ackType, deliveredCounter);\n-        pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());\n-        if( oldPendingAck==null ) {\n-            pendingAck.setFirstMessageId(pendingAck.getLastMessageId());\n-        } else if ( oldPendingAck.getAckType() == pendingAck.getAckType() ) {\n-            pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());\n+        final MessageAck oldPendingAck = pendingAck;\n+        final MessageAck newPendingAck = new MessageAck(md, ackType, deliveredCounter);\n+        newPendingAck.setTransactionId(session.getTransactionContext().getTransactionId());\n+        if (oldPendingAck == null) {\n+            newPendingAck.setFirstMessageId(newPendingAck.getLastMessageId());\n+        } else if (oldPendingAck.getAckType() == newPendingAck.getAckType()) {\n+            newPendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());\n         } else {\n             // old pending ack being superseded by ack of another type, if is is not a delivered\n             // ack and hence important, send it now so it is not lost.\n             if (!oldPendingAck.isDeliveredAck()) {\n-                LOG.debug(\"Sending old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n+                LOG.debug(\"Sending old pending ack {}, new pending: {}\", oldPendingAck, newPendingAck);\n                 session.sendAck(oldPendingAck);\n             } else {\n-                LOG.debug(\"dropping old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n+                LOG.debug(\"dropping old pending ack {}, new pending: {}\", oldPendingAck, newPendingAck);\n             }\n         }\n+        pendingAck = newPendingAck;\n+\n         // AMQ-3956 evaluate both expired and normal msgs as\n         // otherwise consumer may get stalled\n         if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {\n-            LOG.debug(\"ackLater: sending: {}\", pendingAck);\n-            session.sendAck(pendingAck);\n-            pendingAck=null;\n+            LOG.debug(\"ackLater: sending: {}\", newPendingAck);\n+            session.sendAck(newPendingAck);\n+            pendingAck = null;\n             deliveredCounter = 0;\n             additionalWindowSize = 0;\n         }",
                "changes": 42,
                "blob_url": "https://github.com/apache/activemq/blob/6bfa13b6e707fb3465a9193cd44c478514fcd948/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java"
            },
            {
                "additions": 227,
                "sha": "da09aafafd325a26e11b56eb67294f6bcde54bae",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/6bfa13b6e707fb3465a9193cd44c478514fcd948/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java?ref=6bfa13b6e707fb3465a9193cd44c478514fcd948",
                "patch": "@@ -0,0 +1,227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.bugs;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.io.InterruptedIOException;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.DeliveryMode;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageListener;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.jms.Topic;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.broker.BrokerFactory;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.log4j.Appender;\n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AMQ5426Test {\n+\n+\tprivate static final Logger LOG = LoggerFactory\n+\t\t\t.getLogger(AMQ5426Test.class);\n+\n+\tprivate BrokerService brokerService;\n+\tprivate String connectionUri;\n+\tprivate AtomicBoolean hasFailureInProducer = new AtomicBoolean(false);\n+\tprivate Thread producerThread;\n+\tprivate AtomicBoolean hasErrorInLogger;\n+\tprivate Appender errorDetectorAppender;\n+\n+\tprotected ConnectionFactory createConnectionFactory() throws Exception {\n+\t\tActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(\n+\t\t\t\tconnectionUri);\n+\t\tconFactory.setWatchTopicAdvisories(false);\n+\t\tconFactory.setOptimizeAcknowledge(true);\n+\t\treturn conFactory;\n+\t}\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\thasFailureInProducer = new AtomicBoolean(false);\n+\t\thasErrorInLogger = new AtomicBoolean(false);\n+\t\tbrokerService = BrokerFactory.createBroker(new URI(\n+\t\t\t\t\"broker://()/localhost?persistent=false&useJmx=true\"));\n+\n+\t\tPolicyEntry policy = new PolicyEntry();\n+\t\tpolicy.setTopicPrefetch(100);\n+\t\tPolicyMap pMap = new PolicyMap();\n+\t\tpMap.setDefaultEntry(policy);\n+\t\tbrokerService.addConnector(\"tcp://0.0.0.0:0\");\n+\t\tbrokerService.start();\n+\t\tconnectionUri = brokerService.getTransportConnectorByScheme(\"tcp\")\n+\t\t\t\t.getPublishableConnectString();\n+\n+\t\t// Register an error listener to LOG4J\n+\t\t// The NPE will not be detectable as of V5.10 from\n+\t\t// ActiveMQConnection.setClientInternalExceptionListener\n+\t\t// since ActiveMQMessageConsumer.dispatch will silently catch and\n+\t\t// discard any RuntimeException\n+\t\terrorDetectorAppender = new AppenderSkeleton() {\n+\t\t\t@Override\n+\t\t\tpublic void close() {\n+\t\t\t\t// Do nothing\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean requiresLayout() {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void append(LoggingEvent event) {\n+\t\t\t\tif (event.getLevel().isGreaterOrEqual(Level.ERROR))\n+\t\t\t\t\thasErrorInLogger.set(true);\n+\t\t\t}\n+\t\t};\n+\n+\t\torg.apache.log4j.Logger.getRootLogger().addAppender(errorDetectorAppender);\n+\t\tproducerThread = new Thread(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tConnection connection = createConnectionFactory()\n+\t\t\t\t\t\t\t.createConnection();\n+\t\t\t\t\tconnection.start();\n+\t\t\t\t\tSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\t\t\t\t\tTopic destination = session.createTopic(\"test.AMQ5426\");\n+\t\t\t\t\tLOG.debug(\"Created topic: {}\", destination);\n+\t\t\t\t\tMessageProducer producer = session.createProducer(destination);\n+\t\t\t\t\tproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+\t\t\t\t\tproducer.setTimeToLive(1000);\n+\t\t\t\t\tLOG.debug(\"Created producer: {}\", producer);\n+\n+\t\t\t\t\tint i = 1;\n+\t\t\t\t\twhile (!Thread.interrupted()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tTextMessage msg = session.createTextMessage(\" testMessage \" + i);\n+\t\t\t\t\t\t\tproducer.send(msg);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t// Sleep for some nano seconds\n+\t\t\t\t\t\t\t\tThread.sleep(0, 100);\n+\t\t\t\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\t\t\t\t// Restore the interrupt\n+\t\t\t\t\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tLOG.debug(\"message sent: {}\", i);\n+\t\t\t\t\t\t\ti++;\n+\t\t\t\t\t\t} catch (JMSException e) {\n+\t\t\t\t\t\t\t// Sometimes, we will gt a JMSException with nested\n+\t\t\t\t\t\t\t// InterruptedIOException when we interrupt the thread\n+\t\t\t\t\t\t\tif (!(e.getCause() != null && e.getCause() instanceof InterruptedIOException)) {\n+\t\t\t\t\t\t\t\tthrow e;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tproducer.close();\n+\t\t\t\t\tsession.close();\n+\t\t\t\t\tconnection.close();\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tLOG.error(e.getMessage(), e);\n+\t\t\t\t\thasFailureInProducer.set(true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\n+\t\tproducerThread.start();\n+\t}\n+\n+\t@Test(timeout = 2 * 60 * 1000)\n+\tpublic void testConsumerProperlyClosedWithoutError() throws Exception {\n+\t\tRandom rn = new Random();\n+\n+\t\tfinal int NUMBER_OF_RUNS = 1000;\n+\n+\t\tfor (int run = 0; run < NUMBER_OF_RUNS; run++) {\n+\t\t\tfinal AtomicInteger numberOfMessagesReceived = new AtomicInteger(0);\n+\t\t\tLOG.info(\"Starting run {} of {}\", run, NUMBER_OF_RUNS);\n+\n+\t\t\t// Starts a consumer\n+\t\t\tConnection connection = createConnectionFactory().createConnection();\n+\t\t\tconnection.start();\n+\n+\t\t\tSession session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);\n+\t\t\tTopic destination = session.createTopic(\"test.AMQ5426\");\n+\n+\t\t\tLOG.debug(\"Created topic: {}\", destination);\n+\t\t\tMessageConsumer consumer = session.createConsumer(destination);\n+\t\t\tconsumer.setMessageListener(new MessageListener() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onMessage(Message message) {\n+\t\t\t\t\tLOG.debug(\"Received message\");\n+\t\t\t\t\tnumberOfMessagesReceived.getAndIncrement();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tLOG.debug(\"Created consumer: {}\", consumer);\n+\n+\t\t\ttry {\n+\t\t\t\t// Sleep for a random time\n+\t\t\t\tThread.sleep(rn.nextInt(5) + 1);\n+\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t// Restore the interrupt\n+\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t}\n+\n+\t\t\t// Close the consumer\n+\t\t\tLOG.debug(\"Closing consumer\");\n+\t\t\tconsumer.close();\n+\t\t\tsession.close();\n+\t\t\tconnection.close();\n+\n+\t\t\tassertFalse(\"Exception in Producer Thread\", hasFailureInProducer.get());\n+\t\t\tassertFalse(\"Error detected in Logger\", hasErrorInLogger.get());\n+\t\t\tLOG.info(\"Run {} of {} completed, message received: {}\", run,\n+\t\t\t\t\tNUMBER_OF_RUNS, numberOfMessagesReceived.get());\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\t// Interrupt the producer thread\n+\t\tLOG.info(\"Shutdown producer thread\");\n+\t\tproducerThread.interrupt();\n+\t\tproducerThread.join();\n+\t\tbrokerService.stop();\n+\t\tbrokerService.waitUntilStopped();\n+\n+\t\tassertFalse(\"Exception in Producer Thread\", hasFailureInProducer.get());\n+\t\tassertFalse(\"Error detected in Logger\", hasErrorInLogger.get());\n+\t}\n+}",
                "changes": 227,
                "blob_url": "https://github.com/apache/activemq/blob/6bfa13b6e707fb3465a9193cd44c478514fcd948/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5426\n\nFixing a race condition in ActiveMQMessageConsumer that could cause a\nNPE when the consumer is closing\n\nThanks to Michael Wong for providing the test case for this issue.",
        "commit": "https://github.com/apache/activemq/commit/6bfa13b6e707fb3465a9193cd44c478514fcd948"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f206a1bd11dfe8265faacfdbbb74113894069d28",
        "bug_id": "activemq_38",
        "file": [
            {
                "additions": 2,
                "sha": "fca4b76be3787838f24999f9bd65082431d25bf9",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/5f400b3853aae9f5a581de99cc390a6bb330f47f/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=5f400b3853aae9f5a581de99cc390a6bb330f47f",
                "patch": "@@ -1009,8 +1009,8 @@ void updateIndex(Transaction tx, KahaRemoveMessageCommand command, Location ackL\n                 MessageKeys keys = sd.orderIndex.remove(tx, sequenceId);\n                 if (keys != null) {\n                     sd.locationIndex.remove(tx, keys.location);\n-                }\n-                recordAckMessageReferenceLocation(ackLocation, keys.location);\n+                    recordAckMessageReferenceLocation(ackLocation, keys.location);\n+                }                \n             }\n         } else {\n             // In the topic case we need remove the message once it's been acked",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/5f400b3853aae9f5a581de99cc390a6bb330f47f/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            }
        ],
        "repo": "activemq",
        "message": "prevent npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@978813 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/5f400b3853aae9f5a581de99cc390a6bb330f47f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/662aee8f211e5848ad400f6d52026e4a350acbc6",
        "bug_id": "activemq_39",
        "file": [
            {
                "additions": 2,
                "sha": "30cff9b3da1f866c805df9e40989e8a46647a403",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c01e182cfd510e36496c902dbb385aa3821169ee/kahadb/src/main/java/org/apache/kahadb/util/LinkedNodeList.java",
                "deletions": 0,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/LinkedNodeList.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/LinkedNodeList.java?ref=c01e182cfd510e36496c902dbb385aa3821169ee",
                "patch": "@@ -100,6 +100,8 @@ public T reparent(LinkedNodeList<T> list) {\n      * @return\n      */\n     public T rotate() {\n+    \tif( head ==null )\n+    \t\treturn null;\n         return head = head.getNextCircular();\n     }\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c01e182cfd510e36496c902dbb385aa3821169ee/kahadb/src/main/java/org/apache/kahadb/util/LinkedNodeList.java"
            }
        ],
        "repo": "activemq",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@740087 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/c01e182cfd510e36496c902dbb385aa3821169ee"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2f9fdea41f0959dd1a3c4ea62902c5c3d61b2926",
        "bug_id": "activemq_40",
        "file": [
            {
                "additions": 1,
                "sha": "859c86b9c900f2622b00f6828837ea6fefb5368b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/38d433a34a317da9715b4e13cc77932f89bac201/activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractTempRegion.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractTempRegion.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractTempRegion.java?ref=38d433a34a317da9715b4e13cc77932f89bac201",
                "patch": "@@ -66,9 +66,9 @@ public void run() {\n                 }\n     \n             };\n+            this.purgeTimer.schedule(purgeTask, purgeTime, purgeTime);\n         }\n        \n-        this.purgeTimer.schedule(purgeTask, purgeTime, purgeTime);\n     }\n \n     public void stop() throws Exception {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/38d433a34a317da9715b4e13cc77932f89bac201/activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractTempRegion.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@638870 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/38d433a34a317da9715b4e13cc77932f89bac201"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/172200174819bc6ec54e9a245e2280dfdd730687",
        "bug_id": "activemq_41",
        "file": [
            {
                "additions": 10,
                "sha": "d597b7d4d25f6fc10c7039e82fb178b3d7345b92",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/fe9bd4f59412c5aa98a17ef375c0d381de5ef88a/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java",
                "deletions": 7,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java?ref=fe9bd4f59412c5aa98a17ef375c0d381de5ef88a",
                "patch": "@@ -379,14 +379,17 @@ public void execute() throws Exception {\n      */\n     public Message getMessage(MessageId identity) throws IOException {\n         Location location = getLocation(identity);\n-        DataStructure rc = peristenceAdapter.readCommand(location);\n-        try {\n-            return (Message) rc;\n-        } catch (ClassCastException e) {\n-            throw new IOException(\"Could not read message \" + identity\n-                    + \" at location \" + location\n-                    + \", expected a message, but got: \" + rc);\n+        if (location != null) {\n+            DataStructure rc = peristenceAdapter.readCommand(location);\n+            try {\n+                return (Message) rc;\n+            } catch (ClassCastException e) {\n+                throw new IOException(\"Could not read message \" + identity\n+                        + \" at location \" + location\n+                        + \", expected a message, but got: \" + rc);\n+            }\n         }\n+        return null;\n     }\n     \n     protected Location getLocation(MessageId messageId) throws IOException {",
                "changes": 17,
                "blob_url": "https://github.com/apache/activemq/blob/fe9bd4f59412c5aa98a17ef375c0d381de5ef88a/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@584929 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/fe9bd4f59412c5aa98a17ef375c0d381de5ef88a"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/101b7123faf1cf217186a778f10e64485a508dd6",
        "bug_id": "activemq_42",
        "file": [
            {
                "additions": 4,
                "sha": "fb0d2e873177b6e4081de98e42709832c9705edf",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java",
                "deletions": 4,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java?ref=1406d40ac34fedb0be2e5bc5998844a46ff15760",
                "patch": "@@ -40,8 +40,8 @@\n  *\n  */\n public class SimpleAuthenticationPlugin implements BrokerPlugin {\n-    private Map<String, String> userPasswords;\n-    private Map<String, Set<Principal>> userGroups;\n+    private Map<String, String> userPasswords = new HashMap<String, String>();\n+    private Map<String, Set<Principal>> userGroups = new HashMap<String, Set<Principal>>();\n     private static final String DEFAULT_ANONYMOUS_USER = \"anonymous\";\n     private static final String DEFAULT_ANONYMOUS_GROUP = \"anonymous\";\n     private String anonymousUser = DEFAULT_ANONYMOUS_USER;\n@@ -73,8 +73,8 @@ public Broker installPlugin(Broker parent) {\n      * @org.apache.xbean.ElementType class=\"org.apache.activemq.security.AuthenticationUser\"\n      */\n     public void setUsers(List<?> users) {\n-        userPasswords = new HashMap<String, String>();\n-        userGroups = new HashMap<String, Set<Principal>>();\n+        userPasswords.clear();\n+        userGroups.clear();\n         for (Iterator<?> it = users.iterator(); it.hasNext();) {\n             AuthenticationUser user = (AuthenticationUser)it.next();\n             userPasswords.put(user.getUsername(), user.getPassword());",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java"
            },
            {
                "additions": 59,
                "sha": "dc35cc1a77358f72044ab20d969d45e92f0f5b3b",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-unit-tests/src/test/java/org/apache/activemq/security/SimpleAuthenticationPluginNoUsersTest.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/security/SimpleAuthenticationPluginNoUsersTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/security/SimpleAuthenticationPluginNoUsersTest.java?ref=1406d40ac34fedb0be2e5bc5998844a46ff15760",
                "patch": "@@ -0,0 +1,59 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.security;\n+\n+import java.net.URI;\n+\n+import javax.jms.Connection;\n+import javax.jms.JMSSecurityException;\n+\n+import org.apache.activemq.broker.BrokerFactory;\n+import org.apache.activemq.broker.BrokerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SimpleAuthenticationPluginNoUsersTest extends SecurityTestSupport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SimpleAuthenticationPluginNoUsersTest.class);\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        setAutoFail(true);\n+        super.setUp();\n+    }\n+\n+    @Override\n+    protected BrokerService createBroker() throws Exception {\n+        return createBroker(\"org/apache/activemq/security/simple-auth-broker-no-users.xml\");\n+    }\n+\n+    protected BrokerService createBroker(String uri) throws Exception {\n+        LOG.info(\"Loading broker configuration from the classpath with URI: \" + uri);\n+        return BrokerFactory.createBroker(new URI(\"xbean:\" + uri));\n+    }\n+\n+    public void testConnectionStartThrowsJMSSecurityException() throws Exception {\n+\n+        Connection connection = factory.createConnection(\"user\", \"password\");\n+        try {\n+            connection.start();\n+            fail(\"Should throw JMSSecurityException\");\n+        } catch (JMSSecurityException jmsEx) {\n+            //expected\n+        }\n+    }\n+}",
                "changes": 59,
                "blob_url": "https://github.com/apache/activemq/blob/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-unit-tests/src/test/java/org/apache/activemq/security/SimpleAuthenticationPluginNoUsersTest.java"
            },
            {
                "additions": 69,
                "sha": "b4485f0bc549bf33e7aa00a3f64d42b00598d148",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-unit-tests/src/test/resources/org/apache/activemq/security/simple-auth-broker-no-users.xml",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/resources/org/apache/activemq/security/simple-auth-broker-no-users.xml",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/resources/org/apache/activemq/security/simple-auth-broker-no-users.xml?ref=1406d40ac34fedb0be2e5bc5998844a46ff15760",
                "patch": "@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one or more\n+  contributor license agreements.  See the NOTICE file distributed with\n+  this work for additional information regarding copyright ownership.\n+  The ASF licenses this file to You under the Apache License, Version 2.0\n+  (the \"License\"); you may not use this file except in compliance with\n+  the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<!-- this file can only be parsed using the xbean-spring library -->\n+<!-- START SNIPPET: example -->\n+<beans\n+  xmlns=\"http://www.springframework.org/schema/beans\"\n+  xmlns:amq=\"http://activemq.apache.org/schema/core\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\n+  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd\">\n+\n+  <bean id=\"configurationEncryptor\" class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\">\n+      <property name=\"algorithm\" value=\"PBEWithMD5AndDES\"/>\n+      <property name=\"password\" value=\"activemq\"/>\n+  </bean>\n+\n+  <bean id=\"propertyConfigurer\" class=\"org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer\">\n+      <constructor-arg ref=\"configurationEncryptor\" />\n+      <property name=\"location\" value=\"classpath:credentials.properties\"/>\n+  </bean>\n+\n+  <broker useJmx=\"true\" persistent=\"false\" xmlns=\"http://activemq.apache.org/schema/core\" populateJMSXUserID=\"true\" schedulePeriodForDestinationPurge=\"2000\">\n+\n+    <destinations>\n+      <queue physicalName=\"TEST.Q\" />\n+    </destinations>\n+\n+    <!-- Use a non-default port in case the default port is in use -->\n+    <managementContext>\n+      <managementContext connectorPort=\"1199\"/>\n+    </managementContext>\n+\n+    <destinationPolicy>\n+        <policyMap>\n+          <policyEntries>\n+            <policyEntry queue=\"USERS.PURGE.>\" gcInactiveDestinations=\"true\" inactiveTimoutBeforeGC=\"500\" />\n+          </policyEntries>\n+        </policyMap>\n+    </destinationPolicy>\n+\n+    <transportConnectors>\n+      <transportConnector uri=\"tcp://0.0.0.0:0\" />\n+    </transportConnectors>\n+\n+    <plugins>\n+        <!-- Defining a SimpleAuthenticationPlugin\n+             with no nested 'users'. Should deny all\n+             login attempts rather than NPE -->\n+        <simpleAuthenticationPlugin />\n+    </plugins>\n+  </broker>\n+\n+</beans>",
                "changes": 69,
                "blob_url": "https://github.com/apache/activemq/blob/1406d40ac34fedb0be2e5bc5998844a46ff15760/activemq-unit-tests/src/test/resources/org/apache/activemq/security/simple-auth-broker-no-users.xml"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-5608: dont NPE during authentication attempt if no users were defined for the SimpleAuthenticationPlugin\n\nhttps://issues.apache.org/jira/browse/AMQ-5608",
        "commit": "https://github.com/apache/activemq/commit/1406d40ac34fedb0be2e5bc5998844a46ff15760"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/8068c5e1551bed9e0003806cb7b463bd1c058473",
        "bug_id": "activemq_43",
        "file": [
            {
                "additions": 11,
                "sha": "82f2466d6cb94b1e15a95a8feb35482d516bf71d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f6e1ac7f979baff434d2ff06f5d2e562becc8a45/activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java?ref=f6e1ac7f979baff434d2ff06f5d2e562becc8a45",
                "patch": "@@ -115,13 +115,13 @@ public void onCommand(Object o) {\n                 if( rc != null ) {\n                     if( rc.ackCount.decrementAndGet() <= 0 ) {\n                         requestMap.remove(id);\n-                        transportListener.onCommand(command);\n+                        transportListenerOnCommand(command);\n                     }\n                 } else {\n-                    transportListener.onCommand(command);\n+                    transportListenerOnCommand(command);\n                 }\n             } else {\n-                transportListener.onCommand(command);\n+                transportListenerOnCommand(command);\n             }\n         }\n \n@@ -144,7 +144,9 @@ public void onException(IOException error) {\n             }\n             catch (InterruptedException e) {\n                 Thread.currentThread().interrupt();\n-                transportListener.onException(new InterruptedIOException());\n+                if (transportListener != null) {\n+                    transportListener.onException(new InterruptedIOException());\n+                }\n             }\n         }        \n     }\n@@ -532,4 +534,9 @@ public String getRemoteAddress() {\n \t\treturn null;\n \t}\n \n+    protected void transportListenerOnCommand(Command command) {\n+        if (transportListener != null) {\n+            transportListener.onCommand(command);\n+        }\n+    }\n }",
                "changes": 15,
                "blob_url": "https://github.com/apache/activemq/blob/f6e1ac7f979baff434d2ff06f5d2e562becc8a45/activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "added NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@550793 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/f6e1ac7f979baff434d2ff06f5d2e562becc8a45"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/7113c5efd8de177c549f53774291936243a83093",
        "bug_id": "activemq_44",
        "file": [
            {
                "additions": 8,
                "sha": "ad92dee18c487527acc0afa2295ae4229cbd1d7c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0d9c764bf5411770a4b63a3c29f9788f457f403f/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java",
                "deletions": 1,
                "filename": "tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java?ref=0d9c764bf5411770a4b63a3c29f9788f457f403f",
                "patch": "@@ -233,6 +233,11 @@ protected void setProviderMetaData(ConnectionMetaData metaData, JmsClientPropert\n     protected static Properties parseStringArgs(String[] args) {\r\n         File configFile = null;\r\n         Properties props = new Properties();\r\n+\r\n+        if (args == null || args.length == 0) {\r\n+            return props; // Empty properties\r\n+        }\r\n+        \r\n         for (int i=0; i<args.length; i++) {\r\n             String arg = args[i];\r\n             if (arg.startsWith(\"-D\") || arg.startsWith(\"-d\")) {\r\n@@ -253,7 +258,9 @@ protected static Properties parseStringArgs(String[] args) {\n \r\n         Properties fileProps = new Properties();\r\n         try {\r\n-            fileProps.load(new FileInputStream(configFile));\r\n+            if (configFile != null) {\r\n+                fileProps.load(new FileInputStream(configFile));\r\n+            }\r\n         } catch (IOException e) {\r\n             e.printStackTrace();\r\n         }\r",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/0d9c764bf5411770a4b63a3c29f9788f457f403f/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java"
            }
        ],
        "repo": "activemq",
        "message": "NPE checking\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@418683 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/0d9c764bf5411770a4b63a3c29f9788f457f403f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ac132020078ea98b0421edd9d8ba315561904e5b",
        "bug_id": "activemq_45",
        "file": [
            {
                "additions": 5,
                "sha": "dfdc8c981a94c3eb1de34ffe8d9cacb1f04f1445",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/89d6fd0a802d9b58306503dcd1d52c8b15ed169d/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java?ref=89d6fd0a802d9b58306503dcd1d52c8b15ed169d",
                "patch": "@@ -130,7 +130,11 @@ public boolean isMarshallAware() {\n     }\n \n     public String toString() {\n-        return \"PartialCommand[id: \" + commandId + \" data: \" + data.length + \" byte(s)]\";\n+        int size = 0;\n+        if (data != null) {\n+            size = data.length;\n+        }\n+        return \"PartialCommand[id: \" + commandId + \" data: \" + size + \" byte(s)]\";\n     }\n     \n     ",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/89d6fd0a802d9b58306503dcd1d52c8b15ed169d/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@400057 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/89d6fd0a802d9b58306503dcd1d52c8b15ed169d"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/b49145835cbbdb955e0ca5ca4ddfc9e430aad6f4",
        "bug_id": "activemq_46",
        "file": [
            {
                "additions": 3,
                "sha": "a9a57f7b5845d74e752096c2dc86cbd96a6c246b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/9477854858251054c6d8c58d73e2c0dbf0066104/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java",
                "deletions": 0,
                "filename": "activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java?ref=9477854858251054c6d8c58d73e2c0dbf0066104",
                "patch": "@@ -199,6 +199,9 @@ protected Destination asDestination(Object value) {\n         }\n         if (value instanceof String[]) {\n             String text = ((String[]) value)[0];\n+            if (text == null) {\n+                return null;\n+            }\n             return ActiveMQDestination.createDestination(text, ActiveMQDestination.QUEUE_TYPE);\n         }\n         return null;",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/9477854858251054c6d8c58d73e2c0dbf0066104/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@396923 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/9477854858251054c6d8c58d73e2c0dbf0066104"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c1b8e0410da016d33d77529b88c05cd26ccfff7c",
        "bug_id": "activemq_47",
        "file": [
            {
                "additions": 6,
                "sha": "d264971d2b47b267a343cc0158f7d816552774d5",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a184831c30b5d125d48d2095abf1644f62953d30/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java",
                "deletions": 1,
                "filename": "activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java?ref=a184831c30b5d125d48d2095abf1644f62953d30",
                "patch": "@@ -115,7 +115,11 @@ protected WebClient getWebClient(HttpServletRequest request) {\n \n \n     protected void appendParametersToMessage(HttpServletRequest request, TextMessage message) throws JMSException {\n-        Map parameters = new HashMap(request.getParameterMap());\n+        Map parameterMap = request.getParameterMap();\n+        if (parameterMap == null) {\n+            return;\n+        }\n+        Map parameters = new HashMap(parameterMap);\n         String correlationID = asString(parameters.remove(\"JMSCorrelationID\"));\n         if (correlationID != null) {\n             message.setJMSCorrelationID(correlationID);\n@@ -160,6 +164,7 @@ protected void appendParametersToMessage(HttpServletRequest request, TextMessage\n                 }\n             }\n         }\n+        \n     }\n \n     protected Destination asDestination(Object value) {",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/a184831c30b5d125d48d2095abf1644f62953d30/activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@396503 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/a184831c30b5d125d48d2095abf1644f62953d30"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4ae3b9b2baa8a3acfd7347fcb6f71a06081cd75f",
        "bug_id": "activemq_48",
        "file": [
            {
                "additions": 3,
                "sha": "aa50978f9478db4ff44c265591b1fec3e7baa20b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6412d6526a9fdcb1887c8dfcb19a4d7aa0413759/activemq-core/src/main/java/org/apache/activemq/util/ServiceStopper.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/util/ServiceStopper.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/util/ServiceStopper.java?ref=6412d6526a9fdcb1887c8dfcb19a4d7aa0413759",
                "patch": "@@ -37,7 +37,9 @@\n      */\n     public void stop(Service service) {\n         try {\n-            service.stop();\n+            if( service!=null ) {\n+                service.stop();\n+            }\n         }\n         catch (Exception e) {\n             onException(service, e);",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/6412d6526a9fdcb1887c8dfcb19a4d7aa0413759/activemq-core/src/main/java/org/apache/activemq/util/ServiceStopper.java"
            }
        ],
        "repo": "activemq",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@388079 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/6412d6526a9fdcb1887c8dfcb19a4d7aa0413759"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4759540e6eac4fe1282057023ea4b4962038ca97",
        "bug_id": "activemq_49",
        "file": [
            {
                "additions": 8,
                "sha": "830cc85a60fb35c0e130bc722d6d92ef7bf19492",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/dc168c055b567f1eb7c9488762b494f24902afed/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java?ref=dc168c055b567f1eb7c9488762b494f24902afed",
                "patch": "@@ -50,6 +50,7 @@ public byte getDataStructureType() {\n     }\n \n     transient protected Callback acknowledgeCallback;\n+    transient int hashCode;\n \n     public Message copy() {\n         ActiveMQMessage copy = new ActiveMQMessage();\n@@ -64,7 +65,13 @@ protected void copy(ActiveMQMessage copy) {\n     }\n \n     public int hashCode() {\n-        return this.getMessageId().hashCode();\n+        MessageId id = getMessageId();\n+        if (id != null) {\n+            return  id.hashCode();\n+        }\n+        else {\n+            return super.hashCode();\n+        }\n     }\n \n     public boolean equals(Object o) {",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/dc168c055b567f1eb7c9488762b494f24902afed/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java"
            }
        ],
        "repo": "activemq",
        "message": "fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382888 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/dc168c055b567f1eb7c9488762b494f24902afed"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/8ab19345208cfbe87a182cad1dc3c575db9119f7",
        "bug_id": "activemq_50",
        "file": [
            {
                "additions": 4,
                "sha": "1ecad0c4c90c79ee162787b41e9f63fe7e5ac147",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/205c6bec88b890e7044de315bee5910ad01fc38e/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "deletions": 1,
                "filename": "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java?ref=205c6bec88b890e7044de315bee5910ad01fc38e",
                "patch": "@@ -348,8 +348,11 @@ public void onActiveMQCommand(Command command) throws Exception {\n             MessageDispatch md = (MessageDispatch) command;\n             ConsumerContext consumerContext = subscriptionsByConsumerId.get(md.getConsumerId());\n             if (consumerContext != null) {\n-                if (LOG.isTraceEnabled()) {\n+                // End of Queue Browse will have no Message object.\n+                if (LOG.isTraceEnabled() && md.getMessage() != null) {\n                     LOG.trace(\"Dispatching MessageId:{} to consumer\", md.getMessage().getMessageId());\n+                } else {\n+                    LOG.trace(\"Dispatching End of Browse Command to consumer {}\", md.getConsumerId());\n                 }\n                 consumerContext.onMessageDispatch(md);\n             }",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/205c6bec88b890e7044de315bee5910ad01fc38e/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix for potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1493110 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/205c6bec88b890e7044de315bee5910ad01fc38e"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/bfed9df3b740d08df3ebaf02a7c1e2fbbfc77087",
        "bug_id": "activemq_51",
        "file": [
            {
                "additions": 4,
                "sha": "78310ba7e5927c005e8f8750c6e172a2870b1cc0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d338d8a0d63af8b8c0ac153f0346ea5c2f24f4e1/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "deletions": 0,
                "filename": "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java?ref=d338d8a0d63af8b8c0ac153f0346ea5c2f24f4e1",
                "patch": "@@ -514,6 +514,10 @@ protected void onMessage(final Receiver receiver, final Delivery delivery, Buffe\n             message.setProducerId(producerId);\n \n             MessageId messageId = message.getMessageId();\n+            if (messageId == null) {\n+                messageId = new MessageId();\n+            }\n+\n             messageId.setProducerId(producerId);\n             messageId.setProducerSequenceId(messageIdGenerator.getNextSequenceId());\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/d338d8a0d63af8b8c0ac153f0346ea5c2f24f4e1/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-4568\n\nfix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1490317 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/d338d8a0d63af8b8c0ac153f0346ea5c2f24f4e1"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c161033abb994997f87814ea4167a14dd3be7380",
        "bug_id": "activemq_52",
        "file": [
            {
                "additions": 3,
                "sha": "d82f461e8d065a557cf4a4cfe9e05c8369a3eee7",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bfed9df3b740d08df3ebaf02a7c1e2fbbfc77087/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTransformerTest.java",
                "deletions": 11,
                "filename": "activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTransformerTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTransformerTest.java?ref=bfed9df3b740d08df3ebaf02a7c1e2fbbfc77087",
                "patch": "@@ -72,7 +72,6 @@ public void testNativeTransformation() throws Exception {\n         amqpSession.close();\n         amqpConnection.close();\n \n-\n         // receive with openwire JMS\n         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://0.0.0.0:\" + openwirePort);\n         Connection openwireConn = factory.createConnection();\n@@ -95,10 +94,9 @@ public void testNativeTransformation() throws Exception {\n         c.close();\n         session.close();\n         openwireConn.close();\n-\n     }\n \n-    @Test(timeout=30000)\n+    @Test(timeout = 30000)\n     public void testRawTransformation() throws Exception {\n \n         // default is native\n@@ -120,7 +118,6 @@ public void testRawTransformation() throws Exception {\n         amqpSession.close();\n         amqpConnection.close();\n \n-\n         // receive with openwire JMS\n         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://0.0.0.0:\" + openwirePort);\n         Connection openwireConn = factory.createConnection();\n@@ -139,15 +136,13 @@ public void testRawTransformation() throws Exception {\n         assertTrue(\"Didn't use the correct transformation, expected NATIVE\", nativeTransformationUsed);\n         assertEquals(2, message.getJMSDeliveryMode());\n \n-        // should not equal 7 (should equal the default)  because \"raw\" does not map\n+        // should not equal 7 (should equal the default) because \"raw\" does not map\n         // headers\n         assertEquals(4, message.getJMSPriority());\n \n-\n         c.close();\n         session.close();\n         openwireConn.close();\n-\n     }\n \n     @Test\n@@ -171,7 +166,6 @@ public void testJmsTransformation() throws Exception {\n         amqpSession.close();\n         amqpConnection.close();\n \n-\n         // receive with openwire JMS\n         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://0.0.0.0:\" + openwirePort);\n         Connection openwireConn = factory.createConnection();\n@@ -193,7 +187,6 @@ public void testJmsTransformation() throws Exception {\n         c.close();\n         session.close();\n         openwireConn.close();\n-\n     }\n \n     public Connection createAmqpConnection() throws JMSException {\n@@ -209,14 +202,13 @@ public void onException(JMSException exception) {\n         return connection;\n     }\n \n-\n     public void startBrokerWithAmqpTransport(String amqpUrl) throws Exception {\n         brokerService = new BrokerService();\n         brokerService.setPersistent(false);\n         brokerService.setAdvisorySupport(false);\n         brokerService.setDeleteAllMessagesOnStartup(true);\n \n-        TransportConnector connector =  brokerService.addConnector(amqpUrl);\n+        TransportConnector connector = brokerService.addConnector(amqpUrl);\n         amqpPort = connector.getConnectUri().getPort();\n         connector = brokerService.addConnector(\"tcp://0.0.0.0:0\");\n         openwirePort = connector.getConnectUri().getPort();",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/bfed9df3b740d08df3ebaf02a7c1e2fbbfc77087/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/AmqpTransformerTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-4568\n\nfix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1490311 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/bfed9df3b740d08df3ebaf02a7c1e2fbbfc77087"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/5ddc7d65c38cfe6aaa8ff22a5fac354e558374a5",
        "bug_id": "activemq_53",
        "file": [
            {
                "additions": 19,
                "sha": "57219a241c791201b68a0b4f1f66d89f11b83eb5",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/7a7d55180ec3974d1f01453206fafd4fa2191ca6/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionSessionCleanupTest.java",
                "deletions": 6,
                "filename": "activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionSessionCleanupTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionSessionCleanupTest.java?ref=7a7d55180ec3974d1f01453206fafd4fa2191ca6",
                "patch": "@@ -67,6 +67,7 @@\n     @Before\n     public void prepTest() throws java.lang.Exception {\n         service = new BrokerService();\n+        service.setBrokerName(\"PooledConnectionSessionCleanupTestBroker\");\n         service.setUseJmx(true);\n         service.setPersistent(false);\n         service.setSchedulerSupport(false);\n@@ -97,23 +98,35 @@ public void prepTest() throws java.lang.Exception {\n     @After\n     public void cleanupTest() throws java.lang.Exception {\n         try {\n-            pooledConn1.close();\n+            if (pooledConn1 != null) {\n+                pooledConn1.close();\n+            }\n         } catch (JMSException jms_exc) {\n         }\n         try {\n-            pooledConn2.close();\n+            if (pooledConn2 != null) {\n+                pooledConn2.close();\n+            }\n         } catch (JMSException jms_exc) {\n         }\n         try {\n-            directConn1.close();\n+            if (directConn1 != null) {\n+                directConn1.close();\n+            }\n         } catch (JMSException jms_exc) {\n         }\n         try {\n-            directConn2.close();\n+            if (directConn2 != null) {\n+                directConn2.close();\n+            }\n         } catch (JMSException jms_exc) {\n         }\n         try {\n-            service.stop();\n+            if (service != null) {\n+                service.stop();\n+                service.waitUntilStopped();\n+                service = null;\n+            }\n         } catch (JMSException jms_exc) {\n         }\n     }\n@@ -131,7 +144,7 @@ private void produceMessages() throws Exception {\n     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {\n         ObjectName queueViewMBeanName = new ObjectName(\"org.apache.activemq\"\n                 + \":destinationType=Queue,destinationName=\" + name\n-                + \",type=Broker,brokerName=localhost\");\n+                + \",type=Broker,brokerName=\" + service.getBrokerName());\n         QueueViewMBean proxy = (QueueViewMBean) service.getManagementContext()\n                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);\n         return proxy;",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/7a7d55180ec3974d1f01453206fafd4fa2191ca6/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionSessionCleanupTest.java"
            }
        ],
        "repo": "activemq",
        "message": "Add some defensive checks in cleanup method to avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1428632 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/7a7d55180ec3974d1f01453206fafd4fa2191ca6"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/3c9c147e76f0c1490030031df7f993b88ec416d1",
        "bug_id": "activemq_54",
        "file": [
            {
                "additions": 7,
                "sha": "d7e98afe2910965def0e559f75a8598571e7bbf2",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/822c4f37cba69c5c2b32053d0169b0d5723a2548/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "deletions": 3,
                "filename": "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java?ref=822c4f37cba69c5c2b32053d0169b0d5723a2548",
                "patch": "@@ -58,6 +58,7 @@\n     static final public byte[] EMPTY_BYTE_ARRAY = new byte[]{};\n     private final AmqpTransport amqpTransport;\n     private static final Symbol COPY = Symbol.getSymbol(\"copy\");\n+    private static final Symbol JMS_SELECTOR = Symbol.valueOf(\"jms-selector\");\n \n     public AmqpProtocolConverter(AmqpTransport amqpTransport, BrokerContext brokerContext) {\n         this.amqpTransport = amqpTransport;\n@@ -887,10 +888,13 @@ void onSenderOpen(final Sender sender, AmqpSessionContext sessionContext) {\n         if( source.getDistributionMode() == COPY) {\n             consumerInfo.setBrowser(true);\n         }\n-        Map filter = ((org.apache.qpid.proton.type.messaging.Source)source).getFilter();\n+\n+        Map filter = source.getFilter();\n         if (filter != null) {\n-            DescribedType type = (DescribedType)filter.get(Symbol.valueOf(\"jms-selector\"));\n-            consumerInfo.setSelector(type.getDescribed().toString());\n+            DescribedType value = (DescribedType)filter.get(JMS_SELECTOR);\n+            if( value!=null ) {\n+                consumerInfo.setSelector(value.getDescribed().toString());\n+            }\n         }\n \n         sendToActiveMQ(consumerInfo, new ResponseHandler() {",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/822c4f37cba69c5c2b32053d0169b0d5723a2548/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java"
            }
        ],
        "repo": "activemq",
        "message": "Protect against a possible NPE in the selector handling logic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1403753 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/822c4f37cba69c5c2b32053d0169b0d5723a2548"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/7db7ed130b1dad9958b1b191e4cd0d1d8d3190de",
        "bug_id": "activemq_55",
        "file": [
            {
                "additions": 3,
                "sha": "6a1ca36323e54064befb39cf07dbcb8bb7c4ea07",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/229c634a83a3f298e560f761e12c342af9794499/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java?ref=229c634a83a3f298e560f761e12c342af9794499",
                "patch": "@@ -98,7 +98,9 @@ public RemoveTransactionAction(TransactionInfo info) {\n         public void onResponse(Command response) {\n             ConnectionId connectionId = info.getConnectionId();\n             ConnectionState cs = connectionStates.get(connectionId);\n-            cs.removeTransactionState(info.getTransactionId());\n+            if (cs != null) {\n+                cs.removeTransactionState(info.getTransactionId());\n+            }\n         }\n     }\n     ",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/229c634a83a3f298e560f761e12c342af9794499/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-1719: Avoid potential NPE in connection state tracker.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1395272 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/229c634a83a3f298e560f761e12c342af9794499"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/13222cd4a4c8913a20ea742964a35f7167fbaf59",
        "bug_id": "activemq_56",
        "file": [
            {
                "additions": 8,
                "sha": "921845ce11b4d1af5ee7e7f6aa51ef75e08579a9",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/5453b26eb8e61c6ce626e3375421a687bbb84a00/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "deletions": 6,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=5453b26eb8e61c6ce626e3375421a687bbb84a00",
                "patch": "@@ -2515,12 +2515,14 @@ private DestinationFilter getVirtualTopicConsumerDestinationFilter() {\n         // created at startup, so no sync needed\n         if (virtualConsumerDestinationFilter == null) {\n             Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();\n-            for (DestinationInterceptor interceptor : destinationInterceptors) {\n-                if (interceptor instanceof VirtualDestinationInterceptor) {\n-                    VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) interceptor;\n-                    for (VirtualDestination virtualDestination: virtualDestinationInterceptor.getVirtualDestinations()) {\n-                        if (virtualDestination instanceof VirtualTopic) {\n-                            consumerDestinations.add(new ActiveMQQueue(((VirtualTopic) virtualDestination).getPrefix() + DestinationFilter.ANY_DESCENDENT));\n+            if (destinationInterceptors != null) {\n+                for (DestinationInterceptor interceptor : destinationInterceptors) {\n+                    if (interceptor instanceof VirtualDestinationInterceptor) {\n+                        VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) interceptor;\n+                        for (VirtualDestination virtualDestination: virtualDestinationInterceptor.getVirtualDestinations()) {\n+                            if (virtualDestination instanceof VirtualTopic) {\n+                                consumerDestinations.add(new ActiveMQQueue(((VirtualTopic) virtualDestination).getPrefix() + DestinationFilter.ANY_DESCENDENT));\n+                            }\n                         }\n                     }\n                 }",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/5453b26eb8e61c6ce626e3375421a687bbb84a00/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-4045: Fixed NPE in BrokerService.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1383856 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/5453b26eb8e61c6ce626e3375421a687bbb84a00"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/0e95460e0af4dc7f857dfe1a13559f31bc019207",
        "bug_id": "activemq_57",
        "file": [
            {
                "additions": 4,
                "sha": "23a5da17033dce14e8ef064fab1dd31880127d0d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/71e228fe92248fb06b5ac09720580754221a6ebf/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java?ref=71e228fe92248fb06b5ac09720580754221a6ebf",
                "patch": "@@ -51,7 +51,8 @@ public void handle(IOException exception) {\n         if (ignoreNoSpaceErrors) {\n             Throwable cause = exception;\n             while (cause != null && cause instanceof IOException) {\n-                if (cause.getMessage().contains(noSpaceMessage)) {\n+                String message = cause.getMessage();\n+                if (message != null && message.contains(noSpaceMessage)) {\n                     LOG.info(\"Ignoring no space left exception, \" + exception, exception);\n                     return;\n                 }\n@@ -62,7 +63,8 @@ public void handle(IOException exception) {\n         if (ignoreSQLExceptions) {\n             Throwable cause = exception;\n             while (cause != null) {\n-                if (cause instanceof SQLException && cause.getMessage().contains(sqlExceptionMessage)) {\n+                String message = cause.getMessage();\n+                if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {\n                     LOG.info(\"Ignoring SQLException, \" + exception, cause);\n                     return;\n                 }",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/71e228fe92248fb06b5ac09720580754221a6ebf/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for NPE: https://issues.apache.org/jira/browse/AMQ-3649\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1231081 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/71e228fe92248fb06b5ac09720580754221a6ebf"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/8311938134414c9394fea9fd8bc34f724931fd1a",
        "bug_id": "activemq_58",
        "file": [
            {
                "additions": 10,
                "sha": "a3c3b1d966d297cd2247f1b6b908af8153a0cc67",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ddb15afe058dd1560ef56e76936db5fe58365dd9/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1853Test.java",
                "deletions": 2,
                "filename": "activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1853Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1853Test.java?ref=ddb15afe058dd1560ef56e76936db5fe58365dd9",
                "patch": "@@ -335,7 +335,15 @@ public synchronized void onMessage(Message message) {\n                     bMessageReceiptIsOrdered = previousMessageId.trim().equals(message.getJMSMessageID());\n                 }\n \n-                AtomicInteger counter = messageList.get(message.getJMSMessageID());\n+                final String jmsMessageId = message.getJMSMessageID();\n+                assertTrue(\"Did not find expected \", Wait.waitFor(new Wait.Condition() {\n+                    @Override\n+                    public boolean isSatisified() throws Exception {\n+                        return messageList.containsKey(jmsMessageId);\n+                    }\n+                }));\n+\n+                AtomicInteger counter = messageList.get(jmsMessageId);\n                 counter.incrementAndGet();\n \n                 LOG.info(\"Consumer for destination (\" + destinationName + \")\\n\" + message.getJMSMessageID() + \" = currentMessageId\\n\"\n@@ -351,7 +359,7 @@ public synchronized void onMessage(Message message) {\n                     session.rollback(); // rolls back all the consumed messages on the session to\n                 }\n \n-            } catch (JMSException ex) {\n+            } catch (Exception ex) {\n                 ex.printStackTrace();\n                 LOG.error(\"Error reading JMS Message from destination \" + destinationName + \".\");\n             }",
                "changes": 12,
                "blob_url": "https://github.com/apache/activemq/blob/ddb15afe058dd1560ef56e76936db5fe58365dd9/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ1853Test.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix for NPE in test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1203662 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/ddb15afe058dd1560ef56e76936db5fe58365dd9"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/530ab0420b51b22f9a6c70b78ecb3068a76ffe00",
        "bug_id": "activemq_59",
        "file": [
            {
                "additions": 1,
                "sha": "96f13116cc774c5e6c8c97352e90c3960c0c42c1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d93ef2a919c61ba27dbb353f11dee8a333340465/kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java?ref=d93ef2a919c61ba27dbb353f11dee8a333340465",
                "patch": "@@ -237,7 +237,7 @@ public void setEmpty() {\n     private BTreeNode<Key,Value> getRightLeaf(Transaction tx) throws IOException {\n         BTreeNode<Key,Value> cur = this;\n         while(cur.isBranch()) {\n-            cur = cur.getChild(tx, keys.length);\n+            cur = cur.getChild(tx, cur.keys.length);\n         }\n         return cur;\n     }",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/d93ef2a919c61ba27dbb353f11dee8a333340465/kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java"
            }
        ],
        "repo": "activemq",
        "message": "Fixes AMQ-2863 : KahaDB NPE can occur using random index removes\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983672 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/d93ef2a919c61ba27dbb353f11dee8a333340465"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/7629eafd0a54f163b8092f43d2d83f9cd6ee3907",
        "bug_id": "activemq_60",
        "file": [
            {
                "additions": 39,
                "sha": "569c2b76d8cb1ff90d820205339ff86c93954e5e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/530ab0420b51b22f9a6c70b78ecb3068a76ffe00/kahadb/src/test/java/org/apache/kahadb/index/BTreeIndexTest.java",
                "deletions": 0,
                "filename": "kahadb/src/test/java/org/apache/kahadb/index/BTreeIndexTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/test/java/org/apache/kahadb/index/BTreeIndexTest.java?ref=530ab0420b51b22f9a6c70b78ecb3068a76ffe00",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Random;\n \n import org.apache.kahadb.index.BTreeIndex;\n import org.apache.kahadb.index.Index;\n@@ -173,6 +174,44 @@ public void visit(List<String> keys, List<Long> values) {\n         this.index.unload(tx);\n         tx.commit();\n     }\n+\n+\n+    public void testRandomRemove() throws Exception {\n+\n+        createPageFileAndIndex(100);\n+        BTreeIndex<String,Long> index = ((BTreeIndex<String,Long>)this.index);\n+        this.index.load(tx);\n+        tx.commit();\n+\n+        final int count = 4000;\n+        doInsert(count);\n+\n+        Random rand = new Random(System.currentTimeMillis());\n+        int i = 0, prev = 0;\n+        while (!index.isEmpty(tx)) {\n+            prev = i;\n+            i = rand.nextInt(count);\n+            try {\n+                index.remove(tx, key(i));\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                fail(\"unexpected exception on \" + i + \", prev: \" + prev + \", ex: \" + e);\n+            }\n+        }\n+    }\n+\n+    public void testRemovePattern() throws Exception {\n+        createPageFileAndIndex(100);\n+        BTreeIndex<String,Long> index = ((BTreeIndex<String,Long>)this.index);\n+        this.index.load(tx);\n+        tx.commit();\n+\n+        final int count = 4000;\n+        doInsert(count);\n+\n+        index.remove(tx, key(3697));\n+        index.remove(tx, key(1566));\n+    }\n     \n     void doInsertReverse(int count) throws Exception {\n         for (int i = count-1; i >= 0; i--) {",
                "changes": 39,
                "blob_url": "https://github.com/apache/activemq/blob/530ab0420b51b22f9a6c70b78ecb3068a76ffe00/kahadb/src/test/java/org/apache/kahadb/index/BTreeIndexTest.java"
            }
        ],
        "repo": "activemq",
        "message": "test showing npe remove issue in kahadb index\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@983644 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/530ab0420b51b22f9a6c70b78ecb3068a76ffe00"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/cee683f84c087dd8239078aaadaa5477193a44f0",
        "bug_id": "activemq_61",
        "file": [
            {
                "additions": 2,
                "sha": "5eaaff610f9d28f43d314c4f8856bcb79c4cf806",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/67699f2a18c3dbc0ad7de05caef5da3ed842898d/activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommandSupport.java",
                "deletions": 4,
                "filename": "activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommandSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommandSupport.java?ref=67699f2a18c3dbc0ad7de05caef5da3ed842898d",
                "patch": "@@ -34,18 +34,16 @@\n     private Command command;\n \n     @Argument(index=0, multiValued=true, required=true)\n-    private Collection<String> arguments = null;\n+    private Collection<String> arguments;\n \n     protected Object doExecute() throws Exception {\n-        final String[] args = toStringArray(arguments.toArray());\n-\n         CommandContext context2 = new CommandContext();\n         context2.setFormatter(new CommandShellOutputFormatter(System.out));\n         Command currentCommand = command.getClass().newInstance();\n \n         try {\n             currentCommand.setCommandContext(context2);\n-            currentCommand.execute(new ArrayList<String>(Arrays.asList(args)));\n+            currentCommand.execute(arguments != null ? new ArrayList<String>(arguments) : new ArrayList<String>());\n             return null;\n         } catch (Throwable e) {\n             Throwable cur = e;",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/67699f2a18c3dbc0ad7de05caef5da3ed842898d/activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommandSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "fix possible npe in karaf commands\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@963240 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/67699f2a18c3dbc0ad7de05caef5da3ed842898d"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/e79239531e0aaca00fdde1aeeed0705f6f668be2",
        "bug_id": "activemq_62",
        "file": [
            {
                "additions": 3,
                "sha": "2ad512ceec6c165abe726e0b85e9d0ce49628785",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/e1a2d7dc75a0b678aad2e4dee55fa46cdf03385e/activemq-core/src/test/java/org/apache/activemq/ProducerFlowControlSendFailTest.java",
                "deletions": 1,
                "filename": "activemq-core/src/test/java/org/apache/activemq/ProducerFlowControlSendFailTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/ProducerFlowControlSendFailTest.java?ref=e1a2d7dc75a0b678aad2e4dee55fa46cdf03385e",
                "patch": "@@ -104,7 +104,9 @@ public void run() {\n         TextMessage msg;\n         for (int idx = 0; idx < 10; ++idx) {\n             msg = (TextMessage) consumer.receive(1000);\n-            msg.acknowledge();\n+            if (msg != null) {\n+                msg.acknowledge();\n+            }\n         }\n         keepGoing.set(false);\n     }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/e1a2d7dc75a0b678aad2e4dee55fa46cdf03385e/activemq-core/src/test/java/org/apache/activemq/ProducerFlowControlSendFailTest.java"
            }
        ],
        "repo": "activemq",
        "message": "resolve potential npe in test\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@812872 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/e1a2d7dc75a0b678aad2e4dee55fa46cdf03385e"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/657e6fa1dd1f4c3700e14a9fe46e9aa130e830fa",
        "bug_id": "activemq_63",
        "file": [
            {
                "additions": 7,
                "sha": "aa14237a6852b0d461f05816282e6e7a14bef986",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/4dda0d83536040814f3aa8b3aea99e2e4d3006af/activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java",
                "deletions": 3,
                "filename": "activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java?ref=4dda0d83536040814f3aa8b3aea99e2e4d3006af",
                "patch": "@@ -57,7 +57,7 @@ protected BrokerService createNetworkedBroker() throws Exception {\n     public void testMbeanPresenceOnNetworkBrokerRestart() throws Exception {\n         BrokerService broker = createBroker();\n         broker.start();\n-        assertEquals(1, countMbeans(broker, \"Connector\", 2000));\n+        assertEquals(1, countMbeans(broker, \"Connector\", 5000));\n         assertEquals(0, countMbeans(broker, \"Connection\"));\n         BrokerService networkedBroker = null;\n         for (int i=0; i<numRestarts; i++) {       \n@@ -115,17 +115,21 @@ private int countMbeans(BrokerService broker, String type, int timeout) throws E\n         final ObjectName beanName = new ObjectName(\"org.apache.activemq:BrokerName=\"\n                 + broker.getBrokerName() + \",Type=\" + type +\",*\");\n         Set<?> mbeans = null;\n-        \n+        int count = 0;\n         do {\n             if (timeout > 0) {\n                 Thread.sleep(100);\n             }\n             MBeanServerConnection mbsc = getMBeanServerConnection();\n             if (mbsc != null) {\n+                LOG.info(\"Query name: \" + beanName);\n                 mbeans = mbsc.queryMBeans(beanName, null);\n+                if (mbeans != null) {\n+                    count = mbeans.size();\n+                }\n             }\n         } while ((mbeans == null || mbeans.isEmpty()) && expiryTime > System.currentTimeMillis());\n-        return mbeans.size();\n+        return count;\n     }\n \n     private MBeanServerConnection getMBeanServerConnection() throws MalformedURLException {",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/4dda0d83536040814f3aa8b3aea99e2e4d3006af/activemq-core/src/test/java/org/apache/activemq/network/DuplexNetworkMBeanTest.java"
            }
        ],
        "repo": "activemq",
        "message": "resolve npe if no mbeans found\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@742443 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/4dda0d83536040814f3aa8b3aea99e2e4d3006af"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/5ac6f3a890e05c2ac892bb01ac1e67726428a852",
        "bug_id": "activemq_64",
        "file": [
            {
                "additions": 125,
                "sha": "4965289c5a437bae9b44d41a7b20a004c29641f3",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/MapTransportConnectionStateRegister.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/MapTransportConnectionStateRegister.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/MapTransportConnectionStateRegister.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -0,0 +1,125 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.broker;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.activemq.command.ConnectionId;\n+import org.apache.activemq.command.ConsumerId;\n+import org.apache.activemq.command.ProducerId;\n+import org.apache.activemq.command.SessionId;\n+\n+/**\n+ * @version $Revision: 1.8 $\n+ */\n+\n+public class MapTransportConnectionStateRegister  implements TransportConnectionStateRegister{\n+\n+    private  Map <ConnectionId,TransportConnectionState>connectionStates = new ConcurrentHashMap<ConnectionId,TransportConnectionState>();\n+\n+    public TransportConnectionState registerConnectionState(ConnectionId connectionId,\n+                                                               TransportConnectionState state) {\n+        TransportConnectionState rc = connectionStates.put(connectionId, state);\n+        return rc;\n+    }\n+\n+    public TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {\n+        TransportConnectionState rc = connectionStates.remove(connectionId);\n+        return rc;\n+    }\n+\n+    public List<TransportConnectionState> listConnectionStates() {\n+    \t\n+        List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();\n+        rc.addAll(connectionStates.values());\n+        return rc;\n+    }\n+\n+    public TransportConnectionState lookupConnectionState(String connectionId) {\n+        return connectionStates.get(new ConnectionId(connectionId));\n+    }\n+\n+    public TransportConnectionState lookupConnectionState(ConsumerId id) {\n+        TransportConnectionState cs = lookupConnectionState(id.getConnectionId());\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a consumer from a connection that had not been registered: \"\n+                                                + id.getParentId().getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public TransportConnectionState lookupConnectionState(ProducerId id) {\n+    \t TransportConnectionState cs = lookupConnectionState(id.getConnectionId());\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a producer from a connection that had not been registered: \"\n+                                                + id.getParentId().getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public TransportConnectionState lookupConnectionState(SessionId id) {\n+    \t TransportConnectionState cs = lookupConnectionState(id.getConnectionId());\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a session from a connection that had not been registered: \"\n+                                                + id.getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public TransportConnectionState lookupConnectionState(ConnectionId connectionId) {\n+        TransportConnectionState cs = connectionStates.get(connectionId);\n+        if (cs == null) {\n+            throw new IllegalStateException(\"Cannot lookup a connection that had not been registered: \"\n+                                            + connectionId);\n+        }\n+        return cs;\n+    }\n+\n+\t\n+\n+\tpublic boolean doesHandleMultipleConnectionStates() {\n+\t\treturn true;\n+\t}\n+\n+\tpublic boolean isEmpty() {\n+\t\treturn connectionStates.isEmpty();\n+\t}\n+\n+\tpublic void clear() {\n+\t\tconnectionStates.clear();\n+\t\t\n+\t}\n+\n+\tpublic void intialize(TransportConnectionStateRegister other) {\n+\t\tconnectionStates.clear();\n+\t\tconnectionStates.putAll(other.mapStates());\n+\t\t\n+\t}\n+\n+\tpublic Map<ConnectionId, TransportConnectionState> mapStates() {\n+\t\tHashMap<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>(connectionStates);\n+\t\treturn map;\n+\t}\n+\n+}",
                "changes": 125,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/MapTransportConnectionStateRegister.java"
            },
            {
                "additions": 155,
                "sha": "26ab5a8e8d7c8ee56d7e7bbca86c30b31279d4aa",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/SingleTransportConnectionStateRegister.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/SingleTransportConnectionStateRegister.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/SingleTransportConnectionStateRegister.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.broker;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.activemq.command.ConnectionId;\n+import org.apache.activemq.command.ConsumerId;\n+import org.apache.activemq.command.ProducerId;\n+import org.apache.activemq.command.SessionId;\n+\n+/**\n+ * @version $Revision: 1.8 $\n+ */\n+\n+public class SingleTransportConnectionStateRegister  implements TransportConnectionStateRegister{\n+\n+    private  TransportConnectionState connectionState;\n+    private ConnectionId connectionId;\n+\n+    public TransportConnectionState registerConnectionState(ConnectionId connectionId,\n+                                                               TransportConnectionState state) {\n+        TransportConnectionState rc = connectionState;\n+        connectionState = state;\n+        this.connectionId = connectionId;\n+        return rc;\n+    }\n+\n+    public synchronized TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {\n+        TransportConnectionState rc = null;\n+        \n+       \n+        if (connectionId != null && connectionState != null && this.connectionId!=null){\n+        if (this.connectionId.equals(connectionId)){\n+\t\t\trc = connectionState;\n+\t\t\tconnectionState = null;\n+\t\t\tconnectionId = null;\n+\t\t}\n+        }\n+        return rc;\n+    }\n+\n+    public synchronized List<TransportConnectionState> listConnectionStates() {\n+        List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();\n+        if (connectionState != null) {\n+            rc.add(connectionState);\n+        }\n+        return rc;\n+    }\n+\n+    public synchronized TransportConnectionState lookupConnectionState(String connectionId) {\n+        TransportConnectionState cs = connectionState;\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a connectionId for a connection that had not been registered: \"\n+                                                + connectionId);\n+        }\n+        return cs;\n+    }\n+\n+    public synchronized TransportConnectionState lookupConnectionState(ConsumerId id) {\n+        TransportConnectionState cs = connectionState;\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a consumer from a connection that had not been registered: \"\n+                                                + id.getParentId().getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public synchronized TransportConnectionState lookupConnectionState(ProducerId id) {\n+        TransportConnectionState cs = connectionState;\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a producer from a connection that had not been registered: \"\n+                                                + id.getParentId().getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public synchronized TransportConnectionState lookupConnectionState(SessionId id) {\n+        TransportConnectionState cs = connectionState;\n+        if (cs == null) {\n+            throw new IllegalStateException(\n+                                            \"Cannot lookup a session from a connection that had not been registered: \"\n+                                                + id.getParentId());\n+        }\n+        return cs;\n+    }\n+\n+    public synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) {\n+        TransportConnectionState cs = connectionState;\n+        if (cs == null) {\n+            throw new IllegalStateException(\"Cannot lookup a connection that had not been registered: \"\n+                                            + connectionId);\n+        }\n+        return cs;\n+    }\n+\n+\tpublic synchronized boolean doesHandleMultipleConnectionStates() {\n+\t\treturn false;\n+\t}\n+\n+\tpublic synchronized boolean isEmpty() {\n+\t\treturn connectionState == null;\n+\t}\n+\n+\tpublic void intialize(TransportConnectionStateRegister other) {\n+\t\t\n+\t\tif (other.isEmpty()){\n+\t\t\tclear();\n+\t\t}else{\n+\t\t\tMap map = other.mapStates();\n+\t\t\tIterator i = map.entrySet().iterator();\n+\t\t\tMap.Entry<ConnectionId, TransportConnectionState> entry = (Entry<ConnectionId, TransportConnectionState>) i.next();\n+\t\t\tconnectionId = entry.getKey();\n+\t\t\tconnectionState =entry.getValue();\n+\t\t}\n+\t\t\n+\t}\n+\n+\tpublic Map<ConnectionId, TransportConnectionState> mapStates() {\n+\t\tMap<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>();\n+\t\tif (!isEmpty()) {\n+\t\t\tmap.put(connectionId, connectionState);\n+\t\t}\n+\t\treturn map;\n+\t}\n+\n+\tpublic void clear() {\n+\t\tconnectionState=null;\n+\t\tconnectionId=null;\n+\t\t\n+\t}\n+\n+}",
                "changes": 155,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/SingleTransportConnectionStateRegister.java"
            },
            {
                "additions": 31,
                "sha": "4a40bb7168f541ab49268cf07d1ae66f996a9328",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java",
                "deletions": 114,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -150,45 +150,7 @@\n     private AtomicInteger protocolVersion = new AtomicInteger(CommandTypes.PROTOCOL_VERSION);\n     private DemandForwardingBridge duplexBridge;\n     private final TaskRunnerFactory taskRunnerFactory;\n-    private TransportConnectionState connectionState;\n-\n-    static class TransportConnectionState extends org.apache.activemq.state.ConnectionState {\n-\n-        private ConnectionContext context;\n-        private TransportConnection connection;\n-        private final Object connectMutex = new Object();\n-        private AtomicInteger referenceCounter = new AtomicInteger();\n-\n-        public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {\n-            super(info);\n-            connection = transportConnection;\n-        }\n-\n-        public ConnectionContext getContext() {\n-            return context;\n-        }\n-\n-        public TransportConnection getConnection() {\n-            return connection;\n-        }\n-\n-        public void setContext(ConnectionContext context) {\n-            this.context = context;\n-        }\n-\n-        public void setConnection(TransportConnection connection) {\n-            this.connection = connection;\n-        }\n-\n-        public int incrementReference() {\n-            return referenceCounter.incrementAndGet();\n-        }\n-\n-        public int decrementReference() {\n-            return referenceCounter.decrementAndGet();\n-        }\n-\n-    }\n+    private TransportConnectionStateRegister connectionStateRegister = new SingleTransportConnectionStateRegister();\n \n     /**\n      * @param connector\n@@ -555,7 +517,7 @@ public synchronized Response processAddConsumer(ConsumerInfo info) throws Except\n         SessionState ss = cs.getSessionState(sessionId);\n         if (ss == null) {\n             throw new IllegalStateException(\n-                                            \"Cannot add a consumer to a session that had not been registered: \"\n+                                            broker.getBrokerName() + \" Cannot add a consumer to a session that had not been registered: \"\n                                                 + sessionId);\n         }\n         // Avoid replaying dup commands\n@@ -598,6 +560,7 @@ public synchronized Response processAddSession(SessionInfo info) throws Exceptio\n             try {\n                 cs.addSession(info);\n             } catch (IllegalStateException e) {\n+            \te.printStackTrace();\n                 broker.removeSession(cs.getContext(), info);\n             }\n         }\n@@ -659,7 +622,7 @@ public Response processAddConnection(ConnectionInfo info) throws Exception {\n         // If there are 2 concurrent connections for the same connection id,\n         // then last one in wins, we need to sync here\n         // to figure out the winner.\n-        synchronized (state.connectMutex) {\n+        synchronized (state.getConnectionMutex()) {\n             if (state.getConnection() != this) {\n                 LOG.debug(\"Killing previous stale connection: \" + state.getConnection().getRemoteAddress());\n                 state.getConnection().stop();\n@@ -1306,90 +1269,44 @@ public Response processConsumerControl(ConsumerControl control) throws Exception\n         return null;\n     }\n \n-    // /////////////////////////////////////////////////////////////////\n-    //\n-    // The following methods handle the logical connection state. It is possible\n-    // multiple logical connections multiplexed over a single physical\n-    // connection.\n-    // But have not yet exploited the feature from the clients, so for\n-    // performance\n-    // reasons (to avoid a hash lookup) this class only keeps track of 1\n-    // logical connection state.\n-    //\n-    // A sub class could override these methods to a full multiple logical\n-    // connection\n-    // support.\n-    //\n-    // /////////////////////////////////////////////////////////////////\n-\n-    protected TransportConnectionState registerConnectionState(ConnectionId connectionId,\n-                                                               TransportConnectionState state) {\n-        TransportConnectionState rc = connectionState;\n-        connectionState = state;\n-        return rc;\n-    }\n-\n-    protected TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {\n-        TransportConnectionState rc = connectionState;\n-        connectionState = null;\n-        return rc;\n-    }\n-\n-    protected List<TransportConnectionState> listConnectionStates() {\n-        List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();\n-        if (connectionState != null) {\n-            rc.add(connectionState);\n+    protected synchronized TransportConnectionState registerConnectionState(ConnectionId connectionId,TransportConnectionState state) {\n+        TransportConnectionState cs = null;\n+        if (!connectionStateRegister.isEmpty() && !connectionStateRegister.doesHandleMultipleConnectionStates()){\n+        \t//swap implementations\n+        \tTransportConnectionStateRegister newRegister = new MapTransportConnectionStateRegister();\n+        \tnewRegister.intialize(connectionStateRegister);\n+        \tconnectionStateRegister = newRegister;\n         }\n-        return rc;\n+    \tcs= connectionStateRegister.registerConnectionState(connectionId, state);\n+    \treturn cs;\n     }\n \n-    protected TransportConnectionState lookupConnectionState(String connectionId) {\n-        TransportConnectionState cs = connectionState;\n-        if (cs == null) {\n-            throw new IllegalStateException(\n-                                            \"Cannot lookup a connectionId for a connection that had not been registered: \"\n-                                                + connectionId);\n-        }\n-        return cs;\n+    protected synchronized TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {\n+        return connectionStateRegister.unregisterConnectionState(connectionId);\n     }\n \n-    protected TransportConnectionState lookupConnectionState(ConsumerId id) {\n-        TransportConnectionState cs = connectionState;\n-        if (cs == null) {\n-            throw new IllegalStateException(\n-                                            \"Cannot lookup a consumer from a connection that had not been registered: \"\n-                                                + id.getParentId().getParentId());\n-        }\n-        return cs;\n+    protected synchronized List<TransportConnectionState> listConnectionStates() {\n+        return connectionStateRegister.listConnectionStates();\n     }\n \n-    protected TransportConnectionState lookupConnectionState(ProducerId id) {\n-        TransportConnectionState cs = connectionState;\n-        if (cs == null) {\n-            throw new IllegalStateException(\n-                                            \"Cannot lookup a producer from a connection that had not been registered: \"\n-                                                + id.getParentId().getParentId());\n-        }\n-        return cs;\n+    protected synchronized TransportConnectionState lookupConnectionState(String connectionId) {\n+    \t  return connectionStateRegister.lookupConnectionState(connectionId);\n     }\n \n-    protected TransportConnectionState lookupConnectionState(SessionId id) {\n-        TransportConnectionState cs = connectionState;\n-        if (cs == null) {\n-            throw new IllegalStateException(\n-                                            \"Cannot lookup a session from a connection that had not been registered: \"\n-                                                + id.getParentId());\n-        }\n-        return cs;\n+    protected synchronized TransportConnectionState lookupConnectionState(ConsumerId id) {\n+    \t  return connectionStateRegister.lookupConnectionState(id);\n     }\n \n-    protected TransportConnectionState lookupConnectionState(ConnectionId connectionId) {\n-        TransportConnectionState cs = connectionState;\n-        if (cs == null) {\n-            throw new IllegalStateException(\"Cannot lookup a connection that had not been registered: \"\n-                                            + connectionId);\n-        }\n-        return cs;\n+    protected synchronized TransportConnectionState lookupConnectionState(ProducerId id) {\n+    \t  return connectionStateRegister.lookupConnectionState(id);\n+    }\n+\n+    protected synchronized TransportConnectionState lookupConnectionState(SessionId id) {\n+        return connectionStateRegister.lookupConnectionState(id);\n+    }\n+\n+    protected synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) {\n+        return connectionStateRegister.lookupConnectionState(connectionId);\n     }\n \n }",
                "changes": 145,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java"
            },
            {
                "additions": 74,
                "sha": "5f9c8c25f68301256ac5b9a69a485acf67d4f5bf",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionState.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionState.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionState.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.broker;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.activemq.command.ConnectionInfo;\n+\n+/**\n+ * @version $Revision: 1.8 $\n+ */\n+\n+public class TransportConnectionState extends org.apache.activemq.state.ConnectionState {\n+\n+    private ConnectionContext context;\n+    private TransportConnection connection;\n+    private AtomicInteger referenceCounter = new AtomicInteger();\n+    private final Object connectionMutex = new Object();\n+\n+    public TransportConnectionState(ConnectionInfo info, TransportConnection transportConnection) {\n+        super(info);\n+        connection = transportConnection;\n+    }\n+\n+    public ConnectionContext getContext() {\n+        return context;\n+    }\n+\n+    public TransportConnection getConnection() {\n+        return connection;\n+    }\n+\n+    public void setContext(ConnectionContext context) {\n+        this.context = context;\n+    }\n+\n+    public void setConnection(TransportConnection connection) {\n+        this.connection = connection;\n+    }\n+\n+    public int incrementReference() {\n+        return referenceCounter.incrementAndGet();\n+    }\n+\n+    public int decrementReference() {\n+        return referenceCounter.decrementAndGet();\n+    }\n+\n+\tpublic AtomicInteger getReferenceCounter() {\n+\t\treturn referenceCounter;\n+\t}\n+\n+\tpublic void setReferenceCounter(AtomicInteger referenceCounter) {\n+\t\tthis.referenceCounter = referenceCounter;\n+\t}\n+\n+\tpublic Object getConnectionMutex() {\n+\t\treturn connectionMutex;\n+\t}\n+}",
                "changes": 74,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionState.java"
            },
            {
                "additions": 60,
                "sha": "77a80ffae76132283c0bbafdd7708a8fa6e11d5c",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionStateRegister.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionStateRegister.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionStateRegister.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.broker;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.activemq.command.ConnectionId;\n+import org.apache.activemq.command.ConsumerId;\n+import org.apache.activemq.command.ProducerId;\n+import org.apache.activemq.command.SessionId;\n+\n+/**\n+ * @version $Revision: 1.8 $\n+ */\n+\n+public interface TransportConnectionStateRegister{\n+\n+    TransportConnectionState registerConnectionState(ConnectionId connectionId,\n+                                                               TransportConnectionState state);\n+    \n+    TransportConnectionState unregisterConnectionState(ConnectionId connectionId);\n+\n+    List<TransportConnectionState> listConnectionStates();\n+    \n+    Map<ConnectionId,TransportConnectionState>mapStates();\n+    \n+    TransportConnectionState lookupConnectionState(String connectionId);\n+    \n+    TransportConnectionState lookupConnectionState(ConsumerId id);\n+    \n+    TransportConnectionState lookupConnectionState(ProducerId id);\n+    \n+    TransportConnectionState lookupConnectionState(SessionId id);\n+\n+    TransportConnectionState lookupConnectionState(ConnectionId connectionId);\n+        \n+    boolean isEmpty();\n+    \n+    boolean doesHandleMultipleConnectionStates();\n+    \n+    void intialize(TransportConnectionStateRegister other);\n+    \n+    void clear();\n+\n+}",
                "changes": 60,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnectionStateRegister.java"
            },
            {
                "additions": 9,
                "sha": "14ef4cce2bd5c06138ebf4058f90b89de7f3d51b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -100,6 +100,7 @@\n     protected final ConcurrentHashMap<ConsumerId, DemandSubscription> subscriptionMapByRemoteId = new ConcurrentHashMap<ConsumerId, DemandSubscription>();\n     protected final BrokerId localBrokerPath[] = new BrokerId[] {null};\n     protected CountDownLatch startedLatch = new CountDownLatch(2);\n+    protected CountDownLatch localStartedLatch = new CountDownLatch(1);\n     protected CountDownLatch remoteBrokerNameKnownLatch = new CountDownLatch(1);\n     protected final AtomicBoolean remoteInterupted = new AtomicBoolean(false);\n     protected final AtomicBoolean lastConnectSucceeded = new AtomicBoolean(false);\n@@ -172,6 +173,7 @@ public void transportInterupted() {\n                         localBridgeStarted.set(false);\n                         remoteBridgeStarted.set(false);\n                         startedLatch = new CountDownLatch(2);\n+                        localStartedLatch = new CountDownLatch(1);\n                     }\n                 }\n \n@@ -261,6 +263,7 @@ protected void startLocalBridge() throws Exception {\n                 LOG.info(\"Network connection between \" + localBroker + \" and \" + remoteBroker + \"(\" + remoteBrokerName + \") has been established.\");\n \n                 startedLatch.countDown();\n+                localStartedLatch.countDown();\n                 setupStaticDestinations();\n             }\n         }\n@@ -339,6 +342,7 @@ public void stop() throws Exception {\n                     // stuck waiting for it to start up.\n                     startedLatch.countDown();\n                     startedLatch.countDown();\n+                    localStartedLatch.countDown();\n                     ss.throwFirstException();\n                 }\n             }\n@@ -406,6 +410,7 @@ protected void serviceRemoteCommand(Command command) {\n                                 localBroker.oneway(command);\n                                 break;\n                             case ConsumerInfo.DATA_STRUCTURE_TYPE:\n+                            \tlocalStartedLatch.await();\n                                 if (!addConsumerInfo((ConsumerInfo)command)) {\n                                     if (LOG.isDebugEnabled()) {\n                                         LOG.debug(\"Ignoring ConsumerInfo: \" + command);\n@@ -430,6 +435,7 @@ protected void serviceRemoteCommand(Command command) {\n                     }\n                 }\n             } catch (Throwable e) {\n+            \te.printStackTrace();\n                 serviceRemoteException(e);\n             }\n         }\n@@ -554,7 +560,7 @@ protected void serviceLocalCommand(Command command) {\n             try {\n                 if (command.isMessageDispatch()) {\n                     enqueueCounter.incrementAndGet();\n-                    waitStarted();\n+                    //localStartedLatch.await();\n                     final MessageDispatch md = (MessageDispatch)command;\n                     DemandSubscription sub = subscriptionMapByLocalId.get(md.getConsumerId());\n                     if (sub != null) {\n@@ -628,7 +634,8 @@ public void onCompletion(FutureResponse future) {\n                         LOG.warn(\"Unexpected local command: \" + command);\n                     }\n                 }\n-            } catch (Exception e) {\n+            } catch (Throwable e) {\n+            \te.printStackTrace();\n                 serviceLocalException(e);\n             }\n         }",
                "changes": 11,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java"
            },
            {
                "additions": 5,
                "sha": "9686ec7995adcddf74833a24ace50a734c74395e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java",
                "deletions": 4,
                "filename": "activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java?ref=a9119eca19a8a427d2f99693bf98553d8bba8bb2",
                "patch": "@@ -90,18 +90,19 @@ public void onMessage(Message msg) {\n         }\n     }\n \n-    public void xtestFiltering() throws Exception {\n+    public void testFiltering() throws Exception {\n \n         MessageConsumer includedConsumer = remoteSession.createConsumer(included);\n         MessageConsumer excludedConsumer = remoteSession.createConsumer(excluded);\n         MessageProducer includedProducer = localSession.createProducer(included);\n         MessageProducer excludedProducer = localSession.createProducer(excluded);\n-        Thread.sleep(1000);\n+        // allow for consumer infos to perculate arround\n+        Thread.sleep(2000);\n         Message test = localSession.createTextMessage(\"test\");\n         includedProducer.send(test);\n         excludedProducer.send(test);\n-        assertNull(excludedConsumer.receive(500));\n-        assertNotNull(includedConsumer.receive(500));\n+        assertNull(excludedConsumer.receive(1000));\n+        assertNotNull(includedConsumer.receive(1000));\n     }\n \n     public void xtestConduitBridge() throws Exception {",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/a9119eca19a8a427d2f99693bf98553d8bba8bb2/activemq-core/src/test/java/org/apache/activemq/network/SimpleNetworkTest.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix for NPE in duplex network connection\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@583595 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/a9119eca19a8a427d2f99693bf98553d8bba8bb2"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/22fbb80daf6d1dd9ab658882c7e74d23b42e412f",
        "bug_id": "activemq_65",
        "file": [
            {
                "additions": 29,
                "sha": "1a14923f16174c1abc1f9926a655fe3ba156117d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/b9d0972596be05f33877fd67eee3d2558c1389bf/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndexLinkedList.java",
                "deletions": 23,
                "filename": "activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndexLinkedList.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndexLinkedList.java?ref=b9d0972596be05f33877fd67eee3d2558c1389bf",
                "patch": "@@ -36,7 +36,7 @@ public VMIndexLinkedList(IndexItem header) {\n         root.prev = root;\n     }\n \n-    public IndexItem getRoot() {\n+    public synchronized IndexItem getRoot() {\n         return root;\n     }\n \n@@ -45,7 +45,7 @@ public IndexItem getRoot() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#getFirst()\n      */\n-    public IndexItem getFirst() {\n+    public synchronized IndexItem getFirst() {\n         if (size == 0) {\n             return null;\n         }\n@@ -57,7 +57,7 @@ public IndexItem getFirst() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#getLast()\n      */\n-    public IndexItem getLast() {\n+    public synchronized IndexItem getLast() {\n         if (size == 0) {\n             return null;\n         }\n@@ -69,7 +69,7 @@ public IndexItem getLast() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#removeFirst()\n      */\n-    public StoreEntry removeFirst() {\n+    public synchronized StoreEntry removeFirst() {\n         if (size == 0) {\n             return null;\n         }\n@@ -83,7 +83,7 @@ public StoreEntry removeFirst() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#removeLast()\n      */\n-    public Object removeLast() {\n+    public synchronized Object removeLast() {\n         if (size == 0) {\n             return null;\n         }\n@@ -97,7 +97,7 @@ public Object removeLast() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#addFirst(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public void addFirst(IndexItem item) {\n+    public synchronized void addFirst(IndexItem item) {\n         addBefore(item, root.next);\n     }\n \n@@ -106,7 +106,7 @@ public void addFirst(IndexItem item) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#addLast(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public void addLast(IndexItem item) {\n+    public synchronized void addLast(IndexItem item) {\n         addBefore(item, root);\n     }\n \n@@ -115,7 +115,7 @@ public void addLast(IndexItem item) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#size()\n      */\n-    public int size() {\n+    public synchronized int size() {\n         return size;\n     }\n \n@@ -124,7 +124,7 @@ public int size() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#isEmpty()\n      */\n-    public boolean isEmpty() {\n+    public synchronized boolean isEmpty() {\n         return size == 0;\n     }\n \n@@ -133,7 +133,7 @@ public boolean isEmpty() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#add(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public boolean add(IndexItem item) {\n+    public synchronized boolean add(IndexItem item) {\n         addBefore(item, root);\n         return true;\n     }\n@@ -143,7 +143,7 @@ public boolean add(IndexItem item) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#clear()\n      */\n-    public void clear() {\n+    public synchronized void clear() {\n         root.next = root;\n         root.prev = root;\n         size = 0;\n@@ -155,7 +155,7 @@ public void clear() {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#get(int)\n      */\n-    public IndexItem get(int index) {\n+    public synchronized IndexItem get(int index) {\n         return entry(index);\n     }\n \n@@ -165,7 +165,7 @@ public IndexItem get(int index) {\n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#add(int,\n      *      org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public void add(int index, IndexItem element) {\n+    public synchronized void add(int index, IndexItem element) {\n         addBefore(element, index == size ? root : entry(index));\n     }\n \n@@ -174,7 +174,7 @@ public void add(int index, IndexItem element) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#remove(int)\n      */\n-    public Object remove(int index) {\n+    public synchronized Object remove(int index) {\n         IndexItem e = entry(index);\n         remove(e);\n         return e;\n@@ -206,7 +206,7 @@ private IndexItem entry(int index) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#indexOf(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public int indexOf(StoreEntry o) {\n+    public synchronized int indexOf(StoreEntry o) {\n         int index = 0;\n         for (IndexItem e = root.next; e != root; e = e.next) {\n             if (o == e) {\n@@ -222,7 +222,7 @@ public int indexOf(StoreEntry o) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#getNextEntry(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public IndexItem getNextEntry(IndexItem entry) {\n+    public synchronized IndexItem getNextEntry(IndexItem entry) {\n         return entry.next != root ? entry.next : null;\n     }\n \n@@ -231,7 +231,7 @@ public IndexItem getNextEntry(IndexItem entry) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#getPrevEntry(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public IndexItem getPrevEntry(IndexItem entry) {\n+    public synchronized IndexItem getPrevEntry(IndexItem entry) {\n         return entry.prev != root ? entry.prev : null;\n     }\n \n@@ -241,7 +241,7 @@ public IndexItem getPrevEntry(IndexItem entry) {\n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#addBefore(org.apache.activemq.kaha.impl.IndexItem,\n      *      org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public void addBefore(IndexItem insert, IndexItem e) {\n+    public synchronized void addBefore(IndexItem insert, IndexItem e) {\n         insert.next = e;\n         insert.prev = e.prev;\n         insert.prev.next = insert;\n@@ -254,10 +254,16 @@ public void addBefore(IndexItem insert, IndexItem e) {\n      * \n      * @see org.apache.activemq.kaha.impl.IndexLinkedList#remove(org.apache.activemq.kaha.impl.IndexItem)\n      */\n-    public void remove(IndexItem e) {\n-        if (e == root) {\n+    public synchronized void remove(IndexItem e) {\n+        if (e == root || e.equals(root)) {\n             return;\n         }\n+        if (e.prev==null){\n+        \te.prev=root;\n+        }\n+        if (e.next==null){\n+        \te.next=root;\n+        }\n         e.prev.next = e.next;\n         e.next.prev = e.prev;\n         size--;\n@@ -266,15 +272,15 @@ public void remove(IndexItem e) {\n     /**\n      * @return clone\n      */\n-    public Object clone() {\n+    public synchronized Object clone() {\n         IndexLinkedList clone = new VMIndexLinkedList(this.root);\n         for (IndexItem e = root.next; e != root; e = e.next) {\n             clone.add(e);\n         }\n         return clone;\n     }\n \n-    public StoreEntry getEntry(StoreEntry current) {\n+    public synchronized StoreEntry getEntry(StoreEntry current) {\n         return current;\n     }\n \n@@ -283,7 +289,7 @@ public StoreEntry getEntry(StoreEntry current) {\n      * \n      * @param current\n      */\n-    public StoreEntry refreshEntry(StoreEntry current) {\n+    public synchronized StoreEntry refreshEntry(StoreEntry current) {\n         return current;\n     }\n }",
                "changes": 52,
                "blob_url": "https://github.com/apache/activemq/blob/b9d0972596be05f33877fd67eee3d2558c1389bf/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/VMIndexLinkedList.java"
            }
        ],
        "repo": "activemq",
        "message": "quick fix for npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@582910 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/b9d0972596be05f33877fd67eee3d2558c1389bf"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ba54ee86b290fe33110e05d44f17b4de03b71c9c",
        "bug_id": "activemq_66",
        "file": [
            {
                "additions": 14,
                "sha": "93db67b8d2547108507a87be38bc803918cfdde3",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/cb3becf3c4db10c952d14fda83de55bb30cac878/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java",
                "deletions": 12,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java?ref=cb3becf3c4db10c952d14fda83de55bb30cac878",
                "patch": "@@ -163,19 +163,21 @@ private void acknowledge(MessageId messageId,Location location,SubscriptionKey k\n             this.ackedLastAckLocations=new HashMap<SubscriptionKey,MessageId>();\n         }\n         Location location=super.doAsyncWrite();\n-        transactionTemplate.run(new Callback(){\n-\n-            public void execute() throws Exception{\n-                // Checkpoint the acknowledged messages.\n-                Iterator<SubscriptionKey> iterator=cpAckedLastAckLocations.keySet().iterator();\n-                while(iterator.hasNext()){\n-                    SubscriptionKey subscriptionKey=iterator.next();\n-                    MessageId identity=cpAckedLastAckLocations.get(subscriptionKey);\n-                    topicReferenceStore.acknowledge(transactionTemplate.getContext(),subscriptionKey.clientId,\n-                            subscriptionKey.subscriptionName,identity);\n+\n+        if (cpAckedLastAckLocations != null) {\n+            transactionTemplate.run(new Callback() {\n+                public void execute() throws Exception {\n+                    // Checkpoint the acknowledged messages.\n+                    Iterator<SubscriptionKey> iterator = cpAckedLastAckLocations.keySet().iterator();\n+                    while (iterator.hasNext()) {\n+                        SubscriptionKey subscriptionKey = iterator.next();\n+                        MessageId identity = cpAckedLastAckLocations.get(subscriptionKey);\n+                        topicReferenceStore.acknowledge(transactionTemplate.getContext(), subscriptionKey.clientId,\n+                                subscriptionKey.subscriptionName, identity);\n+                    }\n                 }\n-            }\n-        });\n+            });\n+        }\n         return location;\n     }\n ",
                "changes": 26,
                "blob_url": "https://github.com/apache/activemq/blob/cb3becf3c4db10c952d14fda83de55bb30cac878/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid NPE I was getting in the web console\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@516401 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/cb3becf3c4db10c952d14fda83de55bb30cac878"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2a3fddbdead321b6952d38d0d0621ecd7a4024b5",
        "bug_id": "activemq_67",
        "file": [
            {
                "additions": 35,
                "sha": "5a2b4463d2b607b6dcbd2f120b7e777d1ef35556",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/10185cadd759ed63c43f3fe92aa90a45f5af6f50/activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TopicSubContainer.java",
                "deletions": 37,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TopicSubContainer.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TopicSubContainer.java?ref=10185cadd759ed63c43f3fe92aa90a45f5af6f50",
                "patch": "@@ -1,108 +1,106 @@\n /**\n- * \n+ *\n  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE\n  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file\n  * to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the\n  * License. You may obtain a copy of the License at\n- * \n+ *\n  * http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n  * specific language governing permissions and limitations under the License.\n  */\n-\n package org.apache.activemq.store.kahadaptor;\n \n-import java.util.Iterator;\n import org.apache.activemq.command.MessageId;\n import org.apache.activemq.kaha.ListContainer;\n import org.apache.activemq.kaha.StoreEntry;\n \n+import java.util.Iterator;\n+\n /**\n  * Holds information for the subscriber\n- * \n+ *\n  * @version $Revision: 1.10 $\n  */\n- public class TopicSubContainer{\n-\n+public class TopicSubContainer {\n     private ListContainer listContainer;\n     private StoreEntry batchEntry;\n-    \n-    public TopicSubContainer(ListContainer container){\n+\n+    public TopicSubContainer(ListContainer container) {\n         this.listContainer = container;\n     }\n+\n     /**\n      * @return the batchEntry\n      */\n-     public StoreEntry getBatchEntry(){\n+    public StoreEntry getBatchEntry() {\n         return this.batchEntry;\n     }\n-    \n+\n     /**\n      * @param batchEntry the batchEntry to set\n      */\n-     public void setBatchEntry(StoreEntry batchEntry){\n-        this.batchEntry=batchEntry;\n+    public void setBatchEntry(StoreEntry batchEntry) {\n+        this.batchEntry = batchEntry;\n     }\n-    \n-    \n-     public void reset() {\n+\n+    public void reset() {\n         batchEntry = null;\n     }\n-     \n+\n     public boolean isEmpty() {\n         return listContainer.isEmpty();\n     }\n-    \n+\n     public StoreEntry add(ConsumerMessageRef ref) {\n         return listContainer.placeLast(ref);\n     }\n-    \n-    public ConsumerMessageRef remove(MessageId id){\n-        ConsumerMessageRef result=null;\n-        if(!listContainer.isEmpty()){\n-            for(StoreEntry entry=listContainer.getFirst();entry!=null;entry=listContainer.getNext(entry)){\n-                ConsumerMessageRef ref=(ConsumerMessageRef)listContainer.get(entry);\n-                if(ref!=null&&ref.getMessageId().equals(id)){\n+\n+    public ConsumerMessageRef remove(MessageId id) {\n+        ConsumerMessageRef result = null;\n+        if (!listContainer.isEmpty()) {\n+            for (StoreEntry entry = listContainer.getFirst(); entry != null; entry = listContainer.getNext(entry)) {\n+                ConsumerMessageRef ref = (ConsumerMessageRef) listContainer.get(entry);\n+                if (ref != null && ref.getMessageId().equals(id)) {\n                     listContainer.remove(entry);\n-                    result=ref;\n-                    if(listContainer.isEmpty()||batchEntry.equals(entry)){\n+                    result = ref;\n+                    if (listContainer != null && batchEntry != null && (listContainer.isEmpty() || batchEntry.equals(entry))) {\n                         reset();\n                     }\n                 }\n             }\n         }\n         return result;\n     }\n-    \n+\n     public ConsumerMessageRef get(StoreEntry entry) {\n-        return (ConsumerMessageRef)listContainer.get(entry);\n+        return (ConsumerMessageRef) listContainer.get(entry);\n     }\n-    \n+\n     public StoreEntry getEntry() {\n         return listContainer.getFirst();\n     }\n-    \n+\n     public StoreEntry refreshEntry(StoreEntry entry) {\n         return listContainer.refresh(entry);\n     }\n-    \n+\n     public StoreEntry getNextEntry(StoreEntry entry) {\n         return listContainer.getNext(entry);\n     }\n-        \n+\n     public Iterator iterator() {\n         return listContainer.iterator();\n     }\n-    \n+\n     public int size() {\n         return listContainer.size();\n     }\n-    \n+\n     public void clear() {\n         reset();\n         listContainer.clear();\n     }\n-   \n }",
                "changes": 72,
                "blob_url": "https://github.com/apache/activemq/blob/10185cadd759ed63c43f3fe92aa90a45f5af6f50/activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TopicSubContainer.java"
            }
        ],
        "repo": "activemq",
        "message": "fix to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@515746 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/10185cadd759ed63c43f3fe92aa90a45f5af6f50"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/aa54a8bec6cb79c99cd555ec58b5ba6b49aedb8c",
        "bug_id": "activemq_68",
        "file": [
            {
                "additions": 2,
                "sha": "43666686130f5fcb111a8c523d4e8c7f8dc660c0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/4f7025083420058e50051c86170e47c91d2af827/activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java?ref=4f7025083420058e50051c86170e47c91d2af827",
                "patch": "@@ -57,8 +57,8 @@\n     private short nextMarshallCacheIndex=0;    \n     private short nextMarshallCacheEvictionIndex=0;    \n     private HashMap marshallCacheMap = new HashMap();\n-    private DataStructure marshallCache[];\n-    private DataStructure unmarshallCache[];\n+    private DataStructure marshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];\n+    private DataStructure unmarshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];\n     \n \tprivate WireFormatInfo preferedWireFormatInfo;\n             ",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/4f7025083420058e50051c86170e47c91d2af827/activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java"
            }
        ],
        "repo": "activemq",
        "message": "fix npes during tests..\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@467685 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/4f7025083420058e50051c86170e47c91d2af827"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f4d37277d3fb12a63cbfdb868e0e2c98e93408a0",
        "bug_id": "activemq_69",
        "file": [
            {
                "additions": 7,
                "sha": "4e915ba4971a815fab5272375c25d37e8d0af975",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bc71842394d0b618006947014c0c0fe7cbbd85b4/activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java",
                "deletions": 3,
                "filename": "activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java?ref=bc71842394d0b618006947014c0c0fe7cbbd85b4",
                "patch": "@@ -61,10 +61,14 @@ public void setUp() throws Exception {\n     }\n \n     public void tearDown() throws Exception {\n-        for (int i=0; i<BROKER_COUNT; i++) {\n-            brokers[i].stop();\n+        if (brokers != null) {\n+            for (int i=0; i<BROKER_COUNT; i++) {\n+                if (brokers[i] != null) {\n+                    brokers[i].stop();\n+                }\n+            }\n+            super.tearDown();\n         }\n-        super.tearDown();\n     }\n \n     private void doSendReceiveTest() throws Exception {",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/bc71842394d0b618006947014c0c0fe7cbbd85b4/activemq-core/src/test/java/org/apache/activemq/usecases/TwoBrokerMulticastQueueTest.java"
            }
        ],
        "repo": "activemq",
        "message": "Added NPE checking for test case. Still failing though.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@427037 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/bc71842394d0b618006947014c0c0fe7cbbd85b4"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/80bf2417f1452a5160f43d1ff28bf706025b4e8e",
        "bug_id": "activemq_70",
        "file": [
            {
                "additions": 33,
                "sha": "39381a63a0da773552aa5abfb3f8de6c69fb1bda",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0f59ecc43341b23b63a2965e98f6031c48dfc89f/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "deletions": 19,
                "filename": "activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java?ref=0f59ecc43341b23b63a2965e98f6031c48dfc89f",
                "patch": "@@ -54,7 +54,7 @@\n  * Connections. <p/> This class also implements QueueConnectionFactory and\n  * TopicConnectionFactory. You can use this connection to create both\n  * QueueConnections and TopicConnections.\n- * \n+ *\n  * @version $Revision: 1.9 $\n  * @see javax.jms.ConnectionFactory\n  */\n@@ -86,7 +86,7 @@\n     private boolean useRetroactiveConsumer;\n \n     JMSStatsImpl factoryStats = new JMSStatsImpl();\n-     \n+\n     static protected final Executor DEFAULT_CONNECTION_EXECUTOR = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {\n             public Thread newThread(Runnable run) {\n                 Thread thread = new Thread(run);\n@@ -120,7 +120,7 @@ public ActiveMQConnectionFactory copy() {\n             throw new RuntimeException(\"This should never happen: \" + e, e);\n         }\n     }\n-    \n+\n     /**\n      * @param brokerURL\n      * @return\n@@ -237,7 +237,7 @@ protected ActiveMQConnection createActiveMQConnection(String userName, String pa\n             connection.setOptimizeAcknowledge(isOptimizeAcknowledge());\n             connection.setUseRetroactiveConsumer(isUseRetroactiveConsumer());\n             connection.setRedeliveryPolicy(getRedeliveryPolicy());\n-            \n+\n             transport.start();\n \n             if( clientID !=null )\n@@ -269,23 +269,23 @@ public String getBrokerURL() {\n     }\n     public void setBrokerURL(String brokerURL) {\n         this.brokerURL = createURI(brokerURL);\n-        \n+\n         // Use all the properties prefixed with 'jms.' to set the connection factory\n         // options.\n         if( this.brokerURL.getQuery() !=null ) {\n             // It might be a standard URI or...\n             try {\n-                \n+\n                 Map map = URISupport.parseQuery(this.brokerURL.getQuery());\n                 if( IntrospectionSupport.setProperties(this, map, \"jms.\") ) {\n                     this.brokerURL = URISupport.createRemainingURI(this.brokerURL, map);\n                 }\n-                \n+\n             } catch (URISyntaxException e) {\n             }\n-            \n+\n         } else {\n-            \n+\n             // It might be a composite URI.\n             try {\n                 CompositeData data = URISupport.parseComposite(this.brokerURL);\n@@ -360,7 +360,7 @@ public String getUserName() {\n     public void setUserName(String userName) {\n         this.userName = userName;\n     }\n-    \n+\n     public boolean isUseRetroactiveConsumer() {\n         return useRetroactiveConsumer;\n     }\n@@ -386,13 +386,13 @@ public void setRedeliveryPolicy(RedeliveryPolicy redeliveryPolicy) {\n     }\n \n     public void buildFromProperties(Properties properties) {\n-        \n+\n         if (properties == null) {\n             properties = new Properties();\n         }\n-        \n+\n         IntrospectionSupport.setProperties(this, properties);\n-        \n+\n         String temp = properties.getProperty(Context.PROVIDER_URL);\n         if (temp == null || temp.length() == 0) {\n             temp = properties.getProperty(\"brokerURL\");\n@@ -404,23 +404,37 @@ public void buildFromProperties(Properties properties) {\n \n     public void populateProperties(Properties props) {\n         props.setProperty(\"asyncDispatch\", Boolean.toString(isAsyncDispatch()));\n-        props.setProperty(Context.PROVIDER_URL, getBrokerURL());\n-        props.setProperty(\"brokerURL\", getBrokerURL());\n-        if (getClientID() != null)\n+\n+        if (getBrokerURL() != null) {\n+            props.setProperty(Context.PROVIDER_URL, getBrokerURL());\n+            props.setProperty(\"brokerURL\", getBrokerURL());\n+        }\n+\n+        if (getClientID() != null) {\n             props.setProperty(\"clientID\", getClientID());\n+        }\n+\n         props.setProperty(\"copyMessageOnSend\", Boolean.toString(isCopyMessageOnSend()));\n         props.setProperty(\"disableTimeStampsByDefault\", Boolean.toString(isDisableTimeStampsByDefault()));\n         props.setProperty(\"objectMessageSerializationDefered\", Boolean.toString(isObjectMessageSerializationDefered()));\n         props.setProperty(\"optimizedMessageDispatch\", Boolean.toString(isOptimizedMessageDispatch()));\n-        props.setProperty(\"password\", getPassword());\n+\n+        if (getPassword() != null) {\n+            props.setProperty(\"password\", getPassword());\n+        }\n+\n         props.setProperty(\"useAsyncSend\", Boolean.toString(isUseAsyncSend()));\n         props.setProperty(\"useCompression\", Boolean.toString(isUseCompression()));\n         props.setProperty(\"useRetroactiveConsumer\", Boolean.toString(isUseRetroactiveConsumer()));\n-        props.setProperty(\"userName\", getUserName());\n+\n+        if (getUserName() != null) {\n+            props.setProperty(\"userName\", getUserName());\n+        }\n+        \n         props.setProperty(\"closeTimeout\", Integer.toString(getCloseTimeout()));\n         props.setProperty(\"alwaysSessionAsync\", Boolean.toString(isAlwaysSessionAsync()));\n         props.setProperty(\"optimizeAcknowledge\", Boolean.toString(isOptimizeAcknowledge()));\n-        \n+\n     }\n \n     public boolean isUseCompression() {",
                "changes": 52,
                "blob_url": "https://github.com/apache/activemq/blob/0f59ecc43341b23b63a2965e98f6031c48dfc89f/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java"
            }
        ],
        "repo": "activemq",
        "message": "- Added null checking during property set to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@416549 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/0f59ecc43341b23b63a2965e98f6031c48dfc89f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/663b8a24f9d2553450515c56cf4ff52c6b9a5b10",
        "bug_id": "activemq_71",
        "file": [
            {
                "additions": 3,
                "sha": "177e0820a2b0ec93936d3f5cdf81b0aa6b338ea0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSupport.java",
                "deletions": 1,
                "filename": "tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSupport.java?ref=c56ae926a5ea617aa5efd870905d63fa4ffd52bc",
                "patch": "@@ -29,6 +29,8 @@\n public class JmsClientSupport extends JmsFactorySupport {\r\n     private static final Log log = LogFactory.getLog(JmsClientSupport.class);\r\n \r\n+    public static final String DEFAULT_SPI_CLASS = \"org.apache.activemq.tool.spi.ActiveMQPojoSPI\";\r\n+\r\n     private static final String PREFIX_CONFIG_CLIENT = \"client.\";\r\n     public  static final String SESSION_AUTO_ACKNOWLEDGE    = \"autoAck\";\r\n     public  static final String SESSION_CLIENT_ACKNOWLEDGE  = \"clientAck\";\r\n@@ -40,7 +42,7 @@\n     protected Session       jmsSession;\r\n \r\n     // Client settings\r\n-    protected String  spiClass;\r\n+    protected String  spiClass = DEFAULT_SPI_CLASS;\r\n     protected boolean sessTransacted = false;\r\n     protected String  sessAckMode    = SESSION_AUTO_ACKNOWLEDGE;\r\n     protected String  destName       = \"TEST.FOO\";\r",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSupport.java"
            },
            {
                "additions": 1,
                "sha": "dd93883f70fd1e54f11ed94a3b1b75a23b0cd30f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSystemSupport.java",
                "deletions": 1,
                "filename": "tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSystemSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSystemSupport.java?ref=c56ae926a5ea617aa5efd870905d63fa4ffd52bc",
                "patch": "@@ -38,7 +38,7 @@\n     protected Properties jmsClientSettings = new Properties();\r\n     protected ThreadGroup clientThreadGroup;\r\n     protected PerfMeasurementTool performanceSampler;\r\n-    protected String reportDirectory;\r\n+    protected String reportDirectory = \"\";\r\n \r\n     protected int numClients = 1;\r\n     protected int totalDests = 1;\r",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsClientSystemSupport.java"
            },
            {
                "additions": 14,
                "sha": "d39e0cb0a45580e3b179a06259035f1c5fc84ef8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsFactorySupport.java",
                "deletions": 8,
                "filename": "tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsFactorySupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsFactorySupport.java?ref=c56ae926a5ea617aa5efd870905d63fa4ffd52bc",
                "patch": "@@ -62,10 +62,12 @@ public Properties getJmsFactorySettings() {\n \r\n     public void setJmsFactorySettings(Properties jmsFactorySettings) {\r\n         this.jmsFactorySettings = jmsFactorySettings;\r\n-        try {\r\n-            spiFactory.configureConnectionFactory(jmsFactory, jmsFactorySettings);\r\n-        } catch (Exception e) {\r\n-            log.warn(e);\r\n+        if (spiFactory != null) {\r\n+            try {\r\n+                spiFactory.configureConnectionFactory(jmsFactory, jmsFactorySettings);\r\n+            } catch (Exception e) {\r\n+                log.warn(e);\r\n+            }\r\n         }\r\n     }\r\n \r\n@@ -79,10 +81,14 @@ public void setSettings(Properties settings) {\n             String val = settings.getProperty(key);\r\n             setProperty(key, val);\r\n         }\r\n-        try {\r\n-            spiFactory.configureConnectionFactory(jmsFactory, jmsFactorySettings);\r\n-        } catch (Exception e) {\r\n-            log.warn(e);\r\n+\r\n+        if (spiFactory != null) {\r\n+            try {\r\n+                spiFactory.configureConnectionFactory(jmsFactory, jmsFactorySettings);\r\n+            } catch (Exception e) {\r\n+                e.printStackTrace();\r\n+                log.warn(e);\r\n+            }\r\n         }\r\n     }\r\n \r",
                "changes": 22,
                "blob_url": "https://github.com/apache/activemq/blob/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsFactorySupport.java"
            },
            {
                "additions": 2,
                "sha": "75d6ea3a9af3488a612924513ca68e3cfb56e451",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/PerfReportGenerator.java",
                "deletions": 1,
                "filename": "tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/PerfReportGenerator.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/PerfReportGenerator.java?ref=c56ae926a5ea617aa5efd870905d63fa4ffd52bc",
                "patch": "@@ -42,7 +42,8 @@ public PerfReportGenerator(String reportDirectory, String reportName) {\n \r\n     public void startGenerateReport() {\r\n \r\n-        setReportDirectory(this.getTestSettings().getProperty(\"sysTest.reportDirectory\"));\r\n+        setReportDirectory(this.getTestSettings().getProperty(\"sysTest.reportDirectory\", \"\"));\r\n+\r\n \r\n         File reportDir = new File(getReportDirectory());\r\n \r",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/c56ae926a5ea617aa5efd870905d63fa4ffd52bc/tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/PerfReportGenerator.java"
            }
        ],
        "repo": "activemq",
        "message": "- Added default values\n- Added checking for NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@412670 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/c56ae926a5ea617aa5efd870905d63fa4ffd52bc"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/e0692dd265c2cdc453e9973e03a2e8ec9d8fb7f5",
        "bug_id": "activemq_72",
        "file": [
            {
                "additions": 3,
                "sha": "c8b1dba54a73ca47d43c805b4f03fc3367477608",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/9d0ca025fa42a61a7da99086114672fc606e690c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java",
                "deletions": 1,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java?ref=9d0ca025fa42a61a7da99086114672fc606e690c",
                "patch": "@@ -32,6 +32,7 @@\n import javax.resource.spi.work.WorkManager;\n \n import org.apache.activemq.ActiveMQSession;\n+import org.apache.activemq.TransactionContext;\n import org.apache.activemq.ActiveMQSession.DeliveryListener;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -215,7 +216,8 @@ public void afterDelivery(ActiveMQSession session, Message msg) {\n             } catch (Throwable e) {\n                 throw new RuntimeException(\"Endpoint after delivery notification failure\", e);\n             } finally {\n-                if( session.getTransactionContext().isInLocalTransaction() ) {\n+                TransactionContext transactionContext = session.getTransactionContext();\n+                if( transactionContext != null && transactionContext.isInLocalTransaction() ) {\n                     if( !useRAManagedTx ) {\n                         // Sanitiy Check: If the local transaction has not been commited..\n                         // Commit it now.",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/9d0ca025fa42a61a7da99086114672fc606e690c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for AMQ-689 to deal with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@408636 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/9d0ca025fa42a61a7da99086114672fc606e690c"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d68fe55933b51b55ff53e37c3729883549e5e3f9",
        "bug_id": "activemq_73",
        "file": [
            {
                "additions": 11,
                "sha": "920207ce3f5795eb4287214bb0fddf94d759a498",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "deletions": 3,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java?ref=8f02ba6a53bf09e452a0a0bb64ae0acc7599d180",
                "patch": "@@ -285,9 +285,17 @@ public void onStopped(TransportConnection connection) {\n         connections.remove(connection);\n     }\n \n-    public String getName() {\n-        if( name == null ) {\n-            name = server.getConnectURI().toString();\n+    public String getName(){\n+        if(name==null){\n+            if(server!=null){\n+                if(server.getConnectURI()!=null){\n+                    name=server.getConnectURI().toString();\n+                }else{\n+                    name = server.getClass() + \":Not started\";\n+                }\n+            }else{\n+                name = \"NOT_SET\";\n+            }\n         }\n         return name;\n     }",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@390411 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/774cdcf8b54b864ea6fca627d7f8fb02f04ac4ee",
        "bug_id": "activemq_74",
        "file": [
            {
                "additions": 2,
                "sha": "cd35b2c0856b0acd8b8365e481e0de4207bbbfb8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1/activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java?ref=27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1",
                "patch": "@@ -140,7 +140,8 @@ public Command writeCommand(final Command packet, final DataOutput out) throws I\n             MessageDispatch md = (MessageDispatch)packet;\n             Message message = md.getMessage();\n             Subscription sub = (Subscription) subscriptionsByConsumerId.get(md.getConsumerId());\n-            sub.receive(md, out);\n+            if (sub != null)\n+                sub.receive(md, out);\n         }\n         return null;\n     }",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1/activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java"
            },
            {
                "additions": 1,
                "sha": "d8925302e7ec82e8f2badad5da6865aba359a0a8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1/maven.xml",
                "deletions": 0,
                "filename": "maven.xml",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/maven.xml?ref=27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1",
                "patch": "@@ -181,6 +181,7 @@\n     <maven:reactor basedir=\".\" goals=\"test\" includes=\"${maven.multiproject.includes}\" ignoreFailures=\"true\"/>\n     \n     <j:if test=\"${!failedProjects.isEmpty()}\">\n+        <ant:echo> </ant:echo>\n         <ant:echo>There are test failures in the following modules:</ant:echo>\n         <j:forEach var=\"failedProj\" items=\"${failedProjects}\">\n             <ant:echo>  ${failedProj} </ant:echo>",
                "changes": 1,
                "blob_url": "https://github.com/apache/activemq/blob/27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1/maven.xml"
            }
        ],
        "repo": "activemq",
        "message": "- Added checking for NPE\n- Added newline in maven.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@386960 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/27ec68d22d0cfc7b8a5145d2d67b18d0b8b0b5b1"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d633de1efe78d4b54095d703f499cfcbe9188846",
        "bug_id": "activemq_75",
        "file": [
            {
                "additions": 36,
                "sha": "2a2288322e08f264f1eda96a8c0961a6ecae0777",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6ce0aaa0dcac090e03181dc7146f6ba38eb6ab22/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java",
                "deletions": 28,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java?ref=6ce0aaa0dcac090e03181dc7146f6ba38eb6ab22",
                "patch": "@@ -63,23 +63,27 @@ public ManagementContext(MBeanServer server){\n         this.beanServer=server;\n     }\n \n-    public void start() throws IOException{\n+    public void start() throws IOException {\n         // lets force the MBeanServer to be created if needed\n-        if(started.compareAndSet(false,true)){\n+        if (started.compareAndSet(false, true)) {\n             getMBeanServer();\n-            if(connectorServer!=null){\n-                try{\n-                    getMBeanServer().invoke(namingServiceObjectName,\"start\",null,null);\n-                }catch(Throwable ignore){}\n-                Thread t=new Thread(\"JMX connector\"){\n-                    public void run(){\n-                        try{\n-                            if(started.get()&&connectorServer!=null){\n-                                connectorServer.start();\n-                                log.info(\"JMX consoles can connect to \"+connectorServer.getAddress());\n+            if (connectorServer != null) {\n+                try {\n+                    getMBeanServer().invoke(namingServiceObjectName, \"start\", null, null);\n+                }\n+                catch (Throwable ignore) {\n+                }\n+                Thread t = new Thread(\"JMX connector\") {\n+                    public void run() {\n+                        try {\n+                            JMXConnectorServer server = connectorServer;\n+                            if (started.get() && server != null) {\n+                                server.start();\n+                                log.info(\"JMX consoles can connect to \" + server.getAddress());\n                             }\n-                        }catch(IOException e){\n-                            log.warn(\"Failed to start jmx connector: \"+e.getMessage());\n+                        }\n+                        catch (IOException e) {\n+                            log.warn(\"Failed to start jmx connector: \" + e.getMessage());\n                         }\n                     }\n                 };\n@@ -89,23 +93,27 @@ public void run(){\n         }\n     }\n \n-    public void stop() throws IOException{\n-        if(started.compareAndSet(true,false)){\n-            if(connectorServer!=null){\n-                try{\n-                    connectorServer.stop();\n-                }catch(IOException e){\n-                    log.warn(\"Failed to stop jmx connector: \"+e.getMessage());\n+    public void stop() throws IOException {\n+        if (started.compareAndSet(true, false)) {\n+            JMXConnectorServer server = connectorServer;\n+            connectorServer = null;\n+            if (server != null) {\n+                try {\n+                    server.stop();\n+                }\n+                catch (IOException e) {\n+                    log.warn(\"Failed to stop jmx connector: \" + e.getMessage());\n+                }\n+                try {\n+                    getMBeanServer().invoke(namingServiceObjectName, \"stop\", null, null);\n+                }\n+                catch (Throwable ignore) {\n                 }\n-                connectorServer=null;\n-                try{\n-                    getMBeanServer().invoke(namingServiceObjectName,\"stop\",null,null);\n-                }catch(Throwable ignore){}\n             }\n-            if(locallyCreateMBeanServer&&beanServer!=null){\n+            if (locallyCreateMBeanServer && beanServer != null) {\n                 // check to see if the factory knows about this server\n-                List list=MBeanServerFactory.findMBeanServer(null);\n-                if(list!=null&&!list.isEmpty()&&list.contains(beanServer)){\n+                List list = MBeanServerFactory.findMBeanServer(null);\n+                if (list != null && !list.isEmpty() && list.contains(beanServer)) {\n                     MBeanServerFactory.releaseMBeanServer(beanServer);\n                 }\n             }",
                "changes": 64,
                "blob_url": "https://github.com/apache/activemq/blob/6ce0aaa0dcac090e03181dc7146f6ba38eb6ab22/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java"
            }
        ],
        "repo": "activemq",
        "message": "fixed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@385557 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/6ce0aaa0dcac090e03181dc7146f6ba38eb6ab22"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/1ccd7bdbf00e80046cf0275e3742cf62f41e27be",
        "bug_id": "activemq_76",
        "file": [
            {
                "additions": 8,
                "sha": "4dfed1a6fc98fa71315ad612b759dd249afbd39d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/11c37a7be5f592d05c460944343ce8af8583541f/activemq-core/src/main/java/org/apache/activemq/broker/jmx/TopicView.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/jmx/TopicView.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/jmx/TopicView.java?ref=11c37a7be5f592d05c460944343ce8af8583541f",
                "patch": "@@ -15,11 +15,13 @@\n \n import org.apache.activemq.broker.ConnectionContext;\n import org.apache.activemq.broker.region.Topic;\n+import org.apache.activemq.command.ConsumerId;\n import org.apache.activemq.command.ConsumerInfo;\n import org.apache.activemq.command.RemoveSubscriptionInfo;\n+\n public class TopicView extends DestinationView implements TopicViewMBean{\n     \n-    public TopicView(ManagedRegionBroker broker, Topic destination){\n+     public TopicView(ManagedRegionBroker broker, Topic destination){\n         super(broker, destination);\n     }\n \n@@ -28,6 +30,11 @@ public void createDurableSubscriber(String clientId,String subscriberName) throw\n         context.setBroker(broker);\n         context.setClientId(clientId);\n         ConsumerInfo info = new ConsumerInfo();\n+        ConsumerId consumerId = new ConsumerId();\n+        consumerId.setConnectionId(clientId);\n+        consumerId.setSessionId(0);\n+        consumerId.setValue(0);\n+        info.setConsumerId(consumerId);\n         info.setDestination(destination.getActiveMQDestination());\n         info.setSubcriptionName(subscriberName);\n         broker.addConsumer(context, info);",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/11c37a7be5f592d05c460944343ce8af8583541f/activemq-core/src/main/java/org/apache/activemq/broker/jmx/TopicView.java"
            }
        ],
        "repo": "activemq",
        "message": "added fix for NPE when adding durable subscribers\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@384223 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/11c37a7be5f592d05c460944343ce8af8583541f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c82f6f330965944c6948d0bc997ddf0681020dde",
        "bug_id": "activemq_77",
        "file": [
            {
                "additions": 0,
                "sha": "a98c750ebdcfd47cf7677a0efeb71415996ca60f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java?ref=2eae0548d861c75b5c8a52e81cc2dcba5743fcf5",
                "patch": "@@ -129,7 +129,6 @@ public void unregister(ActiveMQDestination destName){\n     }\n \n     public void registerSubscription(ConnectionContext context,Subscription sub){\n-       // NEED CONTEXT TO GET CLIENT ID AND USE Subscription KEY!!!\n         SubscriptionKey key = new SubscriptionKey(context.getClientId(),sub.getConsumerInfo().getSubcriptionName());\n         Hashtable map=new Hashtable(brokerObjectName.getKeyPropertyList());\n         map.put(\"Type\",JMXSupport.encodeObjectNamePart(\"Subscription\"));",
                "changes": 1,
                "blob_url": "https://github.com/apache/activemq/blob/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java"
            },
            {
                "additions": 1,
                "sha": "a1e6db689561f6a662eca0d3ab941e2a841b4729",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java?ref=2eae0548d861c75b5c8a52e81cc2dcba5743fcf5",
                "patch": "@@ -90,7 +90,7 @@ public RegionBroker(BrokerService brokerService,TaskRunnerFactory taskRunnerFact\n     public RegionBroker(BrokerService brokerService,TaskRunnerFactory taskRunnerFactory, UsageManager memoryManager, PersistenceAdapter adapter, PolicyMap policyMap) throws IOException {\n         this.brokerService = brokerService;\n         this.sequenceGenerator.setLastSequenceId( adapter.getLastMessageBrokerSequenceId() );\n-        this.adaptor = adaptor;\n+        this.adaptor = adapter;//weird - both are valid spellings ...\n         queueRegion = createQueueRegion(memoryManager, taskRunnerFactory, adapter, policyMap);\n         topicRegion = createTopicRegion(memoryManager, taskRunnerFactory, adapter, policyMap);\n         ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java"
            },
            {
                "additions": 2,
                "sha": "782e4d7a20651731537b2daf3de14acfb84b508c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/util/SubscriptionKey.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/util/SubscriptionKey.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/util/SubscriptionKey.java?ref=2eae0548d861c75b5c8a52e81cc2dcba5743fcf5",
                "patch": "@@ -31,8 +31,8 @@ public SubscriptionKey(SubscriptionInfo info) {\n \n     public SubscriptionKey(String clientId, String subscriptionName) {\n         this.clientId = clientId;\n-        this.subscriptionName = subscriptionName;\n-        hashValue = clientId.hashCode()^subscriptionName.hashCode();\n+        this.subscriptionName = subscriptionName != null? subscriptionName : \"NOT_SET\";\n+        hashValue = clientId.hashCode()^this.subscriptionName.hashCode();\n     }\n \n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5/activemq-core/src/main/java/org/apache/activemq/util/SubscriptionKey.java"
            }
        ],
        "repo": "activemq",
        "message": "Fixed some npe I'd just introduced\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382353 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/2eae0548d861c75b5c8a52e81cc2dcba5743fcf5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c6f73c56d14591fe87c5e1aadfec273cf2ea6d3c",
        "bug_id": "activemq_78",
        "file": [
            {
                "additions": 3,
                "sha": "681c9524ef15e421ec13f405a5144a724de0972f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8",
                "patch": "@@ -99,7 +99,9 @@ public void onCommand(Command command) {\n                 }\n                 \n             }\n-            transportListener.onCommand(command);\n+            if (transportListener != null) {\n+                transportListener.onCommand(command);\n+            }\n         }\n \n         public void onException(IOException error) {",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "removed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@373809 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/b2b1e80b86a377bcf1eb116e3f2fae45f6d99c52",
        "bug_id": "activemq_79",
        "file": [
            {
                "additions": 3,
                "sha": "9eb5bd712a101f743782e668e224cfea92aaf628",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/40ce55be77effd7a07010cd04e8f9582ca4377eb/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=40ce55be77effd7a07010cd04e8f9582ca4377eb",
                "patch": "@@ -79,6 +79,9 @@\n \n     private final TransportListener myTransportListener = new TransportListener() {\n         public void onCommand(Command command) {\n+            if (command == null) {\n+                return;\n+            }\n             if (command.isResponse()) {\n                 requestMap.remove(new Short(((Response) command).getCorrelationId()));\n             }",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/40ce55be77effd7a07010cd04e8f9582ca4377eb/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "added extra NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@372519 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/40ce55be77effd7a07010cd04e8f9582ca4377eb"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/7c7cca9dfb8eb503e0a8eee5f5b21a7c30d888df",
        "bug_id": "activemq_80",
        "file": [
            {
                "additions": 3,
                "sha": "b80bbafef4bb3f6f9a1f62b3869c4ae96775c925",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/298ccf2a77bde24b2bc333cbb34acb0338435388/activemq-core/src/main/java/org/activemq/broker/AbstractConnection.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/activemq/broker/AbstractConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/activemq/broker/AbstractConnection.java?ref=298ccf2a77bde24b2bc333cbb34acb0338435388",
                "patch": "@@ -111,7 +111,9 @@ public AbstractConnection(Connector connector, Broker broker, TaskRunnerFactory\n         \n         this.connector = connector;\n         this.broker = broker;\n-        this.statistics.setParent(connector.getStatistics());\n+        if (connector != null) {\n+            this.statistics.setParent(connector.getStatistics());\n+        }\n         \n         if( taskRunnerFactory != null ) {\n             taskRunner = taskRunnerFactory.createTaskRunner( this );",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/298ccf2a77bde24b2bc333cbb34acb0338435388/activemq-core/src/main/java/org/activemq/broker/AbstractConnection.java"
            }
        ],
        "repo": "activemq",
        "message": "avoided NPE in a number of test cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@357717 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/298ccf2a77bde24b2bc333cbb34acb0338435388"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/c85c7c14720dffeb44633547db540533796a8388",
        "bug_id": "activemq_81",
        "file": [
            {
                "additions": 1,
                "sha": "e0e7276ffa6961a51442c81b39c4594ab26bc382",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java",
                "deletions": 1,
                "filename": "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java?ref=0cfd22591260540301b18a893cd229c59e43dcf6",
                "patch": "@@ -227,7 +227,7 @@ public void delivery(Delivery delivery) throws Exception {\n                 settle(delivery, -1);\n             } else if (state instanceof Modified) {\n                 Modified modified = (Modified) state;\n-                if (modified.getDeliveryFailed()) {\n+                if (Boolean.TRUE.equals(modified.getDeliveryFailed())) {\n                     // increment delivery counter..\n                     md.setRedeliveryCounter(md.getRedeliveryCounter() + 1);\n                 }",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/protocol/AmqpSender.java"
            },
            {
                "additions": 7,
                "sha": "e8ad7937fdbb4fd32497292b14ab98d360283a21",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java",
                "deletions": 29,
                "filename": "activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java?ref=0cfd22591260540301b18a893cd229c59e43dcf6",
                "patch": "@@ -140,43 +140,21 @@ public void accept() throws Exception {\n     }\n \n     /**\n-     * Rejects the message, marking it as not deliverable here and failed to deliver.\n+     * Marks the message as Modified, indicating whether it failed to deliver and is not deliverable here.\n      *\n-     * @throws Exception if an error occurs during the reject.\n-     */\n-    public void reject() throws Exception {\n-        reject(true, true);\n-    }\n-\n-    /**\n-     * Rejects the message, marking it as failed to deliver and applying the given value\n-     * to the undeliverable here tag.\n-     *\n-     * @param undeliverableHere\n-     *        marks the delivery as not being able to be process by link it was sent to.\n-     *\n-     * @throws Exception if an error occurs during the reject.\n-     */\n-    public void reject(boolean undeliverableHere) throws Exception {\n-        reject(undeliverableHere, true);\n-    }\n-\n-    /**\n-     * Rejects the message, marking it as not deliverable here and failed to deliver.\n-     *\n-     * @param undeliverableHere\n-     *        marks the delivery as not being able to be process by link it was sent to.\n      * @param deliveryFailed\n      *        indicates that the delivery failed for some reason.\n+     * @param undeliverableHere\n+     *        marks the delivery as not being able to be process by link it was sent to.\n      *\n-     * @throws Exception if an error occurs during the reject.\n+     * @throws Exception if an error occurs during the process.\n      */\n-    public void reject(boolean undeliverableHere, boolean deliveryFailed) throws Exception {\n+    public void modified(Boolean deliveryFailed, Boolean undeliverableHere) throws Exception {\n         if (receiver == null) {\n-            throw new IllegalStateException(\"Can't reject non-received message.\");\n+            throw new IllegalStateException(\"Can't modify non-received message.\");\n         }\n \n-        receiver.reject(delivery, undeliverableHere, deliveryFailed);\n+        receiver.modified(delivery, deliveryFailed, undeliverableHere);\n     }\n \n     /**",
                "changes": 36,
                "blob_url": "https://github.com/apache/activemq/blob/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpMessage.java"
            },
            {
                "additions": 5,
                "sha": "98241cd9472515834fc4e04bb12e35bb58b5febe",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpReceiver.java",
                "deletions": 6,
                "filename": "activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpReceiver.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpReceiver.java?ref=0cfd22591260540301b18a893cd229c59e43dcf6",
                "patch": "@@ -316,18 +316,17 @@ public void run() {\n     }\n \n     /**\n-     * Reject a message that was dispatched under the given Delivery instance.\n+     * Mark a message that was dispatched under the given Delivery instance as Modified.\n      *\n      * @param delivery\n-     *        the Delivery instance to reject.\n-     * @param undeliverableHere\n-     *        marks the delivery as not being able to be process by link it was sent to.\n+     *        the Delivery instance to mark modified.\n      * @param deliveryFailed\n      *        indicates that the delivery failed for some reason.\n-     *\n+     * @param undeliverableHere\n+     *        marks the delivery as not being able to be process by link it was sent to.\n      * @throws IOException if an error occurs while sending the reject.\n      */\n-    public void reject(final Delivery delivery, final boolean undeliverableHere, final boolean deliveryFailed) throws IOException {\n+    public void modified(final Delivery delivery, final Boolean deliveryFailed, final Boolean undeliverableHere) throws IOException {\n         checkClosed();\n \n         if (delivery == null) {",
                "changes": 11,
                "blob_url": "https://github.com/apache/activemq/blob/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/client/AmqpReceiver.java"
            },
            {
                "additions": 65,
                "sha": "1502bdaaf9d8358240f756044b1b268c6a7689c7",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/interop/AmqpReceiverTest.java",
                "deletions": 0,
                "filename": "activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/interop/AmqpReceiverTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/interop/AmqpReceiverTest.java?ref=0cfd22591260540301b18a893cd229c59e43dcf6",
                "patch": "@@ -21,6 +21,7 @@\n import static org.apache.activemq.transport.amqp.AmqpSupport.findFilter;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.HashMap;\n@@ -43,6 +44,7 @@\n import org.apache.qpid.proton.amqp.messaging.TerminusDurability;\n import org.apache.qpid.proton.amqp.messaging.TerminusExpiryPolicy;\n import org.apache.qpid.proton.engine.Receiver;\n+import org.apache.qpid.proton.message.Message;\n import org.junit.Test;\n \n /**\n@@ -412,4 +414,67 @@ public void inspectOpenedResource(Receiver receiver) {\n         connection.getStateInspector().assertValid();\n         connection.close();\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testModifiedDispositionWithDeliveryFailedWithoutUndeliverableHereFieldsSet() throws Exception {\n+        doModifiedDispositionTestImpl(Boolean.TRUE, null);\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testModifiedDispositionWithoutDeliveryFailedWithoutUndeliverableHereFieldsSet() throws Exception {\n+        doModifiedDispositionTestImpl(null, null);\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testModifiedDispositionWithoutDeliveryFailedWithUndeliverableHereFieldsSet() throws Exception {\n+        doModifiedDispositionTestImpl(null, Boolean.TRUE);\n+    }\n+\n+    @Test(timeout = 30000)\n+    public void testModifiedDispositionWithDeliveryFailedWithUndeliverableHereFieldsSet() throws Exception {\n+        doModifiedDispositionTestImpl(Boolean.TRUE, Boolean.TRUE);\n+    }\n+\n+    private void doModifiedDispositionTestImpl(Boolean deliveryFailed, Boolean undeliverableHere) throws Exception {\n+        int msgCount = 1;\n+        sendMessages(getTestName(), msgCount, false);\n+\n+        AmqpClient client = createAmqpClient();\n+        AmqpConnection connection = client.connect();\n+        AmqpSession session = connection.createSession();\n+\n+        AmqpReceiver receiver = session.createReceiver(\"queue://\" + getTestName());\n+        receiver.flow(2 * msgCount);\n+\n+        AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);\n+        assertNotNull(\"did not receive message first time\", message);\n+\n+        Message protonMessage = message.getWrappedMessage();\n+        assertNotNull(protonMessage);\n+        assertEquals(\"Unexpected initial value for AMQP delivery-count\", 0, protonMessage.getDeliveryCount());\n+\n+        message.modified(deliveryFailed, undeliverableHere);\n+\n+        if(Boolean.TRUE.equals(undeliverableHere)) {\n+            message = receiver.receive(250, TimeUnit.MILLISECONDS);\n+            assertNull(\"Should not receive message again\", message);\n+        } else {\n+            message = receiver.receive(5, TimeUnit.SECONDS);\n+            assertNotNull(\"did not receive message again\", message);\n+\n+            int expectedDeliveryCount = 0;\n+            if(Boolean.TRUE.equals(deliveryFailed)) {\n+                expectedDeliveryCount = 1;\n+            }\n+\n+            message.accept();\n+\n+            Message protonMessage2 = message.getWrappedMessage();\n+            assertNotNull(protonMessage2);\n+            assertEquals(\"Unexpected updated value for AMQP delivery-count\", expectedDeliveryCount, protonMessage2.getDeliveryCount());\n+        }\n+\n+        receiver.close();\n+        connection.close();\n+    }\n }",
                "changes": 65,
                "blob_url": "https://github.com/apache/activemq/blob/0cfd22591260540301b18a893cd229c59e43dcf6/activemq-amqp/src/test/java/org/apache/activemq/transport/amqp/interop/AmqpReceiverTest.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-5890: prevent NPE if Modified disposition is applied without the delivery-failed flag set, add some general tests of Modified handling\n\nhttps://issues.apache.org/jira/browse/AMQ-5890",
        "commit": "https://github.com/apache/activemq/commit/0cfd22591260540301b18a893cd229c59e43dcf6"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/91d48280b8429e7754efd6b7fca5b6a1a0cf7936",
        "bug_id": "activemq_82",
        "file": [
            {
                "additions": 14,
                "sha": "388706fff8d6e6481ecd7f154ab57d3d7e1a5b43",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/1b493749a154ed9cf0773524233a3e4a3c3b827f/activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java",
                "deletions": 12,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java?ref=1b493749a154ed9cf0773524233a3e4a3c3b827f",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.activemq.network.jms;\n \n+import static org.apache.activemq.network.jms.ReconnectionPolicy.INFINITE;\n+\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -71,7 +73,7 @@\n     protected LRUCache<Destination, DestinationBridge> replyToBridges = createLRUCache();\n \n     private ReconnectionPolicy policy = new ReconnectionPolicy();\n-    protected ThreadPoolExecutor connectionSerivce;\n+    protected ThreadPoolExecutor connectionService;\n     private final List<DestinationBridge> inboundBridges = new CopyOnWriteArrayList<DestinationBridge>();\n     private final List<DestinationBridge> outboundBridges = new CopyOnWriteArrayList<DestinationBridge>();\n     private String name;\n@@ -116,7 +118,7 @@ public boolean init() {\n             }\n             replyToBridges.setMaxCacheSize(getReplyToDestinationCacheSize());\n \n-            connectionSerivce = createExecutor();\n+            connectionService = createExecutor();\n \n             // Subclasses can override this to customize their own it.\n             result = doConnectorInit();\n@@ -169,8 +171,8 @@ public void start() throws Exception {\n     public void stop() throws Exception {\n         if (started.compareAndSet(true, false)) {\n \n-            ThreadPoolUtils.shutdown(connectionSerivce);\n-            connectionSerivce = null;\n+            ThreadPoolUtils.shutdown(connectionService);\n+            connectionService = null;\n \n             if (foreignConnection.get() != null) {\n                 try {\n@@ -509,7 +511,7 @@ void handleConnectionFailure(Connection connection) {\n             }\n \n             // We got here first and cleared the connection, now we queue a reconnect.\n-            this.connectionSerivce.execute(new Runnable() {\n+            this.connectionService.execute(new Runnable() {\n \n                 @Override\n                 public void run() {\n@@ -534,7 +536,7 @@ public void run() {\n             }\n \n             // We got here first and cleared the connection, now we queue a reconnect.\n-            this.connectionSerivce.execute(new Runnable() {\n+            this.connectionService.execute(new Runnable() {\n \n                 @Override\n                 public void run() {\n@@ -549,7 +551,7 @@ public void run() {\n     }\n \n     private void scheduleAsyncLocalConnectionReconnect() {\n-        this.connectionSerivce.execute(new Runnable() {\n+        this.connectionService.execute(new Runnable() {\n             @Override\n             public void run() {\n                 try {\n@@ -562,7 +564,7 @@ public void run() {\n     }\n \n     private void scheduleAsyncForeignConnectionReconnect() {\n-        this.connectionSerivce.execute(new Runnable() {\n+        this.connectionService.execute(new Runnable() {\n             @Override\n             public void run() {\n                 try {\n@@ -576,6 +578,7 @@ public void run() {\n \n     private void doInitializeConnection(boolean local) throws Exception {\n \n+        ThreadPoolExecutor connectionService = this.connectionService;\n         int attempt = 0;\n \n         final int maxRetries;\n@@ -587,16 +590,15 @@ private void doInitializeConnection(boolean local) throws Exception {\n                                                          policy.getMaxReconnectAttempts();\n         }\n \n-        do\n-        {\n+        do {\n             if (attempt > 0) {\n                 try {\n                     Thread.sleep(policy.getNextDelay(attempt));\n                 } catch(InterruptedException e) {\n                 }\n             }\n \n-            if (connectionSerivce.isTerminating()) {\n+            if (connectionService.isTerminating()) {\n                 return;\n             }\n \n@@ -625,7 +627,7 @@ private void doInitializeConnection(boolean local) throws Exception {\n                 LOG.debug(\"Failed to establish initial {} connection for JmsConnector [{}]\", new Object[]{ (local ? \"local\" : \"foreign\"), attempt }, e);\n             }\n         }\n-        while (maxRetries < ++attempt && !connectionSerivce.isTerminating());\n+        while ((maxRetries == INFINITE || maxRetries > ++attempt) && !connectionService.isShutdown());\n \n         this.failed.set(true);\n     }",
                "changes": 26,
                "blob_url": "https://github.com/apache/activemq/blob/1b493749a154ed9cf0773524233a3e4a3c3b827f/activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java"
            },
            {
                "additions": 4,
                "sha": "e2de129b172ddb51f26f29f179f2d66612529714",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/1b493749a154ed9cf0773524233a3e4a3c3b827f/activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java",
                "deletions": 2,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java?ref=1b493749a154ed9cf0773524233a3e4a3c3b827f",
                "patch": "@@ -25,11 +25,13 @@\n  */\n public class ReconnectionPolicy {\n \n+    public static final int INFINITE = -1;\n+\n     private int maxSendRetries = 10;\n     private long sendRetryDelay = 1000L;\n \n-    private int maxReconnectAttempts = -1;\n-    private int maxInitialConnectAttempts = -1;\n+    private int maxReconnectAttempts = INFINITE;\n+    private int maxInitialConnectAttempts = INFINITE;\n     private long maximumReconnectDelay = 30000;\n     private long initialReconnectDelay = 1000L;\n     private boolean useExponentialBackOff = false;",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/1b493749a154ed9cf0773524233a3e4a3c3b827f/activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5859\n\nfix for incorrect logic in reconnect attempt limits and also fix a case\nwhere an NPE could occur (saw in the tests).   Based on patch provided\nby Benoit Wiart",
        "commit": "https://github.com/apache/activemq/commit/1b493749a154ed9cf0773524233a3e4a3c3b827f"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/08b8a354ab9c5ccd04720e60c365f112db8ae13e",
        "bug_id": "activemq_83",
        "file": [
            {
                "additions": 1,
                "sha": "cfcc729b955017b95353142ffa3e4a59eecd074f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=41cdadbe2a55c5cf7f86341e34565ef372dc9197",
                "patch": "@@ -2224,7 +2224,7 @@ public void handleIOException(IOException exception) {\n         if (ioExceptionHandler != null) {\n             ioExceptionHandler.handle(exception);\n          } else {\n-            LOG.info(\"Ignoring IO exception, \" + exception, exception);\n+            LOG.info(\"No IOExceptionHandler registered, ignoring IO exception, \" + exception, exception);\n          }\n     }\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java"
            },
            {
                "additions": 81,
                "sha": "f486689f93583f496fd94c474526bf4f240791e5",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "deletions": 53,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java?ref=41cdadbe2a55c5cf7f86341e34565ef372dc9197",
                "patch": "@@ -17,14 +17,14 @@\n package org.apache.activemq.broker.region;\n \n import java.io.IOException;\n-import java.util.AbstractList;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -231,6 +231,79 @@ public QueueThread(Runnable runnable, String name, Queue queue) {\n         }\n     }\n \n+    class BatchMessageRecoveryListener implements MessageRecoveryListener {\n+        final LinkedList<Message> toExpire = new LinkedList<Message>();\n+        final double totalMessageCount;\n+        int recoveredAccumulator = 0;\n+        int currentBatchCount;\n+\n+        BatchMessageRecoveryListener(int totalMessageCount) {\n+            this.totalMessageCount = totalMessageCount;\n+            currentBatchCount = recoveredAccumulator;\n+        }\n+\n+        public boolean recoverMessage(Message message) {\n+            recoveredAccumulator++;\n+            if (LOG.isInfoEnabled() && (recoveredAccumulator % 10000) == 0) {\n+                LOG.info(\"cursor for \" + getActiveMQDestination().getQualifiedName() + \" has recovered \"\n+                        + recoveredAccumulator + \" messages. \" +\n+                        (int) (recoveredAccumulator * 100 / totalMessageCount) + \"% complete\");\n+            }\n+            // Message could have expired while it was being\n+            // loaded..\n+            if (message.isExpired() && broker.isExpired(message)) {\n+                toExpire.add(message);\n+                return true;\n+            }\n+            if (hasSpace()) {\n+                message.setRegionDestination(Queue.this);\n+                messagesLock.writeLock().lock();\n+                try {\n+                    try {\n+                        messages.addMessageLast(message);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Failed to add message to cursor\", e);\n+                    }\n+                } finally {\n+                    messagesLock.writeLock().unlock();\n+                }\n+                destinationStatistics.getMessages().increment();\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        public boolean recoverMessageReference(MessageId messageReference) throws Exception {\n+            throw new RuntimeException(\"Should not be called.\");\n+        }\n+\n+        public boolean hasSpace() {\n+            return true;\n+        }\n+\n+        public boolean isDuplicate(MessageId id) {\n+            return false;\n+        }\n+\n+        public void reset() {\n+            currentBatchCount = recoveredAccumulator;\n+        }\n+\n+        public void processExpired() {\n+            for (Message message: toExpire) {\n+                messageExpired(createConnectionContext(), createMessageReference(message));\n+                // drop message will decrement so counter\n+                // balance here\n+                destinationStatistics.getMessages().increment();\n+            }\n+            toExpire.clear();\n+        }\n+\n+        public boolean done() {\n+            return currentBatchCount == recoveredAccumulator;\n+        }\n+    }\n+\n     @Override\n     public void initialize() throws Exception {\n         if (this.messages == null) {\n@@ -263,60 +336,15 @@ public void initialize() throws Exception {\n             messages.setMaxProducersToAudit(getMaxProducersToAudit());\n             messages.setUseCache(isUseCache());\n             messages.setMemoryUsageHighWaterMark(getCursorMemoryHighWaterMark());\n+            final int messageCount = store.getMessageCount();\n             if (messages.isRecoveryRequired()) {\n-                store.recover(new MessageRecoveryListener() {\n-                    double totalMessageCount = store.getMessageCount();\n-                    int recoveredMessageCount = 0;\n-\n-                    public boolean recoverMessage(Message message) {\n-                        // Message could have expired while it was being\n-                        // loaded..\n-                        if ((++recoveredMessageCount % 50000) == 0) {\n-                            LOG.info(\"cursor for \" + getActiveMQDestination().getQualifiedName() + \" has recovered \"\n-                                    + recoveredMessageCount + \" messages. \" +\n-                                    (int)(recoveredMessageCount*100/totalMessageCount) + \"% complete\");\n-                        }\n-                        if (message.isExpired()) {\n-                            if (broker.isExpired(message)) {\n-                                messageExpired(createConnectionContext(), createMessageReference(message));\n-                                // drop message will decrement so counter\n-                                // balance here\n-                                destinationStatistics.getMessages().increment();\n-                            }\n-                            return true;\n-                        }\n-                        if (hasSpace()) {\n-                            message.setRegionDestination(Queue.this);\n-                            messagesLock.writeLock().lock();\n-                            try{\n-                                try {\n-                                    messages.addMessageLast(message);\n-                                } catch (Exception e) {\n-                                    LOG.error(\"Failed to add message to cursor\", e);\n-                                }\n-                            }finally {\n-                                messagesLock.writeLock().unlock();\n-                            }\n-                            destinationStatistics.getMessages().increment();\n-                            return true;\n-                        }\n-                        return false;\n-                    }\n-\n-                    public boolean recoverMessageReference(MessageId messageReference) throws Exception {\n-                        throw new RuntimeException(\"Should not be called.\");\n-                    }\n-\n-                    public boolean hasSpace() {\n-                        return true;\n-                    }\n-\n-                    public boolean isDuplicate(MessageId id) {\n-                        return false;\n-                    }\n-                });\n+                BatchMessageRecoveryListener listener = new BatchMessageRecoveryListener(messageCount);\n+                do {\n+                   listener.reset();\n+                   store.recoverNextMessages(getMaxPageSize(), listener);\n+                   listener.processExpired();\n+               } while (!listener.done());\n             } else {\n-                int messageCount = store.getMessageCount();\n                 destinationStatistics.getMessages().setCount(messageCount);\n             }\n         }",
                "changes": 134,
                "blob_url": "https://github.com/apache/activemq/blob/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java"
            },
            {
                "additions": 3,
                "sha": "70a2beb1e8d78853aadb731e5e3c1e3b4561a461",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=41cdadbe2a55c5cf7f86341e34565ef372dc9197",
                "patch": "@@ -470,6 +470,9 @@ private void recover() throws IllegalStateException, IOException {\n                     process(message, recoveryPosition, lastIndoubtPosition);\n                     redoCounter++;\n                     recoveryPosition = journal.getNextLocation(recoveryPosition);\n+                     if (LOG.isInfoEnabled() && redoCounter % 100000 == 0) {\n+                         LOG.info(\"@\" + recoveryPosition +  \", \"  + redoCounter + \" entries recovered ..\");\n+                     }\n                 }\n                 if (LOG.isInfoEnabled()) {\n                     long end = System.currentTimeMillis();",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            },
            {
                "additions": 112,
                "sha": "8f45a5c7b04e887c6b736d3e4b3b0bccaab754b9",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreRecoveryExpiryTest.java",
                "deletions": 0,
                "filename": "activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreRecoveryExpiryTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreRecoveryExpiryTest.java?ref=41cdadbe2a55c5cf7f86341e34565ef372dc9197",
                "patch": "@@ -0,0 +1,112 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.store.kahadb;\n+\n+import java.util.concurrent.TimeUnit;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.DeliveryMode;\n+import javax.jms.Destination;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import org.apache.activemq.ActiveMQConnection;\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.BaseDestination;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;\n+import org.apache.activemq.command.ActiveMQQueue;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static junit.framework.Assert.assertNull;\n+\n+public class KahaDBStoreRecoveryExpiryTest {\n+\n+    private BrokerService broker;\n+    private ActiveMQConnection connection;\n+    private Destination destination = new ActiveMQQueue(\"Test\");\n+    private Session session;\n+\n+    @Test\n+    public void testRestartWitExpired() throws Exception  {\n+        publishMessages(1, 0);\n+        publishMessages(1, 2000);\n+        publishMessages(1, 0);\n+        restartBroker(3000);\n+        consumeMessages(2);\n+    }\n+\n+    @Test\n+    public void testRestartWitExpiredLargerThanBatchRecovery() throws Exception  {\n+        publishMessages(BaseDestination.MAX_PAGE_SIZE + 10, 2000);\n+        publishMessages(10, 0);\n+        restartBroker(3000);\n+        consumeMessages(10);\n+    }\n+\n+    private void consumeMessages(int count) throws Exception {\n+        MessageConsumer consumer = session.createConsumer(destination);\n+        for (int i=0; i<count; i++) {\n+            assertNotNull(\"got message \"+ i, consumer.receive(4000));\n+        }\n+        assertNull(\"none left over\", consumer.receive(2000));\n+    }\n+\n+    private void restartBroker(int restartDelay) throws Exception {\n+        stopBroker();\n+        TimeUnit.MILLISECONDS.sleep(restartDelay);\n+        startBroker();\n+    }\n+\n+    @After\n+    public void stopBroker() throws Exception {\n+        broker.stop();\n+        broker.waitUntilStopped();\n+    }\n+\n+    private void publishMessages(int count, int expiry) throws Exception {\n+        MessageProducer producer = session.createProducer(destination);\n+        for (int i=0; i<count; i++) {\n+            producer.send(session.createTextMessage(), DeliveryMode.PERSISTENT, 5, expiry);\n+        }\n+    }\n+\n+    @Before\n+    public void startBroker() throws Exception {\n+        broker = new BrokerService();\n+        ((KahaDBPersistenceAdapter)broker.getPersistenceAdapter()).setIndexCacheSize(0);\n+        PolicyMap policyMap = new PolicyMap();\n+        PolicyEntry defaultEntry = new PolicyEntry();\n+        defaultEntry.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());\n+        policyMap.setDefaultEntry(defaultEntry);\n+        broker.setDestinationPolicy(policyMap);\n+        broker.setUseJmx(false);\n+        broker.start();\n+\n+        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?create=false\");\n+        connection = (ActiveMQConnection) connectionFactory.createConnection();\n+        connection.setWatchTopicAdvisories(false);\n+        connection.start();\n+\n+        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+    }\n+}\n\\ No newline at end of file",
                "changes": 112,
                "blob_url": "https://github.com/apache/activemq/blob/41cdadbe2a55c5cf7f86341e34565ef372dc9197/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreRecoveryExpiryTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3637 - NullPointerException while loading node from kahadb during vmcursor replay. Batch recovery such that expiry can be processed periodically which avoids a nested kahadb transaction that modifies. additional test and some additional logging when recovery is taking a long time\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1214888 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/41cdadbe2a55c5cf7f86341e34565ef372dc9197"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/08b1bedc6d421c09733c6f0576dcfe737970d1d0",
        "bug_id": "activemq_84",
        "file": [
            {
                "additions": 4,
                "sha": "35cc491b5e164a623822c1fd4b3aaaf58fdca990",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/5cd56e7fb10b5651704009c74b0d180b047add29/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "deletions": 1,
                "filename": "activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java?ref=5cd56e7fb10b5651704009c74b0d180b047add29",
                "patch": "@@ -351,7 +351,10 @@ protected void processLinkEvent(Link link) throws Exception {\n         if (remoteState == EndpointState.ACTIVE) {\n             onLinkOpen(link);\n         } else if (remoteState == EndpointState.CLOSED) {\n-            ((AmqpDeliveryListener) link.getContext()).onClose();\n+            AmqpDeliveryListener context = (AmqpDeliveryListener) link.getContext();\n+            if (context != null) {\n+                context.onClose();\n+            }\n             link.close();\n             link.free();\n         }",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/5cd56e7fb10b5651704009c74b0d180b047add29/activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5431 - prevent NPE when a Detach frame is received for a\n link that didn't get as far as setting a context during creation before being\n detached/closed",
        "commit": "https://github.com/apache/activemq/commit/5cd56e7fb10b5651704009c74b0d180b047add29"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/3856c3999ac8a29171c09de99bd0e8bf9cdaff4e",
        "bug_id": "activemq_85",
        "file": [
            {
                "additions": 30,
                "sha": "a743a8d1083c3f01f85d3cc337d80f7e291c18db",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c02bc648460059b6dbc201fa21b7ee0ce2445082/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
                "deletions": 28,
                "filename": "activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java?ref=c02bc648460059b6dbc201fa21b7ee0ce2445082",
                "patch": "@@ -780,8 +780,8 @@ void clearMessagesInProgress() {\n     void deliverAcks() {\n         MessageAck ack = null;\n         if (deliveryingAcknowledgements.compareAndSet(false, true)) {\n-            if (isAutoAcknowledgeEach()) {\n-                synchronized(deliveredMessages) {\n+            synchronized(deliveredMessages) {\n+                if (isAutoAcknowledgeEach()) {\n                     ack = makeAckForAllDeliveredMessages(MessageAck.STANDARD_ACK_TYPE);\n                     if (ack != null) {\n                         deliveredMessages.clear();\n@@ -790,10 +790,10 @@ void deliverAcks() {\n                         ack = pendingAck;\n                         pendingAck = null;\n                     }\n+                } else if (pendingAck != null && pendingAck.isStandardAck()) {\n+                    ack = pendingAck;\n+                    pendingAck = null;\n                 }\n-            } else if (pendingAck != null && pendingAck.isStandardAck()) {\n-                ack = pendingAck;\n-                pendingAck = null;\n             }\n             if (ack != null) {\n                 final MessageAck ackToSend = ack;\n@@ -1035,31 +1035,33 @@ private void ackLater(MessageDispatch md, byte ackType) throws JMSException {\n \n         deliveredCounter++;\n \n-        MessageAck oldPendingAck = pendingAck;\n-        pendingAck = new MessageAck(md, ackType, deliveredCounter);\n-        pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());\n-        if( oldPendingAck==null ) {\n-            pendingAck.setFirstMessageId(pendingAck.getLastMessageId());\n-        } else if ( oldPendingAck.getAckType() == pendingAck.getAckType() ) {\n-            pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());\n-        } else {\n-            // old pending ack being superseded by ack of another type, if is is not a delivered\n-            // ack and hence important, send it now so it is not lost.\n-            if (!oldPendingAck.isDeliveredAck()) {\n-                LOG.debug(\"Sending old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n-                session.sendAck(oldPendingAck);\n+        synchronized(deliveredMessages) {\n+            MessageAck oldPendingAck = pendingAck;\n+            pendingAck = new MessageAck(md, ackType, deliveredCounter);\n+            pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());\n+            if( oldPendingAck==null ) {\n+                pendingAck.setFirstMessageId(pendingAck.getLastMessageId());\n+            } else if ( oldPendingAck.getAckType() == pendingAck.getAckType() ) {\n+                pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());\n             } else {\n-                LOG.debug(\"dropping old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n+                // old pending ack being superseded by ack of another type, if is is not a delivered\n+                // ack and hence important, send it now so it is not lost.\n+                if (!oldPendingAck.isDeliveredAck()) {\n+                    LOG.debug(\"Sending old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n+                    session.sendAck(oldPendingAck);\n+                } else {\n+                    LOG.debug(\"dropping old pending ack {}, new pending: {}\", oldPendingAck, pendingAck);\n+                }\n+            }\n+            // AMQ-3956 evaluate both expired and normal msgs as\n+            // otherwise consumer may get stalled\n+            if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {\n+                LOG.debug(\"ackLater: sending: {}\", pendingAck);\n+                session.sendAck(pendingAck);\n+                pendingAck=null;\n+                deliveredCounter = 0;\n+                additionalWindowSize = 0;\n             }\n-        }\n-        // AMQ-3956 evaluate both expired and normal msgs as\n-        // otherwise consumer may get stalled\n-        if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {\n-            LOG.debug(\"ackLater: sending: {}\", pendingAck);\n-            session.sendAck(pendingAck);\n-            pendingAck=null;\n-            deliveredCounter = 0;\n-            additionalWindowSize = 0;\n         }\n     }\n ",
                "changes": 58,
                "blob_url": "https://github.com/apache/activemq/blob/c02bc648460059b6dbc201fa21b7ee0ce2445082/activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java"
            },
            {
                "additions": 227,
                "sha": "da09aafafd325a26e11b56eb67294f6bcde54bae",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/c02bc648460059b6dbc201fa21b7ee0ce2445082/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java",
                "deletions": 0,
                "filename": "activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java?ref=c02bc648460059b6dbc201fa21b7ee0ce2445082",
                "patch": "@@ -0,0 +1,227 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.bugs;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import java.io.InterruptedIOException;\n+import java.net.URI;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.DeliveryMode;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageListener;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.jms.Topic;\n+\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.broker.BrokerFactory;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.log4j.Appender;\n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AMQ5426Test {\n+\n+\tprivate static final Logger LOG = LoggerFactory\n+\t\t\t.getLogger(AMQ5426Test.class);\n+\n+\tprivate BrokerService brokerService;\n+\tprivate String connectionUri;\n+\tprivate AtomicBoolean hasFailureInProducer = new AtomicBoolean(false);\n+\tprivate Thread producerThread;\n+\tprivate AtomicBoolean hasErrorInLogger;\n+\tprivate Appender errorDetectorAppender;\n+\n+\tprotected ConnectionFactory createConnectionFactory() throws Exception {\n+\t\tActiveMQConnectionFactory conFactory = new ActiveMQConnectionFactory(\n+\t\t\t\tconnectionUri);\n+\t\tconFactory.setWatchTopicAdvisories(false);\n+\t\tconFactory.setOptimizeAcknowledge(true);\n+\t\treturn conFactory;\n+\t}\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\thasFailureInProducer = new AtomicBoolean(false);\n+\t\thasErrorInLogger = new AtomicBoolean(false);\n+\t\tbrokerService = BrokerFactory.createBroker(new URI(\n+\t\t\t\t\"broker://()/localhost?persistent=false&useJmx=true\"));\n+\n+\t\tPolicyEntry policy = new PolicyEntry();\n+\t\tpolicy.setTopicPrefetch(100);\n+\t\tPolicyMap pMap = new PolicyMap();\n+\t\tpMap.setDefaultEntry(policy);\n+\t\tbrokerService.addConnector(\"tcp://0.0.0.0:0\");\n+\t\tbrokerService.start();\n+\t\tconnectionUri = brokerService.getTransportConnectorByScheme(\"tcp\")\n+\t\t\t\t.getPublishableConnectString();\n+\n+\t\t// Register an error listener to LOG4J\n+\t\t// The NPE will not be detectable as of V5.10 from\n+\t\t// ActiveMQConnection.setClientInternalExceptionListener\n+\t\t// since ActiveMQMessageConsumer.dispatch will silently catch and\n+\t\t// discard any RuntimeException\n+\t\terrorDetectorAppender = new AppenderSkeleton() {\n+\t\t\t@Override\n+\t\t\tpublic void close() {\n+\t\t\t\t// Do nothing\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean requiresLayout() {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void append(LoggingEvent event) {\n+\t\t\t\tif (event.getLevel().isGreaterOrEqual(Level.ERROR))\n+\t\t\t\t\thasErrorInLogger.set(true);\n+\t\t\t}\n+\t\t};\n+\n+\t\torg.apache.log4j.Logger.getRootLogger().addAppender(errorDetectorAppender);\n+\t\tproducerThread = new Thread(new Runnable() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tConnection connection = createConnectionFactory()\n+\t\t\t\t\t\t\t.createConnection();\n+\t\t\t\t\tconnection.start();\n+\t\t\t\t\tSession session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\t\t\t\t\tTopic destination = session.createTopic(\"test.AMQ5426\");\n+\t\t\t\t\tLOG.debug(\"Created topic: {}\", destination);\n+\t\t\t\t\tMessageProducer producer = session.createProducer(destination);\n+\t\t\t\t\tproducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n+\t\t\t\t\tproducer.setTimeToLive(1000);\n+\t\t\t\t\tLOG.debug(\"Created producer: {}\", producer);\n+\n+\t\t\t\t\tint i = 1;\n+\t\t\t\t\twhile (!Thread.interrupted()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tTextMessage msg = session.createTextMessage(\" testMessage \" + i);\n+\t\t\t\t\t\t\tproducer.send(msg);\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t// Sleep for some nano seconds\n+\t\t\t\t\t\t\t\tThread.sleep(0, 100);\n+\t\t\t\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\t\t\t\t// Restore the interrupt\n+\t\t\t\t\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tLOG.debug(\"message sent: {}\", i);\n+\t\t\t\t\t\t\ti++;\n+\t\t\t\t\t\t} catch (JMSException e) {\n+\t\t\t\t\t\t\t// Sometimes, we will gt a JMSException with nested\n+\t\t\t\t\t\t\t// InterruptedIOException when we interrupt the thread\n+\t\t\t\t\t\t\tif (!(e.getCause() != null && e.getCause() instanceof InterruptedIOException)) {\n+\t\t\t\t\t\t\t\tthrow e;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tproducer.close();\n+\t\t\t\t\tsession.close();\n+\t\t\t\t\tconnection.close();\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tLOG.error(e.getMessage(), e);\n+\t\t\t\t\thasFailureInProducer.set(true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\n+\t\tproducerThread.start();\n+\t}\n+\n+\t@Test(timeout = 2 * 60 * 1000)\n+\tpublic void testConsumerProperlyClosedWithoutError() throws Exception {\n+\t\tRandom rn = new Random();\n+\n+\t\tfinal int NUMBER_OF_RUNS = 1000;\n+\n+\t\tfor (int run = 0; run < NUMBER_OF_RUNS; run++) {\n+\t\t\tfinal AtomicInteger numberOfMessagesReceived = new AtomicInteger(0);\n+\t\t\tLOG.info(\"Starting run {} of {}\", run, NUMBER_OF_RUNS);\n+\n+\t\t\t// Starts a consumer\n+\t\t\tConnection connection = createConnectionFactory().createConnection();\n+\t\t\tconnection.start();\n+\n+\t\t\tSession session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);\n+\t\t\tTopic destination = session.createTopic(\"test.AMQ5426\");\n+\n+\t\t\tLOG.debug(\"Created topic: {}\", destination);\n+\t\t\tMessageConsumer consumer = session.createConsumer(destination);\n+\t\t\tconsumer.setMessageListener(new MessageListener() {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onMessage(Message message) {\n+\t\t\t\t\tLOG.debug(\"Received message\");\n+\t\t\t\t\tnumberOfMessagesReceived.getAndIncrement();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tLOG.debug(\"Created consumer: {}\", consumer);\n+\n+\t\t\ttry {\n+\t\t\t\t// Sleep for a random time\n+\t\t\t\tThread.sleep(rn.nextInt(5) + 1);\n+\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t// Restore the interrupt\n+\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t}\n+\n+\t\t\t// Close the consumer\n+\t\t\tLOG.debug(\"Closing consumer\");\n+\t\t\tconsumer.close();\n+\t\t\tsession.close();\n+\t\t\tconnection.close();\n+\n+\t\t\tassertFalse(\"Exception in Producer Thread\", hasFailureInProducer.get());\n+\t\t\tassertFalse(\"Error detected in Logger\", hasErrorInLogger.get());\n+\t\t\tLOG.info(\"Run {} of {} completed, message received: {}\", run,\n+\t\t\t\t\tNUMBER_OF_RUNS, numberOfMessagesReceived.get());\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\t// Interrupt the producer thread\n+\t\tLOG.info(\"Shutdown producer thread\");\n+\t\tproducerThread.interrupt();\n+\t\tproducerThread.join();\n+\t\tbrokerService.stop();\n+\t\tbrokerService.waitUntilStopped();\n+\n+\t\tassertFalse(\"Exception in Producer Thread\", hasFailureInProducer.get());\n+\t\tassertFalse(\"Error detected in Logger\", hasErrorInLogger.get());\n+\t}\n+}",
                "changes": 227,
                "blob_url": "https://github.com/apache/activemq/blob/c02bc648460059b6dbc201fa21b7ee0ce2445082/activemq-unit-tests/src/test/java/org/apache/activemq/bugs/AMQ5426Test.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5426\n\nFixing a race condition in ActiveMQMessageConsumer that could cause a\nNPE when the consumer is closing by only modifing pendingAck inside of\nthe deliveredMessagesMutex\n\nThanks to Michael Wong for providing the test case for this issue.",
        "commit": "https://github.com/apache/activemq/commit/c02bc648460059b6dbc201fa21b7ee0ce2445082"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d0f48b3ee504650330425707c363ea103be3c3dd",
        "bug_id": "activemq_86",
        "file": [
            {
                "additions": 4,
                "sha": "6a9de11093bdc0ccc68164c803acf0d07f830c03",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/4ddbb8546d7ca50b57213da45f3fbd021ef7fe69/activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java",
                "deletions": 1,
                "filename": "activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java?ref=4ddbb8546d7ca50b57213da45f3fbd021ef7fe69",
                "patch": "@@ -185,9 +185,12 @@ public void destroy() throws Exception {\n         }\n     }\n \n-    // FactoryBean methods\n     @Override\n     public Object getObject() throws Exception {\n+        // in case spring-dm calls getObject before this bean has been initialized\n+        if (pooledConnectionFactory == null) {\n+            afterPropertiesSet();\n+        }\n         return pooledConnectionFactory;\n     }\n ",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/4ddbb8546d7ca50b57213da45f3fbd021ef7fe69/activemq-spring/src/main/java/org/apache/activemq/pool/PooledConnectionFactoryBean.java"
            }
        ],
        "repo": "activemq",
        "message": "AMQ-2960: Fixed potential NPE in pooled connection factory in activemq-spring when using spring-dm in OSGi. As spring-dm may call getObject before postCostruct has been called.",
        "commit": "https://github.com/apache/activemq/commit/4ddbb8546d7ca50b57213da45f3fbd021ef7fe69"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/e8ea6cd95cf0ed287f4c9d42a47cad5401d212a1",
        "bug_id": "activemq_87",
        "file": [
            {
                "additions": 1,
                "sha": "d4efa94d3dc88adeb87f99cd5e6c03fb1794beda",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8635a06e4aac1af3c3d0d7e80e110fbd7988bc03/activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java",
                "deletions": 1,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java?ref=8635a06e4aac1af3c3d0d7e80e110fbd7988bc03",
                "patch": "@@ -289,7 +289,7 @@ public void scheduledJob(String id, ByteSequence job) {\n \n     protected synchronized JobScheduler getInternalScheduler() throws Exception {\n         if (this.started.get()) {\n-            if (this.scheduler == null) {\n+            if (this.scheduler == null && store != null) {\n                 this.scheduler = store.getJobScheduler(\"JMS\");\n                 this.scheduler.addListener(this);\n                 this.scheduler.startDispatching();",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/8635a06e4aac1af3c3d0d7e80e110fbd7988bc03/activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3024 - guard against null from stomp tests, npe regression\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1518123 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/8635a06e4aac1af3c3d0d7e80e110fbd7988bc03"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f20e17ae32cd210c4d88bc0a6b9a6a35dc9db49a",
        "bug_id": "activemq_88",
        "file": [
            {
                "additions": 3,
                "sha": "071f5c415832d2183c05ffe184e3833582eac949",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/57617b862fe30372b9e4c4454575d7b79bd68533/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "deletions": 1,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala?ref=57617b862fe30372b9e4c4454575d7b79bd68533",
                "patch": "@@ -184,6 +184,8 @@ class SlaveLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n \n   class Session(transport:Transport, on_login: (Session)=>Unit) extends TransportHandler(transport) {\n \n+    val response_callbacks = new util.LinkedList[(ReplicationFrame)=>Unit]()\n+\n     override def onTransportFailure(error: IOException) {\n       if( isStarted ) {\n         warn(\"Unexpected session error: \"+error)\n@@ -237,7 +239,7 @@ class SlaveLevelDBStore extends LevelDBStore with ReplicatedLevelDBStoreTrait {\n       response_callbacks.addLast(cb)\n       send(action, body)\n     }\n-    val response_callbacks = new util.LinkedList[(ReplicationFrame)=>Unit]()\n+\n     def response_handler: (AnyRef)=>Unit = (command)=> {\n       command match {\n         case command:ReplicationFrame =>",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/57617b862fe30372b9e4c4454575d7b79bd68533/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/replicated/SlaveLevelDBStore.scala"
            }
        ],
        "repo": "activemq",
        "message": "Try initializing the replicated leveldb response_callbacks early on to avoid potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1484049 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/57617b862fe30372b9e4c4454575d7b79bd68533"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2c06326506b4b54218e227860ad35e064eab9dd8",
        "bug_id": "activemq_89",
        "file": [
            {
                "additions": 1,
                "sha": "9981460ca96cbc1e32b4a7457a94502e62a48955",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d344aa7a421de9fe8dcd07101ffc5160889fe7d8/activemq-client/src/main/java/org/apache/activemq/command/MessageId.java",
                "deletions": 1,
                "filename": "activemq-client/src/main/java/org/apache/activemq/command/MessageId.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/command/MessageId.java?ref=d344aa7a421de9fe8dcd07101ffc5160889fe7d8",
                "patch": "@@ -153,7 +153,7 @@ public MessageId copy() {\n         MessageId copy = new MessageId(producerId, producerSequenceId);\n         copy.key = key;\n         copy.brokerSequenceId = brokerSequenceId;\n-        copy.dataLocator = new AtomicReference<Object>(dataLocator != null ? dataLocator.get() : null);\n+        copy.dataLocator = dataLocator;\n         copy.entryLocator = entryLocator;\n         copy.plistLocator = plistLocator;\n         return copy;",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/d344aa7a421de9fe8dcd07101ffc5160889fe7d8/activemq-client/src/main/java/org/apache/activemq/command/MessageId.java"
            },
            {
                "additions": 140,
                "sha": "0cc4db9c73091f6977d566fe1fc167c89a9be4e0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d344aa7a421de9fe8dcd07101ffc5160889fe7d8/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "deletions": 137,
                "filename": "activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala?ref=d344aa7a421de9fe8dcd07101ffc5160889fe7d8",
                "patch": "@@ -1200,170 +1200,173 @@ class LevelDBClient(store: LevelDBStore) {\n   def store(uows: Array[DelayableUOW]) {\n     retryUsingIndex {\n       log.appender { appender =>\n+        val syncNeeded = index.write(new WriteOptions, max_index_write_latency) { batch =>\n+          write_uows(uows, appender, batch)\n+        }\n+        if( syncNeeded && sync ) {\n+          appender.force\n+        }\n+      } // end of log.appender { block }\n \n-        var syncNeeded = false\n-        index.write(new WriteOptions, max_index_write_latency) { batch =>\n-\n-          var write_message_total = 0L\n-          var write_enqueue_total = 0L\n-\n-          uows.foreach { uow =>\n-\n-\n-            uow.actions.foreach { case (msg, action) =>\n-              val messageRecord = action.messageRecord\n-              var log_info:LogInfo = null\n-              var pos = -1L\n-              var dataLocator:DataLocator = null\n+      // now that data is logged.. locate message from the data in the logs\n+      for( uow <- uows ) {\n+        for((msg, action) <- uow.actions ){\n+          val messageRecord = action.messageRecord\n+          if (messageRecord != null) {\n+            messageRecord.id.setDataLocator(messageRecord.locator)\n+          }\n+        }\n+      }\n+    }\n+  }\n \n-              if (messageRecord != null && messageRecord.locator==null) {\n-                val start = System.nanoTime()\n-                val p = appender.append(LOG_DATA, messageRecord.data)\n-                pos = p._1\n-                log_info = p._2\n-                dataLocator = DataLocator(pos, messageRecord.data.length)\n-                messageRecord.locator = dataLocator\n-                write_message_total += System.nanoTime() - start\n-              }\n \n+  def write_uows(uows: Array[DelayableUOW], appender: RecordLog#LogAppender, batch: WriteBatch) = {\n+    var syncNeeded = false\n+    var write_message_total = 0L\n+    var write_enqueue_total = 0L\n+\n+    for( uow <- uows ) {\n+      for( (msg, action) <- uow.actions ) {\n+        val messageRecord = action.messageRecord\n+        var log_info: LogInfo = null\n+        var dataLocator: DataLocator = null\n+\n+        if (messageRecord != null && messageRecord.locator == null) {\n+          val start = System.nanoTime()\n+          val p = appender.append(LOG_DATA, messageRecord.data)\n+          log_info = p._2\n+          dataLocator = DataLocator(p._1, messageRecord.data.length)\n+          messageRecord.locator = dataLocator\n+//          println(\"msg: \"+messageRecord.id+\" -> \"+dataLocator)\n+          write_message_total += System.nanoTime() - start\n+        }\n \n-              action.dequeues.foreach { entry =>\n-                val keyLocation = entry.id.getEntryLocator.asInstanceOf[EntryLocator]\n-                val key = encodeEntryKey(ENTRY_PREFIX, keyLocation.qid, keyLocation.seq)\n \n-                if( dataLocator==null ) {\n-                  dataLocator = entry.id.getDataLocator match {\n-                    case x:DataLocator => x\n-                    case x:MessageRecord => x.locator\n-                    case _ => throw new RuntimeException(\"Unexpected locator type: \"+dataLocator)\n-                  }\n-                }\n+        for( entry <- action.dequeues) {\n+          val keyLocation = entry.id.getEntryLocator.asInstanceOf[EntryLocator]\n+          val key = encodeEntryKey(ENTRY_PREFIX, keyLocation.qid, keyLocation.seq)\n \n-                val log_record = new EntryRecord.Bean()\n-                log_record.setCollectionKey(entry.queueKey)\n-                log_record.setEntryKey(new Buffer(key, 9, 8))\n-                log_record.setValueLocation(dataLocator.pos)\n-                appender.append(LOG_REMOVE_ENTRY, encodeEntryRecord(log_record.freeze()))\n+          if (dataLocator == null) {\n+            dataLocator = entry.id.getDataLocator match {\n+              case x: DataLocator => x\n+              case x: MessageRecord => x.locator\n+              case _ => throw new RuntimeException(\"Unexpected locator type: \" + dataLocator)\n+            }\n+          }\n \n-                batch.delete(key)\n-                logRefDecrement(dataLocator.pos)\n-                collectionDecrementSize(entry.queueKey)\n-              }\n+//          println(\"deq: \"+entry.id+\" -> \"+dataLocator)\n+          val log_record = new EntryRecord.Bean()\n+          log_record.setCollectionKey(entry.queueKey)\n+          log_record.setEntryKey(new Buffer(key, 9, 8))\n+          log_record.setValueLocation(dataLocator.pos)\n+          appender.append(LOG_REMOVE_ENTRY, encodeEntryRecord(log_record.freeze()))\n \n-              action.enqueues.foreach { entry =>\n-                \n-                if(dataLocator ==null ) {\n-                  dataLocator = entry.id.getDataLocator match {\n-                    case x:DataLocator => x\n-                    case x:MessageRecord => x.locator\n-                    case _ =>\n-                      throw new RuntimeException(\"Unexpected locator type\")\n-                  }\n-                }\n+          batch.delete(key)\n+          logRefDecrement(dataLocator.pos)\n+          collectionDecrementSize(entry.queueKey)\n+        }\n \n-                val start = System.nanoTime()\n+        for( entry<- action.enqueues) {\n \n-                val key = encodeEntryKey(ENTRY_PREFIX, entry.queueKey, entry.queueSeq)\n+          if (dataLocator == null) {\n+            dataLocator = entry.id.getDataLocator match {\n+              case x: DataLocator => x\n+              case x: MessageRecord => x.locator\n+              case _ =>\n+                throw new RuntimeException(\"Unexpected locator type\")\n+            }\n+          }\n \n-                assert(entry.id.getDataLocator()!=null)\n+//          println(\"enq: \"+entry.id+\" -> \"+dataLocator)\n+          val start = System.nanoTime()\n \n-                val log_record = new EntryRecord.Bean()\n-                log_record.setCollectionKey(entry.queueKey)\n-                log_record.setEntryKey(new Buffer(key, 9, 8))\n-                log_record.setValueLocation(dataLocator.pos)\n-                log_record.setValueLength(dataLocator.len)\n-                appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n+          val key = encodeEntryKey(ENTRY_PREFIX, entry.queueKey, entry.queueSeq)\n \n-                val index_record = new EntryRecord.Bean()\n-                index_record.setValueLocation(dataLocator.pos)\n-                index_record.setValueLength(dataLocator.len)\n-                batch.put(key,  encodeEntryRecord(index_record.freeze()).toByteArray)\n+          assert(entry.id.getDataLocator() != null)\n \n-                val log_data = encodeEntryRecord(log_record.freeze())\n-                val index_data = encodeEntryRecord(index_record.freeze()).toByteArray\n+          val log_record = new EntryRecord.Bean()\n+          log_record.setCollectionKey(entry.queueKey)\n+          log_record.setEntryKey(new Buffer(key, 9, 8))\n+          log_record.setValueLocation(dataLocator.pos)\n+          log_record.setValueLength(dataLocator.len)\n+          appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n \n-                appender.append(LOG_ADD_ENTRY, log_data)\n-                batch.put(key, index_data)\n+          val index_record = new EntryRecord.Bean()\n+          index_record.setValueLocation(dataLocator.pos)\n+          index_record.setValueLength(dataLocator.len)\n+          batch.put(key, encodeEntryRecord(index_record.freeze()).toByteArray)\n \n-                for( key <- logRefKey(pos, log_info) ) {\n-                  logRefs.getOrElseUpdate(key, new LongCounter()).incrementAndGet()\n-                }\n+          val log_data = encodeEntryRecord(log_record.freeze())\n+          val index_data = encodeEntryRecord(index_record.freeze()).toByteArray\n \n-                collectionIncrementSize(entry.queueKey, log_record.getEntryKey.toByteArray)\n-                write_enqueue_total += System.nanoTime() - start\n-              }\n+          appender.append(LOG_ADD_ENTRY, log_data)\n+          batch.put(key, index_data)\n \n-              action.xaAcks.foreach { entry:XaAckRecord =>\n-                val ack = entry.ack\n-                if( dataLocator==null ) {\n-                  dataLocator = ack.getLastMessageId.getDataLocator match {\n-                    case x:DataLocator => x\n-                    case x:MessageRecord => x.locator\n-                    case _ =>\n-                      throw new RuntimeException(\"Unexpected locator type\")\n-                  }\n-                }\n-                println(dataLocator)\n-\n-                val el = ack.getLastMessageId.getEntryLocator.asInstanceOf[EntryLocator];\n-                val os = new DataByteArrayOutputStream()\n-                os.writeLong(dataLocator.pos)\n-                os.writeInt(dataLocator.len)\n-                os.writeLong(el.qid)\n-                os.writeLong(el.seq)\n-                os.writeLong(entry.sub)\n-                store.wireFormat.marshal(ack, os)\n-                var ack_encoded = os.toBuffer\n-\n-                val key = encodeEntryKey(ENTRY_PREFIX, entry.container, entry.seq)\n-                val log_record = new EntryRecord.Bean()\n-                log_record.setCollectionKey(entry.container)\n-                log_record.setEntryKey(new Buffer(key, 9, 8))\n-                log_record.setMeta(ack_encoded)\n-                appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n-                val index_record = new EntryRecord.Bean()\n-                index_record.setMeta(ack_encoded)\n-                batch.put(key, encodeEntryRecord(log_record.freeze()).toByteArray)\n-              }\n+          for (key <- logRefKey(dataLocator.pos, log_info)) {\n+            logRefs.getOrElseUpdate(key, new LongCounter()).incrementAndGet()\n+          }\n \n-            }\n+          collectionIncrementSize(entry.queueKey, log_record.getEntryKey.toByteArray)\n+          write_enqueue_total += System.nanoTime() - start\n+        }\n \n-            uow.subAcks.foreach { entry =>\n-              val key = encodeEntryKey(ENTRY_PREFIX, entry.subKey, ACK_POSITION)\n-              val log_record = new EntryRecord.Bean()\n-              log_record.setCollectionKey(entry.subKey)\n-              log_record.setEntryKey(ACK_POSITION)\n-              log_record.setValueLocation(entry.ackPosition)\n-              appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n-\n-              val index_record = new EntryRecord.Bean()\n-              index_record.setValueLocation(entry.ackPosition)\n-              batch.put(key, encodeEntryRecord(log_record.freeze()).toByteArray)\n-            }\n+        for( entry <- action.xaAcks ) {\n \n-            if( !syncNeeded && uow.syncNeeded ) {\n-              syncNeeded = true\n+          val ack = entry.ack\n+          if (dataLocator == null) {\n+            dataLocator = ack.getLastMessageId.getDataLocator match {\n+              case x: DataLocator => x\n+              case x: MessageRecord => x.locator\n+              case _ =>\n+                throw new RuntimeException(\"Unexpected locator type\")\n             }\n           }\n-\n-          max_write_message_latency.add(write_message_total)\n-          max_write_enqueue_latency.add(write_enqueue_total)\n-        }\n-        if( syncNeeded && sync ) {\n-          appender.force\n+          println(dataLocator)\n+\n+          val el = ack.getLastMessageId.getEntryLocator.asInstanceOf[EntryLocator];\n+          val os = new DataByteArrayOutputStream()\n+          os.writeLong(dataLocator.pos)\n+          os.writeInt(dataLocator.len)\n+          os.writeLong(el.qid)\n+          os.writeLong(el.seq)\n+          os.writeLong(entry.sub)\n+          store.wireFormat.marshal(ack, os)\n+          var ack_encoded = os.toBuffer\n+\n+          val key = encodeEntryKey(ENTRY_PREFIX, entry.container, entry.seq)\n+          val log_record = new EntryRecord.Bean()\n+          log_record.setCollectionKey(entry.container)\n+          log_record.setEntryKey(new Buffer(key, 9, 8))\n+          log_record.setMeta(ack_encoded)\n+          appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n+          val index_record = new EntryRecord.Bean()\n+          index_record.setMeta(ack_encoded)\n+          batch.put(key, encodeEntryRecord(log_record.freeze()).toByteArray)\n         }\n-      } // end of log.appender { block }\n+      }\n \n-      // now that data is logged.. locate message from the data in the logs\n-      uows.foreach { uow =>\n-        uow.actions.foreach { case (msg, action) =>\n-          val messageRecord = action.messageRecord\n-          if (messageRecord != null) {\n-            messageRecord.id.setDataLocator(messageRecord.locator)\n-          }\n-        }\n+      for( entry <- uow.subAcks ) {\n+        val key = encodeEntryKey(ENTRY_PREFIX, entry.subKey, ACK_POSITION)\n+        val log_record = new EntryRecord.Bean()\n+        log_record.setCollectionKey(entry.subKey)\n+        log_record.setEntryKey(ACK_POSITION)\n+        log_record.setValueLocation(entry.ackPosition)\n+        appender.append(LOG_ADD_ENTRY, encodeEntryRecord(log_record.freeze()))\n+\n+        val index_record = new EntryRecord.Bean()\n+        index_record.setValueLocation(entry.ackPosition)\n+        batch.put(key, encodeEntryRecord(log_record.freeze()).toByteArray)\n+      }\n+\n+      if (uow.syncNeeded) {\n+        syncNeeded = true\n       }\n     }\n+\n+    max_write_message_latency.add(write_message_total)\n+    max_write_enqueue_latency.add(write_enqueue_total)\n+    syncNeeded\n   }\n \n   def getCollectionEntries(collectionKey: Long, firstSeq:Long, lastSeq:Long): Seq[(Buffer, EntryRecord.Buffer)] = {",
                "changes": 277,
                "blob_url": "https://github.com/apache/activemq/blob/d344aa7a421de9fe8dcd07101ffc5160889fe7d8/activemq-leveldb-store/src/main/scala/org/apache/activemq/leveldb/LevelDBClient.scala"
            }
        ],
        "repo": "activemq",
        "message": "Fixes AMQ-4529: leveldb store NPEs when you send to a composite destination.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1481013 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/d344aa7a421de9fe8dcd07101ffc5160889fe7d8"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/4321ae065d17e9fd18fe2407cdf950c31c224f93",
        "bug_id": "activemq_90",
        "file": [
            {
                "additions": 18,
                "sha": "f000607ade1be2c2afa16da48e3989e7f1514a92",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/67252fe60da0d7f19a20c1a4fa79f83ba0b85e46/activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java",
                "deletions": 18,
                "filename": "activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java?ref=67252fe60da0d7f19a20c1a4fa79f83ba0b85e46",
                "patch": "@@ -17,23 +17,23 @@\n package org.apache.activemq.web.handler;\n \n import java.util.Arrays;\n-import java.util.UUID;\n \n import javax.servlet.http.HttpServletRequest;\n \n import org.apache.activemq.web.DestinationFacade;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.web.bind.ServletRequestDataBinder;\n-import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;\n import org.springframework.web.servlet.HandlerExecutionChain;\n+import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;\n \n /**\n- * \n+ *\n  */\n public class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping {\n     private static final transient Logger LOG = LoggerFactory.getLogger(BindingBeanNameUrlHandlerMapping.class);\n \n+    @Override\n     protected Object getHandlerInternal(HttpServletRequest request) throws Exception {\n         Object object = super.getHandlerInternal(request);\n \n@@ -45,21 +45,21 @@ protected Object getHandlerInternal(HttpServletRequest request) throws Exception\n             HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object;\n             object = handlerExecutionChain.getHandler();\n         }\n-        \n+\n         if (object != null) {\n-        \t// prevent CSRF attacks\n-        \tif (object instanceof DestinationFacade) {\n-        \t\t// check supported methods\n-        \t\tif (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {\n-        \t\t\tthrow new UnsupportedOperationException(\"Unsupported method \" + request.getMethod() + \" for path \" + request.getRequestURI());\n-        \t\t}\n-        \t\t// check the 'secret'\n-        \t\tif (!request.getSession().getAttribute(\"secret\").equals(request.getParameter(\"secret\"))) {\n-        \t\t\tthrow new UnsupportedOperationException(\"Possible CSRF attack\");\n-        \t\t}\n-        \t}\n-        \t\n-        \t\n+            // prevent CSRF attacks\n+            if (object instanceof DestinationFacade) {\n+                // check supported methods\n+                if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {\n+                    throw new UnsupportedOperationException(\"Unsupported method \" + request.getMethod() + \" for path \" + request.getRequestURI());\n+                }\n+                // check the 'secret'\n+                if (request.getSession().getAttribute(\"secret\") == null ||\n+                    !request.getSession().getAttribute(\"secret\").equals(request.getParameter(\"secret\"))) {\n+                    throw new UnsupportedOperationException(\"Possible CSRF attack\");\n+                }\n+            }\n+\n             ServletRequestDataBinder binder = new ServletRequestDataBinder(object, \"request\");\n             try {\n                 binder.bind(request);\n@@ -73,7 +73,7 @@ protected Object getHandlerInternal(HttpServletRequest request) throws Exception\n                 throw e;\n             }\n         }\n-        \n+\n         return object;\n     }\n }",
                "changes": 36,
                "blob_url": "https://github.com/apache/activemq/blob/67252fe60da0d7f19a20c1a4fa79f83ba0b85e46/activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for: https://issues.apache.org/jira/browse/AMQ-2740\n\nFix for NPE indicate possible CSRF attack instead.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1418061 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/67252fe60da0d7f19a20c1a4fa79f83ba0b85e46"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/144dda0308848e0ae4d7f87fb229e5ff7d107fd0",
        "bug_id": "activemq_91",
        "file": [
            {
                "additions": 14,
                "sha": "aafa9af411c1071c0f38359ef7a6d9979b8c221a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8b2875e19ef5fe3955e307b5234d5011bf9acaea/activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java",
                "deletions": 10,
                "filename": "activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java?ref=8b2875e19ef5fe3955e307b5234d5011bf9acaea",
                "patch": "@@ -341,16 +341,20 @@ protected void handleOption(String token, List<String> tokens) throws Exception\n                context.print(\"Connecting to pid: \" + pid);\n \n                String jmxUrl = findJMXUrlByProcessId(pid);\n-               // If jmx url already specified\n-               if (getJmxServiceUrl() != null) {\n-                   context.printException(new IllegalArgumentException(\"JMX URL already specified.\"));\n-                   tokens.clear();\n-               }\n-               try {\n-                   this.setJmxServiceUrl(new JMXServiceURL(jmxUrl));\n-               } catch (MalformedURLException e) {\n-                   context.printException(e);\n-                   tokens.clear();\n+               if (jmxUrl != null) {\n+                   // If jmx url already specified\n+                   if (getJmxServiceUrl() != null) {\n+                       context.printException(new IllegalArgumentException(\"JMX URL already specified.\"));\n+                       tokens.clear();\n+                   }\n+                   try {\n+                       this.setJmxServiceUrl(new JMXServiceURL(jmxUrl));\n+                   } catch (MalformedURLException e) {\n+                       context.printException(e);\n+                       tokens.clear();\n+                   }\n+               } else {\n+                   context.printInfo(\"failed to resolve jmxUrl for pid:\" + pid + \", using default JMX url\");\n                }\n            }  else {\n               context.printInfo(\"--pid option is not available for this VM, using default JMX url\");",
                "changes": 24,
                "blob_url": "https://github.com/apache/activemq/blob/8b2875e19ef5fe3955e307b5234d5011bf9acaea/activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3858 fix npe on not found vvm jmx url\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1341945 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/8b2875e19ef5fe3955e307b5234d5011bf9acaea"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/1463bec066c199d60402c2d3d594adc05a007e6a",
        "bug_id": "activemq_92",
        "file": [
            {
                "additions": 6,
                "sha": "e6b3f51413a7e50b797e7c83e3bee04b572addcb",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921",
                "patch": "@@ -145,6 +145,9 @@ public boolean iterate() {\n                     if (priorityBackup && !connectedToPriority) {\n                         try {\n                             doDelay();\n+                            if (reconnectTask == null) {\n+                                return true;\n+                            }\n                             reconnectTask.wakeup();\n                         } catch (InterruptedException e) {\n                             LOG.debug(\"Reconnect task has been interrupted.\", e);\n@@ -154,6 +157,9 @@ public boolean iterate() {\n                     // build backups on the next iteration\n                     buildBackup = true;\n                     try {\n+                        if (reconnectTask == null) {\n+                            return true;\n+                        }\n                         reconnectTask.wakeup();\n                     } catch (InterruptedException e) {\n                         LOG.debug(\"Reconnect task has been interrupted.\", e);",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for: https://issues.apache.org/jira/browse/AMQ-3782\n\navoid any potential NPE and try again.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1304057 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d403f107224244abbe53e8e9cb90959ae402885a",
        "bug_id": "activemq_93",
        "file": [
            {
                "additions": 9,
                "sha": "b57f7118c6d6574086cc17720e99fda954a601f1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f6caba7127ba3b5f7eae2a14943606c10bff93e8/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=f6caba7127ba3b5f7eae2a14943606c10bff93e8",
                "patch": "@@ -41,6 +41,7 @@\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n \n+import org.apache.activeio.journal.Journal;\n import org.apache.activemq.ActiveMQConnectionMetaData;\n import org.apache.activemq.ConfigurationException;\n import org.apache.activemq.Service;\n@@ -1723,7 +1724,14 @@ protected void checkSystemUsageLimits() throws IOException {\n                           \" only has \" + dirFreeSpace / (1024 * 1024) + \" mb of free space\");\n             }\n \n-            long maxJournalFileSize = usage.getTempUsage().getStore().getJournalMaxFileLength();\n+            long maxJournalFileSize;\n+            \n+            if (usage.getTempUsage().getStore() != null) {\n+            \tmaxJournalFileSize = usage.getTempUsage().getStore().getJournalMaxFileLength();\n+            } else {\n+            \tmaxJournalFileSize = org.apache.kahadb.journal.Journal.DEFAULT_MAX_FILE_LENGTH;\n+            }\n+            \n             if (storeLimit < maxJournalFileSize) {\n                 LOG.error(\"Temporary Store limit is \" + storeLimit / (1024 * 1024) +\n                           \" mb, whilst the max journal file size for the temporary store is: \" +",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/f6caba7127ba3b5f7eae2a14943606c10bff93e8/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java"
            }
        ],
        "repo": "activemq",
        "message": "Additional Fix for https://issues.apache.org/jira/browse/AMQ-3573 - Avoid a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1239335 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/f6caba7127ba3b5f7eae2a14943606c10bff93e8"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/82e3be347cc78316b759f5d196b8423b9a305a9f",
        "bug_id": "activemq_94",
        "file": [
            {
                "additions": 4,
                "sha": "a3bdeae925f2f388d838f942642a32e92771d31c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6e6d8605d359316c5d527952408e412e29973531/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "deletions": 2,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java?ref=6e6d8605d359316c5d527952408e412e29973531",
                "patch": "@@ -369,11 +369,13 @@ public long rangeSize() {\n     private class SequenceIterator implements Iterator<Long> {\n \n         private Sequence currentEntry;\n-        private long lastReturned;\n+        private long lastReturned = -1;\n \n         public SequenceIterator() {\n             currentEntry = getHead();\n-            lastReturned = currentEntry.first - 1;\n+            if (currentEntry != null) {\n+                lastReturned = currentEntry.first - 1;\n+            }\n         }\n \n         public boolean hasNext() {",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/6e6d8605d359316c5d527952408e412e29973531/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java"
            },
            {
                "additions": 10,
                "sha": "48c9e484f5c67c43a25973a24c9fe256282fe92a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6e6d8605d359316c5d527952408e412e29973531/kahadb/src/test/java/org/apache/kahadb/util/SequenceSetTest.java",
                "deletions": 0,
                "filename": "kahadb/src/test/java/org/apache/kahadb/util/SequenceSetTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/test/java/org/apache/kahadb/util/SequenceSetTest.java?ref=6e6d8605d359316c5d527952408e412e29973531",
                "patch": "@@ -126,4 +126,14 @@ public void testIterator() {\n             assertEquals(expected[index++], iterator.next().longValue());\n         }\n     }\n+\n+    @Test\n+    public void testIteratorEmptySequenceSet() {\n+        SequenceSet set = new SequenceSet();\n+\n+        Iterator<Long> iterator = set.iterator();\n+        while(iterator.hasNext()) {\n+            fail(\"Should not have any elements\");\n+        }\n+    }\n }",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/6e6d8605d359316c5d527952408e412e29973531/kahadb/src/test/java/org/apache/kahadb/util/SequenceSetTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3467\n\nHandle a potential NPE case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1165797 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/6e6d8605d359316c5d527952408e412e29973531"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/3817ed9a975514012f28d46cf7c439d2a0931c64",
        "bug_id": "activemq_95",
        "file": [
            {
                "additions": 3,
                "sha": "c6384dd9fe37639268825df47e635ccdddeadddf",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/a7f916446484bc03a8c95c30b4453436a1be3696/activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java?ref=a7f916446484bc03a8c95c30b4453436a1be3696",
                "patch": "@@ -150,7 +150,9 @@ protected void doStart() throws Exception {\n     }\n \n     protected void doStop(ServiceStopper stopper) throws Exception {\n-        selection.close();\n+        if (selection != null) {\n+            selection.close();\n+        }\n         super.doStop(stopper);\n     }\n }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/a7f916446484bc03a8c95c30b4453436a1be3696/activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java"
            }
        ],
        "repo": "activemq",
        "message": "resolve NPE on stop when reconnect fails - resolve https://issues.apache.org/activemq/browse/AMQ-2811\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@964367 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/a7f916446484bc03a8c95c30b4453436a1be3696"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/ac77a047c0e22177fd6f69ed3e16cd64b0ca37f7",
        "bug_id": "activemq_96",
        "file": [
            {
                "additions": 1,
                "sha": "2fdca37499dae2710e49595ae22050bbbc757388",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/1f063e8557211e655c2eca8065623b157f590de5/activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java?ref=1f063e8557211e655c2eca8065623b157f590de5",
                "patch": "@@ -45,7 +45,7 @@\n \n     ActiveMQSessionExecutor(ActiveMQSession session) {\n         this.session = session;\n-        if (this.session.connection.isMessagePrioritySupported()) {\n+        if (this.session.connection != null && this.session.connection.isMessagePrioritySupported()) {\n            this.messageQueue = new SimplePriorityMessageDispatchChannel();\n         }else {\n             this.messageQueue = new FifoMessageDispatchChannel();",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/1f063e8557211e655c2eca8065623b157f590de5/activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/activemq/browse/AMQ-2790 - check connection to prevent NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@957213 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/1f063e8557211e655c2eca8065623b157f590de5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/b85b71e2979b009f47b2d2d500dd2e7c9f25094e",
        "bug_id": "activemq_97",
        "file": [
            {
                "additions": 6,
                "sha": "18c37d5c6bfbc559a5cca600661bafb4f9915e82",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/def2a3491508070a15c1583ae5d1f0745b1a5043/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "deletions": 3,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java?ref=def2a3491508070a15c1583ae5d1f0745b1a5043",
                "patch": "@@ -591,9 +591,12 @@ public void acknowledge(ConnectionContext context, Subscription sub, MessageAck\n     }\n \n     Message loadMessage(MessageId messageId) throws IOException {\n-        Message msg = store.getMessage(messageId);\n-        if (msg != null) {\n-            msg.setRegionDestination(this);\n+        Message msg = null;\n+        if (store != null) { // can be null for a temp q\n+            msg = store.getMessage(messageId);\n+            if (msg != null) {\n+                msg.setRegionDestination(this);\n+            }\n         }\n         return msg;\n     }",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/def2a3491508070a15c1583ae5d1f0745b1a5043/activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java"
            }
        ],
        "repo": "activemq",
        "message": "store can be null for a temp q, npe will hide out of sync error message, observed once in AMQ2102Test\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@903225 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/def2a3491508070a15c1583ae5d1f0745b1a5043"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/78e7221d3eea4b776387ff68ad4f14b06cfad854",
        "bug_id": "activemq_98",
        "file": [
            {
                "additions": 2,
                "sha": "5b67b70cd397c4dddafec557a549545d2a9cbab4",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2cdb51bb748250762891554739ca2125c13122c6/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java?ref=2cdb51bb748250762891554739ca2125c13122c6",
                "patch": "@@ -48,6 +48,8 @@ public synchronized void start() throws IOException {\n         }\n \n         started = true;\n+\n+        accessorPool = new DataFileAccessorPool(this);\n                 \n         ArrayList<File> files = new ArrayList<File>();\n         for (File directory : dirs) {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/2cdb51bb748250762891554739ca2125c13122c6/activemq-core/src/main/java/org/apache/activemq/kaha/impl/async/ReadOnlyAsyncDataManager.java"
            },
            {
                "additions": 34,
                "sha": "d944a2e0a1280215eda734d118c103f0866d72d7",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2cdb51bb748250762891554739ca2125c13122c6/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java",
                "deletions": 0,
                "filename": "activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java?ref=2cdb51bb748250762891554739ca2125c13122c6",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.ArrayList;\n \n import junit.framework.TestCase;\n \n@@ -26,6 +27,8 @@\n import org.apache.activeio.packet.ByteArrayPacket;\n import org.apache.activeio.packet.Packet;\n import org.apache.activemq.kaha.impl.async.JournalFacade.RecordLocationFacade;\n+import org.apache.activemq.kaha.impl.async.ReadOnlyAsyncDataManager;\n+import org.apache.activemq.util.ByteSequence;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n@@ -126,6 +129,37 @@ public void testAppendAndRead() throws InvalidRecordLocationException, Interrupt\n         log.info(journal);\n     }\n \n+    public void testReadOnlyRead() throws InvalidRecordLocationException, InterruptedException, IOException {\n+    \t\n+    \tPacket data1 = createPacket(\"Hello World 1\");\n+        RecordLocation location1 = journal.write(data1, false);\n+        Packet data2 = createPacket(\"Hello World 2\");\n+        RecordLocation location2 = journal.write(data2, false);\n+        Packet data3 = createPacket(\"Hello World 3\");\n+        RecordLocation location3 = journal.write(data3, false);\n+        \n+        Packet packet;\n+        packet = journal.read(location2);\n+        assertEquals(data2, packet);\n+        packet = journal.read(location1);\n+        assertEquals(data1, packet);\n+        packet = journal.read(location3);\n+        assertEquals(data3, packet);\n+    \t\n+        ArrayList<File> data = new ArrayList<File>();\n+        data.add(logDirectory);\n+        ReadOnlyAsyncDataManager rodm = new ReadOnlyAsyncDataManager(data);\n+        rodm.start();\n+        try {\n+            for (Location curr = rodm.getFirstLocation(); curr != null; curr = rodm.getNextLocation(curr)) {\n+                ByteSequence bs = rodm.read(curr);\n+                assertNotNull(bs);\n+            }\n+        } finally {\n+    \t    rodm.close();\n+        }\n+    }\n+\n     public void testCanReadFromArchivedLogFile() throws InvalidRecordLocationException, InterruptedException, IOException {\n \n         Packet data1 = createPacket(\"Hello World 1\");",
                "changes": 34,
                "blob_url": "https://github.com/apache/activemq/blob/2cdb51bb748250762891554739ca2125c13122c6/activemq-core/src/test/java/org/apache/activemq/kaha/impl/async/JournalImplTest.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for https://issues.apache.org/activemq/browse/AMQ-2292 - ReadOnlyAsyncDataManager NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@785525 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/2cdb51bb748250762891554739ca2125c13122c6"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d62860f98cdafb7032c8f70860654666bb6d31ac",
        "bug_id": "activemq_99",
        "file": [
            {
                "additions": 41,
                "sha": "2f1090574ad96b35c41abdccc6c33f0061fa9a3d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/pom.xml",
                "deletions": 51,
                "filename": "activemq-jaas/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/pom.xml?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -36,84 +36,74 @@\n \n   <build>\n     <plugins>\n-\n       <!-- Configure which tests are included/excuded -->\n       <plugin>\n         <artifactId>maven-surefire-plugin</artifactId>\n         <configuration>\n-          <childDelegation>true</childDelegation>\n-          <forkMode>once</forkMode>\n-          <excludes>\n-            <exclude implementation=\"java.lang.String\">**/LDAPLoginModuleTest.*</exclude>\n-          </excludes>\n-          <includes>\n-            <include implementation=\"java.lang.String\">**/*Test.*</include>\n-          </includes>\n+          <forkMode>pertest</forkMode>\n+          <childDelegation>false</childDelegation>\n+          <useFile>true</useFile>\n+          <argLine>-Xmx512M</argLine>\n+\n+           <systemProperties>\n+            <property>\n+              <name>org.apache.activemq.default.directory.prefix</name>\n+              <value>target/</value>\n+            </property>\n+            <property>\n+              <name>log4j.configuration</name>\n+              <value>file:target/test-classes/log4j.properties</value>\n+            </property>\n+          </systemProperties>\n         </configuration>\n       </plugin>\n-\n     </plugins>\n   </build>\n \n \n   <dependencies>\n     <dependency>\n-      <groupId>commons-logging</groupId>\n-      <artifactId>commons-logging</artifactId>\n-    </dependency>\n+        <groupId>commons-logging</groupId>\n+        <artifactId>commons-logging</artifactId>\n+      </dependency>\n     <dependency>\n-      <groupId>directory</groupId>\n-      <artifactId>apacheds-core</artifactId>\n-      <scope>test</scope>\n+        <groupId>commons-collections</groupId>\n+        <artifactId>commons-collections</artifactId>\n+        <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>directory</groupId>\n-      <artifactId>apacheds-shared</artifactId>\n+      <groupId>org.apache.directory.server</groupId>\n+      <artifactId>apacheds-core-integ</artifactId>\n+      <version>${directory-version}</version>\n       <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>directory-shared</groupId>\n-      <artifactId>apache-ldapber-provider</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>directory-shared</groupId>\n-      <artifactId>ldap-common</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>directory-asn1</groupId>\n-      <artifactId>asn1-codec</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>directory-asn1</groupId>\n-      <artifactId>asn1-der</artifactId>\n-      <scope>test</scope>\n-    </dependency>\n+    </dependency>  \n+\n     <dependency>\n-      <groupId>directory-shared</groupId>\n-      <artifactId>kerberos-common</artifactId>\n+      <groupId>org.apache.directory.server</groupId>\n+      <artifactId>apacheds-server-integ</artifactId>\n+      <version>${directory-version}</version>\n       <scope>test</scope>\n-    </dependency>\n+    </dependency> \n+    \n     <dependency>\n-      <groupId>directory-network</groupId>\n-      <artifactId>mina</artifactId>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>directory-protocols</groupId>\n-      <artifactId>kerberos-protocol</artifactId>\n+      <groupId>org.apache.xbean</groupId>\n+      <artifactId>xbean-spring</artifactId>\n+      <optional>true</optional>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>directory-protocols</groupId>\n-      <artifactId>ldap-protocol</artifactId>\n-      <scope>test</scope>\n+        <groupId>log4j</groupId>\n+        <artifactId>log4j</artifactId>\n     </dependency>\n     <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>nlog4j</artifactId>\n+      <version>${nlog4j-version}</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>",
                "changes": 92,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/pom.xml"
            },
            {
                "additions": 80,
                "sha": "5b895f35e8d8ce692b97b69a6cbe4798ec1bc8f2",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java",
                "deletions": 63,
                "filename": "activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -77,48 +77,35 @@\n     protected DirContext context;\n \n     private Subject subject;\n-    private CallbackHandler handler;\n-    private String initialContextFactory;\n-    private String connectionURL;\n-    private String connectionUsername;\n-    private String connectionPassword;\n-    private String connectionProtocol;\n-    private String authentication;\n-    private String userBase;\n-    private String roleBase;\n-    private String roleName;\n-    private String userRoleName;\n+    private CallbackHandler handler;  \n+    private LDAPLoginProperty [] config;\n     private String username;\n-    private MessageFormat userSearchMatchingFormat;\n-    private MessageFormat roleSearchMatchingFormat;\n-    private boolean userSearchSubtreeBool;\n-    private boolean roleSearchSubtreeBool;\n     private Set<GroupPrincipal> groups = new HashSet<GroupPrincipal>();\n \n     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n         this.subject = subject;\n         this.handler = callbackHandler;\n-        initialContextFactory = (String)options.get(INITIAL_CONTEXT_FACTORY);\n-        connectionURL = (String)options.get(CONNECTION_URL);\n-        connectionUsername = (String)options.get(CONNECTION_USERNAME);\n-        connectionPassword = (String)options.get(CONNECTION_PASSWORD);\n-        connectionProtocol = (String)options.get(CONNECTION_PROTOCOL);\n-        authentication = (String)options.get(AUTHENTICATION);\n-        userBase = (String)options.get(USER_BASE);\n-        String userSearchMatching = (String)options.get(USER_SEARCH_MATCHING);\n-        String userSearchSubtree = (String)options.get(USER_SEARCH_SUBTREE);\n-        roleBase = (String)options.get(ROLE_BASE);\n-        roleName = (String)options.get(ROLE_NAME);\n-        String roleSearchMatching = (String)options.get(ROLE_SEARCH_MATCHING);\n-        String roleSearchSubtree = (String)options.get(ROLE_SEARCH_SUBTREE);\n-        userRoleName = (String)options.get(USER_ROLE_NAME);\n-        userSearchMatchingFormat = new MessageFormat(userSearchMatching);\n-        roleSearchMatchingFormat = new MessageFormat(roleSearchMatching);\n-        userSearchSubtreeBool = Boolean.valueOf(userSearchSubtree).booleanValue();\n-        roleSearchSubtreeBool = Boolean.valueOf(roleSearchSubtree).booleanValue();\n+        \n+        config = new LDAPLoginProperty [] {\n+        \t\tnew LDAPLoginProperty (INITIAL_CONTEXT_FACTORY, (String)options.get(INITIAL_CONTEXT_FACTORY)),\n+        \t\tnew LDAPLoginProperty (CONNECTION_URL, (String)options.get(CONNECTION_URL)),\n+        \t\tnew LDAPLoginProperty (CONNECTION_USERNAME, (String)options.get(CONNECTION_USERNAME)),\n+        \t\tnew LDAPLoginProperty (CONNECTION_PASSWORD, (String)options.get(CONNECTION_PASSWORD)),\n+        \t\tnew LDAPLoginProperty (CONNECTION_PROTOCOL, (String)options.get(CONNECTION_PROTOCOL)),\n+        \t\tnew LDAPLoginProperty (AUTHENTICATION, (String)options.get(AUTHENTICATION)),\n+        \t\tnew LDAPLoginProperty (USER_BASE, (String)options.get(USER_BASE)),\n+        \t\tnew LDAPLoginProperty (USER_SEARCH_MATCHING, (String)options.get(USER_SEARCH_MATCHING)),\n+        \t\tnew LDAPLoginProperty (USER_SEARCH_SUBTREE, (String)options.get(USER_SEARCH_SUBTREE)),\n+        \t\tnew LDAPLoginProperty (ROLE_BASE, (String)options.get(ROLE_BASE)),\n+        \t\tnew LDAPLoginProperty (ROLE_NAME, (String)options.get(ROLE_NAME)),\n+        \t\tnew LDAPLoginProperty (ROLE_SEARCH_MATCHING, (String)options.get(ROLE_SEARCH_MATCHING)),\n+        \t\tnew LDAPLoginProperty (ROLE_SEARCH_SUBTREE, (String)options.get(ROLE_SEARCH_SUBTREE)),\n+        \t\tnew LDAPLoginProperty (USER_ROLE_NAME, (String)options.get(USER_ROLE_NAME)),\n+        \t\t};\n     }\n \n     public boolean login() throws LoginException {\n+\n         Callback[] callbacks = new Callback[2];\n \n         callbacks[0] = new NameCallback(\"User name\");\n@@ -130,12 +117,17 @@ public boolean login() throws LoginException {\n         } catch (UnsupportedCallbackException uce) {\n             throw (LoginException)new LoginException().initCause(uce);\n         }\n+        \n+        String password;\n+        \n         username = ((NameCallback)callbacks[0]).getName();\n-        String password = new String(((PasswordCallback)callbacks[1]).getPassword());\n-\n-        if (username == null || \"\".equals(username) || password == null || \"\".equals(password)) {\n-            return false;\n-        }\n+        if (username == null)\n+        \treturn false;\n+        \t\n+        if (((PasswordCallback)callbacks[1]).getPassword() != null)\n+        \tpassword = new String(((PasswordCallback)callbacks[1]).getPassword());\n+        else\n+        \tpassword=\"\";\n \n         try {\n             boolean result = authenticate(username, password);\n@@ -179,8 +171,17 @@ protected void close(DirContext context) {\n \n     protected boolean authenticate(String username, String password) throws Exception {\n \n+        MessageFormat userSearchMatchingFormat;\n+        boolean userSearchSubtreeBool;\n+        \n         DirContext context = null;\n         context = open();\n+        \n+        if (!isLoginPropertySet(USER_SEARCH_MATCHING))\n+        \treturn false;\n+\n+        userSearchMatchingFormat = new MessageFormat(getLDAPPropertyValue(USER_SEARCH_MATCHING));\n+        userSearchSubtreeBool = Boolean.valueOf(getLDAPPropertyValue(USER_SEARCH_SUBTREE)).booleanValue();\n \n         try {\n \n@@ -196,14 +197,14 @@ protected boolean authenticate(String username, String password) throws Exceptio\n \n             // setup attributes\n             ArrayList<String> list = new ArrayList<String>();\n-            if (userRoleName != null) {\n-                list.add(userRoleName);\n+            if (isLoginPropertySet(USER_ROLE_NAME)) {\n+                list.add(getLDAPPropertyValue(USER_ROLE_NAME));\n             }\n             String[] attribs = new String[list.size()];\n             list.toArray(attribs);\n             constraints.setReturningAttributes(attribs);\n \n-            NamingEnumeration results = context.search(userBase, filter, constraints);\n+            NamingEnumeration results = context.search(getLDAPPropertyValue(USER_BASE), filter, constraints);\n \n             if (results == null || !results.hasMore()) {\n                 return false;\n@@ -216,7 +217,7 @@ protected boolean authenticate(String username, String password) throws Exceptio\n             }\n             NameParser parser = context.getNameParser(\"\");\n             Name contextName = parser.parse(context.getNameInNamespace());\n-            Name baseName = parser.parse(userBase);\n+            Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));\n             Name entryName = parser.parse(result.getName());\n             Name name = contextName.addAll(baseName);\n             name = name.addAll(entryName);\n@@ -227,8 +228,8 @@ protected boolean authenticate(String username, String password) throws Exceptio\n                 return false;\n             }\n             ArrayList<String> roles = null;\n-            if (userRoleName != null) {\n-                roles = addAttributeValues(userRoleName, attrs, roles);\n+            if (isLoginPropertySet(USER_ROLE_NAME)) {\n+                roles = addAttributeValues(getLDAPPropertyValue(USER_ROLE_NAME), attrs, roles);\n             }\n \n             // check the credentials by binding to server\n@@ -255,10 +256,15 @@ protected boolean authenticate(String username, String password) throws Exceptio\n \n     protected ArrayList<String> getRoles(DirContext context, String dn, String username, ArrayList<String> currentRoles) throws NamingException {\n         ArrayList<String> list = currentRoles;\n+        MessageFormat roleSearchMatchingFormat;\n+        boolean roleSearchSubtreeBool;\n+        roleSearchMatchingFormat = new MessageFormat(getLDAPPropertyValue(ROLE_SEARCH_MATCHING));\n+        roleSearchSubtreeBool = Boolean.valueOf(getLDAPPropertyValue(ROLE_SEARCH_SUBTREE)).booleanValue();\n+        \n         if (list == null) {\n             list = new ArrayList<String>();\n         }\n-        if (roleName == null || \"\".equals(roleName)) {\n+        if (!isLoginPropertySet(ROLE_NAME)) {\n             return list;\n         }\n         String filter = roleSearchMatchingFormat.format(new String[] {\n@@ -271,14 +277,14 @@ protected boolean authenticate(String username, String password) throws Exceptio\n         } else {\n             constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);\n         }\n-        NamingEnumeration results = context.search(roleBase, filter, constraints);\n+        NamingEnumeration results = context.search(getLDAPPropertyValue(ROLE_BASE), filter, constraints);\n         while (results.hasMore()) {\n             SearchResult result = (SearchResult)results.next();\n             Attributes attrs = result.getAttributes();\n             if (attrs == null) {\n                 continue;\n             }\n-            list = addAttributeValues(roleName, attrs, list);\n+            list = addAttributeValues(getLDAPPropertyValue(ROLE_NAME), attrs, list);\n         }\n         return list;\n \n@@ -325,14 +331,14 @@ protected boolean bindUser(DirContext context, String dn, String password) throw\n             log.debug(\"Authentication failed for dn=\" + dn);\n         }\n \n-        if (connectionUsername != null) {\n-            context.addToEnvironment(Context.SECURITY_PRINCIPAL, connectionUsername);\n+        if (isLoginPropertySet(CONNECTION_USERNAME)) {\n+            context.addToEnvironment(Context.SECURITY_PRINCIPAL, getLDAPPropertyValue(CONNECTION_USERNAME));\n         } else {\n             context.removeFromEnvironment(Context.SECURITY_PRINCIPAL);\n         }\n \n-        if (connectionPassword != null) {\n-            context.addToEnvironment(Context.SECURITY_CREDENTIALS, connectionPassword);\n+        if (isLoginPropertySet(CONNECTION_PASSWORD)) {\n+            context.addToEnvironment(Context.SECURITY_CREDENTIALS, getLDAPPropertyValue(CONNECTION_PASSWORD));\n         } else {\n             context.removeFromEnvironment(Context.SECURITY_CREDENTIALS);\n         }\n@@ -361,22 +367,18 @@ protected boolean bindUser(DirContext context, String dn, String password) throw\n     }\n \n     protected DirContext open() throws NamingException {\n-        if (context != null) {\n-            return context;\n-        }\n-\n         try {\n             Hashtable<String, String> env = new Hashtable<String, String>();\n-            env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);\n-            if (connectionUsername != null || !\"\".equals(connectionUsername)) {\n-                env.put(Context.SECURITY_PRINCIPAL, connectionUsername);\n+            env.put(Context.INITIAL_CONTEXT_FACTORY, getLDAPPropertyValue(INITIAL_CONTEXT_FACTORY));\n+            if (isLoginPropertySet(CONNECTION_USERNAME)) {\n+                env.put(Context.SECURITY_PRINCIPAL, getLDAPPropertyValue(CONNECTION_USERNAME));\n             }\n-            if (connectionPassword != null || !\"\".equals(connectionPassword)) {\n-                env.put(Context.SECURITY_CREDENTIALS, connectionPassword);\n+            if (isLoginPropertySet(CONNECTION_PASSWORD)) {\n+                env.put(Context.SECURITY_CREDENTIALS, getLDAPPropertyValue(CONNECTION_PASSWORD));\n             }\n-            env.put(Context.SECURITY_PROTOCOL, connectionProtocol);\n-            env.put(Context.PROVIDER_URL, connectionURL);\n-            env.put(Context.SECURITY_AUTHENTICATION, authentication);\n+            env.put(Context.SECURITY_PROTOCOL, getLDAPPropertyValue(CONNECTION_PROTOCOL));\n+            env.put(Context.PROVIDER_URL, getLDAPPropertyValue(CONNECTION_URL));\n+            env.put(Context.SECURITY_AUTHENTICATION, getLDAPPropertyValue(AUTHENTICATION));\n             context = new InitialDirContext(env);\n \n         } catch (NamingException e) {\n@@ -385,5 +387,20 @@ protected DirContext open() throws NamingException {\n         }\n         return context;\n     }\n+    \n+    private String getLDAPPropertyValue (String propertyName){\n+    \tfor (int i=0; i < config.length; i++ )\n+    \t\tif (config[i].getPropertyName() == propertyName)\n+    \t\t\treturn config[i].getPropertyValue();\n+    \treturn null;\n+    }\n+    \n+    private boolean isLoginPropertySet(String propertyName) {\n+    \tfor (int i=0; i < config.length; i++ ) {\n+    \t\tif (config[i].getPropertyName() == propertyName && config[i].getPropertyValue() != null)\n+    \t\t\t\treturn true;\n+    \t}\n+    \treturn false;\n+    }\n \n }",
                "changes": 143,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java"
            },
            {
                "additions": 40,
                "sha": "39c7397bf04f426799be0d3f6cefff5834bfebb1",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginProperty.java",
                "deletions": 0,
                "filename": "activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginProperty.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginProperty.java?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.jaas;\n+\n+public class LDAPLoginProperty {\n+\tprivate String name;\n+\tprivate String value;\n+\n+\tpublic LDAPLoginProperty(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic LDAPLoginProperty(String name, String value) {\n+\t\tthis.name = name;\n+\t\tthis.value = value;\n+\t}\n+\t\n+\tpublic String getPropertyName() {\n+\t\treturn this.name;\n+\t}\n+\tpublic String getPropertyValue() {\n+\t\treturn this.value;\n+\t}\n+\n+}",
                "changes": 40,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginProperty.java"
            },
            {
                "additions": 45,
                "sha": "f7ce78ed9ad81c474d60b5aeb4decdb6c99b3d5a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java",
                "deletions": 58,
                "filename": "activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -16,12 +16,13 @@\n  */\n package org.apache.activemq.jaas;\n \n-import java.io.File;\n+import static org.junit.Assert.assertTrue;\n+\n import java.io.IOException;\n-import java.net.InetAddress;\n+import java.net.URL;\n import java.util.HashSet;\n import java.util.Hashtable;\n-import java.util.Properties;\n+\n import javax.naming.Context;\n import javax.naming.NameClassPair;\n import javax.naming.NamingEnumeration;\n@@ -35,40 +36,60 @@\n import javax.security.auth.login.LoginContext;\n import javax.security.auth.login.LoginException;\n \n-import junit.framework.TestCase;\n+import org.apache.directory.server.core.integ.Level;\n+import org.apache.directory.server.core.integ.annotations.ApplyLdifs;\n+import org.apache.directory.server.core.integ.annotations.CleanupLevel;\n+import org.apache.directory.server.integ.SiRunner;\n+import org.apache.directory.server.ldap.LdapService;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n-import org.apache.activemq.jaas.ldap.MutableServerStartupConfiguration;\n-import org.apache.activemq.jaas.ldap.ServerContextFactory;\n-import org.apache.ldap.server.configuration.ShutdownConfiguration;\n-import org.apache.ldap.server.jndi.CoreContextFactory;\n \n \n \n-/**\n- * @version $Rev: $ $Date: $\n- */\n-public class LDAPLoginModuleTest extends TestCase {\n-\n+@RunWith ( SiRunner.class ) \n+@CleanupLevel ( Level.CLASS )\n+@ApplyLdifs( {\n+\t\"dn: uid=first,ou=system\\n\" +\n+\t\"uid: first\\n\" +\n+\t\"userPassword: secret\\n\" +\n+\t\"objectClass: account\\n\" +\n+\t\"objectClass: simpleSecurityObject\\n\" +\n+\t\"objectClass: top\\n\" \n+}\n+)\n+public class LDAPLoginModuleTest {\n+\t\n+    static {\n+        String path = System.getProperty(\"java.security.auth.login.config\");\n+        if (path == null) {\n+            URL resource = PropertiesLoginModuleTest.class.getClassLoader().getResource(\"login.config\");\n+            if (resource != null) {\n+                path = resource.getFile();\n+                System.setProperty(\"java.security.auth.login.config\", path);\n+            }\n+        }\n+    }\n+    \n+    private static final String BASE = \"ou=system\";\n+    public static LdapService ldapService;\n+    private static final String FILTER = \"(objectclass=*)\";\n+    \n     private static final String PRINCIPAL = \"uid=admin,ou=system\";\n     private static final String CREDENTIALS = \"secret\";\n-\n-    public void testNothing() {\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n+    @Test\n     public void testRunning() throws Exception {\n \n         Hashtable env = new Hashtable();\n-        env.put(Context.PROVIDER_URL, \"ldap://localhost:9389\");\n+        env.put(Context.PROVIDER_URL, \"ldap://localhost:1024\");\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n         env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n         env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);\n         env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);\n         DirContext ctx = new InitialDirContext(env);\n \n-        // Perform search using URL\n-        // NamingEnumeration answer = ctx.search(\n-        // \"ldap://localhost:389/ou=system\", \"(uid=admin)\", null);\n         HashSet set = new HashSet();\n \n         NamingEnumeration list = ctx.list(\"ou=system\");\n@@ -85,8 +106,9 @@ public void testRunning() throws Exception {\n         assertTrue(set.contains(\"prefNodeName=sysPrefRoot\"));\n \n     }\n-\n-    public void xtestLogin() throws LoginException {\n+    \n+    @Test\n+    public void testLogin() throws LoginException {\n         LoginContext context = new LoginContext(\"LDAPLogin\", new CallbackHandler() {\n             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n                 for (int i = 0; i < callbacks.length; i++) {\n@@ -104,39 +126,4 @@ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallback\n         context.logout();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public void setUp() throws Exception {\n-        MutableServerStartupConfiguration startup = new MutableServerStartupConfiguration();\n-        // put some mandatory JNDI properties here\n-        startup.setWorkingDirectory(new File(\"target/ldap\"));\n-        startup.setAllowAnonymousAccess(true);\n-        startup.setLdapPort(9389);\n-        startup.setEnableNetworking(true);\n-        startup.setHost(InetAddress.getByName(\"localhost\"));\n-\n-        Properties env = new Properties();\n-        env.putAll(startup.toJndiEnvironment());\n-        env.put(Context.INITIAL_CONTEXT_FACTORY, ServerContextFactory.class.getName());\n-        env.put(Context.PROVIDER_URL, \"ou=system\");\n-        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n-        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);\n-        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);\n-\n-        //Fire it up\n-        new InitialDirContext(env);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public void tearDown() throws Exception {\n-        Properties env = new Properties();\n-        env.putAll(new ShutdownConfiguration().toJndiEnvironment());\n-        env.put(Context.INITIAL_CONTEXT_FACTORY, CoreContextFactory.class.getName());\n-        env.put(Context.PROVIDER_URL, \"ou=system\");\n-        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n-        env.put(Context.SECURITY_PRINCIPAL, PRINCIPAL);\n-        env.put(Context.SECURITY_CREDENTIALS, CREDENTIALS);\n-\n-        //Shut it down\n-        new InitialDirContext(env);\n-    }\n }",
                "changes": 103,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/java/org/apache/activemq/jaas/LDAPLoginModuleTest.java"
            },
            {
                "additions": 0,
                "sha": "82aef75835944e8587b5878f1e557ba03d013db0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/java/org/apache/activemq/jaas/PropertiesLoginModuleTest.java",
                "deletions": 1,
                "filename": "activemq-jaas/src/test/java/org/apache/activemq/jaas/PropertiesLoginModuleTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/java/org/apache/activemq/jaas/PropertiesLoginModuleTest.java?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -46,7 +46,6 @@\n                 System.setProperty(\"java.security.auth.login.config\", path);\n             }\n         }\n-        System.out.println(\"Path to login config: \" + path);\n     }\n \n     public void testLogin() throws LoginException {",
                "changes": 1,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/java/org/apache/activemq/jaas/PropertiesLoginModuleTest.java"
            },
            {
                "additions": 0,
                "sha": "3f1587d55fb882db6a375c33a9223225c589a9df",
                "status": "removed",
                "raw_url": "https://github.com/apache/activemq/raw/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/MutableServerStartupConfiguration.java",
                "deletions": 85,
                "filename": "activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/MutableServerStartupConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/MutableServerStartupConfiguration.java?ref=d62860f98cdafb7032c8f70860654666bb6d31ac",
                "patch": "@@ -1,85 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.jaas.ldap;\n-\n-import java.io.File;\n-import java.net.InetAddress;\n-import java.util.List;\n-import java.util.Set;\n-\n-import org.apache.mina.registry.ServiceRegistry;\n-\n-/**\n- * A mutable version of {@link ServerStartupConfiguration}.\n- * \n- * @version $Rev: 233391 $ $Date: 2005-08-18 16:38:47 -0600 (Thu, 18 Aug 2005) $\n- */\n-public class MutableServerStartupConfiguration extends ServerStartupConfiguration {\n-    private static final long serialVersionUID = 515104910980600099L;\n-\n-    public MutableServerStartupConfiguration() {\n-        super();\n-    }\n-\n-    public void setAllowAnonymousAccess(boolean arg0) {\n-        super.setAllowAnonymousAccess(arg0);\n-    }\n-\n-    public void setAuthenticatorConfigurations(Set arg0) {\n-        super.setAuthenticatorConfigurations(arg0);\n-    }\n-\n-    public void setBootstrapSchemas(Set arg0) {\n-        super.setBootstrapSchemas(arg0);\n-    }\n-\n-    public void setContextPartitionConfigurations(Set arg0) {\n-        super.setContextPartitionConfigurations(arg0);\n-    }\n-\n-    public void setInterceptorConfigurations(List arg0) {\n-        super.setInterceptorConfigurations(arg0);\n-    }\n-\n-    public void setTestEntries(List arg0) {\n-        super.setTestEntries(arg0);\n-    }\n-\n-    public void setWorkingDirectory(File arg0) {\n-        super.setWorkingDirectory(arg0);\n-    }\n-\n-    public void setEnableKerberos(boolean enableKerberos) {\n-        super.setEnableKerberos(enableKerberos);\n-    }\n-\n-    public void setHost(InetAddress host) {\n-        super.setHost(host);\n-    }\n-\n-    public void setLdapPort(int ldapPort) {\n-        super.setLdapPort(ldapPort);\n-    }\n-\n-    public void setLdapsPort(int ldapsPort) {\n-        super.setLdapsPort(ldapsPort);\n-    }\n-\n-    public void setMinaServiceRegistry(ServiceRegistry minaServiceRegistry) {\n-        super.setMinaServiceRegistry(minaServiceRegistry);\n-    }\n-}",
                "changes": 85,
                "blob_url": "https://github.com/apache/activemq/blob/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/MutableServerStartupConfiguration.java"
            },
            {
                "additions": 0,
                "sha": "4b88d67326e8d2ce8d2fadcf9babce9f1423c88f",
                "status": "removed",
                "raw_url": "https://github.com/apache/activemq/raw/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerContextFactory.java",
                "deletions": 199,
                "filename": "activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerContextFactory.java?ref=d62860f98cdafb7032c8f70860654666bb6d31ac",
                "patch": "@@ -1,199 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.jaas.ldap;\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.util.Hashtable;\n-import java.util.Iterator;\n-import java.util.Properties;\n-import javax.naming.Context;\n-import javax.naming.NamingException;\n-import javax.naming.directory.DirContext;\n-import javax.naming.ldap.Control;\n-import javax.naming.ldap.InitialLdapContext;\n-import javax.naming.ldap.LdapContext;\n-\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.apache.kerberos.protocol.KerberosProtocolProvider;\n-import org.apache.kerberos.sam.SamSubsystem;\n-import org.apache.kerberos.service.KdcConfiguration;\n-import org.apache.kerberos.store.JndiPrincipalStoreImpl;\n-import org.apache.kerberos.store.PrincipalStore;\n-import org.apache.ldap.common.exception.LdapConfigurationException;\n-import org.apache.ldap.common.name.LdapName;\n-import org.apache.ldap.common.util.NamespaceTools;\n-import org.apache.ldap.common.util.PropertiesUtils;\n-import org.apache.ldap.server.jndi.ContextFactoryService;\n-import org.apache.ldap.server.jndi.CoreContextFactory;\n-import org.apache.ldap.server.protocol.LdapProtocolProvider;\n-import org.apache.mina.common.TransportType;\n-import org.apache.mina.registry.Service;\n-import org.apache.mina.registry.ServiceRegistry;\n-\n-/**\n- * Adds additional bootstrapping for server socket listeners when firing up the\n- * server.\n- * \n- * @version $Rev: 233391 $ $Date: 2005-08-18 16:38:47 -0600 (Thu, 18 Aug 2005) $\n- * @see javax.naming.spi.InitialContextFactory\n- */\n-public class ServerContextFactory extends CoreContextFactory {\n-    \n-    private static final Log LOG = LogFactory.getLog(ServerContextFactory.class);\n-    \n-    private static Service ldapService;\n-    private static Service kerberosService;\n-    private static ServiceRegistry minaRegistry;\n-\n-    protected ServiceRegistry getMinaRegistry() {\n-        return minaRegistry;\n-    }\n-\n-    public void afterShutdown(ContextFactoryService service) {\n-        if (minaRegistry != null) {\n-            if (ldapService != null) {\n-                minaRegistry.unbind(ldapService);\n-                if (LOG.isInfoEnabled()) {\n-                    LOG.info(\"Unbind of LDAP Service complete: \" + ldapService);\n-                }\n-                ldapService = null;\n-            }\n-\n-            if (kerberosService != null) {\n-                minaRegistry.unbind(kerberosService);\n-                if (LOG.isInfoEnabled()) {\n-                    LOG.info(\"Unbind of KRB5 Service complete: \" + kerberosService);\n-                }\n-                kerberosService = null;\n-            }\n-        }\n-    }\n-\n-    public void afterStartup(ContextFactoryService service) throws NamingException {\n-        ServerStartupConfiguration cfg = (ServerStartupConfiguration)service.getConfiguration().getStartupConfiguration();\n-        Hashtable env = service.getConfiguration().getEnvironment();\n-\n-        if (cfg.isEnableNetworking()) {\n-            setupRegistry(cfg);\n-            startLdapProtocol(cfg, env);\n-\n-            if (cfg.isEnableKerberos()) {\n-                startKerberosProtocol(env);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Starts up the MINA registry so various protocol providers can be started.\n-     */\n-    private void setupRegistry(ServerStartupConfiguration cfg) {\n-        minaRegistry = cfg.getMinaServiceRegistry();\n-    }\n-\n-    /**\n-     * Starts the Kerberos protocol provider which is backed by the LDAP store.\n-     * \n-     * @throws NamingException if there are problems starting up the Kerberos\n-     *                 provider\n-     */\n-    private void startKerberosProtocol(Hashtable env) throws NamingException {\n-        /*\n-         * Looks like KdcConfiguration takes properties and we use Hashtable for\n-         * JNDI so I'm copying over the String based properties into a new\n-         * Properties obj.\n-         */\n-        Properties props = new Properties();\n-        Iterator list = env.keySet().iterator();\n-        while (list.hasNext()) {\n-            String key = (String)list.next();\n-\n-            if (env.get(key) instanceof String) {\n-                props.setProperty(key, (String)env.get(key));\n-            }\n-        }\n-\n-        // construct the configuration, get the port, create the service, and\n-        // prepare kdc objects\n-        KdcConfiguration config = new KdcConfiguration(props);\n-        int port = PropertiesUtils.get(env, KdcConfiguration.KERBEROS_PORT_KEY, KdcConfiguration.DEFAULT_KERBEROS_PORT);\n-        Service service = new Service(\"kerberos\", TransportType.DATAGRAM, new InetSocketAddress(port));\n-        LdapContext ctx = getBaseRealmContext(config, env);\n-        PrincipalStore store = new JndiPrincipalStoreImpl(ctx, new LdapName(\"ou=Users\"));\n-        SamSubsystem.getInstance().setUserContext((DirContext)ctx, \"ou=Users\");\n-\n-        try {\n-            minaRegistry.bind(service, new KerberosProtocolProvider(config, store));\n-            kerberosService = service;\n-            if (LOG.isInfoEnabled()) {\n-                LOG.info(\"Successful bind of KRB5 Service completed: \" + kerberosService);\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"Could not start the kerberos service on port \" + KdcConfiguration.DEFAULT_KERBEROS_PORT, e);\n-        }\n-    }\n-\n-    /**\n-     * Maps a Kerberos Realm name to a position within the DIT. The primary\n-     * realm of the KDC will use this area for configuration and for storing\n-     * user entries.\n-     * \n-     * @param config the KDC's configuration\n-     * @param env the JNDI environment properties\n-     * @return the base context for the primary realm of the KDC\n-     * @throws NamingException\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    private LdapContext getBaseRealmContext(KdcConfiguration config, Hashtable env) throws NamingException {\n-        Hashtable cloned = (Hashtable)env.clone();\n-        String dn = NamespaceTools.inferLdapName(config.getPrimaryRealm());\n-        cloned.put(Context.PROVIDER_URL, dn);\n-\n-        if (LOG.isInfoEnabled()) {\n-            LOG.info(\"Getting initial context for realm base at \" + dn + \" for \" + config.getPrimaryRealm());\n-        }\n-\n-        return new InitialLdapContext(cloned, new Control[] {});\n-    }\n-\n-    /**\n-     * Starts up the LDAP protocol provider to service LDAP requests\n-     * \n-     * @throws NamingException if there are problems starting the LDAP provider\n-     */\n-    private void startLdapProtocol(ServerStartupConfiguration cfg, Hashtable env) throws NamingException {\n-        int port = cfg.getLdapPort();\n-        InetAddress host = cfg.getHost();\n-        Service service = new Service(\"ldap\", TransportType.SOCKET, new InetSocketAddress(host, port));\n-\n-        try {\n-            minaRegistry.bind(service, new LdapProtocolProvider((Hashtable)env.clone()));\n-            ldapService = service;\n-            if (LOG.isInfoEnabled()) {\n-                LOG.info(\"Successful bind of LDAP Service completed: \" + ldapService);\n-            }\n-        } catch (IOException e) {\n-            String msg = \"Failed to bind the LDAP protocol service to the service registry: \" + service;\n-            LdapConfigurationException lce = new LdapConfigurationException(msg);\n-            lce.setRootCause(e);\n-            LOG.error(msg, e);\n-            throw lce;\n-        }\n-    }\n-}",
                "changes": 199,
                "blob_url": "https://github.com/apache/activemq/blob/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerContextFactory.java"
            },
            {
                "additions": 0,
                "sha": "c4dfa0b098e6bb690f6036af65cf23dbc27ffdbe",
                "status": "removed",
                "raw_url": "https://github.com/apache/activemq/raw/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerStartupConfiguration.java",
                "deletions": 126,
                "filename": "activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerStartupConfiguration.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerStartupConfiguration.java?ref=d62860f98cdafb7032c8f70860654666bb6d31ac",
                "patch": "@@ -1,126 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.activemq.jaas.ldap;\n-\n-import java.net.InetAddress;\n-\n-import org.apache.ldap.server.configuration.ConfigurationException;\n-import org.apache.ldap.server.configuration.StartupConfiguration;\n-import org.apache.mina.registry.ServiceRegistry;\n-import org.apache.mina.registry.SimpleServiceRegistry;\n-\n-/**\n- * A {@link StartupConfiguration} that starts up ApacheDS with network layer support.\n- *\n- * @version $Rev: 233391 $ $Date: 2005-08-18 16:38:47 -0600 (Thu, 18 Aug 2005) $\n- */\n-public class ServerStartupConfiguration extends StartupConfiguration {\n-    private static final long serialVersionUID = -7138616822614155454L;\n-\n-    private boolean enableNetworking = true;\n-    private ServiceRegistry minaServiceRegistry = new SimpleServiceRegistry();\n-    private int ldapPort = 389;\n-    private int ldapsPort = 636;\n-    private InetAddress host;\n-    private boolean enableKerberos;\n-\n-    protected ServerStartupConfiguration() {\n-    }\n-\n-    protected InetAddress getHost() {\n-        return host;\n-    }\n-\n-    protected void setHost(InetAddress host) {\n-        this.host = host;\n-    }\n-\n-    /**\n-     * Returns <tt>true</tt> if networking (LDAP, LDAPS, and Kerberos) is enabled.\n-     */\n-    public boolean isEnableNetworking() {\n-        return enableNetworking;\n-    }\n-\n-    /**\n-     * Sets whether to enable networking (LDAP, LDAPS, and Kerberos) or not.\n-     */\n-    public void setEnableNetworking(boolean enableNetworking) {\n-        this.enableNetworking = enableNetworking;\n-    }\n-\n-    /**\n-     * Returns <tt>true</tt> if Kerberos support is enabled.\n-     */\n-    public boolean isEnableKerberos() {\n-        return enableKerberos;\n-    }\n-\n-    /**\n-     * Sets whether to enable Kerberos support or not.\n-     */\n-    protected void setEnableKerberos(boolean enableKerberos) {\n-        this.enableKerberos = enableKerberos;\n-    }\n-\n-    /**\n-     * Returns LDAP TCP/IP port number to listen to.\n-     */\n-    public int getLdapPort() {\n-        return ldapPort;\n-    }\n-\n-    /**\n-     * Sets LDAP TCP/IP port number to listen to.\n-     */\n-    protected void setLdapPort(int ldapPort) {\n-        this.ldapPort = ldapPort;\n-    }\n-\n-    /**\n-     * Returns LDAPS TCP/IP port number to listen to.\n-     */\n-    public int getLdapsPort() {\n-        return ldapsPort;\n-    }\n-\n-    /**\n-     * Sets LDAPS TCP/IP port number to listen to.\n-     */\n-    protected void setLdapsPort(int ldapsPort) {\n-        this.ldapsPort = ldapsPort;\n-    }\n-\n-    /**\n-     * Returns <a href=\"http://directory.apache.org/subprojects/network/\">MINA</a>\n-     * {@link ServiceRegistry} that will be used by ApacheDS.\n-     */\n-    public ServiceRegistry getMinaServiceRegistry() {\n-        return minaServiceRegistry;\n-    }\n-\n-    /**\n-     * Sets <a href=\"http://directory.apache.org/subprojects/network/\">MINA</a>\n-     * {@link ServiceRegistry} that will be used by ApacheDS.\n-     */\n-    protected void setMinaServiceRegistry(ServiceRegistry minaServiceRegistry) {\n-        if (minaServiceRegistry == null) {\n-            throw new ConfigurationException(\"MinaServiceRegistry cannot be null\");\n-        }\n-        this.minaServiceRegistry = minaServiceRegistry;\n-    }\n-}",
                "changes": 126,
                "blob_url": "https://github.com/apache/activemq/blob/d62860f98cdafb7032c8f70860654666bb6d31ac/activemq-jaas/src/test/java/org/apache/activemq/jaas/ldap/ServerStartupConfiguration.java"
            },
            {
                "additions": 35,
                "sha": "18cee24281ea56764da83166fff146990801f605",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/resources/log4j.properties",
                "deletions": 0,
                "filename": "activemq-jaas/src/test/resources/log4j.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/resources/log4j.properties?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -0,0 +1,35 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+## \n+## http://www.apache.org/licenses/LICENSE-2.0\n+## \n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+#\n+# The logging properties used during tests..\n+#\n+log4j.rootLogger=INFO, out, stdout\n+\n+log4j.logger.org.apache.activemq=INFO\n+\n+# CONSOLE appender not used by default\n+log4j.appender.stdout=org.apache.log4j.ConsoleAppender\n+log4j.appender.stdout.layout=org.apache.log4j.PatternLayout\n+log4j.appender.stdout.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+\n+# File appender\n+log4j.appender.out=org.apache.log4j.FileAppender\n+log4j.appender.out.layout=org.apache.log4j.PatternLayout\n+log4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+log4j.appender.out.file=target/activemq-test.log\n+log4j.appender.out.append=true",
                "changes": 35,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/resources/log4j.properties"
            },
            {
                "additions": 9,
                "sha": "2843ba2a745ac6dae8cb6d13870af244c806736a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/resources/login.config",
                "deletions": 2,
                "filename": "activemq-jaas/src/test/resources/login.config",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/src/test/resources/login.config?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -12,7 +12,7 @@\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * limitations under the License.         \n  */\n PropertiesLogin {\n     org.apache.activemq.jaas.PropertiesLoginModule required\n@@ -25,11 +25,18 @@ LDAPLogin {\n     org.apache.activemq.jaas.LDAPLoginModule required\n         debug=true\n         initialContextFactory=com.sun.jndi.ldap.LdapCtxFactory\n-        connectionURL=\"ldap://localhost:9389\"\n+        connectionURL=\"ldap://localhost:1024\"\n         connectionUsername=\"uid=admin,ou=system\"\n         connectionPassword=secret\n         connectionProtocol=s\n         authentication=simple\n+        userBase=\"ou=system\"\n+        userSearchMatching=\"(uid={0})\"\n+        userSearchSubtree=false\n+        roleBase=\"ou=system\"\n+        roleName=dummyRoleName\n+        roleSearchMatching=\"(uid={1})\"\n+        roleSearchSubtree=false\n         ;\n };\n ",
                "changes": 11,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/activemq-jaas/src/test/resources/login.config"
            },
            {
                "additions": 5,
                "sha": "a87d4fd3fe2c419e34fca4abbbd3fac80546f5f0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/pom.xml",
                "deletions": 68,
                "filename": "pom.xml",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/pom.xml?ref=6999a02d703e67b4a462573ac5c76b2f5e1e80fd",
                "patch": "@@ -45,7 +45,7 @@\n     <camel-version>2.0-SNAPSHOT</camel-version>\n     <cglib-version>2.0</cglib-version>\n     <commons-beanutils-version>1.6.1</commons-beanutils-version>\n-    <commons-collections-version>3.1</commons-collections-version>\n+    <commons-collections-version>3.2.1</commons-collections-version>\n     <openjpa-version>1.2.0</openjpa-version>\n     <commons-dbcp-version>1.2.2</commons-dbcp-version>\n     <commons-httpclient-version>2.0.1</commons-httpclient-version>\n@@ -55,18 +55,19 @@\n     <directory-asn1-version>0.3.2</directory-asn1-version>\n     <directory-kerboros-version>0.5</directory-kerboros-version>\n     <directory-mina-version>0.7.3</directory-mina-version>\n-    <directory-version>0.9.2</directory-version>\n+    <directory-version>1.5.4</directory-version>\n     <geronimo-version>1.0</geronimo-version>\n     <howl-version>0.1.8</howl-version>\n     <hsqldb-version>1.7.2.2</hsqldb-version>\n     <jdom-version>1.0</jdom-version>\n     <jetty-version>6.1.9</jetty-version>\n     <jmock-version>1.0.1</jmock-version>\n-    <junit-version>3.8.1</junit-version>\n+    <junit-version>4.4</junit-version>\n     <jxta-version>2.0</jxta-version>\n     <log4j-version>1.2.14</log4j-version>\n+    <nlog4j-version>1.2.25</nlog4j-version>\n     <org-apache-derby-version>10.1.3.1</org-apache-derby-version>\n-    <org-apache-maven-surefire-plugin-version>2.2</org-apache-maven-surefire-plugin-version>\n+    <org-apache-maven-surefire-plugin-version>2.3</org-apache-maven-surefire-plugin-version>\n     <p2psockets-version>1.1.2</p2psockets-version>\n     <regexp-version>1.3</regexp-version>\n     <rome-version>0.8</rome-version>\n@@ -853,70 +854,6 @@\n         <version>${jdom-version}</version>\n       </dependency>\n \n-      <!-- ACTIVEMQ-JAAS Dependencies -->\n-      <dependency>\n-        <groupId>directory</groupId>\n-        <artifactId>apacheds-core</artifactId>\n-        <version>${directory-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory</groupId>\n-        <artifactId>apacheds-shared</artifactId>\n-        <version>${directory-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-shared</groupId>\n-        <artifactId>apache-ldapber-provider</artifactId>\n-        <version>${directory-version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>commons-test</groupId>\n-            <artifactId>commons-test</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-shared</groupId>\n-        <artifactId>ldap-common</artifactId>\n-        <version>${directory-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-asn1</groupId>\n-        <artifactId>asn1-codec</artifactId>\n-        <version>${directory-asn1-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-asn1</groupId>\n-        <artifactId>asn1-der</artifactId>\n-        <version>${directory-asn1-version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>commons-test</groupId>\n-            <artifactId>commons-test</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-shared</groupId>\n-        <artifactId>kerberos-common</artifactId>\n-        <version>${directory-kerboros-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-network</groupId>\n-        <artifactId>mina</artifactId>\n-        <version>${directory-mina-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-protocols</groupId>\n-        <artifactId>kerberos-protocol</artifactId>\n-        <version>${directory-kerboros-version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>directory-protocols</groupId>\n-        <artifactId>ldap-protocol</artifactId>\n-        <version>${directory-version}</version>\n-      </dependency>\n-\n       <dependency>\n         <groupId>p2psockets</groupId>\n         <artifactId>p2psockets-core</artifactId>",
                "changes": 73,
                "blob_url": "https://github.com/apache/activemq/blob/6999a02d703e67b4a462573ac5c76b2f5e1e80fd/pom.xml"
            }
        ],
        "repo": "activemq",
        "message": "fix for https://issues.apache.org/activemq/browse/AMQ-1781 - ldap login module npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@769838 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/6999a02d703e67b4a462573ac5c76b2f5e1e80fd"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/30fe17834cdb3ae578738208e1927bc78ac30e9b",
        "bug_id": "activemq_100",
        "file": [
            {
                "additions": 1,
                "sha": "90f95995004851fcf3c6a98a53376e3fcd4ad0c9",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/9a491bbc7667a70a7d75364fcd854b96b6a27352/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java?ref=9a491bbc7667a70a7d75364fcd854b96b6a27352",
                "patch": "@@ -77,6 +77,7 @@\n     public HashIndex(File directory, String name, IndexManager indexManager) throws IOException {\n         this.directory = directory;\n         this.name = name;\n+        this.indexManager = indexManager;\n         openIndexFile();\n         pageCache = new LRUCache<Long, HashPage>(pageCacheSize, pageCacheSize, 0.75f, true);\n     }\n@@ -176,7 +177,6 @@ public synchronized boolean isTransient() {\n \n     public synchronized void load() {\n         if (loaded.compareAndSet(false, true)) {\n-            this.indexManager = indexManager;\n             int capacity = 1;\n             while (capacity < numberOfBins) {\n                 capacity <<= 1;",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/9a491bbc7667a70a7d75364fcd854b96b6a27352/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix for https://issues.apache.org/activemq/browse/AMQ-1485\nFix npe for above\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@591145 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/9a491bbc7667a70a7d75364fcd854b96b6a27352"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/a1904ea1e777dac1a68759c8870fe2fd7a955836",
        "bug_id": "activemq_101",
        "file": [
            {
                "additions": 5,
                "sha": "71f71597fe7c5881f07411ce860c196bd1dd1e6d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/3baaab2185a8cba61dd3fa944a5a9b6aa776cdb5/activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java?ref=3baaab2185a8cba61dd3fa944a5a9b6aa776cdb5",
                "patch": "@@ -20,6 +20,8 @@\n import org.apache.activemq.broker.ProducerBrokerExchange;\n import org.apache.activemq.command.ActiveMQDestination;\n import org.apache.activemq.command.Message;\n+import org.apache.activemq.command.ProducerInfo;\n+import org.apache.activemq.state.ProducerState;\n \n public class BrokerSupport {\n     \n@@ -39,7 +41,10 @@ static public void resend(final ConnectionContext context, Message message, Acti\n         boolean originalFlowControl=context.isProducerFlowControl();\n         try{\n             context.setProducerFlowControl(false);\n+            ProducerInfo info = new ProducerInfo();\n+            ProducerState state = new ProducerState(info);\n             ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();\n+            producerExchange.setProducerState(state);\n             producerExchange.setMutable(true);\n             producerExchange.setConnectionContext(context);\n             context.getBroker().send(producerExchange,message);",
                "changes": 5,
                "blob_url": "https://github.com/apache/activemq/blob/3baaab2185a8cba61dd3fa944a5a9b6aa776cdb5/activemq-core/src/main/java/org/apache/activemq/util/BrokerSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "create default ProducerState for dummy ProducerBrokerExchange to prevent npe when sending to dead letter queues\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@530131 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/3baaab2185a8cba61dd3fa944a5a9b6aa776cdb5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/fccef1010d772b3f9160ef0bad1d967525f08eb3",
        "bug_id": "activemq_102",
        "file": [
            {
                "additions": 2,
                "sha": "07e8091ac85d56e8e4ef04bcf9d184049542ac66",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/6e329f7d9e38ac77cd0e99d7c5fa51166d621310/activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java?ref=6e329f7d9e38ac77cd0e99d7c5fa51166d621310",
                "patch": "@@ -285,7 +285,8 @@ public void processDispatch(MessageDispatch messageDispatch){\n         mdn.setConsumerId(messageDispatch.getConsumerId());\n         mdn.setDeliverySequenceId(messageDispatch.getDeliverySequenceId());\n         mdn.setDestination(messageDispatch.getDestination());\n-        mdn.setMessageId(messageDispatch.getMessage().getMessageId());\n+        if( messageDispatch.getMessage() != null )\n+            mdn.setMessageId(messageDispatch.getMessage().getMessageId());\n         sendAsyncToSlave(mdn);\n         super.processDispatch(messageDispatch);\n     }",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/6e329f7d9e38ac77cd0e99d7c5fa51166d621310/activemq-core/src/main/java/org/apache/activemq/broker/ft/MasterBroker.java"
            }
        ],
        "repo": "activemq",
        "message": "Avoid NPE in MasterBroker.processDispatch...  a null message is sent to the client to signal end of queue browse.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@399710 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/6e329f7d9e38ac77cd0e99d7c5fa51166d621310"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f2e210bef3a2c81f6ef7a3cad9bdd5705b546f7b",
        "bug_id": "activemq_103",
        "file": [
            {
                "additions": 151,
                "sha": "9f9017939edea183f77724b03ff9a6ef8110700e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c5f96e1db54a186cb6e8e9430d22704af418248e/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java",
                "deletions": 168,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java?ref=c5f96e1db54a186cb6e8e9430d22704af418248e",
                "patch": "@@ -1,26 +1,22 @@\n /**\n- *\n+ * \n  * Copyright 2005-2006 The Apache Software Foundation\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * \n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n+ * \n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n  */\n package org.apache.activemq.broker.jmx;\n \n import java.io.IOException;\n import java.net.MalformedURLException;\n import java.rmi.registry.LocateRegistry;\n import java.util.List;\n-\n import javax.management.Attribute;\n import javax.management.JMException;\n import javax.management.MBeanServer;\n@@ -30,176 +26,172 @@\n import javax.management.remote.JMXConnectorServer;\n import javax.management.remote.JMXConnectorServerFactory;\n import javax.management.remote.JMXServiceURL;\n-\n import org.apache.activemq.Service;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n+import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;\n /**\n  * A Flow provides different dispatch policies within the NMR\n  * \n  * @org.apache.xbean.XBean\n  * \n  * @version $Revision$\n  */\n-public class ManagementContext implements Service {\n+public class ManagementContext implements Service{\n     /**\n      * Default activemq domain\n      */\n-    public static final String DEFAULT_DOMAIN = \"org.apache.activemq\";\n-\n-    private final static Log log = LogFactory.getLog(ManagementContext.class);\n-\n+    public static final String DEFAULT_DOMAIN=\"org.apache.activemq\";\n+    private final static Log log=LogFactory.getLog(ManagementContext.class);\n     private MBeanServer beanServer;\n-    private String jmxDomainName = DEFAULT_DOMAIN;\n-    private boolean useMBeanServer = true;\n-    private boolean createMBeanServer = true;\n-    private boolean locallyCreateMBeanServer = false;\n-\n-    private boolean createConnector = true;\n-    private int connectorPort = 1099;\n-    private String connectorPath = \"/jmxrmi\";\n-\n+    private String jmxDomainName=DEFAULT_DOMAIN;\n+    private boolean useMBeanServer=true;\n+    private boolean createMBeanServer=true;\n+    private boolean locallyCreateMBeanServer=false;\n+    private boolean createConnector=true;\n+    private int connectorPort=1099;\n+    private String connectorPath=\"/jmxrmi\";\n+    private AtomicBoolean started=new AtomicBoolean(false);\n     private JMXConnectorServer connectorServer;\n-\n     private ObjectName namingServiceObjectName;\n \n-    public ManagementContext() {\n+    public ManagementContext(){\n         this(null);\n     }\n \n-    public ManagementContext(MBeanServer server) {\n-        this.beanServer = server;\n+    public ManagementContext(MBeanServer server){\n+        this.beanServer=server;\n     }\n \n-    public void start() throws IOException {\n+    public void start() throws IOException{\n         // lets force the MBeanServer to be created if needed\n-        getMBeanServer();\n-        if( connectorServer!=null ) {\n-            try {\n-                getMBeanServer().invoke(namingServiceObjectName, \"start\", null, null);\n-            } catch (Throwable ignore) {\n-            }\n-            Thread t = new Thread(\"JMX connector\") {\n-                public void run() {\n-                    try {\n-                        connectorServer.start();     \n-                        log.info(\"JMX consoles can connect to \" + connectorServer.getAddress());\n-                    } catch (IOException e) {\n-                        log.warn(\"Failed to start jmx connector: \"+e.getMessage());\n+        if(started.compareAndSet(false,true)){\n+            getMBeanServer();\n+            if(connectorServer!=null){\n+                try{\n+                    getMBeanServer().invoke(namingServiceObjectName,\"start\",null,null);\n+                }catch(Throwable ignore){}\n+                Thread t=new Thread(\"JMX connector\"){\n+                    public void run(){\n+                        try{\n+                            if(started.get()&&connectorServer!=null){\n+                                connectorServer.start();\n+                                log.info(\"JMX consoles can connect to \"+connectorServer.getAddress());\n+                            }\n+                        }catch(IOException e){\n+                            log.warn(\"Failed to start jmx connector: \"+e.getMessage());\n+                        }\n                     }\n-                }\n-            };\n-            t.setDaemon(true);\n-            t.start();\n+                };\n+                t.setDaemon(true);\n+                t.start();\n+            }\n         }\n     }\n \n-    public void stop() throws IOException {\n-        \n-        if( connectorServer!=null ) {\n-            try {\n-                connectorServer.stop();\n-            } catch (IOException e) {\n-                log.warn(\"Failed to stop jmx connector: \"+e.getMessage());\n-            }\n-            connectorServer=null;\n-            try {\n-                getMBeanServer().invoke(namingServiceObjectName, \"stop\", null, null);\n-            } catch (Throwable ignore) {\n+    public void stop() throws IOException{\n+        if(started.compareAndSet(true,false)){\n+            if(connectorServer!=null){\n+                try{\n+                    connectorServer.stop();\n+                }catch(IOException e){\n+                    log.warn(\"Failed to stop jmx connector: \"+e.getMessage());\n+                }\n+                connectorServer=null;\n+                try{\n+                    getMBeanServer().invoke(namingServiceObjectName,\"stop\",null,null);\n+                }catch(Throwable ignore){}\n             }\n-        }\n-        \n-        if (locallyCreateMBeanServer && beanServer != null) {\n-            // check to see if the factory knows about this server\n-            List list = MBeanServerFactory.findMBeanServer(null);\n-            if (list != null && !list.isEmpty() && list.contains(beanServer)) {\n-                MBeanServerFactory.releaseMBeanServer(beanServer);\n+            if(locallyCreateMBeanServer&&beanServer!=null){\n+                // check to see if the factory knows about this server\n+                List list=MBeanServerFactory.findMBeanServer(null);\n+                if(list!=null&&!list.isEmpty()&&list.contains(beanServer)){\n+                    MBeanServerFactory.releaseMBeanServer(beanServer);\n+                }\n             }\n         }\n     }\n \n     /**\n      * @return Returns the jmxDomainName.\n      */\n-    public String getJmxDomainName() {\n+    public String getJmxDomainName(){\n         return jmxDomainName;\n     }\n \n     /**\n      * @param jmxDomainName\n      *            The jmxDomainName to set.\n      */\n-    public void setJmxDomainName(String jmxDomainName) {\n-        this.jmxDomainName = jmxDomainName;\n+    public void setJmxDomainName(String jmxDomainName){\n+        this.jmxDomainName=jmxDomainName;\n     }\n \n     /**\n      * Get the MBeanServer\n      * \n      * @return the MBeanServer\n      */\n-    public MBeanServer getMBeanServer() {\n-        if (this.beanServer == null) {\n-            this.beanServer = findMBeanServer();\n+    public MBeanServer getMBeanServer(){\n+        if(this.beanServer==null){\n+            this.beanServer=findMBeanServer();\n         }\n         return beanServer;\n     }\n-    \n+\n     /**\n      * Set the MBeanServer\n+     * \n      * @param beanServer\n      */\n     public void setMBeanServer(MBeanServer beanServer){\n-        this.beanServer = beanServer;\n+        this.beanServer=beanServer;\n     }\n \n     /**\n      * @return Returns the useMBeanServer.\n      */\n-    public boolean isUseMBeanServer() {\n+    public boolean isUseMBeanServer(){\n         return useMBeanServer;\n     }\n \n     /**\n      * @param useMBeanServer\n      *            The useMBeanServer to set.\n      */\n-    public void setUseMBeanServer(boolean useMBeanServer) {\n-        this.useMBeanServer = useMBeanServer;\n+    public void setUseMBeanServer(boolean useMBeanServer){\n+        this.useMBeanServer=useMBeanServer;\n     }\n \n     /**\n      * @return Returns the createMBeanServer flag.\n      */\n-    public boolean isCreateMBeanServer() {\n+    public boolean isCreateMBeanServer(){\n         return createMBeanServer;\n     }\n \n     /**\n      * @param enableJMX\n      *            Set createMBeanServer.\n      */\n-    public void setCreateMBeanServer(boolean enableJMX) {\n-        this.createMBeanServer = enableJMX;\n+    public void setCreateMBeanServer(boolean enableJMX){\n+        this.createMBeanServer=enableJMX;\n     }\n \n     /**\n      * Formulate and return the MBean ObjectName of a custom control MBean\n      * \n      * @param type\n      * @param name\n-     * @return the JMX ObjectName of the MBean, or <code>null</code> if\n-     *         <code>customName</code> is invalid.\n+     * @return the JMX ObjectName of the MBean, or <code>null</code> if <code>customName</code> is invalid.\n      */\n-    public ObjectName createCustomComponentMBeanName(String type, String name) {\n-        ObjectName result = null;\n-        String tmp = jmxDomainName + \":\" + \"type=\" + sanitizeString(type) + \",name=\" + sanitizeString(name);\n-        try {\n-            result = new ObjectName(tmp);\n-        }\n-        catch (MalformedObjectNameException e) {\n-            log.error(\"Couldn't create ObjectName from: \" + type + \" , \" + name);\n+    public ObjectName createCustomComponentMBeanName(String type,String name){\n+        ObjectName result=null;\n+        String tmp=jmxDomainName+\":\"+\"type=\"+sanitizeString(type)+\",name=\"+sanitizeString(name);\n+        try{\n+            result=new ObjectName(tmp);\n+        }catch(MalformedObjectNameException e){\n+            log.error(\"Couldn't create ObjectName from: \"+type+\" , \"+name);\n         }\n         return result;\n     }\n@@ -210,12 +202,12 @@ public ObjectName createCustomComponentMBeanName(String type, String name) {\n      * @param in\n      * @return sanitized String\n      */\n-    private static String sanitizeString(String in) {\n-        String result = null;\n-        if (in != null) {\n-            result = in.replace(':', '_');\n-            result = result.replace('/', '_');\n-            result = result.replace('\\\\', '_');\n+    private static String sanitizeString(String in){\n+        String result=null;\n+        if(in!=null){\n+            result=in.replace(':','_');\n+            result=result.replace('/','_');\n+            result=result.replace('\\\\','_');\n         }\n         return result;\n     }\n@@ -229,20 +221,19 @@ private static String sanitizeString(String in) {\n      * @return the ObjectName\n      * @throws MalformedObjectNameException\n      */\n-    public static ObjectName getSystemObjectName(String domainName, String containerName, Class theClass)\n-            throws MalformedObjectNameException, NullPointerException {\n-        String tmp = domainName + \":\" + \"type=\" + theClass.getName() + \",name=\"\n-                + getRelativeName(containerName, theClass);\n+    public static ObjectName getSystemObjectName(String domainName,String containerName,Class theClass)\n+                    throws MalformedObjectNameException,NullPointerException{\n+        String tmp=domainName+\":\"+\"type=\"+theClass.getName()+\",name=\"+getRelativeName(containerName,theClass);\n         return new ObjectName(tmp);\n     }\n \n-    private static String getRelativeName(String containerName, Class theClass) {\n-        String name = theClass.getName();\n-        int index = name.lastIndexOf(\".\");\n-        if (index >= 0 && (index + 1) < name.length()) {\n-            name = name.substring(index + 1);\n+    private static String getRelativeName(String containerName,Class theClass){\n+        String name=theClass.getName();\n+        int index=name.lastIndexOf(\".\");\n+        if(index>=0&&(index+1)<name.length()){\n+            name=name.substring(index+1);\n         }\n-        return containerName + \".\" + name;\n+        return containerName+\".\"+name;\n     }\n \n     /**\n@@ -251,54 +242,48 @@ private static String getRelativeName(String containerName, Class theClass) {\n      * @param name\n      * @throws JMException\n      */\n-    public void unregisterMBean(ObjectName name) throws JMException {\n-        if (beanServer != null && beanServer.isRegistered(name)) {\n+    public void unregisterMBean(ObjectName name) throws JMException{\n+        if(beanServer!=null&&beanServer.isRegistered(name)){\n             beanServer.unregisterMBean(name);\n         }\n     }\n \n-    protected synchronized MBeanServer findMBeanServer() {\n-        MBeanServer result = null;\n+    protected synchronized MBeanServer findMBeanServer(){\n+        MBeanServer result=null;\n         // create the mbean server\n-        try {\n-            if (useMBeanServer) {\n+        try{\n+            if(useMBeanServer){\n                 // lets piggy back on another MBeanServer -\n                 // we could be in an appserver!\n-                List list = MBeanServerFactory.findMBeanServer(null);\n-                if (list != null && list.size() > 0) {\n-                    result = (MBeanServer) list.get(0);\n+                List list=MBeanServerFactory.findMBeanServer(null);\n+                if(list!=null&&list.size()>0){\n+                    result=(MBeanServer) list.get(0);\n                 }\n             }\n-\n-            if (result == null && createMBeanServer) {\n-                result = createMBeanServer();\n+            if(result==null&&createMBeanServer){\n+                result=createMBeanServer();\n             }\n-        }\n-        catch (NoClassDefFoundError e) {\n-            log.error(\"Couldnot load MBeanServer\", e);\n-        }\n-        catch (Throwable e) {\n+        }catch(NoClassDefFoundError e){\n+            log.error(\"Couldnot load MBeanServer\",e);\n+        }catch(Throwable e){\n             // probably don't have access to system properties\n-            log.error(\"Failed to initialize MBeanServer\", e);\n+            log.error(\"Failed to initialize MBeanServer\",e);\n         }\n         return result;\n     }\n \n     /**\n      * @return\n-     * @throws NullPointerException \n-     * @throws MalformedObjectNameException \n-     * @throws IOException \n+     * @throws NullPointerException\n+     * @throws MalformedObjectNameException\n+     * @throws IOException\n      */\n-    protected MBeanServer createMBeanServer() throws MalformedObjectNameException, IOException {\n-        MBeanServer mbeanServer = MBeanServerFactory.createMBeanServer(jmxDomainName);\n-        locallyCreateMBeanServer = true;\n-        \n-        if( createConnector ) {\n+    protected MBeanServer createMBeanServer() throws MalformedObjectNameException,IOException{\n+        MBeanServer mbeanServer=MBeanServerFactory.createMBeanServer(jmxDomainName);\n+        locallyCreateMBeanServer=true;\n+        if(createConnector){\n             createConnector(mbeanServer);\n         }\n-        \n-\n         return mbeanServer;\n     }\n \n@@ -308,53 +293,51 @@ protected MBeanServer createMBeanServer() throws MalformedObjectNameException, I\n      * @throws MalformedURLException\n      * @throws IOException\n      */\n-    private void createConnector(MBeanServer mbeanServer) throws MalformedObjectNameException, MalformedURLException, IOException {\n-        \n+    private void createConnector(MBeanServer mbeanServer) throws MalformedObjectNameException,MalformedURLException,\n+                    IOException{\n         // Create the NamingService, needed by JSR 160\n-        try {\n+        try{\n             LocateRegistry.createRegistry(connectorPort);\n-            \n-            namingServiceObjectName = ObjectName.getInstance(\"naming:type=rmiregistry\");\n-            \n-//          Do not use the createMBean as the mx4j jar may not be in the \n+            namingServiceObjectName=ObjectName.getInstance(\"naming:type=rmiregistry\");\n+            // Do not use the createMBean as the mx4j jar may not be in the\n             // same class loader than the server\n-            Class cl = Class.forName(\"mx4j.tools.naming.NamingService\");\n-            mbeanServer.registerMBean(cl.newInstance(), namingServiceObjectName);\n-            //mbeanServer.createMBean(\"mx4j.tools.naming.NamingService\", namingServiceObjectName, null);\n-            \n+            Class cl=Class.forName(\"mx4j.tools.naming.NamingService\");\n+            mbeanServer.registerMBean(cl.newInstance(),namingServiceObjectName);\n+            // mbeanServer.createMBean(\"mx4j.tools.naming.NamingService\", namingServiceObjectName, null);\n             // set the naming port\n-            Attribute attr = new Attribute(\"Port\", new Integer(connectorPort));\n-            mbeanServer.setAttribute(namingServiceObjectName, attr);\n-        } catch (Throwable e) {\n-            log.debug(\"Failed to create local registry\", e);\n+            Attribute attr=new Attribute(\"Port\",new Integer(connectorPort));\n+            mbeanServer.setAttribute(namingServiceObjectName,attr);\n+        }catch(Throwable e){\n+            log.debug(\"Failed to create local registry\",e);\n         }\n-        \n         // Create the JMXConnectorServer\n-        String serviceURL = \"service:jmx:rmi:///jndi/rmi://localhost:\" + connectorPort + connectorPath;            \n-        JMXServiceURL url = new JMXServiceURL(serviceURL);\n-        connectorServer = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbeanServer);\n-        \n-        //log.info(\"JMX consoles can connect to serviceURL: \" + serviceURL);\n+        String serviceURL=\"service:jmx:rmi:///jndi/rmi://localhost:\"+connectorPort+connectorPath;\n+        JMXServiceURL url=new JMXServiceURL(serviceURL);\n+        connectorServer=JMXConnectorServerFactory.newJMXConnectorServer(url,null,mbeanServer);\n+        // log.info(\"JMX consoles can connect to serviceURL: \" + serviceURL);\n     }\n \n-    public String getConnectorPath() {\n+    public String getConnectorPath(){\n         return connectorPath;\n     }\n-    public void setConnectorPath(String connectorPath) {\n-        this.connectorPath = connectorPath;\n+\n+    public void setConnectorPath(String connectorPath){\n+        this.connectorPath=connectorPath;\n     }\n \n-    public int getConnectorPort() {\n+    public int getConnectorPort(){\n         return connectorPort;\n     }\n-    public void setConnectorPort(int connectorPort) {\n-        this.connectorPort = connectorPort;\n+\n+    public void setConnectorPort(int connectorPort){\n+        this.connectorPort=connectorPort;\n     }\n \n-    public boolean isCreateConnector() {\n+    public boolean isCreateConnector(){\n         return createConnector;\n     }\n-    public void setCreateConnector(boolean createConnector) {\n-        this.createConnector = createConnector;\n+\n+    public void setCreateConnector(boolean createConnector){\n+        this.createConnector=createConnector;\n     }\n }\n\\ No newline at end of file",
                "changes": 319,
                "blob_url": "https://github.com/apache/activemq/blob/c5f96e1db54a186cb6e8e9430d22704af418248e/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java"
            }
        ],
        "repo": "activemq",
        "message": "added some state to avoid npe when starting the connectorServer after stop has been called\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@384738 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/c5f96e1db54a186cb6e8e9430d22704af418248e"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d34b2fe0723961ab4d62a3ba0e1dc1765ebb0977",
        "bug_id": "activemq_104",
        "file": [
            {
                "additions": 7,
                "sha": "10fbb7759b13bae390d092c3c9535a6e90cfeb64",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/project.properties",
                "deletions": 1,
                "filename": "activemq-core/project.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/project.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -2,7 +2,13 @@\n # Build Properties\n # -------------------------------------------------------------------\n maven.multiproject.type=jar\n-maven.eclipse.classpath.include=src/main/resources,src/test/resources,src/gram/java,target/generated\n+\n+maven.eclipse.classpath.include=\\\n+${basedir}/src/main/resources,\\\n+${basedir}/src/test/eclipse-resources,\\\n+${basedir}/src/test/resources,\\\n+${basedir}/src/gram/java,\\\n+${basedir}/target/generated\n \n openwire.version=1\n ",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/project.properties"
            },
            {
                "additions": 24,
                "sha": "28ec1b724c84b9e85bf56077c1b5eace7a077989",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java",
                "deletions": 25,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -13,8 +13,27 @@\n  */\n package org.apache.activemq.broker.jmx;\n \n-import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;\n-import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArraySet;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Map.Entry;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanServer;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenDataException;\n+import javax.management.openmbean.TabularData;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.openmbean.TabularType;\n \n import org.apache.activemq.broker.Broker;\n import org.apache.activemq.broker.BrokerService;\n@@ -44,28 +63,8 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n-import javax.management.InstanceNotFoundException;\n-import javax.management.MBeanRegistrationException;\n-import javax.management.MBeanServer;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-import javax.management.openmbean.CompositeData;\n-import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.CompositeType;\n-import javax.management.openmbean.OpenDataException;\n-import javax.management.openmbean.TabularData;\n-import javax.management.openmbean.TabularDataSupport;\n-import javax.management.openmbean.TabularType;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Hashtable;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.Map.Entry;\n+import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;\n+import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArraySet;\n \n public class ManagedRegionBroker extends RegionBroker{\n     private static final Log log=LogFactory.getLog(ManagedRegionBroker.class);\n@@ -167,7 +166,7 @@ public void unregister(ActiveMQDestination destName){\n     public void registerSubscription(ConnectionContext context,Subscription sub){\n         SubscriptionKey key = new SubscriptionKey(context.getClientId(),sub.getConsumerInfo().getSubcriptionName());\n         Hashtable map=brokerObjectName.getKeyPropertyList();\n-        String name = key.toString() + \":\" + sub.getConsumerInfo().getConsumerId().toString();\n+        String name = key.toString();\n         try{\n         \t\n         \tObjectName objectName = new ObjectName(",
                "changes": 49,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java"
            },
            {
                "additions": 12,
                "sha": "52f310258458b94c2affc8b56f04a6b76c6083bb",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/src/test/eclipse-resources/log4j.properties",
                "deletions": 0,
                "filename": "activemq-core/src/test/eclipse-resources/log4j.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/eclipse-resources/log4j.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -0,0 +1,12 @@\n+#\n+# The logging properties used for eclipse testing, We want to see debug output on the console.\n+#\n+log4j.rootLogger=DEBUG, out\n+\n+log4j.logger.org.apache.activemq.spring=WARN\n+\n+# CONSOLE appender not used by default\n+log4j.appender.out=org.apache.log4j.ConsoleAppender\n+log4j.appender.out.layout=org.apache.log4j.PatternLayout\n+log4j.appender.out.layout.ConversionPattern=[%30.30t] %-30.30c{1} %-5p %m%n\n+#log4j.appender.out.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n",
                "changes": 12,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-core/src/test/eclipse-resources/log4j.properties"
            },
            {
                "additions": 1,
                "sha": "fa48247840a9aa21cf581480b0b89bec588ad91d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-jaas/project.properties",
                "deletions": 1,
                "filename": "activemq-jaas/project.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jaas/project.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -7,6 +7,6 @@ http://cvs.apache.org/repository\n # Build Properties\n # -------------------------------------------------------------------\n maven.multiproject.type=jar\n-maven.eclipse.classpath.include=src/test/resources\n+maven.eclipse.classpath.include=${basedir}/src/test/resources\n \n maven.junit.jvmargs=-Djava.security.auth.login.config=src/test/resources/login.config",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-jaas/project.properties"
            },
            {
                "additions": 1,
                "sha": "777c5cfa7d88131c2c7109e3607b223361c0ed33",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-systest/project.properties",
                "deletions": 1,
                "filename": "activemq-systest/project.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-systest/project.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -7,7 +7,7 @@ http://cvs.apache.org/repository\n # Build Properties\n # -------------------------------------------------------------------\n maven.multiproject.type=jar\n-maven.eclipse.classpath.include=src/test/resources\n+maven.eclipse.classpath.include=${basedir}/src/test/resources\n \n maven.changelog.range=730\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/activemq-systest/project.properties"
            },
            {
                "additions": 1,
                "sha": "de57655bfb1411f40ab2bf864def89fa9627a958",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/assembly/project.properties",
                "deletions": 1,
                "filename": "assembly/project.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/assembly/project.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -20,4 +20,4 @@ http://www.openejb.org/maven\n \n maven.jar.mainclass = org.apache.activemq.console.Main\n \n-maven.eclipse.classpath.include=src/test/resources\n\\ No newline at end of file\n+maven.eclipse.classpath.include=${basedir}/src/test/resources",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/assembly/project.properties"
            },
            {
                "additions": 4,
                "sha": "878057faa8c9ebdcbcb6076e88c04af285c362d3",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/assembly/src/release/conf/activemq.xml",
                "deletions": 5,
                "filename": "assembly/src/release/conf/activemq.xml",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/assembly/src/release/conf/activemq.xml?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -29,16 +29,15 @@\n     </persistenceAdapter>\n   \n     <transportConnectors>\n-       <transportConnector uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n-       \n-       <transportConnector uri=\"stomp://localhost:61617\"/>\n+       <transportConnector name=\"default\" uri=\"tcp://localhost:61616\" discoveryUri=\"multicast://default\"/>\n+       <transportConnector name=\"stomp\"   uri=\"stomp://localhost:61617\"/>\n     </transportConnectors>\n     \n     <networkConnectors>\n       <!-- by default just auto discover the other brokers -->\n-      <networkConnector uri=\"multicast://default\"/>\n+      <networkConnector name=\"default\" uri=\"multicast://default\"/>\n       <!--  \n-      <networkConnector uri=\"static://(tcp://host1:61616,tcp://host2:61616)\"/>\n+      <networkConnector name=\"host1 and host2\" uri=\"static://(tcp://host1:61616,tcp://host2:61616)\"/>\n       -->\n     </networkConnectors>\n     ",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/assembly/src/release/conf/activemq.xml"
            },
            {
                "additions": 6,
                "sha": "0474e6d7a75790a76fef9fa627f16a7db978101b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/etc/project.properties",
                "deletions": 0,
                "filename": "etc/project.properties",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/etc/project.properties?ref=c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e",
                "patch": "@@ -42,6 +42,12 @@ http://jakarta.apache.org/commons/logging/apidocs\n \n maven.javadoc.additionalparam = -linksource\n \n+# -------------------------------------------------------------------\n+# Eclipse IDE Properties\n+# -------------------------------------------------------------------\n+maven.eclipse.output.dir=${basedir}/target/eclipse\n+maven.eclipse.test.output.dir=${basedir}target/eclipse\n+\n # -------------------------------------------------------------------\n # Checkstyle Properties\n # -------------------------------------------------------------------",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e/etc/project.properties"
            }
        ],
        "repo": "activemq",
        "message": "- Fix NPE due to JMX problem\n- Made the maven setting a little more eclipse freindly.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@384438 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/c4e99fe48b9cc0597df3de9e82d8dc9c3eb5a63e"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/057cde18f932a0ee1a579ae3b29531ec35b8cfce",
        "bug_id": "activemq_105",
        "file": [
            {
                "additions": 5,
                "sha": "2c8255c8f616f9e1d94c2e8e35b0188ebed8c19c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/2867249482c65508a0a0d3071de930b4ee6a4558/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java?ref=2867249482c65508a0a0d3071de930b4ee6a4558",
                "patch": "@@ -19,10 +19,8 @@\n import java.io.IOException;\n import java.util.Iterator;\n import java.util.LinkedList;\n-\n import javax.jms.InvalidSelectorException;\n import javax.jms.JMSException;\n-\n import org.apache.activemq.broker.Broker;\n import org.apache.activemq.broker.ConnectionContext;\n import org.apache.activemq.command.ActiveMQDestination;\n@@ -34,9 +32,11 @@\n import org.apache.activemq.command.MessageDispatchNotification;\n import org.apache.activemq.memory.UsageManager;\n import org.apache.activemq.transaction.Synchronization;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public class TopicSubscription extends AbstractSubscription {\n-    \n+    private static final Log log = LogFactory.getLog(TopicSubscription.class);\n     final protected LinkedList matched = new LinkedList();\n     final protected ActiveMQDestination dlqDestination = new ActiveMQQueue(\"ActiveMQ.DLQ\");\n     final protected UsageManager usageManager;\n@@ -62,8 +62,9 @@ public void add(MessageReference node) throws InterruptedException, IOException\n \n                     // NOTE - be careful about the slaveBroker!\n                     if (maximumPendingMessages > 0) {\n+                        log.warn(\"discarding \" + (matched.size() - maximumPendingMessages) + \" messages for slow consumer\");\n                         // lets discard old messages as we are a slow consumer\n-                        while (matched.size() > maximumPendingMessages) {\n+                        while (!matched.isEmpty() && matched.size() > maximumPendingMessages) {\n                             MessageReference oldMessage = (MessageReference) matched.removeFirst();\n                             oldMessage.decrementReferenceCount();\n                         }",
                "changes": 9,
                "blob_url": "https://github.com/apache/activemq/blob/2867249482c65508a0a0d3071de930b4ee6a4558/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java"
            }
        ],
        "repo": "activemq",
        "message": "log when discarding messages - and ensure we don't get npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382692 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/2867249482c65508a0a0d3071de930b4ee6a4558"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/84942ae5b02bb7da48e0d23ea13da6a6aececb18",
        "bug_id": "activemq_106",
        "file": [
            {
                "additions": 2,
                "sha": "64fa2ac0e508832d297b7148b78b5120df85b682",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f7ed407271030caf70dc7fd936b4060ebd75f92d/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java?ref=f7ed407271030caf70dc7fd936b4060ebd75f92d",
                "patch": "@@ -50,6 +50,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -456,7 +457,7 @@ public boolean isStopped(){\n     }\n     \n     public Set getDurableDestinations(){\n-        return adaptor.getDestinations();\n+        return adaptor != null ? adaptor.getDestinations() : Collections.EMPTY_SET;\n     }\n \n     ",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/f7ed407271030caf70dc7fd936b4060ebd75f92d/activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java"
            }
        ],
        "repo": "activemq",
        "message": "getDurableDestinations() now returns empty set if the persistence adaptor is null -\ninstead of throwing npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@377701 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/f7ed407271030caf70dc7fd936b4060ebd75f92d"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/80f5e0ced1de75624f109466395ef57fdb6f774b",
        "bug_id": "activemq_107",
        "file": [
            {
                "additions": 3,
                "sha": "867b9e7f28335bcfdc476c080f9996e5e3db6e0c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/de7f650b16e6e77ea31f8967202dd8445bd64a5e/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java?ref=de7f650b16e6e77ea31f8967202dd8445bd64a5e",
                "patch": "@@ -210,7 +210,9 @@ private ActiveMQConnection createActiveMQConnection(String userName, String pass\n             connection.setAsyncDispatch(isAsyncDispatch());\n             connection.setUseAsyncSend(isUseAsyncSend());\n             connection.setUseRetroactiveConsumer(isUseRetroactiveConsumer());\n-            connection.setRedeliveryPolicy(getRedeliveryPolicy());\n+            if (getRedeliveryPolicy() != null) {\n+                connection.setRedeliveryPolicy(getRedeliveryPolicy());\n+            }\n \n             if( clientID !=null )\n                 connection.setClientID(clientID);",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/de7f650b16e6e77ea31f8967202dd8445bd64a5e/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java"
            },
            {
                "additions": 5,
                "sha": "93d9e9ae78d66738edf01ad247170cfa86fd7235",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/de7f650b16e6e77ea31f8967202dd8445bd64a5e/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java?ref=de7f650b16e6e77ea31f8967202dd8445bd64a5e",
                "patch": "@@ -175,11 +175,14 @@ public void afterCommit() throws Throwable {\n                         Message message = node.getMessage();\n                         if( message !=null ) {\n                             \n-                            // TODO is this meant to be == null - it was != ?\n-                            if( message.getOriginalDestination()==null )\n+                            // TODO is this meant to be == null?\n+                            if( message.getOriginalDestination()!=null )\n                                 message.setOriginalDestination(message.getDestination());\n                             \n                             ActiveMQDestination originalDestination = message.getOriginalDestination();\n+                            if (originalDestination == null) {\n+                                originalDestination = message.getDestination();\n+                            }\n                             DeadLetterStrategy deadLetterStrategy = node.getRegionDestination().getDeadLetterStrategy();\n                             ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(originalDestination);\n                             message.setDestination(deadLetterDestination);",
                "changes": 7,
                "blob_url": "https://github.com/apache/activemq/blob/de7f650b16e6e77ea31f8967202dd8445bd64a5e/activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java"
            }
        ],
        "repo": "activemq",
        "message": "avoid possible NPE; only set the redeliveryPolicy if there is one configured\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@360132 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/de7f650b16e6e77ea31f8967202dd8445bd64a5e"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d4742f597bc23a52e98e82179b017d7e9e99fdd0",
        "bug_id": "activemq_108",
        "file": [
            {
                "additions": 4,
                "sha": "48612a98524bc2eb20d818616ce9ca7450f6f7ff",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -362,11 +362,11 @@ public void slowConsumer(ConnectionContext context, Destination destination,Subs\n     }\n \n     @Override\n-    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {\n-        super.fastProducer(context, producerInfo);\n+    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {\n+        super.fastProducer(context, producerInfo, destination);\n         try {\n-            if (!AdvisorySupport.isAdvisoryTopic(producerInfo.getDestination())) {\n-                ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());\n+            if (!AdvisorySupport.isAdvisoryTopic(destination)) {\n+                ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(destination);\n                 ActiveMQMessage advisoryMessage = new ActiveMQMessage();\n                 advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());\n                 fireAdvisory(context, topic, producerInfo, null, advisoryMessage);",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java"
            },
            {
                "additions": 2,
                "sha": "3d108e9500b4ab3144c96813fcd3503a091edffc",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/Broker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/Broker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/Broker.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -361,8 +361,9 @@\n      * Called to notify a producer is too fast\n      * @param context\n      * @param producerInfo\n+     * @param destination\n      */\n-    void fastProducer(ConnectionContext context,ProducerInfo producerInfo);\n+    void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination);\n     \n     /**\n      * Called when a Usage reaches a limit",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/Broker.java"
            },
            {
                "additions": 2,
                "sha": "9438e7bf0467e79bb12502ba508aafdafd8aee01",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -271,8 +271,8 @@ public long getBrokerSequenceId() {\n     }\n \n    \n-    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {\n-        next.fastProducer(context, producerInfo);\n+    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {\n+        next.fastProducer(context, producerInfo, destination);\n     }\n \n     public void isFull(ConnectionContext context,Destination destination, Usage usage) {",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java"
            },
            {
                "additions": 1,
                "sha": "065a1bb8891e637f2fbc0954187cdb88a5bc1c30",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -263,7 +263,7 @@ public long getBrokerSequenceId() {\n         return -1l;\n     }\n     \n-    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {\n+    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {\n     }\n \n     public void isFull(ConnectionContext context, Destination destination,Usage usage) {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java"
            },
            {
                "additions": 1,
                "sha": "109d3abb45b64bd3cea6bb3d686b208439cc05e3",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -273,7 +273,7 @@ public long getBrokerSequenceId() {\n         throw new BrokerStoppedException(this.message);\n     }\n     \n-    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {\n+    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {\n         throw new BrokerStoppedException(this.message);\n     }\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java"
            },
            {
                "additions": 2,
                "sha": "20a2e8f01fb95f9c67657ac0e998e1ea027cca3d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -282,8 +282,8 @@ public long getBrokerSequenceId() {\n         return getNext().getBrokerSequenceId();\n     }\n     \n-    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {\n-        getNext().fastProducer(context, producerInfo);\n+    public void fastProducer(ConnectionContext context,ProducerInfo producerInfo,ActiveMQDestination destination) {\n+        getNext().fastProducer(context, producerInfo, destination);\n     }\n \n     public void isFull(ConnectionContext context,Destination destination, Usage usage) {",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java"
            },
            {
                "additions": 8,
                "sha": "0a2daecd6a088a9097e318d25e5d8d9b72441fd1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java",
                "deletions": 8,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -76,7 +76,7 @@\n     private int minimumMessageSize = 1024;\n     private boolean lazyDispatch = false;\n     private boolean advisoryForSlowConsumers;\n-    private boolean advisdoryForFastProducers;\n+    private boolean advisoryForFastProducers;\n     private boolean advisoryForDiscardingMessages;\n     private boolean advisoryWhenFull;\n     private boolean advisoryForDelivery;\n@@ -407,15 +407,15 @@ public void setAdvisoryForConsumed(boolean advisoryForConsumed) {\n     /**\n      * @return the advisdoryForFastProducers\n      */\n-    public boolean isAdvisdoryForFastProducers() {\n-        return advisdoryForFastProducers;\n+    public boolean isAdvisoryForFastProducers() {\n+        return advisoryForFastProducers;\n     }\n \n     /**\n-     * @param advisdoryForFastProducers the advisdoryForFastProducers to set\n+     * @param advisoryForFastProducers the advisdoryForFastProducers to set\n      */\n-    public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {\n-        this.advisdoryForFastProducers = advisdoryForFastProducers;\n+    public void setAdvisoryForFastProducers(boolean advisoryForFastProducers) {\n+        this.advisoryForFastProducers = advisoryForFastProducers;\n     }\n \n     public boolean isSendAdvisoryIfNoConsumers() {\n@@ -509,8 +509,8 @@ public void slowConsumer(ConnectionContext context, Subscription subs) {\n      * @param producerInfo\n      */\n     public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {\n-        if (advisdoryForFastProducers) {\n-            broker.fastProducer(context, producerInfo);\n+        if (advisoryForFastProducers) {\n+            broker.fastProducer(context, producerInfo, getActiveMQDestination());\n         }\n     }\n ",
                "changes": 16,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java"
            },
            {
                "additions": 7,
                "sha": "4025914027aaf61a3f956eba3bca285fd905ae36",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java",
                "deletions": 7,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -74,7 +74,7 @@\n     private int timeBeforeDispatchStarts = 0;\n     private int consumersBeforeDispatchStarts = 0;\n     private boolean advisoryForSlowConsumers;\n-    private boolean advisdoryForFastProducers;\n+    private boolean advisoryForFastProducers;\n     private boolean advisoryForDiscardingMessages;\n     private boolean advisoryWhenFull;\n     private boolean advisoryForDelivery;\n@@ -159,7 +159,7 @@ public void baseConfiguration(Broker broker,BaseDestination destination) {\n         destination.setAdvisoryForDelivery(isAdvisoryForDelivery());\n         destination.setAdvisoryForDiscardingMessages(isAdvisoryForDiscardingMessages());\n         destination.setAdvisoryForSlowConsumers(isAdvisoryForSlowConsumers());\n-        destination.setAdvisdoryForFastProducers(isAdvisdoryForFastProducers());\n+        destination.setAdvisoryForFastProducers(isAdvisoryForFastProducers());\n         destination.setAdvisoryWhenFull(isAdvisoryWhenFull());\n         destination.setSendAdvisoryIfNoConsumers(sendAdvisoryIfNoConsumers);\n         destination.setExpireMessagesPeriod(getExpireMessagesPeriod());\n@@ -661,15 +661,15 @@ public void setAdvisoryForConsumed(boolean advisoryForConsumed) {\n     /**\n      * @return the advisdoryForFastProducers\n      */\n-    public boolean isAdvisdoryForFastProducers() {\n-        return advisdoryForFastProducers;\n+    public boolean isAdvisoryForFastProducers() {\n+        return advisoryForFastProducers;\n     }\n \n     /**\n-     * @param advisdoryForFastProducers the advisdoryForFastProducers to set\n+     * @param advisoryForFastProducers the advisdoryForFastProducers to set\n      */\n-    public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {\n-        this.advisdoryForFastProducers = advisdoryForFastProducers;\n+    public void setAdvisoryForFastProducers(boolean advisoryForFastProducers) {\n+        this.advisoryForFastProducers = advisoryForFastProducers;\n     }\n \n     public void setMaxExpirePageSize(int maxExpirePageSize) {",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java"
            },
            {
                "additions": 2,
                "sha": "4f9b6d676b234415022d3430ae962f3c7ea8374e",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -510,11 +510,11 @@ public void sendToDeadLetterQueue(ConnectionContext context, MessageReference me\n     }\n \n     @Override\n-    public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {\n+    public void fastProducer(ConnectionContext context, ProducerInfo producerInfo,ActiveMQDestination destination) {\n         if (isLogAll() || isLogProducerEvents() || isLogInternalEvents()) {\n             LOG.info(\"Fast Producer : \" + producerInfo);\n         }\n-        super.fastProducer(context, producerInfo);\n+        super.fastProducer(context, producerInfo, destination);\n     }\n \n     @Override",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java"
            },
            {
                "additions": 1,
                "sha": "76af309d608397a89f8e3b6acc3cfa044a914e14",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTempDestinationTests.java",
                "deletions": 1,
                "filename": "activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTempDestinationTests.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTempDestinationTests.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -200,7 +200,7 @@ protected void configureBroker(BrokerService answer) throws Exception {\n \n     private PolicyEntry createPolicyEntry(ConstantPendingMessageLimitStrategy strategy) {\n         PolicyEntry policy = new PolicyEntry();\n-        policy.setAdvisdoryForFastProducers(true);\n+        policy.setAdvisoryForFastProducers(true);\n         policy.setAdvisoryForConsumed(true);\n         policy.setAdvisoryForDelivery(true);\n         policy.setAdvisoryForDiscardingMessages(true);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTempDestinationTests.java"
            },
            {
                "additions": 1,
                "sha": "b04871fc966f11aee2367bb9aee84f01bd135da9",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTests.java",
                "deletions": 1,
                "filename": "activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTests.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTests.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -210,7 +210,7 @@ protected BrokerService createBroker() throws Exception {\n     protected void configureBroker(BrokerService answer) throws Exception {\n         answer.setPersistent(false);\n         PolicyEntry policy = new PolicyEntry();\n-        policy.setAdvisdoryForFastProducers(true);\n+        policy.setAdvisoryForFastProducers(true);\n         policy.setAdvisoryForConsumed(true);\n         policy.setAdvisoryForDelivery(true);\n         policy.setAdvisoryForDiscardingMessages(true);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/advisory/AdvisoryTests.java"
            },
            {
                "additions": 1,
                "sha": "a1e9b93141503aad85c2533615fe8975dd7fad18",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3324Test.java",
                "deletions": 1,
                "filename": "activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3324Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3324Test.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -130,7 +130,7 @@ protected BrokerService createBroker() throws Exception {\n         entry.setInactiveTimoutBeforeGC(2000);\n         entry.setProducerFlowControl(true);\n         entry.setAdvisoryForConsumed(true);\n-        entry.setAdvisdoryForFastProducers(true);\n+        entry.setAdvisoryForFastProducers(true);\n         entry.setAdvisoryForDelivery(true);\n         PolicyMap map = new PolicyMap();\n         map.setDefaultEntry(entry);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3324Test.java"
            },
            {
                "additions": 139,
                "sha": "cdda378ed8918873191a952a61386541875a66b2",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3903Test.java",
                "deletions": 0,
                "filename": "activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3903Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3903Test.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -0,0 +1,139 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.bugs;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.DeliveryMode;\n+import javax.jms.Message;\n+import javax.jms.MessageConsumer;\n+import javax.jms.MessageProducer;\n+import javax.jms.ResourceAllocationException;\n+import javax.jms.Session;\n+import javax.jms.TemporaryQueue;\n+import javax.jms.Topic;\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.apache.activemq.advisory.AdvisorySupport;\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.DestinationInterceptor;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.activemq.broker.region.virtual.MirroredQueue;\n+import org.apache.activemq.command.ActiveMQDestination;\n+import org.apache.activemq.util.Wait;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class AMQ3903Test {\n+\n+    private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3903Test.class);\n+\n+    private static final String bindAddress = \"tcp://0.0.0.0:0\";\n+    private BrokerService broker;\n+    private ActiveMQConnectionFactory cf;\n+\n+    private static final int MESSAGE_COUNT = 100;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        broker = this.createBroker();\n+        String address = broker.getTransportConnectors().get(0).getPublishableConnectString();\n+        broker.start();\n+        broker.waitUntilStarted();\n+\n+        cf = new ActiveMQConnectionFactory(address);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (broker != null) {\n+            broker.stop();\n+            broker.waitUntilStopped();\n+        }\n+    }\n+\n+    @Test\n+    public void testAdvisoryForFastGenericProducer() throws Exception {\n+        doTestAdvisoryForFastProducer(true);\n+    }\n+\n+    @Test\n+    public void testAdvisoryForFastDedicatedProducer() throws Exception {\n+        doTestAdvisoryForFastProducer(false);\n+    }\n+\n+    public void doTestAdvisoryForFastProducer(boolean genericProducer) throws Exception {\n+\n+        Connection connection = cf.createConnection();\n+        connection.start();\n+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+\n+        final TemporaryQueue queue = session.createTemporaryQueue();\n+\n+        final Topic advisoryTopic = AdvisorySupport.getFastProducerAdvisoryTopic((ActiveMQDestination) queue);\n+\n+        MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);\n+        MessageProducer producer = session.createProducer(genericProducer ? null : queue);\n+\n+        try {\n+            // send lots of messages to the tempQueue\n+            for (int i = 0; i < MESSAGE_COUNT; i++) {\n+                BytesMessage m = session.createBytesMessage();\n+                m.writeBytes(new byte[1024]);\n+                if (genericProducer) {\n+                    producer.send(queue, m, DeliveryMode.PERSISTENT, 4, 0);\n+                } else {\n+                    producer.send(m);\n+                }\n+            }\n+        } catch (ResourceAllocationException expectedOnLimitReachedAfterFastAdvisory) {}\n+\n+        // check one advisory message has produced on the advisoryTopic\n+        Message advCmsg = advisoryConsumer.receive(4000);\n+        assertNotNull(advCmsg);\n+\n+\n+        connection.close();\n+        LOG.debug(\"Connection closed, destinations should now become inactive.\");\n+    }\n+\n+    protected BrokerService createBroker() throws Exception {\n+        BrokerService answer = new BrokerService();\n+        answer.setPersistent(false);\n+        answer.setUseJmx(false);\n+\n+        PolicyEntry entry = new PolicyEntry();\n+        entry.setAdvisoryForFastProducers(true);\n+        entry.setMemoryLimit(10000);\n+        PolicyMap map = new PolicyMap();\n+        map.setDefaultEntry(entry);\n+\n+        answer.setDestinationPolicy(map);\n+        answer.addConnector(bindAddress);\n+\n+        answer.getSystemUsage().setSendFailIfNoSpace(true);\n+\n+        return answer;\n+    }\n+}",
                "changes": 139,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3903Test.java"
            },
            {
                "additions": 2,
                "sha": "2d53e530b3c6d5c10aa57b750ab22b49ec738923",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java",
                "deletions": 8,
                "filename": "activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -20,27 +20,21 @@\n import junit.framework.TestCase;\n import org.apache.activemq.ActiveMQConnection;\n import org.apache.activemq.ActiveMQConnectionFactory;\n-import org.apache.activemq.JmsTestSupport;\n import org.apache.activemq.broker.BrokerFactory;\n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;\n import org.apache.activemq.broker.region.policy.PolicyEntry;\n import org.apache.activemq.broker.region.policy.PolicyMap;\n import org.apache.activemq.command.ActiveMQQueue;\n-import org.apache.activemq.command.ActiveMQTopic;\n import org.apache.activemq.util.URISupport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import javax.jms.*;\n import java.io.File;\n-import java.io.IOException;\n import java.net.Socket;\n import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n \n /**\n@@ -59,7 +53,7 @@\n \n     private PolicyEntry createPolicyEntry() {\n         PolicyEntry policy = new PolicyEntry();\n-        policy.setAdvisdoryForFastProducers(true);\n+        policy.setAdvisoryForFastProducers(true);\n         policy.setAdvisoryForConsumed(true);\n         policy.setAdvisoryForDelivery(true);\n         policy.setAdvisoryForDiscardingMessages(true);\n@@ -78,7 +72,7 @@ protected BrokerService createBroker() throws Exception {\n \n         broker.setPersistent(false);\n         PolicyEntry policy = new PolicyEntry();\n-        policy.setAdvisdoryForFastProducers(true);\n+        policy.setAdvisoryForFastProducers(true);\n         policy.setAdvisoryForConsumed(true);\n         policy.setAdvisoryForDelivery(true);\n         policy.setAdvisoryForDiscardingMessages(true);",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/transport/stomp/StompAdvisoryTest.java"
            },
            {
                "additions": 1,
                "sha": "1fcb0d1a685dbcd5447a1296b63c05f38fbe7a04",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/usecases/AdvisoryTopicCleanUpTest.java",
                "deletions": 1,
                "filename": "activemq-core/src/test/java/org/apache/activemq/usecases/AdvisoryTopicCleanUpTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/usecases/AdvisoryTopicCleanUpTest.java?ref=db1f6fe2b42d6d1d505ae59618b0cbc36532cef5",
                "patch": "@@ -62,7 +62,7 @@ private void createBroker() throws Exception {\n         connectionUri = broker.addConnector(\"tcp://localhost:0\").getPublishableConnectString();\n \n         PolicyEntry policy = new PolicyEntry();\n-        policy.setAdvisdoryForFastProducers(true);\n+        policy.setAdvisoryForFastProducers(true);\n         policy.setAdvisoryForConsumed(true);\n         policy.setAdvisoryForDelivery(true);\n         policy.setAdvisoryForDiscardingMessages(true);",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5/activemq-core/src/test/java/org/apache/activemq/usecases/AdvisoryTopicCleanUpTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3903 - Failed to fire fast producer advisory, reason: java.lang.NullPointerException. A generic producer does not contain a destination, so it must be obtained from the exchange. Modified the boker interface to reflect that. fixed up typo in the policy entry, advisoryForFastProducers now correctly spelled in favour of advisdoryForFastProducers\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1360642 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/db1f6fe2b42d6d1d505ae59618b0cbc36532cef5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/f24b4f7569fd7812304ef8d01205544aaa4de390",
        "bug_id": "activemq_109",
        "file": [
            {
                "additions": 150,
                "sha": "8e601fc85cb6bdb26af72c0d531c8caf6b8dd877",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java",
                "deletions": 126,
                "filename": "activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java?ref=d226f5089f63cf5fe46b6cccbd0c573d1dfeba45",
                "patch": "@@ -196,7 +196,7 @@\n \n     /**\n      * Construct an <code>ActiveMQConnection</code>\n-     * \n+     *\n      * @param transport\n      * @param factoryStats\n      * @throws Exception\n@@ -243,7 +243,7 @@ protected void setPassword(String password) {\n \n     /**\n      * A static helper method to create a new connection\n-     * \n+     *\n      * @return an ActiveMQConnection\n      * @throws JMSException\n      */\n@@ -254,7 +254,7 @@ public static ActiveMQConnection makeConnection() throws JMSException {\n \n     /**\n      * A static helper method to create a new connection\n-     * \n+     *\n      * @param uri\n      * @return and ActiveMQConnection\n      * @throws JMSException\n@@ -266,7 +266,7 @@ public static ActiveMQConnection makeConnection(String uri) throws JMSException,\n \n     /**\n      * A static helper method to create a new connection\n-     * \n+     *\n      * @param user\n      * @param password\n      * @param uri\n@@ -287,7 +287,7 @@ public JMSConnectionStatsImpl getConnectionStats() {\n \n     /**\n      * Creates a <CODE>Session</CODE> object.\n-     * \n+     *\n      * @param transacted indicates whether the session is transacted\n      * @param acknowledgeMode indicates whether the consumer or the client will\n      *                acknowledge any messages it receives; ignored if the\n@@ -334,7 +334,7 @@ protected SessionId getNextSessionId() {\n      * an administrator in a <CODE> ConnectionFactory</CODE> object or assigned\n      * dynamically by the application by calling the <code>setClientID</code>\n      * method.\n-     * \n+     *\n      * @return the unique client identifier\n      * @throws JMSException if the JMS provider fails to return the client ID\n      *                 for this connection due to some internal error.\n@@ -372,7 +372,7 @@ public String getClientID() throws JMSException {\n      * If another connection with the same <code>clientID</code> is already\n      * running when this method is called, the JMS provider should detect the\n      * duplicate ID and throw an <CODE>InvalidClientIDException</CODE>.\n-     * \n+     *\n      * @param newClientID the unique client identifier\n      * @throws JMSException if the JMS provider fails to set the client ID for\n      *                 this connection due to some internal error.\n@@ -409,7 +409,7 @@ public void setDefaultClientID(String clientID) throws JMSException {\n \n     /**\n      * Gets the metadata for this connection.\n-     * \n+     *\n      * @return the connection metadata\n      * @throws JMSException if the JMS provider fails to get the connection\n      *                 metadata for this connection.\n@@ -424,7 +424,7 @@ public ConnectionMetaData getMetaData() throws JMSException {\n      * Gets the <CODE>ExceptionListener</CODE> object for this connection. Not\n      * every <CODE>Connection</CODE> has an <CODE>ExceptionListener</CODE>\n      * associated with it.\n-     * \n+     *\n      * @return the <CODE>ExceptionListener</CODE> for this connection, or\n      *         null, if no <CODE>ExceptionListener</CODE> is associated with\n      *         this connection.\n@@ -455,7 +455,7 @@ public ExceptionListener getExceptionListener() throws JMSException {\n      * <P>\n      * A JMS provider should attempt to resolve connection problems itself\n      * before it notifies the client of them.\n-     * \n+     *\n      * @param listener the exception listener\n      * @throws JMSException if the JMS provider fails to set the exception\n      *                 listener for this connection.\n@@ -469,7 +469,7 @@ public void setExceptionListener(ExceptionListener listener) throws JMSException\n      * Gets the <code>ClientInternalExceptionListener</code> object for this connection.\n      * Not every <CODE>ActiveMQConnectionn</CODE> has a <CODE>ClientInternalExceptionListener</CODE>\n      * associated with it.\n-     * \n+     *\n      * @return the listener or <code>null</code> if no listener is registered with the connection.\n      */\n     public ClientInternalExceptionListener getClientInternalExceptionListener()\n@@ -483,19 +483,19 @@ public ClientInternalExceptionListener getClientInternalExceptionListener()\n      * (e.g. an EJB container in case of Message Driven Beans) during asynchronous processing of a message.\n      * It does this by calling the listener's <code>onException()</code> method passing it a <code>Throwable</code>\n      * describing the problem.\n-     * \n+     *\n      * @param listener the exception listener\n      */\n     public void setClientInternalExceptionListener(ClientInternalExceptionListener listener)\n     {\n         this.clientInternalExceptionListener = listener;\n     }\n-    \n+\n     /**\n      * Starts (or restarts) a connection's delivery of incoming messages. A call\n      * to <CODE>start</CODE> on a connection that has already been started is\n      * ignored.\n-     * \n+     *\n      * @throws JMSException if the JMS provider fails to start message delivery\n      *                 due to some internal error.\n      * @see javax.jms.Connection#stop()\n@@ -537,7 +537,7 @@ public void start() throws JMSException {\n      * <CODE>stop</CODE> call must wait until all of them have returned before\n      * it may return. While these message listeners are completing, they must\n      * have the full services of the connection available to them.\n-     * \n+     *\n      * @throws JMSException if the JMS provider fails to stop message delivery\n      *                 due to some internal error.\n      * @see javax.jms.Connection#start()\n@@ -591,7 +591,7 @@ public void stop() throws JMSException {\n      * a closed connection's session must throw an\n      * <CODE>IllegalStateException</CODE>. Closing a closed connection must\n      * NOT throw an exception.\n-     * \n+     *\n      * @throws JMSException if the JMS provider fails to close the connection\n      *                 due to some internal error. For example, a failure to\n      *                 release resources or to close a socket connection can\n@@ -651,7 +651,7 @@ public void close() throws JMSException {\n                         ActiveMQTempDestination c = i.next();\n                         c.delete();\n                     }\n-                    \n+\n                     if (isConnectionInfoSentToBroker) {\n                         // If we announced ourselfs to the broker.. Try to let\n                         // the broker\n@@ -706,7 +706,7 @@ public void close() throws JMSException {\n     /**\n      * Create a durable connection consumer for this connection (optional\n      * operation). This is an expert facility not used by regular JMS clients.\n-     * \n+     *\n      * @param topic topic to access\n      * @param subscriptionName durable subscription name\n      * @param messageSelector only messages with properties matching the message\n@@ -737,7 +737,7 @@ public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String su\n     /**\n      * Create a durable connection consumer for this connection (optional\n      * operation). This is an expert facility not used by regular JMS clients.\n-     * \n+     *\n      * @param topic topic to access\n      * @param subscriptionName durable subscription name\n      * @param messageSelector only messages with properties matching the message\n@@ -788,7 +788,7 @@ public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String su\n \n     /**\n      * Returns true if this connection has been started\n-     * \n+     *\n      * @return true if this Connection is started\n      */\n     public boolean isStarted() {\n@@ -936,7 +936,7 @@ public boolean isExclusiveConsumer() {\n      * Enables or disables whether or not queue consumers should be exclusive or\n      * not for example to preserve ordering when not using <a\n      * href=\"http://activemq.apache.org/message-groups.html\">Message Groups</a>\n-     * \n+     *\n      * @param exclusiveConsumer\n      */\n     public void setExclusiveConsumer(boolean exclusiveConsumer) {\n@@ -958,7 +958,7 @@ public void removeTransportListener(TransportListener transportListener) {\n     public boolean isUseDedicatedTaskRunner() {\n         return useDedicatedTaskRunner;\n     }\n-    \n+\n     public void setUseDedicatedTaskRunner(boolean useDedicatedTaskRunner) {\n         this.useDedicatedTaskRunner = useDedicatedTaskRunner;\n     }\n@@ -1023,7 +1023,7 @@ public DestinationSource getDestinationSource() throws JMSException {\n \n     /**\n      * Used internally for adding Sessions to the Connection\n-     * \n+     *\n      * @param session\n      * @throws JMSException\n      * @throws JMSException\n@@ -1037,7 +1037,7 @@ protected void addSession(ActiveMQSession session) throws JMSException {\n \n     /**\n      * Used interanlly for removing Sessions from a Connection\n-     * \n+     *\n      * @param session\n      */\n     protected void removeSession(ActiveMQSession session) {\n@@ -1047,7 +1047,7 @@ protected void removeSession(ActiveMQSession session) {\n \n     /**\n      * Add a ConnectionConsumer\n-     * \n+     *\n      * @param connectionConsumer\n      * @throws JMSException\n      */\n@@ -1057,7 +1057,7 @@ protected void addConnectionConsumer(ActiveMQConnectionConsumer connectionConsum\n \n     /**\n      * Remove a ConnectionConsumer\n-     * \n+     *\n      * @param connectionConsumer\n      */\n     protected void removeConnectionConsumer(ActiveMQConnectionConsumer connectionConsumer) {\n@@ -1067,7 +1067,7 @@ protected void removeConnectionConsumer(ActiveMQConnectionConsumer connectionCon\n \n     /**\n      * Creates a <CODE>TopicSession</CODE> object.\n-     * \n+     *\n      * @param transacted indicates whether the session is transacted\n      * @param acknowledgeMode indicates whether the consumer or the client will\n      *                acknowledge any messages it receives; ignored if the\n@@ -1091,7 +1091,7 @@ public TopicSession createTopicSession(boolean transacted, int acknowledgeMode)\n     /**\n      * Creates a connection consumer for this connection (optional operation).\n      * This is an expert facility not used by regular JMS clients.\n-     * \n+     *\n      * @param topic the topic to access\n      * @param messageSelector only messages with properties matching the message\n      *                selector expression are delivered. A value of null or an\n@@ -1119,7 +1119,7 @@ public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSe\n     /**\n      * Creates a connection consumer for this connection (optional operation).\n      * This is an expert facility not used by regular JMS clients.\n-     * \n+     *\n      * @param queue the queue to access\n      * @param messageSelector only messages with properties matching the message\n      *                selector expression are delivered. A value of null or an\n@@ -1147,7 +1147,7 @@ public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSe\n     /**\n      * Creates a connection consumer for this connection (optional operation).\n      * This is an expert facility not used by regular JMS clients.\n-     * \n+     *\n      * @param destination the destination to access\n      * @param messageSelector only messages with properties matching the message\n      *                selector expression are delivered. A value of null or an\n@@ -1212,7 +1212,7 @@ private ProducerId createProducerId() {\n \n     /**\n      * Creates a <CODE>QueueSession</CODE> object.\n-     * \n+     *\n      * @param transacted indicates whether the session is transacted\n      * @param acknowledgeMode indicates whether the consumer or the client will\n      *                acknowledge any messages it receives; ignored if the\n@@ -1238,7 +1238,7 @@ public QueueSession createQueueSession(boolean transacted, int acknowledgeMode)\n      * If the clientID was not specified this method will throw an exception.\n      * This method is used to ensure that the clientID + durableSubscriber name\n      * are used correctly.\n-     * \n+     *\n      * @throws JMSException\n      */\n     public void checkClientIDWasManuallySpecified() throws JMSException {\n@@ -1249,7 +1249,7 @@ public void checkClientIDWasManuallySpecified() throws JMSException {\n \n     /**\n      * send a Packet through the Connection - for internal use only\n-     * \n+     *\n      * @param command\n      * @throws JMSException\n      */\n@@ -1261,17 +1261,17 @@ public void asyncSendPacket(Command command) throws JMSException {\n         }\n     }\n \n-\tprivate void doAsyncSendPacket(Command command) throws JMSException {\n-\t\ttry {\n-\t\t    this.transport.oneway(command);\n-\t\t} catch (IOException e) {\n-\t\t    throw JMSExceptionSupport.create(e);\n-\t\t}\n-\t}\n+    private void doAsyncSendPacket(Command command) throws JMSException {\n+        try {\n+            this.transport.oneway(command);\n+        } catch (IOException e) {\n+            throw JMSExceptionSupport.create(e);\n+        }\n+    }\n \n     /**\n      * Send a packet through a Connection - for internal use only\n-     * \n+     *\n      * @param command\n      * @return\n      * @throws JMSException\n@@ -1311,7 +1311,7 @@ public Response syncSendPacket(Command command) throws JMSException {\n \n     /**\n      * Send a packet through a Connection - for internal use only\n-     * \n+     *\n      * @param command\n      * @return\n      * @throws JMSException\n@@ -1324,25 +1324,25 @@ public Response syncSendPacket(Command command, int timeout) throws JMSException\n         }\n     }\n \n-\tprivate Response doSyncSendPacket(Command command, int timeout)\n-\t\t\tthrows JMSException {\n-\t\ttry {\n-\t\t    Response response = (Response) (timeout > 0\n-                    ? this.transport.request(command, timeout) \n+    private Response doSyncSendPacket(Command command, int timeout)\n+            throws JMSException {\n+        try {\n+            Response response = (Response) (timeout > 0\n+                    ? this.transport.request(command, timeout)\n                     : this.transport.request(command));\n-\t\t    if (response != null && response.isException()) {\n-\t\t        ExceptionResponse er = (ExceptionResponse)response;\n-\t\t        if (er.getException() instanceof JMSException) {\n-\t\t            throw (JMSException)er.getException();\n-\t\t        } else {\n-\t\t            throw JMSExceptionSupport.create(er.getException());\n-\t\t        }\n-\t\t    }\n-\t\t    return response;\n-\t\t} catch (IOException e) {\n-\t\t    throw JMSExceptionSupport.create(e);\n-\t\t}\n-\t}\n+            if (response != null && response.isException()) {\n+                ExceptionResponse er = (ExceptionResponse)response;\n+                if (er.getException() instanceof JMSException) {\n+                    throw (JMSException)er.getException();\n+                } else {\n+                    throw JMSExceptionSupport.create(er.getException());\n+                }\n+            }\n+            return response;\n+        } catch (IOException e) {\n+            throw JMSExceptionSupport.create(e);\n+        }\n+    }\n \n     /**\n      * @return statistics for this Connection\n@@ -1354,7 +1354,7 @@ public StatsImpl getStats() {\n     /**\n      * simply throws an exception if the Connection is already closed or the\n      * Transport has failed\n-     * \n+     *\n      * @throws JMSException\n      */\n     protected synchronized void checkClosedOrFailed() throws JMSException {\n@@ -1366,7 +1366,7 @@ protected synchronized void checkClosedOrFailed() throws JMSException {\n \n     /**\n      * simply throws an exception if the Connection is already closed\n-     * \n+     *\n      * @throws JMSException\n      */\n     protected synchronized void checkClosed() throws JMSException {\n@@ -1377,7 +1377,7 @@ protected synchronized void checkClosed() throws JMSException {\n \n     /**\n      * Send the ConnectionInfo to the Broker\n-     * \n+     *\n      * @throws JMSException\n      */\n     protected void ensureConnectionInfoSent() throws JMSException {\n@@ -1391,12 +1391,12 @@ protected void ensureConnectionInfoSent() throws JMSException {\n                 info.setClientId(clientIdGenerator.generateId());\n             }\n             syncSendPacket(info.copy());\n-    \n+\n             this.isConnectionInfoSentToBroker = true;\n             // Add a temp destination advisory consumer so that\n             // We know what the valid temporary destinations are on the\n             // broker without having to do an RPC to the broker.\n-    \n+\n             ConsumerId consumerId = new ConsumerId(new SessionId(info.getConnectionId(), -1), consumerIdGenerator.getNextSequenceId());\n             if (watchTopicAdvisories) {\n                 advisoryConsumer = new AdvisoryConsumer(this, consumerId);\n@@ -1439,13 +1439,13 @@ public boolean isAlwaysSyncSend() {\n \n     /**\n      * Set true if always require messages to be sync sent\n-     * \n+     *\n      * @param alwaysSyncSend\n      */\n     public void setAlwaysSyncSend(boolean alwaysSyncSend) {\n         this.alwaysSyncSend = alwaysSyncSend;\n     }\n-    \n+\n     /**\n      * @return the messagePrioritySupported\n      */\n@@ -1509,7 +1509,7 @@ public void cleanup() throws JMSException {\n      * Changes the associated username/password that is associated with this\n      * connection. If the connection has been used, you must called cleanup()\n      * before calling this method.\n-     * \n+     *\n      * @throws IllegalStateException if the connection is in used.\n      */\n     public void changeUserInfo(String userName, String password) throws JMSException {\n@@ -1614,7 +1614,7 @@ public boolean isOptimizeAcknowledge() {\n     /**\n      * Enables an optimised acknowledgement mode where messages are acknowledged\n      * in batches rather than individually\n-     * \n+     *\n      * @param optimizeAcknowledge The optimizeAcknowledge to set.\n      */\n     public void setOptimizeAcknowledge(boolean optimizeAcknowledge) {\n@@ -1650,7 +1650,7 @@ public long getWarnAboutUnstartedConnectionTimeout() {\n     public void setWarnAboutUnstartedConnectionTimeout(long warnAboutUnstartedConnectionTimeout) {\n         this.warnAboutUnstartedConnectionTimeout = warnAboutUnstartedConnectionTimeout;\n     }\n-    \n+\n     /**\n      * @return the sendTimeout\n      */\n@@ -1664,7 +1664,7 @@ public int getSendTimeout() {\n     public void setSendTimeout(int sendTimeout) {\n         this.sendTimeout = sendTimeout;\n     }\n-    \n+\n     /**\n      * @return the sendAcksAsync\n      */\n@@ -1824,7 +1824,7 @@ protected void onWireFormatInfo(WireFormatInfo info) {\n      * message that does not affect the connection itself.\n      * This method notifies the <code>ClientInternalExceptionListener</code> by invoking\n      * its <code>onException</code> method, if one has been registered with this connection.\n-     * \n+     *\n      * @param error the exception that the problem\n      */\n     public void onClientInternalException(final Throwable error) {\n@@ -1836,14 +1836,14 @@ public void run() {\n                     }\n                 });\n             } else {\n-                LOG.debug(\"Async client internal exception occurred with no exception listener registered: \" \n+                LOG.debug(\"Async client internal exception occurred with no exception listener registered: \"\n                         + error, error);\n             }\n         }\n     }\n     /**\n      * Used for handling async exceptions\n-     * \n+     *\n      * @param error\n      */\n     public void onAsyncException(Throwable error) {\n@@ -1868,27 +1868,27 @@ public void run() {\n     }\n \n     public void onException(final IOException error) {\n-\t\tonAsyncException(error);\n-\t\tif (!closing.get() && !closed.get()) {\n-\t\t\texecutor.execute(new Runnable() {\n-\t\t\t\tpublic void run() {\n-\t\t\t\t\ttransportFailed(error);\n-\t\t\t\t\tServiceSupport.dispose(ActiveMQConnection.this.transport);\n-\t\t\t\t\tbrokerInfoReceived.countDown();\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tcleanup();\n-\t\t\t\t\t} catch (JMSException e) {\n-\t\t\t\t\t\tLOG.warn(\"Exception during connection cleanup, \" + e, e);\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (Iterator<TransportListener> iter = transportListeners\n-\t\t\t\t\t\t\t.iterator(); iter.hasNext();) {\n-\t\t\t\t\t\tTransportListener listener = iter.next();\n-\t\t\t\t\t\tlistener.onException(error);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n+        onAsyncException(error);\n+        if (!closing.get() && !closed.get()) {\n+            executor.execute(new Runnable() {\n+                public void run() {\n+                    transportFailed(error);\n+                    ServiceSupport.dispose(ActiveMQConnection.this.transport);\n+                    brokerInfoReceived.countDown();\n+                    try {\n+                        cleanup();\n+                    } catch (JMSException e) {\n+                        LOG.warn(\"Exception during connection cleanup, \" + e, e);\n+                    }\n+                    for (Iterator<TransportListener> iter = transportListeners\n+                            .iterator(); iter.hasNext();) {\n+                        TransportListener listener = iter.next();\n+                        listener.onException(error);\n+                    }\n+                }\n+            });\n+        }\n+    }\n \n     public void transportInterupted() {\n         this.transportInterruptionProcessingComplete = new CountDownLatch(dispatchers.size() - (advisoryConsumer != null ? 1:0));\n@@ -1901,11 +1901,11 @@ public void transportInterupted() {\n             ActiveMQSession s = i.next();\n             s.clearMessagesInProgress();\n         }\n-        \n+\n         for (ActiveMQConnectionConsumer connectionConsumer : this.connectionConsumers) {\n-            connectionConsumer.clearMessagesInProgress();    \n+            connectionConsumer.clearMessagesInProgress();\n         }\n-        \n+\n         for (Iterator<TransportListener> iter = transportListeners.iterator(); iter.hasNext();) {\n             TransportListener listener = iter.next();\n             listener.transportInterupted();\n@@ -1921,7 +1921,7 @@ public void transportResumed() {\n \n     /**\n      * Create the DestinationInfo object for the temporary destination.\n-     * \n+     *\n      * @param topic - if its true topic, else queue.\n      * @return DestinationInfo\n      * @throws JMSException\n@@ -2029,7 +2029,7 @@ public boolean isDispatchAsync() {\n      * minimize context switches which boost performance. However sometimes its\n      * better to go slower to ensure that a single blocked consumer socket does\n      * not block delivery to other consumers.\n-     * \n+     *\n      * @param asyncDispatch If true then consumers created on this connection\n      *                will default to having their messages dispatched\n      *                asynchronously. The default value is false.\n@@ -2069,7 +2069,7 @@ public InputStream createInputStream(Destination dest, String messageSelector, b\n     public InputStream createInputStream(Destination dest, String messageSelector, boolean noLocal, long timeout) throws JMSException {\n         return doCreateInputStream(dest, messageSelector, noLocal, null, timeout);\n     }\n-    \n+\n     public InputStream createDurableInputStream(Topic dest, String name) throws JMSException {\n         return createInputStream(dest, null, false);\n     }\n@@ -2085,7 +2085,7 @@ public InputStream createDurableInputStream(Topic dest, String name, String mess\n     public InputStream createDurableInputStream(Topic dest, String name, String messageSelector, boolean noLocal, long timeout) throws JMSException {\n         return doCreateInputStream(dest, messageSelector, noLocal, name, timeout);\n     }\n-    \n+\n     private InputStream doCreateInputStream(Destination dest, String messageSelector, boolean noLocal, String subName, long timeout) throws JMSException {\n         checkClosedOrFailed();\n         ensureConnectionInfoSent();\n@@ -2112,7 +2112,7 @@ public OutputStream createNonPersistentOutputStream(Destination dest) throws JMS\n      * Creates an output stream allowing full control over the delivery mode,\n      * the priority and time to live of the messages and the properties added to\n      * messages on the stream.\n-     * \n+     *\n      * @param streamProperties defines a map of key-value pairs where the keys\n      *                are strings and the values are primitive values (numbers\n      *                and strings) which are appended to the messages similarly\n@@ -2137,7 +2137,7 @@ public OutputStream createOutputStream(Destination dest, Map<String, Object> str\n      * <CODE>TopicSubscriber</CODE> for the subscription, or while a consumed\n      * message is part of a pending transaction or has not been acknowledged in\n      * the session.\n-     * \n+     *\n      * @param name the name used to identify this subscription\n      * @throws JMSException if the session fails to unsubscribe to the durable\n      *                 subscription due to some internal error.\n@@ -2290,11 +2290,11 @@ public void setProducerWindowSize(int producerWindowSize) {\n \n     public void setAuditDepth(int auditDepth) {\n         connectionAudit.setAuditDepth(auditDepth);\n-\t}\n+    }\n \n     public void setAuditMaximumProducerNumber(int auditMaximumProducerNumber) {\n         connectionAudit.setAuditMaximumProducerNumber(auditMaximumProducerNumber);\n-\t}\n+    }\n \n     protected void removeDispatcher(ActiveMQDispatcher dispatcher) {\n         connectionAudit.removeDispatcher(dispatcher);\n@@ -2308,30 +2308,30 @@ protected void rollbackDuplicate(ActiveMQDispatcher dispatcher, Message message)\n         connectionAudit.rollbackDuplicate(dispatcher, message);\n     }\n \n-\tpublic IOException getFirstFailureError() {\n-\t\treturn firstFailureError;\n-\t}\n-\t\n-\tprotected void waitForTransportInterruptionProcessingToComplete() throws InterruptedException {\n-\t    CountDownLatch cdl = this.transportInterruptionProcessingComplete;\n-\t    if (cdl != null) {\n+    public IOException getFirstFailureError() {\n+        return firstFailureError;\n+    }\n+\n+    protected void waitForTransportInterruptionProcessingToComplete() throws InterruptedException {\n+        CountDownLatch cdl = this.transportInterruptionProcessingComplete;\n+        if (cdl != null) {\n             if (!closed.get() && !transportFailed.get() && cdl.getCount()>0) {\n                 LOG.warn(\"dispatch paused, waiting for outstanding dispatch interruption processing (\" + cdl.getCount() + \") to complete..\");\n                 cdl.await(10, TimeUnit.SECONDS);\n             }\n             signalInterruptionProcessingComplete();\n         }\n     }\n-\t\n-\tprotected void transportInterruptionProcessingComplete() {\n-\t    CountDownLatch cdl = this.transportInterruptionProcessingComplete;\n-\t    if (cdl != null) {\n-\t        cdl.countDown();\n-\t        try {\n-\t            signalInterruptionProcessingComplete();\n-\t        } catch (InterruptedException ignored) {}\n-\t    }\n-\t}\n+\n+    protected void transportInterruptionProcessingComplete() {\n+        CountDownLatch cdl = this.transportInterruptionProcessingComplete;\n+        if (cdl != null) {\n+            cdl.countDown();\n+            try {\n+                signalInterruptionProcessingComplete();\n+            } catch (InterruptedException ignored) {}\n+        }\n+    }\n \n     private void signalInterruptionProcessingComplete() throws InterruptedException {\n         CountDownLatch cdl = this.transportInterruptionProcessingComplete;\n@@ -2372,15 +2372,15 @@ private void signalInterruptionProcessingNeeded() {\n     public void setConsumerFailoverRedeliveryWaitPeriod(long consumerFailoverRedeliveryWaitPeriod) {\n         this.consumerFailoverRedeliveryWaitPeriod = consumerFailoverRedeliveryWaitPeriod;\n     }\n-    \n+\n     public long getConsumerFailoverRedeliveryWaitPeriod() {\n         return consumerFailoverRedeliveryWaitPeriod;\n     }\n-    \n+\n     protected Scheduler getScheduler() {\n         return this.scheduler;\n     }\n-    \n+\n     protected ThreadPoolExecutor getExecutor() {\n         return this.executor;\n     }\n@@ -2399,4 +2399,28 @@ public void setCheckForDuplicates(boolean checkForDuplicates) {\n         this.checkForDuplicates = checkForDuplicates;\n     }\n \n+    /**\n+     * Removes any TempDestinations that this connection has cached, ignoring\n+     * any exceptions generated because the destination is in use as they should\n+     * not be removed.\n+     */\n+    public void cleanUpTempDestinations() {\n+\n+        if (this.activeTempDestinations == null || this.activeTempDestinations.isEmpty()) {\n+            return;\n+        }\n+\n+        Iterator<ConcurrentHashMap.Entry<ActiveMQTempDestination, ActiveMQTempDestination>> entries\n+            = this.activeTempDestinations.entrySet().iterator();\n+        while(entries.hasNext()) {\n+            ConcurrentHashMap.Entry<ActiveMQTempDestination, ActiveMQTempDestination> entry = entries.next();\n+            try {\n+                this.deleteTempDestination(entry.getValue());\n+            } catch (Exception ex) {\n+                // the temp dest is in use so it can not be deleted.\n+                // it is ok to leave it to connection tear down phase\n+            }\n+        }\n+    }\n+\n }",
                "changes": 276,
                "blob_url": "https://github.com/apache/activemq/blob/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java"
            },
            {
                "additions": 11,
                "sha": "a8d79164d409a249d65c8f07f5241a3c3b8e5c04",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java",
                "deletions": 5,
                "filename": "activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java?ref=d226f5089f63cf5fe46b6cccbd0c573d1dfeba45",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.activemq.pool;\n \n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import javax.jms.Connection;\n import javax.jms.ConnectionConsumer;\n import javax.jms.ConnectionMetaData;\n@@ -36,18 +39,19 @@\n import org.apache.activemq.AlreadyClosedException;\n import org.apache.activemq.EnhancedConnection;\n import org.apache.activemq.advisory.DestinationSource;\n+import org.apache.activemq.command.ActiveMQTempDestination;\n \n /**\n  * Represents a proxy {@link Connection} which is-a {@link TopicConnection} and\n  * {@link QueueConnection} which is pooled and on {@link #close()} will return\n  * itself to the sessionPool.\n- * \n+ *\n  * <b>NOTE</b> this implementation is only intended for use when sending\n  * messages. It does not deal with pooling of consumers; for that look at a\n  * library like <a href=\"http://jencks.org/\">Jencks</a> such as in <a\n  * href=\"http://jencks.org/Message+Driven+POJOs\">this example</a>\n- * \n- * \n+ *\n+ *\n  */\n public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {\n \n@@ -69,6 +73,9 @@ public PooledConnection newInstance() {\n     public void close() throws JMSException {\n         if (this.pool != null) {\n             this.pool.decrementReferenceCount();\n+            if (this.pool.getConnection() != null) {\n+                this.pool.getConnection().cleanUpTempDestinations();\n+            }\n             this.pool = null;\n         }\n     }\n@@ -143,7 +150,7 @@ public Session createSession(boolean transacted, int ackMode) throws JMSExceptio\n \n     // EnhancedCollection API\n     // -------------------------------------------------------------------------\n-    \n+\n     public DestinationSource getDestinationSource() throws JMSException {\n         return getConnection().getDestinationSource();\n     }\n@@ -169,5 +176,4 @@ protected ActiveMQSession createSession(SessionKey key) throws JMSException {\n     public String toString() {\n         return \"PooledConnection { \" + pool + \" }\";\n     }\n-\n }",
                "changes": 16,
                "blob_url": "https://github.com/apache/activemq/blob/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java"
            },
            {
                "additions": 93,
                "sha": "9dacb903651dc4d8436713ab7e3d1a38582acc58",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java",
                "deletions": 0,
                "filename": "activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java?ref=d226f5089f63cf5fe46b6cccbd0c573d1dfeba45",
                "patch": "@@ -0,0 +1,93 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.pool;\n+\n+import javax.jms.Queue;\n+import javax.jms.Session;\n+import javax.jms.Topic;\n+import javax.jms.Connection;\n+\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.TransportConnector;\n+import org.apache.activemq.broker.region.RegionBroker;\n+import org.apache.activemq.test.TestSupport;\n+import org.apache.activemq.ActiveMQConnectionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @version $Revision: 1.1 $\n+ */\n+public class PooledConnectionFactoryWithTemporaryDestinationsTest extends TestSupport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PooledConnectionFactoryWithTemporaryDestinationsTest.class);\n+\n+    private BrokerService broker;\n+    private ActiveMQConnectionFactory factory;\n+    private PooledConnectionFactory pooledFactory;\n+\n+    protected void setUp() throws Exception {\n+        broker = new BrokerService();\n+        broker.setPersistent(false);\n+        TransportConnector connector = broker.addConnector(\"tcp://localhost:0\");\n+        broker.start();\n+        factory = new ActiveMQConnectionFactory(\"mock:\" + connector.getConnectUri() + \"?closeAsync=false\");\n+        pooledFactory = new PooledConnectionFactory(factory);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        broker.stop();\n+    }\n+\n+    public void testTemporaryQueueLeakAfterConnectionClose() throws Exception {\n+        Connection pooledConnection = null;\n+        Session session = null;\n+        Queue tempQueue = null;\n+        for (int i = 0; i < 2; i++) {\n+            pooledConnection = pooledFactory.createConnection();\n+            session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+            tempQueue = session.createTemporaryQueue();\n+            LOG.info(\"Created queue named: \" + tempQueue.getQueueName());\n+            pooledConnection.close();\n+        }\n+\n+        assertEquals(0, countBrokerTemporaryQueues());\n+    }\n+\n+    public void testTemporaryTopicLeakAfterConnectionClose() throws Exception {\n+        Connection pooledConnection = null;\n+        Session session = null;\n+        Topic tempTopic = null;\n+        for (int i = 0; i < 2; i++) {\n+            pooledConnection = pooledFactory.createConnection();\n+            session = pooledConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+            tempTopic = session.createTemporaryTopic();\n+            LOG.info(\"Created topic named: \" + tempTopic.getTopicName());\n+            pooledConnection.close();\n+        }\n+\n+        assertEquals(0, countBrokerTemporaryTopics());\n+    }\n+\n+    private int countBrokerTemporaryQueues() throws Exception {\n+        return ((RegionBroker) broker.getRegionBroker()).getTempQueueRegion().getDestinationMap().size();\n+    }\n+\n+    private int countBrokerTemporaryTopics() throws Exception {\n+        return ((RegionBroker) broker.getRegionBroker()).getTempTopicRegion().getDestinationMap().size();\n+    }\n+}",
                "changes": 93,
                "blob_url": "https://github.com/apache/activemq/blob/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45/activemq-pool/src/test/java/org/apache/activemq/pool/PooledConnectionFactoryWithTemporaryDestinationsTest.java"
            }
        ],
        "repo": "activemq",
        "message": "fix for: https://issues.apache.org/jira/browse/AMQ-2349\nfix for: https://issues.apache.org/jira/browse/AMQ-2716\n\nWhen a PooledConnection is closed the Temp Destinations of the contained Connection should be removed.\n\nApplied patch from AMQ-2349 with modifications to prevent NullPointerExceptions and some other small cleanups.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1142267 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/d226f5089f63cf5fe46b6cccbd0c573d1dfeba45"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/9f0ab46e293e6d31369f06f6669cd3d63db906fa",
        "bug_id": "activemq_110",
        "file": [
            {
                "additions": 15,
                "sha": "6c3fdc3acce58a56aedb406150f2958adf4bca4f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java",
                "deletions": 10,
                "filename": "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java?ref=f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb",
                "patch": "@@ -21,8 +21,13 @@\n import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import javax.jms.*;\n+import javax.jms.Connection;\n+import javax.jms.ExceptionListener;\n import javax.jms.IllegalStateException;\n+import javax.jms.JMSException;\n+import javax.jms.Session;\n+import javax.jms.TemporaryQueue;\n+import javax.jms.TemporaryTopic;\n \n import org.apache.commons.pool.KeyedPoolableObjectFactory;\n import org.apache.commons.pool.impl.GenericKeyedObjectPool;\n@@ -51,7 +56,7 @@\n     private boolean useAnonymousProducers = true;\n \n     private final AtomicBoolean started = new AtomicBoolean(false);\n-    private final GenericKeyedObjectPool<SessionKey, Session> sessionPool;\n+    private final GenericKeyedObjectPool<SessionKey, SessionHolder> sessionPool;\n     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();\n     private boolean reconnectOnException;\n     private ExceptionListener parentExceptionListener;\n@@ -61,29 +66,29 @@ public ConnectionPool(Connection connection) {\n         this.connection = wrap(connection);\n \n         // Create our internal Pool of session instances.\n-        this.sessionPool = new GenericKeyedObjectPool<SessionKey, Session>(\n-            new KeyedPoolableObjectFactory<SessionKey, Session>() {\n+        this.sessionPool = new GenericKeyedObjectPool<SessionKey, SessionHolder>(\n+            new KeyedPoolableObjectFactory<SessionKey, SessionHolder>() {\n \n                 @Override\n-                public void activateObject(SessionKey key, Session session) throws Exception {\n+                public void activateObject(SessionKey key, SessionHolder session) throws Exception {\n                 }\n \n                 @Override\n-                public void destroyObject(SessionKey key, Session session) throws Exception {\n+                public void destroyObject(SessionKey key, SessionHolder session) throws Exception {\n                     session.close();\n                 }\n \n                 @Override\n-                public Session makeObject(SessionKey key) throws Exception {\n-                    return makeSession(key);\n+                public SessionHolder makeObject(SessionKey key) throws Exception {\n+                    return new SessionHolder(makeSession(key));\n                 }\n \n                 @Override\n-                public void passivateObject(SessionKey key, Session session) throws Exception {\n+                public void passivateObject(SessionKey key, SessionHolder session) throws Exception {\n                 }\n \n                 @Override\n-                public boolean validateObject(SessionKey key, Session session) {\n+                public boolean validateObject(SessionKey key, SessionHolder session) {\n                     return true;\n                 }\n             }",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java"
            },
            {
                "additions": 3,
                "sha": "b7b56ba14b977cf6b39a5c791672e15109b7701a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java",
                "deletions": 3,
                "filename": "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java?ref=f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb",
                "patch": "@@ -24,6 +24,7 @@\n import javax.jms.ConnectionMetaData;\n import javax.jms.Destination;\n import javax.jms.ExceptionListener;\n+import javax.jms.IllegalStateException;\n import javax.jms.JMSException;\n import javax.jms.Queue;\n import javax.jms.QueueConnection;\n@@ -35,7 +36,7 @@\n import javax.jms.Topic;\n import javax.jms.TopicConnection;\n import javax.jms.TopicSession;\n-import javax.jms.IllegalStateException;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -163,8 +164,7 @@ public TopicSession createTopicSession(boolean transacted, int ackMode) throws J\n \n     @Override\n     public Session createSession(boolean transacted, int ackMode) throws JMSException {\n-        PooledSession result;\n-        result = (PooledSession) pool.createSession(transacted, ackMode);\n+        PooledSession result = (PooledSession) pool.createSession(transacted, ackMode);\n \n         // Store the session so we can close the sessions that this PooledConnection\n         // created in order to ensure that consumers etc are closed per the JMS contract.",
                "changes": 6,
                "blob_url": "https://github.com/apache/activemq/blob/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java"
            },
            {
                "additions": 30,
                "sha": "cbfec293faf0a385535188dd959165741181c422",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java",
                "deletions": 51,
                "filename": "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java?ref=f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb",
                "patch": "@@ -55,25 +55,21 @@\n     private static final transient Logger LOG = LoggerFactory.getLogger(PooledSession.class);\n \n     private final SessionKey key;\n-    private final KeyedObjectPool<SessionKey, Session> sessionPool;\n+    private final KeyedObjectPool<SessionKey, SessionHolder> sessionPool;\n     private final CopyOnWriteArrayList<MessageConsumer> consumers = new CopyOnWriteArrayList<MessageConsumer>();\n     private final CopyOnWriteArrayList<QueueBrowser> browsers = new CopyOnWriteArrayList<QueueBrowser>();\n     private final CopyOnWriteArrayList<PooledSessionEventListener> sessionEventListeners = new CopyOnWriteArrayList<PooledSessionEventListener>();\n     private final AtomicBoolean closed = new AtomicBoolean();\n \n-    private MessageProducer producer;\n-    private TopicPublisher publisher;\n-    private QueueSender sender;\n-\n-    private Session session;\n+    private SessionHolder sessionHolder;\n     private boolean transactional = true;\n     private boolean ignoreClose;\n     private boolean isXa;\n     private boolean useAnonymousProducers = true;\n \n-    public PooledSession(SessionKey key, Session session, KeyedObjectPool<SessionKey, Session> sessionPool, boolean transactional, boolean anonymous) {\n+    public PooledSession(SessionKey key, SessionHolder sessionHolder, KeyedObjectPool<SessionKey, SessionHolder> sessionPool, boolean transactional, boolean anonymous) {\n         this.key = key;\n-        this.session = session;\n+        this.sessionHolder = sessionHolder;\n         this.sessionPool = sessionPool;\n         this.transactional = transactional;\n         this.useAnonymousProducers = anonymous;\n@@ -140,29 +136,29 @@ public void close() throws JMSException {\n             if (invalidate) {\n                 // lets close the session and not put the session back into the pool\n                 // instead invalidate it so the pool can create a new one on demand.\n-                if (session != null) {\n+                if (sessionHolder != null) {\n                     try {\n-                        session.close();\n+                        sessionHolder.close();\n                     } catch (JMSException e1) {\n                         LOG.trace(\"Ignoring exception on close as discarding session: \" + e1, e1);\n                     }\n                 }\n                 try {\n-                    sessionPool.invalidateObject(key, session);\n+                    sessionPool.invalidateObject(key, sessionHolder);\n                 } catch (Exception e) {\n                     LOG.trace(\"Ignoring exception on invalidateObject as discarding session: \" + e, e);\n                 }\n             } else {\n                 try {\n-                    sessionPool.returnObject(key, session);\n+                    sessionPool.returnObject(key, sessionHolder);\n                 } catch (Exception e) {\n                     javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());\n                     illegalStateException.initCause(e);\n                     throw illegalStateException;\n                 }\n             }\n \n-            session = null;\n+            sessionHolder = null;\n         }\n     }\n \n@@ -276,9 +272,12 @@ public void rollback() throws JMSException {\n \n     @Override\n     public XAResource getXAResource() {\n-        if (session instanceof XASession) {\n-            return ((XASession) session).getXAResource();\n+        SessionHolder session = safeGetSessionHolder();\n+\n+        if (session.getSession() instanceof XASession) {\n+            return ((XASession) session.getSession()).getXAResource();\n         }\n+\n         return null;\n     }\n \n@@ -289,8 +288,9 @@ public Session getSession() {\n \n     @Override\n     public void run() {\n+        SessionHolder session = safeGetSessionHolder();\n         if (session != null) {\n-            session.run();\n+            session.getSession().run();\n         }\n     }\n \n@@ -379,10 +379,7 @@ public TopicPublisher createPublisher(Topic topic) throws JMSException {\n     }\n \n     public Session getInternalSession() throws IllegalStateException {\n-        if (session == null) {\n-            throw new IllegalStateException(\"The session has already been closed\");\n-        }\n-        return session;\n+        return safeGetSessionHolder().getSession();\n     }\n \n     public MessageProducer getMessageProducer() throws JMSException {\n@@ -393,16 +390,7 @@ public MessageProducer getMessageProducer(Destination destination) throws JMSExc\n         MessageProducer result = null;\n \n         if (useAnonymousProducers) {\n-            if (producer == null) {\n-                // Don't allow for duplicate anonymous producers.\n-                synchronized (this) {\n-                    if (producer == null) {\n-                        producer = getInternalSession().createProducer(null);\n-                    }\n-                }\n-            }\n-\n-            result = producer;\n+            result = safeGetSessionHolder().getOrCreateProducer();\n         } else {\n             result = getInternalSession().createProducer(destination);\n         }\n@@ -418,16 +406,7 @@ public QueueSender getQueueSender(Queue destination) throws JMSException {\n         QueueSender result = null;\n \n         if (useAnonymousProducers) {\n-            if (sender == null) {\n-                // Don't allow for duplicate anonymous producers.\n-                synchronized (this) {\n-                    if (sender == null) {\n-                        sender = ((QueueSession) getInternalSession()).createSender(null);\n-                    }\n-                }\n-            }\n-\n-            result = sender;\n+            result = safeGetSessionHolder().getOrCreateSender();\n         } else {\n             result = ((QueueSession) getInternalSession()).createSender(destination);\n         }\n@@ -443,16 +422,7 @@ public TopicPublisher getTopicPublisher(Topic destination) throws JMSException {\n         TopicPublisher result = null;\n \n         if (useAnonymousProducers) {\n-            if (publisher == null) {\n-                // Don't allow for duplicate anonymous producers.\n-                synchronized (this) {\n-                    if (publisher == null) {\n-                        publisher = ((TopicSession) getInternalSession()).createPublisher(null);\n-                    }\n-                }\n-            }\n-\n-            result = publisher;\n+            result = safeGetSessionHolder().getOrCreatePublisher();\n         } else {\n             result = ((TopicSession) getInternalSession()).createPublisher(destination);\n         }\n@@ -489,7 +459,7 @@ public void setIsXa(boolean isXa) {\n \n     @Override\n     public String toString() {\n-        return \"PooledSession { \" + session + \" }\";\n+        return \"PooledSession { \" + safeGetSessionHolder() + \" }\";\n     }\n \n     /**\n@@ -505,4 +475,13 @@ public String toString() {\n     protected void onConsumerClose(MessageConsumer consumer) {\n         consumers.remove(consumer);\n     }\n+\n+    private SessionHolder safeGetSessionHolder() {\n+        SessionHolder sessionHolder = this.sessionHolder;\n+        if (sessionHolder == null) {\n+            throw new IllegalStateException(\"The session has already been closed\");\n+        }\n+\n+        return sessionHolder;\n+    }\n }",
                "changes": 81,
                "blob_url": "https://github.com/apache/activemq/blob/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java"
            },
            {
                "additions": 98,
                "sha": "afa75d67017f708c3d3aca98195a6bf49297dc42",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/SessionHolder.java",
                "deletions": 0,
                "filename": "activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/SessionHolder.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/SessionHolder.java?ref=f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb",
                "patch": "@@ -0,0 +1,98 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.jms.pool;\n+\n+import javax.jms.JMSException;\n+import javax.jms.MessageProducer;\n+import javax.jms.QueueSender;\n+import javax.jms.QueueSession;\n+import javax.jms.Session;\n+import javax.jms.TopicPublisher;\n+import javax.jms.TopicSession;\n+\n+/**\n+ * Used to store a pooled session instance and any resources that can\n+ * be left open and carried along with the pooled instance such as the\n+ * anonymous producer used for all MessageProducer instances created\n+ * from this pooled session when enabled.\n+ */\n+public class SessionHolder {\n+\n+    private final Session session;\n+    private MessageProducer producer;\n+    private TopicPublisher publisher;\n+    private QueueSender sender;\n+\n+    public SessionHolder(Session session) {\n+        this.session = session;\n+    }\n+\n+    public void close() throws JMSException {\n+        try {\n+            session.close();\n+        } finally {\n+            producer = null;\n+            publisher = null;\n+            sender = null;\n+        }\n+    }\n+\n+    public Session getSession() {\n+        return session;\n+    }\n+\n+    public MessageProducer getOrCreateProducer() throws JMSException {\n+        if (producer == null) {\n+            synchronized (this) {\n+                if (producer == null) {\n+                    producer = session.createProducer(null);\n+                }\n+            }\n+        }\n+\n+        return producer;\n+    }\n+\n+    public TopicPublisher getOrCreatePublisher() throws JMSException {\n+        if (publisher == null) {\n+            synchronized (this) {\n+                if (publisher == null) {\n+                    publisher = ((TopicSession) session).createPublisher(null);\n+                }\n+            }\n+        }\n+\n+        return publisher;\n+    }\n+\n+    public QueueSender getOrCreateSender() throws JMSException {\n+        if (sender == null) {\n+            synchronized (this) {\n+                if (sender == null) {\n+                    sender = ((QueueSession) session).createSender(null);\n+                }\n+            }\n+        }\n+\n+        return sender;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return session.toString();\n+    }\n+}",
                "changes": 98,
                "blob_url": "https://github.com/apache/activemq/blob/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/SessionHolder.java"
            },
            {
                "additions": 47,
                "sha": "9432add5aab572d1af44ec15c79c2aaba1ef79b5",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java",
                "deletions": 6,
                "filename": "activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java?ref=f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb",
                "patch": "@@ -17,9 +17,13 @@\n package org.apache.activemq.jms.pool;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import javax.jms.Destination;\n+import javax.jms.MessageProducer;\n import javax.jms.Queue;\n import javax.jms.QueueSession;\n import javax.jms.Session;\n@@ -44,7 +48,8 @@\n     public void setUp() throws Exception {\n         broker = new BrokerService();\n         broker.setPersistent(false);\n-        broker.setUseJmx(false);\n+        broker.setUseJmx(true);\n+        broker.getManagementContext().setCreateMBeanServer(false);\n         TransportConnector connector = broker.addConnector(\"tcp://localhost:0\");\n         broker.start();\n         connectionUri = connector.getPublishableConnectString();\n@@ -62,7 +67,7 @@ public void tearDown() throws Exception {\n         broker = null;\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testPooledSessionStats() throws Exception {\n         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n \n@@ -73,9 +78,11 @@ public void testPooledSessionStats() throws Exception {\n         assertEquals(0, connection.getNumActiveSessions());\n         assertEquals(1, connection.getNumtIdleSessions());\n         assertEquals(1, connection.getNumSessions());\n+\n+        connection.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testMessageProducersAreAllTheSame() throws Exception {\n         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n@@ -87,9 +94,11 @@ public void testMessageProducersAreAllTheSame() throws Exception {\n         PooledProducer producer2 = (PooledProducer) session.createProducer(queue2);\n \n         assertSame(producer1.getMessageProducer(), producer2.getMessageProducer());\n+\n+        connection.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testThrowsWhenDifferentDestinationGiven() throws Exception {\n         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n@@ -110,9 +119,11 @@ public void testThrowsWhenDifferentDestinationGiven() throws Exception {\n             fail(\"Should only be able to send to queue 1\");\n         } catch (Exception ex) {\n         }\n+\n+        connection.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testCreateTopicPublisher() throws Exception {\n         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);\n@@ -124,9 +135,10 @@ public void testCreateTopicPublisher() throws Exception {\n         PooledTopicPublisher publisher2 = (PooledTopicPublisher) session.createPublisher(topic2);\n \n         assertSame(publisher1.getMessageProducer(), publisher2.getMessageProducer());\n+        connection.close();\n     }\n \n-    @Test\n+    @Test(timeout = 60000)\n     public void testQueueSender() throws Exception {\n         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\n@@ -138,5 +150,34 @@ public void testQueueSender() throws Exception {\n         PooledQueueSender sender2 = (PooledQueueSender) session.createSender(queue2);\n \n         assertSame(sender1.getMessageProducer(), sender2.getMessageProducer());\n+        connection.close();\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testRepeatedCreateSessionProducerResultsInSame() throws Exception {\n+        PooledConnection connection = (PooledConnection) pooledFactory.createConnection();\n+\n+        assertTrue(pooledFactory.isUseAnonymousProducers());\n+\n+        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+        Destination destination = session.createTopic(\"test-topic\");\n+        PooledProducer producer = (PooledProducer) session.createProducer(destination);\n+        MessageProducer original = producer.getMessageProducer();\n+        assertNotNull(original);\n+        session.close();\n+\n+        assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);\n+\n+        for (int i = 0; i < 20; ++i) {\n+            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+            producer = (PooledProducer) session.createProducer(destination);\n+            assertSame(original, producer.getMessageProducer());\n+            session.close();\n+        }\n+\n+        assertEquals(1, broker.getAdminView().getDynamicDestinationProducers().length);\n+\n+        connection.close();\n+        pooledFactory.clear();\n     }\n }",
                "changes": 53,
                "blob_url": "https://github.com/apache/activemq/blob/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb/activemq-jms-pool/src/test/java/org/apache/activemq/jms/pool/PooledSessionTest.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5564\n\nFixed session in the pool losing their reference to the anonymous\nproducer created when useAnonymousProducers is true.  The anonymous\nproducer stays live for the life of the pooled session.\n\nAlso added some synchronization safety to some methods that could get\ninto NPE trouble.",
        "commit": "https://github.com/apache/activemq/commit/f91abd3d46ac1f7ded399ce3bbc36fdfb70a91cb"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2a5d0821b181d7e784346776e60b2ab2e128c31d",
        "bug_id": "activemq_111",
        "file": [
            {
                "additions": 110,
                "sha": "45538b4bdf035b928aa1105630e4d6e1ca728af6",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java",
                "deletions": 12,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -36,10 +36,44 @@\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import javax.transaction.xa.XAResource;\n+\n import org.apache.activemq.advisory.AdvisorySupport;\n import org.apache.activemq.broker.region.ConnectionStatistics;\n import org.apache.activemq.broker.region.RegionBroker;\n-import org.apache.activemq.command.*;\n+import org.apache.activemq.command.ActiveMQDestination;\n+import org.apache.activemq.command.BrokerInfo;\n+import org.apache.activemq.command.Command;\n+import org.apache.activemq.command.CommandTypes;\n+import org.apache.activemq.command.ConnectionControl;\n+import org.apache.activemq.command.ConnectionError;\n+import org.apache.activemq.command.ConnectionId;\n+import org.apache.activemq.command.ConnectionInfo;\n+import org.apache.activemq.command.ConsumerControl;\n+import org.apache.activemq.command.ConsumerId;\n+import org.apache.activemq.command.ConsumerInfo;\n+import org.apache.activemq.command.ControlCommand;\n+import org.apache.activemq.command.DataArrayResponse;\n+import org.apache.activemq.command.DestinationInfo;\n+import org.apache.activemq.command.ExceptionResponse;\n+import org.apache.activemq.command.FlushCommand;\n+import org.apache.activemq.command.IntegerResponse;\n+import org.apache.activemq.command.KeepAliveInfo;\n+import org.apache.activemq.command.Message;\n+import org.apache.activemq.command.MessageAck;\n+import org.apache.activemq.command.MessageDispatch;\n+import org.apache.activemq.command.MessageDispatchNotification;\n+import org.apache.activemq.command.MessagePull;\n+import org.apache.activemq.command.ProducerAck;\n+import org.apache.activemq.command.ProducerId;\n+import org.apache.activemq.command.ProducerInfo;\n+import org.apache.activemq.command.RemoveSubscriptionInfo;\n+import org.apache.activemq.command.Response;\n+import org.apache.activemq.command.SessionId;\n+import org.apache.activemq.command.SessionInfo;\n+import org.apache.activemq.command.ShutdownInfo;\n+import org.apache.activemq.command.TransactionId;\n+import org.apache.activemq.command.TransactionInfo;\n+import org.apache.activemq.command.WireFormatInfo;\n import org.apache.activemq.network.DemandForwardingBridge;\n import org.apache.activemq.network.MBeanNetworkListener;\n import org.apache.activemq.network.NetworkBridgeConfiguration;\n@@ -57,12 +91,12 @@\n import org.apache.activemq.transaction.Transaction;\n import org.apache.activemq.transport.DefaultTransportListener;\n import org.apache.activemq.transport.ResponseCorrelator;\n+import org.apache.activemq.transport.TransmitCallback;\n import org.apache.activemq.transport.Transport;\n import org.apache.activemq.transport.TransportDisposedIOException;\n import org.apache.activemq.transport.TransportFactory;\n import org.apache.activemq.util.IntrospectionSupport;\n import org.apache.activemq.util.MarshallingSupport;\n-import org.apache.activemq.util.ServiceSupport;\n import org.apache.activemq.util.URISupport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -174,6 +208,7 @@ public void onException(IOException exception) {\n      *\n      * @return size of dispatch queue\n      */\n+    @Override\n     public int getDispatchQueueSize() {\n         synchronized (dispatchQueue) {\n             return dispatchQueue.size();\n@@ -207,8 +242,7 @@ public void serviceTransportException(IOException e) {\n     }\n \n     private boolean expected(IOException e) {\n-        return isStomp() &&\n-                ((e instanceof SocketException && e.getMessage().indexOf(\"reset\") != -1) || e instanceof EOFException);\n+        return isStomp() && ((e instanceof SocketException && e.getMessage().indexOf(\"reset\") != -1) || e instanceof EOFException);\n     }\n \n     private boolean isStomp() {\n@@ -221,6 +255,7 @@ private boolean isStomp() {\n      * service exception closes a socket, we should not tie up broker threads\n      * since client sockets may hang or cause deadlocks.\n      */\n+    @Override\n     public void serviceExceptionAsync(final IOException e) {\n         if (asyncException.compareAndSet(false, true)) {\n             new Thread(\"Async Exception Handler\") {\n@@ -237,6 +272,7 @@ public void run() {\n      * if: the client is closing or broker is closing. Otherwise, the connection\n      * error transmitted to the client before stopping it's transport.\n      */\n+    @Override\n     public void serviceException(Throwable e) {\n         // are we a transport exception such as not being able to dispatch\n         // synchronously to a transport\n@@ -282,6 +318,7 @@ public void serviceException(Throwable e) {\n         }\n     }\n \n+    @Override\n     public Response service(Command command) {\n         MDC.put(\"activemq.connector\", connector.getUri().toString());\n         Response response = null;\n@@ -324,30 +361,36 @@ public Response service(Command command) {\n         return response;\n     }\n \n+    @Override\n     public Response processKeepAlive(KeepAliveInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processRemoveSubscription(RemoveSubscriptionInfo info) throws Exception {\n         broker.removeSubscription(lookupConnectionState(info.getConnectionId()).getContext(), info);\n         return null;\n     }\n \n+    @Override\n     public Response processWireFormat(WireFormatInfo info) throws Exception {\n         wireFormatInfo = info;\n         protocolVersion.set(info.getVersion());\n         return null;\n     }\n \n+    @Override\n     public Response processShutdown(ShutdownInfo info) throws Exception {\n         stopAsync();\n         return null;\n     }\n \n+    @Override\n     public Response processFlush(FlushCommand command) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processBeginTransaction(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = null;\n@@ -365,13 +408,15 @@ public Response processBeginTransaction(TransactionInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processEndTransaction(TransactionInfo info) throws Exception {\n         // No need to do anything. This packet is just sent by the client\n         // make sure he is synced with the server as commit command could\n         // come from a different connection.\n         return null;\n     }\n \n+    @Override\n     public Response processPrepareTransaction(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = null;\n@@ -403,6 +448,7 @@ public Response processPrepareTransaction(TransactionInfo info) throws Exception\n         }\n     }\n \n+    @Override\n     public Response processCommitTransactionOnePhase(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = cs.getContext();\n@@ -411,6 +457,7 @@ public Response processCommitTransactionOnePhase(TransactionInfo info) throws Ex\n         return null;\n     }\n \n+    @Override\n     public Response processCommitTransactionTwoPhase(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = cs.getContext();\n@@ -419,6 +466,7 @@ public Response processCommitTransactionTwoPhase(TransactionInfo info) throws Ex\n         return null;\n     }\n \n+    @Override\n     public Response processRollbackTransaction(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = cs.getContext();\n@@ -427,20 +475,23 @@ public Response processRollbackTransaction(TransactionInfo info) throws Exceptio\n         return null;\n     }\n \n+    @Override\n     public Response processForgetTransaction(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = cs.getContext();\n         broker.forgetTransaction(context, info.getTransactionId());\n         return null;\n     }\n \n+    @Override\n     public Response processRecoverTransactions(TransactionInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         context = cs.getContext();\n         TransactionId[] preparedTransactions = broker.getPreparedTransactions(context);\n         return new DataArrayResponse(preparedTransactions);\n     }\n \n+    @Override\n     public Response processMessage(Message messageSend) throws Exception {\n         ProducerId producerId = messageSend.getProducerId();\n         ProducerBrokerExchange producerExchange = getProducerBrokerExchange(producerId);\n@@ -450,6 +501,7 @@ public Response processMessage(Message messageSend) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processMessageAck(MessageAck ack) throws Exception {\n         ConsumerBrokerExchange consumerExchange = getConsumerBrokerExchange(ack.getConsumerId());\n         if (consumerExchange != null) {\n@@ -458,15 +510,18 @@ public Response processMessageAck(MessageAck ack) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processMessagePull(MessagePull pull) throws Exception {\n         return broker.messagePull(lookupConnectionState(pull.getConsumerId()).getContext(), pull);\n     }\n \n+    @Override\n     public Response processMessageDispatchNotification(MessageDispatchNotification notification) throws Exception {\n         broker.processDispatchNotification(notification);\n         return null;\n     }\n \n+    @Override\n     public Response processAddDestination(DestinationInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         broker.addDestinationInfo(cs.getContext(), info);\n@@ -476,6 +531,7 @@ public Response processAddDestination(DestinationInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processRemoveDestination(DestinationInfo info) throws Exception {\n         TransportConnectionState cs = lookupConnectionState(info.getConnectionId());\n         broker.removeDestinationInfo(cs.getContext(), info);\n@@ -485,6 +541,7 @@ public Response processRemoveDestination(DestinationInfo info) throws Exception\n         return null;\n     }\n \n+    @Override\n     public Response processAddProducer(ProducerInfo info) throws Exception {\n         SessionId sessionId = info.getProducerId().getParentId();\n         ConnectionId connectionId = sessionId.getParentId();\n@@ -517,6 +574,7 @@ public Response processAddProducer(ProducerInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processRemoveProducer(ProducerId id) throws Exception {\n         SessionId sessionId = id.getParentId();\n         ConnectionId connectionId = sessionId.getParentId();\n@@ -535,6 +593,7 @@ public Response processRemoveProducer(ProducerId id) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processAddConsumer(ConsumerInfo info) throws Exception {\n         SessionId sessionId = info.getConsumerId().getParentId();\n         ConnectionId connectionId = sessionId.getParentId();\n@@ -569,6 +628,7 @@ public Response processAddConsumer(ConsumerInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processRemoveConsumer(ConsumerId id, long lastDeliveredSequenceId) throws Exception {\n         SessionId sessionId = id.getParentId();\n         ConnectionId connectionId = sessionId.getParentId();\n@@ -593,6 +653,7 @@ public Response processRemoveConsumer(ConsumerId id, long lastDeliveredSequenceI\n         return null;\n     }\n \n+    @Override\n     public Response processAddSession(SessionInfo info) throws Exception {\n         ConnectionId connectionId = info.getSessionId().getParentId();\n         TransportConnectionState cs = lookupConnectionState(connectionId);\n@@ -609,6 +670,7 @@ public Response processAddSession(SessionInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processRemoveSession(SessionId id, long lastDeliveredSequenceId) throws Exception {\n         ConnectionId connectionId = id.getParentId();\n         TransportConnectionState cs = lookupConnectionState(connectionId);\n@@ -642,6 +704,7 @@ public Response processRemoveSession(SessionId id, long lastDeliveredSequenceId)\n         return null;\n     }\n \n+    @Override\n     public Response processAddConnection(ConnectionInfo info) throws Exception {\n         // Older clients should have been defaulting this field to true.. but\n         // they were not.\n@@ -728,6 +791,7 @@ public Response processAddConnection(ConnectionInfo info) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public synchronized Response processRemoveConnection(ConnectionId id, long lastDeliveredSequenceId)\n             throws InterruptedException {\n         LOG.debug(\"remove connection id: \" + id);\n@@ -776,15 +840,18 @@ public synchronized Response processRemoveConnection(ConnectionId id, long lastD\n         return null;\n     }\n \n+    @Override\n     public Response processProducerAck(ProducerAck ack) throws Exception {\n         // A broker should not get ProducerAck messages.\n         return null;\n     }\n \n+    @Override\n     public Connector getConnector() {\n         return connector;\n     }\n \n+    @Override\n     public void dispatchSync(Command message) {\n         try {\n             processDispatch(message);\n@@ -793,6 +860,7 @@ public void dispatchSync(Command message) {\n         }\n     }\n \n+    @Override\n     public void dispatchAsync(Command message) {\n         if (!stopping.get()) {\n             if (taskRunner == null) {\n@@ -810,35 +878,45 @@ public void dispatchAsync(Command message) {\n         } else {\n             if (message.isMessageDispatch()) {\n                 MessageDispatch md = (MessageDispatch) message;\n-                Runnable sub = md.getTransmitCallback();\n+                TransmitCallback sub = md.getTransmitCallback();\n                 broker.postProcessDispatch(md);\n                 if (sub != null) {\n-                    sub.run();\n+                    sub.onFailure();\n                 }\n             }\n         }\n     }\n \n     protected void processDispatch(Command command) throws IOException {\n-        final MessageDispatch messageDispatch = (MessageDispatch) (command.isMessageDispatch() ? command : null);\n+        MessageDispatch messageDispatch = (MessageDispatch) (command.isMessageDispatch() ? command : null);\n         try {\n             if (!stopping.get()) {\n                 if (messageDispatch != null) {\n                     broker.preProcessDispatch(messageDispatch);\n                 }\n                 dispatch(command);\n             }\n+        } catch (Throwable e) {\n+            if (messageDispatch != null) {\n+                TransmitCallback sub = messageDispatch.getTransmitCallback();\n+                broker.postProcessDispatch(messageDispatch);\n+                if (sub != null) {\n+                    sub.onFailure();\n+                }\n+                messageDispatch = null;\n+            }\n         } finally {\n             if (messageDispatch != null) {\n-                Runnable sub = messageDispatch.getTransmitCallback();\n+                TransmitCallback sub = messageDispatch.getTransmitCallback();\n                 broker.postProcessDispatch(messageDispatch);\n                 if (sub != null) {\n-                    sub.run();\n+                    sub.onSuccess();\n                 }\n             }\n         }\n     }\n \n+    @Override\n     public boolean iterate() {\n         try {\n             if (pendingStop || stopping.get()) {\n@@ -877,6 +955,7 @@ public boolean iterate() {\n     /**\n      * Returns the statistics for this connection\n      */\n+    @Override\n     public ConnectionStatistics getStatistics() {\n         return statistics;\n     }\n@@ -889,10 +968,12 @@ public void setMessageAuthorizationPolicy(MessageAuthorizationPolicy messageAuth\n         this.messageAuthorizationPolicy = messageAuthorizationPolicy;\n     }\n \n+    @Override\n     public boolean isManageable() {\n         return manageable;\n     }\n \n+    @Override\n     public void start() throws Exception {\n         try {\n             synchronized (this) {\n@@ -931,6 +1012,7 @@ public void start() throws Exception {\n         }\n     }\n \n+    @Override\n     public void stop() throws Exception {\n         // do not stop task the task runner factories (taskRunnerFactory, stopTaskRunnerFactory)\n         // as their lifecycle is handled elsewhere\n@@ -949,6 +1031,7 @@ public void delayedStop(final int waitTime, final String reason, Throwable cause\n             }\n             try {\n                 stopTaskRunnerFactory.execute(new Runnable() {\n+                    @Override\n                     public void run() {\n                         try {\n                             Thread.sleep(waitTime);\n@@ -985,6 +1068,7 @@ public void stopAsync() {\n             }\n             try {\n                 stopTaskRunnerFactory.execute(new Runnable() {\n+                    @Override\n                     public void run() {\n                         serviceLock.writeLock().lock();\n                         try {\n@@ -1039,10 +1123,10 @@ protected void doStop() throws Exception {\n                 Command command = iter.next();\n                 if (command.isMessageDispatch()) {\n                     MessageDispatch md = (MessageDispatch) command;\n-                    Runnable sub = md.getTransmitCallback();\n+                    TransmitCallback sub = md.getTransmitCallback();\n                     broker.postProcessDispatch(md);\n                     if (sub != null) {\n-                        sub.run();\n+                        sub.onFailure();\n                     }\n                 }\n             }\n@@ -1109,6 +1193,7 @@ public void setSlow(boolean slow) {\n     /**\n      * @return true if the Connection is slow\n      */\n+    @Override\n     public boolean isSlow() {\n         return slow;\n     }\n@@ -1132,13 +1217,15 @@ public void doMark() {\n     /**\n      * @return if after being marked, the Connection is still writing\n      */\n+    @Override\n     public boolean isBlocked() {\n         return blocked;\n     }\n \n     /**\n      * @return true if the Connection is connected\n      */\n+    @Override\n     public boolean isConnected() {\n         return connected;\n     }\n@@ -1160,6 +1247,7 @@ public void setConnected(boolean connected) {\n     /**\n      * @return true if the Connection is active\n      */\n+    @Override\n     public boolean isActive() {\n         return active;\n     }\n@@ -1178,10 +1266,12 @@ public synchronized boolean isStarting() {\n         return starting;\n     }\n \n+    @Override\n     public synchronized boolean isNetworkConnection() {\n         return networkConnection;\n     }\n \n+    @Override\n     public boolean isFaultTolerantConnection() {\n         return this.faultTolerantConnection;\n     }\n@@ -1201,9 +1291,9 @@ protected synchronized void setPendingStop(boolean pendingStop) {\n         this.pendingStop = pendingStop;\n     }\n \n+    @Override\n     public Response processBrokerInfo(BrokerInfo info) {\n         if (info.isSlaveBroker()) {\n-            BrokerService bService = connector.getBrokerService();\n             LOG.error(\" Slave Brokers are no longer supported - slave trying to attach is: \" + info.getBrokerName());\n         } else if (info.isNetworkConnection() && info.isDuplexConnection()) {\n             // so this TransportConnection is the rear end of a network bridge\n@@ -1291,10 +1381,12 @@ protected void dispatch(Command command) throws IOException {\n         }\n     }\n \n+    @Override\n     public String getRemoteAddress() {\n         return transport.getRemoteAddress();\n     }\n \n+    @Override\n     public String getConnectionId() {\n         List<TransportConnectionState> connectionStates = listConnectionStates();\n         for (TransportConnectionState cs : connectionStates) {\n@@ -1306,6 +1398,7 @@ public String getConnectionId() {\n         return null;\n     }\n \n+    @Override\n     public void updateClient(ConnectionControl control) {\n         if (isActive() && isBlocked() == false && isFaultTolerantConnection() && this.wireFormatInfo != null\n                 && this.wireFormatInfo.getVersion() >= 6) {\n@@ -1388,6 +1481,7 @@ public int getProtocolVersion() {\n         return protocolVersion.get();\n     }\n \n+    @Override\n     public Response processControlCommand(ControlCommand command) throws Exception {\n         String control = command.getCommand();\n         if (control != null && control.equals(\"shutdown\")) {\n@@ -1396,21 +1490,25 @@ public Response processControlCommand(ControlCommand command) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processMessageDispatch(MessageDispatch dispatch) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processConnectionControl(ConnectionControl control) throws Exception {\n         if (control != null) {\n             faultTolerantConnection = control.isFaultTolerant();\n         }\n         return null;\n     }\n \n+    @Override\n     public Response processConnectionError(ConnectionError error) throws Exception {\n         return null;\n     }\n \n+    @Override\n     public Response processConsumerControl(ConsumerControl control) throws Exception {\n         ConsumerBrokerExchange consumerExchange = getConsumerBrokerExchange(control.getConsumerId());\n         broker.processConsumerControl(consumerExchange, control);",
                "changes": 122,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java"
            },
            {
                "additions": 37,
                "sha": "c9189df7279613cd09768b99375355c5e0c50db0",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java",
                "deletions": 10,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import javax.jms.InvalidSelectorException;\n import javax.jms.JMSException;\n \n import org.apache.activemq.broker.Broker;\n@@ -43,6 +42,7 @@\n import org.apache.activemq.command.Response;\n import org.apache.activemq.thread.Scheduler;\n import org.apache.activemq.transaction.Synchronization;\n+import org.apache.activemq.transport.TransmitCallback;\n import org.apache.activemq.usage.SystemUsage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -88,6 +88,7 @@ public PrefetchSubscription(Broker broker,SystemUsage usageManager, ConnectionCo\n     /**\n      * Allows a message to be pulled on demand by a client\n      */\n+    @Override\n     public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {\n         // The slave should not deliver pull messages.\n         // TODO: when the slave becomes a master, He should send a NULL message to all the\n@@ -143,6 +144,7 @@ final void pullTimeout(long dispatchCounterBeforePull) {\n         }\n     }\n \n+    @Override\n     public void add(MessageReference node) throws Exception {\n         synchronized (pendingLock) {\n             // The destination may have just been removed...\n@@ -160,6 +162,7 @@ public void add(MessageReference node) throws Exception {\n         dispatchPending();\n     }\n \n+    @Override\n     public void processMessageDispatchNotification(MessageDispatchNotification mdn) throws Exception {\n         synchronized(pendingLock) {\n             try {\n@@ -189,6 +192,7 @@ public void processMessageDispatchNotification(MessageDispatchNotification mdn)\n                         + mdn.getConsumerId() + \" on \" + mdn.getDestination().getPhysicalName());\n     }\n \n+    @Override\n     public final void acknowledge(final ConnectionContext context,final MessageAck ack) throws Exception {\n         // Handle the standard acknowledgment case.\n         boolean callDispatchMatched = false;\n@@ -305,7 +309,7 @@ public final void acknowledge(final ConnectionContext context,final MessageAck a\n                     Destination nodeDest = (Destination) node.getRegionDestination();\n                     if (node.isExpired()) {\n                         if (broker.isExpired(node)) {\n-                            Destination regionDestination = (Destination) nodeDest;\n+                            Destination regionDestination = nodeDest;\n                             regionDestination.messageExpired(context, this, node);\n                         }\n                         iter.remove();\n@@ -500,6 +504,7 @@ protected void sendToDLQ(final ConnectionContext context, final MessageReference\n         broker.getRoot().sendToDeadLetterQueue(context, node, this);\n     }\n \n+    @Override\n     public int getInFlightSize() {\n         return dispatched.size();\n     }\n@@ -509,20 +514,23 @@ public int getInFlightSize() {\n      *\n      * @return\n      */\n+    @Override\n     public boolean isFull() {\n         return dispatched.size() - prefetchExtension.get() >= info.getPrefetchSize();\n     }\n \n     /**\n      * @return true when 60% or more room is left for dispatching messages\n      */\n+    @Override\n     public boolean isLowWaterMark() {\n         return (dispatched.size() - prefetchExtension.get()) <= (info.getPrefetchSize() * .4);\n     }\n \n     /**\n      * @return true when 10% or less room is left for dispatching messages\n      */\n+    @Override\n     public boolean isHighWaterMark() {\n         return (dispatched.size() - prefetchExtension.get()) >= (info.getPrefetchSize() * .9);\n     }\n@@ -532,22 +540,27 @@ public int countBeforeFull() {\n         return info.getPrefetchSize() + prefetchExtension.get() - dispatched.size();\n     }\n \n+    @Override\n     public int getPendingQueueSize() {\n         return pending.size();\n     }\n \n+    @Override\n     public int getDispatchedQueueSize() {\n         return dispatched.size();\n     }\n \n+    @Override\n     public long getDequeueCounter() {\n         return dequeueCounter;\n     }\n \n+    @Override\n     public long getDispatchedCounter() {\n         return dispatchCounter;\n     }\n \n+    @Override\n     public long getEnqueueCounter() {\n         return enqueueCounter;\n     }\n@@ -613,8 +626,7 @@ protected void dispatchPending() throws IOException {\n                     setPendingBatchSize(pending, numberToDispatch);\n                     int count = 0;\n                     pending.reset();\n-                    while (pending.hasNext() && !isFull()\n-                            && count < numberToDispatch) {\n+                    while (pending.hasNext() && !isFull() && count < numberToDispatch) {\n                         MessageReference node = pending.next();\n                         if (node == null) {\n                             break;\n@@ -683,15 +695,29 @@ protected boolean dispatch(final MessageReference node) throws IOException {\n             }\n         }\n         if (info.isDispatchAsync()) {\n-            md.setTransmitCallback(new Runnable() {\n+            md.setTransmitCallback(new TransmitCallback() {\n \n-                public void run() {\n-                    // Since the message gets queued up in async dispatch,\n-                    // we don't want to\n-                    // decrease the reference count until it gets put on the\n-                    // wire.\n+                @Override\n+                public void onSuccess() {\n+                    // Since the message gets queued up in async dispatch, we don't want to\n+                    // decrease the reference count until it gets put on the wire.\n                     onDispatch(node, message);\n                 }\n+\n+                @Override\n+                public void onFailure() {\n+                    Destination nodeDest = (Destination) node.getRegionDestination();\n+                    if (nodeDest != null) {\n+                        if (node != QueueMessageReference.NULL_MESSAGE) {\n+                            nodeDest.getDestinationStatistics().getDispatched().increment();\n+                            nodeDest.getDestinationStatistics().getInflight().increment();\n+                            if (LOG.isTraceEnabled()) {\n+                                LOG.trace(info.getConsumerId() + \" failed to dispatch: \" + message.getMessageId() + \" - \"\n+                                        + message.getDestination()  + \", dispatched: \" + dispatchCounter + \", inflight: \" + dispatched.size());\n+                            }\n+                        }\n+                    }\n+                }\n             });\n             context.getConnection().dispatchAsync(md);\n         } else {\n@@ -728,6 +754,7 @@ protected void onDispatch(final MessageReference node, final Message message) {\n      *\n      * @param newPrefetch\n      */\n+    @Override\n     public void updateConsumerPrefetch(int newPrefetch) {\n         if (context != null && context.getConnection() != null && context.getConnection().isManageable()) {\n             ConsumerControl cc = new ConsumerControl();",
                "changes": 47,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java"
            },
            {
                "additions": 28,
                "sha": "4474f2a234321f3ba4230a0f54556eb42fb3f8da",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "deletions": 2,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.activemq.command.Response;\n import org.apache.activemq.thread.Scheduler;\n import org.apache.activemq.transaction.Synchronization;\n+import org.apache.activemq.transport.TransmitCallback;\n import org.apache.activemq.usage.SystemUsage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -96,6 +97,7 @@ public void init() throws Exception {\n         this.active=true;\n     }\n \n+    @Override\n     public void add(MessageReference node) throws Exception {\n         if (isDuplicate(node)) {\n             return;\n@@ -236,6 +238,7 @@ protected void removeExpiredMessages() throws IOException {\n         }\n     }\n \n+    @Override\n     public void processMessageDispatchNotification(MessageDispatchNotification mdn) {\n         synchronized (matchedListMutex) {\n             try {\n@@ -256,6 +259,7 @@ public void processMessageDispatchNotification(MessageDispatchNotification mdn)\n         }\n     }\n \n+    @Override\n     public synchronized void acknowledge(final ConnectionContext context, final MessageAck ack) throws Exception {\n         // Handle the standard acknowledgment case.\n         if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {\n@@ -299,6 +303,7 @@ public void afterCommit() throws Exception {\n         throw new JMSException(\"Invalid acknowledgment: \" + ack);\n     }\n \n+    @Override\n     public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {\n \n         // The slave should not deliver pull messages.\n@@ -320,6 +325,7 @@ public Response pullMessage(ConnectionContext context, MessagePull pull) throws\n                 if (pull.getTimeout() > 0) {\n                     scheduler.executeAfterDelay(new Runnable() {\n \n+                        @Override\n                         public void run() {\n                             pullTimeout();\n                         }\n@@ -346,10 +352,12 @@ private final void pullTimeout() {\n         }\n     }\n \n+    @Override\n     public int getPendingQueueSize() {\n         return matched();\n     }\n \n+    @Override\n     public int getDispatchedQueueSize() {\n         return (int)(dispatchedCounter.get() - dequeueCounter.get());\n     }\n@@ -358,14 +366,17 @@ public int getMaximumPendingMessages() {\n         return maximumPendingMessages;\n     }\n \n+    @Override\n     public long getDispatchedCounter() {\n         return dispatchedCounter.get();\n     }\n \n+    @Override\n     public long getEnqueueCounter() {\n         return enqueueCounter.get();\n     }\n \n+    @Override\n     public long getDequeueCounter() {\n         return dequeueCounter.get();\n     }\n@@ -445,24 +456,28 @@ public synchronized void setEnableAudit(boolean enableAudit) {\n \n     // Implementation methods\n     // -------------------------------------------------------------------------\n+    @Override\n     public boolean isFull() {\n         return getDispatchedQueueSize() >= info.getPrefetchSize() && !prefetchWindowOpen.get();\n     }\n \n+    @Override\n     public int getInFlightSize() {\n         return getDispatchedQueueSize();\n     }\n \n     /**\n      * @return true when 60% or more room is left for dispatching messages\n      */\n+    @Override\n     public boolean isLowWaterMark() {\n         return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);\n     }\n \n     /**\n      * @return true when 10% or less room is left for dispatching messages\n      */\n+    @Override\n     public boolean isHighWaterMark() {\n         return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);\n     }\n@@ -507,6 +522,7 @@ public void setMatched(PendingMessageCursor matched) {\n      *\n      * @param newPrefetch\n      */\n+    @Override\n     public void updateConsumerPrefetch(int newPrefetch) {\n         if (context != null && context.getConnection() != null && context.getConnection().isManageable()) {\n             ConsumerControl cc = new ConsumerControl();\n@@ -567,9 +583,18 @@ private void dispatch(final MessageReference node) throws IOException {\n         }\n         if (info.isDispatchAsync()) {\n             if (node != null) {\n-                md.setTransmitCallback(new Runnable() {\n+                md.setTransmitCallback(new TransmitCallback() {\n+\n                     @Override\n-                    public void run() {\n+                    public void onSuccess() {\n+                        Destination regionDestination = (Destination) node.getRegionDestination();\n+                        regionDestination.getDestinationStatistics().getDispatched().increment();\n+                        regionDestination.getDestinationStatistics().getInflight().increment();\n+                        node.decrementReferenceCount();\n+                    }\n+\n+                    @Override\n+                    public void onFailure() {\n                         Destination regionDestination = (Destination) node.getRegionDestination();\n                         regionDestination.getDestinationStatistics().getDispatched().increment();\n                         regionDestination.getDestinationStatistics().getInflight().increment();\n@@ -612,6 +637,7 @@ public String toString() {\n                + getDequeueCounter() + \", matched=\" + matched() + \", discarded=\" + discarded();\n     }\n \n+    @Override\n     public void destroy() {\n         this.active=false;\n         synchronized (matchedListMutex) {",
                "changes": 30,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java"
            },
            {
                "additions": 14,
                "sha": "89e564737f7fe33060fd9e20a0002f21d843e2da",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java",
                "deletions": 13,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n+\n import org.apache.activemq.advisory.AdvisorySupport;\n import org.apache.activemq.broker.Broker;\n import org.apache.activemq.broker.ConnectionContext;\n@@ -36,8 +37,6 @@\n /**\n  * persist pending messages pending message (messages awaiting dispatch to a\n  * consumer) cursor\n- * \n- * \n  */\n public class StoreDurableSubscriberCursor extends AbstractPendingMessageCursor {\n \n@@ -50,6 +49,7 @@\n     private PendingMessageCursor currentCursor;\n     private final DurableTopicSubscription subscription;\n     private boolean immediatePriorityDispatch = true;\n+\n     /**\n      * @param broker Broker for this cursor\n      * @param clientId clientId for this cursor\n@@ -67,7 +67,7 @@ public StoreDurableSubscriberCursor(Broker broker,String clientId, String subscr\n         } else {\n             this.nonPersistent = new VMPendingMessageCursor(this.prioritizedMessages);\n         }\n-        \n+\n         this.nonPersistent.setMaxBatchSize(maxBatchSize);\n         this.nonPersistent.setSystemUsage(systemUsage);\n         this.storePrefetches.add(this.nonPersistent);\n@@ -82,7 +82,7 @@ public synchronized void start() throws Exception {\n         if (!isStarted()) {\n             super.start();\n             for (PendingMessageCursor tsp : storePrefetches) {\n-            \ttsp.setMessageAudit(getMessageAudit());\n+                tsp.setMessageAudit(getMessageAudit());\n                 tsp.start();\n             }\n         }\n@@ -108,7 +108,7 @@ public synchronized void stop() throws Exception {\n \n     /**\n      * Add a destination\n-     * \n+     *\n      * @param context\n      * @param destination\n      * @throws Exception\n@@ -134,7 +134,7 @@ public synchronized void add(ConnectionContext context, Destination destination)\n \n     /**\n      * remove a destination\n-     * \n+     *\n      * @param context\n      * @param destination\n      * @throws Exception\n@@ -173,7 +173,7 @@ public synchronized boolean isEmpty(Destination destination) {\n     /**\n      * Informs the Broker if the subscription needs to intervention to recover\n      * it's state e.g. DurableTopicSubscriber may do\n-     * \n+     *\n      * @see org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursor\n      * @return true if recovery required\n      */\n@@ -290,6 +290,7 @@ public synchronized void reset() {\n \n     @Override\n     public synchronized void release() {\n+        this.currentCursor = null;\n         for (PendingMessageCursor storePrefetch : storePrefetches) {\n             storePrefetch.release();\n         }\n@@ -326,15 +327,15 @@ public void setSystemUsage(SystemUsage usageManager) {\n             tsp.setSystemUsage(usageManager);\n         }\n     }\n-    \n+\n     @Override\n     public void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark) {\n         super.setMemoryUsageHighWaterMark(memoryUsageHighWaterMark);\n         for (PendingMessageCursor cursor : storePrefetches) {\n             cursor.setMemoryUsageHighWaterMark(memoryUsageHighWaterMark);\n         }\n     }\n-    \n+\n     @Override\n     public void setMaxProducersToAudit(int maxProducersToAudit) {\n         super.setMaxProducersToAudit(maxProducersToAudit);\n@@ -350,23 +351,23 @@ public void setMaxAuditDepth(int maxAuditDepth) {\n             cursor.setMaxAuditDepth(maxAuditDepth);\n         }\n     }\n-    \n+\n     @Override\n     public void setEnableAudit(boolean enableAudit) {\n         super.setEnableAudit(enableAudit);\n         for (PendingMessageCursor cursor : storePrefetches) {\n             cursor.setEnableAudit(enableAudit);\n         }\n     }\n-    \n+\n     @Override\n     public  void setUseCache(boolean useCache) {\n         super.setUseCache(useCache);\n         for (PendingMessageCursor cursor : storePrefetches) {\n             cursor.setUseCache(useCache);\n         }\n     }\n-    \n+\n     protected synchronized PendingMessageCursor getNextCursor() throws Exception {\n         if (currentCursor == null || currentCursor.isEmpty()) {\n             currentCursor = null;\n@@ -384,7 +385,7 @@ protected synchronized PendingMessageCursor getNextCursor() throws Exception {\n         }\n         return currentCursor;\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return \"StoreDurableSubscriber(\" + clientId + \":\" + subscriberName + \")\";",
                "changes": 27,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java"
            },
            {
                "additions": 9,
                "sha": "da2c0bfcc559ca57b994da6047a3cc2a4aa9f9c1",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-client/src/main/java/org/apache/activemq/command/MessageDispatch.java",
                "deletions": 5,
                "filename": "activemq-client/src/main/java/org/apache/activemq/command/MessageDispatch.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/command/MessageDispatch.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -17,11 +17,12 @@\n package org.apache.activemq.command;\n \n import org.apache.activemq.state.CommandVisitor;\n+import org.apache.activemq.transport.TransmitCallback;\n \n /**\n- * \n+ *\n  * @openwire:marshaller code=\"21\"\n- * \n+ *\n  */\n public class MessageDispatch extends BaseCommand {\n \n@@ -34,13 +35,15 @@\n \n     protected transient long deliverySequenceId;\n     protected transient Object consumer;\n-    protected transient Runnable transmitCallback;\n+    protected transient TransmitCallback transmitCallback;\n     protected transient Throwable rollbackCause;\n \n+    @Override\n     public byte getDataStructureType() {\n         return DATA_STRUCTURE_TYPE;\n     }\n \n+    @Override\n     public boolean isMessageDispatch() {\n         return true;\n     }\n@@ -105,15 +108,16 @@ public void setConsumer(Object consumer) {\n         this.consumer = consumer;\n     }\n \n+    @Override\n     public Response visit(CommandVisitor visitor) throws Exception {\n         return visitor.processMessageDispatch(this);\n     }\n \n-    public Runnable getTransmitCallback() {\n+    public TransmitCallback getTransmitCallback() {\n         return transmitCallback;\n     }\n \n-    public void setTransmitCallback(Runnable transmitCallback) {\n+    public void setTransmitCallback(TransmitCallback transmitCallback) {\n         this.transmitCallback = transmitCallback;\n     }\n ",
                "changes": 14,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-client/src/main/java/org/apache/activemq/command/MessageDispatch.java"
            },
            {
                "additions": 25,
                "sha": "f2ce5f6b8af790dbca22535581fa05bc1e32f31c",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-client/src/main/java/org/apache/activemq/transport/TransmitCallback.java",
                "deletions": 0,
                "filename": "activemq-client/src/main/java/org/apache/activemq/transport/TransmitCallback.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/transport/TransmitCallback.java?ref=ae61847d025e76ba23876e1ba3f05f3d26f8a741",
                "patch": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.transport;\n+\n+public interface TransmitCallback {\n+\n+    void onSuccess();\n+\n+    void onFailure();\n+\n+}",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/ae61847d025e76ba23876e1ba3f05f3d26f8a741/activemq-client/src/main/java/org/apache/activemq/transport/TransmitCallback.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-4248\n\nAdd expanded transmit callback interface so that a failure to transmit can be distinguished from normal operation and allow for no further attempts at dispatch fixing the current NPE when async dispatch is enabled. \n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1432487 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/ae61847d025e76ba23876e1ba3f05f3d26f8a741"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/8bab1c1fb2c5a66cf1cf093f303bdeffca678a2a",
        "bug_id": "activemq_112",
        "file": [
            {
                "additions": 5,
                "sha": "ffcd1dab412556572a96c9e69615e6f72b323c9d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/760c62934d2ff5fe92e399cf7f980d8de4e191d4/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java",
                "deletions": 3,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java?ref=760c62934d2ff5fe92e399cf7f980d8de4e191d4",
                "patch": "@@ -59,9 +59,11 @@ public void stop() throws Exception {\n \n     public Message[] browse(ActiveMQDestination destination) throws Exception {\n         List<Message> result = new ArrayList<Message>();\n-        DestinationFilter filter = DestinationFilter.parseFilter(destination);\n-        if (filter.matches(lastImage.getMessage().getDestination())) {\n-            result.add(lastImage.getMessage());\n+        if (lastImage != null) {\n+            DestinationFilter filter = DestinationFilter.parseFilter(destination);\n+            if (filter.matches(lastImage.getMessage().getDestination())) {\n+                result.add(lastImage.getMessage());\n+            }\n         }\n         return result.toArray(new Message[result.size()]);\n     }",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/760c62934d2ff5fe92e399cf7f980d8de4e191d4/activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java"
            },
            {
                "additions": 108,
                "sha": "ee7c300d33b69f54bc08080eb37632858aac372c",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/760c62934d2ff5fe92e399cf7f980d8de4e191d4/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3622Test.java",
                "deletions": 0,
                "filename": "activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3622Test.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3622Test.java?ref=760c62934d2ff5fe92e399cf7f980d8de4e191d4",
                "patch": "@@ -0,0 +1,108 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.bugs;\n+\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.region.policy.FilePendingSubscriberMessageStoragePolicy;\n+import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;\n+import org.apache.activemq.broker.region.policy.PolicyEntry;\n+import org.apache.activemq.broker.region.policy.PolicyMap;\n+import org.apache.activemq.transport.stomp.Stomp;\n+import org.apache.activemq.transport.stomp.StompConnection;\n+import org.apache.activemq.util.DefaultTestAppender;\n+import org.apache.log4j.Appender;\n+import org.apache.log4j.Logger;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.Assert.fail;\n+\n+public class AMQ3622Test {\n+    \n+    protected BrokerService broker;\n+    protected AtomicBoolean failed = new AtomicBoolean(false);\n+    protected String connectionUri;\n+    protected Appender appender = new DefaultTestAppender() {\n+\n+        @Override\n+        public void doAppend(LoggingEvent event) {\n+            System.err.println(event.getMessage());\n+            if (event.getThrowableInformation() != null) {\n+                if (event.getThrowableInformation().getThrowable() instanceof NullPointerException) {\n+                    failed.set(true);\n+                }\n+            }\n+        }\n+    };\n+\n+    @Before\n+    public void before() throws Exception {\n+        Logger.getRootLogger().addAppender(appender);\n+\n+        broker = new BrokerService();\n+        broker.setDataDirectory(\"target\" + File.separator + \"activemq-data\");\n+        broker.setPersistent(true);\n+        broker.setDeleteAllMessagesOnStartup(true);\n+        PolicyEntry policy = new PolicyEntry();\n+        policy.setTopic(\">\");\n+        policy.setProducerFlowControl(false);\n+        policy.setMemoryLimit(1 * 1024 * 1024);\n+        policy.setPendingSubscriberPolicy(new FilePendingSubscriberMessageStoragePolicy());\n+        policy.setSubscriptionRecoveryPolicy(new LastImageSubscriptionRecoveryPolicy());\n+        policy.setExpireMessagesPeriod(500);\n+        List<PolicyEntry> entries = new ArrayList<PolicyEntry>();\n+        \n+        entries.add(policy);\n+        PolicyMap pMap = new PolicyMap();\n+        pMap.setPolicyEntries(entries);\n+        broker.setDestinationPolicy(pMap);\n+\n+        connectionUri = broker.addConnector(\"stomp://localhost:0\").getPublishableConnectString();\n+\n+        broker.start();\n+        broker.waitUntilStarted();\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        broker.stop();\n+        broker.waitUntilStopped();\n+        Logger.getRootLogger().removeAppender(appender);\n+    }\n+    \n+    @Test\n+    public void go() throws Exception {\n+        StompConnection connection = new StompConnection();\n+        connection.open(\"localhost\", Integer.parseInt(connectionUri.replace(\"stomp://localhost:\", \"\")));\n+        connection.connect(\"\", \"\");\n+        connection.subscribe(\"/topic/foobar\", Stomp.Headers.Subscribe.AckModeValues.CLIENT);\n+        connection.disconnect();\n+        Thread.sleep(1000);\n+        \n+        if (failed.get()) {\n+            fail(\"Received NullPointerException\");\n+        }\n+    }\n+\n+}",
                "changes": 108,
                "blob_url": "https://github.com/apache/activemq/blob/760c62934d2ff5fe92e399cf7f980d8de4e191d4/activemq-core/src/test/java/org/apache/activemq/bugs/AMQ3622Test.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3622 - NPE in LastImageSubscriptionRecoveryPolicy. patch variant applied and nice test./bin/activemq console xbean:conf/limit.xml  Thanks\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1211568 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/760c62934d2ff5fe92e399cf7f980d8de4e191d4"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/24cd2b3f2902242fc8b62bdcaf098405f290392e",
        "bug_id": "activemq_113",
        "file": [
            {
                "additions": 8,
                "sha": "1eb5591531c69cd5b473dbed3af2235377f1dc20",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -133,6 +133,9 @@ public synchronized void reset() {\n     @Override\n     public synchronized void release() {\n         iterating = false;\n+        if (iter instanceof DiskIterator) {\n+           ((DiskIterator)iter).release();\n+        };\n         if (flushRequired) {\n             flushRequired = false;\n             if (!hasSpace()) {\n@@ -417,7 +420,7 @@ protected synchronized void expireOldMessages() {\n     }\n \n     protected synchronized void flushToDisk() {\n-        if (!memoryList.isEmpty()) {\n+        if (!memoryList.isEmpty() && store != null) {\n             long start = 0;\n              if (LOG.isTraceEnabled()) {\n                 start = System.currentTimeMillis();\n@@ -483,7 +486,7 @@ protected Message getMessage(ByteSequence bs) throws IOException {\n     }\n \n     final class DiskIterator implements Iterator<MessageReference> {\n-        private final Iterator<PListEntry> iterator;\n+        private final PList.PListIterator iterator;\n         DiskIterator() {\n             try {\n                 iterator = getDiskList().iterator();\n@@ -510,5 +513,8 @@ public void remove() {\n             iterator.remove();\n         }\n \n+        public void release() {\n+            iterator.release();\n+        }\n     }\n }",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java"
            },
            {
                "additions": 18,
                "sha": "84cd503f71f45720c66b3a6ee816c4e720a8459c",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java",
                "deletions": 7,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -26,7 +26,6 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.kahadb.index.ListIndex;\n-import org.apache.kahadb.index.ListNode;\n import org.apache.kahadb.journal.Location;\n import org.apache.kahadb.page.Transaction;\n import org.apache.kahadb.util.ByteSequence;\n@@ -58,11 +57,11 @@ public String getName() {\n     }\n \n     void read(DataInput in) throws IOException {\n-        this.headPageId = in.readLong();\n+        setHeadPageId(in.readLong());\n     }\n \n     public void write(DataOutput out) throws IOException {\n-        out.writeLong(this.headPageId);\n+        out.writeLong(getHeadPageId());\n     }\n \n     public synchronized void destroy() throws IOException {\n@@ -185,17 +184,19 @@ public boolean isEmpty() {\n         return size() == 0;\n     }\n \n-    synchronized public Iterator<PListEntry> iterator() throws IOException {\n+    public PListIterator iterator() throws IOException {\n         return new PListIterator();\n     }\n \n-    private final class PListIterator implements Iterator<PListEntry> {\n+    public final class PListIterator implements Iterator<PListEntry> {\n         final Iterator<Map.Entry<String, Location>> iterator;\n         final Transaction tx;\n \n         PListIterator() throws IOException {\n             tx = store.pageFile.tx();\n-            this.iterator = iterator(tx);\n+            synchronized (indexLock) {\n+                this.iterator = iterator(tx);\n+            }\n         }\n \n         @Override\n@@ -234,6 +235,16 @@ public void execute(Transaction tx) throws IOException {\n                 throw e;\n             }\n         }\n+\n+        public void release() {\n+            try {\n+                tx.rollback();\n+            } catch (IOException unexpected) {\n+                IllegalStateException e = new IllegalStateException(unexpected);\n+                e.initCause(unexpected);\n+                throw e;\n+            }\n+        }\n     }\n \n     public void claimFileLocations(final Set<Integer> candidates) throws IOException {\n@@ -254,6 +265,6 @@ public void execute(Transaction tx) throws IOException {\n \n     @Override\n     public String toString() {\n-        return \"\" + name + \",[headPageId=\" + headPageId  + \",tailPageId=\" + tailPageId + \", size=\" + size() + \"]\";\n+        return name + \"[headPageId=\" + getHeadPageId()  + \",tailPageId=\" + getTailPageId() + \", size=\" + size() + \"]\";\n     }\n }",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java"
            },
            {
                "additions": 23,
                "sha": "74f8da2e5e7e0445f9c60ee4756420d55e21b599",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -76,6 +76,7 @@\n     private int indexPageSize = PageFile.DEFAULT_PAGE_SIZE;\n     private int indexCacheSize = PageFile.DEFAULT_PAGE_CACHE_SIZE;\n     private int indexWriteBatchSize = PageFile.DEFAULT_WRITE_BATCH_SIZE;\n+    private boolean indexEnablePageCaching = true;\n \n     public Object getIndexLock() {\n         return indexLock;\n@@ -110,6 +111,14 @@ public void setIndexWriteBatchSize(int indexWriteBatchSize) {\n         this.indexWriteBatchSize = indexWriteBatchSize;\n     }\n \n+    public boolean getIndexEnablePageCaching() {\n+        return indexEnablePageCaching;\n+    }\n+\n+    public void setIndexEnablePageCaching(boolean indexEnablePageCaching) {\n+        this.indexEnablePageCaching = indexEnablePageCaching;\n+    }\n+\n     protected class MetaData {\n         protected MetaData(PListStore store) {\n             this.store = store;\n@@ -223,10 +232,10 @@ public void execute(Transaction tx) throws IOException {\n                     result = pl;\n                     this.persistentLists.put(name, pl);\n                 }\n-                final PList load = result;\n+                final PList toLoad = result;\n                 getPageFile().tx().execute(new Transaction.Closure<IOException>() {\n                     public void execute(Transaction tx) throws IOException {\n-                        load.load(tx);\n+                        toLoad.load(tx);\n                     }\n                 });\n \n@@ -269,6 +278,7 @@ protected synchronized void intialize() throws Exception {\n                 this.journal.setWriteBatchSize(getJournalMaxWriteBatchSize());\n                 this.journal.start();\n                 this.pageFile = new PageFile(directory, \"tmpDB\");\n+                this.pageFile.setEnablePageCaching(getIndexEnablePageCaching());\n                 this.pageFile.setPageSize(getIndexPageSize());\n                 this.pageFile.setWriteBatchSize(getIndexWriteBatchSize());\n                 this.pageFile.setPageCacheSize(getIndexCacheSize());\n@@ -340,12 +350,21 @@ protected synchronized void doStop(ServiceStopper stopper) throws Exception {\n \n     public void run() {\n         try {\n+            final int lastJournalFileId = journal.getLastAppendLocation().getDataFileId();\n             final Set<Integer> candidates = journal.getFileMap().keySet();\n             LOG.trace(\"Full gc candidate set:\" + candidates);\n             if (candidates.size() > 1) {\n+                // prune current write\n+                for (Iterator<Integer> iterator = candidates.iterator(); iterator.hasNext();) {\n+                    if (iterator.next() >= lastJournalFileId) {\n+                        iterator.remove();\n+                    }\n+                }\n                 List<PList> plists = null;\n-                synchronized (this) {\n-                    plists = new ArrayList(persistentLists.values());\n+                synchronized (indexLock) {\n+                    synchronized (this) {\n+                        plists = new ArrayList(persistentLists.values());\n+                    }\n                 }\n                 for (PList list : plists) {\n                     list.claimFileLocations(candidates);",
                "changes": 27,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java"
            },
            {
                "additions": 179,
                "sha": "ce190dd69a862ccb8c38ef322e56bc80952a64c3",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java",
                "deletions": 35,
                "filename": "activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -18,11 +18,11 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -44,8 +44,9 @@\n     private PListStore store;\n     private PList plist;\n     final ByteSequence payload = new ByteSequence(new byte[400]);\n-    final String idSeed = new String(\"Seed\");\n+    final String idSeed = new String(\"Seed\" + new byte[1024]);\n     final Vector<Throwable> exceptions = new Vector<Throwable>();\n+    ExecutorService executor;\n    \n \n     @Test\n@@ -146,15 +147,26 @@ public void testRemoveSecond() throws Exception {\n         assertFalse(plist.remove(\"doesNotExist\"));\n     }\n     \n-    \n+\n+    @Test\n+    public void testRemoveSingleEntry() throws Exception {\n+        plist.addLast(\"First\", new ByteSequence(\"A\".getBytes()));\n+\n+        Iterator<PListEntry> iterator = plist.iterator();\n+        while (iterator.hasNext()) {\n+            PListEntry v = iterator.next();\n+            iterator.remove();\n+        }\n+    }\n+\n     @Test\n     public void testRemoveSecondPosition() throws Exception {\n         plist.addLast(\"First\", new ByteSequence(\"A\".getBytes()));\n         plist.addLast(\"Second\", new ByteSequence(\"B\".getBytes()));\n         \n         assertTrue(plist.remove(1));\n         assertTrue(plist.remove(0));\n-        assertFalse(plist.remove(3));\n+        assertFalse(plist.remove(0));\n     }\n \n \n@@ -165,53 +177,70 @@ public void testConcurrentAddRemove() throws Exception {\n         IOHelper.mkdirs(directory);\n         IOHelper.deleteChildren(directory);\n         store = new PListStore();\n+        store.setCleanupInterval(400);\n         store.setDirectory(directory);\n         store.setJournalMaxFileLength(1024*5);\n         store.start();\n \n-        final ByteSequence payload = new ByteSequence(new byte[1024*4]);\n+        final ByteSequence payload = new ByteSequence(new byte[1024*2]);\n \n \n         final Vector<Throwable> exceptions = new Vector<Throwable>();\n-        final int iterations = 1000;\n+        final int iterations = 5000;\n         final int numLists = 10;\n \n         final PList[] lists = new PList[numLists];\n+        String threadName = Thread.currentThread().getName();\n         for (int i=0; i<numLists; i++) {\n-            lists[i] = store.getPList(\"List\" + i);\n+            Thread.currentThread().setName(\"C:\"+String.valueOf(i));\n+            lists[i] = store.getPList(String.valueOf(i));\n         }\n+        Thread.currentThread().setName(threadName);\n \n-        ExecutorService executor = Executors.newFixedThreadPool(100);\n+        executor = Executors.newFixedThreadPool(100);\n         class A implements Runnable {\n             @Override\n             public void run() {\n+                final String threadName = Thread.currentThread().getName();\n                 try {\n                     for (int i=0; i<iterations; i++) {\n                         PList candidate = lists[i%numLists];\n-                        candidate.addLast(String.valueOf(i), payload);\n-                        PListEntry entry = candidate.getFirst();\n-                        assertTrue(candidate.remove(String.valueOf(i)));\n+                        Thread.currentThread().setName(\"ALRF:\"+candidate.getName());\n+                        synchronized (plistLocks(candidate)) {\n+                            candidate.addLast(String.valueOf(i), payload);\n+                            PListEntry entry = candidate.getFirst();\n+                            assertTrue(candidate.remove(String.valueOf(i)));\n+                        }\n                     }\n                 } catch (Exception error) {\n+                    LOG.error(\"Unexpcted ex\", error);\n                     error.printStackTrace();\n                     exceptions.add(error);\n+                }  finally {\n+                    Thread.currentThread().setName(threadName);\n                 }\n             }\n         };\n \n         class B implements  Runnable {\n             @Override\n             public void run() {\n+                final String threadName = Thread.currentThread().getName();\n                 try {\n                     for (int i=0; i<iterations; i++) {\n                         PList candidate = lists[i%numLists];\n-                        candidate.addLast(String.valueOf(i), payload);\n-                        PListEntry entry = candidate.getFirst();\n-                        assertTrue(candidate.remove(String.valueOf(i)));\n+                        Thread.currentThread().setName(\"ALRF:\"+candidate.getName());\n+                         synchronized (plistLocks(candidate)) {\n+                            candidate.addLast(String.valueOf(i), payload);\n+                            PListEntry entry = candidate.getFirst();\n+                            assertTrue(candidate.remove(String.valueOf(i)));\n+                         }\n                     }\n                 } catch (Exception error) {\n                     error.printStackTrace();\n                     exceptions.add(error);\n+                }  finally {\n+                    Thread.currentThread().setName(threadName);\n                 }\n             }\n         };\n@@ -244,7 +273,7 @@ public void testConcurrentAddLast() throws Exception {\n \n         final int numThreads = 20;\n         final int iterations = 2000;\n-        ExecutorService executor = Executors.newFixedThreadPool(100);\n+        executor = Executors.newFixedThreadPool(100);\n         for (int i=0; i<numThreads; i++) {\n             new Job(i, PListTest.TaskType.ADD, iterations).run();\n         }\n@@ -333,7 +362,7 @@ public void testConcurrentAddRemoveWithPreload() throws Exception {\n         }\n \n         LOG.info(\"parallel add and remove\");\n-        ExecutorService executor = Executors.newFixedThreadPool(numLists*2);\n+        executor = Executors.newFixedThreadPool(numLists*2);\n         for (int i=0; i<numLists*2; i++) {\n             executor.execute(new Job(i, i>=numLists ? PListTest.TaskType.ADD : PListTest.TaskType.REMOVE, iterations));\n         }\n@@ -344,7 +373,72 @@ public void testConcurrentAddRemoveWithPreload() throws Exception {\n         assertTrue(\"no exceptions\", exceptions.isEmpty());\n     }\n \n-    enum TaskType {CREATE, DELETE, ADD, REMOVE, ITERATE}\n+    // for non determinant issues, increasing this may help diagnose\n+    final int numRepeats = 1;\n+\n+    @Test\n+    public void testRepeatStressWithCache() throws Exception {\n+        for (int i=0; i<numRepeats;i++) {\n+            do_testConcurrentAddIterateRemove(true);\n+        }\n+    }\n+\n+    @Test\n+    public void testRepeatStressWithOutCache() throws Exception {\n+        for (int i=0; i<numRepeats;i++) {\n+            do_testConcurrentAddIterateRemove(false);\n+        }\n+    }\n+\n+    public void do_testConcurrentAddIterateRemove(boolean enablePageCache) throws Exception {\n+        File directory = store.getDirectory();\n+        store.stop();\n+        IOHelper.mkdirs(directory);\n+        IOHelper.deleteChildren(directory);\n+        store = new PListStore();\n+        store.setIndexEnablePageCaching(enablePageCache);\n+        store.setIndexPageSize(2*1024);\n+        store.setDirectory(directory);\n+        store.start();\n+\n+        final int iterations = 5000;\n+        final int numLists = 50;\n+\n+        LOG.info(\"create\");\n+        for (int i=0; i<numLists;i++) {\n+            new Job(i, PListTest.TaskType.CREATE, iterations).run();\n+        }\n+\n+        LOG.info(\"fill\");\n+        for (int i=0; i<numLists;i++) {\n+            new Job(i, PListTest.TaskType.ADD, iterations).run();\n+        }\n+\n+        LOG.info(\"parallel add and remove\");\n+        executor = Executors.newFixedThreadPool(400);\n+        final int numProducer = 5;\n+        final int numConsumer = 50;\n+        for (int i=0; i<numLists; i++) {\n+            for (int j=0; j<numProducer; j++) {\n+                executor.execute(new Job(i, PListTest.TaskType.ADD, iterations*2));\n+            }\n+            for (int k=0;k<numConsumer; k++) {\n+                executor.execute(new Job(i, TaskType.ITERATE_REMOVE, iterations/4));\n+            }\n+        }\n+\n+         for (int i=numLists; i<numLists*10; i++) {\n+            executor.execute(new Job(i, PListTest.TaskType.ADD, iterations));\n+         }\n+\n+        executor.shutdown();\n+        LOG.info(\"wait for parallel work to complete\");\n+        boolean shutdown = executor.awaitTermination(60*60, TimeUnit.SECONDS);\n+        assertTrue(\"test did not  timeout \", shutdown);\n+        assertTrue(\"no exceptions\", exceptions.isEmpty());\n+    }\n+\n+    enum TaskType {CREATE, DELETE, ADD, REMOVE, ITERATE, ITERATE_REMOVE}\n \n     class Job implements Runnable {\n \n@@ -360,52 +454,102 @@ public Job(int id, TaskType t, int iterations) {\n \n         @Override\n         public void run() {\n+            final String threadName = Thread.currentThread().getName();\n             try {\n                 PList plist = null;\n                 switch (task) {\n                     case CREATE:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"C:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+                        LOG.info(\"Job-\" + id + \", CREATE\");\n                         break;\n                     case DELETE:\n-                        store.removePList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"D:\"+id);\n+                        store.removePList(String.valueOf(id));\n                         break;\n                     case ADD:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"A:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n \n                         for (int j = 0; j < iterations; j++) {\n-                            plist.addLast(idSeed + \"id\" + j, payload);\n-                            if (j > 0 && j % (iterations / 2) == 0) {\n-                                LOG.info(\"Job-\" + id + \", Done: \" + j);\n+                            synchronized (plistLocks(plist)) {\n+                                plist.addLast (\"PL>\"  + id + idSeed + \"-\" + j, payload);\n                             }\n                         }\n+                        LOG.info(\"Job-\" + id + \", Add, done: \" + iterations);\n                         break;\n                     case REMOVE:\n-                        plist = store.getPList(\"List-\" + id);\n-\n-                        for (int j = iterations -1; j >= 0; j--) {\n-                            plist.remove(idSeed + \"id\" + j);\n-                            if (j > 0 && j % (iterations / 2) == 0) {\n-                                LOG.info(\"Job-\" + id + \" Done remove: \" + j);\n+                        Thread.currentThread().setName(\"R:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+                        synchronized (plistLocks(plist)) {\n+\n+                            for (int j = iterations -1; j >= 0; j--) {\n+                                plist.remove(\"PL>\"  + id + idSeed + \"-\" + j);\n+                                if (j > 0 && j % (iterations / 2) == 0) {\n+                                    LOG.info(\"Job-\" + id + \" Done remove: \" + j);\n+                                }\n                             }\n                         }\n                         break;\n                     case ITERATE:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"I:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+\n+                        synchronized (plistLocks(plist)) {\n+                            Iterator<PListEntry> iterator = plist.iterator();\n+                            PListEntry element = null;\n+                            while (iterator.hasNext()) {\n+                                element = iterator.next();\n+                            }\n+                        }\n+                        break;\n+\n+                    case ITERATE_REMOVE:\n+                        Thread.currentThread().setName(\"IRM:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n \n-                        Iterator<PListEntry> iterator = plist.iterator();\n-                        PListEntry element = null;\n-                        while (iterator.hasNext()) {\n-                            element = iterator.next();\n+                        int removeCount = 0;\n+                        synchronized (plistLocks(plist)) {\n+\n+                            Iterator<PListEntry> removeIterator = plist.iterator();\n+                            PListEntry v = null;\n+\n+                            while (removeIterator.hasNext()) {\n+                                v = removeIterator.next();\n+                                removeIterator.remove();\n+                                if (removeCount++ > iterations) {\n+                                    break;\n+                                }\n+                            }\n                         }\n+                        LOG.info(\"Job-\" + id + \" Done remove: \" + removeCount);\n                         break;\n+\n                     default:\n                 }\n \n             } catch (Exception e) {\n                 e.printStackTrace();\n                 exceptions.add(e);\n+                executor.shutdownNow();\n+            } finally {\n+                Thread.currentThread().setName(threadName);\n+            }\n+        }\n+    }\n+\n+    Map<PList, Object> locks = new HashMap<PList, Object>();\n+    private Object plistLocks(PList plist) {\n+        Object lock = null;\n+        synchronized (locks) {\n+            if (locks.containsKey(plist)) {\n+                lock = locks.get(plist);\n+             } else {\n+                lock = new Object();\n+                locks.put(plist, lock);\n             }\n         }\n+        return lock;\n     }\n \n     @Before\n@@ -421,7 +565,7 @@ protected void startStore(File directory) throws Exception {\n         store = new PListStore();\n         store.setDirectory(directory);\n         store.start();\n-        plist = store.getPList(\"test\");\n+        plist = store.getPList(\"main\");\n     }\n \n     @After",
                "changes": 214,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java"
            },
            {
                "additions": 24,
                "sha": "c7e02fd6bfd739cd899179b1c03dfbb4fe29644a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java",
                "deletions": 19,
                "filename": "kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -32,15 +32,15 @@\n public class ListIndex<Key,Value> implements Index<Key,Value> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ListIndex.class);\n-\n+    public  final static long NOT_SET = -1;\n     protected PageFile pageFile;\n     protected long headPageId;\n     protected long tailPageId;\n     private AtomicLong size = new AtomicLong(0);\n \n     protected AtomicBoolean loaded = new AtomicBoolean();\n \n-    private final ListNode.Marshaller<Key, Value> marshaller = new ListNode.Marshaller<Key, Value>(this);\n+    private ListNode.NodeMarshaller<Key, Value> marshaller;\n     private Marshaller<Key> keyMarshaller;\n     private Marshaller<Value> valueMarshaller;\n \n@@ -49,7 +49,7 @@ public ListIndex() {\n \n     public ListIndex(PageFile pageFile, long headPageId) {\n         this.pageFile = pageFile;\n-        this.headPageId = headPageId;\n+        setHeadPageId(headPageId);\n     }\n \n     synchronized public void load(Transaction tx) throws IOException {\n@@ -61,20 +61,23 @@ synchronized public void load(Transaction tx) throws IOException {\n             if( valueMarshaller == null ) {\n                 throw new IllegalArgumentException(\"The value marshaller must be set before loading the ListIndex\");\n             }\n-            \n-            final Page<ListNode<Key,Value>> p = tx.load(headPageId, null);\n+\n+            marshaller = new ListNode.NodeMarshaller<Key, Value>(keyMarshaller, valueMarshaller);\n+            final Page<ListNode<Key,Value>> p = tx.load(getHeadPageId(), null);\n             if( p.getType() == Page.PAGE_FREE_TYPE ) {\n                  // Need to initialize it..\n                 ListNode<Key, Value> root = createNode(p);\n                 storeNode(tx, root, true);\n-                tailPageId = headPageId = p.getPageId();\n+                setHeadPageId(p.getPageId());\n+                setTailPageId(getHeadPageId());\n             } else {\n-                ListNode<Key, Value> node = loadNode(tx, headPageId);\n+                ListNode<Key, Value> node = loadNode(tx, getHeadPageId());\n+                setTailPageId(getHeadPageId());\n                 size.addAndGet(node.size(tx));\n-                while (node.getNext() != -1) {\n+                while (node.getNext() != NOT_SET ) {\n                     node = loadNode(tx, node.getNext());\n                     size.addAndGet(node.size(tx));\n-                    tailPageId = node.getPageId();\n+                    setTailPageId(node.getPageId());\n                 }\n             }\n         }\n@@ -86,11 +89,11 @@ synchronized public void unload(Transaction tx) {\n     }\n     \n     protected ListNode<Key,Value> getHead(Transaction tx) throws IOException {\n-        return loadNode(tx, headPageId);\n+        return loadNode(tx, getHeadPageId());\n     }\n \n     protected ListNode<Key,Value> getTail(Transaction tx) throws IOException {\n-        return loadNode(tx, tailPageId);\n+        return loadNode(tx, getTailPageId());\n     }\n \n     synchronized public boolean containsKey(Transaction tx, Key key) throws IOException {\n@@ -201,25 +204,23 @@ private void assertLoaded() throws IllegalStateException {\n         Page<ListNode<Key,Value>> page = tx.load(pageId, marshaller);\n         ListNode<Key, Value> node = page.get();\n         node.setPage(page);\n+        node.setContainingList(this);\n         return node;\n     }\n \n     ListNode<Key,Value> createNode(Page<ListNode<Key,Value>> page) throws IOException {\n-        ListNode<Key,Value> node = new ListNode<Key,Value>(this);\n+        ListNode<Key,Value> node = new ListNode<Key,Value>();\n         node.setPage(page);\n         page.set(node);\n+        node.setContainingList(this);\n         return node;\n     }\n \n-    ListNode<Key,Value> createNode(Transaction tx) throws IOException {\n-        Page<ListNode<Key,Value>> page = tx.load(tx.<Object>allocate(1).getPageId(), null);\n-        ListNode<Key,Value> node = new ListNode<Key,Value>(this);\n-        node.setPage(page);\n-        page.set(node);\n-        return node;\n+    public ListNode<Key,Value> createNode(Transaction tx) throws IOException {\n+        return createNode(tx.<ListNode<Key,Value>>load(tx.<ListNode<Key,Value>>allocate().getPageId(), null));\n     }\n \n-    void storeNode(Transaction tx, ListNode<Key,Value> node, boolean overflow) throws IOException {\n+    public void storeNode(Transaction tx, ListNode<Key,Value> node, boolean overflow) throws IOException {\n         tx.store(node.getPage(), marshaller, overflow);\n     }\n         \n@@ -257,6 +258,10 @@ public void setTailPageId(long tailPageId) {\n         this.tailPageId = tailPageId;\n     }\n \n+    public long getTailPageId() {\n+       return tailPageId;\n+    }\n+\n     public long size() {\n         return size.get();\n     }",
                "changes": 43,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java"
            },
            {
                "additions": 122,
                "sha": "b203ff17815c5d8958a546916842b7127b19e2cf",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java",
                "deletions": 90,
                "filename": "kahadb/src/main/java/org/apache/kahadb/index/ListNode.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.kahadb.page.Transaction;\n import org.apache.kahadb.util.LinkedNode;\n import org.apache.kahadb.util.LinkedNodeList;\n+import org.apache.kahadb.util.Marshaller;\n import org.apache.kahadb.util.VariableMarshaller;\n \n /**\n@@ -35,22 +36,24 @@\n public final class ListNode<Key,Value> {\n     private final static boolean ADD_FIRST = true;\n     private final static boolean ADD_LAST = false;\n-    private final static long NOT_SET = -1;\n \n     // The index that this node is part of.\n-    private final ListIndex<Key,Value> index;\n+    private ListIndex<Key,Value> containingList;\n \n     // The page associated with this node\n     private Page<ListNode<Key,Value>> page;\n \n-    protected LinkedNodeList<KeyValueEntry<Key, Value>> entries = new LinkedNodeList<KeyValueEntry<Key, Value>>();\n+    private LinkedNodeList<KeyValueEntry<Key, Value>> entries = new LinkedNodeList<KeyValueEntry<Key, Value>>() {\n+\n+        @Override\n+        public String toString() {\n+            return \"PageId:\" + page.getPageId() + \", index:\" + containingList + super.toString();\n+        }\n+    };\n \n     // The next page after this one.\n-    private long next = NOT_SET;\n+    private long next = ListIndex.NOT_SET;\n \n-    public int size(Transaction tx) {\n-        return entries.size();\n-    }\n \n     static final class KeyValueEntry<Key, Value> extends LinkedNode<KeyValueEntry<Key, Value>> implements Entry<Key, Value>\n     {\n@@ -83,11 +86,13 @@ public String toString() {\n     private final class ListNodeIterator implements Iterator<ListNode<Key,Value>> {\n \n         private final Transaction tx;\n+        private final ListIndex<Key,Value> index;\n         ListNode<Key,Value> nextEntry;\n \n-        private ListNodeIterator(Transaction tx, ListNode<Key,Value> current) throws IOException {\n+        private ListNodeIterator(Transaction tx, ListNode<Key,Value> current) {\n             this.tx = tx;\n             nextEntry = current;\n+            index = current.getContainingList();\n         }\n \n         public boolean hasNext() {\n@@ -96,8 +101,8 @@ public boolean hasNext() {\n \n         public ListNode<Key,Value> next() {\n             ListNode<Key,Value> current = nextEntry;\n-            if( nextEntry !=null ) {\n-                if (nextEntry.next != NOT_SET) {\n+            if( current !=null ) {\n+                if (current.next != ListIndex.NOT_SET) {\n                     try {\n                         nextEntry = index.loadNode(tx, current.next);\n                     } catch (IOException unexpected) {\n@@ -120,64 +125,96 @@ public void remove() {\n     private final class ListIterator implements Iterator<Entry<Key, Value>> {\n \n         private final Transaction tx;\n-        ListNode<Key,Value> current, prev;\n+        private final ListIndex<Key,Value> targetList;\n+        ListNode<Key,Value> currentNode, previousNode;\n         KeyValueEntry<Key, Value> nextEntry;\n-        KeyValueEntry<Key, Value>  toRemove;\n+        KeyValueEntry<Key, Value> entryToRemove;\n \n-        private ListIterator(Transaction tx, ListNode<Key,Value> current, long nextIndex) throws IOException {\n+        private ListIterator(Transaction tx, ListNode<Key,Value> current, long start) {\n             this.tx = tx;\n-            this.current = current;\n+            this.currentNode = current;\n+            this.targetList = current.getContainingList();\n             nextEntry = current.entries.getHead();\n-            if (nextIndex > 0 && nextEntry != null) {\n-                for (long i=0; i<nextIndex; i++) {\n-                    nextEntry = nextEntry.getNext();\n-                    if (nextEntry == null) {\n-                        if (!nextFromNextListNode())\n-                            throw new NoSuchElementException(\"Index out of range: \" + nextIndex);\n-                        }\n-                    }\n-                }\n+            if (start > 0) {\n+                moveToRequestedStart(start);\n             }\n+        }\n \n-        private boolean nextFromNextListNode() {\n-            boolean haveNext = false;\n-            if (current.getNext() != NOT_SET) {\n+        private void moveToRequestedStart(final long start) {\n+            long count = 0;\n+            while (hasNext() && count < start) {\n+                next();\n+                count++;\n+            }\n+            if (!hasNext()) {\n+                throw new NoSuchElementException(\"Index \" + start + \" out of current range: \" + count);\n+            }\n+        }\n+\n+        private KeyValueEntry<Key, Value> getFromNextNode() {\n+            KeyValueEntry<Key, Value> result = null;\n+            if (currentNode.getNext() != ListIndex.NOT_SET) {\n                 try {\n-                    prev = current;\n-                    current = index.loadNode(tx, current.getNext());\n+                    previousNode = currentNode;\n+                    currentNode = targetList.loadNode(tx, currentNode.getNext());\n                 } catch (IOException unexpected) {\n                     NoSuchElementException e = new NoSuchElementException(unexpected.getLocalizedMessage());\n                     e.initCause(unexpected);\n                     throw e;\n                 }\n-                nextEntry = current.entries.getHead();\n-                haveNext = nextEntry != null;\n+                result = currentNode.entries.getHead();\n             }\n-            return haveNext;\n+            return result;\n         }\n \n         public boolean hasNext() {\n-            return nextEntry !=null || nextFromNextListNode();\n+            if (nextEntry == null) {\n+                nextEntry = getFromNextNode();\n+            }\n+            return nextEntry != null;\n         }\n \n         public Entry<Key, Value> next() {\n             if( nextEntry !=null ) {\n-                toRemove = nextEntry;\n-                nextEntry=toRemove.getNext();\n-                return toRemove;\n+                entryToRemove = nextEntry;\n+                nextEntry = entryToRemove.getNext();\n+                return entryToRemove;\n             } else {\n                 throw new NoSuchElementException();\n             }\n         }\n \n         public void remove() {\n-            if (toRemove == null) {\n-                throw new IllegalStateException(\"can only remove once, call next again\");\n+            if (entryToRemove == null) {\n+                throw new IllegalStateException(\"can only remove once, call hasNext();next() again\");\n             }\n             try {\n-                doRemove(tx, current, prev, toRemove);\n-                index.onRemove();\n-                toRemove = null;\n+                entryToRemove.unlink();\n+                entryToRemove = null;\n+                ListNode<Key,Value> toRemoveNode = null;\n+                if (currentNode.entries.isEmpty()) {\n+                    // may need to free this node\n+                    if (currentNode.isHead() && currentNode.isTail()) {\n+                        // store empty list\n+                    } else if (currentNode.isHead()) {\n+                        // new head\n+                        toRemoveNode = currentNode;\n+                        nextEntry = getFromNextNode();\n+                        targetList.setHeadPageId(currentNode.getPageId());\n+                    } else if (currentNode.isTail()) {\n+                        toRemoveNode = currentNode;\n+                        previousNode.setNext(ListIndex.NOT_SET);\n+                        previousNode.store(tx);\n+                        targetList.setTailPageId(previousNode.getPageId());\n+                    }\n+                }\n+                targetList.onRemove();\n+\n+                if (toRemoveNode != null) {\n+                    tx.free(toRemoveNode.getPage());\n+                } else {\n+                    currentNode.store(tx);\n+                }\n             } catch (IOException unexpected) {\n                 IllegalStateException e = new IllegalStateException(unexpected.getLocalizedMessage());\n                 e.initCause(unexpected);\n@@ -192,11 +229,13 @@ public void remove() {\n      * @param <Key>\n      * @param <Value>\n      */\n-    static public class Marshaller<Key,Value> extends VariableMarshaller<ListNode<Key,Value>> {\n-        private final ListIndex<Key,Value> index;\n+    static public final class NodeMarshaller<Key,Value> extends VariableMarshaller<ListNode<Key,Value>> {\n+        private final Marshaller<Key> keyMarshaller;\n+        private final Marshaller<Value> valueMarshaller;\n \n-        public Marshaller(ListIndex<Key,Value> index) {\n-            this.index = index;\n+        public NodeMarshaller(Marshaller<Key> keyMarshaller, Marshaller<Value> valueMarshaller) {\n+            this.keyMarshaller = keyMarshaller;\n+            this.valueMarshaller = valueMarshaller;\n         }\n \n         public void writePayload(ListNode<Key,Value> node, DataOutput os) throws IOException {\n@@ -209,58 +248,31 @@ public void writePayload(ListNode<Key,Value> node, DataOutput os) throws IOExcep\n             os.writeShort(count);\n             KeyValueEntry<Key, Value> entry = node.entries.getHead();\n             while (entry != null) {\n-                index.getKeyMarshaller().writePayload((Key) entry.getKey(), os);\n-                index.getValueMarshaller().writePayload((Value) entry.getValue(), os);\n+                keyMarshaller.writePayload((Key) entry.getKey(), os);\n+                valueMarshaller.writePayload((Value) entry.getValue(), os);\n                 entry = entry.getNext();\n             }\n         }\n \n         @SuppressWarnings(\"unchecked\")\n         public ListNode<Key,Value> readPayload(DataInput is) throws IOException {\n-            ListNode<Key,Value> node = new ListNode<Key,Value>(index);\n+            ListNode<Key,Value> node = new ListNode<Key,Value>();\n             node.next = is.readLong();\n             final short size = is.readShort();\n             for (short i = 0; i < size; i++) {\n                 node.entries.addLast(\n-                        new KeyValueEntry(index.getKeyMarshaller().readPayload(is),\n-                                                     index.getValueMarshaller().readPayload(is)));\n+                        new KeyValueEntry(keyMarshaller.readPayload(is),\n+                                                     valueMarshaller.readPayload(is)));\n             }\n             return node;\n         }\n     }\n \n-    public ListNode(ListIndex<Key, Value> index) {\n-        this.index = index;\n-    }\n-\n-    private void doRemove(final Transaction tx, final ListNode current, final ListNode prev, KeyValueEntry<Key, Value> entry) throws IOException {\n-        entry.unlink();\n-        if (current.entries.isEmpty()) {\n-                if (current.getPageId() == index.getHeadPageId()) {\n-                    if (current.getNext() != NOT_SET) {\n-                        // new head\n-                        index.setHeadPageId(current.getNext());\n-                        tx.free(current.getPageId());\n-                    } else {\n-                        //  store current in empty state\n-                        store(tx);\n-                    }\n-                } else {\n-                    // need to unlink the node\n-                    prev.setNext(current.next);\n-                    index.storeNode(tx, prev, false);\n-                    tx.free(current.getPageId());\n-                }\n-        } else {\n-            store(tx);\n-        }\n-    }\n-\n     public Value put(Transaction tx, Key key, Value value) throws IOException {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n-        entries.addLast(new KeyValueEntry(key, value));\n+        entries.addLast(new KeyValueEntry<Key, Value>(key, value));\n         store(tx, ADD_LAST);\n         return null;\n     }\n@@ -269,46 +281,46 @@ public Value addFirst(Transaction tx, Key key, Value value) throws IOException {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n-        entries.addFirst(new KeyValueEntry(key, value));\n+        entries.addFirst(new KeyValueEntry<Key, Value>(key, value));\n         store(tx, ADD_FIRST);\n         return null;\n     }\n \n     private void store(Transaction tx, boolean addFirst) throws IOException {\n         try {\n-            index.storeNode(tx, this, false);\n+            getContainingList().storeNode(tx, this, false);\n         } catch ( Transaction.PageOverflowIOException e ) {\n                 // If we get an overflow\n                 split(tx, addFirst);\n         }\n     }\n \n     private void store(Transaction tx) throws IOException {\n-        index.storeNode(tx, this, false);\n+        getContainingList().storeNode(tx, this, false);\n     }\n \n     private void split(Transaction tx, boolean isAddFirst) throws IOException {\n-        ListNode<Key, Value> extension = index.createNode(tx);\n+        ListNode<Key, Value> extension = getContainingList().createNode(tx);\n         if (isAddFirst) {\n             // head keeps the first entry, insert extension with the rest\n             extension.setNext(this.getNext());\n             this.setNext(extension.getPageId());\n             extension.setEntries(entries.getHead().splitAfter());\n         }  else {\n-            index.setTailPageId(extension.getPageId());\n             this.setNext(extension.getPageId());\n             extension.setEntries(entries.getTail().getPrevious().splitAfter());\n+            getContainingList().setTailPageId(extension.getPageId());\n         }\n-        index.storeNode(tx, this, false);\n         extension.store(tx, isAddFirst);\n+        store(tx);\n     }\n \n     // called after a split\n     private void setEntries(LinkedNodeList<KeyValueEntry<Key, Value>> list) {\n         this.entries = list;\n     }\n \n-    public Value get(Transaction tx, Key key) throws IOException {\n+    public Value get(Transaction tx, Key key) {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n@@ -324,15 +336,15 @@ public Value get(Transaction tx, Key key) throws IOException {\n         return result;\n     }\n \n-    public boolean isEmpty(final Transaction tx) throws IOException {\n+    public boolean isEmpty(final Transaction tx)  {\n         return entries.isEmpty();\n     }\n \n-    public Entry<Key,Value> getFirst(Transaction tx) throws IOException {\n+    public Entry<Key,Value> getFirst(Transaction tx) {\n         return entries.getHead();\n     }\n \n-    public Entry<Key,Value> getLast(Transaction tx) throws IOException {\n+    public Entry<Key,Value> getLast(Transaction tx) {\n         return entries.getTail();\n     }\n \n@@ -353,7 +365,7 @@ public void clear(Transaction tx) throws IOException {\n         tx.free(this.getPageId());\n     }\n \n-    public boolean contains(Transaction tx, Key key) throws IOException {\n+    public boolean contains(Transaction tx, Key key) {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n@@ -392,10 +404,30 @@ public long getNext() {\n     public void setNext(long next) {\n         this.next = next;\n     }\n-    \n+\n+    public void setContainingList(ListIndex<Key, Value> list) {\n+        this.containingList = list;\n+    }\n+\n+    public ListIndex<Key,Value> getContainingList() {\n+        return containingList;\n+    }\n+\n+    public boolean isHead() {\n+        return getPageId() == containingList.getHeadPageId();\n+    }\n+\n+    public boolean isTail() {\n+        return getPageId() == containingList.getTailPageId();\n+    }\n+\n+    public int size(Transaction tx) {\n+        return entries.size();\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"[ListNode(\" + page.getPageId() + \"->\" + next + \") \" + entries.toString() + \"]\";\n+        return \"[ListNode(\" + (page != null ?  page.getPageId() + \"->\" + next : \"null\") + \")[\" + entries.size() + \"]]\";\n     }\n }\n ",
                "changes": 212,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java"
            },
            {
                "additions": 4,
                "sha": "40642f649bbe9936e0a77faafb527d31caa2dbf8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java",
                "deletions": 6,
                "filename": "kahadb/src/main/java/org/apache/kahadb/page/PageFile.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -171,7 +171,7 @@ public void setCurrentLocation(Page page, int location, int length) {\n \n         @Override\n         public String toString() {\n-            return \"[PageWrite:\"+page.getPageId()+\"]\";\n+            return \"[PageWrite:\"+page.getPageId()+ \"-\" + page.getType()  + \"]\";\n         }\n \n         @SuppressWarnings(\"unchecked\")\n@@ -827,9 +827,7 @@ void readPage(long pageId, byte[] data) throws IOException {\n \n     public void freePage(long pageId) {\n         freeList.add(pageId);\n-        if( enablePageCaching ) {\n-            pageCache.remove(pageId);\n-        }\n+        removeFromCache(pageId);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n@@ -932,9 +930,9 @@ void addToCache(Page page) {\n         }\n     }\n \n-    void removeFromCache(Page page) {\n+    void removeFromCache(long pageId) {\n         if (enablePageCaching) {\n-            pageCache.remove(page.getPageId());\n+            pageCache.remove(pageId);\n         }\n     }\n ",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java"
            },
            {
                "additions": 0,
                "sha": "a327927ec3636867ccae1c14766793d74eb06ccf",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java",
                "deletions": 2,
                "filename": "kahadb/src/main/java/org/apache/kahadb/page/Transaction.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -129,8 +129,6 @@ public PageFile getPageFile() {\n      *         if the PageFile is not loaded\n      */\n     public <T> Page<T> allocate(int count) throws IOException {\n-        // TODO: we need to track allocated pages so that they can be returned if the\n-        // transaction gets rolled back.\n         Page<T> rc = pageFile.allocate(count);\n         allocateList.add(new Sequence(rc.getPageId(), rc.getPageId()+count-1));\n         return rc;",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java"
            },
            {
                "additions": 1,
                "sha": "690190963bcfaa8d79475d8430a2cdc86e60c030",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -197,7 +197,7 @@ public void linkToTail(LinkedNodeList<T> target) {\n \n     public void linkToHead(LinkedNodeList<T> target) {\n         if (list != null) {\n-            throw new IllegalArgumentException(\"This node is already linked to a node\");\n+            throw new IllegalArgumentException(\"This node is already linked to a list\");\n         }\n \n         if (target.head == null) {",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java"
            },
            {
                "additions": 1,
                "sha": "d818b3c88147fd1114dd9a71c9c6f2bc3e2b422d",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "patch": "@@ -204,7 +204,7 @@ public Sequence removeFirstSequence(long count) {\n                 return sequence;\n             }\n             if (sequence.range() > count ) {\n-                Sequence rc = new Sequence(sequence.first, sequence.first+count);\n+                Sequence rc = new Sequence(sequence.first, sequence.first+count-1);\n                 sequence.first+=count;\n                 return rc;\n             }",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-3434: Contention in PLIist creation results in NPE on load - FilePendingMessageCursor. Resolve contention on creation, tidy up ListIndex iterator remove and plist release, additional test that stresses contention such that it can reproduce the stomp load test scenario\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153420 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/bf59b7d70f7552053cfecb66db64658a314ae32c"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/d6ad7c7cd0a2101b9a1160bd8ea7d906437fef10",
        "bug_id": "activemq_114",
        "file": [
            {
                "additions": 4,
                "sha": "6d7a41c58cc0a9a527076d8b19e939604e5d576b",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java?ref=aec047d08b0a249ec0a99444c116d4aa91c60814",
                "patch": "@@ -784,6 +784,10 @@ public void execute(Transaction tx) throws Exception {\n                         MessageOrderCursor moc = sd.subscriptionCursors.get(subscriptionKey);\n                         if (moc == null) {\n                             LastAck pos = sd.subscriptionAcks.get(tx, subscriptionKey);\n+                            if (pos == null) {\n+                                // sub deleted\n+                                return;\n+                            }\n                             sd.orderIndex.setBatch(tx, pos);\n                             moc = sd.orderIndex.cursor;\n                         } else {",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java"
            },
            {
                "additions": 2,
                "sha": "87e94cbe7d16892f1612625faa586ecc602493a8",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=aec047d08b0a249ec0a99444c116d4aa91c60814",
                "patch": "@@ -1314,7 +1314,7 @@ public LastAck() {\n \n         public LastAck(long ackLocation) {\n             this.lastAckedSequence = ackLocation;\n-            this.priority = MessageOrderIndex.HI;\n+            this.priority = MessageOrderIndex.LO;\n         }\n \n         public LastAck(long ackLocation, byte priority) {\n@@ -2207,7 +2207,7 @@ MessageKeys get(Transaction tx, Long key) throws IOException {\n                     result = lowPriorityIndex.get(tx, key);\n                     lastGetPriority = LO;\n                 } else {\n-                  lastGetPriority = HI;\n+                    lastGetPriority = HI;\n                 }\n             } else {\n                 lastGetPriority = DEF;",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/activemq/browse/AMQ-2985 - fix npe on remove consumer track new consumer last ack at lowest priority such that there can be no replay\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1038643 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/aec047d08b0a249ec0a99444c116d4aa91c60814"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/94261594d3ef6d5a9ab15becf6b42a6f80956a18",
        "bug_id": "activemq_115",
        "file": [
            {
                "additions": 6,
                "sha": "70676a7400fc13faddef7b82d305b54dfcb83919",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "patch": "@@ -205,15 +205,19 @@ public Thread newThread(Runnable runnable) {\n     public void doStop(ServiceStopper stopper) throws Exception {\n         //drain down async jobs\n         LOG.info(\"Stopping async queue tasks\");\n-        this.globalQueueSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        if (this.globalQueueSemaphore != null) {\n+            this.globalQueueSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        }\n         synchronized (this.asyncQueueMap) {\n             for (StoreQueueTask task : this.asyncQueueMap.values()) {\n                 task.cancel();\n             }\n             this.asyncQueueMap.clear();\n         }\n         LOG.info(\"Stopping async topic tasks\");\n-        this.globalTopicSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        if (this.globalTopicSemaphore != null) {\n+            this.globalTopicSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        }\n         synchronized (this.asyncTopicMap) {\n             for (StoreTopicTask task : this.asyncTopicMap.values()) {\n                 task.cancel();",
                "changes": 8,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java"
            },
            {
                "additions": 26,
                "sha": "e4beed7ec38216de9f9430ee82559bb20420ab99",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java",
                "deletions": 13,
                "filename": "activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "patch": "@@ -49,9 +49,12 @@\n import org.apache.activemq.ActiveMQConnectionFactory;\n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.command.ActiveMQQueue;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public class FailoverManagedClusterTest extends TestCase {\n-\n+    private static final Log LOG = LogFactory.getLog(FailoverManagedClusterTest.class);\n+    \n     long txGenerator = System.currentTimeMillis();\n     \n     private static final String MASTER_BIND_ADDRESS = \"tcp://0.0.0.0:61616\";\n@@ -61,12 +64,25 @@\n     \n     private BrokerService master;\n     private BrokerService slave;\n+    private CountDownLatch slaveThreadStarted = new CountDownLatch(1);\n \n+    @Override\n     protected void setUp() throws Exception {\n         createAndStartMaster();\n         createAndStartSlave();    \n     }\n     \n+    @Override\n+    protected void tearDown() throws Exception {\n+        if (slave != null) {\n+            slave.stop();\n+        }\n+        if (master != null) {\n+            master.stop();\n+        }\n+    }\n+\n+\n \n     private void createAndStartMaster() throws Exception {\n         master = new BrokerService();\n@@ -88,8 +104,9 @@ private void createAndStartSlave() throws Exception {\n         new Thread(new Runnable() {\n             public void run() {\n                 try {\n+                    slaveThreadStarted.countDown();\n                     slave.start();\n-                    System.out.println(\"slave has started\");\n+                    LOG.info(\"slave has started\");\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                 }\n@@ -112,7 +129,7 @@ public void testFailover() throws Exception {\n \n         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {\n             public void onMessage(Message message) {\n-                System.out.println(\"Received message \" + message);\n+                LOG.info(\"Received message \" + message);\n                 super.onMessage(message);\n                 messageDelivered.countDown();\n             };\n@@ -144,18 +161,14 @@ public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException\n         } catch (InterruptedException e) {\n         }\n \n-        // Send the broker a message to that endpoint\n         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"TEST\"));\n-\n-        // force a failover\n+        slaveThreadStarted.await(10, TimeUnit.SECONDS);\n+        \n+        // force a failover before send\n+        LOG.info(\"Stopping master to force failover..\");\n         master.stop();\n-        slave.waitUntilStarted();\n-\n-        try {\n-            Thread.sleep(2000);\n-        } catch (InterruptedException ie) {\n-            // ignore\n-        }\n+        master = null;\n+        assertTrue(\"slave started ok\", slave.waitUntilStarted());\n \n         producer.send(session.createTextMessage(\"Hello, again!\"));\n ",
                "changes": 39,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java"
            },
            {
                "additions": 10,
                "sha": "70a8f8b8474d14ac6f498a2d6fe452c66d83130f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/LockFile.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.RandomAccessFile;\r\n import java.nio.channels.FileLock;\r\n import java.nio.channels.OverlappingFileLockException;\r\n+import java.util.Date;\r\n \r\n /**\r\n  * Used to lock a File.\r\n@@ -55,7 +56,9 @@ synchronized public void lock() throws IOException {\n         }\r\n         \r\n         IOHelper.mkdirs(file.getParentFile());\r\n-        \r\n+        if (System.getProperty(getVmLockKey()) != null) {\r\n+            throw new IOException(\"File '\" + file + \"' could not be locked as lock is already held for this jvm.\");\r\n+        }\r\n         if (lock == null) {\r\n             readFile = new RandomAccessFile(file, \"rw\");\r\n             IOException reason = null;\r\n@@ -66,6 +69,7 @@ synchronized public void lock() throws IOException {\n             }\r\n             if (lock != null) {\r\n                 lockCounter++;\r\n+                System.setProperty(getVmLockKey(), new Date().toString());\r\n             } else {\r\n                 // new read file for next attempt\r\n                 closeReadFile();\r\n@@ -94,6 +98,7 @@ public void unlock() {\n         if (lock != null) {\r\n             try {\r\n                 lock.release();\r\n+                System.getProperties().remove(getVmLockKey());\r\n             } catch (Throwable ignore) {\r\n             }\r\n             lock = null;\r\n@@ -105,6 +110,10 @@ public void unlock() {\n         }\r\n     }\r\n \r\n+    private String getVmLockKey() throws IOException {\r\n+        return getClass().getName() + \".lock.\" + file.getCanonicalPath();\r\n+    }\r\n+\r\n     private void closeReadFile() {\r\n         // close the file.\r\n         if (readFile != null) {\r",
                "changes": 11,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java"
            }
        ],
        "repo": "activemq",
        "message": "have KahaDB lock work in vm, so master slave tests can work ok. preserver kaha behaiour in this regard as it makes testing simpler. fix npe on shutdown if start fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@955973 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/e85dda9c64c27a3449da0c44b5314aa8be06cdc9"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/a88a513e3c91d65a311614ca84c9d2725d694bbe",
        "bug_id": "activemq_116",
        "file": [
            {
                "additions": 19,
                "sha": "0c497f64386d2973994e8a302d7a18eb4156d83f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/38b840a61f4e909f6196fd3cf36e884f586ded58/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 20,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=38b840a61f4e909f6196fd3cf36e884f586ded58",
                "patch": "@@ -218,26 +218,25 @@ public void execute(Transaction tx) throws IOException {\n \t * @throws IOException\n \t */\n \tpublic void open() throws IOException {\n+\t\tFile lockFileName = new File(directory, \"lock\");\n+\t\tlockFile = new LockFile(lockFileName, true);\n+\t\tif (failIfDatabaseIsLocked) {\n+\t\t    lockFile.lock();\n+\t\t} else {\n+\t\t    while (true) {\n+\t\t        try {\n+\t\t            lockFile.lock();\n+\t\t            break;\n+\t\t        } catch (IOException e) {\n+\t\t            LOG.info(\"Database \"+lockFileName+\" is locked... waiting \" + (DATABASE_LOCKED_WAIT_DELAY / 1000) + \" seconds for the database to be unlocked. Reason: \" + e);\n+\t\t            try {\n+\t\t                Thread.sleep(DATABASE_LOCKED_WAIT_DELAY);\n+\t\t            } catch (InterruptedException e1) {\n+\t\t            }\n+\t\t        }\n+\t\t    }\n+\t\t}\n \t\tif( opened.compareAndSet(false, true) ) {\n-            File lockFileName = new File(directory, \"lock\");\n-            lockFile = new LockFile(lockFileName, true);\n-\t        if (failIfDatabaseIsLocked) {\n-\t            lockFile.lock();\n-\t        } else {\n-\t            while (true) {\n-\t                try {\n-\t                    lockFile.lock();\n-\t                    break;\n-\t                } catch (IOException e) {\n-\t                    LOG.info(\"Database \"+lockFileName+\" is locked... waiting \" + (DATABASE_LOCKED_WAIT_DELAY / 1000) + \" seconds for the database to be unlocked. Reason: \" + e);\n-\t                    try {\n-\t                        Thread.sleep(DATABASE_LOCKED_WAIT_DELAY);\n-\t                    } catch (InterruptedException e1) {\n-\t                    }\n-\t                }\n-\t            }\n-\t        }\n-\t        \n             getJournal().start();\n             \n \t        loadPageFile();\n@@ -312,7 +311,7 @@ public void close() throws IOException, InterruptedException {\n \t\n     public void unload() throws IOException, InterruptedException {\n         synchronized (indexMutex) {\n-            if( pageFile.isLoaded() ) {\n+            if( pageFile != null && pageFile.isLoaded() ) {\n                 metadata.state = CLOSED_STATE;\n                 metadata.firstInProgressTransactionLocation = getFirstInProgressTxLocation();\n     ",
                "changes": 39,
                "blob_url": "https://github.com/apache/activemq/blob/38b840a61f4e909f6196fd3cf36e884f586ded58/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            },
            {
                "additions": 0,
                "sha": "3051764c74ce4b41c3a0f265d9c8265b4d7c21e2",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/38b840a61f4e909f6196fd3cf36e884f586ded58/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreBrokerTest.java",
                "deletions": 2,
                "filename": "activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreBrokerTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreBrokerTest.java?ref=38b840a61f4e909f6196fd3cf36e884f586ded58",
                "patch": "@@ -17,11 +17,9 @@\n package org.apache.activemq.store.kahadb;\n \n import java.io.File;\n-import java.net.URI;\n \n import junit.framework.Test;\n \n-import org.apache.activemq.broker.BrokerFactory;\n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.broker.BrokerTest;\n ",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/38b840a61f4e909f6196fd3cf36e884f586ded58/activemq-core/src/test/java/org/apache/activemq/store/kahadb/KahaDBStoreBrokerTest.java"
            }
        ],
        "repo": "activemq",
        "message": "resolve https://issues.apache.org/activemq/browse/AMQ-2285 - pull file locking outside setting opened state so that an open does not ocurr unless the lock is available, sorts out Npe on shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@783384 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/38b840a61f4e909f6196fd3cf36e884f586ded58"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/2b51c3357e5594a49972cd68e5c5266d045bd13b",
        "bug_id": "activemq_117",
        "file": [
            {
                "additions": 8,
                "sha": "30893688e890b3588694bfc607968b621eb2751a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/e16114f99bdef263f3d79deacea32302f99cd9bf/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java?ref=e16114f99bdef263f3d79deacea32302f99cd9bf",
                "patch": "@@ -310,7 +310,10 @@ public void onStopped(TransportConnection connection) {\n \n     public String getName(){\n         if( name==null ){\n-            name = getUri().toString();\n+        \turi = getUri();\n+        \tif( uri != null ) {\n+        \t\tname = uri.toString();\n+        \t}\n         }\n         return name;\n     }\n@@ -319,7 +322,10 @@ public void setName(String name) {\n     }\n \n     public String toString() {\n-        return getName();\n+        String rc = getName();\n+        if( rc == null )\n+        \trc = super.toString();\n+        return rc;\n     }\n \n \tpublic boolean isDisableAsyncDispatch() {",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/e16114f99bdef263f3d79deacea32302f99cd9bf/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java"
            }
        ],
        "repo": "activemq",
        "message": "Protect against NPE when toString() is called before object is fully initialized.\nSpring seems to be doing this (part of of it's debug logging) with newer releases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@439346 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/e16114f99bdef263f3d79deacea32302f99cd9bf"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/73f0e97531cdd9b596222e26fa256c66af1982df",
        "bug_id": "activemq_118",
        "file": [
            {
                "additions": 99,
                "sha": "f5dee5923a2126d813aeadb10ae08124709c1003",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/8ad6fd36a1a285e37d5e910a1c43994af2100fd5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "deletions": 76,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=8ad6fd36a1a285e37d5e910a1c43994af2100fd5",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.activemq.advisory.AdvisoryBroker;\n import org.apache.activemq.broker.ft.MasterConnector;\n import org.apache.activemq.broker.jmx.BrokerView;\n-import org.apache.activemq.broker.jmx.BrokerViewMBean;\n import org.apache.activemq.broker.jmx.ConnectorView;\n import org.apache.activemq.broker.jmx.ConnectorViewMBean;\n import org.apache.activemq.broker.jmx.FTConnectorView;\n@@ -96,6 +95,7 @@\n     private String brokerName = \"localhost\";\n     private File dataDirectory;\n     private Broker broker;\n+    private BrokerView adminView;\n     private ManagementContext managementContext;\n     private ObjectName brokerObjectName;\n     private TaskRunnerFactory taskRunnerFactory;\n@@ -121,7 +121,6 @@\n     private AtomicBoolean started = new AtomicBoolean(false);\n     private BrokerPlugin[] plugins;\n     private boolean keepDurableSubsActive=true;\n-\n     private BrokerId brokerId;\n \n     /**\n@@ -426,13 +425,15 @@ public void stop() throws Exception {\n \n         if (isUseJmx()) {\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            for (Iterator iter = registeredMBeanNames.iterator(); iter.hasNext();) {\n-                ObjectName name = (ObjectName) iter.next();\n-                try {\n-                    mbeanServer.unregisterMBean(name);\n-                }\n-                catch (Exception e) {\n-                    stopper.onException(mbeanServer, e);\n+            if (mbeanServer != null) {\n+                for (Iterator iter = registeredMBeanNames.iterator(); iter.hasNext();) {\n+                    ObjectName name = (ObjectName) iter.next();\n+                    try {\n+                        mbeanServer.unregisterMBean(name);\n+                    }\n+                    catch (Exception e) {\n+                        stopper.onException(mbeanServer, e);\n+                    }\n                 }\n             }\n             stopper.stop(getManagementContext());\n@@ -445,6 +446,10 @@ public void stop() throws Exception {\n \n     // Properties\n     // -------------------------------------------------------------------------\n+    \n+    /**\n+     * Returns the message broker\n+     */\n     public Broker getBroker() throws Exception {\n         if (broker == null) {\n             log.info(\"ActiveMQ \" + ActiveMQConnectionMetaData.PROVIDER_VERSION + \" JMS Message Broker (\"\n@@ -455,6 +460,24 @@ public Broker getBroker() throws Exception {\n         return broker;\n     }\n \n+    \n+    /**\n+     * Returns the administration view of the broker; used to create and destroy resources such as queues and topics.\n+     * \n+     * Note this method returns null if JMX is disabled.\n+     */\n+    public BrokerView getAdminView() throws Exception {\n+        if (adminView == null) {\n+            // force lazy creation\n+            getBroker();\n+        }\n+        return adminView;\n+    }\n+\n+    public void setAdminView(BrokerView adminView) {\n+        this.adminView = adminView;\n+    }\n+\n     public String getBrokerName() {\n         return brokerName;\n     }\n@@ -774,84 +797,82 @@ protected void processHelperProperties() throws Exception {\n \n     protected void registerConnectorMBean(TransportConnector connector, ObjectName objectName) throws IOException, URISyntaxException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        ConnectorViewMBean view = new ConnectorView(connector);\n-        try {\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            ConnectorViewMBean view = new ConnectorView(connector);\n+            try {\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n \n     protected void registerNetworkConnectorMBean(NetworkConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        NetworkConnectorViewMBean view = new NetworkConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=NetworkConnector,\"+\n-                    \"NetworkConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            NetworkConnectorViewMBean view = new NetworkConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=NetworkConnector,\" + \"NetworkConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n \n     protected void registerProxyConnectorMBean(ProxyConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        ProxyConnectorView view = new ProxyConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=ProxyConnector,\"+\n-                    \"ProxyConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            ProxyConnectorView view = new ProxyConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=ProxyConnector,\" + \"ProxyConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n-    \n+\n     protected void registerFTConnectorMBean(MasterConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        FTConnectorView view = new FTConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=MasterConnector\"\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            FTConnectorView view = new FTConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=MasterConnector\");\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n-    \n+\n     protected void registerJmsConnectorMBean(JmsConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        JmsConnectorView view = new JmsConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=JmsConnector,\"+\n-                    \"JmsConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            JmsConnectorView view = new JmsConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=JmsConnector,\" + \"JmsConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n     \n@@ -882,11 +903,13 @@ public void stop() throws Exception {\n         if (isUseJmx()) {\n             ManagedRegionBroker managedBroker = (ManagedRegionBroker) regionBroker;\n             managedBroker.setContextBroker(broker);\n-            BrokerViewMBean view = new BrokerView(this, managedBroker);\n+            adminView = new BrokerView(this, managedBroker);\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            ObjectName objectName = getBrokerObjectName();\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n+            if (mbeanServer != null) {\n+                ObjectName objectName = getBrokerObjectName();\n+                mbeanServer.registerMBean(adminView, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n         }\n         \n \n@@ -908,8 +931,8 @@ protected Broker createRegionBroker() throws Exception {\n \t\tRegionBroker regionBroker = null;\n         if (isUseJmx()) {\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            regionBroker = new ManagedRegionBroker(this,mbeanServer, getBrokerObjectName(),\n-                    getTaskRunnerFactory(), getMemoryManager(), getPersistenceAdapter());\n+            regionBroker = new ManagedRegionBroker(this, mbeanServer, getBrokerObjectName(), getTaskRunnerFactory(), getMemoryManager(),\n+                    getPersistenceAdapter());\n         }\n         else {\n \t\t\tregionBroker = new RegionBroker(this,getTaskRunnerFactory(), getMemoryManager(), getPersistenceAdapter());\n@@ -1068,7 +1091,7 @@ protected void startAllConnectors() throws Exception{\n                 JmsConnector connector = (JmsConnector) iter.next();\n                 connector.start();\n             }\n-            }\n+        }\n     }\n \n     protected void startTransportConnector(TransportConnector connector) throws Exception {",
                "changes": 175,
                "blob_url": "https://github.com/apache/activemq/blob/8ad6fd36a1a285e37d5e910a1c43994af2100fd5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java"
            }
        ],
        "repo": "activemq",
        "message": "added a helper method to make it easier to work with the admin view together with fixed some NPEs I was getting when redeploying ActiveMQ when using mvn jetty6:run\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@396892 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/8ad6fd36a1a285e37d5e910a1c43994af2100fd5"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/8e7556f397035a813bb8cc6292614d0cdf1d5f5f",
        "bug_id": "activemq_119",
        "file": [
            {
                "additions": 14,
                "sha": "ef8fe0a39657d0dbe7ec61c06c5fa7a27a013b13",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "deletions": 11,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "patch": "@@ -248,7 +248,6 @@ public void writePayload(Metadata object, DataOutput dataOut) throws IOException\n     private boolean checksumJournalFiles = true;\n     protected boolean forceRecoverIndex = false;\n     private final Object checkpointThreadLock = new Object();\n-    private boolean rewriteOnRedelivery = false;\n     private boolean archiveCorruptedIndex = false;\n     private boolean useIndexLFRUEviction = false;\n     private float indexLFUEvictionFactor = 0.2f;\n@@ -1161,7 +1160,6 @@ public void execute(Transaction tx) throws IOException {\n         }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n     protected void process(final KahaUpdateMessageCommand command, final Location location) throws IOException {\n         this.indexLock.writeLock().lock();\n         try {\n@@ -2153,7 +2151,7 @@ private StoredDestination loadStoredDestination(Transaction tx, String key, bool\n                 SequenceSet pendingAcks = subscription.getValue();\n                 if (pendingAcks != null && !pendingAcks.isEmpty()) {\n                     Long lastPendingAck = pendingAcks.getTail().getLast();\n-                    for(Long sequenceId : pendingAcks) {\n+                    for (Long sequenceId : pendingAcks) {\n                         Long current = rc.messageReferences.get(sequenceId);\n                         if (current == null) {\n                             current = new Long(0);\n@@ -2163,6 +2161,8 @@ private StoredDestination loadStoredDestination(Transaction tx, String key, bool\n                         // so we need to ensure we don't count that as a message reference on reload.\n                         if (!sequenceId.equals(lastPendingAck)) {\n                             current = current.longValue() + 1;\n+                        } else {\n+                            current = Long.valueOf(0L);\n                         }\n \n                         rc.messageReferences.put(sequenceId, current);\n@@ -2235,8 +2235,14 @@ private void addAckLocationForRetroactiveSub(Transaction tx, StoredDestination s\n \n         for (Long ackPosition : allOutstanding) {\n             Long count = sd.messageReferences.get(ackPosition);\n-            count = count.longValue() + 1;\n-            sd.messageReferences.put(ackPosition, count);\n+\n+            // There might not be a reference if the ackLocation was the last\n+            // one which is a placeholder for the next incoming message and\n+            // no value was added to the message references table.\n+            if (count != null) {\n+                count = count.longValue() + 1;\n+                sd.messageReferences.put(ackPosition, count);\n+            }\n         }\n     }\n \n@@ -2259,7 +2265,7 @@ private void addAckLocationForNewMessage(Transaction tx, StoredDestination sd, L\n             }\n             count = count.longValue() + 1;\n             sd.messageReferences.put(messageSequence, count);\n-            sd.messageReferences.put(messageSequence+1, Long.valueOf(0L));\n+            sd.messageReferences.put(messageSequence + 1, Long.valueOf(0L));\n         }\n     }\n \n@@ -2322,8 +2328,8 @@ private void removeAckLocation(Transaction tx, StoredDestination sd, String subs\n \n                 // Check if the message is reference by any other subscription.\n                 Long count = sd.messageReferences.get(messageSequence);\n-                if (count != null){\n-                long references = count.longValue() - 1;\n+                if (count != null) {\n+                    long references = count.longValue() - 1;\n                     if (references > 0) {\n                         sd.messageReferences.put(messageSequence, Long.valueOf(references));\n                         return;\n@@ -3050,7 +3056,6 @@ public Long minPendingAdd() {\n             }\n         }\n \n-\n         class MessageOrderIterator implements Iterator<Entry<Long, MessageKeys>>{\n             Iterator<Entry<Long, MessageKeys>>currentIterator;\n             final Iterator<Entry<Long, MessageKeys>>highIterator;\n@@ -3145,7 +3150,6 @@ public boolean hasNext() {\n             public void remove() {\n                 throw new UnsupportedOperationException();\n             }\n-\n         }\n     }\n \n@@ -3209,5 +3213,4 @@ public String getPreallocationStrategy() {\n     public void setPreallocationStrategy(String preallocationStrategy) {\n         this.preallocationStrategy = preallocationStrategy;\n     }\n-\n }",
                "changes": 25,
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java"
            },
            {
                "additions": 2,
                "sha": "e5282b31ad595ca1a9f58c1fae4515e1f208585a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java",
                "deletions": 2,
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "patch": "@@ -68,7 +68,7 @@ public void testFrameSizeToLargeClosesConnection() throws Exception {\n         LOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\n \n         MQTT mqtt = createMQTTConnection();\n-        mqtt.setClientId(getName());\n+        mqtt.setClientId(getTestName());\n         mqtt.setKeepAlive((short) 10);\n         mqtt.setVersion(\"3.1.1\");\n \n@@ -97,7 +97,7 @@ public void testFrameSizeNotExceededWorks() throws Exception {\n         LOG.debug(\"Starting test on connector {} for frame size: {}\", getProtocolScheme(), maxFrameSize);\n \n         MQTT mqtt = createMQTTConnection();\n-        mqtt.setClientId(getName());\n+        mqtt.setClientId(getTestName());\n         mqtt.setKeepAlive((short) 10);\n         mqtt.setVersion(\"3.1.1\");\n ",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTMaxFrameSizeTest.java"
            },
            {
                "additions": 117,
                "sha": "33fb61b44b55159c9c606d0d0a68b012811654b4",
                "status": "added",
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
                "deletions": 0,
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.transport.mqtt;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.broker.BrokerService;\n+import org.apache.activemq.broker.TransportConnector;\n+import org.fusesource.mqtt.client.BlockingConnection;\n+import org.fusesource.mqtt.client.MQTT;\n+import org.fusesource.mqtt.client.QoS;\n+import org.fusesource.mqtt.client.Topic;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MQTTOverlapedSubscriptionsTest {\n+\n+    private BrokerService brokerService;\n+    private String mqttClientUrl;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        initializeBroker(true);\n+    }\n+\n+    @After\n+    public void shutdown() throws Exception {\n+        brokerService.stop();\n+        brokerService.waitUntilStopped();\n+    }\n+\n+    protected void initializeBroker(boolean deleteAllMessagesOnStart) throws Exception {\n+\n+        brokerService = new BrokerService();\n+        brokerService.setPersistent(true);\n+        brokerService.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStart);\n+        TransportConnector connector = new TransportConnector();\n+        connector.setUri(new URI(\"mqtt://localhost:0\"));\n+        connector.setName(\"mqtt\");\n+        brokerService.addConnector(connector);\n+        brokerService.start();\n+        brokerService.waitUntilStarted();\n+\n+        mqttClientUrl = connector.getPublishableConnectString().replace(\"mqtt\", \"tcp\");\n+    }\n+\n+    @Test\n+    public void testMqttResubscribe() throws Exception {\n+        // inactive durable consumer on test/1 will be left on the broker after restart\n+        doTest(\"test/1\");\n+\n+        shutdown();\n+        initializeBroker(false);\n+\n+        // new consumer on test/# will match all messages sent to the inactive sub\n+        doTest(\"test/#\");\n+    }\n+\n+    private BlockingConnection getConnection(String host, String clientId) throws URISyntaxException, Exception {\n+        BlockingConnection conn;\n+        MQTT mqttPub = new MQTT();\n+        mqttPub.setHost(host);\n+        mqttPub.setConnectAttemptsMax(0);\n+        mqttPub.setReconnectAttemptsMax(0);\n+        mqttPub.setClientId(clientId);\n+        mqttPub.setCleanSession(false);\n+        conn = mqttPub.blockingConnection();\n+        conn.connect();\n+        return conn;\n+    }\n+\n+    public void doTest(String subscribe) throws Exception {\n+        String payload = \"This is test payload\";\n+        BlockingConnection connectionPub = getConnection(mqttClientUrl, \"client1\");\n+        BlockingConnection connectionSub = getConnection(mqttClientUrl, \"client2\");\n+        Topic[] topics = { new Topic(subscribe, QoS.values()[1]) };\n+        connectionSub.subscribe(topics);\n+        connectionPub.publish(\"test/1\", payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+        receive(connectionSub, 3000);\n+\n+        //Unsubscribe and resubscribe\n+        connectionSub.unsubscribe(new String[]{subscribe});\n+        connectionSub.subscribe(topics);\n+        connectionPub.publish(subscribe, payload.getBytes(), QoS.AT_LEAST_ONCE, false);\n+        receive(connectionSub, 3000);\n+\n+        connectionPub.disconnect();\n+        connectionSub.disconnect();\n+    }\n+\n+    public byte[] receive(BlockingConnection connection, int timeout) throws Exception {\n+        byte[] result = null;\n+        org.fusesource.mqtt.client.Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);\n+        if (message != null) {\n+            result = message.getPayload();\n+            message.ack();\n+        }\n+        return result;\n+    }\n+}",
                "changes": 117,
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTOverlapedSubscriptionsTest.java"
            },
            {
                "additions": 2,
                "sha": "0b7f958179786c25e649736af860b97c98b9a140",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java",
                "deletions": 2,
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "patch": "@@ -72,7 +72,7 @@ public String getProtocolConfig() {\n     @Test\n     public void testDurableSubscriptionsAreRecovered() throws Exception {\n \n-        MqttClient connection = createClient(getName());\n+        MqttClient connection = createClient(getTestName());\n \n         final String[] topics = { \"TopicA/\", \"TopicB/\", \"TopicC/\" };\n         for (int i = 0; i < topics.length; i++) {\n@@ -90,7 +90,7 @@ public void testDurableSubscriptionsAreRecovered() throws Exception {\n \n         assertStatsForDisconnectedClient(topics.length);\n \n-        connection = createClient(getName());\n+        connection = createClient(getTestName());\n \n         assertStatsForConnectedClient(topics.length);\n     }",
                "changes": 4,
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTSubscriptionRecoveryTest.java"
            },
            {
                "additions": 9,
                "sha": "0b5868763761d714a57e141e203399431b9d8d2f",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java",
                "deletions": 1,
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java?ref=455f1ca475be252b6ffdd07176bf659b81685ea7",
                "patch": "@@ -44,6 +44,7 @@\n import org.apache.activemq.broker.jmx.BrokerViewMBean;\n import org.apache.activemq.broker.jmx.QueueViewMBean;\n import org.apache.activemq.broker.jmx.TopicViewMBean;\n+import org.apache.activemq.store.kahadb.KahaDBStore;\n import org.apache.activemq.transport.mqtt.util.ResourceLoadingSslContext;\n import org.fusesource.mqtt.client.MQTT;\n import org.fusesource.mqtt.client.Tracer;\n@@ -59,6 +60,8 @@\n \n     private static final Logger LOG = LoggerFactory.getLogger(MQTTTestSupport.class);\n \n+    public static final String KAHADB_DIRECTORY = \"target/activemq-data/\";\n+\n     protected BrokerService brokerService;\n     protected int port;\n     protected String jmsUri = \"vm://localhost\";\n@@ -90,7 +93,7 @@ public MQTTTestSupport(String connectorScheme, boolean useSSL) {\n         this.useSSL = useSSL;\n     }\n \n-    public String getName() {\n+    public String getTestName() {\n         return name.getMethodName();\n     }\n \n@@ -144,6 +147,11 @@ protected BrokerService createBroker(boolean deleteAllMessages) throws Exception\n         BrokerService brokerService = new BrokerService();\n         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);\n         brokerService.setPersistent(isPersistent());\n+        if (isPersistent()) {\n+            KahaDBStore kaha = new KahaDBStore();\n+            kaha.setDirectory(new File(KAHADB_DIRECTORY + getTestName()));\n+            brokerService.setPersistenceAdapter(kaha);\n+        }\n         brokerService.setAdvisorySupport(false);\n         brokerService.setUseJmx(true);\n         brokerService.getManagementContext().setCreateConnector(false);",
                "changes": 10,
                "blob_url": "https://github.com/apache/activemq/blob/455f1ca475be252b6ffdd07176bf659b81685ea7/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTestSupport.java"
            }
        ],
        "repo": "activemq",
        "message": "https://issues.apache.org/jira/browse/AMQ-5872\n\nThe code that adds subscriptions for retroactive subscribers did not\naccount for the case where the last ack position in the ackLocations\ntable is used as a placeholder for the next incoming message and there\nmay not be an element in the messageReference tracker for that index\nespecially after restart when the index is reloaded.  The code needed to\ncheck this when it iterates of the existing message references to add a\nvalue so to avoid the NPE.  \n\nAlso cleaned up the MQTT tests such that they place their data dir in\n./target so that old stores get removed on 'mvn clean'",
        "commit": "https://github.com/apache/activemq/commit/455f1ca475be252b6ffdd07176bf659b81685ea7"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/9cd60d8c5db198b0e720f39d3289e2e93f517973",
        "bug_id": "activemq_120",
        "file": [
            {
                "additions": 3,
                "sha": "1ed81450a8f269077eeede16eb2aa6b24785641a",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/67064db83227c0f78e017d3e6d7159749d558b04/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java",
                "deletions": 0,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java?ref=67064db83227c0f78e017d3e6d7159749d558b04",
                "patch": "@@ -99,6 +99,9 @@ public Object createConnectionFactory() throws ResourceException {\n      */\n     public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo info) throws ResourceException {\n         try {\n+            if( info == null ) {\n+                info = this.info;\n+            }\n             ActiveMQConnectionRequestInfo amqInfo = (ActiveMQConnectionRequestInfo) info;\n             return new ActiveMQManagedConnection(subject, adapter.makeConnection(amqInfo), amqInfo);\n         }",
                "changes": 3,
                "blob_url": "https://github.com/apache/activemq/blob/67064db83227c0f78e017d3e6d7159749d558b04/activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java"
            }
        ],
        "repo": "activemq",
        "message": "Fix for problem reported by: Christopher G. Stach II\n\nWe're using Resin and trying to use 4.0-RC2.  It just so happens that\nResin makes this call in ConnectionPool.init(ManagedConnectionFactory):\n\nManagedConnection mConn = mcf.createManagedConnection(subject, null);\n\nSo, eventually that null info gets dereferenced and BOOM!\n\ncom.caucho.server.webapp.Application.start java.lang.NullPointerException\n       at org.apache.activemq.ra.ActiveMQResourceAdapter.createConnectionFactory(ActiveMQResourceAdapter.java:156)\n       at org.apache.activemq.ra.ActiveMQResourceAdapter.makeConnection(ActiveMQResourceAdapter.java:100)\n       at org.apache.activemq.ra.ActiveMQManagedConnectionFactory.createManagedConnection(ActiveMQManagedConnectionFactory.java:103)\n       at com.caucho.jca.ConnectionPool.init(ConnectionPool.java:462)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@392556 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/67064db83227c0f78e017d3e6d7159749d558b04"
    },
    {
        "parent": "https://github.com/apache/activemq/commit/cbb290c0b39fa5d56aab74c0a2245f157875212c",
        "bug_id": "activemq_121",
        "file": [
            {
                "additions": 1,
                "sha": "50422c0aa2e16ac25023f3d8cb791733f0221882",
                "status": "modified",
                "raw_url": "https://github.com/apache/activemq/raw/347f8eca1bc691326f80e456910e3c29cd0248b6/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java?ref=347f8eca1bc691326f80e456910e3c29cd0248b6",
                "patch": "@@ -328,7 +328,7 @@ public void flush() throws InterruptedIOException {\n      * @return\n      * @throws IOException\n      */\n-    void asyncWrite() {\n+    synchronized void asyncWrite() {\n         try {\n             CountDownLatch countDown;\n             lock.lock();",
                "changes": 2,
                "blob_url": "https://github.com/apache/activemq/blob/347f8eca1bc691326f80e456910e3c29cd0248b6/activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java"
            }
        ],
        "repo": "activemq",
        "message": "synchronize the asyncWrite method. To avoid the following reported stack trace:\n\nRunning org.apache.activemq.broker.region.cursors.CursorDurableTest\nException in thread \"Persistence Adaptor Task\" java.lang.NullPointerException\n        at org.apache.activemq.store.amq.AMQMessageStore$4.execute(AMQMessageStore.java:381)\n        at org.apache.activemq.util.TransactionTemplate.run(TransactionTemplate.java:44)\n        at org.apache.activemq.store.amq.AMQMessageStore.doAsyncWrite(AMQMessageStore.java:374)\n        at org.apache.activemq.store.amq.AMQMessageStore.asyncWrite(AMQMessageStore.java:341)\n        at org.apache.activemq.store.amq.AMQMessageStore$1.iterate(AMQMessageStore.java:95)\n        at org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:122)\n        at org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:43)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)\n        at java.lang.Thread.run(Thread.java:595)\nTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 303.672 sec <<< FAILURE!\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@650956 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/activemq/commit/347f8eca1bc691326f80e456910e3c29cd0248b6"
    }
]