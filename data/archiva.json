{
    "archiva_096a4c0": {
        "bug_id": "archiva_096a4c0",
        "commit": "https://github.com/apache/archiva/commit/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/archiva/blob/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java?ref=096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
                "deletions": 0,
                "filename": "archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "patch": "@@ -413,6 +413,11 @@ public MetadataFacet getMetadataFacet( String repositoryId, String facetId, Stri\n             Node root = getJcrSession().getRootNode();\n             Node node = root.getNode( getFacetPath( repositoryId, facetId, name ) );\n \n+            if ( metadataFacetFactories == null )\n+            {\n+                return metadataFacet;\n+            }\n+\n             MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( facetId );\n             if ( metadataFacetFactory != null )\n             {",
                "raw_url": "https://github.com/apache/archiva/raw/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "sha": "0ad272528c3ec3212a24be39c8ae053095e8af13",
                "status": "modified"
            }
        ],
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1345396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/1141aca7ec7a1d91616d03dcf4f94a35d62baeaf",
        "repo": "archiva",
        "unit_tests": [
            "JcrMetadataRepositoryTest.java"
        ]
    },
    "archiva_09fff6a": {
        "bug_id": "archiva_09fff6a",
        "commit": "https://github.com/apache/archiva/commit/09fff6ad6e15bc4d815d4814b28c5b392309f967",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/archiva/blob/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java?ref=09fff6ad6e15bc4d815d4814b28c5b392309f967",
                "deletions": 2,
                "filename": "archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "patch": "@@ -99,10 +99,10 @@ public void initComponents()\n         httpAuth = (HttpAuthenticator) lookup( HttpAuthenticator.ROLE, \"basic\" );\n         audit = (AuditLog) lookup( AuditLog.ROLE );\n \n-        updateRepositoryMap();\n-\n         configuration = (ArchivaConfiguration) lookup( ArchivaConfiguration.class.getName() );\n         configuration.addChangeListener( this );\n+        \n+        updateRepositoryMap();\n     }\n \n     public void initServers( ServletConfig servletConfig )",
                "raw_url": "https://github.com/apache/archiva/raw/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "sha": "0a0b316d7cc3df3b4bdce26ccacc89da0e20e2ef",
                "status": "modified"
            }
        ],
        "message": "[MRM-336]: Repository Admin - \"Index Repository\" appears to not do anything. \n\"Get your filthy hands off my you damned dirty NPEs!\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@538405 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/966e374f6cd73c34b6703e7e998544dcee5eef46",
        "repo": "archiva",
        "unit_tests": [
            "RepositoryServletTest.java"
        ]
    },
    "archiva_0cecbab": {
        "bug_id": "archiva_0cecbab",
        "commit": "https://github.com/apache/archiva/commit/0cecbab8be9eacccf01bb4dc096a643aaad45da5",
        "file": [
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "patch": "@@ -25,11 +25,15 @@\n import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n import org.apache.maven.archiva.configuration.DatabaseScanningConfiguration;\n import org.apache.maven.archiva.consumers.functors.PermanentConsumerPredicate;\n+import org.apache.maven.archiva.model.ArchivaArtifact;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n \n /**\n@@ -40,6 +44,8 @@\n public class DatabaseConsumers\n     implements ApplicationContextAware\n {    \n+    private Logger log = LoggerFactory.getLogger( DatabaseConsumers.class );\n+    \n     private ArchivaConfiguration archivaConfiguration;\n \n     private Predicate selectedCleanupConsumers;\n@@ -149,4 +155,37 @@ public List getAvailableCleanupConsumers()\n     {\n         return new ArrayList( applicationContext.getBeansOfType( DatabaseCleanupConsumer.class ).values() );\n     }\n+    \n+    /**\n+     * Execute the cleanup consumers to cleanup the specified artifact from the database and index.\n+     * \n+     * @param artifact\n+     */\n+    public void executeCleanupConsumer( ArchivaArtifact artifact )\n+    {\n+        List consumers = getSelectedCleanupConsumers();\n+        Iterator it = consumers.iterator();\n+        while ( it.hasNext() )\n+        {\n+            ArchivaArtifactConsumer consumer = (ArchivaArtifactConsumer) it.next();\n+            consumer.beginScan();\n+        }\n+        \n+        if ( CollectionUtils.isEmpty( consumers ) )\n+        {\n+            log.warn( \"There are no selected consumers for artifact cleanup.\" );\n+            return;\n+        }\n+        \n+        ProcessArchivaArtifactClosure processArtifactClosure = new ProcessArchivaArtifactClosure();\n+        processArtifactClosure.setArtifact( artifact );\n+        \n+        CollectionUtils.forAllDo( consumers, processArtifactClosure );\n+        \n+        while ( it.hasNext() )\n+        {\n+            ArchivaArtifactConsumer consumer = (ArchivaArtifactConsumer) it.next();\n+            consumer.completeScan();\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-database/src/main/java/org/apache/maven/archiva/database/updater/DatabaseConsumers.java",
                "sha": "e79e51b505fc64b771b33e6a0f194db0d8fb7fc2",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "patch": "@@ -20,13 +20,19 @@\n  */\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n \n import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.maven.archiva.security.ArchivaRoleConstants;\n import org.codehaus.plexus.redback.authentication.AuthenticationResult;\n import org.codehaus.plexus.redback.authorization.AuthorizationException;\n import org.codehaus.plexus.redback.rbac.RBACManager;\n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+import org.codehaus.plexus.redback.rbac.Role;\n import org.codehaus.plexus.redback.role.RoleManager;\n import org.codehaus.plexus.redback.role.RoleManagerException;\n import org.codehaus.plexus.redback.system.DefaultSecuritySession;\n@@ -161,4 +167,47 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n             throw new ArchivaSecurityException( e.getMessage() );\n         }\n     }\n+    \n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException\n+    {\n+        boolean isAuthorized = false;\n+        String delimiter = \" - \";\n+        \n+        try\n+        {\n+            Collection roleList = rbacManager.getEffectivelyAssignedRoles( principal );\n+            \n+            Iterator it = roleList.iterator();\n+            \n+            while ( it.hasNext() )\n+            {\n+                Role role = (Role) it.next();\n+                \n+                String roleName = role.getName();\n+                \n+                if ( roleName.startsWith( ArchivaRoleConstants.REPOSITORY_MANAGER_ROLE_PREFIX ) )\n+                {\n+                    int delimiterIndex = roleName.indexOf( delimiter );\n+                    String resourceName = roleName.substring( delimiterIndex + delimiter.length() );\n+                    \n+                    if ( resourceName.equals( repoId ) )\n+                    {\n+                        isAuthorized = true;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        catch ( RbacObjectNotFoundException e )\n+        {\n+            throw new RbacObjectNotFoundException( \"Unable to find user \" + principal + \"\" );\n+        }\n+        catch ( RbacManagerException e )\n+        {\n+            throw new RbacManagerException( \"Unable to get roles for user \" + principal + \"\" );\n+        }\n+        \n+        return isAuthorized;\n+    }\n }",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "sha": "842a5e64766728934b82c86f6d8ab0e8bfef0e89",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "patch": "@@ -19,6 +19,9 @@\n  * under the License.\n  */\n \n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+\n import java.util.List;\n \n /**\n@@ -60,5 +63,17 @@ public void createMissingRepositoryRoles( String repoId )\n      */\n     public boolean isAuthorizedToUploadArtifacts( String principal, String repoId)\n         throws PrincipalNotFoundException, ArchivaSecurityException;\n+     \n+    /**\n+     * Check if user is authorized to delete artifacts in the repository.\n+     * \n+     * @param principal\n+     * @param repoId\n+     * @return\n+     * @throws RbacManagerException\n+     * @throws RbacObjectNotFoundException\n+     */\n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException;\n     \n }",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/UserRepositories.java",
                "sha": "9b3840ac67156f5de09e8fc619263a98e28bdb7a",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "patch": "@@ -24,6 +24,11 @@\n           <id>archiva-run-indexer</id>\n           <name>archiva-run-indexer</name>\n           <description>Run Archiva Indexer</description>\n+        </operation>\n+         <operation>\n+          <id>archiva-delete-artifact</id>\n+          <name>archiva-delete-artifact</name>\n+          <description>Delete Artifact</description>\n         </operation>\n         <operation>\n           <id>archiva-access-reports</id>\n@@ -180,6 +185,13 @@\n           <namePrefix>Repository Manager</namePrefix>\n           <assignable>true</assignable>\n           <permissions>\n+             <permission>\n+              <id>archiva-delete-artifact</id>\n+              <name>Delete Artifact</name>\n+              <operation>archiva-delete-artifact</operation>\n+              <resource>global</resource>\n+              <permanent>true</permanent>\n+            </permission>\n             <permission>\n               <id>archiva-edit-repository</id>\n               <name>Archiva Edit Repository</name>",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-security/src/main/resources/META-INF/redback/redback.xml",
                "sha": "df72885d1c58138118be32209f8c5285e63d2e40",
                "status": "modified"
            },
            {
                "additions": 426,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "changes": 426,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "patch": "@@ -0,0 +1,426 @@\n+package org.apache.maven.archiva.web.action;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import org.apache.archiva.checksum.ChecksumAlgorithm;\n+import org.apache.archiva.checksum.ChecksummedFile;\n+import org.apache.maven.archiva.common.utils.VersionComparator;\n+import org.apache.maven.archiva.common.utils.VersionUtil;\n+import org.apache.maven.archiva.configuration.ArchivaConfiguration;\n+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.maven.archiva.database.updater.DatabaseConsumers;\n+import org.apache.maven.archiva.database.ArchivaDatabaseException;\n+import org.apache.maven.archiva.database.ArtifactDAO;\n+import org.apache.maven.archiva.database.constraints.ArtifactVersionsConstraint;\n+import org.apache.maven.archiva.model.ArchivaArtifact;\n+import org.apache.maven.archiva.model.ArchivaRepositoryMetadata;\n+import org.apache.maven.archiva.model.VersionedReference;\n+import org.apache.maven.archiva.repository.audit.Auditable;\n+import org.apache.maven.archiva.repository.audit.AuditEvent;\n+import org.apache.maven.archiva.repository.audit.AuditListener;\n+import org.apache.maven.archiva.repository.metadata.MetadataTools;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataReader;\n+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataWriter;\n+import org.apache.maven.archiva.repository.ContentNotFoundException;\n+import org.apache.maven.archiva.repository.RepositoryException;\n+import org.apache.maven.archiva.repository.RepositoryNotFoundException;\n+import org.apache.maven.archiva.repository.ManagedRepositoryContent;\n+import org.apache.maven.archiva.repository.RepositoryContentFactory;\n+import org.apache.maven.archiva.security.ArchivaXworkUser;\n+import org.apache.maven.archiva.security.UserRepositories;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n+\n+import org.apache.struts2.ServletActionContext;\n+import com.opensymphony.xwork2.ActionContext;\n+import com.opensymphony.xwork2.Preparable;\n+import com.opensymphony.xwork2.Validateable;\n+\n+/**\n+ * Delete an artifact. Metadata will be updated if one exists, otherwise it would be created.\n+ * \n+ * @plexus.component role=\"com.opensymphony.xwork2.Action\" role-hint=\"deleteArtifactAction\"\n+ */\n+public class DeleteArtifactAction\n+    extends PlexusActionSupport\n+    implements Validateable, Preparable, Auditable\n+{\n+    /**\n+     * @plexus.requirement\n+     */\n+    private ArchivaXworkUser archivaXworkUser;\n+\n+    /**\n+     * The groupId of the artifact to be deleted.\n+     */\n+    private String groupId;\n+\n+    /**\n+     * The artifactId of the artifact to be deleted.\n+     */\n+    private String artifactId;\n+\n+    /**\n+     * The version of the artifact to be deleted.\n+     */\n+    private String version;\n+\n+    /**\n+     * The repository where the artifact is to be deleted.\n+     */\n+    private String repositoryId;\n+\n+    /**\n+     * List of managed repositories to delete from.\n+     */\n+    private List<String> managedRepos;\n+\n+    /**\n+     * @plexus.requirement\n+     */\n+    private UserRepositories userRepositories;\n+\n+    /**\n+     * @plexus.requirement role-hint=\"default\"\n+     */\n+    private ArchivaConfiguration configuration;\n+\n+    /**\n+     * @plexus.requirement\n+     */\n+    private RepositoryContentFactory repositoryFactory;\n+\n+    /**\n+     * @plexus.requirement role-hint=\"jdo\"\n+     */\n+    private ArtifactDAO artifactDAO;\n+\n+    /**\n+     * @plexus.requirement \n+     */\n+    private DatabaseConsumers databaseConsumers;\n+\n+    /**\n+     * @plexus.requirement role=\"org.apache.maven.archiva.repository.audit.AuditListener\"\n+     */\n+    private List<AuditListener> auditListeners = new ArrayList<AuditListener>();\n+\n+    private ChecksumAlgorithm[] algorithms = new ChecksumAlgorithm[] { ChecksumAlgorithm.SHA1, ChecksumAlgorithm.MD5 };\n+\n+    public String getGroupId()\n+    {\n+        return groupId;\n+    }\n+\n+    public void setGroupId( String groupId )\n+    {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getArtifactId()\n+    {\n+        return artifactId;\n+    }\n+\n+    public void setArtifactId( String artifactId )\n+    {\n+        this.artifactId = artifactId;\n+    }\n+\n+    public String getVersion()\n+    {\n+        return version;\n+    }\n+\n+    public void setVersion( String version )\n+    {\n+        this.version = version;\n+    }\n+\n+    public String getRepositoryId()\n+    {\n+        return repositoryId;\n+    }\n+\n+    public void setRepositoryId( String repositoryId )\n+    {\n+        this.repositoryId = repositoryId;\n+    }\n+\n+    public List<String> getManagedRepos()\n+    {\n+        return managedRepos;\n+    }\n+\n+    public void setManagedRepos( List<String> managedRepos )\n+    {\n+        this.managedRepos = managedRepos;\n+    }\n+\n+    public void prepare()\n+    {\n+        managedRepos = new ArrayList<String>( configuration.getConfiguration().getManagedRepositoriesAsMap().keySet() );\n+    }\n+\n+    public String input()\n+    {\n+        return INPUT;\n+    }\n+\n+    private void reset()\n+    {\n+        // reset the fields so the form is clear when \n+        // the action returns to the jsp page\n+        groupId = \"\";\n+        artifactId = \"\";\n+        version = \"\";\n+        repositoryId = \"\";\n+    }\n+\n+    public String doDelete()\n+    {\n+        try\n+        {\n+            Date lastUpdatedTimestamp = Calendar.getInstance().getTime();\n+\n+            TimeZone timezone = TimeZone.getTimeZone( \"UTC\" );\n+            DateFormat fmt = new SimpleDateFormat( \"yyyyMMdd.HHmmss\" );\n+            fmt.setTimeZone( timezone );\n+            String timestamp = fmt.format( lastUpdatedTimestamp );\n+\n+            ManagedRepositoryConfiguration repoConfig =\n+                configuration.getConfiguration().findManagedRepositoryById( repositoryId );\n+\n+            VersionedReference ref = new VersionedReference();\n+            ref.setArtifactId( artifactId );\n+            ref.setGroupId( groupId );\n+            ref.setVersion( version );\n+\n+            ManagedRepositoryContent repository = repositoryFactory.getManagedRepositoryContent( repositoryId );\n+\n+            String path = repository.toMetadataPath( ref );\n+            int index = path.lastIndexOf( '/' );\n+            File targetPath = new File( repoConfig.getLocation(), path.substring( 0, index ) );\n+\n+            if ( !targetPath.exists() )\n+            {\n+                throw new ContentNotFoundException( groupId + \":\" + artifactId + \":\" + version );\n+            }\n+\n+            // delete from file system\n+            repository.deleteVersion( ref );\n+\n+            File metadataFile = getMetadata( targetPath.getAbsolutePath() );\n+            ArchivaRepositoryMetadata metadata = getMetadata( metadataFile );\n+\n+            updateMetadata( metadata, metadataFile, lastUpdatedTimestamp );\n+\n+            ArtifactVersionsConstraint constraint =\n+                new ArtifactVersionsConstraint( repositoryId, groupId, artifactId, false );\n+            List<ArchivaArtifact> artifacts = null;\n+\n+            try\n+            {\n+                artifacts = artifactDAO.queryArtifacts( constraint );\n+\n+                if ( artifacts != null )\n+                {\n+                    for ( ArchivaArtifact artifact : artifacts )\n+                    {\n+                        if ( artifact.getVersion().equals( version ) )\n+                        {\n+                            databaseConsumers.executeCleanupConsumer( artifact );\n+                        }\n+                    }\n+                }\n+            }\n+            catch ( ArchivaDatabaseException e )\n+            {\n+                addActionError( \"Error occurred while cleaning up database: \" + e.getMessage() );\n+                return ERROR;\n+            }\n+\n+            String msg =\n+                \"Artifact \\'\" + groupId + \":\" + artifactId + \":\" + version +\n+                    \"\\' was successfully deleted from repository \\'\" + repositoryId + \"\\'\";\n+\n+            triggerAuditEvent( getPrincipal(), repositoryId, groupId + \":\" + artifactId + \":\" + version,\n+                               AuditEvent.REMOVE_FILE );\n+\n+            addActionMessage( msg );\n+\n+            reset();\n+            return SUCCESS;\n+        }\n+        catch ( ContentNotFoundException e )\n+        {\n+            addActionError( \"Artifact does not exist: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+        catch ( RepositoryNotFoundException e )\n+        {\n+            addActionError( \"Target repository cannot be found: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+        catch ( RepositoryException e )\n+        {\n+            addActionError( \"Repository exception: \" + e.getMessage() );\n+            return ERROR;\n+        }\n+    }\n+\n+    private String getPrincipal()\n+    {\n+        return archivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );\n+    }\n+\n+    private File getMetadata( String targetPath )\n+    {\n+        String artifactPath = targetPath.substring( 0, targetPath.lastIndexOf( File.separatorChar ) );\n+\n+        return new File( artifactPath, MetadataTools.MAVEN_METADATA );\n+    }\n+\n+    private ArchivaRepositoryMetadata getMetadata( File metadataFile )\n+        throws RepositoryMetadataException\n+    {\n+        ArchivaRepositoryMetadata metadata = new ArchivaRepositoryMetadata();\n+        if ( metadataFile.exists() )\n+        {\n+            metadata = RepositoryMetadataReader.read( metadataFile );\n+        }\n+        return metadata;\n+    }\n+\n+    /**\n+     * Update artifact level metadata. Creates one if metadata does not exist after artifact deletion.\n+     * \n+     * @param metadata\n+     */\n+    private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFile, Date lastUpdatedTimestamp )\n+        throws RepositoryMetadataException\n+    {\n+        List<String> availableVersions = new ArrayList<String>();\n+        String latestVersion = \"\";\n+\n+        if ( metadataFile.exists() )\n+        {\n+            if ( metadata.getAvailableVersions() != null )\n+            {\n+                availableVersions = metadata.getAvailableVersions();\n+\n+                if ( availableVersions.size() > 0 )\n+                {\n+                    Collections.sort( availableVersions, VersionComparator.getInstance() );\n+\n+                    if ( availableVersions.contains( version ) )\n+                    {\n+                        availableVersions.remove( availableVersions.indexOf( version ) );\n+                    }\n+                    if ( availableVersions.size() > 0 )\n+                    {\n+                        latestVersion = availableVersions.get( availableVersions.size() - 1 );\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ( metadata.getGroupId() == null )\n+        {\n+            metadata.setGroupId( groupId );\n+        }\n+        if ( metadata.getArtifactId() == null )\n+        {\n+            metadata.setArtifactId( artifactId );\n+        }\n+\n+        if ( !VersionUtil.isSnapshot( version ) )\n+        {\n+            if ( metadata.getReleasedVersion().equals( version ) )\n+            {\n+                metadata.setReleasedVersion( latestVersion );\n+            }\n+        }\n+\n+        metadata.setLatestVersion( latestVersion );\n+        metadata.setLastUpdatedTimestamp( lastUpdatedTimestamp );\n+        metadata.setAvailableVersions( availableVersions );\n+\n+        RepositoryMetadataWriter.write( metadata, metadataFile );\n+        ChecksummedFile checksum = new ChecksummedFile( metadataFile );\n+        checksum.fixChecksums( algorithms );\n+    }\n+\n+    public void validate()\n+    {\n+        try\n+        {\n+            if ( !userRepositories.isAuthorizedToDeleteArtifacts( getPrincipal(), repositoryId ) )\n+            {\n+                addActionError( \"User is not authorized to delete artifacts in repository '\" + repositoryId + \"'.\" );\n+            }\n+\n+            if ( ( version.length() > 0 ) && ( !VersionUtil.isVersion( version ) ) )\n+            {\n+                addActionError( \"Invalid version.\" );\n+            }\n+        }\n+        catch ( RbacManagerException e )\n+        {\n+            addActionError( e.getMessage() );\n+        }\n+    }\n+\n+    public void addAuditListener( AuditListener listener )\n+    {\n+        this.auditListeners.add( listener );\n+    }\n+\n+    public void clearAuditListeners()\n+    {\n+        this.auditListeners.clear();\n+    }\n+\n+    public void removeAuditListener( AuditListener listener )\n+    {\n+        this.auditListeners.remove( listener );\n+    }\n+\n+    private void triggerAuditEvent( String user, String repositoryId, String resource, String action )\n+    {\n+        AuditEvent event = new AuditEvent( repositoryId, user, resource, action );\n+        event.setRemoteIP( ServletActionContext.getRequest().getRemoteAddr() );\n+\n+        for ( AuditListener listener : auditListeners )\n+        {\n+            listener.auditEvent( event );\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/DeleteArtifactAction.java",
                "sha": "fa3101b89670d1c6f6081391df3b526e90f4101e",
                "status": "added"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<!DOCTYPE validators PUBLIC \"-//OpenSymphony Group//XWork Validator 1.0.2//EN\"\n+    \"http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd\">\n+\n+<validators>\n+  <field name=\"groupId\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter a groupId.</message>\n+    </field-validator>\n+  </field>\n+  <field name=\"artifactId\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter an artifactId.</message>\n+    </field-validator>\n+  </field>\n+  <field name=\"version\">\n+    <field-validator type=\"requiredstring\">\n+      <message>You must enter a version.</message>\n+    </field-validator>\n+  </field>   \n+</validators>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/org/apache/maven/archiva/web/action/DeleteArtifactAction-validation.xml",
                "sha": "dcef342d032b89f95720d6a05586f766e9a79946",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "patch": "@@ -170,6 +170,12 @@\n       <interceptor-ref name=\"fileUpload\"/>\n     </action>\n \n+\t<action name=\"deleteArtifact\" class=\"deleteArtifactAction\" method=\"input\">      \n+      <result name=\"input\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+      <result name=\"error\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+      <result name=\"success\">/WEB-INF/jsp/deleteArtifact.jsp</result>\n+    </action>\n+\n     <action name=\"checksumSearch\" class=\"searchAction\" method=\"findArtifact\">\n       <result name=\"input\">/WEB-INF/jsp/findArtifact.jsp</result>\n       <result name=\"results\">/WEB-INF/jsp/results.jsp</result>",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/resources/struts.xml",
                "sha": "f52e3827b854c64b8c57afa45f1f10f111e6e504",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 1,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "patch": "@@ -80,7 +80,7 @@\n       </li>\n     </ul>\n \n-    <redback:ifAnyAuthorized permissions=\"archiva-manage-users,archiva-access-reports,archiva-manage-configuration\">\n+    <redback:ifAnyAuthorized permissions=\"archiva-delete-artifact,archiva-manage-users,archiva-access-reports,archiva-manage-configuration\">\n       <h5>Manage</h5>\n       <ul>\n         <redback:ifAuthorized permission=\"archiva-access-reports\">\n@@ -110,6 +110,11 @@\n           <li class=\"none\">\n             <my:currentWWUrl action=\"upload\" namespace=\"/\">Upload Artifact</my:currentWWUrl>\n           </li>\n+        </redback:ifAuthorized>\n+        <redback:ifAuthorized permission=\"archiva-delete-artifact\">\n+          <li class=\"none\">\n+            <my:currentWWUrl action=\"deleteArtifact\" namespace=\"/\">Delete Artifact</my:currentWWUrl>\n+          </li>\n         </redback:ifAuthorized>\n           <%-- TODO: future options here.\n              * Repository Statistics.",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/decorators/default.jsp",
                "sha": "ebc3b263e8e023fc99a11aaa32d8f0c521c9b3b2",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "patch": "@@ -0,0 +1,43 @@\n+<%--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  --%>\n+\n+<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n+<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n+\n+<html>\n+<head>\n+  <title>Delete Artifact</title>\n+  <s:head/>\n+</head>\n+\n+<body>\n+<h1>Delete Artifact</h1>\n+\n+  <s:actionerror/>\n+  <s:actionmessage/>\n+\n+  <div id=\"contentArea\">\n+    <s:form action=\"deleteArtifact!doDelete\" namespace=\"/\" method=\"post\" validate=\"true\">    \n+      <%@ include file=\"/WEB-INF/jsp/include/deleteArtifactForm.jspf\" %>\n+      <s:submit/>\n+    </s:form>\n+  </div>\n+\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/deleteArtifact.jsp",
                "sha": "97dd025d7b55b977089c60ec9feac8ea65bbcef7",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "patch": "@@ -0,0 +1,27 @@\n+<%--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  --%>\n+  \n+<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n+<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n+\n+<s:textfield name=\"groupId\" label=\"Group Id\" size=\"50\" required=\"true\"/>\n+<s:textfield name=\"artifactId\" label=\"Artifact Id\" size=\"50\" required=\"true\"/>\n+<s:textfield name=\"version\" label=\"Version\" size=\"50\" required=\"true\"/>\n+<s:select name=\"repositoryId\" list=\"managedRepos\" label=\"Repository Id\"/>\n+\t\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/main/webapp/WEB-INF/jsp/include/deleteArtifactForm.jspf",
                "sha": "3eb5af7f51773282d9a88e043d97feed266e1ca5",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java?ref=0cecbab8be9eacccf01bb4dc096a643aaad45da5",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.maven.archiva.security.ArchivaSecurityException;\n import org.apache.maven.archiva.security.PrincipalNotFoundException;\n import org.apache.maven.archiva.security.UserRepositories;\n+import org.codehaus.plexus.redback.rbac.RbacObjectNotFoundException;\n+import org.codehaus.plexus.redback.rbac.RbacManagerException;\n \n /**\n  * UserRepositories stub used for testing. \n@@ -58,5 +60,11 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n         // TODO Auto-generated method stub\n         return false;\n     }\n+    \n+    public boolean isAuthorizedToDeleteArtifacts( String principal, String repoId )\n+        throws RbacManagerException, RbacObjectNotFoundException\n+    {\n+        return false;\n+    }\n \n }",
                "raw_url": "https://github.com/apache/archiva/raw/0cecbab8be9eacccf01bb4dc096a643aaad45da5/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/rss/UserRepositoriesStub.java",
                "sha": "6682236cd3f8aa536122c2bb12dd03a5baa2b69a",
                "status": "modified"
            }
        ],
        "message": "[MRM-913]\nsubmitted by Jevica Arianne Zurbano\no patch does the following:\n  - deletes artifacts\n  - cleans up database\n  - executes scan to reflect changes when browsing repository\n  - updates metadata\n  - updates audit.log\n  - 'Delete Artifact' added in navigation and is displayed for users with repository manager role\n  - only allows manager of the repository to delete artifacts from it\n\no additional tweaks to the submitted patch:\n  - removed catch for NPE in DeleteArtifactAction\n  - migrated jsps & action class to struts 2\n  - moved invocation of cleanup consumers in DeleteArtifactAction to DatabaseConsumers (added new method for this in DatabaseConsumers)\n  - applied formatting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@746183 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/48e96d554fa626f031aa0cc88dfb0b15270eeb08",
        "repo": "archiva",
        "unit_tests": [
            "DefaultUserRepositoriesTest.java"
        ]
    },
    "archiva_14b464c": {
        "bug_id": "archiva_14b464c",
        "commit": "https://github.com/apache/archiva/commit/14b464c1859e1b80668a7b193e298da1659c1de9",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/archiva/blob/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java?ref=14b464c1859e1b80668a7b193e298da1659c1de9",
                "deletions": 1,
                "filename": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "patch": "@@ -261,7 +261,6 @@ public void executeConsumers( ManagedRepositoryConfiguration repository, File lo\n             TriggerScanCompletedClosure scanCompletedClosure = new TriggerScanCompletedClosure(repository);\n \n             CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n-            CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n         }\n         finally\n         {",
                "raw_url": "https://github.com/apache/archiva/raw/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "sha": "1a22ab7869f6f4fc1afce702f5b19cfc7e81b0c6",
                "status": "modified"
            }
        ],
        "message": "[MRM-1076]\no remove second invocation of complete scan in RepositoryContentConsumers which causes the NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@745393 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/ebe7941ce08323fbd63e6d0d39c31e932b7a7e65",
        "repo": "archiva",
        "unit_tests": [
            "RepositoryContentConsumersTest.java"
        ]
    },
    "archiva_46c2f65": {
        "bug_id": "archiva_46c2f65",
        "commit": "https://github.com/apache/archiva/commit/46c2f650b344d06f813d1370ca4e5d702a4c75ee",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/archiva/blob/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java?ref=46c2f650b344d06f813d1370ca4e5d702a4c75ee",
                "deletions": 1,
                "filename": "archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "patch": "@@ -111,7 +111,7 @@ public synchronized ManagedRepositoryConfiguration getRepository( String prefix\n     {\n         if ( repositoryMap.isEmpty() )\n         {\n-            repositoryMap = configuration.getConfiguration().getManagedRepositoriesAsMap();\n+            repositoryMap.putAll( configuration.getConfiguration().getManagedRepositoriesAsMap() );\n         }\n         return repositoryMap.get( prefix );\n     }",
                "raw_url": "https://github.com/apache/archiva/raw/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "sha": "28856ef6f0a9a680abfb38969ecadd0ae856481b",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/archiva/blob/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java?ref=46c2f650b344d06f813d1370ca4e5d702a4c75ee",
                "deletions": 0,
                "filename": "archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "patch": "@@ -124,6 +124,12 @@ public void testGetRepositoryAfterAdd()\n         ManagedRepositoryConfiguration repo = new ManagedRepositoryConfiguration();\n         repo.setId( NEW_REPOSITORY_ID );\n         repo.setName( NEW_REPOSITORY_NAME );\n+        File repoRoot = new File( getBasedir(), \"target/test-repository-root\" );\n+        if ( !repoRoot.exists() )\n+        {\n+            repoRoot.mkdirs();\n+        }\n+        repo.setLocation( repoRoot.getAbsolutePath() );\n         c.addManagedRepository( repo );\n         // TODO it would be better to use a mock configuration and \"save\" to more accurately reflect the calls made\n         servlet.configurationEvent( new ConfigurationEvent( ConfigurationEvent.SAVED) );",
                "raw_url": "https://github.com/apache/archiva/raw/46c2f650b344d06f813d1370ca4e5d702a4c75ee/archiva-web/archiva-webapp/src/test/java/org/apache/maven/archiva/web/repository/RepositoryServletTest.java",
                "sha": "604e2b4323790d03a4e687f437c9321e8de1a9b2",
                "status": "modified"
            }
        ],
        "message": "Fixing test case NPE wrt repo.location.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@583652 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/9aa41ce31bdb3161d0a60482e0a7148e57b74056",
        "repo": "archiva",
        "unit_tests": [
            "RepositoryServletTest.java"
        ]
    },
    "archiva_4b34d91": {
        "bug_id": "archiva_4b34d91",
        "commit": "https://github.com/apache/archiva/commit/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "patch": "@@ -105,6 +105,10 @@ public boolean isAuthorized( String principal, String repoId, boolean isWriteReq\n             }\n             \n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new UnauthorizedException( \"The security system had an internal error - please check your system logs\" );\n+            }\n             if ( user.isLocked() )\n             {\n                 throw new UnauthorizedException( \"User account is locked.\" );",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "sha": "1b533d30fb0b4c01667241c9b92ea900a88d783c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "patch": "@@ -77,6 +77,10 @@\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {\n@@ -145,6 +149,10 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "sha": "d99b089326f6ae481ce7bea7fd743049f32452ff",
                "status": "modified"
            }
        ],
        "message": "[MNG-1106] guard against NPE which can be generated by the LDAP user manager if misconfigured\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@750953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/adf0f01d13f602754d824843ce3b8b3d43b844c2",
        "repo": "archiva",
        "unit_tests": [
            "ArchivaServletAuthenticatorTest.java",
            "DefaultUserRepositoriesTest.java"
        ]
    },
    "archiva_546014d": {
        "bug_id": "archiva_546014d",
        "commit": "https://github.com/apache/archiva/commit/546014d1946edb769bd6dceb7db53a6cd23a974e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java?ref=546014d1946edb769bd6dceb7db53a6cd23a974e",
                "deletions": 5,
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "patch": "@@ -951,12 +951,15 @@ private DavResource getResource( DavServletRequest request, List<String> reposit\n                 {\n                     // in case of group displaying index directory doesn't have sense !!\n                     String repoIndexDirectory = managedRepository.getRepository().getIndexDirectory();\n-                    if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                    if ( StringUtils.isNotEmpty( repoIndexDirectory ) )\n                     {\n-                        repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n-                                                       StringUtils.isEmpty( repoIndexDirectory )\n-                                                           ? \".indexer\"\n-                                                           : repoIndexDirectory ).getAbsolutePath();\n+                        if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                        {\n+                            repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n+                                                           StringUtils.isEmpty( repoIndexDirectory )\n+                                                               ? \".indexer\"\n+                                                               : repoIndexDirectory ).getAbsolutePath();\n+                        }\n                     }\n                     if ( StringUtils.isEmpty( repoIndexDirectory ) )\n                     {",
                "raw_url": "https://github.com/apache/archiva/raw/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "sha": "b99b2cf4d7cdb5ceeab072e7d70b22db28f22d23",
                "status": "modified"
            }
        ],
        "message": "do not index directory in case of group: prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1196835 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/c814b9b98136f9756bbf833aaff58a56034d014d",
        "repo": "archiva",
        "unit_tests": [
            "ArchivaDavResourceFactoryTest.java"
        ]
    },
    "archiva_6355514": {
        "bug_id": "archiva_6355514",
        "commit": "https://github.com/apache/archiva/commit/63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/archiva/blob/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java?ref=63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
                "deletions": 3,
                "filename": "archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "patch": "@@ -93,15 +93,15 @@ else if ( \"javadoc\".equals( classifier ) )\n \n     public static String mapExtensionToType( String extension )\n     {\n-        if ( extension.equals( \"tar.gz\" ) )\n+        if ( \"tar.gz\".equals( extension ) )\n         {\n             return \"distribution-tgz\";\n         }\n-        else  if ( extension.equals( \"tar.bz2\" ) )\n+        else  if ( \"tar.bz2\".equals( extension ) )\n         {\n             return \"distribution-bzip\";\n         }\n-        else  if ( extension.equals( \"zip\" ) )\n+        else  if ( \"zip\".equals( extension ) )\n         {\n             return \"distribution-zip\";\n         }",
                "raw_url": "https://github.com/apache/archiva/raw/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "sha": "3c28cec2c110040370f87f4eb946d8f57822fc09",
                "status": "modified"
            }
        ],
        "message": "guard against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@630842 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/a88253bafe407ce8ff6cc0a850f167fd35786711",
        "repo": "archiva",
        "unit_tests": [
            "ArtifactExtensionMappingTest.java"
        ]
    },
    "archiva_66ed6cb": {
        "bug_id": "archiva_66ed6cb",
        "commit": "https://github.com/apache/archiva/commit/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java?ref=66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
                "deletions": 3,
                "filename": "archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "patch": "@@ -102,7 +102,10 @@ public Lock readFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"read Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }\n@@ -178,8 +181,10 @@ public Lock writeFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n-\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"write Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }",
                "raw_url": "https://github.com/apache/archiva/raw/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "sha": "09008e2a72d5141e8811265f12d5803755c85955",
                "status": "modified"
            }
        ],
        "message": "prevent possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1551386 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/52caa0198b6f95142300daa37122d6e5dbbf9399",
        "repo": "archiva",
        "unit_tests": [
            "DefaultFileLockManagerTest.java"
        ]
    },
    "archiva_86ad139": {
        "bug_id": "archiva_86ad139",
        "commit": "https://github.com/apache/archiva/commit/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
        "file": [
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/archiva/blob/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "changes": 173,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
                "deletions": 61,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "patch": "@@ -19,8 +19,6 @@\n  * under the License.\n  */\n \n-import me.prettyprint.cassandra.model.CqlQuery;\n-import me.prettyprint.cassandra.model.CqlRows;\n import me.prettyprint.cassandra.serializers.LongSerializer;\n import me.prettyprint.cassandra.serializers.StringSerializer;\n import me.prettyprint.cassandra.service.template.ColumnFamilyTemplate;\n@@ -33,7 +31,9 @@\n import me.prettyprint.hector.api.exceptions.HInvalidRequestException;\n import me.prettyprint.hector.api.factory.HFactory;\n import me.prettyprint.hector.api.mutation.MutationResult;\n+import me.prettyprint.hector.api.mutation.Mutator;\n import me.prettyprint.hector.api.query.QueryResult;\n+import me.prettyprint.hector.api.query.RangeSlicesQuery;\n import org.apache.archiva.configuration.ArchivaConfiguration;\n import org.apache.archiva.metadata.model.ArtifactMetadata;\n import org.apache.archiva.metadata.model.FacetedMetadata;\n@@ -839,34 +839,45 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n         if ( creation )\n         {\n             String cf = cassandraArchivaManager.getProjectFamilyName();\n-            projectVersionMetadataModelTemplate.createMutator()\n+            Mutator<String> mutator = projectVersionMetadataModelTemplate.createMutator()\n                 //  values\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"projectId\", projectId ) ) //\n+                               column( \"projectId\", projectId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"namespaceId\", namespaceId ) )//\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"id\", versionMetadata.getVersion() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"description\", versionMetadata.getDescription() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"name\", versionMetadata.getName() ) ) //\n+                               column( \"repositoryName\", repositoryId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n-                ) //\n+                               column( \"namespaceId\", namespaceId ) )//\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"url\", versionMetadata.getUrl() ) ) //\n-                .execute();\n+                               column( \"id\", versionMetadata.getVersion() ) ); //\n+            if ( versionMetadata.getDescription() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"description\", versionMetadata.getDescription() ) );\n+            }\n+\n+            if ( versionMetadata.getName() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"name\", versionMetadata.getName() ) );\n+            }\n+            mutator = mutator.addInsertion( key, //\n+                                            cf, //\n+                                            column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n+            );\n+            if ( versionMetadata.getUrl() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"url\", versionMetadata.getUrl() ) );\n+            }\n+\n+            mutator.execute();\n         }\n         else\n         {\n@@ -1518,59 +1529,57 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n \n-        // FIXME cql query to filter in repositoryName column\n-        /*\n-        QueryResult<OrderedRows<String, String, Long>> result = HFactory //\n+        RangeSlicesQuery<String, String, Long> query = HFactory //\n             .createRangeSlicesQuery( keyspace, //\n                                      StringSerializer.get(), //\n                                      StringSerializer.get(), //\n                                      LongSerializer.get() ) //\n-\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n-            .setColumnNames( \"whenGathered\", \"repositoryName\" ) //\n-            .addGteExpression( \"whenGathered\", startTime.getTime() ) //\n-            .addLteExpression( \"whenGathered\", endTime.getTime() )\n-            .execute();\n-        */\n-        StringSerializer ss = StringSerializer.get();\n-        StringBuilder cqlQuery =\n-            new StringBuilder( \"select * from \" + cassandraArchivaManager.getArtifactMetadataModelFamilyName() );\n-        cqlQuery.append( \" where repositoryName = '\" + repositoryId + \"'\" );\n+            .setColumnNames( \"namespaceId\", \"size\", \"id\", \"fileLastModified\", \"md5\", \"project\", \"projectVersion\",\n+                             \"repositoryName\", \"version\", \"whenGathered\", \"sha1\" ); //\n+\n         if ( startTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' >= \" + startTime.getTime() );\n+            query = query.addGteExpression( \"whenGathered\", startTime.getTime() );\n         }\n-\n         if ( endTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' <= \" + endTime.getTime() );\n+            query = query.addLteExpression( \"whenGathered\", endTime.getTime() );\n         }\n-\n-        QueryResult<CqlRows<String, String, String>> result =\n-            new CqlQuery<String, String, String>( keyspace, ss, ss, ss ).setQuery( cqlQuery.toString() ).execute();\n+        QueryResult<OrderedRows<String, String, Long>> result = query.execute();\n \n         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( result.get().getCount() );\n \n         LongSerializer ls = LongSerializer.get();\n+        StringSerializer ss = StringSerializer.get();\n \n-        for ( Row<String, String, String> row : result.get() )\n+        for ( Row<String, String, Long> row : result.get() )\n         {\n-            ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n-            ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-            artifactMetadata.setNamespace( columnSlice.getColumnByName( \"namespaceId\" ).getValue() );\n-            artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-            artifactMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n-            artifactMetadata.setFileLastModified(\n-                ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-            artifactMetadata.setMd5( columnSlice.getColumnByName( \"md5\" ).getValue() );\n-            artifactMetadata.setProject( columnSlice.getColumnByName( \"project\" ).getValue() );\n-            artifactMetadata.setProjectVersion( columnSlice.getColumnByName( \"projectVersion\" ).getValue() );\n-            artifactMetadata.setRepositoryId( columnSlice.getColumnByName( \"repositoryName\" ).getValue() );\n-            artifactMetadata.setSha1( columnSlice.getColumnByName( \"sha1\" ).getValue() );\n-            artifactMetadata.setVersion( columnSlice.getColumnByName( \"version\" ).getValue() );\n-            artifactMetadata.setWhenGathered(\n-                new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n-            artifactMetadatas.add( artifactMetadata );\n+            ColumnSlice<String, Long> columnSlice = row.getColumnSlice();\n+            String repositoryName =\n+                ss.fromByteBuffer( columnSlice.getColumnByName( \"repositoryName\" ).getValueBytes() );\n+            if ( StringUtils.equals( repositoryName, repositoryId ) )\n+            {\n+                ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n+                artifactMetadata.setNamespace(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n+                artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n+                artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n+                artifactMetadata.setFileLastModified(\n+                    ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n+                artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n+                artifactMetadata.setProject(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n+                artifactMetadata.setProjectVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+                artifactMetadata.setRepositoryId( repositoryName );\n+                artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n+                artifactMetadata.setVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n+                artifactMetadata.setWhenGathered(\n+                    new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+                artifactMetadatas.add( artifactMetadata );\n+            }\n         }\n \n         return artifactMetadatas;\n@@ -1800,9 +1809,52 @@ public ProjectVersionMetadata getProjectVersion( final String repoId, final Stri\n                                                      final String projectId, final String projectVersion )\n         throws MetadataResolutionException\n     {\n-/*        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n+        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n             namespace ).withProjectId( projectId ).withId( projectVersion ).build();\n \n+        StringSerializer ss = StringSerializer.get();\n+\n+        QueryResult<OrderedRows<String, String, String>> result =\n+            HFactory.createRangeSlicesQuery( cassandraArchivaManager.getKeyspace(), ss, ss, ss ) //\n+                .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n+                .setColumnNames( \"id\", \"description\", \"name\", \"namespaceId\", \"repositoryName\", \"incomplete\",\n+                                 \"projectId\", \"url\" ) //\n+                .addEqualsExpression( \"repositoryName\", repoId ) //\n+                .addEqualsExpression( \"namespaceId\", namespace ) //\n+                .addEqualsExpression( \"projectId\", projectId ) //\n+                .addEqualsExpression( \"id\", projectVersion ) //\n+                .execute();\n+        /*\n+        ColumnFamilyResult<String, String> columnFamilyResult =\n+            this.projectVersionMetadataModelTemplate.queryColumns( key, Arrays.asList( \"id\", \"description\", \"name\",\n+                                                                                       \"namespaceId\", \"repositoryName\",\n+                                                                                       \"incomplete\", \"projectId\",\n+                                                                                       \"url\" ) );\n+        if (!columnFamilyResult.hasResults())\n+        {\n+            return null;\n+        }*/\n+\n+        if (result.get().getCount() < 1)\n+        {\n+            return null;\n+        }\n+\n+        Row<String,String,String> row = result.get().getList().get( 0 );\n+\n+        ColumnSlice<String,String> columnSlice = row.getColumnSlice();\n+\n+        ProjectVersionMetadata projectVersionMetadata = new ProjectVersionMetadata();\n+        projectVersionMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n+        projectVersionMetadata.setDescription( columnSlice.getColumnByName( \"description\" ).getValue() );\n+        projectVersionMetadata.setName( columnSlice.getColumnByName( \"name\" ).getValue() );\n+\n+        projectVersionMetadata.setIncomplete( Boolean.parseBoolean( columnSlice.getColumnByName( \"incomplete\" ).getValue() ) );\n+\n+        projectVersionMetadata.setUrl( columnSlice.getColumnByName( \"url\" ).getValue() );\n+\n+        /*\n+\n         ProjectVersionMetadataModel projectVersionMetadataModel =\n             getProjectVersionMetadataModelEntityManager().get( key );\n \n@@ -1876,9 +1928,8 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n                 }\n             }\n         }\n-\n-        return projectVersionMetadata;*/\n-        return null;\n+        */\n+        return projectVersionMetadata;\n     }\n \n ",
                "raw_url": "https://github.com/apache/archiva/raw/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "sha": "a5c9e3c51a308868a30f4ad05f188469e4458fa6",
                "status": "modified"
            }
        ],
        "message": "NPE check!\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1579885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/01b3328e2b8ce6de4ec017049143f6882372dec4",
        "repo": "archiva",
        "unit_tests": [
            "CassandraMetadataRepositoryTest.java"
        ]
    },
    "archiva_aaf625b": {
        "bug_id": "archiva_aaf625b",
        "commit": "https://github.com/apache/archiva/commit/aaf625b9975985c150150f5f87e5ba53aea96bf6",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/archiva/blob/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java?ref=aaf625b9975985c150150f5f87e5ba53aea96bf6",
                "deletions": 10,
                "filename": "archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "patch": "@@ -44,10 +44,8 @@\n \n /**\n  * FileTypes\n- *\n- *\n  */\n-@Service( \"fileTypes\" )\n+@Service (\"fileTypes\")\n public class FileTypes\n     implements RegistryListener\n {\n@@ -63,7 +61,7 @@\n      *\n      */\n     @Inject\n-    @Named( value = \"archivaConfiguration#default\" )\n+    @Named (value = \"archivaConfiguration#default\")\n     private ArchivaConfiguration archivaConfiguration;\n \n     /**\n@@ -108,14 +106,17 @@ public void setArchivaConfiguration( ArchivaConfiguration archivaConfiguration )\n     {\n         Configuration config = archivaConfiguration.getConfiguration();\n         Predicate selectedFiletype = new FiletypeSelectionPredicate( id );\n-        FileType filetype =\n-            (FileType) CollectionUtils.find( config.getRepositoryScanning().getFileTypes(), selectedFiletype );\n-\n-        if ( ( filetype != null ) && CollectionUtils.isNotEmpty( filetype.getPatterns() ) )\n+        RepositoryScanningConfiguration repositoryScanningConfiguration = config.getRepositoryScanning();\n+        if ( repositoryScanningConfiguration != null )\n         {\n-            return filetype.getPatterns();\n-        }\n+            FileType filetype =\n+                (FileType) CollectionUtils.find( config.getRepositoryScanning().getFileTypes(), selectedFiletype );\n \n+            if ( ( filetype != null ) && CollectionUtils.isNotEmpty( filetype.getPatterns() ) )\n+            {\n+                return filetype.getPatterns();\n+            }\n+        }\n         List<String> defaultPatterns = defaultTypeMap.get( id );\n \n         if ( CollectionUtils.isEmpty( defaultPatterns ) )",
                "raw_url": "https://github.com/apache/archiva/raw/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-base/archiva-configuration/src/main/java/org/apache/archiva/configuration/FileTypes.java",
                "sha": "93df992d6c4143017c56be89154f21e66a32e132",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/archiva/blob/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java?ref=aaf625b9975985c150150f5f87e5ba53aea96bf6",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.archiva.configuration.ArchivaConfiguration;\n import org.apache.archiva.configuration.Configuration;\n import org.apache.archiva.configuration.ManagedRepositoryConfiguration;\n+import org.apache.archiva.configuration.RepositoryScanningConfiguration;\n import org.apache.archiva.metadata.model.ProjectVersionMetadata;\n import org.apache.archiva.metadata.repository.RepositorySession;\n import org.apache.archiva.test.utils.ArchivaSpringJUnit4ClassRunner;\n@@ -100,6 +101,7 @@ public void setUp()\n         configuration.addManagedRepository( repoConfig );\n \n         ArchivaConfiguration archivaConfiguration = applicationContext.getBean( ArchivaConfiguration.class );\n+        archivaConfiguration.getConfiguration().setRepositoryScanning( new RepositoryScanningConfiguration() );\n         archivaConfiguration.save( configuration );\n \n         TestMetadataResolver metadataResolver = applicationContext.getBean( TestMetadataResolver.class );",
                "raw_url": "https://github.com/apache/archiva/raw/aaf625b9975985c150150f5f87e5ba53aea96bf6/archiva-modules/archiva-web/archiva-webapp/src/test/java/org/apache/archiva/web/tags/DependencyTreeTest.java",
                "sha": "4c5e3a56395c8ae3baade22ddf888aa23550affb",
                "status": "modified"
            }
        ],
        "message": "prevent npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1384832 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/1fa95137da3db790902f52edff1cb9282687612e",
        "repo": "archiva",
        "unit_tests": [
            "FileTypesTest.java"
        ]
    },
    "archiva_b15679f": {
        "bug_id": "archiva_b15679f",
        "commit": "https://github.com/apache/archiva/commit/b15679f6a9e92581c44b8b54dbad582894da11d3",
        "file": [
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/archiva/blob/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java?ref=b15679f6a9e92581c44b8b54dbad582894da11d3",
                "deletions": 5,
                "filename": "archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "patch": "@@ -72,7 +72,7 @@\n \n     private ArchivaTaskScheduler<ArtifactIndexingTask> scheduler;\n \n-    private IndexingContext context;\n+    private IndexingContext indexingContext;\n \n     private NexusIndexer nexusIndexer;\n \n@@ -124,7 +124,7 @@ public void beginScan( ManagedRepository repository, Date whenGathered )\n         try\n         {\n             log.info( \"Creating indexing context for repo : {}\", repository.getId() );\n-            context = managedRepositoryAdmin.createIndexContext( repository );\n+            indexingContext = managedRepositoryAdmin.createIndexContext( repository );\n         }\n         catch ( RepositoryAdminException e )\n         {\n@@ -152,7 +152,7 @@ public void processFile( String path )\n         File artifactFile = new File( managedRepository, path );\n \n         ArtifactIndexingTask task =\n-            new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, context );\n+            new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, getIndexingContext() );\n         try\n         {\n             log.debug( \"Queueing indexing task '{}' to add or update the artifact in the index.\", task );\n@@ -177,7 +177,8 @@ public void processFile( String path, boolean executeOnEntireRepo )\n \n             // specify in indexing task that this is not a repo scan request!\n             ArtifactIndexingTask task =\n-                new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD, context, false );\n+                new ArtifactIndexingTask( repository, artifactFile, ArtifactIndexingTask.Action.ADD,\n+                                          getIndexingContext(), false );\n             // only update index we don't need to scan the full repo here\n             task.setOnlyUpdate( true );\n             try\n@@ -194,6 +195,19 @@ public void processFile( String path, boolean executeOnEntireRepo )\n \n     public void completeScan()\n     {\n+        IndexingContext context = this.indexingContext;\n+        if ( context == null )\n+        {\n+            try\n+            {\n+                context = getIndexingContext();\n+            }\n+            catch ( ConsumerException e )\n+            {\n+                log.warn( \"failed to get an IndexingContext:{}\", e.getMessage() );\n+                return;\n+            }\n+        }\n         ArtifactIndexingTask task =\n             new ArtifactIndexingTask( repository, null, ArtifactIndexingTask.Action.FINISH, context );\n         try\n@@ -205,7 +219,6 @@ public void completeScan()\n         {\n             log.error( \"Error queueing task: \" + task + \": \" + e.getMessage(), e );\n         }\n-        context = null;\n     }\n \n     public void completeScan( boolean executeOnEntireRepo )\n@@ -260,4 +273,23 @@ public void initialize()\n     {\n         return includes;\n     }\n+\n+\n+    private IndexingContext getIndexingContext()\n+        throws ConsumerException\n+    {\n+\n+        if ( this.indexingContext == null )\n+        {\n+            try\n+            {\n+                indexingContext = managedRepositoryAdmin.createIndexContext( repository );\n+            }\n+            catch ( RepositoryAdminException e )\n+            {\n+                throw new ConsumerException( e.getMessage(), e );\n+            }\n+        }\n+        return indexingContext;\n+    }\n }",
                "raw_url": "https://github.com/apache/archiva/raw/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java",
                "sha": "9cbff9bd1f50626442a1ef71528f671c25aea916",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/archiva/blob/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java?ref=b15679f6a9e92581c44b8b54dbad582894da11d3",
                "deletions": 5,
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "patch": "@@ -576,12 +576,17 @@ public IndexingContext createIndexContext( ManagedRepository repository )\n                 indexDirectory.mkdirs();\n             }\n \n-            context =\n-                indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository, indexDirectory,\n-                                            managedRepository.toURI().toURL().toExternalForm(),\n-                                            indexDirectory.toURI().toURL().toString(), indexCreators );\n+            context = indexer.getIndexingContexts().get( repository.getId() );\n \n-            context.setSearchable( repository.isScanned() );\n+            if ( context == null )\n+            {\n+                context = indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository,\n+                                                      indexDirectory,\n+                                                      managedRepository.toURI().toURL().toExternalForm(),\n+                                                      indexDirectory.toURI().toURL().toString(), indexCreators );\n+\n+                context.setSearchable( repository.isScanned() );\n+            }\n             return context;\n         }\n         catch ( MalformedURLException e )",
                "raw_url": "https://github.com/apache/archiva/raw/b15679f6a9e92581c44b8b54dbad582894da11d3/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/managed/DefaultManagedRepositoryAdmin.java",
                "sha": "d78d6413698a0a5e9011794c270ee9c68bf58c85",
                "status": "modified"
            }
        ],
        "message": " prevent NPE on initial scan at repository creation\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1232213 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/9cc9c4d3d6fe58ae8879a322b81b044b06c29447",
        "repo": "archiva",
        "unit_tests": [
            "NexusIndexerConsumerTest.java"
        ]
    },
    "archiva_b4f1eb2": {
        "bug_id": "archiva_b4f1eb2",
        "commit": "https://github.com/apache/archiva/commit/b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "deletions": 2,
                "filename": "archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "patch": "@@ -81,7 +81,14 @@ public void initialize()\n         {\n             for ( RepositoryGroup repositoryGroup : getRepositoriesGroups() )\n             {\n-                mergedRemoteIndexesScheduler.schedule( repositoryGroup, getMergedIndexDirectory( repositoryGroup.getId() ) );\n+                mergedRemoteIndexesScheduler.schedule( repositoryGroup,\n+                                                       getMergedIndexDirectory( repositoryGroup.getId() ) );\n+                // create the directory for each group if not exists\n+                File groupPath = new File( groupsDirectory, repositoryGroup.getId() );\n+                if ( !groupPath.exists() )\n+                {\n+                    groupPath.mkdirs();\n+                }\n             }\n         }\n         catch ( RepositoryAdminException e )\n@@ -244,7 +251,8 @@ public Boolean deleteRepositoryFromGroup( String repositoryGroupId, String repos\n         {\n             throw new RepositoryAdminException(\n                 \"repositoryGroup with id \" + repositoryGroupId + \" doesn't not contains repository with id\"\n-                    + repositoryId );\n+                    + repositoryId\n+            );\n         }\n \n         repositoryGroup.removeRepository( repositoryId );",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-base/archiva-repository-admin/archiva-repository-admin-default/src/main/java/org/apache/archiva/admin/repository/group/DefaultRepositoryGroupAdmin.java",
                "sha": "425fd5270686df8acc5075fd560712b014fe4d33",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "deletions": 13,
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "patch": "@@ -309,7 +309,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe\n             {\n                 resource = processRepository( request, archivaLocator, activePrincipal, managedRepositoryContent,\n                                               managedRepositoryAdmin.getManagedRepository(\n-                                                  archivaLocator.getRepositoryId() ) );\n+                                                  archivaLocator.getRepositoryId() )\n+                );\n \n                 String logicalResource = getLogicalResource( archivaLocator, null, false );\n                 resourcesInAbsolutePath.add(\n@@ -408,8 +409,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe\n                         catch ( DigesterException de )\n                         {\n                             throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n-                                                    \"Error occurred while generating checksum files.\"\n-                                                        + de.getMessage() );\n+                                                    \"Error occurred while generating checksum files.\" + de.getMessage()\n+                            );\n                         }\n                     }\n                 }\n@@ -925,7 +926,8 @@ protected boolean isAuthorized( DavServletRequest request, String repositoryId )\n             return servletAuth.isAuthenticated( request, result ) && servletAuth.isAuthorized( request, securitySession,\n                                                                                                repositoryId,\n                                                                                                WebdavMethodUtil.getMethodPermission(\n-                                                                                                   request.getMethod() ) );\n+                                                                                                   request.getMethod() )\n+            );\n         }\n         catch ( AuthenticationException e )\n         {\n@@ -972,11 +974,23 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                               RepositoryGroupConfiguration repositoryGroupConfiguration )\n         throws DavException, RepositoryAdminException\n     {\n+        if ( repositoryGroupConfiguration.getRepositories() == null\n+            || repositoryGroupConfiguration.getRepositories().isEmpty() )\n+        {\n+\n+            return new ArchivaVirtualDavResource( new ArrayList<File>(), //\n+                                                  new File( System.getProperty( \"appserver.base\" ) + \"/groups/\"\n+                                                                + repositoryGroupConfiguration.getId() ).getPath(),  //\n+                                                  mimeTypes, //\n+                                                  locator, //\n+                                                  this\n+            );\n+        }\n         List<File> mergedRepositoryContents = new ArrayList<File>();\n         // multiple repo types so we guess they are all the same type\n         // so use the first one\n         // FIXME add a method with group in the repository storage\n-        String firstRepoId = repositoryGroupConfiguration.getRepositories().get( 1 );\n+        String firstRepoId = repositoryGroupConfiguration.getRepositories().get( 0 );\n \n         String path = getLogicalResource( locator, managedRepositoryAdmin.getManagedRepository( firstRepoId ), false );\n         if ( path.startsWith( \"/\" ) )\n@@ -1012,7 +1026,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                 {\n                     File tmpDirectory = new File( SystemUtils.getJavaIoTmpDir(),\n                                                   repositoryGroupConfiguration.getId() + \"/\"\n-                                                      + repositoryGroupConfiguration.getMergedIndexPath() );\n+                                                      + repositoryGroupConfiguration.getMergedIndexPath()\n+                    );\n                     if ( !tmpDirectory.exists() )\n                     {\n                         synchronized ( tmpDirectory.getAbsolutePath() )\n@@ -1056,7 +1071,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                 repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n                                                                StringUtils.isEmpty( repoIndexDirectory )\n                                                                    ? \".indexer\"\n-                                                                   : repoIndexDirectory ).getAbsolutePath();\n+                                                                   : repoIndexDirectory\n+                                ).getAbsolutePath();\n                             }\n                         }\n                         if ( StringUtils.isEmpty( repoIndexDirectory ) )\n@@ -1096,7 +1112,8 @@ private DavResource getResourceFromGroup( DavServletRequest request, List<String\n                                 {\n                                     if ( servletAuth.isAuthorized( activePrincipal, repository,\n                                                                    WebdavMethodUtil.getMethodPermission(\n-                                                                       request.getMethod() ) ) )\n+                                                                       request.getMethod() )\n+                                    ) )\n                                     {\n                                         mergedRepositoryContents.add( resourceFile );\n                                         log.debug( \"Repository '{}' accessed by '{}'\", repository, activePrincipal );\n@@ -1312,13 +1329,14 @@ protected File buildMergedIndexDirectory( List<String> repositories, String acti\n             File tempRepoFile = Files.createTempDir();\n             tempRepoFile.deleteOnExit();\n \n-            IndexMergerRequest indexMergerRequest = new IndexMergerRequest( authzRepos, true, repositoryGroupConfiguration.getId(),\n-                                    repositoryGroupConfiguration.getMergedIndexPath(),\n-                                    repositoryGroupConfiguration.getMergedIndexTtl() ).mergedIndexDirectory( tempRepoFile )\n-                                    .temporary( true );\n+            IndexMergerRequest indexMergerRequest =\n+                new IndexMergerRequest( authzRepos, true, repositoryGroupConfiguration.getId(),\n+                                        repositoryGroupConfiguration.getMergedIndexPath(),\n+                                        repositoryGroupConfiguration.getMergedIndexTtl() ).mergedIndexDirectory(\n+                    tempRepoFile ).temporary( true );\n \n             MergedRemoteIndexesTaskRequest taskRequest =\n-                new MergedRemoteIndexesTaskRequest(indexMergerRequest, indexMerger);\n+                new MergedRemoteIndexesTaskRequest( indexMergerRequest, indexMerger );\n \n             MergedRemoteIndexesTask job = new MergedRemoteIndexesTask( taskRequest );\n ",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "sha": "260e4e4a32d6afb593339886fbeb0953773fbc9c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/archiva/blob/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java?ref=b4f1eb21cfa75e692e86f04c9e68a94b54292d12",
                "deletions": 2,
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "patch": "@@ -86,7 +86,7 @@ private void writeDocumentStart( PrintWriter writer )\n         writer.println( \"ul{list-style:none;}\" ); \n         \n         StringBuilder relative = new StringBuilder(\"../../\");\n-        if ( logicalResource.length() > 0 ) \n+        if ( logicalResource != null && logicalResource.length() > 0 )\n         {\n             String tmpRelative = StringUtils.replace( logicalResource, \"\\\\\", \"/\" );\n             for (int i=0;i<tmpRelative.split(\"/\").length;i++) \n@@ -109,7 +109,7 @@ private void writeDocumentStart( PrintWriter writer )\n         writer.println( \"<h3>Collection: /\" + logicalResource + \"</h3>\" );\n \n         //Check if not root\n-        if ( logicalResource.length() > 0 )\n+        if ( logicalResource != null && logicalResource.length() > 0 )\n         {\n             File file = new File( logicalResource );\n             String parentName = file.getParent() == null ? \"/\" : file.getParent();",
                "raw_url": "https://github.com/apache/archiva/raw/b4f1eb21cfa75e692e86f04c9e68a94b54292d12/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/util/IndexWriter.java",
                "sha": "d1a995ea66787f087a32e9bee2478c9409e6287c",
                "status": "modified"
            }
        ],
        "message": "[MRM-1804] IndexOutOfBoundsException when browsing a group with 0 or 1 repo\navoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1568621 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/8d88a946f1afd7800b5c30b344055c2e5c0c87a3",
        "repo": "archiva",
        "unit_tests": [
            "ArchivaDavResourceFactoryTest.java"
        ]
    },
    "archiva_ba1c285": {
        "bug_id": "archiva_ba1c285",
        "commit": "https://github.com/apache/archiva/commit/ba1c2854a0d44df1cc45084b25b4630ce9641d63",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "deletions": 2,
                "filename": "archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "patch": "@@ -424,14 +424,16 @@ public void testUpdateProjectVersionMetadataWithNoExistingFacets()\n         repository.updateProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, metadata );\n \n         metadata = repository.getProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, TEST_PROJECT_VERSION );\n-        assertEquals( Collections.<String>emptyList(), new ArrayList<String>( metadata.getFacetIds() ) );\n+\n+        Assertions.assertThat( metadata.getFacetIds() ).isNotNull().isEmpty();\n \n         metadata = new ProjectVersionMetadata();\n         metadata.setId( TEST_PROJECT_VERSION );\n         repository.updateProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, metadata );\n \n         metadata = repository.getProjectVersion( TEST_REPO_ID, TEST_NAMESPACE, TEST_PROJECT, TEST_PROJECT_VERSION );\n-        assertEquals( Collections.<String>emptyList(), new ArrayList<String>( metadata.getFacetIds() ) );\n+        Assertions.assertThat( metadata.getFacetIds() ).isNotNull().isEmpty();\n+\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/metadata/metadata-repository-api/src/test/java/org/apache/archiva/metadata/repository/AbstractMetadataRepositoryTest.java",
                "sha": "e119116718b2ba6060e53981f8af95847daf65d7",
                "status": "modified"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "changes": 283,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "deletions": 179,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "patch": "@@ -72,7 +72,7 @@\n import java.util.Map;\n import java.util.Set;\n \n-import static org.apache.archiva.metadata.repository.cassandra.CassandraUtils.column;\n+import static org.apache.archiva.metadata.repository.cassandra.CassandraUtils.*;\n \n /**\n  * @author Olivier Lamy\n@@ -161,8 +161,7 @@ public Repository getOrCreateRepository( String repositoryId )\n             try\n             {\n                 MutationResult mutationResult = HFactory.createMutator( keyspace, StringSerializer.get() ) //\n-                    .addInsertion( repositoryId, //\n-                                   cf, //\n+                    .addInsertion( repositoryId, cf,\n                                    CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n                     .execute();\n                 return repository;\n@@ -220,12 +219,8 @@ public Namespace updateOrAddNamespace( String repositoryId, String namespaceId )\n                 namespace = new Namespace( namespaceId, repository );\n                 HFactory.createMutator( keyspace, StringSerializer.get() )\n                     //  values\n-                    .addInsertion( key, //\n-                                   cf, //\n-                                   CassandraUtils.column( \"name\", namespace.getName() ) ) //\n-                    .addInsertion( key, //\n-                                   cf, //\n-                                   CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n+                    .addInsertion( key, cf, CassandraUtils.column( \"name\", namespace.getName() ) ) //\n+                    .addInsertion( key, cf, CassandraUtils.column( \"repositoryName\", repository.getName() ) ) //\n                     .execute();\n             }\n \n@@ -254,8 +249,8 @@ protected Namespace getNamespace( String repositoryId, String namespaceId )\n         if ( result.get().getCount() > 0 )\n         {\n             ColumnSlice<String, String> columnSlice = result.get().getList().get( 0 ).getColumnSlice();\n-            return new Namespace( columnSlice.getColumnByName( \"name\" ).getValue(), //\n-                                  new Repository( columnSlice.getColumnByName( \"repositoryName\" ).getValue() ) );\n+            return new Namespace( getStringValue( columnSlice, \"name\" ), //\n+                                  new Repository( getStringValue( columnSlice, \"repositoryName\" ) ) );\n \n         }\n         return null;\n@@ -441,7 +436,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n             for ( Row<String, String, String> row : cResult.get() )\n             {\n-                repoIds.add( row.getColumnSlice().getColumnByName( \"repositoryName\" ).getValue() );\n+                repoIds.add( getStringValue( row.getColumnSlice(), \"repositoryName\" ) );\n             }\n \n             return repoIds;\n@@ -458,12 +453,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public Collection<String> getRootNamespaces( final String repoId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -473,8 +466,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            namespaces.add(\n-                StringUtils.substringBefore( row.getColumnSlice().getColumnByName( \"name\" ).getValue(), \".\" ) );\n+            namespaces.add( StringUtils.substringBefore( getStringValue( row.getColumnSlice(), \"name\" ), \".\" ) );\n         }\n \n         return namespaces;\n@@ -485,12 +477,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public Collection<String> getNamespaces( final String repoId, final String namespaceId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -500,9 +490,9 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            String currentNamespace = row.getColumnSlice().getColumnByName( \"name\" ).getValue();\n-            if ( StringUtils.startsWith( currentNamespace, namespaceId ) && ( StringUtils.length( currentNamespace )\n-                > StringUtils.length( namespaceId ) ) )\n+            String currentNamespace = getStringValue( row.getColumnSlice(), \"name\" );\n+            if ( StringUtils.startsWith( currentNamespace, namespaceId ) //\n+                && ( StringUtils.length( currentNamespace ) > StringUtils.length( namespaceId ) ) )\n             {\n                 // store after namespaceId '.' but before next '.'\n                 // call org namespace org.apache.maven.shared -> stored apache\n@@ -524,12 +514,10 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n     public List<String> getNamespaces( final String repoId )\n         throws MetadataResolutionException\n     {\n+        StringSerializer ss = StringSerializer.get();\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getNamespaceFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -539,7 +527,7 @@ public Boolean apply( ProjectVersionMetadataModel projectVersionMetadataModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            namespaces.add( row.getColumnSlice().getColumnByName( \"name\" ).getValue() );\n+            namespaces.add( getStringValue( row.getColumnSlice(), \"name\" ) );\n         }\n \n         return namespaces;\n@@ -551,12 +539,10 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n+        StringSerializer ss = StringSerializer.get();\n \n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -579,15 +565,9 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n             String cf = cassandraArchivaManager.getProjectFamilyName();\n             projectTemplate.createMutator()\n                 //  values\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"projectId\", projectMetadata.getId() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"namespaceId\", projectMetadata.getNamespace() ) )//\n+                .addInsertion( key, cf, CassandraUtils.column( \"projectId\", projectMetadata.getId() ) ) //\n+                .addInsertion( key, cf, CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n+                .addInsertion( key, cf, CassandraUtils.column( \"namespaceId\", projectMetadata.getNamespace() ) )//\n                 .execute();\n         }\n     }\n@@ -598,12 +578,9 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -614,7 +591,7 @@ public void updateProject( String repositoryId, ProjectMetadata projectMetadata\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            projects.add( row.getColumnSlice().getColumnByName( \"projectId\" ).getValue() );\n+            projects.add( getStringValue( row.getColumnSlice(), \"projectId\" ) );\n         }\n \n         return projects;\n@@ -625,7 +602,7 @@ public void removeProject( final String repositoryId, final String namespaceId,\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         String key = new Project.KeyBuilder() //\n             .withProjectId( projectId ) //\n             .withNamespace( new Namespace( namespaceId, new Repository( repositoryId ) ) ) //\n@@ -638,10 +615,7 @@ public void removeProject( final String repositoryId, final String namespaceId,\n         this.projectTemplate.deleteRow( key );\n \n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -688,12 +662,9 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -712,7 +683,7 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n \n         for ( Row<String, String, String> orderedRows : result.get() )\n         {\n-            versions.add( orderedRows.getColumnSlice().getColumnByName( \"id\" ).getValue() );\n+            versions.add( getStringValue( orderedRows.getColumnSlice(), \"id\" ) );\n         }\n \n         return versions;\n@@ -725,12 +696,9 @@ public ProjectMetadata getProject( final String repoId, final String namespace,\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectFamilyName() ) //\n             .setColumnNames( \"projectId\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -758,17 +726,18 @@ public ProjectMetadata getProject( final String repoId, final String namespace,\n     protected ProjectVersionMetadataModel map( ColumnSlice<String, String> columnSlice )\n     {\n         ProjectVersionMetadataModel projectVersionMetadataModel = new ProjectVersionMetadataModel();\n-        projectVersionMetadataModel.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n-        projectVersionMetadataModel.setDescription( columnSlice.getColumnByName( \"description\" ).getValue() );\n-        projectVersionMetadataModel.setName( columnSlice.getColumnByName( \"name\" ).getValue() );\n-        projectVersionMetadataModel.setNamespace(\n-            new Namespace( columnSlice.getColumnByName( \"namespaceId\" ).getValue(), //\n-                           new Repository( columnSlice.getColumnByName( \"repositoryName\" ).getValue() ) )\n+        projectVersionMetadataModel.setId( getStringValue( columnSlice, \"id\" ) );\n+        projectVersionMetadataModel.setDescription( getStringValue( columnSlice, \"description\" ) );\n+        projectVersionMetadataModel.setName( getStringValue( columnSlice, \"name\" ) );\n+        projectVersionMetadataModel.setNamespace( new Namespace( getStringValue( columnSlice, \"namespaceId\" ), //\n+                                                                 new Repository(\n+                                                                     getStringValue( columnSlice, \"repositoryName\" ) )\n+                                                  )\n         );\n         projectVersionMetadataModel.setIncomplete(\n-            Boolean.parseBoolean( columnSlice.getColumnByName( \"incomplete\" ).getValue() ) );\n-        projectVersionMetadataModel.setProjectId( columnSlice.getColumnByName( \"projectId\" ).getValue() );\n-        projectVersionMetadataModel.setUrl( columnSlice.getColumnByName( \"url\" ).getValue() );\n+            Boolean.parseBoolean( getStringValue( columnSlice, \"incomplete\" ) ) );\n+        projectVersionMetadataModel.setProjectId( getStringValue( columnSlice, \"projectId\" ) );\n+        projectVersionMetadataModel.setUrl( getStringValue( columnSlice, \"url\" ) );\n         return projectVersionMetadataModel;\n     }\n \n@@ -801,12 +770,11 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             throw new MetadataRepositoryException( e.getMessage(), e );\n         }\n \n+        StringSerializer ss = StringSerializer.get();\n+\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n             .setColumnNames( \"id\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -847,40 +815,24 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             String cf = cassandraArchivaManager.getProjectVersionMetadataModelFamilyName();\n             Mutator<String> mutator = projectVersionMetadataModelTemplate.createMutator()\n                 //  values\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"projectId\", projectId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"namespaceId\", namespaceId ) )//\n-                .addInsertion( key, //\n-                               cf, //\n-                               column( \"id\", versionMetadata.getVersion() ) ); //\n+                .addInsertion( key, cf, column( \"projectId\", projectId ) ) //\n+                .addInsertion( key, cf, column( \"repositoryName\", repositoryId ) ) //\n+                .addInsertion( key, cf, column( \"namespaceId\", namespaceId ) )//\n+                .addInsertion( key, cf, column( \"id\", versionMetadata.getVersion() ) ); //\n             if ( versionMetadata.getDescription() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"description\", versionMetadata.getDescription() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"description\", versionMetadata.getDescription() ) );\n             }\n \n             if ( versionMetadata.getName() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"name\", versionMetadata.getName() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"name\", versionMetadata.getName() ) );\n             }\n-            mutator = mutator.addInsertion( key, //\n-                                            cf, //\n-                                            column( \"incomplete\",\n-                                                    Boolean.toString( versionMetadata.isIncomplete() ) ) );\n+            mutator = mutator.addInsertion( key, cf, column( \"incomplete\",\n+                                                             Boolean.toString( versionMetadata.isIncomplete() ) ) );\n             if ( versionMetadata.getUrl() != null )\n             {\n-                mutator = mutator.addInsertion( key, //\n-                                                cf, //\n-                                                column( \"url\", versionMetadata.getUrl() ) );\n+                mutator = mutator.addInsertion( key, cf, column( \"url\", versionMetadata.getUrl() ) );\n             }\n \n             MutationResult mutationResult = mutator.execute();\n@@ -1310,12 +1262,9 @@ public void updateArtifact( String repositoryId, String namespaceId, String proj\n         throws MetadataResolutionException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n             .setColumnNames( \"version\" ) //\n             .addEqualsExpression( \"repositoryName\", repoId ) //\n@@ -1327,7 +1276,7 @@ public void updateArtifact( String repositoryId, String namespaceId, String proj\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            versions.add( row.getColumnSlice().getColumnByName( \"version\" ).getValue() );\n+            versions.add( getStringValue( row.getColumnSlice(), \"version\" ) );\n         }\n \n         return versions;\n@@ -1471,12 +1420,9 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"name\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1487,7 +1433,7 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n \n         for ( Row<String, String, String> row : result.get() )\n         {\n-            facets.add( row.getColumnSlice().getColumnByName( \"name\" ).getValue() );\n+            facets.add( getStringValue( row.getColumnSlice(), \"name\" ) );\n         }\n         return facets;\n     }\n@@ -1511,12 +1457,9 @@ public MetadataFacet getMetadataFacet( final String repositoryId, final String f\n         }\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1529,8 +1472,7 @@ public MetadataFacet getMetadataFacet( final String repositoryId, final String f\n         for ( Row<String, String, String> row : result.get() )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n-            map.put( columnSlice.getColumnByName( \"key\" ).getValue(),\n-                     columnSlice.getColumnByName( \"value\" ).getValue() );\n+            map.put( getStringValue( columnSlice, \"key\" ), getStringValue( columnSlice, \"value\" ) );\n         }\n         metadataFacet.fromProperties( map );\n         return metadataFacet;\n@@ -1658,12 +1600,9 @@ public void removeMetadataFacets( final String repositoryId, final String facetI\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1682,12 +1621,9 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n         throws MetadataRepositoryException\n     {\n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n         QueryResult<OrderedRows<String, String, String>> result = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ss ) //\n             .setColumnFamily( cassandraArchivaManager.getMetadataFacetModelFamilyName() ) //\n             .setColumnNames( \"key\", \"value\" ) //\n             .addEqualsExpression( \"repositoryName\", repositoryId ) //\n@@ -1708,12 +1644,10 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n     {\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n-\n+        StringSerializer ss = StringSerializer.get();\n+        LongSerializer ls = LongSerializer.get();\n         RangeSlicesQuery<String, String, Long> query = HFactory //\n-            .createRangeSlicesQuery( keyspace, //\n-                                     StringSerializer.get(), //\n-                                     StringSerializer.get(), //\n-                                     LongSerializer.get() ) //\n+            .createRangeSlicesQuery( keyspace, ss, ss, ls ) //\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n             .setColumnNames( \"namespaceId\", \"size\", \"id\", \"fileLastModified\", \"md5\", \"project\", \"projectVersion\",\n                              \"repositoryName\", \"version\", \"whenGathered\", \"sha1\" ); //\n@@ -1730,9 +1664,6 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n \n         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( result.get().getCount() );\n \n-        LongSerializer ls = LongSerializer.get();\n-        StringSerializer ss = StringSerializer.get();\n-\n         for ( Row<String, String, Long> row : result.get() )\n         {\n             ColumnSlice<String, Long> columnSlice = row.getColumnSlice();\n@@ -1741,23 +1672,21 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n             if ( StringUtils.equals( repositoryName, repositoryId ) )\n             {\n                 ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-                artifactMetadata.setNamespace(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n-                artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-                artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n-                artifactMetadata.setFileLastModified(\n-                    ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-                artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n-                artifactMetadata.setProject(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n-                artifactMetadata.setProjectVersion(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+                artifactMetadata.setNamespace( getAsStringValue( columnSlice, \"namespaceId\" ) );\n+                artifactMetadata.setSize( getLongValue( columnSlice, \"size\" ) );\n+                artifactMetadata.setId( getAsStringValue( columnSlice, \"id\" ) );\n+                artifactMetadata.setFileLastModified( getLongValue( columnSlice, \"fileLastModified\" ) );\n+                artifactMetadata.setMd5( getAsStringValue( columnSlice, \"md5\" ) );\n+                artifactMetadata.setProject( getAsStringValue( columnSlice, \"project\" ) );\n+                artifactMetadata.setProjectVersion( getAsStringValue( columnSlice, \"projectVersion\" ) );\n                 artifactMetadata.setRepositoryId( repositoryName );\n-                artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n-                artifactMetadata.setVersion(\n-                    ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n-                artifactMetadata.setWhenGathered(\n-                    new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+                artifactMetadata.setSha1( getAsStringValue( columnSlice, \"sha1\" ) );\n+                artifactMetadata.setVersion( getAsStringValue( columnSlice, \"version\" ) );\n+                Long whenGathered = getLongValue( columnSlice, \"whenGathered\" );\n+                if ( whenGathered != null )\n+                {\n+                    artifactMetadata.setWhenGathered( new Date( whenGathered ) );\n+                }\n                 artifactMetadatas.add( artifactMetadata );\n             }\n         }\n@@ -2071,23 +2000,21 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n             ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-            artifactMetadata.setNamespace(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n-            artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-            artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n-            artifactMetadata.setFileLastModified(\n-                ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-            artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n-            artifactMetadata.setProject(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n-            artifactMetadata.setProjectVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+            artifactMetadata.setNamespace( getStringValue( columnSlice, \"namespaceId\" ) );\n+            artifactMetadata.setSize( getAsLongValue( columnSlice, \"size\" ) );\n+            artifactMetadata.setId( getStringValue( columnSlice, \"id\" ) );\n+            artifactMetadata.setFileLastModified( getAsLongValue( columnSlice, \"fileLastModified\" ) );\n+            artifactMetadata.setMd5( getStringValue( columnSlice, \"md5\" ) );\n+            artifactMetadata.setProject( getStringValue( columnSlice, \"project\" ) );\n+            artifactMetadata.setProjectVersion( getStringValue( columnSlice, \"projectVersion\" ) );\n             artifactMetadata.setRepositoryId( repoId );\n-            artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n-            artifactMetadata.setVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n-            artifactMetadata.setWhenGathered(\n-                new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+            artifactMetadata.setSha1( getStringValue( columnSlice, \"sha1\" ) );\n+            artifactMetadata.setVersion( getStringValue( columnSlice, \"version\" ) );\n+            Long whenGathered = getAsLongValue( columnSlice, \"whenGathered\" );\n+            if ( whenGathered != null )\n+            {\n+                artifactMetadata.setWhenGathered( new Date( whenGathered ) );\n+            }\n             artifactMetadatas.add( artifactMetadata );\n         }\n \n@@ -2113,13 +2040,11 @@ public Boolean apply( ArtifactMetadataModel artifactMetadataModel )\n         {\n             ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n             MetadataFacetModel metadataFacetModel = new MetadataFacetModel();\n-            metadataFacetModel.setFacetId(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"facetId\" ).getValueBytes() ) );\n-            metadataFacetModel.setName( ss.fromByteBuffer( columnSlice.getColumnByName( \"name\" ).getValueBytes() ) );\n-            metadataFacetModel.setValue( ss.fromByteBuffer( columnSlice.getColumnByName( \"value\" ).getValueBytes() ) );\n-            metadataFacetModel.setKey( ss.fromByteBuffer( columnSlice.getColumnByName( \"key\" ).getValueBytes() ) );\n-            metadataFacetModel.setProjectVersion(\n-                ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+            metadataFacetModel.setFacetId( getStringValue( columnSlice, \"facetId\" ) );\n+            metadataFacetModel.setName( getStringValue( columnSlice, \"name\" ) );\n+            metadataFacetModel.setValue( getStringValue( columnSlice, \"value\" ) );\n+            metadataFacetModel.setKey( getStringValue( columnSlice, \"key\" ) );\n+            metadataFacetModel.setProjectVersion( getStringValue( columnSlice, \"projectVersion\" ) );\n             metadataFacetModels.add( metadataFacetModel );\n         }\n ",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "sha": "bf1ba51cdeb918f67d45b48242716eb87972f309",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/archiva/blob/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java?ref=ba1c2854a0d44df1cc45084b25b4630ce9641d63",
                "deletions": 0,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "patch": "@@ -19,10 +19,14 @@\n  * under the License.\n  */\n \n+import me.prettyprint.cassandra.serializers.LongSerializer;\n import me.prettyprint.cassandra.serializers.SerializerTypeInferer;\n+import me.prettyprint.cassandra.serializers.StringSerializer;\n import me.prettyprint.hector.api.Serializer;\n+import me.prettyprint.hector.api.beans.ColumnSlice;\n import me.prettyprint.hector.api.beans.HColumn;\n import me.prettyprint.hector.api.factory.HFactory;\n+import org.apache.commons.lang.StringUtils;\n \n /**\n  * @author Olivier Lamy\n@@ -70,6 +74,52 @@ public static String generateKey( final String... bases )\n                                       (Serializer<B>) SerializerTypeInferer.getSerializer( value ) );\n     }\n \n+    public static String getStringValue( ColumnSlice<String, String> columnSlice, String columnName )\n+    {\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, String> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : hColumn.getValue();\n+    }\n+\n+    public static Long getLongValue( ColumnSlice<String, Long> columnSlice, String columnName )\n+    {\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, Long> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : hColumn.getValue();\n+    }\n+\n+    public static String getAsStringValue( ColumnSlice<String, Long> columnSlice, String columnName )\n+    {\n+        StringSerializer ss = StringSerializer.get();\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, Long> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : ss.fromByteBuffer( hColumn.getValueBytes() );\n+    }\n+\n+    public static Long getAsLongValue( ColumnSlice<String, String> columnSlice, String columnName )\n+    {\n+        LongSerializer ls = LongSerializer.get();\n+        if ( StringUtils.isNotEmpty( columnName ) )\n+        {\n+            return null;\n+        }\n+\n+        HColumn<String, String> hColumn = columnSlice.getColumnByName( columnName );\n+        return hColumn == null ? null : ls.fromByteBuffer( hColumn.getValueBytes() );\n+    }\n+\n     private CassandraUtils()\n     {\n         // no-op",
                "raw_url": "https://github.com/apache/archiva/raw/ba1c2854a0d44df1cc45084b25b4630ce9641d63/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraUtils.java",
                "sha": "3482f59942bbf91ee5262174a1ee5895c47cb482",
                "status": "modified"
            }
        ],
        "message": "use an utility methods to prevent npe when column values does not exist for a row\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1580688 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/63938bfb4774b0f4fa935990573e254cbf8593b2",
        "repo": "archiva",
        "unit_tests": [
            "CassandraMetadataRepositoryTest.java"
        ]
    },
    "archiva_c6afb27": {
        "bug_id": "archiva_c6afb27",
        "commit": "https://github.com/apache/archiva/commit/c6afb274c0d0680c35e041531b130def0e2da998",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/archiva/blob/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=c6afb274c0d0680c35e041531b130def0e2da998",
                "deletions": 4,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "patch": "@@ -844,11 +844,19 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             updater.setString( \"repositoryName\", repositoryId );\n             updater.setString( \"namespaceId\", namespaceId );\n             updater.setString( \"id\", versionMetadata.getVersion() );\n-            updater.setString( \"description\", versionMetadata.getDescription() );\n-            updater.setString( \"name\", versionMetadata.getName() );\n+            if ( StringUtils.isNotEmpty( versionMetadata.getDescription() ) )\n+            {\n+                updater.setString( \"description\", versionMetadata.getDescription() );\n+            }\n+            if ( StringUtils.isNotEmpty( versionMetadata.getName() ) )\n+            {\n+                updater.setString( \"name\", versionMetadata.getName() );\n+            }\n             updater.setString( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) );\n-            updater.setString( \"url\", versionMetadata.getUrl() );\n-\n+            if ( StringUtils.isNotEmpty( versionMetadata.getUrl() ) )\n+            {\n+                updater.setString( \"url\", versionMetadata.getUrl() );\n+            }\n             projectVersionMetadataModelTemplate.update( updater );\n \n         }",
                "raw_url": "https://github.com/apache/archiva/raw/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "sha": "6eda35d5ef677f204ae098c0e4c7fb168c775cb1",
                "status": "modified"
            }
        ],
        "message": "add NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1580689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/ba1c2854a0d44df1cc45084b25b4630ce9641d63",
        "repo": "archiva",
        "unit_tests": [
            "CassandraMetadataRepositoryTest.java"
        ]
    }
}