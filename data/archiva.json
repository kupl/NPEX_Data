{
    "archiva_096a4c0": {
        "bug_id": "archiva_096a4c0",
        "commit": "https://github.com/apache/archiva/commit/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/archiva/blob/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java?ref=096a4c0ed1d0d4e82c8ebf276554b2663d54cdec",
                "deletions": 0,
                "filename": "archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "patch": "@@ -413,6 +413,11 @@ public MetadataFacet getMetadataFacet( String repositoryId, String facetId, Stri\n             Node root = getJcrSession().getRootNode();\n             Node node = root.getNode( getFacetPath( repositoryId, facetId, name ) );\n \n+            if ( metadataFacetFactories == null )\n+            {\n+                return metadataFacet;\n+            }\n+\n             MetadataFacetFactory metadataFacetFactory = metadataFacetFactories.get( facetId );\n             if ( metadataFacetFactory != null )\n             {",
                "raw_url": "https://github.com/apache/archiva/raw/096a4c0ed1d0d4e82c8ebf276554b2663d54cdec/archiva-modules/plugins/metadata-store-jcr/src/main/java/org/apache/archiva/metadata/repository/jcr/JcrMetadataRepository.java",
                "sha": "0ad272528c3ec3212a24be39c8ae053095e8af13",
                "status": "modified"
            }
        ],
        "message": "prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1345396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/1141aca7ec7a1d91616d03dcf4f94a35d62baeaf",
        "repo": "archiva",
        "unit_tests": [
            "JcrMetadataRepositoryTest.java"
        ]
    },
    "archiva_09fff6a": {
        "bug_id": "archiva_09fff6a",
        "commit": "https://github.com/apache/archiva/commit/09fff6ad6e15bc4d815d4814b28c5b392309f967",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/archiva/blob/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java?ref=09fff6ad6e15bc4d815d4814b28c5b392309f967",
                "deletions": 2,
                "filename": "archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "patch": "@@ -99,10 +99,10 @@ public void initComponents()\n         httpAuth = (HttpAuthenticator) lookup( HttpAuthenticator.ROLE, \"basic\" );\n         audit = (AuditLog) lookup( AuditLog.ROLE );\n \n-        updateRepositoryMap();\n-\n         configuration = (ArchivaConfiguration) lookup( ArchivaConfiguration.class.getName() );\n         configuration.addChangeListener( this );\n+        \n+        updateRepositoryMap();\n     }\n \n     public void initServers( ServletConfig servletConfig )",
                "raw_url": "https://github.com/apache/archiva/raw/09fff6ad6e15bc4d815d4814b28c5b392309f967/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/RepositoryServlet.java",
                "sha": "0a0b316d7cc3df3b4bdce26ccacc89da0e20e2ef",
                "status": "modified"
            }
        ],
        "message": "[MRM-336]: Repository Admin - \"Index Repository\" appears to not do anything. \n\"Get your filthy hands off my you damned dirty NPEs!\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@538405 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/966e374f6cd73c34b6703e7e998544dcee5eef46",
        "repo": "archiva",
        "unit_tests": [
            "RepositoryServletTest.java"
        ]
    },
    "archiva_14b464c": {
        "bug_id": "archiva_14b464c",
        "commit": "https://github.com/apache/archiva/commit/14b464c1859e1b80668a7b193e298da1659c1de9",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/archiva/blob/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java?ref=14b464c1859e1b80668a7b193e298da1659c1de9",
                "deletions": 1,
                "filename": "archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "patch": "@@ -261,7 +261,6 @@ public void executeConsumers( ManagedRepositoryConfiguration repository, File lo\n             TriggerScanCompletedClosure scanCompletedClosure = new TriggerScanCompletedClosure(repository);\n \n             CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n-            CollectionUtils.forAllDo(selectedKnownConsumers, scanCompletedClosure);\n         }\n         finally\n         {",
                "raw_url": "https://github.com/apache/archiva/raw/14b464c1859e1b80668a7b193e298da1659c1de9/archiva-modules/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/scanner/RepositoryContentConsumers.java",
                "sha": "1a22ab7869f6f4fc1afce702f5b19cfc7e81b0c6",
                "status": "modified"
            }
        ],
        "message": "[MRM-1076]\no remove second invocation of complete scan in RepositoryContentConsumers which causes the NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@745393 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/ebe7941ce08323fbd63e6d0d39c31e932b7a7e65",
        "repo": "archiva",
        "unit_tests": [
            "RepositoryContentConsumersTest.java"
        ]
    },
    "archiva_4b34d91": {
        "bug_id": "archiva_4b34d91",
        "commit": "https://github.com/apache/archiva/commit/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "patch": "@@ -105,6 +105,10 @@ public boolean isAuthorized( String principal, String repoId, boolean isWriteReq\n             }\n             \n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new UnauthorizedException( \"The security system had an internal error - please check your system logs\" );\n+            }\n             if ( user.isLocked() )\n             {\n                 throw new UnauthorizedException( \"User account is locked.\" );",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/ArchivaServletAuthenticator.java",
                "sha": "1b533d30fb0b4c01667241c9b92ea900a88d783c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java?ref=4b34d911eb606d05f4bdc9c4f73e8e6283565bf9",
                "deletions": 0,
                "filename": "archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "patch": "@@ -77,6 +77,10 @@\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {\n@@ -145,6 +149,10 @@ public boolean isAuthorizedToUploadArtifacts( String principal, String repoId )\n         try\n         {\n             User user = securitySystem.getUserManager().findUser( principal );\n+            if ( user == null )\n+            {\n+                throw new ArchivaSecurityException( \"The security system had an internal error - please check your system logs\" );\n+            }\n \n             if ( user.isLocked() )\n             {",
                "raw_url": "https://github.com/apache/archiva/raw/4b34d911eb606d05f4bdc9c4f73e8e6283565bf9/archiva-modules/archiva-web/archiva-security/src/main/java/org/apache/maven/archiva/security/DefaultUserRepositories.java",
                "sha": "d99b089326f6ae481ce7bea7fd743049f32452ff",
                "status": "modified"
            }
        ],
        "message": "[MNG-1106] guard against NPE which can be generated by the LDAP user manager if misconfigured\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@750953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/adf0f01d13f602754d824843ce3b8b3d43b844c2",
        "repo": "archiva",
        "unit_tests": [
            "DefaultUserRepositoriesTest.java"
        ]
    },
    "archiva_546014d": {
        "bug_id": "archiva_546014d",
        "commit": "https://github.com/apache/archiva/commit/546014d1946edb769bd6dceb7db53a6cd23a974e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java?ref=546014d1946edb769bd6dceb7db53a6cd23a974e",
                "deletions": 5,
                "filename": "archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "patch": "@@ -951,12 +951,15 @@ private DavResource getResource( DavServletRequest request, List<String> reposit\n                 {\n                     // in case of group displaying index directory doesn't have sense !!\n                     String repoIndexDirectory = managedRepository.getRepository().getIndexDirectory();\n-                    if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                    if ( StringUtils.isNotEmpty( repoIndexDirectory ) )\n                     {\n-                        repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n-                                                       StringUtils.isEmpty( repoIndexDirectory )\n-                                                           ? \".indexer\"\n-                                                           : repoIndexDirectory ).getAbsolutePath();\n+                        if ( !new File( repoIndexDirectory ).isAbsolute() )\n+                        {\n+                            repoIndexDirectory = new File( managedRepository.getRepository().getLocation(),\n+                                                           StringUtils.isEmpty( repoIndexDirectory )\n+                                                               ? \".indexer\"\n+                                                               : repoIndexDirectory ).getAbsolutePath();\n+                        }\n                     }\n                     if ( StringUtils.isEmpty( repoIndexDirectory ) )\n                     {",
                "raw_url": "https://github.com/apache/archiva/raw/546014d1946edb769bd6dceb7db53a6cd23a974e/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/archiva/webdav/ArchivaDavResourceFactory.java",
                "sha": "b99b2cf4d7cdb5ceeab072e7d70b22db28f22d23",
                "status": "modified"
            }
        ],
        "message": "do not index directory in case of group: prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1196835 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/c814b9b98136f9756bbf833aaff58a56034d014d",
        "repo": "archiva",
        "unit_tests": [
            "ArchivaDavResourceFactoryTest.java"
        ]
    },
    "archiva_6355514": {
        "bug_id": "archiva_6355514",
        "commit": "https://github.com/apache/archiva/commit/63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/archiva/blob/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java?ref=63555143b21f0de7fd3735d7a9e52e0ce3d2a450",
                "deletions": 3,
                "filename": "archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "patch": "@@ -93,15 +93,15 @@ else if ( \"javadoc\".equals( classifier ) )\n \n     public static String mapExtensionToType( String extension )\n     {\n-        if ( extension.equals( \"tar.gz\" ) )\n+        if ( \"tar.gz\".equals( extension ) )\n         {\n             return \"distribution-tgz\";\n         }\n-        else  if ( extension.equals( \"tar.bz2\" ) )\n+        else  if ( \"tar.bz2\".equals( extension ) )\n         {\n             return \"distribution-bzip\";\n         }\n-        else  if ( extension.equals( \"zip\" ) )\n+        else  if ( \"zip\".equals( extension ) )\n         {\n             return \"distribution-zip\";\n         }",
                "raw_url": "https://github.com/apache/archiva/raw/63555143b21f0de7fd3735d7a9e52e0ce3d2a450/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/content/ArtifactExtensionMapping.java",
                "sha": "3c28cec2c110040370f87f4eb946d8f57822fc09",
                "status": "modified"
            }
        ],
        "message": "guard against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/archiva/trunk@630842 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/a88253bafe407ce8ff6cc0a850f167fd35786711",
        "repo": "archiva",
        "unit_tests": [
            "ArtifactExtensionMappingTest.java"
        ]
    },
    "archiva_66ed6cb": {
        "bug_id": "archiva_66ed6cb",
        "commit": "https://github.com/apache/archiva/commit/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/archiva/blob/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java?ref=66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec",
                "deletions": 3,
                "filename": "archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "patch": "@@ -102,7 +102,10 @@ public Lock readFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"read Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }\n@@ -178,8 +181,10 @@ public Lock writeFileLock( File file )\n             {\n                 // can happen if an other thread has deleted the file\n                 // close RandomAccessFile!!!\n-                closeQuietly( lock.getRandomAccessFile() );\n-\n+                if ( lock != null )\n+                {\n+                    closeQuietly( lock.getRandomAccessFile() );\n+                }\n                 log.debug( \"write Lock skip: {} try to create file\", e.getMessage() );\n                 createNewFileQuietly( file );\n             }",
                "raw_url": "https://github.com/apache/archiva/raw/66ed6cb4b0103fe9e9935f0ccd84fd833b2c09ec/archiva-modules/archiva-base/archiva-filelock/src/main/java/org/apache/archiva/common/filelock/DefaultFileLockManager.java",
                "sha": "09008e2a72d5141e8811265f12d5803755c85955",
                "status": "modified"
            }
        ],
        "message": "prevent possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1551386 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/52caa0198b6f95142300daa37122d6e5dbbf9399",
        "repo": "archiva",
        "unit_tests": [
            "DefaultFileLockManagerTest.java"
        ]
    },
    "archiva_86ad139": {
        "bug_id": "archiva_86ad139",
        "commit": "https://github.com/apache/archiva/commit/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
        "file": [
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/archiva/blob/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "changes": 173,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a",
                "deletions": 61,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "patch": "@@ -19,8 +19,6 @@\n  * under the License.\n  */\n \n-import me.prettyprint.cassandra.model.CqlQuery;\n-import me.prettyprint.cassandra.model.CqlRows;\n import me.prettyprint.cassandra.serializers.LongSerializer;\n import me.prettyprint.cassandra.serializers.StringSerializer;\n import me.prettyprint.cassandra.service.template.ColumnFamilyTemplate;\n@@ -33,7 +31,9 @@\n import me.prettyprint.hector.api.exceptions.HInvalidRequestException;\n import me.prettyprint.hector.api.factory.HFactory;\n import me.prettyprint.hector.api.mutation.MutationResult;\n+import me.prettyprint.hector.api.mutation.Mutator;\n import me.prettyprint.hector.api.query.QueryResult;\n+import me.prettyprint.hector.api.query.RangeSlicesQuery;\n import org.apache.archiva.configuration.ArchivaConfiguration;\n import org.apache.archiva.metadata.model.ArtifactMetadata;\n import org.apache.archiva.metadata.model.FacetedMetadata;\n@@ -839,34 +839,45 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n         if ( creation )\n         {\n             String cf = cassandraArchivaManager.getProjectFamilyName();\n-            projectVersionMetadataModelTemplate.createMutator()\n+            Mutator<String> mutator = projectVersionMetadataModelTemplate.createMutator()\n                 //  values\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"projectId\", projectId ) ) //\n+                               column( \"projectId\", projectId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"repositoryName\", repositoryId ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"namespaceId\", namespaceId ) )//\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"id\", versionMetadata.getVersion() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"description\", versionMetadata.getDescription() ) ) //\n-                .addInsertion( key, //\n-                               cf, //\n-                               CassandraUtils.column( \"name\", versionMetadata.getName() ) ) //\n+                               column( \"repositoryName\", repositoryId ) ) //\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n-                ) //\n+                               column( \"namespaceId\", namespaceId ) )//\n                 .addInsertion( key, //\n                                cf, //\n-                               CassandraUtils.column( \"url\", versionMetadata.getUrl() ) ) //\n-                .execute();\n+                               column( \"id\", versionMetadata.getVersion() ) ); //\n+            if ( versionMetadata.getDescription() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"description\", versionMetadata.getDescription() ) );\n+            }\n+\n+            if ( versionMetadata.getName() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"name\", versionMetadata.getName() ) );\n+            }\n+            mutator = mutator.addInsertion( key, //\n+                                            cf, //\n+                                            column( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) )\n+            );\n+            if ( versionMetadata.getUrl() != null )\n+            {\n+                mutator = mutator.addInsertion( key, //\n+                                                cf, //\n+                                                column( \"url\", versionMetadata.getUrl() ) );\n+            }\n+\n+            mutator.execute();\n         }\n         else\n         {\n@@ -1518,59 +1529,57 @@ public void removeMetadataFacet( final String repositoryId, final String facetId\n \n         Keyspace keyspace = cassandraArchivaManager.getKeyspace();\n \n-        // FIXME cql query to filter in repositoryName column\n-        /*\n-        QueryResult<OrderedRows<String, String, Long>> result = HFactory //\n+        RangeSlicesQuery<String, String, Long> query = HFactory //\n             .createRangeSlicesQuery( keyspace, //\n                                      StringSerializer.get(), //\n                                      StringSerializer.get(), //\n                                      LongSerializer.get() ) //\n-\n             .setColumnFamily( cassandraArchivaManager.getArtifactMetadataModelFamilyName() ) //\n-            .setColumnNames( \"whenGathered\", \"repositoryName\" ) //\n-            .addGteExpression( \"whenGathered\", startTime.getTime() ) //\n-            .addLteExpression( \"whenGathered\", endTime.getTime() )\n-            .execute();\n-        */\n-        StringSerializer ss = StringSerializer.get();\n-        StringBuilder cqlQuery =\n-            new StringBuilder( \"select * from \" + cassandraArchivaManager.getArtifactMetadataModelFamilyName() );\n-        cqlQuery.append( \" where repositoryName = '\" + repositoryId + \"'\" );\n+            .setColumnNames( \"namespaceId\", \"size\", \"id\", \"fileLastModified\", \"md5\", \"project\", \"projectVersion\",\n+                             \"repositoryName\", \"version\", \"whenGathered\", \"sha1\" ); //\n+\n         if ( startTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' >= \" + startTime.getTime() );\n+            query = query.addGteExpression( \"whenGathered\", startTime.getTime() );\n         }\n-\n         if ( endTime != null )\n         {\n-            cqlQuery.append( \" and 'whenGathered' <= \" + endTime.getTime() );\n+            query = query.addLteExpression( \"whenGathered\", endTime.getTime() );\n         }\n-\n-        QueryResult<CqlRows<String, String, String>> result =\n-            new CqlQuery<String, String, String>( keyspace, ss, ss, ss ).setQuery( cqlQuery.toString() ).execute();\n+        QueryResult<OrderedRows<String, String, Long>> result = query.execute();\n \n         List<ArtifactMetadata> artifactMetadatas = new ArrayList<ArtifactMetadata>( result.get().getCount() );\n \n         LongSerializer ls = LongSerializer.get();\n+        StringSerializer ss = StringSerializer.get();\n \n-        for ( Row<String, String, String> row : result.get() )\n+        for ( Row<String, String, Long> row : result.get() )\n         {\n-            ColumnSlice<String, String> columnSlice = row.getColumnSlice();\n-            ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n-            artifactMetadata.setNamespace( columnSlice.getColumnByName( \"namespaceId\" ).getValue() );\n-            artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n-            artifactMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n-            artifactMetadata.setFileLastModified(\n-                ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n-            artifactMetadata.setMd5( columnSlice.getColumnByName( \"md5\" ).getValue() );\n-            artifactMetadata.setProject( columnSlice.getColumnByName( \"project\" ).getValue() );\n-            artifactMetadata.setProjectVersion( columnSlice.getColumnByName( \"projectVersion\" ).getValue() );\n-            artifactMetadata.setRepositoryId( columnSlice.getColumnByName( \"repositoryName\" ).getValue() );\n-            artifactMetadata.setSha1( columnSlice.getColumnByName( \"sha1\" ).getValue() );\n-            artifactMetadata.setVersion( columnSlice.getColumnByName( \"version\" ).getValue() );\n-            artifactMetadata.setWhenGathered(\n-                new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n-            artifactMetadatas.add( artifactMetadata );\n+            ColumnSlice<String, Long> columnSlice = row.getColumnSlice();\n+            String repositoryName =\n+                ss.fromByteBuffer( columnSlice.getColumnByName( \"repositoryName\" ).getValueBytes() );\n+            if ( StringUtils.equals( repositoryName, repositoryId ) )\n+            {\n+                ArtifactMetadata artifactMetadata = new ArtifactMetadata();\n+                artifactMetadata.setNamespace(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"namespaceId\" ).getValueBytes() ) );\n+                artifactMetadata.setSize( ls.fromByteBuffer( columnSlice.getColumnByName( \"size\" ).getValueBytes() ) );\n+                artifactMetadata.setId( ss.fromByteBuffer( columnSlice.getColumnByName( \"id\" ).getValueBytes() ) );\n+                artifactMetadata.setFileLastModified(\n+                    ls.fromByteBuffer( columnSlice.getColumnByName( \"fileLastModified\" ).getValueBytes() ) );\n+                artifactMetadata.setMd5( ss.fromByteBuffer( columnSlice.getColumnByName( \"md5\" ).getValueBytes() ) );\n+                artifactMetadata.setProject(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"project\" ).getValueBytes() ) );\n+                artifactMetadata.setProjectVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"projectVersion\" ).getValueBytes() ) );\n+                artifactMetadata.setRepositoryId( repositoryName );\n+                artifactMetadata.setSha1( ss.fromByteBuffer( columnSlice.getColumnByName( \"sha1\" ).getValueBytes() ) );\n+                artifactMetadata.setVersion(\n+                    ss.fromByteBuffer( columnSlice.getColumnByName( \"version\" ).getValueBytes() ) );\n+                artifactMetadata.setWhenGathered(\n+                    new Date( ls.fromByteBuffer( columnSlice.getColumnByName( \"whenGathered\" ).getValueBytes() ) ) );\n+                artifactMetadatas.add( artifactMetadata );\n+            }\n         }\n \n         return artifactMetadatas;\n@@ -1800,9 +1809,52 @@ public ProjectVersionMetadata getProjectVersion( final String repoId, final Stri\n                                                      final String projectId, final String projectVersion )\n         throws MetadataResolutionException\n     {\n-/*        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n+        String key = new ProjectVersionMetadataModel.KeyBuilder().withRepository( repoId ).withNamespace(\n             namespace ).withProjectId( projectId ).withId( projectVersion ).build();\n \n+        StringSerializer ss = StringSerializer.get();\n+\n+        QueryResult<OrderedRows<String, String, String>> result =\n+            HFactory.createRangeSlicesQuery( cassandraArchivaManager.getKeyspace(), ss, ss, ss ) //\n+                .setColumnFamily( cassandraArchivaManager.getProjectVersionMetadataModelFamilyName() ) //\n+                .setColumnNames( \"id\", \"description\", \"name\", \"namespaceId\", \"repositoryName\", \"incomplete\",\n+                                 \"projectId\", \"url\" ) //\n+                .addEqualsExpression( \"repositoryName\", repoId ) //\n+                .addEqualsExpression( \"namespaceId\", namespace ) //\n+                .addEqualsExpression( \"projectId\", projectId ) //\n+                .addEqualsExpression( \"id\", projectVersion ) //\n+                .execute();\n+        /*\n+        ColumnFamilyResult<String, String> columnFamilyResult =\n+            this.projectVersionMetadataModelTemplate.queryColumns( key, Arrays.asList( \"id\", \"description\", \"name\",\n+                                                                                       \"namespaceId\", \"repositoryName\",\n+                                                                                       \"incomplete\", \"projectId\",\n+                                                                                       \"url\" ) );\n+        if (!columnFamilyResult.hasResults())\n+        {\n+            return null;\n+        }*/\n+\n+        if (result.get().getCount() < 1)\n+        {\n+            return null;\n+        }\n+\n+        Row<String,String,String> row = result.get().getList().get( 0 );\n+\n+        ColumnSlice<String,String> columnSlice = row.getColumnSlice();\n+\n+        ProjectVersionMetadata projectVersionMetadata = new ProjectVersionMetadata();\n+        projectVersionMetadata.setId( columnSlice.getColumnByName( \"id\" ).getValue() );\n+        projectVersionMetadata.setDescription( columnSlice.getColumnByName( \"description\" ).getValue() );\n+        projectVersionMetadata.setName( columnSlice.getColumnByName( \"name\" ).getValue() );\n+\n+        projectVersionMetadata.setIncomplete( Boolean.parseBoolean( columnSlice.getColumnByName( \"incomplete\" ).getValue() ) );\n+\n+        projectVersionMetadata.setUrl( columnSlice.getColumnByName( \"url\" ).getValue() );\n+\n+        /*\n+\n         ProjectVersionMetadataModel projectVersionMetadataModel =\n             getProjectVersionMetadataModelEntityManager().get( key );\n \n@@ -1876,9 +1928,8 @@ public Boolean apply( MetadataFacetModel metadataFacetModel )\n                 }\n             }\n         }\n-\n-        return projectVersionMetadata;*/\n-        return null;\n+        */\n+        return projectVersionMetadata;\n     }\n \n ",
                "raw_url": "https://github.com/apache/archiva/raw/86ad13939a5a2ec9b37ec3e278baaba9d28a8e4a/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "sha": "a5c9e3c51a308868a30f4ad05f188469e4458fa6",
                "status": "modified"
            }
        ],
        "message": "NPE check!\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1579885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/01b3328e2b8ce6de4ec017049143f6882372dec4",
        "repo": "archiva",
        "unit_tests": [
            "CassandraMetadataRepositoryTest.java"
        ]
    },
    "archiva_c6afb27": {
        "bug_id": "archiva_c6afb27",
        "commit": "https://github.com/apache/archiva/commit/c6afb274c0d0680c35e041531b130def0e2da998",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/archiva/blob/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/archiva/contents/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java?ref=c6afb274c0d0680c35e041531b130def0e2da998",
                "deletions": 4,
                "filename": "archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "patch": "@@ -844,11 +844,19 @@ public void updateProjectVersion( String repositoryId, String namespaceId, Strin\n             updater.setString( \"repositoryName\", repositoryId );\n             updater.setString( \"namespaceId\", namespaceId );\n             updater.setString( \"id\", versionMetadata.getVersion() );\n-            updater.setString( \"description\", versionMetadata.getDescription() );\n-            updater.setString( \"name\", versionMetadata.getName() );\n+            if ( StringUtils.isNotEmpty( versionMetadata.getDescription() ) )\n+            {\n+                updater.setString( \"description\", versionMetadata.getDescription() );\n+            }\n+            if ( StringUtils.isNotEmpty( versionMetadata.getName() ) )\n+            {\n+                updater.setString( \"name\", versionMetadata.getName() );\n+            }\n             updater.setString( \"incomplete\", Boolean.toString( versionMetadata.isIncomplete() ) );\n-            updater.setString( \"url\", versionMetadata.getUrl() );\n-\n+            if ( StringUtils.isNotEmpty( versionMetadata.getUrl() ) )\n+            {\n+                updater.setString( \"url\", versionMetadata.getUrl() );\n+            }\n             projectVersionMetadataModelTemplate.update( updater );\n \n         }",
                "raw_url": "https://github.com/apache/archiva/raw/c6afb274c0d0680c35e041531b130def0e2da998/archiva-modules/plugins/metadata-store-cassandra/src/main/java/org/apache/archiva/metadata/repository/cassandra/CassandraMetadataRepository.java",
                "sha": "6eda35d5ef677f204ae098c0e4c7fb168c775cb1",
                "status": "modified"
            }
        ],
        "message": "add NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/archiva/trunk@1580689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/archiva/commit/ba1c2854a0d44df1cc45084b25b4630ce9641d63",
        "repo": "archiva",
        "unit_tests": [
            "CassandraMetadataRepositoryTest.java"
        ]
    }
}