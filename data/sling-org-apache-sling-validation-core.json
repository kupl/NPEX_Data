{
    "sling-org-apache-sling-validation-core_2c87225": {
        "bug_id": "sling-org-apache-sling-validation-core_2c87225",
        "commit": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/2c87225e6b46a424bc3a0052134a08caa52cf2bd",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/pom.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/pom.xml?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -97,7 +97,8 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n-            <version>2.5.0</version>\n+            <!-- for now we should rely on 2.9.0 only (not newer) to stay compatible with older Sling distributions -->\n+            <version>2.9.0</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/pom.xml",
                "sha": "cb5bb940f0d6a9251ab06af6b1fe5af44cd6ab3a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 1,
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "patch": "@@ -76,7 +76,7 @@ protected void visit(Resource resource) {\n      * \n      * @return {@code true} in case the given resource should have its own Sling Validation model\n      */\n-    private boolean isValidSubResource(Resource resource) {\n+    private boolean isValidSubResource(@Nonnull Resource resource) {\n         if (ResourceUtil.isNonExistingResource(resource)) {\n             return false;\n         }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "sha": "cd4113402c30af5aaccf7011dd4e05b1074ed129",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 18,
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "patch": "@@ -64,12 +64,12 @@\n public class ValidationServiceImpl implements ValidationService{\n \n     /** Keys whose values are defined in the JCR resource bundle contained in the content-repository section of this bundle */\n-    protected static final String I18N_KEY_WRONG_PROPERTY_TYPE = \"sling.validator.wrong-property-type\";\n-    protected static final String I18N_KEY_EXPECTED_MULTIVALUE_PROPERTY = \"sling.validator.multi-value-property-required\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_PROPERTY_WITH_NAME = \"sling.validator.missing-required-property-with-name\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_PROPERTY_MATCHING_PATTERN = \"sling.validator.missing-required-property-matching-pattern\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_WITH_NAME = \"sling.validator.missing-required-child-resource-with-name\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_MATCHING_PATTERN = \"sling.validator.missing-required-child-resource-matching-pattern\";\n+    protected static final @Nonnull String I18N_KEY_WRONG_PROPERTY_TYPE = \"sling.validator.wrong-property-type\";\n+    protected static final @Nonnull String I18N_KEY_EXPECTED_MULTIVALUE_PROPERTY = \"sling.validator.multi-value-property-required\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_PROPERTY_WITH_NAME = \"sling.validator.missing-required-property-with-name\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_PROPERTY_MATCHING_PATTERN = \"sling.validator.missing-required-property-matching-pattern\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_WITH_NAME = \"sling.validator.missing-required-child-resource-with-name\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_MATCHING_PATTERN = \"sling.validator.missing-required-child-resource-matching-pattern\";\n \n     private static final Logger LOG = LoggerFactory.getLogger(ValidationServiceImpl.class);\n     \n@@ -132,7 +132,6 @@ public void activate(ValidationServiceConfiguration configuration) {\n      * @return a relative resource type (without the leading search path)\n      * @throws IllegalArgumentException in case the resource type is starting with a \"/\" but not with any of the search paths.\n      */\n-    @SuppressWarnings(\"null\")\n     protected @Nonnull String getRelativeResourceType(@Nonnull String resourceType) throws IllegalArgumentException {\n         if (resourceType.startsWith(\"/\")) {\n             LOG.debug(\"try to strip the search path from the resource type\");\n@@ -150,7 +149,6 @@ public void activate(ValidationServiceConfiguration configuration) {\n         return resourceType;\n     }\n \n-    @SuppressWarnings(\"null\")\n     @Override\n     public @CheckForNull ValidationModel getValidationModel(@Nonnull Resource resource, boolean considerResourceSuperTypeModels) {\n         return getValidationModel(resource.getResourceType(), resource.getPath(), considerResourceSuperTypeModels);\n@@ -208,7 +206,7 @@ public void activate(ValidationServiceConfiguration configuration) {\n      * @param result\n      * @param childResources\n      */\n-    private void validateChildren(Resource resource, String relativePath, Collection<ChildResource> childResources, CompositeValidationResult result,  ResourceBundle defaultResourceBundle) {\n+    private void validateChildren(@Nonnull Resource resource, @Nonnull String relativePath, @Nonnull Collection<ChildResource> childResources, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         // validate children resources, if any\n         for (ChildResource childResource : childResources) {\n             // if a pattern is set we validate all children matching that pattern\n@@ -236,8 +234,8 @@ private void validateChildren(Resource resource, String relativePath, Collection\n         }\n     }\n \n-    private void validateChildResource(Resource resource, String relativePathOfParent, ChildResource childResource, CompositeValidationResult result,  ResourceBundle defaultResourceBundle) {\n-        final String relativePath;\n+    private void validateChildResource(@Nonnull Resource resource, @Nonnull String relativePathOfParent, @Nonnull ChildResource childResource, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n+        final @Nonnull String relativePath;\n         if (relativePathOfParent.isEmpty()) {\n             relativePath = resource.getName();\n         } else {\n@@ -259,15 +257,15 @@ private void validateChildResource(Resource resource, String relativePathOfParen\n     }    \n \n     @Override\n-    public @Nonnull ValidationResult validateResourceRecursively(@Nonnull Resource resource, boolean enforceValidation, Predicate filter, boolean considerResourceSuperTypeModels)\n+    public @Nonnull ValidationResult validateResourceRecursively(@Nonnull Resource resource, boolean enforceValidation, Predicate<Resource> filter, boolean considerResourceSuperTypeModels)\n             throws IllegalStateException, IllegalArgumentException, SlingValidationException {\n         ValidationResourceVisitor visitor = new ValidationResourceVisitor(this, resource.getPath(), enforceValidation, filter, considerResourceSuperTypeModels);\n         visitor.accept(resource);\n         return visitor.getResult();\n     }\n \n-    private void validateValueMap(ValueMap valueMap, Resource resource, String relativePath, Collection<ResourceProperty> resourceProperties,\n-            CompositeValidationResult result, ResourceBundle defaultResourceBundle) {\n+    private void validateValueMap(ValueMap valueMap, Resource resource, @Nonnull String relativePath, @Nonnull Collection<ResourceProperty> resourceProperties,\n+            @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         if (valueMap == null) {\n             throw new IllegalArgumentException(\"ValueMap may not be null\");\n         }\n@@ -290,7 +288,7 @@ private void validateValueMap(ValueMap valueMap, Resource resource, String relat\n         }\n     }\n \n-    private void validatePropertyValue(String property, ValueMap valueMap, Resource resource, String relativePath, ResourceProperty resourceProperty, CompositeValidationResult result, ResourceBundle defaultResourceBundle) {\n+    private void validatePropertyValue(String property, ValueMap valueMap, Resource resource, @Nonnull String relativePath, @Nonnull ResourceProperty resourceProperty, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         Object fieldValues = valueMap.get(property);\n         if (fieldValues == null) {\n             if (resourceProperty.isRequired()) {\n@@ -345,10 +343,9 @@ private void validatePropertyValue(String property, ValueMap valueMap, Resource\n         }\n     }\n     \n-    @SuppressWarnings(\"rawtypes\")\n-    private void validateValue(CompositeValidationResult result, @Nonnull Object value, String property, String relativePath, @Nonnull ValueMap valueMap, Resource resource, ParameterizedValidator validator, ResourceBundle defaultResourceBundle) {\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    private void validateValue(CompositeValidationResult result, @Nonnull Object value, String property, String relativePath, @Nonnull ValueMap valueMap, Resource resource, ParameterizedValidator validator, @Nonnull ResourceBundle defaultResourceBundle) {\n         try {\n-            @SuppressWarnings(\"unchecked\")\n             ValidationContext validationContext = new ValidationContextImpl(relativePath + property, validator.getSeverity(), valueMap, resource, defaultResourceBundle);\n             ValidationResult validatorResult = ((Validator)validator.getValidator()).validate(value, validationContext, validator.getParameters());\n             result.addValidationResult(validatorResult);",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "sha": "7942765a5c9025436c5bd59746c142f1c4f4fd03",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 6,
                "filename": "src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "patch": "@@ -33,7 +33,7 @@\n  */\n public class ChildResourceImpl implements ChildResource {\n \n-    private final String name;\n+    private final @Nonnull String name;\n     private final Pattern namePattern;\n     private final @Nonnull List<ResourceProperty> properties;\n     private final @Nonnull List<ChildResource> children;\n@@ -56,7 +56,7 @@ public ChildResourceImpl(@Nonnull String name, String nameRegex, boolean isRequi\n     }\n \n     @Override\n-    public String getName() {\n+    public @Nonnull String getName() {\n         return name;\n     }\n \n@@ -104,10 +104,7 @@ public boolean equals(Object obj) {\n             return false;\n         if (isRequired != other.isRequired)\n             return false;\n-        if (name == null) {\n-            if (other.name != null)\n-                return false;\n-        } else if (!name.equals(other.name))\n+        if (!name.equals(other.name))\n             return false;\n         if (namePattern == null) {\n             if (other.namePattern != null)",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "sha": "4e1c8583959c0861dbbe1c5dda8265be64829b24",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 2,
                "filename": "src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.sling.validation.impl.model;\n \n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n@@ -42,7 +41,7 @@\n     private final ValidationModel baseModel;\n     private final Map<String, ResourceProperty> resourcePropertiesMap;\n     private final Map<String, ChildResource> childResourceMap;\n-    private final String source;\n+    private final @Nonnull String source;\n     \n     public MergedValidationModel(ValidationModel baseModel, ValidationModel... modelsToMerge) {\n         this.baseModel = baseModel;",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "sha": "b8efc61a031dd041b365625375375cf91112fbe9",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "deletions": 22,
                "filename": "src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "patch": "@@ -41,12 +41,9 @@\n import org.apache.sling.api.resource.ValueMap;\n import org.apache.sling.serviceusermapping.ServiceUserMapped;\n import org.apache.sling.validation.impl.model.ChildResourceImpl;\n-import org.apache.sling.validation.impl.model.ParameterizedValidatorImpl;\n import org.apache.sling.validation.impl.model.ResourcePropertyBuilder;\n-import org.apache.sling.validation.impl.model.ResourcePropertyImpl;\n import org.apache.sling.validation.impl.model.ValidationModelBuilder;\n import org.apache.sling.validation.model.ChildResource;\n-import org.apache.sling.validation.model.ParameterizedValidator;\n import org.apache.sling.validation.model.ResourceProperty;\n import org.apache.sling.validation.model.ValidationModel;\n import org.apache.sling.validation.model.spi.ValidationModelProvider;\n@@ -73,17 +70,17 @@\n     static final String[] TOPICS = { SlingConstants.TOPIC_RESOURCE_REMOVED, SlingConstants.TOPIC_RESOURCE_CHANGED,\n             SlingConstants.TOPIC_RESOURCE_ADDED };\n \n-    public static final String NAME_REGEX = \"nameRegex\";\n-    public static final String CHILDREN = \"children\";\n-    public static final String VALIDATOR_ARGUMENTS = \"validatorArguments\";\n-    public static final String VALIDATORS = \"validators\";\n-    public static final String OPTIONAL = \"optional\";\n-    public static final String PROPERTY_MULTIPLE = \"propertyMultiple\";\n-    public static final String PROPERTIES = \"properties\";\n-    public static final String VALIDATION_MODEL_RESOURCE_TYPE = \"sling/validation/model\";\n-    public static final String APPLICABLE_PATHS = \"applicablePaths\";\n-    public static final String VALIDATED_RESOURCE_TYPE = \"validatedResourceType\";\n-    public static final String SEVERITY = \"severity\";\n+    public static final @Nonnull String NAME_REGEX = \"nameRegex\";\n+    public static final @Nonnull String CHILDREN = \"children\";\n+    public static final @Nonnull String VALIDATOR_ARGUMENTS = \"validatorArguments\";\n+    public static final @Nonnull String VALIDATORS = \"validators\";\n+    public static final @Nonnull String OPTIONAL = \"optional\";\n+    public static final @Nonnull String PROPERTY_MULTIPLE = \"propertyMultiple\";\n+    public static final @Nonnull String PROPERTIES = \"properties\";\n+    public static final @Nonnull String VALIDATION_MODEL_RESOURCE_TYPE = \"sling/validation/model\";\n+    public static final @Nonnull String APPLICABLE_PATHS = \"applicablePaths\";\n+    public static final @Nonnull String VALIDATED_RESOURCE_TYPE = \"validatedResourceType\";\n+    public static final @Nonnull String SEVERITY = \"severity\";\n \n     @Reference\n     ResourceResolverFactory rrf = null;\n@@ -194,16 +191,19 @@ public void handleEvent(Event event) {\n         }\n     }\n \n-    private String getResourceTypeOfValidationModel(String path) throws LoginException {\n+    private String getResourceTypeOfValidationModel(@Nonnull String path) throws LoginException {\n         ResourceResolver resourceResolver = null;\n         try {\n             resourceResolver = rrf.getServiceResourceResolver(null);\n             Resource modelResource = resourceResolver.getResource(path);\n+            if (modelResource == null) {\n+                throw new IllegalStateException(\"Can no longer access resource at \" + path);\n+            }\n             ValueMap properties = modelResource.adaptTo(ValueMap.class);\n             if (properties == null) {\n                 throw new IllegalStateException(\"Could not adapt resource at \" + path + \" to a ValueMap\");\n             }\n-            return properties.get(VALIDATED_RESOURCE_TYPE, null);\n+            return properties.get(VALIDATED_RESOURCE_TYPE, String.class);\n         } finally {\n             if (resourceResolver != null) {\n                 resourceResolver.close();\n@@ -254,7 +254,7 @@ private String getResourceTypeOfValidationModel(String path) throws LoginExcepti\n                     String resourcePath = model.getPath();\n                     try {\n                         ValidationModelBuilder modelBuilder = new ValidationModelBuilder();\n-                        ValueMap validationModelProperties = model.adaptTo(ValueMap.class);\n+                        ValueMap validationModelProperties = model.getValueMap();\n                         modelBuilder.addApplicablePaths(validationModelProperties.get(ResourceValidationModelProviderImpl.APPLICABLE_PATHS, new String[] {}));\n                         Resource propertiesResource = model.getChild(ResourceValidationModelProviderImpl.PROPERTIES);\n                         modelBuilder.resourceProperties(buildProperties(validatorsMap, propertiesResource));\n@@ -292,21 +292,21 @@ private String getResourceTypeOfValidationModel(String path) throws LoginExcepti\n     private @Nonnull List<ResourceProperty> buildProperties(@Nonnull Map<String, Validator<?>> validatorsMap, Resource propertiesResource) {\n         List<ResourceProperty> properties = new ArrayList<ResourceProperty>();\n         if (propertiesResource != null) {\n-            for (Resource property : propertiesResource.getChildren()) {\n+            for (Resource propertyResource : propertiesResource.getChildren()) {\n                 ResourcePropertyBuilder resourcePropertyBuilder = new ResourcePropertyBuilder();\n-                String fieldName = property.getName();\n-                ValueMap propertyValueMap = property.adaptTo(ValueMap.class);\n+                String fieldName = propertyResource.getName();\n+                ValueMap propertyValueMap = propertyResource.getValueMap();\n                 if (propertyValueMap.get(ResourceValidationModelProviderImpl.PROPERTY_MULTIPLE, false)) {\n                     resourcePropertyBuilder.multiple();\n                 }\n                 if (propertyValueMap.get(ResourceValidationModelProviderImpl.OPTIONAL, false)) {\n                     resourcePropertyBuilder.optional();\n                 }\n-                String nameRegex = propertyValueMap.get(ResourceValidationModelProviderImpl.NAME_REGEX, null);\n+                String nameRegex = propertyValueMap.get(ResourceValidationModelProviderImpl.NAME_REGEX, String.class);\n                 if (nameRegex != null) {\n                     resourcePropertyBuilder.nameRegex(nameRegex);\n                 }\n-                Resource validators = property.getChild(ResourceValidationModelProviderImpl.VALIDATORS);\n+                Resource validators = propertyResource.getChild(ResourceValidationModelProviderImpl.VALIDATORS);\n                 if (validators != null) {\n                     Iterator<Resource> validatorsIterator = validators.listChildren();\n                     while (validatorsIterator.hasNext()) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "sha": "1238982b585802a04e76ef5d037b0b74ac560ef1",
                "status": "modified"
            }
        ],
        "message": "upgrade to Sling API 2.9.0 to leverage JSR 305 annotations fully\n\nfix some potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1785540 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/93f783e9f63af0e078f460e029dee5bfdb301396",
        "repo": "sling-org-apache-sling-validation-core",
        "unit_tests": [
            "ResourceValidationModelProviderImplTest.java"
        ]
    }
}