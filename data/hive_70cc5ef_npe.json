[
    {
        "repo": "hive",
        "commit": "https://github.com/apache/hive/commit/70cc5eface64b5417916e42312befc022f4a06c0",
        "bug_id": "hive_70cc5ef",
        "message": "HIVE-15275 \"beeline -f <file>\" will throw NPE (Aihua Xu, reviewed by Vihang Karajgaonkar, Yongzhi Chen)",
        "parent": "https://github.com/apache/hive/commit/1a39cbfcaeda4392e231b70afa343f2862e91f26",
        "patched_files": [
            "BeeLine.java",
            "HiveCli.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 62,
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/BeeLine.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "filename": "beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "deletions": 93,
                "sha": "65818dd48fa91b7cac2d3c07a3caa082b78e6365",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/BeeLine.java",
                "patch": "@@ -23,12 +23,10 @@\n package org.apache.hive.beeline;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n import java.io.EOFException;\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n@@ -80,7 +78,6 @@\n import jline.console.completer.StringsCompleter;\n import jline.console.completer.FileNameCompleter;\n import jline.console.ConsoleReader;\n-import jline.console.history.History;\n import jline.console.history.FileHistory;\n \n import org.apache.commons.cli.CommandLine;\n@@ -146,7 +143,7 @@\n   private String dbName = null;\n   private String currentDatabase = null;\n \n-  private History history;\n+  private FileHistory history;\n   // Indicates if this instance of beeline is running in compatibility mode, or beeline mode\n   private boolean isBeeLine = true;\n \n@@ -517,14 +514,17 @@ public static void main(String[] args) throws IOException {\n   public static void mainWithInputRedirection(String[] args, InputStream inputStream)\n       throws IOException {\n     BeeLine beeLine = new BeeLine();\n-    int status = beeLine.begin(args, inputStream);\n+    try {\n+      int status = beeLine.begin(args, inputStream);\n \n-    if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {\n-        System.exit(status);\n+      if (!Boolean.getBoolean(BeeLineOpts.PROPERTY_NAME_EXIT)) {\n+          System.exit(status);\n+      }\n+    } finally {\n+      beeLine.close();\n     }\n   }\n \n-\n   public BeeLine() {\n     this(true);\n   }\n@@ -539,12 +539,11 @@ DatabaseConnection getDatabaseConnection() {\n \n \n   Connection getConnection() throws SQLException {\n-    if (getDatabaseConnections().current() == null) {\n-      throw new IllegalArgumentException(loc(\"no-current-connection\"));\n-    }\n-    if (getDatabaseConnections().current().getConnection() == null) {\n+    if (getDatabaseConnections().current() == null\n+        || getDatabaseConnections().current().getConnection() == null) {\n       throw new IllegalArgumentException(loc(\"no-current-connection\"));\n     }\n+\n     return getDatabaseConnections().current().getConnection();\n   }\n \n@@ -983,38 +982,36 @@ public int begin(String[] args, InputStream inputStream) throws IOException {\n       // nothing\n     }\n \n-    try {\n-      //this method also initializes the consoleReader which is\n-      //needed by initArgs for certain execution paths\n-      ConsoleReader reader = initializeConsoleReader(inputStream);\n-      if (isBeeLine) {\n-        int code = initArgs(args);\n-        if (code != 0) {\n-          return code;\n-        }\n-      } else {\n-        int code = initArgsFromCliVars(args);\n-        if (code != 0 || exit) {\n-          return code;\n-        }\n-        defaultConnect(false);\n-      }\n+    setupHistory();\n \n-      if (getOpts().isHelpAsked()) {\n-        return 0;\n-      }\n-      if (getOpts().getScriptFile() != null) {\n-        return executeFile(getOpts().getScriptFile());\n+    //this method also initializes the consoleReader which is\n+    //needed by initArgs for certain execution paths\n+    ConsoleReader reader = initializeConsoleReader(inputStream);\n+    if (isBeeLine) {\n+      int code = initArgs(args);\n+      if (code != 0) {\n+        return code;\n       }\n-      try {\n-        info(getApplicationTitle());\n-      } catch (Exception e) {\n-        // ignore\n+    } else {\n+      int code = initArgsFromCliVars(args);\n+      if (code != 0 || exit) {\n+        return code;\n       }\n-      return execute(reader, false);\n-    } finally {\n-        close();\n+      defaultConnect(false);\n+    }\n+\n+    if (getOpts().isHelpAsked()) {\n+      return 0;\n     }\n+    if (getOpts().getScriptFile() != null) {\n+      return executeFile(getOpts().getScriptFile());\n+    }\n+    try {\n+      info(getApplicationTitle());\n+    } catch (Exception e) {\n+      // ignore\n+    }\n+    return execute(reader, false);\n   }\n \n   /*\n@@ -1120,7 +1117,7 @@ public int defaultConnect(boolean exitOnError) {\n   }\n \n   private int executeFile(String fileName) {\n-    InputStream initStream = null;\n+    InputStream fileStream = null;\n     try {\n       if (!isBeeLine) {\n         org.apache.hadoop.fs.Path path = new org.apache.hadoop.fs.Path(fileName);\n@@ -1132,17 +1129,16 @@ private int executeFile(String fileName) {\n         } else {\n           fs = FileSystem.get(path.toUri(), conf);\n         }\n-        initStream = fs.open(path);\n+        fileStream = fs.open(path);\n       } else {\n-        initStream = new FileInputStream(fileName);\n+        fileStream = new FileInputStream(fileName);\n       }\n-      return execute(initializeConsoleReader(initStream), !getOpts().getForce());\n+      return execute(initializeConsoleReader(fileStream), !getOpts().getForce());\n     } catch (Throwable t) {\n       handleException(t);\n       return ERRNO_OTHER;\n     } finally {\n-      IOUtils.closeStream(initStream);\n-      consoleReader = null;\n+      IOUtils.closeStream(fileStream);\n       output(\"\");   // dummy new line\n     }\n   }\n@@ -1181,6 +1177,25 @@ public void close() {\n     commands.closeall(null);\n   }\n \n+  private void setupHistory() throws IOException {\n+    if (this.history != null) {\n+       return;\n+    }\n+\n+    this.history = new FileHistory(new File(getOpts().getHistoryFile()));\n+    // add shutdown hook to flush the history to history file\n+    ShutdownHookManager.addShutdownHook(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          history.flush();\n+        } catch (IOException e) {\n+          error(e);\n+        }\n+      }\n+    });\n+  }\n+\n   public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOException {\n     if (inputStream != null) {\n       // ### NOTE: fix for sf.net bug 879425.\n@@ -1197,29 +1212,9 @@ public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOE\n     //disable the expandEvents for the purpose of backward compatibility\n     consoleReader.setExpandEvents(false);\n \n-    // setup history\n-    ByteArrayOutputStream hist = new ByteArrayOutputStream();\n-    if (new File(getOpts().getHistoryFile()).isFile()) {\n-      try {\n-        // save the current contents of the history buffer. This gets\n-        // around a bug in JLine where setting the output before the\n-        // input will clobber the history input, but setting the\n-        // input before the output will cause the previous commands\n-        // to not be saved to the buffer.\n-        try (FileInputStream historyIn = new FileInputStream(getOpts().getHistoryFile())) {\n-          int n;\n-          while ((n = historyIn.read()) != -1) {\n-            hist.write(n);\n-          }\n-        }\n-      } catch (Exception e) {\n-        handleException(e);\n-      }\n-    }\n-\n     try {\n       // now set the output for the history\n-      consoleReader.setHistory(new FileHistory(new File(getOpts().getHistoryFile())));\n+      consoleReader.setHistory(this.history);\n     } catch (Exception e) {\n       handleException(e);\n     }\n@@ -1228,32 +1223,6 @@ public ConsoleReader initializeConsoleReader(InputStream inputStream) throws IOE\n       // from script.. no need to load history and no need of completer, either\n       return consoleReader;\n     }\n-    try {\n-      // now load in the previous history\n-      if (hist != null) {\n-        History h = consoleReader.getHistory();\n-        if (!(h instanceof FileHistory)) {\n-          consoleReader.getHistory().add(hist.toString());\n-        }\n-      }\n-    } catch (Exception e) {\n-        handleException(e);\n-    }\n-\n-    // add shutdown hook to flush the history to history file\n-    ShutdownHookManager.addShutdownHook(new Runnable() {\n-        @Override\n-        public void run() {\n-            History h = consoleReader.getHistory();\n-            if (h instanceof FileHistory) {\n-                try {\n-                    ((FileHistory) h).flush();\n-                } catch (IOException e) {\n-                    error(e);\n-                }\n-            }\n-        }\n-    });\n \n     consoleReader.addCompleter(new BeeLineCompleter(this));\n     return consoleReader;",
                "changes": 155
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "filename": "beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "deletions": 1,
                "sha": "13fea293eb9df66d61cfd2fdf1a0c0626a571e1b",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java",
                "patch": "@@ -32,6 +32,10 @@ public static void main(String[] args) throws IOException {\n \n   public int runWithArgs(String[] cmd, InputStream inputStream) throws IOException {\n     beeLine = new BeeLine(false);\n-    return beeLine.begin(cmd, inputStream);\n+    try {\n+      return beeLine.begin(cmd, inputStream);\n+    } finally {\n+      beeLine.close();\n+    }\n   }\n }",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/hive/raw/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java?ref=70cc5eface64b5417916e42312befc022f4a06c0",
                "filename": "beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "deletions": 1,
                "sha": "623e667b3cc588d6ada5432e87e23f5ab48c59b8",
                "blob_url": "https://github.com/apache/hive/blob/70cc5eface64b5417916e42312befc022f4a06c0/beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.File;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n+import java.lang.reflect.Method;\n \n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -58,11 +59,14 @@ public void testNumHistories() throws Exception {\n     BeeLine beeline = new BeeLine();\n     beeline.getOpts().setHistoryFile(fileName);\n     beeline.setOutputStream(ops);\n+    Method method = beeline.getClass().getDeclaredMethod(\"setupHistory\");\n+    method.setAccessible(true);\n+    method.invoke(beeline);\n     beeline.initializeConsoleReader(null);\n     beeline.dispatch(\"!history\");\n     String output = os.toString(\"UTF-8\");\n     int numHistories = output.split(\"\\n\").length;\n-    Assert.assertEquals(numHistories, 10);\n+    Assert.assertEquals(10, numHistories);\n     beeline.close();\n   }\n \n@@ -73,6 +77,9 @@ public void testHistory() throws Exception {\n     BeeLine beeline = new BeeLine();\n     beeline.getOpts().setHistoryFile(fileName);\n     beeline.setOutputStream(ops);\n+    Method method = beeline.getClass().getDeclaredMethod(\"setupHistory\");\n+    method.setAccessible(true);\n+    method.invoke(beeline);\n     beeline.initializeConsoleReader(null);\n     beeline.dispatch(\"!history\");\n     String output = os.toString(\"UTF-8\");",
                "changes": 9
            }
        ],
        "unit_tests": [
            "TestBeeLineHistory.java",
            "TestHiveCli.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "beeline/src/test/org/apache/hive/beeline/TestBeeLineHistory.java",
        "buggy_files": [
            "beeline/src/java/org/apache/hive/beeline/BeeLine.java",
            "beeline/src/java/org/apache/hive/beeline/cli/HiveCli.java"
        ],
        "fixed": true
    }
]