[
    {
        "repo": "logging-log4j2",
        "commit": "https://github.com/apache/logging-log4j2/commit/2d266d98b8cb01885691b6c6b8f4018936644973",
        "bug_id": "logging-log4j2_2d266d9",
        "message": "[LOG4J2-1740] Add CronTriggeringPolicy programmatically leads to NPE.",
        "parent": "https://github.com/apache/logging-log4j2/commit/7441d3c3cc57130a56535dbbd15a5d819f0a3834",
        "patched_files": [
            "CronTriggeringPolicy.java",
            "changes.xml",
            "ConfigurationScheduler.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "deletions": 0,
                "sha": "e5a19a1b9738f05909014ff43421724dc6f845d1",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "patch": "@@ -76,6 +76,10 @@ public void initialize(final RollingFileManager aManager) {\n         if (!scheduler.isStarted()) {\n             scheduler.incrementScheduledItems();\n             scheduler.start();\n+        } else if (scheduler.isStarted()) {\n+            // make sure we have a thread pool\n+            scheduler.incrementScheduledItems();\n+            scheduler.initScheduledExecutorService();\n         }\n         future = scheduler.scheduleWithCron(cronExpression, new CronTrigger());\n     }",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "deletions": 1,
                "sha": "f847acec19d9f70653f39a8d614eee665c421ff2",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "patch": "@@ -41,6 +41,10 @@\n     @Override\n     public void start() {\n         super.start();\n+        initScheduledExecutorService();\n+    }\n+\n+    public void initScheduledExecutorService() {\n         if (scheduledItems > 0) {\n             LOGGER.debug(\"{} starting {} threads\", SIMPLE_NAME, scheduledItems);\n             scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);\n@@ -66,7 +70,7 @@ public boolean stop(final long timeout, final TimeUnit timeUnit) {\n      * Increment the number of threads in the pool.\n      */\n     public void incrementScheduledItems() {\n-        if (!isStarted()) {\n+        if (executorService == null) {\n             ++scheduledItems;\n         } else {\n             LOGGER.error(\"{} attempted to increment scheduled items after start\", SIMPLE_NAME);",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 140,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "deletions": 108,
                "sha": "ba20a02f6ba83d889242c871b4784a59db2172cf",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "patch": "@@ -1,108 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements. See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache license, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License. You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the license for the specific language governing permissions and\r\n- * limitations under the license.\r\n- */\r\n-\r\n-package org.apache.logging.log4j.core.appender.rolling;\r\n-\r\n-import org.apache.logging.log4j.core.appender.RollingFileAppender;\r\n-import org.apache.logging.log4j.core.config.NullConfiguration;\r\n-import org.apache.logging.log4j.core.layout.PatternLayout;\r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-public class CronTriggeringPolicyTest {\r\n-\r\n-    private static final String FILE_PATTERN = \"testcmd.log.%d{yyyy-MM-dd}\";\r\n-    private static final String FILE_NAME = \"testcmd.log\";\r\n-    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\r\n-    \r\n-    private NullConfiguration configuration;\r\n-\r\n-    @Before\r\n-    public void before() {\r\n-        configuration = new NullConfiguration();\r\n-    }\r\n-\r\n-    private CronTriggeringPolicy createPolicy() {\r\n-        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\r\n-    }\r\n-\r\n-    private DefaultRolloverStrategy createStrategy() {\r\n-        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\r\n-    }\r\n-\r\n-    private void testBuilder() {\r\n-        // @formatter:off\r\n-        final RollingFileAppender raf = RollingFileAppender.newBuilder()\r\n-            .withName(\"test\")\r\n-            .withFileName(FILE_NAME)\r\n-            .withFilePattern(FILE_PATTERN)\r\n-            .withPolicy(createPolicy())\r\n-            .withStrategy(createStrategy())\r\n-            .setConfiguration(configuration)\r\n-            .build();\r\n-        // @formatter:on\r\n-        Assert.assertNotNull(raf);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderOnce() {\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderSequence() {\r\n-        testBuilder();\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    private void testFactoryMethod() {\r\n-        final CronTriggeringPolicy triggerPolicy = createPolicy();\r\n-        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\r\n-\r\n-        try (RollingFileManager fileManager = RollingFileManager.getFileManager(FILE_NAME,\r\n-                FILE_PATTERN, true, true, triggerPolicy, rolloverStrategy, null,\r\n-                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\r\n-            // trigger rollover\r\n-            fileManager.initialize();\r\n-            fileManager.rollover();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testFactoryMethodOnce() {\r\n-        testFactoryMethod();\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testFactoryMethodSequence() {\r\n-        testFactoryMethod();\r\n-        testFactoryMethod();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.appender.rolling;\n+\n+import org.apache.logging.log4j.core.appender.RollingFileAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.logging.log4j.core.config.NullConfiguration;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.logging.log4j.junit.CleanFiles;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class CronTriggeringPolicyTest {\n+\n+    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\n+    \n+    private NullConfiguration configuration;\n+\n+//    @Rule\n+//    public CleanFiles files = new CleanFiles(\"testcmd1.log\");\n+\n+    @Before\n+    public void before() {\n+        configuration = new NullConfiguration();\n+    }\n+\n+    private CronTriggeringPolicy createPolicy() {\n+        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\n+    }\n+\n+    private DefaultRolloverStrategy createStrategy() {\n+        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\n+    }\n+\n+    private void testBuilder() {\n+        // @formatter:off\n+        final RollingFileAppender raf = RollingFileAppender.newBuilder()\n+            .withName(\"test1\")\n+            .withFileName(\"testcmd1.log\")\n+            .withFilePattern(\"testcmd1.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+        Assert.assertNotNull(raf);\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderOnce() {\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testLoggerContextAndBuilder() {\n+        Configurator.initialize(configuration);\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testRollingRandomAccessFileAppender() {\n+        // @formatter:off\n+        RollingRandomAccessFileAppender.newBuilder()\n+            .withName(\"test2\")\n+            .withFileName(\"testcmd2.log\")\n+            .withFilePattern(\"testcmd2.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    \n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderSequence() {\n+        testBuilder();\n+        testBuilder();\n+    }\n+\n+    private void testFactoryMethod() {\n+        final CronTriggeringPolicy triggerPolicy = createPolicy();\n+        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\n+\n+        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd3.log\",\n+                \"testcmd3.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\n+                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\n+            // trigger rollover\n+            fileManager.initialize();\n+            fileManager.rollover();\n+        }\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testFactoryMethodOnce() {\n+        testFactoryMethod();\n+    }\n+\n+    @Test\n+    public void testFactoryMethodSequence() {\n+        testFactoryMethod();\n+        testFactoryMethod();\n+    }\n+}",
                "changes": 248
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "filename": "src/changes/changes.xml",
                "deletions": 0,
                "sha": "d3e42a62f234f4cd22c53bf12156025d8be5359a",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "patch": "@@ -162,6 +162,9 @@\n       <action issue=\"LOG4J2-1736\" dev=\"ggregory\" type=\"fix\">\n         TcpSocketManagerFactory might leak Sockets when certain startup errors occur.\n       </action>\n+      <action issue=\"LOG4J2-1740\" dev=\"ggregory\" type=\"fix\">\n+        Add CronTriggeringPolicy programmatically leads to NPE.\n+      </action>     \n       <action issue=\"LOG4J2-1644\" dev=\"ggregory\" type=\"update\" due-to=\"Tim Gokcen, Pavel Sivolobtchik\">\n         Inefficient locking in AbstractLoggerAdapter.\n       </action>",
                "changes": 3
            }
        ],
        "unit_tests": [
            "CronTriggeringPolicyTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
        "buggy_files": [
            "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
            "src/changes/changes.xml",
            "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java"
        ],
        "fixed": true
    }
]