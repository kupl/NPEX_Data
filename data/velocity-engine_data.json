[{"commit": "https://github.com/apache/velocity-engine/commit/683680d0fc0412e21d006b7d98300795ad2d861a", "parent": "https://github.com/apache/velocity-engine/commit/f2188514ee68cbbc0ad2b18df847f327e0ae74fc", "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@1835855 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_1", "file": [{"additions": 9, "raw_url": "https://github.com/apache/velocity-engine/raw/683680d0fc0412e21d006b7d98300795ad2d861a/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTText.java", "blob_url": "https://github.com/apache/velocity-engine/blob/683680d0fc0412e21d006b7d98300795ad2d861a/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTText.java", "sha": "ef577dc0c1407cf7ef34c40a935f9af966e682e9", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTText.java?ref=683680d0fc0412e21d006b7d98300795ad2d861a", "patch": "@@ -69,6 +69,15 @@ public void setCtext(String ctext)\n         this.ctext = ctext;\n     }\n \n+    /**\n+     * text getter\n+     * @return literal representation\n+     */\n+    public String literal()\n+    {\n+        return ctext;\n+    }\n+    \n     /**\n      * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)\n      */", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTText.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/94750641ea9612775ee5cc35efa64dd95abd36da", "parent": "https://github.com/apache/velocity-engine/commit/7a97bf74225101e1925021b4217643dc94596a15", "message": "NPE checking\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@73955 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_2", "file": [{"additions": 15, "raw_url": "https://github.com/apache/velocity-engine/raw/94750641ea9612775ee5cc35efa64dd95abd36da/src/java/org/apache/velocity/Context.java", "blob_url": "https://github.com/apache/velocity-engine/blob/94750641ea9612775ee5cc35efa64dd95abd36da/src/java/org/apache/velocity/Context.java", "sha": "b63a5a4bf31dbbff4d84177de69fb107d90d85de", "changes": 16, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/Context.java?ref=94750641ea9612775ee5cc35efa64dd95abd36da", "patch": "@@ -69,7 +69,7 @@\n  * are stored in a Hashtable. \n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Id: Context.java,v 1.10 2000/12/13 01:52:19 geirm Exp $\n+ * @version $Id: Context.java,v 1.11 2000/12/18 03:52:33 jon Exp $\n  */\n public class Context extends InternalContext implements Cloneable\n {\n@@ -93,7 +93,12 @@ public Context()\n      * @param value The corresponding value.\n      */\n     public void put(String key, Object value)\n+        throws Exception\n     {\n+        if (key == null)\n+            throw new Exception (\"Context key was null! Value was: \" + value);\n+        else if (value == null)\n+            throw new Exception (\"Context value was null! Key was: \" + key);\n         context.put(key, value);\n     }\n \n@@ -104,7 +109,10 @@ public void put(String key, Object value)\n      * @return    The value corresponding to the provided key.\n      */\n     public Object get(String key)\n+        throws Exception\n     {\n+        if (key == null)\n+            throw new Exception (\"Context key was null!\");\n         return context.get(key);\n     }        \n \n@@ -115,7 +123,10 @@ public Object get(String key)\n      * @return    Whether the key is in the context.\n      */\n     public boolean containsKey(Object key)\n+        throws Exception\n     {\n+        if (key == null)\n+            throw new Exception (\"Context key was null!\");\n         return context.containsKey(key);\n     }        \n \n@@ -135,7 +146,10 @@ public boolean containsKey(Object key)\n      *            if unmapped.\n      */\n     public Object remove(Object key)\n+        throws Exception\n     {\n+        if (key == null)\n+            throw new Exception (\"Context key was null!\");\n         return context.remove(key);\n     }        \n ", "filename": "src/java/org/apache/velocity/Context.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3", "parent": "https://github.com/apache/velocity-engine/commit/6781b2b2d805f59305af1a812729b9c8baeba445", "message": "VELOCITY-675 fix NPE from #@foo (thx to Jarkko Viinamaki)\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@736677 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/velocity-engine/raw/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/changes/changes.xml", "blob_url": "https://github.com/apache/velocity-engine/blob/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/changes/changes.xml", "sha": "83aa701376a012c4ff366d1dd1415442a3aadbf3", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/changes/changes.xml?ref=6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3", "patch": "@@ -27,6 +27,10 @@\n   <body>\n     <release version=\"1.7\" date=\"In Subversion\">\n \n+      <action type=\"fix\" dev=\"nbubna\" issue=\"VELOCITY-675\" due-to=\"Jarkko Viinam\u00e4ki\">\n+        Fix NPE caused by #@foo (w/o #end) in template.\n+      </action>\n+\n       <action type=\"add\" dev=\"byron\" issue=\"VELOCITY-668\" due-to=\"Jarkko Viinam\u00e4ki\">\n \tMinor performance tweaks based on Findbugs findings\n       </action>", "filename": "src/changes/changes.xml"}, {"additions": 22, "raw_url": "https://github.com/apache/velocity-engine/raw/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/java/org/apache/velocity/runtime/parser/node/ASTDirective.java", "blob_url": "https://github.com/apache/velocity-engine/blob/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/java/org/apache/velocity/runtime/parser/node/ASTDirective.java", "sha": "74727729cf2ed484ab4bee466d66cbef3b43ab7f", "changes": 35, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTDirective.java?ref=6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3", "patch": "@@ -127,25 +127,34 @@ public synchronized Object init( InternalContextAdapter context, Object data)\n             }\n             else if( directiveName.startsWith(\"@\") )\n             {\n-                // block macro call (normal macro call but has AST body)\n-                directiveName = directiveName.substring(1);\n-\n-                directive = new BlockMacro(directiveName);\n-                directive.setLocation(getLine(), getColumn(), getTemplateName());\n-\n-                try\n-                {\n-                    directive.init( rsvc, context, this );\n-                }\n-                catch (TemplateInitException die)\n+                if( this.jjtGetNumChildren() > 0 )\n                 {\n-                    throw new TemplateInitException(die.getMessage(),\n+                    // block macro call (normal macro call but has AST body)\n+                    directiveName = directiveName.substring(1);\n+\n+                    directive = new BlockMacro(directiveName);\n+                    directive.setLocation(getLine(), getColumn(), getTemplateName());\n+\n+                    try\n+                    {\n+                        directive.init( rsvc, context, this );\n+                    }\n+                    catch (TemplateInitException die)\n+                    {\n+                        throw new TemplateInitException(die.getMessage(),\n                             (ParseException) die.getWrappedThrowable(),\n                             die.getTemplateName(),\n                             die.getColumnNumber() + getColumn(),\n                             die.getLineNumber() + getLine());\n+                    }\n+                    isDirective = true;\n+                }\n+                else\n+                {\n+                    // this is a fake block macro call without a body. e.g. #@foo\n+                    // just render as it is\n+                    isDirective = false;\n                 }\n-                isDirective = true;\n             }\n             else\n             {", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTDirective.java"}, {"additions": 5, "raw_url": "https://github.com/apache/velocity-engine/raw/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/test/org/apache/velocity/test/BlockMacroTestCase.java", "blob_url": "https://github.com/apache/velocity-engine/blob/6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3/src/test/org/apache/velocity/test/BlockMacroTestCase.java", "sha": "b731a989fbf338a443fea8aaf0d5b846aaf68be5", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/test/org/apache/velocity/test/BlockMacroTestCase.java?ref=6219fb3e1aa4a70d7de1ddd65882eff0e50e96d3", "patch": "@@ -92,4 +92,9 @@ public void testVelocity671() throws Exception\n         assertEvalEquals(result, template);\n     }\n \n+    public void testVelocity675() throws Exception\n+    {\n+        assertEvalEquals(\"#@foo\", \"#@foo\"); \n+    }\n+\n }", "filename": "src/test/org/apache/velocity/test/BlockMacroTestCase.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/6f452fecedc231d92149ade64f06a75022385f80", "parent": "https://github.com/apache/velocity-engine/commit/97ce8cc674726c08bf6a0cc99a427b0a38c3c4c4", "message": "VELOCITY-671 BlockMacro NPE test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@736219 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/6f452fecedc231d92149ade64f06a75022385f80/src/test/org/apache/velocity/test/BlockMacroTestCase.java", "blob_url": "https://github.com/apache/velocity-engine/blob/6f452fecedc231d92149ade64f06a75022385f80/src/test/org/apache/velocity/test/BlockMacroTestCase.java", "sha": "e343f38c2808b235af908a92878651c2906b0e06", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/test/org/apache/velocity/test/BlockMacroTestCase.java?ref=6f452fecedc231d92149ade64f06a75022385f80", "patch": "@@ -43,6 +43,12 @@ public BlockMacroTestCase(String name)\n         // DEBUG = true;\n     }\n \n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        //engine.setProperty(RuntimeConstants.VM_PERM_INLINE_LOCAL, Boolean.TRUE);\n+    }\n+    \n     public void testMultipleBodyContentIncludes() throws Exception\n     {\n         String template = \"#macro(foo $txt) Yeah, $txt! $bodyContent $bodyContent#end #@foo(\\\"woohoo\\\")jee#end\";", "filename": "src/test/org/apache/velocity/test/BlockMacroTestCase.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/b49677ce81dda91f0152f56395118dd5fb55e28f", "parent": "https://github.com/apache/velocity-engine/commit/31fa94636ab8913b2de700c24ccc0aacfb0c2e8b", "message": "Fix a NPE when the timestamp column is null.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/engine/trunk@447049 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_5", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/b49677ce81dda91f0152f56395118dd5fb55e28f/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java", "blob_url": "https://github.com/apache/velocity-engine/blob/b49677ce81dda91f0152f56395118dd5fb55e28f/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java", "sha": "e0db10ce1bb68423df424d3b493746e12c0f85ea", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java?ref=b49677ce81dda91f0152f56395118dd5fb55e28f", "patch": "@@ -22,6 +22,7 @@\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n+import java.sql.Timestamp;\n \n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n@@ -118,6 +119,7 @@\n  * @author <a href=\"mailto:david.kinnvall@alertir.com\">David Kinnvall</a>\n  * @author <a href=\"mailto:paulo.gaspar@krankikom.de\">Paulo Gaspar</a>\n  * @author <a href=\"mailto:lachiewicz@plusnet.pl\">Sylwester Lachiewicz</a>\n+ * @author <a href=\"mailto:henning@apache.org\">Henning P. Schmiedehausen</a>\n  * @version $Id$\n  */\n public class DataSourceResourceLoader extends ResourceLoader\n@@ -147,8 +149,9 @@ public void init(ExtendedProperties configuration)\n                  log.debug(\"DataSourceResourceLoader : using columns \\\"\"\n                           + keyColumn + \"\\\", \\\"\" + templateColumn + \"\\\" and \\\"\"\n                           + timestampColumn + \"\\\"\");\n-                 log.trace(\"DataSourceResourceLoader initalized.\");\n              }\n+\n+             log.trace(\"DataSourceResourceLoader initalized.\");\n          } \n          else if (dataSourceName != null) \n          {\n@@ -159,8 +162,9 @@ else if (dataSourceName != null)\n                  log.debug(\"DataSourceResourceLoader : using columns \\\"\"\n                           + keyColumn + \"\\\", \\\"\" + templateColumn + \"\\\" and \\\"\"\n                           + timestampColumn + \"\\\"\");\n-                 log.trace(\"DataSourceResourceLoader initalized.\");\n               }\n+\n+             log.trace(\"DataSourceResourceLoader initalized.\");\n          } \n          else \n          {\n@@ -292,7 +296,8 @@ private long readLastModified(Resource resource, String i_operation)\n                  {\n                      if (rs.next())\n                      {\n-                         return rs.getTimestamp(timestampColumn).getTime();\n+                \t Timestamp ts = rs.getTimestamp(timestampColumn); \n+                         return ts != null ? ts.getTime() : 0;\n                      }\n                      else\n                      {", "filename": "src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/4cadb990a01b160bc7001e952a2df3c2991d1bf4", "parent": "https://github.com/apache/velocity-engine/commit/fbf9e50466f408e9b311bf11970d90a7b0810a5d", "message": "Fix a theoretical NPE. Suggested by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/engine/trunk@446845 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_6", "file": [{"additions": 16, "raw_url": "https://github.com/apache/velocity-engine/raw/4cadb990a01b160bc7001e952a2df3c2991d1bf4/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java", "blob_url": "https://github.com/apache/velocity-engine/blob/4cadb990a01b160bc7001e952a2df3c2991d1bf4/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java", "sha": "b3b732560bbf78e41bf9ec6bc5fa653744b9746a", "changes": 30, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java?ref=4cadb990a01b160bc7001e952a2df3c2991d1bf4", "patch": "@@ -408,23 +408,25 @@ private void setup()\n                     /*\n                      * sanity check\n                      */\n-\n-                    if ( nodeTree != null && nodeTree.getType() != type )\n+                    if ( nodeTree != null)\n                     {\n-                        log.error(\"VMProxyArg.setup() : programmer error : type doesn't match node type.\");\n-                    }\n+                \tif(nodeTree.getType() != type)\n+                \t{\n+                \t    log.error(\"VMProxyArg.setup() : programmer error : type doesn't match node type.\");\n+                \t}\n \n-                    /*\n-                     *  init.  be a good citizen and give it an ICA\n-                     */\n+                \t/*\n+                \t *  init.  be a good citizen and give it an ICA\n+                \t */\n \n-                    InternalContextAdapter ica\n-                            = new InternalContextAdapterImpl(new VelocityContext());\n+                \tInternalContextAdapter ica\n+                \t\t= new InternalContextAdapterImpl(new VelocityContext());\n \n-                    ica.pushCurrentTemplateName(\"VMProxyArg : \"\n-                            + ParserTreeConstants.jjtNodeName[type]);\n+                \tica.pushCurrentTemplateName(\"VMProxyArg : \"\n+                \t\t+ ParserTreeConstants.jjtNodeName[type]);\n \n-                    nodeTree.init(ica, rsvc);\n+                \tnodeTree.init(ica, rsvc);\n+                    }\n                 } \n                 /**\n                  * pass through application level runtime exceptions\n@@ -445,14 +447,14 @@ private void setup()\n             case ParserTreeConstants.JJTTRUE :\n             {\n                 constant = true;\n-                staticObject = new  Boolean(true);\n+                staticObject = Boolean.TRUE;\n                 break;\n             }\n \n             case ParserTreeConstants.JJTFALSE :\n             {\n                 constant = true;\n-                staticObject =  new Boolean(false);\n+                staticObject =  Boolean.FALSE;\n                 break;\n             }\n ", "filename": "src/java/org/apache/velocity/runtime/directive/VMProxyArg.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/fb578af973b2dedc594c71a983d79e0fd61a2aa3", "parent": "https://github.com/apache/velocity-engine/commit/c59329057ce4992e3d801cfd77a0f2e70b068775", "message": "prevent potential NPE when evaluating references\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/engine/trunk@373415 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_7", "file": [{"additions": 3, "raw_url": "https://github.com/apache/velocity-engine/raw/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/runtime/parser/node/ASTIdentifier.java", "blob_url": "https://github.com/apache/velocity-engine/blob/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/runtime/parser/node/ASTIdentifier.java", "sha": "96fd7ba881f2b489f069325c576274ef38b2e387", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTIdentifier.java?ref=fb578af973b2dedc594c71a983d79e0fd61a2aa3", "patch": "@@ -96,8 +96,6 @@ public Object execute(Object o, InternalContextAdapter context)\n \n         try\n         {\n-            Class c = o.getClass();\n-\n             /*\n              *  first, see if we have this information cached.\n              */\n@@ -111,7 +109,7 @@ public Object execute(Object o, InternalContextAdapter context)\n              * that is fixed in the template :)\n              */\n \n-            if (icd != null && icd.contextData == c)\n+            if ( icd != null && (o != null) && (icd.contextData == o.getClass()) )\n             {\n                 vg = (VelPropertyGet) icd.thingy;\n             }\n@@ -124,10 +122,10 @@ public Object execute(Object o, InternalContextAdapter context)\n \n                 vg = rsvc.getUberspect().getPropertyGet(o,identifier, uberInfo);\n \n-                if (vg != null && vg.isCacheable())\n+                if (vg != null && vg.isCacheable() && (o != null))\n                 {\n                     icd = new IntrospectionCacheData();\n-                    icd.contextData = c;\n+                    icd.contextData = o.getClass();\n                     icd.thingy = vg;\n                     context.icachePut(this,icd);\n                 }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTIdentifier.java"}, {"additions": 1, "raw_url": "https://github.com/apache/velocity-engine/raw/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java", "blob_url": "https://github.com/apache/velocity-engine/blob/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java", "sha": "dfdc5eed2b343b600f44066cfce5a8ad3e6230cc", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java?ref=fb578af973b2dedc594c71a983d79e0fd61a2aa3", "patch": "@@ -155,7 +155,7 @@ public Object execute(Object o, InternalContextAdapter context)\n \n                 method = rsvc.getUberspect().getMethod(o, methodName, params, new Info(context.getCurrentTemplateName(), getLine(), getColumn()));\n \n-                if (method != null)\n+                if ((method != null) && (o != null))\n                 {    \n                     icd = new IntrospectionCacheData();\n                     icd.contextData = o.getClass();", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java"}, {"additions": 3, "raw_url": "https://github.com/apache/velocity-engine/raw/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/util/introspection/UberspectImpl.java", "blob_url": "https://github.com/apache/velocity-engine/blob/fb578af973b2dedc594c71a983d79e0fd61a2aa3/src/java/org/apache/velocity/util/introspection/UberspectImpl.java", "sha": "2dfbb6a51cb208833e6c93e58043e84f6f660183", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/util/introspection/UberspectImpl.java?ref=fb578af973b2dedc594c71a983d79e0fd61a2aa3", "patch": "@@ -150,6 +150,9 @@ public VelMethod getMethod(Object obj, String methodName, Object[] args, Info i)\n     public VelPropertyGet getPropertyGet(Object obj, String identifier, Info i)\n             throws Exception\n     {\n+        if (obj == null)\n+            return null;\n+        \n         AbstractExecutor executor;\n \n         Class claz = obj.getClass();", "filename": "src/java/org/apache/velocity/util/introspection/UberspectImpl.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/23b9fb6e0d09b25f79db02218350df38567757a9", "parent": "https://github.com/apache/velocity-engine/commit/e5bd5ca78c28833625c0254db0dc5ca4ab02d000", "message": "Remove possible NPE for error path\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@292981 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_8", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/23b9fb6e0d09b25f79db02218350df38567757a9/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java", "blob_url": "https://github.com/apache/velocity-engine/blob/23b9fb6e0d09b25f79db02218350df38567757a9/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java", "sha": "39bdacf8227f89be833ccb5517cddefb4c8a0062", "changes": 13, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java?ref=23b9fb6e0d09b25f79db02218350df38567757a9", "patch": "@@ -102,12 +102,15 @@ public void init( ExtendedProperties configuration)\n                              + \" Please change to the conventional '<name>.resource.loader.path'.\");\n             }\n         }\n-                             \n-        log.info(\"JarResourceLoader # of paths : \" + paths.size() );\n-        \n-        for ( int i=0; i<paths.size(); i++ )\n+         \n+        if (paths != null)\n         {\n-            loadJar( (String)paths.get(i) );\n+            log.info(\"JarResourceLoader # of paths : \" + paths.size() );\n+        \n+            for ( int i=0; i<paths.size(); i++ )\n+            {\n+                loadJar( (String)paths.get(i) );\n+            }\n         }\n         \n         log.info(\"JarResourceLoader : initialization complete.\");", "filename": "src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/263b5c9371958359002aa728e770611d8f2ccadd", "parent": "https://github.com/apache/velocity-engine/commit/0b193099a0193211fa499166129348a17a471d1b", "message": "Defuse potential NPE. (findbugs)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@292979 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_9", "file": [{"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/263b5c9371958359002aa728e770611d8f2ccadd/src/java/org/apache/velocity/texen/ant/TexenTask.java", "blob_url": "https://github.com/apache/velocity-engine/blob/263b5c9371958359002aa728e770611d8f2ccadd/src/java/org/apache/velocity/texen/ant/TexenTask.java", "sha": "73280c7db7ef6f08993a63a6803dbec7626bc3c9", "changes": 13, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/texen/ant/TexenTask.java?ref=263b5c9371958359002aa728e770611d8f2ccadd", "patch": "@@ -306,13 +306,14 @@ public void setContextProperties( String file )\n                 }\n             }\n \n-            Iterator j = source.getKeys();\n-\n-            while (j.hasNext())\n+            if (source != null)\n             {\n-                String name = (String) j.next();\n-                String value = source.getString(name);\n-                contextProperties.setProperty(name,value);\n+                for (Iterator j = source.getKeys(); j.hasNext(); )\n+                {\n+                    String name = (String) j.next();\n+                    String value = source.getString(name);\n+                    contextProperties.setProperty(name,value);\n+                }\n             }\n         }\n     }", "filename": "src/java/org/apache/velocity/texen/ant/TexenTask.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/93ed5b3e84203ba9796795da5b242169259213a0", "parent": "https://github.com/apache/velocity-engine/commit/cc291d50b8d5b6e05996a3d52da64411d8ada852", "message": "a bit more debugging instead of an NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@73771 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_10", "file": [{"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/93ed5b3e84203ba9796795da5b242169259213a0/src/java/org/apache/velocity/util/introspection/Introspector.java", "blob_url": "https://github.com/apache/velocity-engine/blob/93ed5b3e84203ba9796795da5b242169259213a0/src/java/org/apache/velocity/util/introspection/Introspector.java", "sha": "106ce1102ac618fac426d3b954c26fcafdd5ada0", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/util/introspection/Introspector.java?ref=93ed5b3e84203ba9796795da5b242169259213a0", "patch": "@@ -59,6 +59,8 @@\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n \n+import org.apache.velocity.util.StringUtils;\n+\n /**\n  * This basic function of this class is to return a Method\n  * object for a particular class given the name of a method\n@@ -83,7 +85,7 @@\n  * and stored for \n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"mailto:bob@werken.com\">Bob McWhirter</a>\n- * @version $Id: Introspector.java,v 1.7 2000/11/25 00:00:06 jon Exp $\n+ * @version $Id: Introspector.java,v 1.8 2000/11/25 18:27:27 jon Exp $\n  */\n \n // isAssignable checks for arguments that are subclasses\n@@ -97,10 +99,12 @@\n     public static Method getMethod(Class c, String name, Object[] params)\n         throws Exception\n     {\n+        if (c == null)\n+            throw new Exception ( \"Introspector.getMethod(): Class method key was null: \" + name );\n+\n         // If this is the first time seeing this class\n         // then create a method map for this class and\n         // store it in Hashtable of class method maps.\n-        \n         if (!classMethodMaps.containsKey(c))\n         {\n             // Lots of threads might be whizzing through here,\n@@ -114,7 +118,7 @@ public static Method getMethod(Class c, String name, Object[] params)\n             // multi-proc machines.  Doesn't make things worse,\n             // but just doesn't help as much as you'd imagine it\n             // would.  Darn re-ordering of instructions.\n-            \n+        \n             synchronized (classMethodMaps)\n             {\n                 if (!classMethodMaps.containsKey(c))\n@@ -123,7 +127,6 @@ public static Method getMethod(Class c, String name, Object[] params)\n                 }\n             }\n         }\n-        \n         return findMethod(c, name, params);\n     }\n ", "filename": "src/java/org/apache/velocity/util/introspection/Introspector.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/17f796d12e9e23011cdb0a4ed5f5004e0293cec9", "parent": "https://github.com/apache/velocity-engine/commit/445fd97938c9e8537901b33a37a9ce23ba4de8b7", "message": "VELOCITY-759 prevent NPEs when deprecated props are misconfigured :) (thanks to Rachid)\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@928499 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_11", "file": [{"additions": 4, "raw_url": "https://github.com/apache/velocity-engine/raw/17f796d12e9e23011cdb0a4ed5f5004e0293cec9/src/changes/changes.xml", "blob_url": "https://github.com/apache/velocity-engine/blob/17f796d12e9e23011cdb0a4ed5f5004e0293cec9/src/changes/changes.xml", "sha": "26e1e3a76504a027f4a42757d4a1b1f8b7d338da", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/changes/changes.xml?ref=17f796d12e9e23011cdb0a4ed5f5004e0293cec9", "patch": "@@ -26,6 +26,10 @@\n \n   <body>\n     <release version=\"1.7\" date=\"In Subversion\">\n+      <action type=\"add\" dev=\"nbubna\" issue=\"VELOCITY-759\" due-to=\"Rachid\">\n+    Avoid NPEs in case of bad #foreach config.\n+      </action>\n+\n       <action type=\"add\" dev=\"nbubna\" issue=\"VELOCITY-755\">\n     Use LinkedHashMap to maintain order of VTL-created maps.\n       </action>", "filename": "src/changes/changes.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/velocity-engine/raw/17f796d12e9e23011cdb0a4ed5f5004e0293cec9/src/java/org/apache/velocity/runtime/directive/Foreach.java", "blob_url": "https://github.com/apache/velocity-engine/blob/17f796d12e9e23011cdb0a4ed5f5004e0293cec9/src/java/org/apache/velocity/runtime/directive/Foreach.java", "sha": "8b575dafca625f4e363239980122bfbad74f689f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/directive/Foreach.java?ref=17f796d12e9e23011cdb0a4ed5f5004e0293cec9", "patch": "@@ -214,15 +214,15 @@ public void init(RuntimeServices rs, InternalContextAdapter context, Node node)\n         {\n             warned = true;\n             // ...and only if they customize these settings\n-            if (!counterName.equals(\"velocityCount\"))\n+            if (!\"velocityCount\".equals(counterName))\n             {\n                 rsvc.getLog().warn(\"The \"+RuntimeConstants.COUNTER_NAME+\n                     \" property has been deprecated. It will be removed\"+\n                     \" (along with $velocityCount itself) in Velocity 2.0. \"+\n                     \" Instead, please use $foreach.count to access\"+\n                     \" the loop counter.\");\n             }\n-            if (!hasNextName.equals(\"velocityHasNext\"))\n+            if (!\"velocityHasNext\".equals(hasNextName))\n             {\n                 rsvc.getLog().warn(\"The \"+RuntimeConstants.HAS_NEXT_NAME+\n                     \" property has been deprecated. It will be removed\"+", "filename": "src/java/org/apache/velocity/runtime/directive/Foreach.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3", "parent": "https://github.com/apache/velocity-engine/commit/084f55563a6ad7f291e5f3527bc0bb4632140e67", "message": "add string concatenation tests and fix NPE when concatenating string with null reference\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@712887 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_12", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "sha": "7a74c24297dcf599c6dc9dde47389384c8ae8fe1", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java?ref=b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3", "patch": "@@ -61,6 +61,14 @@ protected Object handleSpecial(Object left, Object right, InternalContextAdapter\n          */\n         if (left instanceof String || right instanceof String)\n         {\n+            if (left == null)\n+            {\n+                left = jjtGetChild(0).literal();\n+            }\n+            else if (right == null)\n+            {\n+                right = jjtGetChild(1).literal();\n+            }\n             return left.toString().concat(right.toString());\n         }\n         return null;", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java"}, {"additions": 69, "raw_url": "https://github.com/apache/velocity-engine/raw/b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3/src/test/org/apache/velocity/test/StringConcatenationTestCase.java", "blob_url": "https://github.com/apache/velocity-engine/blob/b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3/src/test/org/apache/velocity/test/StringConcatenationTestCase.java", "sha": "0490875ec20bca2420f87520c64e8432e8ceacfc", "changes": 69, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/test/org/apache/velocity/test/StringConcatenationTestCase.java?ref=b5a3e5d6ea3dc3d50a9fd4b7aa97b0817c13b8a3", "patch": "@@ -0,0 +1,69 @@\n+package org.apache.velocity.test;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+import org.apache.velocity.VelocityContext;\n+import org.apache.velocity.exception.MathException;\n+import org.apache.velocity.runtime.RuntimeConstants;\n+\n+/**\n+ * This class tests support for string concatenation.\n+ */\n+public class StringConcatenationTestCase extends BaseEvalTestCase\n+{\n+    public StringConcatenationTestCase(String name)\n+    {\n+       super(name);\n+    }\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        DEBUG = true;\n+        context.put(\"foo\", \"foo\");\n+        context.put(\"baz\", \"baz\");\n+    }\n+\n+    public void testStringRefLeft()\n+    {\n+        assertEvalEquals(\"foobar\", \"#set( $o = $foo + 'bar' )$o\");\n+        assertEvalEquals(\"foo$bar\", \"#set( $o = $foo + $bar )$o\");\n+        assertEvalEquals(\"foo1\", \"#set( $o = $foo + 1 )$o\");\n+        assertEvalEquals(\"foobaz\", \"#set( $o = $foo + $baz )$o\");\n+    }\n+\n+    public void testStringRefRight()\n+    {\n+        assertEvalEquals(\"barfoo\", \"#set( $o = 'bar' + $foo )$o\");\n+        assertEvalEquals(\"$barfoo\", \"#set( $o = $bar + $foo )$o\");\n+        assertEvalEquals(\"1foo\", \"#set( $o = 1 + $foo )$o\");\n+    }\n+\n+    public void testNoRef()\n+    {\n+        assertEvalEquals(\"bar1\", \"#set( $o = 'bar' + 1 )$o\");\n+    }\n+\n+    public void testAll()\n+    {\n+        assertEvalEquals(\"foobar$bar1baz\", \"#set( $o = $foo + 'bar' + $bar + 1 + $baz )$o\");\n+    }\n+\n+}", "filename": "src/test/org/apache/velocity/test/StringConcatenationTestCase.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/0f9d7ca90f6d522673ff0fd95e7b6463a8bdf318", "parent": "https://github.com/apache/velocity-engine/commit/64416bb65f4f3f697aff39475f19e274123ad20e", "message": "prevent NPE when velocimacro.library.autoreload=true and there is no global velocimacro library\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@365339 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_13", "file": [{"additions": 1, "raw_url": "https://github.com/apache/velocity-engine/raw/0f9d7ca90f6d522673ff0fd95e7b6463a8bdf318/src/java/org/apache/velocity/runtime/VelocimacroFactory.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0f9d7ca90f6d522673ff0fd95e7b6463a8bdf318/src/java/org/apache/velocity/runtime/VelocimacroFactory.java", "sha": "6186821f9844401f14d6f648c943bcbe493c9f90", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/VelocimacroFactory.java?ref=0f9d7ca90f6d522673ff0fd95e7b6463a8bdf318", "patch": "@@ -390,7 +390,7 @@ private synchronized boolean canAddVelocimacro( String name, String sourceTempla\n          *  template is one of the library templates\n          */\n         \n-        if ( getAutoload() )\n+        if ( getAutoload() && (macroLibVec != null) )\n         {\n             /*\n              *  see if this is a library template", "filename": "src/java/org/apache/velocity/runtime/VelocimacroFactory.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/68c66f04c951de00f80fe9fd42e1d89d559d892b", "parent": "https://github.com/apache/velocity-engine/commit/a4a7e6e011be7d9637ce2b0abbd92418a670aef8", "message": "Fixed NPE when subelement of reference is null.  \nThanks to Alexey Panchenko for the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@345296 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_14", "file": [{"additions": 4, "raw_url": "https://github.com/apache/velocity-engine/raw/68c66f04c951de00f80fe9fd42e1d89d559d892b/src/java/org/apache/velocity/runtime/parser/node/ASTReference.java", "blob_url": "https://github.com/apache/velocity-engine/blob/68c66f04c951de00f80fe9fd42e1d89d559d892b/src/java/org/apache/velocity/runtime/parser/node/ASTReference.java", "sha": "b5fbcf0e02d22b2ef51fda2656420c62fde5a152", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTReference.java?ref=68c66f04c951de00f80fe9fd42e1d89d559d892b", "patch": "@@ -172,6 +172,10 @@ public Object execute(Object o, InternalContextAdapter context)\n             for (int i = 0; i < numChildren; i++)\n             {\n                 result = getChild(i).execute(result,context);\n+                if (result == null)\n+                {\n+                    break;\n+                }\n             }\n \n             return result;", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTReference.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/00b1f2b5ea71b2924627c8e78ba41b221114e5ab", "parent": "https://github.com/apache/velocity-engine/commit/50a1c52b48967edfd3412ac8826cc31b1a19ee21", "message": "Add some sanity check for looking into ParseException to avoid NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@329471 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_15", "file": [{"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/00b1f2b5ea71b2924627c8e78ba41b221114e5ab/src/java/org/apache/velocity/exception/ParseErrorException.java", "blob_url": "https://github.com/apache/velocity-engine/blob/00b1f2b5ea71b2924627c8e78ba41b221114e5ab/src/java/org/apache/velocity/exception/ParseErrorException.java", "sha": "ef5167c3615ab37890ee6357a10927830d644678", "changes": 11, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/exception/ParseErrorException.java?ref=00b1f2b5ea71b2924627c8e78ba41b221114e5ab", "patch": "@@ -36,7 +36,7 @@\n     /**\n      * Version Id for serializable\n      */\n-    private static final long serialVersionUID = -6665197935086306473L;\n+    private static final long serialVersionUID = -6665197935086306472L;\n \n     /**\n      * The column number of the parsing error, or -1 if not defined.\n@@ -85,9 +85,12 @@ public ParseErrorException(ParseException pex)\n         else\n         {\n             //  ugly, ugly, ugly...\n-            columnNumber = pex.currentToken.next.beginColumn;\n-            lineNumber = pex.currentToken.next.beginLine;\n-            templateName = \"*unset*\";\n+\n+            if (pex.currentToken != null && pex.currentToken.next != null)\n+            {\n+                columnNumber = pex.currentToken.next.beginColumn;\n+                lineNumber = pex.currentToken.next.beginLine;\n+            }\n         }\n     }\n     ", "filename": "src/java/org/apache/velocity/exception/ParseErrorException.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/cb03add79e9854d7227472c0712bcca447c158bb", "parent": "https://github.com/apache/velocity-engine/commit/3d8628a709f23c1e2560a687086e6995e77fdf13", "message": "Protect against NPE.  Issue reported and fix provided by Konstantin Pribluda.  VELOCITY-411.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@321298 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_16", "file": [{"additions": 14, "raw_url": "https://github.com/apache/velocity-engine/raw/cb03add79e9854d7227472c0712bcca447c158bb/src/java/org/apache/velocity/app/event/implement/EscapeReference.java", "blob_url": "https://github.com/apache/velocity-engine/blob/cb03add79e9854d7227472c0712bcca447c158bb/src/java/org/apache/velocity/app/event/implement/EscapeReference.java", "sha": "c47d3e14d90be7d7f9cd75abb68321cc3c1f99e0", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/app/event/implement/EscapeReference.java?ref=cb03add79e9854d7227472c0712bcca447c158bb", "patch": "@@ -83,14 +83,25 @@\n      */\n     public Object referenceInsert(String reference, Object value) \n     {\n+        if(value == null)\n+        {\n+            return value; \n+        }\n+        \n         if (matchRegExp == null)\n+        {\n             return escape(value);\n-        \n+        }\n+            \n         else if (perl.match(matchRegExp,reference))\n+        {\n             return escape(value);\n+        }\n         \n         else\n+        {\n             return value;\n+        }\n     }\n \n     /**\n@@ -105,7 +116,9 @@ public void setRuntimeServices(RuntimeServices rs) throws Exception\n          */\n         matchRegExp = rs.getConfiguration().getString(getMatchAttribute());\n         if ((matchRegExp != null) && (matchRegExp.trim().length() == 0))\n+        {\n             matchRegExp = null;\n+        }\n         \n         /**\n          * Test the regular expression for a well formed pattern", "filename": "src/java/org/apache/velocity/app/event/implement/EscapeReference.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/0ff7d057260855800e45fcf28e609bc57c9978db", "parent": "https://github.com/apache/velocity-engine/commit/3fbff60842d2324d317d2981ffae3db47dd103c6", "message": "Removed a possible NPE when rsvc.getProperty might decide to return\nneither a String nor a List.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@292963 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_17", "file": [{"additions": 1, "raw_url": "https://github.com/apache/velocity-engine/raw/0ff7d057260855800e45fcf28e609bc57c9978db/src/java/org/apache/velocity/runtime/log/LogManager.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0ff7d057260855800e45fcf28e609bc57c9978db/src/java/org/apache/velocity/runtime/log/LogManager.java", "sha": "fb7d12d3dee04d0c4157cd5af4e5d7178854f5d7", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/log/LogManager.java?ref=0ff7d057260855800e45fcf28e609bc57c9978db", "patch": "@@ -98,7 +98,7 @@ public static LogChute createLogChute(RuntimeServices rsvc) throws Exception\n          * AvalonLogChute, the Log4JLogChute, and the JdkLogChute for \n          * convenience - so we use whichever we find first.\n          */\n-        List classes = null;\n+        List classes = new ArrayList();\n         Object obj = rsvc.getProperty( RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS );\n \n         /*\n@@ -110,7 +110,6 @@ public static LogChute createLogChute(RuntimeServices rsvc) throws Exception\n         }\n         else if ( obj instanceof String)\n         { \n-            classes = new ArrayList();\n             classes.add( obj );\n         }\n ", "filename": "src/java/org/apache/velocity/runtime/log/LogManager.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/5fcbed58aee5e563c0337c1d702c65720b251a78", "parent": "https://github.com/apache/velocity-engine/commit/7d9330898ce01df4fe0231d3a78875289b9ecbee", "message": "Fixes problem with NPE when used in Maven.\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=33924\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@156720 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_18", "file": [{"additions": 28, "raw_url": "https://github.com/apache/velocity-engine/raw/5fcbed58aee5e563c0337c1d702c65720b251a78/src/java/org/apache/velocity/anakia/AnakiaTask.java", "blob_url": "https://github.com/apache/velocity-engine/blob/5fcbed58aee5e563c0337c1d702c65720b251a78/src/java/org/apache/velocity/anakia/AnakiaTask.java", "sha": "f2275d99e488da1c1a441e3b647fe4afabad4ef1", "changes": 41, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/anakia/AnakiaTask.java?ref=5fcbed58aee5e563c0337c1d702c65720b251a78", "patch": "@@ -36,6 +36,7 @@\n import org.apache.velocity.app.VelocityEngine;\n import org.apache.velocity.runtime.RuntimeConstants;\n import org.apache.velocity.util.StringUtils;\n+\n import org.jdom.Document;\n import org.jdom.JDOMException;\n import org.jdom.input.SAXBuilder;\n@@ -374,6 +375,16 @@ private void process(String xmlFile, Document projectDocument)\n                 for (Iterator iter = contexts.iterator(); iter.hasNext();) \n                 {\n                     Context subContext = (Context) iter.next();\n+                    if (subContext == null)\n+                    {\n+                        throw new BuildException(\"Found an undefined SubContext!\");\n+                    }\n+\n+                    if (subContext.getContextDocument() == null)\n+                    {\n+                        throw new BuildException(\"Could not build a subContext for \" + subContext.getName());\n+                    }\n+\n                     context.put(subContext.getName(), subContext\n                             .getContextDocument().getRootElement());\n                 }\n@@ -523,8 +534,8 @@ public Context createContext()\n     {\n         \n         private String name;\n-        private Document contextDoc;\n-        private File contextFile;\n+        private Document contextDoc = null;\n+        private String file;\n         \n         /**\n          * Public constructor.\n@@ -570,31 +581,35 @@ public void setName(String name)\n          */\n         public void setFile(String file) \n         {\n-            contextFile = new File(baseDir, file);\n-            \n-            try \n-            {\n-                contextDoc = builder.build(contextFile);\n-            } \n-            catch (Exception e) \n-            {\n-                throw new BuildException(e);\n-            }\n+            this.file = file;\n         }\n     \n         /**\n          * Retrieve the time the source file was last modified.\n          */\n         public long getLastModified() \n         {\n-            return contextFile.lastModified();\n+            return new File(baseDir, file).lastModified();\n         }\n         \n         /**\n          * Retrieve the context document object.\n          */\n         public Document getContextDocument() \n         {\n+            if (contextDoc == null)\n+            {\n+                File contextFile = new File(baseDir, file);\n+                \n+                try \n+                {\n+                    contextDoc = builder.build(contextFile);\n+                } \n+                catch (Exception e) \n+                {\n+                    throw new BuildException(e);\n+                }\n+            }\n             return contextDoc;\n         }\n     }", "filename": "src/java/org/apache/velocity/anakia/AnakiaTask.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/875815df8a4a3ced981bfb7400991c5304dbd38e", "parent": "https://github.com/apache/velocity-engine/commit/0003eccd5b57e194173df85dc0e8de5a720bc4b2", "message": "Fix potential NPE in DataResourceLoader.\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=19440\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@124215 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_19", "file": [{"additions": 11, "raw_url": "https://github.com/apache/velocity-engine/raw/875815df8a4a3ced981bfb7400991c5304dbd38e/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java", "blob_url": "https://github.com/apache/velocity-engine/blob/875815df8a4a3ced981bfb7400991c5304dbd38e/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java", "sha": "959f9cf6c060100315dc5c7794ed2fe7c5887813", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java?ref=875815df8a4a3ced981bfb7400991c5304dbd38e", "patch": "@@ -104,7 +104,7 @@\n  * @author <a href=\"mailto:david.kinnvall@alertir.com\">David Kinnvall</a>\n  * @author <a href=\"mailto:paulo.gaspar@krankikom.de\">Paulo Gaspar</a>\n  * @author <a href=\"mailto:lachiewicz@plusnet.pl\">Sylwester Lachiewicz</a>\n- * @version $Id: DataSourceResourceLoader.java,v 1.12 2004/03/20 03:35:51 dlr Exp $\n+ * @version $Id$\n  */\n public class DataSourceResourceLoader extends ResourceLoader\n {\n@@ -168,8 +168,16 @@ public synchronized InputStream getResourceStream(String name)\n                  {\n                      if (rs.next())\n                      {\n-                         return new\n-                             BufferedInputStream(rs.getAsciiStream(templateColumn));\n+                         InputStream ascStream = rs.getAsciiStream(templateColumn);\n+                         if (ascStream != null)\n+                             return new BufferedInputStream(ascStream);\n+                         else {\n+                             String msg = \"DataSourceResourceLoader Error: cannot find resource \"\n+                                 + name;\n+                             rsvc.error(msg);\n+\n+                             throw new ResourceNotFoundException(msg);\n+                        }\n                      }\n                      else\n                      {", "filename": "src/java/org/apache/velocity/runtime/resource/loader/DataSourceResourceLoader.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/f46f02aad8438a6f932af65000423f0b777a7434", "parent": "https://github.com/apache/velocity-engine/commit/91ca1b419fad6442ee5d5d5e63059baeaa45ca8e", "message": "Small fix - prevent an NPE if write() is passed a null.  Also minor\ndoco updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@75937 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_20", "file": [{"additions": 9, "raw_url": "https://github.com/apache/velocity-engine/raw/f46f02aad8438a6f932af65000423f0b777a7434/src/java/org/apache/velocity/io/VelocityWriter.java", "blob_url": "https://github.com/apache/velocity-engine/blob/f46f02aad8438a6f932af65000423f0b777a7434/src/java/org/apache/velocity/io/VelocityWriter.java", "sha": "8fb21099b35e6177e0a18341e2f0bca7750d42ad", "changes": 15, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/io/VelocityWriter.java?ref=f46f02aad8438a6f932af65000423f0b777a7434", "patch": "@@ -3,7 +3,7 @@\n /*\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2000-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n@@ -64,7 +64,7 @@\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n  * @author Anil K. Vijendran\n- * @version $Id: VelocityWriter.java,v 1.8 2003/08/24 17:31:12 dlr Exp $\n+ * @version $Id: VelocityWriter.java,v 1.9 2004/01/09 11:45:01 geirm Exp $\n  */\n public final class VelocityWriter extends Writer\n {\n@@ -101,7 +101,7 @@\n      * Create a buffered character-output stream that uses a default-sized\n      * output buffer.\n      *\n-     * @param  response  A Servlet Response\n+     * @param  writer  Writer to wrap around\n      */\n     public VelocityWriter(Writer writer)\n     {\n@@ -136,7 +136,7 @@ private VelocityWriter(int bufferSize, boolean autoFlush)\n      * Create a new buffered character-output stream that uses an output\n      * buffer of the given size.\n      *\n-     * @param  response A Servlet Response\n+     * @param  writer  Writer to wrap around\n      * @param  sz   \tOutput-buffer size, a positive integer\n      *\n      * @exception  IllegalArgumentException  If sz is <= 0\n@@ -354,14 +354,17 @@ public final void write(String s, int off, int len) throws IOException\n      */\n     public final void write(String s) throws IOException\n     {\n-    \twrite(s, 0, s.length());\n+        if (s != null)\n+        {\n+        \twrite(s, 0, s.length());\n+        }\n     }\n \n     /**\n      * resets this class so that it can be reused\n      *\n      */\n-    public final void recycle( Writer writer)\n+    public final void recycle(Writer writer)\n     {\n         this.writer = writer;\n         flushed = false;", "filename": "src/java/org/apache/velocity/io/VelocityWriter.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/49578296ab81d09a66d933a81826eb8b2c72589e", "parent": "https://github.com/apache/velocity-engine/commit/3f810e2b0e0ebb98c7d5b24232afd1e8590765f0", "message": "Fixed to ensure no NPEs and good logging.\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@74799 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_21", "file": [{"additions": 2, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java", "sha": "e4670866de09d9bbea8c00aa6618900744abf2c3", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,6 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTEQNode.java */\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -56,7 +55,7 @@\n  */\n \n import org.apache.velocity.context.InternalContextAdapter;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.parser.Parser;\n import org.apache.velocity.runtime.Runtime;\n \n import org.apache.velocity.exception.MethodInvocationException;\n@@ -69,7 +68,7 @@\n  *  This operator requires that the LHS and RHS are both of the\n  *  same Class.\n  *\n- *  @version $Id: ASTEQNode.java,v 1.5 2001/03/19 17:17:45 geirm Exp $\n+ *  @version $Id: ASTEQNode.java,v 1.6 2001/04/09 02:24:03 geirm Exp $\n  */\n public class ASTEQNode extends SimpleNode\n {", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java"}, {"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTGENode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTGENode.java", "sha": "11d6f40ecf0532ce5a772f03f0a3f9be0a2ac954", "changes": 21, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTGENode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,6 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTGENode.java */\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -94,9 +93,11 @@ public boolean evaluate( InternalContextAdapter context)\n \n         if (left == null || right == null)\n         {\n-            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of '>=' operation has null value.\"\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) \n+                           + \" side of '>=' operation has null value.\"\n                            + \" Operation not possible. \"\n-                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + context.getCurrentTemplateName() + \" [line \" \n+                           + getLine() \n                            + \", column \" + getColumn() + \"]\");\n             return false;\n         }\n@@ -109,21 +110,15 @@ public boolean evaluate( InternalContextAdapter context)\n         {\n             Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n                            + \" side of '>=' operation is not a valid type. \"\n-                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + \" It is a \" + ( !( left instanceof Integer ) ? left.getClass() : right.getClass() ) \n+                           + \". Currently only integers (1,2,3...) and Integer type is supported. \"\n                            +  context.getCurrentTemplateName() + \" [line \" + getLine() \n                            + \", column \" + getColumn() + \"]\");\n  \n             return false;\n         }\n \n-        if ( ((Integer) left).intValue() >=\n-             ((Integer) right).intValue()  ) \n-        {\n-            return true;\n-        }\n-        else\n-        {\n-            return false;\n-        }\n+        return ( (Integer) left).intValue() >=  ((Integer) right).intValue() ; \n+     \n     }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTGENode.java"}, {"additions": 9, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java", "sha": "fcd9a5d8b8e650de931a247f4c443fbd278052ab", "changes": 26, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,6 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTGTNode.java */\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -56,7 +55,7 @@\n  */\n \n import org.apache.velocity.context.InternalContextAdapter;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.parser.Parser;\n import org.apache.velocity.exception.MethodInvocationException;\n import org.apache.velocity.runtime.Runtime;\n \n@@ -81,9 +80,7 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n     public boolean evaluate(InternalContextAdapter context)\n         throws MethodInvocationException\n     {\n-\n-\n- /*\n+        /*\n          *  get the two args\n          */\n \n@@ -96,9 +93,11 @@ public boolean evaluate(InternalContextAdapter context)\n \n         if (left == null || right == null)\n         {\n-            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of '>' operation has null value.\"\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) \n+                           + \" side of '>' operation has null value.\"\n                            + \" Operation not possible. \"\n-                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + context.getCurrentTemplateName() + \" [line \" \n+                           + getLine() \n                            + \", column \" + getColumn() + \"]\");\n             return false;\n         }\n@@ -111,21 +110,14 @@ public boolean evaluate(InternalContextAdapter context)\n         {\n             Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n                            + \" side of '>' operation is not a valid type. \"\n-                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + \" It is a \" + ( !( left instanceof Integer ) ? left.getClass() : right.getClass() ) \n+                           + \". Currently only integers (1,2,3...) and Integer type is supported. \"\n                            +  context.getCurrentTemplateName() + \" [line \" + getLine() \n                            + \", column \" + getColumn() + \"]\");\n  \n             return false;\n         }\n \n-        if ( ((Integer) left).intValue() >\n-             ((Integer) right).intValue()  ) \n-        {\n-            return true;\n-        }\n-        else\n-        {\n-            return false;\n-        }\n+        return ((Integer) left).intValue() > ((Integer) right).intValue();\n     }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java"}, {"additions": 40, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTLENode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTLENode.java", "sha": "3a850e9461f90b2df6b73c9ddfc4afa595a46866", "changes": 46, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTLENode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,6 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTLENode.java */\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -56,7 +55,8 @@\n  */\n \n import org.apache.velocity.context.InternalContextAdapter;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.parser.Parser;\n+import org.apache.velocity.runtime.Runtime;\n \n import org.apache.velocity.exception.MethodInvocationException;\n \n@@ -81,10 +81,44 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n     public boolean evaluate( InternalContextAdapter context)\n       throws MethodInvocationException\n     {\n-        if (((Integer)jjtGetChild(0).value(context)).intValue() <=\n-            ((Integer)jjtGetChild(1).value(context)).intValue())\n-            return true;\n-        else\n+        /*\n+         *  get the two args\n+         */\n+        \n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) \n+                           + \" side of '<=' operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" \n+                           + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n             return false;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of '<=' operation is not a valid type. \"\n+                           + \" It is a \" + ( !( left instanceof Integer ) ? left.getClass() : right.getClass() ) \n+                           + \". Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           +  context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return false;\n+        }\n+\n+        return ((Integer) left).intValue() <=  ((Integer) right).intValue() ;\n     }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTLENode.java"}, {"additions": 40, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java", "sha": "3520e810abea966adff6e0c5eaf171f08499b505", "changes": 46, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,6 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTLTNode.java */\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -56,7 +55,8 @@\n  */\n \n import org.apache.velocity.context.InternalContextAdapter;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.parser.Parser;\n+import org.apache.velocity.runtime.Runtime;\n \n import org.apache.velocity.exception.MethodInvocationException;\n \n@@ -81,10 +81,44 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n     public boolean evaluate(InternalContextAdapter context)\n         throws MethodInvocationException\n     {\n-        if (((Integer)jjtGetChild(0).value(context)).intValue() <\n-            ((Integer)jjtGetChild(1).value(context)).intValue())\n-            return true;\n-        else\n+        /*\n+         *  get the two args\n+         */\n+        \n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) \n+                           + \" side of '<' operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" \n+                           + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n             return false;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of '<' operation is not a valid type. \"\n+                           + \" It is a \" + ( !( left instanceof Integer ) ? left.getClass() : right.getClass() ) \n+                           + \". Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           +  context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return false;\n+        }\n+\n+        return ((Integer) left).intValue() < ((Integer) right).intValue() ;\n     }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java"}, {"additions": 39, "raw_url": "https://github.com/apache/velocity-engine/raw/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTNENode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/49578296ab81d09a66d933a81826eb8b2c72589e/src/java/org/apache/velocity/runtime/parser/node/ASTNENode.java", "sha": "324005f667756e4d0bffb2d6e484a8060ef02154", "changes": 54, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTNENode.java?ref=49578296ab81d09a66d933a81826eb8b2c72589e", "patch": "@@ -1,7 +1,5 @@\n package org.apache.velocity.runtime.parser.node;\n \n-/* Generated By:JJTree: Do not edit this line. ASTNENode.java */\n-\n /*\n  * The Apache Software License, Version 1.1\n  *\n@@ -57,7 +55,8 @@\n  */\n \n import org.apache.velocity.context.InternalContextAdapter;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.parser.Parser;\n+import org.apache.velocity.runtime.Runtime;\n \n import org.apache.velocity.exception.MethodInvocationException;\n \n@@ -82,19 +81,44 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n     public boolean evaluate(  InternalContextAdapter context)\n         throws MethodInvocationException\n     {\n-        if (jjtGetChild(0).value(context) instanceof Boolean &&\n-            ((Boolean)jjtGetChild(0).value(context)).booleanValue() !=\n-            ((Boolean)jjtGetChild(1).value(context)).booleanValue())\n-            return true;\n-        else if (jjtGetChild(0).value(context) instanceof Integer &&\n-            ((Integer)jjtGetChild(0).value(context)).intValue() !=\n-            ((Integer)jjtGetChild(1).value(context)).intValue())\n-            return true;\n-        else if (jjtGetChild(0).value(context) instanceof String &&\n-            ! jjtGetChild(0).value(context).toString()\n-            .equals(jjtGetChild(1).value(context).toString()))\n-            return true;\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  null check\n+         */\n+\n+        if ( left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of '!=' operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return false;\n+\n+        }\n+\n+\n+        /*\n+         *  check to see if they are the same class.  I don't think this is slower\n+         *  as I don't think that getClass() results in object creation, and we can\n+         *  extend == to handle all classes\n+         */\n+\n+        if (left.getClass().equals( right.getClass() ) )\n+        {\n+            return !(left.equals( right ));\n+        }\n         else\n+        {\n+            Runtime.error(\"Error in evaluation of != expression.\"\n+                          + \" Both arguments must be of the same Class.\"\n+                          + \" Currently left = \" + left.getClass() + \", right = \" \n+                          + right.getClass() + \". \"\n+                          + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                          + \", column \" + getColumn() + \"] (ASTEQNode)\");\n+            \n             return false;\n+        }\n     }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTNENode.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/884d264100b4d0b3e53bd00193784ee864c93d42", "parent": "https://github.com/apache/velocity-engine/commit/09ed8ec88d2ec52a510ce29d2b46c28ab7b49bd5", "message": "Caught NPE when template is null due to parse error (or other internal Runtime error...)\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@73893 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_22", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/884d264100b4d0b3e53bd00193784ee864c93d42/src/java/org/apache/velocity/Template.java", "blob_url": "https://github.com/apache/velocity-engine/blob/884d264100b4d0b3e53bd00193784ee864c93d42/src/java/org/apache/velocity/Template.java", "sha": "2b4d6576339deb4787686590235df2de06731f3c", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/Template.java?ref=884d264100b4d0b3e53bd00193784ee864c93d42", "patch": "@@ -84,7 +84,7 @@\n  *\n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Id: Template.java,v 1.16 2000/12/05 05:10:01 geirm Exp $\n+ * @version $Id: Template.java,v 1.17 2000/12/06 20:49:23 geirm Exp $\n  */\n public class Template\n {\n@@ -279,7 +279,12 @@ public void setTemplateLoader(TemplateLoader templateLoader)\n     public void merge(Context context, Writer writer)\n         throws IOException, Exception\n     {\n-        context.setCurrentTemplateName( name );\n-        document.render(context, writer);\n+        if( document != null)\n+        {\n+            context.setCurrentTemplateName( name );\n+            document.render(context, writer);\n+        }\n+        else\n+            Runtime.error(\"Template.merge() failure.  The document is null, most likely due to parsing error.\");\n     }\n }", "filename": "src/java/org/apache/velocity/Template.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/0b86f31301798ce9ca2d5c852168c2189e8241e8", "parent": "https://github.com/apache/velocity-engine/commit/f1174da089997adbde526ed128527b8d6d24a2fd", "message": "1) added missing unary negate math operator\n\n2) bugfix and AST nodes hierarchy cleaning:\n   ASTBinaryOperator <--- ASTMathOperator <--- ASTAddNode, ASTSubstractNode, ...\n                     <--- ASTComparisonOperator <--- ASTLTNode, ASTLENode, ...\n                     <--- ASTLogicalOperator <--- ASTAndNode, ASTOrNode\n\nThe ASTBinaryOperator defines the new abstract method getLiteralOperator(), which returns the string representing the operator. It is used when calculating the error message which is displayed whenever something goes wrong (since at runtime tokens are freed to reduce memory usage, arithmetic errors where sometimes throwing NPEs before this reeng)\n\n3) test cases for 1) and 2)\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/velocity/engine/trunk@1763913 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_23", "file": [{"additions": 4, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/src/changes/changes.xml", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/src/changes/changes.xml", "sha": "7837649dde1a963fb3693f675b4c623fe8fca66c", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/changes/changes.xml?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -27,6 +27,10 @@\n   <body>\n     <release version=\"2.0\" date=\"In Subversion\">\n \n+      <action type=\"add\" dev=\"cbrisson\">\n+\tAdded unary negate math operator\n+      </action>\n+      \n       <action type=\"add\" dev=\"cbrisson\">\n         Add a configurable space gobbling feature, to control indentation in the generated code.\n         <br/>", "filename": "src/changes/changes.xml"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "sha": "c5a91559d876e0a0e44e08dcff97146a88d07932", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -75,6 +75,12 @@ else if (rstr == null)\n         return null;\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"+\";\n+    }\n+\n     public Number perform(Number left, Number right, InternalContextAdapter context)\n     {\n         return MathUtils.add(left, right);", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java"}, {"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAndNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAndNode.java", "sha": "d5436d84f78c077991acdfec8f67b9b5b49bf716", "changes": 21, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAndNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -21,7 +21,6 @@\n \n import org.apache.velocity.context.InternalContextAdapter;\n import org.apache.velocity.exception.MethodInvocationException;\n-import org.apache.velocity.exception.TemplateInitException;\n import org.apache.velocity.runtime.parser.Parser;\n \n /**\n@@ -32,7 +31,7 @@\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n  * @version $Id$\n  */\n-public class ASTAndNode extends SimpleNode\n+public class ASTAndNode extends ASTLogicalOperator\n {\n     /**\n      * @param id\n@@ -51,6 +50,12 @@ public ASTAndNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"&&\";\n+    }\n+\n     /**\n      * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)\n      */\n@@ -110,17 +115,5 @@ public boolean evaluate( InternalContextAdapter context)\n \n         return false;\n     }\n-    \n-    /**\n-     * @throws TemplateInitException\n-     * @see org.apache.velocity.runtime.parser.node.Node#init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)\n-     */\n-    public Object init( InternalContextAdapter context, Object data) throws TemplateInitException\n-    {\n-    \tObject obj = super.init(context, data);\n-    \tcleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n-    \treturn obj;\n-    }\n-\n }\n ", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTAndNode.java"}, {"additions": 46, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTBinaryOperator.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTBinaryOperator.java", "sha": "50f622fa6aa79dc837c793ec21afe2f20a9c3b5e", "changes": 46, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTBinaryOperator.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -0,0 +1,46 @@\n+package org.apache.velocity.runtime.parser.node;\n+\n+import org.apache.velocity.context.InternalContextAdapter;\n+import org.apache.velocity.exception.TemplateInitException;\n+import org.apache.velocity.runtime.parser.Parser;\n+\n+public abstract class ASTBinaryOperator extends SimpleNode\n+{\n+    public ASTBinaryOperator(int id)\n+    {\n+        super(id);\n+    }\n+\n+    public ASTBinaryOperator(Parser p, int id)\n+    {\n+        super(p, id);\n+    }\n+\n+    /**\n+     * @throws TemplateInitException\n+     * @see org.apache.velocity.runtime.parser.node.Node#init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)\n+     */\n+    public Object init( InternalContextAdapter context, Object data) throws TemplateInitException\n+    {\n+        Object obj = super.init(context, data);\n+        cleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n+        return obj;\n+    }\n+\n+    /**\n+     * get the string representing the mathematical operator\n+     * @return operator string\n+     */\n+    public abstract String getLiteralOperator();\n+\n+    @Override\n+    public String literal()\n+    {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(jjtGetChild(0).literal());\n+        builder.append(' ');\n+        builder.append(getLiteralOperator());\n+        builder.append(' ');\n+        return builder.toString();\n+    }\n+}", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTBinaryOperator.java"}, {"additions": 12, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTComparisonNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTComparisonNode.java", "sha": "183c286822abc526716b4f24ee226ed60fca48c7", "changes": 27, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTComparisonNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -21,7 +21,6 @@\n \n import org.apache.velocity.context.InternalContextAdapter;\n import org.apache.velocity.exception.MethodInvocationException;\n-import org.apache.velocity.exception.TemplateInitException;\n import org.apache.velocity.exception.VelocityException;\n import org.apache.velocity.runtime.RuntimeConstants;\n import org.apache.velocity.runtime.parser.Parser;\n@@ -35,7 +34,7 @@\n  * @author <a href=\"mailto:pero@antaramusic.de\">Peter Romianowski</a>\n  * @author Nathan Bubna\n  */\n-public abstract class ASTComparisonNode extends SimpleNode\n+public abstract class ASTComparisonNode extends ASTBinaryOperator\n {\n     /**\n      * @param id\n@@ -123,6 +122,17 @@ public Boolean compareNumbers(Object left, Object right)\n         return null;\n     }\n \n+    /**\n+     * get the string representing the mathematical operator\n+     * @return operator string\n+     */\n+    public abstract String getLiteralOperator();\n+\n+    /**\n+     * performs the actual comparison\n+     * @param compareResult\n+     * @return comparison result\n+     */\n     public abstract boolean numberTest(int compareResult);\n \n     public boolean compareNonNumber(Object left, Object right)\n@@ -151,17 +161,4 @@ public Object value(InternalContextAdapter context) throws MethodInvocationExcep\n     {\n         return Boolean.valueOf(evaluate(context));\n     }\n-    \n-    /**\n-     * @throws TemplateInitException\n-     * @see org.apache.velocity.runtime.parser.node.Node#init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)\n-     */\n-    public Object init( InternalContextAdapter context, Object data) throws TemplateInitException\n-    {\n-    \tObject obj = super.init(context, data);\n-    \tcleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n-    \treturn obj;\n-    }\n-    \n-\n }", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTComparisonNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java", "sha": "b7300be2389d35c9fea6924e67a23cbe467e102f", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -54,6 +54,12 @@ public ASTDivNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"/\";\n+    }\n+\n     public Number perform(Number left, Number right, InternalContextAdapter context)\n     {\n         /*", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java", "sha": "a25f10eea4733fb901e881cbb824d01b50ac32b2", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -51,6 +51,12 @@ public boolean compareNull(Object left, Object right)\n         return left == right || DuckType.asNull(left == null ? right : left);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"==\";\n+    }\n+\n     public boolean numberTest(int compareResult)\n     {\n         return compareResult == 0;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTEQNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTExpression.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTExpression.java", "sha": "4bd01d1d94a5940a0b3837f97200ba4a38635609", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTExpression.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -83,4 +83,10 @@ public Object init( InternalContextAdapter context, Object data) throws Template\n     \tcleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n     \treturn obj;\n     }\n+\n+    @Override\n+    public String literal()\n+    {\n+        return jjtGetChild(0).literal();\n+    }\n }", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTExpression.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGENode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGENode.java", "sha": "d69470c39108489acb30698abcc0d2a5b7dedcba", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGENode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -36,6 +36,12 @@ public ASTGENode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \">=\";\n+    }\n+\n     public boolean numberTest(int compareResult)\n     {\n         return compareResult >= 0;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGENode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java", "sha": "3ed10599603790c65c2bb927fc4f581c318e7206", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -36,6 +36,12 @@ public ASTGTNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \">\";\n+    }\n+\n     public boolean numberTest(int compareResult)\n     {\n         return compareResult == 1;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTGTNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLENode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLENode.java", "sha": "c7d0cac0d1ea16969ade1ff3a86e450439a20f35", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLENode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -36,6 +36,12 @@ public ASTLENode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"<=\";\n+    }\n+\n     public boolean numberTest(int compareResult)\n     {\n         return compareResult <= 0;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLENode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java", "sha": "1a7e4cbe83aa448d3fa6d7cadfd2f4ac1175a3db", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -36,6 +36,12 @@ public ASTLTNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"<\";\n+    }\n+\n     public boolean numberTest(int compareResult)\n     {\n         return compareResult == -1;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLTNode.java"}, {"additions": 29, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLogicalOperator.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLogicalOperator.java", "sha": "1455f545bc702631651b36b38559d74eb8007abe", "changes": 29, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLogicalOperator.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -0,0 +1,29 @@\n+package org.apache.velocity.runtime.parser.node;\n+\n+import org.apache.velocity.context.InternalContextAdapter;\n+import org.apache.velocity.exception.TemplateInitException;\n+import org.apache.velocity.runtime.parser.Parser;\n+\n+public abstract class ASTLogicalOperator extends ASTBinaryOperator\n+{\n+    public ASTLogicalOperator(int id)\n+    {\n+        super(id);\n+    }\n+\n+    public ASTLogicalOperator(Parser p, int id)\n+    {\n+        super(p, id);\n+    }\n+\n+    /**\n+     * @throws TemplateInitException\n+     * @see org.apache.velocity.runtime.parser.node.Node#init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)\n+     */\n+    public Object init( InternalContextAdapter context, Object data) throws TemplateInitException\n+    {\n+        Object obj = super.init(context, data);\n+        cleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n+        return obj;\n+    }\n+}", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTLogicalOperator.java"}, {"additions": 1, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMathNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMathNode.java", "sha": "3f4855aa9a327ae0aa5c54f24a6aed19eca538da", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMathNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -40,7 +40,7 @@\n  * @author Nathan Bubna\n  * @version $Id: ASTMathNode.java 517553 2007-03-13 06:09:58Z wglass $\n  */\n-public abstract class ASTMathNode extends SimpleNode\n+public abstract class ASTMathNode extends ASTBinaryOperator\n {\n     protected boolean strictMode = false;\n ", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMathNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTModNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTModNode.java", "sha": "6bca112eca9a1df36ad5885105a043bddc7eb03d", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTModNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -88,5 +88,11 @@ public Object init( InternalContextAdapter context, Object data) throws Template\n     \treturn obj;\n     }\n     \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"%\";\n+    }\n+\n }\n ", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTModNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java", "sha": "b310648825e5ea3adef61bb3b8d55d9ceea5dbaf", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -70,6 +70,12 @@ public Object init( InternalContextAdapter context, Object data) throws Template\n     \treturn obj;\n     }\n     \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"*\";\n+    }\n+\n }\n \n ", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java"}, {"additions": 90, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNegateNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNegateNode.java", "sha": "88d96a6c0b2cced821af06d6d402c78ee845be87", "changes": 90, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNegateNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -0,0 +1,90 @@\n+package org.apache.velocity.runtime.parser.node;\n+\n+import org.apache.velocity.context.InternalContextAdapter;\n+import org.apache.velocity.exception.MathException;\n+import org.apache.velocity.exception.MethodInvocationException;\n+import org.apache.velocity.exception.TemplateInitException;\n+import org.apache.velocity.runtime.RuntimeConstants;\n+import org.apache.velocity.runtime.parser.Parser;\n+import org.apache.velocity.util.DuckType;\n+\n+public class ASTNegateNode extends SimpleNode\n+{\n+    protected boolean strictMode = false;\n+\n+    public ASTNegateNode(int i)\n+    {\n+        super(i);\n+    }\n+\n+    public ASTNegateNode(Parser p, int i)\n+    {\n+        super(p, i);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Object init(InternalContextAdapter context, Object data) throws TemplateInitException\n+    {\n+        super.init(context, data);\n+        /* save a literal image now (needed in case of error) */\n+        strictMode = rsvc.getBoolean(RuntimeConstants.STRICT_MATH, false);\n+        cleanupParserAndTokens();\n+        return data;\n+    }\n+\n+    /**\n+     * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)\n+     */\n+    public Object jjtAccept(ParserVisitor visitor, Object data)\n+    {\n+        return visitor.visit(this, data);\n+    }\n+\n+    /**\n+     * @see org.apache.velocity.runtime.parser.node.SimpleNode#evaluate(org.apache.velocity.context.InternalContextAdapter)\n+     */\n+    public boolean evaluate( InternalContextAdapter context)\n+            throws MethodInvocationException\n+    {\n+        return jjtGetChild(0).evaluate(context);\n+    }\n+\n+    /**\n+     * @see org.apache.velocity.runtime.parser.node.SimpleNode#value(org.apache.velocity.context.InternalContextAdapter)\n+     */\n+    public Object value( InternalContextAdapter context)\n+            throws MethodInvocationException\n+    {\n+        Object value = jjtGetChild(0).evaluate( context );\n+        try\n+        {\n+            value = DuckType.asNumber(value);\n+        }\n+        catch (NumberFormatException nfe) {}\n+        if (!(value instanceof Number))\n+        {\n+            String msg = \"Argument of unary negate (\" +\n+                    jjtGetChild(0).literal() +\n+                    \") \" +\n+                    (value == null ? \"has a null value.\" : \"is not a Number.\");\n+            if (strictMode)\n+            {\n+                log.error(msg);\n+                throw new MathException(msg);\n+            }\n+            else\n+            {\n+                log.debug(msg);\n+                return null;\n+            }\n+        }\n+        return MathUtils.negate((Number) value);\n+    }\n+    @Override\n+    public String literal()\n+    {\n+        return \"-\" + jjtGetChild(0).literal();\n+    }\n+}", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNegateNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNotNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNotNode.java", "sha": "650fc557736e431507c610bbfba4d4f93f35983c", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNotNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -86,4 +86,10 @@ public Object init( InternalContextAdapter context, Object data) throws Template\n     \tcleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n     \treturn obj;\n     }\n+\n+    @Override\n+    public String literal()\n+    {\n+        return \"!\" + jjtGetChild(0).literal();\n+    }\n }", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTNotNode.java"}, {"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTOrNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTOrNode.java", "sha": "aa202ee15bb6b42d4f8e466bf3f9caa042a03f4d", "changes": 21, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTOrNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -21,7 +21,6 @@\n \n import org.apache.velocity.context.InternalContextAdapter;\n import org.apache.velocity.exception.MethodInvocationException;\n-import org.apache.velocity.exception.TemplateInitException;\n import org.apache.velocity.runtime.parser.Parser;\n \n /**\n@@ -32,7 +31,7 @@\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n  * @version $Id$\n */\n-public class ASTOrNode extends SimpleNode\n+public class ASTOrNode extends ASTLogicalOperator\n {\n     /**\n      * @param id\n@@ -51,6 +50,12 @@ public ASTOrNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"||\";\n+    }\n+\n     /**\n      * @see org.apache.velocity.runtime.parser.node.SimpleNode#jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)\n      */\n@@ -106,18 +111,6 @@ public boolean evaluate( InternalContextAdapter context)\n \n         return false;\n     }\n-    \n-    /**\n-     * @throws TemplateInitException\n-     * @see org.apache.velocity.runtime.parser.node.Node#init(org.apache.velocity.context.InternalContextAdapter, java.lang.Object)\n-     */\n-    public Object init( InternalContextAdapter context, Object data) throws TemplateInitException\n-    {\n-    \tObject obj = super.init(context, data);\n-    \tcleanupParserAndTokens(); // drop reference to Parser and all JavaCC Tokens\n-    \treturn obj;\n-    }\n-\n }\n \n ", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTOrNode.java"}, {"additions": 6, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java", "sha": "54dd958db20a8dc400b9dd6f75757099c7ebeefb", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -53,6 +53,12 @@ public ASTSubtractNode(Parser p, int id)\n         super(p, id);\n     }\n \n+    @Override\n+    public String getLiteralOperator()\n+    {\n+        return \"-\";\n+    }\n+\n     public Number perform(Number left, Number right, InternalContextAdapter context)\n     {\n         return MathUtils.subtract(left, right);", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java"}, {"additions": 59, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/MathUtils.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/MathUtils.java", "sha": "a8335e6db0aa6510988b1c6586ef87fbd32d76c0", "changes": 62, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/MathUtils.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -213,7 +213,7 @@ public static Number wrapPrimitive (long value, Class type)\n         {\n             return Long.valueOf(value);\n         }\n-        return BigInteger.valueOf( value);\n+        return BigInteger.valueOf(value);\n     }\n \n     /**\n@@ -228,9 +228,9 @@ private static Number wrapPrimitive (long value, Number op1, Number op2)\n     {\n         if ( typesBySize.indexOf( op1.getClass()) > typesBySize.indexOf( op2.getClass()))\n         {\n-            return wrapPrimitive( value, op1.getClass());\n+            return wrapPrimitive(value, op1.getClass());\n         }\n-        return wrapPrimitive( value, op2.getClass());\n+        return wrapPrimitive(value, op2.getClass());\n     }\n \n     /**\n@@ -267,6 +267,31 @@ private static int findCalculationBase (Number op1, Number op2)\n         return BASE_FLOAT;\n     }\n \n+    /**\n+     * Find the Number-type to be used for a single number\n+     *\n+     * @param op operand\n+     * @return constant indicating type of Number to use in calculations\n+     */\n+    public static int findCalculationBase(Number op)\n+    {\n+        if (isInteger(op))\n+        {\n+            if (op instanceof BigInteger)\n+            {\n+                return BASE_BIGINTEGER;\n+            }\n+            return BASE_LONG;\n+        } else if (op instanceof BigDecimal)\n+        {\n+            return BASE_BIGDECIMAL;\n+        } else if (op instanceof Double)\n+        {\n+            return BASE_DOUBLE;\n+        }\n+        return BASE_FLOAT;\n+    }\n+\n     /**\n      * Add two numbers and return the correct value / type.\n      * Overflow detection is done for integer values (byte, short, int, long) only!\n@@ -480,4 +505,35 @@ public static int compare (Number op1, Number op2) {\n                 return toBigDecimal( op1 ).compareTo( toBigDecimal ( op2 ));\n         }\n     }\n+\n+    /**\n+     * Negate a number\n+     * @param op n\n+     * @return -n (unary negation of n)\n+     */\n+    public static Number negate(Number op)\n+    {\n+        int calcBase = findCalculationBase( op);\n+        switch (calcBase) {\n+            case BASE_BIGINTEGER:\n+                return toBigInteger(op).negate();\n+            case BASE_LONG:\n+                long l = op.longValue();\n+                /* overflow check */\n+                if (l == Long.MIN_VALUE)\n+                {\n+                    return toBigInteger(l).negate();\n+                }\n+                return wrapPrimitive(-l, op.getClass());\n+            case BASE_FLOAT:\n+                float f = op.floatValue();\n+                return -f;\n+            case BASE_DOUBLE:\n+                double d = op.doubleValue();\n+                return -d;\n+            // Default is BigDecimal operation\n+            default:\n+                return toBigDecimal(op).negate();\n+        }\n+    }\n }", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/runtime/parser/node/MathUtils.java"}, {"additions": 0, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/MethodMap.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/MethodMap.java", "sha": "2e5380e2a7ac816e5564da13e23fccd45e5b426a", "changes": 2, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/MethodMap.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -19,8 +19,6 @@\n  * under the License.    \n  */\n \n-import org.apache.commons.lang3.Conversion;\n-\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Iterator;", "filename": "velocity-engine-core/src/main/java/org/apache/velocity/util/introspection/MethodMap.java"}, {"additions": 1, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/parser/Parser.jjt", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/main/parser/Parser.jjt", "sha": "759492e6797453ed9ef4a9a06da4001dbcc009ca", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/main/parser/Parser.jjt?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -2129,6 +2129,7 @@ void UnaryExpression() #void : {}\n     ( <WHITESPACE> | <NEWLINE> )*\n     (\n           <LOGICAL_NOT>  UnaryExpression() #NotNode(1)\n+     |   <MINUS> PrimaryExpression() #NegateNode(1)\n       |   PrimaryExpression()\n     )\n }", "filename": "velocity-engine-core/src/main/parser/Parser.jjt"}, {"additions": 39, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/test/java/org/apache/velocity/test/ArithmeticTestCase.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/test/java/org/apache/velocity/test/ArithmeticTestCase.java", "sha": "1eb1f627efcb71aa229e1a774ae0260498858a62", "changes": 60, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/test/java/org/apache/velocity/test/ArithmeticTestCase.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -64,8 +64,8 @@ public void testAdd()\n     private void addHelper (Number n1, Number n2, double expectedResult, Class expectedResultType)\n     {\n         Number result = MathUtils.add( n1, n2);\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n-        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals(\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n     public void testSubtract()\n@@ -79,15 +79,15 @@ public void testSubtract()\n \n         // Test overflow\n         subtractHelper (new Integer(Integer.MIN_VALUE), new Short( (short)20), (double)Integer.MIN_VALUE-20, Long.class);\n-        subtractHelper (new Integer (-20), new Long(Long.MAX_VALUE), -20d-(double)Long.MAX_VALUE, BigInteger.class);\n-        subtractHelper (new Integer (Integer.MAX_VALUE), new Long(Long.MIN_VALUE), (double)Long.MAX_VALUE+(double)Integer.MAX_VALUE, BigInteger.class);\n+        subtractHelper(new Integer(-20), new Long(Long.MAX_VALUE), -20d - (double) Long.MAX_VALUE, BigInteger.class);\n+        subtractHelper(new Integer(Integer.MAX_VALUE), new Long(Long.MIN_VALUE), (double) Long.MAX_VALUE + (double) Integer.MAX_VALUE, BigInteger.class);\n     }\n \n     private void subtractHelper (Number n1, Number n2, double expectedResult, Class expectedResultType)\n     {\n         Number result = MathUtils.subtract( n1, n2);\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n-        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals(\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n     public void testMultiply()\n@@ -102,15 +102,15 @@ public void testMultiply()\n \n         // Test overflow\n         multiplyHelper (new Integer(Integer.MAX_VALUE), new Short( (short)10), (double)Integer.MAX_VALUE*10d, Long.class);\n-        multiplyHelper (new Integer(Integer.MAX_VALUE), new Short( (short)-10), (double)Integer.MAX_VALUE*-10d, Long.class);\n-        multiplyHelper (new Integer (20), new Long(Long.MAX_VALUE), 20d*(double)Long.MAX_VALUE, BigInteger.class);\n+        multiplyHelper(new Integer(Integer.MAX_VALUE), new Short((short) -10), (double) Integer.MAX_VALUE * -10d, Long.class);\n+        multiplyHelper(new Integer(20), new Long(Long.MAX_VALUE), 20d * (double) Long.MAX_VALUE, BigInteger.class);\n     }\n \n     private void multiplyHelper (Number n1, Number n2, double expectedResult, Class expectedResultType)\n     {\n         Number result = MathUtils.multiply( n1, n2);\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n-        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals(\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n     public void testDivide()\n@@ -120,23 +120,23 @@ public void testDivide()\n         divideHelper (BigInteger.valueOf(10), new Short( (short)2), 5, BigInteger.class);\n         divideHelper (new Integer(10), new Short( (short)4), 2, Integer.class);\n         divideHelper (new Integer(10), new Float( 2.5f), 4, Float.class);\n-        divideHelper (new Integer(10), new Double( 2.5), 4, Double.class);\n-        divideHelper (new Integer(10), new BigDecimal( 2.5), 4, BigDecimal.class);\n+        divideHelper(new Integer(10), new Double(2.5), 4, Double.class);\n+        divideHelper(new Integer(10), new BigDecimal(2.5), 4, BigDecimal.class);\n     }\n \n     private void divideHelper (Number n1, Number n2, double expectedResult, Class expectedResultType)\n     {\n         Number result = MathUtils.divide( n1, n2);\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n-        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals(\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n     public void testModulo()\n     {\n         moduloHelper (new Integer(10), new Short( (short)2), 0, Integer.class);\n         moduloHelper (new Byte((byte)10), new Short( (short)3), 1, Short.class);\n-        moduloHelper (BigInteger.valueOf(10), new Short( (short)4), 2, BigInteger.class);\n-        moduloHelper (new Integer(10), new Float( 5.5f), 4.5, Float.class);\n+        moduloHelper(BigInteger.valueOf(10), new Short((short) 4), 2, BigInteger.class);\n+        moduloHelper(new Integer(10), new Float(5.5f), 4.5, Float.class);\n \n         try\n         {\n@@ -152,8 +152,8 @@ public void testModulo()\n     private void moduloHelper (Number n1, Number n2, double expectedResult, Class expectedResultType)\n     {\n         Number result = MathUtils.modulo( n1, n2);\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n-        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals(\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n     public void testCompare()\n@@ -162,14 +162,32 @@ public void testCompare()\n         compareHelper (new Integer(10), new Short( (short)11), -1);\n         compareHelper (BigInteger.valueOf(10), new Short( (short)11), -1);\n         compareHelper (new Byte((byte)10), new Short( (short)3), 1);\n-        compareHelper (new Float(10), new Short( (short)11), -1);\n-        compareHelper (new Double(10), new Short( (short)11), -1);\n+        compareHelper(new Float(10), new Short((short) 11), -1);\n+        compareHelper(new Double(10), new Short((short) 11), -1);\n     }\n \n     private void compareHelper (Number n1, Number n2, int expectedResult)\n     {\n         int result = MathUtils.compare( n1, n2 );\n-        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result);\n+        assertEquals(\"The arithmetic operation produced an unexpected result.\", expectedResult, result);\n+    }\n+\n+    public void testNegate()\n+    {\n+        negateHelper(new Byte((byte) 1), -1, Byte.class);\n+        negateHelper(new Short((short) 1), -1, Short.class);\n+        negateHelper(new Integer(1), -1, Integer.class);\n+        negateHelper(new Long(1), -1, Long.class);\n+        negateHelper(BigInteger.valueOf(1), -1, BigInteger.class);\n+        negateHelper(BigDecimal.valueOf(1), -1, BigDecimal.class);\n+        negateHelper(new Long(Long.MIN_VALUE), BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.valueOf(1)).doubleValue(), BigInteger.class);\n+    }\n+\n+    private void negateHelper(Number n, double expectedResult, Class expectedResultType)\n+    {\n+        Number result = MathUtils.negate(n);\n+        assertEquals (\"The arithmetic operation produced an unexpected result.\", expectedResult, result.doubleValue(), 0.01);\n+        assertEquals (\"ResultType does not match.\", expectedResultType, result.getClass());\n     }\n \n /*", "filename": "velocity-engine-core/src/test/java/org/apache/velocity/test/ArithmeticTestCase.java"}, {"additions": 19, "raw_url": "https://github.com/apache/velocity-engine/raw/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/test/java/org/apache/velocity/test/SetTestCase.java", "blob_url": "https://github.com/apache/velocity-engine/blob/0b86f31301798ce9ca2d5c852168c2189e8241e8/velocity-engine-core/src/test/java/org/apache/velocity/test/SetTestCase.java", "sha": "854ee4e6f70042e20a211b3c09f94034d19be58a", "changes": 19, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/velocity-engine-core/src/test/java/org/apache/velocity/test/SetTestCase.java?ref=0b86f31301798ce9ca2d5c852168c2189e8241e8", "patch": "@@ -121,5 +121,24 @@ public void checkTemplate(String templateName) throws Exception\n         }\n     }\n \n+    public void testInvalidSet() throws Exception\n+    {\n+        /* the purpose of this test is to check that in case of error, the calculation of the\n+         literal representation of the expression, which is displayed in the logs, does not raise a null exception\n+          */\n+        assertEvalEquals(\"\", \"#set($c = $a - $b - $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a + $b + $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a * $b * $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a / $b / $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a % $b % $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a && $b && $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a || $b || $c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a + $b + !$c)\");\n+        assertEvalEquals(\"\", \"#set($c = $a + $b + (-$c))\");\n+        assertEvalEquals(\"\", \"#set($c = $a && ($b < $c))\");\n+        assertEvalEquals(\"\", \"#set($c = !$a)\");\n+        assertEvalEquals(\"\", \"#set($c = ($a < $b) - ($c < $d))\");\n+        assertEvalEquals(\"\",\"#set($b = !$a)\");\n+    }\n }\n ", "filename": "velocity-engine-core/src/test/java/org/apache/velocity/test/SetTestCase.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/3d8628a709f23c1e2560a687086e6995e77fdf13", "parent": "https://github.com/apache/velocity-engine/commit/69f281e8ee3718e96dc2eea45b0796fde15fcbb1", "message": "Throw more user-friendly exception when init() has not been called (as opposed to arbitrary NPE's from deep in the code)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/core/trunk@321297 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_24", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/app/Velocity.java", "blob_url": "https://github.com/apache/velocity-engine/blob/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/app/Velocity.java", "sha": "13011f65b236570f914dd9525991b3371f36a170", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/app/Velocity.java?ref=3d8628a709f23c1e2560a687086e6995e77fdf13", "patch": "@@ -207,6 +207,14 @@ public static boolean evaluate( Context context, Writer writer,\n         throws ParseErrorException, MethodInvocationException,\n             ResourceNotFoundException, IOException\n     {\n+        /**\n+         * Check to see the engine was initialized.\n+         */\n+        if (!RuntimeSingleton.isInitialized()) \n+        {\n+            throw new IllegalStateException (\"Cannot evaluate string as Velocity has not been initialized.\");\n+        }\n+        \n         /*\n          *  first, parse - convert ParseException if thrown\n          */", "filename": "src/java/org/apache/velocity/app/Velocity.java"}, {"additions": 33, "raw_url": "https://github.com/apache/velocity-engine/raw/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/app/VelocityEngine.java", "blob_url": "https://github.com/apache/velocity-engine/blob/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/app/VelocityEngine.java", "sha": "11cfae940522da326adbed694047bbe292c2b408", "changes": 33, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/app/VelocityEngine.java?ref=3d8628a709f23c1e2560a687086e6995e77fdf13", "patch": "@@ -241,6 +241,14 @@ public boolean evaluate( Context context, Writer writer,\n         throws ParseErrorException, MethodInvocationException,\n             ResourceNotFoundException, IOException\n     {\n+        /**\n+         * Check to see the engine was initialized.\n+         */\n+        if (!ri.isInitialized()) \n+        {\n+            throw new IllegalStateException (\"Cannot evaluate string as Velocity has not been initialized.\");\n+        }\n+        \n         /*\n          *  first, parse - convert ParseException if thrown\n          */\n@@ -284,6 +292,15 @@ public boolean evaluate(Context context, Writer writer,\n         throws ParseErrorException, MethodInvocationException,\n             ResourceNotFoundException,IOException\n     {\n+\n+        /**\n+         * Check to see the engine was initialized.\n+         */\n+        if (!ri.isInitialized()) \n+        {\n+            throw new IllegalStateException (\"Cannot evaluate string as Velocity has not been initialized.\");\n+        }\n+                \n         SimpleNode nodeTree = null;\n \n         try\n@@ -448,6 +465,14 @@ public boolean mergeTemplate( String templateName, String encoding,\n                                       Context context, Writer writer )\n         throws ResourceNotFoundException, ParseErrorException, MethodInvocationException, Exception\n     {\n+        /**\n+         * Check to see the engine was initialized.\n+         */\n+        if (!ri.isInitialized()) \n+        {\n+            throw new IllegalStateException (\"Cannot merge template as Velocity has not been initialized.\");\n+        }\n+        \n         Template template = ri.getTemplate(templateName, encoding);\n \n         if ( template == null )\n@@ -478,6 +503,14 @@ public boolean mergeTemplate( String templateName, String encoding,\n     public Template getTemplate(String name)\n         throws ResourceNotFoundException, ParseErrorException, Exception\n     {\n+        /**\n+         * Check to see the engine was initialized.\n+         */\n+        if (!ri.isInitialized()) \n+        {\n+            throw new IllegalStateException (\"Cannot get template as Velocity has not been initialized.\");\n+        }\n+        \n         return ri.getTemplate( name );\n     }\n ", "filename": "src/java/org/apache/velocity/app/VelocityEngine.java"}, {"additions": 9, "raw_url": "https://github.com/apache/velocity-engine/raw/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeInstance.java", "blob_url": "https://github.com/apache/velocity-engine/blob/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeInstance.java", "sha": "e0bdd03f5355c5f6732a36328062bd10955cc9f5", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/RuntimeInstance.java?ref=3d8628a709f23c1e2560a687086e6995e77fdf13", "patch": "@@ -246,7 +246,15 @@ public synchronized void init()\n         }\n     }\n \n-\n+    /**\n+     * Returns true if the RuntimeInstance has been successfully initialized.\n+     * @return\n+     */\n+    public boolean isInitialized()\n+    {\n+        return initialized;\n+    }\n+    \n     /**\n      *  Gets the classname for the Uberspect introspection package and\n      *  instantiates an instance.", "filename": "src/java/org/apache/velocity/runtime/RuntimeInstance.java"}, {"additions": 7, "raw_url": "https://github.com/apache/velocity-engine/raw/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeServices.java", "blob_url": "https://github.com/apache/velocity-engine/blob/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeServices.java", "sha": "9667bb1882bf759bcc13bd0b09e6a23507612d3a", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/RuntimeServices.java?ref=3d8628a709f23c1e2560a687086e6995e77fdf13", "patch": "@@ -353,4 +353,11 @@ public boolean addVelocimacro( String name,\n      * implemenation.\n      */\n     public Introspector getIntrospector();\n+    \n+    /**\n+     * Returns true if the RuntimeInstance has been successfully initialized.\n+     * @return\n+     */\n+    public boolean isInitialized();\n+\n }", "filename": "src/java/org/apache/velocity/runtime/RuntimeServices.java"}, {"additions": 9, "raw_url": "https://github.com/apache/velocity-engine/raw/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeSingleton.java", "blob_url": "https://github.com/apache/velocity-engine/blob/3d8628a709f23c1e2560a687086e6995e77fdf13/src/java/org/apache/velocity/runtime/RuntimeSingleton.java", "sha": "f0eaf09fca288f33feabe2ff3adc2b115dde6c0e", "changes": 10, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/RuntimeSingleton.java?ref=3d8628a709f23c1e2560a687086e6995e77fdf13", "patch": "@@ -26,7 +26,6 @@\n import org.apache.velocity.exception.ResourceNotFoundException;\n import org.apache.velocity.runtime.directive.Directive;\n import org.apache.velocity.runtime.parser.ParseException;\n-import org.apache.velocity.runtime.parser.Parser;\n import org.apache.velocity.runtime.parser.node.SimpleNode;\n import org.apache.velocity.runtime.resource.ContentResource;\n import org.apache.velocity.util.introspection.Introspector;\n@@ -108,6 +107,15 @@ public synchronized static void init()\n         ri.init();\n     }\n \n+    /**\n+     * Returns true if the RuntimeSingleton has been successfully initialized.\n+     * @return\n+     */\n+    public static boolean isInitialized()\n+    {\n+        return ri.isInitialized();\n+    }\n+\n     /**\n      * @return The RuntimeInstance used by this wrapper.\n      */", "filename": "src/java/org/apache/velocity/runtime/RuntimeSingleton.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/97255caf59efc30c410697022532ba3713236df2", "parent": "https://github.com/apache/velocity-engine/commit/e6f0a351fdef303930c804ea679e9c08b9980325", "message": "Fix to jon steven's bug : a vm in stringlit as arg to vm would cause NPE.\n\nWill let him test and then commit to the 1.3 branch as well.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@75647 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_25", "file": [{"additions": 12, "raw_url": "https://github.com/apache/velocity-engine/raw/97255caf59efc30c410697022532ba3713236df2/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java", "blob_url": "https://github.com/apache/velocity-engine/blob/97255caf59efc30c410697022532ba3713236df2/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java", "sha": "5f59ab44a869ab757272ff1c2a05eeaeb2638c4b", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/directive/VMProxyArg.java?ref=97255caf59efc30c410697022532ba3713236df2", "patch": "@@ -61,6 +61,7 @@\n \n import org.apache.velocity.context.Context;\n import org.apache.velocity.context.InternalContextAdapter;\n+import org.apache.velocity.context.InternalContextAdapterImpl;\n import org.apache.velocity.runtime.RuntimeServices;\n import org.apache.velocity.runtime.parser.node.Node;\n import org.apache.velocity.runtime.parser.node.ASTReference;\n@@ -70,6 +71,7 @@\n import org.apache.velocity.util.StringUtils;\n \n import org.apache.velocity.exception.MethodInvocationException;\n+import org.apache.velocity.VelocityContext;\n \n /**\n  *  The function of this class is to proxy for the calling parameter to the VM.\n@@ -113,7 +115,7 @@\n  *  into a local context.\n  *  \n  *  @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- *  @version $Id: VMProxyArg.java,v 1.11 2002/02/28 05:24:24 geirm Exp $ \n+ *  @version $Id: VMProxyArg.java,v 1.12 2002/03/26 15:14:53 geirm Exp $ \n  */\n public class VMProxyArg\n {\n@@ -402,7 +404,7 @@ private void setup()\n                 \n                 constant = false;\n \n-                try \n+                try\n                 {\n                     /*\n                      *  fakie : wrap in  directive to get the parser to treat our args as args\n@@ -435,10 +437,16 @@ private void setup()\n                     }\n \n                     /*\n-                     *  init.  We can do this as they are only references\n+                     *  init.  be a good citizen and give it an ICA\n                      */\n \n-                    nodeTree.init(null, rsvc);\n+                    InternalContextAdapter ica\n+                            = new InternalContextAdapterImpl(new VelocityContext());\n+\n+                    ica.pushCurrentTemplateName(\"VMProxyArg : \"\n+                            + ParserTreeConstants.jjtNodeName[type]);\n+\n+                    nodeTree.init(ica, rsvc);\n                 } \n                 catch ( Exception e ) \n                 {", "filename": "src/java/org/apache/velocity/runtime/directive/VMProxyArg.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/d7e1b15de1e8cb7daae0095caea6f72010cd67d1", "parent": "https://github.com/apache/velocity-engine/commit/2a21354db1dfc8cf98e987a3e8420a79ed5d5e5f", "message": "Didn't seem to go the first time :)\n\nResourceManager : prevented a NPE and added log msg when the 'class' is\nnot set for a resource loader\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@74967 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_26", "file": [{"additions": 23, "raw_url": "https://github.com/apache/velocity-engine/raw/d7e1b15de1e8cb7daae0095caea6f72010cd67d1/src/java/org/apache/velocity/runtime/resource/ResourceManager.java", "blob_url": "https://github.com/apache/velocity-engine/blob/d7e1b15de1e8cb7daae0095caea6f72010cd67d1/src/java/org/apache/velocity/runtime/resource/ResourceManager.java", "sha": "a355a87eae5500c35f53be8c740032f0429ca3b8", "changes": 24, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/ResourceManager.java?ref=d7e1b15de1e8cb7daae0095caea6f72010cd67d1", "patch": "@@ -81,7 +81,7 @@\n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"mailto:paulo.gaspar@krankikom.de\">Paulo Gaspar</a>\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Id: ResourceManager.java,v 1.27 2001/05/11 04:00:29 geirm Exp $\n+ * @version $Id: ResourceManager.java,v 1.28 2001/05/15 13:26:26 geirm Exp $\n  */\n public class ResourceManager\n {\n@@ -95,6 +95,11 @@\n      */\n     public static final int RESOURCE_CONTENT = 2;\n \n+    /**\n+     * token used to identify the loader internally\n+     */\n+    private static final String RESOURCE_LOADER_IDENTIFIER = \"_RESOURCE_LOADER_IDENTIFIER_\";\n+\n     /**\n      * Hashtable used to store templates that have been\n      * processed. Our simple caching mechanism.\n@@ -153,6 +158,15 @@ public static void initialize() throws Exception\n             ExtendedProperties configuration = (ExtendedProperties) sourceInitializerList.get(i);\n             String loaderClass = configuration.getString(\"class\");\n \n+            if ( loaderClass == null)\n+            {\n+                Runtime.error(  \"Unable to find '\"\n+                                + configuration.getString(RESOURCE_LOADER_IDENTIFIER)\n+                                + \".resource.loader.class' specification in configuation.\"\n+                                + \" This is a critical value.  Please adjust configuration.\");\n+                continue;\n+            }\n+\n             resourceLoader = ResourceLoaderFactory.getLoader(loaderClass);\n             resourceLoader.commonInit(configuration);\n             resourceLoader.init(configuration);\n@@ -194,6 +208,14 @@ private static void assembleResourceLoaderInitializers()\n             ExtendedProperties loaderConfiguration =\n                 Runtime.getConfiguration().subset(loaderID);\n \n+            /*\n+             *  add the loader name token to the initializer if we need it\n+             *  for reference later. We can't count on the user to fill\n+             *  in the 'name' field\n+             */\n+\n+            loaderConfiguration.setProperty( RESOURCE_LOADER_IDENTIFIER, resourceLoaderNames.get(i));\n+\n             /*\n              * Add resources to the list of resource loader\n              * initializers.", "filename": "src/java/org/apache/velocity/runtime/resource/ResourceManager.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/bdffc6f14ad8db85106091f89d6810e7a31f417c", "parent": "https://github.com/apache/velocity-engine/commit/35c20b5f0d7a47c2a219bd89c6e45f08ab0ebbd9", "message": "added documentation\nfixed javadocs\ncreate a new hashtable for the directives to prevent possible NPE\ncreate a way for parser exceptions to be properly logged, not just for debugging. :-)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@73619 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_27", "file": [{"additions": 31, "raw_url": "https://github.com/apache/velocity-engine/raw/bdffc6f14ad8db85106091f89d6810e7a31f417c/src/java/org/apache/velocity/runtime/parser/Parser.jjt", "blob_url": "https://github.com/apache/velocity-engine/blob/bdffc6f14ad8db85106091f89d6810e7a31f417c/src/java/org/apache/velocity/runtime/parser/Parser.jjt", "sha": "89de22f427d985c4870a269c0f624258139fa759", "changes": 53, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/Parser.jjt?ref=bdffc6f14ad8db85106091f89d6810e7a31f417c", "patch": "@@ -113,8 +113,10 @@ package org.apache.velocity.runtime.parser;\n import java.io.*;\n import java.util.*;\n \n+import org.apache.velocity.runtime.Runtime;\n import org.apache.velocity.runtime.parser.node.*;\n import org.apache.velocity.runtime.directive.Directive;\n+import org.apache.velocity.util.StringUtils;\n \n /**\n  * This class is responsible for parsing a Velocity\n@@ -127,15 +129,16 @@ import org.apache.velocity.runtime.directive.Directive;\n  *\n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Id: Parser.jjt,v 1.25 2000/11/07 21:29:37 geirm Exp $ \n+ * @version $Id: Parser.jjt,v 1.26 2000/11/08 02:28:38 jon Exp $ \n */\n public class Parser\n {\n+    /**\n+     *  This Hashtable contains a list of all of the dynamic directives.\n+     */\n+    private Hashtable directives = new Hashtable(0);\n     \n-    \n-    Hashtable directives;\n-    \n-    /* This was added to allow the parser to be associated\n+    /** This was added to allow the parser to be associated\n      * with a particular syntax. JavaCC doesn't generate\n      * a constructor without parameters. The normal constructor\n      * takes a single argument which an InputStream. But in\n@@ -149,7 +152,7 @@ public class Parser\n         this(new ByteArrayInputStream(\"\\n\".getBytes()));\n     }\n \n-    /* This was also added to allow parsers to be dynamically\n+    /** This was also added to allow parsers to be dynamically\n      * loadable.\n      * \n      * Taken from the generated constructor in Parser.java.\n@@ -165,33 +168,39 @@ public class Parser\n      */\n     public SimpleNode parse(InputStream stream) throws ParseException\n     {\n-        token_source.clearStateVars();\n-        ReInit(stream);  \n-        return process();\n-\n-        /*\n-         * leave the following. Useful for debugging the parser.  thx - geir\n-         */\n-\n-       //SimpleNode n = null;\n-       //\n-       // try {\n-       //     n = process();\n-       // } catch (Exception e ) { System.out.println( e ); }   \n-       //  \n-       // return n;\n+        SimpleNode sn = null;\n+        try\n+        {\n+            token_source.clearStateVars();\n+            ReInit(stream);\n+            n = process();\n+        }\n+        catch (Exception e )\n+        {\n+            Runtime.error (\"Parser Error: \" + StringUtils.stackTrace(e));\n+        }\n+        return sn;\n     }        \n-\n+    /**\n+     *  This method sets the directives Hashtable\n+     */\n     public void setDirectives(Hashtable directives)\n     {\n         this.directives = directives;\n     }\n \n+    /**\n+     *  This method gets the directives Hashtable\n+     */\n     public Directive getDirective(String directive)\n     {\n         return (Directive) directives.get(directive);\n     }\n \n+    /**\n+     *  This method finds out of the directive exists in the directives \n+     *  Hashtable.\n+     */\n     public boolean isDirective(String directive)\n     {\n         if (directives.containsKey(directive))", "filename": "src/java/org/apache/velocity/runtime/parser/Parser.jjt"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/334846cd7d43ee06fa44a47598e766cac5bab56d", "parent": "https://github.com/apache/velocity-engine/commit/dc7cf327166b3977ac197a6e6d135ea10d6e5125", "message": "- if introspection fails pass null back to ASTReference so that we don't get\n  an NPE, and so that a ReferenceException will be logged by ASTReference.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@73499 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_28", "file": [{"additions": 4, "raw_url": "https://github.com/apache/velocity-engine/raw/334846cd7d43ee06fa44a47598e766cac5bab56d/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java", "blob_url": "https://github.com/apache/velocity-engine/blob/334846cd7d43ee06fa44a47598e766cac5bab56d/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java", "sha": "c158d59f3bfd768dc55e964243ec9bf5cebeb123", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java?ref=334846cd7d43ee06fa44a47598e766cac5bab56d", "patch": "@@ -49,9 +49,11 @@ public Object init(Context context, Object data)\n         for (int j = 0; j < paramCount; j++)\n             params[j] = jjtGetChild(j + 1).value(context);\n \n-        //method = Introspector.getMethod((Class) data, methodName, paramCount);\n         method = Introspector.getMethod((Class) data, methodName, params);\n-\n+        \n+        if (method == null)\n+            return null;\n+        \n         return method.getReturnType();\n     }\n     ", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTMethod.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/ab63fe3d1a8249e8574ce0e0339f1db8551fb981", "parent": "https://github.com/apache/velocity-engine/commit/d2b455cdb6b53c5d9bef36450aebf21428117597", "message": "Added Dan Finkelstein <dan.finkelstein@bluescope.com> patch to\nstop the NPE's when a resource loader name is listed\n\nresource.loader = foo\n\nbut there are no\n\n  foo.resource.loader.xxxx\n\nproperties.  The manager just ignores it and moves on to the next one\nafter logging a warning.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@75480 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_29", "file": [{"additions": 12, "raw_url": "https://github.com/apache/velocity-engine/raw/ab63fe3d1a8249e8574ce0e0339f1db8551fb981/src/java/org/apache/velocity/runtime/resource/ResourceManagerImpl.java", "blob_url": "https://github.com/apache/velocity-engine/blob/ab63fe3d1a8249e8574ce0e0339f1db8551fb981/src/java/org/apache/velocity/runtime/resource/ResourceManagerImpl.java", "sha": "9180e8c1cd87ae1f7b1c71925a8036b9a66c4e23", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/ResourceManagerImpl.java?ref=ab63fe3d1a8249e8574ce0e0339f1db8551fb981", "patch": "@@ -83,7 +83,7 @@\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n  * @author <a href=\"mailto:paulo.gaspar@krankikom.de\">Paulo Gaspar</a>\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Id: ResourceManagerImpl.java,v 1.1 2001/11/06 03:22:00 geirm Exp $\n+ * @version $Id: ResourceManagerImpl.java,v 1.2 2001/12/06 23:55:38 geirm Exp $\n  */\n public class ResourceManagerImpl implements ResourceManager\n {\n@@ -280,6 +280,17 @@ private void assembleResourceLoaderInitializers()\n             ExtendedProperties loaderConfiguration =\n                 rsvc.getConfiguration().subset(loaderID);\n \n+            /*\n+             *  we can't really count on ExtendedProperties to give us an empty set\n+             */\n+\n+            if ( loaderConfiguration == null)\n+            {\n+                rsvc.warn(\"ResourceManager : No configuration information for resource loader named '\" \n+                          + resourceLoaderNames.get(i) + \"'. Skipping.\");\n+                continue;\n+            }\n+\n             /*\n              *  add the loader name token to the initializer if we need it\n              *  for reference later. We can't count on the user to fill", "filename": "src/java/org/apache/velocity/runtime/resource/ResourceManagerImpl.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/783cd1ed0036077074870cce129726199a01b1bf", "parent": "https://github.com/apache/velocity-engine/commit/96d107128a311513fefcf0a0ac1629edcbaaf022", "message": "A few things :\n- Added checks to ensure that args to math ops are not null (catch those pesky NPE's)\n- Put in log messages to tell user what is going on when math doesn't go as expected.\n- Contrained math operations to integers only (for now).\n- Did div0 checks for mod and division.\n- Added license info.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@74046 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_30", "file": [{"additions": 113, "raw_url": "https://github.com/apache/velocity-engine/raw/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java", "sha": "ce9454ad8623e37e6d55c8c498a5db228db8ad3d", "changes": 116, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java?ref=783cd1ed0036077074870cce129726199a01b1bf", "patch": "@@ -1,9 +1,76 @@\n /* Generated By:JJTree: Do not edit this line. ASTAddNode.java */\n \n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2000 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+\n+/**\n+ * Handles integer addition of nodes\n+ *\n+ * Please look at the Parser.jjt file which is\n+ * what controls the generation of this class.\n+ *\n+ * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @version $Id: ASTAddNode.java,v 1.2 2000/12/27 14:31:52 geirm Exp $ \n+*/\n+\n package org.apache.velocity.runtime.parser.node;\n \n import org.apache.velocity.Context;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.Runtime;\n+import org.apache.velocity.runtime.parser.Parser;\n \n public class ASTAddNode extends SimpleNode\n {\n@@ -23,10 +90,53 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n         return visitor.visit(this, data);\n     }\n \n+    /**\n+     *  computes the sum of the two nodes.  Currently only integer operations are \n+     *  supported.\n+     *  @return Integer object with value, or null\n+     */\n     public Object value(Context context)\n     {\n-        return new Integer(((Integer) jjtGetChild(0).value(context)).intValue() +\n-            ((Integer) jjtGetChild(1).value(context)).intValue());\n+        /*\n+         *  get the two addends\n+         */\n+\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of addition operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return null;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of addition operation is not a valid type. \"\n+                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        return new Integer( ( (Integer) left ).intValue() + (  (Integer) right ).intValue() );\n     }\n \n }\n+\n+\n+\n+", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTAddNode.java"}, {"additions": 122, "raw_url": "https://github.com/apache/velocity-engine/raw/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java", "sha": "4a2b49d7392f93b2e2a07e5162e10c4b9dd5f8d1", "changes": 126, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java?ref=783cd1ed0036077074870cce129726199a01b1bf", "patch": "@@ -1,9 +1,76 @@\n /* Generated By:JJTree: Do not edit this line. ASTDivNode.java */\n \n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2000 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+\n+/**\n+ * Handles integer division of nodes\n+ *\n+ * Please look at the Parser.jjt file which is\n+ * what controls the generation of this class.\n+ *\n+ * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @version $Id: ASTDivNode.java,v 1.2 2000/12/27 14:31:53 geirm Exp $ \n+*/\n+\n package org.apache.velocity.runtime.parser.node;\n \n import org.apache.velocity.Context;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.Runtime;\n+import org.apache.velocity.runtime.parser.Parser;\n \n public class ASTDivNode extends SimpleNode\n {\n@@ -23,10 +90,61 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n         return visitor.visit(this, data);\n     }\n \n+    /**\n+     *  computes the result of the division. Currently limited to\n+     *  Integers.\n+     *  @return Integer(value) or null \n+     */\n     public Object value(Context context)\n     {\n-        return new Integer(((Integer) jjtGetChild(0).value(context)).intValue() /\n-            ((Integer) jjtGetChild(1).value(context)).intValue());\n-    }\n+        /*\n+         *  get the two args\n+         */\n+\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n \n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of division operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return null;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of division operation is not a valid type. \"\n+                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        /*\n+         *  check for divide by 0\n+         */\n+\n+        if ( ( (Integer) right).intValue() == 0 )\n+        {\n+            Runtime.error( \"Right side of division operation is zero. Must be non-zero. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        return new Integer( ( (Integer) left ).intValue() / (  (Integer) right ).intValue() );\n+    }\n }", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTDivNode.java"}, {"additions": 122, "raw_url": "https://github.com/apache/velocity-engine/raw/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTModNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTModNode.java", "sha": "aaca5f900da448018348b537149b6dde81ac43e2", "changes": 123, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTModNode.java?ref=783cd1ed0036077074870cce129726199a01b1bf", "patch": "@@ -1,8 +1,75 @@\n /* Generated By:JJTree: Do not edit this line. ASTModNode.java */\n \n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2000 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+\n+/**\n+ * Handles integer modulus division\n+ *\n+ * Please look at the Parser.jjt file which is\n+ * what controls the generation of this class.\n+ *\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @version $Id: ASTModNode.java,v 1.2 2000/12/27 14:31:53 geirm Exp $ \n+*/\n+\n package org.apache.velocity.runtime.parser.node;\n \n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.Context;\n+import org.apache.velocity.runtime.Runtime;\n+import org.apache.velocity.runtime.parser.Parser;\n \n public class ASTModNode extends SimpleNode\n {\n@@ -21,4 +88,58 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n     {\n         return visitor.visit(this, data);\n     }\n+\n+    public Object value(Context context)\n+    {\n+        /*\n+         *  get the two args\n+         */\n+\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of modulus operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return null;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of modulus operation is not a valid type. \"\n+                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        /*\n+         *  check for divide by 0\n+         */\n+\n+        if ( ( (Integer) right).intValue() == 0 )\n+        {\n+            Runtime.error( \"Right side of modulus operation is zero. Must be non-zero. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        return new Integer( ( (Integer) left ).intValue() % (  (Integer) right ).intValue() );\n+    }\n }\n+", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTModNode.java"}, {"additions": 111, "raw_url": "https://github.com/apache/velocity-engine/raw/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java", "sha": "a7c84c27202112cabea0ec320e95aa3fa5cdfaa1", "changes": 116, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java?ref=783cd1ed0036077074870cce129726199a01b1bf", "patch": "@@ -1,9 +1,75 @@\n /* Generated By:JJTree: Do not edit this line. ASTMulNode.java */\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2000 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+\n+/**\n+ * Handles integer multiplication\n+ *\n+ * Please look at the Parser.jjt file which is\n+ * what controls the generation of this class.\n+ *\n+ * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @version $Id: ASTMulNode.java,v 1.2 2000/12/27 14:31:53 geirm Exp $ \n+*/\n \n package org.apache.velocity.runtime.parser.node;\n \n import org.apache.velocity.Context;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.Runtime;\n+import org.apache.velocity.runtime.parser.Parser;\n \n public class ASTMulNode extends SimpleNode\n {\n@@ -23,10 +89,50 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n         return visitor.visit(this, data);\n     }\n \n-    public Object value(Context context)\n+    /**\n+     *  computes the product of the two args.  Returns null if either arg is null\n+     *  or if either arg is not an integer\n+     */\n+    public Object value( Context context )\n     {\n-        return new Integer(((Integer) jjtGetChild(0).value(context)).intValue() *\n-            ((Integer) jjtGetChild(1).value(context)).intValue());\n-    }\n+        /*\n+         *  get the two args\n+         */\n+\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of multiplication operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return null;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n \n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of multiplication operation is not a valid type. \"\n+                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        return new Integer( ( (Integer) left ).intValue() * (  (Integer) right ).intValue() );\n+    }\n }\n+\n+\n+", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTMulNode.java"}, {"additions": 111, "raw_url": "https://github.com/apache/velocity-engine/raw/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java", "blob_url": "https://github.com/apache/velocity-engine/blob/783cd1ed0036077074870cce129726199a01b1bf/src/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java", "sha": "24d45faba7809f2258edd4f5420f799c5e73e5dc", "changes": 114, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java?ref=783cd1ed0036077074870cce129726199a01b1bf", "patch": "@@ -1,9 +1,76 @@\n /* Generated By:JJTree: Do not edit this line. ASTSubtractNode.java */\n \n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2000 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Tomcat\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+\n+/**\n+ * Handles integer subtraction of nodes (in #set() )\n+ *\n+ * Please look at the Parser.jjt file which is\n+ * what controls the generation of this class.\n+ *\n+ * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @version $Id: ASTSubtractNode.java,v 1.2 2000/12/27 14:31:54 geirm Exp $ \n+*/\n+\n package org.apache.velocity.runtime.parser.node;\n \n import org.apache.velocity.Context;\n-import org.apache.velocity.runtime.parser.*;\n+import org.apache.velocity.runtime.Runtime;\n+import org.apache.velocity.runtime.parser.Parser;\n \n public class ASTSubtractNode extends SimpleNode\n {\n@@ -23,9 +90,50 @@ public Object jjtAccept(ParserVisitor visitor, Object data)\n         return visitor.visit(this, data);\n     }\n \n+    /**\n+     *  computes the value of the subtraction.  Currently\n+     *  limited to integers\n+     *  @return Integer(value) or null\n+     */\n     public Object value(Context context)\n     {\n-        return new Integer(((Integer) jjtGetChild(0).value(context)).intValue() -\n-            ((Integer) jjtGetChild(1).value(context)).intValue());\n+        /*\n+         *  get the two args\n+         */\n+\n+        Object left = jjtGetChild(0).value( context );\n+        Object right = jjtGetChild(1).value( context );\n+\n+        /*\n+         *  if either is null, lets log and bail\n+         */\n+\n+        if (left == null || right == null)\n+        {\n+            Runtime.error( ( left == null ? \"Left\" : \"Right\" ) + \" side of subtraction operation has null value.\"\n+                           + \" Operation not possible. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+            return null;\n+        }\n+        \n+        /*\n+         *  if not an Integer, not much we can do either\n+         */\n+\n+        if ( !( left instanceof Integer )  || !( right instanceof Integer ))\n+        {\n+            Runtime.error( ( !( left instanceof Integer ) ? \"Left\" : \"Right\" ) \n+                           + \" side of subtraction operation is not a valid type. \"\n+                           + \"Currently only integers (1,2,3...) and Integer type is supported. \"\n+                           + context.getCurrentTemplateName() + \" [line \" + getLine() \n+                           + \", column \" + getColumn() + \"]\");\n+ \n+            return null;\n+        }\n+\n+        return new Integer( ( (Integer) left ).intValue() - (  (Integer) right ).intValue() );\n     }\n }\n+\n+", "filename": "src/java/org/apache/velocity/runtime/parser/node/ASTSubtractNode.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/cc241a8d5d4c535062252187d28f5cb29756fdd2", "parent": "https://github.com/apache/velocity-engine/commit/0c17c380980a9e40cef1e558e09296ae4ab381c0", "message": "- if a texen task is defined as follows:\n\n  <torque-sql\n    contextProperties=\"${build.properties}\"\n    controlTemplate=\"${SQLControlTemplate}\"\n    outputDirectory=\"${src.dir}/sql\"\n    templatePath=\"${templatePath}\"\n    outputFile=\"report.${project}.sql.generation\"\n    xmlFile=\"${conf.dir}/${project}-schema.xml\"\n    targetDatabase=\"${database}\"\n  />\n\n  we are now protecting against the contextProperties attribute\n  not being set. if this attribute was null it was throwing an NPE\n  but the task reported success.\n\n  we will now throw a BuildException if the resource represented by\n  the contextProperties attribute cannot be found in the file system\n  or on the classpath.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@75291 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_31", "file": [{"additions": 11, "raw_url": "https://github.com/apache/velocity-engine/raw/cc241a8d5d4c535062252187d28f5cb29756fdd2/src/java/org/apache/velocity/texen/ant/TexenTask.java", "blob_url": "https://github.com/apache/velocity-engine/blob/cc241a8d5d4c535062252187d28f5cb29756fdd2/src/java/org/apache/velocity/texen/ant/TexenTask.java", "sha": "6e165ceebb045ab03b209eef735608d498701959", "changes": 18, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/texen/ant/TexenTask.java?ref=cc241a8d5d4c535062252187d28f5cb29756fdd2", "patch": "@@ -58,35 +58,30 @@\n import java.util.Hashtable;\n import java.util.Iterator;\n import java.util.Map;\n-\n import java.io.File;\n import java.io.FileWriter;\n import java.io.FileOutputStream;\n import java.io.FileInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n-\n import org.apache.tools.ant.BuildException;\n import org.apache.tools.ant.Task;\n-\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.Velocity;\n import org.apache.velocity.context.Context;\n import org.apache.velocity.texen.Generator;\n import org.apache.velocity.util.StringUtils;\n-\n import org.apache.velocity.exception.MethodInvocationException;\n import org.apache.velocity.exception.ParseErrorException;\n import org.apache.velocity.exception.ResourceNotFoundException;\n-\n import org.apache.commons.collections.ExtendedProperties;\n \n /**\n  * An ant task for generating output by using Velocity\n  *\n  * @author <a href=\"mailto:jvanzyl@periapt.com\">Jason van Zyl</a>\n  * @author <a href=\"robertdonkin@mac.com\">Robert Burrell Donkin</a>\n- * @version $Id: TexenTask.java,v 1.30 2001/08/31 20:18:24 jvanzyl Exp $\n+ * @version $Id: TexenTask.java,v 1.31 2001/09/18 13:59:58 jvanzyl Exp $\n  */\n public class TexenTask \n     extends Task\n@@ -277,7 +272,16 @@ public void setContextProperties( String file )\n             try\n             {\n                 InputStream inputStream = classLoader.getResourceAsStream(file);\n-                contextProperties.load(inputStream);\n+                \n+                if (inputStream == null)\n+                {\n+                    throw new BuildException(\"Context properties file \" + file + \" could \" +\n+                        \" not be found in the file system or on the classpath!\");\n+                }\n+                else\n+                {\n+                    contextProperties.load(inputStream);\n+                }\n             }\n             catch (IOException ioe)\n             {", "filename": "src/java/org/apache/velocity/texen/ant/TexenTask.java"}], "repo": "velocity-engine"}, {"commit": "https://github.com/apache/velocity-engine/commit/b332f9b1d3d43a75d0be68810e4e8996ec0890cb", "parent": "https://github.com/apache/velocity-engine/commit/1a6e4cf340c20b00cd4bed291856790c7406625c", "message": "ResourceManager : prevented a NPE and added log msg when the 'class' is\nnot set for a resource loader\n\nJarResourceLoader : small fixes - corrected the 'path' token such that\nit parallels the FileResourceLoader (there was an extra 'resource' tacked\non), as well as some small cleaning of log messages\n\nJarHolder : log cleanup, and small functional change to preven log message\nwhen resource not found - that shouldn't be a loggable error from\nthat low (I think).\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/velocity/trunk@74963 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "velocity-engine_32", "file": [{"additions": 8, "raw_url": "https://github.com/apache/velocity-engine/raw/b332f9b1d3d43a75d0be68810e4e8996ec0890cb/src/java/org/apache/velocity/runtime/resource/loader/JarHolder.java", "blob_url": "https://github.com/apache/velocity-engine/blob/b332f9b1d3d43a75d0be68810e4e8996ec0890cb/src/java/org/apache/velocity/runtime/resource/loader/JarHolder.java", "sha": "908513c83a9d1dc609c5e1dda32eabd0d5b853ee", "changes": 20, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/loader/JarHolder.java?ref=b332f9b1d3d43a75d0be68810e4e8996ec0890cb", "patch": "@@ -74,7 +74,7 @@\n  * A small wrapper around a Jar\n  *\n  * @author <a href=\"mailto:daveb@miceda-data.com\">Dave Bryson</a>\n- * @version $Id: JarHolder.java,v 1.5 2001/05/11 03:59:41 geirm Exp $\n+ * @version $Id: JarHolder.java,v 1.6 2001/05/15 13:10:30 geirm Exp $\n  */\n public class JarHolder\n {\n@@ -87,14 +87,14 @@ public JarHolder( String urlpath )\n         this.urlpath=urlpath;\n         init();\n         \n-        Runtime.info(\"Initialized JAR: \" + urlpath );\n+        Runtime.info(\"  JarHolder : initialized JAR: \" + urlpath );\n     }\n \n     public void init()\n     {\n         try\n         {\n-            Runtime.info(\"Attemting to connect to \"+ urlpath);\n+            Runtime.info(\"  JarHolder : attempting to connect to \"+ urlpath);\n             URL url = new URL( urlpath );\n             conn = (JarURLConnection) url.openConnection();\n             conn.setAllowUserInteraction(false);\n@@ -105,7 +105,7 @@ public void init()\n         } \n         catch (Exception e)\n         {\n-            Runtime.error(\"Error establishing connection to JAR \"+ e);\n+            Runtime.error(\"  JarHolder : error establishing connection to JAR \"+ e);\n         }\n     }\n \n@@ -117,12 +117,12 @@ public void close()\n         }\n         catch ( Exception e )\n         {\n-            Runtime.error(\"Error Closing JAR the file \" +  e);\n+            Runtime.error(\"  JarHolder : error Closing JAR the file \" +  e);\n         }\n         theJar = null;\n         conn = null;\n \n-        Runtime.info(\"JAR file closed\");\n+        Runtime.info(\"  JarHolder : JAR file closed\");\n     }\n     \n     public InputStream getResource( String theentry )\n@@ -133,18 +133,14 @@ public InputStream getResource( String theentry )\n         {\n             JarEntry entry = theJar.getJarEntry( theentry );\n             \n-            if (entry == null)\n-            {\n-                Runtime.error( \"JAR Entry NOT FOUND: \" + entry );\n-            }\n-            else\n+            if ( entry != null )\n             {                \n                 data =  theJar.getInputStream( entry );\n             }\n         }\n         catch( Exception fnfe )\n         {\n-            Runtime.error(\"FileResourceLoader Error : exception : \" + fnfe );\n+            Runtime.error(\"  JarHolder : getResource() error : exception : \" + fnfe );\n             throw new ResourceNotFoundException( fnfe.getMessage() );\n         }\n         ", "filename": "src/java/org/apache/velocity/runtime/resource/loader/JarHolder.java"}, {"additions": 37, "raw_url": "https://github.com/apache/velocity-engine/raw/b332f9b1d3d43a75d0be68810e4e8996ec0890cb/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java", "blob_url": "https://github.com/apache/velocity-engine/blob/b332f9b1d3d43a75d0be68810e4e8996ec0890cb/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java", "sha": "68c1dbc600c51cbe12927a5f4164b5177871e0bc", "changes": 46, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/velocity-engine/contents/src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java?ref=b332f9b1d3d43a75d0be68810e4e8996ec0890cb", "patch": "@@ -78,10 +78,34 @@\n import org.apache.commons.collections.ExtendedProperties;\n \n /**\n+ * <p>\n  * ResourceLoader to load templates from multiple Jar files.\n+ * </p>\n+ * <p>\n+ * The configuration of the JarResourceLoader is straightforward -\n+ * You simply add the JarResourceLoader to the configuration via\n+ * </p>\n+ * <p><pre>\n+ *    resource.loader = jar\n+ *    jar.resource.loader.class = org.apache.velocity.runtime.resource.loader.JarResourceLoader\n+ *    jar.resource.loader.path = list of JAR &lt;URL&gt;s\n+ * </pre></p>\n+ *\n+ * <p> So for example, if you had a jar file on your local filesystem, you could simply do\n+ *    <pre>\n+ *    jar.resource.loader.path = jar:file:/opt/myfiles/jar1.jar\n+ *    </pre>\n+ * </p>\n+ * <p> Note that jar specification for the <code>.path</code> configuration property\n+ * conforms to the same rules for the java.net.JarUrlConnection class.\n+ * </p>\n+ *\n+ * <p> For a working example, see the unit test case, \n+ *  org.apache.velocity.test.MultiLoaderTestCase class\n+ * </p>\n  * \n  * @author <a href=\"mailto:daveb@miceda-data.com\">Dave Bryson</a>\n- * @version $Id: JarResourceLoader.java,v 1.10 2001/05/11 03:59:41 geirm Exp $\n+ * @version $Id: JarResourceLoader.java,v 1.11 2001/05/15 13:10:33 geirm Exp $\n  */\n public class JarResourceLoader extends ResourceLoader\n {\n@@ -104,28 +128,32 @@\n      */\n     public void init( ExtendedProperties configuration)\n     {\n-        Vector paths = configuration.getVector(\"resource.path\");\n-        Runtime.info(\"PATHS SIZE= \" + paths.size() );\n+        Runtime.info(\"JarResourceLoader : initialization starting.\");\n+\n+        Vector paths = configuration.getVector(\"path\");\n+\n+        Runtime.info(\"JarResourceLoader # of paths : \" + paths.size() );\n         \n         for ( int i=0; i<paths.size(); i++ )\n         {\n             loadJar( (String)paths.get(i) );\n         }\n         \n-        Runtime.info(\"JarResourceLoader initialized...\");\n+        Runtime.info(\"JarResourceLoader : initialization complete.\");\n     }\n     \n     private void loadJar( String path )\n     {\n-        Runtime.info(\"Try to load: \" + path);\n+        Runtime.info(\"JarResourceLoader : trying to load: \" + path);\n+\n         // Check path information\n         if ( path == null )\n         {\n-            Runtime.error(\"Can not load a JAR - JAR path is null\");\n+            Runtime.error(\"JarResourceLoader : can not load JAR - JAR path is null\");\n         }\n         if ( !path.startsWith(\"jar:\") )\n         {\n-            Runtime.error(\"JAR path must start with jar: -> \" +\n+            Runtime.error(\"JarResourceLoader : JAR path must start with jar: -> \" +\n                 \"see java.net.JarURLConnection for information\");\n         }\n         if ( !path.endsWith(\"!/\") )\n@@ -190,11 +218,11 @@ public synchronized InputStream getResourceStream( String source )\n         \n         if ( normalizedPath == null || normalizedPath.length() == 0 )\n         {\n-            String msg = \"File resource error : argument \" + normalizedPath + \n+            String msg = \"JAR resource error : argument \" + normalizedPath + \n                 \" contains .. and may be trying to access \" + \n                 \"content outside of template root.  Rejected.\";\n             \n-            Runtime.error( \"FileResourceLoader : \" + msg );\n+            Runtime.error( \"JarResourceLoader : \" + msg );\n             \n             throw new ResourceNotFoundException ( msg );\n         }", "filename": "src/java/org/apache/velocity/runtime/resource/loader/JarResourceLoader.java"}], "repo": "velocity-engine"}]
