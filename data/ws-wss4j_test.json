{
    "ws-wss4j_79cf43a": {
        "repo": "ws-wss4j",
        "message": "Fix for possible NPE",
        "commit": "https://github.com/apache/ws-wss4j/commit/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8",
        "parent": "https://github.com/apache/ws-wss4j/commit/064b03279e94aa79b7a1baf9ac79fe07313256c6",
        "bug_id": "ws-wss4j_79cf43a",
        "file": [
            {
                "sha": "456cb776045f6bd8e0487e877cba6af7a24c96a2",
                "filename": "src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/UsernameToken.java?ref=79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8",
                "patch": "@@ -511,6 +511,11 @@ public void setRawPassword(RequestData data) throws WSSecurityException {\n                 getName(), getPassword(), getPasswordType(), \n                 WSPasswordCallback.USERNAME_TOKEN, data\n             );\n+        \n+        if (data.getCallbackHandler() == null) {\n+            LOG.debug(\"CallbackHandler is null\");\n+            throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);\n+        }\n         try {\n             data.getCallbackHandler().handle(new Callback[]{pwCb});\n         } catch (IOException e) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "UsernameToken.java"
        ],
        "unit_tests": [
            "UsernameTokenTest.java"
        ]
    },
    "ws-wss4j_5e1b261": {
        "repo": "ws-wss4j",
        "message": "[WSS-319] - NPE when certificate identified by SKI can't be found\n - Patch applied, thanks",
        "commit": "https://github.com/apache/ws-wss4j/commit/5e1b261a4aed4388316feb6e837c1a03b60c5333",
        "parent": "https://github.com/apache/ws-wss4j/commit/a78057b37ccab02e1e6388f4173d305a47001fc0",
        "bug_id": "ws-wss4j_5e1b261",
        "file": [
            {
                "sha": "c43350a988d71e962bffd8ed718ebac5a47a3d41",
                "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=5e1b261a4aed4388316feb6e837c1a03b60c5333",
                "patch": "@@ -483,7 +483,9 @@ public Element getFirstElement() {\n             }\n         } else if (SKI_URI.equals(value)) {\n             X509Certificate cert = getX509SKIAlias(crypto);\n-            return new X509Certificate[]{cert};\n+            if (cert != null) {\n+                return new X509Certificate[]{cert};\n+            }\n         } else if (THUMB_URI.equals(value)) {\n             Node node = getFirstElement().getFirstChild();\n             if (node == null) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "SecurityTokenReference.java"
        ],
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    },
    "ws-wss4j_efd476e": {
        "repo": "ws-wss4j",
        "message": "Fixing some NPEs",
        "commit": "https://github.com/apache/ws-wss4j/commit/efd476e12a6d736a036d692525ba452cddfa204e",
        "parent": "https://github.com/apache/ws-wss4j/commit/88487a952848ea1c80faa66819b5801c338b82ef",
        "bug_id": "ws-wss4j_efd476e",
        "file": [
            {
                "sha": "576bf0c0903a58ad2301338389111cc08753b9d3",
                "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java?ref=efd476e12a6d736a036d692525ba452cddfa204e",
                "patch": "@@ -469,6 +469,10 @@ public Element getFirstElement() {\n      *         type was detected.\n      */\n     public X509Certificate[] getKeyIdentifier(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         Element elem = getFirstElement();\n         String value = elem.getAttributeNS(null, \"ValueType\");\n \n@@ -537,6 +541,10 @@ public String getKeyIdentifierEncodingType() {\n     }\n     \n     public X509Certificate getX509SKIAlias(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (skiBytes == null) {\n             skiBytes = getSKIBytes();\n             if (skiBytes == null) {\n@@ -609,6 +617,10 @@ public void setUnknownElement(Element unknownElement) {\n      * @return a certificate array or null if nothing found\n      */\n     public X509Certificate[] getX509IssuerSerial(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (issuerSerial == null) {\n             issuerSerial = getIssuerSerial();\n             if (issuerSerial == null) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SecurityTokenReference.java"
        ],
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    },
    "ws-wss4j_ecfe55a": {
        "repo": "ws-wss4j",
        "message": "WSS-643 - NullPointerException in getCacheManager",
        "commit": "https://github.com/apache/ws-wss4j/commit/ecfe55a9b40054ad6355d5e8d5dfa5dc0eb7b23e",
        "parent": "https://github.com/apache/ws-wss4j/commit/350443915ac06000cdc13df6e9cc2b3c30a13129",
        "bug_id": "ws-wss4j_ecfe55a",
        "file": [
            {
                "sha": "cb9d8b43253c2ea5572c5ea320df0957bd3f4704",
                "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/cache/EHCacheManagerHolder.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/ecfe55a9b40054ad6355d5e8d5dfa5dc0eb7b23e/ws-security-common/src/main/java/org/apache/wss4j/common/cache/EHCacheManagerHolder.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/ecfe55a9b40054ad6355d5e8d5dfa5dc0eb7b23e/ws-security-common/src/main/java/org/apache/wss4j/common/cache/EHCacheManagerHolder.java",
                "status": "modified",
                "changes": 20,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/cache/EHCacheManagerHolder.java?ref=ecfe55a9b40054ad6355d5e8d5dfa5dc0eb7b23e",
                "patch": "@@ -103,15 +103,19 @@ public static synchronized CacheManager getCacheManager(String confName, URL con\n                 cacheManager = findDefaultCacheManager(confName, configFileURL);\n             }\n         }\n-        AtomicInteger a = COUNTS.get(cacheManager.getName());\n-        if (a == null) {\n-            COUNTS.putIfAbsent(cacheManager.getName(), new AtomicInteger());\n-            a = COUNTS.get(cacheManager.getName());\n+        if (cacheManager != null && cacheManager.getName() != null) {\n+            AtomicInteger a = COUNTS.get(cacheManager.getName());\n+            if (a == null) {\n+                COUNTS.putIfAbsent(cacheManager.getName(), new AtomicInteger());\n+                a = COUNTS.get(cacheManager.getName());\n+            }\n+            a.incrementAndGet();\n+            // if (a.incrementAndGet() == 1) {\n+                //System.out.println(\"Create!! \" + cacheManager.getName());\n+            // }\n+        } else {\n+            LOG.warn(\"The CacheManager or CacheManager name was null\");\n         }\n-        a.incrementAndGet();\n-        // if (a.incrementAndGet() == 1) {\n-            //System.out.println(\"Create!! \" + cacheManager.getName());\n-        // }\n         return cacheManager;\n     }\n ",
                "deletions": 8
            }
        ],
        "patched_files": [
            "EHCacheManagerHolder.java"
        ],
        "unit_tests": [
            "EHCacheManagerHolderTest.java"
        ]
    },
    "ws-wss4j_14143cf": {
        "repo": "ws-wss4j",
        "message": "Fixed a NPE and added the ability to reference a token via a KeyIdentifier in a DerivedKeyToken",
        "commit": "https://github.com/apache/ws-wss4j/commit/14143cf0c8f9b51db753f7619713f71d799ac358",
        "parent": "https://github.com/apache/ws-wss4j/commit/98b81941fe820ceba1ec994bef09817b871d0e5c",
        "bug_id": "ws-wss4j_14143cf",
        "file": [
            {
                "sha": "8b28bfdd0baad12d020ca75a1533d6af769b3e51",
                "filename": "src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "status": "modified",
                "changes": 55,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358",
                "patch": "@@ -222,23 +222,48 @@ public void prepare(Document doc) throws WSSecurityException, ConversationExcept\n         dkt.setID(dktId);\n         \n         if (strElem == null) {\n-            //Create the SecurityTokenRef to the Encrypted Key\n-            SecurityTokenReference strEncKey = new SecurityTokenReference(document);\n-            Reference ref = new Reference(document);\n+            SecurityTokenReference secRef = new SecurityTokenReference(document);\n+            String strUri = getWsConfig().getIdAllocator().createSecureId(\"STR-\", secRef);\n+            secRef.setID(strUri);\n             \n-            if (tokenIdDirectId) {\n-                ref.setURI(tokenIdentifier);\n-            } else {\n-                ref.setURI(\"#\" + tokenIdentifier);\n-            }\n-            if (customValueType != null && !\"\".equals(customValueType)) {\n-                ref.setValueType(customValueType);\n-            }\n-            if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n-                strEncKey.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+            switch (keyIdentifierType) {\n+            case WSConstants.CUSTOM_KEY_IDENTIFIER:\n+                secRef.setKeyIdentifier(customValueType, tokenIdentifier);\n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+                break;\n+            default:\n+                Reference ref = new Reference(document);\n+                \n+                if (tokenIdDirectId) {\n+                    ref.setURI(tokenIdentifier);\n+                } else {\n+                    ref.setURI(\"#\" + tokenIdentifier);\n+                }\n+                if (customValueType != null && !\"\".equals(customValueType)) {\n+                    ref.setValueType(customValueType);\n+                } \n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+\n+                secRef.setReference(ref);\n             }\n-            strEncKey.setReference(ref);\n-            dkt.setSecurityTokenReference(strEncKey); \n+            \n+            dkt.setSecurityTokenReference(secRef); \n         } else {\n             dkt.setSecurityTokenReference(strElem);\n         }",
                "deletions": 15
            },
            {
                "sha": "d567ef023d6b507ade311b205dcac035c566ed62",
                "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358",
                "patch": "@@ -308,9 +308,9 @@ public Element findProcessedTokenElement(\n         // \n         // Try to find a custom token\n         //\n-        if (cb != null && (WSConstants.WSC_SCT.equals(type))\n+        if (cb != null && (WSConstants.WSC_SCT.equals(type)\n             || WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(type) \n-            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type)) {\n+            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type))) {\n             //try to find a custom token\n             WSPasswordCallback pwcb = \n                 new WSPasswordCallback(id, WSPasswordCallback.CUSTOM_TOKEN);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "SecurityTokenReference.java"
        ],
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    },
    "ws-wss4j_efd7d8f": {
        "repo": "ws-wss4j",
        "message": "Configure BasicParserPool to avoid a NPE",
        "commit": "https://github.com/apache/ws-wss4j/commit/efd7d8f7e59e4686d984180718026b5f99be14f8",
        "parent": "https://github.com/apache/ws-wss4j/commit/36381e822a7f3227e7d2e70c5a1dec81a3a9c669",
        "bug_id": "ws-wss4j_efd7d8f",
        "file": [
            {
                "sha": "f696d7d760ef3d87e79e7e3cc92c0846ac4c5c55",
                "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java",
                "status": "modified",
                "changes": 20,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLBootstrap.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8",
                "patch": "@@ -95,24 +95,4 @@ public static synchronized void bootstrap() throws XMLConfigurationException {\n         }\n     }\n     \n-    \n-    /*\n-    protected static void initializeParserPool() throws ConfigurationException {\n-        StaticBasicParserPool pp = new StaticBasicParserPool();\n-        pp.setMaxPoolSize(50);\n-        \n-        Map<String, Boolean> features = new HashMap<String, Boolean>();\n-        features.put(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        features.put(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n-        pp.setBuilderFeatures(features);\n-        pp.setExpandEntityReferences(false);\n-        \n-        try {\n-            pp.initialize();\n-        } catch (XMLParserException e) {\n-            throw new ConfigurationException(\"Error initializing parser pool\", e);\n-        }\n-        Configuration.setParserPool(pp);\n-    }\n-    */\n }\n\\ No newline at end of file",
                "deletions": 20
            },
            {
                "sha": "f3faeee342e9912f55b8f2811ecfd09ef0d402b7",
                "filename": "ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-common/src/main/java/org/apache/wss4j/common/saml/OpenSAMLUtil.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8",
                "patch": "@@ -21,6 +21,9 @@\n \n import javax.xml.namespace.QName;\n \n+import net.shibboleth.utilities.java.support.component.ComponentInitializationException;\n+import net.shibboleth.utilities.java.support.xml.BasicParserPool;\n+\n import org.apache.wss4j.common.crypto.WSProviderConfig;\n import org.apache.wss4j.common.ext.WSSecurityException;\n import org.opensaml.core.config.Configuration;\n@@ -90,11 +93,16 @@ public static synchronized void initSamlEngine() {\n                 marshallerFactory = XMLObjectProviderRegistrySupport.getMarshallerFactory();\n                 unmarshallerFactory = XMLObjectProviderRegistrySupport.getUnmarshallerFactory();\n                 \n+                BasicParserPool pp = new BasicParserPool();\n+                pp.setMaxPoolSize(50);\n+                pp.initialize();\n+                providerRegistry.setParserPool(pp);\n+                \n                 samlEngineInitialized = true;\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"opensaml3 library bootstrap complete\");\n                 }\n-            } catch (XMLConfigurationException ex) {\n+            } catch (XMLConfigurationException | ComponentInitializationException ex) {\n                 LOG.error(\"Unable to bootstrap the opensaml3 library - all SAML operations will fail\", ex);\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "f29a1caf18b317ebb5a3737ae263835dccc732c9",
                "filename": "ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/efd7d8f7e59e4686d984180718026b5f99be14f8/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/test/java/org/apache/wss4j/dom/saml/SamlTokenTest.java?ref=efd7d8f7e59e4686d984180718026b5f99be14f8",
                "patch": "@@ -871,6 +871,31 @@ public void testAssertionWrapper() throws Exception {\n         assertEquals(assertionString, secondAssertionString);\n     }\n     \n+    @org.junit.Test\n+    public void testAssertionWrapperNoDocument() throws Exception {\n+        SAML1CallbackHandler callbackHandler = new SAML1CallbackHandler();\n+        callbackHandler.setStatement(SAML1CallbackHandler.Statement.AUTHN);\n+        callbackHandler.setIssuer(\"www.example.com\");\n+        \n+        SAMLCallback samlCallback = new SAMLCallback();\n+        SAMLUtil.doSAMLCallback(callbackHandler, samlCallback);\n+        SamlAssertionWrapper samlAssertion = new SamlAssertionWrapper(samlCallback);\n+        \n+        String assertionString = DOM2Writer.nodeToString(samlAssertion.toDOM(null));\n+        \n+        // Convert String to DOM + into an assertionWrapper\n+        InputStream in = new ByteArrayInputStream(assertionString.getBytes());\n+        \n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setNamespaceAware(true);\n+        Document newDoc = dbf.newDocumentBuilder().parse(in);\n+        \n+        SamlAssertionWrapper newAssertion = \n+            new SamlAssertionWrapper(newDoc.getDocumentElement());\n+        String secondAssertionString = newAssertion.assertionToString();\n+        assertEquals(assertionString, secondAssertionString);\n+    }\n+    \n     @org.junit.Test\n     public void testRequiredSubjectConfirmationMethod() throws Exception {\n         SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OpenSAMLUtil.java",
            "SamlToken.java",
            "OpenSAMLBootstrap.java"
        ],
        "unit_tests": [
            "SamlTokenTest.java"
        ]
    },
    "ws-wss4j_f54e63d": {
        "repo": "ws-wss4j",
        "message": "[WSS-560] - NullPointerException in WSSecEncrypt when encrypted header element has attributes. Thanks to Ross M. Lodge for the patch.",
        "commit": "https://github.com/apache/ws-wss4j/commit/f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431",
        "parent": "https://github.com/apache/ws-wss4j/commit/9c2717c816df9ff0d46581632d5c4a1dc43a3445",
        "bug_id": "ws-wss4j_f54e63d",
        "file": [
            {
                "sha": "1333eac8c672aae89bea1c4097df9089ed872292",
                "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecEncrypt.java?ref=f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431",
                "patch": "@@ -708,8 +708,8 @@ private static void createEncryptedHeaderElement(\n         NamedNodeMap map = elementToEncrypt.getAttributes();\n         for (int i = 0; i < map.getLength(); i++) {\n             Attr attr = (Attr)map.item(i);\n-            if (attr.getNamespaceURI().equals(WSConstants.URI_SOAP11_ENV)\n-                || attr.getNamespaceURI().equals(WSConstants.URI_SOAP12_ENV)) {                         \n+            if (WSConstants.URI_SOAP11_ENV.equals(attr.getNamespaceURI())\n+                || WSConstants.URI_SOAP12_ENV.equals(attr.getNamespaceURI())) {\n                 String soapEnvPrefix = \n                     XMLUtils.setNamespace(\n                         elem, attr.getNamespaceURI(), WSConstants.DEFAULT_SOAP_PREFIX",
                "deletions": 2
            },
            {
                "sha": "554eb549824d44f020c290f4fa33c588c8aaf6f3",
                "filename": "ws-security-dom/src/test/java/org/apache/wss4j/dom/message/EncryptionPartsTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431/ws-security-dom/src/test/java/org/apache/wss4j/dom/message/EncryptionPartsTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431/ws-security-dom/src/test/java/org/apache/wss4j/dom/message/EncryptionPartsTest.java",
                "status": "modified",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/test/java/org/apache/wss4j/dom/message/EncryptionPartsTest.java?ref=f54e63d23bfdd2c8bb06f6ccf2eeadee229ad431",
                "patch": "@@ -56,6 +56,7 @@\n             \"       <foo:bar1>baz1</foo:bar1>\" + \n             \"       <foo:foobar>baz</foo:foobar>\" + \n             \"       <foo:bar2>baz2</foo:bar2>\" +\n+            \"       <foo:with-attributes some-attribute=\\\"3\\\">baz</foo:with-attributes>\" +\n             \"   </soapenv:Header>\" +\n             \"   <soapenv:Body>\" +\n             \"      <ns1:testMethod xmlns:ns1=\\\"http://axis/service/security/test6/LogTestService8\\\"></ns1:testMethod>\" +\n@@ -295,6 +296,54 @@ public void testSOAPEncryptedHeader() throws Exception {\n         assertEquals(\"/soapenv:Envelope/soapenv:Header/foo:foobar\", xpath);\n     }\n     \n+    /**\n+     * Test encrypting a custom SOAP header using wsse11:EncryptedHeader\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @org.junit.Test\n+    public void testSOAPEncryptedHeaderWithAttributes() throws Exception {\n+        WSSecEncrypt encrypt = new WSSecEncrypt();\n+        encrypt.setUserInfo(\"16c73ab6-b892-458f-abf5-2f875f74882e\", \"security\");\n+        encrypt.setKeyIdentifierType(WSConstants.ISSUER_SERIAL);\n+\n+        Document doc = SOAPUtil.toSOAPPart(SOAPMSG);\n+        WSSecHeader secHeader = new WSSecHeader(doc);\n+        secHeader.insertSecurityHeader();\n+\n+        WSEncryptionPart encP =\n+            new WSEncryptionPart(\n+                \"with-attributes\",\n+                \"urn:foo.bar\",\n+                \"Header\");\n+        encrypt.getParts().add(encP);\n+\n+        Document encryptedDoc = encrypt.build(doc, crypto, secHeader);\n+\n+        String outputString =\n+            XMLUtils.PrettyDocumentToString(encryptedDoc);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(outputString);\n+        }\n+        assertTrue(outputString.contains(\"wsse11:EncryptedHeader\"));\n+        assertFalse(outputString.contains(\"foo:with-attributes\"));\n+\n+        WSHandlerResult results = verify(encryptedDoc);\n+\n+        WSSecurityEngineResult actionResult =\n+            results.getActionResults().get(WSConstants.ENCR).get(0);\n+        assertTrue(actionResult != null);\n+        assertFalse(actionResult.isEmpty());\n+        final java.util.List<WSDataRef> refs =\n+            (java.util.List<WSDataRef>) actionResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS);\n+\n+        assertEquals(WSConstants.KEYTRANSPORT_RSAOEP,\n+            actionResult.get(WSSecurityEngineResult.TAG_ENCRYPTED_KEY_TRANSPORT_METHOD));\n+\n+        WSDataRef wsDataRef = refs.get(0);\n+        String xpath = wsDataRef.getXpath();\n+        assertEquals(\"/soapenv:Envelope/soapenv:Header/foo:with-attributes\", xpath);\n+    }\n+\n     /**\n      * Test encrypting a custom SOAP header with a bad localname\n      */",
                "deletions": 0
            }
        ],
        "patched_files": [
            "WSSecEncrypt.java"
        ],
        "unit_tests": [
            "EncryptionPartsTest.java"
        ]
    },
    "ws-wss4j_c29df5e": {
        "repo": "ws-wss4j",
        "message": "[WSS-256] - Turned on BSP compliance by default, and fixed some failing tests and a NPE.",
        "commit": "https://github.com/apache/ws-wss4j/commit/c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
        "parent": "https://github.com/apache/ws-wss4j/commit/c25599feac4c17ade5b5d1f6fe986415d34bbf8d",
        "bug_id": "ws-wss4j_c29df5e",
        "file": [
            {
                "sha": "47b6b43133dbce9f0658c1730037951d27386415",
                "filename": "src/main/java/org/apache/ws/security/WSSConfig.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/WSSConfig.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/WSSConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/WSSConfig.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -199,7 +199,7 @@\n         DEFAULT_VALIDATORS = java.util.Collections.unmodifiableMap(tmp);\n     }\n \n-    protected boolean wsiBSPCompliant = false;\n+    protected boolean wsiBSPCompliant = true;\n \n     /**\n      * Set the timestamp precision mode. If set to <code>true</code> then use",
                "deletions": 1
            },
            {
                "sha": "94461ae6d3fa749544a5066500954303411993dd",
                "filename": "src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecSignatureBase.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -207,7 +207,8 @@\n     public List<String> getInclusivePrefixes(Element target, boolean excludeVisible) {\n         List<String> result = new ArrayList<String>();\n         Node parent = target;\n-        while (!(Node.DOCUMENT_NODE == parent.getParentNode().getNodeType())) {\n+        while (parent.getParentNode() != null &&\n+            !(Node.DOCUMENT_NODE == parent.getParentNode().getNodeType())) {\n             parent = parent.getParentNode();\n             NamedNodeMap attributes = parent.getAttributes();\n             for (int i = 0; i < attributes.getLength(); i++) {",
                "deletions": 1
            },
            {
                "sha": "412c1cbd1c9846dbd4e817718d579a482a7532c2",
                "filename": "src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/handler/SignatureConfirmationTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -274,11 +274,15 @@\n         }\n         \n         // Verify the results\n-        verify(doc);\n         \n-        // Now turn on BSP spec compliance\n+        // Turn off BSP spec compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n         WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(config);\n+        newEngine.processSecurityHeader(doc, null, callbackHandler, crypto);\n+        \n+        // Now turn on BSP spec compliance\n         config.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(config);\n         try {",
                "deletions": 2
            },
            {
                "sha": "0f94432533ee887be3747dedfc0961aa7d2f9c58",
                "filename": "src/test/java/org/apache/ws/security/message/EncryptionTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/EncryptionTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/EncryptionTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/EncryptionTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -529,11 +529,14 @@ public void testBadAttribute() throws Exception {\n             LOG.debug(outputString);\n         }\n         \n+        // Turn off BSP compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n+        WSSConfig wssConfig = WSSConfig.getNewInstance();\n+        wssConfig.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(wssConfig);\n         newEngine.processSecurityHeader(encryptedDoc, null, keystoreCallbackHandler, crypto);\n         \n         // Now turn on BSP compliance\n-        WSSConfig wssConfig = WSSConfig.getNewInstance();\n         wssConfig.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(wssConfig);\n         try {",
                "deletions": 1
            },
            {
                "sha": "9f416231b3461fe812cdb83606923085748b0d41",
                "filename": "src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureEncryptionTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.ws.security.WSConstants;\n import org.apache.ws.security.WSDataRef;\n import org.apache.ws.security.WSEncryptionPart;\n+import org.apache.ws.security.WSSConfig;\n import org.apache.ws.security.WSSecurityEngine;\n import org.apache.ws.security.WSSecurityEngineResult;\n import org.apache.ws.security.common.KeystoreCallbackHandler;\n@@ -349,7 +350,11 @@ public void testSigningEncryptionEmbedded() throws Exception {\n         \n         SecretKeyCallbackHandler secretKeyCallbackHandler = new SecretKeyCallbackHandler();\n         secretKeyCallbackHandler.setOutboundSecret(key);\n-        secEngine.processSecurityHeader(doc, null, secretKeyCallbackHandler, crypto);\n+        WSSecurityEngine engine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        engine.setWssConfig(config);\n+        engine.processSecurityHeader(doc, null, secretKeyCallbackHandler, crypto);\n         if (LOG.isDebugEnabled()) {\n             String outputString = \n                 org.apache.ws.security.util.XMLUtils.PrettyDocumentToString(doc);",
                "deletions": 1
            },
            {
                "sha": "8a03ff3faf080b6cbe42b34966bb75315339f280",
                "filename": "src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureKeyValueTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.ws.security.PublicKeyPrincipal;\n import org.apache.ws.security.WSConstants;\n+import org.apache.ws.security.WSSConfig;\n import org.apache.ws.security.WSSecurityEngine;\n import org.apache.ws.security.WSSecurityEngineResult;\n import org.apache.ws.security.common.SOAPUtil;\n@@ -40,7 +41,6 @@\n  */\n public class SignatureKeyValueTest extends org.junit.Assert {\n     private static final Log LOG = LogFactory.getLog(SignatureKeyValueTest.class);\n-    private WSSecurityEngine secEngine = new WSSecurityEngine();\n     private Crypto crypto = CryptoFactory.getInstance(\"wss40.properties\");\n \n     /**\n@@ -63,7 +63,13 @@ public void testRSAKeyValue() throws Exception {\n         }\n         assertTrue(outputString.indexOf(\"RSAKeyValue\") != -1);\n         \n-        final List<WSSecurityEngineResult> results = verify(signedDoc);\n+        WSSecurityEngine secEngine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        secEngine.setWssConfig(config);\n+        final List<WSSecurityEngineResult> results = \n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n+\n         WSSecurityEngineResult actionResult = \n             WSSecurityUtil.fetchActionResult(results, WSConstants.SIGN);\n         assertTrue(actionResult != null);\n@@ -101,7 +107,11 @@ public void testBadRSAKeyValue() throws Exception {\n         assertTrue(outputString.indexOf(\"RSAKeyValue\") != -1);\n         \n         try {\n-            verify(signedDoc);\n+            WSSecurityEngine secEngine = new WSSecurityEngine();\n+            WSSConfig config = WSSConfig.getNewInstance();\n+            config.setWsiBSPCompliant(false);\n+            secEngine.setWssConfig(config);\n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n             fail(\"Failure expected on bad public key\");\n         } catch (Exception ex) {\n             // expected\n@@ -130,7 +140,13 @@ public void testDSAKeyValue() throws Exception {\n         }\n         assertTrue(outputString.indexOf(\"DSAKeyValue\") != -1);\n         \n-        final List<WSSecurityEngineResult> results = verify(signedDoc);\n+        WSSecurityEngine secEngine = new WSSecurityEngine();\n+        WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        secEngine.setWssConfig(config);\n+        final List<WSSecurityEngineResult> results = \n+            secEngine.processSecurityHeader(signedDoc, null, null, crypto);\n+        \n         WSSecurityEngineResult actionResult = \n             WSSecurityUtil.fetchActionResult(results, WSConstants.SIGN);\n         assertTrue(actionResult != null);\n@@ -142,17 +158,5 @@ public void testDSAKeyValue() throws Exception {\n             ((PublicKeyPrincipal)principal).getPublicKey();\n         assertTrue(publicKey instanceof java.security.interfaces.DSAPublicKey);\n     }\n-\n-\n-    /**\n-     * Verifies the soap envelope\n-     * <p/>\n-     * \n-     * @param env soap envelope\n-     * @throws java.lang.Exception Thrown when there is a problem in verification\n-     */\n-    private List<WSSecurityEngineResult> verify(Document doc) throws Exception {\n-        return secEngine.processSecurityHeader(doc, null, null, crypto);\n-    }\n     \n }",
                "deletions": 16
            },
            {
                "sha": "44a2ec2c0fdfb0ecec9d70e51249daa07dec58e0",
                "filename": "src/test/java/org/apache/ws/security/message/SignatureTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/SignatureTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/SignatureTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -150,11 +150,14 @@ public void testSignatureInclusiveC14N() throws Exception {\n             LOG.debug(outputString);\n         }\n         \n-        verify(signedDoc);\n-        \n-        // Now turn on BSP spec compliance\n+        // Turn off BSP spec compliance\n         WSSecurityEngine newEngine = new WSSecurityEngine();\n         WSSConfig config = WSSConfig.getNewInstance();\n+        config.setWsiBSPCompliant(false);\n+        newEngine.setWssConfig(config);\n+        newEngine.processSecurityHeader(doc, null, null, crypto);\n+        \n+        // Now turn on BSP spec compliance\n         config.setWsiBSPCompliant(true);\n         newEngine.setWssConfig(config);\n         try {",
                "deletions": 3
            },
            {
                "sha": "c12fe68dd8251822ccc71275e1f1830b55cbcc2d",
                "filename": "src/test/java/org/apache/ws/security/message/TimestampTest.java",
                "blob_url": "https://github.com/apache/ws-wss4j/blob/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/TimestampTest.java",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/c29df5e5ae86425230a16e6a5b3e19bc11c629e4/src/test/java/org/apache/ws/security/message/TimestampTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/test/java/org/apache/ws/security/message/TimestampTest.java?ref=c29df5e5ae86425230a16e6a5b3e19bc11c629e4",
                "patch": "@@ -314,7 +314,7 @@ public void testMultipleTimestamps() throws Exception {\n         \n         // Turn off BSP compliance and the test should pass\n         wssConfig.setWsiBSPCompliant(false);\n-        verify(createdDoc, WSSConfig.getNewInstance());\n+        verify(createdDoc, wssConfig);\n     }\n     \n     /**",
                "deletions": 1
            }
        ],
        "patched_files": [
            "WSSConfig.java",
            "Timestamp.java",
            "WSSecSignatureBase.java",
            "SignatureConfirmation.java"
        ],
        "unit_tests": [
            "SignatureConfirmationTest.java",
            "SignatureTest.java",
            "TimestampTest.java",
            "SignatureEncryptionTest.java",
            "SignatureKeyValueTest.java",
            "EncryptionTest.java"
        ]
    }
}