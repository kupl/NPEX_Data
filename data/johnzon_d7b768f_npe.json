[
    {
        "repo": "johnzon",
        "commit": "https://github.com/apache/johnzon/commit/d7b768fe10f6163be58ec3d4905c404ee9ce2f30",
        "bug_id": "johnzon_d7b768f",
        "message": "JOHNZON-101 remove NPE if no mapping for JsonObject.getJson*",
        "parent": "https://github.com/apache/johnzon/commit/42cb0949b3194351bad2bdb06b6bde0accf5ff92",
        "patched_files": [
            "JsonObjectImpl.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 25,
                "raw_url": "https://github.com/apache/johnzon/raw/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java?ref=d7b768fe10f6163be58ec3d4905c404ee9ce2f30",
                "filename": "johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "deletions": 25,
                "sha": "263f43ef13530a97f61af0b27b97e165e99d119e",
                "blob_url": "https://github.com/apache/johnzon/blob/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java",
                "patch": "@@ -36,11 +36,20 @@\n     private final Map<String, JsonValue> unmodifieableBackingMap;\n \n     private <T> T value(final String name, final Class<T> clazz) {\n-        final Object v = unmodifieableBackingMap.get(name);\n+        final JsonValue v = unmodifieableBackingMap.get(name);\n         if (v != null) {\n             return clazz.cast(v);\n         }\n-        throw new NullPointerException(\"no mapping for \" + name);\n+        return null;\n+    }\n+\n+    private <T> T valueOrExcpetion(final String name, final Class<T> clazz) {\n+        T value = value(name, clazz);\n+        if (value == null) {\n+            throw new NullPointerException(\"no mapping for \" + name);\n+        }\n+\n+        return value;\n     }\n \n     JsonObjectImpl(final Map<String, JsonValue> backingMap) {\n@@ -70,51 +79,42 @@ public JsonString getJsonString(final String name) {\n \n     @Override\n     public String getString(final String name) {\n-        return getJsonString(name).getString();\n+        return valueOrExcpetion(name, JsonString.class).getString();\n     }\n \n     @Override\n     public String getString(final String name, final String defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n-        if (v != null) {\n-            if (v instanceof JsonString) {\n-                return JsonString.class.cast(v).getString();\n-            } else {\n-                return defaultValue;\n-            }\n-        } else {\n-            return defaultValue;\n+        final Object v = value(name, JsonValue.class);\n+        if (v != null && v instanceof JsonString) {\n+            return JsonString.class.cast(v).getString();\n         }\n \n+        return defaultValue;\n     }\n \n     @Override\n     public int getInt(final String name) {\n-        return getJsonNumber(name).intValue();\n+        return valueOrExcpetion(name, JsonNumber.class).intValue();\n     }\n \n     @Override\n     public int getInt(final String name, final int defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n-        if (v != null) {\n-            if (v instanceof JsonNumber) {\n-                return JsonNumber.class.cast(v).intValue();\n-            } else {\n-                return defaultValue;\n-            }\n-        } else {\n-            return defaultValue;\n+        final Object v = value(name, JsonValue.class);\n+        if (v != null && v instanceof JsonNumber) {\n+            return JsonNumber.class.cast(v).intValue();\n         }\n+\n+        return defaultValue;\n     }\n \n     @Override\n     public boolean getBoolean(final String name) {\n-        return JsonValue.TRUE.equals(value(name, JsonValue.class));\n+        return JsonValue.TRUE.equals(valueOrExcpetion(name, JsonValue.class));\n     }\n \n     @Override\n     public boolean getBoolean(final String name, final boolean defaultValue) {\n-        final Object v = unmodifieableBackingMap.get(name);\n+        final Object v = value(name, JsonValue.class);\n         if (v != null) {\n             return JsonValue.TRUE.equals(v) || !JsonValue.FALSE.equals(v) && defaultValue;\n         } else {\n@@ -124,7 +124,7 @@ public boolean getBoolean(final String name, final boolean defaultValue) {\n \n     @Override\n     public boolean isNull(final String name) {\n-        return JsonValue.NULL.equals(value(name, JsonValue.class));\n+        return JsonValue.NULL.equals(valueOrExcpetion(name, JsonValue.class));\n     }\n \n     @Override",
                "changes": 50
            },
            {
                "status": "modified",
                "additions": 93,
                "raw_url": "https://github.com/apache/johnzon/raw/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/johnzon/contents/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java?ref=d7b768fe10f6163be58ec3d4905c404ee9ce2f30",
                "filename": "johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "deletions": 0,
                "sha": "e7b5c069273604ed47fbc873380a54133e681ca3",
                "blob_url": "https://github.com/apache/johnzon/blob/d7b768fe10f6163be58ec3d4905c404ee9ce2f30/johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
                "patch": "@@ -19,9 +19,14 @@\n package org.apache.johnzon.core;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import javax.json.Json;\n+import javax.json.JsonObject;\n import javax.json.JsonObjectBuilder;\n+import javax.json.JsonValue;\n \n import org.junit.Test;\n \n@@ -32,4 +37,92 @@ public void objectToString() {\n         ob.add(\"a\", new JsonStringImpl(\"b\"));\n         assertEquals(\"{\\\"a\\\":\\\"b\\\"}\", ob.build().toString());\n     }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetBooleanMissingKeyShouldThrowNullPointerException() {\n+        getObject().getBoolean(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetBooleanWithDefaultMissingKeyShouldReturnDefault() {\n+        assertTrue(getObject().getBoolean(\"missing\", true));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetIntMissingKeyShouldThrowNullPointerException() {\n+        getObject().getInt(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetIntWithDefaultShouldReturnDefault() {\n+        assertEquals(42, getObject().getInt(\"missing\", 42));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonArrayMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonArray(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonNumberMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonNumber(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonObjectMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonObject(\"missing\"));\n+    }\n+\n+\n+    @Test\n+    public void testGetJsonStringMissingKeyShouldReturnNull() {\n+        assertNull(getObject().getJsonString(\"missing\"));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testGetStringMissingKeyShouldThrowNullPointerException() {\n+        getObject().getString(\"missing\");\n+    }\n+\n+    @Test\n+    public void testGetStringWithDefaultShouldReturnDefault() {\n+        String expected = \"default\";\n+        assertEquals(expected, getObject().getString(\"missing\", expected));\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testIsNullMissingKeyShouldThrowNullPointerException() {\n+        getObject().isNull(\"missing\");\n+    }\n+\n+    @Test\n+    public void testIsNullShouldReturnTrue() {\n+        assertTrue(Json.createObjectBuilder()\n+                       .add(\"key\", JsonValue.NULL)\n+                       .build()\n+                       .isNull(\"key\"));\n+    }\n+\n+    @Test\n+    public void testIsNullShouldReturnFalse() {\n+        assertFalse(Json.createObjectBuilder()\n+                        .add(\"key\", \"value\")\n+                        .build()\n+                        .isNull(\"key\"));\n+    }\n+\n+\n+    private JsonObject getObject() {\n+        return Json.createObjectBuilder()\n+                   .build();\n+    }\n+\n+\n }",
                "changes": 93
            }
        ],
        "unit_tests": [
            "JsonObjectImplTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "johnzon-core/src/test/java/org/apache/johnzon/core/JsonObjectImplTest.java",
        "buggy_files": [
            "johnzon-core/src/main/java/org/apache/johnzon/core/JsonObjectImpl.java"
        ],
        "fixed": true
    }
]