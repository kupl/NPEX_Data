{
    "logging-log4j2_f14bc48": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1108] NullPointerException when passing null to\njava.util.logging.Logger.setLevel().",
        "commit": "https://github.com/apache/logging-log4j2/commit/f14bc4867f703ff431b39e1c748b790bd063243e",
        "parent": "https://github.com/apache/logging-log4j2/commit/de0b802aade36abe2de60106b19315e5affae164",
        "bug_id": "logging-log4j2_f14bc48",
        "file": [
            {
                "sha": "91ce841db585ee621a12a0e3aa112a6c65ef5fbc",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f14bc4867f703ff431b39e1c748b790bd063243e/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f14bc4867f703ff431b39e1c748b790bd063243e/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java?ref=f14bc4867f703ff431b39e1c748b790bd063243e",
                "patch": "@@ -104,11 +104,8 @@ public LoggerContext getContext() {\n      * @param level The Level to use on this Logger, may be null.\n      */\n     public synchronized void setLevel(final Level level) {\n-        if (level != null) {\n-            config = new PrivateConfig(config, level);\n-        } else {\n-            config = new PrivateConfig(config, getParent().getLevel());\n-        }\n+        final Level actualLevel = level != null ? level : getParent().getLevel();\n+        config = new PrivateConfig(config, actualLevel);\n     }\n \n     @Override",
                "deletions": 5
            }
        ],
        "patched_files": [
            "Logger.java"
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLogger.java"
        ]
    },
    "logging-log4j2_d7705a0": {
        "repo": "logging-log4j2",
        "message": "Fix NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/BRANCH_2_0_EXPERIMENTAL/rgoers@1201602 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/d7705a0ba344bb47c6fbbbcf96ef84ffc2731eb5",
        "parent": "https://github.com/apache/logging-log4j2/commit/86fe0b700d1f9091907e7f91dab278d80282b152",
        "bug_id": "logging-log4j2_d7705a0",
        "file": [
            {
                "sha": "1be993b2d1f1ecb682456a58738f0490e3b80709",
                "filename": "log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/d7705a0ba344bb47c6fbbbcf96ef84ffc2731eb5/log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/d7705a0ba344bb47c6fbbbcf96ef84ffc2731eb5/log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java",
                "status": "modified",
                "changes": 24,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j2-core/src/main/java/org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java?ref=d7705a0ba344bb47c6fbbbcf96ef84ffc2731eb5",
                "patch": "@@ -111,17 +111,21 @@ public Result filter(LogEvent event) {\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"isAnd=\").append(isAnd);\n-        if (map.size() > 0) {\n-            sb.append(\", {\");\n-            boolean first = true;\n-            for (Map.Entry<String, String> entry : map.entrySet()) {\n-                if (!first) {\n-                    sb.append(\", \");\n+        if (useMap) {\n+            if (map.size() > 0) {\n+                sb.append(\", {\");\n+               boolean first = true;\n+                for (Map.Entry<String, String> entry : map.entrySet()) {\n+                    if (!first) {\n+                        sb.append(\", \");\n+                    }\n+                    first = false;\n+                    sb.append(entry.getKey()).append(\"=\").append(entry.getValue());\n                 }\n-                first = false;\n-                sb.append(entry.getKey()).append(\"=\").append(entry.getValue());\n-            }\n-            sb.append(\"}\");\n+                sb.append(\"}\");\n+          }\n+        } else {\n+            sb.append(\", {\").append(key).append(\"=\").append(value).append(\"}\");\n         }\n         return sb.toString();\n     }",
                "deletions": 10
            }
        ],
        "patched_files": [
            "ThreadContextMapFilter.java"
        ],
        "unit_tests": [
            "ThreadContextMapFilterTest.java"
        ]
    },
    "logging-log4j2_b0e5a13": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2355] Avoid NullPointerException in PropertiesUtil.reload()\n\nSystemPropertiesPropertySource.forEach(..) uses Property.getProperty(..)\nto resolve values.  If that value is a non-String, the value will be\nnull.  Since `literal` is a ConcurrentHashMap, a put(..) with null value\nwill yield a NullPointerException.\n\nThis is especially hard to debug in the case of e.g. StatusLogger,\nwhich initializes PropertiesUtil as a static variable.  The class is\nunable to load, throws a NoClassDefFoundError, and hides the\nNullPointerException.\n\nHere's what I got when I had a Property value that was a File:\n\nCaused by: java.lang.NoClassDefFoundError: Could not initialize class org.apache.logging.log4j.util.PropertiesUtil\n\tat org.apache.logging.log4j.status.StatusLogger.<clinit>(StatusLogger.java:78)\n\tat org.apache.logging.log4j.LogManager.<clinit>(LogManager.java:60)",
        "commit": "https://github.com/apache/logging-log4j2/commit/b0e5a134487c5b8778d3706754654d428024de88",
        "parent": "https://github.com/apache/logging-log4j2/commit/f8113c029ef1f8dd2402bea99096f6d0cc12c522",
        "bug_id": "logging-log4j2_b0e5a13",
        "file": [
            {
                "sha": "f1c8f15bf05afa512396b1e5f00d0c395ba2829f",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b0e5a134487c5b8778d3706754654d428024de88/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b0e5a134487c5b8778d3706754654d428024de88/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java?ref=b0e5a134487c5b8778d3706754654d428024de88",
                "patch": "@@ -330,13 +330,17 @@ private synchronized void reload() {\n                 source.forEach(new BiConsumer<String, String>() {\n                     @Override\n                     public void accept(final String key, final String value) {\n-                        literal.put(key, value);\n-                        final List<CharSequence> tokens = PropertySource.Util.tokenize(key);\n-                        if (tokens.isEmpty()) {\n-                            normalized.put(source.getNormalForm(Collections.singleton(key)), value);\n-                        } else {\n-                            normalized.put(source.getNormalForm(tokens), value);\n-                            tokenized.put(tokens, value);\n+                        if (value != null) {\n+                            literal.put(key, value);\n+                            final List<CharSequence> tokens = PropertySource.Util.tokenize(key);\n+                            if (tokens.isEmpty()) {\n+                                normalized.put(source.getNormalForm(Collections.singleton(key)), value);\n+                            } else {\n+                                normalized.put(source.getNormalForm(tokens), value);\n+                                tokenized.put(tokens, value);\n+                            }\n+                        } else  {\n+                            LowLevelLogUtil.log(\"Property \" + key + \" was skipped because of null value.\");\n                         }\n                     }\n                 });",
                "deletions": 7
            }
        ],
        "patched_files": [
            "PropertiesUtil.java"
        ],
        "unit_tests": [
            "PropertiesUtilTest.java"
        ]
    },
    "logging-log4j2_cd4de56": {
        "repo": "logging-log4j2",
        "message": "Fix NPE: [INFO] Running org.apache.logging.log4j.core.Log4j1222Test\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:\n0.002 s - in org.apache.logging.log4j.core.Log4j1222Test\nERROR StatusLogger Cannot start ShutdownCallbackRegistry, already\nshutting down.\nException in thread \"Thread-0\" java.lang.ExceptionInInitializerError\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook$Holder.<clinit>(Log4j1222Test.java:42)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.trigger(Log4j1222Test.java:53)\n        at\norg.apache.logging.log4j.core.Log4j1222Test$ShutdownHook.run(Log4j1222Test.java:49)\nCaused by: java.lang.NullPointerException\n        at\norg.apache.logging.log4j.LogManager.<clinit>(LogManager.java:97)\n        ... 3 more\n[INFO] Running org.apache.logging.log4j.core.LogEventFactoryTest",
        "commit": "https://github.com/apache/logging-log4j2/commit/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
        "parent": "https://github.com/apache/logging-log4j2/commit/b1356fa16e8ae19eba8bcd117212d489f041f5a7",
        "bug_id": "logging-log4j2_cd4de56",
        "file": [
            {
                "sha": "4e645f6f9e934e1791eb70034e13610eff55503a",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=cd4de56867bf89c3e6273406dcc7a3bb3e3a54e8",
                "patch": "@@ -94,7 +94,7 @@\n                             factories.put(provider.getPriority(), factoryClass.newInstance());\n                         } catch (final Exception e) {\n                             LOGGER.error(\"Unable to create class {} specified in {}\", factoryClass.getName(), provider\n-                                    .getUrl().toString(), e);\n+                                    .getUrl(), e);\n                         }\n                     }\n                 }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "LogManager.java"
        ],
        "unit_tests": [
            "LogManagerTest.java"
        ]
    },
    "logging-log4j2_7e83dfb": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-2054 prevent NPE when environment variable is not defined, allowing for null passwords",
        "commit": "https://github.com/apache/logging-log4j2/commit/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
        "parent": "https://github.com/apache/logging-log4j2/commit/cbbc529cc95de81834ece0bbf22c4f9d976ce327",
        "bug_id": "logging-log4j2_7e83dfb",
        "file": [
            {
                "sha": "d60f82cf2c5fe60e340415fb87ef51a53b7a49c0",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/net/ssl/EnvironmentPasswordProvider.java?ref=7e83dfb0c26bcbb2dcd1677f90e36f6ecc4f8c0c",
                "patch": "@@ -50,6 +50,6 @@ public EnvironmentPasswordProvider(final String passwordEnvironmentVariable) {\n     @Override\n     public char[] getPassword() {\n         String password = System.getenv(passwordEnvironmentVariable);\n-        return password.toCharArray();\n+        return password == null ? null : password.toCharArray();\n     }\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "EnvironmentPasswordProvider.java"
        ],
        "unit_tests": [
            "EnvironmentPasswordProviderTest.java"
        ]
    },
    "logging-log4j2_c2d7bf0": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1831] NullPointerException in HtmlLayout.",
        "commit": "https://github.com/apache/logging-log4j2/commit/c2d7bf0dcf41b5ab6effecc57b627a271f14d470",
        "parent": "https://github.com/apache/logging-log4j2/commit/fd01f697402f7d9d7b2eb72b2a122ddd4dd4746b",
        "bug_id": "logging-log4j2_c2d7bf0",
        "file": [
            {
                "sha": "8a09e4aa3f90d074d9e0d6d82ffe3c7a79fcedd0",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c2d7bf0dcf41b5ab6effecc57b627a271f14d470/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c2d7bf0dcf41b5ab6effecc57b627a271f14d470/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java?ref=c2d7bf0dcf41b5ab6effecc57b627a271f14d470",
                "patch": "@@ -167,7 +167,7 @@ public String toSerializable(final LogEvent event) {\n         sbuf.append(\"</td>\").append(Strings.LINE_SEPARATOR);\n \n         String escapedLogger = Transform.escapeHtmlTags(event.getLoggerName());\n-        if (escapedLogger.isEmpty()) {\n+        if (Strings.isEmpty(escapedLogger)) {\n             escapedLogger = LoggerConfig.ROOT;\n         }\n         sbuf.append(\"<td title=\\\"\").append(escapedLogger).append(\" logger\\\">\");",
                "deletions": 1
            },
            {
                "sha": "183a53cdf5eb65fd33b9208052371731409a5544",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c2d7bf0dcf41b5ab6effecc57b627a271f14d470/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c2d7bf0dcf41b5ab6effecc57b627a271f14d470/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=c2d7bf0dcf41b5ab6effecc57b627a271f14d470",
                "patch": "@@ -34,6 +34,9 @@\n       <action issue=\"LOG4J2-1827\" dev=\"rgoers\" type=\"update\">\n         Move integration tests to their own module to speed up build.\n       </action>\n+      <action issue=\"LOG4J2-1831\" dev=\"ggregory\" type=\"fix\">\n+        NullPointerException in HtmlLayout.\n+      </action>\n     </release>\n     <release version=\"2.8.1\" date=\"2017-02-26\" description=\"GA Release 2.8.1\">\n       <action issue=\"LOG4J2-1804\" dev=\"rgoers\" type=\"fix\" due-to=\"Pierrick Hymbert\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "HtmlLayout.java"
        ],
        "unit_tests": [
            "HtmlLayoutTest.java"
        ]
    },
    "logging-log4j2_f23fd6e": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1926 prevent NPE when serializing null values",
        "commit": "https://github.com/apache/logging-log4j2/commit/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
        "parent": "https://github.com/apache/logging-log4j2/commit/194a398d8f70d6680f8154168011171f0a12113b",
        "bug_id": "logging-log4j2_f23fd6e",
        "file": [
            {
                "sha": "ac72f39ea49a39671d82074098034dc0554ca374",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f23fd6e4bf537fd6adec8ab3a62929cdb05ad389/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/SortedArrayStringMap.java?ref=f23fd6e4bf537fd6adec8ab3a62929cdb05ad389",
                "patch": "@@ -498,6 +498,9 @@ private void writeObject(final java.io.ObjectOutputStream s) throws IOException\n     }\n \n     private static byte[] marshall(Object obj) throws IOException {\n+        if (obj == null) {\n+            return null;\n+        }\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         try (ObjectOutputStream oos = new ObjectOutputStream(bout)) {\n             oos.writeObject(obj);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SortedArrayStringMap.java"
        ],
        "unit_tests": [
            "SortedArrayStringMapTest.java"
        ]
    },
    "logging-log4j2_17b5c8a": {
        "repo": "logging-log4j2",
        "message": "Fix possible NPEs.",
        "commit": "https://github.com/apache/logging-log4j2/commit/17b5c8a041ee09db9fc1f553ef237f82c12f6c79",
        "parent": "https://github.com/apache/logging-log4j2/commit/88be0f58fe3e85244ba2ddd8040a78717cc3db04",
        "bug_id": "logging-log4j2_17b5c8a",
        "file": [
            {
                "sha": "4117836e4f116072d61b59d8cceb891f6b73f206",
                "filename": "log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java",
                "status": "modified",
                "changes": 32,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java?ref=17b5c8a041ee09db9fc1f553ef237f82c12f6c79",
                "patch": "@@ -232,21 +232,23 @@ private String getBody(final Event event) throws IOException {\n \n     }\n \n-    private static boolean deleteFiles(final File file) {\n-        boolean result = true;\n-        if (file.isDirectory()) {\n-\n-            final File[] files = file.listFiles();\n-            for (final File child : files) {\n-                result &= deleteFiles(child);\n-            }\n-\n-        } else if (!file.exists()) {\n-            return true;\n-        }\n-\n-        return result & file.delete();\n-    }\n+\tprivate static boolean deleteFiles(final File file) {\n+\t\tboolean result = true;\n+\t\tif (file.isDirectory()) {\n+\n+\t\t\tfinal File[] files = file.listFiles();\n+\t\t\tif (files != null) {\n+\t\t\t\tfor (final File child : files) {\n+\t\t\t\t\tresult &= deleteFiles(child);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} else if (!file.exists()) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn result & file.delete();\n+\t}\n \n     private static class EventCollector implements AvroSourceProtocol {\n         private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();",
                "deletions": 15
            },
            {
                "sha": "1dc7890d870f78b09f5d999c8bdf1c77aa3f8e15",
                "filename": "log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java?ref=17b5c8a041ee09db9fc1f553ef237f82c12f6c79",
                "patch": "@@ -371,21 +371,22 @@ private String getBody(final Event event) throws IOException {\n \n     }\n \n-    private static boolean deleteFiles(final File file) {\n-        boolean result = true;\n-        if (file.isDirectory()) {\n-\n-            final File[] files = file.listFiles();\n-            for (final File child : files) {\n-                result &= deleteFiles(child);\n-            }\n-\n-        } else if (!file.exists()) {\n-            return true;\n-        }\n-\n-        return result & file.delete();\n-    }\n+\tprivate static boolean deleteFiles(final File file) {\n+\t\tboolean result = true;\n+\t\tif (file.isDirectory()) {\n+\n+\t\t\tfinal File[] files = file.listFiles();\n+\t\t\tif (files != null) {\n+\t\t\t\tfor (final File child : files) {\n+\t\t\t\t\tresult &= deleteFiles(child);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (!file.exists()) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn result & file.delete();\n+\t}\n \n     private static class EventCollector implements AvroSourceProtocol {\n         private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();",
                "deletions": 15
            },
            {
                "sha": "2267bc868bf6333ede2d1cd8183f6e2dd9ea20fe",
                "filename": "log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/17b5c8a041ee09db9fc1f553ef237f82c12f6c79/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java",
                "status": "modified",
                "changes": 31,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java?ref=17b5c8a041ee09db9fc1f553ef237f82c12f6c79",
                "patch": "@@ -148,21 +148,22 @@ private String getBody(final Event event) throws IOException {\n \n     }\n \n-    private static boolean deleteFiles(final File file) {\n-        boolean result = true;\n-        if (file.isDirectory()) {\n-\n-            final File[] files = file.listFiles();\n-            for (final File child : files) {\n-                result &= deleteFiles(child);\n-            }\n-\n-        } else if (!file.exists()) {\n-            return true;\n-        }\n-\n-        return result & file.delete();\n-    }\n+\tprivate static boolean deleteFiles(final File file) {\n+\t\tboolean result = true;\n+\t\tif (file.isDirectory()) {\n+\n+\t\t\tfinal File[] files = file.listFiles();\n+\t\t\tif (files != null) {\n+\t\t\t\tfor (final File child : files) {\n+\t\t\t\t\tresult &= deleteFiles(child);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (!file.exists()) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn result & file.delete();\n+\t}\n \n     private static class EventCollector implements AvroSourceProtocol {\n         private final LinkedBlockingQueue<AvroFlumeEvent> eventQueue = new LinkedBlockingQueue<>();",
                "deletions": 15
            }
        ],
        "patched_files": [
            "FlumePersistentPerf.java"
        ],
        "unit_tests": [
            "FlumeEmbeddedAppenderTest.java",
            "FlumePersistentAppenderTest.java"
        ]
    },
    "logging-log4j2_de0b802": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1108] NullPointerException when passing null to\njava.util.logging.Logger.setLevel().",
        "commit": "https://github.com/apache/logging-log4j2/commit/de0b802aade36abe2de60106b19315e5affae164",
        "parent": "https://github.com/apache/logging-log4j2/commit/81e2fa4c347f92ecb05aa000e939adfe310f935a",
        "bug_id": "logging-log4j2_de0b802",
        "file": [
            {
                "sha": "bf3690547359ca7527909517a60528df729dceef",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/de0b802aade36abe2de60106b19315e5affae164/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/de0b802aade36abe2de60106b19315e5affae164/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java?ref=de0b802aade36abe2de60106b19315e5affae164",
                "patch": "@@ -107,8 +107,7 @@ public synchronized void setLevel(final Level level) {\n         if (level != null) {\n             config = new PrivateConfig(config, level);\n         } else {\n-            // Reusing parent PC, should we make a copy instead?\n-            config = getParent().config;\n+            config = new PrivateConfig(config, getParent().getLevel());\n         }\n     }\n ",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Logger.java"
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLogger.java"
        ]
    },
    "logging-log4j2_3376588": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1597] Fix NPEs.",
        "commit": "https://github.com/apache/logging-log4j2/commit/33765882bddfd34f8d2913612d3bc2bda9f35e40",
        "parent": "https://github.com/apache/logging-log4j2/commit/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
        "bug_id": "logging-log4j2_3376588",
        "file": [
            {
                "sha": "7782b96e03ed5fd37485538210f85e9fd35c2511",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33765882bddfd34f8d2913612d3bc2bda9f35e40/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ScriptAppenderSelector.java?ref=33765882bddfd34f8d2913612d3bc2bda9f35e40",
                "patch": "@@ -63,15 +63,19 @@\n         public Appender build() {\n             if (name == null) {\n                 LOGGER.error(\"Name missing.\");\n+                return null;\n             }\n             if (script == null) {\n                 LOGGER.error(\"Script missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (appenderSet == null) {\n                 LOGGER.error(\"AppenderSet missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             if (configuration == null) {\n                 LOGGER.error(\"Configuration missing for ScriptAppenderSelector appender {}\", name);\n+                return null;\n             }\n             final ScriptManager scriptManager = configuration.getScriptManager();\n             scriptManager.addScript(script);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ScriptAppenderSelector.java"
        ],
        "unit_tests": [
            "ScriptAppenderSelectorTest.java"
        ]
    },
    "logging-log4j2_a9e7cd6": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-2247 - NullPointerException would occur when header was provided to a Layout on RollingRandingAccessFileAppender with DirectWriteRolloverStrategy.",
        "commit": "https://github.com/apache/logging-log4j2/commit/a9e7cd6caf9caaf7dbc241390b8f587914d77933",
        "parent": "https://github.com/apache/logging-log4j2/commit/8a8cb421d835bf8b4e815367f797a3ff04987424",
        "bug_id": "logging-log4j2_a9e7cd6",
        "file": [
            {
                "sha": "e8b6cb909deaa37a51564d4f16dc564a30f2aafc",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a9e7cd6caf9caaf7dbc241390b8f587914d77933/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a9e7cd6caf9caaf7dbc241390b8f587914d77933/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java?ref=a9e7cd6caf9caaf7dbc241390b8f587914d77933",
                "patch": "@@ -87,7 +87,7 @@ private void writeHeader() {\n             return;\n         }\n         try {\n-            if (randomAccessFile.length() == 0) {\n+            if (randomAccessFile != null && randomAccessFile.length() == 0) {\n                 // write to the file, not to the buffer: the buffer may not be empty\n                 randomAccessFile.write(header, 0, header.length);\n             }",
                "deletions": 1
            },
            {
                "sha": "0d1dc18983d2628802812a3b37ffff31a47c07d9",
                "filename": "log4j-core/src/test/resources/log4j-rolling-random-direct.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a9e7cd6caf9caaf7dbc241390b8f587914d77933/log4j-core/src/test/resources/log4j-rolling-random-direct.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a9e7cd6caf9caaf7dbc241390b8f587914d77933/log4j-core/src/test/resources/log4j-rolling-random-direct.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/log4j-rolling-random-direct.xml?ref=a9e7cd6caf9caaf7dbc241390b8f587914d77933",
                "patch": "@@ -27,7 +27,7 @@\n       <PatternLayout pattern=\"%m%n\"/>\n     </Console>\n     <RollingRandomAccessFile name=\"RollingFile\" filePattern=\"${logDir}/test1-%d{MM-dd-yy-HH-mm}-%i.log.gz\">\n-      <PatternLayout>\n+      <PatternLayout header=\"This is a test\">\n         <Pattern>%d %p %C{1.} [%t] %m%n</Pattern>\n       </PatternLayout>\n       <Policies>",
                "deletions": 1
            },
            {
                "sha": "ff63006ffe0d555e974e6db715211bf417a00c2c",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a9e7cd6caf9caaf7dbc241390b8f587914d77933/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a9e7cd6caf9caaf7dbc241390b8f587914d77933/src/changes/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a9e7cd6caf9caaf7dbc241390b8f587914d77933",
                "patch": "@@ -63,6 +63,10 @@\n       </action>      \n     </release>\n     <release version=\"2.11.0\" date=\"2018-xx-xx\" description=\"GA Release 2.11.0\">\n+      <action issue=\"LOG4J2-2247\" dev=\"rgoers\" type=\"fix\">\n+        NullPointerException would occur when header was provided to a Layout on RollingRandingAccessFileAppender\n+        with DirectWriteRolloverStrategy.\n+      </action>\n       <action issue=\"LOG4J2-2250\" dev=\"rpopma\" type=\"update\">\n         The internal status logger timestamp format is now configurable with system property `log4j2.StatusLogger.DateFormat`.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RollingRandomAccessFileManager.java"
        ],
        "unit_tests": [
            "RollingRandomAccessFileManagerTest.java"
        ]
    },
    "logging-log4j2_e6781f5": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1619] new Log4jLogEvent().toString() throws an NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
        "parent": "https://github.com/apache/logging-log4j2/commit/10a34436f4c455d08078e0e52392f92eb90c0b9b",
        "bug_id": "logging-log4j2_e6781f5",
        "file": [
            {
                "sha": "475997637f4ffdd7cdf5fe5bb15c18d6385274f2",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
                "patch": "@@ -741,7 +741,7 @@ public String toString() {\n         final String n = loggerName.isEmpty() ? LoggerConfig.ROOT : loggerName;\n         sb.append(\"Logger=\").append(n);\n         sb.append(\" Level=\").append(level.name());\n-        sb.append(\" Message=\").append(message.getFormattedMessage());\n+        sb.append(\" Message=\").append(message == null ? null : message.getFormattedMessage());\n         return sb.toString();\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "6c5d2cd29767e31f50774f188a0343e12fc8cddf",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
                "patch": "@@ -180,6 +180,9 @@\n       <action issue=\"LOG4J2-1610\" dev=\"ggregory\" type=\"fix\" due-to=\"Shubhankar\">\n         Add targetNamespace to log4j-config.xsd. GitHub #43.\n       </action>\n+      <action issue=\"LOG4J2-1619\" dev=\"ggregory\" type=\"fix\">\n+        new Log4jLogEvent().toString() throws an NPE.\n+      </action>\n       <action issue=\"LOG4J2-1578\" dev=\"ggregory\" type=\"add\">\n         RoutingAppender can be configured with scripts. Add Script in a Routes element.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Log4jLogEvent.java"
        ],
        "unit_tests": [
            "Log4jLogEventTest.java"
        ]
    },
    "logging-log4j2_b842432": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1527 Prevent NPE in RingBufferLogEvent.getFormattedMessage() when used in web applications.",
        "commit": "https://github.com/apache/logging-log4j2/commit/b842432cd8ef81d62d047afdbc0212763432be30",
        "parent": "https://github.com/apache/logging-log4j2/commit/d3d4d7dd962df389465e4cc37c76a82c4b408c17",
        "bug_id": "logging-log4j2_b842432",
        "file": [
            {
                "sha": "38370d1e70d00a2c59fa5ade5dc6347fb37ad634",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b842432cd8ef81d62d047afdbc0212763432be30/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b842432cd8ef81d62d047afdbc0212763432be30/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=b842432cd8ef81d62d047afdbc0212763432be30",
                "patch": "@@ -170,4 +170,14 @@ public void testCreateMementoReturnsCopy() {\n         assertEquals(evt.getSource(), actual.getSource());\n         assertEquals(evt.getThrownProxy(), actual.getThrownProxy());\n     }\n+\n+    @Test\n+    public void testMessageTextNeverThrowsNpe() {\n+        final RingBufferLogEvent evt = new RingBufferLogEvent();\n+        try {\n+            evt.getFormattedMessage();\n+        } catch (NullPointerException e) {\n+            fail(\"the messageText field was not set\");\n+        }\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RingBufferLogEvent.java"
        ],
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_aef15ce": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-144] NullPointerException in RFC5424Layout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1431908 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/aef15ce651d171d17a8274d2a2d01740bb866eaa",
        "parent": "https://github.com/apache/logging-log4j2/commit/72501172a534e7c94f244bf4fb55a2b31744137d",
        "bug_id": "logging-log4j2_aef15ce",
        "file": [
            {
                "sha": "8cfab93297093e826086ae57a6d27c08b6c6e3c5",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/aef15ce651d171d17a8274d2a2d01740bb866eaa/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/aef15ce651d171d17a8274d2a2d01740bb866eaa/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java?ref=aef15ce651d171d17a8274d2a2d01740bb866eaa",
                "patch": "@@ -475,14 +475,15 @@ public static RFC5424Layout createLayout(@PluginAttr(\"facility\") final String fa\n         if (charsetName != null) {\n             if (Charset.isSupported(charsetName)) {\n                 charset = Charset.forName(charsetName);\n-            } else {\n-                LOGGER.error(\"Charset \" + charsetName + \" is not supported for layout, using \" + charset.displayName());\n-            }\n+            } \n         }\n         if (charset == null) {\n             charset = Charset.isSupported(\"UTF-8\") ? Charset.forName(\"UTF-8\") : Charset.defaultCharset();\n+            if (charsetName != null) {\n+                LOGGER.error(\"Charset \" + charsetName + \" is not supported for layout, using \" + charset.displayName());\n+            }\n         }\n-\n+        \n         if (includes != null && excludes != null) {\n             LOGGER.error(\"mdcIncludes and mdcExcludes are mutually exclusive. Includes wil be ignored\");\n             includes = null;",
                "deletions": 4
            },
            {
                "sha": "ba849dcd5e7a64141260e2a128a5c42be4d00d3f",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/aef15ce651d171d17a8274d2a2d01740bb866eaa/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/aef15ce651d171d17a8274d2a2d01740bb866eaa/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=aef15ce651d171d17a8274d2a2d01740bb866eaa",
                "patch": "@@ -23,6 +23,9 @@\n \n   <body>\n     <release version=\"2.0-beta4\" date=\"TBD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-144\" dev=\"ggregory\" type=\"fix\">\n+        NullPointerException in RFC5424Layout.\n+      </action>\n       <action issue=\"LOG4J2-143\" dev=\"rgoers\" type=\"fix\">\n         MessagePatternConverter now returns \"null\" if the log message is null.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RFC5424Layout.java"
        ],
        "unit_tests": [
            "RFC5424LayoutTest.java"
        ]
    },
    "logging-log4j2_6597f94": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1740] Add CronTriggeringPolicy programmatically leads to NPE.\nAdd test TODO.",
        "commit": "https://github.com/apache/logging-log4j2/commit/6597f9435c3da56f5fabf99c831a8fc3637dc652",
        "parent": "https://github.com/apache/logging-log4j2/commit/2d266d98b8cb01885691b6c6b8f4018936644973",
        "bug_id": "logging-log4j2_6597f94",
        "file": [
            {
                "sha": "110bc8871ec924897e8671bc686650c61e955985",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/6597f9435c3da56f5fabf99c831a8fc3637dc652/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/6597f9435c3da56f5fabf99c831a8fc3637dc652/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "status": "modified",
                "changes": 279,
                "additions": 139,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java?ref=6597f9435c3da56f5fabf99c831a8fc3637dc652",
                "patch": "@@ -1,140 +1,139 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-\n-package org.apache.logging.log4j.core.appender.rolling;\n-\n-import org.apache.logging.log4j.core.appender.RollingFileAppender;\n-import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n-import org.apache.logging.log4j.core.config.Configurator;\n-import org.apache.logging.log4j.core.config.NullConfiguration;\n-import org.apache.logging.log4j.core.layout.PatternLayout;\n-import org.apache.logging.log4j.junit.CleanFiles;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-\n-public class CronTriggeringPolicyTest {\n-\n-    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\n-    \n-    private NullConfiguration configuration;\n-\n-//    @Rule\n-//    public CleanFiles files = new CleanFiles(\"testcmd1.log\");\n-\n-    @Before\n-    public void before() {\n-        configuration = new NullConfiguration();\n-    }\n-\n-    private CronTriggeringPolicy createPolicy() {\n-        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\n-    }\n-\n-    private DefaultRolloverStrategy createStrategy() {\n-        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\n-    }\n-\n-    private void testBuilder() {\n-        // @formatter:off\n-        final RollingFileAppender raf = RollingFileAppender.newBuilder()\n-            .withName(\"test1\")\n-            .withFileName(\"testcmd1.log\")\n-            .withFilePattern(\"testcmd1.log.%d{yyyy-MM-dd}\")\n-            .withPolicy(createPolicy())\n-            .withStrategy(createStrategy())\n-            .setConfiguration(configuration)\n-            .build();\n-        // @formatter:on\n-        Assert.assertNotNull(raf);\n-    }\n-\n-    /**\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n-     * true.\n-     */\n-    @Test\n-    public void testBuilderOnce() {\n-        testBuilder();\n-    }\n-\n-    /**\n-     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n-     */\n-    @Test\n-    public void testLoggerContextAndBuilder() {\n-        Configurator.initialize(configuration);\n-        testBuilder();\n-    }\n-\n-    /**\n-     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n-     */\n-    @Test\n-    public void testRollingRandomAccessFileAppender() {\n-        // @formatter:off\n-        RollingRandomAccessFileAppender.newBuilder()\n-            .withName(\"test2\")\n-            .withFileName(\"testcmd2.log\")\n-            .withFilePattern(\"testcmd2.log.%d{yyyy-MM-dd}\")\n-            .withPolicy(createPolicy())\n-            .withStrategy(createStrategy())\n-            .setConfiguration(configuration)\n-            .build();\n-        // @formatter:on\n-    }\n-\n-    \n-    /**\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n-     * true.\n-     */\n-    @Test\n-    public void testBuilderSequence() {\n-        testBuilder();\n-        testBuilder();\n-    }\n-\n-    private void testFactoryMethod() {\n-        final CronTriggeringPolicy triggerPolicy = createPolicy();\n-        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\n-\n-        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd3.log\",\n-                \"testcmd3.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\n-                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\n-            // trigger rollover\n-            fileManager.initialize();\n-            fileManager.rollover();\n-        }\n-    }\n-\n-    /**\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n-     * true.\n-     */\n-    @Test\n-    public void testFactoryMethodOnce() {\n-        testFactoryMethod();\n-    }\n-\n-    @Test\n-    public void testFactoryMethodSequence() {\n-        testFactoryMethod();\n-        testFactoryMethod();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+\r\n+package org.apache.logging.log4j.core.appender.rolling;\r\n+\r\n+import org.apache.logging.log4j.core.appender.RollingFileAppender;\r\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\r\n+import org.apache.logging.log4j.core.config.Configurator;\r\n+import org.apache.logging.log4j.core.config.NullConfiguration;\r\n+import org.apache.logging.log4j.core.layout.PatternLayout;\r\n+import org.junit.Assert;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+public class CronTriggeringPolicyTest {\r\n+\r\n+    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\r\n+    \r\n+    private NullConfiguration configuration;\r\n+\r\n+     // TODO Need a CleanRegexFiles(\"testcmd.\\\\.log\\\\..*\");\r\n+     //@Rule\r\n+     //public CleanFiles cleanFiles = new CleanFiles(\"testcmd1.log\", \"testcmd2.log\", \"testcmd3.log\");\r\n+\r\n+    @Before\r\n+    public void before() {\r\n+        configuration = new NullConfiguration();\r\n+    }\r\n+\r\n+    private CronTriggeringPolicy createPolicy() {\r\n+        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\r\n+    }\r\n+\r\n+    private DefaultRolloverStrategy createStrategy() {\r\n+        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\r\n+    }\r\n+\r\n+    private void testBuilder() {\r\n+        // @formatter:off\r\n+        final RollingFileAppender raf = RollingFileAppender.newBuilder()\r\n+            .withName(\"test1\")\r\n+            .withFileName(\"testcmd1.log\")\r\n+            .withFilePattern(\"testcmd1.log.%d{yyyy-MM-dd}\")\r\n+            .withPolicy(createPolicy())\r\n+            .withStrategy(createStrategy())\r\n+            .setConfiguration(configuration)\r\n+            .build();\r\n+        // @formatter:on\r\n+        Assert.assertNotNull(raf);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n+     * true.\r\n+     */\r\n+    @Test\r\n+    public void testBuilderOnce() {\r\n+        testBuilder();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\r\n+     */\r\n+    @Test\r\n+    public void testLoggerContextAndBuilder() {\r\n+        Configurator.initialize(configuration);\r\n+        testBuilder();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\r\n+     */\r\n+    @Test\r\n+    public void testRollingRandomAccessFileAppender() {\r\n+        // @formatter:off\r\n+        RollingRandomAccessFileAppender.newBuilder()\r\n+            .withName(\"test2\")\r\n+            .withFileName(\"testcmd2.log\")\r\n+            .withFilePattern(\"testcmd2.log.%d{yyyy-MM-dd}\")\r\n+            .withPolicy(createPolicy())\r\n+            .withStrategy(createStrategy())\r\n+            .setConfiguration(configuration)\r\n+            .build();\r\n+        // @formatter:on\r\n+    }\r\n+\r\n+    \r\n+    /**\r\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n+     * true.\r\n+     */\r\n+    @Test\r\n+    public void testBuilderSequence() {\r\n+        testBuilder();\r\n+        testBuilder();\r\n+    }\r\n+\r\n+    private void testFactoryMethod() {\r\n+        final CronTriggeringPolicy triggerPolicy = createPolicy();\r\n+        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\r\n+\r\n+        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd3.log\",\r\n+                \"testcmd3.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\r\n+                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\r\n+            // trigger rollover\r\n+            fileManager.initialize();\r\n+            fileManager.rollover();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n+     * true.\r\n+     */\r\n+    @Test\r\n+    public void testFactoryMethodOnce() {\r\n+        testFactoryMethod();\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testFactoryMethodSequence() {\r\n+        testFactoryMethod();\r\n+        testFactoryMethod();\r\n+    }\r\n+}\r",
                "deletions": 140
            }
        ],
        "patched_files": [
            "CronTriggeringPolicy.java"
        ],
        "unit_tests": [
            "CronTriggeringPolicyTest.java"
        ]
    },
    "logging-log4j2_9b8a17f": {
        "repo": "logging-log4j2",
        "message": "Prevent potential NPE when the os.name property cannot be accessed",
        "commit": "https://github.com/apache/logging-log4j2/commit/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
        "parent": "https://github.com/apache/logging-log4j2/commit/31f68af86c503862230514d67c18a7a6616312c7",
        "bug_id": "logging-log4j2_9b8a17f",
        "file": [
            {
                "sha": "f5e1ecb56100a3359690429b23ffa151e3792a8e",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java?ref=9b8a17f4c4d9e2f157412fc2f2ea773064b77c8e",
                "patch": "@@ -434,7 +434,7 @@ static ResourceBundle getCharsetsResourceBundle() {\n      * @return true if system properties tell us we are running on Windows.\n      */\n     public boolean isOsWindows() {\n-        return getStringProperty(\"os.name\").startsWith(\"Windows\");\n+        return getStringProperty(\"os.name\", \"\").startsWith(\"Windows\");\n     }\n \n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "PropertiesUtil.java"
        ],
        "unit_tests": [
            "PropertiesUtilTest.java"
        ]
    },
    "logging-log4j2_4ceff8e": {
        "repo": "logging-log4j2",
        "message": "Protect test tearDown from NPEs in the event there are problems in the\ntests.",
        "commit": "https://github.com/apache/logging-log4j2/commit/4ceff8eec0f3ee754aa8e4cad1c64c2cf4f285bd",
        "parent": "https://github.com/apache/logging-log4j2/commit/81f982555961da1e08dd47e0e377e3858f949949",
        "bug_id": "logging-log4j2_4ceff8e",
        "file": [
            {
                "sha": "73082e957b0ca9ab12bc569c67fb073f180c2665",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4ceff8eec0f3ee754aa8e4cad1c64c2cf4f285bd/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4ceff8eec0f3ee754aa8e4cad1c64c2cf4f285bd/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java?ref=4ceff8eec0f3ee754aa8e4cad1c64c2cf4f285bd",
                "patch": "@@ -55,8 +55,12 @@ public void setUp() throws Exception {\n \n     @After\n     public void tearDown() throws Exception {\n-        app.clear();\n-        app2.clear();\n+        if (app != null) {\n+            app.clear();\n+        }\n+        if (app2 != null) {\n+            app2.clear();\n+        }\n     }\n \n     @Test",
                "deletions": 2
            }
        ],
        "patched_files": [
            "RewriteAppender.java"
        ],
        "unit_tests": [
            "RewriteAppenderTest.java"
        ]
    },
    "logging-log4j2_83cd00e": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1619] new Log4jLogEvent().toString() throws an NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/83cd00eb611b9715c3a95961ad44b3ce4c69b5a4",
        "parent": "https://github.com/apache/logging-log4j2/commit/e6781f5e5789fed20fc4b0cbc3edb6c30dc012c5",
        "bug_id": "logging-log4j2_83cd00e",
        "file": [
            {
                "sha": "9f079cec867454132a46e776914880be0e9d7c24",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/83cd00eb611b9715c3a95961ad44b3ce4c69b5a4/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/83cd00eb611b9715c3a95961ad44b3ce4c69b5a4/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java?ref=83cd00eb611b9715c3a95961ad44b3ce4c69b5a4",
                "patch": "@@ -521,4 +521,10 @@ private void different(final String reason, final Log4jLogEvent.Builder builder,\n         assertNotEquals(reason, other, event);\n         assertNotEquals(reason + \" hashCode\", other.hashCode(), event.hashCode());\n     }\n+    \n+    @Test\n+    public void testToString() {\n+        // Throws an NPE in 2.6.2\n+        assertNotNull(new Log4jLogEvent().toString());\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Log4jLogEvent.java"
        ],
        "unit_tests": [
            "Log4jLogEventTest.java"
        ]
    },
    "logging-log4j2_0c556ae": {
        "repo": "logging-log4j2",
        "message": "LOG4J-1420 - RollingRandomAccessFileManager was not properly rolling over on startup and was getting a NullPointerException",
        "commit": "https://github.com/apache/logging-log4j2/commit/0c556aecb20f807d2838073add3b29be61a5cd3b",
        "parent": "https://github.com/apache/logging-log4j2/commit/fa90960708bb25183971a392d9e10a78301ae775",
        "bug_id": "logging-log4j2_0c556ae",
        "file": [
            {
                "sha": "88bbb9a24f53de35ce4bbf4705bcb40c9da9c29c",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingFileAppender.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -194,6 +194,8 @@ public static RollingFileAppender createAppender(\n             return null;\r\n         }\r\n \r\n+        manager.initialize();\r\n+\r\n         return new RollingFileAppender(name, layout, filter, manager, fileName, filePattern,\r\n                 ignoreExceptions, isFlush, isAdvertise ? config.getAdvertiser() : null);\r\n     }\r",
                "deletions": 0
            },
            {
                "sha": "67777e6e35b1197afcf83d67ab029aa53d694254",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -210,6 +210,8 @@ public static RollingRandomAccessFileAppender createAppender(\n             return null;\n         }\n \n+        manager.initialize();\n+\n         return new RollingRandomAccessFileAppender(name, layout, filter, manager,\n                 fileName, filePattern, ignoreExceptions, isFlush, bufferSize,\n                 isAdvertise ? config.getAdvertiser() : null);",
                "deletions": 0
            },
            {
                "sha": "44fbbd64ac3724390f7c9bc79939376670c1ba4d",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -74,6 +74,9 @@ protected RollingFileManager(final String fileName, final String pattern, final\n         this.triggeringPolicy = triggeringPolicy;\n         this.rolloverStrategy = rolloverStrategy;\n         this.patternProcessor = new PatternProcessor(pattern);\n+    }\n+\n+    public void initialize() {\n         triggeringPolicy.initialize(this);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "d51b65cea1376d86f19b49264de90be7f1c70830",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -66,8 +66,10 @@ private void writeHeader() {\n             return;\n         }\n         try {\n-            // write to the file, not to the buffer: the buffer may not be empty\n-            randomAccessFile.write(header, 0, header.length);\n+            if (randomAccessFile.length() == 0) {\n+                // write to the file, not to the buffer: the buffer may not be empty\n+                randomAccessFile.write(header, 0, header.length);\n+            }\n         } catch (final IOException e) {\n             logError(\"unable to write header\", e);\n         }",
                "deletions": 2
            },
            {
                "sha": "bfec1c8998e10efa1ea025de570f152bdd0fd192",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -58,6 +58,7 @@ public void testPolicy() throws Exception {\n         OnStartupTriggeringPolicy policy = OnStartupTriggeringPolicy.createPolicy();\n         RollingFileManager manager = RollingFileManager.getFileManager(TARGET_FILE, TARGET_PATTERN, true, false,\n                 policy, strategy, null, layout, 8192, true);\n+        manager.initialize();\n         assertTrue(Files.exists(target));\n         assertTrue(Files.size(target) == 0);\n         assertTrue(Files.exists(rolled));",
                "deletions": 0
            },
            {
                "sha": "013e4c6534f48055f82d79986181462d7a6e07a5",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RandomRollingAppenderOnStartupTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RandomRollingAppenderOnStartupTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RandomRollingAppenderOnStartupTest.java",
                "status": "added",
                "changes": 109,
                "additions": 109,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RandomRollingAppenderOnStartupTest.java?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.appender.rolling;\n+\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.junit.LoggerContextRule;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+@RunWith(Parameterized.class)\n+public class RandomRollingAppenderOnStartupTest {\n+\n+    private static final String DIR = \"target/rolling1\";\n+\n+    private final String fileExtension;\n+\n+    private Logger logger;\n+\n+    private static volatile int counter = 0;\n+\n+    @Parameterized.Parameters(name = \"{0} \\u2192 {1}\")\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][] { //\n+                // @formatter:off\n+                {\"log4j-test5.xml\", \".gz\"},\n+                {\"log4j-test5.xml\", \".gz\"},});\n+                // @formatter:on\n+    }\n+\n+    @Rule\n+    public LoggerContextRule init;\n+\n+    public RandomRollingAppenderOnStartupTest(final String configFile, final String fileExtension) {\n+        this.fileExtension = fileExtension;\n+        this.init = new LoggerContextRule(configFile);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.logger = this.init.getLogger(RandomRollingAppenderOnStartupTest.class.getName());\n+    }\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        if (Files.exists(Paths.get(\"target/onStartup\"))) {\n+            try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(Paths.get(\"target/onStartup\"))) {\n+                for (Path path : directoryStream) {\n+                    Files.delete(path);\n+                }\n+                Files.delete(Paths.get(\"target/onStartup\"));\n+            }\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() throws Exception {\n+        long size = 0;\n+        try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(Paths.get(\"target/onStartup\"))) {\n+            for (Path path : directoryStream) {\n+                if (size == 0) {\n+                    size = Files.size(path);\n+                } else {\n+                    assertTrue(size == Files.size(path));\n+                }\n+                Files.delete(path);\n+            }\n+            Files.delete(Paths.get(\"target/onStartup\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testAppender() throws Exception {\n+        System.out.println(\"Pass \" + counter++);\n+        for (int i = 0; i < 100; ++i) {\n+            logger.debug(\"This is test message number \" + i);\n+        }\n+\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "9d1145477ce748962465b984b6ecbd8c655ddea8",
                "filename": "log4j-core/src/test/resources/log4j-test5.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/resources/log4j-test5.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/log4j-core/src/test/resources/log4j-test5.xml",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/log4j-test5.xml?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+\n+-->\n+<Configuration status=\"ERROR\" name=\"XMLConfigTest\" monitorInterval=\"1\">\n+  <Appenders>\n+    <RollingRandomAccessFile name=\"RollingFile\" fileName=\"target/onStartup/onStartup.log\"\n+                 filePattern=\"target/onStartup/onStartup-%d{MM-dd-yyyy}-%i.log\">\n+      <HTMLLayout title=\"test\"/>\n+      <Policies>\n+        <OnStartupTriggeringPolicy />\n+      </Policies>\n+    </RollingRandomAccessFile>\n+  </Appenders>\n+\n+  <Loggers>\n+    <Root level=\"trace\">\n+      <AppenderRef ref=\"RollingFile\"/>\n+    </Root>\n+  </Loggers>\n+\n+</Configuration>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "8e416805d5e099d746460c0d556fb4bf6de6fbfa",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c556aecb20f807d2838073add3b29be61a5cd3b/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c556aecb20f807d2838073add3b29be61a5cd3b/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=0c556aecb20f807d2838073add3b29be61a5cd3b",
                "patch": "@@ -24,6 +24,9 @@\n   </properties>\n   <body>\n     <release version=\"2.6.2\" date=\"2016-MM-DD\" description=\"GA Release 2.6.2\">\n+      <action issue=\"LOG4J2-1420\" dev=\"rgoers\" type=\"fix\">\n+        RollingRandomAccessFileManager was not properly rolling over on startup and was getting a NullPointerException.\n+      </action>\n       <action issue=\"LOG4J2-1417\" dev=\"rpopma\" type=\"fix\">\n         Fixed issue where Unbox utility ignored the value Constants.ENABLE_THREADLOCALS and always stored non-JDK classes in ThreadLocals.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RollingRandomAccessFileManager.java",
            "RollingRandomAccessFileAppender.java",
            "OnStartupTriggeringPolicy.java",
            "RollingFileManager.java",
            "RollingFileAppender.java"
        ],
        "unit_tests": [
            "RandomRollingAppenderOnStartupTest.java",
            "OnStartupTriggeringPolicyTest.java",
            "RollingRandomAccessFileManagerTest.java"
        ]
    },
    "logging-log4j2_74942b3": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2304] Log4j2 2.8.2 JMX unregister NullPointerException.",
        "commit": "https://github.com/apache/logging-log4j2/commit/74942b3bdb447fda6df0f11819fca85f7303c511",
        "parent": "https://github.com/apache/logging-log4j2/commit/3930ee8337bac09cab3b6613c9cb94514ed21f87",
        "bug_id": "logging-log4j2_74942b3",
        "file": [
            {
                "sha": "04eaa3d411b0bfab2c795387b83e3a475040a87e",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/74942b3bdb447fda6df0f11819fca85f7303c511/log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/74942b3bdb447fda6df0f11819fca85f7303c511/log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java",
                "status": "modified",
                "changes": 38,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java?ref=74942b3bdb447fda6df0f11819fca85f7303c511",
                "patch": "@@ -54,7 +54,8 @@\n  */\n public final class Server {\n \n-    /**\n+    private static final String CONTEXT_NAME_ALL = \"*\";\n+\t/**\n      * The domain part, or prefix ({@value}) of the {@code ObjectName} of all MBeans that instrument Log4J2 components.\n      */\n     public static final String DOMAIN = \"org.apache.logging.log4j2\";\n@@ -198,25 +199,26 @@ public static void unregisterMBeans() {\n             LOGGER.debug(\"JMX disabled for Log4j2. Not unregistering MBeans.\");\n             return;\n         }\n-        final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-        unregisterMBeans(mbs);\n+        unregisterMBeans(ManagementFactory.getPlatformMBeanServer());\n     }\n \n     /**\n      * Unregister all log4j MBeans from the specified MBean server.\n      *\n      * @param mbs the MBean server to unregister from.\n      */\n-    public static void unregisterMBeans(final MBeanServer mbs) {\n-        unregisterStatusLogger(\"*\", mbs);\n-        unregisterContextSelector(\"*\", mbs);\n-        unregisterContexts(mbs);\n-        unregisterLoggerConfigs(\"*\", mbs);\n-        unregisterAsyncLoggerRingBufferAdmins(\"*\", mbs);\n-        unregisterAsyncLoggerConfigRingBufferAdmins(\"*\", mbs);\n-        unregisterAppenders(\"*\", mbs);\n-        unregisterAsyncAppenders(\"*\", mbs);\n-    }\n+\tpublic static void unregisterMBeans(final MBeanServer mbs) {\n+\t\tif (mbs != null) {\n+\t\t\tunregisterStatusLogger(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterContextSelector(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterContexts(mbs);\n+\t\t\tunregisterLoggerConfigs(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterAsyncLoggerRingBufferAdmins(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterAsyncLoggerConfigRingBufferAdmins(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterAppenders(CONTEXT_NAME_ALL, mbs);\n+\t\t\tunregisterAsyncAppenders(CONTEXT_NAME_ALL, mbs);\n+\t\t}\n+\t}\n \n     /**\n      * Returns the {@code ContextSelector} of the current {@code Log4jContextFactory}.\n@@ -333,14 +335,16 @@ private static void unregisterAllMatching(final String search, final MBeanServer\n         try {\n             final ObjectName pattern = new ObjectName(search);\n             final Set<ObjectName> found = mbs.queryNames(pattern, null);\n-            if (found.isEmpty()) {\n+            if (found == null || found.isEmpty()) {\n             \tLOGGER.trace(\"Unregistering but no MBeans found matching '{}'\", search);\n             } else {\n             \tLOGGER.trace(\"Unregistering {} MBeans: {}\", found.size(), found);\n             }\n-            for (final ObjectName objectName : found) {\n-                mbs.unregisterMBean(objectName);\n-            }\n+\t\t\tif (found != null) {\n+\t\t\t\tfor (final ObjectName objectName : found) {\n+\t\t\t\t\tmbs.unregisterMBean(objectName);\n+\t\t\t\t}\n+\t\t\t}\n         } catch (final InstanceNotFoundException ex) {\n             LOGGER.debug(\"Could not unregister MBeans for \" + search + \". Ignoring \" + ex);\n         } catch (final Exception ex) {",
                "deletions": 17
            },
            {
                "sha": "f519ca32482c562d17fe6dbd722d64cac06a5ce1",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/74942b3bdb447fda6df0f11819fca85f7303c511/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/74942b3bdb447fda6df0f11819fca85f7303c511/src/changes/changes.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=74942b3bdb447fda6df0f11819fca85f7303c511",
                "patch": "@@ -112,6 +112,9 @@\n       <action issue=\"LOG4J2-2302\" dev=\"ggregory\" type=\"update\">\n         Status logger should show the Log4j name and version when initializing itself.\n       </action>\n+      <action issue=\"LOG4J2-2304\" dev=\"ggregory\" type=\"update\" due-to=\"wumengsheng\">\n+        Log4j2 2.8.2 JMX unregister NullPointerException.\n+      </action>\n     </release>\n     <release version=\"2.11.1\" date=\"2018-MM-DD\" description=\"GA Release 2.11.1\">\n       <action issue=\"LOG4J2-2268\" dev=\"rgoers\" type=\"fix\" due-to=\"Tilman Hausherr\">\n@@ -126,6 +129,9 @@\n       <action issue=\"LOG4J2-2302\" dev=\"ggregory\" type=\"update\">\n         Status logger should show the Log4j name and version when initializing itself.\n       </action>\n+      <action issue=\"LOG4J2-2304\" dev=\"ggregory\" type=\"update\" due-to=\"wumengsheng\">\n+        Log4j2 2.8.2 JMX unregister NullPointerException.\n+      </action>\n     </release>\n     <release version=\"2.11.0\" date=\"2018-xx-xx\" description=\"GA Release 2.11.0\">\n       <action issue=\"LOG4J2-2104\" dev=\"rgoers\" type=\"fix\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Server.java"
        ],
        "unit_tests": [
            "ServerTest.java"
        ]
    },
    "logging-log4j2_f8a4219": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-914] ThrowableProxy.getExtendedStackTraceAsString causes\nNullpointerException.",
        "commit": "https://github.com/apache/logging-log4j2/commit/f8a421972a4858bf2026d757f5d1bea7c1062a35",
        "parent": "https://github.com/apache/logging-log4j2/commit/683c913973f6e5aefa4221dc0ab382ef6e2ebe7c",
        "bug_id": "logging-log4j2_f8a4219",
        "file": [
            {
                "sha": "1d3af2a0677a85bfb96eecc8eb52c9aa66aa35ba",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f8a421972a4858bf2026d757f5d1bea7c1062a35/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f8a421972a4858bf2026d757f5d1bea7c1062a35/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=f8a421972a4858bf2026d757f5d1bea7c1062a35",
                "patch": "@@ -342,7 +342,8 @@ public String getExtendedStackTraceAsString(final List<String> ignorePackages) {\n             sb.append(\": \").append(msg);\n         }\n         sb.append(EOL);\n-        this.formatElements(sb, 0, this.throwable.getStackTrace(), this.extendedStackTrace, ignorePackages);\n+        StackTraceElement[] causedTrace = this.throwable != null ? this.throwable.getStackTrace() : null;\n+        this.formatElements(sb, 0, causedTrace, this.extendedStackTrace, ignorePackages);\n         this.formatCause(sb, this.causeProxy, ignorePackages);\n         return sb.toString();\n     }",
                "deletions": 1
            },
            {
                "sha": "850f5fb20f6c88a411ee0eef0611b60c8b1bcd2e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f8a421972a4858bf2026d757f5d1bea7c1062a35/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f8a421972a4858bf2026d757f5d1bea7c1062a35/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java?ref=f8a421972a4858bf2026d757f5d1bea7c1062a35",
                "patch": "@@ -136,6 +136,16 @@ public void testSerialization() throws Exception {\n         assertArrayEquals(proxy.getExtendedStackTrace(), proxy2.getExtendedStackTrace());\n     }\n \n+    @Test\n+    public void testSerialization_getExtendedStackTraceAsString() throws Exception {\n+        final Throwable throwable = new IllegalArgumentException(\"This is a test\");\n+        final ThrowableProxy proxy = new ThrowableProxy(throwable);\n+        final byte[] binary = serialize(proxy);\n+        final ThrowableProxy proxy2 = deserialize(binary);\n+\n+        assertEquals(proxy.getExtendedStackTraceAsString(), proxy2.getExtendedStackTraceAsString());\n+    }\n+\n     @Test\n     public void testSerializationWithUnknownThrowable() throws Exception {\n ",
                "deletions": 0
            },
            {
                "sha": "fe61725eed0e2a2a5fbf2ef881f99ae48d83f23c",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f8a421972a4858bf2026d757f5d1bea7c1062a35/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f8a421972a4858bf2026d757f5d1bea7c1062a35/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=f8a421972a4858bf2026d757f5d1bea7c1062a35",
                "patch": "@@ -32,6 +32,9 @@\n         Specify the SocketAppender connect timeout value as part of the configuration.\n         The new appender takes a new parameter connectTimeoutMillis.\n       </action>\n+      <action issue=\"LOG4J2-914\" dev=\"ggregory\" type=\"fix\" due-to=\"Kaj Bjurman\">\n+        ThrowableProxy.getExtendedStackTraceAsString causes NullpointerException.\n+      </action>\n       <action issue=\"LOG4J2-912\" dev=\"ggregory\" type=\"fix\">\n         XML configuration does not report full error message for XInclude parser configuration problems.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ThrowableProxy.java"
        ],
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_33ee4bf": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1227\n    Test if the event is null before using it, to avoid NullPointerException.\n    Add some unit tests.\n    Submitted by: Olivier Lemasle <o.lemasle@gmail.com>",
        "commit": "https://github.com/apache/logging-log4j2/commit/33ee4bfd0aa1f58a705771222132a42d1dfb328c",
        "parent": "https://github.com/apache/logging-log4j2/commit/13b0dd8794f52facddb4a27ba7612ddbf7abef4b",
        "bug_id": "logging-log4j2_33ee4bf",
        "file": [
            {
                "sha": "c00645e6d55941bff7a411d41f02e4d1d6f98c8d",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33ee4bfd0aa1f58a705771222132a42d1dfb328c/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33ee4bfd0aa1f58a705771222132a42d1dfb328c/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/MapLookup.java?ref=33ee4bfd0aa1f58a705771222132a42d1dfb328c",
                "patch": "@@ -118,7 +118,7 @@ public static void setMainArguments(final String... args) {\n \n     @Override\n     public String lookup(final LogEvent event, final String key) {\n-        final boolean isMapMessage = event.getMessage() instanceof MapMessage;\n+        final boolean isMapMessage = event != null && event.getMessage() instanceof MapMessage;\n         if (map == null && !isMapMessage) {\n             return null;\n         }",
                "deletions": 1
            },
            {
                "sha": "5f26d157960a3ce01a397a495fecab17a5f3c483",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/33ee4bfd0aa1f58a705771222132a42d1dfb328c/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/33ee4bfd0aa1f58a705771222132a42d1dfb328c/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/lookup/MapLookupTest.java?ref=33ee4bfd0aa1f58a705771222132a42d1dfb328c",
                "patch": "@@ -20,6 +20,9 @@\n \n import java.util.HashMap;\n \n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n+import org.apache.logging.log4j.message.MapMessage;\n import org.junit.Test;\n \n /**\n@@ -64,4 +67,26 @@ public void testMainMap() {\n         assertEquals(null, lookup.lookup(\"foo.txt\"));\n     }\n \n+    @Test\n+    public void testEventMapMessage() {\n+      final HashMap<String, String> map = new HashMap<>();\n+      map.put(\"A\", \"B\");\n+      final HashMap<String, String> eventMap = new HashMap<>();\n+      eventMap.put(\"A1\", \"B1\");\n+      final MapMessage message = new MapMessage(eventMap);\n+      final LogEvent event = Log4jLogEvent.newBuilder()\n+                .setMessage(message)\n+                .build();\n+      final MapLookup lookup = new MapLookup(map);\n+      assertEquals(\"B\", lookup.lookup(event, \"A\"));\n+      assertEquals(\"B1\", lookup.lookup(event, \"A\"));\n+    }\n+\n+    @Test\n+    public void testNullEvent() {\n+      final HashMap<String, String> map = new HashMap<>();\n+      map.put(\"A\", \"B\");\n+      final MapLookup lookup = new MapLookup(map);\n+      assertEquals(\"B\", lookup.lookup(null, \"A\"));\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "MapLookup.java"
        ],
        "unit_tests": [
            "MapLookupTest.java"
        ]
    },
    "logging-log4j2_4786a73": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1067] ThrowableProxy getExtendedStackTraceAsString throws NPE on\ndeserialized nested exceptions.",
        "commit": "https://github.com/apache/logging-log4j2/commit/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
        "parent": "https://github.com/apache/logging-log4j2/commit/7d732fa7a5df8a24c36c30f4d716b863d76e79bd",
        "bug_id": "logging-log4j2_4786a73",
        "file": [
            {
                "sha": "d0800cc5a54b2e940ebc96d54d55e7cca9cf205a",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "patch": "@@ -202,15 +202,15 @@ public boolean equals(final Object obj) {\n     }\n \n     @SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n-    private void formatCause(final StringBuilder sb, final ThrowableProxy cause, final List<String> ignorePackages) {\n-        if (cause == null) {\n-            return;\n-        }\n-        sb.append(\"Caused by: \").append(cause).append(EOL);\n-        this.formatElements(sb, cause.commonElementCount, cause.getThrowable().getStackTrace(),\n-                cause.extendedStackTrace, ignorePackages);\n-        this.formatCause(sb, cause.causeProxy, ignorePackages);\n-    }\n+\tprivate void formatCause(final StringBuilder sb, final ThrowableProxy cause, final List<String> ignorePackages) {\n+\t\tif (cause == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tsb.append(\"Caused by: \").append(cause).append(EOL);\n+\t\tthis.formatElements(sb, cause.commonElementCount, cause.getStackTrace(), cause.extendedStackTrace,\n+\t\t\t\tignorePackages);\n+\t\tthis.formatCause(sb, cause.causeProxy, ignorePackages);\n+\t}\n \n     private void formatElements(final StringBuilder sb, final int commonCount, final StackTraceElement[] causedTrace,\n             final ExtendedStackTraceElement[] extStackTrace, final List<String> ignorePackages) {",
                "deletions": 9
            },
            {
                "sha": "08d0a4b94b4424c7f75197f508082170e7bd5d10",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/ThrowableProxyTest.java?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n@@ -146,6 +145,34 @@ public void testSerialization_getExtendedStackTraceAsString() throws Exception {\n \n         assertEquals(proxy.getExtendedStackTraceAsString(), proxy2.getExtendedStackTraceAsString());\n     }\n+    \n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth1() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(new IllegalArgumentException(\"This is a test\"));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth2() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(\n+\t\t\t\tnew IllegalArgumentException(\"This is a test\", new IOException(\"level 2\")));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    @Test\n+\tpublic void testSerialization_getExtendedStackTraceAsStringWithNestedThrowableDepth3() throws Exception {\n+\t\tfinal Throwable throwable = new RuntimeException(new IllegalArgumentException(\"level 1\",\n+\t\t\t\tnew IOException(\"level 2\", new IllegalStateException(\"level 3\"))));\n+\t\ttestSerialization_getExtendedStackTraceAsStringWithNestedThrowable(throwable);\n+\t}\n+\n+    private void testSerialization_getExtendedStackTraceAsStringWithNestedThrowable(Throwable throwable) throws Exception {\n+        final ThrowableProxy proxy = new ThrowableProxy(throwable);\n+        final byte[] binary = serialize(proxy);\n+        final ThrowableProxy proxy2 = deserialize(binary);\n+\n+        assertEquals(proxy.getExtendedStackTraceAsString(), proxy2.getExtendedStackTraceAsString());\n+    }\n \n     @Test\n     public void testSerializationWithUnknownThrowable() throws Exception {",
                "deletions": 1
            },
            {
                "sha": "3451f8598f79bb06cb6409ebb8fe9193dc1a8854",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4786a7395121e0fd1b4e12d7e1b3c0eebd64d794/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=4786a7395121e0fd1b4e12d7e1b3c0eebd64d794",
                "patch": "@@ -48,6 +48,9 @@\n       <action issue=\"LOG4J2-1051\" dev=\"ggregory\" type=\"fix\" due-to=\"Lukasz Lenart\">\r\n         NoClassDefFoundError when starting app on Google App Engine.\r\n       </action>\r\n+      <action issue=\"LOG4J2-1067\" dev=\"ggregory\" type=\"fix\" due-to=\"Sam Braam\">\r\n+        ThrowableProxy getExtendedStackTraceAsString throws NPE on deserialized nested exceptions.\r\n+      </action>\r\n       <action issue=\"LOG4J2-1049\" dev=\"rpopma\" type=\"fix\" due-to=\"Robert Schaft\">\r\n         AsyncAppender now resets the thread interrupted flag after catching InterruptedException.\r\n       </action>\r",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ThrowableProxy.java"
        ],
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_60bcf16": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1599]\n\nNPE in\norg.apache.logging.log4j.message.ParameterFormatter.formatMessage3(StringBuilder,\nchar[], int, Object[], int, int[]).",
        "commit": "https://github.com/apache/logging-log4j2/commit/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
        "parent": "https://github.com/apache/logging-log4j2/commit/2b1cf11e942f54757e96cdd9eb6b11bac797d691",
        "bug_id": "logging-log4j2_60bcf16",
        "file": [
            {
                "sha": "79c447a89f34885f21de36581672dd0d9ced9381",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java?ref=60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
                "patch": "@@ -200,7 +200,10 @@ static void formatMessage2(final StringBuilder buffer, final String messagePatte\n      */\n     static void formatMessage3(final StringBuilder buffer, final char[] messagePattern, final int patternLength,\n             final Object[] arguments, final int argCount, final int[] indices) {\n-        if (messagePattern == null || arguments == null || argCount == 0) {\n+        if (messagePattern == null) {\n+            return;\n+        }\n+        if (arguments == null || argCount == 0) {\n             buffer.append(messagePattern);\n             return;\n         }",
                "deletions": 1
            },
            {
                "sha": "b2fcc30ee4dc20695721c29746a872f02714fe0b",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=60bcf168d45eb930e84d3eee9d3ed11d2f2da2ef",
                "patch": "@@ -156,6 +156,9 @@\n       <action issue=\"LOG4J2-1573\" dev=\"ggregory\" type=\"fix\" due-to=\"Steffen Offermann\">\n         Layout is no longer optional.\n       </action>\n+      <action issue=\"LOG4J2-1599\" dev=\"ggregory\" type=\"fix\">\n+        NPE in org.apache.logging.log4j.message.ParameterFormatter.formatMessage3(StringBuilder, char[], int, Object[], int, int[]).\n+      </action>\n       <action issue=\"LOG4J2-1578\" dev=\"ggregory\" type=\"add\">\n         RoutingAppender can be configured with scripts. Add Script in a Routes element.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ParameterFormatter.java"
        ],
        "unit_tests": [
            "ParameterFormatterTest.java"
        ]
    },
    "logging-log4j2_581b250": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2673] OutputStreamAppender.Builder ignores setFilter().\n\nAlso allow a null output stream for convenience instead of an NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/581b2506a2a1743c7bb4707bde7d7bd6701555a4",
        "parent": "https://github.com/apache/logging-log4j2/commit/377d177edb1bb599365eb339bc5e6c8108c64b88",
        "bug_id": "logging-log4j2_581b250",
        "file": [
            {
                "sha": "f8bf4d8a4deaae2b6e77ea73f0eb693e4cdafe78",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java",
                "status": "modified",
                "changes": 341,
                "additions": 173,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "patch": "@@ -1,168 +1,173 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-package org.apache.logging.log4j.core.appender;\n-\n-import java.io.OutputStream;\n-import java.io.Serializable;\n-\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.Core;\n-import org.apache.logging.log4j.core.Filter;\n-import org.apache.logging.log4j.core.Layout;\n-import org.apache.logging.log4j.core.config.Property;\n-import org.apache.logging.log4j.plugins.Plugin;\n-import org.apache.logging.log4j.plugins.PluginBuilderFactory;\n-import org.apache.logging.log4j.plugins.PluginFactory;\n-import org.apache.logging.log4j.core.layout.PatternLayout;\n-import org.apache.logging.log4j.core.util.CloseShieldOutputStream;\n-\n-/**\n- * Appends log events to a given output stream using a layout.\n- * <p>\n- * Character encoding is handled within the Layout.\n- * </p>\n- */\n-@Plugin(name = \"OutputStream\", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)\n-public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {\n-\n-    /**\n-     * Builds OutputStreamAppender instances.\n-     */\n-    public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>\n-            implements org.apache.logging.log4j.plugins.util.Builder<OutputStreamAppender> {\n-\n-        private boolean follow = false;\n-\n-        private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();\n-\n-        private OutputStream target;\n-\n-        @Override\n-        public OutputStreamAppender build() {\n-            \n-            return new OutputStreamAppender(getName(), layout, getFilter(), getManager(target, follow, layout), isIgnoreExceptions(), getPropertyArray());\n-        }\n-\n-        public B setFollow(final boolean shouldFollow) {\n-            this.follow = shouldFollow;\n-            return asBuilder();\n-        }\n-\n-        public B setTarget(final OutputStream aTarget) {\n-            this.target = aTarget;\n-            return asBuilder();\n-        }\n-    }\n-    /**\n-     * Holds data to pass to factory method.\n-     */\n-    private static class FactoryData {\n-        private final Layout<? extends Serializable> layout;\n-        private final String name;\n-        private final OutputStream os;\n-\n-        /**\n-         * Builds instances.\n-         * \n-         * @param os\n-         *            The OutputStream.\n-         * @param type\n-         *            The name of the target.\n-         * @param layout\n-         *            A Serializable layout\n-         */\n-        public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {\n-            this.os = os;\n-            this.name = type;\n-            this.layout = layout;\n-        }\n-    }\n-\n-    /**\n-     * Creates the manager.\n-     */\n-    private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {\n-\n-        /**\n-         * Creates an OutputStreamManager.\n-         * \n-         * @param name\n-         *            The name of the entity to manage.\n-         * @param data\n-         *            The data required to create the entity.\n-         * @return The OutputStreamManager\n-         */\n-        @Override\n-        public OutputStreamManager createManager(final String name, final FactoryData data) {\n-            return new OutputStreamManager(data.os, data.name, data.layout, true);\n-        }\n-    }\n-\n-    private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();\n-\n-    /**\n-     * Creates an OutputStream Appender.\n-     * \n-     * @param layout\n-     *            The layout to use or null to get the default layout.\n-     * @param filter\n-     *            The Filter or null.\n-     * @param target\n-     *            an output stream.\n-     * @param follow\n-     *            If true will follow changes to the underlying output stream.\n-     *            Use false as the default.\n-     * @param name\n-     *            The name of the Appender (required).\n-     * @param ignore\n-     *            If {@code \"true\"} (default) exceptions encountered when\n-     *            appending events are logged; otherwise they are propagated to\n-     *            the caller. Use true as the default.\n-     * @return The ConsoleAppender.\n-     */\n-    @PluginFactory\n-    public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,\n-            final OutputStream target, final String name, final boolean follow, final boolean ignore) {\n-        if (name == null) {\n-            LOGGER.error(\"No name provided for OutputStreamAppender\");\n-            return null;\n-        }\n-        if (layout == null) {\n-            layout = PatternLayout.createDefaultLayout();\n-        }\n-        return new OutputStreamAppender(name, layout, filter, getManager(target, follow, layout), ignore, null);\n-    }\n-\n-    private static OutputStreamManager getManager(final OutputStream target, final boolean follow,\n-            final Layout<? extends Serializable> layout) {\n-        final OutputStream os = new CloseShieldOutputStream(target);\n-        final String managerName = target.getClass().getName() + \"@\" + Integer.toHexString(target.hashCode()) + '.'\n-                + follow;\n-        return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);\n-    }\n-\n-    @PluginBuilderFactory\n-    public static Builder newBuilder() {\n-        return new Builder();\n-    }\n-\n-    private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,\n-            final OutputStreamManager manager, final boolean ignoreExceptions, Property[] properties) {\n-        super(name, layout, filter, ignoreExceptions, true, null, manager);\n-    }\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+package org.apache.logging.log4j.core.appender;\r\n+\r\n+import java.io.OutputStream;\r\n+import java.io.Serializable;\r\n+\r\n+import org.apache.logging.log4j.core.Appender;\r\n+import org.apache.logging.log4j.core.Core;\r\n+import org.apache.logging.log4j.core.Filter;\r\n+import org.apache.logging.log4j.core.Layout;\r\n+import org.apache.logging.log4j.core.config.Property;\r\n+import org.apache.logging.log4j.core.layout.PatternLayout;\r\n+import org.apache.logging.log4j.core.util.CloseShieldOutputStream;\r\n+import org.apache.logging.log4j.core.util.NullOutputStream;\r\n+import org.apache.logging.log4j.plugins.Plugin;\r\n+import org.apache.logging.log4j.plugins.PluginBuilderFactory;\r\n+import org.apache.logging.log4j.plugins.PluginFactory;\r\n+\r\n+/**\r\n+ * Appends log events to a given output stream using a layout.\r\n+ * <p>\r\n+ * Character encoding is handled within the Layout.\r\n+ * </p>\r\n+ */\r\n+@Plugin(name = \"OutputStream\", category = Core.CATEGORY_NAME, elementType = Appender.ELEMENT_TYPE, printObject = true)\r\n+public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {\r\n+\r\n+    /**\r\n+     * Builds OutputStreamAppender instances.\r\n+     *\r\n+     * @param <B>\r\n+     *            The type to build.\r\n+     */\r\n+    public static class Builder<B extends Builder<B>> extends AbstractOutputStreamAppender.Builder<B>\r\n+            implements org.apache.logging.log4j.plugins.util.Builder<OutputStreamAppender> {\r\n+\r\n+        private boolean follow = false;\r\n+\r\n+        private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();\r\n+\r\n+        private OutputStream target;\r\n+\r\n+        @Override\r\n+        public OutputStreamAppender build() {\r\n+            \r\n+            return new OutputStreamAppender(getName(), layout, getFilter(), getManager(target, follow, layout), isIgnoreExceptions(), getPropertyArray());\r\n+        }\r\n+\r\n+        public B setFollow(final boolean shouldFollow) {\r\n+            this.follow = shouldFollow;\r\n+            return asBuilder();\r\n+        }\r\n+\r\n+        public B setTarget(final OutputStream aTarget) {\r\n+            this.target = aTarget;\r\n+            return asBuilder();\r\n+        }\r\n+    }\r\n+    /**\r\n+     * Holds data to pass to factory method.\r\n+     */\r\n+    private static class FactoryData {\r\n+        private final Layout<? extends Serializable> layout;\r\n+        private final String name;\r\n+        private final OutputStream os;\r\n+\r\n+        /**\r\n+         * Builds instances.\r\n+         * \r\n+         * @param os\r\n+         *            The OutputStream.\r\n+         * @param type\r\n+         *            The name of the target.\r\n+         * @param layout\r\n+         *            A Serializable layout\r\n+         */\r\n+        public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {\r\n+            this.os = os;\r\n+            this.name = type;\r\n+            this.layout = layout;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates the manager.\r\n+     */\r\n+    private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {\r\n+\r\n+        /**\r\n+         * Creates an OutputStreamManager.\r\n+         * \r\n+         * @param name\r\n+         *            The name of the entity to manage.\r\n+         * @param data\r\n+         *            The data required to create the entity.\r\n+         * @return The OutputStreamManager\r\n+         */\r\n+        @Override\r\n+        public OutputStreamManager createManager(final String name, final FactoryData data) {\r\n+            return new OutputStreamManager(data.os, data.name, data.layout, true);\r\n+        }\r\n+    }\r\n+\r\n+    private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();\r\n+\r\n+    /**\r\n+     * Creates an OutputStream Appender.\r\n+     * \r\n+     * @param layout\r\n+     *            The layout to use or null to get the default layout.\r\n+     * @param filter\r\n+     *            The Filter or null.\r\n+     * @param target\r\n+     *            an output stream.\r\n+     * @param follow\r\n+     *            If true will follow changes to the underlying output stream.\r\n+     *            Use false as the default.\r\n+     * @param name\r\n+     *            The name of the Appender (required).\r\n+     * @param ignore\r\n+     *            If {@code \"true\"} (default) exceptions encountered when\r\n+     *            appending events are logged; otherwise they are propagated to\r\n+     *            the caller. Use true as the default.\r\n+     * @return The ConsoleAppender.\r\n+     */\r\n+    @PluginFactory\r\n+    public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,\r\n+            final OutputStream target, final String name, final boolean follow, final boolean ignore) {\r\n+        if (name == null) {\r\n+            LOGGER.error(\"No name provided for OutputStreamAppender\");\r\n+            return null;\r\n+        }\r\n+        if (layout == null) {\r\n+            layout = PatternLayout.createDefaultLayout();\r\n+        }\r\n+        return new OutputStreamAppender(name, layout, filter, getManager(target, follow, layout), ignore, null);\r\n+    }\r\n+\r\n+    private static OutputStreamManager getManager(final OutputStream target, final boolean follow,\r\n+            final Layout<? extends Serializable> layout) {\r\n+        final OutputStream os = target == null ? NullOutputStream.getInstance() : new CloseShieldOutputStream(target);\r\n+        final OutputStream targetRef = target == null ? os : target;\r\n+        final String managerName = targetRef.getClass().getName() + \"@\" + Integer.toHexString(targetRef.hashCode())\r\n+                + '.' + follow;\r\n+        return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);\r\n+    }\r\n+\r\n+    @PluginBuilderFactory\r\n+    public static <B extends Builder<B>> B newBuilder() {\r\n+        return new Builder<B>().asBuilder();\r\n+    }\r\n+\r\n+    private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,\r\n+            final OutputStreamManager manager, final boolean ignoreExceptions, Property[] properties) {\r\n+        super(name, layout, filter, ignoreExceptions, true, null, manager);\r\n+    }\r\n+\r\n+}\r",
                "deletions": 168
            },
            {
                "sha": "af194b8426f6ef58b9a4ef18dfb1efbd1586f525",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java",
                "status": "modified",
                "changes": 232,
                "additions": 123,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/OutputStreamAppenderTest.java?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "patch": "@@ -1,109 +1,123 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-package org.apache.logging.log4j.core.appender;\n-\n-import java.io.BufferedOutputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.OutputStream;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.config.Configuration;\n-import org.apache.logging.log4j.core.layout.PatternLayout;\n-import org.junit.Assert;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n-\n-/**\n- * Tests {@link OutputStreamAppender}.\n- */\n-public class OutputStreamAppenderTest {\n-\n-    private static final String TEST_MSG = \"FOO ERROR\";\n-\n-    @Rule\n-    public TestName testName = new TestName();\n-\n-    private String getName(final OutputStream out) {\n-        return out.getClass().getSimpleName() + \".\" + testName.getMethodName();\n-    }\n-\n-    /**\n-     * Tests that you can add an output stream appender dynamically.\n-     */\n-    private void addAppender(final OutputStream outputStream, final String outputStreamName) {\n-        final LoggerContext context = LoggerContext.getContext(false);\n-        final Configuration config = context.getConfiguration();\n-        final PatternLayout layout = PatternLayout.createDefaultLayout(config);\n-        final Appender appender = OutputStreamAppender.createAppender(layout, null, outputStream, outputStreamName, false, true);\n-        appender.start();\n-        config.addAppender(appender);\n-        ConfigurationTestUtils.updateLoggers(appender, config);\n-    }\n-\n-    @Test\n-    public void testOutputStreamAppenderToBufferedOutputStream() {\n-        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        final OutputStream os = new BufferedOutputStream(out);\n-        final String name = getName(out);\n-        final Logger logger = LogManager.getLogger(name);\n-        addAppender(os, name);\n-        logger.error(TEST_MSG);\n-        final String actual = out.toString();\n-        Assert.assertTrue(actual, actual.contains(TEST_MSG));\n-    }\n-\n-    @Test\n-    public void testOutputStreamAppenderToByteArrayOutputStream() {\n-        final OutputStream out = new ByteArrayOutputStream();\n-        final String name = getName(out);\n-        final Logger logger = LogManager.getLogger(name);\n-        addAppender(out, name);\n-        logger.error(TEST_MSG);\n-        final String actual = out.toString();\n-        Assert.assertTrue(actual, actual.contains(TEST_MSG));\n-    }\n-\n-    /**\n-     * Validates that the code pattern we use to add an appender on the fly\n-     * works with a basic appender that is not the new OutputStream appender or\n-     * new Writer appender.\n-     */\n-    @Test\n-    public void testUpdatePatternWithFileAppender() {\n-        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        final Configuration config = ctx.getConfiguration();\n-        // @formatter:off\n-        final Appender appender = FileAppender.newBuilder()\n-            .setFileName(\"target/\" + getClass().getName() + \".log\")\n-            .setAppend(false)\n-            .setName(\"File\")\n-            .setIgnoreExceptions(false)\n-            .setBufferedIo(false)\n-            .setBufferSize(4000)\n-            .setConfiguration(config)\n-            .build();\n-        // @formatter:on\n-        appender.start();\n-        config.addAppender(appender);\n-        ConfigurationTestUtils.updateLoggers(appender, config);\n-        LogManager.getLogger().error(\"FOO MSG\");\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+package org.apache.logging.log4j.core.appender;\r\n+\r\n+import java.io.BufferedOutputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.OutputStream;\r\n+\r\n+import org.apache.logging.log4j.LogManager;\r\n+import org.apache.logging.log4j.Logger;\r\n+import org.apache.logging.log4j.core.Appender;\r\n+import org.apache.logging.log4j.core.LoggerContext;\r\n+import org.apache.logging.log4j.core.config.Configuration;\r\n+import org.apache.logging.log4j.core.filter.NoMarkerFilter;\r\n+import org.apache.logging.log4j.core.layout.PatternLayout;\r\n+import org.junit.Assert;\r\n+import org.junit.Rule;\r\n+import org.junit.Test;\r\n+import org.junit.rules.TestName;\r\n+\r\n+/**\r\n+ * Tests {@link OutputStreamAppender}.\r\n+ */\r\n+public class OutputStreamAppenderTest {\r\n+\r\n+    private static final String TEST_MSG = \"FOO ERROR\";\r\n+\r\n+    @Rule\r\n+    public TestName testName = new TestName();\r\n+\r\n+    private String getName(final OutputStream out) {\r\n+        return out.getClass().getSimpleName() + \".\" + testName.getMethodName();\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that you can add an output stream appender dynamically.\r\n+     */\r\n+    private void addAppender(final OutputStream outputStream, final String outputStreamName) {\r\n+        final LoggerContext context = LoggerContext.getContext(false);\r\n+        final Configuration config = context.getConfiguration();\r\n+        final PatternLayout layout = PatternLayout.createDefaultLayout(config);\r\n+        final Appender appender = OutputStreamAppender.createAppender(layout, null, outputStream, outputStreamName, false, true);\r\n+        appender.start();\r\n+        config.addAppender(appender);\r\n+        ConfigurationTestUtils.updateLoggers(appender, config);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testBuildFilter() {\r\n+        final NoMarkerFilter filter = NoMarkerFilter.newBuilder().build();\r\n+        // @formatter:off\r\n+        final OutputStreamAppender.Builder builder = OutputStreamAppender.newBuilder()\r\n+                .setName(\"test\")\r\n+                .setFilter(filter);\r\n+        // @formatter:on\r\n+        Assert.assertEquals(filter, builder.getFilter());\r\n+        final OutputStreamAppender appender = builder.build();\r\n+        Assert.assertEquals(filter, appender.getFilter());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testOutputStreamAppenderToBufferedOutputStream() {\r\n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        final OutputStream os = new BufferedOutputStream(out);\r\n+        final String name = getName(out);\r\n+        final Logger logger = LogManager.getLogger(name);\r\n+        addAppender(os, name);\r\n+        logger.error(TEST_MSG);\r\n+        final String actual = out.toString();\r\n+        Assert.assertTrue(actual, actual.contains(TEST_MSG));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testOutputStreamAppenderToByteArrayOutputStream() {\r\n+        final OutputStream out = new ByteArrayOutputStream();\r\n+        final String name = getName(out);\r\n+        final Logger logger = LogManager.getLogger(name);\r\n+        addAppender(out, name);\r\n+        logger.error(TEST_MSG);\r\n+        final String actual = out.toString();\r\n+        Assert.assertTrue(actual, actual.contains(TEST_MSG));\r\n+    }\r\n+\r\n+    /**\r\n+     * Validates that the code pattern we use to add an appender on the fly\r\n+     * works with a basic appender that is not the new OutputStream appender or\r\n+     * new Writer appender.\r\n+     */\r\n+    @Test\r\n+    public void testUpdatePatternWithFileAppender() {\r\n+        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\r\n+        final Configuration config = ctx.getConfiguration();\r\n+        // @formatter:off\r\n+        final Appender appender = FileAppender.newBuilder()\r\n+            .setFileName(\"target/\" + getClass().getName() + \".log\")\r\n+            .setAppend(false)\r\n+            .setName(\"File\")\r\n+            .setIgnoreExceptions(false)\r\n+            .setBufferedIo(false)\r\n+            .setBufferSize(4000)\r\n+            .setConfiguration(config)\r\n+            .build();\r\n+        // @formatter:on\r\n+        appender.start();\r\n+        config.addAppender(appender);\r\n+        ConfigurationTestUtils.updateLoggers(appender, config);\r\n+        LogManager.getLogger().error(\"FOO MSG\");\r\n+    }\r\n+}\r",
                "deletions": 109
            },
            {
                "sha": "876cf3db2411badb7d7d3aab872e03c7c6956165",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/581b2506a2a1743c7bb4707bde7d7bd6701555a4/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/581b2506a2a1743c7bb4707bde7d7bd6701555a4/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=581b2506a2a1743c7bb4707bde7d7bd6701555a4",
                "patch": "@@ -145,6 +145,9 @@\n       <action issue=\"LOG4J2-2639\" dev=\"rgoers\" type=\"add\">\n         Add builder pattern to Logger interface.\n       </action>\n+      <action issue=\"LOG4J2-2673\" dev=\"ggregory\" type=\"fix\" due-to=\"Yuichi Sugimura, Gary Gregory\">\n+        OutputStreamAppender.Builder ignores setFilter().\n+      </action>\n     </release>\n     <release version=\"2.12.1\" date=\"2019-08-06\" description=\"GA Release 2.12.1\">\n       <action issue=\"LOG4J2-1946\" dev=\"rgoers\" type=\"fix\" due-to=\"Igor Perelyotov\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OutputStreamAppender.java"
        ],
        "unit_tests": [
            "OutputStreamAppenderTest.java"
        ]
    },
    "logging-log4j2_a0e46ff": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1108] NullPointerException when passing null to\njava.util.logging.Logger.setLevel().",
        "commit": "https://github.com/apache/logging-log4j2/commit/a0e46ffc85bae7c4d0e622e79396cd71edd007a0",
        "parent": "https://github.com/apache/logging-log4j2/commit/bbac3084d177485075703213672a359a66cd284f",
        "bug_id": "logging-log4j2_a0e46ff",
        "file": [
            {
                "sha": "f4ed6e2dc34ed0dbc8977941f0159acbfd73b13d",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a0e46ffc85bae7c4d0e622e79396cd71edd007a0/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a0e46ffc85bae7c4d0e622e79396cd71edd007a0/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java?ref=a0e46ffc85bae7c4d0e622e79396cd71edd007a0",
                "patch": "@@ -107,7 +107,13 @@ public synchronized void setLevel(final Level level) {\n         if (level == getLevel()) {\n             return;\n         }\n-        final Level actualLevel = level != null ? level : getParent().getLevel();\n+        Level actualLevel;\n+        if (level != null) {\n+            actualLevel = level;\n+        } else {\n+            final Logger parent = getParent();\n+            actualLevel = parent != null ? parent.getLevel() : config.level;\n+        }\n         config = new PrivateConfig(config, actualLevel);\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "5e374ee0c089fdafd5323c6ed3717661e46aaacb",
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a0e46ffc85bae7c4d0e622e79396cd71edd007a0/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a0e46ffc85bae7c4d0e622e79396cd71edd007a0/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java?ref=a0e46ffc85bae7c4d0e622e79396cd71edd007a0",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.logging.Logger;\n \n import org.apache.logging.log4j.test.appender.ListAppender;\n+import org.apache.logging.log4j.util.Strings;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Before;\n@@ -61,6 +62,21 @@ public void tearDown() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testRootSetLevelToNull() throws Exception {\n+        final Logger rootLogger = Logger.getLogger(Strings.EMPTY);\n+        assertThat(rootLogger.getLevel(), equalTo(Level.SEVERE));\n+        assertThat(rootLogger.isLoggable(Level.SEVERE), is(true));\n+        // null test\n+        rootLogger.setLevel(null);\n+        assertThat(rootLogger.getLevel(), equalTo(null));\n+        assertThat(rootLogger.isLoggable(Level.SEVERE), is(true));\n+        // now go back to a different one\n+        rootLogger.setLevel(Level.INFO);\n+        assertThat(rootLogger.getLevel(), equalTo(Level.INFO));\n+        assertThat(rootLogger.isLoggable(Level.FINE), is(false));\n+    }\n+\n     @Test\n     public void testSetLevel() throws Exception {\n         final Logger childLogger = Logger.getLogger(LOGGER_NAME + \".Child\");\n@@ -73,6 +89,7 @@ public void testSetLevel() throws Exception {\n         logger.setLevel(Level.FINE);\n         assertThat(logger.getLevel(), equalTo(Level.FINE));\n         assertThat(childLogger.getLevel(), equalTo(Level.FINE));\n+        assertThat(childLogger.isLoggable(Level.ALL), is(false));\n     }\n \n     @Test",
                "deletions": 0
            }
        ],
        "patched_files": [
            "CoreLogger.java",
            "Logger.java"
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLogger.java",
            "CoreLoggerTest.java"
        ]
    },
    "logging-log4j2_585d5ca": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2244] org.apache.logging.log4j.core.lookup.EnvironmentLookup may\nthrow NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/585d5ca8d6b101603599385982609229ff8ee7bf",
        "parent": "https://github.com/apache/logging-log4j2/commit/ad5a3a8deed0f3066cf1d08235dc56c21fee511d",
        "bug_id": "logging-log4j2_585d5ca",
        "file": [
            {
                "sha": "7f0d93558536b91cb39f351f2447ea001b284f70",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/585d5ca8d6b101603599385982609229ff8ee7bf/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/585d5ca8d6b101603599385982609229ff8ee7bf/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java?ref=585d5ca8d6b101603599385982609229ff8ee7bf",
                "patch": "@@ -26,13 +26,18 @@\n public class EnvironmentLookup extends AbstractLookup {\n \n     /**\n-     * Looks up the value of the environment variable.\n-     * @param event The current LogEvent (is ignored by this StrLookup).\n-     * @param key  the key to be looked up, may be null\n-     * @return The value of the environment variable.\n+     * Looks up the value of the given environment variable.\n+     * \n+     * @param event\n+     *            The current LogEvent (ignored by this StrLookup).\n+     * @param key\n+     *            the key to look up, may be null\n+     * @return the string value of the variable, or <code>null</code> if the variable is not defined in the system\n+     *         environment\n      */\n     @Override\n     public String lookup(final LogEvent event, final String key) {\n-        return System.getenv(key);\n+        // getenv throws NullPointerException if <code>name</code> is <code>null</code>\n+        return key != null ? System.getenv(key) : null;\n     }\n }",
                "deletions": 5
            },
            {
                "sha": "ea96b881de09f9dc79fd8e5de40a20198c889279",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/585d5ca8d6b101603599385982609229ff8ee7bf/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/585d5ca8d6b101603599385982609229ff8ee7bf/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=585d5ca8d6b101603599385982609229ff8ee7bf",
                "patch": "@@ -55,6 +55,9 @@\n       <action issue=\"LOG4J2-2233\" dev=\"ggregory\" type=\"update\" due-to=\"Gary Gregory\">\n         Move JDBC code to a new module log4j-jdbc.\n       </action>\n+      <action issue=\"LOG4J2-2244\" dev=\"ggregory\" type=\"update\" due-to=\"Gary Gregory\">\n+        org.apache.logging.log4j.core.lookup.EnvironmentLookup may throw NPE.\n+      </action>      \n     </release>\n     <release version=\"2.11.0\" date=\"2018-xx-xx\" description=\"GA Release 2.11.0\">\n       <action issue=\"LOG4J2-2236\" dev=\"rpopma\" type=\"update\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EnvironmentLookup.java"
        ],
        "unit_tests": [
            "EnvironmentLookupTest.java"
        ]
    },
    "logging-log4j2_36ab290": {
        "repo": "logging-log4j2",
        "message": "Fix NPE from previous commit.",
        "commit": "https://github.com/apache/logging-log4j2/commit/36ab2901c005c4341e543cff2720a2b60949e773",
        "parent": "https://github.com/apache/logging-log4j2/commit/68a82342c1631b1de3dc353ee5db96b4656ee770",
        "bug_id": "logging-log4j2_36ab290",
        "file": [
            {
                "sha": "e68c64c3255f1b40c139171beb416bab90679a15",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/36ab2901c005c4341e543cff2720a2b60949e773/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java?ref=36ab2901c005c4341e543cff2720a2b60949e773",
                "patch": "@@ -196,7 +196,7 @@ private Rfc5424Layout(final Configuration config, final Facility facility, final\n \n     private Map<String, FieldFormatter> createFieldFormatters(final LoggerFields[] loggerFields,\n             final Configuration config) {\n-        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields.length);\n+        final Map<String, FieldFormatter> sdIdMap = new HashMap<>(loggerFields == null ? 0 : loggerFields.length);\n \n         if (loggerFields != null) {\n             for (final LoggerFields loggerField : loggerFields) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Rfc5424Layout.java"
        ],
        "unit_tests": [
            "Rfc5424LayoutTest.java"
        ]
    },
    "logging-log4j2_6d1fc53": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2418] NullPointerException when closing never used\nRollingRandomAccessFileAppender.",
        "commit": "https://github.com/apache/logging-log4j2/commit/6d1fc53098a60f837fca9e3e0b9d297a40c1920a",
        "parent": "https://github.com/apache/logging-log4j2/commit/99c40d3edfd8643cc542c25df59d11a212581076",
        "bug_id": "logging-log4j2_6d1fc53",
        "file": [
            {
                "sha": "8d3e52e2e859ebe0d328144ee37eb8dfc39d94ca",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/6d1fc53098a60f837fca9e3e0b9d297a40c1920a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/6d1fc53098a60f837fca9e3e0b9d297a40c1920a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java?ref=6d1fc53098a60f837fca9e3e0b9d297a40c1920a",
                "patch": "@@ -164,13 +164,16 @@ public synchronized void flush() {\n     @Override\n     public synchronized boolean closeOutputStream() {\n         flush();\n-        try {\n-            randomAccessFile.close();\n-            return true;\n-        } catch (final IOException e) {\n-            logError(\"Unable to close RandomAccessFile\", e);\n-            return false;\n+        if (randomAccessFile != null) {\n+            try {\n+                randomAccessFile.close();\n+                return true;\n+            } catch (final IOException e) {\n+                logError(\"Unable to close RandomAccessFile\", e);\n+                return false;\n+            }\n         }\n+        return true;\n     }\n \n     /**",
                "deletions": 6
            },
            {
                "sha": "59c0643192f736b63755efbd7071848f34d288c2",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/6d1fc53098a60f837fca9e3e0b9d297a40c1920a/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/6d1fc53098a60f837fca9e3e0b9d297a40c1920a/src/changes/changes.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=6d1fc53098a60f837fca9e3e0b9d297a40c1920a",
                "patch": "@@ -239,6 +239,9 @@\n       <action issue=\"LOG4J2-2201\" dev=\"ckozak\" type=\"fix\">\n         Fix memory leak in ReusableParameterizedMessage.\n       </action>\n+      <action issue=\"LOG4J2-2418\" dev=\"ggregory\" type=\"fix\" due-to=\"Jonas Rutishauser\">\n+        NullPointerException when closing never used RollingRandomAccessFileAppender.\n+      </action>\n     </release>\n     <release version=\"2.11.2\" date=\"2018-MM-DD\" description=\"GA Release 2.11.2\">\n       <action issue=\"LOG4J2-2391\" dev=\"ckozak\" type=\"update\">\n@@ -259,6 +262,9 @@\n       <action issue=\"LOG4J2-2363\" dev=\"ckozak\" type=\"fix\" due-to=\"Brian Laub\">\n         ReusableObjectMessage parameter is properly passed to appenders (#203).\n       </action>\n+      <action issue=\"LOG4J2-2418\" dev=\"ggregory\" type=\"fix\" due-to=\"Jonas Rutishauser\">\n+        NullPointerException when closing never used RollingRandomAccessFileAppender.\n+      </action>\n     </release>\n     <release version=\"2.11.1\" date=\"2018-07-22\" description=\"GA Release 2.11.1\">\n       <action issue=\"LOG4J2-2389\" dev=\"rgoers\" type=\"fix\" due-to=\"Liu Wen\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RollingRandomAccessFileManager.java"
        ],
        "unit_tests": [
            "RollingRandomAccessFileManagerTest.java"
        ]
    },
    "logging-log4j2_5d4a301": {
        "repo": "logging-log4j2",
        "message": "Fix LOG4J-72 - NullPointerException when the filePattern does not end with .gz or .zip\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1379273 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/5d4a30131db1a034de99b08ef113633dc2482ae2",
        "parent": "https://github.com/apache/logging-log4j2/commit/2afe3dff3dcf527c3b52d818a34d4696566be8db",
        "bug_id": "logging-log4j2_5d4a301",
        "file": [
            {
                "sha": "c288e362e763407cb334ea050617e7479c9ff3ee",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java?ref=5d4a30131db1a034de99b08ef113633dc2482ae2",
                "patch": "@@ -142,7 +142,7 @@ private boolean rollover(RolloverStrategy strategy) {\n                     }\n                 }\n \n-                if (success) {\n+                if (success && descriptor.getAsynchronous() != null) {\n                     thread = new Thread(new AsyncAction(descriptor.getAsynchronous(), this));\n                     thread.start();\n                 }",
                "deletions": 1
            },
            {
                "sha": "781f18b8bbbc4046543a98ccf796ff7c22634a8c",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java",
                "status": "added",
                "changes": 88,
                "additions": 88,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java?ref=5d4a30131db1a034de99b08ef113633dc2482ae2",
                "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.appender.rolling;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.XMLConfigurationFactory;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class RollingAppenderUncompressedTest {\n+\n+    private static final String CONFIG = \"log4j-rolling4.xml\";\n+    private static final String DIR = \"target/rolling4\";\n+\n+    org.apache.logging.log4j.Logger logger = LogManager.getLogger(RollingAppenderUncompressedTest.class.getName());\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        deleteDir();\n+        System.setProperty(XMLConfigurationFactory.CONFIGURATION_FILE_PROPERTY, CONFIG);\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext();\n+        Configuration config = ctx.getConfiguration();\n+    }\n+\n+    @AfterClass\n+    public static void cleanupClass() {\n+        //deleteDir();\n+        System.clearProperty(XMLConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n+        LoggerContext ctx = (LoggerContext) LogManager.getContext();\n+        ctx.reconfigure();\n+        StatusLogger.getLogger().reset();\n+    }\n+\n+    @Test\n+    public void testAppender() throws Exception {\n+        for (int i=0; i < 100; ++i) {\n+            logger.debug(\"This is test message number \" + i);\n+        }\n+        File dir = new File(DIR);\n+        assertTrue(\"Directory not created\", dir.exists() && dir.listFiles().length > 0);\n+        File[] files = dir.listFiles();\n+        assertTrue(\"No files created\", files.length > 0);\n+        boolean found = false;\n+        for (File file : files) {\n+            String name = file.getName();\n+            if (name.startsWith(\"test1\") && name.endsWith(\".log\")) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(\"No archived files found\", found);\n+    }\n+\n+    private static void deleteDir() {\n+        File dir = new File(DIR);\n+        if (dir.exists()) {\n+            File[] files = dir.listFiles();\n+            for (File file : files) {\n+                file.delete();\n+            }\n+            dir.delete();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "dc8e42894770bd60a5a827ea061a6c95eb488ecb",
                "filename": "core/src/test/resources/log4j-rolling4.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/test/resources/log4j-rolling4.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5d4a30131db1a034de99b08ef113633dc2482ae2/core/src/test/resources/log4j-rolling4.xml",
                "status": "added",
                "changes": 58,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/log4j-rolling4.xml?ref=5d4a30131db1a034de99b08ef113633dc2482ae2",
                "patch": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+\n+-->\n+<configuration status=\"warn\" name=\"XMLConfigTest\" packages=\"org.apache.logging.log4j.test\">\n+  <properties>\n+    <property name=\"filename\">target/rolling4/rollingtest.log</property>\n+  </properties>\n+  <ThresholdFilter level=\"debug\"/>\n+\n+  <appenders>\n+    <Console name=\"STDOUT\">\n+      <PatternLayout pattern=\"%m%n\"/>\n+    </Console>\n+    <RollingFile name=\"RollingFile\" fileName=\"${filename}\"\n+                 filePattern=\"target/rolling4/test1-$${date:MM-dd-yyyy}-%i.log\">\n+      <PatternLayout>\n+        <pattern>%d %p %C{1.} [%t] %m%n</pattern>\n+      </PatternLayout>\n+      <SizeBasedTriggeringPolicy size=\"500\" />\n+    </RollingFile>\n+    <List name=\"List\">\n+      <ThresholdFilter level=\"error\"/>\n+    </List>\n+  </appenders>\n+\n+  <loggers>\n+    <logger name=\"org.apache.logging.log4j.test1\" level=\"debug\" additivity=\"false\">\n+      <ThreadContextMapFilter>\n+        <KeyValuePair key=\"test\" value=\"123\"/>\n+      </ThreadContextMapFilter>\n+      <appender-ref ref=\"STDOUT\"/>\n+    </logger>>\n+\n+    <logger name=\"org.apache.logging.log4j.core.appender.rolling\" level=\"debug\" additivity=\"false\">\n+      <appender-ref ref=\"RollingFile\"/>\n+    </logger>>\n+\n+    <root level=\"error\">\n+      <appender-ref ref=\"STDOUT\"/>\n+    </root>\n+  </loggers>\n+\n+</configuration>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "36b9ee43300d277f0da3d6c66c00b046bf0b3b82",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5d4a30131db1a034de99b08ef113633dc2482ae2/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5d4a30131db1a034de99b08ef113633dc2482ae2/src/changes/changes.xml",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=5d4a30131db1a034de99b08ef113633dc2482ae2",
                "patch": "@@ -23,12 +23,15 @@\n \n   <body>\n     <release version=\"2.0-alpha3\" date=\"TBD\" description=\"\">\n-      <action dev=\"rgoers\" type=\"update\">\n-        Update the versions of SLF4J and Logback.\n+      <action issue=\"LOG4J2-72\" dev=\"rgoers\" type=\"fix\">\n+        NullPointerException in RollingFileManager when filePattern does not cause the file to be compressed.\n       </action>\n       <action issue=\"LOG4J2-71\" dev=\"rgoers\" type=\"fix\">\n         FileRenameAction did not create the parent directories of the archive files causing the rollover to fail.\n       </action>\n+      <action dev=\"rgoers\" type=\"update\">\n+        Update the versions of SLF4J and Logback.\n+      </action>\n     </release>\n     <release version=\"2.0-alpha2\" date=\"2012-08-24\" description=\"Bug fixes and minor enhancements\">\n       <action issue=\"LOG4J2-70\" dev=\"rgoers\" type=\"add\">",
                "deletions": 2
            }
        ],
        "patched_files": [
            "RollingFileManager.java"
        ],
        "unit_tests": [
            "RollingAppenderUncompressedTest.java"
        ]
    },
    "logging-log4j2_a58e1d5": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2320] Fix NPE in AbstractLogger when another exception is thrown\n\nThis bug hides the original cause of the failure.",
        "commit": "https://github.com/apache/logging-log4j2/commit/a58e1d5ccf856cb473b681a012b7d9d96f489916",
        "parent": "https://github.com/apache/logging-log4j2/commit/e12defadf16b4d57bf856d0995c910ab0a851762",
        "bug_id": "logging-log4j2_a58e1d5",
        "file": [
            {
                "sha": "5b6ac1acf4a5545a805cc8b884a8cd96879a2b8c",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "patch": "@@ -2181,7 +2181,8 @@ private void handleLogMessageException(final Exception exception, final String f\n             throw (LoggingException) exception;\n         }\n         final String format = msg.getFormat();\n-        final StringBuilder sb = new StringBuilder(format.length() + 100);\n+        final int formatLength = format == null ? 4 : format.length();\n+        final StringBuilder sb = new StringBuilder(formatLength + 100);\n         sb.append(fqcn);\n         sb.append(\" caught \");\n         sb.append(exception.getClass().getName());",
                "deletions": 1
            },
            {
                "sha": "a152aad4b26f8346866a5c5bd62eb1ef06c510c1",
                "filename": "log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java",
                "status": "modified",
                "changes": 81,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/test/java/org/apache/logging/log4j/AbstractLoggerTest.java?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "patch": "@@ -16,23 +16,31 @@\n  */\n package org.apache.logging.log4j;\n \n+import static org.hamcrest.CoreMatchers.containsString;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import org.apache.logging.log4j.junit.StatusLoggerRule;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.ObjectMessage;\n import org.apache.logging.log4j.message.ParameterizedMessage;\n import org.apache.logging.log4j.message.ParameterizedMessageFactory;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.spi.AbstractLogger;\n import org.apache.logging.log4j.spi.MessageFactory2Adapter;\n+import org.apache.logging.log4j.status.StatusData;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.util.MessageSupplier;\n import org.apache.logging.log4j.util.Supplier;\n+import org.junit.Rule;\n import org.junit.Test;\n \n+import java.util.List;\n+\n /**\n  *\n  */\n@@ -59,6 +67,9 @@\n     private static final Marker MARKER = MarkerManager.getMarker(\"TEST\");\n     private static final String MARKER_NAME = \"TEST\";\n \n+    @Rule\n+    public StatusLoggerRule status = new StatusLoggerRule(Level.WARN);\n+\n     private static final LogEvent[] EVENTS = new LogEvent[] {\n         new LogEvent(null, simple, null),\n         new LogEvent(MARKER_NAME, simple, null),\n@@ -902,6 +913,73 @@ public Message get() {\n         logger.log(Level.INFO, MARKER, supplier);\n     }\n \n+    @Test\n+    public void testMessageThrows() {\n+        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);\n+        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {\n+            @Override\n+            public String getFormattedMessage() {\n+                throw new IllegalStateException(\"Oops!\");\n+            }\n+        }, \"Message Format\"));\n+        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();\n+        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);\n+        assertEquals(Level.WARN, mostRecent.getLevel());\n+        assertThat(mostRecent.getFormattedStatus(), containsString(\n+                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +\n+                        \"java.lang.IllegalStateException logging TestMessage: Message Format\"));\n+    }\n+\n+    @Test\n+    public void testMessageThrowsAndNullFormat() {\n+        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);\n+        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {\n+            @Override\n+            public String getFormattedMessage() {\n+                throw new IllegalStateException(\"Oops!\");\n+            }\n+        }, null /* format */));\n+        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();\n+        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);\n+        assertEquals(Level.WARN, mostRecent.getLevel());\n+        assertThat(mostRecent.getFormattedStatus(), containsString(\n+                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +\n+                        \"java.lang.IllegalStateException logging TestMessage: \"));\n+    }\n+\n+    private static final class TestMessage implements Message {\n+        private final FormattedMessageSupplier formattedMessageSupplier;\n+        private final String format;\n+        TestMessage(FormattedMessageSupplier formattedMessageSupplier, String format) {\n+            this.formattedMessageSupplier = formattedMessageSupplier;\n+            this.format = format;\n+        }\n+\n+        @Override\n+        public String getFormattedMessage() {\n+            return formattedMessageSupplier.getFormattedMessage();\n+        }\n+\n+        @Override\n+        public String getFormat() {\n+            return format;\n+        }\n+\n+        @Override\n+        public Object[] getParameters() {\n+            return new Object[0];\n+        }\n+\n+        @Override\n+        public Throwable getThrowable() {\n+            return null;\n+        }\n+\n+        interface FormattedMessageSupplier {\n+            String getFormattedMessage();\n+        }\n+    }\n+\n     private static class CountingLogger extends AbstractLogger {\n         private static final long serialVersionUID = -3171452617952475480L;\n \n@@ -1229,6 +1307,9 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n             } else {\n                 assertNull(\"Expected null but received a Throwable! \"+t, t);\n             }\n+            if (message != null) {\n+                message.getFormattedMessage();\n+            }\n         }\n \n         @Override",
                "deletions": 0
            },
            {
                "sha": "c3e36b73f2e7ca63ae8b25da9d7aa426a5aff54f",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a58e1d5ccf856cb473b681a012b7d9d96f489916/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a58e1d5ccf856cb473b681a012b7d9d96f489916/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a58e1d5ccf856cb473b681a012b7d9d96f489916",
                "patch": "@@ -142,6 +142,9 @@\n       <action issue=\"LOG4J2-2318\" dev=\"ckozak\" type=\"fix\">\n         Messages are no longer mutated when the asynchronous queue is full. A warning is logged to the status logger instead.\n       </action>\n+      <action issue=\"LOG4J2-2320\" dev=\"ckozak\" type=\"fix\">\n+        Fix NPE in AbstractLogger when another exception is thrown, masking the root cause.\n+      </action>\n     </release>\n     <release version=\"2.11.1\" date=\"2018-MM-DD\" description=\"GA Release 2.11.1\">\n       <action issue=\"LOG4J2-2268\" dev=\"rgoers\" type=\"fix\" due-to=\"Tilman Hausherr\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractLogger.java"
        ],
        "unit_tests": [
            "AbstractLoggerTest.java"
        ]
    },
    "logging-log4j2_0a6ce81": {
        "repo": "logging-log4j2",
        "message": "Eliminate NullPointerException if a null value is passed to the ObjectMessage constructor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1364404 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b",
        "parent": "https://github.com/apache/logging-log4j2/commit/f51a60ea9e0232ea59f50ebdd10633d2b399b4bb",
        "bug_id": "logging-log4j2_0a6ce81",
        "file": [
            {
                "sha": "b8caa4f6315c05fbeb0bf81dc124b6b040aac5ae",
                "filename": "api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b/api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b/api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/message/ObjectMessage.java?ref=0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b",
                "patch": "@@ -35,6 +35,9 @@\n      * @param obj The Object to format.\n      */\n     public ObjectMessage(Object obj) {\n+        if (obj == null) {\n+            obj = \"null\";\n+        }\n         this.obj = obj;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "d344bea62e5921190643ab80a4964974fe97b8a6",
                "filename": "api/src/test/java/org/apache/logging/log4j/message/ObjectMessageTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b/api/src/test/java/org/apache/logging/log4j/message/ObjectMessageTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b/api/src/test/java/org/apache/logging/log4j/message/ObjectMessageTest.java",
                "status": "added",
                "changes": 42,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/message/ObjectMessageTest.java?ref=0a6ce817ae5c2e8e1a03499b850f0db4f87e3f8b",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.message;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ *\n+ */\n+public class ObjectMessageTest {\n+\n+    @Test\n+    public void testNull() {\n+        ObjectMessage msg = new ObjectMessage(null);\n+        String result = msg.getFormattedMessage();\n+        assertEquals(\"null\", result);\n+    }\n+\n+    @Test\n+    public void testNotNull() {\n+        String testMsg = \"Test message {}\";\n+        ObjectMessage msg = new ObjectMessage(testMsg);\n+        String result = msg.getFormattedMessage();\n+        assertEquals(testMsg, result);\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ObjectMessage.java"
        ],
        "unit_tests": [
            "ObjectMessageTest.java"
        ]
    },
    "logging-log4j2_c79a743": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-101 - A NullPointerException would occur if no format value was passed to the SyslogAppender.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1400254 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/c79a743b14699a605d2e77950dea8c4818dd978c",
        "parent": "https://github.com/apache/logging-log4j2/commit/21cc0609d363237dd2826a12300b99739fe26cac",
        "bug_id": "logging-log4j2_c79a743",
        "file": [
            {
                "sha": "39fbd3871c94f9dec7ab6b1cc366c7ce318ddc82",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c79a743b14699a605d2e77950dea8c4818dd978c/core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c79a743b14699a605d2e77950dea8c4818dd978c/core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/SyslogAppender.java?ref=c79a743b14699a605d2e77950dea8c4818dd978c",
                "patch": "@@ -111,7 +111,7 @@ public static SyslogAppender createAppender(@PluginAttr(\"host\") String host,\n                 LOGGER.error(\"Charset \" + charset + \" is not supported for layout, using \" + c.displayName());\n             }\n         }\n-        Layout layout = (format.equalsIgnoreCase(RFC5424)) ?\n+        Layout layout = (RFC5424.equalsIgnoreCase(format)) ?\n             RFC5424Layout.createLayout(facility, id, ein, includeMDC, mdcId, includeNL, appName,  msgId,\n                 excludes, includes, required, charset, config) :\n             SyslogLayout.createLayout(facility, includeNL, charset);",
                "deletions": 1
            },
            {
                "sha": "d3bc68ca3814640ea9cb3ecf1008085f46e5663e",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c79a743b14699a605d2e77950dea8c4818dd978c/core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c79a743b14699a605d2e77950dea8c4818dd978c/core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/SyslogAppenderTest.java?ref=c79a743b14699a605d2e77950dea8c4818dd978c",
                "patch": "@@ -120,6 +120,29 @@ public void testTCPAppender() throws Exception {\n     }\n \n \n+    @Test\n+    public void testDefaultAppender() throws Exception {\n+        SyslogAppender appender = createAppender(\"tcp\", null);\n+        appender.start();\n+\n+        // set appender on root and set level to debug\n+        root.addAppender(appender);\n+        root.setAdditive(false);\n+        root.setLevel(Level.DEBUG);\n+        root.debug(\"This is a test message\");\n+        String msg = list.poll(3, TimeUnit.SECONDS);\n+        assertNotNull(\"No event retrieved\", msg);\n+        assertTrue(\"Incorrect msg: \" + msg, msg.endsWith(\"This is a test message\\n\"));\n+        assertTrue(\"Message not delivered via TCP\", tcpCount > 0);\n+        root.debug(\"This is test message 2\");\n+        msg = list.poll(3, TimeUnit.SECONDS);\n+        assertNotNull(\"No event retrieved\", msg);\n+        assertTrue(\"Incorrect msg: \" + msg, msg.endsWith(\"This is test message 2\\n\"));\n+        assertTrue(\"Message not delivered via TCP\", tcpCount > 1);\n+    }\n+\n+\n+\n     @Test\n     public void testTCPStructuredAppender() throws Exception {\n         SyslogAppender appender = createAppender(\"tcp\", \"RFC5424\");",
                "deletions": 0
            },
            {
                "sha": "56b207388f60bac10df413a4fda77948bea8b270",
                "filename": "flume-ng/src/site/xdoc/index.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c79a743b14699a605d2e77950dea8c4818dd978c/flume-ng/src/site/xdoc/index.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c79a743b14699a605d2e77950dea8c4818dd978c/flume-ng/src/site/xdoc/index.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/flume-ng/src/site/xdoc/index.xml?ref=c79a743b14699a605d2e77950dea8c4818dd978c",
                "patch": "@@ -30,7 +30,8 @@\n             </p>\n           <subsection name=\"Remote Agent\">\n             <p>\n-\n+              Including the Log4j flume-ng jar in your Maven-based project as a dependency should cause all the\n+              transitive dependencies necessary for the remote Agent to function to be included.\n             </p>\n           </subsection>\n ",
                "deletions": 1
            },
            {
                "sha": "d7f74922f5484c254d62c2320d3d498293e7bddc",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c79a743b14699a605d2e77950dea8c4818dd978c/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c79a743b14699a605d2e77950dea8c4818dd978c/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=c79a743b14699a605d2e77950dea8c4818dd978c",
                "patch": "@@ -23,6 +23,9 @@\n \n   <body>\n     <release version=\"2.0-beta3\" date=\"TBD\" description= \"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-101\" dev=\"rgoers\" type=\"fix\" due-to=\"Emanuele Colombo\">\n+        A NullPointerException would occur if no format value was passed to the SyslogAppender.\n+      </action>\n       <action issue=\"LOG4J2-99\" dev=\"rgoers\" type=\"fix\" due-to=\"Das Archive\">\n         MapRewritePolicy had an extra call to putAll that caused updates to behave like adds.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SyslogAppender.java"
        ],
        "unit_tests": [
            "SyslogAppenderTest.java"
        ]
    },
    "logging-log4j2_683c913": {
        "repo": "logging-log4j2",
        "message": "Null guard in case something something goes wrong during test init\n(seeing an NPE now...)",
        "commit": "https://github.com/apache/logging-log4j2/commit/683c913973f6e5aefa4221dc0ab382ef6e2ebe7c",
        "parent": "https://github.com/apache/logging-log4j2/commit/42b9976d5a125a40817a5770afc771500b2b07fc",
        "bug_id": "logging-log4j2_683c913",
        "file": [
            {
                "sha": "cbed4996115a1df4f3a74c872ba644bc8587c597",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/683c913973f6e5aefa4221dc0ab382ef6e2ebe7c/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/683c913973f6e5aefa4221dc0ab382ef6e2ebe7c/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java?ref=683c913973f6e5aefa4221dc0ab382ef6e2ebe7c",
                "patch": "@@ -45,7 +45,9 @@ public void setUp() throws Exception {\n \n     @After\n     public void after() {\n-        app.clear();\n+        if (app != null) {\n+            app.clear();\n+        }\n     }\n \n     @Test",
                "deletions": 1
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "AsyncAppenderNoLocationTest.java"
        ]
    },
    "logging-log4j2_20be2b0": {
        "repo": "logging-log4j2",
        "message": "FIX NPE in RingBufferLogEventTest",
        "commit": "https://github.com/apache/logging-log4j2/commit/20be2b03dd82875a225f1ecb607edf3ed1896587",
        "parent": "https://github.com/apache/logging-log4j2/commit/a0a4e43e2224130c8b33130772c3b78cbc7deece",
        "bug_id": "logging-log4j2_20be2b0",
        "file": [
            {
                "sha": "a241f0ab93e1af9ac35389bf24fecb53188cd65d",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/20be2b03dd82875a225f1ecb607edf3ed1896587/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=20be2b03dd82875a225f1ecb607edf3ed1896587",
                "patch": "@@ -163,7 +163,7 @@ private void setMessage(final Message msg) {\n             ((ReusableMessage) msg).formatTo(getMessageTextForWriting());\n         } else {\n             // if the Message instance is reused, there is no point in freezing its message here\n-            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND) { // LOG4J2-898: user may choose\n+            if (!Constants.FORMAT_MESSAGES_IN_BACKGROUND && msg != null) { // LOG4J2-898: user may choose\n                 msg.getFormattedMessage(); // LOG4J2-763: ask message to freeze parameters\n             }\n             this.message = msg;",
                "deletions": 1
            }
        ],
        "patched_files": [
            "RingBufferLogEvent.java"
        ],
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_2e100e0": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-377 (OSGi) Fix NPE during shutdown.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1555633 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/2e100e0a5e0212b706c81da3f5d410acdcd65049",
        "parent": "https://github.com/apache/logging-log4j2/commit/b3e40205c2b229940752e0abec5973d20b001c8b",
        "bug_id": "logging-log4j2_2e100e0",
        "file": [
            {
                "sha": "0759bc4509643dd4e4b2ac3109b89d42662afd3b",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2e100e0a5e0212b706c81da3f5d410acdcd65049/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2e100e0a5e0212b706c81da3f5d410acdcd65049/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=2e100e0a5e0212b706c81da3f5d410acdcd65049",
                "patch": "@@ -53,6 +53,7 @@\n \n     public static final String PROPERTY_CONFIG = \"config\";\n     private static final StatusLogger LOGGER = StatusLogger.getLogger();\n+    private static final Configuration NULL_CONFIGURATION = new NullConfiguration();\n \n     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();\n     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();\n@@ -208,7 +209,7 @@ public void stop() {\n                 shutdownThread = null;\n             }\n             final Configuration prev = config;\n-            config = new NullConfiguration();\n+            config = NULL_CONFIGURATION;\n             updateLoggers();\n             prev.stop();\n             externalContext = null;",
                "deletions": 1
            },
            {
                "sha": "96f1b5f3dcfec29b58076fd72a81c9d311b85a8d",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2e100e0a5e0212b706c81da3f5d410acdcd65049/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2e100e0a5e0212b706c81da3f5d410acdcd65049/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2e100e0a5e0212b706c81da3f5d410acdcd65049",
                "patch": "@@ -21,6 +21,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-RC1\" date=\"2013-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-377\" dev=\"rpopma\" type=\"fix\" due-to=\"Roland Weiglhofer, Matt Sicker\">\n+        (OSGi) Fix NPE during shutdown.\n+      </action>\n       <action issue=\"LOG4J2-463\" dev=\"rpopma\" type=\"fix\" due-to=\"Michael Diamond, Matt Sicker\">\n         Fixed documentation for MyApp example application in the Automatic Configuration section\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LoggerContext.java"
        ],
        "unit_tests": [
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_9acc19c": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2377] NullPointerException in\norg.apache.logging.log4j.util.LoaderUtil.getClassLoaders() when using\nBootstrap classloader.",
        "commit": "https://github.com/apache/logging-log4j2/commit/9acc19ca26770a75f844b260e0d41cdb5c0c362b",
        "parent": "https://github.com/apache/logging-log4j2/commit/59925f963955d3e727071db740abe203d22ab8dc",
        "bug_id": "logging-log4j2_9acc19c",
        "file": [
            {
                "sha": "021dcde367958d001d8bbf6cbf921c58c3fc7040",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9acc19ca26770a75f844b260e0d41cdb5c0c362b/log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9acc19ca26770a75f844b260e0d41cdb5c0c362b/log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java?ref=9acc19ca26770a75f844b260e0d41cdb5c0c362b",
                "patch": "@@ -113,21 +113,23 @@ public ClassLoader run() {\n         ClassLoader tcl = getThreadContextClassLoader();\n         classLoaders.add(tcl);\n         if (!isForceTccl()) {\n+            // Some implementations may use null to represent the bootstrap class loader.\n             ClassLoader current = LoaderUtil.class.getClassLoader();\n-            if (current != tcl) {\n+            if (current != null && current != tcl) {\n                 classLoaders.add(current);\n                 ClassLoader parent = current.getParent();\n                 while (parent != null && !classLoaders.contains(parent)) {\n                     classLoaders.add(parent);\n                 }\n             }\n-            ClassLoader parent = tcl.getParent();\n+            ClassLoader parent = tcl == null ? null : tcl.getParent();\n             while (parent != null && !classLoaders.contains(parent)) {\n                 classLoaders.add(parent);\n                 parent = parent.getParent();\n             }\n-            if (!classLoaders.contains(ClassLoader.getSystemClassLoader())) {\n-                classLoaders.add(ClassLoader.getSystemClassLoader());\n+            ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n+            if (!classLoaders.contains(systemClassLoader)) {\n+                classLoaders.add(systemClassLoader);\n             }\n         }\n         return classLoaders.toArray(new ClassLoader[classLoaders.size()]);",
                "deletions": 4
            },
            {
                "sha": "9645a71358061d6da7ed9eb98c2cb058e7cc0f4f",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9acc19ca26770a75f844b260e0d41cdb5c0c362b/log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9acc19ca26770a75f844b260e0d41cdb5c0c362b/log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java?ref=9acc19ca26770a75f844b260e0d41cdb5c0c362b",
                "patch": "@@ -100,8 +100,12 @@ protected static void loadProvider(final URL url, final ClassLoader cl) {\n         }\n     }\n \n-    protected static void loadProviders(final ClassLoader cl) {\n-        final ServiceLoader<Provider> serviceLoader = ServiceLoader.load(Provider.class, cl);\n+    /**\n+     * \n+     * @param classLoader null can be used to mark the bootstrap class loader.\n+     */\n+    protected static void loadProviders(final ClassLoader classLoader) {\n+        final ServiceLoader<Provider> serviceLoader = ServiceLoader.load(Provider.class, classLoader);\n         for (final Provider provider : serviceLoader) {\n             if (validVersion(provider.getVersions()) && !PROVIDERS.contains(provider)) {\n                 PROVIDERS.add(provider);",
                "deletions": 2
            },
            {
                "sha": "6b58e77cc161aa69e52d56bdfe42e91aecb47d51",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9acc19ca26770a75f844b260e0d41cdb5c0c362b/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9acc19ca26770a75f844b260e0d41cdb5c0c362b/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=9acc19ca26770a75f844b260e0d41cdb5c0c362b",
                "patch": "@@ -338,6 +338,9 @@\n         StringBuilders.escapeXml implementation runs in linear time. Escaping large XML strings\n         in EncodingPatternConverter and MapMessage will perform significantly better.\n       </action>\n+      <action issue=\"LOG4J2-2377\" dev=\"ggregory\" type=\"fix\" due-to=\"Mirko Rzehak, Gary Gregory\">\n+        NullPointerException in org.apache.logging.log4j.util.LoaderUtil.getClassLoaders() when using Bootstrap class loader.\n+      </action>\n     </release>\n     <release version=\"2.11.0\" date=\"2018-xx-xx\" description=\"GA Release 2.11.0\">\n       <action issue=\"LOG4J2-2104\" dev=\"rgoers\" type=\"fix\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ProviderUtil.java",
            "LoaderUtil.java"
        ],
        "unit_tests": [
            "LoaderUtilTest.java",
            "ProviderUtilTest.java"
        ]
    },
    "logging-log4j2_9f924f1": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1153: Fixed NullPointerException when only root logger is defined\n(and no named loggers) in configuration properties file.\n\n- bugfix in PropertiesConfigurationFactory\n- removed unnecessary @SuppressWarnings annotation\n- added JUnit test demonstrating the issue and proving that the fix\nworks",
        "commit": "https://github.com/apache/logging-log4j2/commit/9f924f10702abf732fa8c90b530713de0be094f6",
        "parent": "https://github.com/apache/logging-log4j2/commit/2a531295523d9c86b7da97b5d170aa0875231418",
        "bug_id": "logging-log4j2_9f924f1",
        "file": [
            {
                "sha": "27644d8e5b12940d04d6cc4764a63eb67577c6bb",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java?ref=9f924f10702abf732fa8c90b530713de0be094f6",
                "patch": "@@ -130,7 +130,7 @@ public PropertiesConfiguration getConfiguration(ConfigurationSource source) {\n             }\n         }\n         String loggerProp = properties.getProperty(\"loggers\");\n-        if (appenderProp != null) {\n+        if (loggerProp != null) {\n             String[] loggerNames = loggerProp.split(\",\");\n             for (String loggerName : loggerNames) {\n                 String name = loggerName.trim();\n@@ -343,7 +343,6 @@ private LayoutComponentBuilder createLayout(ConfigurationBuilder<PropertiesConfi\n         return componentBuilder;\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     private void processRemainingProperties(ComponentBuilder<?> builder, String name, Properties properties) {\n         while (properties.size() > 0) {\n             String propertyName = properties.stringPropertyNames().iterator().next();",
                "deletions": 2
            },
            {
                "sha": "88b0709b050a752ba7cd5d6ff818945089783bd1",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "status": "added",
                "changes": 60,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java?ref=9f924f10702abf732fa8c90b530713de0be094f6",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.config.properties;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.logging.log4j.core.filter.ThresholdFilter;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class PropertiesConfigurationRootLoggerOnlyTest {\n+\n+    @Test\n+    public void testPropertiesConfiguration() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, \"target/test-classes/log4j2-properties-root-only.properties\");\n+        Configuration config = ((LoggerContext)LogManager.getContext(false)).getConfiguration();\n+        assertNotNull(\"No configuration created\", config);\n+        assertEquals(\"Incorrect State: \" + config.getState(), config.getState(), LifeCycle.State.STARTED);\n+        Map<String, Appender> appenders = config.getAppenders();\n+        assertNotNull(appenders);\n+        assertTrue(\"Incorrect number of Appenders: \" + appenders.size(), appenders.size() == 1);\n+        Map<String, LoggerConfig> loggers = config.getLoggers();\n+        assertNotNull(loggers);\n+        assertTrue(\"Incorrect number of LoggerConfigs: \" + loggers.size(), loggers.size() == 1);\n+        Filter filter = config.getFilter();\n+        assertNotNull(\"No Filter\", filter);\n+        assertTrue(\"Not a Threshold Filter\", filter instanceof ThresholdFilter);\n+        Logger logger = LogManager.getLogger(getClass());\n+        logger.info(\"Welcome to Log4j!\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7587606f71b4b71fe63be40dd71cf076285b35a8",
                "filename": "log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9f924f10702abf732fa8c90b530713de0be094f6/log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/log4j2-properties-root-only.properties?ref=9f924f10702abf732fa8c90b530713de0be094f6",
                "patch": "@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+status = ERROR\n+\n+filters = Threshold\n+\n+filter.Threshold.type = ThresholdFilter\n+filter.Threshold.level = DEBUG\n+\n+appenders = Stdout\n+\n+appender.Stdout.type = Console\n+appender.Stdout.name = StdOut\n+appender.Stdout.target = SYSTEM_OUT\n+appender.Stdout.layout.type = PatternLayout\n+appender.Stdout.layout.pattern = %d [%t] %-5level: %msg%n%throwable\n+appender.Stdout.filters = marker\n+appender.Stdout.filter.marker.type = MarkerFilter\n+appender.Stdout.filter.marker.onMatch = DENY\n+appender.Stdout.filter.marker.onMisMatch = NEUTRAL\n+appender.Stdout.filter.marker.marker = FLOW\n+\n+rootLogger.appenderRefs = console\n+rootLogger.appenderRef.console.ref = StdOut\n+rootLogger.level = ERROR",
                "deletions": 0
            },
            {
                "sha": "ab6a089c3cf573167805b14c4bd7aacc7c655f6e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/9f924f10702abf732fa8c90b530713de0be094f6/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/9f924f10702abf732fa8c90b530713de0be094f6/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=9f924f10702abf732fa8c90b530713de0be094f6",
                "patch": "@@ -39,6 +39,9 @@\n       <action issue=\"LOG4J2-1020\" dev=\"mikes\" type=\"add\">\n         Add possibility to set shutdown timeout on AsyncAppender.\n       </action>\n+      <action issue=\"LOG4J2-1153\" dev=\"rpopma\" type=\"fix\">\n+        Fixed NullPointerException when only root logger is defined (and no named loggers) in configuration properties file.\n+      </action>\n       <action issue=\"LOG4J2-1140\" dev=\"rpopma\" type=\"fix\">\n         Fixed bug where headers were not being written to first file with RollingFileAppender.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "PropertiesConfigurationFactory.java"
        ],
        "unit_tests": [
            "PropertiesConfigurationRootLoggerOnlyTest.java"
        ]
    },
    "logging-log4j2_cd881ce": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1255] Logger.entry and Logger.exit should support Messages. Fix\nNPEs.",
        "commit": "https://github.com/apache/logging-log4j2/commit/cd881cef0f658857a8d5004390cdb1a8bdac4a31",
        "parent": "https://github.com/apache/logging-log4j2/commit/85661de7d6526b1aa234f45ab56eb092e4cbda39",
        "bug_id": "logging-log4j2_cd881ce",
        "file": [
            {
                "sha": "df7a4b98d3c121f2971068a7dfe4dd618af83c41",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java?ref=cd881cef0f658857a8d5004390cdb1a8bdac4a31",
                "patch": "@@ -304,7 +304,7 @@ public void debug(final MessageSupplier msgSupplier, final Throwable t) {\n      */\n     protected void enter(final String fqcn, final String format, final Supplier<?>... paramSuppliers) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n-            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, paramSuppliers.length, paramSuppliers), null);\n+            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, paramSuppliers), null);\n         }\n     }\n \n@@ -317,7 +317,7 @@ protected void enter(final String fqcn, final String format, final Supplier<?>..\n      */\n     protected void enter(final String fqcn, final String format, final Object... params) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n-            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, params.length, params), null);\n+            logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(format, params), null);\n         }\n     }\n \n@@ -352,14 +352,15 @@ public void entry(final Object... params) {\n     protected void entry(final String fqcn, final Object... params) {\n         if (isEnabled(Level.TRACE, ENTRY_MARKER, (Object) null, null)) {\n             if (params == null) {\n-                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, 0, null), null);\n+                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, (Supplier<?>[]) null), null);\n             } else {\n-                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, params.length, params), null);\n+                logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, params), null);\n             }\n         }\n     }\n \n-    protected Message entryMsg(final String format, final int count, final Object... params) {\n+    protected Message entryMsg(final String format, final Object... params) {\n+        final int count = params == null ? 0 : params.length;\n         if (count == 0) {\n             if (Strings.isEmpty(format)) {\n                 return messageFactory.newMessage(\"entry\");\n@@ -372,7 +373,7 @@ protected Message entryMsg(final String format, final int count, final Object...\n             return messageFactory.newMessage(sb.toString(), params);\n         }\n         sb.append(\" params(\");\n-        for (int i = 0; i < params.length; i++) {\n+        for (int i = 0; i < count; i++) {\n             Object parm = params[i];\n             sb.append(parm != null ? parm.toString() : \"null\");\n             if (i + 1 < params.length) {\n@@ -383,12 +384,13 @@ protected Message entryMsg(final String format, final int count, final Object...\n         return messageFactory.newMessage(sb.toString());\n     }\n \n-    protected Message entryMsg(final String format, final int count, final Supplier<?>... paramSuppliers) {\n+    protected Message entryMsg(final String format, final Supplier<?>... paramSuppliers) {\n+        final int count = paramSuppliers == null ? 0 : paramSuppliers.length;\n         Object[] params = new Object[count];\n         for (int i = 0; i < count; i++) {\n             params[i] = paramSuppliers[i].get();\n         }\n-        return entryMsg(format, count, params);\n+        return entryMsg(format, params);\n     }\n \n     @Override",
                "deletions": 8
            },
            {
                "sha": "8e4d9154b4f77ad212bd69a7cdf70875dbc59e10",
                "filename": "log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/cd881cef0f658857a8d5004390cdb1a8bdac4a31/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/test/java/org/apache/logging/log4j/LoggerTest.java?ref=cd881cef0f658857a8d5004390cdb1a8bdac4a31",
                "patch": "@@ -55,8 +55,8 @@ public void basicFlow() {\n         logger.entry();\r\n         logger.exit();\r\n         assertEquals(2, results.size());\r\n-        assertThat(\"Incorrect Entry\", results.get(0), startsWith(\"ENTRY[ FLOW ] TRACE entry\"));\r\n-        assertThat(\"incorrect Exit\", results.get(1), startsWith(\"EXIT[ FLOW ] TRACE exit\"));\r\n+        assertThat(\"Incorrect Entry\", results.get(0), equalTo(\"ENTRY[ FLOW ] TRACE entry\"));\r\n+        assertThat(\"incorrect Exit\", results.get(1), equalTo(\"EXIT[ FLOW ] TRACE exit\"));\r\n \r\n     }\r\n \r\n@@ -92,6 +92,15 @@ public void flowTracingStringObjectArray() {\n         assertThat(\"Missing exit data\", results.get(1), containsString(\"doFoo(a=1, b=2): 3\"));\r\n     }\r\n \r\n+    @Test\r\n+    public void flowTracing() {\r\n+        logger.traceEntry();\r\n+        logger.traceExit();\r\n+        assertEquals(2, results.size());\r\n+        assertThat(\"Incorrect Entry\", results.get(0), startsWith(\"ENTRY[ FLOW ] TRACE entry\"));\r\n+        assertThat(\"Incorrect Exit\", results.get(1), startsWith(\"EXIT[ FLOW ] TRACE exit\"));\r\n+    }\r\n+\r\n     @Test\r\n     public void catching() {\r\n         try {\r",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Logger.java",
            "AbstractLogger.java"
        ],
        "unit_tests": [
            "AbstractLoggerTest.java",
            "LoggerTest.java"
        ]
    },
    "logging-log4j2_8acedb4": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1153: Fixed NullPointerException when only root logger is defined\n(and no named loggers) in configuration properties file.\n\n- bugfix in PropertiesConfigurationFactory\n- removed unnecessary @SuppressWarnings annotation\n- added JUnit test demonstrating the issue and proving that the fix\nworks",
        "commit": "https://github.com/apache/logging-log4j2/commit/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83",
        "parent": "https://github.com/apache/logging-log4j2/commit/8c1bb39d975cc7b7ad24e685b86cfc8c170c44c6",
        "bug_id": "logging-log4j2_8acedb4",
        "file": [
            {
                "sha": "6be86833feabf7e5e88fff3e5057890e050f8cab",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationFactory.java?ref=8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83",
                "patch": "@@ -151,7 +151,7 @@ public PropertiesConfiguration getConfiguration(ConfigurationSource source) {\n             }\n         }\n         String loggerProp = properties.getProperty(\"loggers\");\n-        if (appenderProp != null) {\n+        if (loggerProp != null) {\n             String[] loggerNames = loggerProp.split(\",\");\n             for (String loggerName : loggerNames) {\n                 String name = loggerName.trim();\n@@ -400,7 +400,6 @@ private LayoutComponentBuilder createLayout(ConfigurationBuilder<PropertiesConfi\n         return componentBuilder;\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     private void processRemainingProperties(ComponentBuilder<?> builder, String name, Properties properties) {\n         while (properties.size() > 0) {\n             String propertyName = properties.stringPropertyNames().iterator().next();",
                "deletions": 2
            },
            {
                "sha": "88b0709b050a752ba7cd5d6ff818945089783bd1",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java",
                "status": "added",
                "changes": 60,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationRootLoggerOnlyTest.java?ref=8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83",
                "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.config.properties;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.Filter;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.logging.log4j.core.filter.ThresholdFilter;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class PropertiesConfigurationRootLoggerOnlyTest {\n+\n+    @Test\n+    public void testPropertiesConfiguration() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, \"target/test-classes/log4j2-properties-root-only.properties\");\n+        Configuration config = ((LoggerContext)LogManager.getContext(false)).getConfiguration();\n+        assertNotNull(\"No configuration created\", config);\n+        assertEquals(\"Incorrect State: \" + config.getState(), config.getState(), LifeCycle.State.STARTED);\n+        Map<String, Appender> appenders = config.getAppenders();\n+        assertNotNull(appenders);\n+        assertTrue(\"Incorrect number of Appenders: \" + appenders.size(), appenders.size() == 1);\n+        Map<String, LoggerConfig> loggers = config.getLoggers();\n+        assertNotNull(loggers);\n+        assertTrue(\"Incorrect number of LoggerConfigs: \" + loggers.size(), loggers.size() == 1);\n+        Filter filter = config.getFilter();\n+        assertNotNull(\"No Filter\", filter);\n+        assertTrue(\"Not a Threshold Filter\", filter instanceof ThresholdFilter);\n+        Logger logger = LogManager.getLogger(getClass());\n+        logger.info(\"Welcome to Log4j!\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "7587606f71b4b71fe63be40dd71cf076285b35a8",
                "filename": "log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/log4j-core/src/test/resources/log4j2-properties-root-only.properties",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/log4j2-properties-root-only.properties?ref=8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83",
                "patch": "@@ -0,0 +1,38 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+status = ERROR\n+\n+filters = Threshold\n+\n+filter.Threshold.type = ThresholdFilter\n+filter.Threshold.level = DEBUG\n+\n+appenders = Stdout\n+\n+appender.Stdout.type = Console\n+appender.Stdout.name = StdOut\n+appender.Stdout.target = SYSTEM_OUT\n+appender.Stdout.layout.type = PatternLayout\n+appender.Stdout.layout.pattern = %d [%t] %-5level: %msg%n%throwable\n+appender.Stdout.filters = marker\n+appender.Stdout.filter.marker.type = MarkerFilter\n+appender.Stdout.filter.marker.onMatch = DENY\n+appender.Stdout.filter.marker.onMisMatch = NEUTRAL\n+appender.Stdout.filter.marker.marker = FLOW\n+\n+rootLogger.appenderRefs = console\n+rootLogger.appenderRef.console.ref = StdOut\n+rootLogger.level = ERROR",
                "deletions": 0
            },
            {
                "sha": "ab6a089c3cf573167805b14c4bd7aacc7c655f6e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=8acedb4e7718ad6ac6ddb648143bfbb1aa10fa83",
                "patch": "@@ -39,6 +39,9 @@\n       <action issue=\"LOG4J2-1020\" dev=\"mikes\" type=\"add\">\n         Add possibility to set shutdown timeout on AsyncAppender.\n       </action>\n+      <action issue=\"LOG4J2-1153\" dev=\"rpopma\" type=\"fix\">\n+        Fixed NullPointerException when only root logger is defined (and no named loggers) in configuration properties file.\n+      </action>\n       <action issue=\"LOG4J2-1140\" dev=\"rpopma\" type=\"fix\">\n         Fixed bug where headers were not being written to first file with RollingFileAppender.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "PropertiesConfigurationFactory.java"
        ],
        "unit_tests": [
            "PropertiesConfigurationRootLoggerOnlyTest.java"
        ]
    },
    "logging-log4j2_b8c8bb3": {
        "repo": "logging-log4j2",
        "message": "Added test for LOG4J2-807 which passes but prints NPE on the console.\nThis test should fail but how can we detect the error condition?",
        "commit": "https://github.com/apache/logging-log4j2/commit/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494",
        "parent": "https://github.com/apache/logging-log4j2/commit/70adb1b747f36ca5d8f78744f63de3e87164f60e",
        "bug_id": "logging-log4j2_b8c8bb3",
        "file": [
            {
                "sha": "c19c0117d0e0e228d446329ad49e03b0b1a0cfd3",
                "filename": "log4j-core/LOG4J2-807.log",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/LOG4J2-807.log",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/LOG4J2-807.log",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/LOG4J2-807.log?ref=b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494",
                "patch": "@@ -0,0 +1,24 @@\n+2014-08-29 11:28:47,762 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j configured, will be reconfigured in aprox. 5 sec\n+2014-08-29 11:28:48,763 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:49,763 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:50,763 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:51,764 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:52,764 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:53,764 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:28:54,764 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:26,288 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j configured, will be reconfigured in aprox. 5 sec\n+2014-08-29 11:35:27,290 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:28,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:29,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:30,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:31,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:32,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:35:33,291 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:38,331 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j configured, will be reconfigured in aprox. 5 sec\n+2014-08-29 11:41:39,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:40,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:41,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:42,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:43,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:44,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration\n+2014-08-29 11:41:45,332 INFO  [o.a.l.l.c.a.AsyncRootReloadTest] Log4j waiting for reconfiguration",
                "deletions": 0
            },
            {
                "sha": "20aa9198ae828ade2ec05de551565943a0ddcb92",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java",
                "status": "added",
                "changes": 44,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncRootReloadTest.java?ref=b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494",
                "patch": "@@ -0,0 +1,44 @@\n+package org.apache.logging.log4j.core.async;\n+\n+import java.io.File;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.util.FileUtils;\n+import org.apache.logging.log4j.junit.CleanFiles;\n+import org.apache.logging.log4j.junit.InitialLoggerContext;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+\n+/**\n+ * Tests LOG4J2-807.\n+ */\n+public class AsyncRootReloadTest {\n+\n+    private static final String ISSUE = \"LOG4J2-807\";\n+    private static final String ISSUE_CONFIG = ISSUE + \".xml\";\n+    private static final String LOG = \"target/\" + ISSUE + \".log\";\n+    private static final String RESOURCE = \"classpath:\" + ISSUE_CONFIG;\n+\n+    @Rule\n+    public RuleChain rules = RuleChain.outerRule(new CleanFiles(LOG)).around(new InitialLoggerContext(RESOURCE));\n+\n+    @Test\n+    public void testLog4j2_807() throws InterruptedException, URISyntaxException {\n+        URL url = AsyncRootReloadTest.class.getResource(\"/\" + ISSUE_CONFIG);\n+        final File configFile = FileUtils.fileFromUri(url.toURI());\n+\n+        Logger logger = LogManager.getLogger(AsyncRootReloadTest.class);\n+        logger.info(\"Log4j configured, will be reconfigured in aprox. 5 sec\");\n+\n+        configFile.setLastModified(System.currentTimeMillis());\n+\n+        for (int i = 0; i < 10; i++) {\n+            Thread.sleep(1000);\n+            logger.info(\"Log4j waiting for reconfiguration\");\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "70f0bac92c5fa93ecd9e5e9bf1625305f412ede9",
                "filename": "log4j-core/src/test/resources/LOG4J2-807.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/src/test/resources/LOG4J2-807.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494/log4j-core/src/test/resources/LOG4J2-807.xml",
                "status": "added",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/LOG4J2-807.xml?ref=b8c8bb3cee86018dc2d6d3cd46886ec8e9fb5494",
                "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration name=\"asynRootConfig\" monitorInterval=\"5\" status=\"debug\">\n+  <Appenders>\n+    <RandomAccessFile name=\"FILE_APPENDER\" fileName=\"LOG4J2-807.log\" immediateFlush=\"false\" append=\"true\">\n+      <PatternLayout>\n+        <Pattern>%d %-5p [%c{1.}] %m%n</Pattern>\n+      </PatternLayout>\n+    </RandomAccessFile>\n+  </Appenders>\n+  <Loggers>\n+    <asyncRoot level=\"debug\">\n+      <AppenderRef ref=\"FILE_APPENDER\" />\n+    </asyncRoot>\n+  </Loggers>\n+</Configuration>\n\\ No newline at end of file",
                "deletions": 0
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "AsyncRootReloadTest.java"
        ]
    },
    "logging-log4j2_0f8acc5": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-807 Prevent NPE when configuration with AsyncLogger/AsyncRoot is\nreloaded.",
        "commit": "https://github.com/apache/logging-log4j2/commit/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
        "parent": "https://github.com/apache/logging-log4j2/commit/98c5192376f7ab10a4045ec8b8a867259d161471",
        "bug_id": "logging-log4j2_0f8acc5",
        "file": [
            {
                "sha": "844c8c051f045b34b1739ad5de4ce0ab87fd25e3",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "patch": "@@ -119,10 +119,14 @@ protected void callAppenders(final LogEvent event) {\n     void asyncCallAppenders(final LogEvent event) {\n         super.callAppenders(event);\n     }\n+    \n+    private String displayName() {\n+        return LogManager.ROOT_LOGGER_NAME.equals(getName()) ? \"root\" : getName();\n+    }\n \n     @Override\n     public void start() {\n-        LOGGER.trace(\"AsyncLoggerConfig[{}] starting...\", getName());\n+        LOGGER.trace(\"AsyncLoggerConfig[{}] starting...\", displayName());\n         this.setStarting();\n         if (helper == null) {\n             helper = new AsyncLoggerConfigHelper(this);\n@@ -134,7 +138,7 @@ public void start() {\n \n     @Override\n     public void stop() {\n-        LOGGER.trace(\"AsyncLoggerConfig[{}] stopping...\", getName());\n+        LOGGER.trace(\"AsyncLoggerConfig[{}] stopping...\", displayName());\n         this.setStopping();\n         AsyncLoggerConfigHelper.release();\n         super.stop();",
                "deletions": 2
            },
            {
                "sha": "8f906cdf39a51fb3611f985ed2cd17f095b9e49e",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "patch": "@@ -209,7 +209,7 @@ public void stop() {\n                 alreadyStopped.add(logger);\n             }\n         }\n-        if (root instanceof AsyncLoggerConfig) {\n+        if (root instanceof AsyncLoggerConfig & !alreadyStopped.contains(root)) { // LOG4J2-807\n             root.stop();\n             asyncLoggerConfigCount++;\n             alreadyStopped.add(root);",
                "deletions": 1
            },
            {
                "sha": "b7543929b42fc17c0c90afab3eb42af61b6c2350",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0f8acc5de1d73eaf38ba67d93f28691fdc02aa86/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=0f8acc5de1d73eaf38ba67d93f28691fdc02aa86",
                "patch": "@@ -24,6 +24,9 @@\n   </properties>\n   <body>\n     <release version=\"2.1\" date=\"2014-??-??\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-807\" dev=\"rpopma\" type=\"fix\">\n+        Prevent NPE when configuration with AsyncLogger/AsyncRoot is reloaded.\n+      </action>\n       <action issue=\"LOG4J2-848\" dev=\"ggregory\" type=\"add\">\n         Add a Java lookup to provide nicely formatted runtime version information.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AsyncLoggerConfig.java"
        ],
        "unit_tests": [
            "AsyncLoggerConfigTest.java"
        ]
    },
    "logging-log4j2_491be7d": {
        "repo": "logging-log4j2",
        "message": "Avoid possible NPE when id is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1490150 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/491be7da7af31885b3746bd4867dd1cb73d4914d",
        "parent": "https://github.com/apache/logging-log4j2/commit/5f7a30077b59c02b47b49dd6dc99edd05686aaba",
        "bug_id": "logging-log4j2_491be7d",
        "file": [
            {
                "sha": "65320cb90c7d0bd9cd5d095d938a202177d5bbd0",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/491be7da7af31885b3746bd4867dd1cb73d4914d/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/491be7da7af31885b3746bd4867dd1cb73d4914d/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java?ref=491be7da7af31885b3746bd4867dd1cb73d4914d",
                "patch": "@@ -385,12 +385,12 @@ private void formatStructuredElement(final StructuredDataId id, final String pre\n \n     private String getId(final StructuredDataId id) {\n         final StringBuilder sb = new StringBuilder();\n-        if (id.getName() == null) {\n+        if (id == null || id.getName() == null) {\n             sb.append(defaultId);\n         } else {\n             sb.append(id.getName());\n         }\n-        int ein = id.getEnterpriseNumber();\n+        int ein = id != null ? id.getEnterpriseNumber() : enterpriseNumber;\n         if (ein < 0) {\n             ein = enterpriseNumber;\n         }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "RFC5424Layout.java"
        ],
        "unit_tests": [
            "RFC5424LayoutTest.java"
        ]
    },
    "logging-log4j2_b1e1f23": {
        "repo": "logging-log4j2",
        "message": "Avoid unlikely but possible NPE when readLine() returns null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1490141 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/b1e1f23d1a820242eed8e94a271c691e71b98604",
        "parent": "https://github.com/apache/logging-log4j2/commit/9cc73ba99c2d9a36cf5bdf1ab4080fb9774af45a",
        "bug_id": "logging-log4j2_b1e1f23",
        "file": [
            {
                "sha": "856a66588bf27bf9b02d205c063f4633306bd59b",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b1e1f23d1a820242eed8e94a271c691e71b98604/core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b1e1f23d1a820242eed8e94a271c691e71b98604/core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "status": "modified",
                "changes": 12,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java?ref=b1e1f23d1a820242eed8e94a271c691e71b98604",
                "patch": "@@ -49,7 +49,7 @@\n  */\n public class UDPSocketServer extends AbstractServer implements Runnable {\n \n-    private static Logger logger;\n+    private final Logger logger;\n \n     private static final int MAX_PORT = 65534;\n \n@@ -69,11 +69,8 @@\n      *             If an error occurs.\n      */\n     public UDPSocketServer(final int port) throws IOException {\n-        server = new DatagramSocket(port);\n-        if (logger == null) {\n-            logger = LogManager.getLogger(this);\n-            // logger = LogManager.getLogger(getClass().getName() + '.' + port);\n-        }\n+        this.server = new DatagramSocket(port);\n+        this.logger = LogManager.getLogger(this.getClass().getName() + '.' + port);\n     }\n \n     /**\n@@ -99,14 +96,13 @@ public static void main(final String[] args) throws Exception {\n         if (args.length == 2 && args[1].length() > 0) {\n             ConfigurationFactory.setConfigurationFactory(new ServerConfigurationFactory(args[1]));\n         }\n-        logger = LogManager.getLogger(UDPSocketServer.class.getName());\n         final UDPSocketServer sserver = new UDPSocketServer(port);\n         final Thread server = new Thread(sserver);\n         server.start();\n         final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n         while (true) {\n             final String line = reader.readLine();\n-            if (line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\") || line.equalsIgnoreCase(\"Exit\")) {\n+            if (line == null || line.equalsIgnoreCase(\"Quit\") || line.equalsIgnoreCase(\"Stop\") || line.equalsIgnoreCase(\"Exit\")) {\n                 sserver.shutdown();\n                 server.join();\n                 break;",
                "deletions": 8
            }
        ],
        "patched_files": [
            "UDPSocketServer.java"
        ],
        "unit_tests": [
            "UDPSocketServerTest.java"
        ]
    },
    "logging-log4j2_60489e4": {
        "repo": "logging-log4j2",
        "message": "Switch NPE to IAE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1589555 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/60489e4e35f9bb55d7ab1d7204d616ba606f3365",
        "parent": "https://github.com/apache/logging-log4j2/commit/e56a3d224051aa0e1ce951cecd570af34239d3f6",
        "bug_id": "logging-log4j2_60489e4",
        "file": [
            {
                "sha": "8a4d8a5ec4d7f282c5cfed8b00a5ba4c105bc5f3",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/Marker.java?ref=60489e4e35f9bb55d7ab1d7204d616ba606f3365",
                "patch": "@@ -57,23 +57,23 @@\n      * Checks whether this Marker is an instance of the specified Marker.\n      * @param m The Marker to check.\n      * @return {@code true} if this Marker or one of its ancestors is the specified Marker, {@code false} otherwise.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean isInstanceOf(Marker m);\n \n     /**\n      * Checks whether this Marker is an instance of the specified Marker.\n      * @param name The name of the Marker.\n      * @return {@code true} if this Marker or one of its ancestors matches the specified name, {@code false} otherwise.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean isInstanceOf(String name);\n \n     /**\n      * Adds a Marker as a parent to this Marker.\n      * @param marker The parent marker to add.\n      * @return The current Marker object, thus allowing multiple adds to be concatenated.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     Marker add(Marker marker);\n \n@@ -88,7 +88,7 @@\n      * Removes the specified Marker as a parent of this Marker.\n      * @param marker The marker to remove.\n      * @return {@code true} if the marker was removed.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     boolean remove(Marker marker);\n }",
                "deletions": 4
            },
            {
                "sha": "1ee2c58a8875df072cc065b07f827362164e18b4",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/60489e4e35f9bb55d7ab1d7204d616ba606f3365/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java",
                "status": "modified",
                "changes": 19,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/MarkerManager.java?ref=60489e4e35f9bb55d7ab1d7204d616ba606f3365",
                "patch": "@@ -36,7 +36,7 @@ private MarkerManager() {\n      * Retrieve a Marker or create a Marker that has no parent.\n      * @param name The name of the Marker.\n      * @return The Marker with the specified name.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the argument is {@code null}\n      */\n     public static Marker getMarker(final String name) {\n         markerMap.putIfAbsent(name, new Log4jMarker(name));\n@@ -49,7 +49,6 @@ public static Marker getMarker(final String name) {\n      * @param parent The name of the parent Marker.\n      * @return The Marker with the specified name.\n      * @throws IllegalArgumentException if the parent Marker does not exist.\n-     * @throws NullPointerException if the argument is {@code null}\n      * @deprecated Use the Marker add or set methods to add parent Markers. Will be removed by final GA release.\n      */\n     @Deprecated\n@@ -68,7 +67,7 @@ public static Marker getMarker(final String name, final String parent) {\n      * @param name The name of the Marker.\n      * @param parent The parent Marker.\n      * @return The Marker with the specified name.\n-     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if any argument is {@code null}\n      * @deprecated Use the Marker add or set methods to add parent Markers. Will be removed by final GA release.\n      */\n     @Deprecated\n@@ -89,13 +88,13 @@ public static Marker getMarker(final String name, final Marker parent) {\n         /**\n          * Constructs a new Marker.\n          * @param name the name of the Marker.\n-         * @throws NullPointerException if the argument is {@code null}\n+         * @throws IllegalArgumentException if the argument is {@code null}\n          */\n         public Log4jMarker(final String name) {\n             if (name == null) {\n                 // we can't store null references in a ConcurrentHashMap as it is, not to mention that a null Marker\n                 // name seems rather pointless. To get an \"anonymous\" Marker, just use an empty string.\n-                throw new NullPointerException(\"Marker name cannot be null.\");\n+                throw new IllegalArgumentException(\"Marker name cannot be null.\");\n             }\n             this.name = name;\n             this.parents = null;\n@@ -106,7 +105,7 @@ public Log4jMarker(final String name) {\n         @Override\n         public synchronized Marker add(final Marker parent) {\n             if (parent == null) {\n-                throw new NullPointerException(\"A parent marker must be specified\");\n+                throw new IllegalArgumentException(\"A parent marker must be specified\");\n             }\n             // It is not strictly necessary to copy the variable here but it should perform better than\n             // Accessing a volatile variable multiple times.\n@@ -132,7 +131,7 @@ public synchronized Marker add(final Marker parent) {\n         @Override\n         public synchronized boolean remove(final Marker parent) {\n             if (parent == null) {\n-                throw new NullPointerException(\"A parent marker must be specified\");\n+                throw new IllegalArgumentException(\"A parent marker must be specified\");\n             }\n             final Marker[] localParents = this.parents;\n             if (localParents == null) {\n@@ -153,9 +152,9 @@ public synchronized boolean remove(final Marker parent) {\n                 final Marker marker = localParents[i];\n                 if (!marker.equals(parent)) {\n                     if (index == localParentsLength - 1) {\n+                        // no need to swap array\n                         return false;\n                     }\n-                    // FIXME: buffer overflow\n                     markers[index++] = marker;\n                 }\n             }\n@@ -201,7 +200,7 @@ public boolean hasParents() {\n         @Override\n         public boolean isInstanceOf(final Marker marker) {\n             if (marker == null) {\n-                throw new NullPointerException(\"A marker parameter is required\");\n+                throw new IllegalArgumentException(\"A marker parameter is required\");\n             }\n             if (this == marker) {\n                 return true;\n@@ -230,7 +229,7 @@ public boolean isInstanceOf(final Marker marker) {\n         @Override\n         public boolean isInstanceOf(final String markerName) {\n             if (markerName == null) {\n-                throw new NullPointerException(\"A marker name is required\");\n+                throw new IllegalArgumentException(\"A marker name is required\");\n             }\n             if (markerName.equals(this.getName())) {\n                 return true;",
                "deletions": 10
            }
        ],
        "patched_files": [
            "Marker.java"
        ],
        "unit_tests": [
            "MarkerTest.java"
        ]
    },
    "logging-log4j2_2d7d631": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-234 - RegexFilter threw a NullPointerException when used as a context-wide filter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1479050 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/2d7d6311a808391e43137ae9c36060709fb185b6",
        "parent": "https://github.com/apache/logging-log4j2/commit/70ad5f35c1cb62736e63650abf5b9183b625c823",
        "bug_id": "logging-log4j2_2d7d631",
        "file": [
            {
                "sha": "56d8ec658462c28d7879b3da7d4df0d391759256",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d7d6311a808391e43137ae9c36060709fb185b6/core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d7d6311a808391e43137ae9c36060709fb185b6/core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java?ref=2d7d6311a808391e43137ae9c36060709fb185b6",
                "patch": "@@ -57,12 +57,18 @@ public Result filter(final Logger logger, final Level level, final Marker marker\n     @Override\n     public Result filter(final Logger logger, final Level level, final Marker marker, final Object msg,\n                          final Throwable t) {\n+        if (msg == null) {\n+            return onMismatch;\n+        }\n         return filter(msg.toString());\n     }\n \n     @Override\n     public Result filter(final Logger logger, final Level level, final Marker marker, final Message msg,\n                          final Throwable t) {\n+        if (msg == null) {\n+            return onMismatch;\n+        }\n         final String text = useRawMessage ? msg.getFormat() : msg.getFormattedMessage();\n         return filter(text);\n     }",
                "deletions": 0
            },
            {
                "sha": "dcb1096ee355dc6a2c448f728b5f80dd1a4430b9",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d7d6311a808391e43137ae9c36060709fb185b6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d7d6311a808391e43137ae9c36060709fb185b6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java?ref=2d7d6311a808391e43137ae9c36060709fb185b6",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.BeforeClass;\n@@ -51,4 +52,15 @@ public void testThresholds() {\n         filter = RegexFilter.createFilter(\"* test *\", null, null, null);\n         assertNull(filter);\n     }\n+\n+    @Test\n+    public void TestNoMsg() {\n+        RegexFilter filter = RegexFilter.createFilter(\".* test .*\", null, null, null);\n+        filter.start();\n+        assertTrue(filter.isStarted());\n+        assertTrue(filter.filter(null, Level.DEBUG, null, (String)null, (Throwable)null) == Filter.Result.DENY);\n+        assertTrue(filter.filter(null, Level.DEBUG, null, (Message)null, (Throwable)null) == Filter.Result.DENY);\n+        assertTrue(filter.filter(null, Level.DEBUG, null, null, (Object[])null) == Filter.Result.DENY);\n+\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "d95d42c7a03d53296b29594e053d20536fe93c50",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d7d6311a808391e43137ae9c36060709fb185b6/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d7d6311a808391e43137ae9c36060709fb185b6/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2d7d6311a808391e43137ae9c36060709fb185b6",
                "patch": "@@ -23,6 +23,9 @@\n \n   <body>\n     <release version=\"2.0-beta6\" date=\"@TBD@\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-234\" dev=\"rgoers\" type=\"fix\">\n+        RegexFilter threw a NullPointerException when used as a context-wide filter.\n+      </action>\n       <action issue=\"LOG4J2-192\" dev=\"rgoers\" type=\"fix\">\n         Add support for interpolating Environment variables when processing the configuration.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RegexFilter.java"
        ],
        "unit_tests": [
            "RegexFilterTest.java"
        ]
    },
    "logging-log4j2_81e2fa4": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1108] NullPointerException when passing null to\njava.util.logging.Logger.setLevel().",
        "commit": "https://github.com/apache/logging-log4j2/commit/81e2fa4c347f92ecb05aa000e939adfe310f935a",
        "parent": "https://github.com/apache/logging-log4j2/commit/2b1b35613e66eec9658dcd471a28b214b5647174",
        "bug_id": "logging-log4j2_81e2fa4",
        "file": [
            {
                "sha": "1e023879e97ae50e715925a9b174825802621a4c",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -97,11 +97,18 @@ public LoggerContext getContext() {\n \n     /**\n      * This method is not exposed through the public API and is provided primarily for unit testing.\n-     * @param level The Level to use on this Logger.\n+     * <p>\n+     * If the new level is null, this logger inherits the level from its parent.\n+     * </p>\n+     * \n+     * @param level The Level to use on this Logger, may be null.\n      */\n     public synchronized void setLevel(final Level level) {\n         if (level != null) {\n             config = new PrivateConfig(config, level);\n+        } else {\n+            // Reusing parent PC, should we make a copy instead?\n+            config = getParent().config;\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "23ea0f90432041040742a35a9cb206e1cde159df",
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -116,6 +116,9 @@ private Level nearestLevel(final java.util.logging.Level customJavaLevel) {\n \n     @Override\n     public Level toLevel(final java.util.logging.Level javaLevel) {\n+        if (javaLevel == null) {\n+            return null;\n+        }\n         final Level level = julToLog4j.get(javaLevel);\n         if (level != null) {\n             return level;",
                "deletions": 0
            },
            {
                "sha": "95676f642cbf59ea32d14ca20d8fc9d1865705bb",
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelConverter.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -31,7 +31,7 @@\n     /**\n      * Converts a JDK logging Level to a Log4j logging Level.\n      *\n-     * @param javaLevel JDK Level to convert.\n+     * @param javaLevel JDK Level to convert, may be null per the JUL specification.\n      * @return converted Level or {@code null} if the given level could not be converted.\n      */\n     Level toLevel(java.util.logging.Level javaLevel);",
                "deletions": 1
            },
            {
                "sha": "328e1e56ca2d844a1c0a3661b8b184f7bc894ad3",
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelTranslator.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelTranslator.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelTranslator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/LevelTranslator.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -65,8 +65,8 @@\n     /**\n      * Converts a JDK logging Level to a Log4j logging Level.\n      *\n-     * @param level JDK Level to convert.\n-     * @return converted Level.\n+     * @param level JDK Level to convert, may be null per the JUL specification.\n+     * @return converted Level or null\n      */\n     public static Level toLevel(final java.util.logging.Level level) {\n         return LEVEL_CONVERTER.toLevel(level);",
                "deletions": 2
            },
            {
                "sha": "ccb761fd2cf2c27110295fcaf0c16314d095cd88",
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/CoreLoggerTest.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.logging.log4j.jul;\n \n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n import java.util.logging.Level;\n@@ -73,4 +74,23 @@ public void testSetLevel() throws Exception {\n         assertThat(logger.getLevel(), equalTo(Level.FINE));\n         assertThat(childLogger.getLevel(), equalTo(Level.FINE));\n     }\n+\n+    @Test\n+    public void testSetLevelToNull() throws Exception {\n+        final Logger childLogger = Logger.getLogger(LOGGER_NAME + \".NullChild\");\n+        assertThat(childLogger.getLevel(), equalTo(Level.FINE));\n+        assertThat(childLogger.isLoggable(Level.FINE), is(true));\n+        childLogger.setLevel(Level.SEVERE);\n+        assertThat(childLogger.getLevel(), equalTo(Level.SEVERE));\n+        assertThat(childLogger.isLoggable(Level.FINE), is(false));\n+        // null test\n+        childLogger.setLevel(null);\n+        assertThat(childLogger.getLevel(), equalTo(null));\n+        assertThat(childLogger.isLoggable(Level.FINE), is(true));\n+        // now go back\n+        childLogger.setLevel(Level.SEVERE);\n+        assertThat(childLogger.getLevel(), equalTo(Level.SEVERE));\n+        assertThat(childLogger.isLoggable(Level.FINE), is(false));\n+    }\n+\n }\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "801749ec27e2790e262999840687e7b5b31aa76c",
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterTest.java",
                "status": "added",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterTest.java?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements. See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License. You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the license for the specific language governing permissions and\r\n+ * limitations under the license.\r\n+ */\r\n+package org.apache.logging.log4j.jul;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+\r\n+public class DefaultLevelConverterTest {\r\n+\r\n+    /**\r\n+     * (LOG4J2-1108) NullPointerException when passing null to java.util.logging.Logger.setLevel().\r\n+     */\r\n+    @Test\r\n+    public void testJulSetNull() {\r\n+        Assert.assertEquals(null, new DefaultLevelConverter().toLevel(null));\r\n+    }\r\n+}\r",
                "deletions": 0
            },
            {
                "sha": "f33e78dc61d535719928efd098b5527565bd2580",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/81e2fa4c347f92ecb05aa000e939adfe310f935a/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/81e2fa4c347f92ecb05aa000e939adfe310f935a/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=81e2fa4c347f92ecb05aa000e939adfe310f935a",
                "patch": "@@ -45,6 +45,9 @@\n       <action issue=\"LOG4J2-1044\" dev=\"rgoers\" type=\"fix\">\n         Write pending events to Flume when the appender is stopped.\n       </action>\n+      <action issue=\"LOG4J2-1108\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n+        NullPointerException when passing null to java.util.logging.Logger.setLevel().\n+      </action>\n       <action dev=\"rpopma\" type=\"remove\">\n         Removed experimental interface LevelLogger which got committed to master by mistake.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LevelTranslator.java",
            "CoreLogger.java",
            "DefaultLevelConverter.java",
            "LevelConverter.java",
            "Logger.java"
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLogger.java",
            "DefaultLevelConverterTest.java",
            "CoreLoggerTest.java"
        ]
    },
    "logging-log4j2_50e1924": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-139 - Fix NullPointerException when no protocol is specified. Regression introduced by fix for LOG4J2-228\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1491348 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/50e1924726c060d8ce3f4e9eae4419c420c9e11b",
        "parent": "https://github.com/apache/logging-log4j2/commit/a130097158d9989718ba141ab354e591133e45f5",
        "bug_id": "logging-log4j2_50e1924",
        "file": [
            {
                "sha": "01701f6cdb1318993a3b97756ddb6fb228369f48",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/50e1924726c060d8ce3f4e9eae4419c420c9e11b/core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/50e1924726c060d8ce3f4e9eae4419c420c9e11b/core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/SocketAppender.java?ref=50e1924726c060d8ce3f4e9eae4419c420c9e11b",
                "patch": "@@ -115,8 +115,7 @@ public void stop() {\n             return null;\n         }\n \n-        final String prot = protocol != null ? protocol : Protocol.TCP.name();\n-        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);\n+        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol != null ? protocol : Protocol.TCP.name());\n         if (p.equals(Protocol.UDP)) {\n             isFlush = true;\n         }",
                "deletions": 2
            },
            {
                "sha": "0bb34050e424101d4f23f7de6e6df853b509852d",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/50e1924726c060d8ce3f4e9eae4419c420c9e11b/core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/50e1924726c060d8ce3f4e9eae4419c420c9e11b/core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/SocketAppenderTest.java?ref=50e1924726c060d8ce3f4e9eae4419c420c9e11b",
                "patch": "@@ -122,6 +122,15 @@ public void testTCPAppender() throws Exception {\n         assertTrue(\"Message not delivered via TCP\", tcpCount > 1);\n     }\n \n+    @Test\n+    public void testDefaultProtocol() throws Exception {\n+\n+        final SocketAppender appender = SocketAppender.createAppender(\"localhost\", PORT, null, \"-1\",\n+            \"false\", \"Test\", null, null, null, null, null, null);\n+        assertNotNull(appender);\n+    }\n+\n+\n \n     @Test\n     public void testUDPAppender() throws Exception {",
                "deletions": 0
            },
            {
                "sha": "96b9416f90414f2f40469082fe3fa59ae34c0670",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/50e1924726c060d8ce3f4e9eae4419c420c9e11b/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/50e1924726c060d8ce3f4e9eae4419c420c9e11b/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=50e1924726c060d8ce3f4e9eae4419c420c9e11b",
                "patch": "@@ -23,6 +23,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-beta8\" date=\"2013-??-??\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-139\" dev=\"rgoers\" type=\"fix\">\n+        Fix NullPointerException (regression due to fix for LOG4J2-228)\n+      </action>\n       <action issue=\"LOG4J2-168\" dev=\"rgoers\" type=\"update\" due-to=\"Scott Severtson\">\n         Allow elements of the logging event to be added to the mdc structured data in RFC5424Layout.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SocketAppender.java"
        ],
        "unit_tests": [
            "SocketAppenderTest.java"
        ]
    },
    "logging-log4j2_ad23fd9": {
        "repo": "logging-log4j2",
        "message": "Prevent NPE where config may be null but header/footer are not.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597669 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
        "parent": "https://github.com/apache/logging-log4j2/commit/e40bdc830177273f531e78dbf12637e6c5c7307f",
        "bug_id": "logging-log4j2_ad23fd9",
        "file": [
            {
                "sha": "cdd5fe2d81a00ccb158a4b3f1b42c77b5e7687a7",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ad23fd9b7b20d3da32fe24f59c58c59e827f153f/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "status": "modified",
                "changes": 22,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java?ref=ad23fd9b7b20d3da32fe24f59c58c59e827f153f",
                "patch": "@@ -139,24 +139,22 @@ private PatternLayout(final Configuration config, final RegexReplacement replace\n         }\n     }\n \n-    @Override\n-    public byte[] getHeader() {\n-        byte [] myHeader = super.getHeader();\n-        if (myHeader != null) {\n+    private byte[] strSubstitutorReplace(final byte... b) {\n+        if (b != null && config != null) {\n             final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myHeader, cs)).getBytes(cs);\n+            return config.getStrSubstitutor().replace(new String(b, cs)).getBytes(cs);\n         }\n-        return myHeader;\n+        return b;\n+    }\n+\n+    @Override\n+    public byte[] getHeader() {\n+        return strSubstitutorReplace(super.getHeader());\n     }\n \n     @Override\n     public byte[] getFooter() {\n-        byte [] myFooter = super.getFooter();\n-        if (myFooter != null) {\n-            final Charset cs = getCharset();\n-            return config.getStrSubstitutor().replace(new String(myFooter, cs)).getBytes(cs);\n-        }\n-        return myFooter;\n+        return strSubstitutorReplace(super.getFooter());\n     }\n \n     /**",
                "deletions": 12
            }
        ],
        "patched_files": [
            "PatternLayout.java"
        ],
        "unit_tests": [
            "PatternLayoutTest.java"
        ]
    },
    "logging-log4j2_2e49dc1": {
        "repo": "logging-log4j2",
        "message": "Refactoring TestConfigurator, which was full of unused variables, potential NPEs (which would have made it harder to diagnose test failures) and unnecessary assertTrue(... something.equals(...)) statements instead of assertEquals statements. This is done in preparation for fixing LOG4J2-293.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1519211 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/2e49dc12f377f5b538d5d76c93ac344927a66d70",
        "parent": "https://github.com/apache/logging-log4j2/commit/97d090cada002ad0f7ef6903f52692595163379d",
        "bug_id": "logging-log4j2_2e49dc1",
        "file": [
            {
                "sha": "2b67e8c7ea27fe323908eb9ee3a179130f6c3b36",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2e49dc12f377f5b538d5d76c93ac344927a66d70/log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2e49dc12f377f5b538d5d76c93ac344927a66d70/log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java",
                "status": "modified",
                "changes": 140,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/TestConfigurator.java?ref=2e49dc12f377f5b538d5d76c93ac344927a66d70",
                "patch": "@@ -33,10 +33,7 @@\n import java.io.Serializable;\n import java.util.Map;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n /**\n  *\n@@ -47,39 +44,37 @@\n \n     private static final String FILESEP = System.getProperty(\"file.separator\");\n \n-    private static final String[] CHARS = new String[]\n-        {\n-            \"aaaaaaaaaa\",\n-            \"bbbbbbbbbb\",\n-            \"cccccccccc\",\n-            \"dddddddddd\",\n-            \"eeeeeeeeee\",\n-            \"ffffffffff\",\n-            \"gggggggggg\",\n-            \"hhhhhhhhhh\",\n-            \"iiiiiiiiii\",\n-            \"jjjjjjjjjj\",\n-            \"kkkkkkkkkk\",\n-            \"llllllllll\",\n-            \"mmmmmmmmmm\",\n-        };\n+    private static final String[] CHARS = new String[] {\n+        \"aaaaaaaaaa\",\n+        \"bbbbbbbbbb\",\n+        \"cccccccccc\",\n+        \"dddddddddd\",\n+        \"eeeeeeeeee\",\n+        \"ffffffffff\",\n+        \"gggggggggg\",\n+        \"hhhhhhhhhh\",\n+        \"iiiiiiiiii\",\n+        \"jjjjjjjjjj\",\n+        \"kkkkkkkkkk\",\n+        \"llllllllll\",\n+        \"mmmmmmmmmm\",\n+    };\n \n \n     @Test\n     public void testFromFile() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"target/test-classes/log4j2-config.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n     @Test\n@@ -88,18 +83,17 @@ public void testFromStream() throws Exception {\n         final ConfigurationFactory.ConfigurationSource source =\n             new ConfigurationFactory.ConfigurationSource(is, \"target/test-classes/log4j2-config.xml\");\n         final LoggerContext ctx = Configurator.initialize(null, source);\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n     @Test\n@@ -108,92 +102,88 @@ public void testFromStreamNoId() throws Exception {\n         final ConfigurationFactory.ConfigurationSource source =\n             new ConfigurationFactory.ConfigurationSource(is);\n         final LoggerContext ctx = Configurator.initialize(null, source);\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n     @Test\n     public void testFromClassPath() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"log4j2-config.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n     @Test\n     public void testByName() throws Exception {\n-        final LoggerContext ctx = Configurator.initialize(\"-config\", (String) null);\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        final LoggerContext ctx = Configurator.initialize(\"-config\", null);\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n     @Test\n     public void testReconfiguration() throws Exception {\n         final File file = new File(\"target/test-classes/log4j2-config.xml\");\n-        file.setLastModified(System.currentTimeMillis() - 120000);\n+        assertTrue(\"setLastModified should have succeeded.\", file.setLastModified(System.currentTimeMillis() - 120000));\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"target/test-classes/log4j2-config.xml\");\n         final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         assertTrue(\"Wrong configuration\", map.containsKey(\"List\"));\n \n         Thread.sleep(500);\n-        file.setLastModified(System.currentTimeMillis());\n+        assertTrue(\"setLastModified should have succeeded.\", file.setLastModified(System.currentTimeMillis()));\n         for (int i = 0; i < 17; ++i) {\n             logger.debug(\"Test message \" + i);\n         }\n         final Configuration newConfig = ctx.getConfiguration();\n         assertTrue(\"Configuration not reset\", newConfig != config);\n         Configurator.shutdown(ctx);\n         config = ctx.getConfiguration();\n-        assertTrue(\"Incorrect Configuration. Expected \" + NullConfiguration.NULL_NAME + \" but found \" +\n-            config.getName(), NullConfiguration.NULL_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", NullConfiguration.NULL_NAME, config.getName());\n     }\n \n \n     @Test\n     public void testEnvironment() throws Exception {\n-        final LoggerContext ctx = Configurator.initialize(\"-config\", (String) null);\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        final LoggerContext ctx = Configurator.initialize(\"-config\", null);\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Incorrect Configuration. Expected \" + CONFIG_NAME + \" but found \" + config.getName(),\n-            CONFIG_NAME.equals(config.getName()));\n+        assertEquals(\"Incorrect Configuration.\", CONFIG_NAME, config.getName());\n         final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"No Appenders\", map != null && map.size() > 0);\n+        assertNotNull(\"Appenders map should not be null.\", map);\n+        assertTrue(\"Appenders map should not be empty.\", map.size() > 0);\n         Appender app = null;\n         for (final Map.Entry<String, Appender> entry: map.entrySet()) {\n             if (entry.getKey().equals(\"List2\")) {\n@@ -213,19 +203,19 @@ public void testEnvironment() throws Exception {\n     @Test\n     public void testNoLoggers() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-loggers.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", DefaultConfiguration.DEFAULT_NAME.equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration.\", DefaultConfiguration.DEFAULT_NAME, config.getName());\n     }\n \n     @Test\n     public void testBadStatus() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-status.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", \"XMLConfigTest\".equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration\", \"XMLConfigTest\", config.getName());\n         final LoggerConfig root = config.getLoggerConfig(\"\");\n         assertNotNull(\"No Root Logger\", root);\n         assertTrue(\"Expected error level, was \" + root.getLevel(), Level.ERROR == root.getLevel());\n@@ -234,10 +224,10 @@ public void testBadStatus() throws Exception {\n     @Test\n     public void testBadFilterParam() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-badfilterparam.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", \"XMLConfigTest\".equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration\", \"XMLConfigTest\", config.getName());\n         final LoggerConfig lcfg = config.getLoggerConfig(\"org.apache.logging.log4j.test1\");\n         assertNotNull(\"No Logger\", lcfg);\n         final Filter filter = lcfg.getFilter();\n@@ -247,10 +237,10 @@ public void testBadFilterParam() throws Exception {\n     @Test\n     public void testNoFilters() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-nofilter.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", \"XMLConfigTest\".equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration\", \"XMLConfigTest\", config.getName());\n         final LoggerConfig lcfg = config.getLoggerConfig(\"org.apache.logging.log4j.test1\");\n         assertNotNull(\"No Logger\", lcfg);\n         final Filter filter = lcfg.getFilter();\n@@ -262,10 +252,10 @@ public void testNoFilters() throws Exception {\n     @Test\n     public void testBadLayout() throws Exception {\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-badlayout.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", \"XMLConfigTest\".equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration\", \"XMLConfigTest\", config.getName());\n     }\n \n     @Test\n@@ -279,10 +269,10 @@ public void testBadFileName() throws Exception {\n         final String value = FILESEP.equals(\"/\") ? dir.toString() + \"/test.log\" : \"1:/target/bad:file.log\";\n         System.setProperty(\"testfile\", value);\n         final LoggerContext ctx = Configurator.initialize(\"Test1\", \"bad/log4j-badfilename.xml\");\n-        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n+        LogManager.getLogger(\"org.apache.test.TestConfigurator\");\n         final Configuration config = ctx.getConfiguration();\n         assertNotNull(\"No configuration\", config);\n-        assertTrue(\"Unexpected configuration\", \"XMLConfigTest\".equals(config.getName()));\n+        assertEquals(\"Unexpected Configuration\", \"XMLConfigTest\", config.getName());\n         assertTrue(\"Create bad appender\", config.getAppenders().size() == 2);\n     }\n ",
                "deletions": 75
            }
        ],
        "patched_files": [
            "Configurator.java"
        ],
        "unit_tests": [
            "TestConfigurator.java"
        ]
    },
    "logging-log4j2_0c51e13": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-152 - RollingFileAppender's FileRenameAction was throwing a NullPointerException if no directory was specified on the target file name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1435044 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/0c51e1327ce808d52bff26363344329f914c6844",
        "parent": "https://github.com/apache/logging-log4j2/commit/e5ec31c070467da7f2598aafbca088864e122cd6",
        "bug_id": "logging-log4j2_0c51e13",
        "file": [
            {
                "sha": "6d594fd3bff1bca6d40cf991cef376da2e175a87",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c51e1327ce808d52bff26363344329f914c6844/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c51e1327ce808d52bff26363344329f914c6844/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java?ref=0c51e1327ce808d52bff26363344329f914c6844",
                "patch": "@@ -76,7 +76,7 @@ public boolean execute() {\n     public static boolean execute(final File source, final File destination, final boolean renameEmptyFiles) {\n         if (renameEmptyFiles || source.length() > 0) {\n             final File parent = destination.getParentFile();\n-            if (!parent.exists()) {\n+            if (parent != null && !parent.exists()) {\n                 if (!parent.mkdirs()) {\n                     LOGGER.error(\"Unable to create directory {}\", parent.getAbsolutePath());\n                     return false;\n@@ -102,6 +102,12 @@ public static boolean execute(final File source, final File destination, final b\n                         destination.getAbsolutePath(), iex.getMessage());\n                 }\n             }\n+        } else {\n+            try {\n+                source.delete();\n+            } catch (Exception ex) {\n+                LOGGER.error(\"Unable to delete empty file \" + source.getAbsolutePath());\n+            }\n         }\n \n         return false;",
                "deletions": 1
            },
            {
                "sha": "43b2fa76bc4a7414dd80628262c0f0886ce8feb4",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c51e1327ce808d52bff26363344329f914c6844/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c51e1327ce808d52bff26363344329f914c6844/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java",
                "status": "added",
                "changes": 128,
                "additions": 128,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java?ref=0c51e1327ce808d52bff26363344329f914c6844",
                "patch": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.appender.rolling.helper;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class FileRenameActionTest {\n+\n+    private static final String DIR = \"target/fileRename\";\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        File file = new File(DIR);\n+        file.mkdirs();\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        deleteDir();\n+    }\n+\n+    @After\n+    public void after() {\n+        deleteFiles();\n+    }\n+\n+    @Test\n+    public void testRename1() throws Exception {\n+        File file = new File(\"target/fileRename/fileRename.log\");\n+        PrintStream pos = new PrintStream(file);\n+        for (int i = 0; i < 100; ++i) {\n+            pos.println(\"This is line \" + i);\n+        }\n+        pos.close();\n+\n+        File dest = new File(\"target/fileRename/newFile.log\");\n+        FileRenameAction action = new FileRenameAction(file, dest, false);\n+        action.execute();\n+        assertTrue(\"Renamed file does not exist\", dest.exists());\n+        assertTrue(\"Old file exists\", !file.exists());\n+    }\n+\n+    @Test\n+    public void testEmpty() throws Exception {\n+        File file = new File(\"target/fileRename/fileRename.log\");\n+        PrintStream pos = new PrintStream(file);\n+        pos.close();\n+\n+        File dest = new File(\"target/fileRename/newFile.log\");\n+        FileRenameAction action = new FileRenameAction(file, dest, false);\n+        action.execute();\n+        assertTrue(\"Renamed file does not exist\", !dest.exists());\n+        assertTrue(\"Old file does not exist\", !file.exists());\n+    }\n+\n+\n+    @Test\n+    public void testNoParent() throws Exception {\n+        File file = new File(\"fileRename.log\");\n+        PrintStream pos = new PrintStream(file);\n+        for (int i = 0; i < 100; ++i) {\n+            pos.println(\"This is line \" + i);\n+        }\n+        pos.close();\n+\n+        File dest = new File(\"newFile.log\");\n+        try {\n+            FileRenameAction action = new FileRenameAction(file, dest, false);\n+            action.execute();\n+            assertTrue(\"Renamed file does not exist\", dest.exists());\n+            assertTrue(\"Old file exists\", !file.exists());\n+        } finally {\n+            try {\n+                dest.delete();\n+                file.delete();\n+            } catch (Exception ex) {\n+                System.out.println(\"Unable to cleanup files written to main directory\");\n+            }\n+        }\n+    }\n+\n+\n+    private static void deleteDir() {\n+        final File dir = new File(DIR);\n+        if (dir.exists()) {\n+            final File[] files = dir.listFiles();\n+            for (final File file : files) {\n+                file.delete();\n+            }\n+            dir.delete();\n+        }\n+    }\n+\n+    private static void deleteFiles() {\n+        final File dir = new File(DIR);\n+        if (dir.exists()) {\n+            final File[] files = dir.listFiles();\n+            for (final File file : files) {\n+                file.delete();\n+            }\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "303d09f318a9f64c71a123e8562f35eea54205b6",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/0c51e1327ce808d52bff26363344329f914c6844/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/0c51e1327ce808d52bff26363344329f914c6844/src/changes/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=0c51e1327ce808d52bff26363344329f914c6844",
                "patch": "@@ -23,6 +23,10 @@\n \n   <body>\n     <release version=\"2.0-beta4\" date=\"TBD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-152\" dev=\"rgoers\" type=\"fix\" due-to=\"Remko Popma\">\n+        RollingFileAppender's FileRenameAction was throwing a NullPointerException if no directory was specified\n+        on the target file name.\n+      </action>\n       <action issue=\"LOG4J2-150\" dev=\"rgoers\" type=\"fix\">\n         Convert all System.getProperty calls to use PropertiesUtil to suppress SecurityExceptions.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FileRenameAction.java"
        ],
        "unit_tests": [
            "FileRenameActionTest.java"
        ]
    },
    "logging-log4j2_147f78c": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1527 Prevent NPE in RingBufferLogEvent.getFormattedMessage() when used in web applications.\n\nThis closes #39 (https://github.com/apache/logging-log4j2/pull/39 )",
        "commit": "https://github.com/apache/logging-log4j2/commit/147f78c45e181d78778a710d24510c9b03d97bc7",
        "parent": "https://github.com/apache/logging-log4j2/commit/6a23301660830fcd4728b1b952b607a9e1e26f65",
        "bug_id": "logging-log4j2_147f78c",
        "file": [
            {
                "sha": "76b00a1db8ceb2d49a6848759b1f4cfb51a927aa",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "patch": "@@ -210,7 +210,9 @@ public Message getMessage() {\n      */\n     @Override\n     public String getFormattedMessage() {\n-        return messageText.toString();\n+        return messageText != null // LOG4J2-1527: may be null in web apps\n+                ? messageText.toString() // note: please keep below \"redundant\" braces for readability\n+                : (message == null ? null : message.getFormattedMessage());\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "5c7f467e360ce12ef9708538127a72224fa346a9",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "patch": "@@ -121,11 +121,11 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         final long nanoTime = 1;\n         evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n                 contextStack, -1, threadName, -1, location, currentTimeMillis, nanoTime);\n-        \n+\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         final ObjectOutputStream out = new ObjectOutputStream(baos);\n         out.writeObject(evt);\n-        \n+\n         final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));\n         final RingBufferLogEvent other = (RingBufferLogEvent) in.readObject();\n         assertEquals(loggerName, other.getLoggerName());\n@@ -141,7 +141,7 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         assertEquals(location, other.getSource());\n         assertEquals(currentTimeMillis, other.getTimeMillis());\n     }\n-    \n+\n     @Test\n     public void testCreateMementoReturnsCopy() {\n         final RingBufferLogEvent evt = new RingBufferLogEvent();\n@@ -160,7 +160,7 @@ public void testCreateMementoReturnsCopy() {\n         final long nanoTime = 1;\n         evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n                 contextStack, -1, threadName, -1, location, currentTimeMillis, nanoTime);\n-        \n+\n         final LogEvent actual = evt.createMemento();\n         assertEquals(evt.getLoggerName(), actual.getLoggerName());\n         assertEquals(evt.getMarker(), actual.getMarker());\n@@ -175,4 +175,14 @@ public void testCreateMementoReturnsCopy() {\n         assertEquals(evt.getSource(), actual.getSource());\n         assertEquals(evt.getThrownProxy(), actual.getThrownProxy());\n     }\n+\n+    @Test\n+    public void testMessageTextNeverThrowsNpe() {\n+        final RingBufferLogEvent evt = new RingBufferLogEvent();\n+        try {\n+            evt.getFormattedMessage();\n+        } catch (NullPointerException e) {\n+            fail(\"the messageText field was not set\");\n+        }\n+    }\n }",
                "deletions": 4
            },
            {
                "sha": "1ea373c3bd88d328eb135e906b2b77c1f00ed2ac",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/147f78c45e181d78778a710d24510c9b03d97bc7/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/147f78c45e181d78778a710d24510c9b03d97bc7/src/changes/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=147f78c45e181d78778a710d24510c9b03d97bc7",
                "patch": "@@ -24,6 +24,10 @@\n   </properties>\n   <body>\n     <release version=\"2.7\" date=\"2016-MM-DD\" description=\"GA Release 2.7\">\n+\n+      <action issue=\"LOG4J2-1527\" dev=\"rpopma\" type=\"fix\" due-to=\"Jose Leon\">\n+        Prevent NPE in RingBufferLogEvent.getFormattedMessage() when used in web applications.\n+      </action>\n       <action issue=\"LOG4J2-905\" dev=\"ggregory\" type=\"fix\" due-to=\"Gary Gregory, Moritz L\u00f6ser\">\n         Ability to disable (date) lookup completely, compatibility issues with other libraries like Camel.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RingBufferLogEvent.java"
        ],
        "unit_tests": [
            "RingBufferLogEventTest.java"
        ]
    },
    "logging-log4j2_2d266d9": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1740] Add CronTriggeringPolicy programmatically leads to NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/2d266d98b8cb01885691b6c6b8f4018936644973",
        "parent": "https://github.com/apache/logging-log4j2/commit/7441d3c3cc57130a56535dbbd15a5d819f0a3834",
        "bug_id": "logging-log4j2_2d266d9",
        "file": [
            {
                "sha": "e5a19a1b9738f05909014ff43421724dc6f845d1",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "patch": "@@ -76,6 +76,10 @@ public void initialize(final RollingFileManager aManager) {\n         if (!scheduler.isStarted()) {\n             scheduler.incrementScheduledItems();\n             scheduler.start();\n+        } else if (scheduler.isStarted()) {\n+            // make sure we have a thread pool\n+            scheduler.incrementScheduledItems();\n+            scheduler.initScheduledExecutorService();\n         }\n         future = scheduler.scheduleWithCron(cronExpression, new CronTrigger());\n     }",
                "deletions": 0
            },
            {
                "sha": "f847acec19d9f70653f39a8d614eee665c421ff2",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "patch": "@@ -41,6 +41,10 @@\n     @Override\n     public void start() {\n         super.start();\n+        initScheduledExecutorService();\n+    }\n+\n+    public void initScheduledExecutorService() {\n         if (scheduledItems > 0) {\n             LOGGER.debug(\"{} starting {} threads\", SIMPLE_NAME, scheduledItems);\n             scheduledItems = Math.min(scheduledItems, MAX_SCHEDULED_ITEMS);\n@@ -66,7 +70,7 @@ public boolean stop(final long timeout, final TimeUnit timeUnit) {\n      * Increment the number of threads in the pool.\n      */\n     public void incrementScheduledItems() {\n-        if (!isStarted()) {\n+        if (executorService == null) {\n             ++scheduledItems;\n         } else {\n             LOGGER.error(\"{} attempted to increment scheduled items after start\", SIMPLE_NAME);",
                "deletions": 1
            },
            {
                "sha": "ba20a02f6ba83d889242c871b4784a59db2172cf",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java",
                "status": "modified",
                "changes": 248,
                "additions": 140,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicyTest.java?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "patch": "@@ -1,108 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements. See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache license, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License. You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the license for the specific language governing permissions and\r\n- * limitations under the license.\r\n- */\r\n-\r\n-package org.apache.logging.log4j.core.appender.rolling;\r\n-\r\n-import org.apache.logging.log4j.core.appender.RollingFileAppender;\r\n-import org.apache.logging.log4j.core.config.NullConfiguration;\r\n-import org.apache.logging.log4j.core.layout.PatternLayout;\r\n-import org.junit.Assert;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-public class CronTriggeringPolicyTest {\r\n-\r\n-    private static final String FILE_PATTERN = \"testcmd.log.%d{yyyy-MM-dd}\";\r\n-    private static final String FILE_NAME = \"testcmd.log\";\r\n-    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\r\n-    \r\n-    private NullConfiguration configuration;\r\n-\r\n-    @Before\r\n-    public void before() {\r\n-        configuration = new NullConfiguration();\r\n-    }\r\n-\r\n-    private CronTriggeringPolicy createPolicy() {\r\n-        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\r\n-    }\r\n-\r\n-    private DefaultRolloverStrategy createStrategy() {\r\n-        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\r\n-    }\r\n-\r\n-    private void testBuilder() {\r\n-        // @formatter:off\r\n-        final RollingFileAppender raf = RollingFileAppender.newBuilder()\r\n-            .withName(\"test\")\r\n-            .withFileName(FILE_NAME)\r\n-            .withFilePattern(FILE_PATTERN)\r\n-            .withPolicy(createPolicy())\r\n-            .withStrategy(createStrategy())\r\n-            .setConfiguration(configuration)\r\n-            .build();\r\n-        // @formatter:on\r\n-        Assert.assertNotNull(raf);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderOnce() {\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testBuilderSequence() {\r\n-        testBuilder();\r\n-        testBuilder();\r\n-    }\r\n-\r\n-    private void testFactoryMethod() {\r\n-        final CronTriggeringPolicy triggerPolicy = createPolicy();\r\n-        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\r\n-\r\n-        try (RollingFileManager fileManager = RollingFileManager.getFileManager(FILE_NAME,\r\n-                FILE_PATTERN, true, true, triggerPolicy, rolloverStrategy, null,\r\n-                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\r\n-            // trigger rollover\r\n-            fileManager.initialize();\r\n-            fileManager.rollover();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\r\n-     * true.\r\n-     */\r\n-    @Test\r\n-    public void testFactoryMethodOnce() {\r\n-        testFactoryMethod();\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testFactoryMethodSequence() {\r\n-        testFactoryMethod();\r\n-        testFactoryMethod();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.appender.rolling;\n+\n+import org.apache.logging.log4j.core.appender.RollingFileAppender;\n+import org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.logging.log4j.core.config.NullConfiguration;\n+import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.apache.logging.log4j.junit.CleanFiles;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class CronTriggeringPolicyTest {\n+\n+    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\n+    \n+    private NullConfiguration configuration;\n+\n+//    @Rule\n+//    public CleanFiles files = new CleanFiles(\"testcmd1.log\");\n+\n+    @Before\n+    public void before() {\n+        configuration = new NullConfiguration();\n+    }\n+\n+    private CronTriggeringPolicy createPolicy() {\n+        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\n+    }\n+\n+    private DefaultRolloverStrategy createStrategy() {\n+        return DefaultRolloverStrategy.createStrategy(\"7\", \"1\", \"max\", null, null, false, configuration);\n+    }\n+\n+    private void testBuilder() {\n+        // @formatter:off\n+        final RollingFileAppender raf = RollingFileAppender.newBuilder()\n+            .withName(\"test1\")\n+            .withFileName(\"testcmd1.log\")\n+            .withFilePattern(\"testcmd1.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+        Assert.assertNotNull(raf);\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderOnce() {\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testLoggerContextAndBuilder() {\n+        Configurator.initialize(configuration);\n+        testBuilder();\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1740 Add CronTriggeringPolicy programmatically leads to NPE\n+     */\n+    @Test\n+    public void testRollingRandomAccessFileAppender() {\n+        // @formatter:off\n+        RollingRandomAccessFileAppender.newBuilder()\n+            .withName(\"test2\")\n+            .withFileName(\"testcmd2.log\")\n+            .withFilePattern(\"testcmd2.log.%d{yyyy-MM-dd}\")\n+            .withPolicy(createPolicy())\n+            .withStrategy(createStrategy())\n+            .setConfiguration(configuration)\n+            .build();\n+        // @formatter:on\n+    }\n+\n+    \n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testBuilderSequence() {\n+        testBuilder();\n+        testBuilder();\n+    }\n+\n+    private void testFactoryMethod() {\n+        final CronTriggeringPolicy triggerPolicy = createPolicy();\n+        final DefaultRolloverStrategy rolloverStrategy = createStrategy();\n+\n+        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd3.log\",\n+                \"testcmd3.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\n+                PatternLayout.createDefaultLayout(), 0, true, false, configuration)) {\n+            // trigger rollover\n+            fileManager.initialize();\n+            fileManager.rollover();\n+        }\n+    }\n+\n+    /**\n+     * Tests LOG4J2-1474 CronTriggeringPolicy raise exception and fail to rollover log file when evaluateOnStartup is\n+     * true.\n+     */\n+    @Test\n+    public void testFactoryMethodOnce() {\n+        testFactoryMethod();\n+    }\n+\n+    @Test\n+    public void testFactoryMethodSequence() {\n+        testFactoryMethod();\n+        testFactoryMethod();\n+    }\n+}",
                "deletions": 108
            },
            {
                "sha": "d3e42a62f234f4cd22c53bf12156025d8be5359a",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2d266d98b8cb01885691b6c6b8f4018936644973/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2d266d98b8cb01885691b6c6b8f4018936644973",
                "patch": "@@ -162,6 +162,9 @@\n       <action issue=\"LOG4J2-1736\" dev=\"ggregory\" type=\"fix\">\n         TcpSocketManagerFactory might leak Sockets when certain startup errors occur.\n       </action>\n+      <action issue=\"LOG4J2-1740\" dev=\"ggregory\" type=\"fix\">\n+        Add CronTriggeringPolicy programmatically leads to NPE.\n+      </action>     \n       <action issue=\"LOG4J2-1644\" dev=\"ggregory\" type=\"update\" due-to=\"Tim Gokcen, Pavel Sivolobtchik\">\n         Inefficient locking in AbstractLoggerAdapter.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ConfigurationScheduler.java",
            "CronTriggeringPolicy.java"
        ],
        "unit_tests": [
            "CronTriggeringPolicyTest.java"
        ]
    },
    "logging-log4j2_c9286d7": {
        "repo": "logging-log4j2",
        "message": "fix potential NPE",
        "commit": "https://github.com/apache/logging-log4j2/commit/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
        "parent": "https://github.com/apache/logging-log4j2/commit/fbcf07a5b625ea63997ed96819019f45487cfc5a",
        "bug_id": "logging-log4j2_c9286d7",
        "file": [
            {
                "sha": "ab6a5bc46ee701fffaeb4b7f83c83233b3553dfa",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/c9286d7118e4bd371fc5ee513fc869bd8fcf1f51/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java?ref=c9286d7118e4bd371fc5ee513fc869bd8fcf1f51",
                "patch": "@@ -206,7 +206,8 @@ public void formatTo(final StringBuilder buffer) {\n         if (formattedMessage != null) {\n             buffer.append(formattedMessage);\n         } else {\n-            ParameterFormatter.formatMessage(buffer, messagePattern, argArray, argArray.length);\n+            ParameterFormatter.formatMessage(buffer, messagePattern, argArray,\n+                    argArray == null ? 0 : argArray.length);\n         }\n     }\n ",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ParameterizedMessage.java"
        ],
        "unit_tests": [
            "ParameterizedMessageTest.java"
        ]
    },
    "logging-log4j2_79d9d92": {
        "repo": "logging-log4j2",
        "message": "prevent NPE in ShutdownHook thread if disruptor was already shut down; added credit to Steven Yang for pointing out the original issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1478040 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
        "parent": "https://github.com/apache/logging-log4j2/commit/461f0ed7f90d446803c5e0f7f45753a369a4b0dd",
        "bug_id": "logging-log4j2_79d9d92",
        "file": [
            {
                "sha": "a62d9fdc428d2b12e4cc927d2982c2ab0e066370",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "patch": "@@ -24,8 +24,6 @@\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.LoggerContext.Status;\n import org.apache.logging.log4j.core.config.AppenderRef;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.LoggerConfig;",
                "deletions": 2
            },
            {
                "sha": "5aacdca8094ea1f099ea0d414e45574b6c2450e6",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "patch": "@@ -220,6 +220,9 @@ public synchronized void shutdown() {\n             return;\n         }\n         Disruptor<Log4jEventWrapper> temp = disruptor;\n+        if (temp == null) {\n+            return; // disruptor was already shut down by another thread\n+        }\n \n         // Must guarantee that publishing to the RingBuffer has stopped\n         // before we call disruptor.shutdown()",
                "deletions": 0
            },
            {
                "sha": "2d9becee64254511753dbc3cdd91571fc7b66a31",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/79d9d924b8e1960c0f4a7c2272dddf309bd13c5d/src/changes/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=79d9d924b8e1960c0f4a7c2272dddf309bd13c5d",
                "patch": "@@ -23,7 +23,7 @@\n \n   <body>\n     <release version=\"2.0-beta6\" date=\"@TBD@\" description=\"Bug fixes and enhancements\">\n-      <action issue=\"LOG4J2-222\" dev=\"rgoers\" type=\"fix\">\n+      <action issue=\"LOG4J2-222\" dev=\"rgoers\" type=\"fix\" due-to=\"Steven Yang\">\n         Disruptor will now shutdown during Tomcat shutdown.\n       </action>\n       <action dev=\"rpopma\" type=\"update\">",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AsyncLoggerConfig.java"
        ],
        "unit_tests": [
            "AsyncLoggerConfigTest.java"
        ]
    },
    "logging-log4j2_384ed1e": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-669: Prevent NPE when combining AsyncLoggers with AsyncLoggerConfigs\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1602578 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/384ed1e8eea7b0f043e977b8b991527ad721ae2f",
        "parent": "https://github.com/apache/logging-log4j2/commit/83e5248d5295d4ed73eab6f7b292bd5bdaaa5145",
        "bug_id": "logging-log4j2_384ed1e",
        "file": [
            {
                "sha": "045c407afb7818abc12a22dede8fd637406ef20f",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -332,10 +332,14 @@ public boolean callAppendersFromAnotherThread(final LogEvent event) {\n         }\n         // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n         try {\n+            LogEvent logEvent = event;\n+            if (event instanceof RingBufferLogEvent) {\n+                logEvent = ((RingBufferLogEvent) event).createMemento();\n+            }\n             // Note: do NOT use the temp variable above!\n             // That could result in adding a log event to the disruptor after it was shut down,\n             // which could cause the publishEvent method to hang and never return.\n-            disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+            disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);\n         } catch (NullPointerException npe) {\n             LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n         }",
                "deletions": 1
            },
            {
                "sha": "af2411cb6c9028065663c9acfa3324f1bd41200a",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "status": "modified",
                "changes": 445,
                "additions": 223,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.logging.log4j.ThreadContext.ContextStack;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Property;\n+import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.impl.ThrowableProxy;\n import org.apache.logging.log4j.core.lookup.StrSubstitutor;\n import org.apache.logging.log4j.message.Message;\n@@ -35,135 +36,128 @@\n import com.lmax.disruptor.EventFactory;\n \n /**\n- * When the Disruptor is started, the RingBuffer is populated with event\n- * objects. These objects are then re-used during the life of the RingBuffer.\n+ * When the Disruptor is started, the RingBuffer is populated with event objects. These objects are then re-used during\n+ * the life of the RingBuffer.\n  */\n public class RingBufferLogEvent implements LogEvent {\n-\tprivate static final long serialVersionUID = 8462119088943934758L;\n-\n-\t/**\n-\t * Creates the events that will be put in the RingBuffer.\n-\t */\n-\tprivate static class Factory implements EventFactory<RingBufferLogEvent> {\n-\n-\t\t@Override\n-\t\tpublic RingBufferLogEvent newInstance() {\n-\t\t\treturn new RingBufferLogEvent();\n-\t\t}\n-\t}\n-\n-\t/** The {@code EventFactory} for {@code RingBufferLogEvent}s. */\n-\tpublic static final Factory FACTORY = new Factory();\n-\n-\tprivate AsyncLogger asyncLogger;\n-\tprivate String loggerName;\n-\tprivate Marker marker;\n-\tprivate String fqcn;\n-\tprivate Level level;\n-\tprivate Message message;\n-\tprivate transient Throwable thrown;\n+    private static final long serialVersionUID = 8462119088943934758L;\n+\n+    /**\n+     * Creates the events that will be put in the RingBuffer.\n+     */\n+    private static class Factory implements EventFactory<RingBufferLogEvent> {\n+\n+        @Override\n+        public RingBufferLogEvent newInstance() {\n+            return new RingBufferLogEvent();\n+        }\n+    }\n+\n+    /** The {@code EventFactory} for {@code RingBufferLogEvent}s. */\n+    public static final Factory FACTORY = new Factory();\n+\n+    private AsyncLogger asyncLogger;\n+    private String loggerName;\n+    private Marker marker;\n+    private String fqcn;\n+    private Level level;\n+    private Message message;\n+    private transient Throwable thrown;\n     private ThrowableProxy thrownProxy;\n-\tprivate Map<String, String> contextMap;\n-\tprivate ContextStack contextStack;\n-\tprivate String threadName;\n-\tprivate StackTraceElement location;\n-\tprivate long currentTimeMillis;\n-\tprivate boolean endOfBatch;\n-\tprivate boolean includeLocation;\n-\n-\tpublic void setValues(final AsyncLogger asyncLogger,\n-\t\t\tfinal String loggerName, final Marker marker, final String fqcn,\n-\t\t\tfinal Level level, final Message data, final Throwable throwable,\n-\t\t\tfinal Map<String, String> map, final ContextStack contextStack,\n-\t\t\tfinal String threadName, final StackTraceElement location,\n-\t\t\tfinal long currentTimeMillis) {\n-\t\tthis.asyncLogger = asyncLogger;\n-\t\tthis.loggerName = loggerName;\n-\t\tthis.marker = marker;\n-\t\tthis.fqcn = fqcn;\n-\t\tthis.level = level;\n-\t\tthis.message = data;\n-\t\tthis.thrown = throwable;\n-\t\tthis.thrownProxy = null;\n-\t\tthis.contextMap = map;\n-\t\tthis.contextStack = contextStack;\n-\t\tthis.threadName = threadName;\n-\t\tthis.location = location;\n-\t\tthis.currentTimeMillis = currentTimeMillis;\n-\t}\n-\n-\t/**\n-\t * Event processor that reads the event from the ringbuffer can call this\n-\t * method.\n-\t * \n-\t * @param endOfBatch\n-\t *            flag to indicate if this is the last event in a batch from the\n-\t *            RingBuffer\n-\t */\n-\tpublic void execute(final boolean endOfBatch) {\n-\t\tthis.endOfBatch = endOfBatch;\n-\t\tasyncLogger.actualAsyncLog(this);\n-\t}\n-\n-\t/**\n-\t * Returns {@code true} if this event is the end of a batch, {@code false}\n-\t * otherwise.\n-\t * \n-\t * @return {@code true} if this event is the end of a batch, {@code false}\n-\t *         otherwise\n-\t */\n-\t@Override\n-\tpublic boolean isEndOfBatch() {\n-\t\treturn endOfBatch;\n-\t}\n-\n-\t@Override\n-\tpublic void setEndOfBatch(final boolean endOfBatch) {\n-\t\tthis.endOfBatch = endOfBatch;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isIncludeLocation() {\n-\t\treturn includeLocation;\n-\t}\n-\n-\t@Override\n-\tpublic void setIncludeLocation(final boolean includeLocation) {\n-\t\tthis.includeLocation = includeLocation;\n-\t}\n-\n-\t@Override\n-\tpublic String getLoggerName() {\n-\t\treturn loggerName;\n-\t}\n-\n-\t@Override\n-\tpublic Marker getMarker() {\n-\t\treturn marker;\n-\t}\n-\n-\t@Override\n-\tpublic String getLoggerFqcn() {\n-\t\treturn fqcn;\n-\t}\n-\n-\t@Override\n-\tpublic Level getLevel() {\n-\t\tif (level == null) {\n-\t\t\tlevel = Level.OFF; // LOG4J2-462, LOG4J2-465\n-\t\t}\n-\t\treturn level;\n-\t}\n-\n-\t@Override\n-\tpublic Message getMessage() {\n-\t\tif (message == null) {\n-\t\t\tmessage = new SimpleMessage(Strings.EMPTY);\n-\t\t}\n-\t\treturn message;\n-\t}\n-\n-\t@Override\n+    private Map<String, String> contextMap;\n+    private ContextStack contextStack;\n+    private String threadName;\n+    private StackTraceElement location;\n+    private long currentTimeMillis;\n+    private boolean endOfBatch;\n+    private boolean includeLocation;\n+\n+    public void setValues(final AsyncLogger asyncLogger, final String loggerName, final Marker marker,\n+            final String fqcn, final Level level, final Message data, final Throwable throwable,\n+            final Map<String, String> map, final ContextStack contextStack, final String threadName,\n+            final StackTraceElement location, final long currentTimeMillis) {\n+        this.asyncLogger = asyncLogger;\n+        this.loggerName = loggerName;\n+        this.marker = marker;\n+        this.fqcn = fqcn;\n+        this.level = level;\n+        this.message = data;\n+        this.thrown = throwable;\n+        this.thrownProxy = null;\n+        this.contextMap = map;\n+        this.contextStack = contextStack;\n+        this.threadName = threadName;\n+        this.location = location;\n+        this.currentTimeMillis = currentTimeMillis;\n+    }\n+\n+    /**\n+     * Event processor that reads the event from the ringbuffer can call this method.\n+     * \n+     * @param endOfBatch flag to indicate if this is the last event in a batch from the RingBuffer\n+     */\n+    public void execute(final boolean endOfBatch) {\n+        this.endOfBatch = endOfBatch;\n+        asyncLogger.actualAsyncLog(this);\n+    }\n+\n+    /**\n+     * Returns {@code true} if this event is the end of a batch, {@code false} otherwise.\n+     * \n+     * @return {@code true} if this event is the end of a batch, {@code false} otherwise\n+     */\n+    @Override\n+    public boolean isEndOfBatch() {\n+        return endOfBatch;\n+    }\n+\n+    @Override\n+    public void setEndOfBatch(final boolean endOfBatch) {\n+        this.endOfBatch = endOfBatch;\n+    }\n+\n+    @Override\n+    public boolean isIncludeLocation() {\n+        return includeLocation;\n+    }\n+\n+    @Override\n+    public void setIncludeLocation(final boolean includeLocation) {\n+        this.includeLocation = includeLocation;\n+    }\n+\n+    @Override\n+    public String getLoggerName() {\n+        return loggerName;\n+    }\n+\n+    @Override\n+    public Marker getMarker() {\n+        return marker;\n+    }\n+\n+    @Override\n+    public String getLoggerFqcn() {\n+        return fqcn;\n+    }\n+\n+    @Override\n+    public Level getLevel() {\n+        if (level == null) {\n+            level = Level.OFF; // LOG4J2-462, LOG4J2-465\n+        }\n+        return level;\n+    }\n+\n+    @Override\n+    public Message getMessage() {\n+        if (message == null) {\n+            message = new SimpleMessage(Strings.EMPTY);\n+        }\n+        return message;\n+    }\n+\n+    @Override\n     public Throwable getThrown() {\n         // after deserialization, thrown is null but thrownProxy may be non-null\n         if (thrown == null) {\n@@ -174,100 +168,107 @@ public Throwable getThrown() {\n         return thrown;\n     }\n \n-\t@Override\n-\tpublic ThrowableProxy getThrownProxy() {\n-\t    // lazily instantiate the (expensive) ThrowableProxy\n-\t    if (thrownProxy == null) {\n-\t        if (thrown != null) {\n-\t            thrownProxy = new ThrowableProxy(thrown);\n-\t        }\n-\t    }\n-\t\treturn this.thrownProxy;\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, String> getContextMap() {\n-\t\treturn contextMap;\n-\t}\n-\n-\t@Override\n-\tpublic ContextStack getContextStack() {\n-\t\treturn contextStack;\n-\t}\n-\n-\t@Override\n-\tpublic String getThreadName() {\n-\t\treturn threadName;\n-\t}\n-\n-\t@Override\n-\tpublic StackTraceElement getSource() {\n-\t\treturn location;\n-\t}\n-\n-\t@Override\n-\tpublic long getTimeMillis() {\n-\t\tMessage msg = getMessage();\n-\t\tif (msg instanceof TimestampMessage) { // LOG4J2-455\n-\t\t\treturn ((TimestampMessage) msg).getTimestamp();\n-\t\t}\n-\t\treturn currentTimeMillis;\n-\t}\n-\n-\t/**\n-\t * Merges the contents of the specified map into the contextMap, after\n-\t * replacing any variables in the property values with the\n-\t * StrSubstitutor-supplied actual values.\n-\t * \n-\t * @param properties\n-\t *            configured properties\n-\t * @param strSubstitutor\n-\t *            used to lookup values of variables in properties\n-\t */\n-\tpublic void mergePropertiesIntoContextMap(\n-\t\t\tfinal Map<Property, Boolean> properties,\n-\t\t\tfinal StrSubstitutor strSubstitutor) {\n-\t\tif (properties == null) {\n-\t\t\treturn; // nothing to do\n-\t\t}\n-\n-\t\tfinal Map<String, String> map = contextMap == null ? new HashMap<String, String>()\n-\t\t\t\t: new HashMap<String, String>(contextMap);\n-\n-\t\tfor (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {\n-\t\t\tfinal Property prop = entry.getKey();\n-\t\t\tif (map.containsKey(prop.getName())) {\n-\t\t\t\tcontinue; // contextMap overrides config properties\n-\t\t\t}\n-\t\t\tfinal String value = entry.getValue().booleanValue() ? strSubstitutor.replace(prop\n-\t\t\t\t\t.getValue()) : prop.getValue();\n-\t\t\tmap.put(prop.getName(), value);\n-\t\t}\n-\t\tcontextMap = map;\n-\t}\n-\n-\t/**\n-\t * Release references held by ring buffer to allow objects to be\n-\t * garbage-collected.\n-\t */\n-\tpublic void clear() {\n-\t\tsetValues(null, // asyncLogger\n-\t\t\t\tnull, // loggerName\n-\t\t\t\tnull, // marker\n-\t\t\t\tnull, // fqcn\n-\t\t\t\tnull, // level\n-\t\t\t\tnull, // data\n-\t\t\t\tnull, // t\n-\t\t\t\tnull, // map\n-\t\t\t\tnull, // contextStack\n-\t\t\t\tnull, // threadName\n-\t\t\t\tnull, // location\n-\t\t\t\t0 // currentTimeMillis\n-\t\t);\n-\t}\n-\t\n-\tprivate void writeObject(java.io.ObjectOutputStream out) throws IOException {\n-\t    getThrownProxy(); // initialize the ThrowableProxy before serializing\n-\t    out.defaultWriteObject();\n-\t}\n+    @Override\n+    public ThrowableProxy getThrownProxy() {\n+        // lazily instantiate the (expensive) ThrowableProxy\n+        if (thrownProxy == null) {\n+            if (thrown != null) {\n+                thrownProxy = new ThrowableProxy(thrown);\n+            }\n+        }\n+        return this.thrownProxy;\n+    }\n+\n+    @Override\n+    public Map<String, String> getContextMap() {\n+        return contextMap;\n+    }\n+\n+    @Override\n+    public ContextStack getContextStack() {\n+        return contextStack;\n+    }\n+\n+    @Override\n+    public String getThreadName() {\n+        return threadName;\n+    }\n+\n+    @Override\n+    public StackTraceElement getSource() {\n+        return location;\n+    }\n+\n+    @Override\n+    public long getTimeMillis() {\n+        Message msg = getMessage();\n+        if (msg instanceof TimestampMessage) { // LOG4J2-455\n+            return ((TimestampMessage) msg).getTimestamp();\n+        }\n+        return currentTimeMillis;\n+    }\n+\n+    /**\n+     * Merges the contents of the specified map into the contextMap, after replacing any variables in the property\n+     * values with the StrSubstitutor-supplied actual values.\n+     * \n+     * @param properties configured properties\n+     * @param strSubstitutor used to lookup values of variables in properties\n+     */\n+    public void mergePropertiesIntoContextMap(final Map<Property, Boolean> properties,\n+            final StrSubstitutor strSubstitutor) {\n+        if (properties == null) {\n+            return; // nothing to do\n+        }\n+\n+        final Map<String, String> map = contextMap == null ? new HashMap<String, String>()\n+                : new HashMap<String, String>(contextMap);\n+\n+        for (final Map.Entry<Property, Boolean> entry : properties.entrySet()) {\n+            final Property prop = entry.getKey();\n+            if (map.containsKey(prop.getName())) {\n+                continue; // contextMap overrides config properties\n+            }\n+            final String value = entry.getValue().booleanValue() ? strSubstitutor.replace(prop.getValue()) : prop\n+                    .getValue();\n+            map.put(prop.getName(), value);\n+        }\n+        contextMap = map;\n+    }\n+\n+    /**\n+     * Release references held by ring buffer to allow objects to be garbage-collected.\n+     */\n+    public void clear() {\n+        setValues(null, // asyncLogger\n+                null, // loggerName\n+                null, // marker\n+                null, // fqcn\n+                null, // level\n+                null, // data\n+                null, // t\n+                null, // map\n+                null, // contextStack\n+                null, // threadName\n+                null, // location\n+                0 // currentTimeMillis\n+        );\n+    }\n+\n+    private void writeObject(java.io.ObjectOutputStream out) throws IOException {\n+        getThrownProxy(); // initialize the ThrowableProxy before serializing\n+        out.defaultWriteObject();\n+    }\n+\n+    /**\n+     * Creates and returns a new immutable copy of this {@code RingBufferLogEvent}.\n+     * \n+     * @return a new immutable copy of the data in this {@code RingBufferLogEvent}\n+     */\n+    public LogEvent createMemento() {\n+        // Ideally, would like to use the LogEventFactory here but signature does not match:\n+        // results in factory re-creating the timestamp, context map and context stack, which we don't want.\n+        return new Log4jLogEvent(loggerName, marker, fqcn, level, message, thrown, contextMap, contextStack,\n+                threadName, location, currentTimeMillis);\n+    }\n }",
                "deletions": 222
            },
            {
                "sha": "23f5e9779c568e44b0c58381c6a3eae07d3f36d0",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java",
                "status": "added",
                "changes": 74,
                "additions": 74,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggersWithAsyncLoggerConfigTest.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.util.Constants;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.apache.logging.log4j.test.appender.ListAppender;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class AsyncLoggersWithAsyncLoggerConfigTest {\n+    private static Configuration config;\n+    private static ListAppender listAppender;\n+    private static LoggerContext ctx;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY,\n+                \"AsyncLoggersWithAsyncLoggerConfigTest.xml\");\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, AsyncLoggerContextSelector.class.getName());\n+        ctx = (LoggerContext) LogManager.getContext(false);\n+        config = ctx.getConfiguration();\n+        listAppender = (ListAppender) config.getAppender(\"List\");\n+    }\n+\n+    @AfterClass\n+    public static void cleanupClass() {\n+        System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n+        System.clearProperty(Constants.LOG4J_CONTEXT_SELECTOR);\n+        ctx.reconfigure();\n+        StatusLogger.getLogger().reset();\n+    }\n+\n+    @Test\n+    public void testLoggingWorks() throws Exception {        \n+        final Logger logger = LogManager.getLogger();\n+        logger.error(\"This is a test\");\n+        logger.warn(\"Hello world!\");\n+        Thread.sleep(100);\n+        final List<String> list = listAppender.getMessages();\n+        assertNotNull(\"No events generated\", list);\n+        assertTrue(\"Incorrect number of events. Expected 2, got \" + list.size(), list.size() == 2);\n+        String msg = list.get(0);\n+        String expected = getClass().getName() + \" This is a test\";\n+        assertTrue(\"Expected \" + expected + \", Actual \" + msg, expected.equals(msg));\n+        msg = list.get(1);\n+        expected = getClass().getName() + \" Hello world!\";\n+        assertTrue(\"Expected \" + expected + \", Actual \" + msg, expected.equals(msg));\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3c3875b2fe5c9045ea9d51620c30d8ad23782af0",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "status": "modified",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -22,15 +22,20 @@\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n import org.apache.logging.log4j.ThreadContext.ContextStack;\n+import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.impl.ThrowableProxy;\n import org.apache.logging.log4j.message.Message;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.apache.logging.log4j.message.TimestampMessage;\n+import org.apache.logging.log4j.spi.MutableThreadContextStack;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -188,4 +193,37 @@ public void testSerializationDeserialization() throws IOException, ClassNotFound\n         assertEquals(location, other.getSource());\n         assertEquals(currentTimeMillis, other.getTimeMillis());\n     }\n+    \n+    @Test\n+    public void testCreateMementoReturnsCopy() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = \"logger.name\";\n+        Marker marker = MarkerManager.getMarker(\"marked man\");\n+        String fqcn = \"f.q.c.n\";\n+        Level level = Level.TRACE;\n+        Message data = new SimpleMessage(\"message\");\n+        Throwable t = new InternalError(\"not a real error\");\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"key\", \"value\");\n+        ContextStack contextStack = new MutableThreadContextStack(Arrays.asList(\"a\", \"b\"));\n+        String threadName = \"main\";\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 12345;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        \n+        LogEvent actual = evt.createMemento();\n+        assertEquals(evt.getLoggerName(), actual.getLoggerName());\n+        assertEquals(evt.getMarker(), actual.getMarker());\n+        assertEquals(evt.getLoggerFqcn(), actual.getLoggerFqcn());\n+        assertEquals(evt.getLevel(), actual.getLevel());\n+        assertEquals(evt.getMessage(), actual.getMessage());\n+        assertEquals(evt.getThrown(), actual.getThrown());\n+        assertEquals(evt.getContextMap(), actual.getContextMap());\n+        assertEquals(evt.getContextStack(), actual.getContextStack());\n+        assertEquals(evt.getThreadName(), actual.getThreadName());\n+        assertEquals(evt.getTimeMillis(), actual.getTimeMillis());\n+        assertEquals(evt.getSource(), actual.getSource());\n+        assertEquals(evt.getThrownProxy(), actual.getThrownProxy());\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "131a22afd81dd7c394ce18933b15d572bd864f49",
                "filename": "log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml",
                "status": "added",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggersWithAsyncLoggerConfigTest.xml?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"ERROR\">\n+  <Appenders>\n+    <List name=\"List\">\n+      <PatternLayout pattern=\"%c %m\"/>\n+    </List>\n+  </Appenders>\n+  \n+  <Loggers>\n+    <AsyncRoot level=\"trace\">\n+      <AppenderRef ref=\"List\"/>\n+    </AsyncRoot>\n+  </Loggers>\n+</Configuration>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "47922f7c8d59c58bc4ef65cef96d0122c9608f2f",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/384ed1e8eea7b0f043e977b8b991527ad721ae2f/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/384ed1e8eea7b0f043e977b8b991527ad721ae2f/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=384ed1e8eea7b0f043e977b8b991527ad721ae2f",
                "patch": "@@ -22,6 +22,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-rc2\" date=\"2014-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-669\" dev=\"rpopma\" type=\"fix\">\n+        Prevent NPE when combining AsyncLoggers with AsyncLoggerConfigs.\n+      </action>\n       <action issue=\"LOG4J2-42\" dev=\"rgoers\" type=\"add\">\n         Create an appender to route log events to the ServletContext log.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RingBufferLogEvent.java",
            "AsyncLoggerConfigHelper.java"
        ],
        "unit_tests": [
            "RingBufferLogEventTest.java",
            "AsyncLoggersWithAsyncLoggerConfigTest.java"
        ]
    },
    "logging-log4j2_742e510": {
        "repo": "logging-log4j2",
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620467 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/742e51052021e02add3f4e6c40b7258e7de67f16",
        "parent": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "bug_id": "logging-log4j2_742e510",
        "file": [
            {
                "sha": "142993ecb127523ec8a979231073e8867662ee06",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/742e51052021e02add3f4e6c40b7258e7de67f16/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=742e51052021e02add3f4e6c40b7258e7de67f16",
                "patch": "@@ -247,8 +247,8 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        Thread thread = shutdownThread.get();\n-        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+        Thread thread = this.getShutdownThread();\n+        if (shutdownRegistrationStrategy != null && thread != null) {\n             shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();",
                "deletions": 2
            }
        ],
        "patched_files": [
            "LoggerContext.java"
        ],
        "unit_tests": [
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_a4aab92": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-799] Log4j 2 throws ArrayIndexOutOfBoundsException. The private\nmethod ThrowableProxy.formatEntry(StackTraceElement,\nExtendedStackTraceElement, StringBuilder) is now\nformatEntry(ExtendedStackTraceElement, StringBuilder) because the\nStackTraceElement was not used. Also, it is possible that calling this\nmethod could cause an NPE while a call site tried to address a null\nStackTraceElement from\nThrowableProxy.getExtendedStackTrace(ThrowableProxy.java:232). This is\nwhat seems to happen in the stack strace for [LOG4J2-799] which matches\nup with 2.0-rc1.",
        "commit": "https://github.com/apache/logging-log4j2/commit/a4aab92d9fc64eccfbcff8c69e4759976d57078d",
        "parent": "https://github.com/apache/logging-log4j2/commit/443779ad005c14f0fd5b9f2b47f318618bfe96fd",
        "bug_id": "logging-log4j2_a4aab92",
        "file": [
            {
                "sha": "2320ad7dbcf6be9afeadb49964035d85d36bd77a",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a4aab92d9fc64eccfbcff8c69e4759976d57078d/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=a4aab92d9fc64eccfbcff8c69e4759976d57078d",
                "patch": "@@ -224,7 +224,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n             final ExtendedStackTraceElement[] extStackTrace, final List<String> ignorePackages) {\n         if (ignorePackages == null || ignorePackages.isEmpty()) {\n             for (int i = 0; i < extStackTrace.length; ++i) {\n-                this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                this.formatEntry(extStackTrace[i], sb);\n             }\n         } else {\n             int count = 0;\n@@ -238,7 +238,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n                         }\n                         count = 0;\n                     }\n-                    this.formatEntry(causedTrace[i], extStackTrace[i], sb);\n+                    this.formatEntry(extStackTrace[i], sb);\n                 } else {\n                     ++count;\n                 }\n@@ -256,8 +256,7 @@ private void formatElements(final StringBuilder sb, final int commonCount, final\n         }\n     }\n \n-    private void formatEntry(final StackTraceElement element, final ExtendedStackTraceElement extStackTraceElement,\n-            final StringBuilder sb) {\n+    private void formatEntry(final ExtendedStackTraceElement extStackTraceElement, final StringBuilder sb) {\n         sb.append(\"\\tat \");\n         sb.append(extStackTraceElement);\n         sb.append('\\n');",
                "deletions": 4
            }
        ],
        "patched_files": [
            "ThrowableProxy.java"
        ],
        "unit_tests": [
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_065c3cd": {
        "repo": "logging-log4j2",
        "message": "Fix NPEs in new shutdown hook code. I'm not sure if this is the right fix, but it's a fix. It's not clear to me that the new shotdown hook code will be in 2.1 based on the back and forth in JIRA and ML.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1620464 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/065c3cdab649a758d640493589a5568a08a391b2",
        "parent": "https://github.com/apache/logging-log4j2/commit/053cc54193c754ffbbd83d752786439277c29848",
        "bug_id": "logging-log4j2_065c3cd",
        "file": [
            {
                "sha": "d13b6f56f29a86adbf476d7eda76043016be209e",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/065c3cdab649a758d640493589a5568a08a391b2/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
                "status": "modified",
                "changes": 29,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java?ref=065c3cdab649a758d640493589a5568a08a391b2",
                "patch": "@@ -196,20 +196,22 @@ private void addShutdownHook() {\n                 ShutdownRegistrationStrategy.SHUTDOWN_REGISTRATION_STRATEGY);\n             if (shutdownStrategyClassName != null) {\n                 try {\n-                    shutdownRegistrationStrategy =\n-                        Loader.newCheckedInstanceOf(shutdownStrategyClassName, ShutdownRegistrationStrategy.class);\n+                    shutdownRegistrationStrategy = Loader.newCheckedInstanceOf(shutdownStrategyClassName,\n+                            ShutdownRegistrationStrategy.class);\n                 } catch (final Exception e) {\n-                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"There was an error loading the ShutdownRegistrationStrategy [{}]. \" +\n-                        \"Falling back to DefaultShutdownRegistrationStrategy.\", shutdownStrategyClassName, e);\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER,\n+                            \"There was an error loading the ShutdownRegistrationStrategy [{}]. \"\n+                                    + \"Falling back to DefaultShutdownRegistrationStrategy.\",\n+                            shutdownStrategyClassName, e);\n                     shutdownRegistrationStrategy = new DefaultShutdownRegistrationStrategy();\n                 }\n-            }\n-            try {\n-                shutdownRegistrationStrategy.registerShutdownHook(hook);\n-            } catch (final IllegalStateException ise) {\n-                LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n-            } catch (final SecurityException se) {\n-                LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                try {\n+                    shutdownRegistrationStrategy.registerShutdownHook(hook);\n+                } catch (final IllegalStateException ise) {\n+                    LOGGER.fatal(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook because JVM is shutting down.\");\n+                } catch (final SecurityException se) {\n+                    LOGGER.error(SHUTDOWN_HOOK_MARKER, \"Unable to register shutdown hook due to security restrictions\");\n+                }\n             }\n         }\n     }\n@@ -245,8 +247,9 @@ public void stop() {\n     }\n \n     private void tearDownShutdownHook() {\n-        if (shutdownThread != null && shutdownThread.get() != null) {\n-            shutdownRegistrationStrategy.unregisterShutdownHook(shutdownThread.get());\n+        Thread thread = shutdownThread.get();\n+        if (shutdownRegistrationStrategy != null && shutdownThread != null && thread != null) {\n+            shutdownRegistrationStrategy.unregisterShutdownHook(thread);\n             LOGGER.debug(SHUTDOWN_HOOK_MARKER, \"Enqueue shutdown hook for garbage collection.\");\n             shutdownThread.enqueue();\n         }",
                "deletions": 13
            }
        ],
        "patched_files": [
            "LoggerContext.java"
        ],
        "unit_tests": [
            "TestLoggerContext.java"
        ]
    },
    "logging-log4j2_f91ce93": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-177, LOG4J2-181 - Fix NPE in DatagramSocketManager and write header whenever the OutputStream is set in OutputStreamManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1460497 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/f91ce9347be991d052e76a4f620cc343322b4edb",
        "parent": "https://github.com/apache/logging-log4j2/commit/c48f1f5a4b9a36915806a0b3338468d83712457a",
        "bug_id": "logging-log4j2_f91ce93",
        "file": [
            {
                "sha": "54fde20be26f975a205d128c412d4ed86994971a",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -28,6 +28,7 @@\n     private OutputStream os;\n \n     private byte[] footer = null;\n+    private byte[] header = null;\n \n     protected OutputStreamManager(final OutputStream os, final String streamName) {\n         super(streamName);\n@@ -54,6 +55,7 @@ protected OutputStreamManager(final OutputStream os, final String streamName) {\n      */\n     public synchronized void setHeader(final byte[] header) {\n         if (header != null) {\n+            this.header = header;\n             try {\n                 this.os.write(header, 0, header.length);\n             } catch (final IOException ioe) {\n@@ -97,6 +99,13 @@ protected OutputStream getOutputStream() {\n \n     protected void setOutputStream(final OutputStream os) {\n         this.os = os;\n+        if (header != null) {\n+            try {\n+                this.os.write(header, 0, header.length);\n+            } catch (final IOException ioe) {\n+                LOGGER.error(\"Unable to write header\", ioe);\n+            }\n+        }\n     }\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "2fe3d9a1b747a09f1bb8b4d616a0a6af4579f40f",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/net/DatagramOutputStream.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -89,7 +89,7 @@ public synchronized void write(final byte[] bytes) throws IOException {\n \n     @Override\n     public synchronized void flush() throws IOException {\n-        if (this.ds != null && this.address != null) {\n+        if (this.data != null && this.ds != null && this.address != null) {\n             final DatagramPacket packet = new DatagramPacket(data, data.length, address, port);\n             ds.send(packet);\n         }",
                "deletions": 1
            },
            {
                "sha": "ad976ea23e2df121a55799d2a20072813ccf0fed",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java",
                "status": "modified",
                "changes": 190,
                "additions": 98,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/net/SocketReconnectTest.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -29,14 +29,15 @@\n import java.io.InputStreamReader;\n import java.net.ServerSocket;\n import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n public class SocketReconnectTest {\n     private static final int SOCKET_PORT = 5514;\n@@ -50,120 +51,125 @@ public static void before() {\n \n     @Test\n     public void testReconnect() throws Exception {\n-        TestSocketServer testServer = null;\n-        ExecutorService executor = null;\n-        Future<InputStream> futureIn;\n-        final InputStream in;\n \n-        try {\n-            executor = Executors.newSingleThreadExecutor();\n-            System.err.println(\"Initializing server\");\n-            testServer = new TestSocketServer();\n-            futureIn = executor.submit(testServer);\n-            Thread.sleep(300);\n-\n-            //System.err.println(\"Initializing logger\");\n-            final Logger logger = LogManager.getLogger(SocketReconnectTest.class);\n-\n-            String message = \"Log #1\";\n-            logger.error(message);\n+        List<String> list = new ArrayList<String>();\n+        TestSocketServer server = new TestSocketServer(list);\n+        server.start();\n+        Thread.sleep(300);\n+\n+        //System.err.println(\"Initializing logger\");\n+        final Logger logger = LogManager.getLogger(SocketReconnectTest.class);\n+\n+        String message = \"Log #1\";\n+        logger.error(message);\n+        String expectedHeader = \"Header\";\n+\n+        String msg = null;\n+        String header = null;\n+        for (int i = 0; i < 5; ++i) {\n+            Thread.sleep(100);\n+            if (list.size() > 1) {\n+                header = list.get(0);\n+                msg = list.get(1);\n+                break;\n+            }\n+        }\n+        assertNotNull(\"No header\", header);\n+        assertEquals(expectedHeader, header);\n+        assertNotNull(\"No message\", msg);\n+        assertEquals(message, msg);\n \n-            BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));\n-            assertEquals(message, reader.readLine());\n+        server.shutdown();\n+        server.join();\n \n-            closeQuietly(testServer);\n-            executor.shutdown();\n-            try {\n-                // Wait a while for existing tasks to terminate\n-                if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n-                    executor.shutdownNow();\n-                    if (!executor.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n-                        System.err.println(\"Pool did not terminate\");\n-                    }\n-                }\n-            } catch (InterruptedException ie) {\n-                // (Re-)Cancel if current thread also interrupted\n-                executor.shutdownNow();\n-                // Preserve interrupt status\n-                Thread.currentThread().interrupt();\n-            }\n+        list.clear();\n \n-            message = \"Log #2\";\n-            logger.error(message);\n+        message = \"Log #2\";\n+        boolean exceptionCaught = false;\n \n-            message = \"Log #3\";\n+        for (int i = 0; i < 5; ++i) {\n             try {\n                 logger.error(message);\n             } catch (final AppenderRuntimeException e) {\n+                exceptionCaught = true;\n+                break;\n                 // System.err.println(\"Caught expected exception\");\n             }\n-\n-            //System.err.println(\"Re-initializing server\");\n-            executor = Executors.newSingleThreadExecutor();\n-            testServer = new TestSocketServer();\n-            futureIn = executor.submit(testServer);\n-            Thread.sleep(500);\n-\n-            try {\n-                logger.error(message);\n-                reader = new BufferedReader(new InputStreamReader(futureIn.get()));\n-                assertEquals(message, reader.readLine());\n-            } catch (final AppenderRuntimeException e) {\n-                e.printStackTrace();\n-                fail(\"Unexpected Exception\");\n+        }\n+        assertTrue(\"No Exception thrown\", exceptionCaught);\n+        message = \"Log #3\";\n+\n+\n+        server = new TestSocketServer(list);\n+        server.start();\n+        Thread.sleep(300);\n+\n+        msg = null;\n+        header = null;\n+        logger.error(message);\n+        for (int i = 0; i < 5; ++i) {\n+            Thread.sleep(100);\n+            if (list.size() > 1) {\n+                header = list.get(0);\n+                msg = list.get(1);\n+                break;\n             }\n-            //System.err.println(\"Sleeping to demonstrate repeated re-connections\");\n-            //Thread.sleep(5000);\n-        } finally {\n-            closeQuietly(testServer);\n-            closeQuietly(executor);\n         }\n+        assertNotNull(\"No header\", header);\n+        assertEquals(expectedHeader, header);\n+        assertNotNull(\"No message\", msg);\n+        assertEquals(message, msg);\n+        server.shutdown();\n+        server.join();\n     }\n \n \n-    private static class TestSocketServer implements Callable<InputStream> {\n-        private ServerSocket server;\n+    private static class TestSocketServer extends Thread {\n+        private volatile boolean shutdown = false;\n+        private List<String> list;\n         private Socket client;\n \n-        public InputStream call() throws Exception {\n-            server = new ServerSocket(SOCKET_PORT);\n-            client = server.accept();\n-            return client.getInputStream();\n+        public TestSocketServer(List<String> list) {\n+            this.list = list;\n         }\n \n-        public void close() {\n-            closeQuietly(client);\n-            closeQuietly(server);\n-        }\n-\n-        private void closeQuietly(final ServerSocket socket) {\n-            if (null != socket) {\n-                try {\n-                    socket.close();\n-                } catch (final IOException ignore) {\n+        public void run() {\n+            ServerSocket server = null;\n+            client = null;\n+            try {\n+                server = new ServerSocket(SOCKET_PORT);\n+                client = server.accept();\n+                while (!shutdown) {\n+                    BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n+                    list.add(reader.readLine());\n                 }\n-            }\n-        }\n-\n-        private void closeQuietly(final Socket socket) {\n-            if (null != socket) {\n-                try {\n-                    socket.close();\n-                } catch (final IOException ignore) {\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            } finally {\n+                if (client != null) {\n+                    try {\n+                        client.close();\n+                    } catch (Exception ex) {\n+                        System.out.println(\"Unable to close socket \" + ex.getMessage());\n+                    }\n+                }\n+                if (server != null) {\n+                    try {\n+                        server.close();\n+                    } catch (Exception ex) {\n+                        System.out.println(\"Unable to close server socket \" + ex.getMessage());\n+                    }\n                 }\n             }\n         }\n-    }\n \n-    private static void closeQuietly(final ExecutorService executor) {\n-        if (null != executor) {\n-            executor.shutdownNow();\n-        }\n-    }\n-\n-    private static void closeQuietly(final TestSocketServer testServer) {\n-        if (null != testServer) {\n-            testServer.close();\n+        public void shutdown() {\n+            shutdown = true;\n+            try {\n+                client.shutdownInput();\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+            }\n         }\n     }\n }",
                "deletions": 92
            },
            {
                "sha": "b2ec1eae466cbabdc1e54c3f330ca34b61edcf08",
                "filename": "core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/test/layout/BasicLayout.java?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.test.layout;\n+\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.helpers.Charsets;\n+import org.apache.logging.log4j.core.helpers.Constants;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ */\n+@Plugin(name = \"BasicLayout\", type = \"Core\", elementType = \"layout\", printObject = true)\n+public class BasicLayout extends AbstractStringLayout {\n+\n+    private static final String HEADER = \"Header\" + Constants.LINE_SEP;\n+\n+    public byte[] getHeader() {\n+        return HEADER.getBytes(getCharset());\n+    }\n+\n+    public BasicLayout(final Charset charset) {\n+        super(charset);\n+    }\n+\n+    public String toSerializable(LogEvent event) {\n+        return event.getMessage().getFormattedMessage() + Constants.LINE_SEP;\n+    }\n+\n+    public Map<String, String> getContentFormat() {\n+        return new HashMap<String, String>();\n+    }\n+\n+    /**\n+     */\n+    @PluginFactory\n+    public static BasicLayout createLayout() {\n+        final Charset charset = Charsets.getSupportedCharset(\"UTF-8\");\n+        return new BasicLayout(charset);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "168b2c4d34a7f9ca4afec3c601b0230ed2c86118",
                "filename": "core/src/test/resources/log4j-socket.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/resources/log4j-socket.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/core/src/test/resources/log4j-socket.xml",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/log4j-socket.xml?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -1,9 +1,9 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<configuration status=\"debug\" name=\"MyApp\">\n+<configuration status=\"warn\" name=\"MyApp\" packages=\"org.apache.logging.log4j.test\">\n \t<appenders>\n \t\t<Socket name=\"socket\" host=\"localhost\" port=\"5514\" protocol=\"TCP\" suppressExceptions=\"false\"\n-\t\t\t\treconnectionDelay=\"250\">\n-\t\t\t<PatternLayout pattern=\"%msg%n\"/>\n+\t\t\t\treconnectionDelay=\"100\">\n+\t\t\t<BasicLayout />\n \t\t</Socket>\n \t</appenders>\n \t<loggers>",
                "deletions": 3
            },
            {
                "sha": "3990032fab4bea2ad61ded4e3af57fc6011980ee",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/f91ce9347be991d052e76a4f620cc343322b4edb/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/f91ce9347be991d052e76a4f620cc343322b4edb/src/changes/changes.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=f91ce9347be991d052e76a4f620cc343322b4edb",
                "patch": "@@ -23,6 +23,12 @@\n \n   <body>\n     <release version=\"2.0-beta5\" date=\"@TBD@\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-181\" dev=\"rgoers\" type=\"fix\">\n+        OutputStreamManager now adds the layout header whenever the OutputStream is set.\n+      </action>\n+      <action issue=\"LOG4J2-177\" dev=\"rgoers\" type=\"fix\" due-to=\"Remko Popma\">\n+        Fix NullPointerException in DatagramOutputStream when flush is called from multiple threads.\n+      </action>\n       <action dev=\"rgoers\" type=\"add\">\n         Added FlumePersistentManager which writes to BerkeleyDB and then writes to Flume asynchronously.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "OutputStreamManager.java",
            "BasicLayout.java",
            "DatagramOutputStream.java"
        ],
        "unit_tests": [
            "SocketReconnectTest.java"
        ]
    },
    "logging-log4j2_5b6dee2": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-893] NullPointerException on filter when mapping JUL to Log4j2.",
        "commit": "https://github.com/apache/logging-log4j2/commit/5b6dee27081bc7e268138c7431c027ce99dbe7c0",
        "parent": "https://github.com/apache/logging-log4j2/commit/fe64f1803b121384fbec544d290b10de2790fbcf",
        "bug_id": "logging-log4j2_5b6dee2",
        "file": [
            {
                "sha": "94270ffebf917d441614d44033511a860c867232",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5b6dee27081bc7e268138c7431c027ce99dbe7c0/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5b6dee27081bc7e268138c7431c027ce99dbe7c0/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java",
                "status": "modified",
                "changes": 15,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/Logger.java?ref=5b6dee27081bc7e268138c7431c027ce99dbe7c0",
                "patch": "@@ -297,8 +297,7 @@ boolean filter(final Level level, final Marker marker, final String msg) {\n                     return r == Filter.Result.ACCEPT;\n                 }\n             }\n-\n-            return intLevel >= level.intLevel();\n+            return level != null && intLevel >= level.intLevel();\n         }\n \n         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {\n@@ -310,8 +309,7 @@ boolean filter(final Level level, final Marker marker, final String msg, final T\n                     return r == Filter.Result.ACCEPT;\n                 }\n             }\n-\n-            return intLevel >= level.intLevel();\n+            return level != null && intLevel >= level.intLevel();\n         }\n \n         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {\n@@ -323,8 +321,7 @@ boolean filter(final Level level, final Marker marker, final String msg, final O\n                     return r == Filter.Result.ACCEPT;\n                 }\n             }\n-\n-            return intLevel >= level.intLevel();\n+            return level != null && intLevel >= level.intLevel();\n         }\n \n         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {\n@@ -336,8 +333,7 @@ boolean filter(final Level level, final Marker marker, final Object msg, final T\n                     return r == Filter.Result.ACCEPT;\n                 }\n             }\n-\n-            return intLevel >= level.intLevel();\n+            return level != null && intLevel >= level.intLevel();\n         }\n \n         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {\n@@ -349,8 +345,7 @@ boolean filter(final Level level, final Marker marker, final Message msg, final\n                     return r == Filter.Result.ACCEPT;\n                 }\n             }\n-\n-            return intLevel >= level.intLevel();\n+            return level != null && intLevel >= level.intLevel();\n         }\n     }\n ",
                "deletions": 10
            },
            {
                "sha": "1046b8a7023ae729b328825dd3d51ff0ee0ed8e8",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/5b6dee27081bc7e268138c7431c027ce99dbe7c0/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/5b6dee27081bc7e268138c7431c027ce99dbe7c0/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=5b6dee27081bc7e268138c7431c027ce99dbe7c0",
                "patch": "@@ -24,6 +24,9 @@\n   </properties>\n   <body>\n     <release version=\"2.1.1\" date=\"201?-??-??\" description=\"GA Release 2.1.1\">\n+      <action issue=\"LOG4J2-893\" dev=\"ggregory\" type=\"fix\">\n+        NullPointerException on filter when mapping JUL to Log4j2.\n+      </action>\n       <action issue=\"LOG4J2-892\" dev=\"ggregory\" type=\"fix\">\n         JUL adapter does not map Log4j'2 FATAL level to JUL level.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Logger.java"
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLogger.java"
        ]
    },
    "logging-log4j2_040e29e": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-1235 - org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy not working correctly 1. Removed issue with NPE when tries to delete already deleted appender 2. Added parameter checkInterval for cases when all appenders already purged, so scheduler will keep working with this interval 3. Fixed an issue when appender purged even if received new event to it during purge procedure",
        "commit": "https://github.com/apache/logging-log4j2/commit/040e29e209133efef788eb4132de30262d954ee4",
        "parent": "https://github.com/apache/logging-log4j2/commit/af7d1a0d7ea4fcc45a61433352b13982ff53ca7e",
        "bug_id": "logging-log4j2_040e29e",
        "file": [
            {
                "sha": "dacf993eb4d6f0c110c0323fd8663f4087ecd7f8",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java",
                "status": "modified",
                "changes": 56,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "patch": "@@ -22,7 +22,6 @@\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.AbstractLifeCycle;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Configuration;\n@@ -32,7 +31,6 @@\n import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n-import org.apache.logging.log4j.status.StatusLogger;\n \n /**\n  * Policy is purging appenders that were not in use specified time in minutes\n@@ -41,15 +39,16 @@\n @Scheduled\n public class IdlePurgePolicy extends AbstractLifeCycle implements PurgePolicy, Runnable {\n \n-    private static final Logger LOGGER = StatusLogger.getLogger();\n     private final long timeToLive;\n+    private final long checkInterval;    \n     private final ConcurrentMap<String, Long> appendersUsage = new ConcurrentHashMap<>();\n     private RoutingAppender routingAppender;\n     private final ConfigurationScheduler scheduler;\n     private volatile ScheduledFuture<?> future = null;\n \n-    public IdlePurgePolicy(final long timeToLive, final ConfigurationScheduler scheduler) {\n+    public IdlePurgePolicy(long timeToLive, long checkInterval, final ConfigurationScheduler scheduler) {\n         this.timeToLive = timeToLive;\n+        this.checkInterval = checkInterval;\n         this.scheduler = scheduler;\n     }\n \n@@ -73,8 +72,9 @@ public void purge() {\n         for (final Entry<String, Long> entry : appendersUsage.entrySet()) {\n             if (entry.getValue() < createTime) {\n                 LOGGER.debug(\"Removing appender \" + entry.getKey());\n-                appendersUsage.remove(entry.getKey());\n-                routingAppender.deleteAppender(entry.getKey());\n+                if(appendersUsage.remove(entry.getKey(), entry.getValue())) {\n+                    routingAppender.deleteAppender(entry.getKey());\n+                }\n             }\n         }\n     }\n@@ -100,33 +100,39 @@ public void run() {\n     }\n \n     private void scheduleNext() {\n-        long createTime = Long.MAX_VALUE;\n+        long updateTime = Long.MAX_VALUE;\n         for (final Entry<String, Long> entry : appendersUsage.entrySet()) {\n-            if (entry.getValue() < createTime) {\n-                createTime = entry.getValue();\n+            if (entry.getValue() < updateTime) {\n+                updateTime = entry.getValue();\n             }\n         }\n-        if (createTime < Long.MAX_VALUE) {\n-            final long interval = timeToLive - (System.currentTimeMillis() - createTime);\n+\n+        if (updateTime < Long.MAX_VALUE) {\n+            long interval = timeToLive - (System.currentTimeMillis() - updateTime);\n             future = scheduler.schedule(this, interval, TimeUnit.MILLISECONDS);\n+        } else {\n+            // reset to initial state - in case of all appenders already purged\n+            future = scheduler.schedule(this, checkInterval, TimeUnit.MILLISECONDS);\n         }\n     }\n \n     /**\n      * Create the PurgePolicy\n      *\n-     * @param timeToLive the number of increments of timeUnit before the Appender should be purged.\n-     * @param timeUnit   the unit of time the timeToLive is expressed in.\n+     * @param timeToLive    the number of increments of timeUnit before the Appender should be purged.\n+     * @param checkInterval when all appenders purged, the number of increments of timeUnit to check if any appenders appeared  \n+     * @param timeUnit      the unit of time the timeToLive and the checkInterval is expressed in.\n      * @return The Routes container.\n      */\n     @PluginFactory\n     public static PurgePolicy createPurgePolicy(\n         @PluginAttribute(\"timeToLive\") final String timeToLive,\n+        @PluginAttribute(\"checkInterval\") final String checkInterval,\n         @PluginAttribute(\"timeUnit\") final String timeUnit,\n         @PluginConfiguration final Configuration configuration) {\n \n         if (timeToLive == null) {\n-            LOGGER.error(\"A timeToLive  value is required\");\n+            LOGGER.error(\"A timeToLive value is required\");\n             return null;\n         }\n         TimeUnit units;\n@@ -136,15 +142,29 @@ public static PurgePolicy createPurgePolicy(\n             try {\n                 units = TimeUnit.valueOf(timeUnit.toUpperCase());\n             } catch (final Exception ex) {\n-                LOGGER.error(\"Invalid time unit {}\", timeUnit);\n+                LOGGER.error(\"Invalid timeUnit value {}. timeUnit set to MINUTES\", timeUnit, ex);\n                 units = TimeUnit.MINUTES;\n             }\n         }\n \n-        final long ttl = units.toMillis(Long.parseLong(timeToLive));\n-\n+        long ttl = units.toMillis(Long.parseLong(timeToLive));\n+        if(ttl < 0) {\n+            LOGGER.error(\"timeToLive must be positive. timeToLive set to 0\");\n+            ttl = 0;\n+        }\n+        \n+        long ci;\n+        if(checkInterval == null) {\n+            ci = ttl;\n+        } else {\n+            ci = units.toMillis(Long.parseLong(checkInterval));\n+            if(ci < 0) {\n+                LOGGER.error(\"checkInterval must be positive. checkInterval set equal to timeToLive = {}\", ttl);\n+                ci = ttl;\n+            }\n+        }\n \n-        return new IdlePurgePolicy(ttl, configuration.getScheduler());\n+        return new IdlePurgePolicy(ttl, ci, configuration.getScheduler());\n     }\n \n     @Override",
                "deletions": 18
            },
            {
                "sha": "059413dec87c5bdc2ec006dee4089a69bb68c5ff",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "patch": "@@ -182,9 +182,17 @@ private Appender createAppender(final Route route, final LogEvent event) {\n      * @param key The appender's key\n      */\n     public void deleteAppender(final String key) {\n-    \tLOGGER.debug(\"Stopping route with key\" + key);\n-    \tfinal AppenderControl control = appenders.remove(key);\n-    \tcontrol.getAppender().stop();\n+        LOGGER.debug(\"Stopping route with key\" + key);\n+        AppenderControl control = appenders.remove(key);\n+        control.getAppender().stop();\n+        LOGGER.debug(\"Deleting route with \" + key + \" key \");\n+        AppenderControl control = appenders.remove(key);\n+        if(null != control) {\n+            LOGGER.debug(\"Stopping route with \" + key + \" key\");\n+            control.getAppender().stop();\n+        } else {\n+            LOGGER.debug(\"Route with \" + key + \" key already deleted\");\n+        }\n     }\n \n     /**",
                "deletions": 3
            },
            {
                "sha": "9fc40052557011b17ad0a3bfc44c3b5538d24663",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/040e29e209133efef788eb4132de30262d954ee4/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithPurgingTest.java?ref=040e29e209133efef788eb4132de30262d954ee4",
                "patch": "@@ -105,11 +105,22 @@ public void routingTest() throws InterruptedException {\n \n         assertEquals(\"Incorrect number of appenders with IdlePurgePolicy.\", 1, routingAppenderIdle.getAppenders().size());\n         assertEquals(\"Incorrect number of appenders with manual purge.\", 0, routingAppenderManual.getAppenders().size());\n+\n+        msg = new StructuredDataMessage(\"5\", \"This is a test 5\", \"Service\");\n+        EventLogger.logEvent(msg);\n+\n+        assertEquals(\"Incorrect number of appenders with manual purge.\", 1, routingAppenderManual.getAppenders().size());\n+\n+        routingAppenderManual.deleteAppender(\"5\");\n+        routingAppenderManual.deleteAppender(\"5\");\n+\n+        assertEquals(\"Incorrect number of appenders with manual purge.\", 0, routingAppenderManual.getAppenders().size());\n     }\n \n-    private void assertFileExistance(final String... files) {\n-    \tfor (final String file : files) {\n-\t\t\tassertTrue(\"File should exist - \" + file + \" file \", new File(file).exists());\n-\t\t}\n+\n+    private void assertFileExistance(String... files) {\n+        for (String file : files) {\n+            assertTrue(\"File should exist - \" + file + \" file \", new File(file).exists());\n+        }\n     }\n }",
                "deletions": 4
            }
        ],
        "patched_files": [
            "IdlePurgePolicy.java",
            "RoutingAppender.java"
        ],
        "unit_tests": [
            "RoutingAppenderWithPurgingTest.java",
            "RoutingAppenderTest.java"
        ]
    },
    "logging-log4j2_d1c02ee": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1500] Merging configurations fail with an NPE when comparing\nNodes with different attributes. Closes #37.",
        "commit": "https://github.com/apache/logging-log4j2/commit/d1c02ee5e3a863528dfad66a9bbd17c45d475a25",
        "parent": "https://github.com/apache/logging-log4j2/commit/5b7b75d5f902d5f1427858c34330cf2550d308b7",
        "bug_id": "logging-log4j2_d1c02ee",
        "file": [
            {
                "sha": "c799e1d9b1bf08125ba7668eabcc58c8afff1598",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java?ref=d1c02ee5e3a863528dfad66a9bbd17c45d475a25",
                "patch": "@@ -260,10 +260,12 @@ private boolean isFilterNode(final Node node) {\n     }\n \n     private boolean isSameName(final Node node1, final Node node2) {\n-        return node1.getAttributes().get(NAME).toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());\n+        final String value = node1.getAttributes().get(NAME);\n+        return value != null && value.toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());\n     }\n \n     private boolean isSameReference(final Node node1, final Node node2) {\n-        return node1.getAttributes().get(REF).toLowerCase().equals(node2.getAttributes().get(REF).toLowerCase());\n+        final String value = node1.getAttributes().get(REF);\n+        return value != null && value.toLowerCase().equals(node2.getAttributes().get(REF).toLowerCase());\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "8482cf475adbf16626ef5938c3b8069cfbd562c2",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CompositeConfigurationTest.java?ref=d1c02ee5e3a863528dfad66a9bbd17c45d475a25",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.Map;\n \n@@ -26,6 +27,7 @@\n import org.apache.logging.log4j.core.appender.FileAppender;\n import org.apache.logging.log4j.core.config.composite.CompositeConfiguration;\n import org.apache.logging.log4j.junit.LoggerContextRule;\n+import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n@@ -110,6 +112,23 @@ public void evaluate() throws Throwable {\n         };\n         runTest(lcr, test);\n     }\n+\n+    @Test\n+    public void testAttributeCheckWhenMergingConfigurations() {\n+        final LoggerContextRule lcr = new LoggerContextRule(\"classpath:log4j-comp-root-loggers.xml,log4j-comp-logger.json\");\n+        final Statement test = new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                try {\n+                    final CompositeConfiguration config = (CompositeConfiguration) lcr.getConfiguration();\n+                    Assert.assertNotNull(config);\n+                } catch (NullPointerException e) {\n+                    fail(\"Should not throw NullPointerException when there are different nodes.\");\n+                }\n+            }\n+        };\n+        runTest(lcr, test);\n+    }\n /*\n     @Test\n     public void overrideFilter() {",
                "deletions": 0
            },
            {
                "sha": "79ea7e53d41d28a60ef92d67072fd188f8bb369c",
                "filename": "log4j-core/src/test/resources/log4j-comp-root-loggers.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/test/resources/log4j-comp-root-loggers.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/log4j-core/src/test/resources/log4j-comp-root-loggers.xml",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/log4j-comp-root-loggers.xml?ref=d1c02ee5e3a863528dfad66a9bbd17c45d475a25",
                "patch": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+\n+-->\n+<Configuration status=\"ERROR\" name=\"LoggerConfigTest\">\n+    <Appenders>\n+        <Console name=\"STDOUT\">\n+            <PatternLayout pattern=\"%m%n\"/>\n+        </Console>\n+        <File name=\"File\" fileName=\"${filename}\" bufferedIO=\"false\">\n+            <PatternLayout>\n+                <Pattern>%d %p %C{1.} [%t] %m%n</Pattern>\n+            </PatternLayout>\n+        </File>\n+    </Appenders>\n+\n+    <Loggers>\n+        <Logger name=\"cat1\" level=\"debug\" additivity=\"false\">\n+            <AppenderRef ref=\"File\"/>\n+        </Logger>\n+\n+        <Logger name=\"cat3\" level=\"debug\" additivity=\"false\">\n+            <AppenderRef ref=\"File\"/>\n+        </Logger>\n+\n+        <Root level=\"error\">\n+            <AppenderRef ref=\"STDOUT\"/>\n+            <Property name=\"hostname\">server1</Property>\n+        </Root>\n+    </Loggers>\n+\n+</Configuration>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "77bc02b71be1a33cee005247d727ce3e52c52f69",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/d1c02ee5e3a863528dfad66a9bbd17c45d475a25/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=d1c02ee5e3a863528dfad66a9bbd17c45d475a25",
                "patch": "@@ -24,6 +24,9 @@\n   </properties>\n   <body>\n     <release version=\"2.7\" date=\"2016-MM-DD\" description=\"GA Release 2.7\">\n+      <action issue=\"LOG4J2-1500\" dev=\"ggregory\" type=\"fix\" due-to=\"Jose Leon\">\n+        Merging configurations fail with an NPE when comparing Nodes with different attributes.\n+      </action>\n       <action issue=\"LOG4J2-1482\" dev=\"ggregory\" type=\"fix\" due-to=\"Gary Gregory, Sumit Singhal\">\n         Improper header in CsvParameterLayout.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DefaultMergeStrategy.java",
            "CompositeConfiguration.java"
        ],
        "unit_tests": [
            "CompositeConfigurationTest.java"
        ]
    },
    "logging-log4j2_e08664e": {
        "repo": "logging-log4j2",
        "message": "Specify default Facility level in FlumeAppender.\n\n  - Due to my recent changes involving how plugins are constructed, \n  this value had to be manually specified. Without the value, it \n  would cause an NPE later on.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597481 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/e08664e77c5332fd1249ab8a5b4b297689138668",
        "parent": "https://github.com/apache/logging-log4j2/commit/4d6bf6e3be504f2b8341b991f9484e29594ac2ac",
        "bug_id": "logging-log4j2_e08664e",
        "file": [
            {
                "sha": "d7fd784b7c2704a38f734eed987d159547ed38ed",
                "filename": "log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/e08664e77c5332fd1249ab8a5b4b297689138668/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java?ref=e08664e77c5332fd1249ab8a5b4b297689138668",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n import org.apache.logging.log4j.core.layout.Rfc5424Layout;\n+import org.apache.logging.log4j.core.net.Facility;\n import org.apache.logging.log4j.core.util.Booleans;\n import org.apache.logging.log4j.core.util.Integers;\n \n@@ -220,7 +221,7 @@ public static FlumeAppender createAppender(@PluginElement(\"Agents\") Agent[] agen\n \n         if (layout == null) {\n             final int enterpriseNumber = Integer.parseInt(Rfc5424Layout.DEFAULT_ENTERPRISE_NUMBER);\n-            layout = Rfc5424Layout.createLayout(null, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n+            layout = Rfc5424Layout.createLayout(Facility.LOCAL0, null, enterpriseNumber, true, Rfc5424Layout.DEFAULT_MDCID,\n                     mdcPrefix, eventPrefix, false, null, null, null, excludes, includes, required, null, false, null,\n                     null);\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FlumeAppender.java"
        ],
        "unit_tests": [
            "FlumeAppenderTest.java"
        ]
    },
    "logging-log4j2_a5a1f1a": {
        "repo": "logging-log4j2",
        "message": "LOG4J2-639: prevent NPE if AsyncLogger/AsyncLoggerConfig is used after log4j was shut down\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1595507 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
        "parent": "https://github.com/apache/logging-log4j2/commit/5c6a64444487e37d621a25aaff386abfd336c9ac",
        "bug_id": "logging-log4j2_a5a1f1a",
        "file": [
            {
                "sha": "c8329732d3ae84797f68f98d27af2c69acff7f72",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java",
                "status": "modified",
                "changes": 18,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -230,10 +230,16 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n             info = new Info(new RingBufferLogEventTranslator(), Thread.currentThread().getName(), false);\n             threadlocalInfo.set(info);\n         }\n+        \n+        Disruptor<RingBufferLogEvent> temp = disruptor;\n+        if (temp == null) { // LOG4J2-639\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down\");\n+            return;\n+        }\n \n         // LOG4J2-471: prevent deadlock when RingBuffer is full and object\n         // being logged calls Logger.log() from its toString() method\n-        if (info.isAppenderThread && disruptor.getRingBuffer().remainingCapacity() == 0) {\n+        if (info.isAppenderThread && temp.getRingBuffer().remainingCapacity() == 0) {\n             // bypass RingBuffer and invoke Appender directly\n             config.loggerConfig.log(getName(), fqcn, marker, level, message, thrown);\n             return;\n@@ -266,7 +272,15 @@ public void logMessage(final String fqcn, final Level level, final Marker marker\n                 // CachedClock: 10% faster than system clock, smaller gaps\n                 clock.currentTimeMillis());\n \n-        disruptor.publishEvent(info.translator);\n+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n+        try {\n+            // Note: do NOT use the temp variable above!\n+            // That could result in adding a log event to the disruptor after it was shut down,\n+            // which could cause the publishEvent method to hang and never return.\n+            disruptor.publishEvent(info.translator);\n+        } catch (NullPointerException npe) {\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n+        }\n     }\n \n     private static StackTraceElement location(final String fqcnOfLogger) {",
                "deletions": 2
            },
            {
                "sha": "2e8814c0656b074a0d54546a947687d18a0eee0f",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java",
                "status": "modified",
                "changes": 17,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -316,16 +316,29 @@ public void run() {\n      *          calling thread needs to process the event itself\n      */\n     public boolean callAppendersFromAnotherThread(final LogEvent event) {\n+        Disruptor<Log4jEventWrapper> temp = disruptor;\n+        if (temp == null) { // LOG4J2-639\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down\");\n+            return true;\n+        }\n \n         // LOG4J2-471: prevent deadlock when RingBuffer is full and object\n         // being logged calls Logger.log() from its toString() method\n         if (isAppenderThread.get() == Boolean.TRUE //\n-                && disruptor.getRingBuffer().remainingCapacity() == 0) {\n+                && temp.getRingBuffer().remainingCapacity() == 0) {\n \n             // bypass RingBuffer and invoke Appender directly\n             return false;\n         }\n-        disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+        // LOG4J2-639: catch NPE if disruptor field was set to null after our check above\n+        try {\n+            // Note: do NOT use the temp variable above!\n+            // That could result in adding a log event to the disruptor after it was shut down,\n+            // which could cause the publishEvent method to hang and never return.\n+            disruptor.getRingBuffer().publishEvent(translator, event, asyncLoggerConfig);\n+        } catch (NullPointerException npe) {\n+            LOGGER.fatal(\"Ignoring log event after log4j was shut down.\");\n+        }\n         return true;\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "af0bd78f2bdc21c1c18c5eb7ef2a7f33ca895f1e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigUseAfterShutdownTest.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.spi.AbstractLoggerProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class AsyncLoggerConfigUseAfterShutdownTest {\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, \"AsyncLoggerConfigTest.xml\");\n+    }\n+\n+    @Test\n+    public void testNoErrorIfLogAfterShutdown() throws Exception {\n+        final Logger log = LogManager.getLogger(\"com.foo.Bar\");\n+        log.info(\"some message\");\n+        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread\n+\n+        // call the #logMessage() method to bypass the isEnabled check: \n+        // before the LOG4J2-639 fix this would throw a NPE\n+        ((AbstractLoggerProvider) log).logMessage(\"com.foo.Bar\", Level.INFO, null, new SimpleMessage(\"msg\"), null);\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "8cf09f7f5186b54f07788218736975e24b0434b6",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java",
                "status": "added",
                "changes": 62,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/AsyncLoggerUseAfterShutdownTest.java?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.core.async;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.LifeCycle;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.util.Constants;\n+import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.spi.AbstractLoggerProvider;\n+import org.apache.logging.log4j.util.Strings;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test for https://issues.apache.org/jira/browse/LOG4J2-639\n+ */\n+public class AsyncLoggerUseAfterShutdownTest {\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR,\n+                AsyncLoggerContextSelector.class.getName());\n+        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY,\n+                \"AsyncLoggerTest.xml\");\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        System.setProperty(Constants.LOG4J_CONTEXT_SELECTOR, Strings.EMPTY);\n+    }\n+\n+    @Test\n+    public void testNoErrorIfLogAfterShutdown() throws Exception {\n+        final Logger log = LogManager.getLogger(\"com.foo.Bar\");\n+        final String msg = \"Async logger msg\";\n+        log.info(msg, new InternalError(\"this is not a real error\"));\n+        ((LifeCycle) LogManager.getContext()).stop(); // stop async thread\n+\n+        // call the #logMessage() method to bypass the isEnabled check: \n+        // before the LOG4J2-639 fix this would throw a NPE\n+        ((AbstractLoggerProvider) log).logMessage(\"com.foo.Bar\", Level.INFO, null, new SimpleMessage(\"msg\"), null);\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "dace6b7a89564e26233da49601f7ae7b5fb1fff8",
                "filename": "log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggerConfigTest.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<Configuration status=\"OFF\">\n+<Configuration status=\"ERROR\">\n   <Appenders>\n     <File name=\"File\" \n           fileName=\"target/AsyncLoggerConfigTest.log\" ",
                "deletions": 1
            },
            {
                "sha": "644dd9343bf27467d3f9597d9b1e1e53f6a4d95b",
                "filename": "log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/log4j-core/src/test/resources/AsyncLoggerTest.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/resources/AsyncLoggerTest.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<Configuration status=\"OFF\">\n+<Configuration status=\"ERROR\">\n   <Appenders>\n     <RandomAccessFile name=\"RandomAccessFile\" fileName=\"target/AsyncLoggerTest.log\" \n \t    \t\timmediateFlush=\"false\" append=\"false\">",
                "deletions": 1
            },
            {
                "sha": "8d7ad6523a0769c2eeb0734c76477884c65f69df",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a5a1f1a271efaaccc15ae49ae0a3d64b711b3a89",
                "patch": "@@ -22,6 +22,9 @@\n   </properties>\n   <body>\n     <release version=\"2.0-rc2\" date=\"2014-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-639\" dev=\"rpopma\" type=\"fix\" due-to=\"Mck SembWever\">\n+        Prevent NPE in AsyncLogger and AsyncLoggerConfig if logger is used after log4j has been shut down.\n+      </action>\n       <action issue=\"LOG4J2-469\" dev=\"rgoers\" type=\"fix\">\n         FailoverAppender was not resetting its status after the primary appender recovered.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AsyncLoggerConfigHelper.java",
            "AsyncLogger.java"
        ],
        "unit_tests": [
            "AsyncLoggerTest.java",
            "AsyncLoggerUseAfterShutdownTest.java",
            "AsyncLoggerConfigUseAfterShutdownTest.java"
        ]
    },
    "logging-log4j2_a96b455": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1025] Custom java.util.logging.Level gives null Log4j Level and\ncauses NPE.",
        "commit": "https://github.com/apache/logging-log4j2/commit/a96b455c4330dae86c1177ce526d09afa3892144",
        "parent": "https://github.com/apache/logging-log4j2/commit/d865e43df0bc9558f01b494b970a82fb60178a95",
        "bug_id": "logging-log4j2_a96b455",
        "file": [
            {
                "sha": "c2d8eb321341f885f3bae077f1644e4896219d76",
                "filename": "log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java",
                "status": "modified",
                "changes": 63,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/main/java/org/apache/logging/log4j/jul/DefaultLevelConverter.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "patch": "@@ -17,34 +17,48 @@\n \n package org.apache.logging.log4j.jul;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.IdentityHashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.logging.log4j.Level;\n \n /**\n  * Default implementation of LevelConverter strategy.\n- *\n+ * <p>\n+ * Supports custom JUL levels by mapping them to their closest mapped neighbour. \n+ * </p>\n  * @since 2.1\n  */\n public class DefaultLevelConverter implements LevelConverter {\n \n+    static final class JulLevelComparator implements Comparator<java.util.logging.Level> {\n+        @Override\n+        public int compare(java.util.logging.Level level1, java.util.logging.Level level2) {\n+            return Integer.compare(level1.intValue(), level2.intValue());\n+        }\n+    }\n+\n     private final Map<java.util.logging.Level, Level> julToLog4j = new IdentityHashMap<>(9);\n     private final Map<Level, java.util.logging.Level> log4jToJul = new IdentityHashMap<>(10);\n+    private final List<java.util.logging.Level> sortedJulLevels = new ArrayList<>(9);\n \n     public DefaultLevelConverter() {\n         // Map JUL to Log4j\n-        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n+        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n         mapJulToLog4j(java.util.logging.Level.FINEST, LevelTranslator.FINEST);\n         mapJulToLog4j(java.util.logging.Level.FINER, Level.TRACE);\n         mapJulToLog4j(java.util.logging.Level.FINE, Level.DEBUG);\n         mapJulToLog4j(java.util.logging.Level.CONFIG, LevelTranslator.CONFIG);\n         mapJulToLog4j(java.util.logging.Level.INFO, Level.INFO);\n         mapJulToLog4j(java.util.logging.Level.WARNING, Level.WARN);\n         mapJulToLog4j(java.util.logging.Level.SEVERE, Level.ERROR);\n-        mapJulToLog4j(java.util.logging.Level.ALL, Level.ALL);\n+        mapJulToLog4j(java.util.logging.Level.OFF, Level.OFF);\n         // Map Log4j to JUL\n-        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n         mapLog4jToJul(LevelTranslator.FINEST, java.util.logging.Level.FINEST);\n         mapLog4jToJul(Level.TRACE, java.util.logging.Level.FINER);\n         mapLog4jToJul(Level.DEBUG, java.util.logging.Level.FINE);\n@@ -53,18 +67,46 @@ public DefaultLevelConverter() {\n         mapLog4jToJul(Level.WARN, java.util.logging.Level.WARNING);\n         mapLog4jToJul(Level.ERROR, java.util.logging.Level.SEVERE);\n         mapLog4jToJul(Level.FATAL, java.util.logging.Level.SEVERE);\n-        mapLog4jToJul(Level.ALL, java.util.logging.Level.ALL);\n+        mapLog4jToJul(Level.OFF, java.util.logging.Level.OFF);\n+        // Sorted Java levels\n+        sortedJulLevels.addAll(julToLog4j.keySet());\n+        Collections.sort(sortedJulLevels, new JulLevelComparator());\n+\n+    }\n+\n+    private Level addCustomJulLevel(java.util.logging.Level customJavaLevel) {\n+        long prevDist = Long.MAX_VALUE;\n+        java.util.logging.Level prevLevel = null;\n+        for (java.util.logging.Level mappedJavaLevel : sortedJulLevels) {\n+            long distance = distance(customJavaLevel, mappedJavaLevel);\n+            if (distance > prevDist) {\n+                return mapCustomJulLevel(customJavaLevel, prevLevel);\n+            }\n+            prevDist = distance;\n+            prevLevel = mappedJavaLevel;\n+        }\n+        return mapCustomJulLevel(customJavaLevel, prevLevel);\n+    }\n+\n+    private long distance(java.util.logging.Level javaLevel, java.util.logging.Level customJavaLevel) {\n+        return Math.abs((long) customJavaLevel.intValue() - (long) javaLevel.intValue());\n+    }\n+\n+    private Level mapCustomJulLevel(java.util.logging.Level customJavaLevel, java.util.logging.Level stdJavaLevel) {\n+        final Level level = julToLog4j.get(stdJavaLevel);\n+        julToLog4j.put(customJavaLevel, level);\n+        return level;\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapJulToLog4j(java.util.logging.Level julLevel, Level level) {\n         julToLog4j.put(julLevel, level);\n     }\n-    \n+\n     /*\n-     * TODO consider making public.\n+     * TODO consider making public for advanced configuration.\n      */\n     private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n         log4jToJul.put(level, julLevel);\n@@ -77,6 +119,7 @@ private void mapLog4jToJul(Level level, java.util.logging.Level julLevel) {\n \n     @Override\n     public Level toLevel(final java.util.logging.Level javaLevel) {\n-        return julToLog4j.get(javaLevel);\n+        final Level level = julToLog4j.get(javaLevel);\n+        return level != null ? level : addCustomJulLevel(javaLevel);\n     }\n }",
                "deletions": 10
            },
            {
                "sha": "6b8eef6787bd104ec1d97527ac0889df92e474d3",
                "filename": "log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java",
                "status": "added",
                "changes": 145,
                "additions": 145,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-jul/src/test/java/org/apache/logging/log4j/jul/DefaultLevelConverterCustomJulLevelsTest.java?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "patch": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.jul;\n+\n+import org.apache.logging.log4j.Level;\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests {@link DefaultLevelConverter} for custom JUL levels.\n+ * \n+ * @since 2.4\n+ */\n+public class DefaultLevelConverterCustomJulLevelsTest {\n+\n+    static class CustomLevel extends java.util.logging.Level {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        static CustomLevel ALL_P_1 = new CustomLevel(\"ALL_P_1\", java.util.logging.Level.ALL.intValue() + 1);\n+\n+        static CustomLevel FINEST_P_1 = new CustomLevel(\"FINEST_P_1\", java.util.logging.Level.FINEST.intValue() + 1);\n+        static CustomLevel FINEST_M_1 = new CustomLevel(\"FINEST_M_1\", java.util.logging.Level.FINEST.intValue() - 1);\n+\n+        static CustomLevel FINER_P_1 = new CustomLevel(\"FINER_P_1\", java.util.logging.Level.FINER.intValue() + 1);\n+        static CustomLevel FINER_M_1 = new CustomLevel(\"FINER_M_1\", java.util.logging.Level.FINER.intValue() - 1);\n+\n+        static CustomLevel FINE_P_1 = new CustomLevel(\"FINE_P_1\", java.util.logging.Level.FINE.intValue() + 1);\n+        static CustomLevel FINE_M_1 = new CustomLevel(\"FINE_M_1\", java.util.logging.Level.FINE.intValue() - 1);\n+\n+        static CustomLevel CONFIG_P_1 = new CustomLevel(\"CONFIG_P_1\", java.util.logging.Level.CONFIG.intValue() + 1);\n+        static CustomLevel CONFIG_M_1 = new CustomLevel(\"CONFIG_M_1\", java.util.logging.Level.CONFIG.intValue() - 1);\n+\n+        static CustomLevel INFO_P_1 = new CustomLevel(\"INFO_P_1\", java.util.logging.Level.INFO.intValue() + 1);\n+        static CustomLevel INFO_M_1 = new CustomLevel(\"INFO_M_1\", java.util.logging.Level.INFO.intValue() - 1);\n+\n+        static CustomLevel WARNING_P_1 = new CustomLevel(\"WARNING_P_1\", java.util.logging.Level.WARNING.intValue() + 1);\n+        static CustomLevel WARNING_M_1 = new CustomLevel(\"WARNING_M_1\", java.util.logging.Level.WARNING.intValue() - 1);\n+\n+        static CustomLevel SEVERE_P_1 = new CustomLevel(\"SEVERE_P_1\", java.util.logging.Level.SEVERE.intValue() + 1);\n+        static CustomLevel SEVERE_M_1 = new CustomLevel(\"SEVERE_M_1\", java.util.logging.Level.SEVERE.intValue() - 1);\n+\n+        static CustomLevel OFF_M_1 = new CustomLevel(\"OFF_M_1\", java.util.logging.Level.OFF.intValue() - 1);\n+\n+        protected CustomLevel(String name, int value) {\n+            super(name, value);\n+        }\n+    }\n+\n+    private DefaultLevelConverter converter = new DefaultLevelConverter();\n+\n+    @Test\n+    public void testCustomJulLevelNearAll() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(java.util.logging.Level.ALL));\n+        // Test:\n+        Assert.assertEquals(Level.ALL, converter.toLevel(CustomLevel.ALL_P_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFinest() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(java.util.logging.Level.FINEST));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_P_1));\n+        Assert.assertEquals(LevelTranslator.FINEST, converter.toLevel(CustomLevel.FINEST_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFiner() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(java.util.logging.Level.FINER));\n+        // Test:\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_P_1));\n+        Assert.assertEquals(Level.TRACE, converter.toLevel(CustomLevel.FINER_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearFine() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(java.util.logging.Level.FINE));\n+        // Test:\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_P_1));\n+        Assert.assertEquals(Level.DEBUG, converter.toLevel(CustomLevel.FINE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearConfig() {\n+        // Sanity check:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(java.util.logging.Level.CONFIG));\n+        // Test:\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_P_1));\n+        Assert.assertEquals(LevelTranslator.CONFIG, converter.toLevel(CustomLevel.CONFIG_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearInfo() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(java.util.logging.Level.INFO));\n+        // Test:\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_P_1));\n+        Assert.assertEquals(Level.INFO, converter.toLevel(CustomLevel.INFO_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearWarning() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(java.util.logging.Level.WARNING));\n+        // Test:\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_P_1));\n+        Assert.assertEquals(Level.WARN, converter.toLevel(CustomLevel.WARNING_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearSevere() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(java.util.logging.Level.SEVERE));\n+        // Test:\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_P_1));\n+        Assert.assertEquals(Level.ERROR, converter.toLevel(CustomLevel.SEVERE_M_1));\n+    }\n+\n+    @Test\n+    public void testCustomJulLevelNearOff() {\n+        // Sanity check:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(java.util.logging.Level.OFF));\n+        // Test:\n+        Assert.assertEquals(Level.OFF, converter.toLevel(CustomLevel.OFF_M_1));\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3020dabcb83f59fd7394f90914b0e006faa216e6",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a96b455c4330dae86c1177ce526d09afa3892144/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=a96b455c4330dae86c1177ce526d09afa3892144",
                "patch": "@@ -33,6 +33,9 @@\n       <action issue=\"LOG4J2-1037\" dev=\"ggregory\" type=\"fix\" due-to=\"Marc Dergacz\">\n         Backward compatibility issue in log4j-1.2-api NDC pop() and peek().\n       </action>\n+      <action issue=\"LOG4J2-1025\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n+        Custom java.util.logging.Level gives null Log4j Level and causes NPE.\n+      </action>\n       <action issue=\"LOG4J2-1033\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St\u00e5ldal\">\n         SimpleLogger creates unnecessary Map objects by calling ThreadContext.getContext() instead of getImmutableContext().\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DefaultLevelConverter.java"
        ],
        "unit_tests": [
            "DefaultLevelConverterCustomJulLevelsTest.java"
        ]
    },
    "logging-log4j2_4520f95": {
        "repo": "logging-log4j2",
        "message": "Test null input and avoid NPEs.",
        "commit": "https://github.com/apache/logging-log4j2/commit/4520f95b47c6e484817449a7c1111337038afb5a",
        "parent": "https://github.com/apache/logging-log4j2/commit/142159be4449275d525d6b0939509b3e322b5258",
        "bug_id": "logging-log4j2_4520f95",
        "file": [
            {
                "sha": "599fd9a58350d5206f3561c1b110db54f3ae620c",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=4520f95b47c6e484817449a7c1111337038afb5a",
                "patch": "@@ -625,7 +625,7 @@ public synchronized void removeAppender(final String name) {\n      */\n     @Override\n     public LoggerConfig getLoggerConfig(final String name) {\n-        LoggerConfig loggerConfig = loggers.get(name);\n+        LoggerConfig loggerConfig = name == null ? null : loggers.get(name);\n         if (loggerConfig != null) {\n             return loggerConfig;\n         }",
                "deletions": 1
            },
            {
                "sha": "4d4cfcc186ee1ec1470731bdc1c5bacde307d209",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/NameUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/NameUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/main/java/org/apache/logging/log4j/core/util/NameUtil.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/util/NameUtil.java?ref=4520f95b47c6e484817449a7c1111337038afb5a",
                "patch": "@@ -31,7 +31,7 @@ private NameUtil() {\n     }\n \n     public static String getSubName(final String name) {\n-        if (name.isEmpty()) {\n+        if (Strings.isEmpty(name)) {\n             return null;\n         }\n         final int i = name.lastIndexOf('.');",
                "deletions": 1
            },
            {
                "sha": "46d569a0728a78a9453c55cbf927580ce9f89ea1",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/4520f95b47c6e484817449a7c1111337038afb5a/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationTest.java?ref=4520f95b47c6e484817449a7c1111337038afb5a",
                "patch": "@@ -99,6 +99,12 @@ public void testConfiguredAppenders() throws Exception {\n         assertThat(appenders.size(), is(equalTo(3)));\n     }\n \n+    @Test\n+    public void testGetLoggerConfigNull() throws Exception {\n+        final Configuration config = this.ctx.getConfiguration();\n+        assertEquals(config.getRootLogger(), config.getLoggerConfig(null));\n+    }\n+    \n     @Test\n     public void testLogger() throws Exception {\n         final Logger logger = this.ctx.getLogger(LOGGER_NAME);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "NameUtil.java",
            "Configuration.java",
            "AbstractConfiguration.java"
        ],
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "logging-log4j2_ff18a2b": {
        "repo": "logging-log4j2",
        "message": "LOG4J-462, LOG4J-465 Log4jLogEvent constructor and RingBufferLogEvent#getLevel convert null Level to Level.OFF to prevent NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1555339 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/ff18a2b768d0782d05e0a197e2d918216e636aa3",
        "parent": "https://github.com/apache/logging-log4j2/commit/682403c5067c0a2ef21e528f308edadef0a992e1",
        "bug_id": "logging-log4j2_ff18a2b",
        "file": [
            {
                "sha": "22ab2e51cec9f01318fd18882560aacc99cbd569",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "patch": "@@ -143,6 +143,9 @@ public String getFQCN() {\n \n     @Override\n     public Level getLevel() {\n+        if (level == null) {\n+            level = Level.OFF; // LOG4J2-462, LOG4J2-465\n+        }\n         return level;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "046655f1ca728cdea30b0e84d356bb31a46db294",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "patch": "@@ -158,7 +158,7 @@ private Log4jLogEvent(final String loggerName, final Marker marker, final String\n         name = loggerName;\n         this.marker = marker;\n         this.fqcnOfLogger = fqcn;\n-        this.level = level;\n+        this.level = (level == null) ? Level.OFF : level; // LOG4J2-462, LOG4J2-465\n         this.message = message;\n         this.throwable = t;\n         this.mdc = mdc;",
                "deletions": 1
            },
            {
                "sha": "7d3bb6d4b91d6a78cca75e4e6cda8f2867be47cc",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java",
                "status": "added",
                "changes": 148,
                "additions": 148,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/async/RingBufferLogEventTest.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "patch": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.async;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.ThreadContext.ContextStack;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.message.TimestampMessage;\n+import org.junit.Test;\n+\n+/**\n+ * Tests the RingBufferLogEvent class.\n+ */\n+public class RingBufferLogEventTest {\n+\n+    @Test\n+    public void testGetLevelReturnsOffIfNullLevelSet() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 0;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(Level.OFF, evt.getLevel());\n+    }\n+\n+    @Test\n+    public void testGetMessageReturnsNonNullMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 0;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertNotNull(evt.getMessage());\n+    }\n+\n+    @Test\n+    public void testGetMillisReturnsConstructorMillisForNormalMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = null;\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 123;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(123, evt.getMillis());\n+    }\n+\n+    static class TimeMsg implements Message, TimestampMessage {\n+        private static final long serialVersionUID = -2038413535672337079L;\n+        private final String msg;\n+        private final long timestamp;\n+\n+        public TimeMsg(String msg, long timestamp) {\n+            this.msg = msg;\n+            this.timestamp = timestamp;\n+        }\n+\n+        @Override\n+        public long getTimestamp() {\n+            return timestamp;\n+        }\n+\n+        @Override\n+        public String getFormattedMessage() {\n+            return msg;\n+        }\n+\n+        @Override\n+        public String getFormat() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object[] getParameters() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Throwable getThrowable() {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    public void testGetMillisReturnsMsgTimestampForTimestampMessage() {\n+        RingBufferLogEvent evt = new RingBufferLogEvent();\n+        String loggerName = null;\n+        Marker marker = null;\n+        String fqcn = null;\n+        Level level = null;\n+        Message data = new TimeMsg(\"\", 567);\n+        Throwable t = null;\n+        Map<String, String> map = null;\n+        ContextStack contextStack = null;\n+        String threadName = null;\n+        StackTraceElement location = null;\n+        long currentTimeMillis = 123;\n+        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,\n+                contextStack, threadName, location, currentTimeMillis);\n+        assertEquals(567, evt.getMillis());\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "28a1c9e2b093befa27a02df7f7273576cb703532",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/impl/Log4jLogEventTest.java?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "patch": "@@ -24,10 +24,21 @@\n import java.io.ObjectOutputStream;\n \n import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n import org.apache.logging.log4j.message.SimpleMessage;\n import org.junit.Test;\n \n public class Log4jLogEventTest {\n+    \n+    @Test\n+    public void testNullLevelReplacedWithOFF() throws Exception {\n+        final Marker marker = null;\n+        final Throwable t = null;\n+        final Level NULL_LEVEL = null;\n+        final Log4jLogEvent evt = new Log4jLogEvent(\"some.test\", marker, \"\",\n+                NULL_LEVEL, new SimpleMessage(\"abc\"), t);\n+        assertEquals(Level.OFF, evt.getLevel());\n+    }\n \n     @Test\n     public void testJavaIoSerializable() throws Exception {",
                "deletions": 0
            },
            {
                "sha": "aa50a52c2a871abe1506cee0117ec38cf93ee974",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/ff18a2b768d0782d05e0a197e2d918216e636aa3/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/ff18a2b768d0782d05e0a197e2d918216e636aa3/src/changes/changes.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=ff18a2b768d0782d05e0a197e2d918216e636aa3",
                "patch": "@@ -21,6 +21,12 @@\n   </properties>\n   <body>\n     <release version=\"2.0-RC1\" date=\"2013-MM-DD\" description=\"Bug fixes and enhancements\">\n+      <action issue=\"LOG4J2-462\" dev=\"rpopma\" type=\"fix\" due-to=\"Daisuke Baba\">\n+        Fix LogEvent to never return null Level, fixes LevelPatternConverter.format may throw NPE.\n+      </action>\n+      <action issue=\"LOG4J2-465\" dev=\"rpopma\" type=\"fix\" due-to=\"Daisuke Baba\">\n+        Fix LogEvent to never return null Level, fixes ThresholdFilter throws NPE.\n+      </action>\n       <action issue=\"LOG4J2-471\" dev=\"rpopma\" type=\"fix\" due-to=\"Anthony Baldocchi\">\n         Fixed issue where toString methods that perform logging could deadlock AsyncLogger.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "RingBufferLogEvent.java",
            "Log4jLogEvent.java"
        ],
        "unit_tests": [
            "RingBufferLogEventTest.java",
            "Log4jLogEventTest.java"
        ]
    },
    "logging-log4j2_793da5e": {
        "repo": "logging-log4j2",
        "message": "Replace if-null-test-then-throw-NPE pattern with Java 7's\nObjects.requireNonNull() API.",
        "commit": "https://github.com/apache/logging-log4j2/commit/793da5e51d1fea9e024dc42357bea700c224fb3c",
        "parent": "https://github.com/apache/logging-log4j2/commit/0de636c139c367dedeccd8e7acf9a41511f22a04",
        "bug_id": "logging-log4j2_793da5e",
        "file": [
            {
                "sha": "b20a5ffa145b37ee82d5cbcacfdd46f72064c997",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-api/src/main/java/org/apache/logging/log4j/Level.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/Level.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Locale;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -276,9 +277,7 @@ public static Level toLevel(final String name, final Level defaultLevel) {\n      * @throws java.lang.IllegalArgumentException if the Level name is not registered.\n      */\n     public static Level valueOf(final String name) {\n-        if (name == null) {\n-            throw new NullPointerException(\"No level name given.\");\n-        }\n+    \tObjects.requireNonNull(name, \"No level name given.\");\n         final String levelName = name.toUpperCase(Locale.ENGLISH);\n         if (levels.containsKey(levelName)) {\n             return levels.get(levelName);",
                "deletions": 3
            },
            {
                "sha": "8b1c848ff61cf6b1801e398d8dc7e893e51853a7",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RolloverDescriptionImpl.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.logging.log4j.core.appender.rolling;\n \n+import java.util.Objects;\n+\n import org.apache.logging.log4j.core.appender.rolling.action.Action;\n \n /**\n@@ -55,9 +57,7 @@\n      */\n     public RolloverDescriptionImpl(final String activeFileName, final boolean append, final Action synchronous,\n                                    final Action asynchronous) {\n-        if (activeFileName == null) {\n-            throw new NullPointerException(\"activeFileName\");\n-        }\n+        Objects.requireNonNull(activeFileName, \"activeFileName\");\n \n         this.append = append;\n         this.activeFileName = activeFileName;",
                "deletions": 3
            },
            {
                "sha": "e3f2b27a0611dbdf58509c5b328282fa81830787",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/Bzip2CompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n \n@@ -55,13 +56,8 @@\n      *            to be thrown or affect return value.\n      */\n     public Bzip2CompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "deletions": 7
            },
            {
                "sha": "61fb9872f3d9dd213ea7c32b601cff27b482c8a1",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.GZIPOutputStream;\n \n /**\n@@ -54,13 +55,8 @@\n      *                     does not cause an exception to be thrown or affect return value.\n      */\n     public GzCompressAction(final File source, final File destination, final boolean deleteSource) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "deletions": 7
            },
            {
                "sha": "5a61270954bfa3f5de9f9eda4d4e1c8e58065d5b",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n@@ -61,13 +62,8 @@\n      * @param level TODO\n      */\n     public ZipCompressAction(final File source, final File destination, final boolean deleteSource, final int level) {\n-        if (source == null) {\n-            throw new NullPointerException(\"source\");\n-        }\n-\n-        if (destination == null) {\n-            throw new NullPointerException(\"destination\");\n-        }\n+        Objects.requireNonNull(source, \"source\");\n+        Objects.requireNonNull(destination, \"destination\");\n \n         this.source = source;\n         this.destination = destination;",
                "deletions": 7
            },
            {
                "sha": "ff4e25bb51970a9eb21c1b262c355fc0214d447b",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -39,6 +39,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n@@ -121,9 +122,7 @@ private PluginElementVisitor(final Elements elements) {\n \n         @Override\n         public PluginEntry visitType(final TypeElement e, final Plugin plugin) {\n-            if (plugin == null) {\n-                throw new NullPointerException(\"Plugin annotation is null.\");\n-            }\n+            Objects.requireNonNull(plugin, \"Plugin annotation is null.\");\n             final PluginEntry entry = new PluginEntry();\n             entry.setKey(plugin.name().toLowerCase());\n             entry.setClassName(elements.getBinaryName(e).toString());",
                "deletions": 3
            },
            {
                "sha": "03edbdc33938cae44e1333df2ca3751b9e7fd258",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/DynamicThresholdFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -72,9 +73,7 @@ public static DynamicThresholdFilter createFilter(\n     private DynamicThresholdFilter(final String key, final Map<String, Level> pairs, final Level defaultLevel,\n                                    final Result onMatch, final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (key == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(key, \"key cannot be null\");\n         this.key = key;\n         this.levelMap = pairs;\n         this.defaultThreshold = defaultLevel;",
                "deletions": 3
            },
            {
                "sha": "89ecfe614fa92e6c86972c55432cb3bcc11f1f58",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/filter/MapFilter.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -50,9 +51,7 @@\n     protected MapFilter(final Map<String, List<String>> map, final boolean oper, final Result onMatch,\n                         final Result onMismatch) {\n         super(onMatch, onMismatch);\n-        if (map == null) {\n-            throw new NullPointerException(\"key cannot be null\");\n-        }\n+        Objects.requireNonNull(map, \"map cannot be null\");\n         this.isAnd = oper;\n         this.map = map;\n     }",
                "deletions": 3
            },
            {
                "sha": "e57aa2eb1fab394cd2bcced4bb4a779391e6a7d0",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.Marker;\n@@ -435,9 +436,7 @@ public static boolean canDeserialize(final Serializable event) {\n     }\n \n     public static Log4jLogEvent deserialize(final Serializable event) {\n-        if (event == null) {\n-            throw new NullPointerException(\"Event cannot be null\");\n-        }\n+        Objects.requireNonNull(event, \"Event cannot be null\");\n         if (event instanceof LogEventProxy) {\n             final LogEventProxy proxy = (LogEventProxy) event;\n             final Log4jLogEvent result = new Log4jLogEvent(proxy.loggerName, proxy.marker,",
                "deletions": 3
            },
            {
                "sha": "28d4180502e7eed9cb9d4828fd45c91744144200",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/793da5e51d1fea9e024dc42357bea700c224fb3c/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java?ref=793da5e51d1fea9e024dc42357bea700c224fb3c",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n /**\n  * Most of the work of the {@link org.apache.logging.log4j.core.layout.PatternLayout} class is delegated to the\n@@ -303,9 +304,7 @@ private static int extractOptions(final String pattern, final int start, final L\n     public void parse(final String pattern, final List<PatternConverter> patternConverters,\n             final List<FormattingInfo> formattingInfos, final boolean noConsoleNoAnsi,\n             final boolean convertBackslashes) {\n-        if (pattern == null) {\n-            throw new NullPointerException(\"pattern\");\n-        }\n+        Objects.requireNonNull(pattern, \"pattern\");\n \n         final StringBuilder currentLiteral = new StringBuilder(BUF_SIZE);\n ",
                "deletions": 3
            }
        ],
        "patched_files": [
            "DynamicThresholdFilter.java",
            "PatternParser.java",
            "Level.java",
            "Log4jLogEvent.java",
            "MapFilter.java",
            "Bzip2CompressAction.java",
            "PluginProcessor.java"
        ],
        "unit_tests": [
            "PatternParserTest.java",
            "Bzip2CompressActionTest.java",
            "Log4jLogEventTest.java",
            "PluginProcessorTest.java",
            "LevelTest.java",
            "DynamicThresholdFilterTest.java",
            "MapFilterTest.java"
        ]
    },
    "logging-log4j2_91f041e": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-2770] NullPointerException after reconfiguring via JMX.",
        "commit": "https://github.com/apache/logging-log4j2/commit/91f041e40c68042ffe422bff0b90d329e49c7b36",
        "parent": "https://github.com/apache/logging-log4j2/commit/e140f165b06bf21e14718da5221fe0fa3d9fc82b",
        "bug_id": "logging-log4j2_91f041e",
        "file": [
            {
                "sha": "180043d9aeeaf797af5f50734334d1b366ab38ef",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/91f041e40c68042ffe422bff0b90d329e49c7b36/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/91f041e40c68042ffe422bff0b90d329e49c7b36/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationSource.java?ref=91f041e40c68042ffe422bff0b90d329e49c7b36",
                "patch": "@@ -141,7 +141,7 @@ public ConfigurationSource(final Source source, final byte[] data, long lastModi\n     }\n \n     private ConfigurationSource(final byte[] data, final URL url, long lastModified) {\n-        Objects.requireNonNull(data, \"data is null\");\n+        this.data = Objects.requireNonNull(data, \"data is null\");\n         this.stream = new ByteArrayInputStream(data);\n         this.file = null;\n         this.url = url;",
                "deletions": 1
            },
            {
                "sha": "5ca42f2e55f851c559a33fd2839610a7a96f7c8e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationSourceTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/91f041e40c68042ffe422bff0b90d329e49c7b36/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationSourceTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/91f041e40c68042ffe422bff0b90d329e49c7b36/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationSourceTest.java",
                "status": "added",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/ConfigurationSourceTest.java?ref=91f041e40c68042ffe422bff0b90d329e49c7b36",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.config;\n+\n+import java.io.ByteArrayInputStream;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ConfigurationSourceTest {\n+\n+    @Test\n+    public void testJira_LOG4J2_2770_byteArray() throws Exception {\n+        ConfigurationSource configurationSource = new ConfigurationSource(\n+                new ByteArrayInputStream(new byte[] { 'a', 'b' }));\n+        Assert.assertNotNull(configurationSource.resetInputStream());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "68449fbef8f9e4007eb550a93412b1f0e2d454e1",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/91f041e40c68042ffe422bff0b90d329e49c7b36/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/91f041e40c68042ffe422bff0b90d329e49c7b36/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=91f041e40c68042ffe422bff0b90d329e49c7b36",
                "patch": "@@ -205,6 +205,9 @@\n       <action issue=\"LOG4J2-2762\" dev=\"ggregory\" type=\"fix\" due-to=\"Gary Gregory\">\n         [JDBC] MS-SQL Server JDBC driver throws SQLServerException when inserting a null value for a VARBINARY column.\n       </action>\n+      <action issue=\"LOG4J2-2770\" dev=\"ggregory\" type=\"fix\" due-to=\"Bill Kuker\">\n+        NullPointerException after reconfiguring via JMX.\n+      </action>\n     </release>\n     <release version=\"2.13.0\" date=\"2019-12-11\" description=\"GA Release 2.13.0\">\n       <action issue=\"LOG4J2-2058\" dev=\"rgoers\" type=\"fix\">",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ConfigurationSource.java"
        ],
        "unit_tests": [
            "ConfigurationSourceTest.java"
        ]
    },
    "logging-log4j2_2eb02c8": {
        "repo": "logging-log4j2",
        "message": "[LOG4J2-1687] NPE in ThrowableProxy when resolving stack in Java EE/OSGi\nenvironment.",
        "commit": "https://github.com/apache/logging-log4j2/commit/2eb02c8276ea774e669dc1bc732be690a10f3c85",
        "parent": "https://github.com/apache/logging-log4j2/commit/18889185619b8fa634a67e1450c6ee6348e9d599",
        "bug_id": "logging-log4j2_2eb02c8",
        "file": [
            {
                "sha": "4dd19682cc0106b8850b3521eb516bfe52ea7072",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ThrowableProxy.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "patch": "@@ -30,6 +30,7 @@\n \n import org.apache.logging.log4j.core.pattern.PlainTextRenderer;\n import org.apache.logging.log4j.core.pattern.TextRenderer;\n+import org.apache.logging.log4j.core.util.Loader;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.util.LoaderUtil;\n import org.apache.logging.log4j.util.ReflectionUtil;\n@@ -556,7 +557,7 @@ private boolean ignoreElement(final StackTraceElement element, final List<String\n \n     private Class<?> loadClass(final String className) {\n         try {\n-            return this.getClass().getClassLoader().loadClass(className);\n+            return Loader.loadClass(className,this.getClass().getClassLoader());\n         } catch (final ClassNotFoundException | NoClassDefFoundError | SecurityException e) {\n             return null;\n         }",
                "deletions": 1
            },
            {
                "sha": "d1013f72952bcf902b816e1ac0ff1f250b68dedd",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "patch": "@@ -227,6 +227,19 @@ private static boolean isChild(final ClassLoader loader1, final ClassLoader load\n         return Class.forName(className, true, loader);\n     }\n \n+    /**\n+     * Loads a named Class using a given ClassLoader.\n+     *\n+     * @param className The class name.\n+     * @param loader The class loader.\n+     * @return The class, or null if loader is null.\n+     * @throws ClassNotFoundException if the class could not be found.\n+     */\n+    public static Class<?> loadClass(final String className, final ClassLoader loader)\n+            throws ClassNotFoundException {\n+        return loader != null ? loader.loadClass(className) : null;\n+    }    \n+    \n     /**\n      * Load a Class in the {@code java.*} namespace by name. Useful for peculiar scenarios typically involving\n      * Google App Engine.",
                "deletions": 0
            },
            {
                "sha": "c97d3b6cb42da97de3250d1c2b6abda123c0d37c",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/util/LoaderTest.java?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+\n+package org.apache.logging.log4j.core.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests the Loader class.\n+ */\n+public class LoaderTest {\n+\n+    @Test\n+    public void testLoadClassWithNullClassloaderReturnNull() throws Exception {\n+        assertNull(\"Expect null return value for null ClassLoader.\",\n+                Loader.loadClass(Loader.class.getCanonicalName(), null));\n+    }\n+\n+    @Test\n+    public void testLoadClassReturnClassForExistingClass() throws Exception {\n+        assertEquals(\"Expect Class return value for null ClassLoader.\", Loader.class,\n+                Loader.loadClass(Loader.class.getCanonicalName(), Loader.getClassLoader()));\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "a6279b26c79ebca1841058cce7a7ee470e676c3e",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/2eb02c8276ea774e669dc1bc732be690a10f3c85/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/2eb02c8276ea774e669dc1bc732be690a10f3c85/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=2eb02c8276ea774e669dc1bc732be690a10f3c85",
                "patch": "@@ -144,6 +144,9 @@\n       <action issue=\"LOG4J2-1664\" dev=\"ggregory\" type=\"fix\" due-to=\"Ludovic HOCHET\">\n         Improve OSGi unit tests.\n       </action>\n+      <action issue=\"LOG4J2-1687\" dev=\"ggregory\" type=\"fix\" due-to=\"Robert Christiansen\">\n+        NPE in ThrowableProxy when resolving stack in Java EE/OSGi environment.\n+      </action>\n       <action issue=\"LOG4J2-1644\" dev=\"ggregory\" type=\"update\" due-to=\"Tim Gokcen, Pavel Sivolobtchik\">\n         Inefficient locking in AbstractLoggerAdapter.\n       </action>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ThrowableProxy.java",
            "Loader.java"
        ],
        "unit_tests": [
            "LoaderTest.java",
            "ThrowableProxyTest.java"
        ]
    },
    "logging-log4j2_a05730d": {
        "repo": "logging-log4j2",
        "message": "Migrate PatternLayout to use Builder class.\n\n  - Replaced usages of createCustomLayout() with custom()...build() \n  chains.\n  - Updated DefaultConfiguration to use the builder without causing \n  an infinite recursion loop.\n  - Fall back to a new DefaultConfiguration() in case no \n  Configuration is specified in builder (can help prevent NPEs where \n  config is assumed non-null).\n  - Noted where code is duplicated between DefaultConfiguration and \n  AbstractConfiguration.\n  - Deleted the createCustomLayout() methods from PatternLayout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1597494 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
        "parent": "https://github.com/apache/logging-log4j2/commit/36264bd2864632168c1989f4eb89ed23753d8e70",
        "bug_id": "logging-log4j2_a05730d",
        "file": [
            {
                "sha": "83328cf4cc4804676276c0e21d36618a3144afc6",
                "filename": "log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-1.2-api/src/test/java/org/apache/log4j/CategoryTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -161,7 +161,7 @@ public void testSetPriority() {\n     @Test\n     public void testClassName() {\n         final Category category = Category.getInstance(\"TestCategory\");\n-        final Layout<String> layout = PatternLayout.createCustomLayout(\"%d %p %C{1.} [%t] %m%n\");\n+        final Layout<String> layout = PatternLayout.custom().withPattern(\"%d %p %C{1.} [%t] %m%n\").build();\n         final ListAppender appender = new ListAppender(\"List2\", null, layout, false, false);\n         appender.start();\n         category.setAdditivity(false);",
                "deletions": 1
            },
            {
                "sha": "c61cef82525e2db830e7b435ed0f6e281d51e230",
                "filename": "log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-1.2-api/src/test/java/org/apache/log4j/LoggerTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -456,7 +456,7 @@ public void testIsTraceEnabled() {\n     @Test\n     @SuppressWarnings(\"deprecation\")\n     public void testLog() {\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d %C %L %m\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%d %C %L %m\").build();\n         final ListAppender appender = new ListAppender(\"List\", null, layout, false, false);\n         appender.start();\n         final Logger root = Logger.getRootLogger();",
                "deletions": 1
            },
            {
                "sha": "1f9454eb13e49610c914909947bba5401662929d",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/db/jdbc/ColumnConfig.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -129,10 +129,13 @@ public static ColumnConfig createColumnConfig(\n             return new ColumnConfig(name, null, literalValue, false, false, false);\n         }\n         if (isPattern) {\n-            return new ColumnConfig(\n-                    name, PatternLayout.createLayout(pattern, config, null, null, false, false, null, null), null,\n-                    false, isUnicode, isClob\n-            );\n+            final PatternLayout layout =\n+                PatternLayout.custom()\n+                    .withPattern(pattern)\n+                    .withConfiguration(config)\n+                    .withAlwaysWriteExceptions(false)\n+                    .build();\n+            return new ColumnConfig(name, layout, null, false, isUnicode, isClob);\n         }\n \n         LOGGER.error(\"To configure a column you must specify a pattern or literal or set isEventDate to true.\");",
                "deletions": 4
            },
            {
                "sha": "790819cb9164011538ee73a0a92c9c90d93acd60",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -166,7 +166,7 @@ public void start() {\n     public void stop() {\n         this.setStopping();\n         LOGGER.trace(\"AbstractConfiguration stopping...\");\n-        \n+\n         // LOG4J2-392 first stop AsyncLogger Disruptor thread\n         final LoggerContextFactory factory = LogManager.getFactory();\n         if (factory instanceof Log4jContextFactory) {\n@@ -376,9 +376,12 @@ protected void doConfigure() {\n     }\n \n     private void setToDefault() {\n+        // TODO: reduce duplication between this method and DefaultConfiguration constructor\n         setName(DefaultConfiguration.DEFAULT_NAME);\n-        final Layout<? extends Serializable> layout =\n-                PatternLayout.createCustomLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\");\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(DefaultConfiguration.DEFAULT_PATTERN)\n+            .withConfiguration(this)\n+            .build();\n         final Appender appender = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",\n             \"true\");\n         appender.start();",
                "deletions": 3
            },
            {
                "sha": "22bcb3a7671a2dd43c0d481a072bac39e6794093",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -52,8 +52,10 @@\n     public DefaultConfiguration() {\n \n         setName(DEFAULT_NAME);\n-        final Layout<? extends Serializable> layout =\n-                PatternLayout.createCustomLayout(DEFAULT_PATTERN);\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(DEFAULT_PATTERN)\n+            .withConfiguration(this)\n+            .build();\n         final Appender appender =\n                 ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         appender.start();",
                "deletions": 2
            },
            {
                "sha": "f67d12307a9c4be5f0de128be0f7ac4574f888e9",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java",
                "status": "modified",
                "changes": 112,
                "additions": 93,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -23,12 +23,15 @@\n \n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.DefaultConfiguration;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n+import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;\n import org.apache.logging.log4j.core.config.plugins.PluginConfiguration;\n import org.apache.logging.log4j.core.config.plugins.PluginDefault;\n import org.apache.logging.log4j.core.config.plugins.PluginElement;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.config.plugins.util.ConfigurablePluginBuilder;\n import org.apache.logging.log4j.core.pattern.LogEventPatternConverter;\n import org.apache.logging.log4j.core.pattern.PatternFormatter;\n import org.apache.logging.log4j.core.pattern.PatternParser;\n@@ -176,7 +179,7 @@ public void setConversionPattern(final String conversionPattern) {\n \n     /**\n      * Gets the conversion pattern.\n-     * \n+     *\n      * @return the conversion pattern.\n      */\n     public String getConversionPattern() {\n@@ -245,7 +248,7 @@ public String toString() {\n \n     /**\n      * Create a pattern layout.\n-     * \n+     *\n      * @param pattern\n      *        The pattern. If not specified, defaults to DEFAULT_CONVERSION_PATTERN.\n      * @param config\n@@ -286,30 +289,101 @@ public static PatternLayout createLayout(\n      * @see #DEFAULT_CONVERSION_PATTERN Default conversion pattern\n      */\n     public static PatternLayout createDefaultLayout() {\n-        return createCustomLayout(DEFAULT_CONVERSION_PATTERN);\n+        return custom().build();\n     }\n \n     /**\n-     * Creates a PatternLayout using a custom layout and the default options elsewhere.\n-     *\n-     * @param layout the conversion pattern layout to use.\n-     * @return the PatternLayout.\n+     * Creates a builder for a custom PatternLayout.\n+     * @return a PatternLayout builder.\n      */\n-    public static PatternLayout createCustomLayout(final String layout) {\n-        return createCustomLayout(layout, null);\n+    @PluginBuilderFactory\n+    public static Builder custom() {\n+        return new Builder();\n     }\n \n     /**\n-     * Creates a PatternLayout using a specific Configuration, custom pattern conversion layout, and default options\n-     * for everything else.\n-     *\n-     * @param layout the conversion pattern layout to use.\n-     * @param config The Configuration. Some Converters require access to the Interpolator.\n-     * @return the PatternLayout.\n+     * Custom PatternLayout builder. Use the {@link PatternLayout#custom() builder factory method} to create this.\n      */\n-    public static PatternLayout createCustomLayout(final String layout, final Configuration config) {\n-        return new PatternLayout(\n-            config, null, layout, Charsets.UTF_8, true, false, null, null\n-        );\n+    public static class Builder implements ConfigurablePluginBuilder<PatternLayout> {\n+\n+        @PluginAttribute(\"pattern\")\n+        private String pattern = PatternLayout.DEFAULT_CONVERSION_PATTERN;\n+\n+        @PluginConfiguration\n+        private Configuration configuration = null;\n+\n+        @PluginElement(\"Replace\")\n+        private RegexReplacement regexReplacement = null;\n+\n+        @PluginAttribute(\"charset\")\n+        private Charset charset = Charsets.UTF_8;\n+\n+        @PluginAttribute(\"alwaysWriteExceptions\")\n+        private boolean alwaysWriteExceptions = true;\n+\n+        @PluginAttribute(\"noConsoleNoAnsi\")\n+        private boolean noConsoleNoAnsi = false;\n+\n+        @PluginAttribute(\"header\")\n+        private String header = null;\n+\n+        @PluginAttribute(\"footer\")\n+        private String footer = null;\n+\n+        private Builder() {\n+        }\n+\n+        // TODO: move javadocs from PluginFactory to here\n+\n+        public Builder withPattern(final String pattern) {\n+            this.pattern = pattern;\n+            return this;\n+        }\n+\n+\n+        public Builder withConfiguration(final Configuration configuration) {\n+            this.configuration = configuration;\n+            return this;\n+        }\n+\n+        public Builder withRegexReplacement(final RegexReplacement regexReplacement) {\n+            this.regexReplacement = regexReplacement;\n+            return this;\n+        }\n+\n+        public Builder withCharset(final Charset charset) {\n+            this.charset = charset;\n+            return this;\n+        }\n+\n+        public Builder withAlwaysWriteExceptions(final boolean alwaysWriteExceptions) {\n+            this.alwaysWriteExceptions = alwaysWriteExceptions;\n+            return this;\n+        }\n+\n+        public Builder withNoConsoleNoAnsi(final boolean noConsoleNoAnsi) {\n+            this.noConsoleNoAnsi = noConsoleNoAnsi;\n+            return this;\n+        }\n+\n+        public Builder withHeader(final String header) {\n+            this.header = header;\n+            return this;\n+        }\n+\n+        public Builder withFooter(final String footer) {\n+            this.footer = footer;\n+            return this;\n+        }\n+\n+        @Override\n+        public PatternLayout build() {\n+            // fall back to DefaultConfiguration\n+            if (configuration == null) {\n+                configuration = new DefaultConfiguration();\n+            }\n+            return new PatternLayout(configuration, regexReplacement, pattern, charset, alwaysWriteExceptions,\n+                noConsoleNoAnsi, header, footer);\n+        }\n     }\n }",
                "deletions": 19
            },
            {
                "sha": "dd64824a7953c15c594e3c107cd5dc2b0c5486fc",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/appender/FileAppenderTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -66,7 +66,7 @@ public void testAppender() throws Exception {\n \n     @Test\n     public void testSmallestBufferSize() throws Exception {\n-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);\n+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();\n         final String bufferSizeStr = \"1\";\n         final FileAppender appender = FileAppender.createAppender(FILENAME, \"true\", \"false\", \"test\", \"false\", \"false\",\n                 \"false\", bufferSizeStr, layout, null, \"false\", null, null);\n@@ -160,7 +160,7 @@ public void testMultipleVMs() throws Exception {\n     }\n \n     private static void writer(final boolean lock, final int count, final String name) throws Exception {\n-        final Layout<String> layout = PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN);\n+        final Layout<String> layout = PatternLayout.custom().withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN).build();\n         final FileAppender app = FileAppender.createAppender(FILENAME, \"true\", Boolean.toString(lock), \"test\", \"false\",\n                 \"false\", \"false\", null, layout, null, \"false\", null, null);\n         app.start();",
                "deletions": 2
            },
            {
                "sha": "b86331676d571f08800f811b4e26d3f775d6932e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -72,8 +72,10 @@ public void testConfig() {\n                 break;\n             }\n         }\n-        final Layout<? extends Serializable> layout =\n-            PatternLayout.createCustomLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, config);\n+        final Layout<? extends Serializable> layout = PatternLayout.custom()\n+            .withPattern(PatternLayout.SIMPLE_CONVERSION_PATTERN)\n+            .withConfiguration(config)\n+            .build();\n         Appender appender = FileAppender.createAppender(LOG_FILE, \"false\", \"false\", \"File\", \"true\",\n             \"false\", \"false\", \"4000\", layout, null, \"false\", null, config);\n         appender.start();",
                "deletions": 2
            },
            {
                "sha": "6a960939d50595079061b625487daf8f3b1b5d4e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/layout/PatternLayoutTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -84,7 +84,10 @@ public void mdcPattern() throws Exception {\n         }\n \n         // set up appender\n-        final PatternLayout layout = PatternLayout.createCustomLayout(msgPattern, ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(msgPattern)\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         // FileOutputStream fos = new FileOutputStream(OUTPUT_FILE + \"_mdc\");\n         final FileAppender appender = FileAppender.createAppender(OUTPUT_FILE + \"_mdc\", \"false\", \"false\", \"File\",\n                 \"false\", \"true\", \"false\", null, layout, null, \"false\", null, null);\n@@ -150,7 +153,10 @@ public void mdcPattern() throws Exception {\n     @Test\n     public void testRegex() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(regexPattern, ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(regexPattern)\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world!\"), null);\n         final byte[] result = layout.toByteArray(event);\n@@ -159,7 +165,10 @@ public void testRegex() throws Exception {\n \n     private void testUnixTime(String pattern) throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(pattern + \" %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(pattern + \" %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -175,7 +184,10 @@ private void testUnixTime(String pattern) throws Exception {\n     @Test\n     public void testUnixTime() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d{UNIX} %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -191,7 +203,10 @@ public void testUnixTime() throws Exception {\n     @Test\n     public void testUnixTimeMillis() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%d{UNIX_MILLIS} %m\", ctx.getConfiguration());\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX_MILLIS} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .build();\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,\n                 \"org.apache.logging.log4j.core.Logger\", Level.INFO, new SimpleMessage(\"Hello, world 1!\"), null);\n         final byte[] result1 = layout.toByteArray(event1);\n@@ -207,8 +222,12 @@ public void testUnixTimeMillis() throws Exception {\n     @Test\n     public void testHeaderFooter() throws Exception {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final PatternLayout layout = PatternLayout\n-            .createLayout(\"%d{UNIX} %m\", ctx.getConfiguration(), null, null, true, false, \"${ctx:header}\", \"${ctx:footer}\");\n+        final PatternLayout layout = PatternLayout.custom()\n+            .withPattern(\"%d{UNIX} %m\")\n+            .withConfiguration(ctx.getConfiguration())\n+            .withHeader(\"${ctx:header}\")\n+            .withFooter(\"${ctx:footer}\")\n+            .build();\n         ThreadContext.put(\"header\", \"Hello world Header\");\n         ThreadContext.put(\"footer\", \"Hello world Footer\");\n         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,",
                "deletions": 7
            },
            {
                "sha": "d46a33e761165f7cda390a47b07caf0aa4d50f39",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsQueueTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -100,7 +100,7 @@ public void testServer() throws Exception {\n         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});\n         final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);\n         listApp.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         console.start();\n         final Logger serverLogger = ctx.getLogger(JmsTopicReceiver.class.getName());",
                "deletions": 1
            },
            {
                "sha": "a264a2dfdadbab2d7c76c7abbf557fb13f017a36",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/jms/JmsTopicTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -100,7 +100,7 @@ public void testServer() throws Exception {\n         final CompositeFilter serverFilters = CompositeFilter.createFilters(new Filter[]{serverFilter});\n         final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);\n         listApp.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console =\n                 ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");\n         console.start();",
                "deletions": 1
            },
            {
                "sha": "d839f82eeff99b286b9edd8935af31768d56347a",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/a05730d4cbf926ec8c7b5896cae9fc537f81caa8/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java?ref=a05730d4cbf926ec8c7b5896cae9fc537f81caa8",
                "patch": "@@ -173,7 +173,7 @@ protected void testServer(final String... messages) throws Exception {\n         socketAppender.start();\n         final ListAppender listAppender = new ListAppender(\"Events\", serverFilter, null, false, false);\n         listAppender.start();\n-        final PatternLayout layout = PatternLayout.createCustomLayout(\"%m %ex%n\");\n+        final PatternLayout layout = PatternLayout.custom().withPattern(\"%m %ex%n\").build();\n         final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",\n                 \"true\");\n         final Logger serverLogger = ctx.getLogger(this.getClass().getName());",
                "deletions": 1
            }
        ],
        "patched_files": [
            "DefaultConfiguration.java",
            "Category.java",
            "AbstractConfiguration.java",
            "ColumnConfig.java",
            "FileAppender.java",
            "Logger.java",
            "PatternLayout.java",
            "AbstractSocketServer.java"
        ],
        "unit_tests": [
            "CustomConfigurationTest.java",
            "JmsQueueTest.java",
            "FileAppenderTest.java",
            "JmsTopicTest.java",
            "ColumnConfigTest.java",
            "PatternLayoutTest.java",
            "LoggerTest.java",
            "AbstractSocketServerTest.java",
            "CategoryTest.java"
        ]
    },
    "logging-log4j2_eb04615": {
        "repo": "logging-log4j2",
        "message": "Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1399852 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/eb046150bf6d0b87a195f7808aebca3627222be6",
        "parent": "https://github.com/apache/logging-log4j2/commit/8bf770ea5fd0b4571c488cd68401479921c2ae41",
        "bug_id": "logging-log4j2_eb04615",
        "file": [
            {
                "sha": "8f050ee440f9944abf106c08ec2423945ed49530",
                "filename": "api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "status": "modified",
                "changes": 124,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -16,16 +16,19 @@\n  */\n package org.apache.logging.log4j;\n \n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.io.IOException;\n import java.net.URL;\n-import java.util.ArrayList;\n import java.util.Enumeration;\n-import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n \n /**\n  * The anchor point for the logging system.\n@@ -39,10 +42,13 @@\n     private static final String LOGGER_RESOURCE = \"META-INF/log4j-provider.xml\";\n     private static final String LOGGER_CONTEXT_FACTORY = \"LoggerContextFactory\";\n     private static final String API_VERSION = \"Log4jAPIVersion\";\n+    private static final String FACTORY_PRIORITY = \"FactoryPriority\";\n     private static final String[] COMPATIBLE_API_VERSIONS = {\n-        \"1.99.0\"\n+        \"2.0.0\"\n     };\n \n+    private static final String FACTORY_PROPERTY_NAME = \"log4j2.loggerContextFactory\";\n+\n     private static LoggerContextFactory factory;\n \n     private static final Logger logger = StatusLogger.getLogger();\n@@ -58,54 +64,85 @@ protected LogManager() {\n      * be used but this could be extended to allow multiple implementations to be used.\n      */\n     static {\n+        PropsUtil managerProps = new PropsUtil(\"log4j2.LogManager.properties\");\n+        String factoryClass = managerProps.getStringProperty(FACTORY_PROPERTY_NAME);\n         ClassLoader cl = findClassLoader();\n-        List<LoggerContextFactory> factories = new ArrayList<LoggerContextFactory>();\n-\n-        Enumeration<URL> enumResources = null;\n-        try {\n-            enumResources = cl.getResources(LOGGER_RESOURCE);\n-        } catch (IOException e) {\n-            logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+        if (factoryClass != null) {\n+            try {\n+                Class<?> clazz = cl.loadClass(factoryClass);\n+                if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                    factory = (LoggerContextFactory) clazz.newInstance();\n+                }\n+            } catch (ClassNotFoundException cnfe) {\n+                logger.error(\"Unable to locate configured LoggerContextFactory {}\", factoryClass);\n+            } catch (Exception ex) {\n+                logger.error(\"Unable to create configured LoggerContextFactory {}\", factoryClass, ex);\n+            }\n         }\n \n-        if (enumResources != null) {\n-            while (enumResources.hasMoreElements()) {\n-                Properties props = new Properties();\n-                URL url = enumResources.nextElement();\n-                try {\n-                    props.loadFromXML(url.openStream());\n-                } catch (IOException ioe) {\n-                    logger.error(\"Unable to read \" + url.toString(), ioe);\n-                }\n-                if (!validVersion(props.getProperty(API_VERSION))) {\n-                    continue;\n-                }\n-                String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n-                if (className != null) {\n+        if (factory == null) {\n+            SortedMap<Integer, LoggerContextFactory> factories = new TreeMap<Integer, LoggerContextFactory>();\n+\n+            Enumeration<URL> enumResources = null;\n+            try {\n+                enumResources = cl.getResources(LOGGER_RESOURCE);\n+            } catch (IOException e) {\n+                logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+            }\n+\n+            if (enumResources != null) {\n+                while (enumResources.hasMoreElements()) {\n+                    Properties props = new Properties();\n+                    URL url = enumResources.nextElement();\n                     try {\n-                        Class<?> clazz = cl.loadClass(className);\n-                        if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n-                            factories.add((LoggerContextFactory) clazz.newInstance());\n-                        } else {\n-                            logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                        props.loadFromXML(url.openStream());\n+                    } catch (IOException ioe) {\n+                        logger.error(\"Unable to read \" + url.toString(), ioe);\n+                    }\n+                    if (!validVersion(props.getProperty(API_VERSION))) {\n+                        continue;\n+                    }\n+                    String weight = props.getProperty(FACTORY_PRIORITY);\n+                    Integer priority = weight == null ? -1 : Integer.valueOf(weight);\n+                    String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n+                    if (className != null) {\n+                        try {\n+                            Class<?> clazz = cl.loadClass(className);\n+                            if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                                factories.put(priority, (LoggerContextFactory) clazz.newInstance());\n+                            } else {\n+                                logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                            }\n+                        } catch (ClassNotFoundException cnfe) {\n+                            logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(),\n+                                cnfe);\n+                        } catch (IllegalAccessException iae) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(),\n+                                iae);\n+                        } catch (Exception e) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n+                            e.printStackTrace();\n                         }\n-                    } catch (ClassNotFoundException cnfe) {\n-                        logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(), cnfe);\n-                    } catch (IllegalAccessException iae) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), iae);\n-                    } catch (Exception e) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n-                        e.printStackTrace();\n                     }\n                 }\n-            }\n-            if (factories.size() != 1) {\n-                logger.fatal(\"Unable to locate a logging implementation\");\n+                if (factories.size() == 0) {\n+                    logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                    factory = new SimpleLoggerContextFactory();\n+                } else {\n+                    StringBuilder sb = new StringBuilder(\"Multiple logging implementations found: \\n\");\n+                    for (Map.Entry<Integer, LoggerContextFactory> entry : factories.entrySet()) {\n+                        sb.append(\"Factory: \").append(entry.getValue().getClass().getName());\n+                        sb.append(\", Weighting: \").append(entry.getKey()).append(\"\\n\");\n+                    }\n+                    factory = factories.get(factories.lastKey());\n+                    sb.append(\"Using factory: \").append(factory.getClass().getName());\n+                    logger.warn(sb.toString());\n+\n+                }\n             } else {\n-                factory = factories.get(0);\n+                logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                factory = new SimpleLoggerContextFactory();\n             }\n-        } else {\n-            logger.fatal(\"Unable to locate a logging implementation\");\n         }\n     }\n \n@@ -237,9 +274,6 @@ public ClassLoader run() {\n                     }\n                 }\n             );\n-        }\n-        if (cl != null && cl.getParent() != null) {\n-\n         }\n         if (cl == null) {\n             cl = LogManager.class.getClassLoader();",
                "deletions": 45
            },
            {
                "sha": "807f92c1c6afbb211bf0b665554d369aa0b1164c",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "status": "added",
                "changes": 168,
                "additions": 168,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.spi.AbstractLogger;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+\n+/**\n+ *  This is the default logger that is used when no suitable logging implementation is available.\n+ *\n+ */\n+public class SimpleLogger extends AbstractLogger {\n+\n+    /**\n+     * Used to format times.\n+     * <p>\n+     * Note that DateFormat is not Thread-safe.\n+     */\n+    private DateFormat dateFormatter = null;\n+\n+    private Level level;\n+\n+    private boolean showDateTime;\n+\n+    private boolean showContextMap;\n+\n+    private PrintStream stream;\n+\n+    private String logName;\n+\n+\n+    public SimpleLogger(String name, Level defaultLevel, boolean showLogName, boolean showShortLogName,\n+                        boolean showDateTime, boolean showContextMap, String dateTimeFormat,\n+                        PropsUtil props, PrintStream stream) {\n+        super(name);\n+        String lvl = props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + name + \".level\");\n+        this.level = Level.toLevel(lvl, defaultLevel);\n+        if (showShortLogName) {\n+            int index = name.lastIndexOf(\".\");\n+            if (index > 0 && index < name.length()) {\n+                this.logName = name.substring(index + 1);\n+            } else {\n+                this.logName = name;\n+            }\n+        } else if (showLogName) {\n+            this.logName = name;\n+        }\n+        this.showDateTime = showDateTime;\n+        this.showContextMap = showContextMap;\n+        this.stream = stream;\n+\n+        if (showDateTime) {\n+            try {\n+                this.dateFormatter = new SimpleDateFormat(dateTimeFormat);\n+            } catch(IllegalArgumentException e) {\n+                // If the format pattern is invalid - use the default format\n+                this.dateFormatter = new SimpleDateFormat(SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT);\n+            }\n+        }\n+    }\n+\n+    public void setStream(PrintStream stream) {\n+        this.stream = stream;\n+    }\n+\n+    public void setLevel(Level level) {\n+        if (level != null) {\n+            this.level = level;\n+        }\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, Level level, Message msg, Throwable throwable) {\n+        StringBuilder sb = new StringBuilder();\n+        // Append date-time if so configured\n+        if(showDateTime) {\n+            Date now = new Date();\n+            String dateText;\n+            synchronized(dateFormatter) {\n+                dateText = dateFormatter.format(now);\n+            }\n+            sb.append(dateText);\n+            sb.append(\" \");\n+        }\n+\n+        sb.append(level.toString());\n+        sb.append(\" \");\n+        if (logName != null && logName.length() > 0) {\n+            sb.append(logName);\n+            sb.append(\" \");\n+        }\n+        sb.append(msg.getFormattedMessage());\n+        if (showContextMap) {\n+            Map<String, String> mdc = ThreadContext.getContext();\n+            if (mdc.size() > 0) {\n+                sb.append(\" \");\n+                sb.append(mdc.toString());\n+                sb.append(\" \");\n+            }\n+        }\n+        Object[] params = msg.getParameters();\n+        Throwable t;\n+        if (throwable == null && params != null && params[params.length -1] instanceof Throwable ) {\n+            t = (Throwable) params[params.length - 1];\n+        } else {\n+            t = throwable;\n+        }\n+        if (t != null) {\n+            sb.append(\" \");\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            t.printStackTrace(new PrintStream(baos));\n+            sb.append(baos.toString());\n+        }\n+        stream.println(sb.toString());\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Object... p1) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Object msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Message msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "5db90c3804bad52922f9b660eac739e82a4019e5",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "status": "added",
                "changes": 115,
                "additions": 115,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ *\n+ */\n+public class SimpleLoggerContext implements LoggerContext {\n+\n+    /** The default format to use when formating dates */\n+    protected static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy/MM/dd HH:mm:ss:SSS zzz\";\n+\n+    /** All system properties used by <code>SimpleLog</code> start with this */\n+    protected static final String SYSTEM_PREFIX = \"org.apache.logging.log4j.simplelog.\";\n+\n+    /** Properties loaded from simplelog.properties */\n+    private Properties simpleLogProps = new Properties();\n+\n+    private PropsUtil props;\n+\n+    /** Include the instance name in the log message? */\n+    private final boolean showLogName;\n+    /** Include the short name ( last component ) of the logger in the log\n+     *  message. Defaults to true - otherwise we'll be lost in a flood of\n+     *  messages without knowing who sends them.\n+     */\n+    private final boolean showShortName;\n+    /** Include the current time in the log message */\n+    private final boolean showDateTime;\n+    /** Include the ThreadContextMap in the log message */\n+    private final boolean showContextMap;\n+    /** The date and time format to use in the log message */\n+    private final String dateTimeFormat;\n+\n+    private final Level defaultLevel;\n+\n+    private final PrintStream stream;\n+\n+    public SimpleLoggerContext() {\n+        props = new PropsUtil(\"log4j2.simplelog.properties\");\n+\n+        showContextMap = props.getBooleanProperty(SYSTEM_PREFIX + \"showContextMap\", false);\n+        showLogName = props.getBooleanProperty(SYSTEM_PREFIX + \"showlogname\", false);\n+        showShortName = props.getBooleanProperty(SYSTEM_PREFIX + \"showShortLogname\", true);\n+        showDateTime = props.getBooleanProperty(SYSTEM_PREFIX + \"showdatetime\", false);\n+        String lvl = props.getStringProperty(SYSTEM_PREFIX + \"level\");\n+        defaultLevel = Level.toLevel(lvl, Level.ERROR);\n+\n+        dateTimeFormat = showDateTime ? props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + \"dateTimeFormat\",\n+            DEFAULT_DATE_TIME_FORMAT) : null;\n+\n+        String fileName = props.getStringProperty(SYSTEM_PREFIX + \"logFile\", \"system.err\");\n+        PrintStream ps;\n+        if (\"system.err\".equalsIgnoreCase(fileName)) {\n+            ps = System.err;\n+        } else if (\"system.out\".equalsIgnoreCase(fileName)) {\n+            ps = System.out;\n+        } else {\n+            try {\n+                FileOutputStream os = new FileOutputStream(fileName);\n+                ps = new PrintStream(os);\n+            } catch (FileNotFoundException fnfe) {\n+                ps = System.err;\n+            }\n+        }\n+        this.stream = ps;\n+    }\n+\n+    private ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();\n+\n+    public Logger getLogger(String name) {\n+        if (loggers.containsKey(name)) {\n+            return loggers.get(name);\n+        }\n+\n+        loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,\n+            showContextMap, dateTimeFormat, props, stream));\n+        return loggers.get(name);\n+    }\n+\n+    public boolean hasLogger(String name) {\n+        return false;\n+    }\n+\n+    public Object getExternalContext() {\n+        return null;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "43bc54f0cc68fe7a95fbbe8f887acb998a714a6f",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "status": "renamed",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -14,7 +14,7 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j;\n+package org.apache.logging.log4j.simple;\n \n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;",
                "deletions": 1,
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContextFactory.java"
            },
            {
                "sha": "66e5c76127b4d35d63b01ae28d84d942e0404b81",
                "filename": "api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "status": "modified",
                "changes": 22,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -16,11 +16,13 @@\n  */\n package org.apache.logging.log4j.status;\n \n+import org.apache.logging.log4j.simple.SimpleLogger;\n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.spi.AbstractLogger;\n import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.Marker;\n import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -50,7 +52,7 @@\n \n     private static final StatusLogger statusLogger = new StatusLogger();\n \n-    private Logger logger;\n+    private final SimpleLogger logger;\n \n     private final CopyOnWriteArrayList<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();\n     private final ReentrantReadWriteLock listenersLock = new ReentrantReadWriteLock();\n@@ -59,6 +61,8 @@\n     private final ReentrantLock msgLock = new ReentrantLock();\n \n     private StatusLogger() {\n+        PropsUtil props = new PropsUtil(\"log4j2.StatusLogger.properties\");\n+        this.logger = new SimpleLogger(\"StatusLogger\", Level.ERROR, false, true, false, false, \"\", props, System.err);\n     }\n \n     /**\n@@ -69,6 +73,10 @@ public static StatusLogger getLogger() {\n         return statusLogger;\n     }\n \n+    public void setLevel(Level level) {\n+        logger.setLevel(level);\n+    }\n+\n     /**\n      * Register a new listener.\n      * @param listener The StatusListener to register.\n@@ -158,8 +166,12 @@ public void log(Marker marker, String fqcn, Level level, Message msg, Throwable\n         } finally {\n             msgLock.unlock();\n         }\n-        for (StatusListener listener : listeners) {\n-            listener.log(data);\n+        if (listeners.size() > 0) {\n+            for (StatusListener listener : listeners) {\n+                listener.log(data);\n+            }\n+        } else {\n+            logger.log(marker, fqcn, level, msg, t);\n         }\n     }\n \n@@ -208,7 +220,7 @@ protected boolean isEnabled(Level level, Marker marker, Message data, Throwable\n     }\n \n     protected boolean isEnabled(Level level, Marker marker) {\n-        if (logger == null) {\n+        if (listeners.size() > 0) {\n             return true;\n         }\n         switch (level) {",
                "deletions": 5
            },
            {
                "sha": "25c80ff01e43475442a8154ae6252105d4e9da53",
                "filename": "api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "status": "added",
                "changes": 86,
                "additions": 86,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.util;\n+\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+/**\n+ * Utility class to help with accessing System Properties.\n+ */\n+public class PropsUtil {\n+\n+    private Properties props;\n+\n+    public PropsUtil(Properties props) {\n+        this.props = props;\n+    }\n+\n+    public PropsUtil(String propsLocn) {\n+        this.props = new Properties();\n+        ClassLoader loader = findClassLoader();\n+        InputStream in = loader.getResourceAsStream(propsLocn);\n+        if (null != in) {\n+            try {\n+                this.props.load(in);\n+                in.close();\n+            } catch(java.io.IOException e) {\n+                // ignored\n+            }\n+        }\n+    }\n+\n+    public String getStringProperty(String name) {\n+        String prop = null;\n+        try {\n+            prop = System.getProperty(name);\n+        } catch (SecurityException e) {\n+            // Ignore\n+        }\n+        return (prop == null) ? props.getProperty(name) : prop;\n+    }\n+\n+    public String getStringProperty(String name, String defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : prop;\n+    }\n+\n+    public boolean getBooleanProperty(String name, boolean defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : \"true\".equalsIgnoreCase(prop);\n+    }\n+\n+    private static ClassLoader findClassLoader() {\n+        ClassLoader cl;\n+        if (System.getSecurityManager() == null) {\n+            cl = Thread.currentThread().getContextClassLoader();\n+        } else {\n+            cl = java.security.AccessController.doPrivileged(\n+                new java.security.PrivilegedAction<ClassLoader>() {\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                }\n+            );\n+        }\n+        if (cl == null) {\n+            cl = PropsUtil.class.getClassLoader();\n+        }\n+\n+        return cl;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "2f8310b1f90bc7660e0f6197548e9cabbad56c23",
                "filename": "api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -31,7 +31,7 @@\n  */\n public class EventLoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"EventLogger\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"EventLogger\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "deletions": 1
            },
            {
                "sha": "37b46558cad437f983eab773e3dd99dca3839810",
                "filename": "api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -34,7 +34,7 @@\n  */\n public class LoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"LoggerTest\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"LoggerTest\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "deletions": 1
            },
            {
                "sha": "41c93420adcf9e069361881f293bc3a44b812bdf",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "status": "renamed",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -28,7 +28,7 @@\n /**\n  *\n  */\n-public class SimpleLogger extends AbstractLogger {\n+public class TestLogger extends AbstractLogger {\n     private List<String> array = new ArrayList<String>();\n \n     public List<String> getEntries() {",
                "deletions": 1,
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLogger.java"
            },
            {
                "sha": "226502f93794bde28a64443d2c4741752d6346ee",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "status": "renamed",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -21,8 +21,8 @@\n /**\n  *\n  */\n-public class SimpleLoggerContext implements LoggerContext {\n-    private Logger logger = new SimpleLogger();\n+public class TestLoggerContext implements LoggerContext {\n+    private Logger logger = new TestLogger();\n \n     public Logger getLogger(String name) {\n         return logger;",
                "deletions": 2,
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContext.java"
            },
            {
                "sha": "1c589e163e5de5cfaeeacc26ec9be4de00b6bbbd",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j;\n+\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.spi.LoggerContextFactory;\n+\n+/**\n+ *\n+ */\n+public class TestLoggerContextFactory implements LoggerContextFactory {\n+\n+    private static LoggerContext ctx = new TestLoggerContext();\n+\n+    public LoggerContext getContext(String FQCN, ClassLoader loader, boolean currentContext) {\n+        return ctx;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "51e6d1bb145ac9dc25625e4d98ddce215e84b8fd",
                "filename": "api/src/test/resources/META-INF/log4j-provider.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -1,6 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n-    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.SimpleLoggerContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.TestLoggerContextFactory</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">0</entry>\n </properties>\n\\ No newline at end of file",
                "deletions": 2
            },
            {
                "sha": "c15c54804c05295dcb7135a11b621396d4519533",
                "filename": "core/src/main/resources/META-INF/log4j-provider.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -19,5 +19,6 @@\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n     <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.core.impl.Log4jContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">10</entry>\n </properties>\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "eb6f51dbc2d82a8e0a3be8fc2a7a09bfe16e5b7a",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n@@ -30,6 +32,10 @@\n  *\n  */\n public class RegexFilterTest {\n+    @BeforeClass\n+    public static void before() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n+    }\n \n     @Test\n     public void testThresholds() {",
                "deletions": 0
            },
            {
                "sha": "c492c54d306872fb998aefde8e5b6e8e31191199",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.logging.log4j.core.BasicConfigurationFactory;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.message.StructuredDataMessage;\n@@ -54,6 +55,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) LogManager.getContext();\n         ctx.reconfigure();",
                "deletions": 0
            },
            {
                "sha": "958d73ea3159bf34c0cbe49ef9fe76d2ef7c5fd1",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -96,7 +96,7 @@ public void testServer() throws Exception {\n             \"Test\", null, null, null, socketFilter);\n         appender.start();\n         ListAppender listApp = new ListAppender(\"Events\", serverFilter, null, false, false);\n-        appender.start();\n+        listApp.start();\n         PatternLayout layout = PatternLayout.createLayout(\"%m %ex%n\", null, null, null);\n         ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"true\");\n         Logger serverLogger = ctx.getLogger(SocketServer.class.getName());",
                "deletions": 1
            },
            {
                "sha": "fc2a8f913b70794c09512e5ffc5b35f10f0159be",
                "filename": "flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -68,6 +69,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ctx = (LoggerContext) LogManager.getContext();\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "f5fef96ab6fc4b8355ec248a84bbbdbea2b043f1",
                "filename": "log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -25,7 +25,9 @@\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -48,10 +50,11 @@\n \n     private static final String LINE_SEP = System.getProperty(\"line.separator\");\n \n-    private ListAppender appender = new ListAppender(\"List\");\n+    private static ListAppender appender = new ListAppender(\"List\");\n \n     @BeforeClass\n     public static void setupClass() {\n+        appender.start();\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();\n         ctx.reconfigure();\n@@ -60,6 +63,7 @@ public static void setupClass() {\n     @AfterClass\n     public static void cleanupClass() {\n         ConfigurationFactory.removeConfigurationFactory(cf);\n+        appender.stop();\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "1e98c3afe1731a6f8a3a4c34f5b4b31e76b3f390",
                "filename": "log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -127,6 +127,7 @@ public void testAdditivity1() {\n         Logger a = Logger.getLogger(\"a\");\n         Logger ab = Logger.getLogger(\"a.b\");\n         CountingAppender ca = new CountingAppender();\n+        ca.start();\n         a.getLogger().addAppender(ca);\n \n         assertEquals(ca.counter, 0);\n@@ -138,6 +139,8 @@ public void testAdditivity1() {\n         assertEquals(ca.counter, 3);\n         ab.error(MSG);\n         assertEquals(ca.counter, 4);\n+        ca.stop();\n+        a.getLogger().removeAppender(ca);\n     }\n \n     /**\n@@ -152,7 +155,9 @@ public void testAdditivity2() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender ca1 = new CountingAppender();\n+        ca1.start();\n         CountingAppender ca2 = new CountingAppender();\n+        ca2.start();\n \n         a.getLogger().addAppender(ca1);\n         abc.getLogger().addAppender(ca2);\n@@ -171,6 +176,10 @@ public void testAdditivity2() {\n         x.debug(MSG);\n         assertEquals(ca1.counter, 2);\n         assertEquals(ca2.counter, 1);\n+        ca1.stop();\n+        ca2.stop();\n+        a.getLogger().removeAppender(ca1);\n+        abc.getLogger().removeAppender(ca2);\n     }\n \n     /**\n@@ -186,8 +195,11 @@ public void testAdditivity3() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender caRoot = new CountingAppender();\n+        caRoot.start();\n         CountingAppender caA = new CountingAppender();\n+        caA.start();\n         CountingAppender caABC = new CountingAppender();\n+        caABC.start();\n \n         root.getLogger().addAppender(caRoot);\n         a.getLogger().addAppender(caA);\n@@ -214,6 +226,12 @@ public void testAdditivity3() {\n         assertEquals(caRoot.counter, 1);\n         assertEquals(caA.counter, 1);\n         assertEquals(caABC.counter, 1);\n+        caRoot.stop();\n+        caA.stop();\n+        caABC.stop();\n+        root.getLogger().removeAppender(caRoot);\n+        a.getLogger().removeAppender(caA);\n+        abc.getLogger().removeAppender(caABC);\n     }\n \n     /* Don't support getLoggerRepository\n@@ -391,6 +409,8 @@ public void testTrace() {\n         LogEvent event = (LogEvent) msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormat());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -399,6 +419,7 @@ public void testTrace() {\n     @Test\n     public void testTraceWithException() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -416,6 +437,8 @@ public void testTraceWithException() {\n         LogEvent event = msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormattedMessage());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -424,6 +447,7 @@ public void testTraceWithException() {\n     @Test\n     public void testIsTraceEnabled() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -433,12 +457,15 @@ public void testIsTraceEnabled() {\n \n         assertTrue(tracer.isTraceEnabled());\n         assertFalse(root.isTraceEnabled());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     @Test\n     public void testLog() {\n         PatternLayout layout = PatternLayout.createLayout(\"%d %C %L %m\", null, null, null);\n         ListAppender appender = new ListAppender(\"List\", null, layout, false, false);\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -450,6 +477,8 @@ public void testLog() {\n         assertTrue(\"Incorrect number of messages\", msgs.size() == 3);\n         String msg = msgs.get(0);\n         assertTrue(\"Message contains incorrect class name: \" + msg, msg.contains(LoggerTest.class.getName()));\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     private static class MyLogger {",
                "deletions": 0
            },
            {
                "sha": "9822ba1dddc08cfa93dd28313e7dff0de45567d4",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -23,6 +23,10 @@\n \n   <body>\n     <release version=\"2.0-beta3\" date=\"TBD\" description= \"Bug fixes and enhancements\">\n+      <action dev=\"rgoers\" type=\"fix\">\n+        Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow\n+        real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n+      </action>\n       <action issue=\"LOG4J2-97\" dev=\"rgoers\" type=\"fix\">\n         Added several missing classes and methods for Log4j 1.x compatibility.\n       </action>",
                "deletions": 0
            },
            {
                "sha": "df3ca467934e89aa318bafa14686bf9d8d039e49",
                "filename": "src/site/xdoc/manual/extending.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/site/xdoc/manual/extending.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "patch": "@@ -34,10 +34,25 @@\n               locates a LoggerContextFactory by locating all instances of META-INF/log4j-provider.xml, a\n               file that conforms to the java.util.Properties DTD, and then inspecting each to verify that it\n               specifies a value for the \"Log4jAPIVersion\" property that conforms to the version required by the\n-              LogManager. If more than one valid implementation is located an exception will be thrown.\n+              LogManager. If more than one valid implementation is located the value for \"FactoryPriority\" will\n+              be used to identify the factory with the highest priority.\n               Finally, the value of the \"LoggerContextFactory\" property will be used to locate the\n               LoggerContextFactory. In Log4j 2 this is provided by Log4jContextFactory.\n             </p>\n+            <p>\n+              Applications may change the LoggerContextFactory that will be used by\n+              <ol>\n+                <li>Implementing a new LoggerContextFactory and creating a log4j-provider.xml to reference it making\n+                  sure that it has the highest priority.</li>\n+                <li>Create a new log4j-provider.xml and configure it with the desired LoggerContextFactory making\n+                  sure that it has the highest priority.</li>\n+                <li>Setting the system property \"log4j2.LoggerContextFactory\" to the name of the LoggerContextFactory\n+                  class to use.</li>\n+                <li>Setting the property \"log4j2.LoggerContextFactory\" in a properties file named\n+                  \"log4j2.LogManager.properties\" to the name of the LoggerContextFactory class to use. The properties\n+                  file must be on the classpath.</li>\n+              </ol>\n+            </p>\n           </subsection>\n           <subsection name=\"ContextSelector\">\n             <p>",
                "deletions": 1
            }
        ],
        "patched_files": [
            "EventLogger.java",
            "LogManager.java",
            "Category.java",
            "SimpleLogger.java",
            "RegexFilter.java",
            "RFC5424Layout.java",
            "SimpleLoggerContext.java",
            "LoggerContextFactory.java",
            "Logger.java",
            "StatusLogger.java",
            "SocketServer.java",
            "FlumeAppender.java",
            "LoggerContext.java",
            "SimpleLoggerContextFactory.java",
            "PropsUtil.java"
        ],
        "unit_tests": [
            "EventLoggerTest.java",
            "FlumeAppenderTest.java",
            "SocketServerTest.java",
            "RFC5424LayoutTest.java",
            "TestLoggerContextFactory.java",
            "LoggerTest.java",
            "TestLogger.java",
            "TestLoggerContext.java",
            "RegexFilterTest.java",
            "CategoryTest.java"
        ]
    },
    "logging-log4j2_3c524ea": {
        "repo": "logging-log4j2",
        "message": "- Updated the JPA 2.1 artifact to the final version\n- Switched from using incomplete JPA 2.1 implementation (Hibernate) to the complete, reference implementation (EclipseLink)\n- Now that the JPAAppender is finally testable, fixed lots of NPEs and other problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1500366 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/3c524ea93f69294d543f3b37d11d0b1afa936a21",
        "parent": "https://github.com/apache/logging-log4j2/commit/111fc7b82ff405d2cf58d3e4a89cdf782ca34483",
        "bug_id": "logging-log4j2_3c524ea",
        "file": [
            {
                "sha": "01d5fcec8f8cc55d9fb496b2c2b1f5e7021f567b",
                "filename": "core/pom.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/pom.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/pom.xml",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/pom.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -105,8 +105,8 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-      <groupId>org.hibernate</groupId>\n-      <artifactId>hibernate-entitymanager</artifactId>\n+      <groupId>org.eclipse.persistence</groupId>\n+      <artifactId>org.eclipse.persistence.jpa</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n@@ -135,8 +135,8 @@\n       <optional>true</optional>\n     </dependency>\n     <dependency>\n-      <groupId>org.hibernate.javax.persistence</groupId>\n-      <artifactId>hibernate-jpa-2.1-api</artifactId>\n+      <groupId>org.eclipse.persistence</groupId>\n+      <artifactId>javax.persistence</artifactId>\n       <scope>compile</scope>\n       <optional>true</optional>\n     </dependency>",
                "deletions": 4
            },
            {
                "sha": "791e9227fe49ab93ea54dfedc74b4e3c89edfe9a",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java",
                "status": "modified",
                "changes": 86,
                "additions": 85,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/AbstractLogEventWrapperEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -17,6 +17,8 @@\n package org.apache.logging.log4j.core.appender.db.jpa;\n \n import java.util.Map;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Transient;\n \n@@ -55,6 +57,7 @@\n  * @see BasicLogEventEntity\n  */\n @MappedSuperclass\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n public abstract class AbstractLogEventWrapperEntity implements LogEvent {\n     private static final long serialVersionUID = 1L;\n \n@@ -67,7 +70,7 @@\n      */\n     @SuppressWarnings(\"unused\")\n     protected AbstractLogEventWrapperEntity() {\n-        this(null);\n+        this(new NullLogEvent());\n     }\n \n     /**\n@@ -77,6 +80,9 @@ protected AbstractLogEventWrapperEntity() {\n      * @param wrappedEvent The underlying event from which information is obtained.\n      */\n     protected AbstractLogEventWrapperEntity(final LogEvent wrappedEvent) {\n+        if (wrappedEvent == null) {\n+            throw new IllegalArgumentException(\"The wrapped event cannot be null.\");\n+        }\n         this.wrappedEvent = wrappedEvent;\n     }\n \n@@ -234,4 +240,82 @@ public final boolean isEndOfBatch() {\n     public final void setEndOfBatch(final boolean endOfBatch) {\n         this.getWrappedEvent().setEndOfBatch(endOfBatch);\n     }\n+\n+    private static class NullLogEvent implements LogEvent {\n+\n+        @Override\n+        public Level getLevel() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getLoggerName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public StackTraceElement getSource() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Message getMessage() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Marker getMarker() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getThreadName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public long getMillis() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public Throwable getThrown() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Map<String, String> getContextMap() {\n+            return null;\n+        }\n+\n+        @Override\n+        public ThreadContext.ContextStack getContextStack() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getFQCN() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isIncludeLocation() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setIncludeLocation(boolean locationRequired) {\n+\n+        }\n+\n+        @Override\n+        public boolean isEndOfBatch() {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setEndOfBatch(boolean endOfBatch) {\n+\n+        }\n+    }\n }",
                "deletions": 1
            },
            {
                "sha": "9839dd4f2c7f43e5cca09e710619e15cb4adc23e",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java",
                "status": "modified",
                "changes": 30,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/JPADatabaseManager.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -36,9 +36,7 @@\n     private final Constructor<? extends AbstractLogEventWrapperEntity> entityConstructor;\n     private final String persistenceUnitName;\n \n-    private EntityManager entityManager;\n     private EntityManagerFactory entityManagerFactory;\n-    private EntityTransaction transaction;\n \n     private JPADatabaseManager(final String name, final int bufferSize,\n                                final Class<? extends AbstractLogEventWrapperEntity> entityClass,\n@@ -53,27 +51,18 @@ private JPADatabaseManager(final String name, final int bufferSize,\n     @Override\n     protected void connectInternal() {\n         this.entityManagerFactory = Persistence.createEntityManagerFactory(this.persistenceUnitName);\n-        this.entityManager = this.entityManagerFactory.createEntityManager();\n-        this.transaction = this.entityManager.getTransaction();\n     }\n \n     @Override\n     protected void disconnectInternal() {\n-        this.transaction = null;\n-\n-        if (this.entityManager != null && this.entityManager.isOpen()) {\n-            this.entityManager.close();\n-        }\n-\n         if (this.entityManagerFactory != null && this.entityManagerFactory.isOpen()) {\n             this.entityManagerFactory.close();\n         }\n     }\n \n     @Override\n     protected void writeInternal(final LogEvent event) {\n-        if (!this.isConnected() || this.transaction == null || this.entityManager == null\n-                || this.entityManagerFactory == null) {\n+        if (!this.isConnected() || this.entityManagerFactory == null) {\n             LOGGER.error(\"Cannot write logging event; manager [{}] not connected to the database.\", this.getName());\n             return;\n         }\n@@ -86,13 +75,22 @@ protected void writeInternal(final LogEvent event) {\n             return;\n         }\n \n+        EntityManager entityManager = null;\n+        EntityTransaction transaction = null;\n         try {\n-            this.transaction.begin();\n-            this.entityManager.persist(entity);\n-            this.transaction.commit();\n+            entityManager = this.entityManagerFactory.createEntityManager();\n+            transaction = entityManager.getTransaction();\n+            transaction.begin();\n+            entityManager.persist(entity);\n+            transaction.commit();\n         } catch (final Exception e) {\n             LOGGER.error(\"Failed to persist log event entity.\", e);\n-            this.transaction.rollback();\n+            if (transaction != null && transaction.isActive())\n+                transaction.rollback();\n+        } finally {\n+            if (entityManager != null && entityManager.isOpen()) {\n+                entityManager.close();\n+            }\n         }\n     }\n ",
                "deletions": 16
            },
            {
                "sha": "1dd20a46a129b8d7c66a857287e7a92d491cc58c",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -31,6 +31,10 @@\n public class ContextMapAttributeConverter implements AttributeConverter<Map<String, String>, String> {\n     @Override\n     public String convertToDatabaseColumn(final Map<String, String> contextMap) {\n+        if (contextMap == null) {\n+            return null;\n+        }\n+\n         return contextMap.toString();\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "ab2ef74bd89031d05fa46288d917b71a3ddfa830",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -37,6 +37,10 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Map<String, String> contextMap) {\n+        if (contextMap == null) {\n+            return null;\n+        }\n+\n         try {\n             return OBJECT_MAPPER.writeValueAsString(contextMap);\n         } catch (IOException e) {",
                "deletions": 0
            },
            {
                "sha": "67f2f25dcb78eb7e698502610675740365b94253",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -32,6 +32,10 @@\n public class ContextStackAttributeConverter implements AttributeConverter<ThreadContext.ContextStack, String> {\n     @Override\n     public String convertToDatabaseColumn(final ThreadContext.ContextStack contextStack) {\n+        if (contextStack == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder();\n         for (String value : contextStack.asList()) {\n             if (builder.length() > 0) {",
                "deletions": 0
            },
            {
                "sha": "aeec9b3dd6a45948357bdda1c6d098a1882fecc2",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -38,6 +38,10 @@\n public class ContextStackJsonAttributeConverter implements AttributeConverter<ThreadContext.ContextStack, String> {\n     @Override\n     public String convertToDatabaseColumn(final ThreadContext.ContextStack contextStack) {\n+        if (contextStack == null) {\n+            return null;\n+        }\n+\n         try {\n             return ContextMapJsonAttributeConverter.OBJECT_MAPPER.writeValueAsString(contextStack.asList());\n         } catch (IOException e) {",
                "deletions": 0
            },
            {
                "sha": "90fc41a922239e4a367bd420e41c0108a7e84aa2",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -30,6 +30,10 @@\n public class MarkerAttributeConverter implements AttributeConverter<Marker, String> {\n     @Override\n     public String convertToDatabaseColumn(final Marker marker) {\n+        if (marker == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder(marker.getName());\n         Marker parent = marker.getParent();\n         int levels = 0;\n@@ -51,6 +55,10 @@ public String convertToDatabaseColumn(final Marker marker) {\n \n     @Override\n     public Marker convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         int bracket = s.indexOf(\"[\");\n \n         return bracket < 1 ? MarkerManager.getMarker(s) : MarkerManager.getMarker(s.substring(0, bracket));",
                "deletions": 0
            },
            {
                "sha": "3dfd92d77d8dafba0e32d916cc9cfbd8b6d380e9",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -32,11 +32,19 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Message message) {\n+        if (message == null) {\n+            return null;\n+        }\n+\n         return message.getFormattedMessage();\n     }\n \n     @Override\n     public Message convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         return log.getMessageFactory().newMessage(s);\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "3892395a7caa2cdc47f5a32f92a7e9aba01d215c",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -29,11 +29,19 @@\n \n     @Override\n     public String convertToDatabaseColumn(final StackTraceElement element) {\n+        if (element == null) {\n+            return null;\n+        }\n+\n         return element.toString();\n     }\n \n     @Override\n     public StackTraceElement convertToEntityAttribute(final String s) {\n+        if (s == null || s.length() == 0) {\n+            return null;\n+        }\n+\n         return StackTraceElementAttributeConverter.convertString(s);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "81fcfde4111c551d02918646f301f8ad9315f070",
                "filename": "core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -50,6 +50,10 @@\n \n     @Override\n     public String convertToDatabaseColumn(final Throwable throwable) {\n+        if (throwable == null) {\n+            return null;\n+        }\n+\n         StringBuilder builder = new StringBuilder();\n         this.convertThrowable(builder, throwable);\n         return builder.toString();",
                "deletions": 0
            },
            {
                "sha": "59c05dc729db101cf4303d679ec34196429a0a73",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/JPAAppenderTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -33,7 +33,6 @@\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.config.DefaultConfiguration;\n import org.apache.logging.log4j.status.StatusLogger;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -53,8 +52,10 @@ public void setUp(final String configFileName) throws SQLException {\n \n         statement = this.connection.createStatement();\n         statement.executeUpdate(\"CREATE TABLE jpaBasicLogEntry ( \" +\n-                    \"id INTEGER IDENTITY, millis BIGINT, level VARCHAR(10), logger VARCHAR(255), \" +\n-                    \"message VARCHAR(1024), thrown VARCHAR(1048576), contextMapJson VARCHAR(1048576)\" +\n+                    \"id INTEGER IDENTITY, millis BIGINT, level VARCHAR(10), loggerName VARCHAR(255), \" +\n+                    \"message VARCHAR(1024), thrown VARCHAR(1048576), contextMapJson VARCHAR(1048576),\" +\n+                    \"fqcn VARCHAR(1024), contextStack VARCHAR(1048576), marker VARCHAR(255), source VARCHAR(2048),\" +\n+                    \"threadName VARCHAR(255)\" +\n                 \" )\");\n         statement.close();\n \n@@ -89,7 +90,8 @@ public void tearDown() throws SQLException {\n                     if (statement != null) {\n                         statement.close();\n                     }\n-                } catch (final SQLException ignore) { /* */\n+                } catch (final SQLException ignore) {\n+                    /* */\n                 }\n             }\n \n@@ -145,7 +147,6 @@ public void testBadConstructorEntity02() {\n     }\n \n     @Test\n-    @Ignore(\"Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111\")\n     public void testBaseJpaEntityAppender() throws SQLException {\n         try {\n             this.setUp(\"log4j2-jpa-base.xml\");\n@@ -208,7 +209,6 @@ public void testBaseJpaEntityAppender() throws SQLException {\n     }\n \n     @Test\n-    @Ignore(\"Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111\")\n     public void testBasicJpaEntityAppender() throws SQLException {\n         try {\n             this.setUp(\"log4j2-jpa-basic.xml\");\n@@ -237,32 +237,32 @@ public void testBasicJpaEntityAppender() throws SQLException {\n             assertTrue(\"The date should be later than pre-logging (1).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (1).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (1).\", \"DEBUG\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (1).\", logger1.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (1).\", logger1.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (1).\", \"Test my debug 01.\",\n                     resultSet.getString(\"message\"));\n-            assertNull(\"The exception column is not correct (1).\", resultSet.getString(\"exception\"));\n+            assertNull(\"The exception column is not correct (1).\", resultSet.getString(\"thrown\"));\n \n             assertTrue(\"There should be at least two rows.\", resultSet.next());\n \n             date = resultSet.getLong(\"millis\");\n             assertTrue(\"The date should be later than pre-logging (2).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (2).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (2).\", \"WARN\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (2).\", logger1.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (2).\", logger1.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (2).\", \"This is another warning 02.\",\n                     resultSet.getString(\"message\"));\n-            assertEquals(\"The exception column is not correct (2).\", stackTrace, resultSet.getString(\"exception\"));\n+            assertEquals(\"The exception column is not correct (2).\", stackTrace, resultSet.getString(\"thrown\"));\n \n             assertTrue(\"There should be three rows.\", resultSet.next());\n \n             date = resultSet.getLong(\"millis\");\n             assertTrue(\"The date should be later than pre-logging (3).\", date >= millis);\n             assertTrue(\"The date should be earlier than now (3).\", date <= System.currentTimeMillis());\n             assertEquals(\"The level column is not correct (3).\", \"FATAL\", resultSet.getString(\"level\"));\n-            assertEquals(\"The logger column is not correct (3).\", logger2.getName(), resultSet.getString(\"logger\"));\n+            assertEquals(\"The logger column is not correct (3).\", logger2.getName(), resultSet.getString(\"loggerName\"));\n             assertEquals(\"The message column is not correct (3).\", \"A fatal warning has been issued.\",\n                     resultSet.getString(\"message\"));\n-            assertNull(\"The exception column is not correct (3).\", resultSet.getString(\"exception\"));\n+            assertNull(\"The exception column is not correct (3).\", resultSet.getString(\"thrown\"));\n \n             assertFalse(\"There should not be four rows.\", resultSet.next());\n         } finally {",
                "deletions": 12
            },
            {
                "sha": "5175c46ad16e84a6a580c52320e63b63d96d2448",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java",
                "status": "modified",
                "changes": 23,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBaseEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -81,68 +81,69 @@ public void setEventDate(final Date date) {\n     @Enumerated(EnumType.STRING)\n     @Column(name = \"level\")\n     public Level getLevel() {\n-        return getWrappedEvent().getLevel();\n+        return this.getWrappedEvent().getLevel();\n     }\n \n     @Override\n     @Basic\n     @Column(name = \"logger\")\n     public String getLoggerName() {\n-        return getWrappedEvent().getLoggerName();\n+        return this.getWrappedEvent().getLoggerName();\n     }\n \n     @Override\n     @Transient\n     public StackTraceElement getSource() {\n-        return getWrappedEvent().getSource();\n+        return this.getWrappedEvent().getSource();\n     }\n \n     @Override\n     @Convert(converter = MessageAttributeConverter.class)\n+    @Column(name = \"message\")\n     public Message getMessage() {\n-        return getWrappedEvent().getMessage();\n+        return this.getWrappedEvent().getMessage();\n     }\n \n     @Override\n     @Transient\n     public Marker getMarker() {\n-        return getWrappedEvent().getMarker();\n+        return this.getWrappedEvent().getMarker();\n     }\n \n     @Override\n     @Transient\n     public String getThreadName() {\n-        return getWrappedEvent().getThreadName();\n+        return this.getWrappedEvent().getThreadName();\n     }\n \n     @Override\n     @Transient\n     public long getMillis() {\n-        return getWrappedEvent().getMillis();\n+        return this.getWrappedEvent().getMillis();\n     }\n \n     @Override\n     @Convert(converter = ThrowableAttributeConverter.class)\n     @Column(name = \"exception\")\n     public Throwable getThrown() {\n-        return getWrappedEvent().getThrown();\n+        return this.getWrappedEvent().getThrown();\n     }\n \n     @Override\n     @Transient\n     public Map<String, String> getContextMap() {\n-        return getWrappedEvent().getContextMap();\n+        return this.getWrappedEvent().getContextMap();\n     }\n \n     @Override\n     @Transient\n     public ThreadContext.ContextStack getContextStack() {\n-        return getWrappedEvent().getContextStack();\n+        return this.getWrappedEvent().getContextStack();\n     }\n \n     @Override\n     @Transient\n     public String getFQCN() {\n-        return getWrappedEvent().getFQCN();\n+        return this.getWrappedEvent().getFQCN();\n     }\n }",
                "deletions": 11
            },
            {
                "sha": "f3e0fa40527fbe26e75c0971022d48cd6faf4a6a",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java",
                "status": "modified",
                "changes": 33,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/TestBasicEntity.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -24,10 +24,7 @@\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Table;\n-import javax.persistence.Transient;\n \n-import org.apache.logging.log4j.Marker;\n-import org.apache.logging.log4j.ThreadContext;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapJsonAttributeConverter;\n \n@@ -58,40 +55,10 @@ public void setId(final long id) {\n         this.id = id;\n     }\n \n-    @Override\n-    @Transient\n-    public StackTraceElement getSource() {\n-        return super.getSource();\n-    }\n-\n-    @Override\n-    @Transient\n-    public Marker getMarker() {\n-        return super.getMarker();\n-    }\n-\n-    @Override\n-    @Transient\n-    public String getThreadName() {\n-        return super.getThreadName();\n-    }\n-\n     @Override\n     @Convert(converter = ContextMapJsonAttributeConverter.class)\n     @Column(name = \"contextMapJson\")\n     public Map<String, String> getContextMap() {\n         return super.getContextMap();\n     }\n-\n-    @Override\n-    @Transient\n-    public ThreadContext.ContextStack getContextStack() {\n-        return super.getContextStack();\n-    }\n-\n-    @Override\n-    @Transient\n-    public String getFQCN() {\n-        return super.getFQCN();\n-    }\n }",
                "deletions": 33
            },
            {
                "sha": "ef601b30912840e6879b5712e83bdf3a90471ecb",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -24,6 +24,7 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n \n public class ContextMapAttributeConverterTest {\n     private ContextMapAttributeConverter converter;\n@@ -59,6 +60,11 @@ public void testConvertToDatabaseColumn02() {\n                 this.converter.convertToDatabaseColumn(map));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n     @Test(expected = UnsupportedOperationException.class)\n     public void testConvertToEntityAttribute() {\n         this.converter.convertToEntityAttribute(null);",
                "deletions": 0
            },
            {
                "sha": "a97886452b66c2ca2ee89fb6f6dd400f0799fa99",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -70,4 +70,15 @@ public void testConvert02() {\n         assertNotNull(\"The reversed value should not be null.\", reversed);\n         assertEquals(\"The reversed value is not correct.\", map, reversed);\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "f700314c79813f73682ae2e515e3fbee4b1d699e",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.logging.log4j.core.appender.db.jpa.converter;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Arrays;\n \n import org.apache.logging.log4j.ThreadContext;\n@@ -26,6 +24,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class ContextStackAttributeConverterTest {\n     private ContextStackAttributeConverter converter;\n \n@@ -58,6 +58,11 @@ public void testConvertToDatabaseColumn02() {\n                 this.converter.convertToDatabaseColumn(stack));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n     @Test(expected = UnsupportedOperationException.class)\n     public void testConvertToEntityAttribute() {\n         this.converter.convertToEntityAttribute(null);",
                "deletions": 2
            },
            {
                "sha": "4da94a7f47295af28b35ac5b3d3b130d14ffe67c",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -16,8 +16,6 @@\n  */\n package org.apache.logging.log4j.core.appender.db.jpa.converter;\n \n-import static org.junit.Assert.*;\n-\n import java.util.Arrays;\n \n import org.apache.logging.log4j.ThreadContext;\n@@ -26,6 +24,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class ContextStackJsonAttributeConverterTest {\n     private ContextStackJsonAttributeConverter converter;\n \n@@ -74,4 +74,15 @@ public void testConvert02() {\n         assertEquals(\"The reversed value is not correct.\", stack.asList(),\n                 reversed.asList());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "deletions": 2
            },
            {
                "sha": "5c9aae5a0564f08e164cf2c303d6467bbec9cd4d",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MarkerAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -75,4 +75,15 @@ public void testConvert02() {\n         assertNotNull(\"The second parent should not be null.\", marker.getParent().getParent());\n         assertEquals(\"The second parent is not correct.\", \"finalConvert03\", marker.getParent().getParent().getName());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "4108a9391e2a4d9073ea246b412426a665d5e07b",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -53,4 +53,15 @@ public void testConvert01() {\n         assertNotNull(\"The reversed value should not be null.\", reversed);\n         assertEquals(\"The reversed value is not correct.\", \"Message #3 said [Hello].\", reversed.getFormattedMessage());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "8c8742e7825e12692b669c33cae20a21268e57e8",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -121,4 +121,15 @@ public void testConvert04() {\n         assertEquals(\"The line number is not correct.\", -2, reversed.getLineNumber());\n         assertTrue(\"The native flag should be true.\", reversed.isNativeMethod());\n     }\n+\n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "331cbfe589932b4de621155290f4418dc8ef8459",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -73,6 +73,17 @@ public void testConvert02() {\n         assertEquals(\"The reversed value is not correct.\", stackTrace, getStackTrace(reversed));\n     }\n \n+    @Test\n+    public void testConvertNullToDatabaseColumn() {\n+        assertNull(\"The converted value should be null.\", this.converter.convertToDatabaseColumn(null));\n+    }\n+\n+    @Test\n+    public void testConvertNullOrBlankToEntityAttribute() {\n+        assertNull(\"The converted attribute should be null (1).\", this.converter.convertToEntityAttribute(null));\n+        assertNull(\"The converted attribute should be null (2).\", this.converter.convertToEntityAttribute(\"\"));\n+    }\n+\n     private static String getStackTrace(Throwable throwable) {\n         String returnValue = throwable.toString() + \"\\n\";\n ",
                "deletions": 0
            },
            {
                "sha": "ff7868816e02123c9a074707afebf9a170884514",
                "filename": "core/src/test/resources/META-INF/orm.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/orm.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/orm.xml",
                "status": "added",
                "changes": 34,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/META-INF/orm.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+\n+-->\n+<entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm\n+                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd\"\n+                 version=\"2.1\">\n+  <!-- This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=412454. This file can be deleted\n+   when that issue is fixed. -->\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextMapJsonAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextStackAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ContextStackJsonAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.MarkerAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.MessageAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.StackTraceElementAttributeConverter\" />\n+  <converter class=\"org.apache.logging.log4j.core.appender.db.jpa.converter.ThrowableAttributeConverter\" />\n+</entity-mappings>",
                "deletions": 0
            },
            {
                "sha": "b5382ab705d1f056958f8159653b98fd65b1412d",
                "filename": "core/src/test/resources/META-INF/persistence.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/persistence.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/core/src/test/resources/META-INF/persistence.xml",
                "status": "modified",
                "changes": 28,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/resources/META-INF/persistence.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -16,26 +16,26 @@\n  limitations under the License.\n \n -->\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n-             version=\"1.0\">\n+             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n+                                 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n+             version=\"2.1\">\n \n   <persistence-unit name=\"jpaAppenderTestUnit\">\n-    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n+    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n     <class>org.apache.logging.log4j.core.appender.db.jpa.TestBaseEntity</class>\n-    <!--<class>org.apache.logging.log4j.core.appender.db.jpa.TestBasicEntity</class>\n-      Until Hibernate fixes https://hibernate.atlassian.net/browse/HHH-8111-->\n+    <class>org.apache.logging.log4j.core.appender.db.jpa.TestBasicEntity</class>\n     <exclude-unlisted-classes>false</exclude-unlisted-classes>\n+    <shared-cache-mode>NONE</shared-cache-mode>\n     <properties>\n-      <property name=\"hibernate.connection.username\" value=\"sa\" />\n-      <property name=\"hibernate.connection.password\" value=\"\" />\n-      <property name=\"hibernate.connection.driver_class\" value=\"org.hsqldb.jdbcDriver\" />\n-      <property name=\"hibernate.connection.url\" value=\"jdbc:hsqldb:mem:Log4j;ifexists=true\" />\n-      <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.HSQLDialect\" />\n-      <property name=\"hibernate.show_sql\" value=\"true\" />\n-      <property name=\"hibernate.format_sql\" value=\"true\" />\n+      <property name=\"javax.persistence.jdbc.driver\" value=\"org.hsqldb.jdbcDriver\"/>\n+      <property name=\"javax.persistence.jdbc.url\" value=\"jdbc:hsqldb:mem:Log4j;ifexists=true\"/>\n+      <property name=\"javax.persistence.jdbc.user\" value=\"sa\"/>\n+      <property name=\"javax.persistence.jdbc.password\" value=\"\"/>\n+      <property name=\"eclipselink.logging.level\" value=\"FINE\"/>\n+      <property name=\"eclipselink.logging.level.sql\" value=\"FINE\"/>\n+      <property name=\"eclipselink.logging.parameters\" value=\"true\"/>\n     </properties>\n   </persistence-unit>\n ",
                "deletions": 14
            },
            {
                "sha": "21beca5a95c43e4a3e1203c84d7cf39706e4c03a",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/pom.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/pom.xml",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/pom.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -423,14 +423,14 @@\n         <version>1.3.172</version>\n       </dependency>\n       <dependency>\n-        <groupId>org.hibernate</groupId>\n-        <artifactId>hibernate-entitymanager</artifactId>\n-        <version>4.3.0.Beta3</version>\n+        <groupId>org.eclipse.persistence</groupId>\n+        <artifactId>org.eclipse.persistence.jpa</artifactId>\n+        <version>2.5.0</version>\n       </dependency>\n       <dependency>\n-        <groupId>org.hibernate.javax.persistence</groupId>\n-        <artifactId>hibernate-jpa-2.1-api</artifactId>\n-        <version>1.0.0.Draft-16</version>\n+        <groupId>org.eclipse.persistence</groupId>\n+        <artifactId>javax.persistence</artifactId>\n+        <version>2.1.0</version>\n       </dependency>\n       <dependency>\n         <groupId>org.mongodb</groupId>",
                "deletions": 6
            },
            {
                "sha": "d278665b6e78753618c373b85f2fa0fcd0c05d40",
                "filename": "src/site/xdoc/manual/appenders.xml",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/3c524ea93f69294d543f3b37d11d0b1afa936a21/src/site/xdoc/manual/appenders.xml",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/3c524ea93f69294d543f3b37d11d0b1afa936a21/src/site/xdoc/manual/appenders.xml",
                "status": "modified",
                "changes": 42,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/site/xdoc/manual/appenders.xml?ref=3c524ea93f69294d543f3b37d11d0b1afa936a21",
                "patch": "@@ -1217,7 +1217,7 @@\n <configuration status=\"error\">\n   <appenders>\n     <Jdbc name=\"databaseAppender\" tableName=\"dbo.application_log\">\n-      <DataSource jndiName=\"java:/comp/env/jdbc/ApplicationDataSource\" />\n+      <DataSource jndiName=\"java:/comp/env/jdbc/LoggingDataSource\" />\n       <Column name=\"eventDate\" isEventTimestamp=\"true\" />\n       <Column name=\"level\" pattern=\"%level\" />\n       <Column name=\"logger\" pattern=\"%logger\" />\n@@ -1472,9 +1472,13 @@\n         </subsection>\n         <a name=\"JPAAppender\"/>\n         <subsection name=\"JPAAppender\">\n-          <p>The JPAAppender writes log events to a relational database table using the Java Persistence API.\n+          <p>The JPAAppender writes log events to a relational database table using the Java Persistence API 2.1.\n             It requires the API and a provider implementation be on the classpath. It also requires a decorated entity\n-            configured to persist to the table desired.</p>\n+            configured to persist to the table desired. The entity should either extend\n+            org.apache.logging.log4j.core.appender.db.jpa.BasicLogEventEntity (if you mostly want to use the default\n+            mappings) or org.apache.logging.log4j.core.appender.db.jpa.AbstractLogEventWrapperEntity (if you want to\n+            significantly customize the mappings). See the Javadoc for these two classes for more information. You can\n+            also consult the source code of these two classes as an example of how to implement the entity.</p>\n           <table>\n             <tr>\n               <th>Parameter Name</th>\n@@ -1519,13 +1523,17 @@\n             <caption align=\"top\">JPAAppender Parameters</caption>\n           </table>\n           <p>\n-            Here is a sample configurations for the JPAAppender. The first XML sample is the Log4j configuration file,\n-            the second is the persistence.xml file. Hibernate ORM is assumed here, but any JPA provider will do:\n+            Here is a sample configuration for the JPAAppender. The first XML sample is the Log4j configuration file,\n+            the second is the persistence.xml file. EclipseLink is assumed here, but any JPA provider will do. You\n+            should <em>always</em> create a <em>separate</em> persistence unit for logging, for two reasons. First,\n+            &lt;shared-cache-mode&gt; <em>must</em> be set to \"NONE,\" which is usually not desired in normal JPA usage.\n+            Also, for performance reasons the logging entity should be isolated in its own persistence unit away from\n+            all other entities.\n \n             <pre class=\"prettyprint linenums lang-xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <configuration status=\"error\">\n   <appenders>\n-    <Jpa name=\"databaseAppender\" persistenceUnitName=\"appPersistenceUnit\"\n+    <Jpa name=\"databaseAppender\" persistenceUnitName=\"loggingPersistenceUnit\"\n          entityClassName=\"com.example.logging.JpaLogEntity\" />\n   </appenders>\n   <loggers>\n@@ -1536,26 +1544,26 @@\n </configuration>]]></pre>\n \n             <pre class=\"prettyprint linenums lang-xml\"><![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-                                 http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n-             version=\"1.0\">\n-  <persistence-unit name=\"appPersistenceUnit\">\n-    <provider>org.hibernate.ejb.HibernatePersistence</provider>\n-    <jpa-data-source>jdbc/ApplicationDataSource</jpa-data-source>\n+             xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n+                                 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n+             version=\"2.1\">\n+\n+  <persistence-unit name=\"loggingPersistenceUnit\">\n+    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n+    <non-jta-data-source>jdbc/LoggingDataSource</non-jta-data-source>\n     <class>com.example.logging.JpaLogEntity</class>\n-    <properties>\n-      <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQL5Dialect\" />\n-    </properties>\n+    <shared-cache-mode>NONE</shared-cache-mode>\n   </persistence-unit>\n+\n </persistence>]]></pre>\n \n             <pre class=\"prettyprint linenums lang-java\"><![CDATA[package com.example.logging;\n ...\n @Entity\n @Table(name=\"application_log\", schema=\"dbo\")\n-public class JpaLogEntity extends LogEventWrapperEntity {\n+public class JpaLogEntity extends AbstractLogEventWrapperEntity {\n     private static final long serialVersionUID = 1L;\n     private long id = 0L;\n ",
                "deletions": 17
            }
        ],
        "patched_files": [
            "MarkerAttributeConverter.java",
            "ContextMapJsonAttributeConverter.java",
            "JPADatabaseManager.java",
            "ContextMapAttributeConverter.java",
            "ContextStackJsonAttributeConverter.java",
            "ContextStackAttributeConverter.java",
            "StackTraceElementAttributeConverter.java",
            "JPAAppender.java",
            "MessageAttributeConverter.java",
            "AbstractLogEventWrapperEntity.java",
            "ThrowableAttributeConverter.java"
        ],
        "unit_tests": [
            "StackTraceElementAttributeConverterTest.java",
            "ContextMapJsonAttributeConverterTest.java",
            "ThrowableAttributeConverterTest.java",
            "ContextMapAttributeConverterTest.java",
            "ContextStackJsonAttributeConverterTest.java",
            "MessageAttributeConverterTest.java",
            "ContextStackAttributeConverterTest.java",
            "MarkerAttributeConverterTest.java",
            "TestBaseEntity.java",
            "JPAAppenderTest.java",
            "TestBasicEntity.java"
        ]
    },
    "logging-log4j2_bd9f086": {
        "repo": "logging-log4j2",
        "message": "Config Refactor.\n\n  - Modified StatusLogger.getListeners() to return an Iterable \n    instead of an Iterator for convenience.\n  - Renamed BasicConfiguration to AbstractConfiguration.\n  - Pulled up the toByteArray method from XML/JSONConfiguration.\n  - Moved the three XML/YAML/JSONConfigurations to their own packages.\n  - Created a StatusConfiguration builder for setting up StatusLogger\n    and reducing redundant code.\n  - Simplified constructors for configuration classes (still needs \n    work; there's a lot of commonality between the two main ones still).\n  - Migrated some status logging to use parameters.\n  - Fixed some potential bugs in a couple places:\n    * Saw a configuration element name being interpolated.\n    * Modified the status dest attribute to be interpolated.\n    * Prevented an NPE if the given file URI for the status logger \n      doesn't exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1580734 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/logging-log4j2/commit/bd9f0862661fab3ed13632bda2cf23bb58ae74da",
        "parent": "https://github.com/apache/logging-log4j2/commit/b4f80ea47d49f85aa33a075302a6d90163d5109d",
        "bug_id": "logging-log4j2_bd9f086",
        "file": [
            {
                "sha": "d328f504bcbaf006b8a508220a72d246865d42e1",
                "filename": "log4j-1.2-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-1.2-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-1.2-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-1.2-api/src/test/java/org/apache/log4j/BasicConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,14 +16,14 @@\n  */\n package org.apache.log4j;\n \n+import java.net.URI;\n+\n import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.core.config.BaseConfiguration;\n+import org.apache.logging.log4j.core.config.AbstractConfiguration;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n \n-import java.net.URI;\n-\n /**\n  *\n  */\n@@ -44,7 +44,7 @@ public Configuration getConfiguration(final String name, final URI configLocatio\n         return new BasicConfiguration();\n     }\n \n-    public class BasicConfiguration extends BaseConfiguration {\n+    public class BasicConfiguration extends AbstractConfiguration {\n \n         private static final String DEFAULT_LEVEL = \"org.apache.logging.log4j.level\";\n ",
                "deletions": 4
            },
            {
                "sha": "2a881a703c8a90bb31a5b267c54ec0a2744c9563",
                "filename": "log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -17,11 +17,13 @@\n package org.apache.logging.log4j.status;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n@@ -37,7 +39,7 @@\n  */\n public final class StatusLogger extends AbstractLogger {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 2L;\n \n     /**\n      * System property that can be configured with the number of entries in the queue. Once the limit\n@@ -57,11 +59,11 @@\n \n     private final SimpleLogger logger;\n \n-    private final CopyOnWriteArrayList<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();\n-    private final ReentrantReadWriteLock listenersLock = new ReentrantReadWriteLock();\n+    private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();\n+    private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();\n \n     private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);\n-    private final ReentrantLock msgLock = new ReentrantLock();\n+    private final Lock msgLock = new ReentrantLock();\n \n     private int listenersLevel;\n \n@@ -126,11 +128,11 @@ public void removeListener(final StatusListener listener) {\n     }\n \n     /**\n-     * Returns a thread safe Iterator for the StatusListener.\n-     * @return An Iterator for the list of StatusListeners.\n+     * Returns a thread safe Iterable for the StatusListener.\n+     * @return An Iterable for the list of StatusListeners.\n      */\n-    public Iterator<StatusListener> getListeners() {\n-        return listeners.iterator();\n+    public Iterable<StatusListener> getListeners() {\n+        return listeners;\n     }\n \n     /**",
                "deletions": 9
            },
            {
                "sha": "46569d59e2a715ed472c026dd23e6ad376b4d4ac",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java",
                "status": "renamed",
                "changes": 27,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,6 +16,9 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.io.Serializable;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Array;\n@@ -67,14 +70,15 @@\n import org.apache.logging.log4j.util.PropertiesUtil;\n \n /**\n- * The Base Configuration. Many configuration implementations will extend this class.\n+ * The base Configuration. Many configuration implementations will extend this class.\n  */\n-public abstract class BaseConfiguration extends AbstractFilterable implements Configuration {\n+public abstract class AbstractConfiguration extends AbstractFilterable implements Configuration {\n \n     /**\n      * Allow subclasses access to the status logger without creating another instance.\n      */\n     protected static final Logger LOGGER = StatusLogger.getLogger();\n+    private static final int BUF_SIZE = 16384;\n \n     /**\n      * The root node of the configuration.\n@@ -84,8 +88,7 @@\n     /**\n      * Listeners for configuration changes.\n      */\n-    protected final List<ConfigurationListener> listeners =\n-        new CopyOnWriteArrayList<ConfigurationListener>();\n+    protected final List<ConfigurationListener> listeners = new CopyOnWriteArrayList<ConfigurationListener>();\n \n     /**\n      * The ConfigurationMonitor that checks for configuration changes.\n@@ -131,14 +134,13 @@\n     /**\n      * Constructor.\n      */\n-    protected BaseConfiguration() {\n+    protected AbstractConfiguration() {\n         componentMap.put(Configuration.CONTEXT_PROPERTIES, properties);\n         pluginManager = new PluginManager(\"Core\");\n         rootNode = new Node();\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public Map<String, String> getProperties() {\n         return properties;\n     }\n@@ -966,4 +968,17 @@ private void setParents() {\n             }\n         }\n     }\n+\n+    protected byte[] toByteArray(final InputStream is) throws IOException {\n+        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\n+        int nRead;\n+        final byte[] data = new byte[BUF_SIZE];\n+\n+        while ((nRead = is.read(data, 0, data.length)) != -1) {\n+            buffer.write(data, 0, nRead);\n+        }\n+\n+        return buffer.toByteArray();\n+    }\n }",
                "deletions": 6,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java"
            },
            {
                "sha": "d5ae8a37ce385e53022076c32d313d7c0e582923",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -56,7 +56,7 @@\n  * A ConfigurationFactory implementation can be added to the classpath and\n  * configured as a plugin. The Order annotation should be used to configure the\n  * factory to be the first one inspected. See\n- * {@linkplain XMLConfigurationFactory} for an example.</li>\n+ * {@linkplain org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory} for an example.</li>\n  * </ol>\n  *\n  * If the ConfigurationFactory that was added returns null on a call to",
                "deletions": 1
            },
            {
                "sha": "f5d6a184d1efc91f9e2839a113bbb77279938f14",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/DefaultConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -31,7 +31,7 @@\n  * specify the property, Log4j uses the ERROR Level. Log Events will be printed using the basic formatting provided\n  * by each Message.\n  */\n-public class DefaultConfiguration extends BaseConfiguration {\n+public class DefaultConfiguration extends AbstractConfiguration {\n \n     /**\n      * The name of the default configuration.",
                "deletions": 1
            },
            {
                "sha": "7390b88438e5151771f9f8fdb7a17b0cca02a35b",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/NullConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -21,7 +21,7 @@\n /**\n  * This configuration defaults to no logging.\n  */\n-public class NullConfiguration extends BaseConfiguration {\n+public class NullConfiguration extends AbstractConfiguration {\n \n     public static final String NULL_NAME = \"Null\";\n \n@@ -31,4 +31,5 @@ public NullConfiguration() {\n         final LoggerConfig root = getRootLogger();\n         root.setLevel(Level.OFF);\n     }\n+\n }",
                "deletions": 1
            },
            {
                "sha": "ea3728c6dc5248882c94d3804d1e89513b83c3e5",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfiguration.java",
                "status": "renamed",
                "changes": 168,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,46 +14,39 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.json;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n import java.io.InputStream;\n-import java.io.PrintStream;\n-import java.net.URISyntaxException;\n-import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n-import org.apache.logging.log4j.Level;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.logging.log4j.core.config.AbstractConfiguration;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.FileConfigurationMonitor;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.Reconfigurable;\n import org.apache.logging.log4j.core.config.plugins.PluginManager;\n import org.apache.logging.log4j.core.config.plugins.PluginType;\n import org.apache.logging.log4j.core.config.plugins.ResolverUtil;\n-import org.apache.logging.log4j.core.helpers.FileUtils;\n+import org.apache.logging.log4j.core.config.status.StatusConfiguration;\n import org.apache.logging.log4j.core.helpers.Patterns;\n-import org.apache.logging.log4j.status.StatusConsoleListener;\n-import org.apache.logging.log4j.status.StatusListener;\n-import org.apache.logging.log4j.status.StatusLogger;\n-\n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n \n /**\n  * Creates a Node hierarchy from a JSON file.\n  */\n-public class JSONConfiguration extends BaseConfiguration implements Reconfigurable {\n-\n-    private static final String[] VERBOSE_CLASSES = new String[] {ResolverUtil.class.getName()};\n+public class JSONConfiguration extends AbstractConfiguration implements Reconfigurable {\n \n-    private static final int BUF_SIZE = 16384;\n+    private static final String[] VERBOSE_CLASSES = new String[]{ResolverUtil.class.getName()};\n \n     private final List<Status> status = new ArrayList<Status>();\n \n@@ -62,99 +55,55 @@\n     private final File configFile;\n \n     public JSONConfiguration(final ConfigurationFactory.ConfigurationSource configSource) {\n-        final List<String> messages = new ArrayList<String>();\n-\n         this.configFile = configSource.getFile();\n-        byte[] buffer;\n-\n         try {\n             final InputStream configStream = configSource.getInputStream();\n-            buffer = toByteArray(configStream);\n+            byte[] buffer = toByteArray(configStream);\n             configStream.close();\n             final InputStream is = new ByteArrayInputStream(buffer);\n-            final ObjectMapper mapper = getObjectMapper();\n-            root = mapper.readTree(is);\n+            root = getObjectMapper().readTree(is);\n             if (root.size() == 1) {\n-                final Iterator<JsonNode> i = root.elements();\n-                root = i.next();\n+                for (final JsonNode node : root) {\n+                    root = node;\n+                }\n             }\n             processAttributes(rootNode, root);\n-            Level status = getDefaultStatus();\n-            boolean verbose = false;\n-            PrintStream stream = System.out;\n+            final StatusConfiguration statusConfig = new StatusConfiguration()\n+                    .withVerboseClasses(VERBOSE_CLASSES)\n+                    .withStatus(getDefaultStatus());\n             for (final Map.Entry<String, String> entry : rootNode.getAttributes().entrySet()) {\n-                if (\"status\".equalsIgnoreCase(entry.getKey())) {\n-                    status = Level.toLevel(getStrSubstitutor().replace(entry.getValue()), null);\n-                    if (status == null) {\n-                        status = Level.ERROR;\n-                        messages.add(\"Invalid status specified: \" + entry.getValue() + \". Defaulting to ERROR\");\n-                    }\n-                } else if (\"dest\".equalsIgnoreCase(entry.getKey())) {\n-                    final String dest = entry.getValue();\n-                    if (dest != null) {\n-                        if (dest.equalsIgnoreCase(\"err\")) {\n-                            stream = System.err;\n-                        } else {\n-                            try {\n-                                final File destFile = FileUtils.fileFromURI(FileUtils.getCorrectedFilePathUri(dest));\n-                                final String enc = Charset.defaultCharset().name();\n-                                stream = new PrintStream(new FileOutputStream(destFile), true, enc);\n-                            } catch (final URISyntaxException use) {\n-                                System.err.println(\"Unable to write to \" + dest + \". Writing to stdout\");\n-                            }\n-                        }\n-                    }\n-                } else if (\"shutdownHook\".equalsIgnoreCase(entry.getKey())) {\n-                    String hook = getStrSubstitutor().replace(entry.getValue());\n-                    isShutdownHookEnabled = !hook.equalsIgnoreCase(\"disable\");\n+                final String key = entry.getKey();\n+                final String value = getStrSubstitutor().replace(entry.getValue());\n+                if (\"status\".equalsIgnoreCase(key)) {\n+                    statusConfig.withStatus(value);\n+                } else if (\"dest\".equalsIgnoreCase(key)) {\n+                    statusConfig.withDestination(value);\n+                } else if (\"shutdownHook\".equalsIgnoreCase(key)) {\n+                    isShutdownHookEnabled = !\"disable\".equalsIgnoreCase(value);\n                 } else if (\"verbose\".equalsIgnoreCase(entry.getKey())) {\n-                    verbose = Boolean.parseBoolean(getStrSubstitutor().replace(entry.getValue()));\n-                } else if (\"packages\".equalsIgnoreCase(entry.getKey())) {\n-                    final String[] packages = getStrSubstitutor().replace(entry.getValue()).split(Patterns.COMMA_SEPARATOR);\n+                    statusConfig.withVerbosity(value);\n+                } else if (\"packages\".equalsIgnoreCase(key)) {\n+                    final String[] packages = value.split(Patterns.COMMA_SEPARATOR);\n                     for (final String p : packages) {\n                         PluginManager.addPackage(p);\n                     }\n-                } else if (\"name\".equalsIgnoreCase(entry.getKey())) {\n-                    setName(getStrSubstitutor().replace(entry.getValue()));\n-                } else if (\"monitorInterval\".equalsIgnoreCase(entry.getKey())) {\n-                    final int interval = Integer.parseInt(getStrSubstitutor().replace(entry.getValue()));\n+                } else if (\"name\".equalsIgnoreCase(key)) {\n+                    setName(value);\n+                } else if (\"monitorInterval\".equalsIgnoreCase(key)) {\n+                    final int interval = Integer.parseInt(value);\n                     if (interval > 0 && configFile != null) {\n                         monitor = new FileConfigurationMonitor(this, configFile, listeners, interval);\n                     }\n-                } else if (\"advertiser\".equalsIgnoreCase(entry.getKey())) {\n-                    createAdvertiser(getStrSubstitutor().replace(entry.getValue()), configSource, buffer,\n-                        \"application/json\");\n-                }\n-            }\n-\n-            final Iterator<StatusListener> statusIter = ((StatusLogger) LOGGER).getListeners();\n-            boolean found = false;\n-            while (statusIter.hasNext()) {\n-                final StatusListener listener = statusIter.next();\n-                if (listener instanceof StatusConsoleListener) {\n-                    found = true;\n-                    ((StatusConsoleListener) listener).setLevel(status);\n-                    if (!verbose) {\n-                        ((StatusConsoleListener) listener).setFilters(VERBOSE_CLASSES);\n-                    }\n-                }\n-            }\n-            if (!found && status != Level.OFF) {\n-                final StatusConsoleListener listener = new StatusConsoleListener(status, stream);\n-                if (!verbose) {\n-                    listener.setFilters(VERBOSE_CLASSES);\n-                }\n-                ((StatusLogger) LOGGER).registerListener(listener);\n-                for (final String msg : messages) {\n-                    LOGGER.error(msg);\n+                } else if (\"advertiser\".equalsIgnoreCase(key)) {\n+                    createAdvertiser(value, configSource, buffer, \"application/json\");\n                 }\n             }\n+            statusConfig.initialize();\n             if (getName() == null) {\n                 setName(configSource.getLocation());\n             }\n         } catch (final Exception ex) {\n-            LOGGER.error(\"Error parsing \" + configSource.getLocation(), ex);\n-            ex.printStackTrace();\n+            LOGGER.error(\"Error parsing {}\", configSource.getLocation(), ex);\n         }\n     }\n \n@@ -175,7 +124,7 @@ public void setup() {\n             final Map.Entry<String, JsonNode> entry = iter.next();\n             final JsonNode n = entry.getValue();\n             if (n.isObject()) {\n-                LOGGER.debug(\"Processing node for object \" + entry.getKey());\n+                LOGGER.debug(\"Processing node for object {}\", entry.getKey());\n                 children.add(constructNode(entry.getKey(), rootNode, n));\n             } else if (n.isArray()) {\n                 LOGGER.error(\"Arrays are not supported at the root configuration.\");\n@@ -197,7 +146,7 @@ public Configuration reconfigure() {\n                     new ConfigurationFactory.ConfigurationSource(new FileInputStream(configFile), configFile);\n                 return new JSONConfiguration(source);\n             } catch (final FileNotFoundException ex) {\n-                LOGGER.error(\"Cannot locate file \" + configFile, ex);\n+                LOGGER.error(\"Cannot locate file {}\", configFile, ex);\n             }\n         }\n         return null;\n@@ -217,28 +166,28 @@ private Node constructNode(final String name, final Node parent, final JsonNode\n                     status.add(new Status(name, n, ErrorType.CLASS_NOT_FOUND));\n                 }\n                 if (n.isArray()) {\n-                    LOGGER.debug(\"Processing node for array \" + entry.getKey());\n+                    LOGGER.debug(\"Processing node for array {}\", entry.getKey());\n                     for (int i = 0; i < n.size(); ++i) {\n                         final String pluginType = getType(n.get(i), entry.getKey());\n                         final PluginType<?> entryType = pluginManager.getPluginType(pluginType);\n                         final Node item = new Node(node, entry.getKey(), entryType);\n                         processAttributes(item, n.get(i));\n                         if (pluginType.equals(entry.getKey())) {\n-                            LOGGER.debug(\"Processing \" + entry.getKey() + \"[\" + i + \"]\");\n+                            LOGGER.debug(\"Processing {}[{}]\", entry.getKey(), i);\n                         } else {\n-                            LOGGER.debug(\"Processing \" + pluginType + \" \" + entry.getKey() + \"[\" + i + \"]\");\n+                            LOGGER.debug(\"Processing {} {}[{}]\", pluginType, entry.getKey(), i);\n                         }\n                         final Iterator<Map.Entry<String, JsonNode>> itemIter = n.get(i).fields();\n                         final List<Node> itemChildren = item.getChildren();\n                         while (itemIter.hasNext()) {\n                             final Map.Entry<String, JsonNode> itemEntry = itemIter.next();\n                             if (itemEntry.getValue().isObject()) {\n-                                LOGGER.debug(\"Processing node for object \" + itemEntry.getKey());\n+                                LOGGER.debug(\"Processing node for object {}\", itemEntry.getKey());\n                                 itemChildren.add(constructNode(itemEntry.getKey(), item, itemEntry.getValue()));\n                             } else if (itemEntry.getValue().isArray()) {\n                                 JsonNode array = itemEntry.getValue();\n                                 String entryName = itemEntry.getKey();\n-                                LOGGER.debug(\"Processing array for object \" + entryName);\n+                                LOGGER.debug(\"Processing array for object {}\", entryName);\n                                 for (int j = 0; j < array.size(); ++j) {\n                                     itemChildren.add(constructNode(entryName, item, array.get(j)));\n                                 }\n@@ -248,7 +197,7 @@ private Node constructNode(final String name, final Node parent, final JsonNode\n                         children.add(item);\n                     }\n                 } else {\n-                    LOGGER.debug(\"Processing node for object \" + entry.getKey());\n+                    LOGGER.debug(\"Processing node for object {}\", entry.getKey());\n                     children.add(constructNode(entry.getKey(), node, n));\n                 }\n             } else {\n@@ -260,12 +209,12 @@ private Node constructNode(final String name, final Node parent, final JsonNode\n         if (type == null) {\n             t = \"null\";\n         } else {\n-            t = type.getElementName() + \":\" + type.getPluginClass();\n+            t = type.getElementName() + ':' + type.getPluginClass();\n         }\n \n         final String p = node.getParent() == null ? \"null\" : node.getParent().getName() == null ?\n-            \"root\" : node.getParent().getName();\n-        LOGGER.debug(\"Returning \" + node.getName() + \" with parent \" + p + \" of type \" +  t);\n+                \"root\" : node.getParent().getName();\n+        LOGGER.debug(\"Returning {} with parent {} of type {}\", node.getName(), p, t);\n         return node;\n     }\n \n@@ -297,19 +246,6 @@ private void processAttributes(final Node parent, final JsonNode node) {\n         }\n     }\n \n-    protected byte[] toByteArray(final InputStream is) throws IOException {\n-        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-\n-        int nRead;\n-        final byte[] data = new byte[BUF_SIZE];\n-\n-        while ((nRead = is.read(data, 0, data.length)) != -1) {\n-            buffer.write(data, 0, nRead);\n-        }\n-\n-        return buffer.toByteArray();\n-    }\n-\n     /**\n      * The error that occurred.\n      */\n@@ -320,7 +256,7 @@ private void processAttributes(final Node parent, final JsonNode node) {\n     /**\n      * Status for recording errors.\n      */\n-    private class Status {\n+    private static class Status {\n         private final JsonNode node;\n         private final String name;\n         private final ErrorType errorType;",
                "deletions": 116,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/JSONConfiguration.java"
            },
            {
                "sha": "efd800fbc5e1037e912652deb5ad5a16622fad88",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfigurationFactory.java",
                "status": "renamed",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/json/JSONConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,8 +14,11 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.json;\n \n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.Order;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n \n /**",
                "deletions": 1,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/JSONConfigurationFactory.java"
            },
            {
                "sha": "9fedb26967a45954c4fb17078349d13720783641",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java",
                "status": "added",
                "changes": 224,
                "additions": 224,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -0,0 +1,224 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.logging.log4j.core.config.status;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.helpers.FileUtils;\n+import org.apache.logging.log4j.status.StatusConsoleListener;\n+import org.apache.logging.log4j.status.StatusListener;\n+import org.apache.logging.log4j.status.StatusLogger;\n+\n+/**\n+ * Configuration for setting up {@link StatusConsoleListener} instances.\n+ */\n+public class StatusConfiguration {\n+\n+    @SuppressWarnings(\"UseOfSystemOutOrSystemErr\")\n+    private static final PrintStream DEFAULT_STREAM = System.out;\n+    private static final Level DEFAULT_STATUS = Level.ERROR;\n+    private static final Verbosity DEFAULT_VERBOSITY = Verbosity.QUIET;\n+\n+    private final Collection<String> errorMessages = Collections.synchronizedCollection(new LinkedList<String>());\n+    private final StatusLogger logger = StatusLogger.getLogger();\n+\n+    private volatile boolean initialized = false;\n+\n+    private PrintStream destination = DEFAULT_STREAM;\n+    private Level status = DEFAULT_STATUS;\n+    private Verbosity verbosity = DEFAULT_VERBOSITY;\n+    private String[] verboseClasses;\n+\n+    /**\n+     * Specifies how verbose the StatusLogger should be.\n+     */\n+    public static enum Verbosity {\n+        QUIET, VERBOSE;\n+\n+        /**\n+         * Parses the verbosity property into an enum.\n+         *\n+         * @param value property value to parse.\n+         * @return enum corresponding to value, or QUIET by default.\n+         */\n+        public static Verbosity toVerbosity(final String value) {\n+            return Boolean.parseBoolean(value) ? VERBOSE : QUIET;\n+        }\n+    }\n+\n+    /**\n+     * Logs an error message to the StatusLogger. If the StatusLogger hasn't been set up yet, queues the message to be\n+     * logged after initialization.\n+     *\n+     * @param message error message to log.\n+     */\n+    public void error(final String message) {\n+        if (!this.initialized) {\n+            this.errorMessages.add(message);\n+        } else {\n+            this.logger.error(message);\n+        }\n+    }\n+\n+    /**\n+     * Specifies the destination for StatusLogger events. This can be {@code out} (default) for using\n+     * {@link System#out standard out}, {@code err} for using {@link System#err standard error}, or a file URI to\n+     * which log events will be written. If the provided URI is invalid, then the default destination of standard\n+     * out will be used.\n+     *\n+     * @param destination where status log messages should be output.\n+     * @return {@code this}\n+     */\n+    public StatusConfiguration withDestination(final String destination) {\n+        try {\n+            this.destination = parseStreamName(destination);\n+        } catch (final URISyntaxException e) {\n+            this.error(\"Could not parse URI [\" + destination + \"]. Falling back to default of stdout.\");\n+            this.destination = DEFAULT_STREAM;\n+        } catch (final FileNotFoundException e) {\n+            this.error(\"File could not be found at [\" + destination + \"]. Falling back to default of stdout.\");\n+            this.destination = DEFAULT_STREAM;\n+        }\n+        return this;\n+    }\n+\n+    private PrintStream parseStreamName(final String name) throws URISyntaxException, FileNotFoundException {\n+        if (name == null || name.equalsIgnoreCase(\"out\")) {\n+            return DEFAULT_STREAM;\n+        }\n+        if (name.equalsIgnoreCase(\"err\")) {\n+            return System.err;\n+        }\n+        final URI destination = FileUtils.getCorrectedFilePathUri(name);\n+        final File output = FileUtils.fileFromURI(destination);\n+        if (output == null) {\n+            // don't want any NPEs, no sir\n+            return DEFAULT_STREAM;\n+        }\n+        final FileOutputStream fos = new FileOutputStream(output);\n+        return new PrintStream(fos, true);\n+    }\n+\n+    /**\n+     * Specifies the logging level by name to use for filtering StatusLogger messages.\n+     *\n+     * @param status name of logger level to filter below.\n+     * @return {@code this}\n+     * @see Level\n+     */\n+    public StatusConfiguration withStatus(final String status) {\n+        this.status = Level.toLevel(status, null);\n+        if (this.status == null) {\n+            this.error(\"Invalid status level specified: \" + status + \". Defaulting to ERROR.\");\n+            this.status = Level.ERROR;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Specifies the logging level to use for filtering StatusLogger messages.\n+     *\n+     * @param status logger level to filter below.\n+     * @return {@code this}\n+     */\n+    public StatusConfiguration withStatus(final Level status) {\n+        this.status = status;\n+        return this;\n+    }\n+\n+    /**\n+     * Specifies the verbosity level to log at. This only applies to classes configured by\n+     * {@link #withVerboseClasses(String...) verboseClasses}.\n+     *\n+     * @param verbosity basic filter for status logger messages.\n+     * @return {@code this}\n+     */\n+    public StatusConfiguration withVerbosity(final String verbosity) {\n+        this.verbosity = Verbosity.toVerbosity(verbosity);\n+        return this;\n+    }\n+\n+    /**\n+     * Specifies which class names to filter if the configured verbosity level is QUIET.\n+     *\n+     * @param verboseClasses names of classes to filter if not using VERBOSE.\n+     * @return {@code this}\n+     */\n+    public StatusConfiguration withVerboseClasses(final String... verboseClasses) {\n+        this.verboseClasses = verboseClasses;\n+        return this;\n+    }\n+\n+    /**\n+     * Configures and initializes the StatusLogger using the configured options in this instance.\n+     */\n+    public void initialize() {\n+        if (!this.initialized) {\n+            if (this.status == Level.OFF) {\n+                this.initialized = true;\n+            } else {\n+                final boolean configured = configureExistingStatusConsoleListener();\n+                if (!configured) {\n+                    registerNewStatusConsoleListener();\n+                }\n+                migrateSavedLogMessages();\n+            }\n+        }\n+    }\n+\n+    private boolean configureExistingStatusConsoleListener() {\n+        boolean configured = false;\n+        for (final StatusListener statusListener : this.logger.getListeners()) {\n+            if (statusListener instanceof StatusConsoleListener) {\n+                final StatusConsoleListener listener = (StatusConsoleListener) statusListener;\n+                listener.setLevel(this.status);\n+                if (this.verbosity == Verbosity.QUIET) {\n+                    listener.setFilters(this.verboseClasses);\n+                }\n+                configured = true;\n+            }\n+        }\n+        return configured;\n+    }\n+\n+\n+    private void registerNewStatusConsoleListener() {\n+        final StatusConsoleListener listener = new StatusConsoleListener(this.status, this.destination);\n+        if (this.verbosity == Verbosity.QUIET) {\n+            listener.setFilters(this.verboseClasses);\n+        }\n+        this.logger.registerListener(listener);\n+    }\n+\n+    private void migrateSavedLogMessages() {\n+        for (final String message : this.errorMessages) {\n+            this.logger.error(message);\n+        }\n+        this.initialized = true;\n+        this.errorMessages.clear();\n+    }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "029d5f868e185d48c502d0ccbd461681c57aace5",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfiguration.java",
                "status": "renamed",
                "changes": 162,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,24 +14,17 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.xml;\n \n import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.PrintStream;\n-import java.net.URISyntaxException;\n-import java.nio.charset.Charset;\n import java.util.ArrayList;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-\n import javax.xml.XMLConstants;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n@@ -42,15 +35,18 @@\n import javax.xml.validation.SchemaFactory;\n import javax.xml.validation.Validator;\n \n-import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.config.AbstractConfiguration;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.FileConfigurationMonitor;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.Reconfigurable;\n import org.apache.logging.log4j.core.config.plugins.PluginManager;\n import org.apache.logging.log4j.core.config.plugins.PluginType;\n import org.apache.logging.log4j.core.config.plugins.ResolverUtil;\n-import org.apache.logging.log4j.core.helpers.FileUtils;\n+import org.apache.logging.log4j.core.config.status.StatusConfiguration;\n+import org.apache.logging.log4j.core.helpers.Loader;\n import org.apache.logging.log4j.core.helpers.Patterns;\n-import org.apache.logging.log4j.status.StatusConsoleListener;\n-import org.apache.logging.log4j.status.StatusListener;\n-import org.apache.logging.log4j.status.StatusLogger;\n import org.w3c.dom.Attr;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n@@ -63,7 +59,7 @@\n /**\n  * Creates a Node hierarchy from an XML file.\n  */\n-public class XMLConfiguration extends BaseConfiguration implements Reconfigurable {\n+public class XMLConfiguration extends AbstractConfiguration implements Reconfigurable {\n \n     private static final String XINCLUDE_FIXUP_LANGUAGE = \"http://apache.org/xml/features/xinclude/fixup-language\";\n \n@@ -73,8 +69,6 @@\n \n     private static final String LOG4J_XSD = \"Log4j-config.xsd\";\n \n-    private static final int BUF_SIZE = 16384;\n-\n     private final List<Status> status = new ArrayList<Status>();\n \n     private Element rootElement;\n@@ -108,28 +102,28 @@ private static void enableXInclude(final DocumentBuilderFactory factory) {\n             // Alternative: We set if a system property on the command line is set, for example:\n             // -DLog4j.XInclude=true\n             factory.setXIncludeAware(true);\n-        } catch (UnsupportedOperationException e) {\n-            LOGGER.warn(\"The DocumentBuilderFactory does not support XInclude: \" + factory, e);\n-        } catch (AbstractMethodError err) {\n-            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support XInclude: \" + factory);\n+        } catch (final UnsupportedOperationException e) {\n+            LOGGER.warn(\"The DocumentBuilderFactory does not support XInclude: {}\", factory, e);\n+        } catch (@SuppressWarnings(\"ErrorNotRethrown\") final AbstractMethodError err) {\n+            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support XInclude: {}\", factory, err);\n         }\n         try {\n             // Alternative: We could specify all features and values with system properties like:\n             // -DLog4j.DocumentBuilderFactory.Feature=\"http://apache.org/xml/features/xinclude/fixup-base-uris true\"\n             factory.setFeature(XINCLUDE_FIXUP_BASE_URIS, true);\n         } catch (ParserConfigurationException e) {\n-            LOGGER.warn(\"The DocumentBuilderFactory [\" + factory + \"] does not support the feature [\"\n-                    + XINCLUDE_FIXUP_BASE_URIS + \"]\", e);\n-        } catch (AbstractMethodError err) {\n-            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support setFeature: \" + factory);\n+            LOGGER.warn(\"The DocumentBuilderFactory [{}] does not support the feature [{}].\", factory,\n+                    XINCLUDE_FIXUP_BASE_URIS, e);\n+        } catch (@SuppressWarnings(\"ErrorNotRethrown\") final AbstractMethodError err) {\n+            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support setFeature: {}\", factory);\n         }\n         try {\n             factory.setFeature(XINCLUDE_FIXUP_LANGUAGE, true);\n         } catch (ParserConfigurationException e) {\n-            LOGGER.warn(\"The DocumentBuilderFactory [\" + factory + \"] does not support the feature [\"\n-                    + XINCLUDE_FIXUP_LANGUAGE + \"]\", e);\n-        } catch (AbstractMethodError err) {\n-            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support setFeature: \" + factory);\n+            LOGGER.warn(\"The DocumentBuilderFactory [{}] does not support the feature [{}].\", factory,\n+                    XINCLUDE_FIXUP_LANGUAGE, e);\n+        } catch (@SuppressWarnings(\"ErrorNotRethrown\") final AbstractMethodError err) {\n+            LOGGER.warn(\"The DocumentBuilderFactory is out of date and does not support setFeature: {}\", factory);\n         }\n     }\n \n@@ -138,89 +132,48 @@ public XMLConfiguration(final ConfigurationFactory.ConfigurationSource configSou\n         byte[] buffer = null;\n \n         try {\n-            final List<String> messages = new ArrayList<String>();\n             final InputStream configStream = configSource.getInputStream();\n             buffer = toByteArray(configStream);\n             configStream.close();\n             final InputSource source = new InputSource(new ByteArrayInputStream(buffer));\n             final Document document = newDocumentBuilder().parse(source);\n             rootElement = document.getDocumentElement();\n             final Map<String, String> attrs = processAttributes(rootNode, rootElement);\n-            Level status = getDefaultStatus();\n-            boolean verbose = false;\n-            PrintStream stream = System.out;\n-\n+            final StatusConfiguration statusConfig = new StatusConfiguration()\n+                    .withVerboseClasses(VERBOSE_CLASSES)\n+                    .withStatus(getDefaultStatus());\n             for (final Map.Entry<String, String> entry : attrs.entrySet()) {\n-                if (\"status\".equalsIgnoreCase(entry.getKey())) {\n-                    final Level stat = Level.toLevel(getStrSubstitutor().replace(entry.getValue()), null);\n-                    if (stat != null) {\n-                        status = stat;\n-                    } else {\n-                        messages.add(\"Invalid status specified: \" + entry.getValue() + \". Defaulting to \" + status);\n-                    }\n-                } else if (\"dest\".equalsIgnoreCase(entry.getKey())) {\n-                    final String dest = getStrSubstitutor().replace(entry.getValue());\n-                    if (dest != null) {\n-                        if (dest.equalsIgnoreCase(\"err\")) {\n-                            stream = System.err;\n-                        } else {\n-                            try {\n-                                final File destFile = FileUtils.fileFromURI(FileUtils.getCorrectedFilePathUri(dest));\n-                                final String enc = Charset.defaultCharset().name();\n-                                stream = new PrintStream(new FileOutputStream(destFile), true, enc);\n-                            } catch (final URISyntaxException use) {\n-                                System.err.println(\"Unable to write to \" + dest + \". Writing to stdout\");\n-                            }\n-                        }\n-                    }\n-                } else if (\"shutdownHook\".equalsIgnoreCase(entry.getKey())) {\n-                    String hook = getStrSubstitutor().replace(entry.getValue());\n-                    isShutdownHookEnabled = !hook.equalsIgnoreCase(\"disable\");\n-                } else if (\"verbose\".equalsIgnoreCase(entry.getKey())) {\n-                    verbose = Boolean.parseBoolean(getStrSubstitutor().replace(entry.getValue()));\n-                } else if (\"packages\".equalsIgnoreCase(getStrSubstitutor().replace(entry.getKey()))) {\n-                    final String[] packages = entry.getValue().split(Patterns.COMMA_SEPARATOR);\n+                final String key = entry.getKey();\n+                final String value = getStrSubstitutor().replace(entry.getValue());\n+                if (\"status\".equalsIgnoreCase(key)) {\n+                    statusConfig.withStatus(value);\n+                } else if (\"dest\".equalsIgnoreCase(key)) {\n+                    statusConfig.withDestination(value);\n+                } else if (\"shutdownHook\".equalsIgnoreCase(key)) {\n+                    isShutdownHookEnabled = !\"disable\".equalsIgnoreCase(value);\n+                } else if (\"verbose\".equalsIgnoreCase(key)) {\n+                    statusConfig.withVerbosity(value);\n+                } else if (\"packages\".equalsIgnoreCase(key)) {\n+                    final String[] packages = value.split(Patterns.COMMA_SEPARATOR);\n                     for (final String p : packages) {\n                         PluginManager.addPackage(p);\n                     }\n-                } else if (\"name\".equalsIgnoreCase(entry.getKey())) {\n-                    setName(getStrSubstitutor().replace(entry.getValue()));\n-                } else if (\"strict\".equalsIgnoreCase(entry.getKey())) {\n-                    strict = Boolean.parseBoolean(getStrSubstitutor().replace(entry.getValue()));\n-                } else if (\"schema\".equalsIgnoreCase(entry.getKey())) {\n-                    schema = getStrSubstitutor().replace(entry.getValue());\n-                } else if (\"monitorInterval\".equalsIgnoreCase(entry.getKey())) {\n-                    final int interval = Integer.parseInt(getStrSubstitutor().replace(entry.getValue()));\n+                } else if (\"name\".equalsIgnoreCase(key)) {\n+                    setName(value);\n+                } else if (\"strict\".equalsIgnoreCase(key)) {\n+                    strict = Boolean.parseBoolean(value);\n+                } else if (\"schema\".equalsIgnoreCase(key)) {\n+                    schema = value;\n+                } else if (\"monitorInterval\".equalsIgnoreCase(key)) {\n+                    final int interval = Integer.parseInt(value);\n                     if (interval > 0 && configFile != null) {\n                         monitor = new FileConfigurationMonitor(this, configFile, listeners, interval);\n                     }\n-                } else if (\"advertiser\".equalsIgnoreCase(entry.getKey())) {\n-                    createAdvertiser(getStrSubstitutor().replace(entry.getValue()), configSource, buffer, \"text/xml\");\n+                } else if (\"advertiser\".equalsIgnoreCase(key)) {\n+                    createAdvertiser(value, configSource, buffer, \"text/xml\");\n                 }\n             }\n-            final Iterator<StatusListener> iter = ((StatusLogger) LOGGER).getListeners();\n-            boolean found = false;\n-            while (iter.hasNext()) {\n-                final StatusListener listener = iter.next();\n-                if (listener instanceof StatusConsoleListener) {\n-                    found = true;\n-                    ((StatusConsoleListener) listener).setLevel(status);\n-                    if (!verbose) {\n-                        ((StatusConsoleListener) listener).setFilters(VERBOSE_CLASSES);\n-                    }\n-                }\n-            }\n-            if (!found && status != Level.OFF) {\n-                final StatusConsoleListener listener = new StatusConsoleListener(status, stream);\n-                if (!verbose) {\n-                    listener.setFilters(VERBOSE_CLASSES);\n-                }\n-                ((StatusLogger) LOGGER).registerListener(listener);\n-                for (final String msg : messages) {\n-                    LOGGER.error(msg);\n-                }\n-            }\n-\n+            statusConfig.initialize();\n         } catch (final SAXException domEx) {\n             LOGGER.error(\"Error parsing \" + configSource.getLocation(), domEx);\n         } catch (final IOException ioe) {\n@@ -231,9 +184,9 @@ public XMLConfiguration(final ConfigurationFactory.ConfigurationSource configSou\n         if (strict && schema != null && buffer != null) {\n             InputStream is = null;\n             try {\n-                is = getClass().getClassLoader().getResourceAsStream(schema);\n+                is = Loader.getResourceAsStream(schema, XMLConfiguration.class.getClassLoader());\n             } catch (final Exception ex) {\n-                LOGGER.error(\"Unable to access schema \" + schema);\n+                LOGGER.error(\"Unable to access schema {}\", this.schema);\n             }\n             if (is != null) {\n                 final Source src = new StreamSource(is, LOG4J_XSD);\n@@ -345,19 +298,6 @@ private String getType(final Element element) {\n         return element.getTagName();\n     }\n \n-    private byte[] toByteArray(final InputStream is) throws IOException {\n-        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-\n-        int nRead;\n-        final byte[] data = new byte[BUF_SIZE];\n-\n-        while ((nRead = is.read(data, 0, data.length)) != -1) {\n-            buffer.write(data, 0, nRead);\n-        }\n-\n-        return buffer.toByteArray();\n-    }\n-\n     private Map<String, String> processAttributes(final Node node, final Element element) {\n         final NamedNodeMap attrs = element.getAttributes();\n         final Map<String, String> attributes = node.getAttributes();\n@@ -385,7 +325,7 @@ private String getType(final Element element) {\n     /**\n      * Status for recording errors.\n      */\n-    private class Status {\n+    private static class Status {\n         private final Element element;\n         private final String name;\n         private final ErrorType errorType;",
                "deletions": 111,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfiguration.java"
            },
            {
                "sha": "12bd0b688033f3997f95b24406c7ccec0df8bf64",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationFactory.java",
                "status": "renamed",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,8 +14,11 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.xml;\n \n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.Order;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n \n /**",
                "deletions": 1,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/XMLConfigurationFactory.java"
            },
            {
                "sha": "fc0df8f08596881ee99891521e44cee2a1224082",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfiguration.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfiguration.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfiguration.java",
                "status": "renamed",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfiguration.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,11 +14,13 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.yaml;\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.json.JSONConfiguration;\n \n public class YAMLConfiguration extends JSONConfiguration {\n ",
                "deletions": 1,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/YAMLConfiguration.java"
            },
            {
                "sha": "552637a93fac46a5961a53927cf48686635be001",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfigurationFactory.java",
                "status": "renamed",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/config/yaml/YAMLConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,12 +14,15 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n-\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n+package org.apache.logging.log4j.core.config.yaml;\n \n import java.io.File;\n \n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n+import org.apache.logging.log4j.core.config.Order;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+\n @Plugin(name = \"YAMLConfigurationFactory\", category = \"ConfigurationFactory\")\n @Order(7)\n public class YAMLConfigurationFactory extends ConfigurationFactory {",
                "deletions": 3,
                "previous_filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/config/YAMLConfigurationFactory.java"
            },
            {
                "sha": "a09ee6870f549a7422f9a36210b9c5cdae8ac373",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -41,8 +41,8 @@\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n-import org.apache.logging.log4j.core.config.XMLConfiguration;\n-import org.apache.logging.log4j.core.config.XMLConfigurationFactory;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n+import org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory;\n \n /**\n  * Listens for events over a socket connection.",
                "deletions": 2
            },
            {
                "sha": "1780dbbe65ddc0601a79617837610346d716b3e6",
                "filename": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/main/java/org/apache/logging/log4j/core/net/UDPSocketServer.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -38,8 +38,8 @@\n import org.apache.logging.log4j.core.LogEventListener;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n-import org.apache.logging.log4j.core.config.XMLConfiguration;\n-import org.apache.logging.log4j.core.config.XMLConfigurationFactory;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n+import org.apache.logging.log4j.core.config.xml.XMLConfigurationFactory;\n \n /**\n  * Listens for events over a socket connection.",
                "deletions": 2
            },
            {
                "sha": "eb09b8b381f2fa527f935fc5d1da4d717e29b812",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/BasicConfigurationFactory.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,14 +16,14 @@\n  */\n package org.apache.logging.log4j.core;\n \n+import java.net.URI;\n+\n import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.core.config.BaseConfiguration;\n+import org.apache.logging.log4j.core.config.AbstractConfiguration;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n \n-import java.net.URI;\n-\n /**\n  *\n  */\n@@ -44,7 +44,7 @@ public Configuration getConfiguration(final ConfigurationSource source) {\n         return null;\n     }\n \n-    public class BasicConfiguration extends BaseConfiguration {\n+    public class BasicConfiguration extends AbstractConfiguration {\n \n         private static final String DEFAULT_LEVEL = \"org.apache.logging.log4j.level\";\n ",
                "deletions": 4
            },
            {
                "sha": "f47ef06469d2dff7f2f638f7a585096e4c0507e2",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/LateConfigTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,15 +16,16 @@\n  */\n package org.apache.logging.log4j.core;\n \n+import java.io.File;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.DefaultConfiguration;\n-import org.apache.logging.log4j.core.config.XMLConfiguration;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import java.io.File;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n ",
                "deletions": 2
            },
            {
                "sha": "fc20573446d56775aef68d7f375fc0d6e8e9214c",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractConfigurationTest.java",
                "status": "modified",
                "changes": 109,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AbstractConfigurationTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,94 +16,61 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.util.Map;\n+\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.Filter;\n import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.filter.ThreadContextMapFilter;\n-import org.apache.logging.log4j.status.StatusLogger;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.apache.logging.log4j.core.config.plugins.PluginManager;\n import org.junit.Test;\n \n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.InputStreamReader;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n-public abstract class AbstractConfigurationTest {\n+public class AbstractConfigurationTest {\n \n-    public abstract String getConfigFile();\n \n-    @Before\n-    public void setUp() {\n-        System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY, getConfigFile());\n-    }\n+    @Test\n+    public void testMissingRootLogger() throws Exception {\n+        PluginManager.addPackage(\"org.apache.logging.log4j.test.appender\");\n+        final LoggerContext ctx = Configurator.initialize(\"Test1\", \"missingRootLogger.xml\");\n+        final Logger logger = LogManager.getLogger(\"sample.Logger1\");\n+        final Configuration config = ctx.getConfiguration();\n+        assertNotNull(\"Config not null\", config);\n+//        final String MISSINGROOT = \"MissingRootTest\";\n+//        assertTrue(\"Incorrect Configuration. Expected \" + MISSINGROOT + \" but found \" + config.getName(),\n+//                MISSINGROOT.equals(config.getName()));\n+        final Map<String, Appender> map = config.getAppenders();\n+        assertNotNull(\"Appenders not null\", map);\n+        assertEquals(\"Appenders Size\", 2, map.size());\n+        assertTrue(\"Contains List\", map.containsKey(\"List\"));\n+        assertTrue(\"Contains Console\", map.containsKey(\"Console\"));\n \n-    @After\n-    public void tearDown() {\n-        System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY);\n-        final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        ctx.reconfigure();\n-        StatusLogger.getLogger().reset();\n-    }\n+        final Map<String, LoggerConfig> loggerMap = config.getLoggers();\n+        assertNotNull(\"loggerMap not null\", loggerMap);\n+        assertEquals(\"loggerMap Size\", 1, loggerMap.size());\n+        // only the sample logger, no root logger in loggerMap!\n+        assertTrue(\"contains key=sample\", loggerMap.containsKey(\"sample\"));\n \n-    @Test\n-    public void testConfiguredAppenders() {\n-        final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n-        final Configuration c = ctx.getConfiguration();\n-        final Map<String, Appender> apps = c.getAppenders();\n-        assertNotNull(apps);\n-        assertEquals(3, apps.size());\n-    }\n+        final LoggerConfig sample = loggerMap.get(\"sample\");\n+        final Map<String, Appender> sampleAppenders = sample.getAppenders();\n+        assertEquals(\"sampleAppenders Size\", 1, sampleAppenders.size());\n+        // sample only has List appender, not Console!\n+        assertTrue(\"sample has appender List\", sampleAppenders.containsKey(\"List\"));\n \n-    @Test\n-    public void testLogger() {\n-        final Logger logger = LogManager.getLogger(\"org.apache.logging.log4j.test1.Test\");\n-        assertTrue(logger instanceof org.apache.logging.log4j.core.Logger);\n-        final org.apache.logging.log4j.core.Logger l = (org.apache.logging.log4j.core.Logger) logger;\n-        assertEquals(Level.DEBUG, l.getLevel());\n-        final int filterCount = l.filterCount();\n-        assertTrue(\"number of filters - \" + filterCount, filterCount == 1);\n-        final Iterator<Filter> iter = l.getFilters();\n-        final Filter filter = iter.next();\n-        assertTrue(filter instanceof ThreadContextMapFilter);\n-        final Map<String, Appender> appenders = l.getAppenders();\n-        assertNotNull(appenders);\n-        assertTrue(\"number of appenders = \" + appenders.size(), appenders.size() == 1);\n-        final Appender a = appenders.get(\"STDOUT\");\n-        assertNotNull(a);\n-        assertEquals(a.getName(), \"STDOUT\");\n-    }\n+        final AbstractConfiguration baseConfig = (AbstractConfiguration) config;\n+        final LoggerConfig root = baseConfig.getRootLogger();\n+        final Map<String, Appender> rootAppenders = root.getAppenders();\n+        assertEquals(\"rootAppenders Size\", 1, rootAppenders.size());\n+        // root only has Console appender!\n+        assertTrue(\"root has appender Console\", rootAppenders.containsKey(\"Console\"));\n+        assertEquals(Level.ERROR, root.getLevel());\n \n-    @Test\n-    public void logToFile() throws Exception {\n-        final FileOutputStream fos = new FileOutputStream(\"target/test.log\", false);\n-        fos.flush();\n-        fos.close();\n-        final Logger logger = LogManager.getLogger(\"org.apache.logging.log4j.test2.Test\");\n-        logger.debug(\"This is a test\");\n-        final BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(\"target/test.log\")));\n-        try {\n-            int count = 0;\n-            String str = \"\";\n-            while (is.ready()) {\n-                str = is.readLine();\n-                ++count;\n-            }\n-            assertTrue(\"Incorrect count \" + count, count == 1);\n-            assertTrue(\"Bad data\", str.endsWith(\"This is a test\"));\n-        } finally {\n-            is.close();\n-        }\n+        logger.isDebugEnabled();\n+        Configurator.shutdown(ctx);\n     }\n \n }",
                "deletions": 71
            },
            {
                "sha": "d7c1ce48c6e3f47cac3e3a28fe89b971068c446b",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/AdvertiserTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,16 +16,17 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.io.File;\n+import java.util.Map;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.util.Map;\n-\n import static org.junit.Assert.assertTrue;\n \n /**\n@@ -44,7 +45,7 @@ public static void setupClass() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n         final Configuration config = ctx.getConfiguration();\n         if (config instanceof XMLConfiguration) {\n-            final String name = ((XMLConfiguration) config).getName();\n+            final String name = config.getName();\n             if (name == null || !name.equals(\"XMLConfigTest\")) {\n                 ctx.reconfigure();\n             }",
                "deletions": 4
            },
            {
                "sha": "3bda4c7c661c91b7459f24846540871b88aa7642",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/BaseConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/b4f80ea47d49f85aa33a075302a6d90163d5109d/log4j-core/src/test/java/org/apache/logging/log4j/core/config/BaseConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/b4f80ea47d49f85aa33a075302a6d90163d5109d/log4j-core/src/test/java/org/apache/logging/log4j/core/config/BaseConfigurationTest.java",
                "status": "removed",
                "changes": 74,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/BaseConfigurationTest.java?ref=b4f80ea47d49f85aa33a075302a6d90163d5109d",
                "patch": "@@ -1,74 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache license, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the license for the specific language governing permissions and\n- * limitations under the license.\n- */\n-package org.apache.logging.log4j.core.config;\n-\n-import static org.junit.Assert.*;\n-\n-import java.util.Map;\n-\n-import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.config.plugins.PluginManager;\n-import org.junit.Test;\n-\n-public class BaseConfigurationTest {\n-\n-\n-    @Test\n-    public void testMissingRootLogger() throws Exception {\n-        PluginManager.addPackage(\"org.apache.logging.log4j.test.appender\");\n-        final LoggerContext ctx = Configurator.initialize(\"Test1\", \"missingRootLogger.xml\");\n-        final Logger logger = LogManager.getLogger(\"sample.Logger1\");\n-        final Configuration config = ctx.getConfiguration();\n-        assertNotNull(\"Config not null\", config);\n-//        final String MISSINGROOT = \"MissingRootTest\";\n-//        assertTrue(\"Incorrect Configuration. Expected \" + MISSINGROOT + \" but found \" + config.getName(),\n-//                MISSINGROOT.equals(config.getName()));\n-        final Map<String, Appender> map = config.getAppenders();\n-        assertNotNull(\"Appenders not null\", map);\n-        assertEquals(\"Appenders Size\", 2, map.size());\n-        assertTrue(\"Contains List\", map.containsKey(\"List\"));\n-        assertTrue(\"Contains Console\", map.containsKey(\"Console\"));\n-\n-        final Map<String, LoggerConfig> loggerMap = config.getLoggers();\n-        assertNotNull(\"loggerMap not null\", loggerMap);\n-        assertEquals(\"loggerMap Size\", 1, loggerMap.size());\n-        // only the sample logger, no root logger in loggerMap!\n-        assertTrue(\"contains key=sample\", loggerMap.containsKey(\"sample\"));\n-\n-        final LoggerConfig sample = loggerMap.get(\"sample\");\n-        final Map<String, Appender> sampleAppenders = sample.getAppenders();\n-        assertEquals(\"sampleAppenders Size\", 1, sampleAppenders.size());\n-        // sample only has List appender, not Console!\n-        assertTrue(\"sample has appender List\", sampleAppenders.containsKey(\"List\"));\n-\n-        final BaseConfiguration baseConfig = (BaseConfiguration) config;\n-        final LoggerConfig root = baseConfig.getRootLogger();\n-        final Map<String, Appender> rootAppenders = root.getAppenders();\n-        assertEquals(\"rootAppenders Size\", 1, rootAppenders.size());\n-        // root only has Console appender!\n-        assertTrue(\"root has appender Console\", rootAppenders.containsKey(\"Console\"));\n-        assertEquals(Level.ERROR, root.getLevel());\n-\n-        logger.isDebugEnabled();\n-        Configurator.shutdown(ctx);\n-    }\n-\n-}",
                "deletions": 74
            },
            {
                "sha": "f52de5f1d33d9e18a9436c184469eb814b270d2c",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/CustomConfigurationTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,21 +16,21 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.io.File;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.Layout;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.appender.FileAppender;\n-import org.apache.logging.log4j.core.helpers.Constants;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n import org.apache.logging.log4j.core.layout.PatternLayout;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import java.io.File;\n-\n import static org.junit.Assert.assertTrue;\n \n /**",
                "deletions": 3
            },
            {
                "sha": "6aae81c7ecbbdef6596b75d35326f2b2776232ad",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/FileOutputTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/FileOutputTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/FileOutputTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/FileOutputTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -16,16 +16,17 @@\n  */\n package org.apache.logging.log4j.core.config;\n \n+import java.io.File;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.xml.XMLConfiguration;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import java.io.File;\n-\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  *\n@@ -43,7 +44,7 @@ public static void setupClass() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext();\n         final Configuration config = ctx.getConfiguration();\n         if (config instanceof XMLConfiguration) {\n-            final String name = ((XMLConfiguration) config).getName();\n+            final String name = config.getName();\n             if (name == null || !name.equals(\"XMLConfigTest\")) {\n                 ctx.reconfigure();\n             }",
                "deletions": 4
            },
            {
                "sha": "adf2853c4aca2be9e16b013294b3466ac617c11e",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationPropsTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationPropsTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationPropsTest.java",
                "status": "renamed",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLConfigurationPropsTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,17 +14,19 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.xml;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.helpers.Constants;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  *",
                "deletions": 2,
                "previous_filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/XMLConfigurationPropsTest.java"
            },
            {
                "sha": "35ed0f0338632eab227d279a5e53f1c9038fa930",
                "filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLLoggerPropsTest.java",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLLoggerPropsTest.java",
                "raw_url": "https://github.com/apache/logging-log4j2/raw/bd9f0862661fab3ed13632bda2cf23bb58ae74da/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLLoggerPropsTest.java",
                "status": "renamed",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j-core/src/test/java/org/apache/logging/log4j/core/config/xml/XMLLoggerPropsTest.java?ref=bd9f0862661fab3ed13632bda2cf23bb58ae74da",
                "patch": "@@ -14,21 +14,23 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j.core.config;\n+package org.apache.logging.log4j.core.config.xml;\n+\n+import java.util.List;\n+import java.util.Map;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.Configuration;\n+import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n-import java.util.List;\n-import java.util.Map;\n-\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n ",
                "deletions": 4,
                "previous_filename": "log4j-core/src/test/java/org/apache/logging/log4j/core/config/XMLLoggerPropsTest.java"
            }
        ],
        "patched_files": [
            "JSONConfigurationFactory.java",
            "XMLConfiguration.java",
            "BasicConfigurationFactory.java",
            "Advertiser.java",
            "SocketServer.java",
            "ConfigurationFactory.java",
            "YAMLConfiguration.java",
            "UDPSocketServer.java",
            "NullConfiguration.java",
            "DefaultConfiguration.java",
            "StatusConfiguration.java",
            "AbstractConfiguration.java",
            "YAMLConfigurationFactory.java",
            "JSONConfiguration.java",
            "StatusLogger.java",
            "XMLConfigurationFactory.java"
        ],
        "unit_tests": [
            "AbstractConfigurationTest.java",
            "CustomConfigurationTest.java",
            "LateConfigTest.java",
            "XMLConfigurationPropsTest.java",
            "FileOutputTest.java",
            "XMLLoggerPropsTest.java",
            "AdvertiserTest.java",
            "BaseConfigurationTest.java",
            "UDPSocketServerTest.java"
        ]
    }
}