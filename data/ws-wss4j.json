{
    "ws-wss4j_14143cf": {
        "bug_id": "ws-wss4j_14143cf",
        "commit": "https://github.com/apache/ws-wss4j/commit/14143cf0c8f9b51db753f7619713f71d799ac358",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358",
                "deletions": 15,
                "filename": "src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "patch": "@@ -222,23 +222,48 @@ public void prepare(Document doc) throws WSSecurityException, ConversationExcept\n         dkt.setID(dktId);\n         \n         if (strElem == null) {\n-            //Create the SecurityTokenRef to the Encrypted Key\n-            SecurityTokenReference strEncKey = new SecurityTokenReference(document);\n-            Reference ref = new Reference(document);\n+            SecurityTokenReference secRef = new SecurityTokenReference(document);\n+            String strUri = getWsConfig().getIdAllocator().createSecureId(\"STR-\", secRef);\n+            secRef.setID(strUri);\n             \n-            if (tokenIdDirectId) {\n-                ref.setURI(tokenIdentifier);\n-            } else {\n-                ref.setURI(\"#\" + tokenIdentifier);\n-            }\n-            if (customValueType != null && !\"\".equals(customValueType)) {\n-                ref.setValueType(customValueType);\n-            }\n-            if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n-                strEncKey.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+            switch (keyIdentifierType) {\n+            case WSConstants.CUSTOM_KEY_IDENTIFIER:\n+                secRef.setKeyIdentifier(customValueType, tokenIdentifier);\n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+                break;\n+            default:\n+                Reference ref = new Reference(document);\n+                \n+                if (tokenIdDirectId) {\n+                    ref.setURI(tokenIdentifier);\n+                } else {\n+                    ref.setURI(\"#\" + tokenIdentifier);\n+                }\n+                if (customValueType != null && !\"\".equals(customValueType)) {\n+                    ref.setValueType(customValueType);\n+                } \n+                if (WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML_TOKEN_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_SAML2_TOKEN_TYPE);\n+                } else if (WSConstants.WSS_ENC_KEY_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                    ref.setValueType(customValueType);\n+                } else if (!WSConstants.WSS_USERNAME_TOKEN_VALUE_TYPE.equals(customValueType)) {\n+                    secRef.addTokenType(WSConstants.WSS_ENC_KEY_VALUE_TYPE);\n+                }\n+\n+                secRef.setReference(ref);\n             }\n-            strEncKey.setReference(ref);\n-            dkt.setSecurityTokenReference(strEncKey); \n+            \n+            dkt.setSecurityTokenReference(secRef); \n         } else {\n             dkt.setSecurityTokenReference(strElem);\n         }",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/WSSecDerivedKeyBase.java",
                "sha": "8b28bfdd0baad12d020ca75a1533d6af769b3e51",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=14143cf0c8f9b51db753f7619713f71d799ac358",
                "deletions": 2,
                "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "patch": "@@ -308,9 +308,9 @@ public Element findProcessedTokenElement(\n         // \n         // Try to find a custom token\n         //\n-        if (cb != null && (WSConstants.WSC_SCT.equals(type))\n+        if (cb != null && (WSConstants.WSC_SCT.equals(type)\n             || WSConstants.WSS_SAML_KI_VALUE_TYPE.equals(type) \n-            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type)) {\n+            || WSConstants.WSS_SAML2_KI_VALUE_TYPE.equals(type))) {\n             //try to find a custom token\n             WSPasswordCallback pwcb = \n                 new WSPasswordCallback(id, WSPasswordCallback.CUSTOM_TOKEN);",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/14143cf0c8f9b51db753f7619713f71d799ac358/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "sha": "d567ef023d6b507ade311b205dcac035c566ed62",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE and added the ability to reference a token via a KeyIdentifier in a DerivedKeyToken",
        "parent": "https://github.com/apache/ws-wss4j/commit/98b81941fe820ceba1ec994bef09817b871d0e5c",
        "repo": "ws-wss4j",
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    },
    "ws-wss4j_5e1b261": {
        "bug_id": "ws-wss4j_5e1b261",
        "commit": "https://github.com/apache/ws-wss4j/commit/5e1b261a4aed4388316feb6e837c1a03b60c5333",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java?ref=5e1b261a4aed4388316feb6e837c1a03b60c5333",
                "deletions": 1,
                "filename": "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "patch": "@@ -483,7 +483,9 @@ public Element getFirstElement() {\n             }\n         } else if (SKI_URI.equals(value)) {\n             X509Certificate cert = getX509SKIAlias(crypto);\n-            return new X509Certificate[]{cert};\n+            if (cert != null) {\n+                return new X509Certificate[]{cert};\n+            }\n         } else if (THUMB_URI.equals(value)) {\n             Node node = getFirstElement().getFirstChild();\n             if (node == null) {",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/5e1b261a4aed4388316feb6e837c1a03b60c5333/src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java",
                "sha": "c43350a988d71e962bffd8ed718ebac5a47a3d41",
                "status": "modified"
            }
        ],
        "message": "[WSS-319] - NPE when certificate identified by SKI can't be found\n - Patch applied, thanks",
        "parent": "https://github.com/apache/ws-wss4j/commit/a78057b37ccab02e1e6388f4173d305a47001fc0",
        "repo": "ws-wss4j",
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    },
    "ws-wss4j_79cf43a": {
        "bug_id": "ws-wss4j_79cf43a",
        "commit": "https://github.com/apache/ws-wss4j/commit/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/main/java/org/apache/ws/security/message/token/UsernameToken.java?ref=79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8",
                "deletions": 0,
                "filename": "src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "patch": "@@ -511,6 +511,11 @@ public void setRawPassword(RequestData data) throws WSSecurityException {\n                 getName(), getPassword(), getPasswordType(), \n                 WSPasswordCallback.USERNAME_TOKEN, data\n             );\n+        \n+        if (data.getCallbackHandler() == null) {\n+            LOG.debug(\"CallbackHandler is null\");\n+            throw new WSSecurityException(WSSecurityException.FAILED_AUTHENTICATION);\n+        }\n         try {\n             data.getCallbackHandler().handle(new Callback[]{pwCb});\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/79cf43a698cbaf8bfc0d3a14888b5cbdbaa1c5f8/src/main/java/org/apache/ws/security/message/token/UsernameToken.java",
                "sha": "456cb776045f6bd8e0487e877cba6af7a24c96a2",
                "status": "modified"
            }
        ],
        "message": "Fix for possible NPE",
        "parent": "https://github.com/apache/ws-wss4j/commit/064b03279e94aa79b7a1baf9ac79fe07313256c6",
        "repo": "ws-wss4j",
        "unit_tests": [
            "UsernameTokenTest.java"
        ]
    },
    "ws-wss4j_83f9b14": {
        "bug_id": "ws-wss4j_83f9b14",
        "commit": "https://github.com/apache/ws-wss4j/commit/83f9b1431580cc5b740e0389482b0f8fa339b80e",
        "file": [
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/83f9b1431580cc5b740e0389482b0f8fa339b80e/src/org/apache/ws/security/message/token/UsernameToken.java",
                "changes": 109,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/src/org/apache/ws/security/message/token/UsernameToken.java?ref=83f9b1431580cc5b740e0389482b0f8fa339b80e",
                "deletions": 64,
                "filename": "src/org/apache/ws/security/message/token/UsernameToken.java",
                "patch": "@@ -103,14 +103,13 @@ public UsernameToken(WSSConfig wssConfig, Element elem) throws WSSecurityExcepti\n         if (elementUsername == null) {\n             throw new WSSecurityException(WSSecurityException.INVALID_SECURITY_TOKEN, \"badTokenType01\", new Object[]{el});\n         }\n+        hashed = false;\n         String type = elementPassword.getAttribute(\"Type\");\n-        if (type.equals(WSConstants.PASSWORD_DIGEST)) {\n+        if (type != null && type.equals(WSConstants.PASSWORD_DIGEST)) {\n             hashed = true;\n             if (elementNonce == null || elementCreated == null) {\n                 throw new WSSecurityException(WSSecurityException.INVALID_SECURITY_TOKEN, \"badTokenType01\", new Object[]{el});\n             }\n-        } else {\n-            hashed = false;\n         }\n     }\n \n@@ -154,9 +153,8 @@ public UsernameToken(WSSConfig wssConfig, Document doc, String passwordType) {\n         this.elementPassword.appendChild(doc.createTextNode(\"\"));\n         element.appendChild(elementPassword);\n \n-        if (passwordType.equals(WSConstants.PASSWORD_TEXT)) {\n-            hashed = false;\n-        } else {\n+        hashed = false;\n+        if (passwordType != null && passwordType.equals(WSConstants.PASSWORD_DIGEST)) {\n             hashed = true;\n             addNonce(doc);\n             addCreated(doc);\n@@ -200,18 +198,16 @@ public void addCreated(Document doc) {\n      * @return the data from the user name element.\n      */\n     public String getName() {\n-        if (this.elementUsername != null) {\n-            return getFirstNode(this.elementUsername).getData();\n-        }\n-        return null;\n-    }\n+\t\treturn nodeString (this.elementUsername);\n+\t}\n \n     /**\n-     * Set the user name.\n-     *\n-     * @param name sets a text node containing the use name into\n-     *             the user name element.\n-     */\n+\t * Set the user name.\n+\t * \n+\t * @param name\n+\t *            sets a text node containing the use name into the user name\n+\t *            element.\n+\t */\n     public void setName(String name) {\n         Text node = getFirstNode(this.elementUsername);\n         node.setData(name);\n@@ -223,60 +219,28 @@ public void setName(String name) {\n      * @return the data from the nonce element.\n      */\n     public String getNonce() {\n-        if (this.elementNonce != null) {\n-            return getFirstNode(this.elementNonce).getData();\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Set the nonce.\n-     * <p/>\n-     *\n-     * @param nonce sets a text node containing the nonce data into\n-     *              the nonce element.\n-     */\n-    public void setNonce(String nonce) {\n-        Text node = getFirstNode(this.elementNonce);\n-        node.setData(nonce);\n-    }\n+\t\treturn nodeString(this.elementNonce);\n+\t}\n \n     /**\n-     * Get the created timestamp.\n-     *\n-     * @return the data from the created time element.\n-     */\n+\t * Get the created timestamp.\n+\t * \n+\t * @return the data from the created time element.\n+\t */\n     public String getCreated() {\n-        if (this.elementCreated != null) {\n-            return getFirstNode(this.elementCreated).getData();\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Set the created timestamp.\n-     *\n-     * @param created sets a text node containing the created time data into\n-     *                the created time element.\n-     */\n-    public void setCreated(String created) {\n-        Text node = getFirstNode(this.elementCreated);\n-        node.setData(created);\n-    }\n+\t\treturn nodeString(this.elementCreated);\n+\t}\n \n     /**\n-     * Gets the password string.\n-     * This is the password as it is in the password element of a username,\n-     * token. Thus it can be either plain text or the password digest value.\n-     *\n-     * @return the password string or <code>null</code> if no such node exists.\n-     */\n+\t * Gets the password string. This is the password as it is in the password\n+\t * element of a username, token. Thus it can be either plain text or the\n+\t * password digest value.\n+\t * \n+\t * @return the password string or <code>null</code> if no such node\n+\t *         exists.\n+\t */\n     public String getPassword() {\n-        Text node = getFirstNode(this.elementPassword);\n-        if (node == null) {\n-            return null;\n-        }\n-        return node.getData();\n+    \treturn nodeString(this.elementPassword);\n     }\n \n     /**\n@@ -376,6 +340,23 @@ private Text getFirstNode(Element e) {\n         return ((node != null) && node instanceof Text) ? (Text) node : null;\n     }\n \n+    /**\n+     * Returns the data of an elemen as String or null if either the\n+     * the element does not contain a Text node or the node is empty.\n+     * \n+     * @param e DOM element\n+     * @return Element text node data as String\n+     */\n+    private String nodeString(Element e) {\n+        if (e != null) {\n+\t\t\tText node = getFirstNode(e);\n+\t\t\tif (node != null) {\n+\t\t\t\treturn node.getData();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+    \t\n+    }\n     /**\n      * Returns the dom element of this <code>UsernameToken</code> object.\n      *",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/83f9b1431580cc5b740e0389482b0f8fa339b80e/src/org/apache/ws/security/message/token/UsernameToken.java",
                "sha": "a712b32939c4120f44ba163d2fb9d7e4a9f0006f",
                "status": "modified"
            }
        ],
        "message": "Fix some problems that lead to NPE. Thanks to members\nof the mailing list for the problem reports.",
        "parent": "https://github.com/apache/ws-wss4j/commit/12acd69a47f7acaf5e874895c3cbddde8eb04d21",
        "repo": "ws-wss4j",
        "unit_tests": [
            "UsernameTokenTest.java"
        ]
    },
    "ws-wss4j_efd476e": {
        "bug_id": "ws-wss4j_efd476e",
        "commit": "https://github.com/apache/ws-wss4j/commit/efd476e12a6d736a036d692525ba452cddfa204e",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/ws-wss4j/blob/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/ws-wss4j/contents/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java?ref=efd476e12a6d736a036d692525ba452cddfa204e",
                "deletions": 0,
                "filename": "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "patch": "@@ -469,6 +469,10 @@ public Element getFirstElement() {\n      *         type was detected.\n      */\n     public X509Certificate[] getKeyIdentifier(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         Element elem = getFirstElement();\n         String value = elem.getAttributeNS(null, \"ValueType\");\n \n@@ -537,6 +541,10 @@ public String getKeyIdentifierEncodingType() {\n     }\n     \n     public X509Certificate getX509SKIAlias(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (skiBytes == null) {\n             skiBytes = getSKIBytes();\n             if (skiBytes == null) {\n@@ -609,6 +617,10 @@ public void setUnknownElement(Element unknownElement) {\n      * @return a certificate array or null if nothing found\n      */\n     public X509Certificate[] getX509IssuerSerial(Crypto crypto) throws WSSecurityException {\n+        if (crypto == null) {\n+            return null;\n+        }\n+        \n         if (issuerSerial == null) {\n             issuerSerial = getIssuerSerial();\n             if (issuerSerial == null) {",
                "raw_url": "https://github.com/apache/ws-wss4j/raw/efd476e12a6d736a036d692525ba452cddfa204e/ws-security-dom/src/main/java/org/apache/wss4j/dom/message/token/SecurityTokenReference.java",
                "sha": "576bf0c0903a58ad2301338389111cc08753b9d3",
                "status": "modified"
            }
        ],
        "message": "Fixing some NPEs",
        "parent": "https://github.com/apache/ws-wss4j/commit/88487a952848ea1c80faa66819b5801c338b82ef",
        "repo": "ws-wss4j",
        "unit_tests": [
            "SecurityTokenReferenceTest.java"
        ]
    }
}