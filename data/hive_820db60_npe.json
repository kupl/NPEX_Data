[
    {
        "repo": "hive",
        "commit": "https://github.com/apache/hive/commit/820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
        "bug_id": "hive_820db60",
        "message": "HIVE-19076: Fix NPE and TApplicationException in function related HiveMetastore methods (Marta Kuczora, via Peter Vary)",
        "parent": "https://github.com/apache/hive/commit/5eed779c611c7c766b69f992d76683c58b5772c9",
        "patched_files": [
            "HiveMetaStoreClient.java",
            "HiveMetaStore.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 47,
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "deletions": 2,
                "sha": "65ca63c61f4cc7dfece9b656668f9f079f5ad97c",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java",
                "patch": "@@ -6767,13 +6767,28 @@ private static MetaException newMetaException(Exception e) {\n     }\n \n     private void validateFunctionInfo(Function func) throws InvalidObjectException, MetaException {\n+      if (func == null) {\n+        throw new MetaException(\"Function cannot be null.\");\n+      }\n+      if (func.getFunctionName() == null) {\n+        throw new MetaException(\"Function name cannot be null.\");\n+      }\n+      if (func.getDbName() == null) {\n+        throw new MetaException(\"Database name in Function cannot be null.\");\n+      }\n       if (!MetaStoreUtils.validateName(func.getFunctionName(), null)) {\n         throw new InvalidObjectException(func.getFunctionName() + \" is not a valid object name\");\n       }\n       String className = func.getClassName();\n       if (className == null) {\n         throw new InvalidObjectException(\"Function class name cannot be null\");\n       }\n+      if (func.getOwnerType() == null) {\n+        throw new MetaException(\"Function owner type cannot be null.\");\n+      }\n+      if (func.getFunctionType() == null) {\n+        throw new MetaException(\"Function type cannot be null.\");\n+      }\n     }\n \n     @Override\n@@ -6826,11 +6841,17 @@ public void create_function(Function func) throws TException {\n     public void drop_function(String dbName, String funcName)\n         throws NoSuchObjectException, MetaException,\n         InvalidObjectException, InvalidInputException {\n+      if (funcName == null) {\n+        throw new MetaException(\"Function name cannot be null.\");\n+      }\n       boolean success = false;\n       Function func = null;\n       RawStore ms = getMS();\n       Map<String, String> transactionalListenerResponses = Collections.emptyMap();\n       String[] parsedDbName = parseDbName(dbName, conf);\n+      if (parsedDbName[DB_NAME] == null) {\n+        throw new MetaException(\"Database name cannot be null.\");\n+      }\n       try {\n         ms.openTransaction();\n         func = ms.getFunction(parsedDbName[CAT_NAME], parsedDbName[DB_NAME], funcName);\n@@ -6876,21 +6897,42 @@ public void drop_function(String dbName, String funcName)\n \n     @Override\n     public void alter_function(String dbName, String funcName, Function newFunc) throws TException {\n-      validateFunctionInfo(newFunc);\n+      String[] parsedDbName = parseDbName(dbName, conf);\n+      validateForAlterFunction(parsedDbName[DB_NAME], funcName, newFunc);\n       boolean success = false;\n       RawStore ms = getMS();\n-      String[] parsedDbName = parseDbName(dbName, conf);\n       try {\n         ms.openTransaction();\n         ms.alterFunction(parsedDbName[CAT_NAME], parsedDbName[DB_NAME], funcName, newFunc);\n         success = ms.commitTransaction();\n+      } catch (InvalidObjectException e) {\n+        // Throwing MetaException instead of InvalidObjectException as the InvalidObjectException\n+        // is not defined for the alter_function method in the Thrift interface.\n+        throwMetaException(e);\n       } finally {\n         if (!success) {\n           ms.rollbackTransaction();\n         }\n       }\n     }\n \n+    private void validateForAlterFunction(String dbName, String funcName, Function newFunc)\n+        throws MetaException {\n+      if (dbName == null || funcName == null) {\n+        throw new MetaException(\"Database and function name cannot be null.\");\n+      }\n+      try {\n+        validateFunctionInfo(newFunc);\n+      } catch (InvalidObjectException e) {\n+        // The validateFunctionInfo method is used by the create and alter function methods as well\n+        // and it can throw InvalidObjectException. But the InvalidObjectException is not defined\n+        // for the alter_function method in the Thrift interface, therefore a TApplicationException\n+        // will occur at the caller side. Re-throwing the InvalidObjectException as MetaException\n+        // would eliminate the TApplicationException at caller side.\n+        throw newMetaException(e);\n+      }\n+    }\n+\n     @Override\n     public List<String> get_functions(String dbName, String pattern)\n         throws MetaException {\n@@ -6938,6 +6980,9 @@ public GetAllFunctionsResponse get_all_functions()\n \n     @Override\n     public Function get_function(String dbName, String funcName) throws TException {\n+      if (dbName == null || funcName == null) {\n+        throw new MetaException(\"Database and function name cannot be null.\");\n+      }\n       startFunction(\"get_function\", \": \" + dbName + \".\" + funcName);\n \n       RawStore ms = getMS();",
                "changes": 49
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "filename": "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "deletions": 0,
                "sha": "867771849b5f3ef2cf446cc3bca1a59f5f19a3e2",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
                "patch": "@@ -2668,6 +2668,9 @@ public boolean isPartitionMarkedForEvent(String catName, String db_name, String\n \n   @Override\n   public void createFunction(Function func) throws TException {\n+    if (func == null) {\n+      throw new MetaException(\"Function cannot be null.\");\n+    }\n     if (!func.isSetCatName()) func.setCatName(getDefaultCatalog(conf));\n     client.create_function(func);\n   }",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 41,
                "raw_url": "https://github.com/apache/hive/raw/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java?ref=820db608f2878dde1d9c7b3fa3fbfdb3564710d6",
                "filename": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "deletions": 217,
                "sha": "b5705f90a072b2f5da7a04bdf68ea81cf680f5b0",
                "blob_url": "https://github.com/apache/hive/blob/820db608f2878dde1d9c7b3fa3fbfdb3564710d6/standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
                "patch": "@@ -37,9 +37,7 @@\n import org.apache.hadoop.hive.metastore.client.builder.DatabaseBuilder;\n import org.apache.hadoop.hive.metastore.client.builder.FunctionBuilder;\n import org.apache.hadoop.hive.metastore.minihms.AbstractMetaStoreService;\n-import org.apache.thrift.TApplicationException;\n import org.apache.thrift.TException;\n-import org.apache.thrift.transport.TTransportException;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n@@ -208,74 +206,39 @@ public void testCreateFunctionEmptyName() throws Exception {\n     client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n+  public void testCreateFunctionNullFunction() throws Exception {\n+    client.createFunction(null);\n+  }\n+\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullFunctionName() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullDatabaseName() throws Exception {\n     Function function = testFunctions[0];\n     function.setDbName(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullOwnerType() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(\"test_function_2\");\n     function.setOwnerType(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testCreateFunctionNullFunctionType() throws Exception {\n     Function function = testFunctions[0];\n     function.setFunctionName(\"test_function_2\");\n     function.setFunctionType(null);\n-\n-    try {\n-      client.createFunction(function);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.createFunction(function);\n   }\n \n   @Test(expected = NoSuchObjectException.class)\n@@ -331,18 +294,9 @@ public void testGetFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.getFunction(OTHER_DATABASE, function.getFunctionName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testGetFunctionNullDatabase() throws Exception {\n-    try {\n-      client.getFunction(null, OTHER_DATABASE);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws MetaException\n-      Assert.fail(\"Expected an NullPointerException or MetaException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (MetaException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.getFunction(null, OTHER_DATABASE);\n   }\n \n   @Test(expected = MetaException.class)\n@@ -371,32 +325,14 @@ public void testDropFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.dropFunction(OTHER_DATABASE, function.getFunctionName());\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropFunctionNullDatabase() throws Exception {\n-    try {\n-      client.dropFunction(null, \"no_such_function\");\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropFunction(null, \"no_such_function\");\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testDropFunctionNullFunctionName() throws Exception {\n-    try {\n-      client.dropFunction(DEFAULT_DATABASE, null);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.dropFunction(DEFAULT_DATABASE, null);\n   }\n \n   @Test\n@@ -601,190 +537,78 @@ public void testAlterFunctionNoSuchFunctionInThisDatabase() throws Exception {\n     client.alterFunction(OTHER_DATABASE, originalFunction.getFunctionName(), newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullDatabase() throws Exception {\n     Function newFunction = getNewFunction();\n-\n-    try {\n-      client.alterFunction(null, OTHER_DATABASE, newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(null, OTHER_DATABASE, newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionName() throws Exception {\n     Function newFunction = getNewFunction();\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, null, newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, null, newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunction() throws Exception {\n     Function originalFunction = testFunctions[1];\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, originalFunction.getFunctionName(), null);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, originalFunction.getFunctionName(), null);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionInvalidNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(\"test_function_2;\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionEmptyNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(\"\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullClassInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setClassName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullDatabaseNameInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setDbName(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullOwnerTypeInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setOwnerType(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNullFunctionTypeInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setFunctionType(null);\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // NullPointerException, remote throws TTransportException\n-      Assert.fail(\"Expected an NullPointerException or TTransportException to be thrown\");\n-    } catch (NullPointerException exception) {\n-      // Expected exception - Embedded MetaStore\n-    } catch (TTransportException exception) {\n-      // Expected exception - Remote MetaStore\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n-  @Test\n+  @Test(expected = MetaException.class)\n   public void testAlterFunctionNoSuchDatabaseInNew() throws Exception {\n     Function newFunction = getNewFunction();\n     newFunction.setDbName(\"no_such_database\");\n-\n-    try {\n-      client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n-      // TODO: Should have a check on the server side. Embedded metastore throws\n-      // InvalidObjectException, remote throws TApplicationException\n-      Assert.fail(\"Expected an InvalidObjectException or TApplicationException to be thrown\");\n-    } catch (InvalidObjectException exception) {\n-      // Expected exception - Embedded MetaStore\n-      exception.printStackTrace();\n-    } catch (TApplicationException exception) {\n-      // Expected exception - Remote MetaStore\n-      exception.printStackTrace();\n-    }\n+    client.alterFunction(DEFAULT_DATABASE, \"test_function_to_find_2\", newFunction);\n   }\n \n   @Test(expected = MetaException.class)",
                "changes": 258
            }
        ],
        "unit_tests": [
            "TestHiveMetaStore.java",
            "TestFunctions.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "standalone-metastore/src/test/java/org/apache/hadoop/hive/metastore/client/TestFunctions.java",
        "buggy_files": [
            "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java",
            "standalone-metastore/src/main/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java"
        ],
        "fixed": true
    }
]