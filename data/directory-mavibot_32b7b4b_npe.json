[
    {
        "repo": "directory-mavibot",
        "commit": "https://github.com/apache/directory-mavibot/commit/32b7b4b2e880590ed33ca76dbda8983761ea3179",
        "bug_id": "directory-mavibot_32b7b4b",
        "message": "o added support for replacing value of an existing key\no fixed an issue in InMemoryBTree when a key already exists\no fixed an NPE in findLeftMost() findRightMost() of PersistedLeaf of a persisted sub-BTree\no made RevisionName serializable\no added and updated tests",
        "parent": "https://github.com/apache/directory-mavibot/commit/b6102dad2a6809eb4c927007bad0b8147d69271f",
        "patched_files": [
            "SpaceReclaimer.java",
            "PersistedLeaf.java",
            "InMemoryLeaf.java",
            "PersistedValueHolder.java",
            "RevisionName.java",
            "AbstractValueHolder.java",
            "ValueHolder.java",
            "InMemoryBTree.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/AbstractValueHolder.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/AbstractValueHolder.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/AbstractValueHolder.java",
                "deletions": 0,
                "sha": "3038fbc1e9125c0bb007b1373d2f8d1e0809454c",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/AbstractValueHolder.java",
                "patch": "@@ -375,4 +375,25 @@ public void add( V value )\n             addInBtree( value );\n         }\n     }\n+    \n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public V replaceValueArray( V newValue )\n+    {\n+        if( isSubBtree() )\n+        {\n+            throw new IllegalStateException( \"method is not applicable for the duplicate B-Trees\" );\n+        }\n+        \n+        V tmp = valueArray[0];\n+        \n+        nbArrayElems = 1;\n+        valueArray[0] = newValue;\n+        \n+        return tmp;\n+    }\n+\n }",
                "changes": 21
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryBTree.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryBTree.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryBTree.java",
                "deletions": 0,
                "sha": "920afccbd953caecd7d2d45ef087cbc294326981",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryBTree.java",
                "patch": "@@ -389,6 +389,11 @@ public void close() throws IOException\n         // a Node or a Leaf\n         InsertResult<K, V> result = newBtreeHeader.getRootPage().insert( key, value, revision );\n \n+        if ( result instanceof ExistsResult )\n+        {\n+            return result;\n+        }\n+\n         if ( result instanceof ModifyResult )\n         {\n             ModifyResult<K, V> modifyResult = ( ( ModifyResult<K, V> ) result );",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryLeaf.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryLeaf.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryLeaf.java",
                "deletions": 8,
                "sha": "83c18ab2c27f7036da174fc7fb7b199e84d55f7c",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryLeaf.java",
                "patch": "@@ -748,12 +748,6 @@ else if ( nbElems > 0 )\n \n         boolean valueExists = valueHolder.contains( value );\n \n-        // Check we can add a new value\n-        if ( !valueExists && !btree.isAllowDuplicates() )\n-        {\n-            throw new DuplicateValueNotAllowedException( \"Duplicate values are not allowed\" );\n-        }\n-\n         if ( this.revision != revision )\n         {\n             // The page hasn't been modified yet, we need to copy it first\n@@ -764,19 +758,23 @@ else if ( nbElems > 0 )\n         valueHolder = newLeaf.values[pos];\n         V replacedValue = null;\n \n-        if ( !valueExists )\n+        if ( !valueExists && btree.isAllowDuplicates() )\n         {\n             valueHolder.add( value );\n             newLeaf.values[pos] = valueHolder;\n         }\n-        else\n+        else if ( valueExists && btree.isAllowDuplicates() )\n         {\n             // As strange as it sounds, we need to remove the value to reinject it.\n             // There are cases where the value retrieval just use one part of the\n             // value only (typically for LDAP Entries, where we use the DN)\n             replacedValue = valueHolder.remove( value );\n             valueHolder.add( value );\n         }\n+        else if ( !btree.isAllowDuplicates() )\n+        {\n+            replacedValue = valueHolder.replaceValueArray( value );\n+        }\n \n         // Create the result\n         InsertResult<K, V> result = new ModifyResult<K, V>( newLeaf, replacedValue );",
                "changes": 14
            },
            {
                "status": "modified",
                "additions": 53,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedLeaf.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedLeaf.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedLeaf.java",
                "deletions": 39,
                "sha": "97f5bb385cf1d3f237ef5e8412a8f97ffeb450ee",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedLeaf.java",
                "patch": "@@ -844,26 +844,29 @@ else if ( nbElems > 0 )\n         // Copy the keys and the values\n         System.arraycopy( keys, 0, newLeaf.keys, 0, nbElems );\n \n-        // It' not enough to copy the ValueHolder, we have to clone them\n-        // as ValueHolders are mutable\n-        int pos = 0;\n-\n-        for ( ValueHolder<V> valueHolder : values )\n+        if ( values != null )\n         {\n-            try\n-            {\n-                newLeaf.values[pos++] = valueHolder.clone();\n-            }\n-            catch ( CloneNotSupportedException e )\n-            {\n-                // TODO Auto-generated catch block\n-                e.printStackTrace();\n-            }\n-\n-            // Stop when we have copied nbElems values\n-            if ( pos == nbElems )\n+            // It' not enough to copy the ValueHolder, we have to clone them\n+            // as ValueHolders are mutable\n+            int pos = 0;\n+            \n+            for ( ValueHolder<V> valueHolder : values )\n             {\n-                break;\n+                try\n+                {\n+                    newLeaf.values[pos++] = valueHolder.clone();\n+                }\n+                catch ( CloneNotSupportedException e )\n+                {\n+                    // TODO Auto-generated catch block\n+                    e.printStackTrace();\n+                }\n+                \n+                // Stop when we have copied nbElems values\n+                if ( pos == nbElems )\n+                {\n+                    break;\n+                }\n             }\n         }\n \n@@ -891,17 +894,6 @@ else if ( nbElems > 0 )\n \n         boolean valueExists = valueHolder.contains( value );\n \n-        // Check we can add a new value\n-        if ( !valueExists && !btree.isAllowDuplicates() )\n-        {\n-            throw new DuplicateValueNotAllowedException( \"Duplicate values are not allowed\" );\n-        }\n-\n-        if ( valueExists )\n-        {\n-            return ExistsResult.EXISTS;\n-        }\n-        \n         if ( this.revision != revision )\n         {\n             // The page hasn't been modified yet, we need to copy it first\n@@ -912,21 +904,24 @@ else if ( nbElems > 0 )\n         valueHolder = newLeaf.values[pos];\n         V replacedValue = null;\n \n-        if ( !valueExists )\n+        if ( !valueExists && btree.isAllowDuplicates() )\n         {\n             valueHolder.add( value );\n             newLeaf.values[pos] = valueHolder;\n         }\n-        else\n+        else if ( valueExists && btree.isAllowDuplicates() )\n         {\n-            // this block should be deleted after fixing MAVIBOT-39\n             // As strange as it sounds, we need to remove the value to reinject it.\n             // There are cases where the value retrieval just use one part of the\n             // value only (typically for LDAP Entries, where we use the DN)\n-            //replacedValue = valueHolder.remove( value );\n-            //valueHolder.add( value );\n+            replacedValue = valueHolder.remove( value );\n+            valueHolder.add( value );\n         }\n-\n+        else if ( !btree.isAllowDuplicates() )\n+        {\n+            replacedValue = valueHolder.replaceValueArray( value );\n+        }\n+        \n         // Create the result\n         InsertResult<K, V> result = new ModifyResult<K, V>( newLeaf, replacedValue );\n         result.addCopiedPage( this );\n@@ -1096,19 +1091,28 @@ public K getRightMostKey()\n      */\n     public Tuple<K, V> findLeftMost() throws IOException\n     {\n+        K key = keys[0].getKey();\n+        \n+        boolean isSubTree = ( btree.getType() == PERSISTED_SUB );\n+        \n+        if ( isSubTree )\n+        {\n+            return new Tuple<K, V>( key, null );\n+        }\n+        \n         ValueCursor<V> cursor = values[0].getCursor();\n \n         try\n         {\n             cursor.beforeFirst();\n             if ( cursor.hasNext() )\n             {\n-                return new Tuple<K, V>( keys[0].getKey(), cursor.next() );\n+                return new Tuple<K, V>( key, cursor.next() );\n             }\n             else\n             {\n                 // Null value\n-                return new Tuple<K, V>( keys[0].getKey(), null );\n+                return new Tuple<K, V>( key, null );\n             }\n         }\n         finally\n@@ -1123,6 +1127,16 @@ public K getRightMostKey()\n      */\n     public Tuple<K, V> findRightMost() throws EndOfFileExceededException, IOException\n     {\n+        \n+        K key = keys[nbElems - 1].getKey();\n+        \n+        boolean isSubTree = ( btree.getType() == PERSISTED_SUB );\n+        \n+        if ( isSubTree )\n+        {\n+            return new Tuple<K, V>( key, null );\n+        }\n+\n         ValueCursor<V> cursor = values[nbElems - 1].getCursor();\n \n         try\n@@ -1131,12 +1145,12 @@ public K getRightMostKey()\n \n             if ( cursor.hasPrev() )\n             {\n-                return new Tuple<K, V>( keys[nbElems - 1].getKey(), cursor.prev() );\n+                return new Tuple<K, V>( key, cursor.prev() );\n             }\n             else\n             {\n                 // Null value\n-                return new Tuple<K, V>( keys[nbElems - 1].getKey(), null );\n+                return new Tuple<K, V>( key, null );\n             }\n         }\n         finally",
                "changes": 92
            },
            {
                "status": "modified",
                "additions": 13,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedValueHolder.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedValueHolder.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedValueHolder.java",
                "deletions": 0,
                "sha": "3e9dea51c65fd845f787b3aaccf1d83a18515b14",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedValueHolder.java",
                "patch": "@@ -410,6 +410,8 @@ private V removeFromBtree( V removedValue )\n                         }\n                     }\n \n+                    cursor.close();\n+                    \n                     return returnedValue;\n                 }\n                 else\n@@ -636,6 +638,17 @@ private int findPos( V value )\n     }\n \n \n+    @Override\n+    public V replaceValueArray( V newValue )\n+    {\n+        V val = super.replaceValueArray( newValue );\n+        // The raw value is not anymore up to date with the content\n+        isRawUpToDate = false;\n+        \n+        return val;\n+    }\n+\n+\n     /**\n      * Deserialize the values stored in an array\n      */",
                "changes": 13
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/RevisionName.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/RevisionName.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/RevisionName.java",
                "deletions": 1,
                "sha": "ae7a24f144e8ae0ca468d964abaa956778d54c45",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/RevisionName.java",
                "patch": "@@ -19,14 +19,16 @@\n  */\n package org.apache.directory.mavibot.btree;\n \n+import java.io.Serializable;\n+\n \n /**\n  * A data structure that stores a revision associated to a BTree name. We use\n  * it to allow the access to old revisions.\n  *\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-/* no qualifier*/class RevisionName extends Tuple<Long, String>\n+/* no qualifier*/class RevisionName extends Tuple<Long, String> implements Serializable\n {\n     /**\n      * A constructor for the RevisionName class",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/SpaceReclaimer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/SpaceReclaimer.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/SpaceReclaimer.java",
                "deletions": 1,
                "sha": "33747cb23e3edb6ed0aabbe7e005b96cdc3e253f",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/SpaceReclaimer.java",
                "patch": "@@ -83,7 +83,7 @@ public SpaceReclaimer( RecordManager rm )\n \n         try\n         {\n-            LOG.debug( \"Storing {} RevisionName of Copied page map\", rm.copiedPageMap.size() );\n+            LOG.debug( \"Storing {} RevisionNames of Copied page map\", rm.copiedPageMap.size() );\n             \n             OutputStream fileOut = new FileOutputStream( file );\n             ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/ValueHolder.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/main/java/org/apache/directory/mavibot/btree/ValueHolder.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/main/java/org/apache/directory/mavibot/btree/ValueHolder.java",
                "deletions": 0,
                "sha": "6215d99032f1a49717ebb27ef04cef71057c8d33",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/main/java/org/apache/directory/mavibot/btree/ValueHolder.java",
                "patch": "@@ -69,6 +69,18 @@\n      */\n     V remove( V removedValue );\n \n+    \n+    /**\n+     * Replaces the single value present in the array.\n+     * \n+     * This is only applicable for B-Trees that don't\n+     * support duplicate values.\n+     *\n+     * @param newValue the new value\n+     * @return the value that was replaced\n+     */\n+    V replaceValueArray( V newValue );\n+    \n \n     /**\n      * Create a clone of this instance",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeDuplicateKeyTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeDuplicateKeyTest.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeDuplicateKeyTest.java",
                "deletions": 0,
                "sha": "17219927afa7e8754a490341b8fb9d58864a0ee5",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeDuplicateKeyTest.java",
                "patch": "@@ -37,6 +37,7 @@\n import org.apache.directory.mavibot.btree.serializer.IntSerializer;\n import org.apache.directory.mavibot.btree.serializer.LongSerializer;\n import org.apache.directory.mavibot.btree.serializer.StringSerializer;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n \n@@ -743,6 +744,7 @@ public void testMoveToPrevAndTraverseForward() throws Exception\n      * Test that a BTree which forbid duplicate values does not accept them\n      */\n     @Test(expected = DuplicateValueNotAllowedException.class)\n+    @Ignore(\"this condition is removed\")\n     public void testBTreeForbidDups() throws IOException, BTreeAlreadyManagedException\n     {\n         BTree<Long, String> singleValueBtree = BTreeFactory.createInMemoryBTree( \"test2\", LongSerializer.INSTANCE,",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 25,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeTest.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeTest.java",
                "deletions": 0,
                "sha": "751a2579d027423ae3ec93f4668f0d0ede0727e6",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeTest.java",
                "patch": "@@ -1982,4 +1982,29 @@ public void testCheckRootPageContents() throws Exception\n \n         btree.close();\n     }\n+\n+    \n+    /**\n+     * Test the overwriting of elements\n+     */\n+    @Test\n+    public void testOverwrite() throws Exception\n+    {\n+        BTree<Integer, Integer> btree = BTreeFactory.createInMemoryBTree( \"test\", IntSerializer.INSTANCE,\n+            IntSerializer.INSTANCE );\n+\n+        // Adding an element with a null value\n+        btree.insert( 1, 1 );\n+\n+        assertTrue( btree.hasKey( 1 ) );\n+\n+        assertEquals( Integer.valueOf( 1 ), btree.get( 1 ) );\n+        \n+        btree.insert( 1, 10 );\n+\n+        assertTrue( btree.hasKey( 1 ) );\n+        assertEquals( Integer.valueOf( 10 ), btree.get( 1 ) );\n+\n+        btree.close();\n+    }\n }",
                "changes": 25
            },
            {
                "status": "modified",
                "additions": 25,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeBrowseTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeBrowseTest.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeBrowseTest.java",
                "deletions": 0,
                "sha": "8346bde644fd796100f4bdfda33de7304afac5ce",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeBrowseTest.java",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.directory.mavibot.btree.exception.BTreeAlreadyManagedException;\n import org.apache.directory.mavibot.btree.exception.EndOfFileExceededException;\n import org.apache.directory.mavibot.btree.exception.KeyNotFoundException;\n+import org.apache.directory.mavibot.btree.serializer.IntSerializer;\n import org.apache.directory.mavibot.btree.serializer.LongSerializer;\n import org.apache.directory.mavibot.btree.serializer.StringSerializer;\n import org.junit.After;\n@@ -1107,6 +1108,30 @@ public void testPrevKey() throws IOException, BTreeAlreadyManagedException, KeyN\n     }\n     \n     \n+    /**\n+     * Test the overwriting of elements\n+     */\n+    @Test\n+    public void testOverwrite() throws Exception\n+    {\n+        btree.setAllowDuplicates( false );\n+        \n+        // Adding an element with a null value\n+        btree.insert( 1L, \"1\" );\n+\n+        assertTrue( btree.hasKey( 1L ) );\n+\n+        assertEquals( \"1\", btree.get( 1L ) );\n+        \n+        btree.insert( 1L, \"10\" );\n+\n+        assertTrue( btree.hasKey( 1L ) );\n+        assertEquals( \"10\", btree.get( 1L ) );\n+\n+        btree.close();\n+    }\n+\n+    \n     @Ignore(\"test used for debugging\")\n     @Test\n     public void testAdd20Random() throws IOException, BTreeAlreadyManagedException, KeyNotFoundException",
                "changes": 25
            },
            {
                "status": "modified",
                "additions": 30,
                "raw_url": "https://github.com/apache/directory-mavibot/raw/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeDuplicateKeyTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-mavibot/contents/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeDuplicateKeyTest.java?ref=32b7b4b2e880590ed33ca76dbda8983761ea3179",
                "filename": "mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeDuplicateKeyTest.java",
                "deletions": 0,
                "sha": "8dfd94cbdce6907e1608c2077ea453c896d9444b",
                "blob_url": "https://github.com/apache/directory-mavibot/blob/32b7b4b2e880590ed33ca76dbda8983761ea3179/mavibot/src/test/java/org/apache/directory/mavibot/btree/PersistedBTreeDuplicateKeyTest.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.directory.mavibot.btree.serializer.StringSerializer;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n@@ -792,11 +793,40 @@ public void testMoveToPrevAndTraverseForward() throws Exception\n         cursor.close();\n     }\n \n+    \n+    @Test\n+    public void testFindLeftAndRightMosetInSubBTree() throws Exception\n+    {\n+        PersistedBTreeConfiguration<Integer, Integer> config = new PersistedBTreeConfiguration<Integer, Integer>();\n+\n+        config.setName( \"test\" );\n+        config.setKeySerializer( IntSerializer.INSTANCE );\n+        config.setValueSerializer( IntSerializer.INSTANCE );\n+        config.setAllowDuplicates( false );\n+        config.setBtreeType( BTreeTypeEnum.PERSISTED_SUB );\n+\n+        PersistedBTree<Integer, Integer> subBtree = new PersistedBTree<Integer, Integer>( config );\n+        \n+        subBtree.setRecordManager( recordManager1 );\n+        \n+        subBtree.insert( 1, 1 ); // the values will be discarded in this BTree type\n+        subBtree.insert( 2, 2 );\n+        subBtree.insert( 3, 3 );\n+        subBtree.insert( 4, 4 );\n+        subBtree.insert( 5, 5 );\n+        \n+        Tuple<Integer, Integer> t = subBtree.getRootPage().findLeftMost();\n+        assertEquals( Integer.valueOf( 1 ), t.getKey() );\n+        \n+        t = subBtree.getRootPage().findRightMost();\n+        assertEquals( Integer.valueOf( 5 ), t.getKey() );\n+    }\n \n     /**\n      * Test that a BTree which forbid duplicate values does not accept them\n      */\n     @Test(expected = DuplicateValueNotAllowedException.class)\n+    @Ignore(\"this condition is removed\")\n     public void testBTreeForbidDups() throws IOException, BTreeAlreadyManagedException\n     {\n         BTree<Long, String> singleValueBtree = recordManager1.addBTree( \"test2\", LongSerializer.INSTANCE,",
                "changes": 30
            }
        ],
        "unit_tests": [
            "InMemoryBTreeTest.java",
            "InMemoryBTreeDuplicateKeyTest.java",
            "PersistedBTreeBrowseTest.java",
            "InMemoryLeafTest.java",
            "PersistedBTreeDuplicateKeyTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "mavibot/src/test/java/org/apache/directory/mavibot/btree/InMemoryBTreeTest.java",
        "buggy_files": [
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/SpaceReclaimer.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedLeaf.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryLeaf.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/PersistedValueHolder.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/RevisionName.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/AbstractValueHolder.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/ValueHolder.java",
            "mavibot/src/main/java/org/apache/directory/mavibot/btree/InMemoryBTree.java"
        ],
        "fixed": true
    }
]