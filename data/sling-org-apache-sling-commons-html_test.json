{
    "sling-org-apache-sling-commons-html_a765dda": {
        "bug_id": "sling-org-apache-sling-commons-html_a765dda",
        "commit": "https://github.com/apache/sling-org-apache-sling-commons-html/commit/a765ddaa13027e3a8d3ba92c4254e88254b469b4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/pom.xml",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/pom.xml?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 14,
                "filename": "pom.xml",
                "patch": "@@ -36,6 +36,7 @@\n     </description>\n \n     <properties>\n+        <sling.java.version>8</sling.java.version>\n         <org.ops4j.pax.exam.version>4.11.0</org.ops4j.pax.exam.version>\n     </properties>\n \n@@ -83,20 +84,6 @@\n         </plugins>\n     </build>\n \n-    <reporting>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins</groupId>\n-                <artifactId>maven-javadoc-plugin</artifactId>\n-                <configuration>\n-                    <excludePackageNames>\n-                        org.apache.sling.commons.html.impl\n-                    </excludePackageNames>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </reporting>\n-\n     <dependencies>\n         <!-- javax -->\n         <dependency>",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/pom.xml",
                "sha": "435e43f4420b50315721ccbe671b59fb10c5b335",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/HtmlParser.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/src/main/java/org/apache/sling/commons/html/HtmlParser.java?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 14,
                "filename": "src/main/java/org/apache/sling/commons/html/HtmlParser.java",
                "patch": "@@ -26,26 +26,31 @@\n import org.xml.sax.SAXException;\n \n /**\n- * The html parser is a service to parse html and generate\n- * SAX events or a Document out of the html.\n- *\n+ * The HTML parser is a service to parse HTML and generate\n+ * SAX events or a Document out of the HTML.\n  */\n public interface HtmlParser {\n \n     /**\n-     * Parse html and send sax events.\n-     * @param stream The input stream\n-     * @param encoding Encoding of the input stream, <code>null</code>for default encoding.\n-     * @param ch Content handler receiving the SAX events. The content handler might also\n-     *           implement the lexical handler interface.\n+     * Parse HTML and send SAX events.\n+     *\n+     * @param inputStream    The input stream\n+     * @param encoding       Encoding of the input stream, <code>null</code> for default encoding.\n+     * @param contentHandler Content handler receiving the SAX events. The content handler might also\n+     *                       implement the lexical handler interface.\n+     * @throws SAXException Exception thrown when parsing fails.\n      */\n-    void parse(InputStream stream, String encoding, ContentHandler ch) throws SAXException;\n+    void parse(InputStream inputStream, String encoding, ContentHandler contentHandler) throws SAXException;\n \n     /**\n-     * Parse html and return a DOM Document.\n-     * @param The system id\n-     * @param stream The input stream\n-     * @param encoding Encoding of the input stream, <code>null</code>for default encoding.\n+     * Parse HTML and return a DOM Document.\n+     *\n+     * @param systemId    The system id\n+     * @param inputStream The input stream\n+     * @param encoding    Encoding of the input stream, <code>null</code> for default encoding.\n+     * @return A DOM Document built from parsed HTML or <code>null</code>\n+     * @throws IOException Exception thrown when parsing fails.\n      */\n-    Document parse(String systemId, InputStream stream, String encoding) throws IOException;\n+    Document parse(String systemId, InputStream inputStream, String encoding) throws IOException;\n+\n }",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/HtmlParser.java",
                "sha": "725989fccf92caf9398ec3969b11d72de1965b14",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/DOMBuilder.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/src/main/java/org/apache/sling/commons/html/internal/DOMBuilder.java?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 47,
                "filename": "src/main/java/org/apache/sling/commons/html/internal/DOMBuilder.java",
                "patch": "@@ -14,10 +14,11 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.sling.commons.html.impl;\n+package org.apache.sling.commons.html.internal;\n \n import java.io.IOException;\n \n+import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMResult;\n import javax.xml.transform.sax.SAXTransformerFactory;\n@@ -34,36 +35,38 @@\n /**\n  * The <code>DOMBuilder</code> is a utility class that will generate a W3C\n  * DOM Document from SAX events.\n- *\n  */\n public class DOMBuilder implements ContentHandler, LexicalHandler {\n \n-    /** The default transformer factory shared by all instances */\n+    /**\n+     * The default transformer factory shared by all instances\n+     */\n     private static final SAXTransformerFactory FACTORY = (SAXTransformerFactory) TransformerFactory.newInstance();\n \n-    /** The result */\n     private final DOMResult result;\n \n     private final ContentHandler contentHandler;\n     private final LexicalHandler lexicalHandler;\n \n     /**\n      * Construct a new instance of this DOMBuilder.\n+     *\n+     * @throws IOException If for some reason the <code>TransformerHandler</code> cannot be created.\n      */\n-    public DOMBuilder() throws IOException {\n+    DOMBuilder() throws IOException {\n         try {\n             final TransformerHandler handler = FACTORY.newTransformerHandler();\n             this.contentHandler = handler;\n             this.lexicalHandler = handler;\n             this.result = new DOMResult();\n             handler.setResult(this.result);\n-        } catch (javax.xml.transform.TransformerException local) {\n-            throw (IOException) new IOException(\"Fatal-Error: Unable to get transformer handler\").initCause(local);\n+        } catch (TransformerException te) {\n+            throw new IOException(\"Unable to get transformer handler\", te);\n         }\n     }\n \n     /**\n-     * Return the newly built Document.\n+     * @return The newly built <code>Document</code> or <code>null</code>.\n      */\n     public Document getDocument() {\n         if (this.result.getNode() == null) {\n@@ -75,92 +78,94 @@ public Document getDocument() {\n         }\n     }\n \n+    @Override\n     public void setDocumentLocator(Locator locator) {\n         contentHandler.setDocumentLocator(locator);\n     }\n \n-    public void startDocument()\n-    throws SAXException {\n+    @Override\n+    public void startDocument() throws SAXException {\n         contentHandler.startDocument();\n     }\n \n-    public void endDocument()\n-    throws SAXException {\n+    @Override\n+    public void endDocument() throws SAXException {\n         contentHandler.endDocument();\n     }\n \n-    public void startPrefixMapping(String prefix, String uri)\n-    throws SAXException {\n+    @Override\n+    public void startPrefixMapping(String prefix, String uri) throws SAXException {\n         contentHandler.startPrefixMapping(prefix, uri);\n     }\n \n-    public void endPrefixMapping(String prefix)\n-    throws SAXException {\n+    @Override\n+    public void endPrefixMapping(String prefix) throws SAXException {\n         contentHandler.endPrefixMapping(prefix);\n     }\n \n-    public void startElement(String uri, String loc, String raw, Attributes a)\n-    throws SAXException {\n-        contentHandler.startElement(uri, loc, raw, a);\n+    @Override\n+    public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n+        contentHandler.startElement(uri, localName, qName, atts);\n     }\n \n-    public void endElement(String uri, String loc, String raw)\n-    throws SAXException {\n-        contentHandler.endElement(uri, loc, raw);\n+    @Override\n+    public void endElement(String uri, String localName, String qName) throws SAXException {\n+        contentHandler.endElement(uri, localName, qName);\n     }\n \n-    public void characters(char c[], int start, int len)\n-    throws SAXException {\n-        contentHandler.characters(c, start, len);\n+    @Override\n+    public void characters(char[] ch, int start, int length) throws SAXException {\n+        contentHandler.characters(ch, start, length);\n     }\n \n-    public void ignorableWhitespace(char c[], int start, int len)\n-    throws SAXException {\n-        contentHandler.ignorableWhitespace(c, start, len);\n+    @Override\n+    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n+        contentHandler.ignorableWhitespace(ch, start, length);\n     }\n \n-    public void processingInstruction(String target, String data)\n-    throws SAXException {\n+    @Override\n+    public void processingInstruction(String target, String data) throws SAXException {\n         contentHandler.processingInstruction(target, data);\n     }\n \n-    public void skippedEntity(String name)\n-    throws SAXException {\n+    @Override\n+    public void skippedEntity(String name) throws SAXException {\n         contentHandler.skippedEntity(name);\n     }\n \n-    public void startDTD(String name, String publicId, String systemId)\n-    throws SAXException {\n+    @Override\n+    public void startDTD(String name, String publicId, String systemId) throws SAXException {\n         lexicalHandler.startDTD(name, publicId, systemId);\n     }\n \n-    public void endDTD()\n-    throws SAXException {\n+    @Override\n+    public void endDTD() throws SAXException {\n         lexicalHandler.endDTD();\n     }\n \n-    public void startEntity(String name)\n-    throws SAXException {\n+    @Override\n+    public void startEntity(String name) throws SAXException {\n         lexicalHandler.startEntity(name);\n     }\n \n-    public void endEntity(String name)\n-    throws SAXException {\n+    @Override\n+    public void endEntity(String name) throws SAXException {\n         lexicalHandler.endEntity(name);\n     }\n \n-    public void startCDATA()\n-    throws SAXException {\n+    @Override\n+    public void startCDATA() throws SAXException {\n         lexicalHandler.startCDATA();\n     }\n \n-    public void endCDATA()\n-    throws SAXException {\n+    @Override\n+    public void endCDATA() throws SAXException {\n         lexicalHandler.endCDATA();\n     }\n \n-    public void comment(char ch[], int start, int len)\n-    throws SAXException {\n-        lexicalHandler.comment(ch, start, len);\n+    @Override\n+    public void comment(char[] ch, int start, int length) throws SAXException {\n+        lexicalHandler.comment(ch, start, length);\n     }\n+\n }",
                "previous_filename": "src/main/java/org/apache/sling/commons/html/impl/DOMBuilder.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/DOMBuilder.java",
                "sha": "b4b6868d349a8165705214d442521db0fa784f1a",
                "status": "renamed"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParser.java",
                "changes": 100,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParser.java?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 42,
                "filename": "src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParser.java",
                "patch": "@@ -16,54 +16,70 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.sling.commons.html.impl;\n+package org.apache.sling.commons.html.internal;\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.apache.sling.commons.html.HtmlParser;\n import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.ccil.cowan.tagsoup.Parser;\n import org.osgi.service.component.annotations.Activate;\n import org.osgi.service.component.annotations.Component;\n-import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Modified;\n import org.osgi.service.metatype.annotations.Designate;\n-import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n import org.w3c.dom.Document;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.InputSource;\n import org.xml.sax.SAXException;\n import org.xml.sax.ext.LexicalHandler;\n \n-@Component\n-@Designate(ocd = HtmlParserImpl.Config.class)\n-public class HtmlParserImpl implements HtmlParser {\n-\t\n-    @ObjectClassDefinition(name=\"Apache Sling HTML Parser\", description=\"Parser configuration\")\n-    static @interface Config {\n- \n-        @AttributeDefinition(name = \"Parser Properties\",\n-                description = \"Additional properties to be applied to the underlying parser in the format of key=[true|false]\")\n-        String[] properties();\n-    \n+@Component(\n+    property = {\n+        \"dom=tagsoup\",\n+        \"sax=tagsoup\"\n+    }\n+)\n+@Designate(\n+    ocd = TagsoupHtmlParserConfiguration.class\n+)\n+public class TagsoupHtmlParser implements HtmlParser {\n+\n+    private Map<String, Boolean> properties = Collections.synchronizedMap(new LinkedHashMap<>());\n+\n+    @Activate\n+    private void activate(final TagsoupHtmlParserConfiguration configuration) {\n+        configure(configuration);\n+    }\n+\n+    @Modified\n+    private void modified(final TagsoupHtmlParserConfiguration configuration) {\n+        configure(configuration);\n+    }\n+\n+    @Deactivate\n+    private void deactivate() {\n+        properties.clear();\n+    }\n+\n+    private void configure(final TagsoupHtmlParserConfiguration configuration) {\n+        properties.clear();\n+        final Map<String, String> map = PropertiesUtil.toMap(configuration.parser_properties(), new String[]{});\n+        for (final String key : map.keySet()) {\n+            properties.put(key, Boolean.valueOf(map.get(key)));\n+        }\n     }\n-    \n-    private Map<String,Boolean> features;\n \n     /**\n      * @see org.apache.sling.commons.html.HtmlParser#parse(java.io.InputStream, java.lang.String, org.xml.sax.ContentHandler)\n      */\n-    public void parse(InputStream stream, String encoding, ContentHandler ch)\n-    throws SAXException {\n-        final Parser parser = new Parser();\n-        if ( ch instanceof LexicalHandler ) {\n-            parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\", ch);\n-        }\n-        for (String feature : features.keySet()){\n-            parser.setProperty(feature, features.get(feature));\n-        }\n-        parser.setContentHandler(ch);\n+    @Override\n+    public void parse(final InputStream stream, final String encoding, final ContentHandler contentHandler) throws SAXException {\n+        final Parser parser = buildParser(properties, contentHandler);\n         final InputSource source = new InputSource(stream);\n         source.setEncoding(encoding);\n         try {\n@@ -76,36 +92,36 @@ public void parse(InputStream stream, String encoding, ContentHandler ch)\n     /**\n      * @see org.apache.sling.commons.html.HtmlParser#parse(java.lang.String, java.io.InputStream, java.lang.String)\n      */\n+    @Override\n     public Document parse(String systemId, InputStream stream, String encoding) throws IOException {\n-        final Parser parser = new Parser();\n-\n         final DOMBuilder builder = new DOMBuilder();\n \n         final InputSource source = new InputSource(stream);\n         source.setEncoding(encoding);\n         source.setSystemId(systemId);\n \n         try {\n-            parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\", builder);\n-            for (String feature : features.keySet()) {\n-                parser.setProperty(feature, features.get(feature));\n-            }\n-            parser.setContentHandler(builder);\n+            final Parser parser = buildParser(properties, builder);\n             parser.parse(source);\n         } catch (SAXException se) {\n-            if ( se.getCause() instanceof IOException ) {\n+            if (se.getCause() instanceof IOException) {\n                 throw (IOException) se.getCause();\n             }\n-            throw (IOException) new IOException(\"Unable to parse xml.\").initCause(se);\n+            throw new IOException(\"Unable to parse HTML\", se);\n         }\n         return builder.getDocument();\n     }\n-    \n-    @Activate\n-    private void activate(Config config) {\n-    \tMap<String,String> temp = PropertiesUtil.toMap(config.properties(), new String[]{});\n-    \tfor (String key : temp.keySet()){\n-    \t\tfeatures.put(key, Boolean.valueOf(temp.get(key)));\n-    \t}\n+\n+    private Parser buildParser(final Map<String, Boolean> properties, final ContentHandler contentHandler) throws SAXException {\n+        final Parser parser = new Parser();\n+        parser.setContentHandler(contentHandler);\n+        if (contentHandler instanceof LexicalHandler) {\n+            parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\", contentHandler);\n+        }\n+        for (final String key : properties.keySet()) {\n+            parser.setProperty(key, properties.get(key));\n+        }\n+        return parser;\n     }\n+\n }",
                "previous_filename": "src/main/java/org/apache/sling/commons/html/impl/HtmlParserImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParser.java",
                "sha": "082f5b006a64a498159cb8a705e84aaf96bb8ec9",
                "status": "renamed"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParserConfiguration.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParserConfiguration.java?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 0,
                "filename": "src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParserConfiguration.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.commons.html.internal;\n+\n+import org.osgi.service.metatype.annotations.AttributeDefinition;\n+import org.osgi.service.metatype.annotations.ObjectClassDefinition;\n+\n+@ObjectClassDefinition(\n+    name = \"Apache Sling HTML Parser (TagSoup)\",\n+    description = \"TagSoup parser configuration\"\n+)\n+@interface TagsoupHtmlParserConfiguration {\n+\n+    @AttributeDefinition(\n+        name = \"parser properties\",\n+        description = \"Additional properties to be applied to the underlying parser in the format of key=[true|false]\"\n+    )\n+    String[] parser_properties() default {};\n+\n+}",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/main/java/org/apache/sling/commons/html/internal/TagsoupHtmlParserConfiguration.java",
                "sha": "95fd232440cdd8887d9ad8385caddb2a91523ae7",
                "status": "added"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-commons-html/blob/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/test/java/org/apache/sling/commons/html/it/TagsoupHtmlParserIT.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-commons-html/contents/src/test/java/org/apache/sling/commons/html/it/TagsoupHtmlParserIT.java?ref=a765ddaa13027e3a8d3ba92c4254e88254b469b4",
                "deletions": 9,
                "filename": "src/test/java/org/apache/sling/commons/html/it/TagsoupHtmlParserIT.java",
                "patch": "@@ -24,48 +24,47 @@\n \n import org.apache.commons.lang3.reflect.FieldUtils;\n import org.apache.sling.commons.html.HtmlParser;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.ops4j.pax.exam.Configuration;\n import org.ops4j.pax.exam.Option;\n import org.ops4j.pax.exam.junit.PaxExam;\n import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n import org.ops4j.pax.exam.spi.reactors.PerClass;\n+import org.ops4j.pax.exam.util.Filter;\n \n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.ops4j.pax.exam.cm.ConfigurationAdminOptions.newConfiguration;\n \n @RunWith(PaxExam.class)\n @ExamReactorStrategy(PerClass.class)\n-public class TagsoupParserIT extends HtmlTestSupport {\n+public class TagsoupHtmlParserIT extends HtmlTestSupport {\n \n     @Inject\n+    @Filter(value = \"(&(dom=tagsoup)(sax=tagsoup))\")\n     private HtmlParser htmlParser;\n \n     @Configuration\n     public Option[] configuration() {\n         return new Option[]{\n             this.baseConfiguration(),\n-            newConfiguration(\"org.apache.sling.commons.html.impl.HtmlParserImpl\")\n-                .put(\"properties\", \"foo=true\")\n+            newConfiguration(\"org.apache.sling.commons.html.internal.TagsoupHtmlParser\")\n+                .put(\"parser.properties\", \"foo=true\")\n                 .asOption(),\n         };\n     }\n \n     @Test\n-    @Ignore\n     public void testHtmlParser() {\n         assertNotNull(htmlParser);\n     }\n \n     @Test\n-    @Ignore\n     public void testConfiguration() throws IllegalAccessException {\n-        @SuppressWarnings(\"unchecked\") final Map<String, Boolean> features = (Map<String, Boolean>) FieldUtils.readDeclaredField(htmlParser, \"features\", true);\n-        assertNotNull(features);\n-        final Boolean foo = features.get(\"foo\");\n+        @SuppressWarnings(\"unchecked\") final Map<String, Boolean> properties = (Map<String, Boolean>) FieldUtils.readDeclaredField(htmlParser, \"properties\", true);\n+        assertNotNull(properties);\n+        final Boolean foo = properties.get(\"foo\");\n         assertTrue(foo);\n     }\n ",
                "previous_filename": "src/test/java/org/apache/sling/commons/html/it/TagsoupParserIT.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-commons-html/raw/a765ddaa13027e3a8d3ba92c4254e88254b469b4/src/test/java/org/apache/sling/commons/html/it/TagsoupHtmlParserIT.java",
                "sha": "1f4c58513154713af6671ef303d04fa33f3ec207",
                "status": "renamed"
            }
        ],
        "message": "SLING-6783 Updates for Commons HTML\n\n* fix NPE and enable tests\n* fix javadoc\n* prepare for different parsers by renaming HtmlParserImpl and adding component properties\n* improve configuration\n* style",
        "parent": "https://github.com/apache/sling-org-apache-sling-commons-html/commit/5e389f9e466f319f90f1b0618fea0efdab35d286",
        "patched_files": [
            "TagsoupHtmlParser.java"
        ],
        "repo": "sling-org-apache-sling-commons-html",
        "unit_tests": [
            "TagsoupHtmlParserTest.java"
        ]
    }
}