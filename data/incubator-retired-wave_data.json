[
    {
        "repo": "incubator-retired-wave",
        "message": "Fixes NPE.",
        "commit": "https://github.com/apache/incubator-retired-wave/commit/ca645a72322e4aae33c5aae909c956f814d38640",
        "parent": "https://github.com/apache/incubator-retired-wave/commit/571c30663e802a9b34a66d79abdcb5724bdb19c3",
        "bug_id": "incubator-retired-wave_1",
        "file": [
            {
                "sha": "111a24cf7451f4c3de220eb350ce10aeaf489a9d",
                "filename": "src/org/waveprotocol/box/server/waveserver/AbstractSearchProviderImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/ca645a72322e4aae33c5aae909c956f814d38640/src/org/waveprotocol/box/server/waveserver/AbstractSearchProviderImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/ca645a72322e4aae33c5aae909c956f814d38640/src/org/waveprotocol/box/server/waveserver/AbstractSearchProviderImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/AbstractSearchProviderImpl.java?ref=ca645a72322e4aae33c5aae909c956f814d38640",
                "patch": "@@ -102,7 +102,7 @@ public AbstractSearchProviderImpl(final String waveDomain, WaveDigester digester\n   public static WaveViewData buildWaveViewData(WaveId waveId, Set<WaveletId> waveletIds,\n       Function<ReadableWaveletData, Boolean> matchesFunction, WaveMap waveMap) {\n \n-    WaveViewData view = null; // Copy of the wave built up for search hits.\n+    WaveViewData view = WaveViewDataImpl.create(waveId); // Copy of the wave built up for search hits.\n     for (WaveletId waveletId : waveletIds) {\n       WaveletContainer waveletContainer = null;\n       WaveletName waveletname = WaveletName.of(waveId, waveletId);\n@@ -117,9 +117,6 @@ public static WaveViewData buildWaveViewData(WaveId waveId, Set<WaveletId> wavel\n         if ((waveletContainer == null) || !waveletContainer.applyFunction(matchesFunction)) {\n           continue;\n         }\n-        if (view == null) {\n-          view = WaveViewDataImpl.create(waveId);\n-        }\n         // Just keep adding all the relevant wavelets in this wave.\n         view.addWavelet(waveletContainer.copyWaveletData());\n       } catch (WaveletStateException e) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-retired-wave",
        "message": "Adds NullPointerException protection when accessing cached deltas in\nDeltaStoreBasedWaveletState.\nhttps://reviews.apache.org/r/4923/\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wave/trunk@1331779 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/incubator-retired-wave/commit/a7e0d1f4712900b3aadaa196a1dbbae07c999e52",
        "parent": "https://github.com/apache/incubator-retired-wave/commit/a98b72e3823b2fcae0a4daf64da5373ebd90e7ae",
        "bug_id": "incubator-retired-wave_2",
        "file": [
            {
                "sha": "98bed26b2fdd7bb66ed8e6f5de92cd6cd571e129",
                "filename": "src/org/waveprotocol/box/server/waveserver/DeltaStoreBasedWaveletState.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/a7e0d1f4712900b3aadaa196a1dbbae07c999e52/src/org/waveprotocol/box/server/waveserver/DeltaStoreBasedWaveletState.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/a7e0d1f4712900b3aadaa196a1dbbae07c999e52/src/org/waveprotocol/box/server/waveserver/DeltaStoreBasedWaveletState.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/DeltaStoreBasedWaveletState.java?ref=a7e0d1f4712900b3aadaa196a1dbbae07c999e52",
                "patch": "@@ -158,7 +158,7 @@ public static DeltaStoreBasedWaveletState create(DeltaStore.DeltasAccess deltasA\n   private final DeltaStore.DeltasAccess deltasAccess;\n \n   /** The lock that guards access to persistence related state. */\n-  private Object persistLock = new Object();\n+  private final Object persistLock = new Object();\n \n   /**\n    * Indicates the version of the latest appended delta that was already requested to be\n@@ -321,13 +321,17 @@ public TransformedWaveletDelta getTransformedDelta(\n   public TransformedWaveletDelta getTransformedDeltaByEndVersion(final HashedVersion endVersion) {\n     Preconditions.checkArgument(endVersion.getVersion() > 0, \"end version %s is not positive\",\n         endVersion);\n-    final TransformedWaveletDelta cachedDelta = transformedDeltas.lowerEntry(endVersion).getValue();\n+    Entry<HashedVersion, TransformedWaveletDelta> transformedEntry =\n+        transformedDeltas.lowerEntry(endVersion);\n+    final TransformedWaveletDelta cachedDelta =\n+        transformedEntry != null ? transformedEntry.getValue() : null;\n     if (snapshot == null) {\n       return null;\n     } else {\n       WaveletDeltaRecord deltaRecord = getDeltaRecordByEndVersion(endVersion);\n       TransformedWaveletDelta delta;\n-      if (deltaRecord == null && cachedDelta.getResultingVersion().equals(endVersion)) {\n+      if (deltaRecord == null && cachedDelta != null\n+          && cachedDelta.getResultingVersion().equals(endVersion)) {\n         delta = cachedDelta;\n       } else {\n         delta = deltaRecord != null ? deltaRecord.getTransformedDelta() : null;\n@@ -393,8 +397,10 @@ public DeltaSequence getTransformedDeltaHistory(final HashedVersion startVersion\n       final HashedVersion endVersion) {\n     Preconditions.checkArgument(endVersion.getVersion() > 0,\n         \"end version %s is not positive\", endVersion);\n+    Entry<HashedVersion, ByteStringMessage<ProtocolAppliedWaveletDelta>> appliedEntry =\n+        appliedDeltas.lowerEntry(endVersion);\n     final ByteStringMessage<ProtocolAppliedWaveletDelta> cachedDelta =\n-        appliedDeltas.lowerEntry(endVersion).getValue();\n+        appliedEntry != null ? appliedEntry.getValue() : null;\n     WaveletDeltaRecord deltaRecord = getDeltaRecordByEndVersion(endVersion);\n     ByteStringMessage<ProtocolAppliedWaveletDelta> appliedDelta;\n     if (deltaRecord == null && isDeltaBoundary(endVersion)) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "incubator-retired-wave",
        "message": "Fixes NPE in Robot registration. By Vicente J. Ruiz Jurado https://reviews.apache.org/r/3868/\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wave/trunk@1243113 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/incubator-retired-wave/commit/285e0b1da51ea0af6d1d21989c7e4e1421342f96",
        "parent": "https://github.com/apache/incubator-retired-wave/commit/bf77b3ac8a58199eb8a47210105bb207b58fbc6b",
        "bug_id": "incubator-retired-wave_3",
        "file": [
            {
                "sha": "d0e6f33e3f02f0c2dc6d19c37221fd3de3e6b5e0",
                "filename": "src/org/waveprotocol/box/server/robots/RobotRegistrationServlet.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/285e0b1da51ea0af6d1d21989c7e4e1421342f96/src/org/waveprotocol/box/server/robots/RobotRegistrationServlet.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/285e0b1da51ea0af6d1d21989c7e4e1421342f96/src/org/waveprotocol/box/server/robots/RobotRegistrationServlet.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/robots/RobotRegistrationServlet.java?ref=285e0b1da51ea0af6d1d21989c7e4e1421342f96",
                "patch": "@@ -119,7 +119,8 @@ private void doRegisterPost(HttpServletRequest req, HttpServletResponse resp) th\n     try{\n       robotAccount = robotRegistrar.registerNew(id, location);\n     } catch (RobotRegistrationException e) {\n-      doRegisterGet(req, resp, e.getLocalizedMessage());\n+      doRegisterGet(req, resp, e.getMessage());\n+      return;\n     } catch (PersistenceException e) {\n       LOG.severe(\"Failed to retrieve account data for \" + id, e);\n       doRegisterGet(req, resp, \"Failed to retrieve account data for \" + id.getAddress());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "incubator-retired-wave",
        "message": "Assorted fixes to re-enable federation\n\nhttps://reviews.apache.org/r/12725/\n\nContains the following commits:\n\ncommit 64024d5e781a6d0583d1ca32e609a2f659c8eb0c\nAuthor: Ali Lown <al@apache.org>\nDate:   Fri Aug 16 12:52:49 2013 +0100\n\n    Address Yuri's comments on federation fixes.\n\ncommit e4e8c32350e161edbe9f882e2d5ba85ceeff00df\nAuthor: Ali Lown <al@apache.org>\nDate:   Thu Jul 18 16:43:03 2013 +0100\n\n    Collection of fixes to bring re-enable federation\n\n    commit 252214fd13bee7f946118eba4df5b822b93f92dc\n    Author: Ali Lown <al@apache.org>\n    Date:   Wed Jul 17 22:13:19 2013 +0100\n\n        Fix test-suite following these assorted fed fixes.\n\n    commit 1a7078230b9ed8c84a91e4bf4a2fe9982f4cfca8\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 20:54:14 2013 +0100\n\n        Revert \"Revert \"Fixes WAVE-354: SimpleSearch.DigestProxy should update only the opened\"\"\n\n        This reverts commit 35313df5546622d9b10ac53b60b022317cebdeb6.\n\n        Although this commit no longer causes shiny's with federated waves, it\n        seems to be making the search much 'laggier' than it used to be. So, it\n        looks like it needs looking in to some more.\n\n    commit 8e8ca730c148269fa7107e1be7f3407b6f296645\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 20:48:51 2013 +0100\n\n        Fix Wavelet Root Conversation id generation\n\n        Means that getRoot() works for federated waves now.\n\n    commit a161dbf32bb6493742e4ac253e98c267bd83e5e1\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 20:48:41 2013 +0100\n\n        Undo debugging data\n\n    commit 185a903d4b61803a72490985ef4234329a02978e\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 16:08:12 2013 +0100\n\n        Shiny fixing: Put title-fetching in TitleHelper.\n\n    commit 8f3f07b8e65a4890a6eb184bcafb14d6d14dc65e\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 14:49:24 2013 +0100\n\n        Revert \"Disable WindowTitleHandler (not federation capable)\"\n\n        This reverts commit 001356a30b485a857140f783b54e794be0190572.\n\n    commit eba868a89419c904b58b2ac7b54905a5a4d6f1c5\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 14:43:47 2013 +0100\n\n        Notify listeners and try to sync anyway...\n\n    commit 9805380864d0eeea3dcec634faa7afaa7a4fcabb\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 8 14:17:27 2013 +0100\n\n        Patch over a shiny from attempting to mark as read\n\n        Occurs when the wave is not fully loaded before trying to change\n        supplemented state.\n\n    commit 0de5a6fa02c14b06ba852ae2f7001590c9b83ea0\n    Author: Ali Lown <al@apache.org>\n    Date:   Mon Jun 3 23:35:06 2013 +0100\n\n        Disable WindowTitleHandler (not federation capable)\n\n    commit 014827117125a5d21b3068d4b9368a81b0a732ae\n    Author: Ali Lown <al@apache.org>\n    Date:   Mon Jun 3 22:17:47 2013 +0100\n\n        No point calling the same function twice.\n\n    commit 54c600c6a838878051b5383d9a8ca2754e881a8b\n    Author: Ali Lown <al@apache.org>\n    Date:   Mon Jun 3 12:54:48 2013 +0100\n\n        During search, check remote wavelets first.\n\n    commit 5683ba4a7b6832b994ef332a80f133e1c8817815\n    Author: Ali Lown <al@apache.org>\n    Date:   Mon Jun 3 12:52:05 2013 +0100\n\n        Add extra logging for search+wavelet paths\n\n    commit 1809e26db374d5d03ac2f0f48a68ac083355feac\n    Author: Ali Lown <al@apache.org>\n    Date:   Mon Jun 3 12:48:24 2013 +0100\n\n        Fix copy-paste error?\n\n    commit f2ac77df78d7ff5089197bf6d75459cc8f1b9b70\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 22:15:08 2013 +0100\n\n        Revert \"Fixes WAVE-354: SimpleSearch.DigestProxy should update only the opened\"\n\n        This reverts commit bf760c93b77daa5893016f7ac8a4979728cfa0a5.\n\n    commit 5dce24fde5e36452416ca7cf989784407866b300\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:08:48 2013 +0100\n\n        Add some more logging.\n\n    commit abaa4e76548699501479270e0e97d33a94227eab\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:08:37 2013 +0100\n\n        Add NPE check to getCurrentVersion\n\n    commit cab6e9cda4404d8181c1460ce885ec4bb5c2aa39\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:07:55 2013 +0100\n\n        Create wavelet, pass submit even if not fetched.\n\n    commit 0ea2c20972f0b2cf5d3047ec456e4f4f5e19ebc3\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:07:01 2013 +0100\n\n        Wait for frontend loading before commit/update\n\n    commit bc28198aeb47769b60e37cbbc56b965a6d25460a\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:06:37 2013 +0100\n\n        Track only largest pending commit\n\n    commit 5a75628d3d6d10b8efb7cf097c523b9a38802172\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 15:05:16 2013 +0100\n\n        Don't allow update when frontend not initialized\n\n    commit c2ea97c0e1069a8221486b62b73b58ef0d8fd8ab\n    Author: Ali Lown <al@apache.org>\n    Date:   Sun Jun 2 00:00:19 2013 +0100\n\n        Track requested commits for not-yet-got versions.\n\n    commit 34f35c598cb4e51e2365956db1a5b41e3c3bb248\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 1 23:06:56 2013 +0100\n\n        Ignore commit if not wavelet not yet up-to-date.\n\n    commit 3d4ebc2415dd5e355a528066d1253a558a5c2300\n    Author: Ali Lown <al@apache.org>\n    Date:   Sat Jun 1 19:13:47 2013 +0100\n\n        Prevent requested history:non-empty,non-contiguous\n\n        This would cause a SEVERE, but doesn't seem to actually warant an extra\n        behaviour on the receivers part beyond simply requestingHistory which\n        already happened.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wave/trunk@1517913 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/incubator-retired-wave/commit/985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
        "parent": "https://github.com/apache/incubator-retired-wave/commit/ef08372cbd629be3853ff090e296cf7d26ffbb82",
        "bug_id": "incubator-retired-wave_4",
        "file": [
            {
                "sha": "3875b20ecaed7d56c4d6b4020c758b89e71974f7",
                "filename": "src/org/waveprotocol/box/server/frontend/ClientFrontendImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/frontend/ClientFrontendImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/frontend/ClientFrontendImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/frontend/ClientFrontendImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -229,6 +229,9 @@ public void waveletCommitted(WaveletName waveletName, HashedVersion version) {\n    */\n   private void participantUpdate(WaveletName waveletName, ParticipantId participant,\n       DeltaSequence newDeltas, boolean add, boolean remove) {\n+    if(LOG.isFineLoggable()) {\n+      LOG.fine(\"Notifying \" + participant + \" for \" + waveletName);\n+    }\n     if (add) {\n       waveletInfo.notifyAddedExplicitWaveletParticipant(waveletName, participant);\n     }\n@@ -249,6 +252,11 @@ public void waveletUpdate(ReadableWaveletData wavelet, DeltaSequence newDeltas)\n     }\n \n     WaveletName waveletName = WaveletName.of(wavelet.getWaveId(), wavelet.getWaveletId());\n+\n+    if(waveletInfo.getCurrentWaveletVersion(waveletName).getVersion() == 0 && LOG.isWarningLoggable()) {\n+      LOG.warning(\"Wavelet does not appear to have been initialized by client. Continuing anyway.\");\n+    }\n+\n     waveletInfo.syncWaveletVersion(waveletName, newDeltas);\n \n     Set<ParticipantId> remainingparticipants =",
                "deletions": 0
            },
            {
                "sha": "faf2fb33fbb8805a55a19c713e38e2b0e1c219d8",
                "filename": "src/org/waveprotocol/box/server/frontend/WaveletInfo.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/frontend/WaveletInfo.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/frontend/WaveletInfo.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/frontend/WaveletInfo.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -35,6 +35,7 @@\n import org.waveprotocol.wave.model.version.HashedVersionFactory;\n import org.waveprotocol.wave.model.wave.ParticipantId;\n import org.waveprotocol.wave.model.wave.data.ReadableWaveletData;\n+import org.waveprotocol.wave.util.logging.Log;\n \n import java.util.Map;\n import java.util.Map.Entry;\n@@ -48,6 +49,7 @@\n  * @see ClientFrontendImpl\n  */\n public class WaveletInfo {\n+  private static final Log LOG = Log.get(WaveletInfo.class);\n \n   /** Information we hold in memory for each wavelet. */\n   private static class PerWavelet {\n@@ -135,6 +137,10 @@ public UserManager apply(ParticipantId from) {\n    * Initializes front-end information from the wave store, if necessary.\n    */\n   public void initialiseWave(WaveId waveId) throws WaveServerException {\n+    if(LOG.isFineLoggable()) {\n+      LOG.fine(\"frontend initialiseWave(\" + waveId +\")\");\n+    }\n+\n     if (!perWavelet.containsKey(waveId)) {\n       Map<WaveletId, PerWavelet> wavelets = perWavelet.get(waveId);\n       for (WaveletId waveletId : waveletProvider.getWaveletIds(waveId)) {\n@@ -144,6 +150,9 @@ public void initialiseWave(WaveId waveId) throws WaveServerException {\n         PerWavelet waveletInfo = wavelets.get(waveletId);\n         synchronized (waveletInfo) {\n           waveletInfo.currentVersion = wavelet.getHashedVersion();\n+          if(LOG.isFineLoggable()) {\n+            LOG.fine(\"frontend wavelet \" + waveletId + \" @\" + wavelet.getHashedVersion().getVersion());\n+          }\n           waveletInfo.explicitParticipants.addAll(wavelet.getParticipants());\n         }\n       }",
                "deletions": 0
            },
            {
                "sha": "8290147669b0b64f06050945c476f763af9991fb",
                "filename": "src/org/waveprotocol/box/server/waveserver/LocalWaveletContainer.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/LocalWaveletContainer.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/LocalWaveletContainer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/LocalWaveletContainer.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -38,7 +38,7 @@\n interface LocalWaveletContainer extends WaveletContainer {\n \n   /**\n-   * Manufactures remote wavelet containers.\n+   * Manufactures local wavelet containers.\n    */\n   interface Factory extends WaveletContainer.Factory<LocalWaveletContainer> { }\n ",
                "deletions": 1
            },
            {
                "sha": "7fa840817a611076dcc34cdc0c7741f594346749",
                "filename": "src/org/waveprotocol/box/server/waveserver/MemoryPerUserWaveViewHandlerImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/MemoryPerUserWaveViewHandlerImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/MemoryPerUserWaveViewHandlerImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/MemoryPerUserWaveViewHandlerImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -97,7 +97,10 @@ public MemoryPerUserWaveViewHandlerImpl(final WaveMap waveMap) {\n       Multimap<WaveId, WaveletId> perUserView = explicitPerUserWaveViews.get(user);\n       if (!perUserView.containsEntry(waveletName.waveId, waveletName.waveletId)) {\n         perUserView.put(waveletName.waveId, waveletName.waveletId);\n-        LOG.fine(\"Added wavelet: \" + waveletName + \" to the view of user: \" + user.getAddress());\n+        if(LOG.isFineLoggable()) {\n+          LOG.fine(\"Added wavelet: \" + waveletName + \" to the view of user: \" + user.getAddress());\n+          LOG.fine(\"View size is now: \" + perUserView.size());\n+        }\n       }\n     }\n     SettableFuture<Void> task = SettableFuture.create();",
                "deletions": 1
            },
            {
                "sha": "13c0aa2bb88cad2db25ad2aec9d1dd849e21a507",
                "filename": "src/org/waveprotocol/box/server/waveserver/PerUserWaveViewDistpatcher.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/PerUserWaveViewDistpatcher.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/PerUserWaveViewDistpatcher.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/PerUserWaveViewDistpatcher.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -30,6 +30,7 @@\n import org.waveprotocol.wave.model.version.HashedVersion;\n import org.waveprotocol.wave.model.wave.ParticipantId;\n import org.waveprotocol.wave.model.wave.data.ReadableWaveletData;\n+import org.waveprotocol.wave.util.logging.Log;\n \n import java.util.concurrent.CopyOnWriteArraySet;\n \n@@ -39,6 +40,7 @@\n  * @author yurize@apache.org (Yuri Zelikov)\n  */\n public class PerUserWaveViewDistpatcher implements WaveBus.Subscriber, PerUserWaveViewBus {\n+  private static final Log LOG = Log.get(PerUserWaveViewDistpatcher.class);\n \n   private static final CopyOnWriteArraySet<PerUserWaveViewBus.Listener> listeners =\n       new CopyOnWriteArraySet<PerUserWaveViewBus.Listener>();\n@@ -48,11 +50,19 @@ public void waveletUpdate(ReadableWaveletData wavelet, DeltaSequence deltas) {\n     WaveletId waveletId = wavelet.getWaveletId();\n     WaveId waveId = wavelet.getWaveId();\n     WaveletName waveletName = WaveletName.of(waveId, waveletId);\n+    if(LOG.isInfoLoggable()) {\n+      LOG.info(\"Got update for \" + waveId + \" \" + waveletId);\n+    }\n+\n     // Find whether participants were added/removed and update the views\n     // accordingly.\n     for (TransformedWaveletDelta delta : deltas) {\n       for (WaveletOperation op : delta) {\n         if (op instanceof AddParticipant) {\n+          if(LOG.isInfoLoggable()) {\n+            LOG.info(\"Update contains AddParticipant for \" + ((AddParticipant)op).getParticipantId());\n+          }\n+\n           ParticipantId user = ((AddParticipant) op).getParticipantId();\n           // Check first if we need to update views for this user.\n           for (Listener listener : listeners) {\n@@ -82,4 +92,4 @@ public void addListener(Listener listener) {\n   public void removeListener(Listener listener) {\n     listeners.remove(listener);\n   }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            },
            {
                "sha": "1cfaf46d5be3f51c6a44203ba4d2b628241cebfe",
                "filename": "src/org/waveprotocol/box/server/waveserver/RemoteWaveletContainerImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/RemoteWaveletContainerImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/RemoteWaveletContainerImpl.java",
                "status": "modified",
                "changes": 98,
                "additions": 89,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/RemoteWaveletContainerImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -51,7 +51,9 @@\n import org.waveprotocol.wave.model.version.HashedVersion;\n import org.waveprotocol.wave.util.logging.Log;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.NavigableMap;\n import java.util.concurrent.Executor;\n@@ -72,6 +74,13 @@\n   private final NavigableMap<HashedVersion, ByteStringMessage<ProtocolAppliedWaveletDelta>>\n       pendingDeltas = Maps.newTreeMap();\n \n+  /**\n+   * Tracks the highest version commit notice received, which can not be performed\n+   * due to not yet having the required deltas. This must only be access under writeLock.\n+   */\n+  private boolean pendingCommit = false;\n+  private HashedVersion pendingCommitVersion;\n+\n   /**\n    * Create a new RemoteWaveletContainerImpl. Just pass through to the parent\n    * constructor.\n@@ -95,14 +104,50 @@ public RemoteWaveletContainerImpl(WaveletName waveletName, WaveletNotificationSu\n \n   @Override\n   public void commit(HashedVersion version) {\n+    try {\n+      awaitLoad();\n+    }\n+    catch(WaveletStateException ex) {\n+      LOG.warning(\"Failed to load \" + getWaveletName() + \" to perform commit.\", ex);\n+      acquireWriteLock();\n+      markStateCorrupted();\n+      releaseWriteLock();\n+      return;\n+    }\n+\n     acquireWriteLock();\n     try {\n-      persist(version, ImmutableSet.<String>of());\n+      attemptCommit(version);\n     } finally {\n       releaseWriteLock();\n     }\n   }\n \n+  /**\n+   * Attempts to commit at the given version.\n+   * This will only succeed if we are actually up to date.\n+   * If not, then the history is assumed to be coming, and so we can just skip the whole task.\n+   * */\n+  private void attemptCommit(HashedVersion version) {\n+    HashedVersion expectedVersion = getCurrentVersion();\n+    if(expectedVersion == null || version.getVersion() == expectedVersion.getVersion()) {\n+      LOG.info(\"Committed \" + getWaveletName() + \" at version \" + version.getVersion());\n+      persist(version, ImmutableSet.<String>of());\n+      if(pendingCommitVersion == null || (version.getVersion() >= pendingCommitVersion.getVersion())) {\n+        pendingCommit = false;\n+      }\n+    } else {\n+      LOG.info(\"Ignoring commit request at \" + version.getVersion() +\n+          \" since only at \" + expectedVersion.getVersion());\n+      if(pendingCommitVersion == null ||\n+          (pendingCommitVersion != null && pendingCommitVersion.getVersion() < version.getVersion())) {\n+        pendingCommitVersion = version;\n+      }\n+      LOG.info(\"pendingCommitVersion is now \" + pendingCommitVersion.getVersion());\n+      pendingCommit = true;\n+    }\n+  }\n+\n   private void internalUpdate(final List<ByteString> deltas,\n       final String domain, final WaveletFederationProvider federationProvider,\n       final CertificateManager certificateManager, final SettableFuture<Void> futureResult) {\n@@ -176,6 +221,18 @@ private void internalUpdateAfterSignerInfoRetrieval(\n       List<ByteStringMessage<ProtocolAppliedWaveletDelta>> appliedDeltas,\n       final String domain, final WaveletFederationProvider federationProvider,\n       final CertificateManager certificateManager, final SettableFuture<Void> futureResult) {\n+\n+    try {\n+      awaitLoad();\n+    }\n+    catch(WaveletStateException ex) {\n+      LOG.warning(\"Failed to load \" + getWaveletName() + \" to perform update.\", ex);\n+      acquireWriteLock();\n+      markStateCorrupted();\n+      releaseWriteLock();\n+      return;\n+    }\n+\n     LOG.info(\"Passed signer info check, now applying all \" + appliedDeltas.size() + \" deltas\");\n     acquireWriteLock();\n     try {\n@@ -230,6 +287,11 @@ private void internalUpdateAfterSignerInfoRetrieval(\n         HashedVersion appliedAt = first.getKey();\n         ByteStringMessage<ProtocolAppliedWaveletDelta> appliedDelta = first.getValue();\n \n+        if(LOG.isInfoLoggable()) {\n+          LOG.info(\"pendingDeltas.size(): \" + Integer.toString(pendingDeltas.size()));\n+          LOG.info(\"current appliedAt: \" + appliedAt.getVersion() + \" expected: \" + expectedVersion.getVersion());\n+        }\n+\n         // If we don't have the right version it implies there is a history we need, so set up a\n         // callback to request it and fall out of this update\n         if (appliedAt.getVersion() > expectedVersion.getVersion()) {\n@@ -310,14 +372,8 @@ public void onSuccess(List<ByteString> deltaList,\n         pendingDeltas.remove(appliedAt);\n       }\n \n-      if (!haveRequestedHistory) {\n-        notifyOfDeltas(resultingDeltas.build(), ImmutableSet.<String>of());\n-        futureResult.set(null);\n-      } else if (!resultingDeltas.build().isEmpty()) {\n-        LOG.severe(\"History requested but non-empty result, non-contiguous deltas?\");\n-      } else {\n-        LOG.info(\"History requested, ignoring callback\");\n-      }\n+      commitAndNotifyResultingDeltas(resultingDeltas, futureResult);\n+\n     } catch (WaveServerException e) {\n       LOG.warning(\"Update failure\", e);\n       // TODO(soren): make everyone throw FederationException instead\n@@ -329,6 +385,30 @@ public void onSuccess(List<ByteString> deltaList,\n     }\n   }\n \n+  /**\n+   * Commits the resulting deltas, notifying the server of them.\n+   * Assumes that everything in resultingDeltas is now in-order, since\n+   * even if the original stream was non-contiguous, we have requestedHistory.\n+   * Even if not, it is still safe to commit up to the fragmented point.\n+   */\n+  private void commitAndNotifyResultingDeltas(\n+      ImmutableList.Builder<WaveletDeltaRecord> resultingDeltas,\n+      final SettableFuture<Void> futureResult) {\n+    if(!resultingDeltas.build().isEmpty()) {\n+      notifyOfDeltas(resultingDeltas.build(), ImmutableSet.<String>of());\n+      futureResult.set(null);\n+\n+      //Attempt to run any pending commit\n+      if(pendingCommit) {\n+        releaseWriteLock();\n+        commit(pendingCommitVersion);\n+        acquireWriteLock();\n+      }\n+    } else {\n+      LOG.info(\"No deltas in list (fetching history?), ignoring callback\");\n+    }\n+  }\n+\n   /**\n    * Apply a serialised applied delta to a remote wavelet. This assumes the\n    * caller has validated that the delta is at the correct version and can be",
                "deletions": 9
            },
            {
                "sha": "ee7093fec6cd6dc225e17fa93cbd6447d707aae1",
                "filename": "src/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImpl.java",
                "status": "modified",
                "changes": 41,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -111,6 +111,13 @@ public SearchResult search(final ParticipantId user, String query, int startAt,\n     Function<ReadableWaveletData, Boolean> filterWaveletsFunction =\n         createFilterWaveletsFunction(user, isAllQuery, withParticipantIds, creatorParticipantIds);\n     Map<WaveId, WaveViewData> results = filterWavesViewBySearchCriteria(filterWaveletsFunction, currentUserWavesView);\n+\n+    if(LOG.isFineLoggable()) {\n+      for(Map.Entry e : results.entrySet()) {\n+        LOG.fine(\"filtered results contains: \" + e.getKey());\n+      }\n+    }\n+\n     Collection<WaveViewData> searchResult =\n         computeSearchResult(user, startAt, numResults, queryParams, results);\n     LOG.info(\"Search response to '\" + query + \"': \" + searchResult.size() + \" results, user: \"\n@@ -128,6 +135,13 @@ public SearchResult search(final ParticipantId user, String query, int startAt,\n       // shared domain participant.\n       currentUserWavesView.putAll(waveViewProvider.retrievePerUserWaveView(sharedDomainParticipantId));\n     }\n+\n+    if(LOG.isFineLoggable()) {\n+      for(Map.Entry e : currentUserWavesView.entries()) {\n+        LOG.fine(\"unfiltered view contains: \" + e.getKey() + \" \" + e.getValue());\n+      }\n+    }\n+\n     return currentUserWavesView;\n   }\n \n@@ -167,16 +181,39 @@ public Boolean apply(ReadableWaveletData wavelet) {\n       for (WaveletId waveletId : waveletIds) {\n         WaveletContainer waveletContainer = null;\n         WaveletName waveletname = WaveletName.of(waveId, waveletId);\n+\n+        // TODO (alown): Find some way to use isLocalWavelet to do this properly!\n         try {\n-          waveletContainer = waveMap.getLocalWavelet(waveletname);\n+          if(LOG.isFineLoggable()) {\n+            LOG.fine(\"Trying as a remote wavelet\");\n+          }\n+          waveletContainer = waveMap.getRemoteWavelet(waveletname);\n         } catch (WaveletStateException e) {\n-          LOG.severe(String.format(\"Failed to get local wavelet %s\", waveletname.toString()), e);\n+          LOG.severe(String.format(\"Failed to get remote wavelet %s\", waveletname.toString()), e);\n+        } catch (NullPointerException e) {\n+          // This is a fairly normal case of it being a local-only wave.\n+          // Yet this only seems to appear in the test suite.\n+          // Continuing is completely harmless here.\n+          LOG.info(String.format(\"%s is definitely not a remote wavelet. (Null key)\", waveletname.toString()), e);\n         }\n+\n+        if(waveletContainer == null) {\n+          try {\n+            if(LOG.isFineLoggable()) {\n+                LOG.fine(\"Trying as a local wavelet\");\n+            }\n+            waveletContainer = waveMap.getLocalWavelet(waveletname);\n+          } catch (WaveletStateException e) {\n+            LOG.severe(String.format(\"Failed to get local wavelet %s\", waveletname.toString()), e);\n+          }\n+        }\n+\n         // TODO (Yuri Z.) This loop collects all the wavelets that match the\n         // query, so the view is determined by the query. Instead we should\n         // look at the user's wave view and determine if the view matches the query.\n         try {\n           if (waveletContainer == null || !waveletContainer.applyFunction(matchesFunction)) {\n+            LOG.fine(\"----doesn't match: \" + waveletContainer);\n             continue;\n           }\n           if (view == null) {",
                "deletions": 2
            },
            {
                "sha": "b28069e80c55f18b819f5b4d04a2aafec26095ac",
                "filename": "src/org/waveprotocol/box/server/waveserver/Wave.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/Wave.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/Wave.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/Wave.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -31,6 +31,7 @@\n import org.waveprotocol.wave.model.id.WaveId;\n import org.waveprotocol.wave.model.id.WaveletId;\n import org.waveprotocol.wave.model.id.WaveletName;\n+import org.waveprotocol.wave.util.logging.Log;\n \n import java.util.Iterator;\n import java.util.concurrent.ConcurrentMap;\n@@ -41,6 +42,8 @@\n  * @author soren@google.com (Soren Lassen)\n  */\n final class Wave implements Iterable<WaveletContainer> {\n+  private static final Log LOG = Log.get(Wave.class);\n+\n   private class WaveletCreator<T extends WaveletContainer> implements Function<WaveletId, T> {\n     private final WaveletContainer.Factory<T> factory;\n \n@@ -120,6 +123,18 @@ RemoteWaveletContainer getOrCreateRemoteWavelet(WaveletId waveletId) {\n       throw new WaveletStateException(\n           \"Interrupted looking up wavelet \" + WaveletName.of(waveId, waveletId), e);\n     }\n+\n+    if(LOG.isFineLoggable()) {\n+      if(storedWavelets != null) {\n+        if(storedWavelets.contains(waveletId)) {\n+          LOG.fine(\"Wavelet is in storedWavelets\");\n+        }\n+        if(waveletsMap.containsKey(waveletId)) {\n+          LOG.fine(\"Wavelet is in wavletsMap\");\n+        }\n+      }\n+    }\n+\n     // Since waveletsMap is a computing map, we must call containsKey(waveletId)\n     // to tell if waveletId is mapped, we cannot test if get(waveletId) returns null.\n     if (storedWavelets != null && !storedWavelets.contains(waveletId)",
                "deletions": 0
            },
            {
                "sha": "ecfbbb3565ed8dfca122018dd9f699cb79395be7",
                "filename": "src/org/waveprotocol/box/server/waveserver/WaveServerImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/WaveServerImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/WaveServerImpl.java",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/WaveServerImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -138,7 +138,7 @@ public void waveletCommitUpdate(WaveletName waveletName,\n \n         if (isLocalWavelet(waveletName)) {\n           LOG.warning(\"Got commit update for local wavelet \" + waveletName);\n-          callback.onFailure(FederationErrors.badRequest(\"Received comit update to local wavelet\"));\n+          callback.onFailure(FederationErrors.badRequest(\"Received commit update to local wavelet\"));\n           return;\n         }\n \n@@ -153,17 +153,29 @@ public void waveletCommitUpdate(WaveletName waveletName,\n         if (wavelet != null) {\n           wavelet.commit(CoreWaveletOperationSerializer.deserialize(committedVersion));\n         } else {\n-          // TODO(soren): This should really be changed to create the wavelet if it doesn't\n-          // already exist and go get history up committedVersion. Moreover, when the\n-          // protocol is enhanced to deliver commit updates reliably, we will probably need\n-          // to only return success when we successfully retrieved history and persisted it all.\n-         LOG.info(\"Got commit update for missing wavelet \" + waveletName);\n+          if(LOG.isInfoLoggable()) {\n+            LOG.info(\"Got commit update for missing wavelet \" + waveletName);\n+          }\n+          createAndCommitRemoteWavelet(waveletName, committedVersion);\n         }\n         callback.onSuccess();\n       }\n     };\n   }\n \n+  /**\n+   * Creates the non-existent remote wavelet container at this server and commits it.\n+   * Calling commit at this known version, forces the history to be fetched up to this point.\n+   * TODO (alown): Possible race condition here with update? (Though I don't think it would result in\n+   * anything more serious than repeated history fetches.)\n+   */\n+  private void createAndCommitRemoteWavelet(WaveletName waveletName, ProtocolHashedVersion committedVersion) {\n+    RemoteWaveletContainer wavelet = getOrCreateRemoteWavelet(waveletName);\n+    HashedVersion v = CoreWaveletOperationSerializer.deserialize(committedVersion);\n+    wavelet.commit(v);\n+    LOG.info(\"Passed commit message for version \" + v.getVersion() + \" to RemoteWavelet\");\n+  }\n+\n   //\n   // WaveletFederationProvider implementation.\n   //",
                "deletions": 6
            },
            {
                "sha": "fe08fe0b23cc88922a0ba10177cd7a3e378d4855",
                "filename": "src/org/waveprotocol/box/server/waveserver/WaveletContainerImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/WaveletContainerImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/server/waveserver/WaveletContainerImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/server/waveserver/WaveletContainerImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -57,6 +57,8 @@\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * Contains the history of a wavelet - applied and transformed deltas plus the\n  * content of the wavelet.\n@@ -484,7 +486,7 @@ private void checkVersionIsDeltaBoundary(HashedVersion version, String message)\n \n   @Override\n   public void requestHistory(HashedVersion startVersion, HashedVersion endVersion,\n-      Receiver<ByteStringMessage<ProtocolAppliedWaveletDelta>> receiver) \n+      Receiver<ByteStringMessage<ProtocolAppliedWaveletDelta>> receiver)\n       throws AccessControlException, WaveletStateException {\n     acquireReadLock();\n     try {\n@@ -548,7 +550,11 @@ public boolean isEmpty() throws WaveletStateException {\n     }\n   }\n \n+  @Nullable\n   protected HashedVersion getCurrentVersion() {\n+    if(waveletState == null)\n+      return null;\n+\n     return waveletState.getCurrentVersion();\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "ff1654fbe142928a144ed992444d07be616b4cf5",
                "filename": "src/org/waveprotocol/box/webclient/client/WindowTitleHandler.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/webclient/client/WindowTitleHandler.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/webclient/client/WindowTitleHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/webclient/client/WindowTitleHandler.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -57,10 +57,8 @@ private void init() {\n \n   @Override\n   public void onOpened(WaveContext wave) {\n-    Document document =\n-        wave.getConversations().getRoot().getRootThread().getFirstBlip().getContent();\n-    String waveTitle = TitleHelper.extractTitle(document);\n-     String windowTitle = formatTitle(waveTitle);\n+    String waveTitle = TitleHelper.getTitle(wave);\n+    String windowTitle = formatTitle(waveTitle);\n     if (waveTitle == null || waveTitle.isEmpty()) {\n       windowTitle = DEFAULT_TITLE;\n     }\n@@ -76,4 +74,4 @@ public void onClosed(WaveContext wave) {\n   private String formatTitle(String title) {\n     return  title + \" - \" + Session.get().getAddress() + \" - \" + APP_NAME;\n   }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 5
            },
            {
                "sha": "8c04db842fa7460976c78f97f4c0c17415fbb126",
                "filename": "src/org/waveprotocol/box/webclient/search/WaveBasedDigest.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/webclient/search/WaveBasedDigest.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/box/webclient/search/WaveBasedDigest.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/box/webclient/search/WaveBasedDigest.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -179,8 +179,7 @@ public ParticipantId getAuthor() {\n \n   @Override\n   public String getTitle() {\n-    return TitleHelper.extractTitle(\n-        wave.getConversations().getRoot().getRootThread().getFirstBlip().getContent());\n+    return TitleHelper.getTitle(wave);\n   }\n \n   @Override",
                "deletions": 2
            },
            {
                "sha": "557e838038414ac149bb8cfbc4e3262fca5fbb3b",
                "filename": "src/org/waveprotocol/wave/client/StageTwo.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/client/StageTwo.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/client/StageTwo.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/client/StageTwo.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -463,7 +463,7 @@ public OpBasedWavelet create(WaveId waveId, WaveletId id, ParticipantId creator)\n         }\n       };\n       WaveViewImpl<OpBasedWavelet> wave =\n-          WaveViewImpl.create(waveletFactory, getWaveData().getWaveId(), getIdGenerator(),\n+          WaveViewImpl.create(waveletFactory, snapshot.getWaveId(), getIdGenerator(),\n               getSignedInUser(), WaveletConfigurator.ADD_CREATOR);\n \n       // Populate the initial state.",
                "deletions": 1
            },
            {
                "sha": "e97fec0e851c76db6c074c3a00e5f5a35d0920fe",
                "filename": "src/org/waveprotocol/wave/client/wavepanel/impl/reader/Reader.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/client/wavepanel/impl/reader/Reader.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/client/wavepanel/impl/reader/Reader.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/client/wavepanel/impl/reader/Reader.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -90,7 +90,10 @@ public void onFocusMoved(BlipView oldUi, BlipView newUi) {\n   }\n \n   public boolean isRead(BlipView blipUi) {\n-    return !supplement.isUnread(models.getBlip(blipUi));\n+    ConversationBlip blip = models.getBlip(blipUi);\n+    if(blip != null)\n+      return !supplement.isUnread(blip);\n+    return false;\n   }\n \n   //",
                "deletions": 1
            },
            {
                "sha": "9402d677c9f7be5c1bd66ee40bdd11e9f8eb6142",
                "filename": "src/org/waveprotocol/wave/model/conversation/TitleHelper.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/conversation/TitleHelper.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/conversation/TitleHelper.java",
                "status": "modified",
                "changes": 48,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/model/conversation/TitleHelper.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -19,7 +19,9 @@\n \n package org.waveprotocol.wave.model.conversation;\n \n-\n+//TODO (alown): should the WaveContext live under model instead?\n+import org.waveprotocol.box.webclient.search.WaveContext;\n+import org.waveprotocol.wave.model.document.Document;\n import org.waveprotocol.wave.model.document.MutableDocument;\n import org.waveprotocol.wave.model.document.ReadableWDocument;\n import org.waveprotocol.wave.model.document.operation.Attributes;\n@@ -239,6 +241,50 @@ public static boolean hasExplicitTitle(MutableDocument<?, ?, ?> doc) {\n     }\n   }\n \n+  /**\n+   * An error-absorbing title retrieving convenience function.\n+   * Please use this rather than doing:\n+   * wave.getConversations().getRoot().getRootThread().getFirstBlip().getContent()\n+   * as that is the cause of _many_ shiny's in the client.\n+   * In the event something went wrong, or no title exists will return the empty string.\n+   * This is deliberate, so that it doesn't propagate an error for a rather non-critical\n+   * code path.\n+   */\n+  public static String getTitle(WaveContext waveCtx) {\n+    ObservableConversationView conversations = waveCtx.getConversations();\n+    if(conversations == null) {\n+      return \"\";\n+    }\n+\n+    ObservableConversation rootConversation = conversations.getRoot();\n+    if(rootConversation == null) {\n+      return \"\";\n+    }\n+\n+    ObservableConversationThread rootThread = rootConversation.getRootThread();\n+    if(rootThread == null) {\n+      return \"\";\n+    }\n+\n+    ObservableConversationBlip firstBlip = rootThread.getFirstBlip();\n+    if(firstBlip == null) {\n+      return \"\";\n+    }\n+\n+    Document doc = firstBlip.getContent();\n+    if(doc == null) {\n+      return \"\";\n+    }\n+\n+    String title = extractTitle(doc);\n+    if(title == null) {\n+      return \"\";\n+    }\n+\n+    return title;\n+  }\n+\n   private TitleHelper() {\n   }\n }\n+",
                "deletions": 1
            },
            {
                "sha": "94b9677a2847c34e2cc609008094c1e3d950ffaa",
                "filename": "src/org/waveprotocol/wave/model/id/IdGenerator.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/id/IdGenerator.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/id/IdGenerator.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/model/id/IdGenerator.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -60,6 +60,13 @@\n    */\n   WaveletId newConversationRootWaveletId();\n \n+  /**\n+   * Creates/gets a root wavelet id for the given waveId\n+   * (Federation happy version of newConversationRootWaveletId)\n+   */\n+\n+  WaveletId buildConversationRootWaveletId(WaveId waveId);\n+\n   /**\n    * Creates a user data wavelet id.\n    *",
                "deletions": 0
            },
            {
                "sha": "f762990e9d881651bafe03de56cb9b3de2fd9756",
                "filename": "src/org/waveprotocol/wave/model/id/IdGeneratorImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/id/IdGeneratorImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/id/IdGeneratorImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/model/id/IdGeneratorImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -75,6 +75,7 @@ public String peekBlipId() {\n     return build(IdConstants.BLIP_PREFIX, peekUniqueToken());\n   }\n \n+  //NOTE: These are _NOT_ federation happy. Ensure that your caller is!\n   @Override\n   public WaveId newWaveId() {\n     return WaveId.of(defaultDomain, newId(WAVE_PREFIX));\n@@ -90,6 +91,11 @@ public WaveletId newConversationWaveletId() {\n     return WaveletId.of(defaultDomain, newId(CONVERSATION_WAVELET_PREFIX));\n   }\n \n+  @Override\n+  public WaveletId buildConversationRootWaveletId(WaveId waveId) {\n+    return WaveletId.of(waveId.getDomain(), CONVERSATION_ROOT_WAVELET);\n+  }\n+\n   @Override\n   public WaveletId newUserDataWaveletId(String address) {\n     // TODO(anorth): Take ParticipantId as a parameter after moving it",
                "deletions": 0
            },
            {
                "sha": "2ad81de9f100439c97a200899c97928e9863bb81",
                "filename": "src/org/waveprotocol/wave/model/wave/opbased/WaveViewImpl.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/wave/opbased/WaveViewImpl.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/src/org/waveprotocol/wave/model/wave/opbased/WaveViewImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/src/org/waveprotocol/wave/model/wave/opbased/WaveViewImpl.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -131,7 +131,7 @@ void configure(Wavelet wavelet) {\n     this.viewer = viewer;\n     this.idGenerator = idGenerator;\n     this.configurator = configurator;\n-    this.rootId = idGenerator.newConversationRootWaveletId();\n+    this.rootId = idGenerator.buildConversationRootWaveletId(waveId);\n     this.userDataId = idGenerator.newUserDataWaveletId(viewer.getAddress());\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "d966305a91d5dd4f517d387f8e6241928a73e283",
                "filename": "test/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImplTest.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/test/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImplTest.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/test/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/test/org/waveprotocol/box/server/waveserver/SimpleSearchProviderImplTest.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -207,7 +207,7 @@ public LocalWaveletContainer create(WaveletNotificationSubscriber notifiee,\n \n     waveMap =\n         new WaveMap(waveletStore, notifiee, notifiee, localWaveletContainerFactory,\n-            remoteWaveletContainerFactory, \"example.com\", lookupExecutor);\n+            remoteWaveletContainerFactory, DOMAIN, lookupExecutor);\n     searchProvider = new SimpleSearchProviderImpl(DOMAIN, digester, waveMap, waveViewProvider);\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "863e8e3f17c6fda28a2f8665bd45eb87373534b6",
                "filename": "test/org/waveprotocol/wave/concurrencycontrol/wave/CcBasedWaveViewTest.java",
                "blob_url": "https://github.com/apache/incubator-retired-wave/blob/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/test/org/waveprotocol/wave/concurrencycontrol/wave/CcBasedWaveViewTest.java",
                "raw_url": "https://github.com/apache/incubator-retired-wave/raw/985cd57fbc08ca8dc9f332929d6d3c06399d20ea/test/org/waveprotocol/wave/concurrencycontrol/wave/CcBasedWaveViewTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-wave/contents/test/org/waveprotocol/wave/concurrencycontrol/wave/CcBasedWaveViewTest.java?ref=985cd57fbc08ca8dc9f332929d6d3c06399d20ea",
                "patch": "@@ -65,7 +65,7 @@\n   private static final WaveId WAVE_ID = WaveId.of(\"example.com\", \"waveId_1\");\n   private static final WaveletId GENERATED_WAVELET_ID = WaveletId.of(\"example.com\", \"some_id\");\n   private static final WaveletId ROOT_WAVELET_ID\n-      = new IdGeneratorImpl(\"example.com\", null).newConversationRootWaveletId();\n+      = new IdGeneratorImpl(\"example.com\", null).buildConversationRootWaveletId(WAVE_ID);\n   private static final String GENERATED_BLIP_ID = \"some blip id\";\n   private static final ParticipantId USER_ID = new ParticipantId(\"userId_1@example.com\");\n   private static final SchemaProvider SCHEMAS = SchemaCollection.empty();\n@@ -213,6 +213,11 @@ public WaveletId newConversationRootWaveletId() {\n       return ROOT_WAVELET_ID;\n     }\n \n+    @Override\n+    public WaveletId buildConversationRootWaveletId(WaveId waveId) {\n+      return ROOT_WAVELET_ID;\n+    }\n+\n     @Override\n     public String newDataDocumentId() {\n       throw new UnsupportedOperationException(\"Unsupported for test\");",
                "deletions": 1
            }
        ]
    }
]