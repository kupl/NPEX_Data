[
    {
        "commit": "https://github.com/apache/mina/commit/08a7303c14dbadd1a3e1ce05fa7e010e362a8bad",
        "file": [
            {
                "patch": "@@ -41,6 +41,7 @@ public ConcurrentHashSet(Collection<E> c) {\n \n     @Override\n     public boolean add(E o) {\n-        return ((ConcurrentMap<E, Boolean>) map).putIfAbsent(o, Boolean.TRUE);\n+        Boolean answer = ((ConcurrentMap<E, Boolean>) map).putIfAbsent(o, Boolean.TRUE);\n+        return (answer == null);\n     }\n }",
                "additions": 2,
                "raw_url": "https://github.com/apache/mina/raw/08a7303c14dbadd1a3e1ce05fa7e010e362a8bad/core/src/main/java/org/apache/mina/util/ConcurrentHashSet.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "b2ed51ab8d5d5de1e802f704c09d6927cd268c55",
                "blob_url": "https://github.com/apache/mina/blob/08a7303c14dbadd1a3e1ce05fa7e010e362a8bad/core/src/main/java/org/apache/mina/util/ConcurrentHashSet.java",
                "filename": "core/src/main/java/org/apache/mina/util/ConcurrentHashSet.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/util/ConcurrentHashSet.java?ref=08a7303c14dbadd1a3e1ce05fa7e010e362a8bad"
            }
        ],
        "bug_id": "mina_1",
        "parent": "https://github.com/apache/mina/commit/039f18058959ce8da54e99b743710483a24386a1",
        "message": "Fixed NullPointerException in ConcurrentHashSet\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@567041 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/a66728a4d520aeb68d08eaa29a58e3294c8c0457",
        "file": [
            {
                "patch": "@@ -75,15 +75,12 @@ void addNew( SocketSessionImpl session ) throws IOException\n         newSessions.offer( session );\n \n         startupWorker();\n-\n-        selector.wakeup();\n     }\n \n     void remove( SocketSessionImpl session ) throws IOException\n     {\n         scheduleRemove( session );\n         startupWorker();\n-        selector.wakeup();\n     }\n \n     private void startupWorker() throws IOException\n@@ -96,6 +93,7 @@ private void startupWorker() throws IOException\n                 worker = new Worker();\n                 executor.execute( new NamePreservingRunnable( worker ) );\n             }\n+            selector.wakeup();\n         }\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/a66728a4d520aeb68d08eaa29a58e3294c8c0457/core/src/main/java/org/apache/mina/transport/socket/nio/SocketIoProcessor.java",
                "status": "modified",
                "changes": 4,
                "deletions": 3,
                "sha": "5aedf6e1f047d22d700d14cbe37bd33ad94fda52",
                "blob_url": "https://github.com/apache/mina/blob/a66728a4d520aeb68d08eaa29a58e3294c8c0457/core/src/main/java/org/apache/mina/transport/socket/nio/SocketIoProcessor.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/SocketIoProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/SocketIoProcessor.java?ref=a66728a4d520aeb68d08eaa29a58e3294c8c0457"
            }
        ],
        "bug_id": "mina_2",
        "parent": "https://github.com/apache/mina/commit/39c7ae37dc3817c78ff9b55a99b70c079ff82c10",
        "message": "Resolved issue: DIRMINA-308 (NullPointerException in SocketIoProcessor under heavy load)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@479566 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/dc5113f84adb899be393ef71f2de00570153a182",
        "file": [
            {
                "patch": "@@ -52,7 +52,7 @@ private static Selector newSelector() {\n \n     public NioProcessor(Executor executor) {\n         super(executor);\n-        this.selector = newSelector();\n+        selector = newSelector();\n     }\n \n     @Override\n@@ -191,8 +191,10 @@ protected int transferFile(NioSession session, FileRegion region, int length) th\n         try {\n             return (int) region.getFileChannel().transferTo(region.getPosition(), length, session.getChannel());\n         } catch (IOException e) {\n-            // Check to see if the IOException is being thrown due to http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n-            if (e.getMessage().contains(\"Resource temporarily unavailable\")) {\n+            // Check to see if the IOException is being thrown due to\n+            // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5103988\n+            String message = e.getMessage();\n+            if (message != null && message.contains(\"temporarily unavailable\")) {\n                 return 0;\n             } else {\n                 throw e;",
                "additions": 5,
                "raw_url": "https://github.com/apache/mina/raw/dc5113f84adb899be393ef71f2de00570153a182/core/src/main/java/org/apache/mina/transport/socket/nio/NioProcessor.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "a38fdaab932e88a5a3dc390db82e0bc2d64e467c",
                "blob_url": "https://github.com/apache/mina/blob/dc5113f84adb899be393ef71f2de00570153a182/core/src/main/java/org/apache/mina/transport/socket/nio/NioProcessor.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioProcessor.java?ref=dc5113f84adb899be393ef71f2de00570153a182"
            }
        ],
        "bug_id": "mina_3",
        "parent": "https://github.com/apache/mina/commit/2e6680319c5d55b39eeb7e5790f3807ff719a595",
        "message": "Fixed issue: DIRMINA-570 - NullPointerException in NioProcessor.transferFile\n* Made sure to ignore a null exception message\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@649888 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/3c7448785034a2b0487edeb2ad1a08a0308c4336",
        "file": [
            {
                "patch": "@@ -164,15 +164,14 @@ protected void write0( WriteRequest writeRequest )\n         writeRequest.getFuture().setWritten( false );\n     }\n \n-    \n     public Object getAttachment()\n     {\n-        return attributes.get( \"\" );\n+        return getAttribute( \"\" );\n     }\n \n     public Object setAttachment( Object attachment )\n     {\n-        return attributes.put( \"\", attachment );\n+        return setAttribute( \"\", attachment );\n     }\n \n     public Object getAttribute( String key )",
                "additions": 2,
                "raw_url": "https://github.com/apache/mina/raw/3c7448785034a2b0487edeb2ad1a08a0308c4336/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "eea095c10d6ea9c939c44899f811db4a09ee0181",
                "blob_url": "https://github.com/apache/mina/blob/3c7448785034a2b0487edeb2ad1a08a0308c4336/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "filename": "core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java?ref=3c7448785034a2b0487edeb2ad1a08a0308c4336"
            }
        ],
        "bug_id": "mina_4",
        "parent": "https://github.com/apache/mina/commit/5c57e22705f8827d4f341033c39305763b436df7",
        "message": "Fixed reopened issue DIRMINA-357 (ConcurrentHashMap.put(key, null) throws an NPE effects BaseIOSession attachments/attributes)\n* setAttachment() still could throw a NPE.  Fixed by delegating the call to setAttribute().\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@521553 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/a65aaa26f30236f5fdfe1427364d479f19c0db2b",
        "file": [
            {
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.mina.api.IoServer;\n import org.apache.mina.api.IoService;\n import org.apache.mina.api.IoSession;\n+import org.apache.mina.api.RuntimeIoException;\n import org.apache.mina.service.AbstractIoService;\n import org.apache.mina.service.SelectorProcessor;\n import org.apache.mina.service.SelectorStrategy;\n@@ -68,10 +69,15 @@\n \n     private Map<SocketAddress, ServerSocketChannel> serverSocketChannels = new ConcurrentHashMap<SocketAddress, ServerSocketChannel>();\n \n+    // read buffer for all the incoming bytes\n     private ByteBuffer readBuffer;\n \n+    // the thread polling and processing the I/O events \n+    private SelectorWorker worker = null;\n+\n     /**\n      * new binded server to add to the selector {ServerSocketChannel, IoServer}\n+     * jvermillard : FIXME the typing is ugly !!!\n      */\n     private final Queue<Object[]> serversToAdd = new ConcurrentLinkedQueue<Object[]>();\n \n@@ -91,13 +97,14 @@\n \n     private Selector selector;\n \n-    // Lock for Selector worker, using default. can look into fairness later\n+    // Lock for Selector worker, using default. can look into fairness later.\n+    // We need to think about a lock less mechanism here.\n     private Lock workerLock = new ReentrantLock();\n \n     public NioSelectorProcessor(String name, SelectorStrategy strategy) {\n         this.strategy = strategy;\n \n-        // TODO : configurable parameter\n+        // FIXME : configurable parameter\n         readBuffer = ByteBuffer.allocate(1024);\n     }\n \n@@ -112,8 +119,10 @@ private void add(ServerSocketChannel serverChannel, IoServer server) {\n         wakeupWorker();\n     }\n \n-    private SelectorWorker worker = null;\n-\n+    /**\n+     * Wake the I/O worker thread and if none exists, create a new one\n+     * FIXME : too much locking there ?\n+     */\n     private void wakeupWorker() {\n         workerLock.lock();\n         try {\n@@ -130,9 +139,14 @@ private void wakeupWorker() {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public void bindAndAcceptAddress(IoServer server, SocketAddress address) throws IOException {\n         ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n+\n+        // FIXME : should be \"genericified\"\n         if (server instanceof AbstractTcpServer) {\n             serverSocketChannel.socket().setReuseAddress(((AbstractTcpServer) server).isReuseAddress());\n         }\n@@ -142,6 +156,9 @@ public void bindAndAcceptAddress(IoServer server, SocketAddress address) throws\n         add(serverSocketChannel, server);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public void unbind(SocketAddress address) throws IOException {\n         ServerSocketChannel channel = serverSocketChannels.get(address);\n@@ -155,6 +172,9 @@ public void unbind(SocketAddress address) throws IOException {\n         wakeupWorker();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public void createSession(IoService service, Object clientSocket) {\n         LOGGER.debug(\"create session\");\n@@ -167,6 +187,7 @@ public void createSession(IoService service, Object clientSocket) {\n             socketChannel.configureBlocking(false);\n         } catch (IOException e) {\n             LOGGER.error(\"Unexpected exception, while configuring socket as non blocking\", e);\n+            throw new RuntimeIoException(\"cannot configure socket as non-blocking\", e);\n         }\n \n         // apply the default service socket configuration\n@@ -220,7 +241,31 @@ public void createSession(IoService service, Object clientSocket) {\n     }\n \n     /**\n-     * The worker processing incoming session creation and destruction requests.\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void flush(IoSession session) {\n+        LOGGER.debug(\"scheduling session {} for writing\", session);\n+        // add the session to the list of session to be registered for writing\n+        flushingSessions.add((NioTcpSession) session);\n+        // wake the selector for unlocking the I/O thread\n+        wakeupWorker();\n+    }\n+\n+    /** \n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void scheduleForClose(IoSession session) {\n+        LOGGER.debug(\"scheduling session {} for close\", session);\n+        // add the session in the list of session for close.\n+        sessionsToClose.add((NioTcpSession) session);\n+        // wake the selector for unlocking the I/O thread\n+        wakeupWorker();\n+    }\n+\n+    /**\n+     * The worker processing incoming session creation, session destruction requests, session write and reads.\n      * It will also bind new servers.\n      */\n     private class SelectorWorker extends Thread {\n@@ -290,7 +335,7 @@ public void run() {\n                             SelectionKey key = sessionReadKey.remove(session);\n                             key.cancel();\n \n-                            // needed ?\n+                            // closing underlying socket\n                             session.getSocketChannel().close();\n                             // fire the event\n                             session.getFilterChain().processSessionClosed(session);\n@@ -362,7 +407,10 @@ public void run() {\n                                         // it\n                                         queue.remove();\n                                         // complete the future\n-                                        ((DefaultWriteFuture) wreq.getFuture()).complete();\n+                                        DefaultWriteFuture future = (DefaultWriteFuture) wreq.getFuture();\n+                                        if (future != null) {\n+                                            future.complete();\n+                                        }\n                                     } else {\n                                         // output socket buffer is full, we need\n                                         // to give up until next selection for\n@@ -441,16 +489,4 @@ public void run() {\n             }\n         }\n     }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void flush(IoSession session) {\n-        LOGGER.debug(\"scheduling session {} for writing\", session.toString());\n-        // add the session to the list of session to be registered for writing\n-        // wake the selector\n-        flushingSessions.add((NioTcpSession) session);\n-        wakeupWorker();\n-    }\n }",
                "additions": 55,
                "raw_url": "https://github.com/apache/mina/raw/a65aaa26f30236f5fdfe1427364d479f19c0db2b/core/src/main/java/org/apache/mina/transport/tcp/NioSelectorProcessor.java",
                "status": "modified",
                "changes": 74,
                "deletions": 19,
                "sha": "d6d84b3a399fd686c03ad6a73a8614f91165409d",
                "blob_url": "https://github.com/apache/mina/blob/a65aaa26f30236f5fdfe1427364d479f19c0db2b/core/src/main/java/org/apache/mina/transport/tcp/NioSelectorProcessor.java",
                "filename": "core/src/main/java/org/apache/mina/transport/tcp/NioSelectorProcessor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/tcp/NioSelectorProcessor.java?ref=a65aaa26f30236f5fdfe1427364d479f19c0db2b"
            }
        ],
        "bug_id": "mina_5",
        "parent": "https://github.com/apache/mina/commit/29de1bec382892520dadc4e27bca940e3eb3b59f",
        "message": "fixing NPE on write request without futures\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@1208745 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/401fd4c03e2c1820d0b73083d3439b03c79cb558",
        "file": [
            {
                "patch": "@@ -20,6 +20,7 @@\n package org.apache.mina.transport.socket.nio;\n \n import java.net.InetSocketAddress;\n+import java.net.Socket;\n import java.net.SocketException;\n import java.nio.channels.SelectionKey;\n import java.nio.channels.SocketChannel;\n@@ -124,12 +125,38 @@ public IoHandler getHandler() {\n         return handler;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public InetSocketAddress getRemoteAddress() {\n-        return (InetSocketAddress) ch.socket().getRemoteSocketAddress();\n+        if ( ch == null ) {\n+            return null;\n+        }\n+        \n+        Socket socket = ch.socket();\n+        \n+        if ( socket == null ) {\n+            return null;\n+        }\n+        \n+        return (InetSocketAddress) socket.getRemoteSocketAddress();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public InetSocketAddress getLocalAddress() {\n-        return (InetSocketAddress) ch.socket().getLocalSocketAddress();\n+        if ( ch == null ) {\n+            return null;\n+        }\n+        \n+        Socket socket = ch.socket();\n+        \n+        if ( socket == null ) {\n+            return null;\n+        }\n+        \n+        return (InetSocketAddress) socket.getLocalSocketAddress();\n     }\n \n     @Override",
                "additions": 29,
                "raw_url": "https://github.com/apache/mina/raw/401fd4c03e2c1820d0b73083d3439b03c79cb558/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketSession.java",
                "status": "modified",
                "changes": 31,
                "deletions": 2,
                "sha": "f4d00dc2d917fef2353dbc10950e1dc74db28ac4",
                "blob_url": "https://github.com/apache/mina/blob/401fd4c03e2c1820d0b73083d3439b03c79cb558/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketSession.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketSession.java?ref=401fd4c03e2c1820d0b73083d3439b03c79cb558"
            }
        ],
        "bug_id": "mina_6",
        "parent": "https://github.com/apache/mina/commit/72932f3d14effe6a644f89b82d3d0443b46a32cd",
        "message": "Added checks against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@756268 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/80d1a1f48509a828453f1375ce7f53578d3a855e",
        "file": [
            {
                "patch": "@@ -422,6 +422,11 @@ private int processConnections(Iterator<H> handlers) {\n             handlers.remove();\n \n             ConnectionRequest connectionRequest = getConnectionRequest(handle);\n+            \n+            if ( connectionRequest == null) {\n+                continue;\n+            }\n+            \n             boolean success = false;\n             try {\n                 if (finishConnect(handle)) {",
                "additions": 5,
                "raw_url": "https://github.com/apache/mina/raw/80d1a1f48509a828453f1375ce7f53578d3a855e/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "82fb3a678806fc4d95ca778d69ed64e172f7f5b9",
                "blob_url": "https://github.com/apache/mina/blob/80d1a1f48509a828453f1375ce7f53578d3a855e/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "filename": "core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java?ref=80d1a1f48509a828453f1375ce7f53578d3a855e"
            }
        ],
        "bug_id": "mina_7",
        "parent": "https://github.com/apache/mina/commit/c3aebb56044154bb99e3f89d40b11625ce4fbc49",
        "message": "Added another check against a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@706623 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/704e2a588096d0311ebcb2ff3d4c5d40d1b164e5",
        "file": [
            {
                "patch": "@@ -280,7 +280,8 @@ public final Object invoke(String name, Object params[], String signature[])\n                 }\n                 \n                 return convertValue(\n-                        null, null, m.invoke(source, convertedParams), false);\n+                        m.getReturnType(), \"returnValue\",\n+                        m.invoke(source, convertedParams), false);\n             }\n             \n             // No methods matched.",
                "additions": 2,
                "raw_url": "https://github.com/apache/mina/raw/704e2a588096d0311ebcb2ff3d4c5d40d1b164e5/integration-jmx/src/main/java/org/apache/mina/integration/jmx/ObjectMBean.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "a42eab9834ff9e0732951ed0403a47681c17dd2a",
                "blob_url": "https://github.com/apache/mina/blob/704e2a588096d0311ebcb2ff3d4c5d40d1b164e5/integration-jmx/src/main/java/org/apache/mina/integration/jmx/ObjectMBean.java",
                "filename": "integration-jmx/src/main/java/org/apache/mina/integration/jmx/ObjectMBean.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/integration-jmx/src/main/java/org/apache/mina/integration/jmx/ObjectMBean.java?ref=704e2a588096d0311ebcb2ff3d4c5d40d1b164e5"
            }
        ],
        "bug_id": "mina_8",
        "parent": "https://github.com/apache/mina/commit/17d271b3f730b303ab1b358c5e56d2d00db43676",
        "message": "Fixed harmless NPE in ObjectMBean.convertValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@637740 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/6abf705621ef923b2bf49059700f59c03b80f06d",
        "file": [
            {
                "patch": "@@ -171,27 +171,19 @@ public SimpleIoProcessorPool(Class<? extends IoProcessor<T>> processorType, Exec\n     }\n     \n     public void add(T session) {\n-        IoProcessor<T> p = nextProcessor();\n-        session.setAttribute(PROCESSOR, p);\n-        p.add(session);\n+        getProcessor(session).add(session);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void flush(T session) {\n-        IoProcessor<T> p = (IoProcessor<T>) session.getAttribute(PROCESSOR);\n-        p.flush(session);\n+        getProcessor(session).flush(session);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void remove(T session) {\n-        IoProcessor<T> p = (IoProcessor<T>) session.removeAttribute(PROCESSOR);\n-        p.remove(session);\n+        getProcessor(session).remove(session);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void updateTrafficMask(T session) {\n-        IoProcessor<T> p = (IoProcessor<T>) session.getAttribute(PROCESSOR);\n-        p.updateTrafficMask(session);\n+        getProcessor(session).updateTrafficMask(session);\n     }\n     \n     public void dispose() {\n@@ -221,6 +213,21 @@ public void dispose() {\n         }\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n+    private IoProcessor<T> getProcessor(T session) {\n+        IoProcessor<T> p = (IoProcessor<T>) session.getAttribute(PROCESSOR);\n+        if (p == null) {\n+            p = nextProcessor();\n+            IoProcessor<T> oldp =\n+                (IoProcessor<T>) session.setAttributeIfAbsent(PROCESSOR, p);\n+            if (oldp != null) {\n+                p = oldp;\n+            }\n+        }\n+        \n+        return p;\n+    }\n+\n     private IoProcessor<T> nextProcessor() {\n         checkDisposal();\n         return pool[Math.abs(processorDistributor.getAndIncrement()) % pool.length];",
                "additions": 19,
                "raw_url": "https://github.com/apache/mina/raw/6abf705621ef923b2bf49059700f59c03b80f06d/core/src/main/java/org/apache/mina/common/SimpleIoProcessorPool.java",
                "status": "modified",
                "changes": 31,
                "deletions": 12,
                "sha": "d6b43d8b1835d5ac779e77bd112a8be1af6a450f",
                "blob_url": "https://github.com/apache/mina/blob/6abf705621ef923b2bf49059700f59c03b80f06d/core/src/main/java/org/apache/mina/common/SimpleIoProcessorPool.java",
                "filename": "core/src/main/java/org/apache/mina/common/SimpleIoProcessorPool.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/common/SimpleIoProcessorPool.java?ref=6abf705621ef923b2bf49059700f59c03b80f06d"
            }
        ],
        "bug_id": "mina_9",
        "parent": "https://github.com/apache/mina/commit/b73b0d7eb6a3a6651c7361189e808098431576a4",
        "message": "Fixed NPE in SimpleIoProcessorPool due to timing issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@594199 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/e53a207e999c64f06fa2a444c30bbcaa1db7873b",
        "file": [
            {
                "patch": "@@ -115,7 +115,7 @@ private AbstractPollingIoConnector(IoSessionConfig sessionConfig, Executor execu\n     protected abstract void destroy() throws Exception;\n     protected abstract H newHandle(SocketAddress localAddress) throws Exception;\n     protected abstract boolean connect(H handle, SocketAddress remoteAddress) throws Exception;\n-    protected abstract void finishConnect(H handle) throws Exception;\n+    protected abstract boolean finishConnect(H handle) throws Exception;\n     protected abstract T newSession(IoProcessor<T> processor, H handle) throws Exception;\n     protected abstract void close(H handle) throws Exception;\n     protected abstract void wakeup();\n@@ -241,12 +241,13 @@ private int processSessions(Iterator<H> handlers) {\n             ConnectionRequest entry = connectionRequest(handle);\n             boolean success = false;\n             try {\n-                finishConnect(handle);\n-                T session = newSession(processor, handle);\n-                finishSessionInitialization(session, entry);\n-                // Forward the remaining process to the IoProcessor.\n-                session.getProcessor().add(session);\n-                nHandles ++;\n+                if (finishConnect(handle)) {\n+                    T session = newSession(processor, handle);\n+                    finishSessionInitialization(session, entry);\n+                    // Forward the remaining process to the IoProcessor.\n+                    session.getProcessor().add(session);\n+                    nHandles ++;\n+                }\n                 success = true;\n             } catch (Throwable e) {\n                 entry.setException(e);",
                "additions": 8,
                "raw_url": "https://github.com/apache/mina/raw/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/common/AbstractPollingIoConnector.java",
                "status": "modified",
                "changes": 15,
                "deletions": 7,
                "sha": "4641501a8bcdf5f9cb0e281162885067d6abc24d",
                "blob_url": "https://github.com/apache/mina/blob/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/common/AbstractPollingIoConnector.java",
                "filename": "core/src/main/java/org/apache/mina/common/AbstractPollingIoConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/common/AbstractPollingIoConnector.java?ref=e53a207e999c64f06fa2a444c30bbcaa1db7873b"
            },
            {
                "patch": "@@ -137,7 +137,7 @@ protected void destroy() throws Exception {\n     }\n \n     @Override\n-    protected void finishConnect(DatagramChannel handle) throws Exception {\n+    protected boolean finishConnect(DatagramChannel handle) throws Exception {\n         throw new UnsupportedOperationException();\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramConnector.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "211660b1ff870175f0ec67c36f030a08c600c734",
                "blob_url": "https://github.com/apache/mina/blob/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramConnector.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramConnector.java?ref=e53a207e999c64f06fa2a444c30bbcaa1db7873b"
            },
            {
                "patch": "@@ -125,13 +125,16 @@ protected void close(SocketChannel handle) throws Exception {\n     }\n \n     @Override\n-    protected void finishConnect(SocketChannel handle) throws Exception {\n+    protected boolean finishConnect(SocketChannel handle) throws Exception {\n         SelectionKey key = handle.keyFor(selector);\n-        if (key != null) {\n-            key.cancel();\n+        if (handle.finishConnect()) {\n+            if (key != null) {\n+                key.cancel();\n+            }\n+            return true;\n         }\n         \n-        handle.finishConnect();\n+        return false;\n     }\n \n     @Override",
                "additions": 7,
                "raw_url": "https://github.com/apache/mina/raw/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "status": "modified",
                "changes": 11,
                "deletions": 4,
                "sha": "3ca56d20caad34ed7a8ba85dd3c7aceeecfbda2e",
                "blob_url": "https://github.com/apache/mina/blob/e53a207e999c64f06fa2a444c30bbcaa1db7873b/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java?ref=e53a207e999c64f06fa2a444c30bbcaa1db7873b"
            },
            {
                "patch": "@@ -176,13 +176,14 @@ protected void close(Long handle) throws Exception {\n     }\n \n     @Override\n-    protected void finishConnect(Long handle) throws Exception {\n+    protected boolean finishConnect(Long handle) throws Exception {\n         Poll.remove(pollset, handle);\n         requests.remove(handle);\n         if (failedHandles.remove(handle)) {\n             int rv = Socket.recvb(handle, dummyBuffer, 0, 1);\n             throwException(rv);\n         }\n+        return true;\n     }\n \n     @Override",
                "additions": 2,
                "raw_url": "https://github.com/apache/mina/raw/e53a207e999c64f06fa2a444c30bbcaa1db7873b/transport-apr/src/main/java/org/apache/mina/transport/socket/apr/AprSocketConnector.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "1836ee4fd4b0d20a485a646c5f9098ceb78161d7",
                "blob_url": "https://github.com/apache/mina/blob/e53a207e999c64f06fa2a444c30bbcaa1db7873b/transport-apr/src/main/java/org/apache/mina/transport/socket/apr/AprSocketConnector.java",
                "filename": "transport-apr/src/main/java/org/apache/mina/transport/socket/apr/AprSocketConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/transport-apr/src/main/java/org/apache/mina/transport/socket/apr/AprSocketConnector.java?ref=e53a207e999c64f06fa2a444c30bbcaa1db7873b"
            }
        ],
        "bug_id": "mina_10",
        "parent": "https://github.com/apache/mina/commit/7fcc24a5d650d11c8124865fd8b9e999ca22dbbd",
        "message": "Fixed issue: DIRMINA-435 (NullPointerException in IoServiceListenerSupport)\n* MINA was not handling the case that SocketChannel.finishConnect() returns false.  Made sure the selection key is not cancelled if finishConnect() returns false.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@600803 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/0463d95e77436d5da5937a36054fad5028bbd0e3",
        "file": [
            {
                "patch": "@@ -34,61 +34,73 @@\n import org.apache.mina.util.ExceptionMonitor;\n \n /**\n- * A helper which provides addition and removal of {@link IoServiceListener}s and firing\n+ * A helper class which provides addition and removal of {@link IoServiceListener}s and firing\n  * events.\n  *\n  * @author <a href=\"http://mina.apache.org\">Apache MINA Project</a>\n  */\n public class IoServiceListenerSupport {\n-    /**\n-     * The {@link IoService} that this instance manages.\n-     */\n+    /** The {@link IoService} that this instance manages. */\n     private final IoService service;\n \n-    /**\n-     * A list of {@link IoServiceListener}s.\n-     */\n+    /** A list of {@link IoServiceListener}s. */\n     private final List<IoServiceListener> listeners = new CopyOnWriteArrayList<IoServiceListener>();\n \n-    /**\n-     * Tracks managed sessions.\n-     */\n+    /** Tracks managed sessions. */\n     private final ConcurrentMap<Long, IoSession> managedSessions = new ConcurrentHashMap<Long, IoSession>();\n \n-    /**\n-     * Read only version of {@link #managedSessions}.\n-     */\n+    /**  Read only version of {@link #managedSessions}. */\n     private final Map<Long, IoSession> readOnlyManagedSessions = Collections.unmodifiableMap(managedSessions);\n \n     private final AtomicBoolean activated = new AtomicBoolean();\n+    \n+    /** Time this listenerSupport has been activated */\n     private volatile long activationTime;\n-    private volatile int largestManagedSessionCount;\n-    private volatile long cumulativeManagedSessionCount;\n+    \n+    /** A counter used to store the maximum sessions we managed since the listenerSupport has been activated */\n+    private volatile int largestManagedSessionCount = 0;\n+    \n+    /** A global counter to count the number of sessions managed since the start */\n+    private volatile long cumulativeManagedSessionCount = 0;\n \n     /**\n-     * Creates a new instance.\n+     * Creates a new instance of the listenerSupport.\n+     * \n+     * @param service The associated IoService\n      */\n     public IoServiceListenerSupport(IoService service) {\n         if (service == null) {\n             throw new NullPointerException(\"service\");\n         }\n+        \n         this.service = service;\n     }\n \n     /**\n      * Adds a new listener.\n+     * \n+     * @param listener The added listener\n      */\n     public void add(IoServiceListener listener) {\n-        listeners.add(listener);\n+        if (listener != null) {\n+            listeners.add(listener);\n+        }\n     }\n \n     /**\n      * Removes an existing listener.\n+     * \n+     * @param listener The listener to remove\n      */\n     public void remove(IoServiceListener listener) {\n-        listeners.remove(listener);\n+        if (listener != null) {\n+            listeners.remove(listener);\n+        }\n     }\n \n+    /**\n+     * @return The time (in ms) this instance has been activated\n+     */\n     public long getActivationTime() {\n         return activationTime;\n     }\n@@ -101,14 +113,25 @@ public int getManagedSessionCount() {\n         return managedSessions.size();\n     }\n \n+    /**\n+     * @return The largest number of managed session since the creation of this \n+     * listenerSupport\n+     */\n     public int getLargestManagedSessionCount() {\n         return largestManagedSessionCount;\n     }\n \n+    /**\n+     * @return The total number of sessions managed since the initilization of this \n+     * ListenerSupport\n+     */\n     public long getCumulativeManagedSessionCount() {\n         return cumulativeManagedSessionCount;\n     }\n \n+    /**\n+     * @return true if the instance is active\n+     */\n     public boolean isActive() {\n         return activated.get();\n     }\n@@ -119,14 +142,16 @@ public boolean isActive() {\n      */\n     public void fireServiceActivated() {\n         if (!activated.compareAndSet(false, true)) {\n+            // The instance is already active\n             return;\n         }\n \n         activationTime = System.currentTimeMillis();\n \n-        for (IoServiceListener l : listeners) {\n+        // Activate all the listeners now\n+        for (IoServiceListener listener : listeners) {\n             try {\n-                l.serviceActivated(service);\n+                listener.serviceActivated(service);\n             } catch (Throwable e) {\n                 ExceptionMonitor.getInstance().exceptionCaught(e);\n             }\n@@ -139,13 +164,15 @@ public void fireServiceActivated() {\n      */\n     public void fireServiceDeactivated() {\n         if (!activated.compareAndSet(true, false)) {\n+            // The instance is already desactivated \n             return;\n         }\n \n+        // Desactivate all the listeners\n         try {\n-            for (IoServiceListener l : listeners) {\n+            for (IoServiceListener listener : listeners) {\n                 try {\n-                    l.serviceDeactivated(service);\n+                    listener.serviceDeactivated(service);\n                 } catch (Throwable e) {\n                     ExceptionMonitor.getInstance().exceptionCaught(e);\n                 }\n@@ -157,17 +184,20 @@ public void fireServiceDeactivated() {\n \n     /**\n      * Calls {@link IoServiceListener#sessionCreated(IoSession)} for all registered listeners.\n+     * \n+     * @param session The session which has been created\n      */\n     public void fireSessionCreated(IoSession session) {\n         boolean firstSession = false;\n+        \n         if (session.getService() instanceof IoConnector) {\n             synchronized (managedSessions) {\n                 firstSession = managedSessions.isEmpty();\n             }\n         }\n \n         // If already registered, ignore.\n-        if (managedSessions.putIfAbsent(Long.valueOf(session.getId()), session) != null) {\n+        if (managedSessions.putIfAbsent(session.getId(), session) != null) {\n             return;\n         }\n \n@@ -182,9 +212,11 @@ public void fireSessionCreated(IoSession session) {\n         filterChain.fireSessionOpened();\n \n         int managedSessionCount = managedSessions.size();\n+        \n         if (managedSessionCount > largestManagedSessionCount) {\n             largestManagedSessionCount = managedSessionCount;\n         }\n+        \n         cumulativeManagedSessionCount ++;\n \n         // Fire listener events.\n@@ -199,10 +231,12 @@ public void fireSessionCreated(IoSession session) {\n \n     /**\n      * Calls {@link IoServiceListener#sessionDestroyed(IoSession)} for all registered listeners.\n+     * \n+     * @param session The session which has been destroyed\n      */\n     public void fireSessionDestroyed(IoSession session) {\n         // Try to remove the remaining empty session set after removal.\n-        if (managedSessions.remove(Long.valueOf(session.getId())) == null) {\n+        if (managedSessions.remove(session.getId()) == null) {\n             return;\n         }\n \n@@ -222,18 +256,26 @@ public void fireSessionDestroyed(IoSession session) {\n             // Fire a virtual service deactivation event for the last session of the connector.\n             if (session.getService() instanceof IoConnector) {\n                 boolean lastSession = false;\n+                \n                 synchronized (managedSessions) {\n                     lastSession = managedSessions.isEmpty();\n                 }\n+                \n                 if (lastSession) {\n                     fireServiceDeactivated();\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * Close all the sessions\n+     * TODO disconnectSessions.\n+     *\n+     */\n     private void disconnectSessions() {\n         if (!(service instanceof IoAcceptor)) {\n+            // We don't disconnect sessions for anything but an Acceptor\n             return;\n         }\n \n@@ -259,6 +301,9 @@ private void disconnectSessions() {\n         }\n     }\n \n+    /**\n+     * A listener in charge of releasing the lock when the close has been completed\n+     */\n     private static class LockNotifyingListener implements IoFutureListener<IoFuture> {\n         private final Object lock;\n ",
                "additions": 69,
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "status": "modified",
                "changes": 93,
                "deletions": 24,
                "sha": "fe64a2b17203463640514fda753bf65490ae43e8",
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "filename": "core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/core/service/IoServiceListenerSupport.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3"
            },
            {
                "patch": "@@ -33,9 +33,11 @@\n  * @author <a href=\"http://mina.apache.org\">Apache MINA Project</a>\n  */\n public class DefaultExceptionMonitor extends ExceptionMonitor {\n-    private final static Logger LOGGER = LoggerFactory\n-            .getLogger(DefaultExceptionMonitor.class);\n+    private final static Logger LOGGER = LoggerFactory.getLogger(DefaultExceptionMonitor.class);\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n     public void exceptionCaught(Throwable cause) {\n         if (cause instanceof Error) {",
                "additions": 4,
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "7b9d595df7c34ba3b6ea11b3937ebcc4f5b2994a",
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "filename": "core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/util/DefaultExceptionMonitor.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3"
            },
            {
                "patch": "@@ -55,11 +55,14 @@ public static void setInstance(ExceptionMonitor monitor) {\n         if (monitor == null) {\n             monitor = new DefaultExceptionMonitor();\n         }\n+        \n         instance = monitor;\n     }\n \n     /**\n      * Invoked when there are any uncaught exceptions.\n+     * \n+     * @param cause The caught exception\n      */\n     public abstract void exceptionCaught(Throwable cause);\n }\n\\ No newline at end of file",
                "additions": 3,
                "raw_url": "https://github.com/apache/mina/raw/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "9da76a193057f26acc13e33539f93ed2e02095f3",
                "blob_url": "https://github.com/apache/mina/blob/0463d95e77436d5da5937a36054fad5028bbd0e3/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "filename": "core/src/main/java/org/apache/mina/util/ExceptionMonitor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/util/ExceptionMonitor.java?ref=0463d95e77436d5da5937a36054fad5028bbd0e3"
            }
        ],
        "bug_id": "mina_11",
        "parent": "https://github.com/apache/mina/commit/f6f81270aace599f13895d8aa8022a98da8b165f",
        "message": "o Added Javadoc and comments for those three classes\no Added some check against NPE and removed useless code\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@900040 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/e33a1e7d5faf0a08b8e7cff6816a0e0a535b7928",
        "file": [
            {
                "patch": "@@ -58,11 +58,14 @@ public DefaultSocketSessionConfig() {\n \n     public void init(IoService parent) {\n         this.parent = parent;\n+        \n         if (parent instanceof SocketAcceptor) {\n             defaultReuseAddress = true;\n+            defaultReceiveBufferSize = receiveBufferSize;\n         } else {\n             defaultReuseAddress = DEFAULT_REUSE_ADDRESS;\n         }\n+        \n         reuseAddress = defaultReuseAddress;\n     }\n \n@@ -89,7 +92,7 @@ public void setReceiveBufferSize(int receiveBufferSize) {\n         // not bound yet to avoid a unnecessary system call\n         // when the acceptor is activated and new sessions are\n         // created.\n-        if (!parent.isActive() && parent instanceof SocketAcceptor) {\n+        if ((parent != null) && !parent.isActive() && parent instanceof SocketAcceptor) {\n             defaultReceiveBufferSize = receiveBufferSize;\n         }\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/mina/raw/e33a1e7d5faf0a08b8e7cff6816a0e0a535b7928/core/src/main/java/org/apache/mina/transport/socket/DefaultSocketSessionConfig.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "b074fe1797fae6e2fac7372af7a36da5229ff6a9",
                "blob_url": "https://github.com/apache/mina/blob/e33a1e7d5faf0a08b8e7cff6816a0e0a535b7928/core/src/main/java/org/apache/mina/transport/socket/DefaultSocketSessionConfig.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/DefaultSocketSessionConfig.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/DefaultSocketSessionConfig.java?ref=e33a1e7d5faf0a08b8e7cff6816a0e0a535b7928"
            }
        ],
        "bug_id": "mina_12",
        "parent": "https://github.com/apache/mina/commit/ab9ba08afdc6d78cb19c7bacd91fe6e96e898421",
        "message": "Fix the potential NPE when updating the receivedBufferSize when the config is not associated yet with a service (DIRMINA-746)\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@899085 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/fa036dd376076be7224022a49bcd90830b5782ed",
        "file": [
            {
                "patch": "@@ -292,7 +292,15 @@ public void filterWrite(NextFilter nextFilter, IoSession session,\n \n         ProtocolEncoderOutput encoderOut = getEncoderOut(session,\n                 nextFilter, writeRequest);\n-\n+        \n+        if (encoder == null) {\n+            throw new ProtocolEncoderException(\"The encoder is null for the session \" + session);\n+        }\n+        \n+        if (encoderOut == null) {\n+            throw new ProtocolEncoderException(\"The encoderOut is null for the session \" + session);\n+        }\n+        \n         try {\n             // Now we can try to encode the response\n             encoder.encode(session, message, encoderOut);",
                "additions": 9,
                "raw_url": "https://github.com/apache/mina/raw/fa036dd376076be7224022a49bcd90830b5782ed/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "status": "modified",
                "changes": 10,
                "deletions": 1,
                "sha": "e12f795f1cdcbf96c1fce8466752109769b631c0",
                "blob_url": "https://github.com/apache/mina/blob/fa036dd376076be7224022a49bcd90830b5782ed/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "filename": "core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java?ref=fa036dd376076be7224022a49bcd90830b5782ed"
            }
        ],
        "bug_id": "mina_13",
        "parent": "https://github.com/apache/mina/commit/7bb118214fad995b1c9da49180d2c82058bacbe9",
        "message": "Added some protection against some NPE in the ProtocolCodecFilter. Not sure it's enough though...\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@898592 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/614fb37539b9c0f4ea3b9c3853f7282fba42737c",
        "file": [
            {
                "patch": "@@ -451,7 +451,7 @@ private void processTimedOutSessions(Iterator<H> handles) {\n             H handle = handles.next();\n             ConnectionRequest connectionRequest = getConnectionRequest(handle);\n \n-            if (currentTime >= connectionRequest.deadline) {\n+            if ((connectionRequest != null) && (currentTime >= connectionRequest.deadline)) {\n                 connectionRequest.setException(\n                         new ConnectException(\"Connection timed out.\"));\n                 cancelQueue.offer(connectionRequest);",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "8a6081c2f4d9d3e0025c5a842b21e7c80203c1a4",
                "blob_url": "https://github.com/apache/mina/blob/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "filename": "core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/core/polling/AbstractPollingIoConnector.java?ref=614fb37539b9c0f4ea3b9c3853f7282fba42737c"
            },
            {
                "patch": "@@ -121,24 +121,22 @@ protected DatagramChannel open(SocketAddress localAddress) throws Exception {\n     @Override\n     protected boolean isReadable(DatagramChannel handle) {\n         SelectionKey key = handle.keyFor(selector);\n-        if (key == null) {\n-            return false;\n-        }\n-        if (!key.isValid()) {\n+\n+        if ((key == null) || (!key.isValid())) {\n             return false;\n         }\n+\n         return key.isReadable();\n     }\n \n     @Override\n     protected boolean isWritable(DatagramChannel handle) {\n         SelectionKey key = handle.keyFor(selector);\n-        if (key == null) {\n-            return false;\n-        }\n-        if (!key.isValid()) {\n+\n+        if ((key == null) || (!key.isValid())) {\n             return false;\n         }\n+\n         return key.isWritable();\n     }\n \n@@ -153,9 +151,11 @@ protected NioSession newSession(\n             IoProcessor<NioSession> processor, DatagramChannel handle,\n             SocketAddress remoteAddress) {\n         SelectionKey key = handle.keyFor(selector);\n-        if (key == null) {\n+        \n+        if ((key == null) || (!key.isValid())) {\n             return null;\n         }\n+        \n         NioDatagramSession newSession = new NioDatagramSession(\n                 this, handle, processor, remoteAddress);\n         newSession.setSelectionKey(key);\n@@ -204,9 +204,11 @@ protected void setInterestedInWrite(NioSession session, boolean interested)\n     @Override\n     protected void close(DatagramChannel handle) throws Exception {\n         SelectionKey key = handle.keyFor(selector);\n+\n         if (key != null) {\n             key.cancel();\n         }\n+        \n         handle.disconnect();\n         handle.close();\n     }",
                "additions": 11,
                "raw_url": "https://github.com/apache/mina/raw/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramAcceptor.java",
                "status": "modified",
                "changes": 20,
                "deletions": 9,
                "sha": "d2b06aa77ee7d99ff3bdf90ffa6ff014216d5810",
                "blob_url": "https://github.com/apache/mina/blob/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramAcceptor.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramAcceptor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioDatagramAcceptor.java?ref=614fb37539b9c0f4ea3b9c3853f7282fba42737c"
            },
            {
                "patch": "@@ -210,11 +210,7 @@ protected NioSession accept(IoProcessor<NioSession> processor,\n \n         SelectionKey key = handle.keyFor(selector);\n         \n-        if (!key.isValid()) {\n-            return null;\n-        }\n-\n-        if (!key.isAcceptable()) {\n+        if ((key == null) || (!key.isValid()) || (!key.isAcceptable()) ) {\n             return null;\n         }\n \n@@ -296,9 +292,11 @@ protected int select() throws Exception {\n     @Override\n     protected void close(ServerSocketChannel handle) throws Exception {\n         SelectionKey key = handle.keyFor(selector);\n+        \n         if (key != null) {\n             key.cancel();\n         }\n+        \n         handle.close();\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/mina/raw/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketAcceptor.java",
                "status": "modified",
                "changes": 8,
                "deletions": 5,
                "sha": "008e67dc5690b0d09d5fe2cf39eb2d3f95466d7e",
                "blob_url": "https://github.com/apache/mina/blob/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketAcceptor.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketAcceptor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketAcceptor.java?ref=614fb37539b9c0f4ea3b9c3853f7282fba42737c"
            },
            {
                "patch": "@@ -194,7 +194,8 @@ protected boolean connect(SocketChannel handle, SocketAddress remoteAddress)\n     @Override\n     protected ConnectionRequest getConnectionRequest(SocketChannel handle) {\n         SelectionKey key = handle.keyFor(selector);\n-        if (key == null) {\n+        \n+        if ((key == null) || (!key.isValid())) { \n             return null;\n         }\n \n@@ -207,9 +208,11 @@ protected ConnectionRequest getConnectionRequest(SocketChannel handle) {\n     @Override\n     protected void close(SocketChannel handle) throws Exception {\n         SelectionKey key = handle.keyFor(selector);\n+        \n         if (key != null) {\n             key.cancel();\n         }\n+        \n         handle.close();\n     }\n \n@@ -218,11 +221,13 @@ protected void close(SocketChannel handle) throws Exception {\n      */\n     @Override\n     protected boolean finishConnect(SocketChannel handle) throws Exception {\n-        SelectionKey key = handle.keyFor(selector);\n         if (handle.finishConnect()) {\n+            SelectionKey key = handle.keyFor(selector);\n+\n             if (key != null) {\n                 key.cancel();\n             }\n+            \n             return true;\n         }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/mina/raw/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "771b4b69f4ba0cfb0aeec7078d6da4d146c9ceb8",
                "blob_url": "https://github.com/apache/mina/blob/614fb37539b9c0f4ea3b9c3853f7282fba42737c/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "filename": "core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/transport/socket/nio/NioSocketConnector.java?ref=614fb37539b9c0f4ea3b9c3853f7282fba42737c"
            }
        ],
        "bug_id": "mina_14",
        "parent": "https://github.com/apache/mina/commit/1e7ae537cfad9fc03153915a6207abdc31dc6231",
        "message": "Fixed a potential NPE when the SelectionKey is null in the accept methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@706585 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/2eb3067109a5661951862f9ebf199ccec8ed007c",
        "file": [
            {
                "patch": "@@ -245,18 +245,25 @@ private ReadFuture newReadFuture() {\n             if (oldReadyReadFutures != null) {\n                 readyReadFutures = oldReadyReadFutures;\n             }\n-\n-            // Initialize waitingReadFutures together.\n-            Queue<ReadFuture> waitingReadFutures =\n-                new CircularQueue<ReadFuture>();\n-            setAttributeIfAbsent(WAITING_READ_FUTURES, waitingReadFutures);\n         }\n         return readyReadFutures;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     private Queue<ReadFuture> getWaitingReadFutures() {\n-        return (Queue<ReadFuture>) getAttribute(WAITING_READ_FUTURES);\n+        Queue<ReadFuture> waitingReadyReadFutures =\n+            (Queue<ReadFuture>) getAttribute(WAITING_READ_FUTURES);\n+        if (waitingReadyReadFutures == null) {\n+            waitingReadyReadFutures = new CircularQueue<ReadFuture>();\n+\n+            Queue<ReadFuture> oldWaitingReadyReadFutures =\n+                (Queue<ReadFuture>) setAttributeIfAbsent(\n+                        WAITING_READ_FUTURES, waitingReadyReadFutures);\n+            if (oldWaitingReadyReadFutures != null) {\n+                waitingReadyReadFutures = oldWaitingReadyReadFutures;\n+            }\n+        }\n+        return waitingReadyReadFutures;\n     }\n \n     public final WriteFuture write(Object message) {",
                "additions": 13,
                "raw_url": "https://github.com/apache/mina/raw/2eb3067109a5661951862f9ebf199ccec8ed007c/core/src/main/java/org/apache/mina/common/AbstractIoSession.java",
                "status": "modified",
                "changes": 19,
                "deletions": 6,
                "sha": "ae2f77c86bc3af25bc63b05ec47f7ce3fd304dfa",
                "blob_url": "https://github.com/apache/mina/blob/2eb3067109a5661951862f9ebf199ccec8ed007c/core/src/main/java/org/apache/mina/common/AbstractIoSession.java",
                "filename": "core/src/main/java/org/apache/mina/common/AbstractIoSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/common/AbstractIoSession.java?ref=2eb3067109a5661951862f9ebf199ccec8ed007c"
            }
        ],
        "bug_id": "mina_15",
        "parent": "https://github.com/apache/mina/commit/42eb2517c086fe67ac56b5c5705812851f6a3aa4",
        "message": "Fixed issue: DIRMINA-567 - NPE in AbstractIoSession after getWaitingReadFutures\n* Applied the same lazy initialization technique to getWaitingReadFutures as I did in getReadFutures\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@645798 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/01a6eb4d7246f9203e0a5968d8f89846edd21b54",
        "file": [
            {
                "patch": "@@ -489,7 +489,9 @@ public void run() {\n                     }\n                     \n                     try {\n-                        runTasks(getSessionBuffer(session));\n+                        if (session != null) {\n+                            runTasks(getSessionBuffer(session));\n+                        }\n                     } finally {\n                         idleWorkers.incrementAndGet();\n                     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/mina/raw/01a6eb4d7246f9203e0a5968d8f89846edd21b54/core/src/main/java/org/apache/mina/filter/executor/OrderedThreadPoolExecutor.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "61b265da9f89979274b8ebd91155b691cd78bbd2",
                "blob_url": "https://github.com/apache/mina/blob/01a6eb4d7246f9203e0a5968d8f89846edd21b54/core/src/main/java/org/apache/mina/filter/executor/OrderedThreadPoolExecutor.java",
                "filename": "core/src/main/java/org/apache/mina/filter/executor/OrderedThreadPoolExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/filter/executor/OrderedThreadPoolExecutor.java?ref=01a6eb4d7246f9203e0a5968d8f89846edd21b54"
            },
            {
                "patch": "@@ -430,9 +430,11 @@ public void run() {\n                         break;\n                     }\n                     \n-                    queueHandler.polled(UnorderedThreadPoolExecutor.this, (IoEvent) task);\n                     try {\n-                        runTask(task);\n+                        if (task != null) {\n+                            queueHandler.polled(UnorderedThreadPoolExecutor.this, (IoEvent) task);\n+                            runTask(task);\n+                        }\n                     } finally {\n                         idleWorkers.incrementAndGet();\n                     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/mina/raw/01a6eb4d7246f9203e0a5968d8f89846edd21b54/core/src/main/java/org/apache/mina/filter/executor/UnorderedThreadPoolExecutor.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "94234c45353ee79a8e7979b74635550c6f3c3ce2",
                "blob_url": "https://github.com/apache/mina/blob/01a6eb4d7246f9203e0a5968d8f89846edd21b54/core/src/main/java/org/apache/mina/filter/executor/UnorderedThreadPoolExecutor.java",
                "filename": "core/src/main/java/org/apache/mina/filter/executor/UnorderedThreadPoolExecutor.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/filter/executor/UnorderedThreadPoolExecutor.java?ref=01a6eb4d7246f9203e0a5968d8f89846edd21b54"
            }
        ],
        "bug_id": "mina_16",
        "parent": "https://github.com/apache/mina/commit/1d82343383f157b3c91e1a96b1fb0e51ad2cef60",
        "message": "Fixed issue: DIRMINA-533 (NPE in OrderedThreadPoolExecutor and UnorderedThreadPoolExecutor)\n* Added null check to both executor\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@629429 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/1e9cea5a1655f9cad9c692aca0b1ddf57fa3fa4f",
        "file": [
            {
                "patch": "@@ -54,7 +54,7 @@\n public class SerialSession extends AbstractIoSession implements\n         SerialPortEventListener {\n \n-    private SerialSessionConfig config;\n+    private SerialSessionConfig config = new DefaultSerialSessionConfig();\n \n     private final IoHandler ioHandler;\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/1e9cea5a1655f9cad9c692aca0b1ddf57fa3fa4f/transport-serial/src/main/java/org/apache/mina/transport/serial/SerialSession.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a5ed20092115e732b68b821acd88049fee7c013b",
                "blob_url": "https://github.com/apache/mina/blob/1e9cea5a1655f9cad9c692aca0b1ddf57fa3fa4f/transport-serial/src/main/java/org/apache/mina/transport/serial/SerialSession.java",
                "filename": "transport-serial/src/main/java/org/apache/mina/transport/serial/SerialSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/transport-serial/src/main/java/org/apache/mina/transport/serial/SerialSession.java?ref=1e9cea5a1655f9cad9c692aca0b1ddf57fa3fa4f"
            }
        ],
        "bug_id": "mina_17",
        "parent": "https://github.com/apache/mina/commit/5d5ae74b587af6b553936ebef6406d79f84d7682",
        "message": "Fixed NPE during IDLE Checking, apparently the SerialSession config wasn't correctly initialized.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@572723 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/a88268234fe5b5216982a891ca1f7f8b7a2ede4e",
        "file": [
            {
                "patch": "@@ -78,6 +78,7 @@ public boolean connect( SocketConnector connector, SocketAddress address, boolea\n                 return false;\n             }\n             session = future1.getSession();\n+            login();\n             \n             return true;\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "6b03d283fded6eef884aa156e0ad2099286f6220",
                "blob_url": "https://github.com/apache/mina/blob/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "filename": "example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java?ref=a88268234fe5b5216982a891ca1f7f8b7a2ede4e"
            },
            {
                "patch": "@@ -280,7 +280,7 @@ private int parsePort( String s )\n \n     public void connected()\n     {\n-        client.login();\n+        //client.login();\n     }\n \n     public void disconnected()",
                "additions": 1,
                "raw_url": "https://github.com/apache/mina/raw/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClient.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "966d253122fa7892994ae7a1bef27d9c55a2f892",
                "blob_url": "https://github.com/apache/mina/blob/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClient.java",
                "filename": "example/src/main/java/org/apache/mina/example/chat/client/SwingChatClient.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClient.java?ref=a88268234fe5b5216982a891ca1f7f8b7a2ede4e"
            },
            {
                "patch": "@@ -39,6 +39,7 @@\n   <bean id=\"filterChainBuilder\" class=\"org.apache.mina.integration.spring.DefaultIoFilterChainBuilderFactoryBean\">\n     <property name=\"filters\">\n       <list>\n+        <bean class=\"org.apache.mina.filter.executor.ExecutorFilter\"/>\n         <bean class=\"org.apache.mina.filter.codec.ProtocolCodecFilter\">\n           <constructor-arg>\n             <bean class=\"org.apache.mina.filter.codec.textline.TextLineCodecFactory\" />\n@@ -53,6 +54,7 @@\n   <bean id=\"sslFilterChainBuilder\" class=\"org.apache.mina.integration.spring.DefaultIoFilterChainBuilderFactoryBean\">\n     <property name=\"filters\">\n       <list>\n+        <bean class=\"org.apache.mina.filter.executor.ExecutorFilter\"/>\n         <bean class=\"org.apache.mina.filter.SSLFilter\">\n           <constructor-arg ref=\"sslContext\"/>\n         </bean>      ",
                "additions": 2,
                "raw_url": "https://github.com/apache/mina/raw/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/serverContext.xml",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "ea2d4dd39c31de0e21924cdd80e4f1e20131269e",
                "blob_url": "https://github.com/apache/mina/blob/a88268234fe5b5216982a891ca1f7f8b7a2ede4e/example/src/main/java/org/apache/mina/example/chat/serverContext.xml",
                "filename": "example/src/main/java/org/apache/mina/example/chat/serverContext.xml",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/example/src/main/java/org/apache/mina/example/chat/serverContext.xml?ref=a88268234fe5b5216982a891ca1f7f8b7a2ede4e"
            }
        ],
        "bug_id": "mina_18",
        "parent": "https://github.com/apache/mina/commit/440a9709ecb6ead75e5cbf1a57da53df1d7d50fe",
        "message": "Resolved issue: DIRMINA-337 (SwingChatClient example throws NPE)\n* Applied Maarten's patch\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@499278 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/21a5d9c378a3b447c3a4989655f0389496e98a8c",
        "file": [
            {
                "patch": "@@ -20,10 +20,10 @@\n package org.apache.mina.common.support;\n \n import java.net.SocketAddress;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.mina.common.CloseFuture;\n import org.apache.mina.common.IdleStatus;\n@@ -42,7 +42,8 @@\n  */\n public abstract class BaseIoSession implements IoSession\n {\n-    private final Map<String, Object> attributes = new HashMap<String, Object>();\n+    private final Object lock = new Object();\n+    private final Map<String,Object> attributes = new ConcurrentHashMap<String, Object>( );\n     private final long creationTime;\n \n     /** \n@@ -89,9 +90,12 @@ public boolean isConnected()\n         return !closeFuture.isClosed();\n     }\n     \n-    public synchronized boolean isClosing()\n+    public boolean isClosing()\n     {\n-        return closing || closeFuture.isClosed();\n+        synchronized( lock )\n+        {\n+            return closing || closeFuture.isClosed();\n+        }\n     }\n     \n     public CloseFuture getCloseFuture()\n@@ -101,7 +105,7 @@ public CloseFuture getCloseFuture()\n     \n     public CloseFuture close()\n     {\n-        synchronized( this )\n+        synchronized( lock )\n         {\n             if( isClosing() )\n             {\n@@ -134,7 +138,7 @@ public WriteFuture write( Object message )\n     \n     public WriteFuture write( Object message, SocketAddress remoteAddress )\n     {\n-        synchronized( this )\n+        synchronized( lock )\n         {\n             if( isClosing() || !isConnected() )\n             {\n@@ -163,31 +167,26 @@ protected void write0( WriteRequest writeRequest )\n     \n     public Object getAttachment()\n     {\n-        synchronized( attributes )\n-        {\n-            return attributes.get( \"\" );\n-        }\n+        return attributes.get( \"\" );\n     }\n \n     public Object setAttachment( Object attachment )\n     {\n-        synchronized( attributes )\n-        {\n-            return attributes.put( \"\", attachment );\n-        }\n+        return attributes.put( \"\", attachment );\n     }\n \n     public Object getAttribute( String key )\n     {\n-        synchronized( attributes )\n-        {\n-            return attributes.get( key );\n-        }\n+        return attributes.get( key );\n     }\n \n     public Object setAttribute( String key, Object value )\n     {\n-        synchronized( attributes )\n+        if( value == null )\n+        {\n+            return removeAttribute( key );\n+        }\n+        else\n         {\n             return attributes.put( key, value );\n         }\n@@ -200,10 +199,7 @@ public Object setAttribute( String key )\n     \n     public Object removeAttribute( String key )\n     {\n-        synchronized( attributes )\n-        {\n-            return attributes.remove( key );\n-        }\n+        return attributes.remove( key );\n     }\n     \n     public boolean containsAttribute( String key )\n@@ -213,10 +209,7 @@ public boolean containsAttribute( String key )\n \n     public Set<String> getAttributeKeys()\n     {\n-        synchronized( attributes )\n-        {\n-            return new HashSet<String>( attributes.keySet() );\n-        }\n+        return new HashSet<String>( attributes.keySet() );\n     }\n     \n     public int getIdleTime( IdleStatus status )",
                "additions": 20,
                "raw_url": "https://github.com/apache/mina/raw/21a5d9c378a3b447c3a4989655f0389496e98a8c/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "status": "modified",
                "changes": 47,
                "deletions": 27,
                "sha": "9b56e0c4a83541b29238644574981d05eac30bc3",
                "blob_url": "https://github.com/apache/mina/blob/21a5d9c378a3b447c3a4989655f0389496e98a8c/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "filename": "core/src/main/java/org/apache/mina/common/support/BaseIoSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/common/support/BaseIoSession.java?ref=21a5d9c378a3b447c3a4989655f0389496e98a8c"
            }
        ],
        "bug_id": "mina_19",
        "parent": "https://github.com/apache/mina/commit/ed42f6c907d2292ab1240a22cf1d6210e15a8082",
        "message": "Fixed issue: DIRMINA-357 (ConcurrentHashMap.put(key, null) throws an NPE effects BaseIOSession attachments/attributes)\n* setAttribute() redirects the call to removeAttribute() if the specified key is null.\n* Merged the changes in 1.1 to trunk\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@520209 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    },
    {
        "commit": "https://github.com/apache/mina/commit/d1667c18bddf6527aa8a920db7947489fcb4fe53",
        "file": [
            {
                "patch": "@@ -55,17 +55,35 @@\n     private final AttributeKey ENCODER = new AttributeKey(getClass(), \"encoder\");\n     private final AttributeKey DECODER = new AttributeKey(getClass(), \"decoder\");\n     private final AttributeKey DECODER_OUT = new AttributeKey(getClass(), \"decoderOut\");\n+    \n+    /** The factory responsible for creating the encoder and decoder */\n     private final ProtocolCodecFactory factory;\n \n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n+    /**\n+     * \n+     * Creates a new instance of ProtocolCodecFilter, associating a factory\n+     * for the creation of the encoder and decoder.\n+     *\n+     * @param factory The associated factory\n+     */\n     public ProtocolCodecFilter(ProtocolCodecFactory factory) {\n         if (factory == null) {\n             throw new NullPointerException(\"factory\");\n         }\n         this.factory = factory;\n     }\n \n+    \n+    /**\n+     * Creates a new instance of ProtocolCodecFilter, without any factory.\n+     * The encoder/decoder factory will be created as an inner class, using\n+     * the two parameters (encoder and decoder). \n+     * \n+     * @param encoder The class responsible for encoding the message\n+     * @param decoder The class responsible for decoding the message\n+     */\n     public ProtocolCodecFilter(final ProtocolEncoder encoder,\n             final ProtocolDecoder decoder) {\n         if (encoder == null) {\n@@ -75,6 +93,7 @@ public ProtocolCodecFilter(final ProtocolEncoder encoder,\n             throw new NullPointerException(\"decoder\");\n         }\n \n+        // Create the inner Factory based on the two parameters\n         this.factory = new ProtocolCodecFactory() {\n             public ProtocolEncoder getEncoder(IoSession session) {\n                 return encoder;\n@@ -86,6 +105,15 @@ public ProtocolDecoder getDecoder(IoSession session) {\n         };\n     }\n \n+    /**\n+     * Creates a new instance of ProtocolCodecFilter, without any factory.\n+     * The encoder/decoder factory will be created as an inner class, using\n+     * the two parameters (encoder and decoder), which are class names. Instances\n+     * for those classes will be created in this constructor.\n+     * \n+     * @param encoder The class responsible for encoding the message\n+     * @param decoder The class responsible for decoding the message\n+     */\n     public ProtocolCodecFilter(\n             final Class<? extends ProtocolEncoder> encoderClass,\n             final Class<? extends ProtocolDecoder> decoderClass) {\n@@ -116,6 +144,8 @@ public ProtocolCodecFilter(\n                     \"decoderClass doesn't have a public default constructor.\");\n         }\n \n+        // Create the inner Factory based on the two parameters. We instanciate\n+        // the encoder and decoder locally.\n         this.factory = new ProtocolCodecFactory() {\n             public ProtocolEncoder getEncoder(IoSession session) throws Exception {\n                 return encoderClass.newInstance();\n@@ -127,10 +157,23 @@ public ProtocolDecoder getDecoder(IoSession session) throws Exception {\n         };\n     }\n \n+    \n+    /**\n+     * Get the encoder instance from a given session.\n+     *\n+     * @param session The associated session we will get the encoder from\n+     * @return The encoder instance, if any\n+     */\n     public ProtocolEncoder getEncoder(IoSession session) {\n         return (ProtocolEncoder) session.getAttribute(ENCODER);\n     }\n \n+    /**\n+     * Get the decoder instance from a given session.\n+     *\n+     * @param session The associated session we will get the decoder from\n+     * @return The decoder instance\n+     */\n     public ProtocolDecoder getDecoder(IoSession session) {\n         return (ProtocolDecoder) session.getAttribute(DECODER);\n     }\n@@ -147,11 +190,27 @@ public void onPreAdd(IoFilterChain parent, String name,\n     @Override\n     public void onPostRemove(IoFilterChain parent, String name,\n             NextFilter nextFilter) throws Exception {\n+        // We just remove the two instances of encoder/decoder to release resources\n+        // from the session\n         disposeEncoder(parent.getSession());\n         disposeDecoder(parent.getSession());\n+        \n+        // We also remove the callback  \n         disposeDecoderOut(parent.getSession());\n     }\n \n+    /**\n+     * Process the incoming message, calling the session decoder. As the incoming\n+     * buffer might contains more than one messages, we have to loop until the decoder\n+     * throws an exception.\n+     * \n+     *  while ( buffer not empty )\n+     *    try \n+     *      decode ( buffer )\n+     *    catch\n+     *      break;\n+     *    \n+     */\n     @Override\n     public void messageReceived(NextFilter nextFilter, IoSession session,\n             Object message) throws Exception {\n@@ -161,17 +220,52 @@ public void messageReceived(NextFilter nextFilter, IoSession session,\n         }\n \n         IoBuffer in = (IoBuffer) message;\n-        ProtocolDecoder decoder = getDecoder0(session);\n+        ProtocolDecoder decoder = getDecoder(session);\n+        \n+        if ( decoder == null) {\n+            // The decoder must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot decode if the decoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n         ProtocolDecoderOutput decoderOut = getDecoderOut(session, nextFilter);\n+        \n+        if ( decoderOut == null) {\n+            // The decoderOut must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot decode if the decoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n \n+        // Loop until we don't have anymore byte in the buffer,\n+        // or until the decoder throws an unrecoverable exception or \n+        // can't decoder a message, because there are not enough \n+        // data in the buffer\n         while (in.hasRemaining()) {\n             int oldPos = in.position();\n             try {\n                 synchronized (decoderOut) {\n+                    // Call the decoder with the read bytes\n                     decoder.decode(session, in, decoderOut);\n                 }\n                 // Finish decoding if no exception was thrown.\n                 decoderOut.flush();\n+                \n+                // TODO :\n+                // here, we shouldn't break,\n+                // we should loop to decode the next portion of the buffer.\n                 break;\n             } catch (Throwable t) {\n                 ProtocolDecoderException pde;\n@@ -182,6 +276,7 @@ public void messageReceived(NextFilter nextFilter, IoSession session,\n                 }\n                 \n                 if (pde.getHexdump() == null) {\n+                    // Generate a message hex dump\n                     int curPos = in.position();\n                     in.position(oldPos);\n                     pde.setHexdump(in.getHexDump());\n@@ -197,7 +292,7 @@ public void messageReceived(NextFilter nextFilter, IoSession session,\n                 // We check buffer position additionally to prevent an\n                 // infinite loop.\n                 if (!(t instanceof RecoverableProtocolDecoderException) ||\n-                        in.position() == oldPos) {\n+                        (in.position() == oldPos)) {\n                     break;\n                 }\n             }\n@@ -224,37 +319,125 @@ public void messageSent(NextFilter nextFilter, IoSession session,\n     public void filterWrite(NextFilter nextFilter, IoSession session,\n             WriteRequest writeRequest) throws Exception {\n         Object message = writeRequest.getMessage();\n+        \n+        // Bypass the encoding if the message is contained in a ByteBuffer,\n+        // as it has already been encoded before\n         if (message instanceof IoBuffer || message instanceof FileRegion) {\n             nextFilter.filterWrite(session, writeRequest);\n             return;\n         }\n \n-        ProtocolEncoder encoder = getEncoder0(session);\n+        // Get the encoder in the session\n+        ProtocolEncoder encoder = getEncoder(session);\n+\n+        if ( encoder == null) {\n+            // The encoder must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot encode if the encoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n         ProtocolEncoderOutputImpl encoderOut = getEncoderOut(session,\n                 nextFilter, writeRequest);\n \n+        if ( encoderOut == null) {\n+            // The encoder must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot encode if the encoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n         try {\n+            // Now we can try to encode the response\n             encoder.encode(session, message, encoderOut);\n+            \n+            // Send it directly\n             encoderOut.flushWithoutFuture();\n+            \n+            // Call the next filter\n             nextFilter.filterWrite(session, new MessageWriteRequest(\n                     writeRequest));\n         } catch (Throwable t) {\n             ProtocolEncoderException pee;\n+            \n+            // Generate the correct exception\n             if (t instanceof ProtocolEncoderException) {\n                 pee = (ProtocolEncoderException) t;\n             } else {\n                 pee = new ProtocolEncoderException(t);\n             }\n+            \n             throw pee;\n         }\n     }\n+    \n+    /**\n+     * Associate a decoder and encoder instances to the newly created session.\n+     * <br>\n+     * <br>\n+     * In order to get the encoder and decoder crea\n+     * \n+     * @param nextFilter The next filter to invoke when having processed the current \n+     * method\n+     * @param session The newly created session\n+     * @throws Exception if we can't create instances of the decoder or encoder\n+     */\n+    @Override\n+    public void sessionCreated(NextFilter nextFilter, IoSession session) throws Exception {\n+        // Creates the decoder and stores it into the newly created session \n+        ProtocolDecoder decoder = factory.getDecoder(session);\n+        session.setAttribute(DECODER, decoder);\n+\n+        // Creates the encoder and stores it into the newly created session \n+        ProtocolEncoder encoder = factory.getEncoder(session);\n+        session.setAttribute(ENCODER, encoder);\n+\n+        // Call the next filter\n+        nextFilter.sessionCreated(session);\n+    }\n \n     @Override\n     public void sessionClosed(NextFilter nextFilter, IoSession session)\n             throws Exception {\n         // Call finishDecode() first when a connection is closed.\n-        ProtocolDecoder decoder = getDecoder0(session);\n+        ProtocolDecoder decoder = getDecoder(session);\n+        \n+        if ( decoder == null) {\n+            // The decoder must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot decode if the decoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n         ProtocolDecoderOutput decoderOut = getDecoderOut(session, nextFilter);\n+        \n+        if ( decoderOut == null) {\n+            // The decoder must not be null. It's null if\n+            // the sessionCreated message has not be called, for\n+            // instance if the filter has been added after the \n+            // first session is created.\n+            ProtocolDecoderException pde = new ProtocolDecoderException(\n+                \"Cannot decode if the decoder is null. Add the filter in the chain\" +\n+                \"before the first session is created\" ); \n+            nextFilter.exceptionCaught(session, pde);\n+            return;\n+        }\n+        \n         try {\n             decoder.finishDecode(session, decoderOut);\n         } catch (Throwable t) {\n@@ -276,31 +459,11 @@ public void sessionClosed(NextFilter nextFilter, IoSession session)\n         nextFilter.sessionClosed(session);\n     }\n \n-    private ProtocolEncoder getEncoder0(IoSession session) throws Exception {\n-        ProtocolEncoder encoder = (ProtocolEncoder) session\n-                .getAttribute(ENCODER);\n-        if (encoder == null) {\n-            encoder = factory.getEncoder(session);\n-            session.setAttribute(ENCODER, encoder);\n-        }\n-        return encoder;\n-    }\n-\n     private ProtocolEncoderOutputImpl getEncoderOut(IoSession session,\n             NextFilter nextFilter, WriteRequest writeRequest) {\n         return new ProtocolEncoderOutputImpl(session, nextFilter, writeRequest);\n     }\n \n-    private ProtocolDecoder getDecoder0(IoSession session) throws Exception {\n-        ProtocolDecoder decoder = (ProtocolDecoder) session\n-                .getAttribute(DECODER);\n-        if (decoder == null) {\n-            decoder = factory.getDecoder(session);\n-            session.setAttribute(DECODER, decoder);\n-        }\n-        return decoder;\n-    }\n-\n     private ProtocolDecoderOutput getDecoderOut(IoSession session,\n             NextFilter nextFilter) {\n         ProtocolDecoderOutput out = (ProtocolDecoderOutput) session.getAttribute(DECODER_OUT);",
                "additions": 187,
                "raw_url": "https://github.com/apache/mina/raw/d1667c18bddf6527aa8a920db7947489fcb4fe53/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "status": "modified",
                "changes": 211,
                "deletions": 24,
                "sha": "4da9146a76529edc9bb733c68c098300e1672aa0",
                "blob_url": "https://github.com/apache/mina/blob/d1667c18bddf6527aa8a920db7947489fcb4fe53/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "filename": "core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/core/src/main/java/org/apache/mina/filter/codec/ProtocolCodecFilter.java?ref=d1667c18bddf6527aa8a920db7947489fcb4fe53"
            },
            {
                "patch": "@@ -23,11 +23,15 @@\n \n import javax.net.ssl.SSLContext;\n \n+import org.apache.mina.core.filterchain.IoFilter;\n import org.apache.mina.core.future.ConnectFuture;\n import org.apache.mina.core.service.IoHandler;\n import org.apache.mina.core.session.IoSession;\n import org.apache.mina.example.echoserver.ssl.BogusSslContextFactory;\n import org.apache.mina.filter.ssl.SslFilter;\n+import org.apache.mina.filter.codec.ProtocolCodecFilter;\n+import org.apache.mina.filter.codec.textline.TextLineCodecFactory;\n+import org.apache.mina.filter.logging.LoggingFilter;\n import org.apache.mina.filter.logging.MdcInjectionFilter;\n import org.apache.mina.transport.socket.nio.NioSocketConnector;\n \n@@ -60,7 +64,14 @@ public boolean connect(NioSocketConnector connector, SocketAddress address,\n         }\n \n         try {\n+            IoFilter LOGGING_FILTER = new LoggingFilter();\n+\n+            IoFilter CODEC_FILTER = new ProtocolCodecFilter(\n+                    new TextLineCodecFactory());\n+            \n             connector.getFilterChain().addLast(\"mdc\", new MdcInjectionFilter());\n+            connector.getFilterChain().addLast(\"codec\", CODEC_FILTER);\n+            connector.getFilterChain().addLast(\"logger\", LOGGING_FILTER);\n \n             if (useSsl) {\n                 SSLContext sslContext = BogusSslContextFactory",
                "additions": 11,
                "raw_url": "https://github.com/apache/mina/raw/d1667c18bddf6527aa8a920db7947489fcb4fe53/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "status": "modified",
                "changes": 11,
                "deletions": 0,
                "sha": "f3249326ea47bcca94261e1ee0f4efa57ab55371",
                "blob_url": "https://github.com/apache/mina/blob/d1667c18bddf6527aa8a920db7947489fcb4fe53/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "filename": "example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/example/src/main/java/org/apache/mina/example/chat/client/ChatClientSupport.java?ref=d1667c18bddf6527aa8a920db7947489fcb4fe53"
            },
            {
                "patch": "@@ -19,14 +19,10 @@\n  */\n package org.apache.mina.example.chat.client;\n \n-import org.apache.mina.core.filterchain.IoFilter;\n import org.apache.mina.core.service.IoHandler;\n import org.apache.mina.core.service.IoHandlerAdapter;\n import org.apache.mina.core.session.IoSession;\n import org.apache.mina.example.chat.ChatCommand;\n-import org.apache.mina.filter.codec.ProtocolCodecFilter;\n-import org.apache.mina.filter.codec.textline.TextLineCodecFactory;\n-import org.apache.mina.filter.logging.LoggingFilter;\n \n /**\n  * {@link IoHandler} implementation of the client side of the simple chat protocol.\n@@ -50,23 +46,12 @@\n         void error(String message);\n     }\n \n-    private static final IoFilter LOGGING_FILTER = new LoggingFilter();\n-\n-    private static final IoFilter CODEC_FILTER = new ProtocolCodecFilter(\n-            new TextLineCodecFactory());\n-\n     private final Callback callback;\n \n     public SwingChatClientHandler(Callback callback) {\n         this.callback = callback;\n     }\n \n-    @Override\n-    public void sessionCreated(IoSession session) throws Exception {\n-        session.getFilterChain().addLast(\"codec\", CODEC_FILTER);\n-        session.getFilterChain().addLast(\"logger\", LOGGING_FILTER);\n-    }\n-\n     @Override\n     public void sessionOpened(IoSession session) throws Exception {\n         callback.connected();",
                "additions": 0,
                "raw_url": "https://github.com/apache/mina/raw/d1667c18bddf6527aa8a920db7947489fcb4fe53/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClientHandler.java",
                "status": "modified",
                "changes": 15,
                "deletions": 15,
                "sha": "cc907014fa4c6efe4a6886c6dc5aaa2769a44bb1",
                "blob_url": "https://github.com/apache/mina/blob/d1667c18bddf6527aa8a920db7947489fcb4fe53/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClientHandler.java",
                "filename": "example/src/main/java/org/apache/mina/example/chat/client/SwingChatClientHandler.java",
                "contents_url": "https://api.github.com/repos/apache/mina/contents/example/src/main/java/org/apache/mina/example/chat/client/SwingChatClientHandler.java?ref=d1667c18bddf6527aa8a920db7947489fcb4fe53"
            }
        ],
        "bug_id": "mina_20",
        "parent": "https://github.com/apache/mina/commit/3c35a90e45caa751d46d4fcab647819e0f34b0f1",
        "message": "o Added Javadoc and comments\no The encoder/decoder are now stored into the session, instead of being created on the fly.\no Added a sessionCreated() handler to create the encoder/decoder when the session is created\no Removed the useless getEncoder0() and getDecoder0() methods.\no Added defensive tests to avoid a NPE if the encoders/decoders are not present in the session\no The messageReceive() should loop until there are no more bytes to decode, instead of just getting out. Aded a TODO: check this part \no Modified the chat example to inject the codec filter before creating the session.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/trunk@694277 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mina"
    }
]