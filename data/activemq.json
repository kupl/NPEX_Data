{
    "activemq_0f59ecc": {
        "bug_id": "activemq_0f59ecc",
        "commit": "https://github.com/apache/activemq/commit/0f59ecc43341b23b63a2965e98f6031c48dfc89f",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/activemq/blob/0f59ecc43341b23b63a2965e98f6031c48dfc89f/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java?ref=0f59ecc43341b23b63a2965e98f6031c48dfc89f",
                "deletions": 19,
                "filename": "activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "patch": "@@ -54,7 +54,7 @@\n  * Connections. <p/> This class also implements QueueConnectionFactory and\n  * TopicConnectionFactory. You can use this connection to create both\n  * QueueConnections and TopicConnections.\n- * \n+ *\n  * @version $Revision: 1.9 $\n  * @see javax.jms.ConnectionFactory\n  */\n@@ -86,7 +86,7 @@\n     private boolean useRetroactiveConsumer;\n \n     JMSStatsImpl factoryStats = new JMSStatsImpl();\n-     \n+\n     static protected final Executor DEFAULT_CONNECTION_EXECUTOR = new ScheduledThreadPoolExecutor(5, new ThreadFactory() {\n             public Thread newThread(Runnable run) {\n                 Thread thread = new Thread(run);\n@@ -120,7 +120,7 @@ public ActiveMQConnectionFactory copy() {\n             throw new RuntimeException(\"This should never happen: \" + e, e);\n         }\n     }\n-    \n+\n     /**\n      * @param brokerURL\n      * @return\n@@ -237,7 +237,7 @@ protected ActiveMQConnection createActiveMQConnection(String userName, String pa\n             connection.setOptimizeAcknowledge(isOptimizeAcknowledge());\n             connection.setUseRetroactiveConsumer(isUseRetroactiveConsumer());\n             connection.setRedeliveryPolicy(getRedeliveryPolicy());\n-            \n+\n             transport.start();\n \n             if( clientID !=null )\n@@ -269,23 +269,23 @@ public String getBrokerURL() {\n     }\n     public void setBrokerURL(String brokerURL) {\n         this.brokerURL = createURI(brokerURL);\n-        \n+\n         // Use all the properties prefixed with 'jms.' to set the connection factory\n         // options.\n         if( this.brokerURL.getQuery() !=null ) {\n             // It might be a standard URI or...\n             try {\n-                \n+\n                 Map map = URISupport.parseQuery(this.brokerURL.getQuery());\n                 if( IntrospectionSupport.setProperties(this, map, \"jms.\") ) {\n                     this.brokerURL = URISupport.createRemainingURI(this.brokerURL, map);\n                 }\n-                \n+\n             } catch (URISyntaxException e) {\n             }\n-            \n+\n         } else {\n-            \n+\n             // It might be a composite URI.\n             try {\n                 CompositeData data = URISupport.parseComposite(this.brokerURL);\n@@ -360,7 +360,7 @@ public String getUserName() {\n     public void setUserName(String userName) {\n         this.userName = userName;\n     }\n-    \n+\n     public boolean isUseRetroactiveConsumer() {\n         return useRetroactiveConsumer;\n     }\n@@ -386,13 +386,13 @@ public void setRedeliveryPolicy(RedeliveryPolicy redeliveryPolicy) {\n     }\n \n     public void buildFromProperties(Properties properties) {\n-        \n+\n         if (properties == null) {\n             properties = new Properties();\n         }\n-        \n+\n         IntrospectionSupport.setProperties(this, properties);\n-        \n+\n         String temp = properties.getProperty(Context.PROVIDER_URL);\n         if (temp == null || temp.length() == 0) {\n             temp = properties.getProperty(\"brokerURL\");\n@@ -404,23 +404,37 @@ public void buildFromProperties(Properties properties) {\n \n     public void populateProperties(Properties props) {\n         props.setProperty(\"asyncDispatch\", Boolean.toString(isAsyncDispatch()));\n-        props.setProperty(Context.PROVIDER_URL, getBrokerURL());\n-        props.setProperty(\"brokerURL\", getBrokerURL());\n-        if (getClientID() != null)\n+\n+        if (getBrokerURL() != null) {\n+            props.setProperty(Context.PROVIDER_URL, getBrokerURL());\n+            props.setProperty(\"brokerURL\", getBrokerURL());\n+        }\n+\n+        if (getClientID() != null) {\n             props.setProperty(\"clientID\", getClientID());\n+        }\n+\n         props.setProperty(\"copyMessageOnSend\", Boolean.toString(isCopyMessageOnSend()));\n         props.setProperty(\"disableTimeStampsByDefault\", Boolean.toString(isDisableTimeStampsByDefault()));\n         props.setProperty(\"objectMessageSerializationDefered\", Boolean.toString(isObjectMessageSerializationDefered()));\n         props.setProperty(\"optimizedMessageDispatch\", Boolean.toString(isOptimizedMessageDispatch()));\n-        props.setProperty(\"password\", getPassword());\n+\n+        if (getPassword() != null) {\n+            props.setProperty(\"password\", getPassword());\n+        }\n+\n         props.setProperty(\"useAsyncSend\", Boolean.toString(isUseAsyncSend()));\n         props.setProperty(\"useCompression\", Boolean.toString(isUseCompression()));\n         props.setProperty(\"useRetroactiveConsumer\", Boolean.toString(isUseRetroactiveConsumer()));\n-        props.setProperty(\"userName\", getUserName());\n+\n+        if (getUserName() != null) {\n+            props.setProperty(\"userName\", getUserName());\n+        }\n+        \n         props.setProperty(\"closeTimeout\", Integer.toString(getCloseTimeout()));\n         props.setProperty(\"alwaysSessionAsync\", Boolean.toString(isAlwaysSessionAsync()));\n         props.setProperty(\"optimizeAcknowledge\", Boolean.toString(isOptimizeAcknowledge()));\n-        \n+\n     }\n \n     public boolean isUseCompression() {",
                "raw_url": "https://github.com/apache/activemq/raw/0f59ecc43341b23b63a2965e98f6031c48dfc89f/activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java",
                "sha": "39381a63a0da773552aa5abfb3f8de6c69fb1bda",
                "status": "modified"
            }
        ],
        "message": "- Added null checking during property set to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@416549 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/80bf2417f1452a5160f43d1ff28bf706025b4e8e",
        "repo": "activemq",
        "unit_tests": [
            "ActiveMQConnectionFactoryTest.java"
        ]
    },
    "activemq_1271d2e": {
        "bug_id": "activemq_1271d2e",
        "commit": "https://github.com/apache/activemq/commit/1271d2ea032f234e7c83301a52845ed001c5831a",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/activemq/blob/1271d2ea032f234e7c83301a52845ed001c5831a/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java?ref=1271d2ea032f234e7c83301a52845ed001c5831a",
                "deletions": 5,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "patch": "@@ -46,8 +46,9 @@\n     private String noSpaceMessage = \"space\";\n     private String sqlExceptionMessage = \"\"; // match all\n     private long resumeCheckSleepPeriod = 5*1000;\n-    private AtomicBoolean handlingException = new AtomicBoolean(false);\n+    private final AtomicBoolean handlingException = new AtomicBoolean(false);\n \n+    @Override\n     public void handle(IOException exception) {\n         if (ignoreAllErrors) {\n             LOG.info(\"Ignoring IO exception, \" + exception, exception);\n@@ -69,10 +70,17 @@ public void handle(IOException exception) {\n         if (ignoreSQLExceptions) {\n             Throwable cause = exception;\n             while (cause != null) {\n-                String message = cause.getMessage();\n-                if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {\n-                    LOG.info(\"Ignoring SQLException, \" + exception, cause);\n-                    return;\n+                if (cause instanceof SQLException) {\n+                    String message = cause.getMessage();\n+\n+                    if (message == null) {\n+                        message = \"\";\n+                    }\n+\n+                    if (message.contains(sqlExceptionMessage)) {\n+                        LOG.info(\"Ignoring SQLException, \" + exception, cause);\n+                        return;\n+                    }\n                 }\n                 cause = cause.getCause();\n             }\n@@ -83,6 +91,7 @@ public void handle(IOException exception) {\n                 LOG.info(\"Initiating stop/restart of transports on \" + broker + \" due to IO exception, \" + exception, exception);\n \n                 new Thread(\"IOExceptionHandler: stop transports\") {\n+                    @Override\n                     public void run() {\n                         try {\n                             ServiceStopper stopper = new ServiceStopper();\n@@ -93,6 +102,7 @@ public void run() {\n                         } finally {\n                             // resume again\n                             new Thread(\"IOExceptionHandler: restart transports\") {\n+                                @Override\n                                 public void run() {\n                                     try {\n                                         while (hasLockOwnership() && isPersistenceAdapterDown()) {\n@@ -154,6 +164,7 @@ private boolean isPersistenceAdapterDown() {\n     private void stopBroker(Exception exception) {\n         LOG.info(\"Stopping \" + broker + \" due to exception, \" + exception, exception);\n         new Thread(\"IOExceptionHandler: stopping \" + broker) {\n+            @Override\n             public void run() {\n                 try {\n                     if( broker.isRestartAllowed() ) {\n@@ -171,6 +182,7 @@ protected boolean hasLockOwnership() throws IOException {\n         return true;\n     }\n \n+    @Override\n     public void setBrokerService(BrokerService broker) {\n         this.broker = broker;\n     }",
                "raw_url": "https://github.com/apache/activemq/raw/1271d2ea032f234e7c83301a52845ed001c5831a/activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "sha": "bb4e0b2bc8d5f3e7c04869eb409197011e26078a",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-5758\n\nFix for potential NPE.",
        "parent": "https://github.com/apache/activemq/commit/6a2ffca57e72a92fa90eed578d9be15be59686a3",
        "repo": "activemq",
        "unit_tests": [
            "DefaultIOExceptionHandlerTest.java"
        ]
    },
    "activemq_229c634": {
        "bug_id": "activemq_229c634",
        "commit": "https://github.com/apache/activemq/commit/229c634a83a3f298e560f761e12c342af9794499",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq/blob/229c634a83a3f298e560f761e12c342af9794499/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java?ref=229c634a83a3f298e560f761e12c342af9794499",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java",
                "patch": "@@ -98,7 +98,9 @@ public RemoveTransactionAction(TransactionInfo info) {\n         public void onResponse(Command response) {\n             ConnectionId connectionId = info.getConnectionId();\n             ConnectionState cs = connectionStates.get(connectionId);\n-            cs.removeTransactionState(info.getTransactionId());\n+            if (cs != null) {\n+                cs.removeTransactionState(info.getTransactionId());\n+            }\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/activemq/raw/229c634a83a3f298e560f761e12c342af9794499/activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java",
                "sha": "6a1ca36323e54064befb39cf07dbcb8bb7c4ea07",
                "status": "modified"
            }
        ],
        "message": "AMQ-1719: Avoid potential NPE in connection state tracker.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1395272 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/7db7ed130b1dad9958b1b191e4cd0d1d8d3190de",
        "repo": "activemq",
        "unit_tests": [
            "ConnectionStateTrackerTest.java"
        ]
    },
    "activemq_2867249": {
        "bug_id": "activemq_2867249",
        "commit": "https://github.com/apache/activemq/commit/2867249482c65508a0a0d3071de930b4ee6a4558",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq/blob/2867249482c65508a0a0d3071de930b4ee6a4558/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java?ref=2867249482c65508a0a0d3071de930b4ee6a4558",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "patch": "@@ -19,10 +19,8 @@\n import java.io.IOException;\n import java.util.Iterator;\n import java.util.LinkedList;\n-\n import javax.jms.InvalidSelectorException;\n import javax.jms.JMSException;\n-\n import org.apache.activemq.broker.Broker;\n import org.apache.activemq.broker.ConnectionContext;\n import org.apache.activemq.command.ActiveMQDestination;\n@@ -34,9 +32,11 @@\n import org.apache.activemq.command.MessageDispatchNotification;\n import org.apache.activemq.memory.UsageManager;\n import org.apache.activemq.transaction.Synchronization;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public class TopicSubscription extends AbstractSubscription {\n-    \n+    private static final Log log = LogFactory.getLog(TopicSubscription.class);\n     final protected LinkedList matched = new LinkedList();\n     final protected ActiveMQDestination dlqDestination = new ActiveMQQueue(\"ActiveMQ.DLQ\");\n     final protected UsageManager usageManager;\n@@ -62,8 +62,9 @@ public void add(MessageReference node) throws InterruptedException, IOException\n \n                     // NOTE - be careful about the slaveBroker!\n                     if (maximumPendingMessages > 0) {\n+                        log.warn(\"discarding \" + (matched.size() - maximumPendingMessages) + \" messages for slow consumer\");\n                         // lets discard old messages as we are a slow consumer\n-                        while (matched.size() > maximumPendingMessages) {\n+                        while (!matched.isEmpty() && matched.size() > maximumPendingMessages) {\n                             MessageReference oldMessage = (MessageReference) matched.removeFirst();\n                             oldMessage.decrementReferenceCount();\n                         }",
                "raw_url": "https://github.com/apache/activemq/raw/2867249482c65508a0a0d3071de930b4ee6a4558/activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java",
                "sha": "2c8255c8f616f9e1d94c2e8e35b0188ebed8c19c",
                "status": "modified"
            }
        ],
        "message": "log when discarding messages - and ensure we don't get npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382692 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/057cde18f932a0ee1a579ae3b29531ec35b8cfce",
        "repo": "activemq",
        "unit_tests": [
            "TopicSubscriptionTest.java"
        ]
    },
    "activemq_2ae7169": {
        "bug_id": "activemq_2ae7169",
        "commit": "https://github.com/apache/activemq/commit/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq/blob/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "patch": "@@ -99,7 +99,9 @@ public void onCommand(Command command) {\n                 }\n                 \n             }\n-            transportListener.onCommand(command);\n+            if (transportListener != null) {\n+                transportListener.onCommand(command);\n+            }\n         }\n \n         public void onException(IOException error) {",
                "raw_url": "https://github.com/apache/activemq/raw/2ae71698560f5e493cd1a7e68bc1dda6e8ef9da8/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "sha": "681c9524ef15e421ec13f405a5144a724de0972f",
                "status": "modified"
            }
        ],
        "message": "removed possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@373809 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/c6f73c56d14591fe87c5e1aadfec273cf2ea6d3c",
        "repo": "activemq",
        "unit_tests": [
            "FailoverTransportTest.java"
        ]
    },
    "activemq_40ce55b": {
        "bug_id": "activemq_40ce55b",
        "commit": "https://github.com/apache/activemq/commit/40ce55be77effd7a07010cd04e8f9582ca4377eb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq/blob/40ce55be77effd7a07010cd04e8f9582ca4377eb/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=40ce55be77effd7a07010cd04e8f9582ca4377eb",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "patch": "@@ -79,6 +79,9 @@\n \n     private final TransportListener myTransportListener = new TransportListener() {\n         public void onCommand(Command command) {\n+            if (command == null) {\n+                return;\n+            }\n             if (command.isResponse()) {\n                 requestMap.remove(new Short(((Response) command).getCorrelationId()));\n             }",
                "raw_url": "https://github.com/apache/activemq/raw/40ce55be77effd7a07010cd04e8f9582ca4377eb/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "sha": "9eb5bd712a101f743782e668e224cfea92aaf628",
                "status": "modified"
            }
        ],
        "message": "added extra NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@372519 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/b2b1e80b86a377bcf1eb116e3f2fae45f6d99c52",
        "repo": "activemq",
        "unit_tests": [
            "FailoverTransportTest.java"
        ]
    },
    "activemq_5453b26": {
        "bug_id": "activemq_5453b26",
        "commit": "https://github.com/apache/activemq/commit/5453b26eb8e61c6ce626e3375421a687bbb84a00",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq/blob/5453b26eb8e61c6ce626e3375421a687bbb84a00/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=5453b26eb8e61c6ce626e3375421a687bbb84a00",
                "deletions": 6,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "patch": "@@ -2515,12 +2515,14 @@ private DestinationFilter getVirtualTopicConsumerDestinationFilter() {\n         // created at startup, so no sync needed\n         if (virtualConsumerDestinationFilter == null) {\n             Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();\n-            for (DestinationInterceptor interceptor : destinationInterceptors) {\n-                if (interceptor instanceof VirtualDestinationInterceptor) {\n-                    VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) interceptor;\n-                    for (VirtualDestination virtualDestination: virtualDestinationInterceptor.getVirtualDestinations()) {\n-                        if (virtualDestination instanceof VirtualTopic) {\n-                            consumerDestinations.add(new ActiveMQQueue(((VirtualTopic) virtualDestination).getPrefix() + DestinationFilter.ANY_DESCENDENT));\n+            if (destinationInterceptors != null) {\n+                for (DestinationInterceptor interceptor : destinationInterceptors) {\n+                    if (interceptor instanceof VirtualDestinationInterceptor) {\n+                        VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) interceptor;\n+                        for (VirtualDestination virtualDestination: virtualDestinationInterceptor.getVirtualDestinations()) {\n+                            if (virtualDestination instanceof VirtualTopic) {\n+                                consumerDestinations.add(new ActiveMQQueue(((VirtualTopic) virtualDestination).getPrefix() + DestinationFilter.ANY_DESCENDENT));\n+                            }\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/activemq/raw/5453b26eb8e61c6ce626e3375421a687bbb84a00/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "sha": "921845ce11b4d1af5ee7e7f6aa51ef75e08579a9",
                "status": "modified"
            }
        ],
        "message": "AMQ-4045: Fixed NPE in BrokerService.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1383856 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/13222cd4a4c8913a20ea742964a35f7167fbaf59",
        "repo": "activemq",
        "unit_tests": [
            "BrokerServiceTest.java"
        ]
    },
    "activemq_5f400b3": {
        "bug_id": "activemq_5f400b3",
        "commit": "https://github.com/apache/activemq/commit/5f400b3853aae9f5a581de99cc390a6bb330f47f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq/blob/5f400b3853aae9f5a581de99cc390a6bb330f47f/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=5f400b3853aae9f5a581de99cc390a6bb330f47f",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "patch": "@@ -1009,8 +1009,8 @@ void updateIndex(Transaction tx, KahaRemoveMessageCommand command, Location ackL\n                 MessageKeys keys = sd.orderIndex.remove(tx, sequenceId);\n                 if (keys != null) {\n                     sd.locationIndex.remove(tx, keys.location);\n-                }\n-                recordAckMessageReferenceLocation(ackLocation, keys.location);\n+                    recordAckMessageReferenceLocation(ackLocation, keys.location);\n+                }                \n             }\n         } else {\n             // In the topic case we need remove the message once it's been acked",
                "raw_url": "https://github.com/apache/activemq/raw/5f400b3853aae9f5a581de99cc390a6bb330f47f/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "sha": "fca4b76be3787838f24999f9bd65082431d25bf9",
                "status": "modified"
            }
        ],
        "message": "prevent npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@978813 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/f206a1bd11dfe8265faacfdbbb74113894069d28",
        "repo": "activemq",
        "unit_tests": [
            "MessageDatabaseTest.java"
        ]
    },
    "activemq_60bdfc0": {
        "bug_id": "activemq_60bdfc0",
        "commit": "https://github.com/apache/activemq/commit/60bdfc061cf3ced688a6b5aca9f00c4a3390312a",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/activemq/blob/60bdfc061cf3ced688a6b5aca9f00c4a3390312a/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=60bdfc061cf3ced688a6b5aca9f00c4a3390312a",
                "deletions": 7,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "patch": "@@ -107,7 +107,7 @@\n     protected static final String DURABLE_SUB_PREFIX = \"NC-DS_\";\n     protected final Transport localBroker;\n     protected final Transport remoteBroker;\n-    protected IdGenerator idGenerator;\n+    protected IdGenerator idGenerator = new IdGenerator();\n     protected final LongSequenceGenerator consumerIdGenerator = new LongSequenceGenerator();\n     protected ConnectionInfo localConnectionInfo;\n     protected ConnectionInfo remoteConnectionInfo;\n@@ -381,8 +381,6 @@ private void collectBrokerInfos() {\n             remoteBrokerName = remoteBrokerInfo.getBrokerName();\n             if (configuration.isUseBrokerNamesAsIdSeed()) {\n                 idGenerator = new IdGenerator(brokerService.getBrokerName() + \"->\" + remoteBrokerName);\n-            } else {\n-                idGenerator = new IdGenerator();\n             }\n         } catch (Throwable e) {\n             serviceLocalException(e);\n@@ -433,10 +431,15 @@ private void doStartLocalAndRemoteBridges() {\n     }\n \n     private void startLocalBridge() throws Throwable {\n-        if (localBridgeStarted.compareAndSet(false, true)) {\n+        if (!bridgeFailed.get() && localBridgeStarted.compareAndSet(false, true)) {\n             synchronized (this) {\n                 LOG.trace(\"{} starting local Bridge, localBroker={}\", configuration.getBrokerName(), localBroker);\n                 if (!disposed.get()) {\n+\n+                    if (idGenerator == null) {\n+                        throw new IllegalStateException(\"Id Generator cannot be null\");\n+                    }\n+\n                     localConnectionInfo = new ConnectionInfo();\n                     localConnectionInfo.setConnectionId(new ConnectionId(idGenerator.generateId()));\n                     localClientId = configuration.getName() + \"_\" + remoteBrokerName + \"_inbound_\" + configuration.getBrokerName();\n@@ -518,7 +521,7 @@ private void startLocalBridge() throws Throwable {\n     }\n \n     protected void startRemoteBridge() throws Exception {\n-        if (remoteBridgeStarted.compareAndSet(false, true)) {\n+        if (!bridgeFailed.get() && remoteBridgeStarted.compareAndSet(false, true)) {\n             LOG.trace(\"{} starting remote Bridge, remoteBroker={}\", configuration.getBrokerName(), remoteBroker);\n             synchronized (this) {\n                 if (!isCreatedByDuplex()) {\n@@ -810,8 +813,8 @@ public void run() {\n         } else if (data.getClass() == RemoveSubscriptionInfo.class) {\n             RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);\n             SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());\n-            for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {\n-                DemandSubscription ds = (DemandSubscription) i.next();\n+            for (Iterator<DemandSubscription> i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {\n+                DemandSubscription ds = i.next();\n                 boolean removed = ds.getDurableRemoteSubs().remove(subscriptionInfo);\n                 if (removed) {\n                     if (ds.getDurableRemoteSubs().isEmpty()) {",
                "raw_url": "https://github.com/apache/activemq/raw/60bdfc061cf3ced688a6b5aca9f00c4a3390312a/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "sha": "f61c5ac56bf014aba0b9ff30d3cd0deb1fbb7765",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-5315\n\nFix for possible NPE during start with immediate bridge failure.",
        "parent": "https://github.com/apache/activemq/commit/bbc039fceb85239667563f8c852db6ed016b73f8",
        "repo": "activemq",
        "unit_tests": [
            "DemandForwardingBridgeSupportTest.java"
        ]
    },
    "activemq_703b7b1": {
        "bug_id": "activemq_703b7b1",
        "commit": "https://github.com/apache/activemq/commit/703b7b151017fe117363e5598146e157bad78265",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq/blob/703b7b151017fe117363e5598146e157bad78265/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java?ref=703b7b151017fe117363e5598146e157bad78265",
                "deletions": 0,
                "filename": "activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java",
                "patch": "@@ -231,6 +231,10 @@ public int compare(DestinationMapEntry entry1, DestinationMapEntry entry2) {\n     @SuppressWarnings(\"rawtypes\")\n     //Used to filter out any child/unmatching entries\n     private boolean isMatchOrParent(final ActiveMQDestination destination, final DestinationMapEntry entry) {\n+        //If destination not set then do not filter out\n+        if (entry.getDestination() == null) {\n+            return true;\n+        }\n         final DestinationFilter filter = DestinationFilter.parseFilter(entry.getDestination());\n         return destination.equals(entry.getDestination()) || filter.matches(destination);\n     }",
                "raw_url": "https://github.com/apache/activemq/raw/703b7b151017fe117363e5598146e157bad78265/activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java",
                "sha": "624b10fa7e3a1cc4e27d6acb9bea9b87efa2d09c",
                "status": "modified"
            }
        ],
        "message": "AMQ-6901 - Add NPE check inside DestinationMap filter",
        "parent": "https://github.com/apache/activemq/commit/2ce1c1352fb64ecf1d3018e2b0f7cabeba99b589",
        "repo": "activemq",
        "unit_tests": [
            "DestinationMapTest.java"
        ]
    },
    "activemq_71e228f": {
        "bug_id": "activemq_71e228f",
        "commit": "https://github.com/apache/activemq/commit/71e228fe92248fb06b5ac09720580754221a6ebf",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq/blob/71e228fe92248fb06b5ac09720580754221a6ebf/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java?ref=71e228fe92248fb06b5ac09720580754221a6ebf",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "patch": "@@ -51,7 +51,8 @@ public void handle(IOException exception) {\n         if (ignoreNoSpaceErrors) {\n             Throwable cause = exception;\n             while (cause != null && cause instanceof IOException) {\n-                if (cause.getMessage().contains(noSpaceMessage)) {\n+                String message = cause.getMessage();\n+                if (message != null && message.contains(noSpaceMessage)) {\n                     LOG.info(\"Ignoring no space left exception, \" + exception, exception);\n                     return;\n                 }\n@@ -62,7 +63,8 @@ public void handle(IOException exception) {\n         if (ignoreSQLExceptions) {\n             Throwable cause = exception;\n             while (cause != null) {\n-                if (cause instanceof SQLException && cause.getMessage().contains(sqlExceptionMessage)) {\n+                String message = cause.getMessage();\n+                if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {\n                     LOG.info(\"Ignoring SQLException, \" + exception, cause);\n                     return;\n                 }",
                "raw_url": "https://github.com/apache/activemq/raw/71e228fe92248fb06b5ac09720580754221a6ebf/activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java",
                "sha": "23a5da17033dce14e8ef064fab1dd31880127d0d",
                "status": "modified"
            }
        ],
        "message": "fix for NPE: https://issues.apache.org/jira/browse/AMQ-3649\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1231081 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/0e95460e0af4dc7f857dfe1a13559f31bc019207",
        "repo": "activemq",
        "unit_tests": [
            "DefaultIOExceptionHandlerTest.java"
        ]
    },
    "activemq_89d6fd0": {
        "bug_id": "activemq_89d6fd0",
        "commit": "https://github.com/apache/activemq/commit/89d6fd0a802d9b58306503dcd1d52c8b15ed169d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq/blob/89d6fd0a802d9b58306503dcd1d52c8b15ed169d/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java?ref=89d6fd0a802d9b58306503dcd1d52c8b15ed169d",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java",
                "patch": "@@ -130,7 +130,11 @@ public boolean isMarshallAware() {\n     }\n \n     public String toString() {\n-        return \"PartialCommand[id: \" + commandId + \" data: \" + data.length + \" byte(s)]\";\n+        int size = 0;\n+        if (data != null) {\n+            size = data.length;\n+        }\n+        return \"PartialCommand[id: \" + commandId + \" data: \" + size + \" byte(s)]\";\n     }\n     \n     ",
                "raw_url": "https://github.com/apache/activemq/raw/89d6fd0a802d9b58306503dcd1d52c8b15ed169d/activemq-core/src/main/java/org/apache/activemq/command/PartialCommand.java",
                "sha": "dfdc8c981a94c3eb1de34ffe8d9cacb1f04f1445",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@400057 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/ac132020078ea98b0421edd9d8ba315561904e5b",
        "repo": "activemq",
        "unit_tests": [
            "PartialCommandTest.java"
        ]
    },
    "activemq_8ad6fd3": {
        "bug_id": "activemq_8ad6fd3",
        "commit": "https://github.com/apache/activemq/commit/8ad6fd36a1a285e37d5e910a1c43994af2100fd5",
        "file": [
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/activemq/blob/8ad6fd36a1a285e37d5e910a1c43994af2100fd5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "changes": 175,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=8ad6fd36a1a285e37d5e910a1c43994af2100fd5",
                "deletions": 76,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.activemq.advisory.AdvisoryBroker;\n import org.apache.activemq.broker.ft.MasterConnector;\n import org.apache.activemq.broker.jmx.BrokerView;\n-import org.apache.activemq.broker.jmx.BrokerViewMBean;\n import org.apache.activemq.broker.jmx.ConnectorView;\n import org.apache.activemq.broker.jmx.ConnectorViewMBean;\n import org.apache.activemq.broker.jmx.FTConnectorView;\n@@ -96,6 +95,7 @@\n     private String brokerName = \"localhost\";\n     private File dataDirectory;\n     private Broker broker;\n+    private BrokerView adminView;\n     private ManagementContext managementContext;\n     private ObjectName brokerObjectName;\n     private TaskRunnerFactory taskRunnerFactory;\n@@ -121,7 +121,6 @@\n     private AtomicBoolean started = new AtomicBoolean(false);\n     private BrokerPlugin[] plugins;\n     private boolean keepDurableSubsActive=true;\n-\n     private BrokerId brokerId;\n \n     /**\n@@ -426,13 +425,15 @@ public void stop() throws Exception {\n \n         if (isUseJmx()) {\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            for (Iterator iter = registeredMBeanNames.iterator(); iter.hasNext();) {\n-                ObjectName name = (ObjectName) iter.next();\n-                try {\n-                    mbeanServer.unregisterMBean(name);\n-                }\n-                catch (Exception e) {\n-                    stopper.onException(mbeanServer, e);\n+            if (mbeanServer != null) {\n+                for (Iterator iter = registeredMBeanNames.iterator(); iter.hasNext();) {\n+                    ObjectName name = (ObjectName) iter.next();\n+                    try {\n+                        mbeanServer.unregisterMBean(name);\n+                    }\n+                    catch (Exception e) {\n+                        stopper.onException(mbeanServer, e);\n+                    }\n                 }\n             }\n             stopper.stop(getManagementContext());\n@@ -445,6 +446,10 @@ public void stop() throws Exception {\n \n     // Properties\n     // -------------------------------------------------------------------------\n+    \n+    /**\n+     * Returns the message broker\n+     */\n     public Broker getBroker() throws Exception {\n         if (broker == null) {\n             log.info(\"ActiveMQ \" + ActiveMQConnectionMetaData.PROVIDER_VERSION + \" JMS Message Broker (\"\n@@ -455,6 +460,24 @@ public Broker getBroker() throws Exception {\n         return broker;\n     }\n \n+    \n+    /**\n+     * Returns the administration view of the broker; used to create and destroy resources such as queues and topics.\n+     * \n+     * Note this method returns null if JMX is disabled.\n+     */\n+    public BrokerView getAdminView() throws Exception {\n+        if (adminView == null) {\n+            // force lazy creation\n+            getBroker();\n+        }\n+        return adminView;\n+    }\n+\n+    public void setAdminView(BrokerView adminView) {\n+        this.adminView = adminView;\n+    }\n+\n     public String getBrokerName() {\n         return brokerName;\n     }\n@@ -774,84 +797,82 @@ protected void processHelperProperties() throws Exception {\n \n     protected void registerConnectorMBean(TransportConnector connector, ObjectName objectName) throws IOException, URISyntaxException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        ConnectorViewMBean view = new ConnectorView(connector);\n-        try {\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            ConnectorViewMBean view = new ConnectorView(connector);\n+            try {\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n \n     protected void registerNetworkConnectorMBean(NetworkConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        NetworkConnectorViewMBean view = new NetworkConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=NetworkConnector,\"+\n-                    \"NetworkConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            NetworkConnectorViewMBean view = new NetworkConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=NetworkConnector,\" + \"NetworkConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n \n     protected void registerProxyConnectorMBean(ProxyConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        ProxyConnectorView view = new ProxyConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=ProxyConnector,\"+\n-                    \"ProxyConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            ProxyConnectorView view = new ProxyConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=ProxyConnector,\" + \"ProxyConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n-    \n+\n     protected void registerFTConnectorMBean(MasterConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        FTConnectorView view = new FTConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=MasterConnector\"\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            FTConnectorView view = new FTConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=MasterConnector\");\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n-    \n+\n     protected void registerJmsConnectorMBean(JmsConnector connector) throws IOException {\n         MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-        JmsConnectorView view = new JmsConnectorView(connector);\n-        try {\n-        \tObjectName objectName = new ObjectName(\n-            \t\tmanagementContext.getJmxDomainName()+\":\"+\n-            \t\t\"BrokerName=\"+JMXSupport.encodeObjectNamePart(getBrokerName())+\",\"+\n-            \t\t\"Type=JmsConnector,\"+\n-                    \"JmsConnectorName=\"+JMXSupport.encodeObjectNamePart(connector.getName())\n-            \t\t);\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n-        }\n-        catch (Throwable e) {\n-            throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+        if (mbeanServer != null) {\n+            JmsConnectorView view = new JmsConnectorView(connector);\n+            try {\n+                ObjectName objectName = new ObjectName(managementContext.getJmxDomainName() + \":\" + \"BrokerName=\"\n+                        + JMXSupport.encodeObjectNamePart(getBrokerName()) + \",\" + \"Type=JmsConnector,\" + \"JmsConnectorName=\"\n+                        + JMXSupport.encodeObjectNamePart(connector.getName()));\n+                mbeanServer.registerMBean(view, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n+            catch (Throwable e) {\n+                throw IOExceptionSupport.create(\"Broker could not be registered in JMX: \" + e.getMessage(), e);\n+            }\n         }\n     }\n     \n@@ -882,11 +903,13 @@ public void stop() throws Exception {\n         if (isUseJmx()) {\n             ManagedRegionBroker managedBroker = (ManagedRegionBroker) regionBroker;\n             managedBroker.setContextBroker(broker);\n-            BrokerViewMBean view = new BrokerView(this, managedBroker);\n+            adminView = new BrokerView(this, managedBroker);\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            ObjectName objectName = getBrokerObjectName();\n-            mbeanServer.registerMBean(view, objectName);\n-            registeredMBeanNames.add(objectName);\n+            if (mbeanServer != null) {\n+                ObjectName objectName = getBrokerObjectName();\n+                mbeanServer.registerMBean(adminView, objectName);\n+                registeredMBeanNames.add(objectName);\n+            }\n         }\n         \n \n@@ -908,8 +931,8 @@ protected Broker createRegionBroker() throws Exception {\n \t\tRegionBroker regionBroker = null;\n         if (isUseJmx()) {\n             MBeanServer mbeanServer = getManagementContext().getMBeanServer();\n-            regionBroker = new ManagedRegionBroker(this,mbeanServer, getBrokerObjectName(),\n-                    getTaskRunnerFactory(), getMemoryManager(), getPersistenceAdapter());\n+            regionBroker = new ManagedRegionBroker(this, mbeanServer, getBrokerObjectName(), getTaskRunnerFactory(), getMemoryManager(),\n+                    getPersistenceAdapter());\n         }\n         else {\n \t\t\tregionBroker = new RegionBroker(this,getTaskRunnerFactory(), getMemoryManager(), getPersistenceAdapter());\n@@ -1068,7 +1091,7 @@ protected void startAllConnectors() throws Exception{\n                 JmsConnector connector = (JmsConnector) iter.next();\n                 connector.start();\n             }\n-            }\n+        }\n     }\n \n     protected void startTransportConnector(TransportConnector connector) throws Exception {",
                "raw_url": "https://github.com/apache/activemq/raw/8ad6fd36a1a285e37d5e910a1c43994af2100fd5/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "sha": "f5dee5923a2126d813aeadb10ae08124709c1003",
                "status": "modified"
            }
        ],
        "message": "added a helper method to make it easier to work with the admin view together with fixed some NPEs I was getting when redeploying ActiveMQ when using mvn jetty6:run\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@396892 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/73f0e97531cdd9b596222e26fa256c66af1982df",
        "repo": "activemq",
        "unit_tests": [
            "BrokerServiceTest.java"
        ]
    },
    "activemq_8f02ba6": {
        "bug_id": "activemq_8f02ba6",
        "commit": "https://github.com/apache/activemq/commit/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/activemq/blob/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java?ref=8f02ba6a53bf09e452a0a0bb64ae0acc7599d180",
                "deletions": 3,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "patch": "@@ -285,9 +285,17 @@ public void onStopped(TransportConnection connection) {\n         connections.remove(connection);\n     }\n \n-    public String getName() {\n-        if( name == null ) {\n-            name = server.getConnectURI().toString();\n+    public String getName(){\n+        if(name==null){\n+            if(server!=null){\n+                if(server.getConnectURI()!=null){\n+                    name=server.getConnectURI().toString();\n+                }else{\n+                    name = server.getClass() + \":Not started\";\n+                }\n+            }else{\n+                name = \"NOT_SET\";\n+            }\n         }\n         return name;\n     }",
                "raw_url": "https://github.com/apache/activemq/raw/8f02ba6a53bf09e452a0a0bb64ae0acc7599d180/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "sha": "920207ce3f5795eb4287214bb0fddf94d759a498",
                "status": "modified"
            }
        ],
        "message": "fix for NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@390411 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/d68fe55933b51b55ff53e37c3729883549e5e3f9",
        "repo": "activemq",
        "unit_tests": [
            "TransportConnectorTest.java"
        ]
    },
    "activemq_9a491bb": {
        "bug_id": "activemq_9a491bb",
        "commit": "https://github.com/apache/activemq/commit/9a491bbc7667a70a7d75364fcd854b96b6a27352",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq/blob/9a491bbc7667a70a7d75364fcd854b96b6a27352/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java?ref=9a491bbc7667a70a7d75364fcd854b96b6a27352",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java",
                "patch": "@@ -77,6 +77,7 @@\n     public HashIndex(File directory, String name, IndexManager indexManager) throws IOException {\n         this.directory = directory;\n         this.name = name;\n+        this.indexManager = indexManager;\n         openIndexFile();\n         pageCache = new LRUCache<Long, HashPage>(pageCacheSize, pageCacheSize, 0.75f, true);\n     }\n@@ -176,7 +177,6 @@ public synchronized boolean isTransient() {\n \n     public synchronized void load() {\n         if (loaded.compareAndSet(false, true)) {\n-            this.indexManager = indexManager;\n             int capacity = 1;\n             while (capacity < numberOfBins) {\n                 capacity <<= 1;",
                "raw_url": "https://github.com/apache/activemq/raw/9a491bbc7667a70a7d75364fcd854b96b6a27352/activemq-core/src/main/java/org/apache/activemq/kaha/impl/index/hash/HashIndex.java",
                "sha": "90f95995004851fcf3c6a98a53376e3fcd4ad0c9",
                "status": "modified"
            }
        ],
        "message": "Fix for https://issues.apache.org/activemq/browse/AMQ-1485\nFix npe for above\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@591145 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/30fe17834cdb3ae578738208e1927bc78ac30e9b",
        "repo": "activemq",
        "unit_tests": [
            "HashIndexTest.java"
        ]
    },
    "activemq_9d0ca02": {
        "bug_id": "activemq_9d0ca02",
        "commit": "https://github.com/apache/activemq/commit/9d0ca025fa42a61a7da99086114672fc606e690c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq/blob/9d0ca025fa42a61a7da99086114672fc606e690c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java?ref=9d0ca025fa42a61a7da99086114672fc606e690c",
                "deletions": 1,
                "filename": "activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java",
                "patch": "@@ -32,6 +32,7 @@\n import javax.resource.spi.work.WorkManager;\n \n import org.apache.activemq.ActiveMQSession;\n+import org.apache.activemq.TransactionContext;\n import org.apache.activemq.ActiveMQSession.DeliveryListener;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -215,7 +216,8 @@ public void afterDelivery(ActiveMQSession session, Message msg) {\n             } catch (Throwable e) {\n                 throw new RuntimeException(\"Endpoint after delivery notification failure\", e);\n             } finally {\n-                if( session.getTransactionContext().isInLocalTransaction() ) {\n+                TransactionContext transactionContext = session.getTransactionContext();\n+                if( transactionContext != null && transactionContext.isInLocalTransaction() ) {\n                     if( !useRAManagedTx ) {\n                         // Sanitiy Check: If the local transaction has not been commited..\n                         // Commit it now.",
                "raw_url": "https://github.com/apache/activemq/raw/9d0ca025fa42a61a7da99086114672fc606e690c/activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java",
                "sha": "c8b1dba54a73ca47d43c805b4f03fc3367477608",
                "status": "modified"
            }
        ],
        "message": "fix for AMQ-689 to deal with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@408636 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/e0692dd265c2cdc453e9973e03a2e8ec9d8fb7f5",
        "repo": "activemq",
        "unit_tests": [
            "ServerSessionImplTest.java"
        ]
    },
    "activemq_aec047d": {
        "bug_id": "activemq_aec047d",
        "commit": "https://github.com/apache/activemq/commit/aec047d08b0a249ec0a99444c116d4aa91c60814",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq/blob/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java?ref=aec047d08b0a249ec0a99444c116d4aa91c60814",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "patch": "@@ -784,6 +784,10 @@ public void execute(Transaction tx) throws Exception {\n                         MessageOrderCursor moc = sd.subscriptionCursors.get(subscriptionKey);\n                         if (moc == null) {\n                             LastAck pos = sd.subscriptionAcks.get(tx, subscriptionKey);\n+                            if (pos == null) {\n+                                // sub deleted\n+                                return;\n+                            }\n                             sd.orderIndex.setBatch(tx, pos);\n                             moc = sd.orderIndex.cursor;\n                         } else {",
                "raw_url": "https://github.com/apache/activemq/raw/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "sha": "6d7a41c58cc0a9a527076d8b19e939604e5d576b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq/blob/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=aec047d08b0a249ec0a99444c116d4aa91c60814",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "patch": "@@ -1314,7 +1314,7 @@ public LastAck() {\n \n         public LastAck(long ackLocation) {\n             this.lastAckedSequence = ackLocation;\n-            this.priority = MessageOrderIndex.HI;\n+            this.priority = MessageOrderIndex.LO;\n         }\n \n         public LastAck(long ackLocation, byte priority) {\n@@ -2207,7 +2207,7 @@ MessageKeys get(Transaction tx, Long key) throws IOException {\n                     result = lowPriorityIndex.get(tx, key);\n                     lastGetPriority = LO;\n                 } else {\n-                  lastGetPriority = HI;\n+                    lastGetPriority = HI;\n                 }\n             } else {\n                 lastGetPriority = DEF;",
                "raw_url": "https://github.com/apache/activemq/raw/aec047d08b0a249ec0a99444c116d4aa91c60814/activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "sha": "87e94cbe7d16892f1612625faa586ecc602493a8",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/activemq/browse/AMQ-2985 - fix npe on remove consumer track new consumer last ack at lowest priority such that there can be no replay\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1038643 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/d6ad7c7cd0a2101b9a1160bd8ea7d906437fef10",
        "repo": "activemq",
        "unit_tests": [
            "MessageDatabaseTest.java"
        ]
    },
    "activemq_bf59b7d": {
        "bug_id": "activemq_bf59b7d",
        "commit": "https://github.com/apache/activemq/commit/bf59b7d70f7552053cfecb66db64658a314ae32c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java",
                "patch": "@@ -133,6 +133,9 @@ public synchronized void reset() {\n     @Override\n     public synchronized void release() {\n         iterating = false;\n+        if (iter instanceof DiskIterator) {\n+           ((DiskIterator)iter).release();\n+        };\n         if (flushRequired) {\n             flushRequired = false;\n             if (!hasSpace()) {\n@@ -417,7 +420,7 @@ protected synchronized void expireOldMessages() {\n     }\n \n     protected synchronized void flushToDisk() {\n-        if (!memoryList.isEmpty()) {\n+        if (!memoryList.isEmpty() && store != null) {\n             long start = 0;\n              if (LOG.isTraceEnabled()) {\n                 start = System.currentTimeMillis();\n@@ -483,7 +486,7 @@ protected Message getMessage(ByteSequence bs) throws IOException {\n     }\n \n     final class DiskIterator implements Iterator<MessageReference> {\n-        private final Iterator<PListEntry> iterator;\n+        private final PList.PListIterator iterator;\n         DiskIterator() {\n             try {\n                 iterator = getDiskList().iterator();\n@@ -510,5 +513,8 @@ public void remove() {\n             iterator.remove();\n         }\n \n+        public void release() {\n+            iterator.release();\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java",
                "sha": "1eb5591531c69cd5b473dbed3af2235377f1dc20",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 7,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java",
                "patch": "@@ -26,7 +26,6 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.kahadb.index.ListIndex;\n-import org.apache.kahadb.index.ListNode;\n import org.apache.kahadb.journal.Location;\n import org.apache.kahadb.page.Transaction;\n import org.apache.kahadb.util.ByteSequence;\n@@ -58,11 +57,11 @@ public String getName() {\n     }\n \n     void read(DataInput in) throws IOException {\n-        this.headPageId = in.readLong();\n+        setHeadPageId(in.readLong());\n     }\n \n     public void write(DataOutput out) throws IOException {\n-        out.writeLong(this.headPageId);\n+        out.writeLong(getHeadPageId());\n     }\n \n     public synchronized void destroy() throws IOException {\n@@ -185,17 +184,19 @@ public boolean isEmpty() {\n         return size() == 0;\n     }\n \n-    synchronized public Iterator<PListEntry> iterator() throws IOException {\n+    public PListIterator iterator() throws IOException {\n         return new PListIterator();\n     }\n \n-    private final class PListIterator implements Iterator<PListEntry> {\n+    public final class PListIterator implements Iterator<PListEntry> {\n         final Iterator<Map.Entry<String, Location>> iterator;\n         final Transaction tx;\n \n         PListIterator() throws IOException {\n             tx = store.pageFile.tx();\n-            this.iterator = iterator(tx);\n+            synchronized (indexLock) {\n+                this.iterator = iterator(tx);\n+            }\n         }\n \n         @Override\n@@ -234,6 +235,16 @@ public void execute(Transaction tx) throws IOException {\n                 throw e;\n             }\n         }\n+\n+        public void release() {\n+            try {\n+                tx.rollback();\n+            } catch (IOException unexpected) {\n+                IllegalStateException e = new IllegalStateException(unexpected);\n+                e.initCause(unexpected);\n+                throw e;\n+            }\n+        }\n     }\n \n     public void claimFileLocations(final Set<Integer> candidates) throws IOException {\n@@ -254,6 +265,6 @@ public void execute(Transaction tx) throws IOException {\n \n     @Override\n     public String toString() {\n-        return \"\" + name + \",[headPageId=\" + headPageId  + \",tailPageId=\" + tailPageId + \", size=\" + size() + \"]\";\n+        return name + \"[headPageId=\" + getHeadPageId()  + \",tailPageId=\" + getTailPageId() + \", size=\" + size() + \"]\";\n     }\n }",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java",
                "sha": "84cd503f71f45720c66b3a6ee816c4e720a8459c",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 4,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java",
                "patch": "@@ -76,6 +76,7 @@\n     private int indexPageSize = PageFile.DEFAULT_PAGE_SIZE;\n     private int indexCacheSize = PageFile.DEFAULT_PAGE_CACHE_SIZE;\n     private int indexWriteBatchSize = PageFile.DEFAULT_WRITE_BATCH_SIZE;\n+    private boolean indexEnablePageCaching = true;\n \n     public Object getIndexLock() {\n         return indexLock;\n@@ -110,6 +111,14 @@ public void setIndexWriteBatchSize(int indexWriteBatchSize) {\n         this.indexWriteBatchSize = indexWriteBatchSize;\n     }\n \n+    public boolean getIndexEnablePageCaching() {\n+        return indexEnablePageCaching;\n+    }\n+\n+    public void setIndexEnablePageCaching(boolean indexEnablePageCaching) {\n+        this.indexEnablePageCaching = indexEnablePageCaching;\n+    }\n+\n     protected class MetaData {\n         protected MetaData(PListStore store) {\n             this.store = store;\n@@ -223,10 +232,10 @@ public void execute(Transaction tx) throws IOException {\n                     result = pl;\n                     this.persistentLists.put(name, pl);\n                 }\n-                final PList load = result;\n+                final PList toLoad = result;\n                 getPageFile().tx().execute(new Transaction.Closure<IOException>() {\n                     public void execute(Transaction tx) throws IOException {\n-                        load.load(tx);\n+                        toLoad.load(tx);\n                     }\n                 });\n \n@@ -269,6 +278,7 @@ protected synchronized void intialize() throws Exception {\n                 this.journal.setWriteBatchSize(getJournalMaxWriteBatchSize());\n                 this.journal.start();\n                 this.pageFile = new PageFile(directory, \"tmpDB\");\n+                this.pageFile.setEnablePageCaching(getIndexEnablePageCaching());\n                 this.pageFile.setPageSize(getIndexPageSize());\n                 this.pageFile.setWriteBatchSize(getIndexWriteBatchSize());\n                 this.pageFile.setPageCacheSize(getIndexCacheSize());\n@@ -340,12 +350,21 @@ protected synchronized void doStop(ServiceStopper stopper) throws Exception {\n \n     public void run() {\n         try {\n+            final int lastJournalFileId = journal.getLastAppendLocation().getDataFileId();\n             final Set<Integer> candidates = journal.getFileMap().keySet();\n             LOG.trace(\"Full gc candidate set:\" + candidates);\n             if (candidates.size() > 1) {\n+                // prune current write\n+                for (Iterator<Integer> iterator = candidates.iterator(); iterator.hasNext();) {\n+                    if (iterator.next() >= lastJournalFileId) {\n+                        iterator.remove();\n+                    }\n+                }\n                 List<PList> plists = null;\n-                synchronized (this) {\n-                    plists = new ArrayList(persistentLists.values());\n+                synchronized (indexLock) {\n+                    synchronized (this) {\n+                        plists = new ArrayList(persistentLists.values());\n+                    }\n                 }\n                 for (PList list : plists) {\n                     list.claimFileLocations(candidates);",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java",
                "sha": "74f8da2e5e7e0445f9c60ee4756420d55e21b599",
                "status": "modified"
            },
            {
                "additions": 179,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java",
                "changes": 214,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 35,
                "filename": "activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java",
                "patch": "@@ -18,11 +18,11 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -44,8 +44,9 @@\n     private PListStore store;\n     private PList plist;\n     final ByteSequence payload = new ByteSequence(new byte[400]);\n-    final String idSeed = new String(\"Seed\");\n+    final String idSeed = new String(\"Seed\" + new byte[1024]);\n     final Vector<Throwable> exceptions = new Vector<Throwable>();\n+    ExecutorService executor;\n    \n \n     @Test\n@@ -146,15 +147,26 @@ public void testRemoveSecond() throws Exception {\n         assertFalse(plist.remove(\"doesNotExist\"));\n     }\n     \n-    \n+\n+    @Test\n+    public void testRemoveSingleEntry() throws Exception {\n+        plist.addLast(\"First\", new ByteSequence(\"A\".getBytes()));\n+\n+        Iterator<PListEntry> iterator = plist.iterator();\n+        while (iterator.hasNext()) {\n+            PListEntry v = iterator.next();\n+            iterator.remove();\n+        }\n+    }\n+\n     @Test\n     public void testRemoveSecondPosition() throws Exception {\n         plist.addLast(\"First\", new ByteSequence(\"A\".getBytes()));\n         plist.addLast(\"Second\", new ByteSequence(\"B\".getBytes()));\n         \n         assertTrue(plist.remove(1));\n         assertTrue(plist.remove(0));\n-        assertFalse(plist.remove(3));\n+        assertFalse(plist.remove(0));\n     }\n \n \n@@ -165,53 +177,70 @@ public void testConcurrentAddRemove() throws Exception {\n         IOHelper.mkdirs(directory);\n         IOHelper.deleteChildren(directory);\n         store = new PListStore();\n+        store.setCleanupInterval(400);\n         store.setDirectory(directory);\n         store.setJournalMaxFileLength(1024*5);\n         store.start();\n \n-        final ByteSequence payload = new ByteSequence(new byte[1024*4]);\n+        final ByteSequence payload = new ByteSequence(new byte[1024*2]);\n \n \n         final Vector<Throwable> exceptions = new Vector<Throwable>();\n-        final int iterations = 1000;\n+        final int iterations = 5000;\n         final int numLists = 10;\n \n         final PList[] lists = new PList[numLists];\n+        String threadName = Thread.currentThread().getName();\n         for (int i=0; i<numLists; i++) {\n-            lists[i] = store.getPList(\"List\" + i);\n+            Thread.currentThread().setName(\"C:\"+String.valueOf(i));\n+            lists[i] = store.getPList(String.valueOf(i));\n         }\n+        Thread.currentThread().setName(threadName);\n \n-        ExecutorService executor = Executors.newFixedThreadPool(100);\n+        executor = Executors.newFixedThreadPool(100);\n         class A implements Runnable {\n             @Override\n             public void run() {\n+                final String threadName = Thread.currentThread().getName();\n                 try {\n                     for (int i=0; i<iterations; i++) {\n                         PList candidate = lists[i%numLists];\n-                        candidate.addLast(String.valueOf(i), payload);\n-                        PListEntry entry = candidate.getFirst();\n-                        assertTrue(candidate.remove(String.valueOf(i)));\n+                        Thread.currentThread().setName(\"ALRF:\"+candidate.getName());\n+                        synchronized (plistLocks(candidate)) {\n+                            candidate.addLast(String.valueOf(i), payload);\n+                            PListEntry entry = candidate.getFirst();\n+                            assertTrue(candidate.remove(String.valueOf(i)));\n+                        }\n                     }\n                 } catch (Exception error) {\n+                    LOG.error(\"Unexpcted ex\", error);\n                     error.printStackTrace();\n                     exceptions.add(error);\n+                }  finally {\n+                    Thread.currentThread().setName(threadName);\n                 }\n             }\n         };\n \n         class B implements  Runnable {\n             @Override\n             public void run() {\n+                final String threadName = Thread.currentThread().getName();\n                 try {\n                     for (int i=0; i<iterations; i++) {\n                         PList candidate = lists[i%numLists];\n-                        candidate.addLast(String.valueOf(i), payload);\n-                        PListEntry entry = candidate.getFirst();\n-                        assertTrue(candidate.remove(String.valueOf(i)));\n+                        Thread.currentThread().setName(\"ALRF:\"+candidate.getName());\n+                         synchronized (plistLocks(candidate)) {\n+                            candidate.addLast(String.valueOf(i), payload);\n+                            PListEntry entry = candidate.getFirst();\n+                            assertTrue(candidate.remove(String.valueOf(i)));\n+                         }\n                     }\n                 } catch (Exception error) {\n                     error.printStackTrace();\n                     exceptions.add(error);\n+                }  finally {\n+                    Thread.currentThread().setName(threadName);\n                 }\n             }\n         };\n@@ -244,7 +273,7 @@ public void testConcurrentAddLast() throws Exception {\n \n         final int numThreads = 20;\n         final int iterations = 2000;\n-        ExecutorService executor = Executors.newFixedThreadPool(100);\n+        executor = Executors.newFixedThreadPool(100);\n         for (int i=0; i<numThreads; i++) {\n             new Job(i, PListTest.TaskType.ADD, iterations).run();\n         }\n@@ -333,7 +362,7 @@ public void testConcurrentAddRemoveWithPreload() throws Exception {\n         }\n \n         LOG.info(\"parallel add and remove\");\n-        ExecutorService executor = Executors.newFixedThreadPool(numLists*2);\n+        executor = Executors.newFixedThreadPool(numLists*2);\n         for (int i=0; i<numLists*2; i++) {\n             executor.execute(new Job(i, i>=numLists ? PListTest.TaskType.ADD : PListTest.TaskType.REMOVE, iterations));\n         }\n@@ -344,7 +373,72 @@ public void testConcurrentAddRemoveWithPreload() throws Exception {\n         assertTrue(\"no exceptions\", exceptions.isEmpty());\n     }\n \n-    enum TaskType {CREATE, DELETE, ADD, REMOVE, ITERATE}\n+    // for non determinant issues, increasing this may help diagnose\n+    final int numRepeats = 1;\n+\n+    @Test\n+    public void testRepeatStressWithCache() throws Exception {\n+        for (int i=0; i<numRepeats;i++) {\n+            do_testConcurrentAddIterateRemove(true);\n+        }\n+    }\n+\n+    @Test\n+    public void testRepeatStressWithOutCache() throws Exception {\n+        for (int i=0; i<numRepeats;i++) {\n+            do_testConcurrentAddIterateRemove(false);\n+        }\n+    }\n+\n+    public void do_testConcurrentAddIterateRemove(boolean enablePageCache) throws Exception {\n+        File directory = store.getDirectory();\n+        store.stop();\n+        IOHelper.mkdirs(directory);\n+        IOHelper.deleteChildren(directory);\n+        store = new PListStore();\n+        store.setIndexEnablePageCaching(enablePageCache);\n+        store.setIndexPageSize(2*1024);\n+        store.setDirectory(directory);\n+        store.start();\n+\n+        final int iterations = 5000;\n+        final int numLists = 50;\n+\n+        LOG.info(\"create\");\n+        for (int i=0; i<numLists;i++) {\n+            new Job(i, PListTest.TaskType.CREATE, iterations).run();\n+        }\n+\n+        LOG.info(\"fill\");\n+        for (int i=0; i<numLists;i++) {\n+            new Job(i, PListTest.TaskType.ADD, iterations).run();\n+        }\n+\n+        LOG.info(\"parallel add and remove\");\n+        executor = Executors.newFixedThreadPool(400);\n+        final int numProducer = 5;\n+        final int numConsumer = 50;\n+        for (int i=0; i<numLists; i++) {\n+            for (int j=0; j<numProducer; j++) {\n+                executor.execute(new Job(i, PListTest.TaskType.ADD, iterations*2));\n+            }\n+            for (int k=0;k<numConsumer; k++) {\n+                executor.execute(new Job(i, TaskType.ITERATE_REMOVE, iterations/4));\n+            }\n+        }\n+\n+         for (int i=numLists; i<numLists*10; i++) {\n+            executor.execute(new Job(i, PListTest.TaskType.ADD, iterations));\n+         }\n+\n+        executor.shutdown();\n+        LOG.info(\"wait for parallel work to complete\");\n+        boolean shutdown = executor.awaitTermination(60*60, TimeUnit.SECONDS);\n+        assertTrue(\"test did not  timeout \", shutdown);\n+        assertTrue(\"no exceptions\", exceptions.isEmpty());\n+    }\n+\n+    enum TaskType {CREATE, DELETE, ADD, REMOVE, ITERATE, ITERATE_REMOVE}\n \n     class Job implements Runnable {\n \n@@ -360,52 +454,102 @@ public Job(int id, TaskType t, int iterations) {\n \n         @Override\n         public void run() {\n+            final String threadName = Thread.currentThread().getName();\n             try {\n                 PList plist = null;\n                 switch (task) {\n                     case CREATE:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"C:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+                        LOG.info(\"Job-\" + id + \", CREATE\");\n                         break;\n                     case DELETE:\n-                        store.removePList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"D:\"+id);\n+                        store.removePList(String.valueOf(id));\n                         break;\n                     case ADD:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"A:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n \n                         for (int j = 0; j < iterations; j++) {\n-                            plist.addLast(idSeed + \"id\" + j, payload);\n-                            if (j > 0 && j % (iterations / 2) == 0) {\n-                                LOG.info(\"Job-\" + id + \", Done: \" + j);\n+                            synchronized (plistLocks(plist)) {\n+                                plist.addLast (\"PL>\"  + id + idSeed + \"-\" + j, payload);\n                             }\n                         }\n+                        LOG.info(\"Job-\" + id + \", Add, done: \" + iterations);\n                         break;\n                     case REMOVE:\n-                        plist = store.getPList(\"List-\" + id);\n-\n-                        for (int j = iterations -1; j >= 0; j--) {\n-                            plist.remove(idSeed + \"id\" + j);\n-                            if (j > 0 && j % (iterations / 2) == 0) {\n-                                LOG.info(\"Job-\" + id + \" Done remove: \" + j);\n+                        Thread.currentThread().setName(\"R:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+                        synchronized (plistLocks(plist)) {\n+\n+                            for (int j = iterations -1; j >= 0; j--) {\n+                                plist.remove(\"PL>\"  + id + idSeed + \"-\" + j);\n+                                if (j > 0 && j % (iterations / 2) == 0) {\n+                                    LOG.info(\"Job-\" + id + \" Done remove: \" + j);\n+                                }\n                             }\n                         }\n                         break;\n                     case ITERATE:\n-                        plist = store.getPList(\"List-\" + id);\n+                        Thread.currentThread().setName(\"I:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n+\n+                        synchronized (plistLocks(plist)) {\n+                            Iterator<PListEntry> iterator = plist.iterator();\n+                            PListEntry element = null;\n+                            while (iterator.hasNext()) {\n+                                element = iterator.next();\n+                            }\n+                        }\n+                        break;\n+\n+                    case ITERATE_REMOVE:\n+                        Thread.currentThread().setName(\"IRM:\"+id);\n+                        plist = store.getPList(String.valueOf(id));\n \n-                        Iterator<PListEntry> iterator = plist.iterator();\n-                        PListEntry element = null;\n-                        while (iterator.hasNext()) {\n-                            element = iterator.next();\n+                        int removeCount = 0;\n+                        synchronized (plistLocks(plist)) {\n+\n+                            Iterator<PListEntry> removeIterator = plist.iterator();\n+                            PListEntry v = null;\n+\n+                            while (removeIterator.hasNext()) {\n+                                v = removeIterator.next();\n+                                removeIterator.remove();\n+                                if (removeCount++ > iterations) {\n+                                    break;\n+                                }\n+                            }\n                         }\n+                        LOG.info(\"Job-\" + id + \" Done remove: \" + removeCount);\n                         break;\n+\n                     default:\n                 }\n \n             } catch (Exception e) {\n                 e.printStackTrace();\n                 exceptions.add(e);\n+                executor.shutdownNow();\n+            } finally {\n+                Thread.currentThread().setName(threadName);\n+            }\n+        }\n+    }\n+\n+    Map<PList, Object> locks = new HashMap<PList, Object>();\n+    private Object plistLocks(PList plist) {\n+        Object lock = null;\n+        synchronized (locks) {\n+            if (locks.containsKey(plist)) {\n+                lock = locks.get(plist);\n+             } else {\n+                lock = new Object();\n+                locks.put(plist, lock);\n             }\n         }\n+        return lock;\n     }\n \n     @Before\n@@ -421,7 +565,7 @@ protected void startStore(File directory) throws Exception {\n         store = new PListStore();\n         store.setDirectory(directory);\n         store.start();\n-        plist = store.getPList(\"test\");\n+        plist = store.getPList(\"main\");\n     }\n \n     @After",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/activemq-core/src/test/java/org/apache/activemq/store/kahadb/plist/PListTest.java",
                "sha": "ce190dd69a862ccb8c38ef322e56bc80952a64c3",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 19,
                "filename": "kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java",
                "patch": "@@ -32,15 +32,15 @@\n public class ListIndex<Key,Value> implements Index<Key,Value> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ListIndex.class);\n-\n+    public  final static long NOT_SET = -1;\n     protected PageFile pageFile;\n     protected long headPageId;\n     protected long tailPageId;\n     private AtomicLong size = new AtomicLong(0);\n \n     protected AtomicBoolean loaded = new AtomicBoolean();\n \n-    private final ListNode.Marshaller<Key, Value> marshaller = new ListNode.Marshaller<Key, Value>(this);\n+    private ListNode.NodeMarshaller<Key, Value> marshaller;\n     private Marshaller<Key> keyMarshaller;\n     private Marshaller<Value> valueMarshaller;\n \n@@ -49,7 +49,7 @@ public ListIndex() {\n \n     public ListIndex(PageFile pageFile, long headPageId) {\n         this.pageFile = pageFile;\n-        this.headPageId = headPageId;\n+        setHeadPageId(headPageId);\n     }\n \n     synchronized public void load(Transaction tx) throws IOException {\n@@ -61,20 +61,23 @@ synchronized public void load(Transaction tx) throws IOException {\n             if( valueMarshaller == null ) {\n                 throw new IllegalArgumentException(\"The value marshaller must be set before loading the ListIndex\");\n             }\n-            \n-            final Page<ListNode<Key,Value>> p = tx.load(headPageId, null);\n+\n+            marshaller = new ListNode.NodeMarshaller<Key, Value>(keyMarshaller, valueMarshaller);\n+            final Page<ListNode<Key,Value>> p = tx.load(getHeadPageId(), null);\n             if( p.getType() == Page.PAGE_FREE_TYPE ) {\n                  // Need to initialize it..\n                 ListNode<Key, Value> root = createNode(p);\n                 storeNode(tx, root, true);\n-                tailPageId = headPageId = p.getPageId();\n+                setHeadPageId(p.getPageId());\n+                setTailPageId(getHeadPageId());\n             } else {\n-                ListNode<Key, Value> node = loadNode(tx, headPageId);\n+                ListNode<Key, Value> node = loadNode(tx, getHeadPageId());\n+                setTailPageId(getHeadPageId());\n                 size.addAndGet(node.size(tx));\n-                while (node.getNext() != -1) {\n+                while (node.getNext() != NOT_SET ) {\n                     node = loadNode(tx, node.getNext());\n                     size.addAndGet(node.size(tx));\n-                    tailPageId = node.getPageId();\n+                    setTailPageId(node.getPageId());\n                 }\n             }\n         }\n@@ -86,11 +89,11 @@ synchronized public void unload(Transaction tx) {\n     }\n     \n     protected ListNode<Key,Value> getHead(Transaction tx) throws IOException {\n-        return loadNode(tx, headPageId);\n+        return loadNode(tx, getHeadPageId());\n     }\n \n     protected ListNode<Key,Value> getTail(Transaction tx) throws IOException {\n-        return loadNode(tx, tailPageId);\n+        return loadNode(tx, getTailPageId());\n     }\n \n     synchronized public boolean containsKey(Transaction tx, Key key) throws IOException {\n@@ -201,25 +204,23 @@ private void assertLoaded() throws IllegalStateException {\n         Page<ListNode<Key,Value>> page = tx.load(pageId, marshaller);\n         ListNode<Key, Value> node = page.get();\n         node.setPage(page);\n+        node.setContainingList(this);\n         return node;\n     }\n \n     ListNode<Key,Value> createNode(Page<ListNode<Key,Value>> page) throws IOException {\n-        ListNode<Key,Value> node = new ListNode<Key,Value>(this);\n+        ListNode<Key,Value> node = new ListNode<Key,Value>();\n         node.setPage(page);\n         page.set(node);\n+        node.setContainingList(this);\n         return node;\n     }\n \n-    ListNode<Key,Value> createNode(Transaction tx) throws IOException {\n-        Page<ListNode<Key,Value>> page = tx.load(tx.<Object>allocate(1).getPageId(), null);\n-        ListNode<Key,Value> node = new ListNode<Key,Value>(this);\n-        node.setPage(page);\n-        page.set(node);\n-        return node;\n+    public ListNode<Key,Value> createNode(Transaction tx) throws IOException {\n+        return createNode(tx.<ListNode<Key,Value>>load(tx.<ListNode<Key,Value>>allocate().getPageId(), null));\n     }\n \n-    void storeNode(Transaction tx, ListNode<Key,Value> node, boolean overflow) throws IOException {\n+    public void storeNode(Transaction tx, ListNode<Key,Value> node, boolean overflow) throws IOException {\n         tx.store(node.getPage(), marshaller, overflow);\n     }\n         \n@@ -257,6 +258,10 @@ public void setTailPageId(long tailPageId) {\n         this.tailPageId = tailPageId;\n     }\n \n+    public long getTailPageId() {\n+       return tailPageId;\n+    }\n+\n     public long size() {\n         return size.get();\n     }",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListIndex.java",
                "sha": "c7e02fd6bfd739cd899179b1c03dfbb4fe29644a",
                "status": "modified"
            },
            {
                "additions": 122,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java",
                "changes": 212,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 90,
                "filename": "kahadb/src/main/java/org/apache/kahadb/index/ListNode.java",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.kahadb.page.Transaction;\n import org.apache.kahadb.util.LinkedNode;\n import org.apache.kahadb.util.LinkedNodeList;\n+import org.apache.kahadb.util.Marshaller;\n import org.apache.kahadb.util.VariableMarshaller;\n \n /**\n@@ -35,22 +36,24 @@\n public final class ListNode<Key,Value> {\n     private final static boolean ADD_FIRST = true;\n     private final static boolean ADD_LAST = false;\n-    private final static long NOT_SET = -1;\n \n     // The index that this node is part of.\n-    private final ListIndex<Key,Value> index;\n+    private ListIndex<Key,Value> containingList;\n \n     // The page associated with this node\n     private Page<ListNode<Key,Value>> page;\n \n-    protected LinkedNodeList<KeyValueEntry<Key, Value>> entries = new LinkedNodeList<KeyValueEntry<Key, Value>>();\n+    private LinkedNodeList<KeyValueEntry<Key, Value>> entries = new LinkedNodeList<KeyValueEntry<Key, Value>>() {\n+\n+        @Override\n+        public String toString() {\n+            return \"PageId:\" + page.getPageId() + \", index:\" + containingList + super.toString();\n+        }\n+    };\n \n     // The next page after this one.\n-    private long next = NOT_SET;\n+    private long next = ListIndex.NOT_SET;\n \n-    public int size(Transaction tx) {\n-        return entries.size();\n-    }\n \n     static final class KeyValueEntry<Key, Value> extends LinkedNode<KeyValueEntry<Key, Value>> implements Entry<Key, Value>\n     {\n@@ -83,11 +86,13 @@ public String toString() {\n     private final class ListNodeIterator implements Iterator<ListNode<Key,Value>> {\n \n         private final Transaction tx;\n+        private final ListIndex<Key,Value> index;\n         ListNode<Key,Value> nextEntry;\n \n-        private ListNodeIterator(Transaction tx, ListNode<Key,Value> current) throws IOException {\n+        private ListNodeIterator(Transaction tx, ListNode<Key,Value> current) {\n             this.tx = tx;\n             nextEntry = current;\n+            index = current.getContainingList();\n         }\n \n         public boolean hasNext() {\n@@ -96,8 +101,8 @@ public boolean hasNext() {\n \n         public ListNode<Key,Value> next() {\n             ListNode<Key,Value> current = nextEntry;\n-            if( nextEntry !=null ) {\n-                if (nextEntry.next != NOT_SET) {\n+            if( current !=null ) {\n+                if (current.next != ListIndex.NOT_SET) {\n                     try {\n                         nextEntry = index.loadNode(tx, current.next);\n                     } catch (IOException unexpected) {\n@@ -120,64 +125,96 @@ public void remove() {\n     private final class ListIterator implements Iterator<Entry<Key, Value>> {\n \n         private final Transaction tx;\n-        ListNode<Key,Value> current, prev;\n+        private final ListIndex<Key,Value> targetList;\n+        ListNode<Key,Value> currentNode, previousNode;\n         KeyValueEntry<Key, Value> nextEntry;\n-        KeyValueEntry<Key, Value>  toRemove;\n+        KeyValueEntry<Key, Value> entryToRemove;\n \n-        private ListIterator(Transaction tx, ListNode<Key,Value> current, long nextIndex) throws IOException {\n+        private ListIterator(Transaction tx, ListNode<Key,Value> current, long start) {\n             this.tx = tx;\n-            this.current = current;\n+            this.currentNode = current;\n+            this.targetList = current.getContainingList();\n             nextEntry = current.entries.getHead();\n-            if (nextIndex > 0 && nextEntry != null) {\n-                for (long i=0; i<nextIndex; i++) {\n-                    nextEntry = nextEntry.getNext();\n-                    if (nextEntry == null) {\n-                        if (!nextFromNextListNode())\n-                            throw new NoSuchElementException(\"Index out of range: \" + nextIndex);\n-                        }\n-                    }\n-                }\n+            if (start > 0) {\n+                moveToRequestedStart(start);\n             }\n+        }\n \n-        private boolean nextFromNextListNode() {\n-            boolean haveNext = false;\n-            if (current.getNext() != NOT_SET) {\n+        private void moveToRequestedStart(final long start) {\n+            long count = 0;\n+            while (hasNext() && count < start) {\n+                next();\n+                count++;\n+            }\n+            if (!hasNext()) {\n+                throw new NoSuchElementException(\"Index \" + start + \" out of current range: \" + count);\n+            }\n+        }\n+\n+        private KeyValueEntry<Key, Value> getFromNextNode() {\n+            KeyValueEntry<Key, Value> result = null;\n+            if (currentNode.getNext() != ListIndex.NOT_SET) {\n                 try {\n-                    prev = current;\n-                    current = index.loadNode(tx, current.getNext());\n+                    previousNode = currentNode;\n+                    currentNode = targetList.loadNode(tx, currentNode.getNext());\n                 } catch (IOException unexpected) {\n                     NoSuchElementException e = new NoSuchElementException(unexpected.getLocalizedMessage());\n                     e.initCause(unexpected);\n                     throw e;\n                 }\n-                nextEntry = current.entries.getHead();\n-                haveNext = nextEntry != null;\n+                result = currentNode.entries.getHead();\n             }\n-            return haveNext;\n+            return result;\n         }\n \n         public boolean hasNext() {\n-            return nextEntry !=null || nextFromNextListNode();\n+            if (nextEntry == null) {\n+                nextEntry = getFromNextNode();\n+            }\n+            return nextEntry != null;\n         }\n \n         public Entry<Key, Value> next() {\n             if( nextEntry !=null ) {\n-                toRemove = nextEntry;\n-                nextEntry=toRemove.getNext();\n-                return toRemove;\n+                entryToRemove = nextEntry;\n+                nextEntry = entryToRemove.getNext();\n+                return entryToRemove;\n             } else {\n                 throw new NoSuchElementException();\n             }\n         }\n \n         public void remove() {\n-            if (toRemove == null) {\n-                throw new IllegalStateException(\"can only remove once, call next again\");\n+            if (entryToRemove == null) {\n+                throw new IllegalStateException(\"can only remove once, call hasNext();next() again\");\n             }\n             try {\n-                doRemove(tx, current, prev, toRemove);\n-                index.onRemove();\n-                toRemove = null;\n+                entryToRemove.unlink();\n+                entryToRemove = null;\n+                ListNode<Key,Value> toRemoveNode = null;\n+                if (currentNode.entries.isEmpty()) {\n+                    // may need to free this node\n+                    if (currentNode.isHead() && currentNode.isTail()) {\n+                        // store empty list\n+                    } else if (currentNode.isHead()) {\n+                        // new head\n+                        toRemoveNode = currentNode;\n+                        nextEntry = getFromNextNode();\n+                        targetList.setHeadPageId(currentNode.getPageId());\n+                    } else if (currentNode.isTail()) {\n+                        toRemoveNode = currentNode;\n+                        previousNode.setNext(ListIndex.NOT_SET);\n+                        previousNode.store(tx);\n+                        targetList.setTailPageId(previousNode.getPageId());\n+                    }\n+                }\n+                targetList.onRemove();\n+\n+                if (toRemoveNode != null) {\n+                    tx.free(toRemoveNode.getPage());\n+                } else {\n+                    currentNode.store(tx);\n+                }\n             } catch (IOException unexpected) {\n                 IllegalStateException e = new IllegalStateException(unexpected.getLocalizedMessage());\n                 e.initCause(unexpected);\n@@ -192,11 +229,13 @@ public void remove() {\n      * @param <Key>\n      * @param <Value>\n      */\n-    static public class Marshaller<Key,Value> extends VariableMarshaller<ListNode<Key,Value>> {\n-        private final ListIndex<Key,Value> index;\n+    static public final class NodeMarshaller<Key,Value> extends VariableMarshaller<ListNode<Key,Value>> {\n+        private final Marshaller<Key> keyMarshaller;\n+        private final Marshaller<Value> valueMarshaller;\n \n-        public Marshaller(ListIndex<Key,Value> index) {\n-            this.index = index;\n+        public NodeMarshaller(Marshaller<Key> keyMarshaller, Marshaller<Value> valueMarshaller) {\n+            this.keyMarshaller = keyMarshaller;\n+            this.valueMarshaller = valueMarshaller;\n         }\n \n         public void writePayload(ListNode<Key,Value> node, DataOutput os) throws IOException {\n@@ -209,58 +248,31 @@ public void writePayload(ListNode<Key,Value> node, DataOutput os) throws IOExcep\n             os.writeShort(count);\n             KeyValueEntry<Key, Value> entry = node.entries.getHead();\n             while (entry != null) {\n-                index.getKeyMarshaller().writePayload((Key) entry.getKey(), os);\n-                index.getValueMarshaller().writePayload((Value) entry.getValue(), os);\n+                keyMarshaller.writePayload((Key) entry.getKey(), os);\n+                valueMarshaller.writePayload((Value) entry.getValue(), os);\n                 entry = entry.getNext();\n             }\n         }\n \n         @SuppressWarnings(\"unchecked\")\n         public ListNode<Key,Value> readPayload(DataInput is) throws IOException {\n-            ListNode<Key,Value> node = new ListNode<Key,Value>(index);\n+            ListNode<Key,Value> node = new ListNode<Key,Value>();\n             node.next = is.readLong();\n             final short size = is.readShort();\n             for (short i = 0; i < size; i++) {\n                 node.entries.addLast(\n-                        new KeyValueEntry(index.getKeyMarshaller().readPayload(is),\n-                                                     index.getValueMarshaller().readPayload(is)));\n+                        new KeyValueEntry(keyMarshaller.readPayload(is),\n+                                                     valueMarshaller.readPayload(is)));\n             }\n             return node;\n         }\n     }\n \n-    public ListNode(ListIndex<Key, Value> index) {\n-        this.index = index;\n-    }\n-\n-    private void doRemove(final Transaction tx, final ListNode current, final ListNode prev, KeyValueEntry<Key, Value> entry) throws IOException {\n-        entry.unlink();\n-        if (current.entries.isEmpty()) {\n-                if (current.getPageId() == index.getHeadPageId()) {\n-                    if (current.getNext() != NOT_SET) {\n-                        // new head\n-                        index.setHeadPageId(current.getNext());\n-                        tx.free(current.getPageId());\n-                    } else {\n-                        //  store current in empty state\n-                        store(tx);\n-                    }\n-                } else {\n-                    // need to unlink the node\n-                    prev.setNext(current.next);\n-                    index.storeNode(tx, prev, false);\n-                    tx.free(current.getPageId());\n-                }\n-        } else {\n-            store(tx);\n-        }\n-    }\n-\n     public Value put(Transaction tx, Key key, Value value) throws IOException {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n-        entries.addLast(new KeyValueEntry(key, value));\n+        entries.addLast(new KeyValueEntry<Key, Value>(key, value));\n         store(tx, ADD_LAST);\n         return null;\n     }\n@@ -269,46 +281,46 @@ public Value addFirst(Transaction tx, Key key, Value value) throws IOException {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n-        entries.addFirst(new KeyValueEntry(key, value));\n+        entries.addFirst(new KeyValueEntry<Key, Value>(key, value));\n         store(tx, ADD_FIRST);\n         return null;\n     }\n \n     private void store(Transaction tx, boolean addFirst) throws IOException {\n         try {\n-            index.storeNode(tx, this, false);\n+            getContainingList().storeNode(tx, this, false);\n         } catch ( Transaction.PageOverflowIOException e ) {\n                 // If we get an overflow\n                 split(tx, addFirst);\n         }\n     }\n \n     private void store(Transaction tx) throws IOException {\n-        index.storeNode(tx, this, false);\n+        getContainingList().storeNode(tx, this, false);\n     }\n \n     private void split(Transaction tx, boolean isAddFirst) throws IOException {\n-        ListNode<Key, Value> extension = index.createNode(tx);\n+        ListNode<Key, Value> extension = getContainingList().createNode(tx);\n         if (isAddFirst) {\n             // head keeps the first entry, insert extension with the rest\n             extension.setNext(this.getNext());\n             this.setNext(extension.getPageId());\n             extension.setEntries(entries.getHead().splitAfter());\n         }  else {\n-            index.setTailPageId(extension.getPageId());\n             this.setNext(extension.getPageId());\n             extension.setEntries(entries.getTail().getPrevious().splitAfter());\n+            getContainingList().setTailPageId(extension.getPageId());\n         }\n-        index.storeNode(tx, this, false);\n         extension.store(tx, isAddFirst);\n+        store(tx);\n     }\n \n     // called after a split\n     private void setEntries(LinkedNodeList<KeyValueEntry<Key, Value>> list) {\n         this.entries = list;\n     }\n \n-    public Value get(Transaction tx, Key key) throws IOException {\n+    public Value get(Transaction tx, Key key) {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n@@ -324,15 +336,15 @@ public Value get(Transaction tx, Key key) throws IOException {\n         return result;\n     }\n \n-    public boolean isEmpty(final Transaction tx) throws IOException {\n+    public boolean isEmpty(final Transaction tx)  {\n         return entries.isEmpty();\n     }\n \n-    public Entry<Key,Value> getFirst(Transaction tx) throws IOException {\n+    public Entry<Key,Value> getFirst(Transaction tx) {\n         return entries.getHead();\n     }\n \n-    public Entry<Key,Value> getLast(Transaction tx) throws IOException {\n+    public Entry<Key,Value> getLast(Transaction tx) {\n         return entries.getTail();\n     }\n \n@@ -353,7 +365,7 @@ public void clear(Transaction tx) throws IOException {\n         tx.free(this.getPageId());\n     }\n \n-    public boolean contains(Transaction tx, Key key) throws IOException {\n+    public boolean contains(Transaction tx, Key key) {\n         if (key == null) {\n             throw new IllegalArgumentException(\"Key cannot be null\");\n         }\n@@ -392,10 +404,30 @@ public long getNext() {\n     public void setNext(long next) {\n         this.next = next;\n     }\n-    \n+\n+    public void setContainingList(ListIndex<Key, Value> list) {\n+        this.containingList = list;\n+    }\n+\n+    public ListIndex<Key,Value> getContainingList() {\n+        return containingList;\n+    }\n+\n+    public boolean isHead() {\n+        return getPageId() == containingList.getHeadPageId();\n+    }\n+\n+    public boolean isTail() {\n+        return getPageId() == containingList.getTailPageId();\n+    }\n+\n+    public int size(Transaction tx) {\n+        return entries.size();\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"[ListNode(\" + page.getPageId() + \"->\" + next + \") \" + entries.toString() + \"]\";\n+        return \"[ListNode(\" + (page != null ?  page.getPageId() + \"->\" + next : \"null\") + \")[\" + entries.size() + \"]]\";\n     }\n }\n ",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/index/ListNode.java",
                "sha": "b203ff17815c5d8958a546916842b7127b19e2cf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 6,
                "filename": "kahadb/src/main/java/org/apache/kahadb/page/PageFile.java",
                "patch": "@@ -171,7 +171,7 @@ public void setCurrentLocation(Page page, int location, int length) {\n \n         @Override\n         public String toString() {\n-            return \"[PageWrite:\"+page.getPageId()+\"]\";\n+            return \"[PageWrite:\"+page.getPageId()+ \"-\" + page.getType()  + \"]\";\n         }\n \n         @SuppressWarnings(\"unchecked\")\n@@ -827,9 +827,7 @@ void readPage(long pageId, byte[] data) throws IOException {\n \n     public void freePage(long pageId) {\n         freeList.add(pageId);\n-        if( enablePageCaching ) {\n-            pageCache.remove(pageId);\n-        }\n+        removeFromCache(pageId);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n@@ -932,9 +930,9 @@ void addToCache(Page page) {\n         }\n     }\n \n-    void removeFromCache(Page page) {\n+    void removeFromCache(long pageId) {\n         if (enablePageCaching) {\n-            pageCache.remove(page.getPageId());\n+            pageCache.remove(pageId);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/PageFile.java",
                "sha": "40642f649bbe9936e0a77faafb527d31caa2dbf8",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 2,
                "filename": "kahadb/src/main/java/org/apache/kahadb/page/Transaction.java",
                "patch": "@@ -129,8 +129,6 @@ public PageFile getPageFile() {\n      *         if the PageFile is not loaded\n      */\n     public <T> Page<T> allocate(int count) throws IOException {\n-        // TODO: we need to track allocated pages so that they can be returned if the\n-        // transaction gets rolled back.\n         Page<T> rc = pageFile.allocate(count);\n         allocateList.add(new Sequence(rc.getPageId(), rc.getPageId()+count-1));\n         return rc;",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/page/Transaction.java",
                "sha": "a327927ec3636867ccae1c14766793d74eb06ccf",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java",
                "patch": "@@ -197,7 +197,7 @@ public void linkToTail(LinkedNodeList<T> target) {\n \n     public void linkToHead(LinkedNodeList<T> target) {\n         if (list != null) {\n-            throw new IllegalArgumentException(\"This node is already linked to a node\");\n+            throw new IllegalArgumentException(\"This node is already linked to a list\");\n         }\n \n         if (target.head == null) {",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java",
                "sha": "690190963bcfaa8d79475d8430a2cdc86e60c030",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq/blob/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java?ref=bf59b7d70f7552053cfecb66db64658a314ae32c",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "patch": "@@ -204,7 +204,7 @@ public Sequence removeFirstSequence(long count) {\n                 return sequence;\n             }\n             if (sequence.range() > count ) {\n-                Sequence rc = new Sequence(sequence.first, sequence.first+count);\n+                Sequence rc = new Sequence(sequence.first, sequence.first+count-1);\n                 sequence.first+=count;\n                 return rc;\n             }",
                "raw_url": "https://github.com/apache/activemq/raw/bf59b7d70f7552053cfecb66db64658a314ae32c/kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java",
                "sha": "d818b3c88147fd1114dd9a71c9c6f2bc3e2b422d",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-3434: Contention in PLIist creation results in NPE on load - FilePendingMessageCursor. Resolve contention on creation, tidy up ListIndex iterator remove and plist release, additional test that stresses contention such that it can reproduce the stomp load test scenario\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1153420 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/24cd2b3f2902242fc8b62bdcaf098405f290392e",
        "repo": "activemq",
        "unit_tests": [
            "SequenceSetTest.java"
        ]
    },
    "activemq_c391321": {
        "bug_id": "activemq_c391321",
        "commit": "https://github.com/apache/activemq/commit/c391321d1b5b59542d847717654b0d4dba54cf2f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq/blob/c391321d1b5b59542d847717654b0d4dba54cf2f/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java?ref=c391321d1b5b59542d847717654b0d4dba54cf2f",
                "deletions": 0,
                "filename": "activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "patch": "@@ -348,6 +348,7 @@ private void collectBrokerInfos() {\n             remoteBrokerInfo = futureRemoteBrokerInfo.get();\n             if (remoteBrokerInfo == null) {\n                 fireBridgeFailed();\n+                return;\n             }\n         } catch (Exception e) {\n             serviceRemoteException(e);\n@@ -358,6 +359,7 @@ private void collectBrokerInfos() {\n             localBrokerInfo = futureLocalBrokerInfo.get();\n             if (localBrokerInfo == null) {\n                 fireBridgeFailed();\n+                return;\n             }\n \n             // Before we try and build the bridge lets check if we are in a loop",
                "raw_url": "https://github.com/apache/activemq/raw/c391321d1b5b59542d847717654b0d4dba54cf2f/activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java",
                "sha": "2242d7380b2558b757e23c49aca1c537110e8c9d",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-5315\n\nFix for potential NPE on transport error.",
        "parent": "https://github.com/apache/activemq/commit/4a2af3ab072c67408e477f3e41388310f8f414db",
        "repo": "activemq",
        "unit_tests": [
            "DemandForwardingBridgeSupportTest.java"
        ]
    },
    "activemq_d92d3a8": {
        "bug_id": "activemq_d92d3a8",
        "commit": "https://github.com/apache/activemq/commit/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq/blob/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java?ref=d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921",
                "deletions": 0,
                "filename": "activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "patch": "@@ -145,6 +145,9 @@ public boolean iterate() {\n                     if (priorityBackup && !connectedToPriority) {\n                         try {\n                             doDelay();\n+                            if (reconnectTask == null) {\n+                                return true;\n+                            }\n                             reconnectTask.wakeup();\n                         } catch (InterruptedException e) {\n                             LOG.debug(\"Reconnect task has been interrupted.\", e);\n@@ -154,6 +157,9 @@ public boolean iterate() {\n                     // build backups on the next iteration\n                     buildBackup = true;\n                     try {\n+                        if (reconnectTask == null) {\n+                            return true;\n+                        }\n                         reconnectTask.wakeup();\n                     } catch (InterruptedException e) {\n                         LOG.debug(\"Reconnect task has been interrupted.\", e);",
                "raw_url": "https://github.com/apache/activemq/raw/d92d3a8a06b6a20769d39c5b1cf19a7c8bf91921/activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java",
                "sha": "e6b3f51413a7e50b797e7c83e3bee04b572addcb",
                "status": "modified"
            }
        ],
        "message": "fix for: https://issues.apache.org/jira/browse/AMQ-3782\n\navoid any potential NPE and try again.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1304057 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/1463bec066c199d60402c2d3d594adc05a007e6a",
        "repo": "activemq",
        "unit_tests": [
            "FailoverTransportTest.java"
        ]
    },
    "activemq_dc168c0": {
        "bug_id": "activemq_dc168c0",
        "commit": "https://github.com/apache/activemq/commit/dc168c055b567f1eb7c9488762b494f24902afed",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq/blob/dc168c055b567f1eb7c9488762b494f24902afed/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java?ref=dc168c055b567f1eb7c9488762b494f24902afed",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java",
                "patch": "@@ -50,6 +50,7 @@ public byte getDataStructureType() {\n     }\n \n     transient protected Callback acknowledgeCallback;\n+    transient int hashCode;\n \n     public Message copy() {\n         ActiveMQMessage copy = new ActiveMQMessage();\n@@ -64,7 +65,13 @@ protected void copy(ActiveMQMessage copy) {\n     }\n \n     public int hashCode() {\n-        return this.getMessageId().hashCode();\n+        MessageId id = getMessageId();\n+        if (id != null) {\n+            return  id.hashCode();\n+        }\n+        else {\n+            return super.hashCode();\n+        }\n     }\n \n     public boolean equals(Object o) {",
                "raw_url": "https://github.com/apache/activemq/raw/dc168c055b567f1eb7c9488762b494f24902afed/activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java",
                "sha": "830cc85a60fb35c0e130bc722d6d92ef7bf19492",
                "status": "modified"
            }
        ],
        "message": "fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@382888 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/4759540e6eac4fe1282057023ea4b4962038ca97",
        "repo": "activemq",
        "unit_tests": [
            "ActiveMQMessageTest.java"
        ]
    },
    "activemq_e16114f": {
        "bug_id": "activemq_e16114f",
        "commit": "https://github.com/apache/activemq/commit/e16114f99bdef263f3d79deacea32302f99cd9bf",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq/blob/e16114f99bdef263f3d79deacea32302f99cd9bf/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java?ref=e16114f99bdef263f3d79deacea32302f99cd9bf",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "patch": "@@ -310,7 +310,10 @@ public void onStopped(TransportConnection connection) {\n \n     public String getName(){\n         if( name==null ){\n-            name = getUri().toString();\n+        \turi = getUri();\n+        \tif( uri != null ) {\n+        \t\tname = uri.toString();\n+        \t}\n         }\n         return name;\n     }\n@@ -319,7 +322,10 @@ public void setName(String name) {\n     }\n \n     public String toString() {\n-        return getName();\n+        String rc = getName();\n+        if( rc == null )\n+        \trc = super.toString();\n+        return rc;\n     }\n \n \tpublic boolean isDisableAsyncDispatch() {",
                "raw_url": "https://github.com/apache/activemq/raw/e16114f99bdef263f3d79deacea32302f99cd9bf/activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java",
                "sha": "30893688e890b3588694bfc607968b621eb2751a",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE when toString() is called before object is fully initialized.\nSpring seems to be doing this (part of of it's debug logging) with newer releases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/activemq/trunk@439346 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/2b51c3357e5594a49972cd68e5c5266d045bd13b",
        "repo": "activemq",
        "unit_tests": [
            "TransportConnectorTest.java"
        ]
    },
    "activemq_e85dda9": {
        "bug_id": "activemq_e85dda9",
        "commit": "https://github.com/apache/activemq/commit/e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "deletions": 2,
                "filename": "activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "patch": "@@ -205,15 +205,19 @@ public Thread newThread(Runnable runnable) {\n     public void doStop(ServiceStopper stopper) throws Exception {\n         //drain down async jobs\n         LOG.info(\"Stopping async queue tasks\");\n-        this.globalQueueSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        if (this.globalQueueSemaphore != null) {\n+            this.globalQueueSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        }\n         synchronized (this.asyncQueueMap) {\n             for (StoreQueueTask task : this.asyncQueueMap.values()) {\n                 task.cancel();\n             }\n             this.asyncQueueMap.clear();\n         }\n         LOG.info(\"Stopping async topic tasks\");\n-        this.globalTopicSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        if (this.globalTopicSemaphore != null) {\n+            this.globalTopicSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);\n+        }\n         synchronized (this.asyncTopicMap) {\n             for (StoreTopicTask task : this.asyncTopicMap.values()) {\n                 task.cancel();",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java",
                "sha": "70676a7400fc13faddef7b82d305b54dfcb83919",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "deletions": 13,
                "filename": "activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java",
                "patch": "@@ -49,9 +49,12 @@\n import org.apache.activemq.ActiveMQConnectionFactory;\n import org.apache.activemq.broker.BrokerService;\n import org.apache.activemq.command.ActiveMQQueue;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n public class FailoverManagedClusterTest extends TestCase {\n-\n+    private static final Log LOG = LogFactory.getLog(FailoverManagedClusterTest.class);\n+    \n     long txGenerator = System.currentTimeMillis();\n     \n     private static final String MASTER_BIND_ADDRESS = \"tcp://0.0.0.0:61616\";\n@@ -61,12 +64,25 @@\n     \n     private BrokerService master;\n     private BrokerService slave;\n+    private CountDownLatch slaveThreadStarted = new CountDownLatch(1);\n \n+    @Override\n     protected void setUp() throws Exception {\n         createAndStartMaster();\n         createAndStartSlave();    \n     }\n     \n+    @Override\n+    protected void tearDown() throws Exception {\n+        if (slave != null) {\n+            slave.stop();\n+        }\n+        if (master != null) {\n+            master.stop();\n+        }\n+    }\n+\n+\n \n     private void createAndStartMaster() throws Exception {\n         master = new BrokerService();\n@@ -88,8 +104,9 @@ private void createAndStartSlave() throws Exception {\n         new Thread(new Runnable() {\n             public void run() {\n                 try {\n+                    slaveThreadStarted.countDown();\n                     slave.start();\n-                    System.out.println(\"slave has started\");\n+                    LOG.info(\"slave has started\");\n                 } catch (Exception e) {\n                     e.printStackTrace();\n                 }\n@@ -112,7 +129,7 @@ public void testFailover() throws Exception {\n \n         final StubMessageEndpoint endpoint = new StubMessageEndpoint() {\n             public void onMessage(Message message) {\n-                System.out.println(\"Received message \" + message);\n+                LOG.info(\"Received message \" + message);\n                 super.onMessage(message);\n                 messageDelivered.countDown();\n             };\n@@ -144,18 +161,14 @@ public boolean isDeliveryTransacted(Method method) throws NoSuchMethodException\n         } catch (InterruptedException e) {\n         }\n \n-        // Send the broker a message to that endpoint\n         MessageProducer producer = session.createProducer(new ActiveMQQueue(\"TEST\"));\n-\n-        // force a failover\n+        slaveThreadStarted.await(10, TimeUnit.SECONDS);\n+        \n+        // force a failover before send\n+        LOG.info(\"Stopping master to force failover..\");\n         master.stop();\n-        slave.waitUntilStarted();\n-\n-        try {\n-            Thread.sleep(2000);\n-        } catch (InterruptedException ie) {\n-            // ignore\n-        }\n+        master = null;\n+        assertTrue(\"slave started ok\", slave.waitUntilStarted());\n \n         producer.send(session.createTextMessage(\"Hello, again!\"));\n ",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/activemq-ra/src/test/java/org/apache/activemq/ra/FailoverManagedClusterTest.java",
                "sha": "e4beed7ec38216de9f9430ee82559bb20420ab99",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/activemq/blob/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java?ref=e85dda9c64c27a3449da0c44b5314aa8be06cdc9",
                "deletions": 1,
                "filename": "kahadb/src/main/java/org/apache/kahadb/util/LockFile.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.RandomAccessFile;\r\n import java.nio.channels.FileLock;\r\n import java.nio.channels.OverlappingFileLockException;\r\n+import java.util.Date;\r\n \r\n /**\r\n  * Used to lock a File.\r\n@@ -55,7 +56,9 @@ synchronized public void lock() throws IOException {\n         }\r\n         \r\n         IOHelper.mkdirs(file.getParentFile());\r\n-        \r\n+        if (System.getProperty(getVmLockKey()) != null) {\r\n+            throw new IOException(\"File '\" + file + \"' could not be locked as lock is already held for this jvm.\");\r\n+        }\r\n         if (lock == null) {\r\n             readFile = new RandomAccessFile(file, \"rw\");\r\n             IOException reason = null;\r\n@@ -66,6 +69,7 @@ synchronized public void lock() throws IOException {\n             }\r\n             if (lock != null) {\r\n                 lockCounter++;\r\n+                System.setProperty(getVmLockKey(), new Date().toString());\r\n             } else {\r\n                 // new read file for next attempt\r\n                 closeReadFile();\r\n@@ -94,6 +98,7 @@ public void unlock() {\n         if (lock != null) {\r\n             try {\r\n                 lock.release();\r\n+                System.getProperties().remove(getVmLockKey());\r\n             } catch (Throwable ignore) {\r\n             }\r\n             lock = null;\r\n@@ -105,6 +110,10 @@ public void unlock() {\n         }\r\n     }\r\n \r\n+    private String getVmLockKey() throws IOException {\r\n+        return getClass().getName() + \".lock.\" + file.getCanonicalPath();\r\n+    }\r\n+\r\n     private void closeReadFile() {\r\n         // close the file.\r\n         if (readFile != null) {\r",
                "raw_url": "https://github.com/apache/activemq/raw/e85dda9c64c27a3449da0c44b5314aa8be06cdc9/kahadb/src/main/java/org/apache/kahadb/util/LockFile.java",
                "sha": "70a8f8b8474d14ac6f498a2d6fe452c66d83130f",
                "status": "modified"
            }
        ],
        "message": "have KahaDB lock work in vm, so master slave tests can work ok. preserver kaha behaiour in this regard as it makes testing simpler. fix npe on shutdown if start fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@955973 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/94261594d3ef6d5a9ab15becf6b42a6f80956a18",
        "repo": "activemq",
        "unit_tests": [
            "LockFileTest.java"
        ]
    },
    "activemq_f4a2543": {
        "bug_id": "activemq_f4a2543",
        "commit": "https://github.com/apache/activemq/commit/f4a2543def0d7240fc97f850a53f6be48dc74562",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq/blob/f4a2543def0d7240fc97f850a53f6be48dc74562/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java?ref=f4a2543def0d7240fc97f850a53f6be48dc74562",
                "deletions": 4,
                "filename": "activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "patch": "@@ -1348,10 +1348,12 @@ long updateIndex(Transaction tx, KahaAddMessageCommand command, Location locatio\n             sd.locationIndex.put(tx, location, previous);\n             metadata.lastUpdate = location;\n             // remove ack positions\n-            Iterator<Entry<String, SequenceSet>> it = sd.ackPositions.iterator(tx);\n-            while (it.hasNext()) {\n-                Entry<String, SequenceSet> entry = it.next();\n-                entry.getValue().remove(id);\n+            if (sd.subscriptions != null && !sd.subscriptions.isEmpty(tx)) {\n+                Iterator<Entry<String, SequenceSet>> it = sd.ackPositions.iterator(tx);\n+                while (it.hasNext()) {\n+                    Entry<String, SequenceSet> entry = it.next();\n+                    entry.getValue().remove(id);\n+                }\n             }\n \n         }",
                "raw_url": "https://github.com/apache/activemq/raw/f4a2543def0d7240fc97f850a53f6be48dc74562/activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java",
                "sha": "815b9dfe2f56464db10a6f09eb026556a354810d",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/jira/browse/AMQ-5960 - durable sub pendingQueueSize after force shutdown - fix npe test failure",
        "parent": "https://github.com/apache/activemq/commit/d1dface01a7b253c6bec17c8ef1187288235357d",
        "repo": "activemq",
        "unit_tests": [
            "MessageDatabaseTest.java"
        ]
    },
    "activemq_f6caba7": {
        "bug_id": "activemq_f6caba7",
        "commit": "https://github.com/apache/activemq/commit/f6caba7127ba3b5f7eae2a14943606c10bff93e8",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/activemq/blob/f6caba7127ba3b5f7eae2a14943606c10bff93e8/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java?ref=f6caba7127ba3b5f7eae2a14943606c10bff93e8",
                "deletions": 1,
                "filename": "activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "patch": "@@ -41,6 +41,7 @@\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n \n+import org.apache.activeio.journal.Journal;\n import org.apache.activemq.ActiveMQConnectionMetaData;\n import org.apache.activemq.ConfigurationException;\n import org.apache.activemq.Service;\n@@ -1723,7 +1724,14 @@ protected void checkSystemUsageLimits() throws IOException {\n                           \" only has \" + dirFreeSpace / (1024 * 1024) + \" mb of free space\");\n             }\n \n-            long maxJournalFileSize = usage.getTempUsage().getStore().getJournalMaxFileLength();\n+            long maxJournalFileSize;\n+            \n+            if (usage.getTempUsage().getStore() != null) {\n+            \tmaxJournalFileSize = usage.getTempUsage().getStore().getJournalMaxFileLength();\n+            } else {\n+            \tmaxJournalFileSize = org.apache.kahadb.journal.Journal.DEFAULT_MAX_FILE_LENGTH;\n+            }\n+            \n             if (storeLimit < maxJournalFileSize) {\n                 LOG.error(\"Temporary Store limit is \" + storeLimit / (1024 * 1024) +\n                           \" mb, whilst the max journal file size for the temporary store is: \" +",
                "raw_url": "https://github.com/apache/activemq/raw/f6caba7127ba3b5f7eae2a14943606c10bff93e8/activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java",
                "sha": "b57f7118c6d6574086cc17720e99fda954a601f1",
                "status": "modified"
            }
        ],
        "message": "Additional Fix for https://issues.apache.org/jira/browse/AMQ-3573 - Avoid a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/activemq/trunk@1239335 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/activemq/commit/d403f107224244abbe53e8e9cb90959ae402885a",
        "repo": "activemq",
        "unit_tests": [
            "BrokerServiceTest.java"
        ]
    }
}