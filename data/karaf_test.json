{
    "karaf_a2789e1": {
        "repo": "karaf",
        "message": "FELIX-1932: Ensure that a missing reference in an itest gets logged without throwing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@888961 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/a2789e10b9204cbd269de4e1ec1965ddffa3750d",
        "parent": "https://github.com/apache/karaf/commit/c8ed4402cfa36c0e30790b9db5ea68dea9fcba7f",
        "bug_id": "karaf_a2789e1",
        "file": [
            {
                "sha": "950a6609d5518a13431a2a305d91d7d3c4f9760b",
                "filename": "itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/a2789e10b9204cbd269de4e1ec1965ddffa3750d/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/a2789e10b9204cbd269de4e1ec1965ddffa3750d/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java",
                "status": "modified",
                "changes": 44,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/itests/src/test/java/org/apache/felix/karaf/shell/itests/AbstractIntegrationTest.java?ref=a2789e10b9204cbd269de4e1ec1965ddffa3750d",
                "patch": "@@ -16,7 +16,11 @@\n  */\n package org.apache.felix.karaf.shell.itests;\n \n+import java.util.Collection;\n import java.util.Dictionary;\n+import java.util.Enumeration;\n+import java.util.LinkedList;\n+import java.util.List;\n \n import org.ops4j.pax.exam.CoreOptions;\n import org.ops4j.pax.exam.Inject;\n@@ -65,15 +69,14 @@\n             // This is buggy, as the service reference may change i think\n             Object svc = type.cast(tracker.waitForService(timeout));\n             if (svc == null) {\n-\n                 Dictionary dic = bundleContext.getBundle().getHeaders();\n-                System.err.println(\"Test bundle headers: \" + dic);\n-                ServiceReference[] refs = bundleContext.getAllServiceReferences(null, null);\n-                for (ServiceReference ref : refs) {\n+                System.err.println(\"Test bundle headers: \" + explode(dic));\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, null))) {\n                     System.err.println(\"ServiceReference: \" + ref);\n                 }\n-                refs = bundleContext.getAllServiceReferences(null, flt);\n-                for (ServiceReference ref : refs) {\n+\n+                for (ServiceReference ref : asCollection(bundleContext.getAllServiceReferences(null, flt))) {\n                     System.err.println(\"Filtered ServiceReference: \" + ref);\n                 }\n \n@@ -105,4 +108,33 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId, String ar\n         return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId).versionAsInProject();\n     }\n \n+    /*\n+     * Explode the dictionary into a ,-delimited list of key=value pairs\n+     */\n+    private static String explode(Dictionary dictionary) {\n+        Enumeration keys = dictionary.keys();\n+        StringBuffer result = new StringBuffer();\n+        while (keys.hasMoreElements()) {\n+            Object key = keys.nextElement();\n+            result.append(String.format(\"%s=%s\", key, dictionary.get(key)));\n+            if (keys.hasMoreElements()) {\n+                result.append(\", \");\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    /*\n+     * Provides an iterable collection of references, even if the original array is null\n+     */\n+    private static final Collection<ServiceReference> asCollection(ServiceReference[] references) {\n+        List<ServiceReference> result = new LinkedList<ServiceReference>();\n+        if (references != null) {\n+            for (ServiceReference reference : references) {\n+                result.add(reference);\n+            }\n+        }\n+        return result;\n+    }\n+\n }",
                "deletions": 6
            }
        ],
        "patched_files": [],
        "unit_tests": [
            "AbstractIntegrationTest.java"
        ]
    },
    "karaf_c7860d7": {
        "repo": "karaf",
        "message": "FELIX-1566: Possible NPE when uninstalling a feature\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@812386 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1",
        "parent": "https://github.com/apache/karaf/commit/789dcc99f087965aef0e816e364495c18784bea6",
        "bug_id": "karaf_c7860d7",
        "file": [
            {
                "sha": "421de12863716757b6f8c661543a3a20bf60f590",
                "filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/c7860d7d36b46f890c8e24b7ac058891b7bb9aa1/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=c7860d7d36b46f890c8e24b7ac058891b7bb9aa1",
                "patch": "@@ -301,7 +301,10 @@ public void uninstallFeature(String name, String version) throws Exception {\n             bundles.removeAll(b);\n         }\n         for (long bundleId : bundles) {\n-            getBundleContext().getBundle(bundleId).uninstall();\n+            Bundle b = getBundleContext().getBundle(bundleId);\n+            if (b != null) {\n+                b.uninstall();\n+            }\n         }\n         callListeners(new FeatureEvent(feature, FeatureEvent.EventType.FeatureInstalled, false));\n         saveState();",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_7bba56d": {
        "repo": "karaf",
        "message": "[KARAF-2663]client fails with NullPointerException",
        "commit": "https://github.com/apache/karaf/commit/7bba56d4cccfefa5bf7bf760e97023b1e71ee692",
        "parent": "https://github.com/apache/karaf/commit/2405a8eacc899f9a4d97ab8a0d45cc9d4ff0a205",
        "bug_id": "karaf_7bba56d",
        "file": [
            {
                "sha": "81e0cf1dd98d1287187acc3c56ca27615bb3b5d7",
                "filename": "client/src/main/java/org/apache/karaf/client/Main.java",
                "blob_url": "https://github.com/apache/karaf/blob/7bba56d4cccfefa5bf7bf760e97023b1e71ee692/client/src/main/java/org/apache/karaf/client/Main.java",
                "raw_url": "https://github.com/apache/karaf/raw/7bba56d4cccfefa5bf7bf760e97023b1e71ee692/client/src/main/java/org/apache/karaf/client/Main.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/client/src/main/java/org/apache/karaf/client/Main.java?ref=7bba56d4cccfefa5bf7bf760e97023b1e71ee692",
                "patch": "@@ -80,7 +80,9 @@ public static void main(String[] args) throws Exception {\n             client.start();\n             ClientSession session = connectWithRetries(client, config);\n             Console console = System.console();\n-            console.printf(\"Logging in as %s\\n\", config.getUser());\n+            if (console != null) {\n+                console.printf(\"Logging in as %s\\n\", config.getUser());\n+            }\n             if (!session.authAgent(config.getUser()).await().isSuccess()) {\n                 AuthFuture authFuture;\n                 boolean useDefault = config.getPassword() != null;",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "MainTest.java"
        ]
    },
    "karaf_4eed514": {
        "repo": "karaf",
        "message": "Fix possible NPE",
        "commit": "https://github.com/apache/karaf/commit/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f",
        "parent": "https://github.com/apache/karaf/commit/01ffa23d4ea446e5985bb4287eb87af3785146ef",
        "bug_id": "karaf_4eed514",
        "file": [
            {
                "sha": "b7b7af6b27b8b819e63e99a3b8c6caaef7eedf3e",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "blob_url": "https://github.com/apache/karaf/blob/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "raw_url": "https://github.com/apache/karaf/raw/4eed5140dd6af7f4ab857a8aa54339e9621a4d9f/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=4eed5140dd6af7f4ab857a8aa54339e9621a4d9f",
                "patch": "@@ -961,7 +961,7 @@ private void computeBundlesToRefresh(Map<Bundle, String> toRefresh, Collection<B\n                     continue;\n                 }\n                 // Ignore bundles that won't be wired\n-                List<Wire> newWires = resolution.get(resource);\n+                List<Wire> newWires = resolution != null ? resolution.get(resource) : null;\n                 if (newWires == null) {\n                     continue;\n                 }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Deployer.java"
        ],
        "unit_tests": [
            "DeployerTest.java"
        ]
    },
    "karaf_0b6a673": {
        "repo": "karaf",
        "message": "[KARAF-5778] NPE in the ssh client if TERM is null",
        "commit": "https://github.com/apache/karaf/commit/0b6a6736cb461f098e9d59f1986e25e2a480c460",
        "parent": "https://github.com/apache/karaf/commit/c1af4ffcd53cda555056df792aedeccc5de1b880",
        "bug_id": "karaf_0b6a673",
        "file": [
            {
                "sha": "3e90b1a9f678e1e4b2168d557955aba822ac684b",
                "filename": "client/src/main/java/org/apache/karaf/client/Main.java",
                "blob_url": "https://github.com/apache/karaf/blob/0b6a6736cb461f098e9d59f1986e25e2a480c460/client/src/main/java/org/apache/karaf/client/Main.java",
                "raw_url": "https://github.com/apache/karaf/raw/0b6a6736cb461f098e9d59f1986e25e2a480c460/client/src/main/java/org/apache/karaf/client/Main.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/client/src/main/java/org/apache/karaf/client/Main.java?ref=0b6a6736cb461f098e9d59f1986e25e2a480c460",
                "patch": "@@ -51,8 +51,6 @@\n import org.apache.sshd.client.channel.PtyCapableChannelSession;\n import org.apache.sshd.client.future.ConnectFuture;\n import org.apache.sshd.client.session.ClientSession;\n-import org.apache.sshd.common.FactoryManager;\n-import org.apache.sshd.common.PropertyResolverUtils;\n import org.apache.sshd.common.RuntimeSshException;\n import org.apache.sshd.common.channel.PtyMode;\n import org.apache.sshd.common.config.keys.FilePasswordProvider;\n@@ -178,8 +176,16 @@ else if (console != null) {\n             session.auth().verify();\n \n             int exitStatus = 0;\n+            String type = System.getProperty(TerminalBuilder.PROP_TYPE);\n+            if (type == null) {\n+                type = System.getenv(\"TERM\");\n+            }\n+            if (type == null) {\n+                type = Terminal.TYPE_DUMB;\n+            }\n             try (Terminal terminal = TerminalBuilder.builder()\n                         .nativeSignals(true)\n+                        .type(type)\n                         .signalHandler(Terminal.SignalHandler.SIG_IGN)\n                         .build()) {\n                 if (config.getCommand().length() > 0) {",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "MainTest.java"
        ]
    },
    "karaf_5dcbf17": {
        "repo": "karaf",
        "message": "Merge pull request #398 from coheigea/KARAF-5496\n\nKARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified",
        "commit": "https://github.com/apache/karaf/commit/5dcbf1779c7060cbd75b69289a79260fe09503eb",
        "parent": "https://github.com/apache/karaf/commit/a23ee51742dbefab22810d0803ffd1aeff2b8df8",
        "bug_id": "karaf_5dcbf17",
        "file": [
            {
                "sha": "0e4ae973333ee90acda938f5c6b33faf69fd1d28",
                "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "blob_url": "https://github.com/apache/karaf/blob/5dcbf1779c7060cbd75b69289a79260fe09503eb/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "raw_url": "https://github.com/apache/karaf/raw/5dcbf1779c7060cbd75b69289a79260fe09503eb/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java?ref=5dcbf1779c7060cbd75b69289a79260fe09503eb",
                "patch": "@@ -84,7 +84,9 @@ public boolean login() throws LoginException {\n         Credentials creds = new UsernamePasswordCredentials(user, password);\n         client.getCredentialsProvider().setCredentials(AuthScope.ANY, creds);\n         HttpGet get = new HttpGet(address + \"/users/self\");\n-        if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+\n+        boolean version2 = version != null && (version.equals(\"2.x\") || version.equals(\"2\"));\n+        if (version2) {\n             get.setHeader(\"Content-Type\", \"application/json\");\n         } else {\n             get.setHeader(\"Content-Type\", \"application/xml\");\n@@ -102,7 +104,7 @@ public boolean login() throws LoginException {\n             principals.add(new UserPrincipal(user));\n             LOGGER.debug(\"Retrieving user {} roles\", user);\n             String responseSt = EntityUtils.toString(response.getEntity());\n-            if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+            if (version2) {\n                 roles = extractingRolesSyncope2(responseSt);\n             } else {\n                 roles = extractingRolesSyncope1(responseSt);\n@@ -136,7 +138,7 @@ public boolean login() throws LoginException {\n                 response = response.substring(index + \"<memberships>\".length());\n                 index = response.indexOf(\"</memberships>\");\n                 response = response.substring(0, index);\n-    \n+\n                 // looking for the roleName elements\n                 index = response.indexOf(\"<roleName>\");\n                 while (index != -1) {",
                "deletions": 3
            }
        ],
        "patched_files": [
            "SyncopeLoginModule.java"
        ],
        "unit_tests": [
            "SyncopeLoginModuleTest.java"
        ]
    },
    "karaf_9ebb25a": {
        "repo": "karaf",
        "message": "Avoid NPE",
        "commit": "https://github.com/apache/karaf/commit/9ebb25a9d7578d7ee278f26c4fddd851c669a651",
        "parent": "https://github.com/apache/karaf/commit/210af29312197178a44c03ea1b439ce63a1c83fa",
        "bug_id": "karaf_9ebb25a",
        "file": [
            {
                "sha": "aded8af4acb0ccd59b90b9649bbbd64ac68e6989",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "blob_url": "https://github.com/apache/karaf/blob/9ebb25a9d7578d7ee278f26c4fddd851c669a651/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "raw_url": "https://github.com/apache/karaf/raw/9ebb25a9d7578d7ee278f26c4fddd851c669a651/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=9ebb25a9d7578d7ee278f26c4fddd851c669a651",
                "patch": "@@ -727,8 +727,8 @@ public void deploy(DeploymentState dstate, DeploymentRequest request) throws Exc\n                             && isUpdateable(resource) && !deployment.bundleChecksums.containsKey(bundle.getBundleId())) {\n                         deployment.bundleChecksums.put(bundle.getBundleId(), crc);\n                     }\n-                    int startLevel = startLevels.get(resource);\n-                    if (startLevel != dstate.initialBundleStartLevel) {\n+                    Integer startLevel = startLevels.get(resource);\n+                    if (startLevel != null && startLevel != dstate.initialBundleStartLevel) {\n                         callback.setBundleStartLevel(bundle, startLevel);\n                     }\n                     FeatureState reqState = states.get(resource);",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Deployer.java"
        ],
        "unit_tests": [
            "DeployerTest.java"
        ]
    },
    "karaf_0c12184": {
        "repo": "karaf",
        "message": "[KARAF-3404] Fix possible NPE",
        "commit": "https://github.com/apache/karaf/commit/0c1218406bf44d8501aaba531cb4437d474dc843",
        "parent": "https://github.com/apache/karaf/commit/db1143e8966acd535d039cd2b2dbd61ffe9e2092",
        "bug_id": "karaf_0c12184",
        "file": [
            {
                "sha": "7f8d483cb1fe9f626678b0ba58438a6009bd604d",
                "filename": "profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java",
                "blob_url": "https://github.com/apache/karaf/blob/0c1218406bf44d8501aaba531cb4437d474dc843/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java",
                "raw_url": "https://github.com/apache/karaf/raw/0c1218406bf44d8501aaba531cb4437d474dc843/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/profile/src/main/java/org/apache/karaf/profile/impl/Profiles.java?ref=0c1218406bf44d8501aaba531cb4437d474dc843",
                "patch": "@@ -52,7 +52,8 @@\n                 ProfileBuilder builder;\n                 @Override\n                 public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                    if (dir.getFileName().toString().endsWith(PROFILE_FOLDER_SUFFIX)) {\n+                    Path fileName = dir.getFileName();\n+                    if (fileName != null && fileName.toString().endsWith(PROFILE_FOLDER_SUFFIX)) {\n                         String profileId = root.relativize(dir).toString();\n                         profileId = profileId.replaceAll(root.getFileSystem().getSeparator(), \"-\");\n                         profileId = profileId.substring(0, profileId.length() - PROFILE_FOLDER_SUFFIX.length());",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Profiles.java"
        ],
        "unit_tests": [
            "ProfilesTest.java"
        ]
    },
    "karaf_915894b": {
        "repo": "karaf",
        "message": "KARAF-5496 - NPEs in SyncopeLoginModule if \"version\" is not specified",
        "commit": "https://github.com/apache/karaf/commit/915894b5d10f2cd3ca14d537291dc9365003d6a1",
        "parent": "https://github.com/apache/karaf/commit/75f345cbf990134f9dad551591380e76d887bb36",
        "bug_id": "karaf_915894b",
        "file": [
            {
                "sha": "0e4ae973333ee90acda938f5c6b33faf69fd1d28",
                "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "blob_url": "https://github.com/apache/karaf/blob/915894b5d10f2cd3ca14d537291dc9365003d6a1/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "raw_url": "https://github.com/apache/karaf/raw/915894b5d10f2cd3ca14d537291dc9365003d6a1/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/syncope/SyncopeLoginModule.java?ref=915894b5d10f2cd3ca14d537291dc9365003d6a1",
                "patch": "@@ -84,7 +84,9 @@ public boolean login() throws LoginException {\n         Credentials creds = new UsernamePasswordCredentials(user, password);\n         client.getCredentialsProvider().setCredentials(AuthScope.ANY, creds);\n         HttpGet get = new HttpGet(address + \"/users/self\");\n-        if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+\n+        boolean version2 = version != null && (version.equals(\"2.x\") || version.equals(\"2\"));\n+        if (version2) {\n             get.setHeader(\"Content-Type\", \"application/json\");\n         } else {\n             get.setHeader(\"Content-Type\", \"application/xml\");\n@@ -102,7 +104,7 @@ public boolean login() throws LoginException {\n             principals.add(new UserPrincipal(user));\n             LOGGER.debug(\"Retrieving user {} roles\", user);\n             String responseSt = EntityUtils.toString(response.getEntity());\n-            if (version.equals(\"2.x\") || version.equals(\"2\")) {\n+            if (version2) {\n                 roles = extractingRolesSyncope2(responseSt);\n             } else {\n                 roles = extractingRolesSyncope1(responseSt);\n@@ -136,7 +138,7 @@ public boolean login() throws LoginException {\n                 response = response.substring(index + \"<memberships>\".length());\n                 index = response.indexOf(\"</memberships>\");\n                 response = response.substring(0, index);\n-    \n+\n                 // looking for the roleName elements\n                 index = response.indexOf(\"<roleName>\");\n                 while (index != -1) {",
                "deletions": 3
            }
        ],
        "patched_files": [
            "SyncopeLoginModule.java"
        ],
        "unit_tests": [
            "SyncopeLoginModuleTest.java"
        ]
    },
    "karaf_e390a81": {
        "repo": "karaf",
        "message": "[kARAF-3651] The karaf client can cause a NPE in org.apache.sshd.common.util.Buffer.putString(Buffer.java:434)",
        "commit": "https://github.com/apache/karaf/commit/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac",
        "parent": "https://github.com/apache/karaf/commit/762bae6e85932bfc059a32bbb4aa98894cb3f366",
        "bug_id": "karaf_e390a81",
        "file": [
            {
                "sha": "65bcedf83ae6cd5bf9fe4fe01ed16aa96f549899",
                "filename": "client/src/main/java/org/apache/karaf/client/Main.java",
                "blob_url": "https://github.com/apache/karaf/blob/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac/client/src/main/java/org/apache/karaf/client/Main.java",
                "raw_url": "https://github.com/apache/karaf/raw/e390a81eaf89c408a2ba8c5c3671b82d99ae5fac/client/src/main/java/org/apache/karaf/client/Main.java",
                "status": "modified",
                "changes": 32,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/client/src/main/java/org/apache/karaf/client/Main.java?ref=e390a81eaf89c408a2ba8c5c3671b82d99ae5fac",
                "patch": "@@ -77,31 +77,35 @@ public static void main(String[] args) throws Exception {\n         Terminal terminal = null;\n         int exitStatus = 0;\n         try {\n-            final Console console = System.console();\n             client = SshClient.setUpDefaultClient();\n             setupAgent(config.getUser(), config.getKeyFile(), client);\n-            client.setUserInteraction(new UserInteraction() {\n-                public void welcome(String banner) {\n-                    System.out.println(banner);\n-                }\n+            final Console console = System.console();\n+            if (console != null) {\n+                client.setUserInteraction(new UserInteraction() {\n+                    public void welcome(String banner) {\n+                        System.out.println(banner);\n+                    }\n \n-                public String[] interactive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {\n-                    String[] answers = new String[prompt.length];\n-                    try {\n-                        for (int i = 0; i < prompt.length; i++) {\n-                            if (console != null) {\n+                    public String[] interactive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {\n+                        String[] answers = new String[prompt.length];\n+                        try {\n+                            for (int i = 0; i < prompt.length; i++) {\n                                 if (echo[i]) {\n                                     answers[i] = console.readLine(prompt[i] + \" \");\n                                 } else {\n                                     answers[i] = new String(console.readPassword(prompt[i] + \" \"));\n                                 }\n+                                if (answers[i] == null) {\n+                                    return null;\n+                                }\n                             }\n+                            return answers;\n+                        } catch (IOError e) {\n+                            return null;\n                         }\n-                    } catch (IOError e) {\n                     }\n-                    return answers;\n-                }\n-            });\n+                });\n+            }\n             client.start();\n             if (console != null) {\n                 console.printf(\"Logging in as %s\\n\", config.getUser());",
                "deletions": 14
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "MainTest.java"
        ]
    },
    "karaf_f734dfc": {
        "repo": "karaf",
        "message": "[KARAF-6329] Prevent NPE on shutdown in features service",
        "commit": "https://github.com/apache/karaf/commit/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856",
        "parent": "https://github.com/apache/karaf/commit/c5cd8e5522b5f64c267fe8d10b4e0c1a181b6c64",
        "bug_id": "karaf_f734dfc",
        "file": [
            {
                "sha": "28226e6d359257472af188d24f562a4408c58c67",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "blob_url": "https://github.com/apache/karaf/blob/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "raw_url": "https://github.com/apache/karaf/raw/f734dfc42fb705d91a3df0a2e1f3ee2a5047c856/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java?ref=f734dfc42fb705d91a3df0a2e1f3ee2a5047c856",
                "patch": "@@ -303,8 +303,12 @@ public void modifiedService(ServiceReference<FeaturesListener> reference, Featur\n     \n                     @Override\n                     public void removedService(ServiceReference<FeaturesListener> reference, FeaturesListener service) {\n-                        featuresService.unregisterListener(service);\n-                        bundleContext.ungetService(reference);\n+                        if (featuresService != null && service != null) {\n+                            featuresService.unregisterListener(service);\n+                        }\n+                        if (bundleContext != null && reference != null) {\n+                            bundleContext.ungetService(reference);\n+                        }\n                     }\n                 }\n         );",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Activator.java"
        ],
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "karaf_5ab0681": {
        "repo": "karaf",
        "message": "Merge pull request #877 from jbonofre/KARAF-6329\n\n[KARAF-6329] Prevent NPE on shutdown in features service",
        "commit": "https://github.com/apache/karaf/commit/5ab0681619c287688885ed7bb06ba78690cc981a",
        "parent": "https://github.com/apache/karaf/commit/a0629fac921754e0254eee3305bd85a6fa7d2925",
        "bug_id": "karaf_5ab0681",
        "file": [
            {
                "sha": "28226e6d359257472af188d24f562a4408c58c67",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "blob_url": "https://github.com/apache/karaf/blob/5ab0681619c287688885ed7bb06ba78690cc981a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "raw_url": "https://github.com/apache/karaf/raw/5ab0681619c287688885ed7bb06ba78690cc981a/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java?ref=5ab0681619c287688885ed7bb06ba78690cc981a",
                "patch": "@@ -303,8 +303,12 @@ public void modifiedService(ServiceReference<FeaturesListener> reference, Featur\n     \n                     @Override\n                     public void removedService(ServiceReference<FeaturesListener> reference, FeaturesListener service) {\n-                        featuresService.unregisterListener(service);\n-                        bundleContext.ungetService(reference);\n+                        if (featuresService != null && service != null) {\n+                            featuresService.unregisterListener(service);\n+                        }\n+                        if (bundleContext != null && reference != null) {\n+                            bundleContext.ungetService(reference);\n+                        }\n                     }\n                 }\n         );",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Activator.java"
        ],
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "karaf_b220722": {
        "repo": "karaf",
        "message": "add a NPE checker",
        "commit": "https://github.com/apache/karaf/commit/b220722c3652bf02ca00150d0decb2509b83adc0",
        "parent": "https://github.com/apache/karaf/commit/f74a1dcdcf28f0615ab28519716b844c20b84edc",
        "bug_id": "karaf_b220722",
        "file": [
            {
                "sha": "c11d54a473f211ce8fc6b8de7f7feb5bf4c44e37",
                "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java",
                "blob_url": "https://github.com/apache/karaf/blob/b220722c3652bf02ca00150d0decb2509b83adc0/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java",
                "raw_url": "https://github.com/apache/karaf/raw/b220722c3652bf02ca00150d0decb2509b83adc0/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/properties/PropertiesLoginModule.java?ref=b220722c3652bf02ca00150d0decb2509b83adc0",
                "patch": "@@ -59,9 +59,10 @@ public void initialize(Subject sub, CallbackHandler handler, Map sharedState, Ma\n             LOGGER.debug(\"Initialized debug={} usersFile={}\", debug, usersFile);\n         }\n        \n-        if (propertiesInstaller == null || !usersFile.equals(propertiesInstaller.getUsersFileName()) ) {\n+        if (propertiesInstaller == null \n+            || (usersFile != null && !usersFile.equals(propertiesInstaller.getUsersFileName())) ) {\n        \n-            LOG.debug(\"Register PropertiesInstaller service\");\n+            LOGGER.debug(\"Register PropertiesInstaller service\");\n             \n             propertiesInstaller = new PropertiesInstaller(this, usersFile);\n             if (this.bundleContext != null) {",
                "deletions": 2
            }
        ],
        "patched_files": [
            "PropertiesLoginModule.java"
        ],
        "unit_tests": [
            "PropertiesLoginModuleTest.java"
        ]
    },
    "karaf_ea78c61": {
        "repo": "karaf",
        "message": "KARAF-1296 Bugfix. Avoid NPE when there is an exception in launch and lockManager is not yet initialized\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1334999 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6",
        "parent": "https://github.com/apache/karaf/commit/ca2286f899e1847672b61463882ffa6cce6fe89c",
        "bug_id": "karaf_ea78c61",
        "file": [
            {
                "sha": "bea1e37e667d378eebfa80a5311cc29ed46315d0",
                "filename": "main/src/main/java/org/apache/karaf/main/Main.java",
                "blob_url": "https://github.com/apache/karaf/blob/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6/main/src/main/java/org/apache/karaf/main/Main.java",
                "raw_url": "https://github.com/apache/karaf/raw/ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6/main/src/main/java/org/apache/karaf/main/Main.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/Main.java?ref=ea78c61ef44d60f2f7234157b11cce9e2ea9cdc6",
                "patch": "@@ -32,6 +32,7 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.StringTokenizer;\n+import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import org.apache.karaf.info.ServerInfo;\n@@ -167,10 +168,9 @@ public static void main(String[] args) throws Exception {\n             try {\n                 main.launch();\n             } catch (Throwable ex) {\n+                main.LOG.log(Level.SEVERE, \"Could not launch framework\", ex);\n                 main.destroy();\n                 main.setExitCode(-1);\n-                System.err.println(\"Could not create framework: \" + ex);\n-                ex.printStackTrace();\n             }\n             try {\n                 main.awaitShutdown();\n@@ -206,6 +206,8 @@ public void setShutdownCallback(ShutdownCallback shutdownCallback) {\n \n     public void launch() throws Exception {\n         config = new ConfigProperties();\n+        Lock lock = createLock();\n+        lockManager = new LockManager(lock, new KarafLockCallback(), config.lockDelay);\n         InstanceHelper.updateInstancePid(config.karafHome, config.karafBase);\n         BootstrapLogManager.setProperties(config.props);\n         LOG.addHandler(BootstrapLogManager.getDefaultHandler());\n@@ -235,8 +237,6 @@ public void launch() throws Exception {\n         activatorManager = new KarafActivatorManager(classLoader, framework);\n         activatorManager.startKarafActivators();\n         \n-        Lock lock = createLock();\n-        lockManager = new LockManager(lock, new KarafLockCallback(), config.lockDelay);\n         setStartLevel(config.lockStartLevel);\n         lockManager.startLockMonitor();\n     }\n@@ -441,7 +441,9 @@ public void run() {\n             }\n             return false;\n         } finally {\n-            lockManager.stopLockMonitor();\n+            if (lockManager != null) {\n+                lockManager.stopLockMonitor();\n+            }\n         }\n     }\n     ",
                "deletions": 5
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "MainTest.java"
        ]
    },
    "karaf_c892504": {
        "repo": "karaf",
        "message": "[KARAF-6252] Avoid NullPointerException while removing a features repository with location changed locally",
        "commit": "https://github.com/apache/karaf/commit/c892504ac9a9eafaf01e2d8bbe90c88bc4f86541",
        "parent": "https://github.com/apache/karaf/commit/3fca012f5eafe87792612d24380cef22a9760358",
        "bug_id": "karaf_c892504",
        "file": [
            {
                "sha": "1924973d94379b4c2bccafd75ffad6bb94068af1",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/c892504ac9a9eafaf01e2d8bbe90c88bc4f86541/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/c892504ac9a9eafaf01e2d8bbe90c88bc4f86541/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java?ref=c892504ac9a9eafaf01e2d8bbe90c88bc4f86541",
                "patch": "@@ -423,7 +423,11 @@ public void removeRepository(URI uri, boolean uninstall) throws Exception {\n             for (String r : state.repositories) {\n                 if (!uri.toString().equals(r)) {\n                     Repository rep = repositories.getRepository(r);\n-                    repos.addAll(repositories.getRepositoryClosure(rep));\n+                    if (rep != null) {\n+                        repos.addAll(repositories.getRepositoryClosure(rep));\n+                    } else {\n+                        throw new IllegalArgumentException(\"Repository URI \" + uri + \" seems to have changed, can't remove repository\");\n+                    }\n                 }\n             }\n             for (Repository rep : repos) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_58f6fb7": {
        "repo": "karaf",
        "message": "Fixing NPE in build as is may have been null below\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1341020 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb",
        "parent": "https://github.com/apache/karaf/commit/74b9fddfbbf7bc17240ace93c902089dd3885428",
        "bug_id": "karaf_58f6fb7",
        "file": [
            {
                "sha": "2aa483bf0bf0bd02d373b592088a88cd6a04efcb",
                "filename": "tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "blob_url": "https://github.com/apache/karaf/blob/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "raw_url": "https://github.com/apache/karaf/raw/58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/tooling/karaf-maven-plugin/src/main/java/org/apache/karaf/tooling/features/GenerateDescriptorMojo.java?ref=58f6fb73dd261e2fe1e4880ceb7fd571673ac1fb",
                "patch": "@@ -386,6 +386,7 @@ private Manifest getManifest(File file) throws IOException {\n             is = new BufferedInputStream(new FileInputStream(file));\n         } catch (Exception e) {\n             getLogger().warn(\"Error while opening artifact\", e);\n+            return null;\n         }\n \n         try {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "GenerateDescriptorMojo.java"
        ],
        "unit_tests": [
            "GenerateDescriptorMojoTest.java"
        ]
    },
    "karaf_78ead5e": {
        "repo": "karaf",
        "message": "Merge pull request #845 from jbonofre/KARAF-6252\n\n[KARAF-6252] Avoid NullPointerException while removing a features repository with location changed locally",
        "commit": "https://github.com/apache/karaf/commit/78ead5e1c6cd57b41ee85096dbabedbcbe454bcc",
        "parent": "https://github.com/apache/karaf/commit/3fca012f5eafe87792612d24380cef22a9760358",
        "bug_id": "karaf_78ead5e",
        "file": [
            {
                "sha": "1924973d94379b4c2bccafd75ffad6bb94068af1",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/78ead5e1c6cd57b41ee85096dbabedbcbe454bcc/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/78ead5e1c6cd57b41ee85096dbabedbcbe454bcc/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java?ref=78ead5e1c6cd57b41ee85096dbabedbcbe454bcc",
                "patch": "@@ -423,7 +423,11 @@ public void removeRepository(URI uri, boolean uninstall) throws Exception {\n             for (String r : state.repositories) {\n                 if (!uri.toString().equals(r)) {\n                     Repository rep = repositories.getRepository(r);\n-                    repos.addAll(repositories.getRepositoryClosure(rep));\n+                    if (rep != null) {\n+                        repos.addAll(repositories.getRepositoryClosure(rep));\n+                    } else {\n+                        throw new IllegalArgumentException(\"Repository URI \" + uri + \" seems to have changed, can't remove repository\");\n+                    }\n                 }\n             }\n             for (Repository rep : repos) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_a8562f0": {
        "repo": "karaf",
        "message": "KARAF-133: NPE when installing a bundle with a MANIFEST.MF not in the first entry of the zip\nPatch provided by Ioannis Canellos\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@985818 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/a8562f09711da32f0094d4edaf77377c16277118",
        "parent": "https://github.com/apache/karaf/commit/0605a289bc98a0d1dbde2b9b98052c4c23a4d3bc",
        "bug_id": "karaf_a8562f0",
        "file": [
            {
                "sha": "8e971a894b421d1f7f1385408310d4a562d42b6e",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/a8562f09711da32f0094d4edaf77377c16277118/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/a8562f09711da32f0094d4edaf77377c16277118/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java?ref=a8562f09711da32f0094d4edaf77377c16277118",
                "patch": "@@ -557,6 +557,9 @@ protected Bundle installBundleIfNeeded(InstallationState state, BundleInfo bundl\n             is.mark(256 * 1024);\n             JarInputStream jar = new JarInputStream(is);\n             Manifest m = jar.getManifest();\n+            if(m == null) {\n+                throw new BundleException(\"Manifest not present in the first entry of the zip\");\n+            }\n             String sn = m.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME);\n             String vStr = m.getMainAttributes().getValue(Constants.BUNDLE_VERSION);\n             Version v = vStr == null ? Version.emptyVersion : Version.parseVersion(vStr);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_ab4c9e8": {
        "repo": "karaf",
        "message": "add NPE guard for proxyService",
        "commit": "https://github.com/apache/karaf/commit/ab4c9e857c5b5a0938622efc6a457b145644bfe8",
        "parent": "https://github.com/apache/karaf/commit/cc06aeb296a1866727692280a6907ef563ce8e42",
        "bug_id": "karaf_ab4c9e8",
        "file": [
            {
                "sha": "6be368ba05ff7e27488d72bfefcc3c26d6599f48",
                "filename": "http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java",
                "blob_url": "https://github.com/apache/karaf/blob/ab4c9e857c5b5a0938622efc6a457b145644bfe8/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java",
                "raw_url": "https://github.com/apache/karaf/raw/ab4c9e857c5b5a0938622efc6a457b145644bfe8/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/http/src/main/java/org/apache/karaf/http/core/internal/osgi/Activator.java?ref=ab4c9e857c5b5a0938622efc6a457b145644bfe8",
                "patch": "@@ -98,6 +98,8 @@ protected void doStop() {\n \n     @Override\n     public void updated(Dictionary<String, ?> properties) {\n-        proxyService.initProxies();\n+        if (proxyService != null) {\n+            proxyService.initProxies();\n+        }\n     }\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "Activator.java"
        ],
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "karaf_9b4a050": {
        "repo": "karaf",
        "message": "Fix possible NPE",
        "commit": "https://github.com/apache/karaf/commit/9b4a050ec78869f4e690c81d06a4b129ce3defca",
        "parent": "https://github.com/apache/karaf/commit/981239128f69f31dbd89cb6ddabf8a416d1606e1",
        "bug_id": "karaf_9b4a050",
        "file": [
            {
                "sha": "aed352ef1ef5be9d666da6ed34d160471856ce53",
                "filename": "service/core/src/main/java/org/apache/karaf/service/command/ListServices.java",
                "blob_url": "https://github.com/apache/karaf/blob/9b4a050ec78869f4e690c81d06a4b129ce3defca/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java",
                "raw_url": "https://github.com/apache/karaf/raw/9b4a050ec78869f4e690c81d06a4b129ce3defca/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/service/core/src/main/java/org/apache/karaf/service/command/ListServices.java?ref=9b4a050ec78869f4e690c81d06a4b129ce3defca",
                "patch": "@@ -122,9 +122,10 @@ private void printServiceRef(ServiceReference<?> serviceRef) {\n         String bundleName = ShellUtil.getBundleName(serviceRef.getBundle());\n         System.out.println(\"Provided by : \");\n         System.out.println(\" \" + bundleName);\n-        if (serviceRef.getUsingBundles() != null) {\n-        System.out.println(\"Used by: \");\n-            for (Bundle bundle : serviceRef.getUsingBundles()) {\n+        Bundle[] usingBundles = serviceRef.getUsingBundles();\n+        if (usingBundles != null) {\n+            System.out.println(\"Used by: \");\n+            for (Bundle bundle : usingBundles) {\n                 System.out.println(\" \" + ShellUtil.getBundleName(bundle));\n             }\n         }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "ListServices.java"
        ],
        "unit_tests": [
            "ListServicesTest.java"
        ]
    },
    "karaf_735580d": {
        "repo": "karaf",
        "message": "test fixes: checked for NPE ... \n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1496022 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/735580d25a83e350bd40de63f00d567c9b40a298",
        "parent": "https://github.com/apache/karaf/commit/595de92418350e3a2e6cc1e5ede8cb7c682c3759",
        "bug_id": "karaf_735580d",
        "file": [
            {
                "sha": "1412e4b4c370fa9d3e54070b11fc0b6274b84103",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/735580d25a83e350bd40de63f00d567c9b40a298/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/735580d25a83e350bd40de63f00d567c9b40a298/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/FeaturesServiceImpl.java?ref=735580d25a83e350bd40de63f00d567c9b40a298",
                "patch": "@@ -650,7 +650,12 @@ public void uninstallFeature(String name, String version) throws Exception {\n \n         //Also remove bundles installed as conditionals\n         for (Conditional conditional : feature.getConditional()) {\n-            bundles.addAll(installed.remove(conditional.asFeature(feature.getName(),feature.getVersion())));\n+            Feature conditionalFeature = conditional.asFeature(feature.getName(),feature.getVersion());\n+            if (installed.containsKey(conditionalFeature)) {\n+            \tbundles.addAll(installed.remove(conditionalFeature));\n+            } else {\n+            \tLOGGER.info(\"Conditional feature {}, hasn't been installed!\");\n+            }\n         }\n \n         for (Set<Long> b : installed.values()) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FeaturesServiceImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_63bce35": {
        "repo": "karaf",
        "message": "try to avoid an npe for early start failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1173914 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/63bce35cda6bf662e779db63fe8e418ee527a037",
        "parent": "https://github.com/apache/karaf/commit/397a0c3557041da41af358d3a33c9e582d24ac44",
        "bug_id": "karaf_63bce35",
        "file": [
            {
                "sha": "1f227adbfa50160e630c0a39b8ddfb5a53307ced",
                "filename": "main/src/main/java/org/apache/karaf/main/Main.java",
                "blob_url": "https://github.com/apache/karaf/blob/63bce35cda6bf662e779db63fe8e418ee527a037/main/src/main/java/org/apache/karaf/main/Main.java",
                "raw_url": "https://github.com/apache/karaf/raw/63bce35cda6bf662e779db63fe8e418ee527a037/main/src/main/java/org/apache/karaf/main/Main.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/Main.java?ref=63bce35cda6bf662e779db63fe8e418ee527a037",
                "patch": "@@ -469,8 +469,10 @@ public static void main(String[] args) throws Exception {\n \t\t\ttry {\n \t\t\t\tmanager = main.launch();\n \t\t\t} catch (Throwable ex) {\n-\t\t\t\tmain.lifecycleManager.destroyKaraf();\n-\t\t\t\texitCode = -1;\n+                if (main.lifecycleManager != null) {\n+                    main.lifecycleManager.destroyKaraf();\n+                }\n+                exitCode = -1;\n \t\t\t\tSystem.err.println(\"Could not create framework: \" + ex);\n \t\t\t\tex.printStackTrace();\n \t\t\t}",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Main.java"
        ],
        "unit_tests": [
            "MainTest.java"
        ]
    },
    "karaf_f1c1711": {
        "repo": "karaf",
        "message": "KARAF-65: NPE in StandardEmitterMBean on JDK 6\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@958959 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9",
        "parent": "https://github.com/apache/karaf/commit/cc9e07d28f6d2af79a1ba5176fdc53de311db413",
        "bug_id": "karaf_f1c1711",
        "file": [
            {
                "sha": "487b4b09f44a37959e38d293501fed037d09f56d",
                "filename": "features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/main/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImpl.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9",
                "patch": "@@ -61,12 +61,7 @@\n     private FeaturesService featuresService;\n \n     public FeaturesServiceMBeanImpl() throws NotCompliantMBeanException {\n-        super(FeaturesServiceMBean.class, new NotificationBroadcasterSupport() {\n-            @Override\n-            public MBeanNotificationInfo[] getNotificationInfo() {\n-                return getBroadcastInfo();\n-            }\n-        });\n+        super(FeaturesServiceMBean.class);\n     }\n \n     public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {\n@@ -175,6 +170,9 @@ public void repositoryEvent(RepositoryEvent event) {\n         };\n     }\n \n+    public MBeanNotificationInfo[] getNotificationInfo() {\n+        return getBroadcastInfo();\n+    }\n \n     private static MBeanNotificationInfo[] getBroadcastInfo() {\n         String type = Notification.class.getCanonicalName();",
                "deletions": 6
            },
            {
                "sha": "58f587c6f4d5ddbc90603492d1365c4beaea85e1",
                "filename": "features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java",
                "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java",
                "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/main/java/org/apache/karaf/features/management/internal/StandardEmitterMBean.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9",
                "patch": "@@ -17,11 +17,16 @@\n \n public class StandardEmitterMBean extends StandardMBean implements NotificationEmitter {\n \n-    private NotificationBroadcasterSupport emitter;\n+    private final NotificationBroadcasterSupport emitter;\n \n-    public StandardEmitterMBean(Class mbeanInterface, NotificationBroadcasterSupport emitter) throws NotCompliantMBeanException {\n+    public StandardEmitterMBean(Class mbeanInterface) throws NotCompliantMBeanException {\n         super(mbeanInterface);\n-        this.emitter = emitter;\n+        this.emitter = new NotificationBroadcasterSupport() {\n+            @Override\n+            public MBeanNotificationInfo[] getNotificationInfo() {\n+                return StandardEmitterMBean.this.getNotificationInfo();\n+            }\n+        };\n     }\n \n     public void sendNotification(Notification notification) {\n@@ -42,7 +47,7 @@ public void removeNotificationListener(NotificationListener listener) throws Lis\n     }\n \n     public MBeanNotificationInfo[] getNotificationInfo() {\n-        return emitter.getNotificationInfo();\n+        return new MBeanNotificationInfo[0];\n     }\n \n     @Override",
                "deletions": 4
            },
            {
                "sha": "0a8a00e992544108fc2f9c43755e2a9225d9e355",
                "filename": "features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/f1c17118548c62c9f6b99555ba54abf1fd1d0dd9/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java",
                "status": "added",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/management/src/test/java/org/apache/karaf/features/management/internal/FeaturesServiceMBeanImplTest.java?ref=f1c17118548c62c9f6b99555ba54abf1fd1d0dd9",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.karaf.features.management.internal;\n+\n+import org.junit.Test;\n+\n+public class FeaturesServiceMBeanImplTest {\n+\n+    @Test\n+    public void testInstantiation() throws Exception {\n+        new FeaturesServiceMBeanImpl();\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "StandardEmitterMBean.java",
            "FeaturesServiceMBeanImpl.java"
        ],
        "unit_tests": [
            "FeaturesServiceMBeanImplTest.java"
        ]
    },
    "karaf_b867058": {
        "repo": "karaf",
        "message": "[KARAF-3487] Fix NPE on config:edit command",
        "commit": "https://github.com/apache/karaf/commit/b867058ed1b875778382b4fb241a24efb5158bd5",
        "parent": "https://github.com/apache/karaf/commit/afbd611de8a9d728f50c67bd8c627ce47c0a8f50",
        "bug_id": "karaf_b867058",
        "file": [
            {
                "sha": "3fcd82063133c0d865a16bc517d88e6473129f1d",
                "filename": "config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "blob_url": "https://github.com/apache/karaf/blob/b867058ed1b875778382b4fb241a24efb5158bd5/config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "raw_url": "https://github.com/apache/karaf/raw/b867058ed1b875778382b4fb241a24efb5158bd5/config/src/main/java/org/apache/karaf/config/command/EditCommand.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/config/src/main/java/org/apache/karaf/config/command/EditCommand.java?ref=b867058ed1b875778382b4fb241a24efb5158bd5",
                "patch": "@@ -50,6 +50,9 @@ protected Object doExecute() throws Exception {\n         \n         if (pid.startsWith(\"(\")) {\n         \tConfiguration[] configs = this.configRepository.getConfigAdmin().listConfigurations(pid);\n+            if (configs == null) {\n+                throw new RuntimeException(\"No config found\");\n+            }\n         \tif (configs.length == 0) {\n         \t\tthrow new RuntimeException(\"Filter matches no config\");\n         \t}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EditCommand.java"
        ],
        "unit_tests": [
            "EditCommandTest.java"
        ]
    },
    "karaf_3c4ad74": {
        "repo": "karaf",
        "message": "[KARAF-1029] Added a check to avoid possible NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1205972 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/3c4ad74076a98191cca7b3b58eececd3f58e1ea0",
        "parent": "https://github.com/apache/karaf/commit/bf09e61c0a40a7e6537203f38ef834d8fb354dbb",
        "bug_id": "karaf_3c4ad74",
        "file": [
            {
                "sha": "32a077b4c52fc0349bac4926b0a9ecdca82d293f",
                "filename": "shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java",
                "blob_url": "https://github.com/apache/karaf/blob/3c4ad74076a98191cca7b3b58eececd3f58e1ea0/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java",
                "raw_url": "https://github.com/apache/karaf/raw/3c4ad74076a98191cca7b3b58eececd3f58e1ea0/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/console/src/main/java/org/apache/karaf/shell/console/completer/ArgumentCompleter.java?ref=3c4ad74076a98191cca7b3b58eececd3f58e1ea0",
                "patch": "@@ -253,16 +253,17 @@ public int complete(final String buffer, final int cursor,\n                     if (option != null) {\n                         Completer optionValueCompleter = null;\n                         String name = option.name();\n-                        optionValueCompleter = optionalCompleters.get(name);\n-                        if(optionValueCompleter == null) {\n-                            String[] aliases = option.aliases();\n-                            if(aliases.length > 0 ) {\n-                                for(int i=0; i < aliases.length && optionValueCompleter == null; i++) {\n-                                    optionValueCompleter = optionalCompleters.get(option.aliases()[i]);\n+                        if (optionalCompleters != null && name != null) {\n+                            optionValueCompleter = optionalCompleters.get(name);\n+                            if (optionValueCompleter == null) {\n+                                String[] aliases = option.aliases();\n+                                if (aliases.length > 0) {\n+                                    for (int i = 0; i < aliases.length && optionValueCompleter == null; i++) {\n+                                        optionValueCompleter = optionalCompleters.get(option.aliases()[i]);\n+                                    }\n                                 }\n                             }\n                         }\n-\n                         if(optionValueCompleter != null) {\n                             comp = optionValueCompleter;\n                         }",
                "deletions": 7
            }
        ],
        "patched_files": [
            "ArgumentCompleter.java"
        ],
        "unit_tests": [
            "ArgumentCompleterTest.java"
        ]
    },
    "karaf_8263abe": {
        "repo": "karaf",
        "message": "FELIX-2169: Improve dev:show-tree performance and avoid NPE when no matching export is found\n\ngit-svn-id: https://svn.apache.org/repos/asf/felix/trunk/karaf@918963 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/8263abe51985988e9eaf259500b936103048b857",
        "parent": "https://github.com/apache/karaf/commit/5a2fd3b1e9501106347dc62748987b9a648850e4",
        "bug_id": "karaf_8263abe",
        "file": [
            {
                "sha": "d148c4803ed48977ed06e9273ed84adacd51c664",
                "filename": "assembly/src/main/descriptors/unix-bin.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/unix-bin.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/unix-bin.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/descriptors/unix-bin.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -170,6 +170,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+       <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>",
                "deletions": 0
            },
            {
                "sha": "995eed193ac1f1de3781a198b35d2e452e3cb2ed",
                "filename": "assembly/src/main/descriptors/windows-bin.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/windows-bin.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/descriptors/windows-bin.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/descriptors/windows-bin.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -162,6 +162,15 @@\n                 <include>org.ops4j.pax.url:pax-url-wrap</include>\n             </includes>\n         </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/system</outputDirectory>\n+            <unpack>false</unpack>\n+            <useProjectArtifact>false</useProjectArtifact>\n+            <outputFileNameMapping>org/apache/felix/karaf/${artifact.artifactId}/${artifact.baseVersion}/${artifact.artifactId}-${artifact.baseVersion}${dashClassifier?}.${artifact.extension}</outputFileNameMapping>\n+            <includes>\n+                <include>org.apache.felix.karaf:org.apache.felix.karaf.commons</include>\n+            </includes>\n+        </dependencySet>\n         <dependencySet>\n             <outputDirectory>/system</outputDirectory>\n             <unpack>false</unpack>",
                "deletions": 0
            },
            {
                "sha": "63c3cd0ada9fbdd813a46ca3073eb7674d6f6c35",
                "filename": "assembly/src/main/filtered-resources/etc/startup.properties",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/filtered-resources/etc/startup.properties",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/assembly/src/main/filtered-resources/etc/startup.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/assembly/src/main/filtered-resources/etc/startup.properties?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -36,6 +36,7 @@ org/apache/felix/org.apache.felix.fileinstall/${felix.fileinstall.version}/org.a\n #\n org/apache/aries/blueprint/org.apache.aries.blueprint/${aries.blueprint.version}/org.apache.aries.blueprint-${aries.blueprint.version}.jar=20\n \n+org/apache/felix/karaf/org.apache.felix.karaf.commons/${pom.version}/org.apache.felix.karaf.commons-${pom.version}.jar=30\n org/apache/felix/gogo/org.apache.felix.gogo.runtime/${felix.gogo.version}/org.apache.felix.gogo.runtime-${felix.gogo.version}.jar=30\n org/apache/felix/karaf/shell/org.apache.felix.karaf.shell.console/${pom.version}/org.apache.felix.karaf.shell.console-${pom.version}.jar=30\n org/apache/felix/karaf/deployer/org.apache.felix.karaf.deployer.spring/${pom.version}/org.apache.felix.karaf.deployer.spring-${pom.version}.jar=30",
                "deletions": 0
            },
            {
                "sha": "f491e69987d42efbf384deaf9c91e7c00cf25048",
                "filename": "commons/pom.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/commons/pom.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/commons/pom.xml",
                "status": "added",
                "changes": 70,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/commons/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <!--\n+\n+      Licensed to the Apache Software Foundation (ASF) under one or more\n+      contributor license agreements.  See the NOTICE file distributed with\n+      this work for additional information regarding copyright ownership.\n+      The ASF licenses this file to You under the Apache License, Version 2.0\n+      (the \"License\"); you may not use this file except in compliance with\n+      the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+      Unless required by applicable law or agreed to in writing, software\n+      distributed under the License is distributed on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+      See the License for the specific language governing permissions and\n+      limitations under the License.\n+  -->\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <artifactId>karaf</artifactId>\n+    <groupId>org.apache.felix.karaf</groupId>\n+    <version>1.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <groupId>org.apache.felix.karaf</groupId>\n+  <artifactId>org.apache.felix.karaf.commons</artifactId>\n+  <version>1.5.0-SNAPSHOT</version>\n+  <packaging>bundle</packaging>\n+  <name>Apache Felix Karaf :: Commons</name>\n+\n+  <properties>\n+    <appendedResourcesDirectory>${basedir}/../etc/appended-resources</appendedResourcesDirectory>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.felix</groupId>\n+      <artifactId>org.osgi.core</artifactId>\n+      <scope>provided</scope>\n+    </dependency>    \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+        <configuration>\n+          <instructions>\n+            <Bundle-SymbolicName>${pom.artifactId}</Bundle-SymbolicName>\n+            <Export-Package>${pom.artifactId}*;version=${project.version}</Export-Package>\n+            <Import-Package>\n+                !${pom.artifactId}*,\n+                *\n+            </Import-Package>\n+            <_versionpolicy>${bnd.version.policy}</_versionpolicy>\n+          </instructions>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+</project>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "47045deefc36bc8e74695906c9d4c1ed449d59e6",
                "filename": "commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java",
                "status": "renamed",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/commons/src/main/java/org/apache/felix/karaf/commons/osgi/VersionRange.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.felix.karaf.features.internal;\n+package org.apache.felix.karaf.commons.osgi;\n \n import org.osgi.framework.Version;\n ",
                "deletions": 1,
                "previous_filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/VersionRange.java"
            },
            {
                "sha": "58c19ea8d6d1a27ea7583e686f44345523574d90",
                "filename": "features/core/pom.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/features/core/pom.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/features/core/pom.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -54,6 +54,11 @@\n             <artifactId>org.apache.felix.bundlerepository</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.apache.felix.karaf</groupId>\n+            <artifactId>org.apache.felix.karaf.commons</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.felix.karaf.shell</groupId>\n             <artifactId>org.apache.felix.karaf.shell.console</artifactId>",
                "deletions": 0
            },
            {
                "sha": "5bbf00067fdb2e6fd50fbf9612df1f1f2e4c0abc",
                "filename": "features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/felix/karaf/features/internal/FeaturesServiceImpl.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -40,6 +40,7 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.apache.felix.karaf.features.FeaturesService;\n import org.apache.felix.karaf.features.Feature;\n import org.apache.felix.karaf.features.Repository;",
                "deletions": 0
            },
            {
                "sha": "88eeb5cd6b2c98fd5ec18dcd938a887f9218067e",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/pom.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/pom.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -35,6 +35,7 @@\n \n     <modules>\n         <module>main</module>\n+        <module>commons</module>\n         <module>features</module>\n         <module>admin</module>\n         <module>deployer</module>\n@@ -170,6 +171,11 @@\n                 <artifactId>org.apache.felix.karaf.client</artifactId>\n                 <version>${pom.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.felix.karaf</groupId>\n+                <artifactId>org.apache.felix.karaf.commons</artifactId>\n+                <version>${pom.version}</version>\n+            </dependency>\n             <dependency>\n                 <groupId>org.apache.felix.karaf.deployer</groupId>\n                 <artifactId>org.apache.felix.karaf.deployer.spring</artifactId>",
                "deletions": 0
            },
            {
                "sha": "406df26f0c3b83d47c8713cead0a2d20e5a2b693",
                "filename": "shell/dev/pom.xml",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/pom.xml",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/pom.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/pom.xml?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -36,6 +36,11 @@\n         <artifactId>org.apache.felix.karaf.shell.console</artifactId>\n     </dependency>\n \n+    <dependency>\n+        <groupId>org.apache.felix.karaf</groupId>\n+        <artifactId>org.apache.felix.karaf.commons</artifactId>\n+    </dependency>\n+\n     <dependency>\n         <groupId>org.ops4j.pax.url</groupId>\n         <artifactId>pax-url-wrap</artifactId>",
                "deletions": 0
            },
            {
                "sha": "c46127489156039713eb3df35b37155dedf70c47",
                "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java",
                "status": "modified",
                "changes": 74,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/ShowBundleTree.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -48,16 +48,19 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ShowBundleTree.class);\n \n-    // a cache of all exported packages\n-    private ExportedPackage[] allExportedPackages;\n+    private Tree<Bundle> tree;\n \n     @Override\n     protected void doExecute(Bundle bundle) throws Exception {\n+        long start = System.currentTimeMillis();\n         // let's do the real work here\n         printHeader(bundle);\n-        Tree<Bundle> tree = createTree(bundle);\n+        tree = new Tree<Bundle>(bundle);\n+        createTree(bundle);\n         printTree(tree);\n         printDuplicatePackages(tree);\n+        LOGGER.debug(format(\"Dependency tree calculated in %d ms\",\n+                            System.currentTimeMillis() - start));\n     }\n \n     /*\n@@ -119,44 +122,69 @@ private void printDuplicatePackages(Tree<Bundle> tree) {\n     /*\n      * Creates the bundle tree\n      */\n-    protected Tree<Bundle> createTree(Bundle bundle) {\n-        Tree<Bundle> tree = new Tree<Bundle>(bundle);\n-        Set<Bundle> trail = new HashSet<Bundle>();\n+    protected void createTree(Bundle bundle) {\n         if (bundle.getState() >= Bundle.RESOLVED) {\n-            createNode(tree, trail);\n+            createNode(tree);\n         } else {\n-            for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")))) {\n-                for (ExportedPackage ep : getPackageAdmin().getExportedPackages(i.getPackage())) {\n-                    if (ep.getVersion().compareTo(i.getVersion()) >= 0) {\n-                        if (!bundle.equals(ep.getExportingBundle())) {\n-                            Node child = tree.addChild(ep.getExportingBundle());\n-                            System.out.printf(\"- using %s to resolve import %s%n\", ep.getExportingBundle(), i);\n-                            createNode(child, trail);\n-                        }\n+            createNodesForImports(tree, bundle);\n+        }\n+    }\n+\n+    /*\n+     * Creates nodes for the imports of the bundle (instead of reporting wiring information\n+     */\n+    private void createNodesForImports(Node node, Bundle bundle) {\n+        for (Import i : Import.parse(String.valueOf(bundle.getHeaders().get(\"Import-Package\")),\n+                                     String.valueOf(bundle.getHeaders().get(\"Export-Package\")))) {\n+            createNodeForImport(node, bundle, i);\n+        }\n+    }\n+\n+    /*\n+     * Create a child node for a given import (by finding a matching export in the currently installed bundles)\n+     */\n+    private void createNodeForImport(Node node, Bundle bundle, Import i) {\n+        ExportedPackage[] exporters = getPackageAdmin().getExportedPackages(i.getPackage());\n+        boolean foundMatch = false;\n+        if (exporters != null) {\n+            for (ExportedPackage ep : exporters) {\n+                if (i.getVersion().isInRange(ep.getVersion())) {\n+                    if (bundle.equals(ep.getExportingBundle())) {\n+                        foundMatch = true;\n+                    } else {\n+                        Node child = node.addChild(ep.getExportingBundle());\n+                        System.out.printf(\"- import %s: resolved using %s%n\", i, ep.getExportingBundle());\n+                        foundMatch = true;\n+                        createNode(child);\n                     }\n                 }\n             }\n         }\n-        return tree;\n+        if (!foundMatch) {\n+            System.out.printf(\"- import %s: WARNING - unable to find matching export%n\", i);            \n+        }\n     }\n \n     /*\n      * Creates a node in the bundle tree\n      */\n-    private void createNode(Node<Bundle> node, Set<Bundle> trail) {\n+    private void createNode(Node<Bundle> node) {\n         Bundle bundle = node.getValue();\n         Collection<Bundle> exporters = new HashSet<Bundle>();\n         exporters.addAll(getWiredBundles(bundle).values());\n \n         for (Bundle exporter : exporters) {\n-            if (trail.contains(exporter)) {\n-                LOGGER.debug(format(\"Skipping %s because it already exists in the current tree branch\", exporter));\n+            if (node.hasAncestor(exporter)) {                \n+                LOGGER.debug(format(\"Skipping %s (already exists in the current branch)\", exporter));\n             } else {\n-                trail.add(exporter);\n-                Node child = node.addChild(exporter);\n+                boolean existing = tree.flatten().contains(exporter);\n                 LOGGER.debug(format(\"Adding %s as a dependency for %s\", exporter, bundle));\n-                createNode(child, trail);\n-                trail.remove(exporter);\n+                Node child = node.addChild(exporter);\n+                if (existing) {\n+                    LOGGER.debug(format(\"Skipping children of %s (already exists in another branch)\", exporter));\n+                } else {\n+                    createNode(child);\n+                }\n             }\n         }\n     }",
                "deletions": 23
            },
            {
                "sha": "321570773787d56e6cdc918b4b7993696fd407aa",
                "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java",
                "status": "modified",
                "changes": 80,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Import.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -19,15 +19,15 @@\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.osgi.framework.Version;\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n \n /**\n  * Simple class to model an OSGi Import-Package\n  */\n public class Import {\n \n     private final String packageName;\n-    private final Version version;\n+    private final VersionRange version;\n     private final String value;\n \n     /**\n@@ -38,28 +38,24 @@\n     protected Import(String value) {\n         super();\n         this.value = value;\n-        if (value.contains(\";\")) {\n-            this.packageName = value.split(\";\")[0];\n-        } else {\n-            this.packageName = value;\n-        }\n+        this.packageName = extractPackageName(value);\n         if (value.contains(\"version=\")) {\n             this.version = extractVersion(value);\n         } else {\n-            this.version = Version.emptyVersion;\n+            this.version = VersionRange.infiniteRange;\n         }\n     }\n \n     /*\n      * Extract the version from the string\n      */\n-    private Version extractVersion(String value) {\n+    private VersionRange extractVersion(String value) {\n         int begin = value.indexOf(\"version=\") + 8;\n         int end = value.indexOf(\";\", begin);\n         if (end < 0) {\n-            return Version.parseVersion(unquote(value.substring(begin)));\n+            return VersionRange.parse(unquote(value.substring(begin)));\n         } else {\n-            return Version.parseVersion(unquote(value.substring(begin, end)));\n+            return VersionRange.parse(unquote(value.substring(begin, end)));\n         }\n     }\n \n@@ -74,7 +70,7 @@ public String getPackage() {\n         return packageName;  \n     }\n \n-    public Version getVersion() {\n+    public VersionRange getVersion() {\n         return version;\n     }\n \n@@ -89,9 +85,67 @@ public String toString() {\n      */\n     public static List<Import> parse(String value) {\n         LinkedList<Import> imports = new LinkedList<Import>();\n-        for (String imp : value.split(\",\")) {\n+        for (String imp : split(value)) {\n             imports.add(new Import(imp));\n         }\n         return imports;\n     }\n+\n+    /**\n+     * Parse the value of an Import-Package META-INF header and return\n+     * a list of Import instances, filtering out packages that are in the\n+     * Export-Package META-INF header\n+     *\n+     * @param importValue the value of the Import-Package header\n+     * @param exportValue the value of the Export-Package header\n+     */\n+    public static List<Import> parse(String importValue, String exportValue) {\n+        LinkedList<String> exports = new LinkedList<String>();\n+        for (String exp : split(exportValue)) {\n+            exports.add(extractPackageName(exp));\n+        }\n+        LinkedList<Import> imports = new LinkedList<Import>();\n+        for (Import imp : parse(importValue)) {\n+            if (!exports.contains(imp.getPackage())) {\n+                imports.add(imp);\n+            }\n+        }\n+        return imports;\n+    }\n+\n+    /*\n+     * Extract the package name from the value\n+     * e.g. org.apache.felix.karaf;version=\"1.x\" -> org.apache.felix.karaf\n+     */\n+    private static String extractPackageName(String value) {\n+        if (value.contains(\";\")) {\n+            return value.split(\";\")[0];\n+        } else {\n+            return value;\n+        }\n+    }\n+\n+    /*\n+     * Counts the number of quotes in a String value\n+     */\n+    private static int quotes(String value) {\n+        return value.replaceAll(\"[^\\\"]\", \"\").length();\n+    }\n+\n+    /*\n+     * Split the OSGi headers on the , symbol\n+     */\n+    private static List<String> split(String value) {\n+        List<String> result = new LinkedList<String>();\n+        String[] elements = value.split(\",\");\n+        for (int i = 0; i < elements.length ; i++) {\n+            if (quotes(elements[i]) % 2 == 1) {\n+                // we probably split a version range, so joining it again with the next element\n+                result.add(elements[i] + \",\" + elements[++i]);\n+            } else {\n+                result.add(elements[i]);\n+            }\n+        }\n+        return result;\n+    }\n }",
                "deletions": 13
            },
            {
                "sha": "b266fe4cab76df6335706672e0310c71a435f531",
                "filename": "shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/main/java/org/apache/felix/karaf/shell/dev/util/Node.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -93,6 +93,20 @@ public Node addChild(T value) {\n         return result;\n     }\n \n+    /**\n+     * Check if the node has an ancestor that represents the given value\n+     *\n+     * @param value the node value\n+     * @return <code>true</code> it there's an ancestor that represents the value\n+     */\n+    public boolean hasAncestor(T value) {\n+        if (parent == null) {\n+            return false;\n+        } else {\n+            return value.equals(parent.value) || parent.hasAncestor(value);\n+        }\n+    }\n+\n     /*\n      * Write this node to the PrintWriter.  It should be indented one step\n      * further for every element in the indents array.  If an element in the",
                "deletions": 0
            },
            {
                "sha": "8a2aa14234f8d2d6c4a3555786462c574a0dc83f",
                "filename": "shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/ImportTest.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -20,8 +20,9 @@\n \n import static junit.framework.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+\n+import org.apache.felix.karaf.commons.osgi.VersionRange;\n import org.junit.Test;\n-import org.osgi.framework.Version;\n \n /**\n  * Test cases for {@link org.apache.felix.karaf.shell.dev.util.Import}\n@@ -38,7 +39,7 @@ public void createWithPackageName() {\n     public void createWithPackageNameAndVersion() {\n         Import i = new Import(\"org.wip.bar;version=\\\"2.0.0\\\"\");\n         assertEquals(\"org.wip.bar\", i.getPackage());\n-        assertEquals(new Version(\"2.0.0\"), i.getVersion());\n+        assertEquals(VersionRange.parse(\"2.0.0\"), i.getVersion());\n     }\n \n     @Test\n@@ -49,4 +50,22 @@ public void createListOfImports() {\n         assertEquals(\"org.wip.bar\", imports.get(0).getPackage());\n         assertEquals(\"org.wip.foo\", imports.get(1).getPackage());\n     }\n+\n+    @Test\n+    public void createListOfImportsWithVersionRanges() {\n+        List<Import> imports =\n+                Import.parse(\"javax.activation;version=\\\"[0.0,2)\\\",javax.annotation;version=\\\"[0.0,2)\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(2, imports.size());\n+        assertEquals(\"javax.activation\", imports.get(0).getPackage());\n+        assertEquals(\"javax.annotation\", imports.get(1).getPackage());\n+    }\n+\n+    @Test\n+    public void createListOfImportsWithExports() {\n+        List<Import> imports = Import.parse(\"org.wip.bar;version=\\\"2.0.0\\\",org.wip.foo\", \"org.wip.bar;version=\\\"2.0.0\\\"\");\n+        assertNotNull(imports);\n+        assertEquals(1, imports.size());\n+        assertEquals(\"org.wip.foo\", imports.get(0).getPackage());\n+    }\n }",
                "deletions": 2
            },
            {
                "sha": "c11e2c36c84b6d57225720552221ec8112bc54ff",
                "filename": "shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/8263abe51985988e9eaf259500b936103048b857/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/dev/src/test/java/org/apache/felix/karaf/shell/dev/util/TreeTest.java?ref=8263abe51985988e9eaf259500b936103048b857",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.Set;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import org.junit.Test;\n@@ -108,6 +109,19 @@ public void flattenTree() throws IOException {\n         assertTrue(elements.contains(\"grandchild\"));\n     }\n \n+    @Test\n+    public void hasAncestor() throws IOException {\n+        Tree<String> tree = new Tree<String>(\"root\");\n+        Node<String> child1 = tree.addChild(\"child1\");\n+        child1.addChild(\"grandchild\");\n+        Node child2 = tree.addChild(\"child2\");\n+        Node node = child2.addChild(\"grandchild2\");\n+\n+        assertTrue(node.hasAncestor(\"child2\"));\n+        assertTrue(node.hasAncestor(\"root\"));\n+        assertFalse(node.hasAncestor(\"child1\"));\n+    }\n+\n     private BufferedReader read(Tree<String> tree) {\n         StringWriter writer = new StringWriter();\n         tree.write(new PrintWriter(writer));",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Import.java",
            "FeaturesServiceImpl.java",
            "VersionRange.java",
            "Tree.java",
            "Node.java",
            "ShowBundleTree.java"
        ],
        "unit_tests": [
            "ImportTest.java",
            "TreeTest.java",
            "FeaturesServiceImplTest.java"
        ]
    },
    "karaf_2d04de2": {
        "repo": "karaf",
        "message": "Prevent NPE in Guard ACLConfigurationParser when an argument is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/karaf/trunk@1546593 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/karaf/commit/2d04de2a7b06d6f39ecb670f217ad0606f884139",
        "parent": "https://github.com/apache/karaf/commit/f680f9c720892f26e2308d197fe6efeec24e5063",
        "bug_id": "karaf_2d04de2",
        "file": [
            {
                "sha": "5a5af3eb0595d17b8b0290cca2671d4fe8b47d13",
                "filename": "service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java",
                "blob_url": "https://github.com/apache/karaf/blob/2d04de2a7b06d6f39ecb670f217ad0606f884139/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java",
                "raw_url": "https://github.com/apache/karaf/raw/2d04de2a7b06d6f39ecb670f217ad0606f884139/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/service/guard/src/main/java/org/apache/karaf/service/guard/tools/ACLConfigurationParser.java?ref=2d04de2a7b06d6f39ecb670f217ad0606f884139",
                "patch": "@@ -202,7 +202,8 @@ private static Object getExactArgSignature(String methodName, String[] signature\n             else\n                 sb.append(',');\n             sb.append('\"');\n-            sb.append(param.toString().trim());\n+            if (param != null)\n+                sb.append(param.toString().trim());\n             sb.append('\"');\n         }\n         sb.append(']');\n@@ -295,6 +296,8 @@ private static boolean allParamsMatch(List<String> regexArgs, Object[] params) {\n             return false;\n \n         for (int i = 0; i < regexArgs.size(); i++) {\n+            if (params[i] == null)\n+                return false;\n             if (!params[i].toString().trim().matches(regexArgs.get(i))) {\n                 return false;\n             }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ACLConfigurationParser.java"
        ],
        "unit_tests": [
            "ACLConfigurationParserTest.java"
        ]
    },
    "karaf_e192fff": {
        "repo": "karaf",
        "message": "[KARAF-6160] Avoid NPE when configCfgStore=false in etc/org.apache.karaf.features.cfg",
        "commit": "https://github.com/apache/karaf/commit/e192fffc3f8a0ae894e78cd37b0a1387075756e5",
        "parent": "https://github.com/apache/karaf/commit/386940d9f3ae59d153c9d4b4875fe52b0eb98212",
        "bug_id": "karaf_e192fff",
        "file": [
            {
                "sha": "66ec66dc951529800f05812b0c6b59394290bae8",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java",
                "blob_url": "https://github.com/apache/karaf/blob/e192fffc3f8a0ae894e78cd37b0a1387075756e5/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java",
                "raw_url": "https://github.com/apache/karaf/raw/e192fffc3f8a0ae894e78cd37b0a1387075756e5/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/FeatureConfigInstaller.java?ref=e192fffc3f8a0ae894e78cd37b0a1387075756e5",
                "patch": "@@ -112,7 +112,7 @@ public void installFeatureConfigs(Feature feature) throws IOException, InvalidSy\n             if (cfg == null) {\n             \t\n             \tFile cfgFile = null;\n-            \t if (storage != null && configCfgStore) {\n+            \t if (storage != null) {\n             \t\t cfgFile = new File(storage, cid.fullPid + \".cfg\");\n             \t }\n             \t if (!cfgFile.exists()) {",
                "deletions": 1
            }
        ],
        "patched_files": [
            "FeatureConfigInstaller.java"
        ],
        "unit_tests": [
            "FeatureConfigInstallerTest.java"
        ]
    },
    "karaf_da4aa4c": {
        "repo": "karaf",
        "message": "Fix possible NPE",
        "commit": "https://github.com/apache/karaf/commit/da4aa4c59698c39929d565ae83cf0696311ab671",
        "parent": "https://github.com/apache/karaf/commit/687ba286974f1edd15c5bae0330864d3502b8339",
        "bug_id": "karaf_da4aa4c",
        "file": [
            {
                "sha": "a04d5ac8277fa31b043d8867dd6f036812e35ef2",
                "filename": "jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java",
                "blob_url": "https://github.com/apache/karaf/blob/da4aa4c59698c39929d565ae83cf0696311ab671/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java",
                "raw_url": "https://github.com/apache/karaf/raw/da4aa4c59698c39929d565ae83cf0696311ab671/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/jaas/modules/src/main/java/org/apache/karaf/jaas/modules/impl/KarafRealm.java?ref=da4aa4c59698c39929d565ae83cf0696311ab671",
                "patch": "@@ -67,9 +67,11 @@ private void populateDefault(Map<String, Object> props) {\n     public void updated(Dictionary<String, ?> properties) throws ConfigurationException {\n         Map<String, Object> props = new HashMap<String, Object>();\n         populateDefault(props);\n-        for (Enumeration<String> keyEnum = properties.keys(); keyEnum.hasMoreElements(); ) {\n-            String key = keyEnum.nextElement();\n-            props.put(key, properties.get(key));\n+        if (properties != null) {\n+            for (Enumeration<String> keyEnum = properties.keys(); keyEnum.hasMoreElements(); ) {\n+                String key = keyEnum.nextElement();\n+                props.put(key, properties.get(key));\n+            }\n         }\n         this.properties = props;\n     }",
                "deletions": 3
            },
            {
                "sha": "9c328d4e05cd354c1dc73324badbff2ace645012",
                "filename": "shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java",
                "blob_url": "https://github.com/apache/karaf/blob/da4aa4c59698c39929d565ae83cf0696311ab671/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java",
                "raw_url": "https://github.com/apache/karaf/raw/da4aa4c59698c39929d565ae83cf0696311ab671/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/shell/core/src/main/java/org/apache/karaf/shell/impl/console/osgi/Activator.java?ref=da4aa4c59698c39929d565ae83cf0696311ab671",
                "patch": "@@ -80,11 +80,13 @@ public void start(BundleContext context) throws Exception {\n     @Override\n     public void stop(BundleContext context) throws Exception {\n         sessionFactoryRegistration.unregister();\n-        localConsoleManager.stop();\n+        if (localConsoleManager != null) {\n+            localConsoleManager.stop();\n+            terminalFactory.destroy();\n+        }\n         sessionFactory.stop();\n         actionExtender.stop(context);\n         threadIO.stop();\n-        terminalFactory.destroy();\n         if (eventAdminListener != null) {\n             eventAdminListener.close();\n         }",
                "deletions": 2
            }
        ],
        "patched_files": [
            "Activator.java"
        ],
        "unit_tests": [
            "ActivatorTest.java"
        ]
    },
    "karaf_1996fca": {
        "repo": "karaf",
        "message": "KARAF-4254 - Prevent NPE in deployer and subsystem resolver",
        "commit": "https://github.com/apache/karaf/commit/1996fca4587053dc4ef7b135e64ae3c62559aa6b",
        "parent": "https://github.com/apache/karaf/commit/2831b0f873aeefa6444a791b1b832a4130bff090",
        "bug_id": "karaf_1996fca",
        "file": [
            {
                "sha": "d162e9e43a92aaf4a79ee1172001e5a4684c9cf0",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java",
                "blob_url": "https://github.com/apache/karaf/blob/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java",
                "raw_url": "https://github.com/apache/karaf/raw/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java",
                "status": "modified",
                "changes": 100,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/region/SubsystemResolver.java?ref=1996fca4587053dc4ef7b135e64ae3c62559aa6b",
                "patch": "@@ -21,14 +21,7 @@\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n import org.apache.felix.utils.collections.DictionaryAsMap;\n import org.apache.karaf.features.BundleInfo;\n@@ -172,7 +165,10 @@ public void prepare(\n     }\n \n     public Set<String> collectPrerequisites() throws Exception {\n-        return root.collectPrerequisites();\n+        if (root != null) {\n+            return root.collectPrerequisites();\n+        }\n+        return new HashSet<String>();\n     }\n \n     public Map<Resource, List<Wire>> resolve(\n@@ -279,15 +275,17 @@ private Object toJson(Resource resource) {\n     }\n \n     private void addBundleInfos(Subsystem subsystem) {\n-        String region = getFlatSubsystemsMap().get(subsystem.getName());\n-        Map<String, BundleInfo> bis = bundleInfos.get(region);\n-        if (bis == null) {\n-            bis = new HashMap<>();\n-            bundleInfos.put(region, bis);\n-        }\n-        bis.putAll(subsystem.getBundleInfos());\n-        for (Subsystem child : subsystem.getChildren()) {\n-            addBundleInfos(child);\n+        if (subsystem != null) {\n+            String region = getFlatSubsystemsMap().get(subsystem.getName());\n+            Map<String, BundleInfo> bis = bundleInfos.get(region);\n+            if (bis == null) {\n+                bis = new HashMap<>();\n+                bundleInfos.put(region, bis);\n+            }\n+            bis.putAll(subsystem.getBundleInfos());\n+            for (Subsystem child : subsystem.getChildren()) {\n+                addBundleInfos(child);\n+            }\n         }\n     }\n \n@@ -303,28 +301,30 @@ public RegionDigraph getFlatDigraph() throws BundleException, InvalidSyntaxExcep\n         if (flatDigraph == null) {\n             flatDigraph = new StandardRegionDigraph(null, null);\n             Map<String, String> flats = getFlatSubsystemsMap();\n-            for (Region r : digraph.getRegions()) {\n-                if (r.getName().equals(flats.get(r.getName()))) {\n-                    flatDigraph.createRegion(r.getName());\n+            if (digraph != null) {\n+                for (Region r : digraph.getRegions()) {\n+                    if (r.getName().equals(flats.get(r.getName()))) {\n+                        flatDigraph.createRegion(r.getName());\n+                    }\n                 }\n-            }\n-            for (Region r : digraph.getRegions()) {\n-                for (RegionDigraph.FilteredRegion fr : digraph.getEdges(r)) {\n-                    String rt = flats.get(r.getName());\n-                    String rh = flats.get(fr.getRegion().getName());\n-                    if (!rh.equals(rt)) {\n-                        Region tail = flatDigraph.getRegion(rt);\n-                        Region head = flatDigraph.getRegion(rh);\n-                        RegionFilterBuilder rfb = flatDigraph.createRegionFilterBuilder();\n-                        for (Map.Entry<String, Collection<String>> entry : fr.getFilter().getSharingPolicy().entrySet()) {\n-                            // Discard osgi.identity namespace\n-                            if (!IDENTITY_NAMESPACE.equals(entry.getKey())) {\n-                                for (String f : entry.getValue()) {\n-                                    rfb.allow(entry.getKey(), f);\n+                for (Region r : digraph.getRegions()) {\n+                    for (RegionDigraph.FilteredRegion fr : digraph.getEdges(r)) {\n+                        String rt = flats.get(r.getName());\n+                        String rh = flats.get(fr.getRegion().getName());\n+                        if (!rh.equals(rt)) {\n+                            Region tail = flatDigraph.getRegion(rt);\n+                            Region head = flatDigraph.getRegion(rh);\n+                            RegionFilterBuilder rfb = flatDigraph.createRegionFilterBuilder();\n+                            for (Map.Entry<String, Collection<String>> entry : fr.getFilter().getSharingPolicy().entrySet()) {\n+                                // Discard osgi.identity namespace\n+                                if (!IDENTITY_NAMESPACE.equals(entry.getKey())) {\n+                                    for (String f : entry.getValue()) {\n+                                        rfb.allow(entry.getKey(), f);\n+                                    }\n                                 }\n                             }\n+                            flatDigraph.connect(tail, rfb.build(), head);\n                         }\n-                        flatDigraph.connect(tail, rfb.build(), head);\n                     }\n                 }\n             }\n@@ -390,14 +390,16 @@ public RegionDigraph getFlatDigraph() throws BundleException, InvalidSyntaxExcep\n         Map<Resource, String> resources = new HashMap<>();\n         SimpleFilter sf = createFilter(IDENTITY_NAMESPACE, \"*\",\n                 CAPABILITY_TYPE_ATTRIBUTE, TYPE_SUBSYSTEM);\n-        for (Resource resource : wiring.keySet()) {\n-            if (findMatchingCapability(resourceFilter, resource.getCapabilities(null)) != null) {\n-                // Find the subsystem where this feature is installed\n-                Wire wire = findMatchingWire(sf, wiring.get(resource));\n-                if (wire != null) {\n-                    String region = (String) wire.getCapability().getAttributes().get(IDENTITY_NAMESPACE);\n-                    region = flats.get(region);\n-                    resources.put(resource, region);\n+        if (wiring != null) {\n+            for (Resource resource : wiring.keySet()) {\n+                if (findMatchingCapability(resourceFilter, resource.getCapabilities(null)) != null) {\n+                    // Find the subsystem where this feature is installed\n+                    Wire wire = findMatchingWire(sf, wiring.get(resource));\n+                    if (wire != null) {\n+                        String region = (String) wire.getCapability().getAttributes().get(IDENTITY_NAMESPACE);\n+                        region = flats.get(region);\n+                        resources.put(resource, region);\n+                    }\n                 }\n             }\n         }\n@@ -483,13 +485,17 @@ private void findSubsystemsToFlatten(Subsystem subsystem, Map<String, String> to\n         while (isFlat(nonFlat)) {\n             nonFlat = nonFlat.getParent();\n         }\n-        toFlatten.put(subsystem.getName(), nonFlat.getName());\n-        for (Subsystem child : subsystem.getChildren()) {\n-            findSubsystemsToFlatten(child, toFlatten);\n+        if (subsystem != null) {\n+            toFlatten.put(subsystem.getName(), nonFlat.getName());\n+            for (Subsystem child : subsystem.getChildren()) {\n+                findSubsystemsToFlatten(child, toFlatten);\n+            }\n         }\n     }\n \n     private boolean isFlat(Subsystem subsystem) {\n+        if (subsystem == null || subsystem.getFeature() == null)\n+            return false;\n         return subsystem.getFeature() != null && subsystem.getFeature().getScoping() == null;\n     }\n ",
                "deletions": 47
            },
            {
                "sha": "1414b70630a6682c930fc920c9a5841d7d6f1c85",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "blob_url": "https://github.com/apache/karaf/blob/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "raw_url": "https://github.com/apache/karaf/raw/1996fca4587053dc4ef7b135e64ae3c62559aa6b/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java",
                "status": "modified",
                "changes": 38,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/Deployer.java?ref=1996fca4587053dc4ef7b135e64ae3c62559aa6b",
                "patch": "@@ -345,20 +345,24 @@ public void deploy(DeploymentState dstate, DeploymentRequest request) throws Exc\n             Set<? extends Resource> unmanaged = apply(flatten(unmanagedBundles), adapt(BundleRevision.class));\n             Set<Resource> requested = new HashSet<>();\n             // Gather bundles required by a feature\n-            for (List<Wire> wires : resolver.getWiring().values()) {\n-                for (Wire wire : wires) {\n-                    if (features.contains(wire.getRequirer()) && unmanaged.contains(wire.getProvider())) {\n-                        requested.add(wire.getProvider());\n+            if (resolver != null && resolver.getWiring() != null) {\n+                for (List<Wire> wires : resolver.getWiring().values()) {\n+                    for (Wire wire : wires) {\n+                        if (features.contains(wire.getRequirer()) && unmanaged.contains(wire.getProvider())) {\n+                            requested.add(wire.getProvider());\n+                        }\n                     }\n                 }\n             }\n             // Now, we know which bundles are completely unmanaged\n             unmanaged.removeAll(requested);\n             // Check if bundles have wires from really unmanaged bundles\n-            for (List<Wire> wires : resolver.getWiring().values()) {\n-                for (Wire wire : wires) {\n-                    if (requested.contains(wire.getProvider()) && unmanaged.contains(wire.getRequirer())) {\n-                        requested.remove(wire.getProvider());\n+            if (resolver != null && resolver.getWiring() != null) {\n+                for (List<Wire> wires : resolver.getWiring().values()) {\n+                    for (Wire wire : wires) {\n+                        if (requested.contains(wire.getProvider()) && unmanaged.contains(wire.getRequirer())) {\n+                            requested.remove(wire.getProvider());\n+                        }\n                     }\n                 }\n             }\n@@ -919,14 +923,16 @@ private void computeBundlesToRefresh(Map<Bundle, String> toRefresh, Collection<B\n         for (Bundle bundle : bundles) {\n             newFragments.put(bundle, new HashSet<Resource>());\n         }\n-        for (Resource res : resolution.keySet()) {\n-            for (Wire wire : resolution.get(res)) {\n-                if (HOST_NAMESPACE.equals(wire.getCapability().getNamespace())) {\n-                    Bundle bundle = resources.get(wire.getProvider());\n-                    if (bundle != null) {\n-                        Bundle b = resources.get(wire.getRequirer());\n-                        Resource r = b != null ? b.adapt(BundleRevision.class) : wire.getRequirer();\n-                        newFragments.get(bundle).add(r);\n+        if (resolution != null) {\n+            for (Resource res : resolution.keySet()) {\n+                for (Wire wire : resolution.get(res)) {\n+                    if (HOST_NAMESPACE.equals(wire.getCapability().getNamespace())) {\n+                        Bundle bundle = resources.get(wire.getProvider());\n+                        if (bundle != null) {\n+                            Bundle b = resources.get(wire.getRequirer());\n+                            Resource r = b != null ? b.adapt(BundleRevision.class) : wire.getRequirer();\n+                            newFragments.get(bundle).add(r);\n+                        }\n                     }\n                 }\n             }",
                "deletions": 16
            }
        ],
        "patched_files": [
            "Deployer.java"
        ],
        "unit_tests": [
            "DeployerTest.java"
        ]
    },
    "karaf_e8fd84c": {
        "repo": "karaf",
        "message": "KARAF-4652 - ConcurrentModificationException and NullPointerException when starting Karaf",
        "commit": "https://github.com/apache/karaf/commit/e8fd84c993fe208d2666cb71ff0495724927cdcf",
        "parent": "https://github.com/apache/karaf/commit/2de853be964b58ea1a7d56acd1c968a0516c923f",
        "bug_id": "karaf_e8fd84c",
        "file": [
            {
                "sha": "f89dc70a987ae50f5f9b6170718775d2580530e9",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "blob_url": "https://github.com/apache/karaf/blob/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "raw_url": "https://github.com/apache/karaf/raw/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java",
                "status": "modified",
                "changes": 23,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/osgi/Activator.java?ref=e8fd84c993fe208d2666cb71ff0495724927cdcf",
                "patch": "@@ -123,16 +123,16 @@ protected void doStart() throws Exception {\n         }\n \n         // RegionDigraph\n-        digraph = DigraphHelper.loadDigraph(bundleContext);\n-        register(ResolverHookFactory.class, digraph.getResolverHookFactory());\n-        register(CollisionHook.class, CollisionHookHelper.getCollisionHook(digraph));\n-        register(org.osgi.framework.hooks.bundle.FindHook.class, digraph.getBundleFindHook());\n-        register(org.osgi.framework.hooks.bundle.EventHook.class, digraph.getBundleEventHook());\n-        register(org.osgi.framework.hooks.service.FindHook.class, digraph.getServiceFindHook());\n-        register(org.osgi.framework.hooks.service.EventHook.class, digraph.getServiceEventHook());\n-        register(RegionDigraph.class, digraph);\n-        digraphMBean = new StandardManageableRegionDigraph(digraph, \"org.apache.karaf\", bundleContext);\n-        digraphMBean.registerMBean();\n+        StandardRegionDigraph dg = digraph = DigraphHelper.loadDigraph(bundleContext);\n+        register(ResolverHookFactory.class, dg.getResolverHookFactory());\n+        register(CollisionHook.class, CollisionHookHelper.getCollisionHook(dg));\n+        register(org.osgi.framework.hooks.bundle.FindHook.class, dg.getBundleFindHook());\n+        register(org.osgi.framework.hooks.bundle.EventHook.class, dg.getBundleEventHook());\n+        register(org.osgi.framework.hooks.service.FindHook.class, dg.getServiceFindHook());\n+        register(org.osgi.framework.hooks.service.EventHook.class, dg.getServiceEventHook());\n+        register(RegionDigraph.class, dg);\n+        StandardManageableRegionDigraph dgmb = digraphMBean = new StandardManageableRegionDigraph(dg, \"org.apache.karaf\", bundleContext);\n+        dgmb.registerMBean();\n \n \n         FeatureFinder featureFinder = new FeatureFinder();\n@@ -204,13 +204,14 @@ protected OutputStream getOutputStream() throws IOException {\n         }\n         featuresService = new FeaturesServiceImpl(\n                 bundleContext.getBundle(),\n+                bundleContext,\n                 bundleContext.getBundle(0).getBundleContext(),\n                 stateStorage,\n                 featureFinder,\n                 eventAdminListener,\n                 configurationAdmin,\n                 resolver,\n-                digraph,\n+                dg,\n                 overrides,\n                 featureResolutionRange,\n                 bundleUpdateRange,",
                "deletions": 11
            },
            {
                "sha": "7ade50ced4b31c2da20d9e24913f372190a3d157",
                "filename": "features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "blob_url": "https://github.com/apache/karaf/blob/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "raw_url": "https://github.com/apache/karaf/raw/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/main/java/org/apache/karaf/features/internal/service/FeaturesServiceImpl.java?ref=e8fd84c993fe208d2666cb71ff0495724927cdcf",
                "patch": "@@ -184,6 +184,7 @@\n     private Map<String, Map<String, Feature>> featureCache;\n \n     public FeaturesServiceImpl(Bundle bundle,\n+                               BundleContext bundleContext,\n                                BundleContext systemBundleContext,\n                                StateStorage storage,\n                                FeatureFinder featureFinder,\n@@ -202,6 +203,7 @@ public FeaturesServiceImpl(Bundle bundle,\n                                int scheduleMaxRun,\n                                String blacklisted) {\n         this.bundle = bundle;\n+        this.bundleContext = bundleContext;\n         this.systemBundleContext = systemBundleContext;\n         this.storage = storage;\n         this.featureFinder = featureFinder;\n@@ -227,6 +229,7 @@ public FeaturesServiceImpl(Bundle bundle,\n     }\n \n     public FeaturesServiceImpl(Bundle bundle,\n+                               BundleContext bundleContext,\n                                BundleContext systemBundleContext,\n                                StateStorage storage,\n                                FeatureFinder featureFinder,\n@@ -246,6 +249,7 @@ public FeaturesServiceImpl(Bundle bundle,\n                                String blacklisted,\n                                boolean configCfgStore) {\n         this.bundle = bundle;\n+        this.bundleContext = bundleContext;\n         this.systemBundleContext = systemBundleContext;\n         this.storage = storage;\n         this.featureFinder = featureFinder;\n@@ -279,10 +283,10 @@ public void stop() {\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     private void checkResolve() {\n-        if (bundle == null) {\n+        if (bundleContext == null) {\n             return; // Most certainly in unit tests\n         }\n-        File resolveFile = bundle.getBundleContext().getDataFile(\"resolve\");\n+        File resolveFile = bundleContext.getDataFile(\"resolve\");\n         if (!resolveFile.exists()) {\n             return;\n         }\n@@ -311,7 +315,7 @@ private void checkResolve() {\n     }\n \n     private void writeResolve(Map<String, Set<String>> requestedFeatures, EnumSet<Option> options) throws IOException {\n-        File resolveFile = bundle.getBundleContext().getDataFile(\"resolve\");\n+        File resolveFile = bundleContext.getDataFile(\"resolve\");\n         Map<String, Object> request = new HashMap<>();\n         List<String> opts = new ArrayList<>();\n         for (Option opt : options) {\n@@ -350,8 +354,8 @@ protected void saveState() {\n                     state.bundleChecksums.clear();\n                 }\n                 storage.save(state);\n-                if (bundle != null) { // For tests, this should never happen at runtime\n-                    DigraphHelper.saveDigraph(bundle.getBundleContext(), digraph);\n+                if (bundleContext != null) { // For tests, this should never happen at runtime\n+                    DigraphHelper.saveDigraph(bundleContext, digraph);\n                 }\n             }\n         } catch (IOException e) {",
                "deletions": 5
            },
            {
                "sha": "40ce48362da98c099007356c18c6b20c47727109",
                "filename": "features/core/src/test/java/org/apache/karaf/features/FeaturesServiceTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/test/java/org/apache/karaf/features/FeaturesServiceTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/test/java/org/apache/karaf/features/FeaturesServiceTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/test/java/org/apache/karaf/features/FeaturesServiceTest.java?ref=e8fd84c993fe208d2666cb71ff0495724927cdcf",
                "patch": "@@ -349,7 +349,7 @@ public void testGetFeaturesShouldHandleDifferentVersionPatterns() throws Excepti\n                 + \"  <feature name='f2' version='0.2'><bundle>bundle2</bundle></feature>\"\n                 + \"</features>\");\n \n-        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n+        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n         svc.addRepository(uri);\n \n         assertEquals(feature(\"f2\", \"0.2\"), svc.getFeatures(\"f2\", \"[0.1,0.3)\")[0]);\n@@ -375,7 +375,7 @@ public void testInstallBatchFeatureWithFailure() throws Exception {\n         expect(fsl.getStartLevel()).andReturn(100);\n         replay(bundleContext, bundle, fsl);\n \n-        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, bundleContext, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n+        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, bundleContext, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n         svc.addRepository(uri);\n         try {\n             List<String> features = new ArrayList<String>();\n@@ -400,7 +400,7 @@ public void testSchemaValidation() throws Exception {\n         URI uri = createTempRepo(\"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>\"\n                 + \"  <featur><bundle>somebundle</bundle></featur></features>\");\n \n-        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n+        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n         try {\n             svc.addRepository(uri);\n             fail(\"exception expected\");\n@@ -418,7 +418,7 @@ public void testLoadOldFeatureFile() throws Exception {\n                 + \"  <feature name='f1'><bundle>file:bundle1</bundle><bundle>file:bundle2</bundle></feature>\"\n                 + \"</features>\");\n \n-        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n+        FeaturesServiceImpl svc = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, resolver, null, null, null, null, null, null, null, 0, 0, 0, null);\n         svc.addRepository(uri);\n         Feature[] features = svc.getFeatures(\"f1\");\n         Assert.assertEquals(1, features.length);",
                "deletions": 4
            },
            {
                "sha": "8e3cdfe3a5975c39561374794e0cd7a0ce4258dd",
                "filename": "features/core/src/test/java/org/apache/karaf/features/internal/service/FeaturesServiceImplTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/test/java/org/apache/karaf/features/internal/service/FeaturesServiceImplTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/e8fd84c993fe208d2666cb71ff0495724927cdcf/features/core/src/test/java/org/apache/karaf/features/internal/service/FeaturesServiceImplTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/features/core/src/test/java/org/apache/karaf/features/internal/service/FeaturesServiceImplTest.java?ref=e8fd84c993fe208d2666cb71ff0495724927cdcf",
                "patch": "@@ -54,7 +54,7 @@ public void setUp() throws IOException {\n     public void testGetFeature() throws Exception {\n         Feature transactionFeature = feature(\"transaction\", \"1.0.0\");\n         final Map<String, Map<String, Feature>> features = features(transactionFeature);\n-        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n+        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n             protected Map<String,Map<String,Feature>> getFeatures() throws Exception {\n                 return features;\n             }\n@@ -65,7 +65,7 @@ public void testGetFeature() throws Exception {\n     \n     @Test\n     public void testGetFeatureStripVersion() throws Exception {\n-        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n+        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n             protected Map<String,Map<String,Feature>> getFeatures() throws Exception {\n                 return features(feature(\"transaction\", \"1.0.0\"));\n             }\n@@ -79,7 +79,7 @@ public void testGetFeatureStripVersion() throws Exception {\n     \n     @Test\n     public void testGetFeatureNotAvailable() throws Exception {\n-        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n+        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n             protected Map<String,Map<String,Feature>> getFeatures() throws Exception {\n                 return features(feature(\"transaction\", \"1.0.0\"));\n             }\n@@ -93,7 +93,7 @@ public void testGetFeatureHighestAvailable() throws Exception {\n                 feature(\"transaction\", \"1.0.0\"),\n                 feature(\"transaction\", \"2.0.0\")\n         );\n-        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n+        final FeaturesServiceImpl impl = new FeaturesServiceImpl(null, null, null, new Storage(), null, null, null, this.resolver, null, \"\", null, null, null, null, null, 0, 0, 0, null) {\n             protected Map<String,Map<String,Feature>> getFeatures() throws Exception {\n                 return features;\n             }",
                "deletions": 4
            },
            {
                "sha": "b6e457d0f42c5a3e55b082961b5386bcb5f37ec7",
                "filename": "util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "blob_url": "https://github.com/apache/karaf/blob/e8fd84c993fe208d2666cb71ff0495724927cdcf/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "raw_url": "https://github.com/apache/karaf/raw/e8fd84c993fe208d2666cb71ff0495724927cdcf/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/util/src/main/java/org/apache/karaf/util/tracker/BaseActivator.java?ref=e8fd84c993fe208d2666cb71ff0495724927cdcf",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ThreadPoolExecutor;\n@@ -50,7 +52,7 @@\n \n     private long schedulerStopTimeout = TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS);\n \n-    private List<ServiceRegistration> registrations;\n+    private final Queue<ServiceRegistration> registrations = new ConcurrentLinkedQueue<>();\n     private Map<String, SingleServiceTracker> trackers = new HashMap<>();\n     private ServiceRegistration managedServiceRegistration;\n     private Dictionary<String, ?> configuration;\n@@ -120,11 +122,12 @@ protected void doStart() throws Exception {\n     }\n \n     protected void doStop() {\n-        if (registrations != null) {\n-            for (ServiceRegistration reg : registrations) {\n-                reg.unregister();\n+        while (true) {\n+            ServiceRegistration reg = registrations.poll();\n+            if (reg == null) {\n+                break;\n             }\n-            registrations = null;\n+            reg.unregister();\n         }\n     }\n \n@@ -357,9 +360,6 @@ protected void register(Class[] clazz, Object service, Dictionary<String, ?> pro\n     }\n \n     private void trackRegistration(ServiceRegistration registration) {\n-        if (registrations == null) {\n-            registrations = new ArrayList<>();\n-        }\n         registrations.add(registration);\n     }\n ",
                "deletions": 8
            }
        ],
        "patched_files": [
            "BaseActivator.java",
            "Activator.java",
            "FeaturesServiceImpl.java",
            "FeaturesService.java"
        ],
        "unit_tests": [
            "ActivatorTest.java",
            "FeaturesServiceImplTest.java",
            "FeaturesServiceTest.java"
        ]
    },
    "karaf_dee71a6": {
        "repo": "karaf",
        "message": "[KARAF-4597] Avoid npe and exception logging in main module tests",
        "commit": "https://github.com/apache/karaf/commit/dee71a697036dfedcac7f3617f373ff06f7d5fbb",
        "parent": "https://github.com/apache/karaf/commit/0f3b48bba87cc5293f634df6b1dfc5fe3f161e96",
        "bug_id": "karaf_dee71a6",
        "file": [
            {
                "sha": "8b9ebaa028bdab71779bc1e3307c8f71f07ddeb1",
                "filename": "main/src/main/java/org/apache/karaf/main/InstanceHelper.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/InstanceHelper.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/InstanceHelper.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/InstanceHelper.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -152,7 +152,9 @@ static void setupShutdown(ConfigProperties config, Framework framework) {\n                     port = shutdownSocket.getLocalPort();\r\n                 }\r\n                 if (portFile != null) {\r\n-                    Writer w = new OutputStreamWriter(new FileOutputStream(portFile));\r\n+                    File portF = new File(portFile);\r\n+                    portF.getParentFile().mkdirs();\r\n+                    Writer w = new OutputStreamWriter(new FileOutputStream(portF));\r\n                     w.write(Integer.toString(port));\r\n                     w.close();\r\n                 }\r",
                "deletions": 1
            },
            {
                "sha": "1fe4fe95df2fda2c98326a064aceb60a500806c8",
                "filename": "main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java",
                "status": "modified",
                "changes": 41,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/main/java/org/apache/karaf/main/lock/DefaultJDBCLock.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -152,30 +152,20 @@ boolean schemaExists() {\n      * @return true, if the table exists else false\n      */\n     boolean schemaExist(String tableName) {\n-        ResultSet rs = null;\n-        boolean schemaExists = false;\n         try {\n             DatabaseMetaData metadata = getConnection().getMetaData();\n-            rs = metadata.getTables(null, null, tableName, new String[] {\"TABLE\"});\n-            schemaExists = rs.next();\n-            if (schemaExists == false) {\n-                // try table name in lower case\n-                rs = metadata.getTables(null, null, tableName.toLowerCase(), new String[] {\"TABLE\"});\n-                schemaExists = rs.next();\n-            }\n-            /*\n-            if (schemaExists == false) {\n-                // try table name in upper case\n-                rs = getConnection().getMetaData().getTables(null, null, tableName.toUpperCase(), new String[] {\"TABLE\"});\n-                schemaExists = rs.next();\n-            }\n-            */\n+            return metadata != null && (checkTableExists(tableName.toLowerCase(), metadata) //\n+                || checkTableExists(tableName.toLowerCase(), metadata));\n         } catch (Exception ignore) {\n-            LOG.log(Level.SEVERE, \"Error testing for db table\", ignore);\n-        } finally {\n-            closeSafely(rs);\n+            return false;\n+            //throw new RuntimeException(\"Error testing for db table\", ignore);\n+        }\n+    }\n+\n+    private boolean checkTableExists(String tableName, DatabaseMetaData metadata) throws SQLException {\n+        try (ResultSet rs = metadata.getTables(null, null, tableName, new String[] {\"TABLE\"})) {\n+            return rs.next();\n         }\n-        return schemaExists;\n     }\n \n     /*\n@@ -203,7 +193,7 @@ boolean aquireLock() {\n             lockAquired = preparedStatement.execute();\n         } catch (Exception e) {\n             // Do we want to display this message everytime???\n-            LOG.log(Level.WARNING, \"Failed to acquire database lock\", e);\n+            log(Level.WARNING, \"Failed to acquire database lock\", e);\n         } finally {\n             closeSafely(preparedStatement);\n         }\n@@ -222,13 +212,20 @@ boolean updateLock() {\n             int rows = preparedStatement.executeUpdate();\n             lockUpdated = (rows == 1);\n         } catch (Exception e) {\n-            LOG.log(Level.WARNING, \"Failed to update database lock\", e);\n+            log(Level.WARNING, \"Failed to update database lock\", e);\n         } finally {\n             closeSafely(preparedStatement);\n         }\n         \n         return lockUpdated;\n     }\n+    \n+    /**\n+     * Can be overridden to suppress logs in tests\n+     */\n+    public void log(Level level, String msg, Exception e) {\n+        LOG.log(level, msg, e);\n+    }\n \n     /*\n      * (non-Javadoc)",
                "deletions": 22
            },
            {
                "sha": "78d5a328b479da9c43516c5b58044370aa7d4ad2",
                "filename": "main/src/test/java/org/apache/karaf/main/MainLockingTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/MainLockingTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/MainLockingTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/MainLockingTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -63,8 +63,6 @@ public void testLostMasterLock() throws Exception {\n         \n         bundle.start();       \n         \n-        Thread.sleep(2000);\n-        \n         FrameworkStartLevel sl = framework.adapt(FrameworkStartLevel.class);\n         \n         MockLock lock = (MockLock) main.getLock();",
                "deletions": 2
            },
            {
                "sha": "cd063dcb0d9a8acc3270937e71678d74d7938b99",
                "filename": "main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/TimeoutShutdownActivator.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -23,7 +23,7 @@\n \n public class TimeoutShutdownActivator implements BundleActivator {\n \n-    public static int TIMEOUT = 10000;\n+    public static int TIMEOUT = 1000;\n \n     public void start(BundleContext context) throws Exception {\n         System.err.println(\"Starting timeout activator\");",
                "deletions": 1
            },
            {
                "sha": "d4d697e4e75002dd9518f14a61c0db5ed8431c8c",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/BaseJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -68,7 +68,7 @@ public static void setUpTestSuite() {\n     \n     @Before\n     public void setUp() throws Exception {\n-        connection = EasyMock.createMock(Connection.class);\n+        connection = EasyMock.createNiceMock(Connection.class);\n         metaData = EasyMock.createMock(DatabaseMetaData.class);\n         resultSet = EasyMock.createMock(ResultSet.class);\n         preparedStatement = EasyMock.createMock(PreparedStatement.class);\n@@ -88,12 +88,13 @@ public void setUp() throws Exception {\n     public void initShouldCreateTheSchemaIfItNotExists() throws Exception {\n         expect(connection.isClosed()).andReturn(false);\n         connection.setAutoCommit(false);\n-        expect(connection.getMetaData()).andReturn(metaData);\n+        expect(connection.getMetaData()).andReturn(metaData).anyTimes();\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(resultSet.next()).andReturn(false);\n         expect(resultSet.next()).andReturn(false);\n         resultSet.close();\n+        expectLastCall().atLeastOnce();\n         expect(connection.isClosed()).andReturn(false);\n         expect(connection.createStatement()).andReturn(statement);\n         expect(statement.execute(\"CREATE TABLE \" + tableName + \" (MOMENT \" + momentDatatype + \", NODE \" + nodeDatatype + \")\" + createTableStmtSuffix)).andReturn(false);\n@@ -115,7 +116,7 @@ public void initShouldNotCreateTheSchemaIfItAlreadyExists() throws Exception {\n         expect(metaData.getTables((String) isNull(), (String) isNull(), anyString(), aryEq(new String[]{\"TABLE\"}))).andReturn(resultSet);\n         expect(resultSet.next()).andReturn(true);\n         resultSet.close();\n-        \n+        expectLastCall().atLeastOnce();\n         replay(connection, metaData, statement, preparedStatement, resultSet);\n         \n         lock = createLock(props);",
                "deletions": 3
            },
            {
                "sha": "951c45825048f30938e4c811aea2040b4423c2b3",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/DefaultJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -21,6 +21,9 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,14 +57,24 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n     @Test\n-    public void createConnectionShouldConcatinateOptionsCorrect() {\n+    public void createConnectionShouldConcatinateOptionsCorrect() throws SQLException {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new DefaultJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+\n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);",
                "deletions": 1
            },
            {
                "sha": "fd96dcce26657a8e45185f81441a032d5c64db87",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/DerbyJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -21,6 +21,8 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,6 +56,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -62,6 +69,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new DerbyJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);",
                "deletions": 0
            },
            {
                "sha": "f9daad1a8830000a55bec4d20df5bf1a3395a7c0",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/MySQLJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -21,6 +21,8 @@\n import static org.junit.Assert.assertEquals;\n \n import java.sql.Connection;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -54,6 +56,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -62,6 +69,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \"?connectTimeout=10000\");\n         \n         lock = new MySQLJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);",
                "deletions": 0
            },
            {
                "sha": "120946456c892ae53b788aaffd5c932a0ff40713",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/OracleJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -26,6 +26,8 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import org.junit.Before;\n@@ -60,6 +62,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     ",
                "deletions": 0
            },
            {
                "sha": "079c7f13d69289dd1870667c87913d33b8775d14",
                "filename": "main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java",
                "blob_url": "https://github.com/apache/karaf/blob/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java",
                "raw_url": "https://github.com/apache/karaf/raw/dee71a697036dfedcac7f3617f373ff06f7d5fbb/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/karaf/contents/main/src/test/java/org/apache/karaf/main/lock/PostgreSQLJDBCLockTest.java?ref=dee71a697036dfedcac7f3617f373ff06f7d5fbb",
                "patch": "@@ -23,6 +23,8 @@\n \n import java.sql.Connection;\n import java.sql.SQLException;\n+import java.util.logging.Level;\n+\n import org.apache.felix.utils.properties.Properties;\n \n import static org.easymock.EasyMock.*;\n@@ -58,6 +60,11 @@ Connection doCreateConnection(String driver, String url, String username, String\n             long getCurrentTimeMillis() {\n                 return 1;\n             }\n+            \n+            @Override\n+            public void log(Level level, String msg, Exception e) {\n+                // Suppress log\n+            }\n         };\n     }\n     \n@@ -66,6 +73,11 @@ public void createConnectionShouldConcatinateOptionsCorrect() {\n         props.put(\"karaf.lock.jdbc.url\", this.url + \";dataEncryption=false\");\n         \n         lock = new PostgreSQLJDBCLock(props) {\n+            @Override\n+            boolean schemaExists() {\n+                return true;\n+            }\n+            \n             @Override\n             Connection doCreateConnection(String driver, String url, String username, String password) {\n                 assertEquals(this.driver, driver);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "InstanceHelper.java",
            "MySQLJDBCLock.java",
            "PostgreSQLJDBCLock.java",
            "DerbyJDBCLock.java",
            "DefaultJDBCLock.java",
            "TimeoutShutdownActivator.java",
            "OracleJDBCLock.java"
        ],
        "unit_tests": [
            "MySQLJDBCLockTest.java",
            "BaseJDBCLockTest.java",
            "MainLockingTest.java",
            "DefaultJDBCLockTest.java",
            "DerbyJDBCLockTest.java",
            "PostgreSQLJDBCLockTest.java",
            "OracleJDBCLockTest.java"
        ]
    }
}