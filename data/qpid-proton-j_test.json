{
    "qpid-proton-j_6b77507": {
        "repo": "qpid-proton-j",
        "message": "PROTON-1906: avoid potential NPE when duplicating composite buffer",
        "commit": "https://github.com/apache/qpid-proton-j/commit/6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1",
        "parent": "https://github.com/apache/qpid-proton-j/commit/145b849c614220b68ac91f5a52bdc6c46be281da",
        "bug_id": "qpid-proton-j_6b77507",
        "file": [
            {
                "sha": "c614e393579faaccb9d09bbaa1f71d3a358e38b8",
                "filename": "proton-j/src/main/java/org/apache/qpid/proton/codec/CompositeReadableBuffer.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1/proton-j/src/main/java/org/apache/qpid/proton/codec/CompositeReadableBuffer.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1/proton-j/src/main/java/org/apache/qpid/proton/codec/CompositeReadableBuffer.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/main/java/org/apache/qpid/proton/codec/CompositeReadableBuffer.java?ref=6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1",
                "patch": "@@ -66,7 +66,9 @@ public CompositeReadableBuffer() {\n     private CompositeReadableBuffer(byte[] array, int offset) {\n         this.currentArray = array;\n         this.currentOffset = offset;\n-        this.capacity = array.length;\n+        if(array != null) {\n+            this.capacity = array.length;\n+        }\n         this.limit = capacity;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "86ee4abfc5eb3f372f65b43096bf38fe97fd951e",
                "filename": "proton-j/src/test/java/org/apache/qpid/proton/codec/CompositeReadableBufferTest.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1/proton-j/src/test/java/org/apache/qpid/proton/codec/CompositeReadableBufferTest.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1/proton-j/src/test/java/org/apache/qpid/proton/codec/CompositeReadableBufferTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/test/java/org/apache/qpid/proton/codec/CompositeReadableBufferTest.java?ref=6b7750775bf57d05f9a8f29d79e7fc3e38a8d0a1",
                "patch": "@@ -2785,6 +2785,27 @@ public void testClear() {\n \n     //----- Test various cases of Duplicate ----------------------------------//\n \n+    @Test\n+    public void testDuplicateOnEmptyBuffer() {\n+        CompositeReadableBuffer buffer = new CompositeReadableBuffer();\n+        CompositeReadableBuffer dup = buffer.duplicate();\n+\n+        assertNotSame(buffer, dup);\n+        assertEquals(0, dup.capacity());\n+        assertEquals(0, buffer.capacity());\n+        assertEquals(0, dup.position());\n+        assertEquals(0, buffer.position());\n+        assertEquals(0, dup.limit());\n+        assertEquals(0, buffer.limit());\n+        assertContentEquals(buffer, dup);\n+\n+        try {\n+            dup.reclaimRead();\n+        } catch (Throwable t) {\n+            fail(\"Compacting an empty duplicate should not fail\");\n+        }\n+    }\n+\n     @Test\n     public void testDuplicateWithSingleArrayContent() {\n         CompositeReadableBuffer buffer = new CompositeReadableBuffer();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "CompositeReadableBuffer.java"
        ],
        "unit_tests": [
            "CompositeReadableBufferTest.java"
        ]
    },
    "qpid-proton-j_6422e24": {
        "repo": "qpid-proton-j",
        "message": "PROTON-1100: also protect against an NPE that occurs if sender link has messages on it before the Open frame is sent",
        "commit": "https://github.com/apache/qpid-proton-j/commit/6422e2497b62b46db9e993059bc514a53a8ed643",
        "parent": "https://github.com/apache/qpid-proton-j/commit/0c27d5ffbbb272902f24262f13d5c6b2985902b4",
        "bug_id": "qpid-proton-j_6422e24",
        "file": [
            {
                "sha": "d85794f545087c17ac7d15b56d6e1aa4632b3b4b",
                "filename": "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java?ref=6422e2497b62b46db9e993059bc514a53a8ed643",
                "patch": "@@ -489,7 +489,7 @@ private void processSenderFlow()\n \n     private void processTransportWork()\n     {\n-        if(_connectionEndpoint != null)\n+        if(_connectionEndpoint != null && _isOpenSent)\n         {\n             DeliveryImpl delivery = _connectionEndpoint.getTransportWorkHead();\n             while(delivery != null)",
                "deletions": 1
            },
            {
                "sha": "888f4af5bc154264754afa7d5d06286630015ecc",
                "filename": "proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/6422e2497b62b46db9e993059bc514a53a8ed643/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java",
                "status": "modified",
                "changes": 108,
                "additions": 107,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-j/src/test/java/org/apache/qpid/proton/engine/impl/TransportImplTest.java?ref=6422e2497b62b46db9e993059bc514a53a8ed643",
                "patch": "@@ -29,22 +29,32 @@\n import static org.junit.Assert.fail;\n \n import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.util.LinkedList;\n \n import org.apache.qpid.proton.Proton;\n import org.apache.qpid.proton.amqp.UnsignedInteger;\n+import org.apache.qpid.proton.amqp.UnsignedShort;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n import org.apache.qpid.proton.amqp.transport.Attach;\n import org.apache.qpid.proton.amqp.transport.Begin;\n+import org.apache.qpid.proton.amqp.transport.Flow;\n import org.apache.qpid.proton.amqp.transport.FrameBody;\n import org.apache.qpid.proton.amqp.transport.Open;\n+import org.apache.qpid.proton.amqp.transport.Role;\n+import org.apache.qpid.proton.amqp.transport.Transfer;\n+import org.apache.qpid.proton.engine.Collector;\n import org.apache.qpid.proton.engine.Connection;\n+import org.apache.qpid.proton.engine.Delivery;\n import org.apache.qpid.proton.engine.EndpointState;\n import org.apache.qpid.proton.engine.Link;\n import org.apache.qpid.proton.engine.Receiver;\n+import org.apache.qpid.proton.engine.Sender;\n import org.apache.qpid.proton.engine.Session;\n import org.apache.qpid.proton.engine.Transport;\n import org.apache.qpid.proton.engine.TransportException;\n import org.apache.qpid.proton.framing.TransportFrame;\n+import org.apache.qpid.proton.message.Message;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n@@ -58,6 +68,8 @@\n     private static final TransportFrame TRANSPORT_FRAME_BEGIN = new TransportFrame(CHANNEL_ID, new Begin(), null);\n     private static final TransportFrame TRANSPORT_FRAME_OPEN = new TransportFrame(CHANNEL_ID, new Open(), null);\n \n+    private static final int BUFFER_SIZE = 4096;\n+\n     @Rule\n     public ExpectedException _expectedException = ExpectedException.none();\n \n@@ -457,7 +469,7 @@ void doOpenLinkBeforeOpenConnectionTestImpl(boolean receiverLink)\n      * be pipelined together.\n      */\n     @Test\n-    public void testReceiverFlowWithoutOpen()\n+    public void testReceiverFlowBeforeOpenConnection()\n     {\n         MockTransportImpl transport = new MockTransportImpl();\n         Connection connection = Proton.connection();\n@@ -485,6 +497,76 @@ public void testReceiverFlowWithoutOpen()\n         assertTrue(\"Unexpected frame type\", transport.writes.get(1) instanceof Begin);\n     }\n \n+    @Test\n+    public void testSenderSendBeforeOpenConnection()\n+    {\n+        MockTransportImpl transport = new MockTransportImpl();\n+\n+        Connection connection = Proton.connection();\n+        transport.bind(connection);\n+\n+        Collector collector = Collector.Factory.create();\n+        connection.collect(collector);\n+\n+        Session session = connection.session();\n+        session.open();\n+\n+        String linkName = \"mySender\";\n+        Sender sender = session.sender(linkName);\n+        sender.open();\n+\n+        sendMessage(sender, \"tag1\", \"content1\");\n+\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 0, transport.writes.size());\n+\n+        // Now open the connection, expect the Open and Begin and Attach frames but\n+        // nothing else as we the sender wont have credit yet.\n+        connection.open();\n+\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 3, transport.writes.size());\n+\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(0) instanceof Open);\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(1) instanceof Begin);\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(2) instanceof Attach);\n+\n+        // Send the necessary responses to open/begin/attach then give sender credit\n+        transport.handleFrame(new TransportFrame(0, new Open(), null));\n+\n+        Begin begin = new Begin();\n+        begin.setRemoteChannel(UnsignedShort.valueOf((short) 0));\n+        transport.handleFrame(new TransportFrame(0, begin, null));\n+\n+        Attach attach = new Attach();\n+        attach.setHandle(UnsignedInteger.ZERO);\n+        attach.setRole(Role.RECEIVER);\n+        attach.setName(linkName);\n+        attach.setInitialDeliveryCount(UnsignedInteger.ZERO);\n+        transport.handleFrame(new TransportFrame(0, attach, null));\n+\n+        Flow flow = new Flow();\n+        flow.setHandle(UnsignedInteger.ZERO);\n+        flow.setDeliveryCount(UnsignedInteger.ZERO);\n+        flow.setNextIncomingId(UnsignedInteger.ONE);\n+        flow.setNextOutgoingId(UnsignedInteger.ZERO);\n+        flow.setIncomingWindow(UnsignedInteger.valueOf(1024));\n+        flow.setOutgoingWindow(UnsignedInteger.valueOf(1024));\n+        flow.setLinkCredit(UnsignedInteger.valueOf(10));\n+\n+        transport.handleFrame(new TransportFrame(0, flow, null));\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 3, transport.writes.size());\n+\n+        // Now pump the transport again and expect a transfer for the message\n+        pumpMockTransport(transport);\n+\n+        assertEquals(\"Unexpected frames written: \" + getFrameTypesWritten(transport), 4, transport.writes.size());\n+        assertTrue(\"Unexpected frame type\", transport.writes.get(3) instanceof Transfer);\n+    }\n+\n     private void pumpMockTransport(MockTransportImpl transport)\n     {\n         while(transport.pending() > 0)\n@@ -507,4 +589,28 @@ private String getFrameTypesWritten(MockTransportImpl transport)\n             return result;\n         }\n     }\n+\n+    private Delivery sendMessage(Sender sender, String deliveryTag, String messageContent)\n+    {\n+        byte[] tag = deliveryTag.getBytes(StandardCharsets.UTF_8);\n+\n+        Message m = Message.Factory.create();\n+        m.setBody(new AmqpValue(messageContent));\n+\n+        byte[] encoded = new byte[BUFFER_SIZE];\n+        int len = m.encode(encoded, 0, BUFFER_SIZE);\n+\n+        assertTrue(\"given array was too small\", len < BUFFER_SIZE);\n+\n+        Delivery delivery = sender.delivery(tag);\n+\n+        int sent = sender.send(encoded, 0, len);\n+\n+        assertEquals(\"sender unable to send all data at once as assumed for simplicity\", len, sent);\n+\n+        boolean senderAdvanced = sender.advance();\n+        assertTrue(\"sender has not advanced\", senderAdvanced);\n+\n+        return delivery;\n+    }\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "TransportImpl.java"
        ],
        "unit_tests": [
            "TransportImplTest.java"
        ]
    },
    "qpid-proton-j_a93ee78": {
        "repo": "qpid-proton-j",
        "message": "PROTON-215: Add type coverage to Java InteropTest.\n\nCovers all types except:\n- described types, described arrays: not yet done\n- empty array: throws NPE, possible bug in the decoder.\n\ngit-svn-id: https://svn.apache.org/repos/asf/qpid/proton/trunk@1449940 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/qpid-proton-j/commit/a93ee78f8abbe2a78f90a1e355480a031286e66a",
        "parent": "https://github.com/apache/qpid-proton-j/commit/156ce506a8bf75c0fd86c1530ba56e50fd2e9d31",
        "bug_id": "qpid-proton-j_a93ee78",
        "file": [
            {
                "sha": "714172e36f630940ad5597a1347bd24c4df5629d",
                "filename": "proton-c/bindings/java/src/main/java/org/apache/qpid/proton/TestDecoder.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/a93ee78f8abbe2a78f90a1e355480a031286e66a/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/TestDecoder.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/a93ee78f8abbe2a78f90a1e355480a031286e66a/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/TestDecoder.java",
                "status": "modified",
                "changes": 17,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/TestDecoder.java?ref=a93ee78f8abbe2a78f90a1e355480a031286e66a",
                "patch": "@@ -83,16 +83,9 @@\n     public String readString() { data.next(); return data.getString(); }\n \n     // FIXME aconway 2013-02-16:\n-    // public List readList() { data.next(); return data.getList(); }\n-    // public Map readMap() { data.next(); return data.getMap(); }\n-    // public Object[] readArray() { data.next(); return data.getArray(); }\n-    // public boolean[] readBooleanArray() { data.next(); return data.getBooleanArray(); }\n-    // public byte[] readByteArray() { data.next(); return data.getByteArray(); }\n-    // public short[] readShortArray() { data.next(); return data.getShortArray(); }\n-    // public int[] readIntegerArray() { data.next(); return data.getIntegerArray(); }\n-    // public long[] readLongArray() { data.next(); return data.getLongArray(); }\n-    // public float[] readFloatArray() { data.next(); return data.getFloatArray(); }\n-    // public double[] readDoubleArray() { data.next(); return data.getDoubleArray(); }\n-    // public char[] readCharacterArray() { data.next(); return data.getCharacterArray(); }\n-    // public Object readObject() { data.next(); return data.getObject(); }\n+    public List readList() { data.next(); return data.getJavaList(); }\n+    public Object[] readArray() { data.next(); return data.getJavaArray(); }\n+    public Map<Object, Object> readMap() { data.next(); return data.getJavaMap(); }\n+\n+     public Object readObject() { data.next(); return data.getObject(); }\n }",
                "deletions": 12
            },
            {
                "sha": "9241f581c246edeae7b0159b72fb01f1f2248e2b",
                "filename": "proton-c/bindings/java/src/main/java/org/apache/qpid/proton/codec/jni/JNIData.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/a93ee78f8abbe2a78f90a1e355480a031286e66a/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/codec/jni/JNIData.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/a93ee78f8abbe2a78f90a1e355480a031286e66a/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/codec/jni/JNIData.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/proton-c/bindings/java/src/main/java/org/apache/qpid/proton/codec/jni/JNIData.java?ref=a93ee78f8abbe2a78f90a1e355480a031286e66a",
                "patch": "@@ -971,11 +971,9 @@ public Object getObject()\n         enter();\n         for(int i = 0; i < count; i+=2)\n         {\n-            next();\n-            Object key = getObject();\n-\n+            Object key = next() != null ? getObject() : null;\n             Object value = next() != null ? getObject() : null;\n-\n+\t    map.put(key, value);\n         }\n         exit();\n         return map;",
                "deletions": 4
            },
            {
                "sha": "b4fee3fdf0cfeebdf1e81a0678e33921c44a7e49",
                "filename": "tests/java/org/apache/qpid/proton/InteropTest.java",
                "blob_url": "https://github.com/apache/qpid-proton-j/blob/a93ee78f8abbe2a78f90a1e355480a031286e66a/tests/java/org/apache/qpid/proton/InteropTest.java",
                "raw_url": "https://github.com/apache/qpid-proton-j/raw/a93ee78f8abbe2a78f90a1e355480a031286e66a/tests/java/org/apache/qpid/proton/InteropTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/qpid-proton-j/contents/tests/java/org/apache/qpid/proton/InteropTest.java?ref=a93ee78f8abbe2a78f90a1e355480a031286e66a",
                "patch": "@@ -82,7 +82,15 @@ TestDecoder createDecoder(byte[] data) {\n     }\n \n     @Test\n-    public void test_primitives() throws IOException {\n+    public void testMessage() throws IOException {\n+\tMessage m = decodeMessage(\"message\");\n+\tBinary b = (Binary)(((AmqpValue)m.getBody()).getValue());\n+\tString s = createDecoder(b.getArray()).readString();\n+\tassertEquals(\"hello\", s);\n+    }\n+\n+    @Test\n+    public void testPrimitives() throws IOException {\n \tTestDecoder d = createDecoder(getBytes(\"primitives\"));\n \tassertEquals(true, d.readBoolean());\n \tassertEquals(false, d.readBoolean());\n@@ -98,7 +106,7 @@ public void test_primitives() throws IOException {\n     }\n \n     @Test\n-    public void test_strings() throws IOException {\n+    public void testStrings() throws IOException {\n \tTestDecoder d = createDecoder(getBytes(\"strings\"));\n \tassertEquals(new Binary(\"abc\\0defg\".getBytes(\"UTF-8\")), d.readBinary());\n \tassertEquals(\"abcdefg\", d.readString());\n@@ -109,17 +117,17 @@ public void test_strings() throws IOException {\n     }\n \n     @Test\n-    public void test_described() throws IOException {\n+    public void testDescribed() throws IOException {\n \t// FIXME aconway 2013-02-18: TODO\n     }\n \n     @Test\n-    public void test_described_array() throws IOException {\n+    public void testDescribedArray() throws IOException {\n \t// FIXME aconway 2013-02-18: TODO\n     }\n \n     @Test\n-    public void test_arrays() throws IOException {\n+    public void testArrays() throws IOException {\n         TestDecoder d = createDecoder(getBytes(\"arrays\"));\n \n \tVector<Integer> ints = new Vector<Integer>();\n@@ -134,7 +142,7 @@ public void test_arrays() throws IOException {\n     }\n \n     @Test\n-    public void test_lists() throws IOException {\n+    public void testLists() throws IOException {\n         TestDecoder d = createDecoder(getBytes(\"lists\"));\n \tList<Object> l = new ArrayList<Object>() {{\n \t    add(new Integer(32));\n@@ -147,16 +155,23 @@ public void test_lists() throws IOException {\n     }\n \n     @Test\n-    public void test_maps() throws IOException {\n+    public void testMaps() throws IOException {\n         TestDecoder d = createDecoder(getBytes(\"maps\"));\n \tMap map = new HashMap() {{\n \t    put(\"one\", 1);\n \t    put(\"two\", 2);\n \t    put(\"three\", 3);\n \t}};\n \tassertEquals(map, d.readMap());\n-\t// FIXME aconway 2013-02-18: todo\n+\n+\tmap = new HashMap() {{\n+\t    put(1, \"one\");\n+\t    put(2, \"two\");\n+\t    put(3, \"three\");\n+\t}};\n+\tassertEquals(map, d.readMap());\n+\n+\tmap = new HashMap();\n+\tassertEquals(map, d.readMap());\n     }\n-    // FIXME aconway 2013-02-15: add tests for all fragments generated by\n-    // interop-generate\n }",
                "deletions": 10
            }
        ],
        "patched_files": [
            "Decoder.java",
            "JNIData.java"
        ],
        "unit_tests": [
            "TestDecoder.java",
            "InteropTest.java"
        ]
    }
}