{
    "commons-collections_34bc1b5": {
        "repo": "commons-collections",
        "message": "Adding a state check as per COLLECTIONS-3. I got an NPE when running through tests without synchronization\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@643755 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/34bc1b54db9d78b983e9d48a0f1a5a1156393a95",
        "parent": "https://github.com/apache/commons-collections/commit/975baeba6172fd711f2a13db791464e6b272a120",
        "bug_id": "commons-collections_34bc1b5",
        "file": [
            {
                "sha": "d0da4edd355baf6c7e0b26ce25885ba8e1c21664",
                "filename": "src/java/org/apache/commons/collections/map/LRUMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/34bc1b54db9d78b983e9d48a0f1a5a1156393a95/src/java/org/apache/commons/collections/map/LRUMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/34bc1b54db9d78b983e9d48a0f1a5a1156393a95/src/java/org/apache/commons/collections/map/LRUMap.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/java/org/apache/commons/collections/map/LRUMap.java?ref=34bc1b54db9d78b983e9d48a0f1a5a1156393a95",
                "patch": "@@ -191,6 +191,11 @@ protected void moveToMRU(LinkEntry entry) {\n         if (entry.after != header) {\n             modCount++;\n             // remove\n+            if(entry.before == null) {\n+                throw new IllegalStateException(\"Entry.before is null.\" + \n+                    \" Please check that your keys are immutable, and that you have used synchronization properly.\" +\n+                    \" If so, then please report this to dev@commons.apache.org as a bug.\");\n+            }\n             entry.before.after = entry.after;\n             entry.after.before = entry.before;\n             // add first",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LRUMap.java"
        ],
        "unit_tests": [
            "TestLRUMap.java"
        ]
    },
    "commons-collections_0145c16": {
        "repo": "commons-collections",
        "message": "PR: COLLECTIONS-360\nPrevent an NPE in FilterListIterator.next() and FilterListIterator.previous()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1076034 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/0145c16a6ff8dced5e3cdb899a250dcd49ef780f",
        "parent": "https://github.com/apache/commons-collections/commit/152588c28661b0dee5d9456baf8b8d0035c3739d",
        "bug_id": "commons-collections_0145c16",
        "file": [
            {
                "sha": "2edbcb455c0efcb8ce262060edd049305f2f7d01",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/commons-collections/blob/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/pom.xml",
                "raw_url": "https://github.com/apache/commons-collections/raw/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/pom.xml?ref=0145c16a6ff8dced5e3cdb899a250dcd49ef780f",
                "patch": "@@ -350,6 +350,9 @@\n     <contributor>\n       <name>Serhiy Yevtushenko</name>\n     </contributor>\n+    <contributor>\n+      <name>Sai Zhang</name>\n+    </contributor>\n     <contributor>\n       <name>Jason van Zyl</name>\n     </contributor>",
                "deletions": 0
            },
            {
                "sha": "8c2d65002b5875d9f1a0a88e34687d09582628bb",
                "filename": "src/java/org/apache/commons/collections/iterators/FilterListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/src/java/org/apache/commons/collections/iterators/FilterListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/src/java/org/apache/commons/collections/iterators/FilterListIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/java/org/apache/commons/collections/iterators/FilterListIterator.java?ref=0145c16a6ff8dced5e3cdb899a250dcd49ef780f",
                "patch": "@@ -227,6 +227,9 @@ private boolean setNextObject() {\n             clearNextObject();\n         }\n \n+        if (iterator == null) {\n+            return false;\n+        }\n         while (iterator.hasNext()) {\n             E object = iterator.next();\n             if (predicate.evaluate(object)) {\n@@ -256,6 +259,9 @@ private boolean setPreviousObject() {\n             clearPreviousObject();\n         }\n \n+        if (iterator == null) {\n+            return false;\n+        }\n         while (iterator.hasPrevious()) {\n             E object = iterator.previous();\n             if (predicate.evaluate(object)) {",
                "deletions": 0
            },
            {
                "sha": "a18514db8ade18b2e2488c0140227d36fc63bb67",
                "filename": "src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/0145c16a6ff8dced5e3cdb899a250dcd49ef780f/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java?ref=0145c16a6ff8dced5e3cdb899a250dcd49ef780f",
                "patch": "@@ -17,12 +17,16 @@\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Random;\n \n import junit.framework.TestCase;\n import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.list.GrowthList;\n+import org.junit.Assert;\n \n /**\n  * Tests the FilterListIterator class.\n@@ -279,6 +283,18 @@ public void testFailingHasNextBug() {\n         assertEquals(expected.previous(), filtered.previous());\n     }\n \n+    /**\n+     * Test for {@link https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360}.\n+     */\n+    public void testCollections360() throws Throwable {\n+        Collection<Predicate<Object>> var7 = new GrowthList<Predicate<Object>>();\n+        Predicate<Object> var9 = PredicateUtils.anyPredicate(var7);\n+        FilterListIterator<Object> var13 = new FilterListIterator<Object>(var9);\n+        Assert.assertFalse(var13.hasNext());\n+        FilterListIterator<Object> var14 = new FilterListIterator<Object>(var9);\n+        Assert.assertFalse(var14.hasPrevious());\n+    }\n+\n     // Utilities\n \n     private void walkForward(ListIterator<?> expected, ListIterator<?> testing) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "FilterListIterator.java"
        ],
        "unit_tests": [
            "TestFilterListIterator.java"
        ]
    },
    "commons-collections_c46666c": {
        "repo": "commons-collections",
        "message": "[COLLECTIONS-710] NullPointerExceptions in CompositeCollection,\nCompositeSet, and CompositeMap.",
        "commit": "https://github.com/apache/commons-collections/commit/c46666c5ddbc14bfdb910949de49ac353676f03f",
        "parent": "https://github.com/apache/commons-collections/commit/036bbf34d2742af78ff2c44f4223e1b268e1c12c",
        "bug_id": "commons-collections_c46666c",
        "file": [
            {
                "sha": "422e25c8da9d21add189b49cb4565b64c1493471",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-collections/blob/c46666c5ddbc14bfdb910949de49ac353676f03f/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-collections/raw/c46666c5ddbc14bfdb910949de49ac353676f03f/src/changes/changes.xml",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/changes/changes.xml?ref=c46666c5ddbc14bfdb910949de49ac353676f03f",
                "patch": "@@ -20,6 +20,11 @@\n     <title>Commons Collections Changes</title>\n   </properties>\n   <body>\n+  <release version=\"4.3.1\" date=\"2019-MM-DD\" description=\"Maintenance release.\">\n+    <action issue=\"COLLECTIONS-710\" dev=\"ggregory\" type=\"fix\" due-to=\"Yu Shi, Gary Gregory\">\n+      NullPointerExceptions in CompositeCollection, CompositeSet, and CompositeMap.\n+    </action>\n+  </release>\n   <release version=\"4.3\" date=\"2018-12-21\" description=\"Update from Java 7 to Java 8, bug fixes, and small changes.\">\n     <action issue=\"COLLECTIONS-691\" dev=\"kinow\" type=\"fix\" due-to=\"Eitan Adler\">\n       Use boolean operator for boolean result.",
                "deletions": 0
            },
            {
                "sha": "8504b36a22b5eac5bf93bd105a79f4c1e6ef6a6d",
                "filename": "src/main/java/org/apache/commons/collections4/map/CompositeMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/c46666c5ddbc14bfdb910949de49ac353676f03f/src/main/java/org/apache/commons/collections4/map/CompositeMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/c46666c5ddbc14bfdb910949de49ac353676f03f/src/main/java/org/apache/commons/collections4/map/CompositeMap.java",
                "status": "modified",
                "changes": 22,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/CompositeMap.java?ref=c46666c5ddbc14bfdb910949de49ac353676f03f",
                "patch": "@@ -132,19 +132,21 @@ public void setMutator(final MapMutator<K, V> mutator) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public synchronized void addComposited(final Map<K, V> map) throws IllegalArgumentException {\n-        for (int i = composite.length - 1; i >= 0; --i) {\n-            final Collection<K> intersect = CollectionUtils.intersection(this.composite[i].keySet(), map.keySet());\n-            if (intersect.size() != 0) {\n-                if (this.mutator == null) {\n-                    throw new IllegalArgumentException(\"Key collision adding Map to CompositeMap\");\n+        if (map != null) {\n+            for (int i = composite.length - 1; i >= 0; --i) {\n+                final Collection<K> intersect = CollectionUtils.intersection(this.composite[i].keySet(), map.keySet());\n+                if (intersect.size() != 0) {\n+                    if (this.mutator == null) {\n+                        throw new IllegalArgumentException(\"Key collision adding Map to CompositeMap\");\n+                    }\n+                    this.mutator.resolveCollision(this, this.composite[i], map, intersect);\n                 }\n-                this.mutator.resolveCollision(this, this.composite[i], map, intersect);\n             }\n+            final Map<K, V>[] temp = new Map[this.composite.length + 1];\n+            System.arraycopy(this.composite, 0, temp, 0, this.composite.length);\n+            temp[temp.length - 1] = map;\n+            this.composite = temp;\n         }\n-        final Map<K, V>[] temp = new Map[this.composite.length + 1];\n-        System.arraycopy(this.composite, 0, temp, 0, this.composite.length);\n-        temp[temp.length - 1] = map;\n-        this.composite = temp;\n     }\n \n     /**",
                "deletions": 10
            },
            {
                "sha": "4499eb211e2081cae49d8114fa8b4b355bef4b2f",
                "filename": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/c46666c5ddbc14bfdb910949de49ac353676f03f/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/c46666c5ddbc14bfdb910949de49ac353676f03f/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java?ref=c46666c5ddbc14bfdb910949de49ac353676f03f",
                "patch": "@@ -75,6 +75,7 @@ public void testAddComposited() {\n         final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n         final HashMap<K, V> three = new HashMap<>();\n         three.put((K) \"5\", (V) \"five\");\n+        map.addComposited(null);\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n         try {\n@@ -90,6 +91,7 @@ public void testRemoveComposited() {\n         final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n         final HashMap<K, V> three = new HashMap<>();\n         three.put((K) \"5\", (V) \"five\");\n+        map.addComposited(null);\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n \n@@ -106,6 +108,7 @@ public void testRemoveFromUnderlying() {\n         final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n         final HashMap<K, V> three = new HashMap<>();\n         three.put((K) \"5\", (V) \"five\");\n+        map.addComposited(null);\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n \n@@ -119,6 +122,7 @@ public void testRemoveFromComposited() {\n         final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n         final HashMap<K, V> three = new HashMap<>();\n         three.put((K) \"5\", (V) \"five\");\n+        map.addComposited(null);\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "CompositeMap.java"
        ],
        "unit_tests": [
            "CompositeMapTest.java"
        ]
    },
    "commons-collections_a270ff6": {
        "repo": "commons-collections",
        "message": "[COLLECTIONS-586] PatriciaTrie prefixMap clear throws NullPointerException. Applied patch and added an extra test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1755219 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/a270ff62852e62b5ac0f943a7e57292a72b77271",
        "parent": "https://github.com/apache/commons-collections/commit/796114ea4a9cc57ab17170536e1caa5933520c47",
        "bug_id": "commons-collections_a270ff6",
        "file": [
            {
                "sha": "3997c3c7fd0bba3fbfcdc86f84cd2f78069ee5b3",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/changes/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/changes/changes.xml?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "patch": "@@ -24,6 +24,9 @@\n     <action issue=\"COLLECTIONS-589\" dev=\"ggregory\" type=\"add\" due-to=\"Gary Gregory\">\n       Add null-safe MapUtils.size(Map&lt;?, ?>) method. \n     </action>\n+    <action issue=\"COLLECTIONS-586\" dev=\"ggregory\" type=\"add\" due-to=\"Shailender Bathula, Gary Gregory\">\n+      PatriciaTrie prefixMap clear throws NullPointerException. \n+    </action>\n   </release>\n   <release version=\"4.1\" date=\"2015-11-28\" description=\"This is a security and minor release.\">\n     <action issue=\"COLLECTIONS-508\" dev=\"tn\" type=\"add\">",
                "deletions": 0
            },
            {
                "sha": "bd11f75b7fac9115f646ca6aa5ff85717e753d1f",
                "filename": "src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "patch": "@@ -2258,6 +2258,17 @@ public boolean isToInclusive() {\n                                                  final K toKey, final boolean toInclusive) {\n             return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);\n         }\n+\n+        @Override\n+        public void clear() {\n+            Iterator<Map.Entry<K, V>> it = AbstractPatriciaTrie.this.entrySet().iterator();\n+            Set<K> currentKeys = keySet();\n+            while (it.hasNext()) {\n+                if (currentKeys.contains(it.next().getKey())) {\n+                    it.remove();\n+                }\n+            }\n+        }\n     }\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "92559fb7f930802e3781f51b5d136a6f3ed00823",
                "filename": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/a270ff62852e62b5ac0f943a7e57292a72b77271/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/a270ff62852e62b5ac0f943a7e57292a72b77271/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java",
                "status": "modified",
                "changes": 63,
                "additions": 63,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java?ref=a270ff62852e62b5ac0f943a7e57292a72b77271",
                "patch": "@@ -16,15 +16,20 @@\n  */\n package org.apache.commons.collections4.trie;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Set;\n import java.util.SortedMap;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Trie;\n import org.apache.commons.collections4.map.AbstractSortedMapTest;\n import org.junit.Assert;\n \n@@ -365,6 +370,64 @@ public void testPrefixMapSizes2() {\n         assertTrue(trie.prefixMap(prefixString).containsKey(longerString));\n     }\n \n+    public void testPrefixMapClear() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        trie.put(\"Anna\", 1);\n+        trie.put(\"Anael\", 2);\n+        trie.put(\"Analu\", 3);\n+        trie.put(\"Andreas\", 4);\n+        trie.put(\"Andrea\", 5);\n+        trie.put(\"Andres\", 6);\n+        trie.put(\"Anatole\", 7);\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));\n+\n+        prefixMap.clear();\n+        assertTrue(prefixMap.isEmpty());\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));\n+    }\n+\n+    public void testPrefixMapClearNothing() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(), prefixMap.keySet());\n+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(prefixMap.values()));\n+\n+        prefixMap.clear();\n+        assertTrue(prefixMap.isEmpty());\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(), trie.keySet());\n+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(trie.values()));\n+    }\n+\n+    public void testPrefixMapClearUsingRemove() {\n+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();\n+        trie.put(\"Anna\", 1);\n+        trie.put(\"Anael\", 2);\n+        trie.put(\"Analu\", 3);\n+        trie.put(\"Andreas\", 4);\n+        trie.put(\"Andrea\", 5);\n+        trie.put(\"Andres\", 6);\n+        trie.put(\"Anatole\", 7);\n+        SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));\n+\n+        Set<String> keys = new HashSet<String>(prefixMap.keySet());\n+        for (final String key : keys) {\n+            prefixMap.remove(key);\n+        }\n+        assertTrue(prefixMap.keySet().isEmpty());\n+        assertTrue(prefixMap.values().isEmpty());\n+        assertEquals(new HashSet<String>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));\n+    }\n+\n     //-----------------------------------------------------------------------\n \n     @Override",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractPatriciaTrie.java",
            "PatriciaTrie.java"
        ],
        "unit_tests": [
            "PatriciaTrieTest.java"
        ]
    },
    "commons-collections_b337feb": {
        "repo": "commons-collections",
        "message": "[COLLECTIONS-739] Fix inconsistent @throws comments in DefaultedMap (#123)\n\n* COLLECTIONS-739: Fix inconsistent @throws in DefaultedMap.\r\n\r\n* COLLECTIONS-739: Change IllegalArgumentException to NullPointerException in DefaultedMap.defaultedMap, and update Javadoc correspondingly.\r\n\r\n* COLLECTIONS-739: Add tests for factory methods in DefaultedMap.\r\n\r\n* COLLECTIONS-739: Change null checking to use Objects.requireNonNull.",
        "commit": "https://github.com/apache/commons-collections/commit/b337febe27fe070081d570d3413a24187e86d4ef",
        "parent": "https://github.com/apache/commons-collections/commit/dc1aca9ed9bb17cffd546f5bd3f93077ce2f8457",
        "bug_id": "commons-collections_b337feb",
        "file": [
            {
                "sha": "6fda447e8dc3bce8228c13592fe261c2dcecce08",
                "filename": "src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/b337febe27fe070081d570d3413a24187e86d4ef/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/b337febe27fe070081d570d3413a24187e86d4ef/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java?ref=b337febe27fe070081d570d3413a24187e86d4ef",
                "patch": "@@ -110,10 +110,8 @@\n      * @since 4.0\n      */\n     public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory) {\n-        if (factory == null) {\n-            throw new IllegalArgumentException(\"Factory must not be null\");\n-        }\n-        return new DefaultedMap<>(map, FactoryTransformer.factoryTransformer(factory));\n+        return new DefaultedMap<>(map, FactoryTransformer.factoryTransformer(\n+                Objects.requireNonNull(factory, \"Factory must not be null\")));\n     }\n \n     /**\n@@ -128,15 +126,12 @@\n      * @param map  the map to decorate, must not be null\n      * @param transformer  the transformer to use as a factory to create entries, must not be null\n      * @return a new defaulting map\n-     * @throws NullPointerException if map or factory is null\n+     * @throws NullPointerException if map or transformer is null\n      * @since 4.0\n      */\n     public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map,\n                                                 final Transformer<? super K, ? extends V> transformer) {\n-        if (transformer == null) {\n-           throw new IllegalArgumentException(\"Transformer must not be null\");\n-       }\n-       return new DefaultedMap<>(map, transformer);\n+        return new DefaultedMap<>(map, Objects.requireNonNull(transformer, \"Transformer must not be null\"));\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 9
            },
            {
                "sha": "5c0da38d9486dc970f587027bca11e12616f3a4a",
                "filename": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/b337febe27fe070081d570d3413a24187e86d4ef/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/b337febe27fe070081d570d3413a24187e86d4ef/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java?ref=b337febe27fe070081d570d3413a24187e86d4ef",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.commons.collections4.FactoryUtils;\n import org.apache.commons.collections4.IterableMap;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.collections4.TransformerUtils;\n import org.apache.commons.collections4.functors.ConstantFactory;\n \n /**\n@@ -34,6 +35,7 @@\n public class DefaultedMapTest<K, V> extends AbstractIterableMapTest<K, V> {\n \n     protected final Factory<V> nullFactory = FactoryUtils.<V>nullFactory();\n+    protected final Transformer<K, V> nullTransformer = TransformerUtils.<K, V>nullTransformer();\n \n     public DefaultedMapTest(final String testName) {\n         super(testName);\n@@ -127,6 +129,45 @@ public void testMapGet4() {\n         assertEquals(\"NULL_OBJECT\", map.get(Integer.valueOf(0)));\n     }\n \n+     public void testFactoryMethods() {\n+         final HashMap<K, V> base = new HashMap<>();\n+\n+         try {\n+             DefaultedMap.defaultedMap(null, (V) \"DEFAULT_VALUE\");\n+             fail(\"Expecting NullPointerException\");\n+         } catch (NullPointerException e) {\n+             // Expected\n+         }\n+    \n+         try {\n+             DefaultedMap.defaultedMap((Map<K, V>) null, nullFactory);\n+             fail(\"Expecting NullPointerException\");\n+         } catch (NullPointerException e) {\n+             // Expected\n+         }\n+\n+         try {\n+             DefaultedMap.defaultedMap(base, (Factory<V>) null);\n+             fail(\"Expecting NullPointerException\");\n+         } catch (NullPointerException e) {\n+             // Expected\n+         }\n+    \n+         try {\n+             DefaultedMap.defaultedMap((Map<K, V>) null, nullTransformer);\n+             fail(\"Expecting NullPointerException\");\n+         } catch (NullPointerException e) {\n+             // Expected\n+         }\n+\n+         try {\n+             DefaultedMap.defaultedMap(base, (Transformer<K, V>) null);\n+             fail(\"Expecting NullPointerException\");\n+         } catch (NullPointerException e) {\n+             // Expected\n+         }\n+     }\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"4\";",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DefaultedMap.java"
        ],
        "unit_tests": [
            "DefaultedMapTest.java"
        ]
    },
    "commons-collections_6b323f0": {
        "repo": "commons-collections",
        "message": "First review of MultiValuedMap: formatting, throw NullPointerException for null inputs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1683013 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
        "parent": "https://github.com/apache/commons-collections/commit/1c0b6089f44a08ba6447263b6f9756a98c26cb54",
        "bug_id": "commons-collections_6b323f0",
        "file": [
            {
                "sha": "5ccc48c7b4eef44b49e1db11f27051188d7f620a",
                "filename": "src/main/java/org/apache/commons/collections4/MultiMapUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/MultiMapUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/MultiMapUtils.java",
                "status": "modified",
                "changes": 150,
                "additions": 71,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/MultiMapUtils.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -30,10 +30,8 @@\n /**\n  * Provides utility methods and decorators for {@link MultiValuedMap} instances.\n  * <p>\n- * It contains various type safe and null safe methods.\n- * <p>\n- * It also provides the following decorators:\n- *\n+ * It contains various type safe and null safe methods. Additionally, it provides\n+ * the following decorators:\n  * <ul>\n  *   <li>{@link #unmodifiableMultiValuedMap(MultiValuedMap)}</li>\n  *   <li>{@link #transformedMultiValuedMap(MultiValuedMap, Transformer, Transformer)}</li>\n@@ -47,8 +45,7 @@\n     /**\n      * <code>MultiMapUtils</code> should not normally be instantiated.\n      */\n-    private MultiMapUtils() {\n-    }\n+    private MultiMapUtils() {}\n \n     /**\n      * An empty {@link UnmodifiableMultiValuedMap}.\n@@ -60,8 +57,8 @@ private MultiMapUtils() {\n     /**\n      * Returns immutable EMPTY_MULTI_VALUED_MAP with generic type safety.\n      *\n-     * @param <K> the type of key in the map\n-     * @param <V> the type of value in the map\n+     * @param <K>  the type of key in the map\n+     * @param <V>  the type of value in the map\n      * @return immutable and empty <code>MultiValuedMap</code>\n      */\n     @SuppressWarnings(\"unchecked\")\n@@ -75,10 +72,10 @@ private MultiMapUtils() {\n      * Returns an immutable empty <code>MultiValuedMap</code> if the argument is\n      * <code>null</code>, or the argument itself otherwise.\n      *\n-     * @param <K> the type of key in the map\n-     * @param <V> the type of value in the map\n-     * @param map the map, possibly <code>null</code>\n-     * @return an empty <code>MultiValuedMap</code> if the argument is <code>null</code>\n+     * @param <K>  the type of key in the map\n+     * @param <V>  the type of value in the map\n+     * @param map  the map, may be null\n+     * @return an empty {@link MultiValuedMap} if the argument is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map) {\n@@ -88,10 +85,10 @@ private MultiMapUtils() {\n     /**\n      * Null-safe check if the specified <code>MultiValuedMap</code> is empty.\n      * <p>\n-     * Null returns true.\n+     * If the provided map is null, returns true.\n      *\n-     * @param map the map to check, may be null\n-     * @return true if empty or null\n+     * @param map  the map to check, may be null\n+     * @return true if the map is empty or null\n      */\n     public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n         return map == null || map.isEmpty();\n@@ -103,11 +100,11 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n     /**\n      * Gets a Collection from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code>, <code>null</code> if map input is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap}, or null if input map is null\n      */\n     public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n@@ -116,17 +113,19 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n         return null;\n     }\n \n+    // TODO: review the getValuesAsXXX methods - depending on the actual MultiValuedMap type, changes\n+    // to the returned collection might update the backing map. This should be clarified and/or prevented.\n+\n     /**\n      * Gets a List from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as List,\n-     *         <code>null</code> if map input is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as List, or null if input map is null\n      */\n-    public static <K, V> List<V> getList(MultiValuedMap<K, V> map, K key) {\n+    public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof List) {\n@@ -140,14 +139,13 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n     /**\n      * Gets a Set from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as Set,\n-     *         <code>null</code> if map input is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null\n      */\n-    public static <K, V> Set<V> getSet(MultiValuedMap<K, V> map, K key) {\n+    public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof Set) {\n@@ -161,14 +159,13 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n     /**\n      * Gets a Bag from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as Bag,\n-     *         <code>null</code> if map input is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null\n      */\n-    public static <K, V> Bag<V> getBag(MultiValuedMap<K, V> map, K key) {\n+    public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof Bag) {\n@@ -183,53 +180,54 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n     // -----------------------------------------------------------------------\n \n     /**\n-     * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal storage.\n+     * Creates a {@link ListValuedMap} with an {@link java.util.ArrayList ArrayList} as\n+     * collection class to store the values mapped to a key.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @return a new <code>ListValuedMap</code>\n      */\n-    public static <K, V> ListValuedMap<K, V> createListValuedHashMap() {\n+    public static <K, V> ListValuedMap<K, V> newListValuedHashMap() {\n         return MultiValuedHashMap.<K, V>listValuedHashMap();\n     }\n \n     /**\n      * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to list of type <code>listClass</code>.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param <C> the List class type\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <C>  the List class type\n      * @param listClass the class of the list\n-     * @return a new <code>ListValuedMap</code>\n+     * @return a new {@link ListValuedMap}\n      */\n-    public static <K, V, C extends List<V>> ListValuedMap<K, V> createListValuedHashMap(final Class<C> listClass) {\n+    public static <K, V, C extends List<V>> ListValuedMap<K, V> newListValuedHashMap(final Class<C> listClass) {\n         return MultiValuedHashMap.<K, V, C>listValuedHashMap(listClass);\n     }\n \n     /**\n-     * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n-     * storage\n+     * Creates a {@link SetValuedMap} with an {@link java.util.HashSet HashSet} as\n+     * collection class to store the values mapped to a key.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @return a new <code>SetValuedMap</code>\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @return a new {@link SetValuedMap}\n      */\n-    public static <K, V> SetValuedMap<K, V> createSetValuedHashMap() {\n+    public static <K, V> SetValuedMap<K, V> newSetValuedHashMap() {\n         return MultiValuedHashMap.<K, V>setValuedHashMap();\n     }\n \n     /**\n      * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to a set of type <code>setClass</code>\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param <C> the Set class type\n-     * @param setClass the class of the set\n-     * @return a new <code>SetValuedMap</code>\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <C>  the Set class type\n+     * @param setClass  the class of the set\n+     * @return a new {@link SetValuedMap}\n      */\n-    public static <K, V, C extends Set<V>> SetValuedMap<K, V> createSetValuedHashMap(final Class<C> setClass) {\n+    public static <K, V, C extends Set<V>> SetValuedMap<K, V> newSetValuedHashMap(final Class<C> setClass) {\n         return MultiValuedHashMap.<K, V, C>setValuedHashMap(setClass);\n     }\n \n@@ -240,13 +238,11 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n      * Returns an <code>UnmodifiableMultiValuedMap</code> backed by the given\n      * map.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to make unmodifiable, must not\n-     *        be null\n-     * @return an <code>UnmodifiableMultiValuedMap</code> backed by the given\n-     *         map\n-     * @throws IllegalArgumentException if the map is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to decorate, must not be null\n+     * @return an unmodifiable {@link MultiValuedMap} backed by the provided map\n+     * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(\n             final MultiValuedMap<? extends K, ? extends V> map) {\n@@ -268,17 +264,13 @@ public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n      * If there are any elements already in the map being decorated, they are\n      * NOT transformed.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to transform, must not be\n-     *        null, typically empty\n-     * @param keyTransformer the transformer for the map keys, null means no\n-     *        transformation\n-     * @param valueTransformer the transformer for the map values, null means no\n-     *        transformation\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map the {@link MultiValuedMap} to transform, must not be null, typically empty\n+     * @param keyTransformer the transformer for the map keys, null means no transformation\n+     * @param valueTransformer the transformer for the map values, null means no transformation\n      * @return a transformed <code>MultiValuedMap</code> backed by the given map\n-     * @throws IllegalArgumentException if the <code>MultiValuedMap</code> is\n-     *         null\n+     * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,",
                "deletions": 79
            },
            {
                "sha": "6055d9460df84077d0ec2cc7da406e692946d7a6",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -49,9 +49,9 @@\n      * @param <C> the list type\n      * @param map the map to wrap, must not be null\n      * @param listClazz the collection class\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n-    protected <C extends List<V>> AbstractListValuedMap(Map<K, ? super C> map, Class<C> listClazz) {\n+    protected <C extends List<V>> AbstractListValuedMap(final Map<K, ? super C> map, Class<C> listClazz) {\n         super(map, listClazz);\n     }\n \n@@ -62,11 +62,11 @@\n      * @param map the map to wrap, must not be null\n      * @param listClazz the collection class\n      * @param initialListCapacity the initial size of the values list\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialListCapacity is negative\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialListCapacity is negative\n      */\n-    protected <C extends List<V>> AbstractListValuedMap(Map<K, ? super C> map, Class<C> listClazz,\n-            int initialListCapacity) {\n+    protected <C extends List<V>> AbstractListValuedMap(final Map<K, ? super C> map, Class<C> listClazz,\n+                                                        final int initialListCapacity) {\n         super(map, listClazz, initialListCapacity);\n     }\n \n@@ -75,8 +75,7 @@\n      * return an empty list in case the mapping is not present\n      *\n      * @param key the key to retrieve\n-     * @return the <code>List</code> of values, will return an empty\n-     *         <code>List</code> for no mapping\n+     * @return the <code>List</code> of values, will return an empty {@link List} for no mapping\n      * @throws ClassCastException if the key is of an invalid type\n      */\n     @Override",
                "deletions": 8
            },
            {
                "sha": "d6a11e9f11fb36f6cba45cbbdb2b2806bb6195ec",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -77,13 +77,13 @@\n      * @param <C>  the collection type\n      * @param map  the map to wrap, must not be null\n      * @param collectionClazz  the collection class\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map,\n                                                                final Class<C> collectionClazz) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null.\");\n         }\n         this.map = (Map<K, Collection<V>>) map;\n         this.collectionFactory = new InstantiateFactory<C>(collectionClazz);\n@@ -96,14 +96,14 @@\n      * @param map the map to wrap, must not be null\n      * @param collectionClazz the collection class\n      * @param initialCollectionCapacity the initial capacity of the collection\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialCollectionCapacity is negative\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialCollectionCapacity is negative\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map,\n             final Class<C> collectionClazz, final int initialCollectionCapacity) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null.\");\n         }\n         if (initialCollectionCapacity < 0) {\n             throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCollectionCapacity);",
                "deletions": 5
            },
            {
                "sha": "5d9b17c67530758ef9d1067ea4fbb95e43eca205",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -29,8 +29,9 @@\n /**\n  * Decorates another <code>MultiValuedMap</code> to provide additional behaviour.\n  * <p>\n- * Each method call made on this <code>MultiValuedMap</code> is forwarded to the decorated <code>MultiValuedMap</code>.\n- * This class is used as a framework to build to extensions such as synchronized and unmodifiable behaviour.\n+ * Each method call made on this <code>MultiValuedMap</code> is forwarded to the\n+ * decorated <code>MultiValuedMap</code>. This class is used as a framework to build\n+ * to extensions such as synchronized and unmodifiable behaviour.\n  *\n  * @param <K> the type of key elements\n  * @param <V> the type of value elements\n@@ -51,12 +52,11 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected AbstractMultiValuedMapDecorator(final MultiValuedMap<K, V> map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\n-                    \"MultiValuedMap must not be null\");\n+            throw new NullPointerException(\"MultiValuedMap must not be null.\");\n         }\n         this.map = map;\n     }",
                "deletions": 5
            },
            {
                "sha": "b763460120c1ca324f50da8b928a76581a40808b",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -47,7 +47,7 @@\n      * @param <C> the set type\n      * @param map the map to wrap, must not be null\n      * @param setClazz the collection class\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected <C extends Set<V>> AbstractSetValuedMap(Map<K, ? super C> map, Class<C> setClazz) {\n         super(map, setClazz);\n@@ -60,8 +60,8 @@\n      * @param map the map to wrap, must not be null\n      * @param setClazz the collection class\n      * @param initialSetCapacity the initial size of the values set\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialSetCapacity is negative\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialSetCapacity is negative\n      */\n     protected <C extends Set<V>> AbstractSetValuedMap(Map<K, ? super C> map, Class<C> setClazz,\n             int initialSetCapacity) {",
                "deletions": 3
            },
            {
                "sha": "f4a54b19ca79ddff85d73313922dff56aaed9a7f",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java",
                "status": "modified",
                "changes": 17,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -163,8 +163,7 @@ public MultiValuedHashMap(int initialCapacity, float loadFactor) {\n      *\n      * @param initialCapacity the initial capacity of the underlying hash map\n      * @param loadFactor the load factor of the underlying hash map\n-     * @param initialCollectionCapacity the initial capacity of the Collection\n-     *        of values\n+     * @param initialCollectionCapacity the initial capacity of the Collection of values\n      */\n     @SuppressWarnings(\"unchecked\")\n     public MultiValuedHashMap(int initialCapacity, float loadFactor, int initialCollectionCapacity) {\n@@ -211,17 +210,13 @@ public MultiValuedHashMap(final Map<? extends K, ? extends V> map) {\n \n     /**\n      * Creates a MultiValuedHashMap which creates the value collections using\n-     * the supplied <code>collectionClazz</code> and the initial collection\n-     * capacity .\n+     * the supplied <code>collectionClazz</code> and the initial collection capacity.\n      *\n-     * @param initialCapacity the initial capacity of the underlying\n-     *        <code>HashMap</code>\n-     * @param loadFactor the load factor of the underlying <code>HashMap</code>\n-     * @param initialCollectionCapacity the initial capacity of the\n-     *        <code>Collection</code>\n      * @param <C> the collection type\n-     * @param collectionClazz the class of the <code>Collection</code> to use to\n-     *        create the value collections\n+     * @param initialCapacity the initial capacity of the underlying <code>HashMap</code>\n+     * @param loadFactor the load factor of the underlying <code>HashMap</code>\n+     * @param initialCollectionCapacity the initial capacity of the <code>Collection</code>\n+     * @param collectionClazz the class of the <code>Collection</code> to use to create the value collections\n      */\n     protected <C extends Collection<V>> MultiValuedHashMap(int initialCapacity, float loadFactor,\n             final Class<C> collectionClazz, int initialCollectionCapacity) {",
                "deletions": 11
            },
            {
                "sha": "cbd9457ec2bd28315f676e256e906ff3c7e3cf5c",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -60,8 +60,8 @@\n      * @throws IllegalArgumentException if map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <K, V> UnmodifiableMultiValuedMap<K, V>\n-            unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {\n+    public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(\n+            MultiValuedMap<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n             return (UnmodifiableMultiValuedMap<K, V>) map;\n         }",
                "deletions": 2
            },
            {
                "sha": "a884a8edc3f1f708981ddd3f620b45d74b015fc3",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/6b323f0f53f2018f83b070d7b3a21f16d2f6acfb/src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/package-info.java?ref=6b323f0f53f2018f83b070d7b3a21f16d2f6acfb",
                "patch": "@@ -21,7 +21,6 @@\n  * The following implementations are provided in the package:\n  * <ul>\n  *   <li>MultiValuedHashMap - implementation that uses a HashMap to store the data\n- *   <li>MultiValuedLinkedHashMap - implementation that uses a LinkedHashMap as backing map\n  * </ul>\n  * <p>\n  * The following decorators are provided in the package:",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AbstractMultiValuedMap.java",
            "UnmodifiableMultiValuedMap.java",
            "MultiValuedHashMap.java",
            "MultiMapUtils.java"
        ],
        "unit_tests": [
            "UnmodifiableMultiValuedMapTest.java",
            "MultiValuedHashMapTest.java",
            "AbstractMultiValuedMapTest.java",
            "MultiMapUtilsTest.java"
        ]
    },
    "commons-collections_4f5a854": {
        "repo": "commons-collections",
        "message": "Continue review of MultiValuedMap interface and implementations: code style and formatting, use NullPointerException for null arguments, use MultiSet instead of Bag.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1684983 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
        "parent": "https://github.com/apache/commons-collections/commit/fb08d55cbe50160fcd7184845ef723f813b7ec84",
        "bug_id": "commons-collections_4f5a854",
        "file": [
            {
                "sha": "a62d177ef4c7bf777b603bf27caa27876a6586ca",
                "filename": "src/main/java/org/apache/commons/collections4/ListValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/ListValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/ListValuedMap.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ListValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -21,10 +21,10 @@\n /**\n  * Defines a map that holds a list of values against each key.\n  * <p>\n- * A <code>ListValuedMap</code> is a Map with slightly different semantics:\n+ * A {@code ListValuedMap} is a Map with slightly different semantics:\n  * <ul>\n- *   <li>Putting a value into the map will add the value to a Collection at that key.</li>\n- *   <li>Getting a value will return a Collection, holding all the values put to that key.</li>\n+ *   <li>Putting a value into the map will add the value to a {@link List} at that key.</li>\n+ *   <li>Getting a value will return a {@link List}, holding all the values put to that key.</li>\n  * </ul>\n  *\n  * @since 4.1\n@@ -40,12 +40,13 @@\n      * returned list will update the underlying {@code ListValuedMap} and\n      * vice-versa.\n      *\n-     * @param key the key to retrieve\n-     * @return the <code>List</code> of values, implementations should return an\n-     *         empty list for no mapping\n+     * @param key  the key to retrieve\n+     * @return the {@code List} of values, implementations should return an\n+     *   empty {@code List} for no mapping\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n+    @Override\n     List<V> get(Object key);\n \n     /**\n@@ -55,13 +56,14 @@\n      * propagated to this list-valued map. In case no mapping was stored for the\n      * specified key, an empty, unmodifiable list will be returned.\n      *\n-     * @param key the key to remove values from\n-     * @return the <code>List</code> of values removed, implementations\n-     *         typically return an empty, unmodifiable List for no mapping found\n+     * @param key  the key to remove values from\n+     * @return the {@code List} of values removed, implementations\n+     *   typically return an empty, unmodifiable {@code List} for no mapping found\n      * @throws UnsupportedOperationException if the map is unmodifiable\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n+    @Override\n     List<V> remove(Object key);\n \n }",
                "deletions": 9
            },
            {
                "sha": "66c7da085eaf55048bab7880babbf91cc91b1235",
                "filename": "src/main/java/org/apache/commons/collections4/MultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/MultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/MultiValuedMap.java",
                "status": "modified",
                "changes": 133,
                "additions": 68,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/MultiValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -24,10 +24,10 @@\n /**\n  * Defines a map that holds a collection of values against each key.\n  * <p>\n- * A <code>MultiValuedMap</code> is a Map with slightly different semantics:\n+ * A {@code MultiValuedMap} is a Map with slightly different semantics:\n  * <ul>\n- *   <li>Putting a value into the map will add the value to a Collection at that key.</li>\n- *   <li>Getting a value will return a Collection, holding all the values put to that key.</li>\n+ *   <li>Putting a value into the map will add the value to a {@link Collection} at that key.</li>\n+ *   <li>Getting a value will return a {@link Collection}, holding all the values put to that key.</li>\n  * </ul>\n  * <p>\n  * For example:\n@@ -67,52 +67,49 @@\n \n     /**\n      * Returns {@code true} if this map contains a mapping for the specified\n-     * key. More formally, returns {@code true} if and only if this map\n-     * contains a mapping for a key {@code k} such that\n-     * {@code (key==null ? k==null : key.equals(k))}. (There can be at most one\n-     * such mapping.)\n+     * key. More formally, returns {@code true} if and only if this map contains\n+     * a mapping for a key {@code k} such that {@code (key==null ? k==null : key.equals(k))}.\n+     * (There can be at most one such mapping.)\n      *\n-     * @param key key whose presence in this map is to be tested\n-     * @return {@code true} if this map contains a mapping for the specified key\n+     * @param key  key whose presence in this map is to be tested\n+     * @return true if this map contains a mapping for the specified key\n      * @throws ClassCastException if the key is of an inappropriate type for this map (optional)\n      * @throws NullPointerException if the specified key is null and this map\n-     *        does not permit null keys (optional)\n+     *   does not permit null keys (optional)\n      */\n     boolean containsKey(Object key);\n \n     /**\n      * Checks whether the map contains at least one mapping for the specified value.\n      *\n-     * @param value the value to search for\n+     * @param value  the value to search for\n      * @return true if the map contains the value\n      * @throws ClassCastException if the type of the specified value is not compatible\n-     *        with the used collection (optional)\n+     *   with the used collection (optional)\n      * @throws NullPointerException if the value is null and null values are not supported\n-     *        by the used collection types (optional)\n+     *   by the used collection types (optional)\n      */\n     boolean containsValue(Object value);\n \n     /**\n      * Checks whether the map contains a mapping for the specified key and value.\n      *\n-     * @param key the key to search for\n-     * @param value the value to search for\n+     * @param key  the key to search for\n+     * @param value  the value to search for\n      * @return true if the map contains the value\n      */\n     boolean containsMapping(Object key, Object value);\n \n     /**\n-     * Returns a view collection of the values associated with the specified\n-     * key.\n+     * Returns a view collection of the values associated with the specified key.\n      * <p>\n-     * This method will return an <b>empty</b> collection if\n-     * {@link #containsKey(Object)} returns {@code false}. Changes to the\n-     * returned collection will update the underlying {@code MultiValuedMap} and\n-     * vice-versa.\n+     * This method will return an <b>empty</b> collection if {@link #containsKey(Object)}\n+     * returns {@code false}. Changes to the returned collection will update the underlying\n+     * {@code MultiValuedMap} and vice-versa.\n      *\n-     * @param key the key to retrieve\n-     * @return the <code>Collection</code> of values, implementations should\n-     *         return an empty collection for no mapping\n+     * @param key  the key to retrieve\n+     * @return the {@code Collection} of values, implementations should\n+     *   return an empty collection for no mapping\n      * @throws ClassCastException if the key is of an invalid type (optional)\n      * @throws NullPointerException if the key is null and null keys are invalid (optional)\n      */\n@@ -123,39 +120,43 @@\n     /**\n      * Adds a key-value mapping to this multi-valued map.\n      * <p>\n-     * Unlike a normal <code>Map</code> the previous value is not replaced.\n+     * Unlike a normal {@code Map} the previous value is not replaced.\n      * Instead the new value is added to the collection stored against the key.\n      * Depending on the collection type used, duplicate key-value mappings may\n      * be allowed.\n      * <p>\n      * The method will return {@code true} if the size of the multi-valued map\n      * has been increased because of this operation.\n      *\n-     * @param key the key to store against\n-     * @param value the value to add to the collection at the key\n-     * @return {@code true} if the map changed as a result of this put operation, or\n-     *        {@code false} if the map already contained the key-value mapping and the\n-     *        collection type does not allow duplicate values, e.g. when using a Set\n+     * @param key  the key to store against\n+     * @param value  the value to add to the collection at the key\n+     * @return true if the map changed as a result of this put operation, or false\n+     *   if the map already contained the key-value mapping and the collection\n+     *   type does not allow duplicate values, e.g. when using a Set\n      * @throws UnsupportedOperationException if the put operation is not supported by\n-     *        this multi-valued map, e.g. if it is unmodifiable\n+     *   this multi-valued map, e.g. if it is unmodifiable\n      * @throws ClassCastException if the key or value is of an invalid type (optional)\n      * @throws NullPointerException if the key or value is null and null is invalid (optional)\n      * @throws IllegalArgumentException if some aspect of the specified key or value prevents\n-     *        it from being stored in this multi-valued map\n+     *   it from being stored in this multi-valued map\n      */\n     boolean put(K key, V value);\n \n     /**\n      * Adds a mapping to the specified key for all values contained in the given Iterable.\n      *\n-     * @param key the key to store against\n-     * @param values the values to add to the collection at the key, null ignored\n-     * @return {@code true} if the map changed as a result of this operation\n+     * @param key  the key to store against\n+     * @param values  the values to add to the collection at the key, may not be null\n+     * @return true if the map changed as a result of this operation\n+     * @throws NullPointerException if the specified iterable is null, or if this map\n+     *   does not permit null keys or values, and the specified key or values contain\n+     *   null (optional)\n      */\n     boolean putAll(K key, Iterable<? extends V> values);\n \n     /**\n-     * Copies all mappings from the specified map to this multi-valued map (optional operation).\n+     * Copies all mappings from the specified map to this multi-valued map\n+     * (optional operation).\n      * <p>\n      * The effect of this call is equivalent to that of calling\n      * {@link #put(Object,Object) put(k, v)} on this map once for each mapping\n@@ -164,41 +165,42 @@\n      * The behavior of this operation is undefined if the specified map is modified\n      * while the operation is in progress.\n      *\n-     * @param m mappings to be stored in this map\n+     * @param map  mappings to be stored in this map, may not be null\n      * @throws UnsupportedOperationException if the {@code putAll} operation is\n-     *        not supported by this map\n+     *   not supported by this map\n      * @throws ClassCastException if the class of a key or value in the\n-     *        specified map prevents it from being stored in this map (optional)\n+     *   specified map prevents it from being stored in this map (optional)\n      * @throws NullPointerException if the specified map is null, or if this map\n-     *        does not permit null keys or values, and the specified map\n-     *        contains null keys or values (optional)\n+     *   does not permit null keys or values, and the specified map\n+     *   contains null keys or values (optional)\n      * @throws IllegalArgumentException if some property of a key or value in\n-     *        the specified map prevents it from being stored in this map\n+     *   the specified map prevents it from being stored in this map\n      */\n-    void putAll(Map<? extends K, ? extends V> m);\n+    void putAll(Map<? extends K, ? extends V> map);\n \n     /**\n-     * Copies all mappings from the specified map to this multi-valued map (optional operation).\n+     * Copies all mappings from the specified map to this multi-valued map\n+     * (optional operation).\n      * <p>\n-     * The effect of this call is equivalent to that of\n-     * calling {@link #put(Object,Object) put(k, v)} on this map once for each\n+     * The effect of this call is equivalent to that of calling\n+     * {@link #put(Object,Object) put(k, v)} on this map once for each\n      * mapping from key {@code k} to value {@code v} in the specified map.\n      * <p>\n      * The behavior of this operation is undefined if the specified map is modified\n      * while the operation is in progress.\n      *\n-     * @param m mappings to be stored in this map\n+     * @param map  mappings to be stored in this map, may not be null\n      * @throws UnsupportedOperationException if the {@code putAll} operation is\n-     *        not supported by this map\n+     *   not supported by this map\n      * @throws ClassCastException if the class of a key or value in the\n-     *        specified map prevents it from being stored in this map (optional)\n+     *   specified map prevents it from being stored in this map (optional)\n      * @throws NullPointerException if the specified map is null, or if this map\n-     *        does not permit null keys or values, and the specified map\n-     *        contains null keys or values (optional)\n+     *   does not permit null keys or values, and the specified map\n+     *   contains null keys or values (optional)\n      * @throws IllegalArgumentException if some property of a key or value in\n-     *        the specified map prevents it from being stored in this map\n+     *   the specified map prevents it from being stored in this map\n      */\n-    void putAll(MultiValuedMap<? extends K, ? extends V> m);\n+    void putAll(MultiValuedMap<? extends K, ? extends V> map);\n \n     /**\n      * Removes all values associated with the specified key.\n@@ -207,7 +209,7 @@\n      * to this multi-valued map. In case no mapping was stored for the specified\n      * key, an empty, unmodifiable collection will be returned.\n      *\n-     * @param key the key to remove values from\n+     * @param key  the key to remove values from\n      * @return the values that were removed\n      * @throws UnsupportedOperationException if the map is unmodifiable\n      * @throws ClassCastException if the key is of an invalid type (optional)\n@@ -224,9 +226,9 @@\n      * If the last value for a key is removed, implementations typically return\n      * an empty collection from a subsequent <code>get(Object)</code>.\n      *\n-     * @param key the key to remove from\n-     * @param item the item to remove\n-     * @return {@code true} if the mapping was removed, {@code false} otherwise\n+     * @param key  the key to remove from\n+     * @param item  the item to remove\n+     * @return true if the mapping was removed, false otherwise\n      * @throws UnsupportedOperationException if the map is unmodifiable\n      * @throws ClassCastException if the key or value is of an invalid type (optional)\n      * @throws NullPointerException if the key or value is null and null is invalid (optional)\n@@ -255,16 +257,17 @@\n     Collection<Entry<K, V>> entries();\n \n     /**\n-     * Returns a {@link Bag} view of the keys contained in this multi-valued map.\n+     * Returns a {@link MultiSet} view of the keys contained in this multi-valued map.\n      * <p>\n-     * The {@link Bag#getCount(Object)} method of the returned bag will give the\n-     * same result a calling {@code get(Object).size()} for the same key.\n+     * The {@link MultiSet#getCount(Object)} method of the returned multiset will give\n+     * the same result a calling {@code get(Object).size()} for the same key.\n      * <p>\n-     * This bag is backed by the map, so any changes in the map are reflected in the bag.\n+     * This multiset is backed by the map, so any changes in the map are reflected in\n+     * the multiset.\n      *\n-     * @return a bag view of the keys contained in this map\n+     * @return a multiset view of the keys contained in this map\n      */\n-    Bag<K> keys();\n+    MultiSet<K> keys();\n \n     /**\n      * Returns a {@link Set} view of the keys contained in this multi-valued map.\n@@ -290,15 +293,15 @@\n      * Implementations typically return a collection containing the combination\n      * of values from all keys.\n      *\n-     * @return a collection view of the values contained in this map\n+     * @return a collection view of the values contained in this multi-valued map\n      */\n     Collection<V> values();\n \n     /**\n      * Returns a {@link Map} view of this MultiValuedMap with a Collection as\n      * its value. The Collection holds all the values mapped to that key.\n      *\n-     * @return a Map view of the mappings in this MultiValuedMap\n+     * @return a map view of the mappings in this multi-valued map\n      */\n     Map<K, Collection<V>> asMap();\n ",
                "deletions": 65
            },
            {
                "sha": "3e21702fe5722c7e171a358383a26d53d7d9e364",
                "filename": "src/main/java/org/apache/commons/collections4/SetValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/SetValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/SetValuedMap.java",
                "status": "modified",
                "changes": 21,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/SetValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -21,12 +21,10 @@\n /**\n  * Defines a map that holds a set of values against each key.\n  * <p>\n- * A <code>SetValuedMap</code> is a Map with slightly different semantics:\n+ * A {@code SetValuedMap} is a Map with slightly different semantics:\n  * <ul>\n- * <li>Putting a value into the map will add the value to a <code>Set</code> at\n- * that key.</li>\n- * <li>Getting a value will return a <code>Set</code>, holding all the values\n- * put to that key.</li>\n+ *   <li>Putting a value into the map will add the value to a {@link Set} at that key.</li>\n+ *   <li>Getting a value will return a {@link Set}, holding all the values put to that key.</li>\n  * </ul>\n  *\n  * @since 4.1\n@@ -37,16 +35,17 @@\n     /**\n      * Gets the set of values associated with the specified key.\n      * <p>\n-     * Implementations typically return an empty <code>Set</code> if no values\n+     * Implementations typically return an empty {@code Set} if no values\n      * have been mapped to the key.\n      * <p>\n      *\n      * @param key the key to retrieve\n-     * @return the <code>Set</code> of values, implementations should return an\n-     *         empty Set for no mapping\n+     * @return the {@code Set} of values, implementations should return an\n+     *   empty {@code Set} for no mapping\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n+    @Override\n     Set<V> get(Object key);\n \n     /**\n@@ -57,12 +56,12 @@\n      * specified key, an empty, unmodifiable set will be returned.\n      *\n      * @param key the key to remove values from\n-     * @return the <code>Set</code> of values removed, implementations should\n-     *         return <code>null</code> for no mapping found, but may return an\n-     *         empty collection\n+     * @return the {@code Set} of values removed, implementations should\n+     *   return null for no mapping found, but may return an empty collection\n      * @throws UnsupportedOperationException if the map is unmodifiable\n      * @throws ClassCastException if the key is of an invalid type\n      * @throws NullPointerException if the key is null and null keys are invalid\n      */\n+    @Override\n     Set<V> remove(Object key);\n }",
                "deletions": 11
            },
            {
                "sha": "75f6d614f65099b2c0b2b16cddd985f2ef7c46cc",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "status": "modified",
                "changes": 137,
                "additions": 102,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -26,14 +26,13 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n-import org.apache.commons.collections4.Bag;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiSet;\n import org.apache.commons.collections4.MultiValuedMap;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.functors.InstantiateFactory;\n import org.apache.commons.collections4.iterators.EmptyMapIterator;\n import org.apache.commons.collections4.iterators.IteratorChain;\n@@ -65,8 +64,8 @@\n     /** The EntryValues view */\n     private transient EntryValues entryValuesView;\n \n-    /** The KeyBag view */\n-    private transient KeysBag keysBagView;\n+    /** The KeyMultiSet view */\n+    private transient KeysMultiSet keysMultiSetView;\n \n     /** The map used to store the data */\n     private final Map<K, Collection<V>> map;\n@@ -125,13 +124,15 @@\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean containsKey(Object key) {\n         return getMap().containsKey(key);\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean containsValue(final Object value) {\n         final Set<Map.Entry<K, Collection<V>>> pairs = getMap().entrySet();\n         if (pairs != null) {\n@@ -147,6 +148,7 @@ public boolean containsValue(final Object value) {\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean containsMapping(Object key, Object value) {\n         final Collection<V> col = getMap().get(key);\n         if (col == null) {\n@@ -158,6 +160,7 @@ public boolean containsMapping(Object key, Object value) {\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Collection<Entry<K, V>> entries() {\n         return entryValuesView != null ? entryValuesView : (entryValuesView = new EntryValues());\n     }\n@@ -171,6 +174,7 @@ public boolean containsMapping(Object key, Object value) {\n      *         <code>Collection</code> for no mapping\n      * @throws ClassCastException if the key is of an invalid type\n      */\n+    @Override\n     public Collection<V> get(Object key) {\n         return new WrappedCollection(key);\n     }\n@@ -185,6 +189,7 @@ public boolean containsMapping(Object key, Object value) {\n      *         empty, unmodifiable collection for no mapping found.\n      * @throws ClassCastException if the key is of an invalid type\n      */\n+    @Override\n     public Collection<V> remove(Object key) {\n         return CollectionUtils.emptyIfNull(getMap().remove(key));\n     }\n@@ -202,6 +207,7 @@ public boolean containsMapping(Object key, Object value) {\n      * @param item the item to remove\n      * @return {@code true} if the mapping was removed, {@code false} otherwise\n      */\n+    @Override\n     public boolean removeMapping(K key, V item) {\n         boolean result = false;\n         final Collection<V> col = getMap().get(key);\n@@ -221,20 +227,23 @@ public boolean removeMapping(K key, V item) {\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean isEmpty() {\n         return getMap().isEmpty();\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Set<K> keySet() {\n         return getMap().keySet();\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public int size() {\n         int size = 0;\n         for (Collection<V> col : getMap().values()) {\n@@ -250,6 +259,7 @@ public int size() {\n      *\n      * @return a collection view of the values contained in this map\n      */\n+    @Override\n     public Collection<V> values() {\n         final Collection<V> vs = valuesView;\n         return vs != null ? vs : (valuesView = new Values());\n@@ -258,6 +268,7 @@ public int size() {\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void clear() {\n         getMap().clear();\n     }\n@@ -272,6 +283,7 @@ public void clear() {\n      * @param value the value to add to the collection at the key\n      * @return the value added if the map changed and null if the map did not change\n      */\n+    @Override\n     public boolean put(K key, V value) {\n         boolean result = false;\n         Collection<V> coll = getMap().get(key);\n@@ -299,10 +311,11 @@ public boolean put(K key, V value) {\n      *\n      * @param map mappings to be stored in this map\n      */\n+    @Override\n     public void putAll(final Map<? extends K, ? extends V> map) {\n         if (map != null) {\n             for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n-                put((K) entry.getKey(), (V) entry.getValue());\n+                put(entry.getKey(), entry.getValue());\n             }\n         }\n     }\n@@ -317,33 +330,35 @@ public void putAll(final Map<? extends K, ? extends V> map) {\n      *\n      * @param map mappings to be stored in this map\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @Override\n     public void putAll(MultiValuedMap<? extends K, ? extends V> map) {\n         if (map != null) {\n             for (final K key : map.keySet()) {\n-                putAll(key, (Collection<V>) map.get(key));\n+                putAll(key, map.get(key));\n             }\n         }\n     }\n \n     /**\n-     * Returns a {@link Bag} view of the key mapping contained in this map.\n+     * Returns a {@link MultiSet} view of the key mapping contained in this map.\n      * <p>\n-     * Returns a Bag of keys with its values count as the count of the Bag. This\n-     * bag is backed by the map, so any changes in the map is reflected here.\n-     * Any method which modifies this bag like {@code add}, {@code remove},\n-     * {@code Iterator.remove} etc throws\n-     * <code>UnsupportedOperationException</code>\n+     * Returns a MultiSet of keys with its values count as the count of the MultiSet.\n+     * This multiset is backed by the map, so any changes in the map is reflected here.\n+     * Any method which modifies this multiset like {@code add}, {@code remove},\n+     * {@link Iterator#remove()} etc throws {@code UnsupportedOperationException}.\n      *\n      * @return a bag view of the key mapping contained in this map\n      */\n-    public Bag<K> keys() {\n-        return keysBagView != null ? keysBagView : (keysBagView = new KeysBag());\n+    @Override\n+    public MultiSet<K> keys() {\n+        return keysMultiSetView != null ? keysMultiSetView\n+                                        : (keysMultiSetView = new KeysMultiSet());\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Map<K, Collection<V>> asMap() {\n         return getMap();\n     }\n@@ -352,15 +367,20 @@ public void putAll(MultiValuedMap<? extends K, ? extends V> map) {\n      * Adds Iterable values to the collection associated with the specified key.\n      *\n      * @param key the key to store against\n-     * @param values the values to add to the collection at the key, null\n-     *        ignored\n+     * @param values the values to add to the collection at the key, may not be null\n      * @return true if this map changed\n+     * @throws NullPointerException if values is null\n      */\n+    @Override\n     public boolean putAll(final K key, final Iterable<? extends V> values) {\n-        if (values == null || values.iterator() == null || !values.iterator().hasNext()) {\n-            return false;\n+        if (values == null) {\n+            throw new NullPointerException(\"Values must not be null.\");\n         }\n+\n         Iterator<? extends V> it = values.iterator();\n+        if (!it.hasNext()) {\n+            return false;\n+        }\n         boolean result = false;\n         Collection<V> coll = getMap().get(key);\n         if (coll == null) {\n@@ -389,6 +409,7 @@ public boolean putAll(final K key, final Iterable<? extends V> values) {\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         if (size() == 0) {\n             return EmptyMapIterator.<K, V>emptyMapIterator();\n@@ -477,6 +498,7 @@ public WrappedCollection(Object key) {\n             return getMap().get(key);\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public boolean add(V value) {\n             final Collection<V> col = getMapping();\n@@ -486,6 +508,7 @@ public boolean add(V value) {\n             return col.add(value);\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public boolean addAll(Collection<? extends V> c) {\n             final Collection<V> col = getMapping();\n@@ -495,6 +518,7 @@ public boolean addAll(Collection<? extends V> c) {\n             return col.addAll(c);\n         }\n \n+        @Override\n         public void clear() {\n             final Collection<V> col = getMapping();\n             if (col != null) {\n@@ -503,15 +527,17 @@ public void clear() {\n             }\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public Iterator<V> iterator() {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n-                return (Iterator<V>) IteratorUtils.EMPTY_ITERATOR;\n+                return IteratorUtils.EMPTY_ITERATOR;\n             }\n             return new ValuesIterator(key);\n         }\n \n+        @Override\n         public int size() {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -520,6 +546,7 @@ public int size() {\n             return col.size();\n         }\n \n+        @Override\n         public boolean contains(Object o) {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -528,6 +555,7 @@ public boolean contains(Object o) {\n             return col.contains(o);\n         }\n \n+        @Override\n         public boolean containsAll(Collection<?> o) {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -536,6 +564,7 @@ public boolean containsAll(Collection<?> o) {\n             return col.containsAll(o);\n         }\n \n+        @Override\n         public boolean isEmpty() {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -544,6 +573,7 @@ public boolean isEmpty() {\n             return col.isEmpty();\n         }\n \n+        @Override\n         public boolean remove(Object item) {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -557,6 +587,7 @@ public boolean remove(Object item) {\n             return result;\n         }\n \n+        @Override\n         public boolean removeAll(Collection<?> c) {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -570,6 +601,7 @@ public boolean removeAll(Collection<?> c) {\n             return result;\n         }\n \n+        @Override\n         public boolean retainAll(Collection<?> c) {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -583,6 +615,7 @@ public boolean retainAll(Collection<?> c) {\n             return result;\n         }\n \n+        @Override\n         public Object[] toArray() {\n             final Collection<V> col = getMapping();\n             if (col == null) {\n@@ -591,6 +624,7 @@ public boolean retainAll(Collection<?> c) {\n             return col.toArray();\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T[] toArray(T[] a) {\n             final Collection<V> col = getMapping();\n@@ -612,26 +646,31 @@ public String toString() {\n     }\n \n     /**\n-     * Inner class that provides a Bag<K> keys view\n+     * Inner class that provides a MultiSet<K> keys view\n      */\n-    private class KeysBag implements Bag<K> {\n+    private class KeysMultiSet implements MultiSet<K> {\n \n+        @Override\n         public boolean addAll(Collection<? extends K> c) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public void clear() {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean contains(Object o) {\n             return getMap().containsKey(o);\n         }\n \n+        @Override\n         public boolean isEmpty() {\n             return getMap().isEmpty();\n         }\n \n+        @Override\n         public Object[] toArray() {\n             final Object[] result = new Object[size()];\n             int i = 0;\n@@ -645,6 +684,7 @@ public boolean isEmpty() {\n             return result;\n         }\n \n+        @Override\n         public <T> T[] toArray(T[] array) {\n             final int size = size();\n             if (array.length < size) {\n@@ -672,6 +712,7 @@ public boolean isEmpty() {\n             return array;\n         }\n \n+        @Override\n         public int getCount(Object object) {\n             int count = 0;\n             Collection<V> col = AbstractMultiValuedMap.this.getMap().get(object);\n@@ -681,56 +722,69 @@ public int getCount(Object object) {\n             return count;\n         }\n \n+        @Override\n+        public int setCount(K object, int count) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n         public boolean add(K object) {\n             throw new UnsupportedOperationException();\n         }\n \n-        public boolean add(K object, int nCopies) {\n+        @Override\n+        public int add(K object, int nCopies) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean remove(Object object) {\n             throw new UnsupportedOperationException();\n         }\n \n-        public boolean remove(Object object, int nCopies) {\n+        @Override\n+        public int remove(Object object, int nCopies) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public Set<K> uniqueSet() {\n             return UnmodifiableSet.<K>unmodifiableSet(keySet());\n         }\n \n+        @Override\n+        public Set<MultiSet.Entry<K>> entrySet() {\n+            // TODO: implement\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n         public int size() {\n             return AbstractMultiValuedMap.this.size();\n         }\n \n+        @Override\n         public boolean containsAll(Collection<?> coll) {\n-            if (coll instanceof Bag) {\n-                return containsAll((Bag<?>) coll);\n-            }\n-            return containsAll(new HashBag<Object>(coll));\n-        }\n-\n-        private boolean containsAll(final Bag<?> other) {\n-            final Iterator<?> it = other.uniqueSet().iterator();\n-            while (it.hasNext()) {\n-                final Object current = it.next();\n-                if (getCount(current) < other.getCount(current)) {\n+            final Iterator<?> e = coll.iterator();\n+            while (e.hasNext()) {\n+                if(!contains(e.next())) {\n                     return false;\n                 }\n             }\n             return true;\n         }\n \n+        @Override\n         public boolean removeAll(Collection<?> coll) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean retainAll(Collection<?> coll) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public Iterator<K> iterator() {\n             return new LazyIteratorChain<K>() {\n \n@@ -745,17 +799,20 @@ public boolean retainAll(Collection<?> coll) {\n                     final Iterator<V> colIterator = getMap().get(key).iterator();\n                     Iterator<K> nextIt = new Iterator<K>() {\n \n+                        @Override\n                         public boolean hasNext() {\n                             return colIterator.hasNext();\n                         }\n \n+                        @Override\n                         public K next() {\n                             colIterator.next();// Increment the iterator\n                             // The earlier statement would throw\n                             // NoSuchElementException anyway in case it ends\n                             return key;\n                         }\n \n+                        @Override\n                         public void remove() {\n                             throw new UnsupportedOperationException();\n                         }\n@@ -787,6 +844,7 @@ public void remove() {\n                     final K key = keyIterator.next();\n                     final Transformer<V, Entry<K, V>> entryTransformer = new Transformer<V, Entry<K, V>>() {\n \n+                        @Override\n                         public Entry<K, V> transform(final V input) {\n                             return new MultiValuedMapEntry(key, input);\n                         }\n@@ -833,33 +891,39 @@ public MultiValuedMapIterator() {\n             this.it = AbstractMultiValuedMap.this.entries().iterator();\n         }\n \n+        @Override\n         public boolean hasNext() {\n             return it.hasNext();\n         }\n \n+        @Override\n         public K next() {\n             current = it.next();\n             return current.getKey();\n         }\n \n+        @Override\n         public K getKey() {\n             if (current == null) {\n                 throw new IllegalStateException();\n             }\n             return current.getKey();\n         }\n \n+        @Override\n         public V getValue() {\n             if (current == null) {\n                 throw new IllegalStateException();\n             }\n             return current.getValue();\n         }\n \n+        @Override\n         public void remove() {\n             it.remove();\n         }\n \n+        @Override\n         public V setValue(V value) {\n             if (current == null) {\n                 throw new IllegalStateException();\n@@ -907,17 +971,20 @@ public ValuesIterator(final Object key) {\n             this.iterator = values.iterator();\n         }\n \n+        @Override\n         public void remove() {\n             iterator.remove();\n             if (values.isEmpty()) {\n                 AbstractMultiValuedMap.this.remove(key);\n             }\n         }\n \n+        @Override\n         public boolean hasNext() {\n             return iterator.hasNext();\n         }\n \n+        @Override\n         public V next() {\n             return iterator.next();\n         }",
                "deletions": 35
            },
            {
                "sha": "196a9441d2f7264d284288c2310483d761b9fdec",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "status": "modified",
                "changes": 23,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -22,8 +22,8 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n-import org.apache.commons.collections4.Bag;\n import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiSet;\n import org.apache.commons.collections4.MultiValuedMap;\n \n /**\n@@ -65,78 +65,97 @@ protected AbstractMultiValuedMapDecorator(final MultiValuedMap<K, V> map) {\n         return map;\n     }\n \n+    @Override\n     public int size() {\n         return decorated().size();\n     }\n \n+    @Override\n     public boolean isEmpty() {\n         return decorated().isEmpty();\n     }\n \n+    @Override\n     public boolean containsKey(Object key) {\n         return decorated().containsKey(key);\n     }\n \n+    @Override\n     public boolean containsValue(Object value) {\n         return decorated().containsValue(value);\n     }\n \n+    @Override\n     public boolean containsMapping(Object key, Object value) {\n         return decorated().containsMapping(key, value);\n     }\n \n+    @Override\n     public Collection<V> get(Object key) {\n         return decorated().get(key);\n     }\n \n+    @Override\n     public Collection<V> remove(Object key) {\n         return decorated().remove(key);\n     }\n \n+    @Override\n     public boolean removeMapping(K key, V item) {\n         return decorated().removeMapping(key, item);\n     }\n \n+    @Override\n     public void clear() {\n         decorated().clear();\n     }\n \n+    @Override\n     public boolean put(K key, V value) {\n         return decorated().put(key, value);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         return decorated().keySet();\n     }\n \n+    @Override\n     public Collection<Entry<K, V>> entries() {\n         return decorated().entries();\n     }\n \n-    public Bag<K> keys() {\n+    @Override\n+    public MultiSet<K> keys() {\n         return decorated().keys();\n     }\n \n+    @Override\n     public Collection<V> values() {\n         return decorated().values();\n     }\n \n+    @Override\n     public Map<K, Collection<V>> asMap() {\n         return decorated().asMap();\n     }\n \n+    @Override\n     public boolean putAll(K key, Iterable<? extends V> values) {\n         return decorated().putAll(key, values);\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> m) {\n         decorated().putAll(m);\n     }\n \n+    @Override\n     public void putAll(MultiValuedMap<? extends K, ? extends V> m) {\n         decorated().putAll(m);\n     }\n \n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         return decorated().mapIterator();\n     }",
                "deletions": 2
            },
            {
                "sha": "fb7905c253b953b365906c88ce2925e69570f5a0",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "status": "modified",
                "changes": 65,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -43,8 +43,10 @@\n     /** Serialization Version */\n     private static final long serialVersionUID = -1254147899086470720L;\n \n+    /** The key transformer */\n     private final Transformer<? super K, ? extends K> keyTransformer;\n \n+    /** The value transformer */\n     private final Transformer<? super V, ? extends V> valueTransformer;\n \n     /**\n@@ -54,15 +56,13 @@\n      * NOT transformed. Contrast this with\n      * {@link #transformedMap(MultiValuedMap, Transformer, Transformer)}.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the MultiValuedMap to decorate, must not be null\n-     * @param keyTransformer the transformer to use for key conversion, null\n-     *        means no transformation\n-     * @param valueTransformer the transformer to use for value conversion, null\n-     *        means no transformation\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the MultiValuedMap to decorate, may not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n      * @return a new transformed MultiValuedMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,\n@@ -78,15 +78,13 @@\n      * be transformed by this method. Contrast this with\n      * {@link #transformingMap(MultiValuedMap, Transformer, Transformer)}.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the MultiValuedMap to decorate, must not be null\n-     * @param keyTransformer the transformer to use for key conversion, null\n-     *        means no transformation\n-     * @param valueTransformer the transformer to use for value conversion, null\n-     *        means no transformation\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the MultiValuedMap to decorate, may not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n      * @return a new transformed MultiValuedMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,\n@@ -109,12 +107,10 @@\n      * If there are any elements already in the collection being decorated, they\n      * are NOT transformed.\n      *\n-     * @param map the MultiValuedMap to decorate, must not be null\n-     * @param keyTransformer the transformer to use for key conversion, null\n-     *        means no conversion\n-     * @param valueTransformer the transformer to use for value conversion, null\n-     *        means no conversion\n-     * @throws IllegalArgumentException if map is null\n+     * @param map  the MultiValuedMap to decorate, may not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n+     * @throws NullPointerException if map is null\n      */\n     protected TransformedMultiValuedMap(MultiValuedMap<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer, Transformer<? super V, ? extends V> valueTransformer) {\n@@ -128,7 +124,7 @@ protected TransformedMultiValuedMap(MultiValuedMap<K, V> map,\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n      *\n-     * @param object the object to transform\n+     * @param object  the object to transform\n      * @return the transformed object\n      */\n     protected K transformKey(final K object) {\n@@ -143,7 +139,7 @@ protected K transformKey(final K object) {\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n      *\n-     * @param object the object to transform\n+     * @param object  the object to transform\n      * @return the transformed object\n      */\n     protected V transformValue(final V object) {\n@@ -158,7 +154,7 @@ protected V transformValue(final V object) {\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n      *\n-     * @param map the map to transform\n+     * @param map  the map to transform\n      * @return the transformed object\n      */\n     @SuppressWarnings(\"unchecked\")\n@@ -179,11 +175,12 @@ protected V transformValue(final V object) {\n      * <p>\n      * The transformer itself may throw an exception if necessary.\n      *\n-     * @param map the MultiValuedMap to transform\n+     * @param map  the MultiValuedMap to transform\n      * @return the transformed object\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected MultiValuedMap<K, V> transformMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {\n+    protected MultiValuedMap<K, V> transformMultiValuedMap(\n+            final MultiValuedMap<? extends K, ? extends V> map) {\n         if (map.isEmpty()) {\n             return (MultiValuedMap<K, V>) map;\n         }\n@@ -205,12 +202,16 @@ public boolean put(K key, V value) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean putAll(K key, Iterable<? extends V> values) {\n-        if (values == null || values.iterator() == null || !values.iterator().hasNext()) {\n+        if (values == null) {\n+            throw new NullPointerException(\"Values must not be null.\");\n+        }\n+\n+        Iterator<V> it = (Iterator<V>) values.iterator();\n+        if (!it.hasNext()) {\n             return false;\n         }\n         K transformedKey = transformKey(key);\n         List<V> transformedValues = new LinkedList<V>();\n-        Iterator<V> it = (Iterator<V>) values.iterator();\n         while (it.hasNext()) {\n             transformedValues.add(transformValue(it.next()));\n         }\n@@ -219,17 +220,11 @@ public boolean putAll(K key, Iterable<? extends V> values) {\n \n     @Override\n     public void putAll(Map<? extends K, ? extends V> m) {\n-        if (m == null) {\n-            return;\n-        }\n         decorated().putAll(transformMap(m));\n     }\n \n     @Override\n     public void putAll(MultiValuedMap<? extends K, ? extends V> m) {\n-        if (m == null) {\n-            return;\n-        }\n         decorated().putAll(transformMultiValuedMap(m));\n     }\n ",
                "deletions": 35
            },
            {
                "sha": "d2c028c2d579aa522827b3b4f2af07f8d434dacb",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
                "status": "modified",
                "changes": 26,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -21,14 +21,14 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n-import org.apache.commons.collections4.Bag;\n import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiSet;\n import org.apache.commons.collections4.MultiValuedMap;\n import org.apache.commons.collections4.Unmodifiable;\n-import org.apache.commons.collections4.bag.UnmodifiableBag;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\n import org.apache.commons.collections4.map.UnmodifiableMap;\n+import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;\n import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n@@ -53,11 +53,11 @@\n      * <p>\n      * If the map passed in is already unmodifiable, it is returned.\n      *\n-     * @param <K> the type of key elements\n-     * @param <V> the type of value elements\n-     * @param map the map to decorate, must not be null\n+     * @param <K>  the type of key elements\n+     * @param <V>  the type of value elements\n+     * @param map  the map to decorate, may not be null\n      * @return an unmodifiable MultiValuedMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(\n@@ -71,8 +71,8 @@\n     /**\n      * Constructor that wraps (not copies).\n      *\n-     * @param map the MultiValuedMap to decorate, must not be null\n-     * @throws IllegalArgumentException if the map is null\n+     * @param map  the MultiValuedMap to decorate, may not be null\n+     * @throws NullPointerException if the map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     private UnmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {\n@@ -106,22 +106,22 @@ public boolean put(K key, V value) {\n \n     @Override\n     public Set<K> keySet() {\n-        return UnmodifiableSet.<K>unmodifiableSet(decorated().keySet());\n+        return UnmodifiableSet.unmodifiableSet(decorated().keySet());\n     }\n \n     @Override\n     public Collection<Entry<K, V>> entries() {\n-        return UnmodifiableCollection.<Entry<K, V>>unmodifiableCollection(decorated().entries());\n+        return UnmodifiableCollection.unmodifiableCollection(decorated().entries());\n     }\n \n     @Override\n-    public Bag<K> keys() {\n-        return UnmodifiableBag.<K>unmodifiableBag(decorated().keys());\n+    public MultiSet<K> keys() {\n+        return UnmodifiableMultiSet.unmodifiableMultiSet(decorated().keys());\n     }\n \n     @Override\n     public Collection<V> values() {\n-        return UnmodifiableCollection.<V>unmodifiableCollection(decorated().values());\n+        return UnmodifiableCollection.unmodifiableCollection(decorated().values());\n     }\n \n     @Override",
                "deletions": 13
            },
            {
                "sha": "ace5aa153a3b7a39a99ff32fe287093b542baa63",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/main/java/org/apache/commons/collections4/multimap/package-info.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/package-info.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -21,6 +21,8 @@\n  * The following implementations are provided in the package:\n  * <ul>\n  *   <li>MultiValuedHashMap - implementation that uses a HashMap to store the data\n+ *   <li>ListValuedHashMap  - implementation of a ListValuedMap using a HashMap as data store\n+ *   <li>SetValuedHashMap   - implementation of a SetValuedMap using a HashMap as data store\n  * </ul>\n  * <p>\n  * The following decorators are provided in the package:",
                "deletions": 0
            },
            {
                "sha": "47bcc32524960b41e98d92dd64c1e8fed44676dd",
                "filename": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java",
                "status": "modified",
                "changes": 75,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -31,12 +31,13 @@\n import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiSet;\n import org.apache.commons.collections4.MultiValuedMap;\n import org.apache.commons.collections4.bag.AbstractBagTest;\n-import org.apache.commons.collections4.bag.CollectionBag;\n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.collection.AbstractCollectionTest;\n import org.apache.commons.collections4.map.AbstractMapTest;\n+import org.apache.commons.collections4.multiset.AbstractMultiSetTest;\n import org.apache.commons.collections4.set.AbstractSetTest;\n \n /**\n@@ -507,14 +508,14 @@ public void testSize_Key() {\n     @SuppressWarnings(\"unchecked\")\n     public void testContainsValue_Key() {\n         final MultiValuedMap<K, V> map = makeFullMap();\n-        assertEquals(true, map.containsMapping(\"one\", (V) \"uno\"));\n-        assertEquals(false, map.containsMapping(\"two\", (V) \"2\"));\n+        assertEquals(true, map.containsMapping(\"one\", \"uno\"));\n+        assertEquals(false, map.containsMapping(\"two\", \"2\"));\n         if (!isAddSupported()) {\n             return;\n         }\n         map.put((K) \"A\", (V) \"AA\");\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"AA\"));\n-        assertEquals(false, map.containsMapping(\"A\", (V) \"AB\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"AA\"));\n+        assertEquals(false, map.containsMapping(\"A\", \"AB\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -576,29 +577,35 @@ public void testPutAll_KeyIterable() {\n \n         assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(3, map.get(\"A\").size());\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"X\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Y\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Z\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"X\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Y\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Z\"));\n+\n+        try {\n+            map.putAll((K) \"A\", null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n \n-        assertEquals(false, map.putAll((K) \"A\", null));\n         assertEquals(3, map.get(\"A\").size());\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"X\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Y\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Z\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"X\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Y\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Z\"));\n \n         assertEquals(false, map.putAll((K) \"A\", new ArrayList<V>()));\n         assertEquals(3, map.get(\"A\").size());\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"X\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Y\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Z\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"X\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Y\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Z\"));\n \n         coll = (Collection<V>) Arrays.asList(\"M\");\n         assertEquals(true, map.putAll((K) \"A\", coll));\n         assertEquals(4, map.get(\"A\").size());\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"X\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Y\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"Z\"));\n-        assertEquals(true, map.containsMapping(\"A\", (V) \"M\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"X\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Y\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"Z\"));\n+        assertEquals(true, map.containsMapping(\"A\", \"M\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -618,13 +625,13 @@ public void testRemove_KeyItem() {\n         //assertEquals(new MultiValuedHashMap<K, V>(), map);\n     }\n \n-    public void testKeysBag() {\n+    public void testKeysMultiSet() {\n         MultiValuedMap<K, V> map = makeFullMap();\n-        Bag<K> keyBag = map.keys();\n-        assertEquals(2, keyBag.getCount(\"one\"));\n-        assertEquals(2, keyBag.getCount(\"two\"));\n-        assertEquals(2, keyBag.getCount(\"three\"));\n-        assertEquals(6, keyBag.size());\n+        MultiSet<K> keyMultiSet = map.keys();\n+        assertEquals(2, keyMultiSet.getCount(\"one\"));\n+        assertEquals(2, keyMultiSet.getCount(\"two\"));\n+        assertEquals(2, keyMultiSet.getCount(\"three\"));\n+        assertEquals(6, keyMultiSet.size());\n     }\n \n     public void testKeysBagIterator() {\n@@ -644,9 +651,9 @@ public void testKeysBagIterator() {\n     @SuppressWarnings(\"unchecked\")\n     public void testKeysBagContainsAll() {\n         MultiValuedMap<K, V> map = makeFullMap();\n-        Bag<K> keyBag = map.keys();\n+        MultiSet<K> keyMultiSet = map.keys();\n         Collection<K> col = (Collection<K>) Arrays.asList(\"one\", \"two\", \"three\", \"one\", \"two\", \"three\");\n-        assertTrue(keyBag.containsAll(col));\n+        assertTrue(keyMultiSet.containsAll(col));\n     }\n \n     public void testAsMapGet() {\n@@ -750,7 +757,7 @@ public void testEmptyMapCompatibility() throws Exception {\n     }\n \n     public void testFullMapCompatibility() throws Exception {\n-        final MultiValuedMap<?, ?> map = (MultiValuedMap<?, ?>) makeFullMap();\n+        final MultiValuedMap<?, ?> map = makeFullMap();\n         final MultiValuedMap<?, ?> map2 =\n                 (MultiValuedMap<?, ?>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n         assertEquals(\"Map is the right size\", map.size(), map2.size());\n@@ -998,7 +1005,7 @@ public BulkTest bulkTestMultiValuedMapKeys() {\n         return new TestMultiValuedMapKeys();\n     }\n \n-    public class TestMultiValuedMapKeys extends AbstractBagTest<K> {\n+    public class TestMultiValuedMapKeys extends AbstractMultiSetTest<K> {\n \n         public TestMultiValuedMapKeys() {\n             super(\"\");\n@@ -1010,12 +1017,12 @@ public TestMultiValuedMapKeys() {\n         }\n \n         @Override\n-        public Bag<K> makeObject() {\n+        public MultiSet<K> makeObject() {\n             return AbstractMultiValuedMapTest.this.makeObject().keys();\n         }\n \n         @Override\n-        public Bag<K> makeFullCollection() {\n+        public MultiSet<K> makeFullCollection() {\n             return AbstractMultiValuedMapTest.this.makeFullMap().keys();\n         }\n \n@@ -1042,16 +1049,14 @@ public boolean isTestSerialization() {\n         @Override\n         public void resetFull() {\n             AbstractMultiValuedMapTest.this.resetFull();\n-            // wrapping with CollectionBag as otherwise the Collection tests\n-            // would fail\n-            setCollection(CollectionBag.<K>collectionBag(AbstractMultiValuedMapTest.this.getMap().keys()));\n+            setCollection(AbstractMultiValuedMapTest.this.getMap().keys());\n             TestMultiValuedMapKeys.this.setConfirmed(AbstractMultiValuedMapTest.this.getConfirmed().keys());\n         }\n \n         @Override\n         public void resetEmpty() {\n             AbstractMultiValuedMapTest.this.resetEmpty();\n-            setCollection(CollectionBag.<K>collectionBag(AbstractMultiValuedMapTest.this.getMap().keys()));\n+            setCollection(AbstractMultiValuedMapTest.this.getMap().keys());\n             TestMultiValuedMapKeys.this.setConfirmed(AbstractMultiValuedMapTest.this.getConfirmed().keys());\n         }\n ",
                "deletions": 35
            },
            {
                "sha": "c56973299311b28f63cea38507f4506ae1aedb97",
                "filename": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java?ref=4f5a854b287fc4cd24cbd316c704d15d6f3d4ac5",
                "patch": "@@ -25,9 +25,9 @@\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections4.Bag;\n import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.MapIterator;\n+import org.apache.commons.collections4.MultiSet;\n import org.apache.commons.collections4.MultiValuedMap;\n import org.apache.commons.collections4.Unmodifiable;\n \n@@ -47,10 +47,12 @@ public static Test suite() {\n         return BulkTest.makeSuite(UnmodifiableMultiValuedMapTest.class);\n     }\n     \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n@@ -60,6 +62,7 @@ public boolean isRemoveSupported() {\n         return UnmodifiableMultiValuedMap.<K, V> unmodifiableMultiValuedMap(new MultiValuedHashMap<K, V>());\n     }\n \n+    @Override\n     protected MultiValuedMap<K, V> makeFullMap() {\n         final MultiValuedMap<K, V> map = new MultiValuedHashMap<K, V>();\n         addSampleMappings(map);\n@@ -229,7 +232,7 @@ public void testUnmodifiableAsMap() {\n     @SuppressWarnings(\"unchecked\")\n     public void testUnmodifiableKeys() {\n         resetFull();\n-        Bag<K> keys = getMap().keys();\n+        MultiSet<K> keys = getMap().keys();\n         try {\n             keys.add((K) \"four\");\n             fail();",
                "deletions": 2
            }
        ],
        "patched_files": [
            "TransformedMultiValuedMap.java",
            "UnmodifiableMultiValuedMap.java",
            "package-info.java",
            "SetValuedMap.java",
            "AbstractMultiValuedMapDecorator.java",
            "ListValuedMap.java",
            "AbstractMultiValuedMap.java",
            "MultiValuedMap.java"
        ],
        "unit_tests": [
            "UnmodifiableMultiValuedMapTest.java",
            "TransformedMultiValuedMapTest.java",
            "AbstractMultiValuedMapTest.java"
        ]
    },
    "commons-collections_513ae54": {
        "repo": "commons-collections",
        "message": "Use Objects#requireNonNull() instead of if-null-then-throw-NPE.\n\nUse simple exception message, instead of mix of message formats.",
        "commit": "https://github.com/apache/commons-collections/commit/513ae545ee2b333f62f8ff989e1da161d807d76d",
        "parent": "https://github.com/apache/commons-collections/commit/212750768acf1a87e08832450c5fb3be3595b14b",
        "bug_id": "commons-collections_513ae54",
        "file": [
            {
                "sha": "44365a0240ce6a0d5b99d6d5cc075d0351f0cf76",
                "filename": "src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ClosureUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.functors.ChainedClosure;\n import org.apache.commons.collections4.functors.EqualPredicate;\n@@ -357,9 +358,7 @@ private ClosureUtils() {}\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures) {\n-        if (objectsAndClosures == null) {\n-            throw new NullPointerException(\"The object and closure map must not be null\");\n-        }\n+        Objects.requireNonNull(objectsAndClosures, \"objectsAndClosures\");\n         final Closure<? super E> def = objectsAndClosures.remove(null);\n         final int size = objectsAndClosures.size();\n         final Closure<? super E>[] trs = new Closure[size];",
                "deletions": 3
            },
            {
                "sha": "26e265ea4e3c7e8141b24fa3b09c84f24172d488",
                "filename": "src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "status": "modified",
                "changes": 75,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/CollectionUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.bag.HashBag;\n@@ -595,9 +596,7 @@ public static boolean isEqualCollection(final Collection<?> a, final Collection<\n     public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                 final Collection<? extends E> b,\n                                                 final Equator<? super E> equator) {\n-        if (equator == null) {\n-            throw new NullPointerException(\"Equator must not be null.\");\n-        }\n+        Objects.requireNonNull(equator, \"equator\");\n \n         if(a.size() != b.size()) {\n             return false;\n@@ -652,19 +651,16 @@ public int hashCode() {\n      * Returns the number of occurrences of <i>obj</i> in <i>coll</i>.\n      *\n      * @param obj the object to find the cardinality of\n-     * @param coll the {@link Iterable} to search\n+     * @param collection the {@link Iterable} to search\n      * @param <O> the type of object that the {@link Iterable} may contain.\n      * @return the number of occurrences of obj in coll\n      * @throws NullPointerException if coll is null\n      * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Object)} instead.\n      *   Be aware that the order of parameters has changed.\n      */\n     @Deprecated\n-    public static <O> int cardinality(final O obj, final Iterable<? super O> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"coll must not be null.\");\n-        }\n-        return IterableUtils.frequency(coll, obj);\n+    public static <O> int cardinality(final O obj, final Iterable<? super O> collection) {\n+        return IterableUtils.frequency(Objects.requireNonNull(collection, \"collection\"), obj);\n     }\n \n     /**\n@@ -1162,9 +1158,7 @@ public int hashCode() {\n      * @since 3.2\n      */\n     public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object) {\n-        if (collection == null) {\n-            throw new NullPointerException(\"The collection must not be null\");\n-        }\n+        Objects.requireNonNull(collection, \"collection\");\n         return object != null && collection.add(object);\n     }\n \n@@ -1523,20 +1517,18 @@ public static void reverseArray(final Object[] array) {\n      * then these will be removed to access the BoundedCollection.\n      * </p>\n      *\n-     * @param coll  the collection to check\n+     * @param collection  the collection to check\n      * @return true if the BoundedCollection is full\n      * @throws NullPointerException if the collection is null\n      */\n-    public static boolean isFull(final Collection<? extends Object> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"The collection must not be null\");\n-        }\n-        if (coll instanceof BoundedCollection) {\n-            return ((BoundedCollection<?>) coll).isFull();\n+    public static boolean isFull(final Collection<? extends Object> collection) {\n+        Objects.requireNonNull(collection, \"collection\");\n+        if (collection instanceof BoundedCollection) {\n+            return ((BoundedCollection<?>) collection).isFull();\n         }\n         try {\n             final BoundedCollection<?> bcoll =\n-                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n+                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(collection);\n             return bcoll.isFull();\n         } catch (final IllegalArgumentException ex) {\n             return false;\n@@ -1556,20 +1548,18 @@ public static boolean isFull(final Collection<? extends Object> coll) {\n      * then these will be removed to access the BoundedCollection.\n      * </p>\n      *\n-     * @param coll  the collection to check\n+     * @param collection  the collection to check\n      * @return the maximum size of the BoundedCollection, -1 if no maximum size\n      * @throws NullPointerException if the collection is null\n      */\n-    public static int maxSize(final Collection<? extends Object> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"The collection must not be null\");\n-        }\n-        if (coll instanceof BoundedCollection) {\n-            return ((BoundedCollection<?>) coll).maxSize();\n+    public static int maxSize(final Collection<? extends Object> collection) {\n+        Objects.requireNonNull(collection, \"collection\");\n+        if (collection instanceof BoundedCollection) {\n+            return ((BoundedCollection<?>) collection).maxSize();\n         }\n         try {\n             final BoundedCollection<?> bcoll =\n-                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n+                    UnmodifiableBoundedCollection.unmodifiableBoundedCollection(collection);\n             return bcoll.maxSize();\n         } catch (final IllegalArgumentException ex) {\n             return -1;\n@@ -1646,30 +1636,27 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * </p>\n      *\n      * @param <O>  the element type\n-     * @param a  the first collection, must not be null\n-     * @param b  the second collection, must not be null\n-     * @param c  the comparator to use for the merge.\n+     * @param iterableA  the first collection, must not be null\n+     * @param iterableB  the second collection, must not be null\n+     * @param comparator  the comparator to use for the merge.\n      * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n      *   they will be removed in the output collection\n      * @return a new sorted List, containing the elements of Collection a and b\n      * @throws NullPointerException if either collection or the comparator is null\n      * @since 4.0\n      */\n-    public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n-                                      final Comparator<? super O> c, final boolean includeDuplicates) {\n+    public static <O> List<O> collate(final Iterable<? extends O> iterableA, final Iterable<? extends O> iterableB,\n+                                      final Comparator<? super O> comparator, final boolean includeDuplicates) {\n \n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"The collections must not be null\");\n-        }\n-        if (c == null) {\n-            throw new NullPointerException(\"The comparator must not be null\");\n-        }\n+        Objects.requireNonNull(iterableA, \"iterableA\");\n+        Objects.requireNonNull(iterableB, \"iterableB\");\n+        Objects.requireNonNull(comparator, \"comparator\");\n \n         // if both Iterables are a Collection, we can estimate the size\n-        final int totalSize = a instanceof Collection<?> && b instanceof Collection<?> ?\n-                Math.max(1, ((Collection<?>) a).size() + ((Collection<?>) b).size()) : 10;\n+        final int totalSize = iterableA instanceof Collection<?> && iterableB instanceof Collection<?> ?\n+                Math.max(1, ((Collection<?>) iterableA).size() + ((Collection<?>) iterableB).size()) : 10;\n \n-        final Iterator<O> iterator = new CollatingIterator<>(c, a.iterator(), b.iterator());\n+        final Iterator<O> iterator = new CollatingIterator<>(comparator, iterableA.iterator(), iterableB.iterator());\n         if (includeDuplicates) {\n             return IteratorUtils.toList(iterator, totalSize);\n         }\n@@ -2032,9 +2019,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @since 4.0\n      */\n     public static <E> E extractSingleton(final Collection<E> collection) {\n-        if (collection == null) {\n-            throw new NullPointerException(\"Collection must not be null.\");\n-        }\n+        Objects.requireNonNull(collection, \"collection\");\n         if (collection.size() != 1) {\n             throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n         }",
                "deletions": 45
            },
            {
                "sha": "c5a3743420086b1683cc3c3302c29ba3d54b0dfa",
                "filename": "src/main/java/org/apache/commons/collections4/ComparatorUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ComparatorUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ComparatorUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ComparatorUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.comparators.BooleanComparator;\n import org.apache.commons.collections4.comparators.ComparableComparator;\n@@ -77,10 +78,7 @@ private ComparatorUtils() {}\n     public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators) {\n         final ComparatorChain<E> chain = new ComparatorChain<>();\n         for (final Comparator<E> comparator : comparators) {\n-            if (comparator == null) {\n-                throw new NullPointerException(\"Comparator cannot be null\");\n-            }\n-            chain.addComparator(comparator);\n+            chain.addComparator(Objects.requireNonNull(comparator, \"comparator\"));\n         }\n         return chain;\n     }",
                "deletions": 4
            },
            {
                "sha": "0bf1dbb9fc07765a046f7541507d0365d5c4cde0",
                "filename": "src/main/java/org/apache/commons/collections4/FluentIterable.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/FluentIterable.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/FluentIterable.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/FluentIterable.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.iterators.SingletonIterator;\n \n@@ -465,9 +466,7 @@ public int size() {\n      * @throws NullPointerException if collection is null\n      */\n     public void copyInto(final Collection<? super E> collection) {\n-        if (collection == null) {\n-            throw new NullPointerException(\"Collection must not be null\");\n-        }\n+        Objects.requireNonNull(collection, \"collection\");\n         CollectionUtils.addAll(collection, iterable);\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "cce857c29c52ed4ead91f80042b0875229cf1159",
                "filename": "src/main/java/org/apache/commons/collections4/IterableUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/IterableUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/IterableUtils.java",
                "status": "modified",
                "changes": 43,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/IterableUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.functors.EqualPredicate;\n@@ -258,9 +259,7 @@\n     public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable,\n                                                    final Predicate<? super E> predicate) {\n         checkNotNull(iterable);\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null.\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n         return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n@@ -418,9 +417,7 @@\n     public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable,\n                                                          final Transformer<? super I, ? extends O> transformer) {\n         checkNotNull(iterable);\n-        if (transformer == null) {\n-            throw new NullPointerException(\"Transformer must not be null.\");\n-        }\n+        Objects.requireNonNull(transformer, \"transformer\");\n         return new FluentIterable<O>() {\n             @Override\n             public Iterator<O> iterator() {\n@@ -673,9 +670,7 @@ public UnmodifiableIterable(final Iterable<E> iterable) {\n      * @throws NullPointerException if predicate is null\n      */\n     public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null.\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n         return size(filteredIterable(emptyIfNull(input), predicate));\n     }\n \n@@ -730,9 +725,7 @@ public static boolean isEmpty(final Iterable<?> iterable) {\n      */\n     public static <E> boolean contains(final Iterable<? extends E> iterable, final E object,\n                                        final Equator<? super E> equator) {\n-        if (equator == null) {\n-            throw new NullPointerException(\"Equator must not be null.\");\n-        }\n+        Objects.requireNonNull(equator, \"equator\");\n         return matchesAny(iterable, EqualPredicate.equalPredicate(object, equator));\n     }\n \n@@ -839,9 +832,7 @@ public static int size(final Iterable<?> iterable) {\n      */\n     public static <O> List<List<O>> partition(final Iterable<? extends O> iterable,\n                                               final Predicate<? super O> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null.\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n         @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // safe\n         final Factory<List<O>> factory = FactoryUtils.instantiateFactory((Class) ArrayList.class);\n         @SuppressWarnings(\"unchecked\") // safe\n@@ -933,14 +924,10 @@ public static int size(final Iterable<?> iterable) {\n             return partition(empty, partitionFactory, predicates);\n         }\n \n-        if (predicates == null) {\n-            throw new NullPointerException(\"Predicates must not be null.\");\n-        }\n+        Objects.requireNonNull(predicates, \"predicates\");\n \n-        for (final Predicate<?> p : predicates) {\n-            if (p == null) {\n-                throw new NullPointerException(\"Predicate must not be null.\");\n-            }\n+        for (final Predicate<?> predicate : predicates) {\n+            Objects.requireNonNull(predicate, \"predicate\");\n         }\n \n         if (predicates.length < 1) {\n@@ -1025,9 +1012,7 @@ public static int size(final Iterable<?> iterable) {\n      */\n     public static <E> String toString(final Iterable<E> iterable,\n                                       final Transformer<? super E, String> transformer) {\n-        if (transformer == null) {\n-            throw new NullPointerException(\"Transformer must not be null.\");\n-        }\n+        Objects.requireNonNull(transformer, \"transformer\");\n         return IteratorUtils.toString(emptyIteratorIfNull(iterable), transformer);\n     }\n \n@@ -1067,9 +1052,7 @@ public static int size(final Iterable<?> iterable) {\n      * @throws NullPointerException if iterable is null\n      */\n     static void checkNotNull(final Iterable<?> iterable) {\n-        if (iterable == null) {\n-            throw new NullPointerException(\"Iterable must not be null.\");\n-        }\n+        Objects.requireNonNull(iterable, \"iterable\");\n     }\n \n     /**\n@@ -1079,9 +1062,7 @@ static void checkNotNull(final Iterable<?> iterable) {\n      * @throws NullPointerException if the argument or any of its contents is null\n      */\n     static void checkNotNull(final Iterable<?>... iterables) {\n-        if (iterables == null) {\n-            throw new NullPointerException(\"Iterables must not be null.\");\n-        }\n+        Objects.requireNonNull(iterables, \"iterables\");\n         for (final Iterable<?> iterable : iterables) {\n             checkNotNull(iterable);\n         }",
                "deletions": 31
            },
            {
                "sha": "d22b0e90620587965be3e567d69d3b1f11b668cc",
                "filename": "src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "status": "modified",
                "changes": 139,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/IteratorUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.iterators.ArrayIterator;\n@@ -698,20 +699,16 @@ private IteratorUtils() {}\n      * @param <I> the input type\n      * @param <O> the output type\n      * @param iterator  the iterator to use, not null\n-     * @param transform  the transform to use, not null\n+     * @param transformer  the transform to use, not null\n      * @return a new transforming iterator\n      * @throws NullPointerException if either parameter is null\n      */\n     public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator,\n-            final Transformer<? super I, ? extends O> transform) {\n+            final Transformer<? super I, ? extends O> transformer) {\n \n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        if (transform == null) {\n-            throw new NullPointerException(\"Transformer must not be null\");\n-        }\n-        return new TransformIterator<>(iterator, transform);\n+        Objects.requireNonNull(iterator, \"iterator\");\n+        Objects.requireNonNull(transformer, \"transformer\");\n+        return new TransformIterator<>(iterator, transformer);\n     }\n \n     // Filtered\n@@ -730,12 +727,8 @@ private IteratorUtils() {}\n      */\n     public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator,\n                                                    final Predicate<? super E> predicate) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n+        Objects.requireNonNull(predicate, \"predicate\");\n         return new FilterIterator<>(iterator, predicate);\n     }\n \n@@ -754,12 +747,8 @@ private IteratorUtils() {}\n     public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator,\n             final Predicate<? super E> predicate) {\n \n-        if (listIterator == null) {\n-            throw new NullPointerException(\"ListIterator must not be null\");\n-        }\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n+        Objects.requireNonNull(listIterator, \"listIterator\");\n+        Objects.requireNonNull(predicate, \"predicate\");\n         return new FilterListIterator<>(listIterator, predicate);\n     }\n \n@@ -773,15 +762,12 @@ private IteratorUtils() {}\n      * to start with.\n      *\n      * @param <E> the element type\n-     * @param coll  the collection to iterate over, not null\n+     * @param collection  the collection to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the collection is null\n      */\n-    public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"Collection must not be null\");\n-        }\n-        return new LoopingIterator<>(coll);\n+    public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> collection) {\n+        return new LoopingIterator<>(Objects.requireNonNull(collection, \"collection\"));\n     }\n \n     /**\n@@ -797,10 +783,7 @@ private IteratorUtils() {}\n      * @since 3.2\n      */\n     public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list) {\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n-        return new LoopingListIterator<>(list);\n+        return new LoopingListIterator<>(Objects.requireNonNull(list, \"list\"));\n     }\n \n     // org.w3c.dom.NodeList iterators\n@@ -815,10 +798,7 @@ private IteratorUtils() {}\n      * @since 4.0\n      */\n     public static NodeListIterator nodeListIterator(final NodeList nodeList) {\n-        if (nodeList == null) {\n-            throw new NullPointerException(\"NodeList must not be null\");\n-        }\n-        return new NodeListIterator(nodeList);\n+        return new NodeListIterator(Objects.requireNonNull(nodeList, \"nodeList\"));\n     }\n \n     /**\n@@ -839,10 +819,7 @@ public static NodeListIterator nodeListIterator(final NodeList nodeList) {\n      * @since 4.0\n      */\n     public static NodeListIterator nodeListIterator(final Node node) {\n-        if (node == null) {\n-            throw new NullPointerException(\"Node must not be null\");\n-        }\n-        return new NodeListIterator(node);\n+        return new NodeListIterator(Objects.requireNonNull(node, \"node\"));\n     }\n \n     // Peeking\n@@ -952,10 +929,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if enumeration is null\n      */\n     public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration) {\n-        if (enumeration == null) {\n-            throw new NullPointerException(\"Enumeration must not be null\");\n-        }\n-        return new EnumerationIterator<>(enumeration);\n+        return new EnumerationIterator<>(Objects.requireNonNull(enumeration, \"enumeration\"));\n     }\n \n     /**\n@@ -970,13 +944,8 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      */\n     public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration,\n                                              final Collection<? super E> removeCollection) {\n-        if (enumeration == null) {\n-            throw new NullPointerException(\"Enumeration must not be null\");\n-        }\n-        if (removeCollection == null) {\n-            throw new NullPointerException(\"Collection must not be null\");\n-        }\n-        return new EnumerationIterator<>(enumeration, removeCollection);\n+        return new EnumerationIterator<>(Objects.requireNonNull(enumeration, \"enumeration\"),\n+                Objects.requireNonNull(removeCollection, \"removeCollection\"));\n     }\n \n     /**\n@@ -988,10 +957,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if iterator is null\n      */\n     public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        return new IteratorEnumeration<>(iterator);\n+        return new IteratorEnumeration<>(Objects.requireNonNull(iterator, \"iterator\"));\n     }\n \n     /**\n@@ -1004,9 +970,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if iterator is null\n      */\n     public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         return new IteratorIterable<>(iterator, false);\n     }\n \n@@ -1020,9 +984,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if iterator is null\n      */\n     public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         return new IteratorIterable<>(iterator, true);\n     }\n \n@@ -1038,9 +1000,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if iterator parameter is null\n      */\n     public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         return new ListIteratorWrapper<>(iterator);\n     }\n \n@@ -1055,9 +1015,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws NullPointerException if iterator parameter is null\n      */\n     public static Object[] toArray(final Iterator<?> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         final List<?> list = toList(iterator, 100);\n         return list.toArray();\n     }\n@@ -1076,12 +1034,8 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws ArrayStoreException if the arrayClass is invalid\n      */\n     public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        if (arrayClass == null) {\n-            throw new NullPointerException(\"Array class must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n+        Objects.requireNonNull(arrayClass, \"arrayClass\");\n         final List<E> list = toList(iterator, 100);\n         @SuppressWarnings(\"unchecked\")\n         final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n@@ -1117,9 +1071,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @throws IllegalArgumentException if the size is less than 1\n      */\n     public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (estimatedSize < 1) {\n             throw new IllegalArgumentException(\"Estimated size must be greater than 0\");\n         }\n@@ -1214,9 +1166,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @since 4.1\n      */\n     public static <E> void forEach(final Iterator<E> iterator, final Closure<? super E> closure) {\n-        if (closure == null) {\n-            throw new NullPointerException(\"Closure must not be null\");\n-        }\n+        Objects.requireNonNull(closure, \"closure\");\n \n         if (iterator != null) {\n             while (iterator.hasNext()) {\n@@ -1239,9 +1189,8 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @since 4.1\n      */\n     public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure) {\n-        if (closure == null) {\n-            throw new NullPointerException(\"Closure must not be null.\");\n-        }\n+        Objects.requireNonNull(closure, \"closure\");\n+        \n         if (iterator != null) {\n             while (iterator.hasNext()) {\n                 final E element = iterator.next();\n@@ -1268,9 +1217,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @since 4.1\n      */\n     public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n \n         if (iterator != null) {\n             while (iterator.hasNext()) {\n@@ -1297,9 +1244,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @since 4.1\n      */\n     public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n \n         if (iterator != null) {\n             for(int index = 0; iterator.hasNext(); index++) {\n@@ -1342,9 +1287,7 @@ public static NodeListIterator nodeListIterator(final Node node) {\n      * @since 4.1\n      */\n     public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n+        Objects.requireNonNull(predicate, \"predicate\");\n \n         if (iterator != null) {\n             while (iterator.hasNext()) {\n@@ -1515,18 +1458,10 @@ public static int size(final Iterator<?> iterator) {\n                                       final String delimiter,\n                                       final String prefix,\n                                       final String suffix) {\n-        if (transformer == null) {\n-            throw new NullPointerException(\"transformer may not be null\");\n-        }\n-        if (delimiter == null) {\n-            throw new NullPointerException(\"delimiter may not be null\");\n-        }\n-        if (prefix == null) {\n-            throw new NullPointerException(\"prefix may not be null\");\n-        }\n-        if (suffix == null) {\n-            throw new NullPointerException(\"suffix may not be null\");\n-        }\n+        Objects.requireNonNull(transformer, \"transformer\");\n+        Objects.requireNonNull(delimiter, \"delimiter\");\n+        Objects.requireNonNull(prefix, \"prefix\");\n+        Objects.requireNonNull(suffix, \"suffix\");\n         final StringBuilder stringBuilder = new StringBuilder(prefix);\n         if (iterator != null) {\n             while (iterator.hasNext()) {",
                "deletions": 102
            },
            {
                "sha": "493aefda8f645b06bba8e4061fc2bed2d2d578b2",
                "filename": "src/main/java/org/apache/commons/collections4/ListUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ListUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/ListUtils.java",
                "status": "modified",
                "changes": 40,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ListUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.functors.DefaultEquator;\n@@ -560,23 +561,20 @@ public static int hashCodeForList(final Collection<?> list) {\n      * Returns the longest common subsequence (LCS) of two sequences (lists).\n      *\n      * @param <E>  the element type\n-     * @param a  the first list\n-     * @param b  the second list\n+     * @param listA  the first list\n+     * @param listB  the second list\n      * @param equator  the equator used to test object equality\n      * @return the longest common subsequence\n      * @throws NullPointerException if either list or the equator is {@code null}\n      * @since 4.0\n      */\n-    public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b,\n+    public static <E> List<E> longestCommonSubsequence(final List<E> listA, final List<E> listB,\n                                                        final Equator<? super E> equator) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n-        if (equator == null) {\n-          throw new NullPointerException(\"Equator must not be null\");\n-        }\n+        Objects.requireNonNull(listA, \"listA\");\n+        Objects.requireNonNull(listB, \"listB\");\n+        Objects.requireNonNull(equator, \"equator\");\n \n-        final SequencesComparator<E> comparator = new SequencesComparator<>(a, b, equator);\n+        final SequencesComparator<E> comparator = new SequencesComparator<>(listA, listB, equator);\n         final EditScript<E> script = comparator.getScript();\n         final LcsVisitor<E> visitor = new LcsVisitor<>();\n         script.visit(visitor);\n@@ -589,20 +587,20 @@ public static int hashCodeForList(final Collection<?> list) {\n      * This is a convenience method for using {@link #longestCommonSubsequence(List, List)}\n      * with {@link CharSequence} instances.\n      *\n-     * @param a  the first sequence\n-     * @param b  the second sequence\n+     * @param charSequenceA  the first sequence\n+     * @param charSequenceB  the second sequence\n      * @return the longest common subsequence as {@link String}\n      * @throws NullPointerException if either sequence is {@code null}\n      * @since 4.0\n      */\n-    public static String longestCommonSubsequence(final CharSequence a, final CharSequence b) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"CharSequence must not be null\");\n-        }\n-        final List<Character> lcs = longestCommonSubsequence(new CharSequenceAsList( a ), new CharSequenceAsList( b ));\n+    public static String longestCommonSubsequence(final CharSequence charSequenceA, final CharSequence charSequenceB) {\n+        Objects.requireNonNull(charSequenceA, \"charSequenceA\");\n+        Objects.requireNonNull(charSequenceB, \"charSequenceB\");\n+        final List<Character> lcs = longestCommonSubsequence(new CharSequenceAsList(charSequenceA),\n+                new CharSequenceAsList(charSequenceB));\n         final StringBuilder sb = new StringBuilder();\n-        for ( final Character ch : lcs ) {\n-          sb.append(ch);\n+        for (final Character ch : lcs) {\n+            sb.append(ch);\n         }\n         return sb.toString();\n     }\n@@ -680,9 +678,7 @@ public int size() {\n      * @since 4.0\n      */\n     public static <T> List<List<T>> partition(final List<T> list, final int size) {\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n+        Objects.requireNonNull(list, \"list\");\n         if (size <= 0) {\n             throw new IllegalArgumentException(\"Size must be greater than 0\");\n         }",
                "deletions": 22
            },
            {
                "sha": "2570d20239da920c9a3056458614a1745c03c7a2",
                "filename": "src/main/java/org/apache/commons/collections4/MapUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/MapUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/MapUtils.java",
                "status": "modified",
                "changes": 15,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/MapUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Map.Entry;\n import java.util.Properties;\n import java.util.ResourceBundle;\n@@ -1237,10 +1238,9 @@ public static boolean isNotEmpty(final Map<?, ?> map) {\n      * @since 4.0\n      */\n     public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         return map instanceof IterableMap ? (IterableMap<K, V>) map : new AbstractMapDecorator<K, V>(map) {\n+            // empty\n         };\n     }\n \n@@ -1255,11 +1255,10 @@ public static boolean isNotEmpty(final Map<?, ?> map) {\n      * @since 4.0\n      */\n     public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap) {\n-        if (sortedMap == null) {\n-            throw new NullPointerException(\"Map must not be null\");\n-        }\n+        Objects.requireNonNull(sortedMap, \"sortedMap\");\n         return sortedMap instanceof IterableSortedMap ? (IterableSortedMap<K, V>) sortedMap\n                 : new AbstractSortedMapDecorator<K, V>(sortedMap) {\n+                    // empty\n                 };\n     }\n \n@@ -1674,9 +1673,7 @@ private static void printIndent(final PrintStream out, final int indent) {\n      */\n     @SuppressWarnings(\"unchecked\") // As per Javadoc throws CCE for invalid array contents\n     public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {\n-        if (map == null) {\n-            throw new NullPointerException(\"The map must not be null\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         if (array == null || array.length == 0) {\n             return map;\n         }",
                "deletions": 9
            },
            {
                "sha": "1205ece3c1d4ac168f3ddc106fc52bfab207bf8d",
                "filename": "src/main/java/org/apache/commons/collections4/SetUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/SetUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/SetUtils.java",
                "status": "modified",
                "changes": 75,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/SetUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.IdentityHashMap;\n import java.util.Iterator;\n import java.util.NavigableSet;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n@@ -115,27 +116,26 @@ public int size() {\n      *\n      * @param <E> the generic type that is able to represent the types contained\n      *   in both input sets.\n-     * @param a  the set to subtract from, must not be null\n-     * @param b  the set to subtract, must not be null\n+     * @param setA  the set to subtract from, must not be null\n+     * @param setB  the set to subtract, must not be null\n      * @return a view of the relative complement of  of the two sets\n      * @since 4.1\n      */\n-    public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"Sets must not be null.\");\n-        }\n+    public static <E> SetView<E> difference(final Set<? extends E> setA, final Set<? extends E> setB) {\n+        Objects.requireNonNull(setA, \"setA\");\n+        Objects.requireNonNull(setB, \"setB\");\n \n-        final Predicate<E> notContainedInB = object -> !b.contains(object);\n+        final Predicate<E> notContainedInB = object -> !setB.contains(object);\n \n         return new SetView<E>() {\n             @Override\n             public boolean contains(final Object o) {\n-                return a.contains(o) && !b.contains(o);\n+                return setA.contains(o) && !setB.contains(o);\n             }\n \n             @Override\n             public Iterator<E> createIterator() {\n-                return IteratorUtils.filteredIterator(a.iterator(), notContainedInB);\n+                return IteratorUtils.filteredIterator(setA.iterator(), notContainedInB);\n             }\n         };\n     }\n@@ -151,23 +151,22 @@ public boolean contains(final Object o) {\n      *\n      * @param <E> the generic type that is able to represent the types contained\n      *   in both input sets.\n-     * @param a  the first set, must not be null\n-     * @param b  the second set, must not be null\n+     * @param setA  the first set, must not be null\n+     * @param setB  the second set, must not be null\n      * @return a view of the symmetric difference of the two sets\n      * @since 4.1\n      */\n-    public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"Sets must not be null.\");\n-        }\n-\n-        final SetView<E> aMinusB = difference(a, b);\n-        final SetView<E> bMinusA = difference(b, a);\n+    public static <E> SetView<E> disjunction(final Set<? extends E> setA, final Set<? extends E> setB) {\n+        Objects.requireNonNull(setA, \"setA\");\n+        Objects.requireNonNull(setB, \"setB\");\n+        \n+        final SetView<E> aMinusB = difference(setA, setB);\n+        final SetView<E> bMinusA = difference(setB, setA);\n \n         return new SetView<E>() {\n             @Override\n             public boolean contains(final Object o) {\n-                return a.contains(o) ^ b.contains(o);\n+                return setA.contains(o) ^ setB.contains(o);\n             }\n \n             @Override\n@@ -270,27 +269,26 @@ public int size() {\n      *\n      * @param <E> the generic type that is able to represent the types contained\n      *   in both input sets.\n-     * @param a  the first set, must not be null\n-     * @param b  the second set, must not be null\n+     * @param setA  the first set, must not be null\n+     * @param setB  the second set, must not be null\n      * @return a view of the intersection of the two sets\n      * @since 4.1\n      */\n-    public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"Sets must not be null.\");\n-        }\n+    public static <E> SetView<E> intersection(final Set<? extends E> setA, final Set<? extends E> setB) {\n+        Objects.requireNonNull(setA, \"setA\");\n+        Objects.requireNonNull(setB, \"setB\");\n \n-        final Predicate<E> containedInB = object -> b.contains(object);\n+        final Predicate<E> containedInB = object -> setB.contains(object);\n \n         return new SetView<E>() {\n             @Override\n             public boolean contains(final Object o) {\n-                return a.contains(o) && b.contains(o);\n+                return setA.contains(o) && setB.contains(o);\n             }\n \n             @Override\n             public Iterator<E> createIterator() {\n-                return IteratorUtils.filteredIterator(a.iterator(), containedInB);\n+                return IteratorUtils.filteredIterator(setA.iterator(), containedInB);\n             }\n         };\n     }\n@@ -562,38 +560,37 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      *\n      * @param <E> the generic type that is able to represent the types contained\n      *   in both input sets.\n-     * @param a  the first set, must not be null\n-     * @param b  the second set, must not be null\n+     * @param setA  the first set, must not be null\n+     * @param setB  the second set, must not be null\n      * @return a view of the union of the two set\n      * @throws NullPointerException if either input set is null\n      * @since 4.1\n      */\n-    public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b) {\n-        if (a == null || b == null) {\n-            throw new NullPointerException(\"Sets must not be null.\");\n-        }\n+    public static <E> SetView<E> union(final Set<? extends E> setA, final Set<? extends E> setB) {\n+        Objects.requireNonNull(setA, \"setA\");\n+        Objects.requireNonNull(setB, \"setB\");\n \n-        final SetView<E> bMinusA = difference(b, a);\n+        final SetView<E> bMinusA = difference(setB, setA);\n \n         return new SetView<E>() {\n             @Override\n             public boolean contains(final Object o) {\n-                return a.contains(o) || b.contains(o);\n+                return setA.contains(o) || setB.contains(o);\n             }\n \n             @Override\n             public Iterator<E> createIterator() {\n-                return IteratorUtils.chainedIterator(a.iterator(), bMinusA.iterator());\n+                return IteratorUtils.chainedIterator(setA.iterator(), bMinusA.iterator());\n             }\n \n             @Override\n             public boolean isEmpty() {\n-                return a.isEmpty() && b.isEmpty();\n+                return setA.isEmpty() && setB.isEmpty();\n             }\n \n             @Override\n             public int size() {\n-                return a.size() + bMinusA.size();\n+                return setA.size() + bMinusA.size();\n             }\n         };\n     }",
                "deletions": 39
            },
            {
                "sha": "c5c58b53f76dd19cc2fda7a1e2bc8935c8013567",
                "filename": "src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/SplitMapUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n@@ -233,9 +234,7 @@ public int size() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get) {\n-        if (get == null) {\n-            throw new NullPointerException(\"Get must not be null\");\n-        }\n+        Objects.requireNonNull(get, \"get\");\n         if (get instanceof Map) {\n             return get instanceof IterableMap ?\n                     ((IterableMap<K, V>) get) :\n@@ -259,9 +258,7 @@ public int size() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> Map<K, V> writableMap(final Put<K, V> put) {\n-        if (put == null) {\n-            throw new NullPointerException(\"Put must not be null\");\n-        }\n+        Objects.requireNonNull(put, \"put\");\n         if (put instanceof Map) {\n             return (Map<K, V>) put;\n         }",
                "deletions": 6
            },
            {
                "sha": "12293acd0db56f3118e170a693ba29fbb57739bd",
                "filename": "src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/TransformerUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.functors.ChainedTransformer;\n import org.apache.commons.collections4.functors.CloneTransformer;\n@@ -370,9 +371,7 @@ private TransformerUtils() {}\n     public static <I, O> Transformer<I, O> switchMapTransformer(\n             final Map<I, Transformer<I, O>> objectsAndTransformers) {\n \n-        if (objectsAndTransformers == null) {\n-            throw new NullPointerException(\"The object and transformer map must not be null\");\n-        }\n+        Objects.requireNonNull(objectsAndTransformers, \"objectsAndTransformers\");\n         final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n         final int size = objectsAndTransformers.size();\n         final Transformer<? super I, ? extends O>[] trs = new Transformer[size];",
                "deletions": 3
            },
            {
                "sha": "9ce1d8ab6666286ac5a4612083f73ba2c3af834d",
                "filename": "src/main/java/org/apache/commons/collections4/bag/TreeBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/bag/TreeBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/bag/TreeBag.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/TreeBag.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Comparator;\n+import java.util.Objects;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n@@ -88,9 +89,7 @@ public TreeBag(final Collection<? extends E> coll) {\n     @Override\n     public boolean add(final E object) {\n         if(comparator() == null && !(object instanceof Comparable)) {\n-            if (object == null) {\n-                throw new NullPointerException();\n-            }\n+            Objects.requireNonNull(object, \"object\");\n             throw new IllegalArgumentException(\"Objects of type \" + object.getClass() + \" cannot be added to \" +\n                                                \"a naturally ordered TreeBag as it does not implement Comparable\");\n         }",
                "deletions": 3
            },
            {
                "sha": "9f32827ac8373d658c28b8f61489e8c3e9b432f2",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.KeyValue;\n@@ -1232,18 +1233,16 @@ private void swapPosition(final Node<K, V> x, final Node<K, V> y, final DataElem\n      * check if an object is fit to be proper input ... has to be\n      * Comparable and non-null\n      *\n-     * @param o the object being checked\n+     * @param obj the object being checked\n      * @param dataElement  either {@link DataElement#KEY} key}\n      *                     or the {@link DataElement#VALUE value}.\n      *\n      * @throws NullPointerException if o is null\n      * @throws ClassCastException if o is not Comparable\n      */\n-    private static void checkNonNullComparable(final Object o, final DataElement dataElement) {\n-        if (o == null) {\n-            throw new NullPointerException(dataElement + \" cannot be null\");\n-        }\n-        if (!(o instanceof Comparable)) {\n+    private static void checkNonNullComparable(final Object obj, final DataElement dataElement) {\n+        Objects.requireNonNull(obj, Objects.toString(dataElement));\n+        if (!(obj instanceof Comparable)) {\n             throw new ClassCastException(dataElement + \" must be Comparable\");\n         }\n     }",
                "deletions": 6
            },
            {
                "sha": "c8d72802c55ca737f46931d976cd4b97c6066bd8",
                "filename": "src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.Objects;\n import java.util.function.Predicate;\n \n /**\n@@ -75,14 +76,11 @@ protected AbstractCollectionDecorator() {\n     /**\n      * Constructor that wraps (not copies).\n      *\n-     * @param coll  the collection to decorate, must not be null\n+     * @param collection  the collection to decorate, must not be null\n      * @throws NullPointerException if the collection is null\n      */\n-    protected AbstractCollectionDecorator(final Collection<E> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"Collection must not be null.\");\n-        }\n-        this.collection = coll;\n+    protected AbstractCollectionDecorator(final Collection<E> collection) {\n+        this.collection = Objects.requireNonNull(collection, \"collection\");\n     }\n \n     /**",
                "deletions": 6
            },
            {
                "sha": "723598b9c6bd3699a7af6092d3d2b2ce630ba543",
                "filename": "src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "status": "modified",
                "changes": 39,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Queue;\n import java.util.Set;\n \n@@ -115,18 +116,15 @@\n      * If there are any elements already in the collection being decorated, they\n      * are validated.\n      *\n-     * @param coll  the collection to decorate, must not be null\n+     * @param collection  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @throws NullPointerException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n-    protected PredicatedCollection(final Collection<E> coll, final Predicate<? super E> predicate) {\n-        super(coll);\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null.\");\n-        }\n-        this.predicate = predicate;\n-        for (final E item : coll) {\n+    protected PredicatedCollection(final Collection<E> collection, final Predicate<? super E> predicate) {\n+        super(collection);\n+        this.predicate = Objects.requireNonNull(predicate, \"predicate\");;\n+        for (final E item : collection) {\n             validate(item);\n         }\n     }\n@@ -224,10 +222,7 @@ public boolean addAll(final Collection<? extends E> coll) {\n          * @throws NullPointerException if predicate is null\n          */\n         public Builder(final Predicate<? super E> predicate) {\n-            if (predicate == null) {\n-                throw new NullPointerException(\"Predicate must not be null\");\n-            }\n-            this.predicate = predicate;\n+            this.predicate = Objects.requireNonNull(predicate, \"predicate\");\n         }\n \n         /**\n@@ -291,9 +286,7 @@ public Builder(final Predicate<? super E> predicate) {\n          * @throws IllegalArgumentException if list contains invalid elements\n          */\n         public List<E> createPredicatedList(final List<E> list) {\n-            if (list == null) {\n-                throw new NullPointerException(\"List must not be null.\");\n-            }\n+            Objects.requireNonNull(list, \"list\");\n             final List<E> predicatedList = PredicatedList.predicatedList(list, predicate);\n             predicatedList.addAll(accepted);\n             return predicatedList;\n@@ -324,9 +317,7 @@ public Builder(final Predicate<? super E> predicate) {\n          * @throws IllegalArgumentException if set contains invalid elements\n          */\n         public Set<E> createPredicatedSet(final Set<E> set) {\n-            if (set == null) {\n-                throw new NullPointerException(\"Set must not be null.\");\n-            }\n+            Objects.requireNonNull(set, \"set\");\n             final PredicatedSet<E> predicatedSet = PredicatedSet.predicatedSet(set, predicate);\n             predicatedSet.addAll(accepted);\n             return predicatedSet;\n@@ -357,9 +348,7 @@ public Builder(final Predicate<? super E> predicate) {\n          * @throws IllegalArgumentException if multiset contains invalid elements\n          */\n         public MultiSet<E> createPredicatedMultiSet(final MultiSet<E> multiset) {\n-            if (multiset == null) {\n-                throw new NullPointerException(\"MultiSet must not be null.\");\n-            }\n+            Objects.requireNonNull(multiset, \"multiset\");\n             final PredicatedMultiSet<E> predicatedMultiSet =\n                     PredicatedMultiSet.predicatedMultiSet(multiset, predicate);\n             predicatedMultiSet.addAll(accepted);\n@@ -391,9 +380,7 @@ public Builder(final Predicate<? super E> predicate) {\n          * @throws IllegalArgumentException if bag contains invalid elements\n          */\n         public Bag<E> createPredicatedBag(final Bag<E> bag) {\n-            if (bag == null) {\n-                throw new NullPointerException(\"Bag must not be null.\");\n-            }\n+            Objects.requireNonNull(bag, \"bag\");\n             final PredicatedBag<E> predicatedBag = PredicatedBag.predicatedBag(bag, predicate);\n             predicatedBag.addAll(accepted);\n             return predicatedBag;\n@@ -424,9 +411,7 @@ public Builder(final Predicate<? super E> predicate) {\n          * @throws IllegalArgumentException if queue contains invalid elements\n          */\n         public Queue<E> createPredicatedQueue(final Queue<E> queue) {\n-            if (queue == null) {\n-                throw new NullPointerException(\"queue must not be null\");\n-            }\n+            Objects.requireNonNull(queue, \"queue\");\n             final PredicatedQueue<E> predicatedQueue = PredicatedQueue.predicatedQueue(queue, predicate);\n             predicatedQueue.addAll(accepted);\n             return predicatedQueue;",
                "deletions": 27
            },
            {
                "sha": "635543d3d4a62400236f42b7c20a2fb020d10710",
                "filename": "src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "status": "modified",
                "changes": 16,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.Objects;\n import java.util.function.Predicate;\n \n /**\n@@ -71,10 +72,7 @@\n      * @throws NullPointerException if the collection is null\n      */\n     protected SynchronizedCollection(final Collection<E> collection) {\n-        if (collection == null) {\n-            throw new NullPointerException(\"Collection must not be null.\");\n-        }\n-        this.collection = collection;\n+        this.collection = Objects.requireNonNull(collection, \"collection\");\n         this.lock = this;\n     }\n \n@@ -86,14 +84,8 @@ protected SynchronizedCollection(final Collection<E> collection) {\n      * @throws NullPointerException if the collection or lock is null\n      */\n     protected SynchronizedCollection(final Collection<E> collection, final Object lock) {\n-        if (collection == null) {\n-            throw new NullPointerException(\"Collection must not be null.\");\n-        }\n-        if (lock == null) {\n-            throw new NullPointerException(\"Lock must not be null.\");\n-        }\n-        this.collection = collection;\n-        this.lock = lock;\n+        this.collection = Objects.requireNonNull(collection, \"collection\");\n+        this.lock = Objects.requireNonNull(lock, \"lock\");\n     }\n \n     /**",
                "deletions": 12
            },
            {
                "sha": "8d0eb5bce18b5e24b9ba3d91b94c2f8ad94361c7",
                "filename": "src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "status": "modified",
                "changes": 12,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Transformer;\n \n@@ -102,16 +103,13 @@\n      * If there are any elements already in the collection being decorated, they\n      * are NOT transformed.\n      *\n-     * @param coll  the collection to decorate, must not be null\n+     * @param collection  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws NullPointerException if collection or transformer is null\n      */\n-    protected TransformedCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer) {\n-        super(coll);\n-        if (transformer == null) {\n-            throw new NullPointerException(\"Transformer must not be null\");\n-        }\n-        this.transformer = transformer;\n+    protected TransformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer) {\n+        super(collection);\n+        this.transformer = Objects.requireNonNull(transformer, \"transformer\");\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "3a2b9f23ecf9b6c0d65b76c9449edd6bec3bce7a",
                "filename": "src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "status": "modified",
                "changes": 23,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.Objects;\n import java.util.function.Predicate;\n \n import org.apache.commons.collections4.BoundedCollection;\n@@ -75,34 +76,32 @@\n      * to find a suitable BoundedCollection.\n      *\n      * @param <E> the type of the elements in the collection\n-     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n+     * @param collection  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n      * @throws NullPointerException if coll is null\n      * @throws IllegalArgumentException if coll is not a {@code BoundedCollection}\n      * @since 4.0\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"Collection must not be null.\");\n-        }\n+    public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> collection) {\n+        Objects.requireNonNull(collection, \"collection\");\n \n         // handle decorators\n         for (int i = 0; i < 1000; i++) {  // counter to prevent infinite looping\n-            if (coll instanceof BoundedCollection) {\n+            if (collection instanceof BoundedCollection) {\n                 break;  // normal loop exit\n             }\n-            if (coll instanceof AbstractCollectionDecorator) {\n-                coll = ((AbstractCollectionDecorator<E>) coll).decorated();\n-            } else if (coll instanceof SynchronizedCollection) {\n-                coll = ((SynchronizedCollection<E>) coll).decorated();\n+            if (collection instanceof AbstractCollectionDecorator) {\n+                collection = ((AbstractCollectionDecorator<E>) collection).decorated();\n+            } else if (collection instanceof SynchronizedCollection) {\n+                collection = ((SynchronizedCollection<E>) collection).decorated();\n             }\n         }\n \n-        if (coll instanceof BoundedCollection == false) {\n+        if (collection instanceof BoundedCollection == false) {\n             throw new IllegalArgumentException(\"Collection is not a bounded collection.\");\n         }\n-        return new UnmodifiableBoundedCollection<>((BoundedCollection<E>) coll);\n+        return new UnmodifiableBoundedCollection<>((BoundedCollection<E>) collection);\n     }\n \n     /**",
                "deletions": 12
            },
            {
                "sha": "fe3b51c8dcfdc3b4fa07e41f345ff02654ef4276",
                "filename": "src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "status": "modified",
                "changes": 16,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n \n /**\n  * A Comparator which imposes a specific order on a specific set of Objects.\n@@ -94,10 +95,7 @@ public FixedOrderComparator() {\n      */\n     public FixedOrderComparator(final T... items) {\n         super();\n-        if (items == null) {\n-            throw new NullPointerException(\"The list of items must not be null\");\n-        }\n-        for (final T item : items) {\n+        for (final T item : Objects.requireNonNull(items, \"items\")) {\n             add(item);\n         }\n     }\n@@ -113,10 +111,7 @@ public FixedOrderComparator(final T... items) {\n      */\n     public FixedOrderComparator(final List<T> items) {\n         super();\n-        if (items == null) {\n-            throw new NullPointerException(\"The list of items must not be null\");\n-        }\n-        for (final T t : items) {\n+        for (final T t : Objects.requireNonNull(items, \"items\")) {\n             add(t);\n         }\n     }\n@@ -164,10 +159,7 @@ public UnknownObjectBehavior getUnknownObjectBehavior() {\n      */\n     public void setUnknownObjectBehavior(final UnknownObjectBehavior unknownObjectBehavior) {\n         checkLocked();\n-        if (unknownObjectBehavior == null) {\n-            throw new NullPointerException(\"Unknown object behavior must not be null\");\n-        }\n-        this.unknownObjectBehavior = unknownObjectBehavior;\n+        this.unknownObjectBehavior = Objects.requireNonNull(unknownObjectBehavior, \"unknownObjectBehavior\");\n     }\n \n     // Methods for adding items",
                "deletions": 12
            },
            {
                "sha": "eca1376e1b3fd49496fc972fe3328e7923bae2ac",
                "filename": "src/main/java/org/apache/commons/collections4/comparators/NullComparator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Comparator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.ComparatorUtils;\n \n@@ -108,12 +109,8 @@ public NullComparator(final boolean nullsAreHigh) {\n      *  <code>null</code>\n      **/\n     public NullComparator(final Comparator<? super E> nonNullComparator, final boolean nullsAreHigh) {\n-        this.nonNullComparator = nonNullComparator;\n+        this.nonNullComparator = Objects.requireNonNull(nonNullComparator, \"nonNullComparator\");\n         this.nullsAreHigh = nullsAreHigh;\n-\n-        if (nonNullComparator == null) {\n-            throw new NullPointerException(\"null nonNullComparator\");\n-        }\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 5
            },
            {
                "sha": "b53c59c9ec6b903a3316da8bb4510b27ba7a8ae0",
                "filename": "src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -45,11 +46,9 @@\n      * @throws NullPointerException if either predicate is null\n      */\n     public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n-                                                final Predicate<? super T> predicate2) {\n-        if (predicate1 == null || predicate2 == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new AndPredicate<>(predicate1, predicate2);\n+            final Predicate<? super T> predicate2) {\n+        return new AndPredicate<>(Objects.requireNonNull(predicate1, \"predicate1\"),\n+                Objects.requireNonNull(predicate2, \"predicate2\"));\n     }\n \n     /**",
                "deletions": 5
            },
            {
                "sha": "235e7c92473a060195e8bd6550e9998441cc0e15",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Collection;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Closure;\n \n@@ -64,9 +65,7 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures) {\n-        if (closures == null) {\n-            throw new NullPointerException(\"Closure collection must not be null\");\n-        }\n+        Objects.requireNonNull(closures, \"closures\");\n         if (closures.size() == 0) {\n             return NOPClosure.<E>nopClosure();\n         }",
                "deletions": 3
            },
            {
                "sha": "34368c5235f9ad6e89723f137e85610b5bad0749",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Collection;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Transformer;\n \n@@ -68,9 +69,7 @@\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n             final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n-        if (transformers == null) {\n-            throw new NullPointerException(\"Transformer collection must not be null\");\n-        }\n+        Objects.requireNonNull(transformers, \"transformers\");\n         if (transformers.size() == 0) {\n             return NOPTransformer.<T>nopTransformer();\n         }",
                "deletions": 3
            },
            {
                "sha": "91c1c34f80771edb1f07a3c29c4d5a91b784bed3",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.Transformer;\n@@ -44,10 +45,7 @@\n      * @throws NullPointerException if the closure is null\n      */\n     public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure) {\n-        if (closure == null) {\n-            throw new NullPointerException(\"Closure must not be null\");\n-        }\n-        return new ClosureTransformer<>(closure);\n+        return new ClosureTransformer<>(Objects.requireNonNull(closure, \"closure\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "7f17933287606f869a370f857d26c3f7f24f043b",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Comparator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -119,13 +120,8 @@\n      */\n     public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator,\n                                                        final Criterion criterion) {\n-        if (comparator == null) {\n-            throw new NullPointerException(\"Comparator must not be null.\");\n-        }\n-        if (criterion == null) {\n-            throw new NullPointerException(\"Criterion must not be null.\");\n-        }\n-        return new ComparatorPredicate<>(object, comparator, criterion);\n+        return new ComparatorPredicate<>(object, Objects.requireNonNull(comparator, \"comparator\"),\n+                Objects.requireNonNull(criterion, \"criterion\"));\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "53a465f6655dc6c66fadd8fcc43bd957a97415f2",
                "filename": "src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.Transformer;\n@@ -44,10 +45,7 @@\n      * @throws NullPointerException if the factory is null\n      */\n     public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory) {\n-        if (factory == null) {\n-            throw new NullPointerException(\"Factory must not be null\");\n-        }\n-        return new FactoryTransformer<>(factory);\n+        return new FactoryTransformer<>(Objects.requireNonNull(factory, \"factory\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "4b8b9614b6e1f106d7933f2bac73b7f4f7b60890",
                "filename": "src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "status": "modified",
                "changes": 31,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.util.Collection;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.Predicate;\n@@ -75,13 +76,10 @@ private FunctorUtils() {\n      * @param predicates  the predicates to validate\n      */\n     static void validate(final Predicate<?>... predicates) {\n-        if (predicates == null) {\n-            throw new NullPointerException(\"The predicate array must not be null\");\n-        }\n+        Objects.requireNonNull(predicates, \"predicates\");\n         for (int i = 0; i < predicates.length; i++) {\n             if (predicates[i] == null) {\n-                throw new NullPointerException(\n-                        \"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n+                throw new NullPointerException(\"predicates[\" + i + \"]\");\n             }\n         }\n     }\n@@ -93,18 +91,15 @@ static void validate(final Predicate<?>... predicates) {\n      * @return predicate array\n      */\n     static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates) {\n-        if (predicates == null) {\n-            throw new NullPointerException(\"The predicate collection must not be null\");\n-        }\n+        Objects.requireNonNull(predicates, \"predicates\");\n         // convert to array like this to guarantee iterator() ordering\n         @SuppressWarnings(\"unchecked\") // OK\n         final Predicate<? super T>[] preds = new Predicate[predicates.size()];\n         int i = 0;\n         for (final Predicate<? super T> predicate : predicates) {\n             preds[i] = predicate;\n             if (preds[i] == null) {\n-                throw new NullPointerException(\n-                        \"The predicate collection must not contain a null predicate, index \" + i + \" was null\");\n+                throw new NullPointerException(\"predicates[\" + i + \"]\");\n             }\n             i++;\n         }\n@@ -131,21 +126,18 @@ static void validate(final Predicate<?>... predicates) {\n      * @param closures  the closures to validate\n      */\n     static void validate(final Closure<?>... closures) {\n-        if (closures == null) {\n-            throw new NullPointerException(\"The closure array must not be null\");\n-        }\n+        Objects.requireNonNull(closures, \"closures\");\n         for (int i = 0; i < closures.length; i++) {\n             if (closures[i] == null) {\n-                throw new NullPointerException(\n-                        \"The closure array must not contain a null closure, index \" + i + \" was null\");\n+                throw new NullPointerException(\"closures[\" + i + \"]\");\n             }\n         }\n     }\n \n     /**\n      * A very simple method that coerces Closure<? super T> to Closure<T>.\n      * <p>This method exists\n-     * simply as centralised documentation and atomic unchecked warning\n+     * simply as centralized documentation and atomic unchecked warning\n      * suppression.\n      *\n      * @param <T> the type of object the returned closure should \"accept\"\n@@ -177,13 +169,10 @@ static void validate(final Closure<?>... closures) {\n      * @param transformers  the transformers to validate\n      */\n     static void validate(final Transformer<?, ?>... transformers) {\n-        if (transformers == null) {\n-            throw new NullPointerException(\"The transformer array must not be null\");\n-        }\n+        Objects.requireNonNull(transformers, \"transformers\");\n         for (int i = 0; i < transformers.length; i++) {\n             if (transformers[i] == null) {\n-                throw new NullPointerException(\n-                    \"The transformer array must not contain a null transformer, index \" + i + \" was null\");\n+                throw new NullPointerException(\"transformers[\" + i + \"]\");\n             }\n         }\n     }",
                "deletions": 21
            },
            {
                "sha": "0d8e59c45b1e8dce1062176be6fd360c83cb4123",
                "filename": "src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/IfClosure.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.Predicate;\n@@ -69,13 +70,9 @@\n     public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,\n                                            final Closure<? super E> trueClosure,\n                                            final Closure<? super E> falseClosure) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        if (trueClosure == null || falseClosure == null) {\n-            throw new NullPointerException(\"Closures must not be null\");\n-        }\n-        return new IfClosure<>(predicate, trueClosure, falseClosure);\n+        return new IfClosure<>(Objects.requireNonNull(predicate, \"predicate\"),\n+                Objects.requireNonNull(trueClosure, \"trueClosure\"),\n+                Objects.requireNonNull(falseClosure, \"falseClosure\"));\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "37bd67ad44a75d8ca2bc9f2c512e6d7b505c5216",
                "filename": "src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "status": "modified",
                "changes": 23,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n@@ -56,14 +57,9 @@\n     public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                          final Transformer<? super I, ? extends O> trueTransformer,\n                                                          final Transformer<? super I, ? extends O> falseTransformer) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        if (trueTransformer == null || falseTransformer == null) {\n-            throw new NullPointerException(\"Transformers must not be null\");\n-        }\n-\n-        return new IfTransformer<>(predicate, trueTransformer, falseTransformer);\n+        return new IfTransformer<>(Objects.requireNonNull(predicate, \"predicate\"),\n+                Objects.requireNonNull(trueTransformer, \"trueTransformer\"),\n+                Objects.requireNonNull(falseTransformer, \"falseTransformer\"));\n     }\n \n     /**\n@@ -81,15 +77,8 @@\n     public static <T> Transformer<T, T> ifTransformer(\n             final Predicate<? super T> predicate,\n             final Transformer<? super T, ? extends T> trueTransformer) {\n-\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        if (trueTransformer == null) {\n-            throw new NullPointerException(\"Transformer must not be null\");\n-        }\n-\n-        return new IfTransformer<>(predicate, trueTransformer, NOPTransformer.<T>nopTransformer());\n+        return new IfTransformer<>(Objects.requireNonNull(predicate, \"predicate\"),\n+                Objects.requireNonNull(trueTransformer, \"trueTransformer\"), NOPTransformer.<T>nopTransformer());\n     }\n \n     /**",
                "deletions": 17
            },
            {
                "sha": "3a1c7a7a89117a16c79d0324faaf9f8680ee438e",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -42,10 +43,7 @@\n      * @throws NullPointerException if the class is null\n      */\n     public static Predicate<Object> instanceOfPredicate(final Class<?> type) {\n-        if (type == null) {\n-            throw new NullPointerException(\"The type to check instanceof must not be null\");\n-        }\n-        return new InstanceofPredicate(type);\n+        return new InstanceofPredicate(Objects.requireNonNull(type, \"type\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "7cbb456009a311e0202741128ae4f9aeca390409",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.FunctorException;\n@@ -58,9 +59,7 @@\n     public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate,\n                                                     final Class<?>[] paramTypes,\n                                                     final Object[] args) {\n-        if (classToInstantiate == null) {\n-            throw new NullPointerException(\"Class to instantiate must not be null\");\n-        }\n+        Objects.requireNonNull(classToInstantiate, \"classToInstantiate\");\n         if (paramTypes == null && args != null\n             || paramTypes != null && args == null\n             || paramTypes != null && args != null && paramTypes.length != args.length) {",
                "deletions": 3
            },
            {
                "sha": "d15d3ec1587d7a202923e0185e3b50bebb140163",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.FunctorException;\n import org.apache.commons.collections4.Transformer;\n@@ -53,10 +54,7 @@\n      * @since 3.1\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n-        if (methodName == null) {\n-            throw new NullPointerException(\"The method to invoke must not be null\");\n-        }\n-        return new InvokerTransformer<>(methodName);\n+        return new InvokerTransformer<>(Objects.requireNonNull(methodName, \"methodName\"));\n     }\n \n     /**\n@@ -73,9 +71,7 @@\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                               final Object[] args) {\n-        if (methodName == null) {\n-            throw new NullPointerException(\"The method to invoke must not be null\");\n-        }\n+        Objects.requireNonNull(methodName, \"methodName\");\n         if (((paramTypes == null) && (args != null))\n             || ((paramTypes != null) && (args == null))\n             || ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {",
                "deletions": 7
            },
            {
                "sha": "bc569174dfa198681ef42b84801b2ba278f6df3c",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -42,10 +43,7 @@\n      * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new NotPredicate<>(predicate);\n+        return new NotPredicate<>(Objects.requireNonNull(predicate, \"predicate\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "875c2467dc0f54c17b097d0a82012cccbe5e04e5",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.FunctorException;\n import org.apache.commons.collections4.Predicate;\n@@ -43,10 +44,7 @@\n      * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new NullIsExceptionPredicate<>(predicate);\n+        return new NullIsExceptionPredicate<>(Objects.requireNonNull(predicate, \"predicate\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "1ee6c9d498fe253d1242a3a7562da9019bdf0b38",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -42,10 +43,7 @@\n      * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new NullIsFalsePredicate<>(predicate);\n+        return new NullIsFalsePredicate<>(Objects.requireNonNull(predicate, \"predicate\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "a86ee5fa9ab483646f0b6a5062c1d2ea2e8f5fb8",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -42,10 +43,7 @@\n      * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new NullIsTruePredicate<>(predicate);\n+        return new NullIsTruePredicate<>(Objects.requireNonNull(predicate, \"predicate\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "9a6bda4be86484a768bbeebb5c7279132ef3ad30",
                "filename": "src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n \n@@ -46,10 +47,8 @@\n      */\n     public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n-        if (predicate1 == null || predicate2 == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        return new OrPredicate<>(predicate1, predicate2);\n+        return new OrPredicate<>(Objects.requireNonNull(predicate1, \"predicate1\"),\n+                Objects.requireNonNull(predicate2, \"predicate2\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "76a507f75ca92ebb15021ea443d3417228336637",
                "filename": "src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.Predicate;\n@@ -87,9 +88,7 @@\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures) {\n-        if (predicatesAndClosures == null) {\n-            throw new NullPointerException(\"The predicate and closure map must not be null\");\n-        }\n+        Objects.requireNonNull(predicatesAndClosures, \"predicatesAndClosures\");\n         // convert to array like this to guarantee iterator() ordering\n         final Closure<? super E> defaultClosure = predicatesAndClosures.remove(null);\n         final int size = predicatesAndClosures.size();",
                "deletions": 3
            },
            {
                "sha": "3c759f6476d7fe45a9afeca3d5ce0614a3d3475e",
                "filename": "src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n@@ -92,9 +93,7 @@\n     public static <I, O> Transformer<I, O> switchTransformer(\n             final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map) {\n \n-        if (map == null) {\n-            throw new NullPointerException(\"The predicate and transformer map must not be null\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         if (map.size() == 0) {\n             return ConstantTransformer.<I, O>nullTransformer();\n         }",
                "deletions": 3
            },
            {
                "sha": "2a4e697bdd35517f76e8cf94ab73d2b6cd110383",
                "filename": "src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n@@ -49,13 +50,8 @@\n      */\n     public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer,\n                                                         final Predicate<? super T> predicate) {\n-        if (transformer == null) {\n-            throw new NullPointerException(\"The transformer to call must not be null\");\n-        }\n-        if (predicate == null) {\n-            throw new NullPointerException(\"The predicate to call must not be null\");\n-        }\n-        return new TransformedPredicate<>(transformer, predicate);\n+        return new TransformedPredicate<>(Objects.requireNonNull(transformer, \"transformer\"),\n+                Objects.requireNonNull(predicate, \"predicate\"));\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "f72bfd8abab631e674455456791b17f2cc2172f0",
                "filename": "src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.functors;\n \n import java.io.Serializable;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.FunctorException;\n import org.apache.commons.collections4.Predicate;\n@@ -44,10 +45,7 @@\n      * @throws NullPointerException if the transformer is null\n      */\n     public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer) {\n-        if (transformer == null) {\n-            throw new NullPointerException(\"The transformer to call must not be null\");\n-        }\n-        return new TransformerPredicate<>(transformer);\n+        return new TransformerPredicate<>(Objects.requireNonNull(transformer, \"transformer\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "db26be28c9e41d18dede0ea9a104adcfe10828d7",
                "filename": "src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.collections4.functors;\n \n+import java.util.Objects;\n+\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.Predicate;\n \n@@ -52,13 +54,8 @@\n      */\n     public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate,\n                                               final Closure<? super E> closure, final boolean doLoop) {\n-        if (predicate == null) {\n-            throw new NullPointerException(\"Predicate must not be null\");\n-        }\n-        if (closure == null) {\n-            throw new NullPointerException(\"Closure must not be null\");\n-        }\n-        return new WhileClosure<>(predicate, closure, doLoop);\n+        return new WhileClosure<>(Objects.requireNonNull(predicate, \"predicate\"),\n+                Objects.requireNonNull(closure, \"closure\"), doLoop);\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "94f84f63bd87a8fa4acef842f12bb40cd915ff07",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.iterators;\n \n import java.util.ListIterator;\n+import java.util.Objects;\n \n /**\n  * Provides basic behaviour for decorating a list iterator with extra functionality.\n@@ -39,10 +40,7 @@\n      */\n     public AbstractListIteratorDecorator(final ListIterator<E> iterator) {\n         super();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"ListIterator must not be null\");\n-        }\n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "ef414411c8aa9dbfbe3fe3dda5de8bc7c68afefa",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.collections4.iterators;\n \n+import java.util.Objects;\n+\n import org.apache.commons.collections4.MapIterator;\n \n /**\n@@ -41,10 +43,7 @@\n      */\n     public AbstractMapIteratorDecorator(final MapIterator<K, V> iterator) {\n         super();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"MapIterator must not be null\");\n-        }\n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "8f9811546e12479472dba6339f5b1ae84e187b7e",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.collections4.iterators;\n \n+import java.util.Objects;\n+\n import org.apache.commons.collections4.OrderedMapIterator;\n \n /**\n@@ -41,10 +43,7 @@\n      */\n     public AbstractOrderedMapIteratorDecorator(final OrderedMapIterator<K, V> iterator) {\n         super();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"OrderedMapIterator must not be null\");\n-        }\n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "b3b38e21afe8769c64d1ccef0695b8f26ec6541d",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.iterators;\n \n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n  * Provides basic behaviour for decorating an iterator with extra functionality\n@@ -39,10 +40,7 @@\n      */\n     protected AbstractUntypedIteratorDecorator(final Iterator<I> iterator) {\n         super();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "b8aa08c933371e70ea65e52e96c92ca20a9f64e8",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -15,6 +15,7 @@\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n /**\n  * Decorates another iterator to return elements in a specific range.\n@@ -60,17 +61,14 @@\n      * @throws IllegalArgumentException if either offset or max is negative\n      */\n     public BoundedIterator(final Iterator<? extends E> iterator, final long offset, final long max) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n         if (offset < 0) {\n             throw new IllegalArgumentException(\"Offset parameter must not be negative.\");\n         }\n         if (max < 0) {\n             throw new IllegalArgumentException(\"Max parameter must not be negative.\");\n         }\n \n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n         this.offset = offset;\n         this.max = max;\n         pos = 0;",
                "deletions": 4
            },
            {
                "sha": "1cf120a2d22ad3ee93ccc69a43194bd97105f263",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedList;\n+import java.util.Objects;\n import java.util.Queue;\n \n /**\n@@ -157,10 +158,7 @@ public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain) {\n      */\n     public void addIterator(final Iterator<? extends E> iterator) {\n         checkLocked();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        iteratorChain.add(iterator);\n+        iteratorChain.add(Objects.requireNonNull(iterator, \"iterator\"));\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "0ade288014b182974379fc2dd7f9004675ecf7ae",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.ResettableListIterator;\n \n@@ -76,10 +77,7 @@\n      */\n     public ListIteratorWrapper(final Iterator<? extends E> iterator) {\n         super();\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n-        this.iterator = iterator;\n+        this.iterator = Objects.requireNonNull(iterator, \"iterator\");\n     }\n \n     // ListIterator interface",
                "deletions": 4
            },
            {
                "sha": "5de2397929582d1bc69473e1db6a3bd8e7e91a0e",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.ResettableIterator;\n \n@@ -47,14 +48,11 @@\n      * There is no way to reset an Iterator instance without recreating it from\n      * the original source, so the Collection must be passed in.\n      *\n-     * @param coll  the collection to wrap\n+     * @param collection  the collection to wrap\n      * @throws NullPointerException if the collection is null\n      */\n-    public LoopingIterator(final Collection<? extends E> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"The collection must not be null\");\n-        }\n-        collection = coll;\n+    public LoopingIterator(final Collection<? extends E> collection) {\n+        this.collection = Objects.requireNonNull(collection, \"collection\");\n         reset();\n     }\n ",
                "deletions": 6
            },
            {
                "sha": "cd3bc76a9bd9a6229b9a45caf261b90a7a9a589c",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.util.List;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.ResettableListIterator;\n \n@@ -54,10 +55,7 @@\n      * @throws NullPointerException if the list it null\n      */\n     public LoopingListIterator(final List<E> list) {\n-        if (list == null) {\n-            throw new NullPointerException(\"The list must not be null\");\n-        }\n-        this.list = list;\n+        this.list = Objects.requireNonNull(list, \"collection\");\n         _reset();\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "66c1721262c6730bd167cc60e4a2d0c0e7ef3e6d",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n@@ -45,9 +46,7 @@\n      * @throws NullPointerException if node is null\n      */\n     public NodeListIterator(final Node node) {\n-        if (node == null) {\n-            throw new NullPointerException(\"Node must not be null.\");\n-        }\n+        Objects.requireNonNull(node, \"node\");\n         this.nodeList = node.getChildNodes();\n     }\n \n@@ -59,10 +58,7 @@ public NodeListIterator(final Node node) {\n      * @throws NullPointerException if nodeList is null\n      */\n     public NodeListIterator(final NodeList nodeList) {\n-        if (nodeList == null) {\n-            throw new NullPointerException(\"NodeList must not be null.\");\n-        }\n-        this.nodeList = nodeList;\n+        this.nodeList = Objects.requireNonNull(nodeList, \"nodeList\");\n     }\n \n     @Override",
                "deletions": 7
            },
            {
                "sha": "f795fbe318e0167990a42cdf13ebc827711df7d6",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n /**\n  * Decorates an iterator to support one-element lookahead while iterating.\n@@ -55,9 +56,7 @@\n      * @throws NullPointerException if the iterator is null\n      */\n     public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof PeekingIterator<?>) {\n             @SuppressWarnings(\"unchecked\") // safe cast\n             final PeekingIterator<E> it = (PeekingIterator<E>) iterator;",
                "deletions": 3
            },
            {
                "sha": "4382e2bc0530def1face0b16a822aedbeda54a32",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java",
                "status": "modified",
                "changes": 18,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n /**\n  * This iterator creates permutations of an input collection, using the\n@@ -69,25 +70,22 @@\n \n     /**\n      * Standard constructor for this class.\n-     * @param coll  the collection to generate permutations for\n+     * @param collection  the collection to generate permutations for\n      * @throws NullPointerException if coll is null\n      */\n-    public PermutationIterator(final Collection<? extends E> coll) {\n-        if (coll == null) {\n-            throw new NullPointerException(\"The collection must not be null\");\n-        }\n-\n-        keys = new int[coll.size()];\n-        direction = new boolean[coll.size()];\n+    public PermutationIterator(final Collection<? extends E> collection) {\n+        Objects.requireNonNull(collection, \"collection\");\n+        keys = new int[collection.size()];\n+        direction = new boolean[collection.size()];\n         Arrays.fill(direction, false);\n         int value = 1;\n         objectMap = new HashMap<>();\n-        for (final E e : coll) {\n+        for (final E e : collection) {\n             objectMap.put(Integer.valueOf(value), e);\n             keys[value - 1] = value;\n             value++;\n         }\n-        nextPermutation = new ArrayList<>(coll);\n+        nextPermutation = new ArrayList<>(collection);\n     }\n \n     /**",
                "deletions": 10
            },
            {
                "sha": "3f79721aac644ed8dc04be234cd17cc3802afec1",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.Iterator;\n+import java.util.Objects;\n \n /**\n  * Decorates an iterator to support pushback of elements.\n@@ -52,9 +53,7 @@\n      * @throws NullPointerException if the iterator is null\n      */\n     public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof PushbackIterator<?>) {\n             @SuppressWarnings(\"unchecked\") // safe cast\n             final PushbackIterator<E> it = (PushbackIterator<E>) iterator;",
                "deletions": 3
            },
            {
                "sha": "e38b9606c874a09627ae2f93875b07e67e696408",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.List;\n import java.util.ListIterator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.ResettableListIterator;\n \n@@ -52,10 +53,7 @@\n      */\n     public ReverseListIterator(final List<E> list) {\n         super();\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null.\");\n-        }\n-        this.list = list;\n+        this.list = Objects.requireNonNull(list, \"list\");\n         iterator = list.listIterator(list.size());\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "0992cb850e9ca8e59c07833ef774ce28012964b2",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.iterators;\n \n import java.util.Iterator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Unmodifiable;\n \n@@ -45,9 +46,7 @@\n      * @throws NullPointerException if the iterator is null\n      */\n     public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"Iterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast\n             final Iterator<E> tmpIterator = (Iterator<E>) iterator;",
                "deletions": 3
            },
            {
                "sha": "3178d5ed02d4d9f5b99f4df4255ec322c5a00202",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.iterators;\n \n import java.util.ListIterator;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Unmodifiable;\n \n@@ -43,9 +44,7 @@\n      * @throws NullPointerException if the iterator is null\n      */\n     public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"ListIterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast\n             final ListIterator<E> tmpIterator = (ListIterator<E>) iterator;",
                "deletions": 3
            },
            {
                "sha": "0ac87b5cacae16d1f5f3c9b158f8e217f7388583",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.collections4.iterators;\n \n+import java.util.Objects;\n+\n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.Unmodifiable;\n \n@@ -46,9 +48,7 @@\n      */\n     public static <K, V> MapIterator<K, V> unmodifiableMapIterator(\n             final MapIterator<? extends K, ? extends V> iterator) {\n-        if (iterator == null) {\n-            throw new NullPointerException(\"MapIterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast\n             final MapIterator<K, V> tmpIterator = (MapIterator<K, V>) iterator;",
                "deletions": 3
            },
            {
                "sha": "55d0193be7ee0e0cc948a1e25d0a3cc49103f3fd",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.collections4.iterators;\n \n+import java.util.Objects;\n+\n import org.apache.commons.collections4.OrderedMapIterator;\n import org.apache.commons.collections4.Unmodifiable;\n \n@@ -47,10 +49,7 @@\n      */\n     public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(\n             final OrderedMapIterator<K, ? extends V> iterator) {\n-\n-        if (iterator == null) {\n-            throw new NullPointerException(\"OrderedMapIterator must not be null\");\n-        }\n+        Objects.requireNonNull(iterator, \"iterator\");\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast\n             final OrderedMapIterator<K, V> tmpIterator = (OrderedMapIterator<K, V>) iterator;",
                "deletions": 4
            },
            {
                "sha": "b12a35e69b46e4d4ffa44f4bf6f53eab401a8061",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.FluentIterable;\n \n@@ -88,9 +89,7 @@ public ZippingIterator(final Iterator<? extends E>... iterators) {\n         // create a mutable list to be able to remove exhausted iterators\n         final List<Iterator<? extends E>> list = new ArrayList<>();\n         for (final Iterator<? extends E> iterator : iterators) {\n-            if (iterator == null) {\n-                throw new NullPointerException(\"Iterator must not be null.\");\n-            }\n+            Objects.requireNonNull(iterator, \"iterator\");\n             list.add(iterator);\n         }\n         this.iterators = FluentIterable.of(list).loop().iterator();",
                "deletions": 3
            },
            {
                "sha": "5ceea1afdb55a2e3aa5b2f72f5c82c1c9fb52aa2",
                "filename": "src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.collections4.keyvalue;\n \n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.KeyValue;\n \n@@ -40,10 +41,7 @@\n      * @throws NullPointerException if the collection is null\n      */\n     public AbstractMapEntryDecorator(final Map.Entry<K, V> entry) {\n-        if (entry == null) {\n-            throw new NullPointerException(\"Map Entry must not be null.\");\n-        }\n-        this.entry = entry;\n+        this.entry = Objects.requireNonNull(entry, \"entry\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "1897c20e08e684337d38accbd90f897d056b6101",
                "filename": "src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.io.Serializable;\n import java.util.Arrays;\n+import java.util.Objects;\n \n /**\n  * A <code>MultiKey</code> allows multiple map keys to be merged together.\n@@ -158,9 +159,7 @@ public MultiKey(final K[] keys) {\n      */\n     public MultiKey(final K[] keys, final boolean makeClone) {\n         super();\n-        if (keys == null) {\n-            throw new NullPointerException(\"The array of keys must not be null\");\n-        }\n+        Objects.requireNonNull(keys, \"keys\");\n         if (makeClone) {\n             this.keys = keys.clone();\n         } else {",
                "deletions": 3
            },
            {
                "sha": "7a43146cf447eccb6674e468823c6ad61f3cfd72",
                "filename": "src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Predicate;\n \n@@ -73,9 +74,7 @@\n      * @since 4.0\n      */\n     public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n+        Objects.requireNonNull(list, \"list\");\n         if (list.isEmpty()) {\n             return new SetUniqueList<>(list, new HashSet<E>());\n         }\n@@ -98,10 +97,7 @@\n      */\n     protected SetUniqueList(final List<E> list, final Set<E> set) {\n         super(list);\n-        if (set == null) {\n-            throw new NullPointerException(\"Set must not be null\");\n-        }\n-        this.set = set;\n+        this.set = Objects.requireNonNull(set, \"set\");\n     }\n \n     // -----------------------------------------------------------------------",
                "deletions": 7
            },
            {
                "sha": "ad2408f6bea50059e004b1df3e6abb0f6f5d745d",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n@@ -59,10 +60,7 @@ protected AbstractMapDecorator() {\n      * @throws NullPointerException if the map is null\n      */\n     protected AbstractMapDecorator(final Map<K, V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n-        this.map = map;\n+        this.map = Objects.requireNonNull(map, \"map\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "26c577bc953d05d2a1155671d0326c86d5632a19",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.MapIterator;\n@@ -269,13 +270,8 @@ public V get(final Object key) {\n      */\n     @Override\n     public V put(final K key, final V value) {\n-        if (key == null) {\n-            throw new NullPointerException(\"null keys not allowed\");\n-        }\n-        if (value == null) {\n-            throw new NullPointerException(\"null values not allowed\");\n-        }\n-\n+        Objects.requireNonNull(key, \"key\");\n+        Objects.requireNonNull(value, \"value\");\n         purgeBeforeWrite();\n         return super.put(key, value);\n     }",
                "deletions": 7
            },
            {
                "sha": "f7211b805e669bb201e2e2cda0370268a908c729",
                "filename": "src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.Transformer;\n@@ -170,10 +171,7 @@ public DefaultedMap(final Transformer<? super K, ? extends V> defaultValueTransf\n      */\n     protected DefaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> defaultValueTransformer) {\n         super(map);\n-        if (defaultValueTransformer == null) {\n-            throw new NullPointerException(\"Transformer must not be null.\");\n-        }\n-        this.value = defaultValueTransformer;\n+        this.value = Objects.requireNonNull(defaultValueTransformer, \"defaultValueTransformer\");\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 4
            },
            {
                "sha": "1317c693a4973dae10ad6890d927056e29abe4da",
                "filename": "src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/LazyMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Factory;\n import org.apache.commons.collections4.Transformer;\n@@ -114,10 +115,7 @@\n      */\n     protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n         super(map);\n-        if (factory == null) {\n-            throw new NullPointerException(\"Factory must not be null\");\n-        }\n-        this.factory = FactoryTransformer.factoryTransformer(factory);\n+        this.factory = FactoryTransformer.factoryTransformer(Objects.requireNonNull(factory, \"factory\"));\n     }\n \n     /**\n@@ -129,10 +127,7 @@ protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n      */\n     protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory) {\n         super(map);\n-        if (factory == null) {\n-            throw new NullPointerException(\"Factory must not be null\");\n-        }\n-        this.factory = factory;\n+        this.factory = Objects.requireNonNull(factory, \"factory\");\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 8
            },
            {
                "sha": "d6859d3deb19fe2dd7b454c3ca4faa4da186af6f",
                "filename": "src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.keyvalue.MultiKey;\n@@ -103,9 +104,7 @@\n      * @since 4.0\n      */\n     public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         if (map.size() > 0) {\n             throw new IllegalArgumentException(\"Map must be empty\");\n         }\n@@ -823,9 +822,7 @@ public boolean removeAll(final Object key1, final Object key2, final Object key3\n      * @param key  the key to check\n      */\n     protected void checkKey(final MultiKey<?> key) {\n-        if (key == null) {\n-            throw new NullPointerException(\"Key must not be null\");\n-        }\n+        Objects.requireNonNull(key, \"key\");\n     }\n \n     /**",
                "deletions": 6
            },
            {
                "sha": "ab911153a9e6a8015a649c05a0bc21e307bd448a",
                "filename": "src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n \n@@ -191,9 +192,7 @@ public long expirationTime(final K key, final V value) {\n      */\n     private static long validateAndConvertToMillis(final long timeToLive,\n                                                    final TimeUnit timeUnit) {\n-        if (timeUnit == null) {\n-            throw new NullPointerException(\"Time unit must not be null\");\n-        }\n+        Objects.requireNonNull(timeUnit, \"timeUnit\");\n         return TimeUnit.MILLISECONDS.convert(timeToLive, timeUnit);\n     }\n \n@@ -237,10 +236,7 @@ public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n     public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy,\n                               final Map<K, V> map) {\n         super(map);\n-        if (expiringPolicy == null) {\n-            throw new NullPointerException(\"Policy must not be null.\");\n-        }\n-        this.expiringPolicy = expiringPolicy;\n+        this.expiringPolicy = Objects.requireNonNull(expiringPolicy, \"expiringPolicy\");\n     }\n \n     /**",
                "deletions": 7
            },
            {
                "sha": "cfc819205e231a68acc3971e19603bb80ebe87a3",
                "filename": "src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.KeyValue;\n@@ -715,13 +716,10 @@ public void clear() {\n      *  in your map, then the recursive method will be invoked twenty thousand\n      *  times.  You have been warned.\n      *\n-     *  @param r  the code to execute atomically\n+     *  @param runnable  the code to execute atomically\n      */\n-    public void atomic(final Runnable r) {\n-        if (r == null) {\n-            throw new NullPointerException();\n-        }\n-        atomic(r, 0);\n+    public void atomic(final Runnable runnable) {\n+        atomic(Objects.requireNonNull(runnable, \"runnable\"), 0);\n     }\n \n     private void atomic(final Runnable r, final int bucket) {",
                "deletions": 6
            },
            {
                "sha": "956a47c638bc1cf2f1a796d0173848b50871f4f1",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "status": "modified",
                "changes": 18,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Map.Entry;\n import java.util.Set;\n \n@@ -88,10 +89,7 @@ protected AbstractMultiValuedMap() {\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected AbstractMultiValuedMap(final Map<K, ? extends Collection<V>> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n-        this.map = (Map<K, Collection<V>>) map;\n+        this.map = (Map<K, Collection<V>>) Objects.requireNonNull(map, \"map\");\n     }\n \n     // -----------------------------------------------------------------------\n@@ -282,9 +280,7 @@ public boolean put(final K key, final V value) {\n      */\n     @Override\n     public boolean putAll(final Map<? extends K, ? extends V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         boolean changed = false;\n         for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n             changed |= put(entry.getKey(), entry.getValue());\n@@ -306,9 +302,7 @@ public boolean putAll(final Map<? extends K, ? extends V> map) {\n      */\n     @Override\n     public boolean putAll(final MultiValuedMap<? extends K, ? extends V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         boolean changed = false;\n         for (final Map.Entry<? extends K, ? extends V> entry : map.entries()) {\n             changed |= put(entry.getKey(), entry.getValue());\n@@ -349,9 +343,7 @@ public boolean putAll(final MultiValuedMap<? extends K, ? extends V> map) {\n      */\n     @Override\n     public boolean putAll(final K key, final Iterable<? extends V> values) {\n-        if (values == null) {\n-            throw new NullPointerException(\"Values must not be null.\");\n-        }\n+        Objects.requireNonNull(values, \"values\");\n \n         if (values instanceof Collection<?>) {\n             final Collection<? extends V> valueCollection = (Collection<? extends V>) values;",
                "deletions": 13
            },
            {
                "sha": "f63236b69a23162317556a513aae0ce3a118365b",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Map.Entry;\n import java.util.Set;\n \n@@ -55,10 +56,7 @@\n      * @throws NullPointerException if the map is null\n      */\n     protected AbstractMultiValuedMapDecorator(final MultiValuedMap<K, V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"MultiValuedMap must not be null.\");\n-        }\n-        this.map = map;\n+        this.map = Objects.requireNonNull(map, \"map\");\n     }\n \n     // -----------------------------------------------------------------------",
                "deletions": 4
            },
            {
                "sha": "a7723f009aad483f74c9ff28960dee80b6d4cd24",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.FluentIterable;\n@@ -158,9 +159,7 @@ public boolean put(final K key, final V value) {\n \n     @Override\n     public boolean putAll(final K key, final Iterable<? extends V> values) {\n-        if (values == null) {\n-            throw new NullPointerException(\"Values must not be null.\");\n-        }\n+        Objects.requireNonNull(values, \"values\");\n \n         final Iterable<V> transformedValues = FluentIterable.of(values).transform(valueTransformer);\n         final Iterator<? extends V> it = transformedValues.iterator();\n@@ -169,9 +168,7 @@ public boolean putAll(final K key, final Iterable<? extends V> values) {\n \n     @Override\n     public boolean putAll(final Map<? extends K, ? extends V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         boolean changed = false;\n         for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n             changed |= put(entry.getKey(), entry.getValue());\n@@ -181,9 +178,7 @@ public boolean putAll(final Map<? extends K, ? extends V> map) {\n \n     @Override\n     public boolean putAll(final MultiValuedMap<? extends K, ? extends V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n+        Objects.requireNonNull(map, \"map\");\n         boolean changed = false;\n         for (final Map.Entry<? extends K, ? extends V> entry : map.entries()) {\n             changed |= put(entry.getKey(), entry.getValue());",
                "deletions": 9
            },
            {
                "sha": "88c2689c8d95fc9472f64b5454eea6fbdfb2bbdb",
                "filename": "src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Queue;\n \n import org.apache.commons.collections4.BoundedCollection;\n@@ -235,9 +236,7 @@ public void clear() {\n      */\n     @Override\n     public boolean add(final E element) {\n-        if (null == element) {\n-            throw new NullPointerException(\"Attempted to add null object to queue\");\n-        }\n+        Objects.requireNonNull(element, \"element\");\n \n         if (isAtFullCapacity()) {\n             remove();",
                "deletions": 3
            },
            {
                "sha": "8282627569987676f2b18c2ffcda5e9091aa3733",
                "filename": "src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "status": "modified",
                "changes": 17,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -80,12 +80,8 @@\n      * @since 4.0\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list) {\n-        if (set == null) {\n-            throw new NullPointerException(\"Set must not be null\");\n-        }\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n+        Objects.requireNonNull(set, \"set\");\n+        Objects.requireNonNull(list, \"list\");\n         if (set.size() > 0 || list.size() > 0) {\n             throw new IllegalArgumentException(\"Set and List must be empty\");\n         }\n@@ -122,9 +118,7 @@\n      * @since 4.0\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list) {\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n+        Objects.requireNonNull(list, \"list\");\n         CollectionUtils.filter(list, UniquePredicate.uniquePredicate());\n         final Set<E> set = new HashSet<>(list);\n \n@@ -166,10 +160,7 @@ protected ListOrderedSet(final Set<E> set) {\n      */\n     protected ListOrderedSet(final Set<E> set, final List<E> list) {\n         super(set);\n-        if (list == null) {\n-            throw new NullPointerException(\"List must not be null\");\n-        }\n-        setOrder = list;\n+        setOrder = Objects.requireNonNull(list, \"list\");\n     }\n \n     // -----------------------------------------------------------------------",
                "deletions": 13
            },
            {
                "sha": "a15c341188c0861cd91aec1afa7c41f8af590bff",
                "filename": "src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Predicate;\n \n@@ -89,10 +90,7 @@\n      */\n     private MapBackedSet(final Map<E, ? super V> map, final V dummyValue) {\n         super();\n-        if (map == null) {\n-            throw new NullPointerException(\"The map must not be null\");\n-        }\n-        this.map = map;\n+        this.map = Objects.requireNonNull(map, \"map\");\n         this.dummyValue = dummyValue;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "2e61bd10e5050153c4b8fb592377112be8277510",
                "filename": "src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -18,6 +18,7 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n import org.apache.commons.collections4.IterableGet;\n@@ -43,10 +44,7 @@\n      * @throws NullPointerException if map is null\n      */\n     public AbstractIterableGetMapDecorator(final Map<K, V> map) {\n-        if (map == null) {\n-            throw new NullPointerException(\"Map must not be null.\");\n-        }\n-        this.map = map;\n+        this.map = Objects.requireNonNull(map, \"map\");\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "8ba62401a2a3a17390043983cc2defdb27be4ade",
                "filename": "src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Map;\n+import java.util.Objects;\n \n import org.apache.commons.collections4.Put;\n import org.apache.commons.collections4.Transformer;\n@@ -113,14 +114,8 @@\n     protected TransformedSplitMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer,\n             final Transformer<? super U, ? extends V> valueTransformer) {\n         super(map);\n-        if (keyTransformer == null) {\n-            throw new NullPointerException(\"KeyTransformer must not be null.\");\n-        }\n-        this.keyTransformer = keyTransformer;\n-        if (valueTransformer == null) {\n-            throw new NullPointerException(\"ValueTransformer must not be null.\");\n-        }\n-        this.valueTransformer = valueTransformer;\n+        this.keyTransformer = Objects.requireNonNull(keyTransformer, \"keyTransformer\");\n+        this.valueTransformer = Objects.requireNonNull(valueTransformer, \"valueTransformer\");\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 8
            },
            {
                "sha": "e6a5334a10a195df36bc669b3ba29438525f99a1",
                "filename": "src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.Serializable;\n import java.util.AbstractMap;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Map.Entry;\n \n import org.apache.commons.collections4.Trie;\n@@ -47,11 +48,7 @@\n      * @param keyAnalyzer  the {@link KeyAnalyzer} to use\n      */\n     protected AbstractBitwiseTrie(final KeyAnalyzer<? super K> keyAnalyzer) {\n-        if (keyAnalyzer == null) {\n-            throw new NullPointerException(\"keyAnalyzer\");\n-        }\n-\n-        this.keyAnalyzer = keyAnalyzer;\n+        this.keyAnalyzer = Objects.requireNonNull(keyAnalyzer, \"keyAnalyzer\");\n     }\n \n     /**",
                "deletions": 5
            },
            {
                "sha": "9b694a85e0eb149b92d73aaeaee6236dac05794d",
                "filename": "src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
                "status": "modified",
                "changes": 19,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -29,6 +29,7 @@\n import java.util.Iterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.SortedMap;\n \n@@ -126,9 +127,7 @@ private void incrementModCount() {\n \n     @Override\n     public V put(final K key, final V value) {\n-        if (key == null) {\n-            throw new NullPointerException(\"Key cannot be null\");\n-        }\n+        Objects.requireNonNull(key, \"key\");\n \n         final int lengthInBits = lengthInBits(key);\n \n@@ -794,9 +793,7 @@ public K lastKey() {\n \n     @Override\n     public K nextKey(final K key) {\n-        if (key == null) {\n-            throw new NullPointerException();\n-        }\n+        Objects.requireNonNull(key, \"key\");\n         final TrieEntry<K, V> entry = getEntry(key);\n         if (entry != null) {\n             final TrieEntry<K, V> nextEntry = nextEntry(entry);\n@@ -807,9 +804,7 @@ public K nextKey(final K key) {\n \n     @Override\n     public K previousKey(final K key) {\n-        if (key == null) {\n-            throw new NullPointerException();\n-        }\n+        Objects.requireNonNull(key, \"key\");\n         final TrieEntry<K, V> entry = getEntry(key);\n         if (entry != null) {\n             final TrieEntry<K, V> prevEntry = previousEntry(entry);\n@@ -1971,11 +1966,7 @@ public boolean isToInclusive() {\n          * Creates a {@link RangeEntrySet}.\n          */\n         public RangeEntrySet(final RangeMap delegate) {\n-            if (delegate == null) {\n-                throw new NullPointerException(\"delegate\");\n-            }\n-\n-            this.delegate = delegate;\n+            this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n         }\n \n         @Override",
                "deletions": 14
            },
            {
                "sha": "8c9a54ce46cb663f05a53867f9808bbcd369a6e6",
                "filename": "src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/513ae545ee2b333f62f8ff989e1da161d807d76d/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java?ref=513ae545ee2b333f62f8ff989e1da161d807d76d",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.SortedMap;\n \n@@ -69,11 +70,8 @@\n      * @throws NullPointerException if trie is null\n      */\n     public UnmodifiableTrie(final Trie<K, ? extends V> trie) {\n-        if (trie == null) {\n-            throw new NullPointerException(\"Trie must not be null\");\n-        }\n         @SuppressWarnings(\"unchecked\") // safe to upcast\n-        final Trie<K, V> tmpTrie = (Trie<K, V>) trie;\n+        final Trie<K, V> tmpTrie = (Trie<K, V>) Objects.requireNonNull(trie, \"trie\");\n         this.delegate = tmpTrie;\n     }\n ",
                "deletions": 4
            }
        ],
        "patched_files": [
            "ListIteratorWrapper.java",
            "MapUtils.java",
            "TreeBidiMap.java",
            "ListUtils.java",
            "MultiKeyMap.java",
            "PushbackIterator.java",
            "TransformerUtils.java",
            "ComparatorPredicate.java",
            "CollectionUtils.java",
            "ReverseListIterator.java",
            "UnmodifiableOrderedMapIterator.java",
            "FluentIterable.java",
            "IteratorUtils.java",
            "MultiKey.java",
            "SplitMapUtils.java",
            "TransformedCollection.java",
            "ClosureUtils.java",
            "UnmodifiableIterator.java",
            "ComparatorUtils.java",
            "UnmodifiableBoundedCollection.java",
            "CircularFifoQueue.java",
            "TransformedSplitMap.java",
            "FixedOrderComparator.java",
            "AbstractMultiValuedMap.java",
            "BoundedIterator.java",
            "StaticBucketMap.java",
            "MapBackedSet.java",
            "NodeListIterator.java",
            "DefaultedMap.java",
            "UnmodifiableListIterator.java",
            "SynchronizedCollection.java",
            "SetUtils.java",
            "LoopingListIterator.java",
            "PermutationIterator.java",
            "PassiveExpiringMap.java",
            "PredicatedCollection.java",
            "UnmodifiableTrie.java",
            "LazyMap.java",
            "TransformedMultiValuedMap.java",
            "LoopingIterator.java",
            "IteratorChain.java",
            "IterableUtils.java",
            "ListOrderedSet.java",
            "SetUniqueList.java",
            "ZippingIterator.java",
            "UnmodifiableMapIterator.java",
            "PeekingIterator.java",
            "TreeBag.java"
        ],
        "unit_tests": [
            "UnmodifiableIteratorTest.java",
            "ReverseListIteratorTest.java",
            "SynchronizedCollectionTest.java",
            "SetUtilsTest.java",
            "IterableUtilsTest.java",
            "BoundedIteratorTest.java",
            "ListOrderedSetTest.java",
            "MultiKeyTest.java",
            "TreeBidiMapTest.java",
            "LazyMapTest.java",
            "CircularFifoQueueTest.java",
            "CollectionUtilsTest.java",
            "LoopingIteratorTest.java",
            "TransformedMultiValuedMapTest.java",
            "ZippingIteratorTest.java",
            "SetUniqueListTest.java",
            "ListUtilsTest.java",
            "TransformerUtilsTest.java",
            "AbstractMultiValuedMapTest.java",
            "ComparatorPredicateTest.java",
            "ClosureUtilsTest.java",
            "NodeListIteratorTest.java",
            "StaticBucketMapTest.java",
            "UnmodifiableListIteratorTest.java",
            "UnmodifiableBoundedCollectionTest.java",
            "LoopingListIteratorTest.java",
            "DefaultedMapTest.java",
            "FixedOrderComparatorTest.java",
            "TransformedCollectionTest.java",
            "MapUtilsTest.java",
            "PredicatedCollectionTest.java",
            "MapBackedSetTest.java",
            "TransformedSplitMapTest.java",
            "PushbackIteratorTest.java",
            "UnmodifiableOrderedMapIteratorTest.java",
            "ListIteratorWrapperTest.java",
            "MultiKeyMapTest.java",
            "PassiveExpiringMapTest.java",
            "FluentIterableTest.java",
            "ComparatorUtilsTest.java",
            "SplitMapUtilsTest.java",
            "IteratorUtilsTest.java",
            "UnmodifiableMapIteratorTest.java",
            "PeekingIteratorTest.java",
            "IteratorChainTest.java",
            "PermutationIteratorTest.java",
            "UnmodifiableTrieTest.java",
            "TreeBagTest.java"
        ]
    },
    "commons-collections_68bbd2c": {
        "repo": "commons-collections",
        "message": "[COLLECTIONS-570] Consistently use a NullPointerException if a required input is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1686855 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-collections/commit/68bbd2cf4a5c0eff498d46dddd527cb06274f852",
        "parent": "https://github.com/apache/commons-collections/commit/0acb702f3e6a6a3900d75f2b1df2aca76e853f11",
        "bug_id": "commons-collections_68bbd2c",
        "file": [
            {
                "sha": "22a681d994b422623e2211fed99e84cd35a4978a",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/changes/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/changes/changes.xml?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -22,6 +22,10 @@\n   <body>\n \n   <release version=\"4.1\" date=\"TBD\" description=\"\">\n+    <action issue=\"COLLECTIONS-570\" dev=\"tn\" type=\"update\">\n+      All constructors and static factory methods will now throw a \"NullPointerException\" if\n+      a required input argument is null. Previously sometimes a \"IllegalArgumentException\" was used.\n+    </action>\n     <action issue=\"COLLECTIONS-571\" dev=\"tn\" type=\"update\">\n       Deprecated methods \"synchronizedCollection(Collection)\" and \"unmodifiableCollection(Collection)\"\n       in class \"CollectionUtils\", the corresponding methods in \"java.util.Collections\" should be used instead.",
                "deletions": 0
            },
            {
                "sha": "c0e39634ffb0019f0f6dab5afba6f6a22b891dbd",
                "filename": "src/main/java/org/apache/commons/collections4/BagUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/BagUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/BagUtils.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/BagUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -79,7 +79,7 @@ private BagUtils() {}\n      * @param <E> the element type\n      * @param bag the bag to synchronize, must not be null\n      * @return a synchronized bag backed by that bag\n-     * @throws IllegalArgumentException if the Bag is null\n+     * @throws NullPointerException if the Bag is null\n      */\n     public static <E> Bag<E> synchronizedBag(final Bag<E> bag) {\n         return SynchronizedBag.synchronizedBag(bag);\n@@ -92,7 +92,7 @@ private BagUtils() {}\n      * @param <E> the element type\n      * @param bag the bag whose unmodifiable view is to be returned, must not be null\n      * @return an unmodifiable view of that bag\n-     * @throws IllegalArgumentException if the Bag is null\n+     * @throws NullPointerException if the Bag is null\n      */\n     public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag) {\n         return UnmodifiableBag.unmodifiableBag(bag);\n@@ -111,7 +111,7 @@ private BagUtils() {}\n      * @param bag the bag to predicate, must not be null\n      * @param predicate the predicate for the bag, must not be null\n      * @return a predicated bag backed by the given bag\n-     * @throws IllegalArgumentException if the Bag or Predicate is null\n+     * @throws NullPointerException if the Bag or Predicate is null\n      */\n     public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate) {\n         return PredicatedBag.predicatedBag(bag, predicate);\n@@ -131,7 +131,7 @@ private BagUtils() {}\n      * @param bag the bag to predicate, must not be null\n      * @param transformer the transformer for the bag, must not be null\n      * @return a transformed bag backed by the given bag\n-     * @throws IllegalArgumentException if the Bag or Transformer is null\n+     * @throws NullPointerException if the Bag or Transformer is null\n      */\n     public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n         return TransformedBag.transformingBag(bag, transformer);\n@@ -143,7 +143,7 @@ private BagUtils() {}\n      * @param <E> the element type\n      * @param bag the bag to decorate, must not be null\n      * @return a Bag that complies to the Collection contract\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      * @since 4.0\n      */\n     public static <E> Bag<E> collectionBag(final Bag<E> bag) {\n@@ -175,7 +175,7 @@ private BagUtils() {}\n      * @param <E> the element type\n      * @param bag the bag to synchronize, must not be null\n      * @return a synchronized bag backed by that bag\n-     * @throws IllegalArgumentException if the SortedBag is null\n+     * @throws NullPointerException if the SortedBag is null\n      */\n     public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag) {\n         return SynchronizedSortedBag.synchronizedSortedBag(bag);\n@@ -189,7 +189,7 @@ private BagUtils() {}\n      * @param <E> the element type\n      * @param bag the bag whose unmodifiable view is to be returned, must not be null\n      * @return an unmodifiable view of that bag\n-     * @throws IllegalArgumentException if the SortedBag is null\n+     * @throws NullPointerException if the SortedBag is null\n      */\n     public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag) {\n         return UnmodifiableSortedBag.unmodifiableSortedBag(bag);\n@@ -209,7 +209,7 @@ private BagUtils() {}\n      * @param bag the sorted bag to predicate, must not be null\n      * @param predicate the predicate for the bag, must not be null\n      * @return a predicated bag backed by the given bag\n-     * @throws IllegalArgumentException if the SortedBag or Predicate is null\n+     * @throws NullPointerException if the SortedBag or Predicate is null\n      */\n     public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag,\n             final Predicate<? super E> predicate) {\n@@ -231,7 +231,7 @@ private BagUtils() {}\n      * @param bag the bag to predicate, must not be null\n      * @param transformer the transformer for the bag, must not be null\n      * @return a transformed bag backed by the given bag\n-     * @throws IllegalArgumentException if the Bag or Transformer is null\n+     * @throws NullPointerException if the Bag or Transformer is null\n      */\n     public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag,\n                                                          final Transformer<? super E, ? extends E> transformer) {",
                "deletions": 9
            },
            {
                "sha": "b339a1a0e3fc4032de2b9f6113a22503222a7a66",
                "filename": "src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/ClosureUtils.java",
                "status": "modified",
                "changes": 42,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ClosureUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -125,7 +125,7 @@ private ClosureUtils() {}\n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @param closure  the closure to call repeatedly, not null\n      * @return the <code>while</code> closure\n-     * @throws IllegalArgumentException if either argument is null\n+     * @throws NullPointerException if either argument is null\n      */\n     public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure) {\n         return WhileClosure.<E>whileClosure(predicate, closure, false);\n@@ -141,7 +141,7 @@ private ClosureUtils() {}\n      * @param closure  the closure to call repeatedly, not null\n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @return the <code>do-while</code> closure\n-     * @throws IllegalArgumentException if either argument is null\n+     * @throws NullPointerException if either argument is null\n      */\n     public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure,\n                                                 final Predicate<? super E> predicate) {\n@@ -158,7 +158,7 @@ private ClosureUtils() {}\n      * @param <E>  the type that the closure acts on\n      * @param methodName  the name of the method\n      * @return the <code>invoker</code> closure\n-     * @throws IllegalArgumentException if the method name is null\n+     * @throws NullPointerException if the method name is null\n      */\n     public static <E> Closure<E> invokerClosure(final String methodName) {\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n@@ -177,7 +177,7 @@ private ClosureUtils() {}\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @return the <code>invoker</code> closure\n-     * @throws IllegalArgumentException if the method name is null\n+     * @throws NullPointerException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      */\n     public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes,\n@@ -195,8 +195,8 @@ private ClosureUtils() {}\n      * @param <E>  the type that the closure acts on\n      * @param closures  an array of closures to chain\n      * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if the closures array is null\n-     * @throws IllegalArgumentException if any closure in the array is null\n+     * @throws NullPointerException if the closures array is null\n+     * @throws NullPointerException if any closure in the array is null\n      */\n     public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {\n         return ChainedClosure.chainedClosure(closures);\n@@ -212,9 +212,9 @@ private ClosureUtils() {}\n      * @param <E>  the type that the closure acts on\n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if the closures collection is null\n+     * @throws NullPointerException if the closures collection is null\n+     * @throws NullPointerException if any closure in the collection is null\n      * @throws IllegalArgumentException if the closures collection is empty\n-     * @throws IllegalArgumentException if any closure in the collection is null\n      */\n     public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures) {\n         return ChainedClosure.chainedClosure(closures);\n@@ -230,8 +230,7 @@ private ClosureUtils() {}\n      * @param predicate  the validating predicate\n      * @param trueClosure  the closure called if the predicate is true\n      * @return the <code>if</code> closure\n-     * @throws IllegalArgumentException if the predicate is null\n-     * @throws IllegalArgumentException if the closure is null\n+     * @throws NullPointerException if the predicate or closure is null\n      * @since 3.2\n      */\n     public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,\n@@ -250,8 +249,7 @@ private ClosureUtils() {}\n      * @param trueClosure  the closure called if the predicate is true\n      * @param falseClosure  the closure called if the predicate is false\n      * @return the <code>switch</code> closure\n-     * @throws IllegalArgumentException if the predicate is null\n-     * @throws IllegalArgumentException if either closure is null\n+     * @throws NullPointerException if the predicate or either closure is null\n      */\n     public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,\n                                            final Closure<? super E> trueClosure,\n@@ -273,9 +271,9 @@ private ClosureUtils() {}\n      * @param predicates  an array of predicates to check, not null\n      * @param closures  an array of closures to call, not null\n      * @return the <code>switch</code> closure\n-     * @throws IllegalArgumentException if the either array is null\n-     * @throws IllegalArgumentException if any element in the arrays is null\n-     * @throws IllegalArgumentException if the arrays are different sizes\n+     * @throws NullPointerException if the either array is null\n+     * @throws NullPointerException if any element in the arrays is null\n+     * @throws IllegalArgumentException if the arrays have different sizes\n      */\n     public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,\n                                                final Closure<? super E>[] closures) {\n@@ -298,8 +296,8 @@ private ClosureUtils() {}\n      * @param closures  an array of closures to call, not null\n      * @param defaultClosure  the default to call if no predicate matches\n      * @return the <code>switch</code> closure\n-     * @throws IllegalArgumentException if the either array is null\n-     * @throws IllegalArgumentException if any element in the arrays is null\n+     * @throws NullPointerException if the either array is null\n+     * @throws NullPointerException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n      */\n     public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,\n@@ -324,9 +322,9 @@ private ClosureUtils() {}\n      * @param <E>  the type that the closure acts on\n      * @param predicatesAndClosures  a map of predicates to closures\n      * @return the <code>switch</code> closure\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any closure in the map is null\n      * @throws IllegalArgumentException if the map is empty\n-     * @throws IllegalArgumentException if any closure in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n      */\n     public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures) {\n@@ -347,14 +345,14 @@ private ClosureUtils() {}\n      * @param <E>  the type that the closure acts on\n      * @param objectsAndClosures  a map of objects to closures\n      * @return the closure\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any closure in the map is null\n      * @throws IllegalArgumentException if the map is empty\n-     * @throws IllegalArgumentException if any closure in the map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures) {\n         if (objectsAndClosures == null) {\n-            throw new IllegalArgumentException(\"The object and closure map must not be null\");\n+            throw new NullPointerException(\"The object and closure map must not be null\");\n         }\n         final Closure<? super E> def = objectsAndClosures.remove(null);\n         final int size = objectsAndClosures.size();",
                "deletions": 22
            },
            {
                "sha": "5012fa0d3dfeb7b352bff91497758b6047440d25",
                "filename": "src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/CollectionUtils.java",
                "status": "modified",
                "changes": 36,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/CollectionUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -545,14 +545,14 @@ public static boolean isEqualCollection(final Collection<?> a, final Collection<\n      * @param b  the second collection, must not be null\n      * @param equator  the Equator used for testing equality\n      * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n-     * @throws IllegalArgumentException if the equator is null\n+     * @throws NullPointerException if the equator is null\n      * @since 4.0\n      */\n     public static <E> boolean isEqualCollection(final Collection<? extends E> a,\n                                                 final Collection<? extends E> b,\n                                                 final Equator<? super E> equator) {\n         if (equator == null) {\n-            throw new IllegalArgumentException(\"equator may not be null\");\n+            throw new NullPointerException(\"Equator must not be null.\");\n         }\n \n         if(a.size() != b.size()) {\n@@ -1509,7 +1509,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param a  the first collection, must not be null\n      * @param b  the second collection, must not be null\n      * @return a new sorted List, containing the elements of Collection a and b\n-     * @throws IllegalArgumentException if either collection is null\n+     * @throws NullPointerException if either collection is null\n      * @since 4.0\n      */\n     public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a,\n@@ -1529,7 +1529,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n      *   they will be removed in the output collection\n      * @return a new sorted List, containing the elements of Collection a and b\n-     * @throws IllegalArgumentException if either collection is null\n+     * @throws NullPointerException if either collection is null\n      * @since 4.0\n      */\n     public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a,\n@@ -1549,7 +1549,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param b  the second collection, must not be null\n      * @param c  the comparator to use for the merge.\n      * @return a new sorted List, containing the elements of Collection a and b\n-     * @throws IllegalArgumentException if either collection or the comparator is null\n+     * @throws NullPointerException if either collection or the comparator is null\n      * @since 4.0\n      */\n     public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n@@ -1570,17 +1570,17 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param includeDuplicates  if {@code true} duplicate elements will be retained, otherwise\n      *   they will be removed in the output collection\n      * @return a new sorted List, containing the elements of Collection a and b\n-     * @throws IllegalArgumentException if either collection or the comparator is null\n+     * @throws NullPointerException if either collection or the comparator is null\n      * @since 4.0\n      */\n     public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b,\n                                       final Comparator<? super O> c, final boolean includeDuplicates) {\n \n         if (a == null || b == null) {\n-            throw new IllegalArgumentException(\"The collections must not be null\");\n+            throw new NullPointerException(\"The collections must not be null\");\n         }\n         if (c == null) {\n-            throw new IllegalArgumentException(\"The comparator must not be null\");\n+            throw new NullPointerException(\"The comparator must not be null\");\n         }\n \n         // if both Iterables are a Collection, we can estimate the size\n@@ -1807,7 +1807,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection to synchronize, must not be null\n      * @return a synchronized collection backed by the given collection\n-     * @throws IllegalArgumentException  if the collection is null\n+     * @throws NullPointerException if the collection is null\n      * @deprecated since 4.1, use {@link java.util.Collections#synchronizedCollection(Collection)} instead\n      */\n     @Deprecated\n@@ -1823,7 +1823,7 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection to make unmodifiable, must not be null\n      * @return an unmodifiable collection backed by the given collection\n-     * @throws IllegalArgumentException  if the collection is null\n+     * @throws NullPointerException if the collection is null\n      * @deprecated since 4.1, use {@link java.util.Collections#unmodifiableCollection(Collection)} instead\n      */\n     @Deprecated\n@@ -1839,11 +1839,11 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * It is important not to use the original collection after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n+     * @param <C> the type of objects in the Collection.\n      * @param collection  the collection to predicate, must not be null\n      * @param predicate  the predicate for the collection, must not be null\n-     * @param <C> the type of objects in the Collection.\n      * @return a predicated collection backed by the given collection\n-     * @throws IllegalArgumentException  if the Collection is null\n+     * @throws NullPointerException if the Collection is null\n      */\n     public static <C> Collection<C> predicatedCollection(final Collection<C> collection,\n                                                          final Predicate<? super C> predicate) {\n@@ -1860,11 +1860,11 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * Existing entries in the specified collection will not be transformed.\n      * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n      *\n-     * @param <E>  the type of object the {@link Collection} contains\n+     * @param <E> the type of object the {@link Collection} contains\n      * @param collection  the collection to predicate, must not be null\n      * @param transformer  the transformer for the collection, must not be null\n      * @return a transformed collection backed by the given collection\n-     * @throws IllegalArgumentException  if the Collection or Transformer is null\n+     * @throws NullPointerException if the Collection or Transformer is null\n      */\n     public static <E> Collection<E> transformingCollection(final Collection<E> collection,\n             final Transformer<? super E, ? extends E> transformer) {\n@@ -1876,11 +1876,15 @@ public static int maxSize(final Collection<? extends Object> coll) {\n      * @param <E> collection type\n      * @param collection to read\n      * @return sole member of collection\n-     * @throws IllegalArgumentException if collection is null/empty or contains more than one element\n+     * @throws NullPointerException if collection is null\n+     * @throws IllegalArgumentException if collection is empty or contains more than one element\n      * @since 4.0\n      */\n     public static <E> E extractSingleton(final Collection<E> collection) {\n-        if (collection == null || collection.size() != 1) {\n+        if (collection == null) {\n+            throw new NullPointerException(\"Collection must not be null.\");\n+        }\n+        if (collection.size() != 1) {\n             throw new IllegalArgumentException(\"Can extract singleton only when collection size == 1\");\n         }\n         return collection.iterator().next();",
                "deletions": 16
            },
            {
                "sha": "bb5887f869164e8d807168d4805976d1ef872bf7",
                "filename": "src/main/java/org/apache/commons/collections4/FactoryUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/FactoryUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/FactoryUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/FactoryUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -115,7 +115,7 @@ private FactoryUtils() {}\n      * @param <T> the type that the factory creates\n      * @param classToInstantiate  the Class to instantiate each time in the factory\n      * @return the <code>reflection</code> factory\n-     * @throws IllegalArgumentException if the classToInstantiate is null\n+     * @throws NullPointerException if the classToInstantiate is null\n      */\n     public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate) {\n         return InstantiateFactory.instantiateFactory(classToInstantiate, null, null);\n@@ -132,7 +132,7 @@ private FactoryUtils() {}\n      * @param paramTypes  parameter types for the constructor, can be null\n      * @param args  the arguments to pass to the constructor, can be null\n      * @return the <code>reflection</code> factory\n-     * @throws IllegalArgumentException if the classToInstantiate is null\n+     * @throws NullPointerException if the classToInstantiate is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      * @throws IllegalArgumentException if the constructor doesn't exist\n      */",
                "deletions": 2
            },
            {
                "sha": "b8e8c4c1aa6f7efe93a2e987c3b48090d9b15bff",
                "filename": "src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/IteratorUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -430,7 +430,8 @@ private IteratorUtils() {}\n      * @param iterator  the iterator to decorate\n      * @param max  the maximum number of elements returned by this iterator\n      * @return a new bounded iterator\n-     * @throws IllegalArgumentException if the iterator is null or max is negative\n+     * @throws NullPointerException if the iterator is null\n+     * @throws IllegalArgumentException if max is negative\n      * @since 4.1\n      */\n     public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max) {\n@@ -450,7 +451,8 @@ private IteratorUtils() {}\n      * @param offset  the index of the first element of the decorated iterator to return\n      * @param max  the maximum number of elements returned by this iterator\n      * @return a new bounded iterator\n-     * @throws IllegalArgumentException if the iterator is null or either offset or max is negative\n+     * @throws NullPointerException if the iterator is null\n+     * @throws IllegalArgumentException if either offset or max is negative\n      * @since 4.1\n      */\n     public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator,",
                "deletions": 2
            },
            {
                "sha": "605bde359fc4f5182636684b52a60cb0cfb946e6",
                "filename": "src/main/java/org/apache/commons/collections4/ListUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/ListUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/ListUtils.java",
                "status": "modified",
                "changes": 76,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/ListUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -80,7 +80,7 @@ private ListUtils() {}\n      * Returns a new list containing all elements that are contained in\n      * both given lists.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list1  the first list\n      * @param list2  the second list\n      * @return  the intersection of those two lists\n@@ -117,10 +117,10 @@ private ListUtils() {}\n      * contains one occurrence, then the returned list will still contain\n      * one occurrence.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list1  the list to subtract from\n      * @param list2  the list to subtract\n-     * @return  a new list containing the results\n+     * @return a new list containing the results\n      * @throws NullPointerException if either list is null\n      */\n     public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2) {\n@@ -138,7 +138,7 @@ private ListUtils() {}\n      * Returns the sum of the given lists.  This is their intersection\n      * subtracted from their union.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list1  the first list\n      * @param list2  the second list\n      * @return  a new list containing the sum of those lists\n@@ -153,10 +153,10 @@ private ListUtils() {}\n      * first list.  The {@link List#addAll(Collection)} operation is\n      * used to append the two given lists into a new list.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list1  the first list\n      * @param list2  the second list\n-     * @return  a new list containing the union of those lists\n+     * @return a new list containing the union of those lists\n      * @throws NullPointerException if either list is null\n      */\n     public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2) {\n@@ -171,14 +171,11 @@ private ListUtils() {}\n      * <p>\n      * A <code>null</code> predicate matches no elements.\n      *\n-     * @param <E>  the element type\n-     * @param inputCollection\n-     *            the collection to get the input from, may not be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n+     * @param <E> the element type\n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param predicate  the predicate to use, may be null\n      * @return the elements matching the predicate (new list)\n-     * @throws NullPointerException\n-     *             if the input list is null\n+     * @throws NullPointerException if the input list is null\n      *\n      * @since 4.0\n      * @see CollectionUtils#select(Iterable, Predicate)\n@@ -192,17 +189,13 @@ private ListUtils() {}\n      * Selects all elements from inputCollection which don't match the given\n      * predicate into an output collection.\n      * <p>\n-     * If the input predicate is <code>null</code>, the result is an empty\n-     * list.\n+     * If the input predicate is <code>null</code>, the result is an empty list.\n      *\n-     * @param <E>  the element type\n-     * @param inputCollection\n-     *            the collection to get the input from, may not be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n+     * @param <E> the element type\n+     * @param inputCollection the collection to get the input from, may not be null\n+     * @param predicate the predicate to use, may be null\n      * @return the elements <b>not</b> matching the predicate (new list)\n-     * @throws NullPointerException\n-     *             if the input collection is null\n+     * @throws NullPointerException if the input collection is null\n      *\n      * @since 4.0\n      * @see CollectionUtils#selectRejected(Iterable, Predicate)\n@@ -378,10 +371,10 @@ public static int hashCodeForList(final Collection<?> list) {\n      *\n      * This method is just a wrapper for {@link Collections#synchronizedList(List)}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list  the list to synchronize, must not be null\n      * @return a synchronized list backed by the given list\n-     * @throws IllegalArgumentException  if the list is null\n+     * @throws NullPointerException if the list is null\n      */\n     public static <E> List<E> synchronizedList(final List<E> list) {\n         return Collections.synchronizedList(list);\n@@ -395,7 +388,7 @@ public static int hashCodeForList(final Collection<?> list) {\n      * @param <E>  the element type\n      * @param list  the list to make unmodifiable, must not be null\n      * @return an unmodifiable list backed by the given list\n-     * @throws IllegalArgumentException  if the list is null\n+     * @throws NullPointerException if the list is null\n      */\n     public static <E> List<E> unmodifiableList(final List<? extends E> list) {\n         return UnmodifiableList.unmodifiableList(list);\n@@ -409,11 +402,11 @@ public static int hashCodeForList(final Collection<?> list) {\n      * It is important not to use the original list after invoking this method,\n      * as it is a backdoor for adding invalid objects.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list  the list to predicate, must not be null\n      * @param predicate  the predicate for the list, must not be null\n      * @return a predicated list backed by the given list\n-     * @throws IllegalArgumentException  if the List or Predicate is null\n+     * @throws NullPointerException if the List or Predicate is null\n      */\n     public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate) {\n         return PredicatedList.predicatedList(list, predicate);\n@@ -433,11 +426,11 @@ public static int hashCodeForList(final Collection<?> list) {\n      * Existing entries in the specified list will not be transformed.\n      * If you want that behaviour, see {@link TransformedList#transformedList}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list  the list to predicate, must not be null\n      * @param transformer  the transformer for the list, must not be null\n      * @return a transformed list backed by the given list\n-     * @throws IllegalArgumentException  if the List or Transformer is null\n+     * @throws NullPointerException if the List or Transformer is null\n      */\n     public static <E> List<E> transformedList(final List<E> list,\n                                               final Transformer<? super E, ? extends E> transformer) {\n@@ -468,11 +461,11 @@ public static int hashCodeForList(final Collection<?> list) {\n      * instance is the fourth element in the list.  The first, second,\n      * and third element are all set to <code>null</code>.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list  the list to make lazy, must not be null\n      * @param factory  the factory for creating new objects, must not be null\n      * @return a lazy list backed by the given list\n-     * @throws IllegalArgumentException  if the List or Factory is null\n+     * @throws NullPointerException if the List or Factory is null\n      */\n     public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory) {\n         return LazyList.lazyList(list, factory);\n@@ -487,7 +480,7 @@ public static int hashCodeForList(final Collection<?> list) {\n      * @param <E>  the element type\n      * @param list  the list whose size to fix, must not be null\n      * @return a fixed-size list backed by that list\n-     * @throws IllegalArgumentException  if the List is null\n+     * @throws NullPointerException  if the List is null\n      */\n     public static <E> List<E> fixedSizeList(final List<E> list) {\n         return FixedSizeList.fixedSizeList(list);\n@@ -525,7 +518,7 @@ public static int hashCodeForList(final Collection<?> list) {\n      * @param a  the first list\n      * @param b  the second list\n      * @return the longest common subsequence\n-     * @throws IllegalArgumentException if either list is {@code null}\n+     * @throws NullPointerException if either list is {@code null}\n      * @since 4.0\n      */\n     public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b) {\n@@ -540,16 +533,16 @@ public static int hashCodeForList(final Collection<?> list) {\n      * @param b  the second list\n      * @param equator  the equator used to test object equality\n      * @return the longest common subsequence\n-     * @throws IllegalArgumentException if either list or the equator is {@code null}\n+     * @throws NullPointerException if either list or the equator is {@code null}\n      * @since 4.0\n      */\n     public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b,\n                                                        final Equator<? super E> equator) {\n         if (a == null || b == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         if (equator == null) {\n-          throw new IllegalArgumentException(\"Equator must not be null\");\n+          throw new NullPointerException(\"Equator must not be null\");\n         }\n \n         final SequencesComparator<E> comparator = new SequencesComparator<E>(a, b, equator);\n@@ -568,12 +561,12 @@ public static int hashCodeForList(final Collection<?> list) {\n      * @param a  the first sequence\n      * @param b  the second sequence\n      * @return the longest common subsequence as {@link String}\n-     * @throws IllegalArgumentException if either sequence is {@code null}\n+     * @throws NullPointerException if either sequence is {@code null}\n      * @since 4.0\n      */\n     public static String longestCommonSubsequence(final CharSequence a, final CharSequence b) {\n         if (a == null || b == null) {\n-            throw new IllegalArgumentException(\"CharSequence must not be null\");\n+            throw new NullPointerException(\"CharSequence must not be null\");\n         }\n         final List<Character> lcs = longestCommonSubsequence(new CharSequenceAsList( a ), new CharSequenceAsList( b ));\n         final StringBuilder sb = new StringBuilder();\n@@ -644,16 +637,17 @@ public int size() {\n      * <p>\n      * Adapted from http://code.google.com/p/guava-libraries/\n      *\n-     * @param <T>  the element type\n+     * @param <T> the element type\n      * @param list  the list to return consecutive sublists of\n      * @param size  the desired size of each sublist (the last may be smaller)\n      * @return a list of consecutive sublists\n-     * @throws IllegalArgumentException if list is {@code null} or size is not strictly positive\n+     * @throws NullPointerException if list is null\n+     * @throws IllegalArgumentException if size is not strictly positive\n      * @since 4.0\n      */\n     public static <T> List<List<T>> partition(final List<T> list, final int size) {\n         if (list == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         if (size <= 0) {\n             throw new IllegalArgumentException(\"Size must be greater than 0\");",
                "deletions": 41
            },
            {
                "sha": "b6786bbcbcdee5e6c313e474c88f5fbf37fdefcf",
                "filename": "src/main/java/org/apache/commons/collections4/MapUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/MapUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/MapUtils.java",
                "status": "modified",
                "changes": 34,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/MapUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -1262,7 +1262,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the map to make unmodifiable, must not be null\n      * @return an unmodifiable map backed by the given map\n-     * @throws IllegalArgumentException  if the map is null\n+     * @throws NullPointerException  if the map is null\n      */\n     public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map) {\n         return UnmodifiableMap.unmodifiableMap(map);\n@@ -1283,7 +1283,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param keyPred  the predicate for keys, null means no check\n      * @param valuePred  the predicate for values, null means no check\n      * @return a predicated map backed by the given map\n-     * @throws IllegalArgumentException  if the Map is null\n+     * @throws NullPointerException  if the Map is null\n      */\n     public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred,\n                                                          final Predicate<? super V> valuePred) {\n@@ -1311,7 +1311,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n-     * @throws IllegalArgumentException  if the Map is null\n+     * @throws NullPointerException  if the Map is null\n      */\n     public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,\n@@ -1329,7 +1329,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the map whose size to fix, must not be null\n      * @return a fixed-size map backed by that map\n-     * @throws IllegalArgumentException  if the Map is null\n+     * @throws NullPointerException  if the Map is null\n      */\n     public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map) {\n         return FixedSizeMap.fixedSizeMap(map);\n@@ -1363,7 +1363,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param map  the map to make lazy, must not be null\n      * @param factory  the factory for creating new objects, must not be null\n      * @return a lazy map backed by the given map\n-     * @throws IllegalArgumentException  if the Map or Factory is null\n+     * @throws NullPointerException  if the Map or Factory is null\n      */\n     public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory) {\n         return LazyMap.lazyMap(map, factory);\n@@ -1404,7 +1404,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param map  the map to make lazy, must not be null\n      * @param transformerFactory  the factory for creating new objects, must not be null\n      * @return a lazy map backed by the given map\n-     * @throws IllegalArgumentException  if the Map or Transformer is null\n+     * @throws NullPointerException  if the Map or Transformer is null\n      */\n     public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map,\n             final Transformer<? super K, ? extends V> transformerFactory) {\n@@ -1422,7 +1422,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the map to order, must not be null\n      * @return an ordered map backed by the given map\n-     * @throws IllegalArgumentException  if the Map is null\n+     * @throws NullPointerException  if the Map is null\n      */\n     public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map) {\n         return ListOrderedMap.listOrderedMap(map);\n@@ -1512,7 +1512,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the map to synchronize, must not be null\n      * @return a synchronized map backed by the given map\n-     * @throws IllegalArgumentException  if the map is null\n+     * @throws NullPointerException  if the map is null\n      */\n     public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map) {\n         return Collections.synchronizedSortedMap(map);\n@@ -1527,7 +1527,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the sorted map to make unmodifiable, must not be null\n      * @return an unmodifiable map backed by the given map\n-     * @throws IllegalArgumentException  if the map is null\n+     * @throws NullPointerException  if the map is null\n      */\n     public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map) {\n         return UnmodifiableSortedMap.unmodifiableSortedMap(map);\n@@ -1548,7 +1548,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param keyPred  the predicate for keys, null means no check\n      * @param valuePred  the predicate for values, null means no check\n      * @return a predicated map backed by the given map\n-     * @throws IllegalArgumentException  if the SortedMap is null\n+     * @throws NullPointerException  if the SortedMap is null\n      */\n     public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map,\n             final Predicate<? super K> keyPred, final Predicate<? super V> valuePred) {\n@@ -1576,7 +1576,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n-     * @throws IllegalArgumentException  if the SortedMap is null\n+     * @throws NullPointerException  if the SortedMap is null\n      */\n     public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,\n@@ -1594,7 +1594,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map  the map whose size to fix, must not be null\n      * @return a fixed-size map backed by that map\n-     * @throws IllegalArgumentException  if the SortedMap is null\n+     * @throws NullPointerException  if the SortedMap is null\n      */\n     public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map) {\n         return FixedSizeSortedMap.fixedSizeSortedMap(map);\n@@ -1629,7 +1629,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param map  the map to make lazy, must not be null\n      * @param factory  the factory for creating new objects, must not be null\n      * @return a lazy map backed by the given map\n-     * @throws IllegalArgumentException  if the SortedMap or Factory is null\n+     * @throws NullPointerException  if the SortedMap or Factory is null\n      */\n     public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory) {\n         return LazySortedMap.lazySortedMap(map, factory);\n@@ -1670,7 +1670,7 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param map  the map to make lazy, must not be null\n      * @param transformerFactory  the factory for creating new objects, must not be null\n      * @return a lazy map backed by the given map\n-     * @throws IllegalArgumentException  if the Map or Transformer is null\n+     * @throws NullPointerException  if the Map or Transformer is null\n      */\n     public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map,\n             final Transformer<? super K, ? extends V> transformerFactory) {\n@@ -1762,11 +1762,12 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param map to wrap if necessary.\n      * @return IterableMap<K, V>\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null\");\n         }\n         return map instanceof IterableMap ? (IterableMap<K, V>) map : new AbstractMapDecorator<K, V>(map) {};\n     }\n@@ -1778,11 +1779,12 @@ public static boolean isNotEmpty(final Map<?,?> map) {\n      * @param <V>  the value type\n      * @param sortedMap to wrap if necessary\n      * @return {@link IterableSortedMap}<K, V>\n+     * @throws NullPointerException if sortedMap is null\n      * @since 4.0\n      */\n     public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap) {\n         if (sortedMap == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null\");\n         }\n         return sortedMap instanceof IterableSortedMap ? (IterableSortedMap<K, V>) sortedMap :\n                                                         new AbstractSortedMapDecorator<K, V>(sortedMap) {};",
                "deletions": 16
            },
            {
                "sha": "ac2d331308ac8a4a8c488d588aa99699f9779756",
                "filename": "src/main/java/org/apache/commons/collections4/PredicateUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/PredicateUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/PredicateUtils.java",
                "status": "modified",
                "changes": 58,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/PredicateUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -168,7 +168,7 @@ private PredicateUtils() {}\n      *\n      * @param type  the type to check for, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws NullPointerException if the class is null\n      * @see InstanceofPredicate\n      */\n     public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n@@ -204,7 +204,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the methodName is null.\n+     * @throws NullPointerException if the methodName is null.\n      * @see InvokerTransformer\n      * @see TransformerPredicate\n      */\n@@ -228,7 +228,7 @@ private PredicateUtils() {}\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @return the predicate\n-     * @throws IllegalArgumentException if the method name is null\n+     * @throws NullPointerException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      * @see InvokerTransformer\n      * @see TransformerPredicate\n@@ -250,7 +250,7 @@ private PredicateUtils() {}\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>and</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      * @see AndPredicate\n      */\n     public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n@@ -266,8 +266,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      * @see AllPredicate\n      */\n     public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n@@ -282,8 +282,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @throws NullPointerException if the predicates collection is null\n+     * @throws NullPointerException if any predicate in the collection is null\n      * @see AllPredicate\n      */\n     public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n@@ -298,7 +298,7 @@ private PredicateUtils() {}\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>or</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      * @see OrPredicate\n      */\n     public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n@@ -314,8 +314,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      * @see AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n@@ -330,8 +330,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n-     * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @throws NullPointerException if the predicates collection is null\n+     * @throws NullPointerException if any predicate in the collection is null\n      * @see AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n@@ -346,7 +346,7 @@ private PredicateUtils() {}\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>either</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      * @see OnePredicate\n      */\n     public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n@@ -364,8 +364,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      * @see OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n@@ -380,8 +380,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n-     * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @throws NullPointerException if the predicates collection is null\n+     * @throws NullPointerException if any predicate in the collection is null\n      * @see OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n@@ -396,7 +396,7 @@ private PredicateUtils() {}\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>neither</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      * @see NonePredicate\n      */\n     public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n@@ -414,8 +414,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      * @see NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n@@ -430,8 +430,8 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n-     * @throws IllegalArgumentException if the predicates collection is null\n-     * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @throws NullPointerException if the predicates collection is null\n+     * @throws NullPointerException if any predicate in the collection is null\n      * @see NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n@@ -445,7 +445,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicate  the predicate to not\n      * @return the <code>not</code> predicate\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      * @see NotPredicate\n      */\n     public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n@@ -463,7 +463,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param transformer  the transformer to wrap, may not be null\n      * @return the transformer wrapping predicate\n-     * @throws IllegalArgumentException if the transformer is null\n+     * @throws NullPointerException if the transformer is null\n      * @see TransformerPredicate\n      */\n     public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n@@ -481,7 +481,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n+     * @throws NullPointerException if the predicate is null.\n      * @see NullIsExceptionPredicate\n      */\n     public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n@@ -496,7 +496,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n+     * @throws NullPointerException if the predicate is null.\n      * @see NullIsFalsePredicate\n      */\n     public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n@@ -511,7 +511,7 @@ private PredicateUtils() {}\n      * @param <T>  the type that the predicate queries\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n+     * @throws NullPointerException if the predicate is null.\n      * @see NullIsTruePredicate\n      */\n     public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n@@ -528,7 +528,7 @@ private PredicateUtils() {}\n      * @param transformer  the transformer to call first\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n-     * @throws IllegalArgumentException if the transformer or the predicate is null\n+     * @throws NullPointerException if the transformer or the predicate is null\n      * @see TransformedPredicate\n      * @since 3.1\n      */",
                "deletions": 29
            },
            {
                "sha": "d317708540135a086dbca2b58558c1b81d2546db",
                "filename": "src/main/java/org/apache/commons/collections4/QueueUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/QueueUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/QueueUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/QueueUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,7 +50,7 @@ private QueueUtils() {}\n      * @param <E> the type of the elements in the queue\n      * @param queue  the queue to make unmodifiable, must not be null\n      * @return an unmodifiable queue backed by that queue\n-     * @throws IllegalArgumentException  if the Queue is null\n+     * @throws NullPointerException if the queue is null\n      */\n     public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {\n         return UnmodifiableQueue.unmodifiableQueue(queue);\n@@ -68,7 +68,7 @@ private QueueUtils() {}\n      * @param queue  the queue to predicate, must not be null\n      * @param predicate  the predicate used to evaluate new elements, must not be null\n      * @return a predicated queue\n-     * @throws IllegalArgumentException  if the Queue or Predicate is null\n+     * @throws NullPointerException if the queue or predicate is null\n      */\n     public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate) {\n         return PredicatedQueue.predicatedQueue(queue, predicate);\n@@ -88,7 +88,7 @@ private QueueUtils() {}\n      * @param queue  the queue to predicate, must not be null\n      * @param transformer  the transformer for the queue, must not be null\n      * @return a transformed queue backed by the given queue\n-     * @throws IllegalArgumentException  if the Queue or Transformer is null\n+     * @throws NullPointerException if the queue or transformer is null\n      */\n     public static <E> Queue<E> transformingQueue(final Queue<E> queue,\n                                                  final Transformer<? super E, ? extends E> transformer) {",
                "deletions": 3
            },
            {
                "sha": "839c9425018fbb01a9ce2c15a254e41008e10b09",
                "filename": "src/main/java/org/apache/commons/collections4/SetUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/SetUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/SetUtils.java",
                "status": "modified",
                "changes": 24,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/SetUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -202,7 +202,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n-     * @throws IllegalArgumentException  if the set is null\n+     * @throws NullPointerException if the set is null\n      */\n     public static <E> Set<E> synchronizedSet(final Set<E> set) {\n         return Collections.synchronizedSet(set);\n@@ -216,7 +216,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n-     * @throws IllegalArgumentException  if the set is null\n+     * @throws NullPointerException if the set is null\n      */\n     public static <E> Set<E> unmodifiableSet(final Set<? extends E> set) {\n         return UnmodifiableSet.unmodifiableSet(set);\n@@ -234,7 +234,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the set to predicate, must not be null\n      * @param predicate  the predicate for the set, must not be null\n      * @return a predicated set backed by the given set\n-     * @throws IllegalArgumentException  if the Set or Predicate is null\n+     * @throws NullPointerException if the set or predicate is null\n      */\n     public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate) {\n         return PredicatedSet.predicatedSet(set, predicate);\n@@ -254,7 +254,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n-     * @throws IllegalArgumentException  if the Set or Transformer is null\n+     * @throws NullPointerException if the set or transformer is null\n      */\n     public static <E> Set<E> transformedSet(final Set<E> set,\n                                             final Transformer<? super E, ? extends E> transformer) {\n@@ -271,7 +271,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the set to order, must not be null\n      * @return an ordered set backed by the given set\n-     * @throws IllegalArgumentException  if the Set is null\n+     * @throws NullPointerException if the set is null\n      */\n     public static <E> Set<E> orderedSet(final Set<E> set) {\n         return ListOrderedSet.listOrderedSet(set);\n@@ -300,7 +300,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the sorted set to synchronize, must not be null\n      * @return a synchronized set backed by the given set\n-     * @throws IllegalArgumentException  if the set is null\n+     * @throws NullPointerException if the set is null\n      */\n     public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set) {\n         return Collections.synchronizedSortedSet(set);\n@@ -314,7 +314,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the sorted set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n-     * @throws IllegalArgumentException  if the set is null\n+     * @throws NullPointerException if the set is null\n      */\n     public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set) {\n         return UnmodifiableSortedSet.unmodifiableSortedSet(set);\n@@ -332,7 +332,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the sorted set to predicate, must not be null\n      * @param predicate  the predicate for the sorted set, must not be null\n      * @return a predicated sorted set backed by the given sorted set\n-     * @throws IllegalArgumentException  if the Set or Predicate is null\n+     * @throws NullPointerException if the set or predicate is null\n      */\n     public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set,\n                                                        final Predicate<? super E> predicate) {\n@@ -353,7 +353,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n-     * @throws IllegalArgumentException  if the Set or Transformer is null\n+     * @throws NullPointerException if the set or transformer is null\n      */\n     public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set,\n                                                         final Transformer<? super E, ? extends E> transformer) {\n@@ -370,7 +370,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param <E> the element type\n      * @param set  the navigable set to make unmodifiable, must not be null\n      * @return an unmodifiable set backed by the given set\n-     * @throws IllegalArgumentException  if the set is null\n+     * @throws NullPointerException if the set is null\n      * @since 4.1\n      */\n     public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set) {\n@@ -389,7 +389,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the navigable set to predicate, must not be null\n      * @param predicate  the predicate for the navigable set, must not be null\n      * @return a predicated navigable set backed by the given navigable set\n-     * @throws IllegalArgumentException  if the Set or Predicate is null\n+     * @throws NullPointerException if the set or predicate is null\n      * @since 4.1\n      */\n     public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set,\n@@ -411,7 +411,7 @@ public static boolean isEqualSet(final Collection<?> set1, final Collection<?> s\n      * @param set  the navigable set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n-     * @throws IllegalArgumentException  if the Set or Transformer is null\n+     * @throws NullPointerException if the set or transformer is null\n      * @since 4.1\n      */\n     public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set,",
                "deletions": 12
            },
            {
                "sha": "7b27ed631c3af69ce4aaea70ba44c1944657322f",
                "filename": "src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/SplitMapUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -20,11 +20,11 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\n import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;\n import org.apache.commons.collections4.map.UnmodifiableEntrySet;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Utilities for working with \"split maps:\" objects that implement {@link Put}\n@@ -205,15 +205,17 @@ public int size() {\n      * @param <V> the value type\n      * @param get to wrap, must not be null\n      * @return {@link IterableMap}\n+     * @throws NullPointerException if the argument is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get) {\n         if (get == null) {\n-            throw new IllegalArgumentException(\"Get must not be null\");\n+            throw new NullPointerException(\"Get must not be null\");\n         }\n         if (get instanceof Map) {\n-            return get instanceof IterableMap ? ((IterableMap<K, V>) get) : MapUtils\n-                    .iterableMap((Map<K, V>) get);\n+            return get instanceof IterableMap ?\n+                    ((IterableMap<K, V>) get) :\n+                    MapUtils.iterableMap((Map<K, V>) get);\n         }\n         return new WrappedGet<K, V>(get);\n     }\n@@ -229,11 +231,12 @@ public int size() {\n      * @param <V> the element type\n      * @param put to wrap, must not be null\n      * @return {@link Map}\n+     * @throws NullPointerException if the argument is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> Map<K, V> writableMap(final Put<K, V> put) {\n         if (put == null) {\n-            throw new IllegalArgumentException(\"Put must not be null\");\n+            throw new NullPointerException(\"Put must not be null\");\n         }\n         if (put instanceof Map) {\n             return (Map<K, V>) put;",
                "deletions": 5
            },
            {
                "sha": "05a94f5ef3cee444932bf9f27a440ce3916f7b0f",
                "filename": "src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/TransformerUtils.java",
                "status": "modified",
                "changes": 43,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/TransformerUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -144,7 +144,7 @@ private TransformerUtils() {}\n      * @param <T>  the input/output type\n      * @param closure  the closure to run each time in the transformer, not null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the closure is null\n+     * @throws NullPointerException if the closure is null\n      * @see ClosureTransformer\n      */\n     public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n@@ -158,7 +158,7 @@ private TransformerUtils() {}\n      * @param <T>  the input type\n      * @param predicate  the predicate to run each time in the transformer, not null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      * @see PredicateTransformer\n      */\n     public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n@@ -173,7 +173,7 @@ private TransformerUtils() {}\n      * @param <O>  the output type\n      * @param factory  the factory to run each time in the transformer, not null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the factory is null\n+     * @throws NullPointerException if the factory is null\n      * @see FactoryTransformer\n      */\n     public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n@@ -187,7 +187,7 @@ private TransformerUtils() {}\n      * @param <T>  the input/output type\n      * @param transformers  an array of transformers to chain\n      * @return the transformer\n-     * @throws IllegalArgumentException if the transformers array or any of the transformers is null\n+     * @throws NullPointerException if the transformers array or any of the transformers is null\n      * @see ChainedTransformer\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n@@ -203,7 +203,7 @@ private TransformerUtils() {}\n      * @param <T>  the input/output type\n      * @param transformers  a collection of transformers to chain\n      * @return the transformer\n-     * @throws IllegalArgumentException if the transformers collection or any of the transformers is null\n+     * @throws NullPointerException if the transformers collection or any of the transformers is null\n      * @see ChainedTransformer\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n@@ -219,7 +219,7 @@ private TransformerUtils() {}\n      * @param predicate  the predicate to switch on\n      * @param trueTransformer  the transformer called if the predicate is true\n      * @return the transformer\n-     * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @throws NullPointerException if either the predicate or transformer is null\n      * @see IfTransformer\n      * @since 4.1\n      */\n@@ -238,7 +238,7 @@ private TransformerUtils() {}\n      * @param trueTransformer  the transformer called if the predicate is true\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n-     * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @throws NullPointerException if either the predicate or transformer is null\n      * @see IfTransformer\n      * @since 4.1\n      */\n@@ -258,7 +258,7 @@ private TransformerUtils() {}\n      * @param trueTransformer  the transformer called if the predicate is true\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n-     * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @throws NullPointerException if either the predicate or transformer is null\n      * @see SwitchTransformer\n      * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n      */\n@@ -282,9 +282,9 @@ private TransformerUtils() {}\n      * @param predicates  an array of predicates to check\n      * @param transformers  an array of transformers to call\n      * @return the transformer\n-     * @throws IllegalArgumentException if the either array is null or empty\n-     * @throws IllegalArgumentException if any element in the arrays is null\n-     * @throws IllegalArgumentException if the arrays are different sizes\n+     * @throws NullPointerException if the either array is null\n+     * @throws NullPointerException if any element in the arrays is null\n+     * @throws IllegalArgumentException if the arrays have different sizes\n      * @see SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n@@ -305,9 +305,9 @@ private TransformerUtils() {}\n      * @param transformers  an array of transformers to call\n      * @param defaultTransformer  the default to call if no predicate matches, null means return null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the either array is null or empty\n-     * @throws IllegalArgumentException if any element in the arrays is null\n-     * @throws IllegalArgumentException if the arrays are different sizes\n+     * @throws NullPointerException if the either array is null\n+     * @throws NullPointerException if any element in the arrays is null\n+     * @throws IllegalArgumentException if the arrays have different sizes\n      * @see SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n@@ -332,8 +332,8 @@ private TransformerUtils() {}\n      * @param <O>  the output type\n      * @param predicatesAndTransformers  a map of predicates to transformers\n      * @return the transformer\n-     * @throws IllegalArgumentException if the map is null or empty\n-     * @throws IllegalArgumentException if any transformer in the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any transformer in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n      * @see SwitchTransformer\n      */\n@@ -355,16 +355,16 @@ private TransformerUtils() {}\n      * @param <O>  the output type\n      * @param objectsAndTransformers  a map of objects to transformers\n      * @return the transformer\n-     * @throws IllegalArgumentException if the map is null or empty\n-     * @throws IllegalArgumentException if any transformer in the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any transformer in the map is null\n      * @see SwitchTransformer\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchMapTransformer(\n             final Map<I, Transformer<I, O>> objectsAndTransformers) {\n \n         if (objectsAndTransformers == null) {\n-            throw new IllegalArgumentException(\"The object and transformer map must not be null\");\n+            throw new NullPointerException(\"The object and transformer map must not be null\");\n         }\n         final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n         final int size = objectsAndTransformers.size();\n@@ -434,7 +434,7 @@ private TransformerUtils() {}\n      * @param <O>  the output type\n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the methodName is null.\n+     * @throws NullPointerException if the methodName is null.\n      * @see InvokerTransformer\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n@@ -452,7 +452,8 @@ private TransformerUtils() {}\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @return the transformer\n-     * @throws IllegalArgumentException if the method name is null or the paramTypes and args don't match\n+     * @throws NullPointerException if the method name is null\n+     * @throws IllegalArgumentException if the paramTypes and args don't match\n      * @see InvokerTransformer\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,",
                "deletions": 21
            },
            {
                "sha": "6401844bd5f431285b43f964124e5aec132cee91",
                "filename": "src/main/java/org/apache/commons/collections4/TrieUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/TrieUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/TrieUtils.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/TrieUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -38,6 +38,7 @@ private TrieUtils() {}\n      * @param <V>  the value type\n      * @param trie  the trie to make unmodifiable, must not be null\n      * @return an unmodifiable trie backed by the given trie\n+     * @throws NullPointerException if trie is null\n      *\n      * @see java.util.Collections#unmodifiableMap(java.util.Map)\n      */",
                "deletions": 0
            },
            {
                "sha": "c38a77e3500bcd0c731a9da339eae776a90a18f2",
                "filename": "src/main/java/org/apache/commons/collections4/bag/AbstractBagDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/AbstractBagDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/AbstractBagDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/AbstractBagDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -47,7 +47,7 @@ protected AbstractBagDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if bag is null\n      */\n     protected AbstractBagDecorator(final Bag<E> bag) {\n         super(bag);",
                "deletions": 1
            },
            {
                "sha": "7b01603141e08ac2e9f6a5503fb05cb53a354b21",
                "filename": "src/main/java/org/apache/commons/collections4/bag/AbstractSortedBagDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/AbstractSortedBagDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/AbstractSortedBagDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/AbstractSortedBagDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -46,7 +46,7 @@ protected AbstractSortedBagDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if bag is null\n      */\n     protected AbstractSortedBagDecorator(final SortedBag<E> bag) {\n         super(bag);",
                "deletions": 1
            },
            {
                "sha": "ceb7c516f3ab78ede04edad95bdbbdb621a06862",
                "filename": "src/main/java/org/apache/commons/collections4/bag/CollectionBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return a Bag that complies to the Collection contract\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     public static <E> Bag<E> collectionBag(final Bag<E> bag) {\n         return new CollectionBag<E>(bag);\n@@ -60,7 +60,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     public CollectionBag(final Bag<E> bag) {\n         super(bag);",
                "deletions": 2
            },
            {
                "sha": "1b2c8ff6e66ebc0e085552acb9a969482e6530e4",
                "filename": "src/main/java/org/apache/commons/collections4/bag/CollectionSortedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/CollectionSortedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/CollectionSortedBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/CollectionSortedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -41,7 +41,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the sorted bag to decorate, must not be null\n      * @return a SortedBag that complies to the Collection contract\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag) {\n         return new CollectionSortedBag<E>(bag);\n@@ -52,7 +52,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the sorted bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     public CollectionSortedBag(final SortedBag<E> bag) {\n         super(bag);",
                "deletions": 2
            },
            {
                "sha": "46501fb7b8c4cee32240625f97ce0006dbc7844c",
                "filename": "src/main/java/org/apache/commons/collections4/bag/PredicatedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/PredicatedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/PredicatedBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/PredicatedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -55,7 +55,7 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated Bag\n-     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws NullPointerException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      * @since 4.0\n      */\n@@ -72,7 +72,7 @@\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws NullPointerException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     protected PredicatedBag(final Bag<E> bag, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "404ea774406bfc56c39cdafee45eb0d6aca818df",
                "filename": "src/main/java/org/apache/commons/collections4/bag/PredicatedSortedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/PredicatedSortedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/PredicatedSortedBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/PredicatedSortedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -54,7 +54,7 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated SortedBag\n-     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws NullPointerException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      * @since 4.0\n      */\n@@ -71,7 +71,7 @@\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws NullPointerException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     protected PredicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "07a7ab9b0764121e2a1bd54b6f925101be0e75fc",
                "filename": "src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -44,7 +44,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return a new synchronized Bag\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      * @since 4.0\n      */\n     public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag) {\n@@ -56,7 +56,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     protected SynchronizedBag(final Bag<E> bag) {\n         super(bag);\n@@ -67,7 +67,7 @@ protected SynchronizedBag(final Bag<E> bag) {\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param lock  the lock to use, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag or lock is null\n      */\n     protected SynchronizedBag(final Bag<E> bag, final Object lock) {\n         super(bag, lock);",
                "deletions": 3
            },
            {
                "sha": "5f8e803cf39ce79dace226598e4f72bdb3d0d5c0",
                "filename": "src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -44,7 +44,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return a new synchronized SortedBag\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      * @since 4.0\n      */\n     public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag) {\n@@ -56,7 +56,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     protected SynchronizedSortedBag(final SortedBag<E> bag) {\n         super(bag);\n@@ -67,7 +67,7 @@ protected SynchronizedSortedBag(final SortedBag<E> bag) {\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param lock  the lock to use, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag or lock is null\n      */\n     protected SynchronizedSortedBag(final Bag<E> bag, final Object lock) {\n         super(bag, lock);",
                "deletions": 3
            },
            {
                "sha": "1cb603a7bcc94e96bee350e018cc575e8eaadf1c",
                "filename": "src/main/java/org/apache/commons/collections4/bag/TransformedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -51,7 +51,7 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      * @since 4.0\n      */\n     public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n@@ -70,12 +70,12 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      * @since 4.0\n      */\n     public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n         final TransformedBag<E> decorated = new TransformedBag<E>(bag, transformer);\n-        if (transformer != null && bag != null && bag.size() > 0) {\n+        if (bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // Bag is of type E\n             final E[] values = (E[]) bag.toArray(); // NOPMD - false positive for generics\n             bag.clear();\n@@ -95,7 +95,7 @@\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      */\n     protected TransformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n         super(bag, transformer);",
                "deletions": 4
            },
            {
                "sha": "14ee634cb6f09b3e8e0076ad7ece6b0312425f49",
                "filename": "src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag,\n@@ -69,14 +69,14 @@\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag,\n             final Transformer<? super E, ? extends E> transformer) {\n \n         final TransformedSortedBag<E>  decorated = new TransformedSortedBag<E>(bag, transformer);\n-        if (transformer != null && bag != null && bag.size() > 0) {\n+        if (bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // bag is type E\n             final E[] values = (E[]) bag.toArray(); // NOPMD - false positive for generics\n             bag.clear();\n@@ -96,7 +96,7 @@\n      *\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if bag or transformer is null\n+     * @throws NullPointerException if bag or transformer is null\n      */\n     protected TransformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer) {\n         super(bag, transformer);",
                "deletions": 4
            },
            {
                "sha": "b01043d6802b86c6e99da151ca4cac3b277aaac8",
                "filename": "src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -52,7 +52,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return an unmodifiable Bag\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      * @since 4.0\n      */\n     public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag) {\n@@ -69,7 +69,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableBag(final Bag<? extends E> bag) {",
                "deletions": 2
            },
            {
                "sha": "14399883cd17787884dbed44d8e7735174813cbf",
                "filename": "src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -52,7 +52,7 @@\n      * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return an unmodifiable SortedBag\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      * @since 4.0\n      */\n     public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag) {\n@@ -67,7 +67,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param bag  the bag to decorate, must not be null\n-     * @throws IllegalArgumentException if bag is null\n+     * @throws NullPointerException if bag is null\n      */\n     private UnmodifiableSortedBag(final SortedBag<E> bag) {\n         super(bag);",
                "deletions": 2
            },
            {
                "sha": "fad9f058d8d078265c76abaf650e87f38ce99411",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -44,7 +44,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     protected AbstractBidiMapDecorator(final BidiMap<K, V> map) {\n         super(map);",
                "deletions": 1
            },
            {
                "sha": "7572e1ed0bac710659ef91145e11f56408fff0f8",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -42,7 +42,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     protected AbstractOrderedBidiMapDecorator(final OrderedBidiMap<K, V> map) {\n         super(map);",
                "deletions": 1
            },
            {
                "sha": "70275eafc1c774d8a5f9e6e60f8f03cdd90d3e5e",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -43,7 +43,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     public AbstractSortedBidiMapDecorator(final SortedBidiMap<K, V> map) {\n         super(map);",
                "deletions": 1
            },
            {
                "sha": "0b59dd7dd562f9a322284d971330b9c981841944",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <V> the value type\n      * @param map  the map to decorate, must not be null\n      * @return an unmodifiable BidiMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map) {\n@@ -66,7 +66,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map) {",
                "deletions": 2
            },
            {
                "sha": "73d4fd9774600d3b227fc8e4d5e1facb48e7502d",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <V> the value type\n      * @param map  the map to decorate, must not be null\n      * @return an unmodifiable OrderedBidiMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(\n@@ -67,7 +67,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map) {",
                "deletions": 2
            },
            {
                "sha": "398a2cfd729f35beb33099919306073456b0cba6",
                "filename": "src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -51,7 +51,7 @@\n      * @param <V> the value type\n      * @param map  the map to decorate, must not be null\n      * @return an unmodifiable SortedBidiMap\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map) {\n@@ -68,7 +68,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map) {",
                "deletions": 2
            },
            {
                "sha": "4d2dede400f05b44043d1f5df69ecc40c5fac341",
                "filename": "src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -73,11 +73,11 @@ protected AbstractCollectionDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param coll  the collection to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     protected AbstractCollectionDecorator(final Collection<E> coll) {\n         if (coll == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n+            throw new NullPointerException(\"Collection must not be null.\");\n         }\n         this.collection = coll;\n     }",
                "deletions": 2
            },
            {
                "sha": "b608dd7529b92c0ba636f6792843d4abdcc8e5d7",
                "filename": "src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
                "status": "modified",
                "changes": 30,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -94,7 +94,7 @@\n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated collection\n-     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws NullPointerException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      * @since 4.0\n      */\n@@ -112,13 +112,13 @@\n      *\n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws NullPointerException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n     protected PredicatedCollection(final Collection<E> coll, final Predicate<? super E> predicate) {\n         super(coll);\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null.\");\n         }\n         this.predicate = predicate;\n         for (final E item : coll) {\n@@ -216,11 +216,11 @@ public boolean addAll(final Collection<? extends E> coll) {\n          * Constructs a PredicatedCollectionBuilder with the specified Predicate.\n          *\n          * @param predicate  the predicate to use\n-         * @throws IllegalArgumentException if predicate is null\n+         * @throws NullPointerException if predicate is null\n          */\n         public Builder(final Predicate<? super E> predicate) {\n             if (predicate == null) {\n-                throw new IllegalArgumentException(\"Predicate must not be null\");\n+                throw new NullPointerException(\"Predicate must not be null\");\n             }\n             this.predicate = predicate;\n         }\n@@ -282,11 +282,12 @@ public Builder(final Predicate<? super E> predicate) {\n          *\n          * @param list  the List to decorate, must not be null\n          * @return the decorated list.\n-         * @throws IllegalArgumentException if list is null or contains invalid elements\n+         * @throws NullPointerException if list is null\n+         * @throws IllegalArgumentException if list contains invalid elements\n          */\n         public List<E> createPredicatedList(final List<E> list) {\n             if (list == null) {\n-                throw new IllegalArgumentException(\"list must not be null\");\n+                throw new NullPointerException(\"List must not be null.\");\n             }\n             final List<E> predicatedList = PredicatedList.predicatedList(list, predicate);\n             predicatedList.addAll(accepted);\n@@ -314,11 +315,12 @@ public Builder(final Predicate<? super E> predicate) {\n          *\n          * @param set  the set to decorate, must not be null\n          * @return the decorated set.\n-         * @throws IllegalArgumentException if set is null or contains invalid elements\n+         * @throws NullPointerException if set is null\n+         * @throws IllegalArgumentException if set contains invalid elements\n          */\n         public Set<E> createPredicatedSet(final Set<E> set) {\n             if (set == null) {\n-                throw new IllegalArgumentException(\"set must not be null\");\n+                throw new NullPointerException(\"Set must not be null.\");\n             }\n             final PredicatedSet<E> predicatedSet = PredicatedSet.predicatedSet(set, predicate);\n             predicatedSet.addAll(accepted);\n@@ -346,11 +348,12 @@ public Builder(final Predicate<? super E> predicate) {\n          *\n          * @param bag  the bag to decorate, must not be null\n          * @return the decorated bag.\n-         * @throws IllegalArgumentException if bag is null or contains invalid elements\n+         * @throws NullPointerException if bag is null\n+         * @throws IllegalArgumentException if bag contains invalid elements\n          */\n         public Bag<E> createPredicatedBag(final Bag<E> bag) {\n             if (bag == null) {\n-                throw new IllegalArgumentException(\"bag must not be null\");\n+                throw new NullPointerException(\"Bag must not be null.\");\n             }\n             final PredicatedBag<E> predicatedBag = PredicatedBag.predicatedBag(bag, predicate);\n             predicatedBag.addAll(accepted);\n@@ -378,11 +381,12 @@ public Builder(final Predicate<? super E> predicate) {\n          *\n          * @param queue  the queue to decorate, must not be null\n          * @return the decorated queue.\n-         * @throws IllegalArgumentException if queue is null or contains invalid elements\n+         * @throws NullPointerException if queue is null\n+         * @throws IllegalArgumentException if queue contains invalid elements\n          */\n         public Queue<E> createPredicatedQueue(final Queue<E> queue) {\n             if (queue == null) {\n-                throw new IllegalArgumentException(\"queue must not be null\");\n+                throw new NullPointerException(\"queue must not be null\");\n             }\n             final PredicatedQueue<E> predicatedQueue = PredicatedQueue.predicatedQueue(queue, predicate);\n             predicatedQueue.addAll(accepted);",
                "deletions": 13
            },
            {
                "sha": "e09ea8bbfed91e60721c08e23c6c4610922e6117",
                "filename": "src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -54,7 +54,7 @@\n      * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @return a new synchronized collection\n-     * @throws IllegalArgumentException if collection is null\n+     * @throws NullPointerException if collection is null\n      * @since 4.0\n      */\n     public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll) {\n@@ -66,11 +66,11 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param collection  the collection to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     protected SynchronizedCollection(final Collection<E> collection) {\n         if (collection == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n+            throw new NullPointerException(\"Collection must not be null.\");\n         }\n         this.collection = collection;\n         this.lock = this;\n@@ -81,11 +81,14 @@ protected SynchronizedCollection(final Collection<E> collection) {\n      *\n      * @param collection  the collection to decorate, must not be null\n      * @param lock  the lock object to use, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection or lock is null\n      */\n     protected SynchronizedCollection(final Collection<E> collection, final Object lock) {\n         if (collection == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n+            throw new NullPointerException(\"Collection must not be null.\");\n+        }\n+        if (lock == null) {\n+            throw new NullPointerException(\"Lock must not be null.\");\n         }\n         this.collection = collection;\n         this.lock = lock;",
                "deletions": 5
            },
            {
                "sha": "60342583c0b44688f1c6c371995c3878aee0acb3",
                "filename": "src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -55,7 +55,7 @@\n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed collection\n-     * @throws IllegalArgumentException if collection or transformer is null\n+     * @throws NullPointerException if collection or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll,\n@@ -75,7 +75,7 @@\n      * @param collection  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Collection\n-     * @throws IllegalArgumentException if collection or transformer is null\n+     * @throws NullPointerException if collection or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection,\n@@ -103,12 +103,12 @@\n      *\n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if collection or transformer is null\n+     * @throws NullPointerException if collection or transformer is null\n      */\n     protected TransformedCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer) {\n         super(coll);\n         if (transformer == null) {\n-            throw new IllegalArgumentException(\"Transformer must not be null\");\n+            throw new NullPointerException(\"Transformer must not be null\");\n         }\n         this.transformer = transformer;\n     }",
                "deletions": 4
            },
            {
                "sha": "323f7b4c22ee87b32d790b3585f5b0df86562b11",
                "filename": "src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -52,7 +52,7 @@\n      * @param <E> the type of the elements in the collection\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n-     * @throws IllegalArgumentException if {@code coll} is {@code null}\n+     * @throws NullPointerException if {@code coll} is {@code null}\n      * @since 4.0\n      */\n     public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll) {\n@@ -73,13 +73,14 @@\n      * @param <E> the type of the elements in the collection\n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @return a new unmodifiable bounded collection\n-     * @throws IllegalArgumentException if {@code coll} is {@code null}\n+     * @throws NullPointerException if coll is null\n+     * @throws IllegalArgumentException if coll is not a {@code BoundedCollection}\n      * @since 4.0\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll) {\n         if (coll == null) {\n-            throw new IllegalArgumentException(\"The collection must not be null\");\n+            throw new NullPointerException(\"Collection must not be null.\");\n         }\n \n         // handle decorators\n@@ -95,7 +96,7 @@\n         }\n \n         if (coll instanceof BoundedCollection == false) {\n-            throw new IllegalArgumentException(\"The collection is not a bounded collection\");\n+            throw new IllegalArgumentException(\"Collection is not a bounded collection.\");\n         }\n         return new UnmodifiableBoundedCollection<E>((BoundedCollection<E>) coll);\n     }\n@@ -104,7 +105,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param coll  the collection to decorate, must not be null\n-     * @throws IllegalArgumentException if coll is null\n+     * @throws NullPointerException if coll is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableBoundedCollection(final BoundedCollection<? extends E> coll) {",
                "deletions": 5
            },
            {
                "sha": "8d248b33ba40cc407a9dc5d34c74c769f2fb252e",
                "filename": "src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@\n      * @param <T> the type of the elements in the collection\n      * @param coll  the collection to decorate, must not be null\n      * @return an unmodifiable collection\n-     * @throws IllegalArgumentException if collection is null\n+     * @throws NullPointerException if collection is null\n      * @since 4.0\n      */\n     public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll) {\n@@ -65,7 +65,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param coll  the collection to decorate, must not be null\n-     * @throws IllegalArgumentException if collection is null\n+     * @throws NullPointerException if collection is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableCollection(final Collection<? extends E> coll) {",
                "deletions": 2
            },
            {
                "sha": "d852883b0090f13d453efb89200da5e3e964450c",
                "filename": "src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -87,12 +87,12 @@ public FixedOrderComparator() {\n      * The array is copied, so later changes will not affect the comparator.\n      *\n      * @param items  the items that the comparator can compare in order\n-     * @throws IllegalArgumentException if the array is null\n+     * @throws NullPointerException if the array is null\n      */\n     public FixedOrderComparator(final T... items) {\n         super();\n         if (items == null) {\n-            throw new IllegalArgumentException(\"The list of items must not be null\");\n+            throw new NullPointerException(\"The list of items must not be null\");\n         }\n         for (final T item : items) {\n             add(item);\n@@ -106,12 +106,12 @@ public FixedOrderComparator(final T... items) {\n      * The list is copied, so later changes will not affect the comparator.\n      *\n      * @param items  the items that the comparator can compare in order\n-     * @throws IllegalArgumentException if the list is null\n+     * @throws NullPointerException if the list is null\n      */\n     public FixedOrderComparator(final List<T> items) {\n         super();\n         if (items == null) {\n-            throw new IllegalArgumentException(\"The list of items must not be null\");\n+            throw new NullPointerException(\"The list of items must not be null\");\n         }\n         for (final T t : items) {\n             add(t);\n@@ -157,12 +157,12 @@ public UnknownObjectBehavior getUnknownObjectBehavior() {\n      * @param unknownObjectBehavior  the flag for unknown behaviour -\n      * UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION\n      * @throws UnsupportedOperationException if a comparison has been performed\n-     * @throws IllegalArgumentException if the unknown flag is not valid\n+     * @throws NullPointerException if unknownObjectBehavior is null\n      */\n     public void setUnknownObjectBehavior(final UnknownObjectBehavior unknownObjectBehavior) {\n         checkLocked();\n         if (unknownObjectBehavior == null) {\n-            throw new IllegalArgumentException(\"Unknown object behavior must not be null\");\n+            throw new NullPointerException(\"Unknown object behavior must not be null\");\n         }\n         this.unknownObjectBehavior = unknownObjectBehavior;\n     }",
                "deletions": 6
            },
            {
                "sha": "83456485715802f6e8bbc091581fd35979e5bd2e",
                "filename": "src/main/java/org/apache/commons/collections4/functors/AllPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,8 +49,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n         FunctorUtils.validate(predicates);\n@@ -73,8 +73,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = validate(predicates);",
                "deletions": 4
            },
            {
                "sha": "fa333e1337710396dd3ed28d707946f29eff7fba",
                "filename": "src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -43,12 +43,12 @@\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n      * @return the <code>and</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      */\n     public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                 final Predicate<? super T> predicate2) {\n         if (predicate1 == null || predicate2 == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new AndPredicate<T>(predicate1, predicate2);\n     }",
                "deletions": 2
            },
            {
                "sha": "1d825e60f37e1f2e1e3bb5e6b7c23f246b2e7cc2",
                "filename": "src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -45,8 +45,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n@@ -69,8 +69,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {",
                "deletions": 4
            },
            {
                "sha": "96497eb2b85966548c388f0edd61fdfc365bd9a7",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -41,8 +41,8 @@\n      * @param <E> the type that the closure acts on\n      * @param closures  the closures to chain, copied, no nulls\n      * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if the closures array is null\n-     * @throws IllegalArgumentException if any closure in the array is null\n+     * @throws NullPointerException if the closures array is null\n+     * @throws NullPointerException if any closure in the array is null\n      */\n     public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures) {\n         FunctorUtils.validate(closures);\n@@ -60,13 +60,13 @@\n      * @param <E> the type that the closure acts on\n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if the closures collection is null\n-     * @throws IllegalArgumentException if any closure in the collection is null\n+     * @throws NullPointerException if the closures collection is null\n+     * @throws NullPointerException if any closure in the collection is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures) {\n         if (closures == null) {\n-            throw new IllegalArgumentException(\"Closure collection must not be null\");\n+            throw new NullPointerException(\"Closure collection must not be null\");\n         }\n         if (closures.size() == 0) {\n             return NOPClosure.<E>nopClosure();",
                "deletions": 5
            },
            {
                "sha": "0f925b21cc52dc885d8128d7ec11f17682b7bce7",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -44,8 +44,8 @@\n      * @param <T>  the object type\n      * @param transformers  the transformers to chain, copied, no nulls\n      * @return the <code>chained</code> transformer\n-     * @throws IllegalArgumentException if the transformers array is null\n-     * @throws IllegalArgumentException if any transformer in the array is null\n+     * @throws NullPointerException if the transformers array is null\n+     * @throws NullPointerException if any transformer in the array is null\n      */\n     public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers) {\n         FunctorUtils.validate(transformers);\n@@ -63,14 +63,14 @@\n      * @param <T>  the object type\n      * @param transformers  a collection of transformers to chain\n      * @return the <code>chained</code> transformer\n-     * @throws IllegalArgumentException if the transformers collection is null\n-     * @throws IllegalArgumentException if any transformer in the collection is null\n+     * @throws NullPointerException if the transformers collection is null\n+     * @throws NullPointerException if any transformer in the collection is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Transformer<T, T> chainedTransformer(\n             final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n         if (transformers == null) {\n-            throw new IllegalArgumentException(\"Transformer collection must not be null\");\n+            throw new NullPointerException(\"Transformer collection must not be null\");\n         }\n         if (transformers.size() == 0) {\n             return NOPTransformer.<T>nopTransformer();",
                "deletions": 5
            },
            {
                "sha": "fbe92b7243cf7b5c9be6497654a852cab42b1db2",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -42,11 +42,11 @@\n      * @param <T>  the type of the object to transform\n      * @param closure  the closure to call, not null\n      * @return the <code>closure</code> transformer\n-     * @throws IllegalArgumentException if the closure is null\n+     * @throws NullPointerException if the closure is null\n      */\n     public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure) {\n         if (closure == null) {\n-            throw new IllegalArgumentException(\"Closure must not be null\");\n+            throw new NullPointerException(\"Closure must not be null\");\n         }\n         return new ClosureTransformer<T>(closure);\n     }",
                "deletions": 2
            },
            {
                "sha": "e6ea395b1487f743b40613ac58b151aa5ba896f0",
                "filename": "src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -102,7 +102,7 @@\n      * @param object  the object to compare to\n      * @param comparator  the comparator to use for comparison\n      * @return the predicate\n-     * @throws IllegalArgumentException if comparator is null\n+     * @throws NullPointerException if comparator is null\n      */\n     public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator) {\n         return comparatorPredicate(object, comparator, Criterion.EQUAL);\n@@ -116,15 +116,15 @@\n      * @param comparator  the comparator to use for comparison\n      * @param criterion  the criterion to use to evaluate comparison\n      * @return the predicate\n-     * @throws IllegalArgumentException if comparator is null of criterion is invalid\n+     * @throws NullPointerException if comparator or criterion is null\n      */\n     public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator,\n                                                        final Criterion criterion) {\n         if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator must not be null.\");\n+            throw new NullPointerException(\"Comparator must not be null.\");\n         }\n         if (criterion == null) {\n-            throw new IllegalArgumentException(\"Criterion must not be null.\");\n+            throw new NullPointerException(\"Criterion must not be null.\");\n         }\n         return new ComparatorPredicate<T>(object, comparator, criterion);\n     }",
                "deletions": 4
            },
            {
                "sha": "b820707af28da124aa84de06f3f6c1b4d95a29f1",
                "filename": "src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -42,11 +42,11 @@\n      * @param <O>  the output type\n      * @param factory  the factory to call, not null\n      * @return the <code>factory</code> transformer\n-     * @throws IllegalArgumentException if the factory is null\n+     * @throws NullPointerException if the factory is null\n      */\n     public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory) {\n         if (factory == null) {\n-            throw new IllegalArgumentException(\"Factory must not be null\");\n+            throw new NullPointerException(\"Factory must not be null\");\n         }\n         return new FactoryTransformer<I, O>(factory);\n     }",
                "deletions": 2
            },
            {
                "sha": "aed237eea2fe0eaa38471f6ea863cdbcb82b3963",
                "filename": "src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -77,11 +77,11 @@ private FunctorUtils() {\n      */\n     static void validate(final Predicate<?>... predicates) {\n         if (predicates == null) {\n-            throw new IllegalArgumentException(\"The predicate array must not be null\");\n+            throw new NullPointerException(\"The predicate array must not be null\");\n         }\n         for (int i = 0; i < predicates.length; i++) {\n             if (predicates[i] == null) {\n-                throw new IllegalArgumentException(\n+                throw new NullPointerException(\n                         \"The predicate array must not contain a null predicate, index \" + i + \" was null\");\n             }\n         }\n@@ -95,7 +95,7 @@ static void validate(final Predicate<?>... predicates) {\n      */\n     static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates) {\n         if (predicates == null) {\n-            throw new IllegalArgumentException(\"The predicate collection must not be null\");\n+            throw new NullPointerException(\"The predicate collection must not be null\");\n         }\n         // convert to array like this to guarantee iterator() ordering\n         @SuppressWarnings(\"unchecked\") // OK\n@@ -104,7 +104,7 @@ static void validate(final Predicate<?>... predicates) {\n         for (final Predicate<? super T> predicate : predicates) {\n             preds[i] = predicate;\n             if (preds[i] == null) {\n-                throw new IllegalArgumentException(\n+                throw new NullPointerException(\n                         \"The predicate collection must not contain a null predicate, index \" + i + \" was null\");\n             }\n             i++;\n@@ -133,11 +133,11 @@ static void validate(final Predicate<?>... predicates) {\n      */\n     static void validate(final Closure<?>... closures) {\n         if (closures == null) {\n-            throw new IllegalArgumentException(\"The closure array must not be null\");\n+            throw new NullPointerException(\"The closure array must not be null\");\n         }\n         for (int i = 0; i < closures.length; i++) {\n             if (closures[i] == null) {\n-                throw new IllegalArgumentException(\n+                throw new NullPointerException(\n                         \"The closure array must not contain a null closure, index \" + i + \" was null\");\n             }\n         }\n@@ -179,11 +179,11 @@ static void validate(final Closure<?>... closures) {\n      */\n     static void validate(final Transformer<?, ?>... transformers) {\n         if (transformers == null) {\n-            throw new IllegalArgumentException(\"The transformer array must not be null\");\n+            throw new NullPointerException(\"The transformer array must not be null\");\n         }\n         for (int i = 0; i < transformers.length; i++) {\n             if (transformers[i] == null) {\n-                throw new IllegalArgumentException(\n+                throw new NullPointerException(\n                     \"The transformer array must not contain a null transformer, index \" + i + \" was null\");\n             }\n         }",
                "deletions": 8
            },
            {
                "sha": "abb4645f77afb14123176573896e8d9120417ec5",
                "filename": "src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -41,7 +41,6 @@\n      * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n      */\n     public static <T> Predicate<T> identityPredicate(final T object) {\n         if (object == null) {",
                "deletions": 1
            },
            {
                "sha": "19a5e60d3e4f5798e9d2f73699ad168635b21bc1",
                "filename": "src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/IfClosure.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,7 +50,7 @@\n      * @param predicate  predicate to switch on\n      * @param trueClosure  closure used if true\n      * @return the <code>if</code> closure\n-     * @throws IllegalArgumentException if either argument is null\n+     * @throws NullPointerException if either argument is null\n      * @since 3.2\n      */\n     public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure) {\n@@ -65,16 +65,16 @@\n      * @param trueClosure  closure used if true\n      * @param falseClosure  closure used if false\n      * @return the <code>if</code> closure\n-     * @throws IllegalArgumentException if any argument is null\n+     * @throws NullPointerException if any argument is null\n      */\n     public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate,\n                                            final Closure<? super E> trueClosure,\n                                            final Closure<? super E> falseClosure) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         if (trueClosure == null || falseClosure == null) {\n-            throw new IllegalArgumentException(\"Closures must not be null\");\n+            throw new NullPointerException(\"Closures must not be null\");\n         }\n         return new IfClosure<E>(predicate, trueClosure, falseClosure);\n     }",
                "deletions": 4
            },
            {
                "sha": "431f3e0bfc4e4faa056ab2dcc2cd7e748085e2f7",
                "filename": "src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,11 +16,11 @@\n  */\n package org.apache.commons.collections4.functors;\n \n+import java.io.Serializable;\n+\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n \n-import java.io.Serializable;\n-\n /**\n  * Transformer implementation that will call one of two closures based on whether a predicate evaluates\n  * as true or false.\n@@ -52,15 +52,16 @@\n      * @param trueTransformer  transformer used if true\n      * @param falseTransformer  transformer used if false\n      * @return the <code>if</code> transformer\n+     * @throws NullPointerException if either argument is null\n      */\n     public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                          final Transformer<? super I, ? extends O> trueTransformer,\n                                                          final Transformer<? super I, ? extends O> falseTransformer) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         if (trueTransformer == null || falseTransformer == null) {\n-            throw new IllegalArgumentException(\"Transformers must not be null\");\n+            throw new NullPointerException(\"Transformers must not be null\");\n         }\n \n         return new IfTransformer<I, O>(predicate, trueTransformer, falseTransformer);\n@@ -76,16 +77,17 @@\n      * @param predicate  predicate to switch on\n      * @param trueTransformer  transformer used if true\n      * @return the <code>if</code> transformer\n+     * @throws NullPointerException if either argument is null\n      */\n     public static <T> Transformer<T, T> ifTransformer(\n             final Predicate<? super T> predicate,\n             final Transformer<? super T, ? extends T> trueTransformer) {\n \n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         if (trueTransformer == null) {\n-            throw new IllegalArgumentException(\"Transformer must not be null\");\n+            throw new NullPointerException(\"Transformer must not be null\");\n         }\n \n         return new IfTransformer<T, T>(predicate, trueTransformer, NOPTransformer.<T>nopTransformer());",
                "deletions": 6
            },
            {
                "sha": "6577d8313d39dafc5b3f38aa7d696ed632aa6fa0",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,11 +40,11 @@\n      *\n      * @param type  the type to check for, may not be null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws NullPointerException if the class is null\n      */\n     public static Predicate<Object> instanceOfPredicate(final Class<?> type) {\n         if (type == null) {\n-            throw new IllegalArgumentException(\"The type to check instanceof must not be null\");\n+            throw new NullPointerException(\"The type to check instanceof must not be null\");\n         }\n         return new InstanceofPredicate(type);\n     }",
                "deletions": 2
            },
            {
                "sha": "1179b5e71ebfac3288885edbb6df652446c07861",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -51,12 +51,14 @@\n      * @param paramTypes  the constructor parameter types, cloned\n      * @param args  the constructor arguments, cloned\n      * @return a new instantiate factory\n+     * @throws NullPointerException if classToInstantiate is null\n+     * @throws IllegalArgumentException if paramTypes does not match args\n      */\n     public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate,\n                                                     final Class<?>[] paramTypes,\n                                                     final Object[] args) {\n         if (classToInstantiate == null) {\n-            throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n+            throw new NullPointerException(\"Class to instantiate must not be null\");\n         }\n         if (paramTypes == null && args != null\n             || paramTypes != null && args == null",
                "deletions": 1
            },
            {
                "sha": "e5a000ea07a1fc05504ed0a5b7fd1f55cc21a332",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -61,6 +61,7 @@\n      * @param paramTypes  the constructor parameter types\n      * @param args  the constructor arguments\n      * @return an instantiate transformer\n+     * @throws IllegalArgumentException if paramTypes does not match args\n      */\n     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes,\n                                                                                 final Object[] args) {",
                "deletions": 0
            },
            {
                "sha": "09d79ef2d586e08ea8615cc593ea1299f646ade1",
                "filename": "src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,11 +48,12 @@\n      * @param <O>  the output type\n      * @param methodName  the method name to call\n      * @return an invoker transformer\n+     * @throws NullPointerException if methodName is null\n      * @since 3.1\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n         if (methodName == null) {\n-            throw new IllegalArgumentException(\"The method to invoke must not be null\");\n+            throw new NullPointerException(\"The method to invoke must not be null\");\n         }\n         return new InvokerTransformer<I, O>(methodName);\n     }\n@@ -66,11 +67,13 @@\n      * @param paramTypes  the parameter types of the method\n      * @param args  the arguments to pass to the method\n      * @return an invoker transformer\n+     * @throws NullPointerException if methodName is null\n+     * @throws IllegalArgumentException if paramTypes does not match args\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                               final Object[] args) {\n         if (methodName == null) {\n-            throw new IllegalArgumentException(\"The method to invoke must not be null\");\n+            throw new NullPointerException(\"The method to invoke must not be null\");\n         }\n         if (((paramTypes == null) && (args != null))\n             || ((paramTypes != null) && (args == null))",
                "deletions": 2
            },
            {
                "sha": "617f2e3347bb64c86f173f59cb102b1086b1080c",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NonePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -44,8 +44,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n         FunctorUtils.validate(predicates);\n@@ -63,8 +63,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = FunctorUtils.validate(predicates);",
                "deletions": 4
            },
            {
                "sha": "b9876a0165cff0cd6fc39cb010f1fb03c33ca6fa",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,11 +40,11 @@\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new NotPredicate<T>(predicate);\n     }",
                "deletions": 2
            },
            {
                "sha": "aa090ee8c851c1e9420e6dc6b593949d4b282f94",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -41,11 +41,11 @@\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new NullIsExceptionPredicate<T>(predicate);\n     }",
                "deletions": 2
            },
            {
                "sha": "c24878badf9bc05fcc11009230f3a39ae7e5a40d",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,11 +40,11 @@\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new NullIsFalsePredicate<T>(predicate);\n     }",
                "deletions": 2
            },
            {
                "sha": "1eac13f29bc2d78834d1be034bd135a08d246790",
                "filename": "src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,11 +40,11 @@\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n+     * @throws NullPointerException if the predicate is null\n      */\n     public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new NullIsTruePredicate<T>(predicate);\n     }",
                "deletions": 2
            },
            {
                "sha": "c4588d527c0fae1d395159750a360ff1a3493421",
                "filename": "src/main/java/org/apache/commons/collections4/functors/OnePredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -45,8 +45,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n@@ -66,8 +66,8 @@\n      * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n+     * @throws NullPointerException if the predicates array is null\n+     * @throws NullPointerException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         final Predicate<? super T>[] preds = FunctorUtils.validate(predicates);",
                "deletions": 4
            },
            {
                "sha": "dcd1992a31c95a2fc47e9492f29a3acfdcf7b775",
                "filename": "src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -43,12 +43,12 @@\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n      * @return the <code>and</code> predicate\n-     * @throws IllegalArgumentException if either predicate is null\n+     * @throws NullPointerException if either predicate is null\n      */\n     public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n         if (predicate1 == null || predicate2 == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         return new OrPredicate<T>(predicate1, predicate2);\n     }",
                "deletions": 2
            },
            {
                "sha": "de6e5446a1b11f445208202376e9ec4d300daf51",
                "filename": "src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,8 +49,9 @@\n      * @param closures  matching array of closures, cloned, no nulls\n      * @param defaultClosure  the closure to use if no match, null means nop\n      * @return the <code>chained</code> closure\n-     * @throws IllegalArgumentException if array is null\n-     * @throws IllegalArgumentException if any element in the array is null\n+     * @throws NullPointerException if array is null\n+     * @throws NullPointerException if any element in the array is null\n+     * @throws IllegalArgumentException if the array lengths of predicates and closures do not match\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates,\n@@ -81,14 +82,14 @@\n      * @param <E> the type that the closure acts on\n      * @param predicatesAndClosures  a map of predicates to closures\n      * @return the <code>switch</code> closure\n-     * @throws IllegalArgumentException if the map is null\n-     * @throws IllegalArgumentException if any closure in the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any closure in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures) {\n         if (predicatesAndClosures == null) {\n-            throw new IllegalArgumentException(\"The predicate and closure map must not be null\");\n+            throw new NullPointerException(\"The predicate and closure map must not be null\");\n         }\n         // convert to array like this to guarantee iterator() ordering\n         final Closure<? super E> defaultClosure = predicatesAndClosures.remove(null);",
                "deletions": 5
            },
            {
                "sha": "defc3fe6129b34f799f17bc9126d3864e78ee2a8",
                "filename": "src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,8 +50,8 @@\n      * @param transformers  matching array of transformers, cloned, no nulls\n      * @param defaultTransformer  the transformer to use if no match, null means return null\n      * @return the <code>chained</code> transformer\n-     * @throws IllegalArgumentException if array is null\n-     * @throws IllegalArgumentException if any element in the array is null\n+     * @throws NullPointerException if array is null\n+     * @throws NullPointerException if any element in the array is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n@@ -84,16 +84,16 @@\n      * @param <O>  the output type\n      * @param map  a map of predicates to transformers\n      * @return the <code>switch</code> transformer\n-     * @throws IllegalArgumentException if the map is null\n-     * @throws IllegalArgumentException if any transformer in the map is null\n+     * @throws NullPointerException if the map is null\n+     * @throws NullPointerException if any transformer in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchTransformer(\n             final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map) {\n \n         if (map == null) {\n-            throw new IllegalArgumentException(\"The predicate and transformer map must not be null\");\n+            throw new NullPointerException(\"The predicate and transformer map must not be null\");\n         }\n         if (map.size() == 0) {\n             return ConstantTransformer.<I, O>nullTransformer();",
                "deletions": 5
            },
            {
                "sha": "2278a26fc21866cf331fa1c4b45d687240e3167b",
                "filename": "src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -46,15 +46,15 @@\n      * @param transformer  the transformer to call\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n-     * @throws IllegalArgumentException if the transformer or the predicate is null\n+     * @throws NullPointerException if the transformer or the predicate is null\n      */\n     public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer,\n                                                         final Predicate<? super T> predicate) {\n         if (transformer == null) {\n-            throw new IllegalArgumentException(\"The transformer to call must not be null\");\n+            throw new NullPointerException(\"The transformer to call must not be null\");\n         }\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"The predicate to call must not be null\");\n+            throw new NullPointerException(\"The predicate to call must not be null\");\n         }\n         return new TransformedPredicate<T>(transformer, predicate);\n     }",
                "deletions": 3
            },
            {
                "sha": "c3b03a22ec4254f73e81f07c29e1faa97df4ad33",
                "filename": "src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -42,11 +42,11 @@\n      * @param <T> the type that the predicate queries\n      * @param transformer  the transformer to decorate\n      * @return the predicate\n-     * @throws IllegalArgumentException if the transformer is null\n+     * @throws NullPointerException if the transformer is null\n      */\n     public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer) {\n         if (transformer == null) {\n-            throw new IllegalArgumentException(\"The transformer to call must not be null\");\n+            throw new NullPointerException(\"The transformer to call must not be null\");\n         }\n         return new TransformerPredicate<T>(transformer);\n     }",
                "deletions": 2
            },
            {
                "sha": "525bc9a908094f8e84ef6628021f31aa7274941f",
                "filename": "src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,15 +48,15 @@\n      * @param closure  the closure the execute, not null\n      * @param doLoop  true to act as a do-while loop, always executing the closure once\n      * @return the <code>while</code> closure\n-     * @throws IllegalArgumentException if the predicate or closure is null\n+     * @throws NullPointerException if the predicate or closure is null\n      */\n     public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate,\n                                               final Closure<? super E> closure, final boolean doLoop) {\n         if (predicate == null) {\n-            throw new IllegalArgumentException(\"Predicate must not be null\");\n+            throw new NullPointerException(\"Predicate must not be null\");\n         }\n         if (closure == null) {\n-            throw new IllegalArgumentException(\"Closure must not be null\");\n+            throw new NullPointerException(\"Closure must not be null\");\n         }\n         return new WhileClosure<E>(predicate, closure, doLoop);\n     }",
                "deletions": 3
            },
            {
                "sha": "5aa7117ed5586113e71fb40009617c722bb6c73b",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -33,7 +33,7 @@\n      * Constructor that decorates the specified iterator.\n      *\n      * @param iterator  the iterator to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     protected AbstractIteratorDecorator(final Iterator<E> iterator) {\n         super(iterator);",
                "deletions": 1
            },
            {
                "sha": "f380383c27271173fe3a0a0dd9035c228d646fe1",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -36,12 +36,12 @@\n      * Constructor that decorates the specified iterator.\n      *\n      * @param iterator  the iterator to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public AbstractListIteratorDecorator(final ListIterator<E> iterator) {\n         super();\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"ListIterator must not be null\");\n+            throw new NullPointerException(\"ListIterator must not be null\");\n         }\n         this.iterator = iterator;\n     }",
                "deletions": 2
            },
            {
                "sha": "34d23f93ba81bd2e797b988619c609cc58975915",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -36,12 +36,12 @@\n      * Constructor that decorates the specified iterator.\n      *\n      * @param iterator  the iterator to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public AbstractMapIteratorDecorator(final MapIterator<K, V> iterator) {\n         super();\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"MapIterator must not be null\");\n+            throw new NullPointerException(\"MapIterator must not be null\");\n         }\n         this.iterator = iterator;\n     }",
                "deletions": 2
            },
            {
                "sha": "2118b8ecc3d71cd812769b44fedbb5289b03665a",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -36,12 +36,12 @@\n      * Constructor that decorates the specified iterator.\n      *\n      * @param iterator  the iterator to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public AbstractOrderedMapIteratorDecorator(final OrderedMapIterator<K, V> iterator) {\n         super();\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"OrderedMapIterator must not be null\");\n+            throw new NullPointerException(\"OrderedMapIterator must not be null\");\n         }\n         this.iterator = iterator;\n     }",
                "deletions": 2
            },
            {
                "sha": "250bf2ac9b52fc0d01ca62d8e38ca6fd1dc3caf1",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -36,11 +36,12 @@\n      * Create a new AbstractUntypedIteratorDecorator.\n      *\n      * @param iterator  the iterator to decorate\n+     * @throws NullPointerException if the iterator is null\n      */\n     protected AbstractUntypedIteratorDecorator(final Iterator<I> iterator) {\n         super();\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"Iterator must not be null\");\n+            throw new NullPointerException(\"Iterator must not be null\");\n         }\n         this.iterator = iterator;\n     }",
                "deletions": 1
            },
            {
                "sha": "8a5025cc8451bf0b18224272db4ec5adcabbab07",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -57,11 +57,12 @@\n      * @param iterator  the iterator to be decorated\n      * @param offset  the index of the first element of the decorated iterator to return\n      * @param max  the maximum number of elements of the decorated iterator to return\n-     * @throws IllegalArgumentException if iterator is null, or either offset or max is negative\n+     * @throws NullPointerException if iterator is null\n+     * @throws IllegalArgumentException if either offset or max is negative\n      */\n     public BoundedIterator(final Iterator<? extends E> iterator, final long offset, final long max) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"Iterator must not be null\");\n+            throw new NullPointerException(\"Iterator must not be null\");\n         }\n         if (offset < 0) {\n             throw new IllegalArgumentException(\"Offset parameter must not be negative.\");",
                "deletions": 2
            },
            {
                "sha": "d88ce0dd0f1313e53ce57a6dce6b3c9a29bb15be",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -17,6 +17,7 @@\n \n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n@@ -42,11 +43,11 @@\n      * the specified node's childNodes.\n      *\n      * @param node Node, who's child nodes are wrapped by this class. Must not be null\n-     * @throws IllegalArgumentException if node is null\n+     * @throws NullPointerException if node is null\n      */\n     public NodeListIterator(final Node node) {\n         if (node == null) {\n-            throw new IllegalArgumentException(\"node must not be null!\");\n+            throw new NullPointerException(\"Node must not be null.\");\n         }\n         this.nodeList = node.getChildNodes();\n     }\n@@ -56,11 +57,11 @@ public NodeListIterator(final Node node) {\n      * <code>org.w3c.NodeList</code>\n      *\n      * @param nodeList node list, which is wrapped by this class. Must not be null\n-     * @throws IllegalArgumentException if nodeList is null\n+     * @throws NullPointerException if nodeList is null\n      */\n     public NodeListIterator(final NodeList nodeList) {\n         if (nodeList == null) {\n-            throw new IllegalArgumentException(\"nodeList must not be null!\");\n+            throw new NullPointerException(\"NodeList must not be null.\");\n         }\n         this.nodeList = nodeList;\n     }",
                "deletions": 4
            },
            {
                "sha": "7ccb96a80dd705cffdb5e7c065ab8325b3920b48",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -53,11 +53,11 @@\n      * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new peeking iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"Iterator must not be null\");\n+            throw new NullPointerException(\"Iterator must not be null\");\n         }\n         if (iterator instanceof PeekingIterator<?>) {\n             @SuppressWarnings(\"unchecked\") // safe cast",
                "deletions": 2
            },
            {
                "sha": "10390149b478409052ed9ed6bb52367f48500932",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,11 +50,11 @@\n      * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new peeking iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"Iterator must not be null\");\n+            throw new NullPointerException(\"Iterator must not be null\");\n         }\n         if (iterator instanceof PushbackIterator<?>) {\n             @SuppressWarnings(\"unchecked\") // safe cast",
                "deletions": 2
            },
            {
                "sha": "e4529e9c1336f3b4e3633d311ffecb9145dba756",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -53,6 +53,9 @@\n      */\n     public ReverseListIterator(final List<E> list) {\n         super();\n+        if (list == null) {\n+            throw new NullPointerException(\"List must not be null.\");\n+        }\n         this.list = list;\n         iterator = list.listIterator(list.size());\n     }",
                "deletions": 0
            },
            {
                "sha": "d6d566d6d15e5da132774b879d64480f2bf7366d",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -42,11 +42,11 @@\n      * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"Iterator must not be null\");\n+            throw new NullPointerException(\"Iterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast",
                "deletions": 2
            },
            {
                "sha": "7e335957e68ce5fa72099fd26856ea9bd1e24f41",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,11 +40,11 @@\n      * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable list iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"ListIterator must not be null\");\n+            throw new NullPointerException(\"ListIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast",
                "deletions": 2
            },
            {
                "sha": "659c9b148c8a4410ad81dfb080fe7ef8b6227b9d",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -40,12 +40,12 @@\n      * @param <V>  the value type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable map iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <K, V> MapIterator<K, V> unmodifiableMapIterator(\n             final MapIterator<? extends K, ? extends V> iterator) {\n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"MapIterator must not be null\");\n+            throw new NullPointerException(\"MapIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast",
                "deletions": 2
            },
            {
                "sha": "263a53b4d990cf4b4dec422aa1a91d81c7287580",
                "filename": "src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -41,13 +41,13 @@\n      * @param <V>  the value type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable ordered map iterator\n-     * @throws IllegalArgumentException if the iterator is null\n+     * @throws NullPointerException if the iterator is null\n      */\n     public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(\n             final OrderedMapIterator<K, ? extends V> iterator) {\n \n         if (iterator == null) {\n-            throw new IllegalArgumentException(\"OrderedMapIterator must not be null\");\n+            throw new NullPointerException(\"OrderedMapIterator must not be null\");\n         }\n         if (iterator instanceof Unmodifiable) {\n             @SuppressWarnings(\"unchecked\") // safe to upcast",
                "deletions": 2
            },
            {
                "sha": "72ee5acec2c40bcede77b4afdec02cb36458a049",
                "filename": "src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -36,11 +36,11 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param entry  the <code>Map.Entry</code> to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the collection is null\n      */\n     public AbstractMapEntryDecorator(final Map.Entry<K, V> entry) {\n         if (entry == null) {\n-            throw new IllegalArgumentException(\"Map Entry must not be null\");\n+            throw new NullPointerException(\"Map Entry must not be null.\");\n         }\n         this.entry = entry;\n     }",
                "deletions": 2
            },
            {
                "sha": "be240545427ca9b6e0b95928f0b953aceb517756",
                "filename": "src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@ protected AbstractListDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      */\n     protected AbstractListDecorator(final List<E> list) {\n         super(list);",
                "deletions": 1
            },
            {
                "sha": "2afd8bb1b5776ab972847fa2114a0e7a78f985d1",
                "filename": "src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -38,7 +38,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      */\n     protected AbstractSerializableListDecorator(final List<E> list) {\n         super(list);",
                "deletions": 1
            },
            {
                "sha": "33ee16ce86a04b0423161c4cc501c777d8d2a663",
                "filename": "src/main/java/org/apache/commons/collections4/list/FixedSizeList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @return a new fixed size list\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      * @since 4.0\n      */\n     public static <E> FixedSizeList<E> fixedSizeList(final List<E> list) {\n@@ -61,7 +61,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      */\n     protected FixedSizeList(final List<E> list) {\n         super(list);",
                "deletions": 2
            },
            {
                "sha": "a809d7f574e6afc4d667852fb91ca22768f09271",
                "filename": "src/main/java/org/apache/commons/collections4/list/GrowthList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/GrowthList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/GrowthList.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/GrowthList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -63,7 +63,7 @@\n      * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @return a new growth list\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      * @since 4.0\n      */\n     public static <E> GrowthList<E> growthList(final List<E> list) {\n@@ -92,7 +92,7 @@ public GrowthList(final int initialSize) {\n      * Constructor that wraps (not copies).\n      *\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      */\n     protected GrowthList(final List<E> list) {\n         super(list);",
                "deletions": 2
            },
            {
                "sha": "14324619d2feb381523ba29a6bc36e24ad4d90f4",
                "filename": "src/main/java/org/apache/commons/collections4/list/LazyList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/LazyList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/LazyList.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/LazyList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -72,7 +72,7 @@\n      * @param list  the list to decorate, must not be null\n      * @param factory  the factory to use for creation, must not be null\n      * @return a new lazy list\n-     * @throws IllegalArgumentException if list or factory is null\n+     * @throws NullPointerException if list or factory is null\n      * @since 4.0\n      */\n     public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory) {\n@@ -85,7 +85,7 @@\n      *\n      * @param list  the list to decorate, must not be null\n      * @param factory  the factory to use for creation, must not be null\n-     * @throws IllegalArgumentException if list or factory is null\n+     * @throws NullPointerException if list or factory is null\n      */\n     protected LazyList(final List<E> list, final Factory<? extends E> factory) {\n         super(list);",
                "deletions": 2
            },
            {
                "sha": "b158fdc5c97255a7fa28255c2b356114b6452eb2",
                "filename": "src/main/java/org/apache/commons/collections4/list/PredicatedList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/PredicatedList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/PredicatedList.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/PredicatedList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -60,7 +60,7 @@\n      * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated list\n-     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws NullPointerException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n      * @since 4.0\n      */\n@@ -77,7 +77,7 @@\n      *\n      * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws NullPointerException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n     protected PredicatedList(final List<E> list, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "ac4c6aab351b1a8ac21f98cbdc5827cb7582c845",
                "filename": "src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -65,12 +65,12 @@\n      * @param <E>  the element type\n      * @param list  the list to decorate, must not be null\n      * @return a new {@link SetUniqueList}\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      * @since 4.0\n      */\n     public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {\n         if (list == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         if (list.isEmpty()) {\n             return new SetUniqueList<E>(list, new HashSet<E>());\n@@ -90,12 +90,12 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if set or list is null\n+     * @throws NullPointerException if set or list is null\n      */\n     protected SetUniqueList(final List<E> list, final Set<E> set) {\n         super(list);\n         if (set == null) {\n-            throw new IllegalArgumentException(\"Set must not be null\");\n+            throw new NullPointerException(\"Set must not be null\");\n         }\n         this.set = set;\n     }",
                "deletions": 4
            },
            {
                "sha": "968368c81d0985a12d1f9113482de61b6e50cf0b",
                "filename": "src/main/java/org/apache/commons/collections4/list/TransformedList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/TransformedList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/TransformedList.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/TransformedList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -53,7 +53,7 @@\n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed list\n-     * @throws IllegalArgumentException if list or transformer is null\n+     * @throws NullPointerException if list or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedList<E> transformingList(final List<E> list,\n@@ -73,13 +73,13 @@\n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed List\n-     * @throws IllegalArgumentException if list or transformer is null\n+     * @throws NullPointerException if list or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedList<E> transformedList(final List<E> list,\n                                                          final Transformer<? super E, ? extends E> transformer) {\n         final TransformedList<E> decorated = new TransformedList<E>(list, transformer);\n-        if (transformer != null && list != null && list.size() > 0) {\n+        if (list.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // list is of type E\n             final E[] values = (E[]) list.toArray(); // NOPMD - false positive for generics\n             list.clear();\n@@ -99,7 +99,7 @@\n      *\n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if list or transformer is null\n+     * @throws NullPointerException if list or transformer is null\n      */\n     protected TransformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer) {\n         super(list, transformer);",
                "deletions": 4
            },
            {
                "sha": "30fbb14d5e0c08571099392427ef0d23d8ec84fa",
                "filename": "src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@\n      * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @return a new unmodifiable list\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      * @since 4.0\n      */\n     public static <E> List<E> unmodifiableList(final List<? extends E> list) {\n@@ -65,7 +65,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     public UnmodifiableList(final List<? extends E> list) {",
                "deletions": 2
            },
            {
                "sha": "a2b1959b8c2801454a769785a63c91afc74bd992",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -21,9 +21,9 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.AbstractSetDecorator;\n import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;\n+import org.apache.commons.collections4.set.AbstractSetDecorator;\n \n /**\n  * An abstract base class that simplifies the task of creating map decorators.\n@@ -56,7 +56,7 @@ protected AbstractInputCheckedMapDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     protected AbstractInputCheckedMapDecorator(final Map<K, V> map) {\n         super(map);",
                "deletions": 2
            },
            {
                "sha": "d718370c8a9b9cee2d951679625ad12b4675911f",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -55,11 +55,11 @@ protected AbstractMapDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected AbstractMapDecorator(final Map<K, V> map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null.\");\n         }\n         this.map = map;\n     }",
                "deletions": 2
            },
            {
                "sha": "f4d2eb433aa6b76a896b3110e53f5b81a1df73a6",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@ protected AbstractOrderedMapDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the map is null\n      */\n     public AbstractOrderedMapDecorator(final OrderedMap<K, V> map) {\n         super(map);",
                "deletions": 1
            },
            {
                "sha": "c867db1ab9872ca06aa4675bd5a0e14a52651482",
                "filename": "src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -59,7 +59,7 @@ protected AbstractSortedMapDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the collection is null\n+     * @throws NullPointerException if the map is null\n      */\n     public AbstractSortedMapDecorator(final SortedMap<K, V> map) {\n         super(map);",
                "deletions": 1
            },
            {
                "sha": "17605fd326aa32dbde056d3446470bd3d438d3ad",
                "filename": "src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -80,7 +80,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param defaultValue  the default value to return when the key is not found\n      * @return a new defaulting map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue) {\n@@ -98,7 +98,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use to create entries, must not be null\n      * @return a new defaulting map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory) {\n@@ -120,7 +120,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param transformer  the transformer to use as a factory to create entries, must not be null\n      * @return a new defaulting map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map,\n@@ -159,12 +159,12 @@ public DefaultedMap(final Transformer<? super K, ? extends V> defaultValueTransf\n      *\n      * @param map  the map to decorate, must not be null\n      * @param defaultValueTransformer  the value transformer to use\n-     * @throws IllegalArgumentException if map or transformer is null\n+     * @throws NullPointerException if map or transformer is null\n      */\n     protected DefaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> defaultValueTransformer) {\n         super(map);\n         if (defaultValueTransformer == null) {\n-            throw new IllegalArgumentException(\"transformer must not be null\");\n+            throw new NullPointerException(\"Transformer must not be null.\");\n         }\n         this.value = defaultValueTransformer;\n     }",
                "deletions": 5
            },
            {
                "sha": "29e35c26b0f295fa2b276f78434cedf255c1fdd2",
                "filename": "src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -24,9 +24,9 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.BoundedMap;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>Map</code> to fix the size, preventing add/remove.\n@@ -66,7 +66,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new fixed size map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map) {\n@@ -78,7 +78,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     protected FixedSizeMap(final Map<K, V> map) {\n         super(map);",
                "deletions": 3
            },
            {
                "sha": "4a9deaad6b0cc060400a50718a5f98724e3bac8e",
                "filename": "src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -25,10 +25,10 @@\n import java.util.Set;\n import java.util.SortedMap;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.BoundedMap;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to fix the size blocking add/remove.\n@@ -68,7 +68,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new fixed size sorted map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map) {\n@@ -80,7 +80,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     protected FixedSizeSortedMap(final SortedMap<K, V> map) {\n         super(map);",
                "deletions": 3
            },
            {
                "sha": "ba857bcae5741edece2060b413ea3dc18025e4b3",
                "filename": "src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/LazyMap.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/LazyMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -75,7 +75,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @return a new lazy map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory< ? extends V> factory) {\n@@ -90,7 +90,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @return a new lazy map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory) {\n@@ -103,12 +103,12 @@\n      *\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      */\n     protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n         super(map);\n         if (factory == null) {\n-            throw new IllegalArgumentException(\"Factory must not be null\");\n+            throw new NullPointerException(\"Factory must not be null\");\n         }\n         this.factory = FactoryTransformer.factoryTransformer(factory);\n     }\n@@ -118,12 +118,12 @@ protected LazyMap(final Map<K,V> map, final Factory<? extends V> factory) {\n      *\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      */\n     protected LazyMap(final Map<K,V> map, final Transformer<? super K, ? extends V> factory) {\n         super(map);\n         if (factory == null) {\n-            throw new IllegalArgumentException(\"Factory must not be null\");\n+            throw new NullPointerException(\"Factory must not be null\");\n         }\n         this.factory = factory;\n     }",
                "deletions": 6
            },
            {
                "sha": "459f58632581256fbffea8f945cfd85227c12145",
                "filename": "src/main/java/org/apache/commons/collections4/map/LazySortedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -69,7 +69,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @return a new lazy sorted map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map,\n@@ -85,7 +85,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @return a new lazy sorted map\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      * @since 4.0\n      */\n     public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map,\n@@ -99,7 +99,7 @@\n      *\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      */\n     protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> factory) {\n         super(map, factory);\n@@ -110,7 +110,7 @@ protected LazySortedMap(final SortedMap<K,V> map, final Factory<? extends V> fac\n      *\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n+     * @throws NullPointerException if map or factory is null\n      */\n     protected LazySortedMap(final SortedMap<K,V> map, final Transformer<? super K, ? extends V> factory) {\n         super(map, factory);",
                "deletions": 4
            },
            {
                "sha": "55c85f2fda1757adb9ab60a57e79317f4bb73d6e",
                "filename": "src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -94,7 +94,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new list ordered map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map) {\n@@ -116,7 +116,7 @@ public ListOrderedMap() {\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     protected ListOrderedMap(final Map<K, V> map) {\n         super(map);",
                "deletions": 2
            },
            {
                "sha": "ab3f830a2362a45f4b2f1c68fcbb310692c08fc3",
                "filename": "src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -89,12 +89,13 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, not null\n      * @return a new multi key map\n-     * @throws IllegalArgumentException if the map is null or not empty\n+     * @throws NullPointerException if map is null\n+     * @throws IllegalArgumentException if the map is not empty\n      * @since 4.0\n      */\n     public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null\");\n         }\n         if (map.size() > 0) {\n             throw new IllegalArgumentException(\"Map must be empty\");",
                "deletions": 2
            },
            {
                "sha": "f156409141fe9a9bb78323a4394cac1fa2725d19",
                "filename": "src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
                "status": "modified",
                "changes": 23,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -117,7 +117,7 @@ public ConstantTimeToLiveExpirationPolicy(final long timeToLiveMillis) {\n          *        expire.\n          * @param timeUnit the unit of time for the <code>timeToLive</code>\n          *        parameter, must not be null.\n-         * @throws IllegalArgumentException if the time unit is null.\n+         * @throws NullPointerException if the time unit is null.\n          */\n         public ConstantTimeToLiveExpirationPolicy(final long timeToLive,\n                                                   final TimeUnit timeUnit) {\n@@ -181,20 +181,19 @@ public long expirationTime(final K key, final V value) {\n     /**\n      * First validate the input parameters. If the parameters are valid, convert\n      * the given time measured in the given units to the same time measured in\n-     * milliseconds. If the parameters are invalid, an\n-     * {@link IllegalArgumentException} is thrown.\n+     * milliseconds.\n      *\n      * @param timeToLive the constant amount of time an entry is available\n      *        before it expires. A negative value results in entries that NEVER\n      *        expire. A zero value results in entries that ALWAYS expire.\n      * @param timeUnit the unit of time for the <code>timeToLive</code>\n      *        parameter, must not be null.\n-     * @throws IllegalArgumentException if the time unit is null.\n+     * @throws NullPointerException if the time unit is null.\n      */\n     private static long validateAndConvertToMillis(final long timeToLive,\n                                                    final TimeUnit timeUnit) {\n         if (timeUnit == null) {\n-            throw new IllegalArgumentException(\"Time unit must not be null\");\n+            throw new NullPointerException(\"Time unit must not be null\");\n         }\n         return TimeUnit.MILLISECONDS.convert(timeToLive, timeUnit);\n     }\n@@ -219,6 +218,7 @@ public PassiveExpiringMap() {\n      *\n      * @param expiringPolicy the policy used to determine expiration times of\n      *        entries as they are added.\n+     * @throws NullPointerException if expiringPolicy is null\n      */\n     public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n         this(expiringPolicy, new HashMap<K, V>());\n@@ -233,13 +233,13 @@ public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy) {\n      * @param expiringPolicy the policy used to determine expiration times of\n      *        entries as they are added.\n      * @param map the map to decorate, must not be null.\n-     * @throws IllegalArgumentException if the map is null.\n+     * @throws NullPointerException if the map or expiringPolicy is null.\n      */\n     public PassiveExpiringMap(final ExpirationPolicy<K, V> expiringPolicy,\n                               final Map<K, V> map) {\n         super(map);\n         if (expiringPolicy == null) {\n-            throw new IllegalArgumentException(\"Policy must not be null.\");\n+            throw new NullPointerException(\"Policy must not be null.\");\n         }\n         this.expiringPolicy = expiringPolicy;\n     }\n@@ -271,7 +271,7 @@ public PassiveExpiringMap(final long timeToLiveMillis) {\n      *        entries that NEVER expire. A zero value results in entries that\n      *        ALWAYS expire.\n      * @param map the map to decorate, must not be null.\n-     * @throws IllegalArgumentException if the map is null.\n+     * @throws NullPointerException if the map is null.\n      */\n     public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map) {\n         this(new ConstantTimeToLiveExpirationPolicy<K, V>(timeToLiveMillis),\n@@ -288,7 +288,7 @@ public PassiveExpiringMap(final long timeToLiveMillis, final Map<K, V> map) {\n      *        expire. A zero value results in entries that ALWAYS expire.\n      * @param timeUnit the unit of time for the <code>timeToLive</code>\n      *        parameter, must not be null.\n-     * @throws IllegalArgumentException if the time unit is null.\n+     * @throws NullPointerException if the time unit is null.\n      */\n     public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit) {\n         this(validateAndConvertToMillis(timeToLive, timeUnit));\n@@ -308,8 +308,7 @@ public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit) {\n      * @param timeUnit the unit of time for the <code>timeToLive</code>\n      *        parameter, must not be null.\n      * @param map the map to decorate, must not be null.\n-     * @throws IllegalArgumentException if the time unit is null.\n-     * @throws IllegalArgumentException if the map is null.\n+     * @throws NullPointerException if the map or time unit is null.\n      */\n     public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map) {\n         this(validateAndConvertToMillis(timeToLive, timeUnit), map);\n@@ -321,7 +320,7 @@ public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final\n      * being decorated, they also will NEVER expire.\n      *\n      * @param map the map to decorate, must not be null.\n-     * @throws IllegalArgumentException if the map is null.\n+     * @throws NullPointerException if the map is null.\n      */\n     public PassiveExpiringMap(final Map<K, V> map) {\n         this(-1L, map);",
                "deletions": 12
            },
            {
                "sha": "d895fa7569ba8036068d278fda1f44e6aa5baa90",
                "filename": "src/main/java/org/apache/commons/collections4/map/PredicatedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PredicatedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PredicatedMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/PredicatedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -72,7 +72,7 @@\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @return a new predicated map\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      * @since 4.0\n      */\n     public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map,\n@@ -88,7 +88,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n      * @param valuePredicate  the predicate to validate to values, null means no check\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected PredicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate,\n                             final Predicate<? super V> valuePredicate) {",
                "deletions": 2
            },
            {
                "sha": "aa1093158e63ac359680080743a82861522d3e71",
                "filename": "src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -65,7 +65,7 @@\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @return a new predicated sorted map\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      * @since 4.0\n      */\n     public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map,\n@@ -80,7 +80,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n      * @param valuePredicate  the predicate to validate to values, null means no check\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected PredicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate,\n             final Predicate<? super V> valuePredicate) {",
                "deletions": 2
            },
            {
                "sha": "a3362fe207c01224bfaa823fd6751506eb56b317",
                "filename": "src/main/java/org/apache/commons/collections4/map/SingletonMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/SingletonMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/SingletonMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/SingletonMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -43,7 +43,7 @@\n  * <p>\n  * If trying to remove or clear the map, an UnsupportedOperationException is thrown.\n  * If trying to put a new mapping into the map, an  IllegalArgumentException is thrown.\n- * The put method will only suceed if the key specified is the same as the\n+ * The put method will only succeed if the key specified is the same as the\n  * singleton key.\n  * <p>\n  * The key and value can be obtained by:",
                "deletions": 1
            },
            {
                "sha": "5b57bc648d01865f1687cda224699531c82b6511",
                "filename": "src/main/java/org/apache/commons/collections4/map/TransformedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/TransformedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/TransformedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/TransformedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -70,7 +70,7 @@\n      * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @return a new transformed map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map,\n@@ -93,7 +93,7 @@\n      * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @return a new transformed map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map,\n@@ -118,7 +118,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n      * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     protected TransformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer,\n             final Transformer<? super V, ? extends V> valueTransformer) {",
                "deletions": 3
            },
            {
                "sha": "6044d33298baa9302a325d8d91e9e38d5703805b",
                "filename": "src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -60,7 +60,7 @@\n      * @param keyTransformer  the predicate to validate the keys, null means no transformation\n      * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @return a new transformed sorted map\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      * @since 4.0\n      */\n     public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map,\n@@ -83,7 +83,7 @@\n      * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @return a new transformed sorted map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map,\n@@ -110,7 +110,7 @@\n      * @param map  the map to decorate, must not be null\n      * @param keyTransformer  the predicate to validate the keys, null means no transformation\n      * @param valueTransformer  the predicate to validate to values, null means no transformation\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected TransformedSortedMap(final SortedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,",
                "deletions": 3
            },
            {
                "sha": "99683f62b3f1951223d528b16bf4ecb3970ea418",
                "filename": "src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -22,10 +22,10 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.AbstractSetDecorator;\n import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections4.keyvalue.AbstractMapEntryDecorator;\n+import org.apache.commons.collections4.set.AbstractSetDecorator;\n \n /**\n  * Decorates a map entry <code>Set</code> to ensure it can't be altered.\n@@ -48,7 +48,7 @@\n      * @param <V>  the value type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable entry set\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      * @since 4.0\n      */\n     public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set) {\n@@ -63,7 +63,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     private UnmodifiableEntrySet(final Set<Map.Entry<K, V>> set) {\n         super(set);",
                "deletions": 3
            },
            {
                "sha": "c702363f6640c84064628bf50cd1592c75b4cdc5",
                "filename": "src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -24,13 +24,13 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.IterableMap;\n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.iterators.EntrySetMapIterator;\n import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>Map</code> to ensure it can't be altered.\n@@ -56,7 +56,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new unmodifiable map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map) {\n@@ -73,7 +73,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableMap(final Map<? extends K, ? extends V> map) {",
                "deletions": 3
            },
            {
                "sha": "848961ca4b034b1a91eb04f10bdc91aeeb91028b",
                "filename": "src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -24,12 +24,12 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.OrderedMap;\n import org.apache.commons.collections4.OrderedMapIterator;\n import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>OrderedMap</code> to ensure it can't be altered.\n@@ -54,7 +54,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new ordered map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map) {\n@@ -71,7 +71,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map) {",
                "deletions": 3
            },
            {
                "sha": "683aba8362bcd9fcbaa3eb2082ff65fec645b45f",
                "filename": "src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -26,9 +26,9 @@\n import java.util.Set;\n import java.util.SortedMap;\n \n-import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.collection.UnmodifiableCollection;\n+import org.apache.commons.collections4.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to ensure it can't be altered.\n@@ -54,7 +54,7 @@\n      * @param <V>  the value type\n      * @param map  the map to decorate, must not be null\n      * @return a new unmodifiable sorted map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map) {\n@@ -71,7 +71,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param map  the map to decorate, must not be null\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableSortedMap(final SortedMap<K, ? extends V> map) {",
                "deletions": 3
            },
            {
                "sha": "124e6859b6c8683b6bacdf5e0bc594ec7f57ce0a",
                "filename": "src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -269,6 +269,7 @@ public boolean put(final K key, final V value) {\n      * progress.\n      *\n      * @param map mappings to be stored in this map, may not be null\n+     * @return true if the map changed as a result of this operation\n      * @throws NullPointerException if map is null\n      */\n     @Override\n@@ -292,6 +293,7 @@ public boolean putAll(final Map<? extends K, ? extends V> map) {\n      * while the operation is in progress.\n      *\n      * @param map mappings to be stored in this map, may not be null\n+     * @return true if the map changed as a result of this operation\n      * @throws NullPointerException if map is null\n      */\n     @Override",
                "deletions": 0
            },
            {
                "sha": "d504cb20344f3a9785b9fd6e1b200a0d39b3e781",
                "filename": "src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -46,7 +46,7 @@ protected AbstractMultiSetDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param multiset  the multiset to decorate, must not be null\n-     * @throws IllegalArgumentException if multiset is null\n+     * @throws NullPointerException if multiset is null\n      */\n     protected AbstractMultiSetDecorator(final MultiSet<E> multiset) {\n         super(multiset);",
                "deletions": 1
            },
            {
                "sha": "a98dbbd2e69043c2a376610f936a9ae45a5fc72f",
                "filename": "src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -52,7 +52,7 @@ protected AbstractQueueDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param queue  the queue to decorate, must not be null\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if queue is null\n      */\n     protected AbstractQueueDecorator(final Queue<E> queue) {\n         super(queue);",
                "deletions": 1
            },
            {
                "sha": "3f35e874cfe1d1fdeda07fbc95d7b82bba64cba0",
                "filename": "src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,7 +50,7 @@\n      * @param Queue  the queue to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated queue\n-     * @throws IllegalArgumentException if queue or predicate is null\n+     * @throws NullPointerException if queue or predicate is null\n      * @throws IllegalArgumentException if the queue contains invalid elements\n      */\n     public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue,\n@@ -67,7 +67,7 @@\n      *\n      * @param queue  the queue to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if Queue or predicate is null\n+     * @throws NullPointerException if queue or predicate is null\n      * @throws IllegalArgumentException if the Queue contains invalid elements\n      */\n     protected PredicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "c314c053503080546676a085de5f6b194142e57f",
                "filename": "src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Queue\n-     * @throws IllegalArgumentException if queue or transformer is null\n+     * @throws NullPointerException if queue or transformer is null\n      */\n     public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue,\n                                                             final Transformer<? super E, ? extends E> transformer) {\n@@ -67,7 +67,7 @@\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Queue\n-     * @throws IllegalArgumentException if queue or transformer is null\n+     * @throws NullPointerException if queue or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue,\n@@ -94,7 +94,7 @@\n      *\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if queue or transformer is null\n+     * @throws NullPointerException if queue or transformer is null\n      */\n     protected TransformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer) {\n         super(queue, transformer);",
                "deletions": 3
            },
            {
                "sha": "05451c9bb438a51b9584fc43abf8f35c78d654ca",
                "filename": "src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <E> the type of the elements in the queue\n      * @param queue  the queue to decorate, must not be null\n      * @return an unmodifiable Queue\n-     * @throws IllegalArgumentException if queue is null\n+     * @throws NullPointerException if queue is null\n      */\n     public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue) {\n         if (queue instanceof Unmodifiable) {\n@@ -65,7 +65,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param queue  the queue to decorate, must not be null\n-     * @throws IllegalArgumentException if queue is null\n+     * @throws NullPointerException if queue is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableQueue(final Queue<? extends E> queue) {",
                "deletions": 2
            },
            {
                "sha": "e4a337cc4d0132a8f8a4d6e3c82aeda84f39af22",
                "filename": "src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -46,7 +46,7 @@ protected AbstractNavigableSetDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     protected AbstractNavigableSetDecorator(final NavigableSet<E> set) {\n         super(set);",
                "deletions": 1
            },
            {
                "sha": "e8e74e376c60d1dd5bf11b7d2b462ff917e01b79",
                "filename": "src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -38,7 +38,7 @@\n      * Constructor.\n      *\n      * @param set  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     protected AbstractSerializableSetDecorator(final Set<E> set) {\n         super(set);",
                "deletions": 1
            },
            {
                "sha": "e616623e1ec0a61ce10f39f2f0c9f90a1d017ff8",
                "filename": "src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -47,7 +47,7 @@ protected AbstractSetDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     protected AbstractSetDecorator(final Set<E> set) {\n         super(set);",
                "deletions": 1
            },
            {
                "sha": "44818ae4d57a6729869d9271c92a7ade92dbe53b",
                "filename": "src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@ protected AbstractSortedSetDecorator() {\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     protected AbstractSortedSetDecorator(final Set<E> set) {\n         super(set);",
                "deletions": 1
            },
            {
                "sha": "14fe6c0e38ca6c067d3e79ffc3bd84f8ff70d25f",
                "filename": "src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -70,16 +70,16 @@\n      * @param set the set to decorate, must be empty and not null\n      * @param list the list to decorate, must be empty and not null\n      * @return a new ordered set\n-     * @throws IllegalArgumentException if set or list is null\n+     * @throws NullPointerException if set or list is null\n      * @throws IllegalArgumentException if either the set or list is not empty\n      * @since 4.0\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list) {\n         if (set == null) {\n-            throw new IllegalArgumentException(\"Set must not be null\");\n+            throw new NullPointerException(\"Set must not be null\");\n         }\n         if (list == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         if (set.size() > 0 || list.size() > 0) {\n             throw new IllegalArgumentException(\"Set and List must be empty\");\n@@ -95,7 +95,7 @@\n      * @param <E> the element type\n      * @param set the set to decorate, must not be null\n      * @return a new ordered set\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      * @since 4.0\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set) {\n@@ -113,12 +113,12 @@\n      * @param <E> the element type\n      * @param list the list to decorate, must not be null\n      * @return a new ordered set\n-     * @throws IllegalArgumentException if list is null\n+     * @throws NullPointerException if list is null\n      * @since 4.0\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list) {\n         if (list == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         CollectionUtils.filter(list, UniquePredicate.uniquePredicate());\n         final Set<E> set = new HashSet<E>(list);\n@@ -157,12 +157,12 @@ protected ListOrderedSet(final Set<E> set) {\n      *\n      * @param set the set to decorate, must not be null\n      * @param list the list to decorate, must not be null\n-     * @throws IllegalArgumentException if set or list is null\n+     * @throws NullPointerException if set or list is null\n      */\n     protected ListOrderedSet(final Set<E> set, final List<E> list) {\n         super(set);\n         if (list == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n+            throw new NullPointerException(\"List must not be null\");\n         }\n         setOrder = list;\n     }",
                "deletions": 8
            },
            {
                "sha": "f1a4f1307fff533b4b8766bf200fae77c16838ac",
                "filename": "src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -53,7 +53,7 @@\n      * @param <V> the dummy value type in the map\n      * @param map  the map to decorate, must not be null\n      * @return a new map backed set\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map) {\n@@ -68,13 +68,10 @@\n      * @param map  the map to decorate, must not be null\n      * @param dummyValue  the dummy value to use\n      * @return a new map backed set\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      * @since 4.0\n      */\n     public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue) {\n-        if (map == null) {\n-            throw new IllegalArgumentException(\"The map must not be null\");\n-        }\n         return new MapBackedSet<E, V>(map, dummyValue);\n     }\n \n@@ -84,10 +81,13 @@\n      *\n      * @param map  the map to decorate, must not be null\n      * @param dummyValue  the dummy value to use\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map is null\n      */\n     private MapBackedSet(final Map<E, ? super V> map, final V dummyValue) {\n         super();\n+        if (map == null) {\n+            throw new NullPointerException(\"The map must not be null\");\n+        }\n         this.map = map;\n         this.dummyValue = dummyValue;\n     }",
                "deletions": 6
            },
            {
                "sha": "265c8c8b427bc875bf2cce1eb3516c8dc1a011d5",
                "filename": "src/main/java/org/apache/commons/collections4/set/PredicatedNavigableSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedNavigableSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedNavigableSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/PredicatedNavigableSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -54,7 +54,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated navigable set.\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      * @since 4.0\n      */\n@@ -72,7 +72,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     protected PredicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "6ad3c8767b233716eac9c290165315382446cd0e",
                "filename": "src/main/java/org/apache/commons/collections4/set/PredicatedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -52,7 +52,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a decorated set\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      * @since 4.0\n      */\n@@ -69,7 +69,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     protected PredicatedSet(final Set<E> set, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "0610a64b21a40a6cd332e55dafbcd59ca0e77ef7",
                "filename": "src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -56,7 +56,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated sorted set.\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      * @since 4.0\n      */\n@@ -74,7 +74,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws NullPointerException if set or predicate is null\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     protected PredicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate) {",
                "deletions": 2
            },
            {
                "sha": "9d431dc4d2fd9485b78dfffe0a4ad32c3cca9e35",
                "filename": "src/main/java/org/apache/commons/collections4/set/TransformedNavigableSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedNavigableSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedNavigableSet.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/TransformedNavigableSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link NavigableSet}\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      */\n     public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set,\n             final Transformer<? super E, ? extends E> transformer) {\n@@ -67,13 +67,13 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link NavigableSet}\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      */\n     public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set,\n             final Transformer<? super E, ? extends E> transformer) {\n \n         final TransformedNavigableSet<E> decorated = new TransformedNavigableSet<E>(set, transformer);\n-        if (transformer != null && set != null && set.size() > 0) {\n+        if (set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n             final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics\n             set.clear();\n@@ -93,7 +93,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      */\n     protected TransformedNavigableSet(final NavigableSet<E> set,\n                                       final Transformer<? super E, ? extends E> transformer) {",
                "deletions": 4
            },
            {
                "sha": "f0603d05cafeb67b5826cfb69324f47910c59614",
                "filename": "src/main/java/org/apache/commons/collections4/set/TransformedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedSet.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/TransformedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,7 +50,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed set\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedSet<E> transformingSet(final Set<E> set,\n@@ -70,12 +70,12 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed set\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      * @since 4.0\n      */\n     public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer) {\n         final TransformedSet<E> decorated = new TransformedSet<E>(set, transformer);\n-        if (transformer != null && set != null && set.size() > 0) {\n+        if (set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n             final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics\n             set.clear();\n@@ -95,7 +95,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      */\n     protected TransformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer) {\n         super(set, transformer);",
                "deletions": 4
            },
            {
                "sha": "29ae3fd55575c3c830f9dc5f5349c410c6d06087",
                "filename": "src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -50,7 +50,7 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link SortedSet}\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set,\n@@ -70,14 +70,14 @@\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link SortedSet}\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      * @since 4.0\n      */\n     public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set,\n             final Transformer<? super E, ? extends E> transformer) {\n \n         final TransformedSortedSet<E> decorated = new TransformedSortedSet<E>(set, transformer);\n-        if (transformer != null && set != null && set.size() > 0) {\n+        if (set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n             final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics\n             set.clear();\n@@ -97,7 +97,7 @@\n      *\n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n-     * @throws IllegalArgumentException if set or transformer is null\n+     * @throws NullPointerException if set or transformer is null\n      */\n     protected TransformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer) {\n         super(set, transformer);",
                "deletions": 4
            },
            {
                "sha": "ec96f3353acf331930f1f05cc2dc1525c6506f0f",
                "filename": "src/main/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -48,7 +48,7 @@\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable {@link NavigableSet}\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set) {\n         if (set instanceof Unmodifiable) {\n@@ -62,7 +62,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     private UnmodifiableNavigableSet(final NavigableSet<E> set) {\n         super(set);",
                "deletions": 2
            },
            {
                "sha": "40287e53f50edb5a9939b59cd6305171b72d0170",
                "filename": "src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -46,7 +46,7 @@\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable set\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      * @since 4.0\n      */\n     public static <E> Set<E> unmodifiableSet(final Set<? extends E> set) {\n@@ -63,7 +63,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     @SuppressWarnings(\"unchecked\") // safe to upcast\n     private UnmodifiableSet(final Set<? extends E> set) {",
                "deletions": 2
            },
            {
                "sha": "26f6d8f3eea3942fa54ef15f07e8533b3d80c40e",
                "filename": "src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n      * @return a new unmodifiable {@link SortedSet}\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      * @since 4.0\n      */\n     public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set) {\n@@ -64,7 +64,7 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param set  the set to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws NullPointerException if set is null\n      */\n     private UnmodifiableSortedSet(final SortedSet<E> set) {\n         super(set);",
                "deletions": 2
            },
            {
                "sha": "08026371a90002a5cb0001874bc9160dea4a84cd",
                "filename": "src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -38,10 +38,14 @@\n \n     /**\n      * Create a new AbstractSplitMapDecorator.\n-     * @param decorated the Map to decorate\n+     * @param map the map to decorate, must not be null\n+     * @throws NullPointerException if map is null\n      */\n-    public AbstractIterableGetMapDecorator(final Map<K, V> decorated) {\n-        this.map = decorated;\n+    public AbstractIterableGetMapDecorator(final Map<K, V> map) {\n+        if (map == null) {\n+            throw new NullPointerException(\"Map must not be null.\");\n+        }\n+        this.map = map;\n     }\n \n     /**",
                "deletions": 3
            },
            {
                "sha": "cb67c4573592292edfb3a8a23206c821a1ea9ca4",
                "filename": "src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
                "status": "modified",
                "changes": 22,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -55,7 +55,7 @@\n  * @since 4.0\n  * @version $Id$\n  *\n- * @see org.apache.commons.collections4.SplitMapUtils#readableMap(Get)\n+ * @see org.apache.commons.collections4.SplitMapUtils#readableMap(org.apache.commons.collections4.Get)\n  * @see org.apache.commons.collections4.SplitMapUtils#writableMap(Put)\n  */\n public class TransformedSplitMap<J, K, U, V> extends AbstractIterableGetMapDecorator<K, V>\n@@ -80,12 +80,10 @@\n      * @param <U>  the input value type\n      * @param <V>  the output value type\n      * @param map the map to decorate, must not be null\n-     * @param keyTransformer the transformer to use for key conversion, null\n-     *   means no transformation\n-     * @param valueTransformer the transformer to use for value conversion, null\n-     *   means no transformation\n+     * @param keyTransformer the transformer to use for key conversion, must not be null\n+     * @param valueTransformer the transformer to use for value conversion, must not be null\n      * @return a new transformed map\n-     * @throws IllegalArgumentException if map is null\n+     * @throws NullPointerException if map or either of the transformers is null\n      */\n     public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map,\n             final Transformer<? super J, ? extends K> keyTransformer,\n@@ -101,21 +99,19 @@\n      * are NOT transformed.\n      *\n      * @param map the map to decorate, must not be null\n-     * @param keyTransformer the transformer to use for key conversion, null\n-     * means no conversion\n-     * @param valueTransformer the transformer to use for value conversion, null\n-     * means no conversion\n-     * @throws IllegalArgumentException if map is null\n+     * @param keyTransformer the transformer to use for key conversion, must not be null\n+     * @param valueTransformer the transformer to use for value conversion, must not be null\n+     * @throws NullPointerException if map or either of the transformers is null\n      */\n     protected TransformedSplitMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer,\n             final Transformer<? super U, ? extends V> valueTransformer) {\n         super(map);\n         if (keyTransformer == null) {\n-            throw new IllegalArgumentException(\"keyTransformer cannot be null\");\n+            throw new NullPointerException(\"KeyTransformer must not be null.\");\n         }\n         this.keyTransformer = keyTransformer;\n         if (valueTransformer == null) {\n-            throw new IllegalArgumentException(\"valueTransformer cannot be null\");\n+            throw new NullPointerException(\"ValueTransformer must not be null.\");\n         }\n         this.valueTransformer = valueTransformer;\n     }",
                "deletions": 13
            },
            {
                "sha": "3776fec8cfd4b1567cca6b5098590488f5c2cdc2",
                "filename": "src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -49,7 +49,7 @@\n      * @param <V>  the value type\n      * @param trie  the trie to decorate, must not be null\n      * @return a new unmodifiable trie\n-     * @throws IllegalArgumentException if trie is null\n+     * @throws NullPointerException if trie is null\n      */\n     public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n         if (trie instanceof Unmodifiable) {\n@@ -65,11 +65,11 @@\n      * Constructor that wraps (not copies).\n      *\n      * @param trie  the trie to decorate, must not be null\n-     * @throws IllegalArgumentException if trie is null\n+     * @throws NullPointerException if trie is null\n      */\n     public UnmodifiableTrie(final Trie<K, ? extends V> trie) {\n         if (trie == null) {\n-            throw new IllegalArgumentException(\"Trie must not be null\");\n+            throw new NullPointerException(\"Trie must not be null\");\n         }\n         @SuppressWarnings(\"unchecked\") // safe to upcast\n         final Trie<K, V> tmpTrie = (Trie<K, V>) trie;",
                "deletions": 3
            },
            {
                "sha": "a7f36aedb14ecc5a1d71107d6908dacf2f0b9015",
                "filename": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/BagUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/BagUtilsTest.java",
                "status": "modified",
                "changes": 52,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/BagUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,9 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.bag.PredicatedBag;\n@@ -52,8 +50,8 @@ public void testSynchronizedBag() {\n             bag instanceof SynchronizedBag);\n         try {\n             BagUtils.synchronizedBag(null);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -65,8 +63,8 @@ public void testUnmodifiableBag() {\n             bag instanceof UnmodifiableBag);\n         try {\n             BagUtils.unmodifiableBag(null);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         \n@@ -80,14 +78,14 @@ public void testPredicatedBag() {\n             bag instanceof PredicatedBag);\n         try {\n             BagUtils.predicatedBag(null,truePredicate);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             BagUtils.predicatedBag(new HashBag<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -99,14 +97,14 @@ public void testTransformedBag() {\n             bag instanceof TransformedBag);\n         try {\n             BagUtils.transformingBag(null, nopTransformer);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             BagUtils.transformingBag(new HashBag<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null transformer.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null transformer.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -118,8 +116,8 @@ public void testSynchronizedSortedBag() {\n             bag instanceof SynchronizedSortedBag);\n         try {\n             BagUtils.synchronizedSortedBag(null);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -131,8 +129,8 @@ public void testUnmodifiableSortedBag() {\n             bag instanceof UnmodifiableSortedBag);\n         try {\n             BagUtils.unmodifiableSortedBag(null);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         \n@@ -146,14 +144,14 @@ public void testPredicatedSortedBag() {\n             bag instanceof PredicatedSortedBag);\n         try {\n             BagUtils.predicatedSortedBag(null, truePredicate);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             BagUtils.predicatedSortedBag(new TreeBag<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -165,14 +163,14 @@ public void testTransformedSortedBag() {\n             bag instanceof TransformedSortedBag);\n         try {\n             BagUtils.transformingSortedBag(null, nopTransformer);\n-            fail(\"Expecting IllegalArgumentException for null bag.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null bag.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             BagUtils.transformingSortedBag(new TreeBag<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null transformer.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null transformer.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "deletions": 27
            },
            {
                "sha": "d9c2defcb7e8e2666bec61d270c7bc9d6708717c",
                "filename": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -140,15 +137,15 @@ public void testWhileClosure() {\n         try {\n             ClosureUtils.whileClosure(null, ClosureUtils.nopClosure());\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.whileClosure(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // doWhileClosure\n@@ -167,7 +164,7 @@ public void testDoWhileClosure() {\n         try {\n             ClosureUtils.doWhileClosure(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // chainedClosure\n@@ -204,26 +201,26 @@ public void testChainedClosure() {\n         try {\n             ClosureUtils.chainedClosure(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<Object>chainedClosure((Closure[]) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<Object>chainedClosure(new Closure[] {null, null});\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             coll = new ArrayList<Closure<Object>>();\n             coll.add(null);\n             coll.add(null);\n             ClosureUtils.chainedClosure(coll);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // ifClosure\n@@ -324,19 +321,19 @@ public void testSwitchClosure() {\n         try {\n             ClosureUtils.switchClosure(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<String>switchClosure((Predicate<String>[]) null, (Closure<String>[]) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<String>switchClosure((Map<Predicate<String>, Closure<String>>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<String>switchClosure(new Predicate[2], new Closure[2]);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             ClosureUtils.<String>switchClosure(\n                     new Predicate[] { TruePredicate.<String>truePredicate() },\n@@ -385,7 +382,7 @@ public void testSwitchMapClosure() {\n         try {\n             ClosureUtils.switchMapClosure(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // asClosure",
                "deletions": 18
            },
            {
                "sha": "8959626cd575362dc6a9aba268ddac5136ba8466",
                "filename": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -581,7 +581,7 @@ public int hash(final Integer o) {\n         assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testIsEqualCollectionNullEquator() {\n         CollectionUtils.isEqualCollection(collectionA, collectionA, null);\n     }\n@@ -1324,14 +1324,14 @@ public void predicatedCollection() {\n         assertTrue(\"returned object should be a PredicatedCollection\", collection instanceof PredicatedCollection);\n         try {\n             CollectionUtils.predicatedCollection(new ArrayList<Number>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             CollectionUtils.predicatedCollection(null, predicate);\n-            fail(\"Expecting IllegalArgumentException for null collection.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null collection.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -1499,14 +1499,14 @@ public void testTransformedCollection() {\n         assertTrue(\"returned object should be a TransformedCollection\", collection instanceof TransformedCollection);\n         try {\n             CollectionUtils.transformingCollection(new ArrayList<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null transformer.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null transformer.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             CollectionUtils.transformingCollection(null, transformer);\n-            fail(\"Expecting IllegalArgumentException for null collection.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null collection.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -1543,8 +1543,8 @@ public void testUnmodifiableCollection() {\n         assertTrue(\"Returned object should be a UnmodifiableCollection.\", col instanceof UnmodifiableCollection);\n         try {\n             CollectionUtils.unmodifiableCollection(null);\n-            fail(\"Expecting IllegalArgumentException for null collection.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null collection.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -1676,8 +1676,8 @@ public void extractSingleton() {\n         ArrayList<String> coll = null;\n         try {\n             CollectionUtils.extractSingleton(coll);\n-            fail(\"expected IllegalArgumentException from extractSingleton(null)\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"expected NullPointerException from extractSingleton(null)\");\n+        } catch (final NullPointerException e) {\n         }\n         coll = new ArrayList<String>();\n         try {\n@@ -1703,12 +1703,12 @@ public void extractSingleton() {\n         expect(iterator.next()).andReturn(t);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void collateException1() {\n         CollectionUtils.collate(collectionA, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void collateException2() {\n         CollectionUtils.collate(collectionA, collectionC, null);\n     }",
                "deletions": 15
            },
            {
                "sha": "f3222c08fe3987a26131e1a726dd126cc9ad4e71",
                "filename": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,12 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -254,7 +249,7 @@ public int getValue() {\n     // instantiateFactory\n     //------------------------------------------------------------------\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void instantiateFactoryNull() {\n         FactoryUtils.instantiateFactory(null);\n     }",
                "deletions": 7
            },
            {
                "sha": "7c43997d34a9128039d09b5acf85dd4ed5c08185",
                "filename": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/ListUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/ListUtilsTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/ListUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,11 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -137,13 +133,13 @@ public boolean evaluate(final Object o) {\n         try {\n             ListUtils.predicatedList(new ArrayList<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             ListUtils.predicatedList(null, predicate);\n             fail(\"Expecting IllegalArgumentException for null list.\");\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -326,17 +322,17 @@ public void testLongestCommonSubsequence() {\n         try {\n             ListUtils.longestCommonSubsequence((List<?>) null, null);\n             fail(\"failed to check for null argument\");\n-        } catch (final IllegalArgumentException e) {}\n+        } catch (final NullPointerException e) {}\n \n         try {\n             ListUtils.longestCommonSubsequence(Arrays.asList('A'), null);\n             fail(\"failed to check for null argument\");\n-        } catch (final IllegalArgumentException e) {}\n+        } catch (final NullPointerException e) {}\n \n         try {\n             ListUtils.longestCommonSubsequence(null, Arrays.asList('A'));\n             fail(\"failed to check for null argument\");\n-        } catch (final IllegalArgumentException e) {}\n+        } catch (final NullPointerException e) {}\n \n         @SuppressWarnings(\"unchecked\")\n         List<Character> lcs = ListUtils.longestCommonSubsequence(Collections.EMPTY_LIST, Collections.EMPTY_LIST);\n@@ -367,17 +363,17 @@ public void testLongestCommonSubsequenceWithString() {\n       try {\n           ListUtils.longestCommonSubsequence((String) null, null);\n           fail(\"failed to check for null argument\");\n-      } catch (final IllegalArgumentException e) {}\n+      } catch (final NullPointerException e) {}\n \n       try {\n           ListUtils.longestCommonSubsequence(\"A\", null);\n           fail(\"failed to check for null argument\");\n-      } catch (final IllegalArgumentException e) {}\n+      } catch (final NullPointerException e) {}\n \n       try {\n           ListUtils.longestCommonSubsequence(null, \"A\");\n           fail(\"failed to check for null argument\");\n-      } catch (final IllegalArgumentException e) {}\n+      } catch (final NullPointerException e) {}\n \n       String lcs = ListUtils.longestCommonSubsequence(\"\", \"\");\n       assertEquals(0, lcs.length());\n@@ -416,7 +412,7 @@ public void testPartition() {\n         try {\n             ListUtils.partition(null, 3);\n             fail(\"failed to check for null argument\");\n-        } catch (final IllegalArgumentException e) {}\n+        } catch (final NullPointerException e) {}\n \n         try {\n             ListUtils.partition(strings, 0);",
                "deletions": 14
            },
            {
                "sha": "20b18886a94a5ac60de20da479974a7e83b53366",
                "filename": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/MapUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/MapUtilsTest.java",
                "status": "modified",
                "changes": 38,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/MapUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,25 +16,21 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.io.ByteArrayOutputStream;\n import java.io.PrintStream;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.ListResourceBundle;\n import java.util.Map;\n import java.util.ResourceBundle;\n import java.util.Set;\n import java.util.TreeMap;\n-import java.util.List;\n-import java.util.ArrayList;\n \n import org.apache.commons.collections4.collection.TransformedCollectionTest;\n import org.apache.commons.collections4.keyvalue.DefaultKeyValue;\n@@ -68,8 +64,8 @@ public void testPredicatedMap() {\n         assertTrue(\"returned object should be a PredicatedMap\", map instanceof PredicatedMap);\n         try {\n             MapUtils.predicatedMap(null, p, p);\n-            fail(\"Expecting IllegalArgumentException for null map.\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null map.\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n     }\n@@ -81,29 +77,29 @@ public void testLazyMapFactory() {\n         assertTrue(map instanceof LazyMap);\n         try {\n             map = MapUtils.lazyMap(new HashMap<Object, Object>(), (Factory<Object>) null);\n-            fail(\"Expecting IllegalArgumentException for null factory\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null factory\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n         try {\n             map = MapUtils.lazyMap((Map<Object, Object>) null, factory);\n-            fail(\"Expecting IllegalArgumentException for null map\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null map\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n         final Transformer<Object, Integer> transformer = TransformerUtils.asTransformer(factory);\n         map = MapUtils.lazyMap(new HashMap<Object, Object>(), transformer);\n         assertTrue(map instanceof LazyMap);\n         try {\n             map = MapUtils.lazyMap(new HashMap<Object, Object>(), (Transformer<Object, Object>) null);\n-            fail(\"Expecting IllegalArgumentException for null transformer\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null transformer\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n         try {\n             map = MapUtils.lazyMap((Map<Object, Object>) null, transformer);\n-            fail(\"Expecting IllegalArgumentException for null map\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null map\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n     }\n@@ -859,8 +855,8 @@ public Integer transform(X input) {\n     public void testIterableMap() {\n         try {\n             MapUtils.iterableMap(null);\n-            fail(\"Should throw IllegalArgumentException\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Should throw NullPointerException\");\n+        } catch (final NullPointerException e) {\n         }\n         final HashMap<String, String> map = new HashMap<String, String>();\n         map.put(\"foo\", \"foov\");\n@@ -877,8 +873,8 @@ public void testIterableMap() {\n     public void testIterableSortedMap() {\n         try {\n             MapUtils.iterableSortedMap(null);\n-            fail(\"Should throw IllegalArgumentException\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Should throw NullPointerException\");\n+        } catch (final NullPointerException e) {\n         }\n         final TreeMap<String, String> map = new TreeMap<String, String>();\n         map.put(\"foo\", \"foov\");",
                "deletions": 21
            },
            {
                "sha": "73a0c816940739b6431d87c03b3b9949d074adbe",
                "filename": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java",
                "status": "modified",
                "changes": 73,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,12 +16,9 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;\n-import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n+import static org.apache.commons.collections4.functors.NullPredicate.*;\n+import static org.apache.commons.collections4.functors.TruePredicate.*;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -133,7 +130,7 @@ public void testNotPredicate() {\n         assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cInteger));\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testNotPredicateEx() {\n         PredicateUtils.notPredicate(null);\n     }\n@@ -149,7 +146,7 @@ public void testAndPredicate() {\n         assertEquals(false, PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAndPredicateEx() {\n         PredicateUtils.andPredicate(null, null);\n     }\n@@ -199,24 +196,24 @@ public void testAllPredicate() {\n         assertTrue(AllPredicate.allPredicate(coll), null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAllPredicateEx1() {\n         AllPredicate.allPredicate((Predicate<Object>[]) null);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAllPredicateEx2() {\n         AllPredicate.<Object>allPredicate(new Predicate[] { null });\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAllPredicateEx3() {\n         AllPredicate.allPredicate(new Predicate[] { null, null });\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAllPredicateEx4() {\n         AllPredicate.allPredicate((Collection<Predicate<Object>>) null);\n     }\n@@ -226,7 +223,7 @@ public void testAllPredicateEx5() {\n         AllPredicate.allPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAllPredicateEx6() {\n         final Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n         coll.add(null);\n@@ -245,7 +242,7 @@ public void testOrPredicate() {\n         assertEquals(false, PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testOrPredicateEx() {\n         PredicateUtils.orPredicate(null, null);\n     }\n@@ -296,24 +293,24 @@ public void testAnyPredicate() {\n         assertFalse(PredicateUtils.anyPredicate(coll), null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAnyPredicateEx1() {\n         PredicateUtils.anyPredicate((Predicate<Object>[]) null);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAnyPredicateEx2() {\n         PredicateUtils.anyPredicate(new Predicate[] {null});\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAnyPredicateEx3() {\n         PredicateUtils.anyPredicate(new Predicate[] {null, null});\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAnyPredicateEx4() {\n         PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null);\n     }\n@@ -323,7 +320,7 @@ public void testAnyPredicateEx5() {\n         PredicateUtils.anyPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testAnyPredicateEx6() {\n         final Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n         coll.add(null);\n@@ -342,7 +339,7 @@ public void testEitherPredicate() {\n         assertEquals(false, PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testEitherPredicateEx() {\n         PredicateUtils.eitherPredicate(null, null);\n     }\n@@ -396,24 +393,24 @@ public void testOnePredicate() {\n         assertFalse(PredicateUtils.onePredicate(coll), null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class) \n+    @Test(expected=NullPointerException.class) \n     public void testOnePredicateEx1() {\n         PredicateUtils.onePredicate((Predicate<Object>[]) null);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testOnePredicateEx2() {\n         PredicateUtils.onePredicate(new Predicate[] {null});\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testOnePredicateEx3() {\n         PredicateUtils.onePredicate(new Predicate[] {null, null});\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testOnePredicateEx4() {\n         PredicateUtils.onePredicate((Collection<Predicate<Object>>) null);\n     }\n@@ -424,7 +421,7 @@ public void testOnePredicateEx5() {\n         PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testOnePredicateEx6() {\n         final Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n         coll.add(null);\n@@ -443,7 +440,7 @@ public void testNeitherPredicate() {\n         assertEquals(true, PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNeitherPredicateEx() {\n         PredicateUtils.neitherPredicate(null, null);\n     }\n@@ -493,24 +490,24 @@ public void testNonePredicate() {\n         assertTrue(PredicateUtils.nonePredicate(coll), null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNonePredicateEx1() {\n         PredicateUtils.nonePredicate((Predicate<Object>[]) null);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNonePredicateEx2() {\n         PredicateUtils.nonePredicate(new Predicate[] {null});\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNonePredicateEx3() {\n         PredicateUtils.nonePredicate(new Predicate[] {null, null});\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNonePredicateEx4() {\n         PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null);\n     }\n@@ -520,7 +517,7 @@ public void testNonePredicateEx5() {\n         PredicateUtils.nonePredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNonePredicateEx6() {\n         final Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n         coll.add(null);\n@@ -563,7 +560,7 @@ public void testAsPredicateTransformer() {\n         assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(true));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testAsPredicateTransformerEx1() {\n         PredicateUtils.asPredicate(null);\n     }\n@@ -584,7 +581,7 @@ public void testInvokerPredicate() {\n         assertEquals(false, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvokerPredicateEx1() {\n         PredicateUtils.invokerPredicate(null);\n     }\n@@ -612,7 +609,7 @@ public void testInvokerPredicate2() {\n             \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvokerPredicate2Ex1() {\n         PredicateUtils.invokerPredicate(null, null, null);\n     }\n@@ -637,7 +634,7 @@ public void testNullIsExceptionPredicate() {\n         PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNullIsExceptionPredicateEx1() {\n         PredicateUtils.nullIsExceptionPredicate(null);\n     }\n@@ -652,7 +649,7 @@ public void testNullIsTruePredicate() {\n         assertEquals(false, PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNullIsTruePredicateEx1() {\n         PredicateUtils.nullIsTruePredicate(null);\n     }\n@@ -667,7 +664,7 @@ public void testNullIsFalsePredicate() {\n         assertEquals(false, PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testNullIsFalsePredicateEx1() {\n         PredicateUtils.nullIsFalsePredicate(null);\n     }\n@@ -690,7 +687,7 @@ public void testTransformedPredicate() {\n         try {\n             PredicateUtils.transformedPredicate(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // misc tests",
                "deletions": 38
            },
            {
                "sha": "10bfaef7aa23a8427d240f69430af48f3d68e4d5",
                "filename": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,9 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.LinkedList;\n import java.util.Queue;\n@@ -47,8 +45,8 @@ public void testUnmodifiableQueue() {\n         assertTrue(\"Returned object should be an UnmodifiableQueue.\", queue instanceof UnmodifiableQueue);\n         try {\n             QueueUtils.unmodifiableQueue(null);\n-            fail(\"Expecting IllegalArgumentException for null queue.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null queue.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         \n@@ -61,14 +59,14 @@ public void testPredicatedQueue() {\n         assertTrue(\"Returned object should be a PredicatedQueue.\", queue instanceof PredicatedQueue);\n         try {\n             QueueUtils.predicatedQueue(null, truePredicate);\n-            fail(\"Expecting IllegalArgumentException for null queue.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null queue.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             QueueUtils.predicatedQueue(new LinkedList<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -79,14 +77,14 @@ public void testTransformedQueue() {\n         assertTrue(\"Returned object should be an TransformedQueue.\", queue instanceof TransformedQueue);\n         try {\n             QueueUtils.transformingQueue(null, nopTransformer);\n-            fail(\"Expecting IllegalArgumentException for null queue.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null queue.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             QueueUtils.transformingQueue(new LinkedList<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null transformer.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null transformer.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "deletions": 13
            },
            {
                "sha": "ff5a54fbe0d9feb2bb5f45e4fc9244fc8c067926",
                "filename": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/SetUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/SetUtilsTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/SetUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.Arrays;\n import java.util.Collection;\n@@ -47,14 +44,14 @@ public boolean evaluate(final Object o) {\n         assertTrue(\"returned object should be a PredicatedSet\", set instanceof PredicatedSet);\n         try {\n             SetUtils.predicatedSet(new HashSet<Object>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             SetUtils.predicatedSet(null, predicate);\n-            fail(\"Expecting IllegalArgumentException for null set.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null set.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "deletions": 8
            },
            {
                "sha": "6c558943835f1e764bb5c1942ef0cc3f66951e01",
                "filename": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,10 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Collection;\n@@ -152,7 +149,7 @@ public void testExecutorTransformer() {\n         assertEquals(cInteger, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cInteger));\n         try {\n             TransformerUtils.asTransformer((Closure<Object>) null);\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             return;\n         }\n         fail();\n@@ -186,7 +183,7 @@ public void testFactoryTransformer() {\n         assertEquals(null, TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cInteger));\n         try {\n             TransformerUtils.asTransformer((Factory<Object>) null);\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             return;\n         }\n         fail();\n@@ -215,26 +212,26 @@ public void testChainedTransformer() {\n         try {\n             TransformerUtils.chainedTransformer(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.chainedTransformer((Transformer[]) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.chainedTransformer((Collection<Transformer<Object, Object>>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.chainedTransformer(new Transformer[] {null, null});\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             coll = new ArrayList<Transformer<Object, Object>>();\n             coll.add(null);\n             coll.add(null);\n             TransformerUtils.chainedTransformer(coll);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // ifTransformer\n@@ -266,19 +263,19 @@ public boolean evaluate(Integer value) {\n         try {\n             TransformerUtils.ifTransformer(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.ifTransformer(TruePredicate.truePredicate(), null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.ifTransformer(null, ConstantTransformer.constantTransformer(\"A\"));\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.ifTransformer(null, null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n     \n     // switchTransformer\n@@ -326,19 +323,19 @@ public void testSwitchTransformer() {\n         try {\n             TransformerUtils.switchTransformer(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.switchTransformer((Predicate[]) null, (Transformer[]) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.switchTransformer((Map<Predicate<Object>, Transformer<Object, Object>>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.switchTransformer(new Predicate[2], new Transformer[2]);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.switchTransformer(\n                     new Predicate[] { TruePredicate.truePredicate() },\n@@ -373,7 +370,7 @@ public void testSwitchMapTransformer() {\n         try {\n             TransformerUtils.switchMapTransformer(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     // invokerTransformer\n@@ -390,7 +387,7 @@ public void testInvokerTransformer() {\n         try {\n             TransformerUtils.invokerTransformer(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.invokerTransformer(\"noSuchMethod\").transform(new Object());\n             fail();\n@@ -414,7 +411,7 @@ public void testInvokerTransformer2() {\n         try {\n             TransformerUtils.invokerTransformer(null, null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n         try {\n             TransformerUtils.invokerTransformer(\"noSuchMethod\", new Class[] { Object.class },\n                     new Object[] { cString }).transform(new Object());",
                "deletions": 22
            },
            {
                "sha": "71c78075b29d1d1ba0a980c85804e53b63f87885",
                "filename": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,9 +16,7 @@\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.Assert.*;\n \n import org.apache.commons.collections4.trie.PatriciaTrie;\n import org.apache.commons.collections4.trie.UnmodifiableTrie;\n@@ -40,8 +38,8 @@ public void testUnmodifiableTrie() {\n             trie instanceof UnmodifiableTrie);\n         try {\n             TrieUtils.unmodifiableTrie(null);\n-            fail(\"Expecting IllegalArgumentException for null trie.\");\n-        } catch (final IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException for null trie.\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         ",
                "deletions": 5
            },
            {
                "sha": "cb7a70c704a22a86a51015fd1e058545477971a3",
                "filename": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -116,8 +116,8 @@ public void testIllegalDecorate() {\n         }\n         try {\n             decorateBag(new HashBag<T>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate.\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null predicate.\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n     }",
                "deletions": 2
            },
            {
                "sha": "c7fb92d42ad899cddf49a929033145e67e874b7a",
                "filename": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -76,12 +76,12 @@ public void testDecorate() {\n         ((PredicatedSortedBag<T>) bag).decorated();\n         try {\n             decorateBag(new TreeBag<T>(), null);\n-            fail(\"Expecting IllegalArgumentException for null predicate\");\n-        } catch (final IllegalArgumentException e) {}\n+            fail(\"Expecting NullPointerException for null predicate\");\n+        } catch (final NullPointerException e) {}\n         try {\n             decorateBag(nullBag, stringPredicate());\n-            fail(\"Expecting IllegalArgumentException for null bag\");\n-        } catch (final IllegalArgumentException e) {}\n+            fail(\"Expecting NullPointerException for null bag\");\n+        } catch (final NullPointerException e) {}\n     }\n \n     @SuppressWarnings(\"unchecked\")",
                "deletions": 4
            },
            {
                "sha": "3a19a780d829b510900c4476a016e3b65d79ce58",
                "filename": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -89,7 +89,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableBag.unmodifiableBag(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "2d5227da88e3f3482dcd1470752b57891166d1e4",
                "filename": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -89,7 +89,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableSortedBag.unmodifiableSortedBag(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "3eb0eaed8687094ac48700801462f3c8ac5bfd3f",
                "filename": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -94,7 +94,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableBidiMap.unmodifiableBidiMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n     \n }",
                "deletions": 1
            },
            {
                "sha": "a2aa1eaf1e24b5b80f0ce0039fa715e7b6c3b8e2",
                "filename": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -104,6 +104,6 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "8a1b88f4318f482c5ceddf37f61adf9d8274c654",
                "filename": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -110,7 +110,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n }",
                "deletions": 1
            },
            {
                "sha": "081fccce83127a821eb44bfd8e40f15efdc5bc64",
                "filename": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -96,7 +96,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableBoundedCollection.unmodifiableBoundedCollection(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n     \n }",
                "deletions": 1
            },
            {
                "sha": "d5e874599baa89fb94a03c4b9f77ba20eee3f7d5",
                "filename": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -85,7 +85,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableCollection.unmodifiableCollection(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "432ea7f303bbfef158e10e0ce45782aaaec0ced4",
                "filename": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,15 +16,15 @@\n  */\n package org.apache.commons.collections4.functors;\n \n-import org.apache.commons.collections4.Predicate;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.collections4.Predicate;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n /**\n  * Base class for tests of composite predicates.\n  *\n@@ -100,7 +100,7 @@ public void singletonCollectionToGetInstance() {\n     /**\n      * Tests <code>getInstance</code> with a null predicate array.\n      */\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public final void nullArrayToGetInstance() {\n         getPredicateInstance((Predicate<T>[]) null);\n     }\n@@ -109,7 +109,7 @@ public final void nullArrayToGetInstance() {\n      * Tests <code>getInstance</code> with a single null element in the predicate array.\n      */\n     @SuppressWarnings({\"unchecked\"})\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public final void nullElementInArrayToGetInstance() {\n         getPredicateInstance(new Predicate[] { null });\n     }\n@@ -118,7 +118,7 @@ public final void nullElementInArrayToGetInstance() {\n      * Tests <code>getInstance</code> with two null elements in the predicate array.\n      */\n     @SuppressWarnings({\"unchecked\"})\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public final void nullElementsInArrayToGetInstance() {\n         getPredicateInstance(new Predicate[] { null, null });\n     }\n@@ -127,15 +127,15 @@ public final void nullElementsInArrayToGetInstance() {\n     /**\n      * Tests <code>getInstance</code> with a null predicate collection\n      */\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public final void nullCollectionToGetInstance() {\n         getPredicateInstance((Collection<Predicate<T>>) null);\n     }\n \n     /**\n      * Tests <code>getInstance</code> with a predicate collection that contains null elements\n      */\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public final void nullElementsInCollectionToGetInstance() {\n         final Collection<Predicate<T>> coll = new ArrayList<Predicate<T>>();\n         coll.add(null);",
                "deletions": 9
            },
            {
                "sha": "659313222012a547620f08101889df9c9bfa3339",
                "filename": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -15,17 +15,15 @@\n  */\n package org.apache.commons.collections4.iterators;\n \n+import static org.easymock.EasyMock.*;\n+\n import java.util.Iterator;\n \n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n import org.w3c.dom.Text;\n \n-import static org.easymock.EasyMock.createMock;\n-import static org.easymock.EasyMock.expect;\n-import static org.easymock.EasyMock.replay;\n-\n /**\n  * Tests the NodeListIterator.\n  */\n@@ -112,8 +110,8 @@ public boolean supportsRemove() {\n     public void testNullConstructor(){\n         try{\n             new NodeListIterator((Node) null);\n-            fail(\"IllegalArgumentException expected!\");\n-        }catch(final IllegalArgumentException e){\n+            fail(\"NullPointerException expected!\");\n+        }catch(final NullPointerException e){\n             // expected.\n         }\n     }",
                "deletions": 6
            },
            {
                "sha": "829a43753eda3b323cb38290ee160b25292c12e3",
                "filename": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -78,7 +78,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableIterator.unmodifiableIterator(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n }",
                "deletions": 1
            },
            {
                "sha": "bba5ecc040fd0e5b42d196ba6dd8686275af6897",
                "filename": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -88,7 +88,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableListIterator.umodifiableListIterator(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n }",
                "deletions": 1
            },
            {
                "sha": "c6b1b68987209fc25ec91947260a2c0ed1df97e2",
                "filename": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -90,7 +90,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableMapIterator.unmodifiableMapIterator(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n }",
                "deletions": 1
            },
            {
                "sha": "55867a2dfd49d46644181cf0962c3a9055ebf103",
                "filename": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -92,7 +92,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n }",
                "deletions": 1
            },
            {
                "sha": "0e1fa5b50a084021074eedb15cde2edddc51cd83",
                "filename": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -89,7 +89,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableList.unmodifiableList(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     @SuppressWarnings(\"unchecked\")",
                "deletions": 1
            },
            {
                "sha": "e42c321240856d8bec9c55e40dfb80d027407236",
                "filename": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -16,7 +16,7 @@\n  */\n package org.apache.commons.collections4.map;\n \n-import static org.apache.commons.collections4.map.LazySortedMap.lazySortedMap;\n+import static org.apache.commons.collections4.map.LazySortedMap.*;\n \n import java.util.Comparator;\n import java.util.Map;\n@@ -103,14 +103,14 @@ public void testTransformerDecorate() {\n         assertTrue(map instanceof LazySortedMap);\n          try {\n             map = lazySortedMap(new TreeMap<Integer, Number>(), (Transformer<Integer, Number>) null);\n-            fail(\"Expecting IllegalArgumentException for null transformer\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null transformer\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n         try {\n             map = lazySortedMap((SortedMap<Integer,Number>) null, transformer);\n-            fail(\"Expecting IllegalArgumentException for null map\");\n-        } catch (final IllegalArgumentException e) {\n+            fail(\"Expecting NullPointerException for null map\");\n+        } catch (final NullPointerException e) {\n             // expected\n         }\n     }",
                "deletions": 5
            },
            {
                "sha": "edb44bd0152196909915b4bbb1f440d9e75e22ca",
                "filename": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -106,23 +106,23 @@ public void testConstructors() {\n             final Map<String, String> map = null;\n             new PassiveExpiringMap<String, String>(map);\n             fail(\"constructor - exception should have been thrown.\");\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             // success\n         }\n \n         try {\n             final ExpirationPolicy<String, String> policy = null;\n             new PassiveExpiringMap<String, String>(policy);\n             fail(\"constructor - exception should have been thrown.\");\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             // success\n         }\n \n         try {\n             final TimeUnit unit = null;\n             new PassiveExpiringMap<String, String>(10L, unit);\n             fail(\"constructor - exception should have been thrown.\");\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n             // success\n         }\n     }",
                "deletions": 3
            },
            {
                "sha": "cabf3f071b8b00ee22f149e2708dc176e4a4101a",
                "filename": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -78,7 +78,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableMap.unmodifiableMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "0c98a352e76bc579c342da428575b7b1935fc779",
                "filename": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -77,7 +77,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableOrderedMap.unmodifiableOrderedMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "b50b9038c41c27ab7d12927005caf4621a214e7d",
                "filename": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -77,7 +77,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableSortedMap.unmodifiableSortedMap(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "5fe8d4834acde7bf62f5c2d47da3386e9eccb399",
                "filename": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -104,7 +104,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableQueue.unmodifiableQueue(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "38b431a0b4adf26aac6c0805f41bf2a08cc84f98",
                "filename": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -253,27 +253,27 @@ public void testDecorator() {\n         try {\n             ListOrderedSet.listOrderedSet((List<E>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n         }\n         try {\n             ListOrderedSet.listOrderedSet((Set<E>) null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n         }\n         try {\n             ListOrderedSet.listOrderedSet(null, null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n         }\n         try {\n             ListOrderedSet.listOrderedSet(new HashSet<E>(), null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n         }\n         try {\n             ListOrderedSet.listOrderedSet(null, new ArrayList<E>());\n             fail();\n-        } catch (final IllegalArgumentException ex) {\n+        } catch (final NullPointerException ex) {\n         }\n     }\n ",
                "deletions": 5
            },
            {
                "sha": "d2c4a4271f6af6bb9a1543469a9261919b03f313",
                "filename": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -101,7 +101,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableNavigableSet.unmodifiableNavigableSet(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "f5ec16917b0ba80ecf06fc42715c44222ff7a3c9",
                "filename": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -79,7 +79,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableSet.unmodifiableSet(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            },
            {
                "sha": "0a24cd698207c8219868a90beca28870336ca54d",
                "filename": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -96,7 +96,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableSortedSet.unmodifiableSortedSet(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "1fc8c01d8c72a9a38841021b1c4245dc7e0095f0",
                "filename": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java",
                "blob_url": "https://github.com/apache/commons-collections/blob/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java",
                "raw_url": "https://github.com/apache/commons-collections/raw/68bbd2cf4a5c0eff498d46dddd527cb06274f852/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-collections/contents/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java?ref=68bbd2cf4a5c0eff498d46dddd527cb06274f852",
                "patch": "@@ -83,7 +83,7 @@ public void testDecorateFactory() {\n         try {\n             UnmodifiableTrie.unmodifiableTrie(null);\n             fail();\n-        } catch (final IllegalArgumentException ex) {}\n+        } catch (final NullPointerException ex) {}\n     }\n \n     //-----------------------------------------------------------------------",
                "deletions": 1
            }
        ],
        "patched_files": [
            "AbstractOrderedMapDecorator.java",
            "NullIsFalsePredicate.java",
            "PredicatedList.java",
            "SwitchTransformer.java",
            "PushbackIterator.java",
            "CollectionUtils.java",
            "AnyPredicate.java",
            "AbstractSortedSetDecorator.java",
            "InstantiateFactory.java",
            "OrPredicate.java",
            "UnmodifiableSortedMap.java",
            "NullIsExceptionPredicate.java",
            "UnmodifiableBoundedCollection.java",
            "TransformedSet.java",
            "AbstractInputCheckedMapDecorator.java",
            "QueueUtils.java",
            "TransformedList.java",
            "IfTransformer.java",
            "AbstractOrderedBidiMapDecorator.java",
            "PredicatedCollection.java",
            "TransformedMap.java",
            "NotPredicate.java",
            "ChainedTransformer.java",
            "LazyMap.java",
            "LazySortedMap.java",
            "AndPredicate.java",
            "AbstractOrderedMapIteratorDecorator.java",
            "PredicatedSortedBag.java",
            "UnmodifiableBidiMap.java",
            "TransformedQueue.java",
            "ListOrderedSet.java",
            "UnmodifiableNavigableSet.java",
            "WhileClosure.java",
            "UnmodifiableList.java",
            "PeekingIterator.java",
            "TransformedSplitMap.java",
            "AbstractListIteratorDecorator.java",
            "AbstractNavigableSetDecorator.java",
            "MapUtils.java",
            "IfClosure.java",
            "AbstractSerializableListDecorator.java",
            "PredicatedNavigableSet.java",
            "UnmodifiableMap.java",
            "AbstractSortedBidiMapDecorator.java",
            "AbstractUntypedIteratorDecorator.java",
            "AbstractIterableGetMapDecorator.java",
            "TransformerPredicate.java",
            "LazyList.java",
            "AbstractMapDecorator.java",
            "CollectionSortedBag.java",
            "SynchronizedBag.java",
            "FixedOrderComparator.java",
            "AbstractMultiValuedMap.java",
            "FunctorUtils.java",
            "SwitchClosure.java",
            "TransformedBag.java",
            "UnmodifiableListIterator.java",
            "AbstractMultiSetDecorator.java",
            "IdentityPredicate.java",
            "AbstractBidiMapDecorator.java",
            "FactoryTransformer.java",
            "AbstractIteratorDecorator.java",
            "UnmodifiableEntrySet.java",
            "PredicatedQueue.java",
            "UnmodifiableSortedBag.java",
            "AbstractQueueDecorator.java",
            "FactoryUtils.java",
            "SingletonMap.java",
            "SynchronizedSortedBag.java",
            "AbstractCollectionDecorator.java",
            "FixedSizeList.java",
            "AbstractMapEntryDecorator.java",
            "TransformedSortedBag.java",
            "ListUtils.java",
            "MultiKeyMap.java",
            "AbstractBagDecorator.java",
            "ClosureTransformer.java",
            "UnmodifiableOrderedMapIterator.java",
            "UnmodifiableBag.java",
            "AbstractSetDecorator.java",
            "IteratorUtils.java",
            "TransformedCollection.java",
            "UnmodifiableIterator.java",
            "AbstractSerializableSetDecorator.java",
            "InstantiateTransformer.java",
            "AbstractSortedMapDecorator.java",
            "MapBackedSet.java",
            "DefaultedMap.java",
            "UnmodifiableOrderedMap.java",
            "UnmodifiableSortedSet.java",
            "PredicatedBag.java",
            "PassiveExpiringMap.java",
            "AbstractListDecorator.java",
            "UnmodifiableOrderedBidiMap.java",
            "NullIsTruePredicate.java",
            "TransformedNavigableSet.java",
            "TransformedPredicate.java",
            "UnmodifiableQueue.java",
            "PredicatedSet.java",
            "UnmodifiableSet.java",
            "InstanceofPredicate.java",
            "OnePredicate.java",
            "TrieUtils.java",
            "UnmodifiableMapIterator.java",
            "FixedSizeSortedMap.java",
            "AllPredicate.java",
            "GrowthList.java",
            "InvokerTransformer.java",
            "TransformerUtils.java",
            "ComparatorPredicate.java",
            "PredicatedSortedMap.java",
            "ReverseListIterator.java",
            "SplitMapUtils.java",
            "TransformedSortedSet.java",
            "ClosureUtils.java",
            "AbstractSortedBagDecorator.java",
            "PredicateUtils.java",
            "PredicatedMap.java",
            "AbstractMapIteratorDecorator.java",
            "ChainedClosure.java",
            "BoundedIterator.java",
            "TransformedSortedMap.java",
            "BagUtils.java",
            "UnmodifiableCollection.java",
            "NodeListIterator.java",
            "UnmodifiableSortedBidiMap.java",
            "ListOrderedMap.java",
            "SynchronizedCollection.java",
            "SetUtils.java",
            "PredicatedSortedSet.java",
            "UnmodifiableTrie.java",
            "NonePredicate.java",
            "SetUniqueList.java",
            "CollectionBag.java",
            "FixedSizeMap.java"
        ],
        "unit_tests": [
            "UnmodifiableIteratorTest.java",
            "GrowthListTest.java",
            "ReverseListIteratorTest.java",
            "AbstractOrderedBidiMapDecoratorTest.java",
            "SynchronizedCollectionTest.java",
            "UnmodifiableSortedBidiMapTest.java",
            "TransformedMapTest.java",
            "TransformedQueueTest.java",
            "TransformedSortedMapTest.java",
            "SetUtilsTest.java",
            "TrieUtilsTest.java",
            "TransformedSortedBagTest.java",
            "UnmodifiableSortedBagTest.java",
            "UnmodifiableBidiMapTest.java",
            "PredicatedBagTest.java",
            "FixedSizeListTest.java",
            "FixedSizeSortedMapTest.java",
            "BoundedIteratorTest.java",
            "ListOrderedSetTest.java",
            "TransformedNavigableSetTest.java",
            "PredicatedQueueTest.java",
            "UnmodifiableBagTest.java",
            "PredicatedSortedSetTest.java",
            "TransformedSortedSetTest.java",
            "PredicateUtilsTest.java",
            "UnmodifiableOrderedMapTest.java",
            "LazyMapTest.java",
            "UnmodifiableNavigableSetTest.java",
            "CollectionUtilsTest.java",
            "CollectionSortedBagTest.java",
            "SetUniqueListTest.java",
            "ListUtilsTest.java",
            "PredicatedMapTest.java",
            "SingletonMapTest.java",
            "UnmodifiableMapTest.java",
            "TransformerUtilsTest.java",
            "TransformedSetTest.java",
            "AbstractMultiValuedMapTest.java",
            "PredicatedNavigableSetTest.java",
            "ClosureUtilsTest.java",
            "ComparatorPredicateTest.java",
            "TransformedBagTest.java",
            "QueueUtilsTest.java",
            "NodeListIteratorTest.java",
            "PredicatedSortedBagTest.java",
            "PredicatedListTest.java",
            "UnmodifiableListIteratorTest.java",
            "UnmodifiableBoundedCollectionTest.java",
            "UnmodifiableSortedMapTest.java",
            "AbstractCompositePredicateTest.java",
            "UnmodifiableCollectionTest.java",
            "LazySortedMapTest.java",
            "SynchronizedBagTest.java",
            "DefaultedMapTest.java",
            "PredicatedSetTest.java",
            "FixedOrderComparatorTest.java",
            "TransformedCollectionTest.java",
            "MapUtilsTest.java",
            "PredicatedCollectionTest.java",
            "AllPredicateTest.java",
            "FixedSizeMapTest.java",
            "UnmodifiableQueueTest.java",
            "MapBackedSetTest.java",
            "PushbackIteratorTest.java",
            "UnmodifiableSortedSetTest.java",
            "TransformedSplitMapTest.java",
            "UnmodifiableOrderedBidiMapTest.java",
            "UnmodifiableOrderedMapIteratorTest.java",
            "UnmodifiableSetTest.java",
            "MultiKeyMapTest.java",
            "BagUtilsTest.java",
            "CollectionBagTest.java",
            "PassiveExpiringMapTest.java",
            "PredicatedSortedMapTest.java",
            "ListOrderedMapTest.java",
            "SplitMapUtilsTest.java",
            "IteratorUtilsTest.java",
            "UnmodifiableMapIteratorTest.java",
            "UnmodifiableListTest.java",
            "PeekingIteratorTest.java",
            "TransformedListTest.java",
            "FactoryUtilsTest.java",
            "UnmodifiableTrieTest.java"
        ]
    }
}