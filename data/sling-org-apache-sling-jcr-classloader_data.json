[{"commit": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/8b48bd5bb2f16aa09a06cbf9d7452c50a98d46d5", "parent": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/9c9319f35ee43c7f4df5ef30819032b00e7dd764", "message": "SLING-2732 :   NPE when getting new repository class loader \n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1446256 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-jcr-classloader_1", "file": [{"additions": 13, "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/raw/8b48bd5bb2f16aa09a06cbf9d7452c50a98d46d5/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/blob/8b48bd5bb2f16aa09a06cbf9d7452c50a98d46d5/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "sha": "5a4c4214e1d8b22c9c79dfd7cad7ec0f5a82f518", "changes": 25, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-classloader/contents/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java?ref=8b48bd5bb2f16aa09a06cbf9d7452c50a98d46d5", "patch": "@@ -77,7 +77,6 @@\n     @org.apache.felix.scr.annotations.Property(value=CLASS_PATH_DEFAULT)\n     private static final String CLASS_PATH_PROP = \"classpath\";\n \n-\n     /** Node type for packages/folders. */\n     private static final String NT_FOLDER = \"nt:folder\";\n \n@@ -87,15 +86,16 @@\n     @org.apache.felix.scr.annotations.Property(value=OWNER_DEFAULT)\n     private static final String OWNER_PROP = \"owner\";\n \n-    /** The owner of the class loader / jcr user. */\n-    private String classLoaderOwner;\n \n-    @Reference\n-    private SlingRepository repository;\n+    /** The owner of the class loader / JCR user. */\n+    private String classLoaderOwner;\n \n     /** The configured class path. */\n     private String classPath;\n \n+    @Reference\n+    private SlingRepository repository;\n+\n     @Reference(policy=ReferencePolicy.DYNAMIC, cardinality=ReferenceCardinality.OPTIONAL_UNARY)\n     private MimeTypeService mimeTypeService;\n \n@@ -113,7 +113,8 @@\n \n     /**\n      * Activate this component.\n-     * @param props The configuration properties\n+     * @param componentContext The component context\n+     * @param properties The configuration properties\n      */\n     @Activate\n     protected void activate(final ComponentContext componentContext, final Map<String, Object> properties) {\n@@ -151,7 +152,7 @@ private void bindDynamicClassLoaderManager(final ServiceReference ref) {\n     }\n \n     /**\n-     * Called to handle unbinding the DynamicClassLoaderManager service\n+     * Called to handle unbinding of the DynamicClassLoaderManager service\n      * reference\n      */\n     @SuppressWarnings(\"unused\")\n@@ -180,7 +181,7 @@ private void destroyRepositoryClassLoader() {\n      * Return a new session.\n      */\n     public Session createSession() throws RepositoryException {\n-        // get an administrative session for potentiall impersonation\n+        // get an administrative session for potential impersonation\n         final Session admin = this.repository.loginAdministrative(null);\n \n         // do use the admin session, if the admin's user id is the same as owner\n@@ -280,18 +281,18 @@ public boolean rename(final String oldName, final String newName) {\n             }\n         }\n \n-        // fallback to false in case of error or non-existence of oldFileName\n+        // fall back to false in case of error or non-existence of oldFileName\n         return false;\n     }\n \n     /**\n      * Creates a folder hierarchy in the repository.\n-     * We synchronize this method to reduce potential conflics.\n+     * We synchronize this method to reduce potential conflicts.\n      * Although each write uses its own session it might occur\n      * that more than one session tries to create the same path\n      * (or parent path) at the same time. By synchronizing this\n      * we avoid this situation - however this method is written\n-     * in a failsafe manner anyway.\n+     * in a fail safe manner anyway.\n      */\n     private synchronized boolean mkdirs(final Session session, final String path) {\n         try {\n@@ -511,7 +512,7 @@ public long getLastModified(final String name) {\n             }\n         }\n \n-        // fallback to \"non-existant\" in case of problems\n+        // fall back to \"non-existent\" in case of problems\n         return -1;\n     }\n ", "filename": "src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java"}], "repo": "sling-org-apache-sling-jcr-classloader"}, {"commit": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/9c9319f35ee43c7f4df5ef30819032b00e7dd764", "parent": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/88cab96ce69368e0db28e3ba16941ae34d91e18f", "message": "SLING-2732 :   NPE when getting new repository class loader \n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1446249 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-jcr-classloader_2", "file": [{"additions": 3, "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/raw/9c9319f35ee43c7f4df5ef30819032b00e7dd764/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/blob/9c9319f35ee43c7f4df5ef30819032b00e7dd764/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "sha": "1f4c417e923d47a8de44cedf4b0b1a57f409c23a", "changes": 8, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-classloader/contents/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java?ref=9c9319f35ee43c7f4df5ef30819032b00e7dd764", "patch": "@@ -168,14 +168,12 @@ private void unbindDynamicClassLoaderManager(final ServiceReference ref) {\n      */\n     private void destroyRepositoryClassLoader() {\n         if (this.repositoryClassLoader != null) {\n+            if ( this.dynamicClassLoaderManager != null ) {\n+                this.callerBundle.getBundleContext().ungetService(this.dynamicClassLoaderManager);\n+            }\n             this.repositoryClassLoader.destroy();\n             this.repositoryClassLoader = null;\n         }\n-\n-        if (this.dynamicClassLoaderManager != null) {\n-            this.callerBundle.getBundleContext().ungetService(this.dynamicClassLoaderManager);\n-            this.dynamicClassLoaderManager = null;\n-        }\n     }\n \n     /**", "filename": "src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java"}], "repo": "sling-org-apache-sling-jcr-classloader"}, {"commit": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/88cab96ce69368e0db28e3ba16941ae34d91e18f", "parent": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/febb77de82773f285ca3fd1e535d792b0b0f9abf", "message": "SLING-2702 :  NPE as repository class loader might not have been instantiated \n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1446234 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-jcr-classloader_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/raw/88cab96ce69368e0db28e3ba16941ae34d91e18f/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/blob/88cab96ce69368e0db28e3ba16941ae34d91e18f/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "sha": "4ef22e144b0edeed6227b3816232c579f9a37007", "changes": 15, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-classloader/contents/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java?ref=88cab96ce69368e0db28e3ba16941ae34d91e18f", "patch": "@@ -111,12 +111,6 @@\n     /** Cached repository class loader. */\n     private volatile RepositoryClassLoader repositoryClassLoader;\n \n-    /**\n-     * The dynamic class loader used as the parent of the repository\n-     * class loader.\n-     */\n-    private volatile ClassLoader dynamicClassLoader;\n-\n     /**\n      * Activate this component.\n      * @param props The configuration properties\n@@ -178,9 +172,9 @@ private void destroyRepositoryClassLoader() {\n             this.repositoryClassLoader = null;\n         }\n \n-        if (this.dynamicClassLoader != null) {\n+        if (this.dynamicClassLoaderManager != null) {\n             this.callerBundle.getBundleContext().ungetService(this.dynamicClassLoaderManager);\n-            this.dynamicClassLoader = null;\n+            this.dynamicClassLoaderManager = null;\n         }\n     }\n \n@@ -219,14 +213,13 @@ private synchronized RepositoryClassLoader getOrCreateClassLoader() {\n \n             // get the dynamic class loader for the bundle using this\n             // class loader writer\n-            DynamicClassLoaderManager dclm = (DynamicClassLoaderManager) this.callerBundle.getBundleContext().getService(\n+            final DynamicClassLoaderManager dclm = (DynamicClassLoaderManager) this.callerBundle.getBundleContext().getService(\n                 this.dynamicClassLoaderManager);\n-            this.dynamicClassLoader = dclm.getDynamicClassLoader();\n \n             this.repositoryClassLoader = new RepositoryClassLoader(\n                     this.classPath,\n                     this,\n-                    this.dynamicClassLoader);\n+                    dclm.getDynamicClassLoader());\n         }\n         return this.repositoryClassLoader;\n     }", "filename": "src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java"}], "repo": "sling-org-apache-sling-jcr-classloader"}, {"commit": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/febb77de82773f285ca3fd1e535d792b0b0f9abf", "parent": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/commit/93e4af5b0c7baa02a84b425467d5dd1f11c52edd", "message": "SLING-2702 :  NPE as repository class loader might not have been instantiated \n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1426226 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "sling-org-apache-sling-jcr-classloader_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/raw/febb77de82773f285ca3fd1e535d792b0b0f9abf/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-classloader/blob/febb77de82773f285ca3fd1e535d792b0b0f9abf/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java", "sha": "b39346aa5f489ae30c4500adfa29d21e714d6aef", "changes": 11, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-classloader/contents/src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java?ref=febb77de82773f285ca3fd1e535d792b0b0f9abf", "patch": "@@ -211,7 +211,7 @@ public boolean isActivate() {\n         return this.repository != null;\n     }\n \n-    private synchronized ClassLoader getOrCreateClassLoader() {\n+    private synchronized RepositoryClassLoader getOrCreateClassLoader() {\n         if ( this.repositoryClassLoader == null || !this.repositoryClassLoader.isLive() ) {\n \n             // make sure to cleanup any existing class loader\n@@ -243,7 +243,7 @@ public boolean delete(final String name) {\n                 Item fileItem = session.getItem(path);\n                 fileItem.remove();\n                 session.save();\n-                this.repositoryClassLoader.handleEvent(path);\n+                this.getOrCreateClassLoader().handleEvent(path);\n                 return true;\n             }\n         } catch (final RepositoryException re) {\n@@ -278,8 +278,8 @@ public boolean rename(final String oldName, final String newName) {\n             session = this.createSession();\n             session.move(oldPath, newPath);\n             session.save();\n-            this.repositoryClassLoader.handleEvent(oldName);\n-            this.repositoryClassLoader.handleEvent(newName);\n+            this.getOrCreateClassLoader().handleEvent(oldName);\n+            this.getOrCreateClassLoader().handleEvent(newName);\n             return true;\n         } catch (final RepositoryException re) {\n             logger.error(\"Cannot rename \" + oldName + \" to \" + newName, re);\n@@ -390,6 +390,7 @@ private String cleanPath(String path) {\n         /**\n          * @see java.io.ByteArrayOutputStream#close()\n          */\n+        @Override\n         public void close() throws IOException {\n             super.close();\n \n@@ -464,7 +465,7 @@ public void close() throws IOException {\n                 contentNode.setProperty(\"jcr:mimeType\", mimeType);\n \n                 session.save();\n-                this.repositoryOutputProvider.repositoryClassLoader.handleEvent(fileName);\n+                this.repositoryOutputProvider.getOrCreateClassLoader().handleEvent(fileName);\n             } catch (final RepositoryException re) {\n                 throw (IOException)new IOException(\"Cannot write file \" + fileName + \", reason: \" + re.toString()).initCause(re);\n             } finally {", "filename": "src/main/java/org/apache/sling/jcr/classloader/internal/ClassLoaderWriterImpl.java"}], "repo": "sling-org-apache-sling-jcr-classloader"}]
