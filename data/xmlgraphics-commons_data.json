[
    {
        "repo": "xmlgraphics-commons",
        "message": "Avoid NullPointerException when there are no ImageWriters for a particular MIME type\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@454310 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/79e4ca6423f3bc2ddd1ce9bb4aa055ff82737df1",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/d197436dae2fb596e7aac7a162bdbee032ce0373",
        "bug_id": "xmlgraphics-commons_1",
        "file": [
            {
                "sha": "2bab42f18bff1c1ef1c570515481cd7f1e865644",
                "filename": "src/java/org/apache/xmlgraphics/image/writer/ImageWriterRegistry.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/79e4ca6423f3bc2ddd1ce9bb4aa055ff82737df1/src/java/org/apache/xmlgraphics/image/writer/ImageWriterRegistry.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/79e4ca6423f3bc2ddd1ce9bb4aa055ff82737df1/src/java/org/apache/xmlgraphics/image/writer/ImageWriterRegistry.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/src/java/org/apache/xmlgraphics/image/writer/ImageWriterRegistry.java?ref=79e4ca6423f3bc2ddd1ce9bb4aa055ff82737df1",
                "patch": "@@ -141,6 +141,9 @@ public void register(ImageWriter writer) {\n      */\r\n     public ImageWriter getWriterFor(String mime) {\r\n         List entries = (List)imageWriterMap.get(mime);\r\n+        if (entries == null) {\r\n+            return null;\r\n+        }\r\n         Iterator iter = entries.iterator();\r\n         while (iter.hasNext()) {\r\n             ImageWriter writer = (ImageWriter)iter.next();\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-commons",
        "message": "Bugzilla #42998:\r\nTest case for the NPE in TIFFImageWriter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@582850 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/391869777fcc4518dbd02162957567c55e4e047b",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/1aa15e425823567314a66ee15cd2cb3585903f35",
        "bug_id": "xmlgraphics-commons_2",
        "file": [
            {
                "sha": "fb7722bd940585062fc6822e9b14a0ecf83c61e4",
                "filename": "test/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriterTest.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/391869777fcc4518dbd02162957567c55e4e047b/test/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriterTest.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/391869777fcc4518dbd02162957567c55e4e047b/test/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriterTest.java",
                "status": "added",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/test/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriterTest.java?ref=391869777fcc4518dbd02162957567c55e4e047b",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/* $Id$ */\n+\n+package org.apache.xmlgraphics.image.writer.internal;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.OutputStream;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.io.output.NullOutputStream;\n+import org.apache.xmlgraphics.image.writer.ImageWriterParams;\n+import org.apache.xmlgraphics.image.writer.MultiImageWriter;\n+\n+public class TIFFImageWriterTest extends TestCase {\n+\n+    public void testJPEGWritingWithoutParams() throws Exception {\n+        //This used to generate a NPE because the JPEG encoding params were not set\n+        OutputStream out = new NullOutputStream();\n+        org.apache.xmlgraphics.image.writer.ImageWriter imageWriter = new TIFFImageWriter();\n+        MultiImageWriter writer = null;\n+        try {\n+            writer = imageWriter.createMultiImageWriter(out);\n+            // retrieve writer\n+            if (imageWriter != null) {\n+                ImageWriterParams iwp = new ImageWriterParams();\n+                iwp.setCompressionMethod(\"JPEG\");\n+\n+                for (int pageNumber = 0; pageNumber <= 2; pageNumber++) {\n+                    BufferedImage image = new BufferedImage(200, 200, BufferedImage.TYPE_BYTE_GRAY);\n+                    writer.writeImage(image, iwp);\n+                }\n+            }\n+        } finally {\n+            writer.close();\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-commons",
        "message": "Bugfix: Don't throw an NPE if no encoding params are given.\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@592680 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/2f57398595b2d6196ba9ae480049d32bda786d62",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/7476744022d3e1ccb15525910c168231a36c6475",
        "bug_id": "xmlgraphics-commons_3",
        "file": [
            {
                "sha": "c5f47796b5e64b795a8c61ff2e92b846905f1510",
                "filename": "src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/2f57398595b2d6196ba9ae480049d32bda786d62/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/2f57398595b2d6196ba9ae480049d32bda786d62/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "status": "modified",
                "changes": 70,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java?ref=2f57398595b2d6196ba9ae480049d32bda786d62",
                "patch": "@@ -118,41 +118,45 @@ private void updateParams(TIFFEncodeParam encodeParams, ImageWriterParams params\n \n     private TIFFEncodeParam createTIFFEncodeParams(ImageWriterParams params) {\n         TIFFEncodeParam encodeParams = new TIFFEncodeParam();\n-        if (params.getCompressionMethod() == null) {\n-            //PackBits as default\n-            encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_PACKBITS);\n-        } else if (\"PackBits\".equalsIgnoreCase(params.getCompressionMethod())) {\n-            encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_PACKBITS);\n-        } else if (\"NONE\".equalsIgnoreCase(params.getCompressionMethod())) {\n+        if (params == null) {\n             encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_NONE);\n-        } else if (\"JPEG\".equalsIgnoreCase(params.getCompressionMethod())) {\n-            encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_JPEG_TTN2);\n-        } else if (\"Deflate\".equalsIgnoreCase(params.getCompressionMethod())) {\n-            encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_DEFLATE);\n         } else {\n-            throw new UnsupportedOperationException(\"Compression method not supported: \"\n-                    + params.getCompressionMethod());\n-        }\n-        \n-        if (params.getResolution() != null) {\n-            // Set target resolution\n-            float pixSzMM = 25.4f / params.getResolution().floatValue();\n-            // num Pixs in 100 Meters\n-            int numPix = (int)(((1000 * 100) / pixSzMM) + 0.5); \n-            int denom = 100 * 100;  // Centimeters per 100 Meters;\n-            long [] rational = {numPix, denom};\n-            TIFFField [] fields = {\n-                new TIFFField(TIFFImageDecoder.TIFF_RESOLUTION_UNIT, \n-                              TIFFField.TIFF_SHORT, 1, \n-                              new char[] {(char)3}),\n-                new TIFFField(TIFFImageDecoder.TIFF_X_RESOLUTION, \n-                              TIFFField.TIFF_RATIONAL, 1, \n-                              new long[][] {rational}),\n-                new TIFFField(TIFFImageDecoder.TIFF_Y_RESOLUTION, \n-                              TIFFField.TIFF_RATIONAL, 1, \n-                              new long[][] {rational}) \n-                    };\n-            encodeParams.setExtraFields(fields);\n+            if (params.getCompressionMethod() == null) {\n+                //PackBits as default\n+                encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_PACKBITS);\n+            } else if (\"PackBits\".equalsIgnoreCase(params.getCompressionMethod())) {\n+                encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_PACKBITS);\n+            } else if (\"NONE\".equalsIgnoreCase(params.getCompressionMethod())) {\n+                encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_NONE);\n+            } else if (\"JPEG\".equalsIgnoreCase(params.getCompressionMethod())) {\n+                encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_JPEG_TTN2);\n+            } else if (\"Deflate\".equalsIgnoreCase(params.getCompressionMethod())) {\n+                encodeParams.setCompression(TIFFEncodeParam.COMPRESSION_DEFLATE);\n+            } else {\n+                throw new UnsupportedOperationException(\"Compression method not supported: \"\n+                        + params.getCompressionMethod());\n+            }\n+            \n+            if (params.getResolution() != null) {\n+                // Set target resolution\n+                float pixSzMM = 25.4f / params.getResolution().floatValue();\n+                // num Pixs in 100 Meters\n+                int numPix = (int)(((1000 * 100) / pixSzMM) + 0.5); \n+                int denom = 100 * 100;  // Centimeters per 100 Meters;\n+                long [] rational = {numPix, denom};\n+                TIFFField [] fields = {\n+                    new TIFFField(TIFFImageDecoder.TIFF_RESOLUTION_UNIT, \n+                                  TIFFField.TIFF_SHORT, 1, \n+                                  new char[] {(char)3}),\n+                    new TIFFField(TIFFImageDecoder.TIFF_X_RESOLUTION, \n+                                  TIFFField.TIFF_RATIONAL, 1, \n+                                  new long[][] {rational}),\n+                    new TIFFField(TIFFImageDecoder.TIFF_Y_RESOLUTION, \n+                                  TIFFField.TIFF_RATIONAL, 1, \n+                                  new long[][] {rational}) \n+                        };\n+                encodeParams.setExtraFields(fields);\n+            }\n         }\n         return encodeParams;\n     }",
                "deletions": 33
            }
        ]
    },
    {
        "repo": "xmlgraphics-commons",
        "message": "Bugzilla #43120:\nFixed a possible NPE in the TIFF codec (in the TIFFImage constructor).\nSubmitted by: Sergey Orlov <sorlov.at.mdi.ru>\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@582858 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/a18517fd95842a282156abfc90084f9b7f0d18b3",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/391869777fcc4518dbd02162957567c55e4e047b",
        "bug_id": "xmlgraphics-commons_4",
        "file": [
            {
                "sha": "723ebb5d206689df0465de2b607c6777f3bb9d41",
                "filename": "src/java/org/apache/xmlgraphics/image/codec/tiff/TIFFImage.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/a18517fd95842a282156abfc90084f9b7f0d18b3/src/java/org/apache/xmlgraphics/image/codec/tiff/TIFFImage.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/a18517fd95842a282156abfc90084f9b7f0d18b3/src/java/org/apache/xmlgraphics/image/codec/tiff/TIFFImage.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/src/java/org/apache/xmlgraphics/image/codec/tiff/TIFFImage.java?ref=a18517fd95842a282156abfc90084f9b7f0d18b3",
                "patch": "@@ -327,9 +327,15 @@ public TIFFImage(SeekableStream stream,\n             compression = compField == null ? COMP_NONE : compField.getAsInt(0);\n \n             // Get the photometric interpretation.\n-            int photometricType = (int)dir.getFieldAsLong(\n-                                                          TIFFImageDecoder.TIFF_PHOTOMETRIC_INTERPRETATION);\n-\n+            int photometricType;\n+            TIFFField photometricTypeField = dir.getField(\n+                    TIFFImageDecoder.TIFF_PHOTOMETRIC_INTERPRETATION);\n+            if (photometricTypeField == null) {\n+                photometricType = 0; // White is zero\n+            } else {\n+                photometricType = photometricTypeField.getAsInt(0);\n+            }\n+            \n             // Determine which kind of image we are dealing with.\n             imageType = TYPE_UNSUPPORTED;\n             switch(photometricType) {",
                "deletions": 3
            },
            {
                "sha": "e9da76b800bbbf8e072c15e6293d7b56359131fe",
                "filename": "status.xml",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/a18517fd95842a282156abfc90084f9b7f0d18b3/status.xml",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/a18517fd95842a282156abfc90084f9b7f0d18b3/status.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/status.xml?ref=a18517fd95842a282156abfc90084f9b7f0d18b3",
                "patch": "@@ -25,6 +25,9 @@\n \t</todo>\n \t<changes>\n \t\t<release version=\"Trunk\" date=\"n/a\">\n+\t\t  <action context=\"Code\" dev=\"JM\" type=\"add\" fixes-bug=\"43120\" due-to=\"Sergey Orlov\">\n+\t\t    Fixed a possible NPE in the TIFF codec (in the TIFFImage constructor).\n+\t\t  </action>\n \t\t  <action context=\"Code\" dev=\"JM\" type=\"add\" fixes-bug=\"42980\" due-to=\"Max Berger\">\n \t\t    Added support for classpath resources (find files in JAR files in the classpath\n \t\t    using their MIME type)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-commons",
        "message": "Bugzilla #42998:\r\nAttempt to work around the NPE in the codec when JPEG compression is selected.\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@582849 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/1aa15e425823567314a66ee15cd2cb3585903f35",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/3863287a0ace5c0b9cd59d46361110968d4af1cc",
        "bug_id": "xmlgraphics-commons_5",
        "file": [
            {
                "sha": "4ee2a51c94ebf7cd2ffcf5de7bf3db51ab6bb216",
                "filename": "src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/1aa15e425823567314a66ee15cd2cb3585903f35/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/1aa15e425823567314a66ee15cd2cb3585903f35/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "status": "modified",
                "changes": 59,
                "additions": 59,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java?ref=1aa15e425823567314a66ee15cd2cb3585903f35",
                "patch": "@@ -19,6 +19,8 @@\n \n package org.apache.xmlgraphics.image.writer.internal;\n \n+import java.awt.color.ColorSpace;\n+import java.awt.image.ColorModel;\n import java.awt.image.RenderedImage;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -32,6 +34,9 @@\n import org.apache.xmlgraphics.image.writer.ImageWriterParams;\n import org.apache.xmlgraphics.image.writer.MultiImageWriter;\n \n+import com.sun.image.codec.jpeg.JPEGCodec;\n+import com.sun.image.codec.jpeg.JPEGEncodeParam;\n+\n /**\n  * ImageWriter implementation that uses the internal TIFF codec to \n  * write TIFF files.\n@@ -54,10 +59,63 @@ public void writeImage(RenderedImage image, OutputStream out)\n     public void writeImage(RenderedImage image, OutputStream out,\n             ImageWriterParams params) throws IOException {\n         TIFFEncodeParam encodeParams = createTIFFEncodeParams(params);\n+        updateParams(encodeParams, params, image);\n         TIFFImageEncoder encoder = new TIFFImageEncoder(out, encodeParams);\n         encoder.encode(image);\n     }\n \n+    /**\n+     * This method updates the encode parameters based on the image to be encoded. One thing done\n+     * here is to initialize the JPEG encoding parameters if JPEG compression is selected.\n+     * @param encodeParams the TIFF encoding parameters\n+     * @param image the image to be encoded\n+     */\n+    private void updateParams(TIFFEncodeParam encodeParams, ImageWriterParams params, \n+            RenderedImage image) {\n+        if (encodeParams.getCompression() == TIFFEncodeParam.COMPRESSION_JPEG_TTN2) {\n+            ColorModel cm = image.getColorModel();\n+            int imageType = cm.getColorSpace().getType();\n+            int colorID;\n+            //The following translation table is taken from the Javadoc for JPEGEncodeParam.\n+            switch (imageType) {\n+            case ColorSpace.TYPE_GRAY:\n+                colorID = JPEGEncodeParam.COLOR_ID_GRAY;\n+                break;\n+            case ColorSpace.TYPE_RGB:\n+                if (cm.hasAlpha()) {\n+                    colorID = JPEGEncodeParam.COLOR_ID_YCbCrA;\n+                } else {\n+                    colorID = JPEGEncodeParam.COLOR_ID_YCbCr;\n+                }\n+                break;\n+            case ColorSpace.TYPE_YCbCr:\n+                if (cm.hasAlpha()) {\n+                    colorID = JPEGEncodeParam.COLOR_ID_YCbCrA;\n+                } else {\n+                    colorID = JPEGEncodeParam.COLOR_ID_YCbCr;\n+                }\n+                break;\n+            case ColorSpace.TYPE_CMYK:\n+                colorID = JPEGEncodeParam.COLOR_ID_CMYK;\n+                break;\n+            default:\n+                //TODO Don't know how to determine whether image is PYCC or not \n+                //(see JPEGEncodeParam)\n+                colorID = JPEGEncodeParam.COLOR_ID_UNKNOWN;\n+            }\n+            JPEGEncodeParam jpegParam = JPEGCodec.getDefaultJPEGEncodeParam(\n+                    image.getData(), colorID);\n+            if (params.getJPEGQuality() != null || params.getJPEGForceBaseline() != null) {\n+                float qual = (params.getJPEGQuality() != null \n+                        ? params.getJPEGQuality().floatValue() : 0.75f);\n+                boolean force = (params.getJPEGForceBaseline() != null\n+                        ? params.getJPEGForceBaseline().booleanValue() : false);\n+                jpegParam.setQuality(qual, force); \n+            }\n+            encodeParams.setJPEGEncodeParam(jpegParam);\n+        }\n+    }\n+\n     private TIFFEncodeParam createTIFFEncodeParams(ImageWriterParams params) {\n         TIFFEncodeParam encodeParams = new TIFFEncodeParam();\n         if (params.getCompressionMethod() == null) {\n@@ -133,6 +191,7 @@ public TIFFMultiImageWriter(OutputStream out) throws IOException {\n         public void writeImage(RenderedImage image, ImageWriterParams params) throws IOException {\n             if (encoder == null) {\n                 encodeParams = createTIFFEncodeParams(params);\n+                updateParams(encodeParams, params, image);\n                 encoder = new TIFFImageEncoder(out, encodeParams);\n             }\n             context = encoder.encodeMultiple(context, image);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "xmlgraphics-commons",
        "message": "Avoid an NPE in close() when there is something going wrong in the writeImage() call before (and close() being called in a finally section).\n\ngit-svn-id: https://svn.apache.org/repos/asf/xmlgraphics/commons/trunk@447314 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/xmlgraphics-commons/commit/50d76b9596a36ad3932887a372fc9f7e69a2d264",
        "parent": "https://github.com/apache/xmlgraphics-commons/commit/a4b4a8d5e8dbd12ae11798d1a3537d5372a92b4e",
        "bug_id": "xmlgraphics-commons_6",
        "file": [
            {
                "sha": "22caf501983fb5f6fddcc480f4d1d15be1fa4434",
                "filename": "src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "blob_url": "https://github.com/apache/xmlgraphics-commons/blob/50d76b9596a36ad3932887a372fc9f7e69a2d264/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "raw_url": "https://github.com/apache/xmlgraphics-commons/raw/50d76b9596a36ad3932887a372fc9f7e69a2d264/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/xmlgraphics-commons/contents/src/java/org/apache/xmlgraphics/image/writer/internal/TIFFImageWriter.java?ref=50d76b9596a36ad3932887a372fc9f7e69a2d264",
                "patch": "@@ -139,7 +139,9 @@ public void writeImage(RenderedImage image, ImageWriterParams params) throws IOE\n         }\n         \n         public void close() throws IOException {\n-            encoder.finishMultiple(context);\n+            if (encoder != null) {\n+                encoder.finishMultiple(context);\n+            }\n             encoder = null;\n             encodeParams = null;\n             out.flush();",
                "deletions": 1
            }
        ]
    }
]