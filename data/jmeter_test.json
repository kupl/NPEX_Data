{
    "jmeter_041bca4": {
        "bug_id": "jmeter_041bca4",
        "commit": "https://github.com/apache/jmeter/commit/041bca4b1cee43adac62658e853d1e8fe73e9136",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/041bca4b1cee43adac62658e853d1e8fe73e9136/src/core/org/apache/jmeter/gui/action/Load.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Load.java?ref=041bca4b1cee43adac62658e853d1e8fe73e9136",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/gui/action/Load.java",
                "patch": "@@ -114,7 +114,9 @@ public void doAction(ActionEvent e) {\n \t\t\tJMeterUtils.reportErrorToUser(msg);\n \t\t} finally {\n \t\t\ttry {\n-\t\t\t\treader.close();\n+\t\t\t\tif (reader!=null) {\n+                    reader.close();\n+                }\n \t\t\t} catch (IOException e1) {\n \t\t\t\t// ignored\n \t\t\t}",
                "raw_url": "https://github.com/apache/jmeter/raw/041bca4b1cee43adac62658e853d1e8fe73e9136/src/core/org/apache/jmeter/gui/action/Load.java",
                "sha": "883d41cd46313c673fb8ac8c34ea12380171d8ac",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/041bca4b1cee43adac62658e853d1e8fe73e9136/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java?ref=041bca4b1cee43adac62658e853d1e8fe73e9136",
                "deletions": 1,
                "filename": "src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "patch": "@@ -113,7 +113,9 @@ public void doAction(ActionEvent e) {\n \t\t\tJMeterUtils.reportErrorToUser(msg);\n \t\t} finally {\n \t\t\ttry {\n-\t\t\t\treader.close();\n+\t\t\t\tif (reader != null) {\n+                    reader.close();\n+                }\n \t\t\t} catch (IOException e1) {\n \t\t\t\t// ignored\n \t\t\t}",
                "raw_url": "https://github.com/apache/jmeter/raw/041bca4b1cee43adac62658e853d1e8fe73e9136/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "sha": "f689a7b4657b4822b478244fc79eec3753206c29",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@344013 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f3991386e415a51b58c86de629fc218be380a5e0",
        "parent": "https://github.com/apache/jmeter/commit/2a3cfd6f528636ddbb1e91716822464bb997080e",
        "patched_files": [
            "Load.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestLoad.java"
        ]
    },
    "jmeter_09aa346": {
        "bug_id": "jmeter_09aa346",
        "commit": "https://github.com/apache/jmeter/commit/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jmeter/blob/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5/src/functions/org/apache/jmeter/functions/PackageTest.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/PackageTest.java?ref=09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5",
                "deletions": 4,
                "filename": "src/functions/org/apache/jmeter/functions/PackageTest.java",
                "patch": "@@ -55,6 +55,7 @@ private static CSVRead setParams(String p1, String p2) throws Exception\n \tpublic static Test suite() throws Exception\n \t{\n \t\t   TestSuite suite = new TestSuite(\"SingleThreaded\");\n+\t\t   suite.addTest(new PackageTest(\"CSVNoFile\"));\n \t\t   suite.addTest(new PackageTest(\"CSV2Setup\"));\n \t\t   suite.addTest(new PackageTest(\"CSV2Run\"));\n \n@@ -208,9 +209,18 @@ public void CSV2Setup() throws Exception\n \t\t{\n \t\t}\n \t\t*/\n-    \tcr1=setParams(\"test.csv\",\"1\");\n-\t\tcr2=setParams(\"test.csv\",\"2\");\n-\t\tcr3=setParams(\"test.csv\",\"3\");\n-\t\tcr4=setParams(\"test.csv\",\"next\");\n+    \tcr1=setParams(\"testfiles/test.csv\",\"1\");\n+\t\tcr2=setParams(\"testfiles/test.csv\",\"2\");\n+\t\tcr3=setParams(\"testfiles/test.csv\",\"3\");\n+\t\tcr4=setParams(\"testfiles/test.csv\",\"next\");\n+    }\n+    public void CSVNoFile() throws Exception\n+    {\n+    \t//TODO - fix file not found error handling in CSVRead ...\n+    \tCSVRead c1,c2;\n+\t\tc1 = setParams(\"xtestfiles/test.csv\",\"1\");\n+\t\tc1.execute(null,null);\n+\t\tc2 = setParams(\"xtestfiles/test.csv\",\"next\");\n+\t\tc2.execute(null,null);\n     }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5/src/functions/org/apache/jmeter/functions/PackageTest.java",
                "sha": "b0d9c2a177d36fbd9a279dd5500442128f7c9192",
                "status": "modified"
            }
        ],
        "message": "Fix location of test file; add test for noFile present (causes NPE at present)\nTODO: fixe bug in CSVRead that causes the NPE...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324128 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c34d153db15ccf5e3eb2378a4fc7c4197b208211",
        "parent": "https://github.com/apache/jmeter/commit/14166c073f4a4892ebce8665f5a4f1c7224b5982",
        "patched_files": [],
        "repo": "jmeter",
        "unit_tests": [
            "PackageTest.java"
        ]
    },
    "jmeter_188a6f2": {
        "bug_id": "jmeter_188a6f2",
        "commit": "https://github.com/apache/jmeter/commit/188a6f2f376582fe93900dfb19d3a7dbcf868a53",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=188a6f2f376582fe93900dfb19d3a7dbcf868a53",
                "deletions": 1,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -708,7 +708,9 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        if (triple != null) {\n+            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "4f732fdfdcb533cad9c8382674289d5c1f2de452",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on saving proxy auth state\n\nRelates to #397\nBugzilla Id: 62672\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1859989 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4b801c8a6c6b8ec912cdccb409757caaac7c9803",
        "parent": "https://github.com/apache/jmeter/commit/497140d7e0eb663f5d2dbfd436043279a2190592",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_1d207d1": {
        "bug_id": "jmeter_1d207d1",
        "commit": "https://github.com/apache/jmeter/commit/1d207d1c899f67d8605b368aef92ba0cc10124de",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java?ref=1d207d1c899f67d8605b368aef92ba0cc10124de",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "patch": "@@ -308,6 +308,7 @@ protected Collection normalizeList(Collection coll) {\n \t\t\t\t\tnewColl = (Collection) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.add(convertObject(item));\n@@ -335,6 +336,7 @@ protected Map normalizeMap(Map coll) {\n \t\t\t\t\tnewColl = (Map) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.put(item, convertObject(prop));",
                "raw_url": "https://github.com/apache/jmeter/raw/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "sha": "21d07154918cbdaa9df9a803ece46239d28982a7",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@653147 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fcdb6ed4aedd63ffe15bf79b5db316af6637cfc0",
        "parent": "https://github.com/apache/jmeter/commit/de6eb4b4df98e0e260a45c9c03b702b056c83905",
        "patched_files": [
            "AbstractProperty.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "AbstractPropertyTest.java"
        ]
    },
    "jmeter_2442182": {
        "bug_id": "jmeter_2442182",
        "commit": "https://github.com/apache/jmeter/commit/24421823f1cf5fb5b43e11728e065fba6f0b11b3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/24421823f1cf5fb5b43e11728e065fba6f0b11b3/test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/save/TestCSVSaveService.java?ref=24421823f1cf5fb5b43e11728e065fba6f0b11b3",
                "deletions": 2,
                "filename": "test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "patch": "@@ -30,7 +30,7 @@ public TestCSVSaveService(String name) {\n         super(name);\n     }\n     \n-    private void checkSplitString(String input, char delim, String []expected) throws Exception {\n+    private void checkSplitString(String input, char delim, String[] expected) throws Exception {\n         String out[] = CSVSaveService.csvSplitString(input, delim);     \n         checkStrings(expected, out);\n     }\n@@ -87,7 +87,7 @@ public void testSplitQuoted() throws Exception {\n \n     public void testSplitBadQuote() throws Exception {\n         try {\n-            checkSplitString(\"a\\\"b\",',',null);\n+            checkSplitString(\"a\\\"b\",',',new String[]{});\n             fail(\"Should have generated IOException\");\n         } catch (IOException e) {\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/24421823f1cf5fb5b43e11728e065fba6f0b11b3/test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "sha": "e93eb11641705fdc81f1b129109d6868f88d835a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if test fails one day\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721971 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ebed029719449f3c2ecb411ac1e8155c837dd89a",
        "parent": "https://github.com/apache/jmeter/commit/d5dda45901916796d8e11dbf0feda4a0c5197137",
        "patched_files": [
            "CSVSaveService.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestCSVSaveService.java"
        ]
    },
    "jmeter_2593ee7": {
        "bug_id": "jmeter_2593ee7",
        "commit": "https://github.com/apache/jmeter/commit/2593ee76cedf9a79b9a607008700aa1c31145daf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/2593ee76cedf9a79b9a607008700aa1c31145daf/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java?ref=2593ee76cedf9a79b9a607008700aa1c31145daf",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "patch": "@@ -197,6 +197,8 @@ public void testThreadGroupNameBug63241() throws Exception {\n         try {\n             HTTPSamplerProxy httpRequest = new HTTPSamplerProxy();\n             JMeterContext context = JMeterContextService.getContext();\n+            // This is the state when called from a non test thread\n+            context.setThreadGroup(null);\n             context.setCurrentSampler(httpRequest);\n             String ret = function.execute(result, httpRequest);\n             assertEquals(\"\", ret);",
                "raw_url": "https://github.com/apache/jmeter/raw/2593ee76cedf9a79b9a607008700aa1c31145daf/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "sha": "30f1e95ec24b7a0b3bc0afcfa192c15e535245b3",
                "status": "modified"
            }
        ],
        "message": "Bug 63241 - __threadGroupName causes a NullPointerException if called from non Test threads\n\nMake test hypothesis clear to avoid failures when tests run in parallel\nBugzilla Id: 63241\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1855129 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: df50e3d09a97cca97279431361d1128065352516",
        "parent": "https://github.com/apache/jmeter/commit/e7111c7210f94b14b6fd3730f4440016446b6809",
        "patched_files": [],
        "repo": "jmeter",
        "unit_tests": [
            "TestSimpleFunctions.java"
        ]
    },
    "jmeter_2b3eff1": {
        "bug_id": "jmeter_2b3eff1",
        "commit": "https://github.com/apache/jmeter/commit/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "patch": "@@ -478,6 +478,9 @@ protected void addFromClipboard() {\n         int rowCount = table.getRowCount();\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             String[] clipboardLines = clipboardContent.split(\"\\n\");\n             for (String clipboardLine : clipboardLines) {\n                 String[] clipboardCols = clipboardLine.split(\"\\t\");",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "sha": "8fe3d4b65fc61ccb5fdf12db1553c202e446188c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "deletions": 0,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "patch": "@@ -241,6 +241,9 @@ protected void addFromClipboard() {\n         int rowCount = headerTable.getRowCount();\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             String[] clipboardLines = clipboardContent.split(\"\\n\"); // $NON-NLS-1$\n             for (String clipboardLine : clipboardLines) {\n                 int index = clipboardLine.indexOf(\":\"); // $NON-NLS-1$",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "sha": "dedd27168f979467e34b9e884281dff1f8eb1f41",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "deletions": 0,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "patch": "@@ -451,6 +451,9 @@ protected void addFromClipboard(JTable table) {\n         PowerTableModel model = null;\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             if (clipboardContent != null) {\n                 String[] clipboardLines = clipboardContent.split(NEW_LINE);\n                 for (String clipboardLine : clipboardLines) {",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "sha": "30758fb057831c4322279a0e2adbd3a63be660a7",
                "status": "modified"
            }
        ],
        "message": "NPE when clipboard content is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1575074 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 249f7992da26c85487191d7292e5e0ea428558ff",
        "parent": "https://github.com/apache/jmeter/commit/8ff0703e2ecaa915a4a7b641600dc70eacc31116",
        "patched_files": [
            "ArgumentsPanel.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestArgumentsPanel.java"
        ]
    },
    "jmeter_319cdc8": {
        "bug_id": "jmeter_319cdc8",
        "commit": "https://github.com/apache/jmeter/commit/319cdc8ac3146364f3451f4877619dd1453805fb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleReader.java?ref=319cdc8ac3146364f3451f4877619dd1453805fb",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "patch": "@@ -123,7 +123,9 @@ private SampleMetadata readMetadata(char separator, boolean useSaveSampleCfg) {\n             SampleMetadata metadata;\n             // Read first line\n             String line = reader.readLine();\n-\n+            if(line == null) {\n+                throw new IllegalArgumentException(\"File is empty\");\n+            }\n             // When we can use sample save config and there is no header in csv\n             // file\n             if (useSaveSampleCfg",
                "raw_url": "https://github.com/apache/jmeter/raw/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "sha": "8a36cf39c6d22d6edf5fa2a7c65691c36d47d4ab",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719589 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 112fa9adb98fd5d43b6bcf079a7b6572649cc220",
        "parent": "https://github.com/apache/jmeter/commit/3d810b643ad06466b125d77395ac1dcfa98ddc54",
        "patched_files": [
            "CsvSampleReader.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "CsvSampleReaderTest.java"
        ]
    },
    "jmeter_3374f83": {
        "bug_id": "jmeter_3374f83",
        "commit": "https://github.com/apache/jmeter/commit/3374f8302f1d487bf83311115da6b419cc38b8cb",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "deletions": 14,
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -61,6 +61,7 @@\n     \n     private static final String OK_CODE = Integer.toString(HttpURLConnection.HTTP_OK);\n     private static final String OK_MSG = \"OK\"; // $NON-NLS-1$\n+    private static final String INVALID_CALL_SEQUENCE_MSG = \"Invalid call sequence\"; // $NON-NLS-1$\n \n \n     // Bug 33196 - encoding ISO-8859-1 is only suitable for Western countries\n@@ -137,15 +138,17 @@\n     private static final long NANOTHREAD_SLEEP = \n             JMeterUtils.getPropDefault(\"sampleresult.nanoThreadSleep\", 5000);  // $NON-NLS-1$\n \n+    private static final String NULL_FILENAME = \"NULL\";\n+\n     static {\n         if (START_TIMESTAMP) {\n             log.info(\"Note: Sample TimeStamps are START times\");\n         } else {\n             log.info(\"Note: Sample TimeStamps are END times\");\n         }\n-        log.info(\"sampleresult.default.encoding is set to \" + DEFAULT_ENCODING);\n-        log.info(\"sampleresult.useNanoTime=\"+USE_NANO_TIME);\n-        log.info(\"sampleresult.nanoThreadSleep=\"+NANOTHREAD_SLEEP);\n+        log.info(\"sampleresult.default.encoding is set to {}\", DEFAULT_ENCODING);\n+        log.info(\"sampleresult.useNanoTime={}\", USE_NANO_TIME);\n+        log.info(\"sampleresult.nanoThreadSleep={}\", NANOTHREAD_SLEEP);\n \n         if (USE_NANO_TIME && NANOTHREAD_SLEEP > 0) {\n             // Make sure we start with a reasonable value\n@@ -455,7 +458,7 @@ private static long sampleNsClockInMs() {\n     public long currentTimeInMillis() {\n         if (useNanoTime){\n             if (nanoTimeOffset == Long.MIN_VALUE){\n-                throw new RuntimeException(\"Invalid call; nanoTimeOffset has not been set\");\n+                throw new IllegalStateException(\"Invalid call; nanoTimeOffset has not been set\");\n             }\n             return sampleNsClockInMs() + nanoTimeOffset;            \n         }\n@@ -488,7 +491,7 @@ private void stampAndTime(long stamp, long elapsed) {\n      */\n     public void setStampAndTime(long stamp, long elapsed) {\n         if (startTime != 0 || endTime != 0){\n-            throw new RuntimeException(\"Calling setStampAndTime() after start/end times have been set\");\n+            throw new IllegalStateException(\"Calling setStampAndTime() after start/end times have been set\");\n         }\n         stampAndTime(stamp, elapsed);\n     }\n@@ -500,7 +503,7 @@ public void setStampAndTime(long stamp, long elapsed) {\n      * @return <code>true</code> if the result was previously marked\n      */\n     public boolean markFile(String filename) {\n-        return !files.add(filename);\n+        return !files.add(filename != null ? filename : NULL_FILENAME);\n     }\n \n     public String getResponseCode() {\n@@ -642,10 +645,10 @@ public void addSubResult(SampleResult subResult, boolean renameSubResults) {\n         }\n         String tn = getThreadName();\n         if (tn.length()==0) {\n-            tn=Thread.currentThread().getName();//TODO do this more efficiently\n+            tn=Thread.currentThread().getName();\n             this.setThreadName(tn);\n         }\n-        subResult.setThreadName(tn); // TODO is this really necessary?\n+        subResult.setThreadName(tn);\n \n         // Extend the time to the end of the added sample\n         setEndTime(Math.max(getEndTime(), subResult.getEndTime() + nanoTimeOffset - subResult.nanoTimeOffset)); // Bug 51855\n@@ -1100,8 +1103,7 @@ public void setEndTime(long end) {\n             timeStamp = endTime;\n         }\n         if (startTime == 0) {\n-            log.error(\"setEndTime must be called after setStartTime\", new Throwable(\"Invalid call sequence\"));\n-            // TODO should this throw an error?\n+            log.error(\"setEndTime must be called after setStartTime\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         } else {\n             elapsedTime = endTime - startTime - idleTime;\n         }\n@@ -1129,7 +1131,7 @@ public void sampleStart() {\n         if (startTime == 0) {\n             setStartTime(currentTimeInMillis());\n         } else {\n-            log.error(\"sampleStart called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleStart called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n     }\n \n@@ -1141,7 +1143,7 @@ public void sampleEnd() {\n         if (endTime == 0) {\n             setEndTime(currentTimeInMillis());\n         } else {\n-            log.error(\"sampleEnd called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleEnd called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n     }\n \n@@ -1151,7 +1153,7 @@ public void sampleEnd() {\n      */\n     public void samplePause() {\n         if (pauseTime != 0) {\n-            log.error(\"samplePause called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"samplePause called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n         pauseTime = currentTimeInMillis();\n     }\n@@ -1162,7 +1164,7 @@ public void samplePause() {\n      */\n     public void sampleResume() {\n         if (pauseTime == 0) {\n-            log.error(\"sampleResume without samplePause\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleResume without samplePause\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n         idleTime += currentTimeInMillis() - pauseTime;\n         pauseTime = 0;",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "02ce8be0ec508bf4bfbed63a4682ac9bdd461e5d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/samplers/TestSampleResult.java?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "patch": "@@ -371,5 +371,16 @@ public void testCompareSampleLabels() {\n                 plan.setFunctionalMode(prevValue);\n             }\n         }\n+        \n+        @Test\n+        public void testBug63433() {\n+            SampleResult firstResult = new SampleResult();\n+            assertFalse(\"Expected false on first call of markFile\", firstResult.markFile(\"result.csv\"));\n+            assertTrue(\"Expected true on second call of markFile\", firstResult.markFile(\"result.csv\"));\n+\n+            SampleResult secondResult = new SampleResult();\n+            assertFalse(\"Expected false on first call of markFile with null\", secondResult.markFile(null));\n+            assertTrue(\"Expected true on second call of markFile with null\", secondResult.markFile(null));\n+        }\n }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "sha": "84b5a328aa1d217daf38aacc743d67afdd9912eb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -148,6 +148,7 @@ to view the last major behaviors with the version 5.1.1.\n     <li><bug>63319</bug><code>ArrayIndexOutOfBoundsException</code> in Aggregate Graph when selecting 90&nbsp;% or 95&nbsp;% columns</li>\n     <li><bug>63423</bug>Selection of table rows in Aggregate Graph gets lost too often</li>\n     <li><bug>63347</bug>View result tree: The search field is so small that even a single character is not visible on Windows 7</li>\n+    <li><bug>63433</bug>ListenerNotifier: Detected problem in Listener NullPointerException if filename is null. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n </ul>\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/xdocs/changes.xml",
                "sha": "0f655efac9a22994ffbbf9a51069c67b8edda041",
                "status": "modified"
            }
        ],
        "message": "Bug 63433 - ListenerNotifier: Detected problem in Listener NullPointerException if filename is null \nBugzilla Id: 63433\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1859277 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c63d8c15c0e1c1df4799af8941fd488c19cdcf98",
        "parent": "https://github.com/apache/jmeter/commit/79d0bc635f1ebbf4f4d2175bac0a15d274fc0a15",
        "patched_files": [
            "SampleResult.java",
            "changes.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_36d4ff6": {
        "bug_id": "jmeter_36d4ff6",
        "commit": "https://github.com/apache/jmeter/commit/36d4ff61610e82ed640a73359230d1f6e449830d",
        "file": [
            {
                "additions": 97,
                "blob_url": "https://github.com/apache/jmeter/blob/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "changes": 155,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java?ref=36d4ff61610e82ed640a73359230d1f6e449830d",
                "deletions": 58,
                "filename": "src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "patch": "@@ -19,19 +19,24 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n+import java.util.Enumeration;\n import java.util.Properties;\n \n import javax.mail.Address;\n import javax.mail.BodyPart;\n import javax.mail.Flags;\n import javax.mail.Folder;\n+import javax.mail.Header;\n import javax.mail.Message;\n import javax.mail.MessagingException;\n import javax.mail.Session;\n import javax.mail.Store;\n import javax.mail.internet.MimeMultipart;\n+import javax.mail.internet.MimeUtility;\n \n+import org.apache.commons.io.IOUtils;\n import org.apache.jmeter.samplers.AbstractSampler;\n import org.apache.jmeter.samplers.Entry;\n import org.apache.jmeter.samplers.SampleResult;\n@@ -86,12 +91,10 @@ public SampleResult sample(Entry e) {\n         boolean deleteMessages = getDeleteMessages();\n \n         parent.setSampleLabel(getName());\n-        int port=getPortAsInt();\n-        if (port > 0){\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer()+ \":\" + port);\n-        } else {\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer());\n-        }\n+        \n+        String samplerString = toString();\n+        parent.setSamplerData(samplerString);\n+\n         /*\n          * Perform the sampling\n          */\n@@ -105,11 +108,7 @@ public SampleResult sample(Entry e) {\n \n             // Get the store\n             Store store = session.getStore(getServerType());\n-            if (port > 0){\n-                store.connect(getServer(), port, getUserName(), getPassword());\n-            } else {\n-                store.connect(getServer(), getUserName(), getPassword());\n-            }\n+            store.connect(getServer(), getPortAsInt(), getUserName(), getPassword());\n \n             // Get folder\n             Folder folder = store.getFolder(getFolder());\n@@ -121,47 +120,66 @@ public SampleResult sample(Entry e) {\n \n             // Get directory\n             Message messages[] = folder.getMessages();\n-            Message message;\n             StringBuilder pdata = new StringBuilder();\n             pdata.append(messages.length);\n             pdata.append(\" messages found\\n\");\n+            parent.setResponseData(pdata.toString(),null);\n+            parent.setDataType(SampleResult.TEXT);\n+            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n \n             int n = getNumMessages();\n             if (n == ALL_MESSAGES || n > messages.length) {\n                 n = messages.length;\n             }\n \n+            parent.setSampleCount(n); // TODO is this sensible?\n+            \n             for (int i = 0; i < n; i++) {\n                 StringBuilder cdata = new StringBuilder();\n                 SampleResult child = new SampleResult();\n                 child.sampleStart();\n-                message = messages[i];\n-\n-                //if (i == 0)\n-                { // Assumes all the messaged have the same type ...\n-                    child.setContentType(message.getContentType());\n-                }\n-\n+                Message message = messages[i];\n+                \n                 cdata.append(\"Message \"); // $NON-NLS-1$\n                 cdata.append(message.getMessageNumber());\n                 child.setSampleLabel(cdata.toString());\n                 child.setSamplerData(cdata.toString());\n                 cdata.setLength(0);\n \n+                final String contentType = message.getContentType();\n+                child.setContentType(contentType);// Store the content-type\n+\n                 if (isStoreMimeMessage()) {\n-                    appendMessageAsMime(cdata, message);\n+                    // Don't save headers - they are already in the raw message\n+                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+                    message.writeTo(bout);\n+                    child.setResponseData(bout.toByteArray()); // Save raw message\n+                    child.setDataType(SampleResult.TEXT);\n+                    child.setDataEncoding(\"iso-8859-1\"); // RFC 822 uses ascii\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n                 } else {\n-                    appendMessageData(cdata, message);\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n+                    @SuppressWarnings(\"unchecked\") // Javadoc for the API says this is OK\n+                    Enumeration<Header> hdrs = message.getAllHeaders();\n+                    while(hdrs.hasMoreElements()){\n+                        Header hdr = hdrs.nextElement();\n+                        String value = hdr.getValue();\n+                        try {\n+                            value = MimeUtility.decodeText(value);\n+                        } catch (UnsupportedEncodingException uce) {\n+                            // ignored\n+                        }\n+                        cdata.append(hdr.getName()).append(\": \").append(value).append(\"\\n\");\n+                    }\n+                    child.setResponseHeaders(cdata.toString());\n+                    cdata.setLength(0);\n+                    appendMessageData(child, message);\n                 }\n \n                 if (deleteMessages) {\n                     message.setFlag(Flags.Flag.DELETED, true);\n                 }\n-                child.setResponseData(cdata.toString().getBytes());\n-                child.setDataType(SampleResult.TEXT);\n-                child.setResponseCodeOK();\n-                child.setResponseMessage(\"OK\"); // $NON-NLS-1$\n-                child.setSuccessful(true);\n+                child.setResponseOK();\n                 child.sampleEnd();\n                 parent.addSubResult(child);\n             }\n@@ -170,15 +188,8 @@ public SampleResult sample(Entry e) {\n             folder.close(true);\n             store.close();\n \n-            /*\n-             * Set up the sample result details\n-             */\n-            parent.setResponseData(pdata.toString().getBytes());\n-            parent.setDataType(SampleResult.TEXT);\n-            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n-\n             parent.setResponseCodeOK();\n-            parent.setResponseMessage(\"OK\"); // $NON-NLS-1$\n+            parent.setResponseMessageOK();\n             isOK = true;\n         } catch (NoClassDefFoundError ex) {\n             log.debug(\"\",ex);// No need to log normally, as we set the status\n@@ -201,15 +212,16 @@ public SampleResult sample(Entry e) {\n         return parent;\n     }\n \n-    private void appendMessageData(StringBuilder cdata, Message message)\n+    private void appendMessageData(SampleResult child, Message message)\n             throws MessagingException, IOException {\n+        StringBuilder cdata = new StringBuilder();\n         cdata.append(\"Date: \"); // $NON-NLS-1$\n         cdata.append(message.getSentDate());// TODO - use a different format here?\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"To: \"); // $NON-NLS-1$\n-        Address[] recips = message.getAllRecipients();\n-        for (int j = 0; j < recips.length; j++) {\n+        Address[] recips = message.getAllRecipients(); // may be null\n+        for (int j = 0; recips != null && j < recips.length; j++) {\n             cdata.append(recips[j].toString());\n             if (j < recips.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -218,8 +230,8 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"From: \"); // $NON-NLS-1$\n-        Address[] from = message.getFrom();\n-        for (int j = 0; j < from.length; j++) {\n+        Address[] from = message.getFrom(); // may be null\n+        for (int j = 0; from != null && j < from.length; j++) {\n             cdata.append(from[j].toString());\n             if (j < from.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -235,33 +247,40 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         Object content = message.getContent();\n         if (content instanceof MimeMultipart) {\n             MimeMultipart mmp = (MimeMultipart) content;\n+            String preamble = mmp.getPreamble();\n+            if (preamble != null ){\n+                cdata.append(preamble);\n+            }\n+            child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n             int count = mmp.getCount();\n-            cdata.append(\"Multipart. Count: \");\n-            cdata.append(count);\n-            cdata.append(NEW_LINE);\n             for (int j=0; j<count;j++){\n                 BodyPart bodyPart = mmp.getBodyPart(j);\n-                cdata.append(\"Type: \");\n-                cdata.append(bodyPart.getContentType());\n-                cdata.append(NEW_LINE);\n-                try {\n-                    cdata.append(bodyPart.getContent());\n-                } catch (UnsupportedEncodingException ex){\n-                    cdata.append(ex.getLocalizedMessage());\n+                final Object bodyPartContent = bodyPart.getContent();\n+                final String contentType = bodyPart.getContentType();\n+                SampleResult sr = new SampleResult();\n+                sr.setSampleLabel(\"Part: \"+j);\n+                sr.setContentType(contentType);\n+                sr.setEncodingAndType(contentType);\n+                sr.setResponseHeaders(bodyPart.getClass().getName());// TODO\n+                if (bodyPartContent instanceof InputStream){\n+                    sr.setResponseData(IOUtils.toByteArray((InputStream) bodyPartContent));\n+                } else {\n+                    sr.setResponseData(bodyPartContent.toString(),sr.getDataEncodingNoDefault());\n                 }\n+                sr.setResponseOK();\n+                sr.sampleEnd();\n+                child.addSubResult(sr);\n             }\n         } else {\n-            cdata.append(content);\n+            if (content instanceof InputStream){\n+                child.setResponseData(IOUtils.toByteArray((InputStream) content));\n+            } else {\n+                cdata.append(content);\n+                child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n+            }\n         }\n     }\n \n-    private void appendMessageAsMime(StringBuilder cdata, Message message)\n-            throws MessagingException, IOException {\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        message.writeTo(bout);\n-        cdata.append(bout);\n-    }\n-\n     /**\n      * Sets the type of protocol to use when talking with the remote mail\n      * server. Either MailReaderSampler.TYPE_IMAP[S] or\n@@ -304,7 +323,7 @@ public String getPort() {\n     }\n \n     private int getPortAsInt() {\n-        return getPropertyAsInt(PORT);\n+        return getPropertyAsInt(PORT, -1);\n     }\n \n     public void setPort(String port) {\n@@ -421,4 +440,24 @@ public boolean isStoreMimeMessage() {\n     public void setStoreMimeMessage(boolean storeMimeMessage) {\n         setProperty(STORE_MIME_MESSAGE, storeMimeMessage, false);\n     }\n+    \n+    @Override\n+    public String toString(){\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getServerType());\n+        sb.append(\"://\");\n+        sb.append(getUserName());\n+        sb.append(\"@\");\n+        sb.append(getServer());\n+        int port=getPortAsInt();\n+        if (port != -1){\n+            sb.append(\":\").append(port);\n+        }\n+        sb.append(\"/\");\n+        sb.append(getFolder());\n+        sb.append(\"[\");\n+        sb.append(getNumMessages());\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "sha": "47f8d17a5e3b7d8b3f5279795c219fc6d8ebc336",
                "status": "modified"
            }
        ],
        "message": "Add support for multipart messages\nAvoid possible NPEs in To: and From: processing\nStore Response Headers if not using store as MIME\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@910812 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bdcbd6fcd4f6642415f1c6b75d45e6e094aefa74",
        "parent": "https://github.com/apache/jmeter/commit/d8baecd9cafc593fb5d68e32b858c105865bf6f8",
        "patched_files": [
            "MailReaderSampler.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestMailReaderSampler.java"
        ]
    },
    "jmeter_3790d83": {
        "bug_id": "jmeter_3790d83",
        "commit": "https://github.com/apache/jmeter/commit/3790d83956c3786a216d3e025b907ba4b81018bb",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jmeter/blob/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=3790d83956c3786a216d3e025b907ba4b81018bb",
                "deletions": 5,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -203,9 +203,10 @@ public void startGui(CLOption testFile) {\n \t\tComponentUtil.centerComponentInWindow(main, 80);\n \t\tmain.show();\n \t\tActionRouter.getInstance().actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));\n-\t\tif (testFile != null) {\n+        String arg; \n+\t\tif (testFile != null && (arg = testFile.getArgument()) != null) {\n \t\t\ttry {\n-\t\t\t\tFile f = new File(testFile.getArgument());\n+                File f = new File(arg);\n \t\t\t\tlog.info(\"Loading file: \" + f);\n \t\t\t\tFileInputStream reader = new FileInputStream(f);\n \t\t\t\tHashTree tree = SaveService.loadTree(reader);\n@@ -492,10 +493,14 @@ public void startNonGui(CLOption testFile, CLOption logFile, CLOption remoteStar\n \t\tif (testFile == null) {\n \t\t\tthrow new IllegalUserActionException();\n \t\t}\n-\t\tif (logFile == null) {\n-\t\t\tdriver.run(testFile.getArgument(), null, remoteStart != null);\n+\t\tString argument = testFile.getArgument();\n+        if (argument == null) {\n+            throw new IllegalUserActionException();\n+        }\n+        if (logFile == null) {\n+\t\t\tdriver.run(argument, null, remoteStart != null);\n \t\t} else {\n-\t\t\tdriver.run(testFile.getArgument(), logFile.getArgument(), remoteStart != null);\n+\t\t\tdriver.run(argument, logFile.getArgument(), remoteStart != null);\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "sha": "610af440fadd77f5b5a1a77547943eb937af4cbe",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE with empty filename\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@399906 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f1772df3833c81e71300b29df2f58eba080536f",
        "parent": "https://github.com/apache/jmeter/commit/f3132ba8df4c035df7cf977afb52ce477a29bd74",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_3a624ce": {
        "bug_id": "jmeter_3a624ce",
        "commit": "https://github.com/apache/jmeter/commit/3a624ce6df6c553e4399e7106c5c0ddff984340b",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/jmeter/blob/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionController.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/control/TransactionController.java?ref=3a624ce6df6c553e4399e7106c5c0ddff984340b",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/control/TransactionController.java",
                "patch": "@@ -39,7 +39,9 @@\n \tpublic Sampler next() {\n         // Check if transaction is done\n         if(transactionSampler != null && transactionSampler.isTransactionDone()) {\n-            log.debug(\"End of transaction\");\n+        \tif (log.isDebugEnabled()) {\n+                log.debug(\"End of transaction \" + getName());\n+        \t}\n             // This transaction is done\n             transactionSampler = null;\n             return null;\n@@ -48,7 +50,9 @@ public Sampler next() {\n         // Check if it is the start of a new transaction\n \t\tif (isFirst()) // must be the start of the subtree\n \t\t{\n-\t\t    log.debug(\"Start of transaction\");\n+        \tif (log.isDebugEnabled()) {\n+\t\t        log.debug(\"Start of transaction \" + getName());\n+        \t}\n \t\t    transactionSampler = new TransactionSampler(this, getName());\n \t\t}\n \n@@ -61,4 +65,19 @@ public Sampler next() {\n         }\n         return transactionSampler;\n \t}\n+\t\n+\tprotected Sampler nextIsAController(Controller controller) throws NextIsNullException {\n+\t\tSampler returnValue;\n+\t\tSampler sampler = controller.next();\n+\t\tif (sampler == null) {\n+\t\t\tcurrentReturnedNull(controller);\n+\t\t\t// We need to call the super.next, instead of this.next, which is done in GenericController,\n+\t\t\t// because if we call this.next(), it will return the TransactionSampler, and we do not want that.\n+\t\t\t// We need to get the next real sampler or controller\n+\t\t\treturnValue = super.next();\n+\t\t} else {\n+\t\t\treturnValue = sampler;\n+\t\t}\n+\t\treturn returnValue;\n+\t}\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionController.java",
                "sha": "30ed135a9aa25699fcdaef003d988346551c6ecd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionSampler.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/control/TransactionSampler.java?ref=3a624ce6df6c553e4399e7106c5c0ddff984340b",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/control/TransactionSampler.java",
                "patch": "@@ -51,6 +51,7 @@ public TransactionSampler(){\n \n \tpublic TransactionSampler(TransactionController controller, String name) {\n         transactionController = controller;\n+\t\tsetName(name); // ensure name is available for debugging\n \t\ttransactionSampleResult = new SampleResult();\n \t\ttransactionSampleResult.setSampleLabel(name);\n \t\t// Assume success",
                "raw_url": "https://github.com/apache/jmeter/raw/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionSampler.java",
                "sha": "1f99997daf535e1b266bfd5576f87dc8a4dbfc12",
                "status": "modified"
            }
        ],
        "message": "Bug 42778 - Transaction Controller skips sample (NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@552158 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 858ce03852cb0faba751a048e6fd194c2846a312",
        "parent": "https://github.com/apache/jmeter/commit/a9b4fdf43dfba740ee1feee6d77b7a21f23ffb44",
        "patched_files": [
            "TransactionController.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestTransactionController.java"
        ]
    },
    "jmeter_4582f7b": {
        "bug_id": "jmeter_4582f7b",
        "commit": "https://github.com/apache/jmeter/commit/4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -121,14 +121,15 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate List subResults;\n \n-\tprivate String dataType;\n+\tprivate String dataType=\"\"; // Don't return null if not set\n \n \tprivate boolean success;\n \n \tprivate Set files;\n \n \tprivate String dataEncoding;// (is this really the character set?) e.g.\n \t\t\t\t\t\t\t\t// ISO-8895-1, UTF-8\n+\t// If null, then DEFAULT_ENCODING is returned by getDataEncoding()\n \n \tprivate long time = 0;\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "6add4cf4705975675c42da85e53eba953ab68866",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in XStream - ensure dataType does not default to null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325825 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0ffe310f266e52fa5a7fb8044faf391a18c1b34c",
        "parent": "https://github.com/apache/jmeter/commit/3bee981f62ce2378ff421de8f497500d84bca67b",
        "patched_files": [
            "SampleResult.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_4677baf": {
        "bug_id": "jmeter_4677baf",
        "commit": "https://github.com/apache/jmeter/commit/4677bafc1674b3388715ba408bfb77d038262631",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=4677bafc1674b3388715ba408bfb77d038262631",
                "deletions": 7,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -362,14 +362,11 @@ private void startGui(String testFile) {\n      * @param args The arguments for JMeter\n      */\n     public void start(String[] args) {\n-        \n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n-            String text = IOUtils.toString(inputStream);\n-            System.out.println(text);\n+            if(inputStream != null) {\n+                String text = IOUtils.toString(inputStream);\n+                System.out.println(text);\n+            }\n         } catch (IOException e1) {\n             // NOP\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "sha": "8f15602757f5b846ad5bf4241b3954bba9e219c1",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 4 : Avoid failing to see what Jars contain\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737316 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e4dbbd7934eabba1076652697c9c99a3d68ff696",
        "parent": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_468df6b": {
        "bug_id": "jmeter_468df6b",
        "commit": "https://github.com/apache/jmeter/commit/468df6be21c02f51d14c248ed2c79564d208e5dd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/468df6be21c02f51d14c248ed2c79564d208e5dd/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java?ref=468df6be21c02f51d14c248ed2c79564d208e5dd",
                "deletions": 0,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "patch": "@@ -174,6 +174,7 @@ protected CookieManager getCookieManager(String ipAddr)\n             if(cm == null)\n             {\n                 cm = new CookieManager();\n+                cm.testStarted();\n                 cookieManagers.put(ipAddr,cm);\n             }\n             while(managersInUse.contains(cm))",
                "raw_url": "https://github.com/apache/jmeter/raw/468df6be21c02f51d14c248ed2c79564d208e5dd/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "sha": "49f5de32fe4f90ec856ee0293694459e7c6c8dca",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/468df6be21c02f51d14c248ed2c79564d208e5dd/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=468df6be21c02f51d14c248ed2c79564d208e5dd",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -83,6 +83,7 @@ JSR223 Test Elements using Script file are now Compiled if ScriptEngine supports\n <li><bugzilla>53348</bugzilla> - JMeter JMS Point-to-Point Request-Response sampler doesn't work when Request-queue and Receive-queue are different</li>\n <li><bugzilla>53357</bugzilla> - JMS Point to Point reports too high response times in Request Response Mode</li>\n <li><bugzilla>53440</bugzilla> - SSL connection leads to ArrayStoreException on JDK 6 with some KeyManagerFactory SPI</li>\n+<li><bugzilla>53511</bugzilla> - access log sampler SessionFilter throws NullPointerException - cookie manager not initialized properly</li>\n </ul>\n \n <h3>Controllers</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/468df6be21c02f51d14c248ed2c79564d208e5dd/xdocs/changes.xml",
                "sha": "4b39f6c970019f3ed6e99cfeae75434c4ff5d0ce",
                "status": "modified"
            }
        ],
        "message": "Bug 53511 - access log sampler SessionFilter throws NullPointerException - cookie manager not initialized properly \nBugzilla Id: 53511\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1363120 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fb5af5343ba0324c904ae2896e939f7628789d4a",
        "parent": "https://github.com/apache/jmeter/commit/46fbdf4fa45bb6f9e578020a75f8ca0c16502fa9",
        "patched_files": [
            "SessionFilter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSessionFilter.java"
        ]
    },
    "jmeter_4d9857f": {
        "bug_id": "jmeter_4d9857f",
        "commit": "https://github.com/apache/jmeter/commit/4d9857f391e890a9784809050ddc5648a0cb3ce9",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "deletions": 10,
                "filename": "src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "patch": "@@ -83,15 +83,34 @@\n  * <li>Modifies the property descriptors, bean descriptor, etc. at will.\n  * </ol>\n  * <p>\n- * Without any such modifications, the property descriptors will already\n- * have localized display names and short descriptions, and the bean\n- * descriptor will have a \"resourceBoundle\" attribute to be used for further\n- * localization.\n+ * Even before any such modifications, a resource bundle named xxxResources\n+ * (where xxx is the fully qualified bean class name) will be obtained if\n+ * available and used to localize the following:\n+ * <ul>\n+ * <li>Bean's display name -- from property <b>displayName</b>.\n+ * <li>Properties' display names -- from properties \n+ * <b><i>propertyName</i>.displayName</b>.\n+ * <li>Properties' short descriptions -- from properties\n+ * <b><i>propertyName</i>.shortDescription</b>.\n+ * </ul>\n+ * <p>\n+ * The resource bundle will be stored as the bean descriptor's \"resourceBundle\"\n+ * attribute, so that it can be used for further localization. TestBeanGUI, for\n+ * example, uses it to obtain the group's display names from properties\n+ * <b><i>groupName</i>.displayName</b>.\n  */\n public abstract class BeanInfoSupport implements BeanInfo {\n \n \tprivate static transient Logger log = LoggingManager.getLoggerForClass();\n \n+\t// Some known attribute names, just for convenience:\n+\tpublic static final String TAGS= TestBeanGUI.TAGS;\n+\tpublic static final String NOT_UNDEFINED= TestBeanGUI.NOT_UNDEFINED;\n+\tpublic static final String NOT_EXPRESSION= TestBeanGUI.NOT_EXPRESSION;\n+\tpublic static final String NOT_OTHER= TestBeanGUI.NOT_OTHER;\n+\tpublic static final String DEFAULT= TestBeanGUI.DEFAULT;\n+\tpublic static final String RESOURCE_BUNDLE= TestBeanGUI.RESOURCE_BUNDLE;\n+\n \t/**\n \t * The class for which we're providing the bean info.\n \t */\n@@ -124,7 +143,7 @@ protected BeanInfoSupport(Class beanClass) {\n \t\t\t\tJMeterUtils.getLocale()); \n \n \t\t\t// Store the resource bundle as an attribute of the BeanDescriptor:\n-\t\t\tgetBeanDescriptor().setValue(\"resourceBundle\", resourceBundle);\n+\t\t\tgetBeanDescriptor().setValue(RESOURCE_BUNDLE, resourceBundle);\n \n \t\t\t// Localize the bean name\n \t\t\ttry\n@@ -174,8 +193,7 @@ protected BeanInfoSupport(Class beanClass) {\n \t\t}\n \t\tcatch (MissingResourceException e)\n \t\t{\n-\t\t\tlog.warn(\"Localized strings not available for bean \"+beanClass\n-\t\t\t\t\t\t\t+\" on locale \"+JMeterUtils.getLocale());\n+\t\t\tlog.warn(\"Localized strings not available for bean \"+beanClass);\n \t\t}\n \t}\n \t\n@@ -215,11 +233,11 @@ protected void createPropertyGroup(String group, String[] names)\n \t\tfor (int i=0; i<names.length; i++)\n \t\t{\n \t\t\tPropertyDescriptor p= property(names[i]);\n-\t\t\tp.setValue(\"group\", group);\n-\t\t\tp.setValue(\"order\", new Integer(i));\n+\t\t\tp.setValue(TestBeanGUI.GROUP, group);\n+\t\t\tp.setValue(TestBeanGUI.ORDER, new Integer(i));\n \t\t}\n \t\tnumCreatedGroups++;\n-\t\tgetBeanDescriptor().setValue(\"group.\"+group+\".order\",\n+\t\tgetBeanDescriptor().setValue(TestBeanGUI.ORDER(group),\n \t\t\tnew Integer(numCreatedGroups));\n \t}\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "sha": "c9515efcbc3e59b1df3640d15779626efeec5e8c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "patch": "@@ -107,7 +107,7 @@ public FileEditor()\n \t\teditor= new WrapperEditor(\n \t\t\tnew SimpleFileEditor(),\n \t\t\tnew ComboStringEditor(),\n-\t\t\ttrue, true);\n+\t\t\ttrue, true, true);\n \n \t\t// Create a panel containing the combo and the button:\n \t\tpanel= new JPanel(new BorderLayout(5,0));",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "sha": "c4bee039c94fa5e3c96cacc19d6e0d299e477613",
                "status": "modified"
            },
            {
                "additions": 91,
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "deletions": 49,
                "filename": "src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "patch": "@@ -122,24 +122,28 @@\n  * <dl>\n  * <dt>group: String</dt>\n  * <dd>Group under which the property should be shown in the GUI. The string is\n- * also used as a group title. The default group is \"\".</dd>\n+ * also used as a group title (but see comment on resourceBundle below). The\n+ * default group is \"\".</dd>\n  * <dt>order: Integer</dt>\n  * <dd>Order in which the property will be shown in its group. A smaller\n  * integer means higher up in the GUI. The default order is 0. Properties\n  * of equal order are sorted alphabetically.</dd>\n  * <dt>tags: String[]</dt>\n  * <dd>List of values to be offered for the property in addition to those\n  * offered by its property editor.</dd>\n- * <dt>noUndefined: Boolean</dt>\n+ * <dt>notUndefined: Boolean</dt>\n  * <dd>If true, the property should not be left undefined. A <b>default</b>\n  * attribute must be provided if this is set.</dd>\n- * <dd>noEdit: Boolean</dd>\n- * <dd>If true, the property content should not be edited manually, that is: it\n- * should always be one of the tags values.</dt>\n+ * <dd>notExpression: Boolean</dd>\n+ * <dd>If true, the property content should always be constant: JMeter\n+ * 'expressions' (strings using ${var}, etc...) can't be used.</dt>\n+ * <dd>notOther: Boolean</dd>\n+ * <dd>If true, the property content must always be one of the tags values or\n+ * null.</dt>\n  * <dt>default: Object</dt>\n  * <dd>Initial value for the property's GUI. Must be provided and be non-null\n- * if <b>noUndefined</b> is set. Must be one of the provided tags (or null) if\n- * <b>noEdit</b> is set.\n+ * if <b>notUndefined</b> is set. Must be one of the provided tags (or null) if\n+ * <b>notOther</b> is set.\n  * </dl>\n  * <p>\n  * The following BeanDescriptor attributes are also understood:\n@@ -151,15 +155,29 @@\n  * in the GUI. The default order is 0. Groups of equal order are sorted\n  * alphabetically.</dd>\n  * <dt>resourceBundle: ResourceBundle</dt>\n- * <dd>A resource bundle to be used for GUI localization. Group display names,\n- * for example, will be obtained from property \"<i>group</i>.displayName\" if\n+ * <dd>A resource bundle to be used for GUI localization: group display names\n+ * will be obtained from property \"<b><i>group</i>.displayName</b>\" if\n  * available (where <b><i>group</i></b> is the group name).\n  * </dl>\n  */\n public class TestBeanGUI extends AbstractJMeterGuiComponent\n {\n     private static Logger log = LoggingManager.getLoggerForClass();\n \n+\tpublic static final String GROUP= \"group\";\n+\tpublic static final String ORDER= \"order\";\n+\tpublic static final String TAGS= \"tags\";\n+\tpublic static final String NOT_UNDEFINED= \"notUndefined\";\n+\tpublic static final String NOT_EXPRESSION= \"notExpression\";\n+\tpublic static final String NOT_OTHER= \"notOther\";\n+\tpublic static final String DEFAULT= \"default\";\n+\tpublic static final String RESOURCE_BUNDLE= \"resourceBundle\";\n+\tpublic static final String ORDER(String group) {\n+\t\treturn \"group.\"+group+\".order\";\n+\t}\n+\n+\tpublic static final String DEFAULT_GROUP= \"\";\n+\n     /**\n      * Class of the objects being edited.\n      */\n@@ -315,7 +333,7 @@ public TestBeanGUI(Class testBeanClass)\n \t\t\teditors[i]= propertyEditor;\n \n \t\t\t// Initialize the editor with the provided default value or null:\n-            setEditorValue(i, descriptors[i].getValue(\"default\"));\n+            setEditorValue(i, descriptors[i].getValue(DEFAULT));\n         }\n \n \t\t// Obtain message formats:\n@@ -340,7 +358,7 @@ private WrapperEditor createWrapperEditor(\n \t\t\tPropertyEditor typeEditor, PropertyDescriptor descriptor)\n \t{\n \t\tString[] editorTags= typeEditor.getTags();\n-\t\tString[] additionalTags= (String[])descriptor.getValue(\"tags\");\n+\t\tString[] additionalTags= (String[])descriptor.getValue(TAGS);\n \t\tString[] tags= null;\n \t\tif (editorTags == null) tags= additionalTags;\n \t\telse if (additionalTags == null) tags= editorTags;\n@@ -350,57 +368,80 @@ private WrapperEditor createWrapperEditor(\n \t\t\tfor (int i=0; i<editorTags.length; i++) tags[j++]= editorTags[i];\n \t\t\tfor (int i=0; i<additionalTags.length; i++) tags[j++]= additionalTags[i];\n \t\t}\n-\t\t\n-\t\tboolean noUndefined=\n-\t\t\tBoolean.TRUE.equals(descriptor.getValue(\"noUndefined\"));\n-\t\tboolean noEdit=\n-\t\t\tBoolean.TRUE.equals(descriptor.getValue(\"noEdit\"));\n+\n+\t\tboolean notNull=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_UNDEFINED));\n+\t\tboolean notExpression=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_EXPRESSION));\n+\t\tboolean notOther=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_OTHER));\n \n \t\tPropertyEditor guiEditor;\n-\t\tif (noUndefined && tags==null)\n+\t\tif (notNull && tags==null)\n \t\t{\n \t\t\tguiEditor= new FieldStringEditor();\n \t\t}\n \t\telse\n \t\t{\n \t\t\tComboStringEditor e= new ComboStringEditor();\n-\t\t\te.setNoUndefined(noUndefined);\n-\t\t\te.setNoEdit(noEdit);\n+\t\t\te.setNoUndefined(notNull);\n+\t\t\te.setNoEdit(notExpression && notOther);\n \t\t\te.setTags(tags);\n \t\t\t\n \t\t\tguiEditor= e;\n \t\t}\n \n \t\tWrapperEditor wrapper= new WrapperEditor(\n \t\t\ttypeEditor, guiEditor,\n-\t\t\t!noUndefined, // acceptsNull\n-\t\t\t!noEdit // acceptsExpressions TODO: can be finer\n+\t\t\t!notNull, // acceptsNull\n+\t\t\t!notExpression, // acceptsExpressions\n+\t\t\t!notOther // acceptsOther\n \t\t\t);\n \n-\t\tObject defaultValue= descriptor.getValue(\"default\");\n+\t\tObject defaultValue= descriptor.getValue(DEFAULT);\n \t\t\n-\t\tif (guiEditor instanceof ComboStringEditor && !noEdit)\n+\t\ttry\n \t\t{\n-\t\t\t// Provide an initial edit value:\n-\t\t\tif (tags != null)\n-\t\t\t{\n-\t\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(tags[0]);\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// 'expressions' are currently always valid on\n-\t\t\t\t// editable fields: TODO: could be finer\n-\t\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(\"${}\");\n-\t\t\t}\n-\t\t\t// TODO: I don't like this solution. We could make a\n-\t\t\t// more convenient approach if we knew whether the property\n-\t\t\t// accepts expressions or not, whether it accepts any \n-\t\t\t// values beyond the provided tags or not, etc... \n-\t\t\t// ... plus we could define a \"initialEditValue\" property descriptor\n-\t\t\t// attribute to explicitly specify which value should be used. \n+\t\t\twrapper.setValue(defaultValue);\n+\t\t}\n+\t\tcatch (IllegalArgumentException e)\n+\t\t{\n+\t\t\tlog.error(\"The default value for property \" + descriptor.getName()\n+\t\t\t\t+\" is not valid. Or a default value was not provided and \"\n+\t\t\t\t+\" property attribute notUndefined is set to true.\");\n+\t\t\tthrow new Error(e.toString()); // programming error, so bail out.\n \t\t}\n \n-\t\twrapper.setValue(defaultValue);\n+\t\tif (guiEditor instanceof ComboStringEditor)\n+\t\t{\n+\t\t\t// Provide an initial edit value if necessary:\n+\t\t\n+\t\t\t/*\n+\t\t\t\tWhat follows encodes this correspondence:\n+\n+\t\t\t\t ot  ex  nl -- default or 1st tag or ${}\n+\t\t\t\t ot  ex !nl -- \"\": use \"\" or last valid value\n+\t\t\t\t ot !ex  nl -- default or 1st tag or \"\" or last valid value :-(\n+\t\t\t\t ot !ex !nl -- \"\": use \"\" or last valid value\n+\t\t\t\t!ot  ex  nl -- ${}\n+\t\t\t\t!ot  ex !nl -- ${}\n+\t\t\t\t!ot !ex  nl -- not necessary (not editable)\n+\t\t\t\t!ot !ex !nl -- not necessary (not editable)\n+\n+\t\t\t\t[ot=other, ex=expressions, nl=null]\n+\n+\t\t\t*/ \n+\n+\t\t\tString v;\n+\t\t\tif (notOther) v=\"${}\";\n+\t\t\telse if (notNull) v= \"\";\n+\t\t\telse if (defaultValue != null) v= wrapper.getAsText();\n+\t\t\telse if (tags != null) v= tags[1];\n+\t\t\telse if (notExpression) v= \"\";\n+\t\t\telse v=\"${}\";\n+\n+\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(v);\n+\t\t}\n \n \t\treturn wrapper;\n \t}\n@@ -461,7 +502,7 @@ public void configure(TestElement element)\n \t\t\t\t// so I'll bail out.\n \t\t\t\tthrow new Error(\"Bad property value.\"+e);\n \t\t\t\t// TODO: review this and possibly change to:\n-\t\t\t\t// setEditorValue(i, descriptors[i].getValue(\"default\"); \n+\t\t\t\t// setEditorValue(i, descriptors[i].getValue(DEFAULT); \n \t\t\t}\n \t\t}\n     }\n@@ -672,7 +713,7 @@ private void init()\n \t\tcp.weightx= 1.0;\n \n \t\tJPanel currentPanel= mainPanel;\n-\t\tString currentGroup= \"\";\n+\t\tString currentGroup= DEFAULT_GROUP;\n \t\tint y=0;\n \t\t\n         for (int i=0; i<editors.length; i++)\n@@ -780,8 +821,8 @@ private JLabel createLabel(PropertyDescriptor desc)\n \t */\n \tprivate String group(PropertyDescriptor d)\n \t{\n-\t\tString group= (String)d.getValue(\"group\");\n-\t\tif (group == null) group= \"\";\n+\t\tString group= (String)d.getValue(GROUP);\n+\t\tif (group == null) group= DEFAULT_GROUP;\n \t\treturn group;\n \t}\n \n@@ -792,8 +833,9 @@ private String groupDisplayName(String group)\n \t{\n \t\ttry {\n \t\t\tResourceBundle b= (ResourceBundle)\n-\t\t\t\tbeanInfo.getBeanDescriptor().getValue(\"resourceBundle\");\n-\t\t\treturn b.getString(group+\".displayName\");\n+\t\t\t\tbeanInfo.getBeanDescriptor().getValue(RESOURCE_BUNDLE);\n+\t\t\tif (b == null) return group;\n+\t\t\telse return b.getString(group+\".displayName\");\n \t\t}\n \t\tcatch (MissingResourceException e)\n \t\t{\n@@ -840,7 +882,7 @@ private int compare(PropertyDescriptor d1, PropertyDescriptor d2)\n \t\tprivate Integer groupOrder(String group)\n \t\t{\n \t\t\tInteger order= (Integer)beanInfo.getBeanDescriptor()\n-\t\t\t\t\t.getValue(\"group.\"+group+\".order\");\n+\t\t\t\t\t.getValue(ORDER(group));\n \t\t\tif (order == null) order= new Integer(0);\n \t\t\treturn order;\n \t\t}\n@@ -853,7 +895,7 @@ private Integer groupOrder(String group)\n \t\t */\n \t\tprivate Integer propertyOrder(PropertyDescriptor d)\n \t\t{\n-\t\t\tInteger order= (Integer)d.getValue(\"order\");\n+\t\t\tInteger order= (Integer)d.getValue(ORDER);\n \t\t\tif (order == null) order= new Integer(0);\n \t\t\treturn order;\n \t\t}",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "sha": "fbbe8c093a8c2c71460a1ac7527d16db688b4b42",
                "status": "modified"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "changes": 66,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "deletions": 8,
                "filename": "src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "patch": "@@ -111,6 +111,11 @@\n \t */\n \tboolean acceptsExpressions;\n \n+\t/**\n+\t * Whether to allow any constant values different from the provided tags. \n+\t */\n+\tboolean acceptsOther;\n+\n     /**\n    \t * Keep track of the last valid value in the editor, so that we can\n    \t * revert to it if the user enters an invalid value.\n@@ -148,13 +153,17 @@ private static Class objectType(Class type)\n     }\n */\n \tpublic WrapperEditor(\n-\t\t\tPropertyEditor typeEditor, PropertyEditor guiEditor,\n-\t\t\tboolean acceptsNull, boolean acceptsExpressions) {\n+\t\t\tPropertyEditor typeEditor, \n+\t\t\tPropertyEditor guiEditor,\n+\t\t\tboolean acceptsNull, \n+\t\t\tboolean acceptsExpressions, \n+\t\t\tboolean acceptsOther) {\n \t\tsuper();\n \t\tthis.typeEditor= typeEditor;\n \t\tthis.guiEditor= guiEditor;\n \t\tthis.acceptsNull= acceptsNull;\n \t\tthis.acceptsExpressions= acceptsExpressions;\n+\t\tthis.acceptsOther= acceptsOther;\n \t\t\n \t\tguiEditor.addPropertyChangeListener(this);\n \t}\n@@ -169,6 +178,28 @@ public Component getCustomEditor()\n \t\treturn guiEditor.getCustomEditor();\n \t}\n \n+\tpublic String[] getTags()\n+\t{\n+\t\treturn guiEditor.getTags();\n+\t}\n+\n+\t/**\n+\t * Determine wheter a string is one of the known tags.\n+\t * \n+\t * @param text\n+\t * @return true iif text equals one of the getTags()\n+\t */\n+\tprivate boolean isATag(String text)\n+\t{\n+\t\tString[] tags= getTags();\n+\t\tif (tags == null) return false;\n+\t\tfor (int i=0; i<tags.length; i++)\n+\t\t{\n+\t\t\tif (tags[i].equals(text)) return true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n     /**\n  \t * Determine whether a string is a valid value for the property.\n    \t * \n@@ -182,6 +213,14 @@ private boolean isValidValue(String text)\n     \tif (acceptsExpressions && isExpression(text)) return true;\n \n     \t// Not an expression (isn't or can't be), not null.\n+    \t\n+\t\t// The known tags are assumed to be valid:\n+\t\tif (isATag(text)) return true;\n+\t\t\n+\t\t// Was not a tag, so if we can't accept other values...\n+\t\tif (! acceptsOther) return false;\n+\t\t\n+\t\t// Delegate the final check to the typeEditor:\n     \ttry\n     \t{\n     \t\ttypeEditor.setAsText(text);\n@@ -223,7 +262,8 @@ private final void shouldNeverHappen(Exception e) throws Error\n \t * Check if a string is a valid JMeter 'expression'.\n \t * <p>\n \t * The current implementation is very basic: it just accepts any\n-\t * string containing \"${\" as a valid expression. TODO: improve.\n+\t * string containing \"${\" as a valid expression.\n+\t * TODO: improve, but keep returning true for \"${}\". \n \t */\n \tprivate final boolean isExpression(String text)\n \t{\n@@ -265,6 +305,10 @@ public Object getValue()\n     \t\telse\n     \t\t{\n     \t\t\t// not an expression (isn't or can't be), not null.\n+\t\t\t\t\n+\t\t\t\t// a check, just in case:\n+\t\t\t\tif (! acceptsOther && ! isATag(text)) shouldNeverHappen();\n+\n     \t\t\ttry\n     \t\t\t{\n     \t\t\t\ttypeEditor.setAsText(text);\n@@ -300,7 +344,7 @@ public void setValue(Object value)\n     \t\t\t\t+ \":\"\n     \t\t\t\t+ value);\n     \t}\n-    \n+\n     \tif (value == null)\n     \t{\n     \t\tif (!acceptsNull) throw new IllegalArgumentException();\n@@ -315,6 +359,8 @@ else if (acceptsExpressions && isExpression(value))\n \t\t\t// Not an expression (isn't or can't be), not null.\n     \t\ttypeEditor.setValue(value); // may throw IllegalArgumentExc.\n     \t\ttext= typeEditor.getAsText();\n+    \t\t\n+    \t\tif (! acceptsOther && ! isATag(text)) throw new IllegalArgumentException();\n     \t}\n \n     \tguiEditor.setValue(text);\n@@ -342,6 +388,9 @@ else if (!acceptsExpressions || !isExpression(text))\n \t\t\t\tshouldNeverHappen(e);\n \t\t\t}\n \t\t\ttext= typeEditor.getAsText();\n+\n+\t\t\t// a check, just in case:\n+\t\t\tif (! acceptsOther && ! isATag(text)) shouldNeverHappen();\n     \t}\n     \n     \tif (log.isDebugEnabled())\n@@ -359,10 +408,10 @@ public void setAsText(String text) throws IllegalArgumentException\n \t\t}\n     \t\t\n \t\tString value;\n-    \t\t\n+\n \t\tif (text == null)\n \t\t{\n-\t\t\tif (!acceptsNull) shouldNeverHappen();\n+\t\t\tif (! acceptsNull) throw new IllegalArgumentException();\n \t\t\tvalue= null;\n \t\t}\n \t\telse \n@@ -373,13 +422,14 @@ public void setAsText(String text) throws IllegalArgumentException\n \t\t\t}\n \t\t\telse\n \t\t\t{\n+\t\t\t\t// Some editors do tiny transformations (e.g. \"true\" to \"True\",...):\n \t\t\t\ttypeEditor.setAsText(text); // may throw IllegalArgumentException\n \t\t\t\tvalue= typeEditor.getAsText();\n+\t\t\t\t\n+\t\t\t\tif (! acceptsOther && ! isATag(text)) throw new IllegalArgumentException();\n \t\t\t}\n \t\t}\n \n-\t\t// TODO: if (NOT A TAG: && noEdit) shouldNeverHappen();\n-    \n \t\tguiEditor.setValue(value);\n \n \t\tfirePropertyChange();",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "sha": "61cd2ba86c9b0af00a6b44a4a7949a2c40c7e3b5",
                "status": "modified"
            }
        ],
        "message": "* Using constants for attribute names.\n* Diferentiated noEdit into not accepting expressions and not accepting\nvalues beyond de editor's tags.\n* Fixed possible NPE in TestBeanGUI.group and .groupDisplayName.\n* Improved comments.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324090 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 70cc2ffa3fbb9d0d7c7445d30a116c574da47cfc",
        "parent": "https://github.com/apache/jmeter/commit/fd897f442db89e37a87387c04e54ba3671891948",
        "patched_files": [
            "WrapperEditor.java",
            "FileEditor.java",
            "BeanInfoSupport.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestBeanGUI.java"
        ]
    },
    "jmeter_4f87042": {
        "bug_id": "jmeter_4f87042",
        "commit": "https://github.com/apache/jmeter/commit/4f870424de13b089e2193222e259f45097eae3da",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=4f870424de13b089e2193222e259f45097eae3da",
                "deletions": 3,
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "patch": "@@ -201,11 +201,11 @@ protected static void readProperties()\n \n         try\n         {\n-            props = JMeterUtils.getProperties(PROPS_FILE);\n+            props = JMeterUtils.getJMeterProperties();\n         }\n         catch (Exception e)\n         {\n-            log.error(\"SaveService.readProperties: Problem loading properties file \" + PROPS_FILE, e);\n+            log.error(\"SaveService.readProperties: Problem loading properties file: \", e);\n         }\n \n         printFieldNames =\n@@ -696,7 +696,7 @@ else if (formatter != null)\n             String message = null;\n             AssertionResult[] results = sample.getAssertionResults();\n \n-            if (results.length > 0)\n+            if ((results != null) && (results.length > 0))\n             {\n                 message = results[0].getFailureMessage();\n             }",
                "raw_url": "https://github.com/apache/jmeter/raw/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveService.java",
                "sha": "867a701417d248c885365cdcdbef1e58db2e603c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/jmeter/blob/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveServiceConstants.java?ref=4f870424de13b089e2193222e259f45097eae3da",
                "deletions": 5,
                "filename": "src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "patch": "@@ -74,11 +74,6 @@\n     // PROPERTY FILE CONSTANTS\n     // ---------------------------------------------------------------------\n \n-    /** The file containing the properties governing the information to\n-     be saved.  **/\n-    public static final String PROPS_FILE =\n-            \"jmeter.properties\";\n-\n     /** Indicates that the results file should be in XML format.  **/\n     public static final String XML = \"xml\";\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "sha": "ef72c407bb078715a6e8502ff93354e6222b276d",
                "status": "modified"
            }
        ],
        "message": "SaveService properties no longer have to come from jmeter.properties.\nAlso, fixed potential NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323122 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3910a6d293cc88bb7f971f3263e09cc7b628c213",
        "parent": "https://github.com/apache/jmeter/commit/15cdec3e33347e7a347220239c3c93bb5572d411",
        "patched_files": [
            "SaveService.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSaveService.java"
        ]
    },
    "jmeter_5838efe": {
        "bug_id": "jmeter_5838efe",
        "commit": "https://github.com/apache/jmeter/commit/5838efe389c3bab0de0c2d635aac394bc4f52545",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=5838efe389c3bab0de0c2d635aac394bc4f52545",
                "deletions": 2,
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "patch": "@@ -201,8 +201,7 @@ public AssertionResult getResult(SampleResult response)\n       {\n          result = new AssertionResult();\n          result.setError(true);\n-         result.setFailureMessage(\n-            new String((byte[]) response.getResponseData()));\n+         result.setFailureMessage(response.responseDatatoString());\n          return result;\n       }\n       result = evaluateResponse(response);",
                "raw_url": "https://github.com/apache/jmeter/raw/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "sha": "c4d054a98b78172720ab231e7e79b4eaaadd95e6",
                "status": "modified"
            }
        ],
        "message": "Ensure null responseData does not cause NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323463 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a6aaa882cd5a13c0458fb381c4e1e9210b57af5a",
        "parent": "https://github.com/apache/jmeter/commit/7a9cca4b0eedcf9f089c13ca8f9e9188cae7f463",
        "patched_files": [
            "ResponseAssertion.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "ResponseAssertionTest.java"
        ]
    },
    "jmeter_5a11e55": {
        "bug_id": "jmeter_5a11e55",
        "commit": "https://github.com/apache/jmeter/commit/5a11e552215dc7cc68d0b2a3682cc429df656447",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/FileRowColContainer.java?ref=5a11e552215dc7cc68d0b2a3682cc429df656447",
                "deletions": 1,
                "filename": "src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "patch": "@@ -109,9 +109,12 @@ private void load()\n         {\n         \tfileData = null;\n \t\t\tlog.warn(e.toString());\n-\t\t\tmyBread.close();\n             throw e;\n         }\n+        finally\n+        {\n+\t\t\tif (myBread != null) myBread.close();\n+        }\n \t}\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "sha": "a5bd4077eb185e41f24c92f174bfbfbba72d68e8",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE and failure to close file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324318 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 84218b52587917a333c7402270c825928b103bae",
        "parent": "https://github.com/apache/jmeter/commit/2975406ff22ec824be29d9f679ede7eb62c11f6b",
        "patched_files": [
            "FileRowColContainer.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestFileRowColContainer.java"
        ]
    },
    "jmeter_5aab820": {
        "bug_id": "jmeter_5aab820",
        "commit": "https://github.com/apache/jmeter/commit/5aab820e539bbef191e397ae366b6e3636fb0743",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/RegexFunction.java?ref=5aab820e539bbef191e397ae366b6e3636fb0743",
                "deletions": 0,
                "filename": "src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "patch": "@@ -127,6 +127,10 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n         // Relatively expensive operation, so do it once\n         JMeterVariables vars = getVariables();\n \n+        if (vars == null){// Can happen if called during test closedown\n+            return defaultValue;\n+        }\n+\n         if (name.length() > 0) {\n             vars.put(name, defaultValue);\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "sha": "22fe516b363e9084f6bd28ca279256553c243487",
                "status": "modified"
            }
        ],
        "message": "Protect against possible NPE if called during shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@732427 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 45acdd06762fb1399f01d025f3898acec8e3f610",
        "parent": "https://github.com/apache/jmeter/commit/60b6a02093665c25bb439cd0582545dcce8f9f40",
        "patched_files": [
            "RegexFunction.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestRegexFunction.java"
        ]
    },
    "jmeter_6185600": {
        "bug_id": "jmeter_6185600",
        "commit": "https://github.com/apache/jmeter/commit/618560069ba20d2ab31d3d1c4f807b2a0028a154",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/ResultSaver.java?ref=618560069ba20d2ab31d3d1c4f807b2a0028a154",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "patch": "@@ -227,6 +227,9 @@ private boolean ignoreSampler(SampleResult s) {\n      * @param parentFile\n      */\n     private void createFoldersIfNeeded(File parentFile) {\n+        if(parentFile == null) {\n+            return;\n+        }\n         if (!parentFile.exists()) {\n             log.debug(\"Creating path hierarchy for folder {}\", parentFile.getAbsolutePath());\n             if(!parentFile.mkdirs()) {",
                "raw_url": "https://github.com/apache/jmeter/raw/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "sha": "455348e249dbde898829cc04baa442f68eda3a2c",
                "status": "modified"
            }
        ],
        "message": "[Bug 62195] Save Responses to a file : Improve component and UI\nFix NPE\nBugzilla Id: 62195\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1827350 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ce1d8f87532a874db382622fc2872f7ce2639c7f",
        "parent": "https://github.com/apache/jmeter/commit/d08c03f68b9d84d61d3d24e7461cbeeea8e0a550",
        "patched_files": [
            "ResultSaver.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestResultSaver.java"
        ]
    },
    "jmeter_6241b98": {
        "bug_id": "jmeter_6241b98",
        "commit": "https://github.com/apache/jmeter/commit/6241b98af954bfa26d111309c90c2074c6173326",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/6241b98af954bfa26d111309c90c2074c6173326/test/src/org/apache/jmeter/junit/JMeterTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/junit/JMeterTest.java?ref=6241b98af954bfa26d111309c90c2074c6173326",
                "deletions": 1,
                "filename": "test/src/org/apache/jmeter/junit/JMeterTest.java",
                "patch": "@@ -419,7 +419,7 @@ public void GUIComponents1() throws Exception {\n         if (!name.endsWith(\"TestBeanGUI\")) {\n             try {\n                 String label = guiItem.getLabelResource();\n-                assertTrue(label.length() > 0);\n+                assertTrue(\"Label should not be null or empty for \"+name,label != null && label.length() > 0);\n                 assertFalse(\"'\" + label + \"' should be in resource file for \" + name, JMeterUtils.getResString(\n                         label).startsWith(JMeterUtils.RES_KEY_PFX));\n             } catch (UnsupportedOperationException uoe) {",
                "raw_url": "https://github.com/apache/jmeter/raw/6241b98af954bfa26d111309c90c2074c6173326/test/src/org/apache/jmeter/junit/JMeterTest.java",
                "sha": "241efec4e098fae488fe29e901c8ad561eee12ba",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@959046 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6a87e361b1a4ff7fcd50a5c2daea096eba5154d9",
        "parent": "https://github.com/apache/jmeter/commit/52bac985398b7cea2e586b731c0f7963e1504338",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_62c14c9": {
        "bug_id": "jmeter_62c14c9",
        "commit": "https://github.com/apache/jmeter/commit/62c14c90da89da9d63984de8e542b4e9ab1b7744",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/jmeter/blob/62c14c90da89da9d63984de8e542b4e9ab1b7744/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java?ref=62c14c90da89da9d63984de8e542b4e9ab1b7744",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "patch": "@@ -272,7 +272,25 @@ public int compareTo(Object arg0)\n     {\n         if (arg0 instanceof JMeterProperty)\n         {\n-            return getStringValue().compareTo(((JMeterProperty) arg0).getStringValue());\n+            // We don't expect the string values to ever be null.  But (as in\n+            // bug 19499) sometimes they are.  So have null compare less than\n+            // any other value.  Log a warning so we can try to find the root\n+            // cause of the null value.\n+            String val = getStringValue();\n+            if (val == null) {\n+                log.warn(\n+                    \"Warning: Unexpected null value for property: \" + name);\n+                \n+                if (((JMeterProperty)arg0).getStringValue() == null) {\n+                    // Two null values -- return equal\n+                    return 0;\n+                } else {\n+                    return -1;\n+                }\n+            }\n+            \n+            return getStringValue().compareTo(\n+                ((JMeterProperty) arg0).getStringValue());\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/jmeter/raw/62c14c90da89da9d63984de8e542b4e9ab1b7744/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "sha": "68d05322fdd777ef8f4206f29bfea73c7054b483",
                "status": "modified"
            }
        ],
        "message": "Fix for bug 19499.  We were getting a NullPointerException while comparing properties.  The compareTo method now checks for null.\nWe don't think the properties should actually be null, so I'm generating a warning message so we can look into the root cause.\nIn any case, with this change I can add a MailerVisualizer to my test plan and save the plan.\nPR: 19499\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323242 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 05947f38384218cb1668364b9fc47a6831819dcb",
        "parent": "https://github.com/apache/jmeter/commit/5d306c6cc402993d6776f6274683d6620ae19fe6",
        "patched_files": [
            "AbstractProperty.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "AbstractPropertyTest.java"
        ]
    },
    "jmeter_6676493": {
        "bug_id": "jmeter_6676493",
        "commit": "https://github.com/apache/jmeter/commit/6676493d8fdbea544e7030c7b0189e4760688af4",
        "file": [
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/jmeter/blob/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=6676493d8fdbea544e7030c7b0189e4760688af4",
                "deletions": 50,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "patch": "@@ -985,23 +985,25 @@ private void addTimers(JMeterTreeModel model, JMeterTreeNode node, long deltaT)\n         variables.addParameter(\"T\", Long.toString(deltaT)); // $NON-NLS-1$\n         ValueReplacer replacer = new ValueReplacer(variables);\n         JMeterTreeNode mySelf = model.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> children = mySelf.children();\n-        while (children.hasMoreElements()) {\n-            JMeterTreeNode templateNode = children.nextElement();\n-            if (templateNode.isEnabled()) {\n-                TestElement template = templateNode.getTestElement();\n-                if (template instanceof Timer) {\n-                    TestElement timer = (TestElement) template.clone();\n-                    try {\n-                        timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n-                        replacer.undoReverseReplace(timer);\n-                        model.addComponent(timer, node);\n-                    } catch (InvalidVariableException\n-                            | IllegalUserActionException e) {\n-                        // Not 100% sure, but I believe this can't happen, so\n-                        // I'll log and throw an error:\n-                        log.error(\"Program error\", e);\n-                        throw new Error(e);\n+        if(mySelf != null) {\n+            Enumeration<JMeterTreeNode> children = mySelf.children();\n+            while (children.hasMoreElements()) {\n+                JMeterTreeNode templateNode = children.nextElement();\n+                if (templateNode.isEnabled()) {\n+                    TestElement template = templateNode.getTestElement();\n+                    if (template instanceof Timer) {\n+                        TestElement timer = (TestElement) template.clone();\n+                        try {\n+                            timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n+                            replacer.undoReverseReplace(timer);\n+                            model.addComponent(timer, node);\n+                        } catch (InvalidVariableException\n+                                | IllegalUserActionException e) {\n+                            // Not 100% sure, but I believe this can't happen, so\n+                            // I'll log and throw an error:\n+                            log.error(\"Program error adding timers\", e);\n+                            throw new Error(e);\n+                        }\n                     }\n                 }\n             }\n@@ -1088,25 +1090,27 @@ public JMeterTreeNode findTargetControllerNode() {\n         LinkedList<TestElement> elements = new LinkedList<>();\n \n         // Look for elements directly within the HTTP proxy:\n-        Enumeration<?> kids = treeModel.getNodeOf(this).children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement element = (TestElement) subNode.getUserObject();\n-                if (myClass.isInstance(element)) {\n-                    if (ascending) {\n-                        elements.addFirst(element);\n-                    } else {\n-                        elements.add(element);\n+        JMeterTreeNode node = treeModel.getNodeOf(this);\n+        if(node != null) {\n+            Enumeration<?> kids = node.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement element = (TestElement) subNode.getUserObject();\n+                    if (myClass.isInstance(element)) {\n+                        if (ascending) {\n+                            elements.addFirst(element);\n+                        } else {\n+                            elements.add(element);\n+                        }\n                     }\n                 }\n             }\n         }\n-\n         // Look for arguments elements in the target controller or higher up:\n         for (JMeterTreeNode controller = myTarget; controller != null; controller = (JMeterTreeNode) controller\n                 .getParent()) {\n-            kids = controller.children();\n+            Enumeration<?> kids = controller.children();\n             while (kids.hasMoreElements()) {\n                 JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n                 if (subNode.isEnabled()) {\n@@ -1360,13 +1364,15 @@ private void replaceValues(TestElement sampler, TestElement[] configs, Collectio\n     private void notifySampleListeners(SampleEvent event) {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof SampleListener) {\n-                    ((SampleListener) testElement).sampleOccurred(event);\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof SampleListener) {\n+                        ((SampleListener) testElement).sampleOccurred(event);\n+                    }\n                 }\n             }\n         }\n@@ -1379,13 +1385,15 @@ private void notifySampleListeners(SampleEvent event) {\n     private void notifyTestListenersOfStart() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) {\n-                    ((TestStateListener) testElement).testStarted();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) {\n+                        ((TestStateListener) testElement).testStarted();\n+                    }\n                 }\n             }\n         }\n@@ -1398,13 +1406,15 @@ private void notifyTestListenersOfStart() {\n     private void notifyTestListenersOfEnd() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) { // TL - TE\n-                    ((TestStateListener) testElement).testEnded();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) { // TL - TE\n+                        ((TestStateListener) testElement).testEnded();\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "sha": "abac91193653308e2372c08d4bdfc40258bab248",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1807339 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bcd84e6d09e26039a13a0d771d86c2900f4ff6fb",
        "parent": "https://github.com/apache/jmeter/commit/96574f079949575ea51c8763e98f91a90b560458",
        "patched_files": [
            "ProxyControl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestProxyControl.java"
        ]
    },
    "jmeter_6dcc29a": {
        "bug_id": "jmeter_6dcc29a",
        "commit": "https://github.com/apache/jmeter/commit/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java?ref=6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
                "deletions": 1,
                "filename": "src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "patch": "@@ -90,7 +90,7 @@ public void write(OutputStream os, InputStream is) {\n      * )\n      */\n     public String read(InputStream is) {\n-        byte[] msg = null;\n+        byte[] msg = new byte[0];\n         int msgLen = 0;\n         try {\n             byte[] lengthBuffer = new byte[lengthPrefixLen];",
                "raw_url": "https://github.com/apache/jmeter/raw/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "sha": "b3df93d03545f486295067aa0d2529e7d717e2a5",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@711629 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4350581ccf13746f245af110d56fcfbef6a04237",
        "parent": "https://github.com/apache/jmeter/commit/94dd949ce24d399165b462038dc041d2c9aa6a35",
        "patched_files": [
            "LengthPrefixedBinaryTCPClientImpl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "LengthPrefixedBinaryTCPClientImplTest.java"
        ]
    },
    "jmeter_6e9c33e": {
        "bug_id": "jmeter_6e9c33e",
        "commit": "https://github.com/apache/jmeter/commit/6e9c33e74537075ea0ab892f319b422b624c4262",
        "file": [
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/jmeter/blob/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=6e9c33e74537075ea0ab892f319b422b624c4262",
                "deletions": 25,
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "patch": "@@ -505,6 +505,24 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res\n         inputStreamReader.close();\n     }\n \n+    /**\n+     * Load a Test tree (JMX file)\n+     * @param file the JMX file\n+     * @return the loaded tree or null if an error occurs\n+     * @throws IOException if there is a problem reading the file or processing it\n+     * @deprecated use {@link SaveService}{@link #loadTree(File)}\n+     */\n+    public static HashTree loadTree(InputStream reader) throws IOException {\n+        try {\n+            return readTree(reader, null);\n+        } catch(IllegalArgumentException e) {\n+            log.error(\"Problem loading XML, message:\"+e.getMessage(), e);\n+            return null;\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+    \n     /**\n      * Load a Test tree (JMX file)\n      * @param file the JMX file\n@@ -516,38 +534,62 @@ public static HashTree loadTree(File file) throws IOException {\n         InputStream reader = null;\n         try {\n             reader = new FileInputStream(file);\n-            if (!reader.markSupported()) {\n-                reader = new BufferedInputStream(reader);\n+            return readTree(reader, file);\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param reader {@link InputStream} \n+     * @param file the JMX file used only for debug, can be null\n+     * @return the loaded tree\n+     * @throws IOException if there is a problem reading the file or processing it\n+     */\n+    private static final HashTree readTree(InputStream reader, File file) throws IOException {\n+        if (!reader.markSupported()) {\n+            reader = new BufferedInputStream(reader);\n+        }\n+        reader.mark(Integer.MAX_VALUE);\n+        ScriptWrapper wrapper = null;\n+        try {\n+            // Get the InputReader to use\n+            InputStreamReader inputStreamReader = getInputStreamReader(reader);\n+            wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n+            inputStreamReader.close();\n+            if (wrapper == null){\n+                log.error(\"Problem loading XML: see above.\");\n+                return null;\n             }\n-            reader.mark(Integer.MAX_VALUE);\n-            ScriptWrapper wrapper = null;\n-            try {\n-                // Get the InputReader to use\n-                InputStreamReader inputStreamReader = getInputStreamReader(reader);\n-                wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n-                inputStreamReader.close();\n-                if (wrapper == null){\n-                    log.error(\"Problem loading XML: see above.\");\n-                    return null;\n-                }\n-                return wrapper.testPlan;\n-            } catch (CannotResolveClassException e) {\n-                if (e.getMessage().startsWith(\"node\")) {\n-                    log.info(\"Problem loading XML, trying Avalon format\");\n-                    reader.reset();\n-                    return OldSaveService.loadSubTree(reader);                \n-                }\n+            return wrapper.testPlan;\n+        } catch (CannotResolveClassException e) {\n+            // FIXME We switching to JAVA7, use Multi-Catch Exceptions\n+            if (e.getMessage().startsWith(\"node\")) {\n+                log.info(\"Problem loading XML, trying Avalon format\");\n+                reader.reset();\n+                return OldSaveService.loadSubTree(reader);                \n+            }\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', cannot determine class for element: \" + e, e);\n-            } catch (NoClassDefFoundError e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, cannot determine class for element: \" + e, e);\n+            }\n+        } catch (NoClassDefFoundError e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', missing class \"+e , e);\n-            } catch (ConversionException e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, missing class \"+e , e);\n+            }\n+        } catch (ConversionException e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', conversion error \"+e , e);\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, conversion error \"+e , e);\n             }\n-        } finally {\n-            JOrphanUtils.closeQuietly(reader);\n         }\n-    }\n \n+    }\n     private static InputStreamReader getInputStreamReader(InputStream inStream) {\n         // Check if we have a encoding to use from properties\n         Charset charset = getFileEncodingCharset();",
                "raw_url": "https://github.com/apache/jmeter/raw/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "sha": "2ee41efad4a0d024beac062022c6c7bba4110d6c",
                "status": "modified"
            }
        ],
        "message": "[Bug 57605] When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers\nRetain backward compatibility as per sebb note\nBugzilla Id: 57605\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1661763 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4cfdbcd88ee56564748eb0b3bebd476030bec186",
        "parent": "https://github.com/apache/jmeter/commit/04bfc032adec91e040826804a254a3cfca6e5600",
        "patched_files": [
            "SaveService.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSaveService.java"
        ]
    },
    "jmeter_7af21a4": {
        "bug_id": "jmeter_7af21a4",
        "commit": "https://github.com/apache/jmeter/commit/7af21a4fc4d242ad0a17378d028dd2a2e94be985",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java?ref=7af21a4fc4d242ad0a17378d028dd2a2e94be985",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "patch": "@@ -318,7 +318,7 @@\n \t\t\t_formatter = null;\n \t\t}\n \n-\t\t_timestamp = !_timeStampFormat.equalsIgnoreCase(NONE);\n+\t\t_timestamp = !NONE.equalsIgnoreCase(_timeStampFormat);// reversed compare allows for null\n \n \t\t_saveAssertionResultsFailureMessage = TRUE.equalsIgnoreCase(props.getProperty(\n \t\t\t\tASSERTION_RESULTS_FAILURE_MESSAGE_PROP, FALSE));",
                "raw_url": "https://github.com/apache/jmeter/raw/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "sha": "c0c7827a952504414d633b929c8f2952e58b5425",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@463051 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b618649f8e24f7733d8deb47efcd03e549568095",
        "parent": "https://github.com/apache/jmeter/commit/3e554df3ca1e3e4552076b37f5fd312eeff368fb",
        "patched_files": [
            "SampleSaveConfiguration.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleSaveConfiguration.java"
        ]
    },
    "jmeter_7b1081b": {
        "bug_id": "jmeter_7b1081b",
        "commit": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=7b1081bb077e45de9aaf04893574c945c65df0f6",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -363,6 +363,10 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);",
                "raw_url": "https://github.com/apache/jmeter/raw/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "sha": "1b05ccbd56a24c1a70a636e9e28b1e9a9d873b36",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 3\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737314 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 47c4e89d2de5e58182c0c152c678988deeb7f7a3",
        "parent": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_81cd2e8": {
        "bug_id": "jmeter_81cd2e8",
        "commit": "https://github.com/apache/jmeter/commit/81cd2e804898cb278c9573e8e8d8b83344bb3e19",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/jmeter/blob/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=81cd2e804898cb278c9573e8e8d8b83344bb3e19",
                "deletions": 12,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -883,20 +883,23 @@ protected void setConnectionHeaders(HttpRequestBase request, URL url, HeaderMana\n      * @return the headers as a string\n      */\n     private String getConnectionHeaders(HttpRequest method) {\n-        // Get all the request headers\n-        StringBuilder hdrs = new StringBuilder(100);\n-        Header[] requestHeaders = method.getAllHeaders();\n-        for(int i = 0; i < requestHeaders.length; i++) {\n-            // Exclude the COOKIE header, since cookie is reported separately in the sample\n-            if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n-                hdrs.append(requestHeaders[i].getName());\n-                hdrs.append(\": \"); // $NON-NLS-1$\n-                hdrs.append(requestHeaders[i].getValue());\n-                hdrs.append(\"\\n\"); // $NON-NLS-1$\n+        if(method != null) {\n+            // Get all the request headers\n+            StringBuilder hdrs = new StringBuilder(100);\n+            Header[] requestHeaders = method.getAllHeaders();\n+            for(int i = 0; i < requestHeaders.length; i++) {\n+                // Exclude the COOKIE header, since cookie is reported separately in the sample\n+                if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n+                    hdrs.append(requestHeaders[i].getName());\n+                    hdrs.append(\": \"); // $NON-NLS-1$\n+                    hdrs.append(requestHeaders[i].getValue());\n+                    hdrs.append(\"\\n\"); // $NON-NLS-1$\n+                }\n             }\n+    \n+            return hdrs.toString();\n         }\n-\n-        return hdrs.toString();\n+        return \"\"; ////$NON-NLS-1$\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "10e7a7becb48d1d69271b42ea944477324473e1b",
                "status": "modified"
            }
        ],
        "message": "When HTTP Request contains an empty host, we get a NPE instead of a clear message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1634990 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7a72f496684e16ffc3f5abb5dddf697519256e6b",
        "parent": "https://github.com/apache/jmeter/commit/77b8fd6a6c384338d0f4c068527a650f7c7f6691",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_8323d16": {
        "bug_id": "jmeter_8323d16",
        "commit": "https://github.com/apache/jmeter/commit/8323d16f9f5b7f719f045a26af0881068b6e29af",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jmeter/blob/8323d16f9f5b7f719f045a26af0881068b6e29af/src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/IsVarDefined.java?ref=8323d16f9f5b7f719f045a26af0881068b6e29af",
                "deletions": 2,
                "filename": "src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.jmeter.engine.util.CompoundVariable;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n \n /**\n@@ -50,8 +51,13 @@\n     public String execute(SampleResult previousResult, Sampler currentSampler)\n             throws InvalidVariableException {\n         String variableName = values[0].execute();\n-        String variableValue = getVariables().get(variableName);\n-        return Boolean.toString(variableValue != null);\n+        JMeterVariables jMeterVariables = getVariables();\n+        if(jMeterVariables != null) {\n+            String variableValue = jMeterVariables.get(variableName);\n+            return Boolean.toString(variableValue != null);\n+        } else {\n+            return Boolean.FALSE.toString();\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/jmeter/raw/8323d16f9f5b7f719f045a26af0881068b6e29af/src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "sha": "4c440863c0f69ae5898aba65867b8371bfc86479",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/jmeter/blob/8323d16f9f5b7f719f045a26af0881068b6e29af/test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestIsVarDefined.java?ref=8323d16f9f5b7f719f045a26af0881068b6e29af",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "patch": "@@ -98,5 +98,14 @@ public void testIsVarDefinedError() throws Exception {\n         isVarDefined.setParameters(params);\n         isVarDefined.execute(result, null);\n     }\n+    \n+    @Test\n+    public void testNoVariablesDefined() throws Exception {\n+        jmctx.setVariables(null);\n+        params.add(new CompoundVariable(\"emptyProperty\"));\n+        isVarDefined.setParameters(params);\n+        String returnValue = isVarDefined.execute(result, null);\n+        assertEquals(\"false\", returnValue);\n+    }\n \n }",
                "raw_url": "https://github.com/apache/jmeter/raw/8323d16f9f5b7f719f045a26af0881068b6e29af/test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "sha": "08ca1f1bde7e0aea0eb2639d4eae77aad7a5d8e7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when called from Function Helper Dialog\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1840365 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 590d6f979df56d97dbf9717ebe01710de928faff",
        "parent": "https://github.com/apache/jmeter/commit/7018c9a907dde054067ee5c7321b79fbb26bd762",
        "patched_files": [
            "IsVarDefined.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestIsVarDefined.java"
        ]
    },
    "jmeter_84f5191": {
        "bug_id": "jmeter_84f5191",
        "commit": "https://github.com/apache/jmeter/commit/84f5191095bbea86e35c16f5dddbab73288cb78e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jmeter/blob/84f5191095bbea86e35c16f5dddbab73288cb78e/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java?ref=84f5191095bbea86e35c16f5dddbab73288cb78e",
                "deletions": 19,
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.Writer;\n \n import org.apache.commons.lang3.CharUtils;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.AbstractSampleWriter;\n import org.apache.jmeter.report.core.Sample;\n import org.apache.jmeter.report.core.SampleMetadata;\n@@ -39,6 +40,7 @@\n  */\n public class CsvSampleWriter extends AbstractSampleWriter {\n \n+    private static final String MUST_NOT_BE_NULL = \"%1s must not be null\";\n     private int columnCount;\n \n     private char separator;\n@@ -48,9 +50,7 @@\n     private long sampleCount;\n \n     public CsvSampleWriter(SampleMetadata metadata) {\n-        if (metadata == null) {\n-            throw new ArgumentNullException(\"metadata\");\n-        }\n+        Validate.notNull(metadata, MUST_NOT_BE_NULL, \"metadata\");\n         this.metadata = metadata;\n         this.columnCount = metadata.getColumnCount();\n         this.separator = metadata.getSeparator();\n@@ -59,25 +59,19 @@ public CsvSampleWriter(SampleMetadata metadata) {\n \n     public CsvSampleWriter(Writer output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setWriter(output);\n     }\n \n     public CsvSampleWriter(OutputStream output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setOutputStream(output);\n     }\n \n     public CsvSampleWriter(File output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setOutputFile(output);\n     }\n \n@@ -112,13 +106,8 @@ public void writeHeader() {\n \n     @Override\n     public long write(Sample sample) {\n-        if (sample == null) {\n-            throw new ArgumentNullException(\"sample\");\n-        }\n-        if (writer == null) {\n-            throw new IllegalStateException(\n-                    \"No writer set! Call setWriter() first!\");\n-        }\n+        Validate.notNull(sample, MUST_NOT_BE_NULL, \"sample\");\n+        Validate.validState(writer != null, \"No writer set! Call setWriter() first!\");\n \n         StringBuilder row = new StringBuilder();\n         char[] specials = new char[] { separator,",
                "raw_url": "https://github.com/apache/jmeter/raw/84f5191095bbea86e35c16f5dddbab73288cb78e/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "sha": "f9257d6c5e0b64856180c17032aa102c13b1c41b",
                "status": "modified"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/jmeter/blob/84f5191095bbea86e35c16f5dddbab73288cb78e/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "changes": 104,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java?ref=84f5191095bbea86e35c16f5dddbab73288cb78e",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.jmeter.report.core;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+\n+import org.apache.jmeter.util.JMeterUtils;\n+\n+import junit.framework.TestCase;\n+\n+public class TestCsvSampleWriter extends TestCase {\n+\n+    protected void setUp() throws Exception {\n+        // We have to initialize JMeterUtils\n+        JMeterUtils.loadJMeterProperties(\"jmeter.properties\");\n+    };\n+\n+    SampleMetadata metadata = new SampleMetadata(',', \"a\", \"b\");\n+\n+    public void testCsvSampleWriterConstructorWithNull() throws Exception {\n+        try {\n+            CsvSampleWriter dummy = new CsvSampleWriter(null);\n+            dummy.close(); // We should never get here, but it would be a\n+                           // writer, so close it\n+            fail(\"NPE expected\");\n+        } catch (NullPointerException e) {\n+            // OK, we should land here\n+        }\n+    }\n+\n+    public void testCsvSampleWriterConstructorWithWriter() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            csvWriter.writeHeader();\n+            // need to replace the writer to flush the original one\n+            replaceWriter(csvWriter);\n+            assertEquals(\"a,b\\n\", writer.toString());\n+        }\n+    }\n+\n+    private void replaceWriter(CsvSampleWriter csvWriter) throws IOException {\n+        try (Writer replacement = new StringWriter()) {\n+            csvWriter.setWriter(replacement);\n+        }\n+    }\n+\n+    public void testWriteWithoutWriter() throws Exception {\n+        try (CsvSampleWriter csvWriter = new CsvSampleWriter(metadata)) {\n+            Sample sample = new SampleBuilder(metadata).add(\"a1\").add(\"b1\")\n+                    .build();\n+            try {\n+                csvWriter.write(sample);\n+                fail(\"ISE expected\");\n+            } catch (IllegalStateException e) {\n+                // OK, we should land here\n+            }\n+        }\n+    }\n+\n+    public void testWriteWithoutSample() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            try {\n+                csvWriter.write(null);\n+                fail(\"NPE expected\");\n+            } catch (NullPointerException e) {\n+                assertEquals(\"sample must not be null\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public void testWrite() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            Sample sample = new SampleBuilder(metadata).add(\"a1\").add(\"b1\")\n+                    .build();\n+            csvWriter.write(sample);\n+            // need to replace the writer to flush the original one\n+            replaceWriter(csvWriter);\n+            assertEquals(\"a1,b1\\n\", writer.toString());\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/jmeter/raw/84f5191095bbea86e35c16f5dddbab73288cb78e/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "sha": "00d6ae634facc65e3b7790c5c21412b07b1f7352",
                "status": "added"
            }
        ],
        "message": "Use Validate methods from commons lang3 and throw NPE instead of ArgumentNullException. Add test cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1720242 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 42167715c0ea9fcf6126c3a96b17f9727e7cc77f",
        "parent": "https://github.com/apache/jmeter/commit/25dbb53ee6058bb301cdd1adb283526db1931842",
        "patched_files": [
            "CsvSampleWriter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestCsvSampleWriter.java"
        ]
    },
    "jmeter_89e25ec": {
        "bug_id": "jmeter_89e25ec",
        "commit": "https://github.com/apache/jmeter/commit/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jmeter/blob/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
                "deletions": 8,
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "patch": "@@ -57,7 +57,6 @@\n import java.util.*;\n import java.io.Serializable;\n import org.apache.jmeter.samplers.SampleResult;\n-import org.apache.jmeter.config.ConfigElement;\n import org.apache.jmeter.testelement.AbstractTestElement;\n \n import org.apache.oro.text.PatternCacheLRU;\n@@ -92,15 +91,15 @@\n \tpublic final static int CONTAINS = 1 << 1;\n \tpublic final static int NOT = 1 << 2;\n \n-\tprivate transient static ThreadLocal matcher =\n+\tprivate static ThreadLocal matcher =\n \t    new ThreadLocal()\n \t    {\n-\t\tprotected Object initialValue()\n-\t\t{\n-\t\t    return new Perl5Matcher();\n-\t\t}\n+\t\t\tprotected Object initialValue()\n+\t\t\t{\n+\t\t\t    return new Perl5Matcher();\n+\t\t\t}\n \t    };\n-\tprivate transient PatternCacheLRU patternCache =\n+\tprivate static PatternCacheLRU patternCache =\n \t\tnew PatternCacheLRU(1000, new Perl5Compiler());\n \n \t/************************************************************\n@@ -314,7 +313,7 @@ private AssertionResult evaluateResponse(SampleResult response)\n \t    while (iter.hasNext())\n \t    {\n \t\tString stringPattern= (String) iter.next();\n-\t\tPattern pattern = patternCache.getPattern(stringPattern);\n+\t\tPattern pattern = patternCache.getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);\n \t\tboolean found;\n \t\tif ((CONTAINS & getTestType()) > 0)\n \t\t{",
                "raw_url": "https://github.com/apache/jmeter/raw/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "sha": "1ddbddb5210fc9ae0e79821dc397fd854a40ca9c",
                "status": "modified"
            }
        ],
        "message": "Made PatternCache static and used READ_ONLY patterns - this fixes a NPE that occurs in remote sessions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@322961 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 91e6618d82d1004105217598cb56b40e38abdc2c",
        "parent": "https://github.com/apache/jmeter/commit/48d04fab42006267ae4faea80ffad25c2ea550b1",
        "patched_files": [
            "ResponseAssertion.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "ResponseAssertionTest.java"
        ]
    },
    "jmeter_8d0794f": {
        "bug_id": "jmeter_8d0794f",
        "commit": "https://github.com/apache/jmeter/commit/8d0794f2dab66e049214a542bf1a78bd46d1fd86",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/jmeter/blob/8d0794f2dab66e049214a542bf1a78bd46d1fd86/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java?ref=8d0794f2dab66e049214a542bf1a78bd46d1fd86",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "patch": "@@ -111,6 +111,28 @@ public void testPR235CaseEmptyResponse() {\n         assertThat(vars.get(\"varname_1\"), CoreMatchers.is(CoreMatchers.nullValue()));\n         assertThat(vars.get(\"varname_2\"), CoreMatchers.is(CoreMatchers.nullValue()));\n     }\n+    \n+    @Test\n+    public void testCaseEmptyVarBug62860() {\n+        JMeterContext context = JMeterContextService.getContext();\n+        JSONPostProcessor processor = setupProcessor(context, \"0\", false);\n+        JMeterVariables vars = new JMeterVariables();\n+        processor.setDefaultValues(\"NONE\");\n+        processor.setJsonPathExpressions(\"$[*]\");\n+        processor.setRefNames(\"varname\");\n+        processor.setScopeVariable(\"contentvar\");\n+        context.setVariables(vars);\n+        vars.remove(\"contentvar\");\n+        processor.process();\n+        assertThat(vars.get(\"varname\"), CoreMatchers.is(\"NONE\"));\n+        assertThat(vars.get(\"varname_matchNr\"), CoreMatchers.is(CoreMatchers.nullValue()));\n+        \n+        vars.put(\"contentvar\", \"\");\n+        processor.process();\n+        assertThat(vars.get(\"varname\"), CoreMatchers.is(\"NONE\"));\n+        assertThat(vars.get(\"varname_matchNr\"), CoreMatchers.is(CoreMatchers.nullValue()));\n+\n+    }\n \n     @Test\n     public void testPR235CaseMatchOneWithZero() {",
                "raw_url": "https://github.com/apache/jmeter/raw/8d0794f2dab66e049214a542bf1a78bd46d1fd86/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "sha": "b59df8d9a275f540d03f0a054030753bf1fba713",
                "status": "modified"
            }
        ],
        "message": "Bug 62860 - JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found\nBugzilla Id: 62860\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1845093 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 165d2a4ee5529731098feaf2c35873bb5f6ca8d8",
        "parent": "https://github.com/apache/jmeter/commit/9d2491710f35b896a4537e1aee1993bbb7361176",
        "patched_files": [
            "JSONPostProcessor.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJSONPostProcessor.java"
        ]
    },
    "jmeter_93cf5e8": {
        "bug_id": "jmeter_93cf5e8",
        "commit": "https://github.com/apache/jmeter/commit/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) {// superclass does not use types\n-        return arg0.equals(BooleanProperty.class);\n+        return BooleanProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "sha": "1d37963a928594bba78e57ca0d10353c5faca7ad",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(IntegerProperty.class);\n+        return IntegerProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "sha": "801f594929e45a3d3eb8a2e17394addfd42b6e19",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(LongProperty.class);\n+        return LongProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "sha": "7fc30723f63dc451eb161ffd943176499d617735",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "patch": "@@ -46,7 +46,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(CollectionProperty.class) || arg0.equals(MapProperty.class);\n+        return CollectionProperty.class.equals(arg0) || MapProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "sha": "64f1b7b06236822aa5d487a099596b7afd74dddc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "patch": "@@ -113,7 +113,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) {\n-        return arg0.equals(SampleSaveConfiguration.class);\n+        return SampleSaveConfiguration.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "sha": "61b438306778cf4fa37ba7bb98243e5288616bd8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "patch": "@@ -53,7 +53,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(TestElementProperty.class);\n+        return TestElementProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "sha": "007a2097aeaa73628d874d03f78c9907e1ff1837",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "patch": "@@ -60,7 +60,7 @@ public TestResultWrapperConverter(Mapper arg0) {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(TestResultWrapper.class);\n+        return TestResultWrapper.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "sha": "b0e9474b1752838b40ad912630026f6f2a823f80",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -219,6 +219,7 @@ See  <bugzilla>56357</bugzilla> for details.\n <li>Updated to jsoup-1.8.1.jar (from 1.7.3)</li>\n <li><bug>57276</bug>RMIC no longer needed since Java 5</li>\n <li><bug>57310</bug>Replace System.getProperty(\"file.separator\") with File.separator throughout (Also \"path.separator\" with File.pathSeparator)</li>\n+<li><bug>57389</bug>Fix potential NPE in converters</li>\n </ul>\n \n <ch_section>Thanks</ch_section>",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/xdocs/changes.xml",
                "sha": "f268971962056a8d367c94a9c3721bda805a4107",
                "status": "modified"
            }
        ],
        "message": "Bug 57389: Fix potential NPE in org.apache.jmeter.save.converters\nBugzilla Id: 57389\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1647367 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2350b669dfb5f3902383b529d32354d059f1e9b1",
        "parent": "https://github.com/apache/jmeter/commit/26efb9db0e704942bd0509cbc9b8c12920695c48",
        "patched_files": [
            "IntegerPropertyConverter.java",
            "BooleanPropertyConverter.java",
            "changes.java",
            "SampleSaveConfigurationConverter.java",
            "MultiPropertyConverter.java",
            "LongPropertyConverter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestElementPropertyConverter.java",
            "TestResultWrapperConverter.java"
        ]
    },
    "jmeter_9691d29": {
        "bug_id": "jmeter_9691d29",
        "commit": "https://github.com/apache/jmeter/commit/9691d2976940067c199c7152c9980682097887a2",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/jmeter/blob/9691d2976940067c199c7152c9980682097887a2/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=9691d2976940067c199c7152c9980682097887a2",
                "deletions": 4,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -34,6 +34,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.http.Header;\n import org.apache.http.HttpConnection;\n import org.apache.http.HttpConnectionMetrics;\n@@ -1037,7 +1038,7 @@ else if(getSendParameterValuesAsPostBody()) {\n             if(haveContentEncoding) {\n                 putParams.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,contentEncoding);\n             }\n-\n+            String charset = getCharsetWithDefault(putParams);\n             // Just append all the parameter values, and use that as the post body\n             StringBuilder putBodyContent = new StringBuilder();\n             PropertyIterator args = getArguments().iterator();\n@@ -1056,7 +1057,7 @@ else if(getSendParameterValuesAsPostBody()) {\n                 contentTypeValue = put.getFirstHeader(HEADER_CONTENT_TYPE).getValue();\n             }\n             StringEntity requestEntity = new StringEntity(putBodyContent.toString(), contentTypeValue, \n-                    (String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET));\n+                    (String) charset);\n             put.setEntity(requestEntity);\n         }\n         // Check if we have any content to send for body\n@@ -1067,9 +1068,11 @@ else if(getSendParameterValuesAsPostBody()) {\n                 ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                 put.getEntity().writeTo(bos);\n                 bos.flush();\n+                String charset = getCharsetWithDefault(putParams);\n+\n                 // We get the posted bytes using the charset that was used to create them\n-                putBody.append(new String(bos.toByteArray(),\n-                        (String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET)));\n+                // if none was set, platform encoding will be used\n+                putBody.append(new String(bos.toByteArray(), charset));\n                 bos.close();\n             }\n             else {\n@@ -1090,6 +1093,19 @@ else if(getSendParameterValuesAsPostBody()) {\n         return null;\n     }\n \n+    /**\n+     * If contentEncoding is not set by user, then Platform encoding will be used to convert to String\n+     * @param putParams {@link HttpParams}\n+     * @return String charset\n+     */\n+    protected String getCharsetWithDefault(HttpParams putParams) {\n+        String charset =(String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET);\n+        if(StringUtils.isEmpty(charset)) {\n+            charset = Charset.defaultCharset().name();\n+        }\n+        return charset;\n+    }\n+\n     private void saveConnectionCookies(HttpResponse method, URL u, CookieManager cookieManager) {\n         if (cookieManager != null) {\n             Header[] hdrs = method.getHeaders(HEADER_SET_COOKIE);",
                "raw_url": "https://github.com/apache/jmeter/raw/9691d2976940067c199c7152c9980682097887a2/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "c170c288ec6cce938a959407a6392e01ce51415f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/9691d2976940067c199c7152c9980682097887a2/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9691d2976940067c199c7152c9980682097887a2",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -76,6 +76,7 @@ When doing replacement of User Defined Variables, Proxy will not substitute part\n <li>Bug 52871 - Multiple Certificates not working with HTTP Client 4</li>\n <li>Bug 52885 - Proxy : Recording issues with HTTPS, cookies starting with secure are partly truncated</li>\n <li>Bug 52886 - Proxy : Recording issues with HTTPS when spoofing is on, secure cookies are not always changed</li>\n+<li>Bug 52897 - HTTPSampler : Using PUT method with HTTPClient4 and empty Content Encoding and sending files leads to NullPointerException</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/9691d2976940067c199c7152c9980682097887a2/xdocs/changes.xml",
                "sha": "c7b919935c5fcb5e47a9fa58aa86f8516d7b6f0e",
                "status": "modified"
            }
        ],
        "message": "Bug 52897 - HTTPSampler : Using PUT method with HTTPClient4 and empty Content Encoding and sending files leads to NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1300387 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d6430e48ffc9fea9335240cac2832e8c1f9e94c9",
        "parent": "https://github.com/apache/jmeter/commit/179d6a813cf24739218c5ad9f700b715c51df716",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_9be8566": {
        "bug_id": "jmeter_9be8566",
        "commit": "https://github.com/apache/jmeter/commit/9be8566a56c574a2f77255c9c70c570824c64ded",
        "file": [
            {
                "additions": 123,
                "blob_url": "https://github.com/apache/jmeter/blob/9be8566a56c574a2f77255c9c70c570824c64ded/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "changes": 221,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/JMeterThread.java?ref=9be8566a56c574a2f77255c9c70c570824c64ded",
                "deletions": 98,
                "filename": "src/core/org/apache/jmeter/threads/JMeterThread.java",
                "patch": "@@ -237,104 +237,7 @@ public void run() {\n \t\t\twhile (running) {\n \t\t\t\tSampler sam;\n \t\t\t\twhile (running && (sam = controller.next()) != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tthreadContext.setCurrentSampler(sam);\n-                        \n-                        // Check if we are running a transaction\n-                        TransactionSampler transactionSampler = null;\n-                        if(sam instanceof TransactionSampler) {\n-                            transactionSampler = (TransactionSampler) sam;\n-                        }\n-                        // Find the package for the transaction\n-                        SamplePackage transactionPack = null;\n-                        if(transactionSampler != null) {\n-                            transactionPack = compiler.configureTransactionSampler(transactionSampler);\n-                            \n-                            // Check if the transaction is done\n-                            if(transactionSampler.isTransactionDone()) {\n-                                // Get the transaction sample result\n-                                SampleResult transactionResult = transactionSampler.getTransactionResult();\n-                                transactionResult.setThreadName(threadName);\n-                                transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());\n-                                transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());\n-\n-                                // Check assertions for the transaction sample\n-                                checkAssertions(transactionPack.getAssertions(), transactionResult);\n-                                // Notify listeners with the transaction sample result\n-                                notifyListeners(transactionPack.getSampleListeners(), transactionResult);\n-                                compiler.done(transactionPack);\n-                                // Transaction is done, we do not have a sampler to sample\n-                                sam = null;\n-                            }\n-                            else {\n-                                // It is the sub sampler of the transaction that will be sampled\n-                                sam = transactionSampler.getSubSampler();\n-                            }\n-                        }\n-                        \n-                        // Check if we have a sampler to sample\n-                        if(sam != null) {\n-                            // Get the sampler ready to sample\n-                            SamplePackage pack = compiler.configureSampler(sam);\n-\n-\t\t\t\t\t\t    // Hack: save the package for any transaction controllers\n-\t\t\t\t\t\t\tthreadVars.putObject(PACKAGE_OBJECT, pack);\n-\n-                            delay(pack.getTimers());\n-                            Sampler sampler = pack.getSampler();\n-                            sampler.setThreadContext(threadContext);\n-                            sampler.setThreadName(threadName);\n-                            TestBeanHelper.prepare(sampler);\n-                        \n-                            // Perform the actual sample\n-                            SampleResult result = sampler.sample(null); \n-                            // TODO: remove this useless Entry parameter\n-                        \n-                            // If we got any results, then perform processing on the result\n-                            if (result != null) {\n-                            \tresult.setGroupThreads(threadGroup.getNumberOfThreads());\n-                            \tresult.setAllThreads(JMeterContextService.getNumberOfThreads());\n-                                result.setThreadName(threadName);\n-                                threadContext.setPreviousResult(result);\n-                                runPostProcessors(pack.getPostProcessors());\n-                                checkAssertions(pack.getAssertions(), result);\n-                                // Do not send subsamples to listeners which receive the transaction sample\n-                                List sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);\n-                                notifyListeners(sampleListeners, result);\n-                                compiler.done(pack);\n-                                // Add the result as subsample of transaction if we are in a transaction\n-                                if(transactionSampler != null) {\n-                                    transactionSampler.addSubSamplerResult(result);\n-                                }\n-\n-                                // Check if thread or test should be stopped\n-                                if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {\n-                                    stopThread();\n-                                }\n-                                if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {\n-                                    stopTest();\n-                                }\n-                            } else {\n-                                compiler.done(pack); // Finish up\n-                            }\n-                        }\n-\t\t\t\t\t\tif (scheduler) {\n-\t\t\t\t\t\t\t// checks the scheduler to stop the iteration\n-\t\t\t\t\t\t\tstopScheduler();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (JMeterStopTestException e) {\n-\t\t\t\t\t\tlog.info(\"Stopping Test: \" + e.toString());\n-\t\t\t\t\t\tstopTest();\n-\t\t\t\t\t} catch (JMeterStopThreadException e) {\n-\t\t\t\t\t\tlog.info(\"Stopping Thread: \" + e.toString());\n-\t\t\t\t\t\tstopThread();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t    if (sam != null) {\n-\t                        log.error(\"Error while processing sampler '\"+sam.getName()+\"' :\", e);\t\t\t\t\t        \n-\t\t\t\t\t    } else {\n-\t\t\t\t\t        log.error(\"\", e);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n+\t\t\t\t\tprocess_sampler(sam, null);\n \t\t\t\t}\n \t\t\t\tif (controller.isDone()) {\n \t\t\t\t\trunning = false;\n@@ -360,6 +263,128 @@ public void run() {\n \t\t\tthreadFinished();\n \t\t}\n \t}\n+\n+\t/**\n+\t * Process the current sampler, handling transaction samplers.\n+\t * \n+\t * @param current sampler\n+\t * @param parent sampler\n+\t * @return SampleResult if a transaction was processed\n+\t */\n+    private SampleResult process_sampler(Sampler current, Sampler parent) {\n+        SampleResult transactionResult = null;\n+        try {\n+        \tthreadContext.setCurrentSampler(current);\n+            \n+            // Check if we are running a transaction\n+            TransactionSampler transactionSampler = null;\n+            if(current instanceof TransactionSampler) {\n+                transactionSampler = (TransactionSampler) current;\n+            }\n+            // Find the package for the transaction\n+            SamplePackage transactionPack = null;\n+            if(transactionSampler != null) {\n+                transactionPack = compiler.configureTransactionSampler(transactionSampler);\n+                \n+                // Check if the transaction is done\n+                if(transactionSampler.isTransactionDone()) {\n+                    // Get the transaction sample result\n+                    transactionResult = transactionSampler.getTransactionResult();\n+                    transactionResult.setThreadName(threadName);\n+                    transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());\n+                    transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());\n+\n+                    // Check assertions for the transaction sample\n+                    checkAssertions(transactionPack.getAssertions(), transactionResult);\n+                    // Notify listeners with the transaction sample result\n+                    if (!(parent instanceof TransactionSampler)){\n+                        notifyListeners(transactionPack.getSampleListeners(), transactionResult);\n+                    }\n+                    compiler.done(transactionPack);\n+                    // Transaction is done, we do not have a sampler to sample\n+                    current = null;\n+                }\n+                else {\n+                    Sampler prev = current;\n+                    // It is the sub sampler of the transaction that will be sampled\n+                    current = transactionSampler.getSubSampler();\n+                    if (current instanceof TransactionSampler){\n+                        SampleResult res = process_sampler(current, prev);// recursive call\n+                        threadContext.setCurrentSampler(prev);\n+                        current=null;\n+                        if (res!=null){\n+                            transactionSampler.addSubSamplerResult(res);\n+                        }\n+                    }\n+                }\n+            }\n+            \n+            // Check if we have a sampler to sample\n+            if(current != null) {\n+                // Get the sampler ready to sample\n+                SamplePackage pack = compiler.configureSampler(current);\n+\n+        \t    // Hack: save the package for any transaction controllers\n+        \t\tthreadVars.putObject(PACKAGE_OBJECT, pack);\n+\n+                delay(pack.getTimers());\n+                Sampler sampler = pack.getSampler();\n+                sampler.setThreadContext(threadContext);\n+                sampler.setThreadName(threadName);\n+                TestBeanHelper.prepare(sampler);\n+            \n+                // Perform the actual sample\n+                SampleResult \n+                result = sampler.sample(null); \n+                // TODO: remove this useless Entry parameter\n+            \n+                // If we got any results, then perform processing on the result\n+                if (result != null) {\n+                \tresult.setGroupThreads(threadGroup.getNumberOfThreads());\n+                \tresult.setAllThreads(JMeterContextService.getNumberOfThreads());\n+                    result.setThreadName(threadName);\n+                    threadContext.setPreviousResult(result);\n+                    runPostProcessors(pack.getPostProcessors());\n+                    checkAssertions(pack.getAssertions(), result);\n+                    // Do not send subsamples to listeners which receive the transaction sample\n+                    List sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);\n+                    notifyListeners(sampleListeners, result);\n+                    compiler.done(pack);\n+                    // Add the result as subsample of transaction if we are in a transaction\n+                    if(transactionSampler != null) {\n+                        transactionSampler.addSubSamplerResult(result);\n+                    }\n+\n+                    // Check if thread or test should be stopped\n+                    if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {\n+                        stopThread();\n+                    }\n+                    if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {\n+                        stopTest();\n+                    }\n+                } else {\n+                    compiler.done(pack); // Finish up\n+                }\n+            }\n+        \tif (scheduler) {\n+        \t\t// checks the scheduler to stop the iteration\n+        \t\tstopScheduler();\n+        \t}\n+        } catch (JMeterStopTestException e) {\n+        \tlog.info(\"Stopping Test: \" + e.toString());\n+        \tstopTest();\n+        } catch (JMeterStopThreadException e) {\n+        \tlog.info(\"Stopping Thread: \" + e.toString());\n+        \tstopThread();\n+        } catch (Exception e) {\n+            if (current != null) {\n+                log.error(\"Error while processing sampler '\"+current.getName()+\"' :\", e);\t\t\t\t\t        \n+            } else {\n+                log.error(\"\", e);\n+            }\n+        }\n+        return transactionResult;\n+    }\n     \n     /**\n      * Get the SampleListeners for the sampler. Listeners who receive transaction sample",
                "raw_url": "https://github.com/apache/jmeter/raw/9be8566a56c574a2f77255c9c70c570824c64ded/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "sha": "314272d33c06239d00513f81cda9b41c0eeae0cb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/9be8566a56c574a2f77255c9c70c570824c64ded/xdocs/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9be8566a56c574a2f77255c9c70c570824c64ded",
                "deletions": 1,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -63,6 +63,7 @@ but otherwise its behaviour is not consistent (or clearly specified).</p>\n The menu item Options / Choose Language does not change all the displayed text to the new language.\n To override the default local language, set the JMeter property \"language\" before starting JMeter. \n </p>\n+\n <h3>Incompatible changes</h3>\n <ul>\n The test element \"Save Results to a file\" is now shown as a Listener.\n@@ -77,7 +78,8 @@ It does not affect test plans or test behaviour.\n <li>The \"prev\" and \"sampler\" objects are now defined for BSF test elements</li>\n <li>Prompt to overwrite an existing file when first saving a new test plan</li>\n <li>The test element \"Save Results to a file\" is now shown as a Listener</li>\n-<li>Correct TestBeans to show the correct popup menu for Listeners</li>\n+<li>Amend TestBeans to show the correct popup menu for Listeners</li>\n+<li>Fix NPE when using nested Transaction Controllers with parent samples</li>\n </ul>\n \n <h3>Improvements</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/9be8566a56c574a2f77255c9c70c570824c64ded/xdocs/changes.xml",
                "sha": "3c72e846332dd970ff993044b3c2f03288b21871",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when using nested Transaction Controllers with parent samples\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@674210 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e5f3ecb5c78ce85c340ff79cde8478c825c464c7",
        "parent": "https://github.com/apache/jmeter/commit/3f920e2cb15de27b884966b3654818904cd91698",
        "patched_files": [
            "JMeterThread.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterThread.java"
        ]
    },
    "jmeter_9d24917": {
        "bug_id": "jmeter_9d24917",
        "commit": "https://github.com/apache/jmeter/commit/9d2491710f35b896a4537e1aee1993bbb7361176",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/9d2491710f35b896a4537e1aee1993bbb7361176/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java?ref=9d2491710f35b896a4537e1aee1993bbb7361176",
                "deletions": 2,
                "filename": "src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Arrays;\n import java.util.List;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.processor.PostProcessor;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedTestElement;\n@@ -101,10 +102,12 @@ public void process() {\n             String currentJsonPath = jsonPathExpressions[i].trim();\n             clearOldRefVars(vars, currentRefName);\n             try {\n-                if (jsonResponse.isEmpty()) {\n+                if (StringUtils.isEmpty(jsonResponse)) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(\"Response or source variable is null or empty for {}\", getName());\n+                    }\n                     vars.put(currentRefName, defaultValues[i]);\n                 } else {\n-\n                     List<Object> extractedValues = localMatcher.get()\n                             .extractWithJsonPath(jsonResponse, currentJsonPath);\n                     // if no values extracted, default value added",
                "raw_url": "https://github.com/apache/jmeter/raw/9d2491710f35b896a4537e1aee1993bbb7361176/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "sha": "c31342b3ce214b1d2c6e9fd2b3ce448d4f2587eb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/9d2491710f35b896a4537e1aee1993bbb7361176/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9d2491710f35b896a4537e1aee1993bbb7361176",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -156,6 +156,7 @@ Summary\n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n     <li><bug>62774</bug>XPath2Extractor : Scope variable is broken. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n+    <li><bug>62860</bug>JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found</li>\n </ul>\n \n <h3>Functions</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/9d2491710f35b896a4537e1aee1993bbb7361176/xdocs/changes.xml",
                "sha": "2a588d4f8b8f17152e86ae60cf46e57d062cf12d",
                "status": "modified"
            }
        ],
        "message": "Bug 62860 - JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found\nBugzilla Id: 62860\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1845092 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6d0ce8b8137118d6a857aa7d768fe7cd8fbb1f38",
        "parent": "https://github.com/apache/jmeter/commit/9675f46bf981a1a12d75967f08e3eff295e8c3ac",
        "patched_files": [
            "JSONPostProcessor.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJSONPostProcessor.java"
        ]
    },
    "jmeter_a0b7d07": {
        "bug_id": "jmeter_a0b7d07",
        "commit": "https://github.com/apache/jmeter/commit/a0b7d075658b468c239544cd2a71f609e79d4d55",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=a0b7d075658b468c239544cd2a71f609e79d4d55",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "patch": "@@ -832,9 +832,12 @@ public static long getPropDefault(String propName, long defaultVal) {\n      * @return The PropDefault value\n      */\n     public static String getPropDefault(String propName, String defaultVal) {\n-        String ans;\n+        String ans = defaultVal;\n         try {\n-            ans = appProperties.getProperty(propName, defaultVal).trim();\n+            String value = appProperties.getProperty(propName, defaultVal);\n+            if(value != null) {\n+                ans = value.trim();\n+            }\n         } catch (Exception e) {\n             ans = defaultVal;\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "sha": "db4ba9f5c52625b2316c0a5a04db261ad576c7f8",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when defaultVal is also null (13 times at JMeter startup)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294527 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c738b79725b9860e7bdfbd0db150f6ace6eb350e",
        "parent": "https://github.com/apache/jmeter/commit/571ecd698ab57f32b6b31aadcfdb595f35d2908c",
        "patched_files": [
            "JMeterUtils.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterUtils.java"
        ]
    },
    "jmeter_a0cdb57": {
        "bug_id": "jmeter_a0cdb57",
        "commit": "https://github.com/apache/jmeter/commit/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/jmeter/blob/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
                "deletions": 2,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -122,6 +122,7 @@\n import org.apache.jmeter.testelement.property.JMeterProperty;\n import org.apache.jmeter.testelement.property.PropertyIterator;\n import org.apache.jmeter.threads.JMeterContextService;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jmeter.util.JsseSSLManager;\n import org.apache.jmeter.util.SSLManager;\n@@ -450,7 +451,11 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Extracted from HttpContext user token:\"+userToken+\", storing it as JMeter variable:\"+USER_TOKEN);\n             }\n-            JMeterContextService.getContext().getVariables().putObject(USER_TOKEN, userToken); \n+            // During recording JMeterContextService.getContext().getVariables() is null\n+            JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+            if (jMeterVariables != null) {\n+                jMeterVariables.putObject(USER_TOKEN, userToken); \n+            }\n         }\n     }\n \n@@ -460,7 +465,12 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n      * @param localContext {@link HttpContext}\n      */\n     private final void setupClientContextBeforeSample(HttpContext localContext) {\n-        Object userToken = JMeterContextService.getContext().getVariables().getObject(USER_TOKEN);\n+        Object userToken = null;\n+        // During recording JMeterContextService.getContext().getVariables() is null\n+        JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+        if(jMeterVariables != null) {\n+            userToken = jMeterVariables.getObject(USER_TOKEN);            \n+        }\n         if(userToken != null) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Found user token:\"+userToken+\" as JMeter variable:\"+USER_TOKEN+\", storing it in HttpContext\");",
                "raw_url": "https://github.com/apache/jmeter/raw/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "42da01f8f692727e21c69ebcd49c1f2e4fc4baf5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE during recording\nBugzilla Id: 57804\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1722352 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 862a4b8a1264b5d2d35b8bf5f9b3d953fa495d59",
        "parent": "https://github.com/apache/jmeter/commit/c06a7c680bf5aec9520102503d594b4003fee3b4",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_a5c5ec9": {
        "bug_id": "jmeter_a5c5ec9",
        "commit": "https://github.com/apache/jmeter/commit/a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jmeter/blob/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/XPathExtractor.java?ref=a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
                "deletions": 3,
                "filename": "src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "patch": "@@ -195,9 +195,13 @@ private void getValuesForXPath(Document d,String query, JMeterVariables vars, St\n \t        for (int i = 0 ; i < length; i++) {\n \t            Node match = matches.item(i);\n \t\t\t\tif ( match instanceof Element){\n-\t\t\t\t   // elements have empty nodeValue, but we are usually\n-\t\t\t\t   // interested in their content\n-\t\t\t\t   val = match.getFirstChild().getNodeValue();\n+\t\t\t\t// elements have empty nodeValue, but we are usually interested in their content\n+\t\t\t\t   final Node firstChild = match.getFirstChild();\n+\t\t\t\t   if (firstChild != null) {\n+\t\t\t\t\t   val = firstChild.getNodeValue();\n+\t\t\t\t   } else {\n+\t\t\t\t\t   val = match.getNodeValue(); // TODO is this correct?\n+\t\t\t\t   }\n \t\t\t\t} else {\t\t\t\t\n \t\t\t\t   val = match.getNodeValue();\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/jmeter/raw/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "sha": "78e577b192171086e8781d288ea448242c336625",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if node has no childred\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@545777 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3339b2e5edda9f622ea50838d25523fef2a94c02",
        "parent": "https://github.com/apache/jmeter/commit/1a9a6afc1ebfc6c880b8a3c9499717ae43d5ac52",
        "patched_files": [
            "XPathExtractor.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestXPathExtractor.java"
        ]
    },
    "jmeter_a833292": {
        "bug_id": "jmeter_a833292",
        "commit": "https://github.com/apache/jmeter/commit/a83329221d5b574d9617a1e45f3b052ec364975d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/MapProperty.java?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.jmeter.testelement.property;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.jmeter.testelement.TestElement;\n@@ -39,6 +40,7 @@ public MapProperty(String name, Map<?,?> value) {\n \n     public MapProperty() {\n         super();\n+        value = new HashMap<>();\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "sha": "899bf020dc66ded0b346cf4a7520dd78726870d0",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "patch": "@@ -0,0 +1,13 @@\n+package org.apache.jmeter.testelement.property;\n+\n+import org.junit.Test;\n+\n+public class MapPropertyTest {\n+\n+    @Test\n+    public void testBug62281MapProperty() {\n+        MapProperty props = new MapProperty();\n+        props.addProperty(\"Foo\", new BooleanProperty());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "sha": "52cc597d98682c53594b8228a9c0f24def4506fa",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/xdocs/changes.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -229,6 +229,7 @@ this behaviour, set <code>httpclient.reset_state_on_thread_group_iteration=false\n   <li><bug>62240</bug>If SampleMonitor implementation is a TestBean if will not be initialized correctly</li>\n   <li><bug>62295</bug>Correct order of elements when duplicating a selection of multiple elements.</li>\n   <li><bug>62397</bug>Don't break lines at commata when using JSON Path Tester</li> \n+  <li><bug>62281</bug>Prevent NPE in MapProperty. Patch by belugabehr (dam6923 at gmail.com)</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->\n@@ -251,6 +252,7 @@ this behaviour, set <code>httpclient.reset_state_on_thread_group_iteration=false\n     <li>Perze Ababa (perze.ababa at gmail.com)</li>\n     <li>Martha Laks (laks.martha at gmail.com)</li>\n     <li>Logan Mauzaize (t524467 at airfrance.fr)</li>\n+    <li>belugabehr (dam6923 at gmail.com)</li>\n </ul>\n <p>We also thank bug reporters who helped us improve JMeter.</p>\n <p>",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/xdocs/changes.xml",
                "sha": "ff1fb743894ae1db5f9d417c9bc1f8b7ddef9245",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE in MapProperty.\n\nInitialize the backing Map when no Map was passed into constructor.\nPatch by belugabehr (dam6923 at gmail.com)\n\nBugzilla Id: 62281\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1832768 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4bcb60d9f45a3c2993dc09ad8c127a1c736fa803",
        "parent": "https://github.com/apache/jmeter/commit/e3d08b9e896769a7101cc6a0b1aebedf1f1d54ee",
        "patched_files": [
            "MapProperty.java",
            "changes.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "MapPropertyTest.java"
        ]
    },
    "jmeter_a8a7103": {
        "bug_id": "jmeter_a8a7103",
        "commit": "https://github.com/apache/jmeter/commit/a8a7103126347f54faeaf953a72cbdfed97cf1d6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java?ref=a8a7103126347f54faeaf953a72cbdfed97cf1d6",
                "deletions": 2,
                "filename": "src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "patch": "@@ -154,8 +154,9 @@ public boolean accept(File f, String name) {\n                             return name.endsWith(DOT_JAR);\n                         }\n                     });\n-                    // jars cannot be null\n-                    Collections.addAll(fullList, jars);\n+                    if(jars != null) {\n+                        Collections.addAll(fullList, jars);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "sha": "5933c0976442d80842da2f92c882159145c7136c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java?ref=a8a7103126347f54faeaf953a72cbdfed97cf1d6",
                "deletions": 1,
                "filename": "src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "patch": "@@ -603,7 +603,8 @@ public static void canSafelyWriteToFolder(File folder)\n                 throw new IllegalArgumentException(\"Cannot write to '\"\n                         +folder.getAbsolutePath()+\"' as it is an existing file\");\n             } else {\n-                if(folder.listFiles().length > 0) {\n+                File[] listedFiles = folder.listFiles();\n+                if(listedFiles != null && listedFiles.length > 0) {\n                     throw new IllegalArgumentException(\"Cannot write to '\"\n                             +folder.getAbsolutePath()+\"' as folder is not empty\");\n                 }",
                "raw_url": "https://github.com/apache/jmeter/raw/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "sha": "b4543be8776285952e985b5d2b6eed17132b21e9",
                "status": "modified"
            }
        ],
        "message": "Fix NPE warnings reported by Findbugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1755001 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5810606046366ffba54b6e6b19bf3d021f982ac3",
        "parent": "https://github.com/apache/jmeter/commit/129807a91c7c0551364038fc8087fbda2e096560",
        "patched_files": [
            "ClassFinder.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestClassFinder.java"
        ]
    },
    "jmeter_b3032a5": {
        "bug_id": "jmeter_b3032a5",
        "commit": "https://github.com/apache/jmeter/commit/b3032a5dec4ac54f56bc8d49894c3fd86819d106",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jmeter/blob/b3032a5dec4ac54f56bc8d49894c3fd86819d106/src/core/org/apache/jmeter/JMeter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=b3032a5dec4ac54f56bc8d49894c3fd86819d106",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.commons.cli.avalon.CLOption;\n import org.apache.commons.cli.avalon.CLOptionDescriptor;\n import org.apache.commons.cli.avalon.CLUtil;\n+import org.apache.jmeter.control.ModuleController;\n import org.apache.jmeter.control.ReplaceableController;\n import org.apache.jmeter.engine.ClientJMeterEngine;\n import org.apache.jmeter.engine.JMeterEngine;\n@@ -799,8 +800,13 @@ public static void convertSubTree(HashTree tree) {\n                 TestElement item = (TestElement) o;\n                 if (item.isEnabled()) {\n                     if (item instanceof ReplaceableController) {\n-                        // HACK: force the controller to load its tree\n-                        ReplaceableController rc = (ReplaceableController) item.clone();\n+                        ReplaceableController rc;\n+                        if (item instanceof ModuleController){ // Bug 47165\n+                            rc = (ReplaceableController) item;\n+                        } else {\n+                            // HACK: force the controller to load its tree\n+                            rc = (ReplaceableController) item.clone();\n+                        }\n                         HashTree subTree = tree.getTree(item);\n                         if (subTree != null) {\n                             HashTree replacementTree = rc.getReplacementSubTree();",
                "raw_url": "https://github.com/apache/jmeter/raw/b3032a5dec4ac54f56bc8d49894c3fd86819d106/src/core/org/apache/jmeter/JMeter.java",
                "sha": "1393b6fd64b0559b876e39fe25226f48ae36a891",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/b3032a5dec4ac54f56bc8d49894c3fd86819d106/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b3032a5dec4ac54f56bc8d49894c3fd86819d106",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -211,6 +211,7 @@ JMeter now removes extraneous leading \"../\" segments (as do many browsers)\n <li>Bug 47137 - Labels in View Results Tree aren't I18N</li>\n <li>Bug 47150 - ThreadGroup with a loop count of zero causes infinite loop</li>\n <li>A reference to a missing function - e.g. ${__missing(a)} - is now treated the same as a missing variable. Previously the function name - and leading { - were dropped.</li>\n+<li>Bug 47165 - Using the same module name in command line mode causes NPE</li>\n </ul>\n \n <h3>Improvements</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/b3032a5dec4ac54f56bc8d49894c3fd86819d106/xdocs/changes.xml",
                "sha": "1e1243d7536ced4d555b4a75f773389888709666",
                "status": "modified"
            }
        ],
        "message": "Bug 47165 - Using the same module name in command line mode causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@772819 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f664eb41d347936df18b868fe5918b482f60e7ca",
        "parent": "https://github.com/apache/jmeter/commit/6401472d5633a46b352175d2f800e6e88af2d95a",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_b3d1432": {
        "bug_id": "jmeter_b3d1432",
        "commit": "https://github.com/apache/jmeter/commit/b3d143263d6a216b43bf9c0cea702385db7af216",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/jmeter/blob/b3d143263d6a216b43bf9c0cea702385db7af216/src/core/org/apache/jmeter/JMeter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=b3d143263d6a216b43bf9c0cea702385db7af216",
                "deletions": 4,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -760,11 +760,16 @@ private void setProxy(CLArgsParser parser) throws IllegalUserActionException {\n             System.setProperty(\"https.proxyHost\", h);// $NON-NLS-1$\n             System.setProperty(\"http.proxyPort\",  p);// $NON-NLS-1$\n             System.setProperty(\"https.proxyPort\", p);// $NON-NLS-1$\n-            String proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();\n-            if(!StringUtils.isBlank(proxyScheme)){\n-                System.setProperty(\"http.proxyScheme\",  proxyScheme );// $NON-NLS-1$\n+            String proxyScheme = null;\n+            if (parser.getArgumentById(PROXY_SCHEME) != null) {\n+                proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();\n+                if(!StringUtils.isBlank(proxyScheme)){\n+                    System.setProperty(\"http.proxyScheme\",  proxyScheme );// $NON-NLS-1$\n+                }\n+            }\n+            if(log.isInfoEnabled()) {\n+                log.info(\"Set proxy Host: {}, Port: {}, Scheme: {}\", h, p, proxyScheme != null ? proxyScheme : \"Not set\");\n             }\n-            log.info(\"Set scheme: {} proxyHost: {} Port: {}\", proxyScheme, h, p);\n         } else if (parser.getArgumentById(PROXY_HOST) != null || parser.getArgumentById(PROXY_PORT) != null) {\n             throw new IllegalUserActionException(JMeterUtils.getResString(\"proxy_cl_error\"));// $NON-NLS-1$\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/b3d143263d6a216b43bf9c0cea702385db7af216/src/core/org/apache/jmeter/JMeter.java",
                "sha": "cf693b83860db3b6444e965d2e88879bd2fbafb0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/b3d143263d6a216b43bf9c0cea702385db7af216/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b3d143263d6a216b43bf9c0cea702385db7af216",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -163,6 +163,7 @@ Summary\n <h3>General</h3>\n <ul>\n     <li><bug>63201</bug>SearchTreeDialog disappears behind master JFrame. Contributed by Benoit Vatan (benoit.vatan at gmail.com)</li>\n+    <li><bug>63207</bug>java.lang.NullPointerException: null when run Jmeter 5.1 with proxy options</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->",
                "raw_url": "https://github.com/apache/jmeter/raw/b3d143263d6a216b43bf9c0cea702385db7af216/xdocs/changes.xml",
                "sha": "beffaa9651192d032216e894205de9014354e183",
                "status": "modified"
            }
        ],
        "message": "Bug 63207 - java.lang.NullPointerException: null when run Jmeter 5.1 with proxy options\nBugzilla Id: 63207\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1854317 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: be3271fbce14f9bc6b901d7cb557d73919e7d208",
        "parent": "https://github.com/apache/jmeter/commit/f6e5146c6bea249b69e13811557d39bad6481c0d",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_b9f9c71": {
        "bug_id": "jmeter_b9f9c71",
        "commit": "https://github.com/apache/jmeter/commit/b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/RegexExtractor.java?ref=b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
                "deletions": 0,
                "filename": "src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang3.StringEscapeUtils;\n@@ -194,6 +195,10 @@ private String getInputString(SampleResult result) {\n \n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n+            if(inputString == null) {\n+                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor \"+getName()+\", skipping processing\");\n+                return Collections.emptyList();\n+            }\n             matchStrings(matchNumber, matcher, pattern, matches, found,\n                     inputString);\n         } else {",
                "raw_url": "https://github.com/apache/jmeter/raw/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "sha": "e74b6fcc5d5de4b10e82c3c3feff3456fbfc8658",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -145,6 +145,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n+<li><bugzilla>55694</bugzilla> - java.lang.NullPointerException if Apply to is set to a missing JMeter variable</li>\n </ul>\n \n <h3>Functions</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/xdocs/changes.xml",
                "sha": "1126545b62048af886492d422416c8dbcdf030f8",
                "status": "modified"
            }
        ],
        "message": "Bug 55694 - java.lang.NullPointerException if Apply to is set to a missing JMeter variable\nBugzilla Id: 55694\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1535130 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 154e4d151ed30a38f817bc1dab449b448834d9da",
        "parent": "https://github.com/apache/jmeter/commit/89fde367e8952ea82b650825981324742a00cb11",
        "patched_files": [
            "RegexExtractor.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestRegexExtractor.java"
        ]
    },
    "jmeter_bd4cdbe": {
        "bug_id": "jmeter_bd4cdbe",
        "commit": "https://github.com/apache/jmeter/commit/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -97,7 +97,7 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate String samplerData;\n \n-\tprivate String threadName;\n+\tprivate String threadName = \"\"; // Never return null\n \n \tprivate String responseMessage = \"\";\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "f35ec15f05698d2b08a2589e90fa4597e2036644",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when writing JTL if threadName does not get set\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@387618 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5ff9aa620dc9f823735196e60da220fd367137bc",
        "parent": "https://github.com/apache/jmeter/commit/dc62c0f93509335762dd6237d4da30bb78569c83",
        "patched_files": [
            "SampleResult.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_c286627": {
        "bug_id": "jmeter_c286627",
        "commit": "https://github.com/apache/jmeter/commit/c2866274f19eb1630e95ecfbf0e311f1d2a4246f",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/jmeter/blob/c2866274f19eb1630e95ecfbf0e311f1d2a4246f/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java?ref=c2866274f19eb1630e95ecfbf0e311f1d2a4246f",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "patch": "@@ -175,8 +175,10 @@ private static String createMessage(Object invokee, Method method, Object[] para\n         sb.append(method.getName());\n         sb.append(\"(\");\n         for(Object o : params) {\n-            sb.append(o.getClass().getSimpleName());\n-            sb.append(' ');\n+            if (o != null) {\n+                sb.append(o.getClass().getSimpleName());\n+                sb.append(' ');\n+            }\n             sb.append(o);\n             sb.append(' ');\n         }",
                "raw_url": "https://github.com/apache/jmeter/raw/c2866274f19eb1630e95ecfbf0e311f1d2a4246f/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "sha": "244f1747b196ba2ccc6f852994f342cc5a2f118a",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE when reporting errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1514213 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a021ca2ef60db449384cfa7351718c27f37321d9",
        "parent": "https://github.com/apache/jmeter/commit/b5917918910e7adade0eb23179ac249ebfb39e4e",
        "patched_files": [],
        "repo": "jmeter",
        "unit_tests": [
            "TestBeanHelper.java"
        ]
    },
    "jmeter_c376008": {
        "bug_id": "jmeter_c376008",
        "commit": "https://github.com/apache/jmeter/commit/c3760081b200c6efa170bbb87e3389b8a35b5504",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/SampleMetadata.java?ref=c3760081b200c6efa170bbb87e3389b8a35b5504",
                "deletions": 4,
                "filename": "src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.TreeMap;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.samplers.SampleSaveConfiguration;\n import org.apache.jmeter.save.CSVSaveService;\n \n@@ -52,12 +53,10 @@\n      * @param separator\n      *            The character used for column separation\n      * @param columns\n-     *            The list of columns names\n+     *            The list of columns names (must not be {@code null})\n      */\n     public SampleMetadata(char separator, String... columns) {\n-        if (columns == null) {\n-            throw new ArgumentNullException(\"columns\");\n-        }\n+        Validate.notNull(columns, \"columns must not be null\");\n         initialize(separator, Arrays.asList(columns));\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "sha": "2e45d7df14f13561d0ad1db6c9652754f32ae9c7",
                "status": "modified"
            }
        ],
        "message": "Change ArgumentNullException to NPE and document the need for non null parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721383 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7e4ffc80651c2fdd3420cd9bb6b355dd26cf7368",
        "parent": "https://github.com/apache/jmeter/commit/a62ecf05a523100a50ff6e9488bf30d2edc3006e",
        "patched_files": [
            "SampleMetadata.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "SampleMetadataTest.java"
        ]
    },
    "jmeter_c3bb466": {
        "bug_id": "jmeter_c3bb466",
        "commit": "https://github.com/apache/jmeter/commit/c3bb466df52d628c01a6ff2ee1f7299436b191e5",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/JMeterThread.java?ref=c3bb466df52d628c01a6ff2ee1f7299436b191e5",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/threads/JMeterThread.java",
                "patch": "@@ -328,7 +328,8 @@ private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext thre\n \n         Sampler realSampler = findRealSampler(sam);\n         if(realSampler == null) {\n-            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+sam.getName()+\", sam:\"+sam);\n+            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+\n+                    (sam != null ? sam.getName(): \"null\")+\", sam:\"+sam);\n         }\n         // Find parent controllers of current sampler\n         FindTestElementsUpToRootTraverser pathToRootTraverser = new FindTestElementsUpToRootTraverser(realSampler);",
                "raw_url": "https://github.com/apache/jmeter/raw/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "sha": "03203ca37e21206f4fc8e932776337fe8f7a434c",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783593 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f1c69ea60bea1abe91a6d7c8aa361f79e0a32e37",
        "parent": "https://github.com/apache/jmeter/commit/0467684c88493b0c424be584723bf1a1f9cfbe6a",
        "patched_files": [
            "JMeterThread.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterThread.java"
        ]
    },
    "jmeter_c3fb27c": {
        "bug_id": "jmeter_c3fb27c",
        "commit": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=c3fb27cf17025a86b9318614127431afaf0f97c0",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -363,7 +363,7 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n-        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n+        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);\n         } catch (IOException e1) {",
                "raw_url": "https://github.com/apache/jmeter/raw/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "sha": "417af711ccfa9f946ebe594b11cc7b86fba272a5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE try 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737313 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f82b3d3afc705a276f39d4f5cc694cbf1acc66f",
        "parent": "https://github.com/apache/jmeter/commit/d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_c51aef4": {
        "bug_id": "jmeter_c51aef4",
        "commit": "https://github.com/apache/jmeter/commit/c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
        "file": [
            {
                "additions": 89,
                "blob_url": "https://github.com/apache/jmeter/blob/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "changes": 135,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java?ref=c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
                "deletions": 46,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "patch": "@@ -61,34 +61,36 @@\n \n     private static final Logger log = LoggingManager.getLoggerForClass();\n \n-    private transient SystemDefaultDnsResolver systemDefaultDnsResolver = null;\n-\n-    private Map<String, InetAddress[]> cache = null;\n-\n-    private transient Resolver resolver = null;\n+    public static final boolean DEFAULT_CLEAR_CACHE_EACH_ITER = false;\n \n     //++ JMX tag values\n-    public static final String CLEAR_CACHE_EACH_ITER = \"DNSCacheManager.clearEachIteration\"; // $NON-NLS-1$\n+    private static final String CLEAR_CACHE_EACH_ITER = \"DNSCacheManager.clearEachIteration\"; // $NON-NLS-1$\n \n-    public static final String SERVERS = \"DNSCacheManager.servers\"; // $NON-NLS-1$\n+    private static final String SERVERS = \"DNSCacheManager.servers\"; // $NON-NLS-1$\n \n-    public static final String IS_CUSTOM_RESOLVER = \"DNSCacheManager.isCustomResolver\"; // $NON-NLS-1$\n+    private static final String IS_CUSTOM_RESOLVER = \"DNSCacheManager.isCustomResolver\"; // $NON-NLS-1$\n     //-- JMX tag values\n \n-    public static final boolean DEFAULT_CLEAR_CACHE_EACH_ITER = false;\n+    private static final boolean DEFAULT_IS_CUSTOM_RESOLVER = false;\n \n-    public static final String DEFAULT_SERVERS = \"\"; // $NON-NLS-1$\n+    private final transient Cache lookupCache;\n \n-    public static final boolean DEFAULT_IS_CUSTOM_RESOLVER = false;\n+    private final transient SystemDefaultDnsResolver systemDefaultDnsResolver;\n \n-    private final transient Cache lookupCache;\n+    private final Map<String, InetAddress[]> cache;\n+\n+    transient Resolver resolver;\n \n     private transient int timeoutMs;\n \n+    transient boolean initFailed;\n+\n     // ensure that the initial DNSServers are copied to the per-thread instances\n \n     public DNSCacheManager() {\n         setProperty(new CollectionProperty(SERVERS, new ArrayList<String>()));\n+        this.systemDefaultDnsResolver = new SystemDefaultDnsResolver();\n+        this.cache = new LinkedHashMap<>();\n         //disabling cache\n         lookupCache = new Cache();\n         lookupCache.setMaxCache(0);\n@@ -101,8 +103,14 @@ public DNSCacheManager() {\n     @Override\n     public Object clone() {\n         DNSCacheManager clone = (DNSCacheManager) super.clone();\n-        clone.systemDefaultDnsResolver = new SystemDefaultDnsResolver();\n-        clone.cache = new LinkedHashMap<>();\n+        clone.resolver = createResolver();\n+        return clone;\n+    }\n+\n+    /**\n+     * @return {@link Resolver}\n+     */\n+    private Resolver createResolver() {\n         CollectionProperty dnsServers = getServers();\n         try {\n             String[] serverNames = new String[dnsServers.size()];\n@@ -111,16 +119,20 @@ public Object clone() {\n                 serverNames[index] = jMeterProperty.getStringValue();\n                 index++;\n             }\n-            clone.resolver = new ExtendedResolver(serverNames);\n-            log.debug(\"Using DNS Resolvers: \"\n-                    + Arrays.asList(((ExtendedResolver) clone.resolver)\n-                            .getResolvers()));\n+            ExtendedResolver resolver = new ExtendedResolver(serverNames);\n+            if(log.isDebugEnabled()) {\n+                log.debug(\"Using DNS Resolvers: \"\n+                        + Arrays.asList(((ExtendedResolver) resolver)\n+                                .getResolvers()));\n+            }\n             // resolvers will be chosen via round-robin\n-            ((ExtendedResolver) clone.resolver).setLoadBalance(true);\n+            resolver.setLoadBalance(true);\n+            return resolver;\n         } catch (UnknownHostException uhe) {\n+            this.initFailed = true;\n             log.warn(\"Failed to create Extended resolver: \" + uhe.getMessage());\n+            return null;\n         }\n-        return clone;\n     }\n \n     /**\n@@ -129,12 +141,19 @@ public Object clone() {\n      */\n     @Override\n     public InetAddress[] resolve(String host) throws UnknownHostException {\n-        if (cache.containsKey(host)) {\n+        InetAddress[] result = cache.get(host);\n+        // cache may contain\n+        // A return value of null does not necessarily \n+        // indicate that the map contains no mapping \n+        // for the key; it's also possible that the map \n+        // explicitly maps the key to null\n+        // https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\n+        if (result != null || cache.containsKey(host)) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Cache hit thr#\" + JMeterContextService.getContext().getThreadNum() + \": \" + host + \"=>\"\n-                        + Arrays.toString(cache.get(host)));\n+                        + Arrays.toString(result));\n             }\n-            return cache.get(host);\n+            return result;\n         } else {\n             InetAddress[] addresses = requestLookup(host);\n             if (log.isDebugEnabled()) {\n@@ -148,38 +167,59 @@ public Object clone() {\n \n     /**\n      * Sends DNS request via system or custom DNS resolver\n+     * @param host\n+     * @return array of {@link InetAddress} or null if lookup did not return result\n      */\n     private InetAddress[] requestLookup(String host) throws UnknownHostException {\n         InetAddress[] addresses = null;\n-        if (isCustomResolver() && ((ExtendedResolver) resolver).getResolvers().length > 0) {\n-            try {\n-                Lookup lookup = new Lookup(host, Type.A);\n-                lookup.setCache(lookupCache);\n-                if (timeoutMs > 0) {\n-                    resolver.setTimeout(timeoutMs / 1000, timeoutMs % 1000);\n-                }\n-                lookup.setResolver(resolver);\n-                Record[] records = lookup.run();\n-                if (records == null || records.length == 0) {\n-                    throw new UnknownHostException(\"Failed to resolve host name: \" + host);\n-                }\n-                addresses = new InetAddress[records.length];\n-                for (int i = 0; i < records.length; i++) {\n-                    addresses[i] = ((ARecord) records[i]).getAddress();\n+        if (isCustomResolver()) {\n+            if (getResolver() != null) {\n+                if(getResolver().getResolvers().length > 0) {\n+                    try {\n+                        Lookup lookup = new Lookup(host, Type.A);\n+                        lookup.setCache(lookupCache);\n+                        if (timeoutMs > 0) {\n+                            resolver.setTimeout(timeoutMs / 1000, timeoutMs % 1000);\n+                        }\n+                        lookup.setResolver(resolver);\n+                        Record[] records = lookup.run();\n+                        if (records == null || records.length == 0) {\n+                            throw new UnknownHostException(\"Failed to resolve host name: \" + host);\n+                        }\n+                        addresses = new InetAddress[records.length];\n+                        for (int i = 0; i < records.length; i++) {\n+                            addresses[i] = ((ARecord) records[i]).getAddress();\n+                        }\n+                    } catch (TextParseException tpe) {\n+                        log.debug(\"Failed to create Lookup object: \" + tpe);\n+                    }\n+                    return addresses;\n                 }\n-            } catch (TextParseException tpe) {\n-                log.debug(\"Failed to create Lookup object: \" + tpe);\n-            }\n-        } else {\n-            addresses = systemDefaultDnsResolver.resolve(host);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Cache miss: \" + host + \" Thread #\" + JMeterContextService.getContext().getThreadNum()\n-                        + \", resolved with system resolver into \" + Arrays.toString(addresses));\n+            } else {\n+                throw new UnknownHostException(\"Could not resolve host:\"+host\n+                        +\", failed to initialize resolver\"\n+                        + \" or no resolver found\");\n             }\n         }\n+        addresses = systemDefaultDnsResolver.resolve(host);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Cache miss: \" + host + \" Thread #\" + JMeterContextService.getContext().getThreadNum()\n+                    + \", resolved with system resolver into \" + Arrays.toString(addresses));\n+        }\n         return addresses;\n     }\n \n+    /**\n+     * Tries to initialize resolver , otherwise sets initFailed to true\n+     * @return ExtendedResolver if init succeeded or null otherwise\n+     */\n+    private ExtendedResolver getResolver() {\n+        if(resolver == null && !initFailed) {\n+            resolver = createResolver();\n+        }\n+        return (ExtendedResolver) resolver;\n+    }\n+\n     /**\n      * {@inheritDoc} Clean DNS cache if appropriate check-box was selected\n      */\n@@ -197,6 +237,9 @@ public void testIterationStart(LoopIterationEvent event) {\n     public void clear() {\n         super.clear();\n         clearServers(); // ensure data is set up OK initially\n+        this.cache.clear();\n+        this.initFailed = false;\n+        this.resolver = null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "sha": "5db9bd6d4578d4d07e68c4df7055c1b467f1d791",
                "status": "modified"
            },
            {
                "additions": 104,
                "blob_url": "https://github.com/apache/jmeter/blob/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java?ref=c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
                "deletions": 3,
                "filename": "test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "patch": "@@ -20,18 +20,92 @@\n \n import static org.junit.Assert.fail;\n \n+import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import org.apache.jmeter.junit.JMeterTestCase;\n+import org.junit.Assert;\n import org.junit.Test;\n+import org.xbill.DNS.ExtendedResolver;\n \n public class TestDNSCacheManager extends JMeterTestCase {\n-\n+    private static final String INVALID_DNS_SERVER = \"8.8.8.8.9\"; //$NON-NLS-1$\n+    \n+    private static final String VALID_DNS_SERVER = \"8.8.8.8\"; //$NON-NLS-1$\n+    @Test\n+    public void testWithCustomResolverAnd1WrongServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.addServer(INVALID_DNS_SERVER);\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            fail(\"Should have failed as DNS server does not exist\");\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            Assert.assertTrue(original.initFailed);\n+        }\n+        \n+        try {\n+            original.resolve(\"www.apache.org\");\n+            fail(\"Should have failed as DNS server does not exist\");\n+            // OK\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            Assert.assertTrue(original.initFailed);\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAnd1Server() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.addServer(VALID_DNS_SERVER);\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            Assert.assertNotNull(original.resolver);\n+            Assert.assertTrue(((ExtendedResolver)original.resolver).getResolvers().length==1);\n+            // OK\n+        } catch (UnknownHostException e) {\n+            fail(\"System DNS server should have been used\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAndNoServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            // This will use Default System DNS resolver\n+            original.resolve(\"jmeter.apache.org\");\n+            Assert.assertNotNull(original.resolver);\n+            Assert.assertTrue(((ExtendedResolver)original.resolver).getResolvers().length==0);\n+        } catch (UnknownHostException e) {\n+            fail(\"Should have failed as no DNS server provided\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAndInvalidNameserver() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(true);\n+        original.addServer(INVALID_DNS_SERVER);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            fail();\n+        } catch (UnknownHostException e) {\n+            // OK\n+        }\n+    }\n+    \n     @Test\n     public void testCloneWithCustomResolverAndInvalidNameserver() throws UnknownHostException {\n         DNSCacheManager original = new DNSCacheManager();\n         original.setCustomResolver(true);\n-        original.addServer(\"127.0.0.99\");\n+        original.addServer(INVALID_DNS_SERVER);\n         DNSCacheManager clone = (DNSCacheManager) original.clone();\n         clone.setTimeoutMs(100);\n         try {\n@@ -41,5 +115,32 @@ public void testCloneWithCustomResolverAndInvalidNameserver() throws UnknownHost\n             // OK\n         }\n     }\n-\n+    \n+    @Test\n+    public void testResolveExistingHostWithSystemDefaultDnsServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(false);\n+        try {\n+            InetAddress[] result = original.resolve(\"www.example.org\");\n+            Assert.assertNotNull(result);\n+            Assert.assertNull(original.resolver);\n+            // IPv4 and IPv6\n+            Assert.assertTrue(result.length == 2);\n+        } catch (UnknownHostException e) {\n+            Assert.fail(\"Should not have failed\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testResolveNonExistingHostWithSystemDefaultDnsServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(false);\n+        try {\n+            original.resolve(\"jmeterxxx.apache.org\");\n+            fail();\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            // OK\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "sha": "7966b3cb23fead8e1560d82d795d976d25d63122",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if init of resolver fails\nAdd Test cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1780852 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d258c32ae5264f87af956a393a908e3ba9e8e05b",
        "parent": "https://github.com/apache/jmeter/commit/59b162c9d2d9167113dfeabc66931b79edb70a05",
        "patched_files": [
            "DNSCacheManager.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestDNSCacheManager.java"
        ]
    },
    "jmeter_cd14dfa": {
        "bug_id": "jmeter_cd14dfa",
        "commit": "https://github.com/apache/jmeter/commit/cd14dfa7a64210298f280e53668591865025f3e7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/components/org/apache/jmeter/control/IncludeController.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/IncludeController.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 9,
                "filename": "src/components/org/apache/jmeter/control/IncludeController.java",
                "patch": "@@ -19,10 +19,8 @@\n package org.apache.jmeter.control;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.util.Iterator;\n import java.util.LinkedList;\n \n@@ -34,7 +32,6 @@\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jorphan.collections.HashTree;\n import org.apache.jorphan.logging.LoggingManager;\n-import org.apache.jorphan.util.JOrphanUtils;\n import org.apache.log.Logger;\n \n public class IncludeController extends GenericController implements ReplaceableController {\n@@ -124,7 +121,6 @@ public void resolveReplacementSubTree(JMeterTreeNode context) {\n     protected HashTree loadIncludedElements() {\n         // only try to load the JMX test plan if there is one\n         final String includePath = getIncludePath();\n-        InputStream reader = null;\n         HashTree tree = null;\n         if (includePath != null && includePath.length() > 0) {\n             try {\n@@ -142,8 +138,7 @@ protected HashTree loadIncludedElements() {\n                     }\n                 }\n                 \n-                reader = new FileInputStream(file);\n-                tree = SaveService.loadTree(reader);\n+                tree = SaveService.loadTree(file);\n                 // filter the tree for a TestFragment.\n                 tree = getProperBranch(tree);\n                 removeDisabledItems(tree);\n@@ -168,9 +163,6 @@ protected HashTree loadIncludedElements() {\n                 JMeterUtils.reportErrorToUser(msg);\n                 log.warn(\"Unexpected error\", ex);\n             }\n-            finally{\n-                JOrphanUtils.closeQuietly(reader);\n-            }\n         }\n         return tree;\n     }",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/components/org/apache/jmeter/control/IncludeController.java",
                "sha": "437f6713aab1ec8fca17bdfb47847a32cacf6298",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/JMeter.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 13,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -53,10 +53,10 @@\n import org.apache.commons.cli.avalon.CLUtil;\n import org.apache.jmeter.control.ReplaceableController;\n import org.apache.jmeter.engine.ClientJMeterEngine;\n+import org.apache.jmeter.engine.DistributedRunner;\n import org.apache.jmeter.engine.JMeterEngine;\n import org.apache.jmeter.engine.RemoteJMeterEngineImpl;\n import org.apache.jmeter.engine.StandardJMeterEngine;\n-import org.apache.jmeter.engine.DistributedRunner;\n import org.apache.jmeter.exceptions.IllegalUserActionException;\n import org.apache.jmeter.gui.GuiPackage;\n import org.apache.jmeter.gui.MainFrame;\n@@ -244,14 +244,12 @@ private void startGui(String testFile) {\n         main.setVisible(true);\n         ActionRouter.getInstance().actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));\n         if (testFile != null) {\n-            FileInputStream reader = null;\n             try {\n                 File f = new File(testFile);\n                 log.info(\"Loading file: \" + f);\n                 FileServer.getFileServer().setBaseForScript(f);\n \n-                reader = new FileInputStream(f);\n-                HashTree tree = SaveService.loadTree(reader);\n+                HashTree tree = SaveService.loadTree(f);\n \n                 GuiPackage.getInstance().setTestPlanFile(f.getAbsolutePath());\n \n@@ -262,8 +260,6 @@ private void startGui(String testFile) {\n             } catch (Exception e) {\n                 log.error(\"Failure loading test file\", e);\n                 JMeterUtils.reportErrorToUser(e.toString());\n-            } finally {\n-                JOrphanUtils.closeQuietly(reader);\n             }\n         } else {\n             JTree jTree = GuiPackage.getInstance().getMainFrame().getTree();\n@@ -743,7 +739,6 @@ private void startNonGui(String testFile, String logFile, CLOption remoteStart)\n \n     // run test in batch mode\n     private void runNonGui(String testFile, String logFile, boolean remoteStart, String remote_hosts_string) {\n-        FileInputStream reader = null;\n         try {\n             File f = new File(testFile);\n             if (!f.exists() || !f.isFile()) {\n@@ -752,10 +747,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str\n             }\n             FileServer.getFileServer().setBaseForScript(f);\n \n-            reader = new FileInputStream(f);\n-            log.info(\"Loading file: \" + f);\n-\n-            HashTree tree = SaveService.loadTree(reader);\n+            HashTree tree = SaveService.loadTree(f);\n \n             @SuppressWarnings(\"deprecation\") // Deliberate use of deprecated ctor\n             JMeterTreeModel treeModel = new JMeterTreeModel(new Object());// Create non-GUI version to avoid headless problems\n@@ -826,8 +818,6 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str\n         } catch (Exception e) {\n             System.out.println(\"Error in NonGUIDriver \" + e.toString());\n             log.error(\"Error in NonGUIDriver\", e);\n-        } finally {\n-            JOrphanUtils.closeQuietly(reader);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/JMeter.java",
                "sha": "e2b56f06fbd0a2b55b32d778e9807db0e0f5ce4e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/gui/action/Load.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Load.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 8,
                "filename": "src/core/org/apache/jmeter/gui/action/Load.java",
                "patch": "@@ -20,9 +20,7 @@\n \n import java.awt.event.ActionEvent;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -44,7 +42,6 @@\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jorphan.collections.HashTree;\n import org.apache.jorphan.logging.LoggingManager;\n-import org.apache.jorphan.util.JOrphanUtils;\n import org.apache.log.Logger;\n \n import com.thoughtworks.xstream.converters.ConversionException;\n@@ -119,7 +116,6 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n \n         final GuiPackage guiPackage = GuiPackage.getInstance();\n         if (f != null) {\n-            InputStream reader = null;\n             try {\n                 if (merging) {\n                     log.info(\"Merging file: \" + f);\n@@ -131,8 +127,7 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n                         FileServer.getFileServer().setBaseForScript(f);\n                     }\n                 }\n-                reader = new FileInputStream(f);\n-                final HashTree tree = SaveService.loadTree(reader);\n+                final HashTree tree = SaveService.loadTree(f);\n                 final boolean isTestPlan = insertLoadedTree(e.getID(), tree, merging);\n \n                 // don't change name if merging\n@@ -150,8 +145,6 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n                 reportError(\"Error reading file: \", ex, false);\n             } catch (Exception ex) {\n                 reportError(\"Unexpected error\", ex, true);\n-            } finally {\n-                JOrphanUtils.closeQuietly(reader);\n             }\n             FileDialoger.setLastJFCDirectory(f.getParentFile().getAbsolutePath());\n             guiPackage.updateCurrentGui();",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/gui/action/Load.java",
                "sha": "730bfa290fca0b493404dc638daee4e89b281f3f",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/save/SaveService.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 28,
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.jmeter.save;\n \n import java.io.BufferedInputStream;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -506,40 +507,44 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res\n \n     /**\n      * Load a Test tree (JMX file)\n-     * @param reader on the JMX file\n+     * @param file the JMX file\n      * @return the loaded tree\n      * @throws IOException if there is a problem reading the file or processing it\n      */\n-    public static HashTree loadTree(InputStream reader) throws IOException {\n-        if (!reader.markSupported()) {\n-            reader = new BufferedInputStream(reader);\n-        }\n-        reader.mark(Integer.MAX_VALUE);\n-        ScriptWrapper wrapper = null;\n+    public static HashTree loadTree(File file) throws IOException {\n+        log.info(\"Loading file: \" + file);\n+        InputStream reader = null;\n         try {\n-            // Get the InputReader to use\n-            InputStreamReader inputStreamReader = getInputStreamReader(reader);\n-            wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n-            inputStreamReader.close();\n-            if (wrapper == null){\n-                log.error(\"Problem loading XML: see above.\");\n-                return null;\n+            reader = new FileInputStream(file);\n+            if (!reader.markSupported()) {\n+                reader = new BufferedInputStream(reader);\n             }\n-            return wrapper.testPlan;\n-        } catch (CannotResolveClassException e) {\n-            if (e.getMessage().startsWith(\"node\")) {\n-                log.info(\"Problem loading XML, trying Avalon format\");\n-                reader.reset();\n-                return OldSaveService.loadSubTree(reader);                \n+            reader.mark(Integer.MAX_VALUE);\n+            ScriptWrapper wrapper = null;\n+            try {\n+                // Get the InputReader to use\n+                InputStreamReader inputStreamReader = getInputStreamReader(reader);\n+                wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n+                inputStreamReader.close();\n+                if (wrapper == null){\n+                    log.error(\"Problem loading XML: see above.\");\n+                    return null;\n+                }\n+                return wrapper.testPlan;\n+            } catch (CannotResolveClassException e) {\n+                if (e.getMessage().startsWith(\"node\")) {\n+                    log.info(\"Problem loading XML, trying Avalon format\");\n+                    reader.reset();\n+                    return OldSaveService.loadSubTree(reader);                \n+                }\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', cannot determine class for element: \" + e, e);\n+            } catch (NoClassDefFoundError e) {\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', missing class \"+e , e);\n+            } catch (ConversionException e) {\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', conversion error \"+e , e);\n             }\n-            log.warn(\"Problem loading XML, cannot determine class for element: \" + e.getLocalizedMessage());\n-            return null;\n-        } catch (NoClassDefFoundError e) {\n-            log.error(\"Missing class \"+e);\n-            return null;\n-        } catch (ConversionException e) {\n-            log.error(\"Conversion error \"+e);\n-            return null;\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/save/SaveService.java",
                "sha": "8de3846ec11e95e46d9325c5149e31bef3adf3bc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/gui/action/TestLoad.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 8,
                "filename": "test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.jmeter.gui.action;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FilenameFilter;\n import java.util.HashSet;\n import java.util.Set;\n@@ -107,13 +106,7 @@ private void assertTree(HashTree tree) throws Exception {\n     }\n \n     private HashTree getTree(File f) throws Exception {\n-        FileInputStream fis = new FileInputStream(f);\n-        HashTree tree = null;\n-        try {\n-            tree = SaveService.loadTree(fis);\n-        } finally {\n-            fis.close();\n-        }\n+        HashTree tree = SaveService.loadTree(f);\n         return tree;\n     }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "sha": "cbb66134f68fef8548065f0e1c67a9fa158078e3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 5,
                "filename": "test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "patch": "@@ -18,7 +18,7 @@\n \n package org.apache.jmeter.protocol.http.modifier;\n \n-import java.io.FileInputStream;\n+import java.io.File;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLEncoder;\n@@ -48,12 +48,12 @@ public void setUp() {\n         }\n \n         public void testProcessingHTMLFile(String HTMLFileName) throws Exception {\n-            HTTPSamplerBase config = (HTTPSamplerBase) SaveService.loadTree(\n-                    new FileInputStream(System.getProperty(\"user.dir\") + \"/testfiles/load_bug_list.jmx\")).getArray()[0];\n+            File file = new File(System.getProperty(\"user.dir\") + \"/testfiles/load_bug_list.jmx\");\n+            HTTPSamplerBase config = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];\n             config.setRunningVersion(true);\n             HTTPSampleResult result = new HTTPSampleResult();\n-            HTTPSamplerBase context = (HTTPSamplerBase) SaveService.loadTree(\n-                    new FileInputStream(System.getProperty(\"user.dir\") + \"/testfiles/Load_JMeter_Page.jmx\")).getArray()[0];\n+            file = new File(System.getProperty(\"user.dir\") + \"/testfiles/Load_JMeter_Page.jmx\");\n+            HTTPSamplerBase context = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];\n             jmctx.setCurrentSampler(context);\n             jmctx.setCurrentSampler(config);\n             result.setResponseData(new TextFile(System.getProperty(\"user.dir\") + HTMLFileName).getText(), null);",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "sha": "155eb9e1bf55bde229819bad50ebc805d5fd30dd",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/save/TestSaveService.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/save/TestSaveService.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 19,
                "filename": "test/src/org/apache/jmeter/save/TestSaveService.java",
                "patch": "@@ -22,10 +22,8 @@\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.FileReader;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.util.List;\n \n@@ -110,16 +108,7 @@ private boolean loadAndSave(File testFile, String fileName, boolean checkSize) t\n \n         int [] orig = readFile(new BufferedReader(new FileReader(testFile)));\n \n-        InputStream in = null;\n-        HashTree tree = null;\n-        try {\n-            in = new FileInputStream(testFile);\n-            tree = SaveService.loadTree(in);\n-        } finally {\n-            if(in != null) {\n-                in.close();\n-            }\n-        }\n+        HashTree tree = SaveService.loadTree(testFile);\n \n         ByteArrayOutputStream out = new ByteArrayOutputStream(1000000);\n         try {\n@@ -191,16 +180,14 @@ private boolean loadAndSave(File testFile, String fileName, boolean checkSize) t\n \n     public void testLoad() throws Exception {\n         for (int i = 0; i < FILES_LOAD_ONLY.length; i++) {\n-            InputStream in = null;\n+            File file = findTestFile(\"testfiles/\" + FILES_LOAD_ONLY[i]);\n             try {\n-                in = new FileInputStream(findTestFile(\"testfiles/\" + FILES_LOAD_ONLY[i]));\n-                HashTree tree =SaveService.loadTree(in);\n+                HashTree tree =SaveService.loadTree(file);\n                 assertNotNull(tree);\n-            } finally {\n-                if(in != null) {\n-                    in.close();\n-                }\n+            } catch(IllegalArgumentException ex) {\n+                fail(\"Exception loading \"+file.getAbsolutePath());\n             }\n+            \n         }\n \n     }",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/save/TestSaveService.java",
                "sha": "f18ede41ba15bc237a0cf6be3ad5c2ccf7f36e27",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -235,6 +235,7 @@ See  <bugzilla>56357</bugzilla> for details.\n <h3>General</h3>\n <ul>\n <li><bug>57518</bug>Icons for toolbar with several sizes</li>\n+<li><bug>57605</bug>When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers</li>\n </ul>\n <ch_section>Non-functional changes</ch_section>\n <ul>",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/xdocs/changes.xml",
                "sha": "49d186b147b6560dafbda9141f56092e46fb7c02",
                "status": "modified"
            }
        ],
        "message": "Bug 57605 - When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers\nBugzilla Id: 57605\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1661007 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 40b3221e70799b239c8a4cc04c7c5e91fc86730b",
        "parent": "https://github.com/apache/jmeter/commit/e7c21d806bf5da880d567609e5b3ea166e43a9f2",
        "patched_files": [
            "Load.java",
            "AnchorModifier.java",
            "JMeter.java",
            "changes.java",
            "IncludeController.java",
            "SaveService.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestAnchorModifier.java",
            "TestLoad.java",
            "TestSaveService.java",
            "JMeterTest.java"
        ]
    },
    "jmeter_ce2dd06": {
        "bug_id": "jmeter_ce2dd06",
        "commit": "https://github.com/apache/jmeter/commit/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/jmeter/blob/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/config/RandomVariableConfig.java?ref=ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
                "deletions": 5,
                "filename": "src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "patch": "@@ -54,15 +54,25 @@\n     private Random globalRandom = null;\n \n     // Used for per-thread/user numbers\n-    private transient ThreadLocal perThreadRandom = new ThreadLocal() {\n-            protected Object initialValue() {\n-                init();\n-                return new Random(getRandomSeedAsLong());\n-            }};\n+    // Cannot be static, as random numbers are not to be shared between instances\n+    private transient ThreadLocal perThreadRandom = initThreadLocal();\n+\n+    private ThreadLocal initThreadLocal() {\n+        return new ThreadLocal() {\n+                protected Object initialValue() {\n+                    init();\n+                    return new Random(getRandomSeedAsLong());\n+                }};\n+    }\n         \n     private int n;\n     private long minimum;\n     \n+    private Object readResolve(){\n+        perThreadRandom = initThreadLocal();\n+        return this;\n+    }\n+    \n     /*\n      * nextInt(n) returns values in the range [0,n),\n      * so n must be set to max-min+1\n@@ -84,6 +94,8 @@ private void init(){\n         }\n         n = (int)rangeL;\n     }\n+    \n+    /** {@inheritDoc} */\n     public void iterationStart(LoopIterationEvent iterEvent) {\n         Random randGen=null;\n         if (getPerThread()){",
                "raw_url": "https://github.com/apache/jmeter/raw/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "sha": "d6d8ac6e14cedb6c80effdd2dd0ff34ba641eb73",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -97,6 +97,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n \n <h3>General</h3>\n <ul>\n+<li>Bug 47646 -  NullPointerException in the \"Random Variable\" element</li>\n </ul>\n \n <!-- ==================================================== -->",
                "raw_url": "https://github.com/apache/jmeter/raw/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/xdocs/changes.xml",
                "sha": "d427d8679b4f0f001a968621978f7179329cd010",
                "status": "modified"
            }
        ],
        "message": "Bug 47646 -  NullPointerException in the \"Random Variable\" element\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@801478 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6a6caeec207a08be9408d13646415b483cdf9118",
        "parent": "https://github.com/apache/jmeter/commit/73903f488b9116fc281c0625c06a015da2d4693a",
        "patched_files": [
            "RandomVariableConfig.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestRandomVariableConfig.java"
        ]
    },
    "jmeter_ce51795": {
        "bug_id": "jmeter_ce51795",
        "commit": "https://github.com/apache/jmeter/commit/ce517951fb937169b10280a4d87af3c8bbcaecea",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 1,
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.net.URL;\n import java.util.ArrayList;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedAssertion;\n import org.apache.jmeter.testelement.property.CollectionProperty;\n@@ -334,7 +335,7 @@ private AssertionResult evaluateResponse(SampleResult response) {\n             log.debug(\"Type:\" + (contains?\"Contains\":\"Match\") + (notTest? \"(not)\": \"\"));\n         }\n \n-        if (toCheck.length() == 0) {\n+        if (StringUtils.isEmpty(toCheck)) {\n             if (notTest) { // Not should always succeed against an empty result\n                 return result;\n             }",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "sha": "b10524ff383390bfd75dd116763f84762b2c2363",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/XPathAssertion.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 2,
                "filename": "src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "patch": "@@ -24,6 +24,7 @@\n \n import javax.xml.parsers.ParserConfigurationException;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedAssertion;\n import org.apache.jmeter.testelement.property.BooleanProperty;\n@@ -78,12 +79,15 @@ public AssertionResult getResult(SampleResult response) {\n \n         try {\n             if (isScopeVariable()){\n-                responseData = getThreadContext().getVariables().get(getVariableName()).getBytes(\"UTF-8\");\n+                String inputString=getThreadContext().getVariables().get(getVariableName());\n+                if(!StringUtils.isEmpty(inputString)) {\n+                    responseData = inputString.getBytes(\"UTF-8\");\n+                } \n             } else {\n                 responseData = response.getResponseData();\n             }\n             \n-            if (responseData.length == 0) {\n+            if (responseData == null || responseData.length == 0) {\n                 return result.setResultForNull();\n             }\n     ",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "sha": "2ba1c9ae4bcd799bc19f3e3954f91f55a88a0b8c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/HtmlExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 1,
                "filename": "src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "patch": "@@ -20,8 +20,10 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.processor.PostProcessor;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedTestElement;\n@@ -179,7 +181,14 @@ private String getCorrectMatch(List<String> matches, int entry) {\n         List<String> result = new ArrayList<String>();\n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n-            getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, \"-1\");\n+            if(!StringUtils.isEmpty(inputString)) {\n+                getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, \"-1\");\n+            } else {\n+                if(inputString==null) {\n+                    log.warn(\"No variable '\"+getVariableName()+\"' found to process by Css/JQuery Extractor '\"+getName()+\"', skipping processing\");\n+                }\n+                return Collections.emptyList();\n+            } \n         } else {\n             List<SampleResult> sampleList = getSampleList(previousResult);\n             int i=0;",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "sha": "35e980bf9baae6d65d2b2af0b0ddf0517a034a2a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/RegexExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 1,
                "filename": "src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "patch": "@@ -196,7 +196,7 @@ private String getInputString(SampleResult result) {\n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n             if(inputString == null) {\n-                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor \"+getName()+\", skipping processing\");\n+                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor '\"+getName()+\"', skipping processing\");\n                 return Collections.emptyList();\n             }\n             matchStrings(matchNumber, matcher, pattern, matches, found,",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "sha": "e8f78a14edf0f14ca0e06c0d8e77def541a1048c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/XPathExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 2,
                "filename": "src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "patch": "@@ -128,8 +128,14 @@ public void process() {\n         try{\n             if (isScopeVariable()){\n                 String inputString=vars.get(getVariableName());\n-                Document d =  parseResponse(inputString);\n-                getValuesForXPath(d,getXPathQuery(),matches);\n+                if(inputString != null) {\n+                    if(inputString.length()>0) {\n+                        Document d =  parseResponse(inputString);\n+                        getValuesForXPath(d,getXPathQuery(),matches);\n+                    }\n+                } else {\n+                    log.warn(\"No variable '\"+getVariableName()+\"' found to process by XPathExtractor '\"+getName()+\"', skipping processing\");\n+                }\n             } else {\n                 List<SampleResult> samples = getSampleList(previousResult);\n                 for (SampleResult res : samples) {",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "sha": "a767dcb3ccbb780c6791cd55c1016bbc7821f657",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/xdocs/changes.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "deletions": 1,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -146,7 +146,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n-<li><bugzilla>55694</bugzilla> - java.lang.NullPointerException if Apply to is set to a missing JMeter variable</li>\n+<li><bugzilla>55694</bugzilla> - Assertions and Extractors : Avoid NullPointerException when scope is variable and variable is missing</li>\n <li><bugzilla>55721</bugzilla> - HTTP Cache Manager - no-store directive is wrongly interpreted</li>\n </ul>\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/xdocs/changes.xml",
                "sha": "00d15e053da3152e5ec4e1fa86349e020eb7ef3b",
                "status": "modified"
            }
        ],
        "message": "Bug 55694 - Assertions and Extractors : Avoid NullPointerException when scope is variable and variable is missing\nBugzilla Id: 55694\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1542394 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4a087408eca851b2fb06ae58ad94c8476a1d2b6f",
        "parent": "https://github.com/apache/jmeter/commit/02c80f52c5235cad6f97c855f7d06c953128952b",
        "patched_files": [
            "RegexExtractor.java",
            "ResponseAssertion.java",
            "XPathExtractor.java",
            "XPathAssertion.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestRegexExtractor.java",
            "XPathAssertionTest.java",
            "ResponseAssertionTest.java",
            "TestXPathExtractor.java"
        ]
    },
    "jmeter_d2b295a": {
        "bug_id": "jmeter_d2b295a",
        "commit": "https://github.com/apache/jmeter/commit/d2b295a6baea260ea004297f15f53c39a6c857c2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d2b295a6baea260ea004297f15f53c39a6c857c2/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java?ref=d2b295a6baea260ea004297f15f53c39a6c857c2",
                "deletions": 1,
                "filename": "test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "patch": "@@ -76,7 +76,7 @@ public void testWriteWithoutSample() throws Exception {\n                 csvWriter.write(null);\n                 fail(\"NPE expected\");\n             } catch (NullPointerException e) {\n-                assertEquals(\"sample must not be null\", e.getMessage());\n+                // OK. Excpected to land here\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/jmeter/raw/d2b295a6baea260ea004297f15f53c39a6c857c2/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "sha": "7962bcd6bdac1a60150d965bc644b230a7c04e76",
                "status": "modified"
            }
        ],
        "message": "Message for NPE has changed. We are not really interested in the exact wording, so ignore it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721010 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 069f2b09a1c1186bbb920ca87fda805292f3e45a",
        "parent": "https://github.com/apache/jmeter/commit/9f9279af60ae8b2c83b8eab0d1367bc1dec3c08a",
        "patched_files": [
            "CsvSampleWriter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestCsvSampleWriter.java"
        ]
    },
    "jmeter_d2ca0b9": {
        "bug_id": "jmeter_d2ca0b9",
        "commit": "https://github.com/apache/jmeter/commit/d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/JMeter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "patch": "@@ -363,7 +363,7 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n-        try (InputStream inputStream = getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n+        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);\n         } catch (IOException e1) {",
                "raw_url": "https://github.com/apache/jmeter/raw/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/JMeter.java",
                "sha": "9b37c00787d20a25c6e8f1869ca99fe864955422",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt?ref=d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
                "deletions": 5,
                "filename": "src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "patch": "@@ -1,5 +1,5 @@\n-    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____    _____  ___  \n-   / \\  |  _ \\ / \\  / ___| | | | ____|     | |  \\/  | ____|_   _| ____|  _ \\  |___ / / _ \\ \n-  / _ \\ | |_) / _ \\| |   | |_| |  _|    _  | | |\\/| |  _|   | | |  _| | |_) |   |_ \\| | | |\n- / ___ \\|  __/ ___ \\ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ <   ___) | |_| |\n-/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\ |____(_)___/ \n+    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____     \n+   / \\  |  _ \\ / \\  / ___| | | | ____|     | |  \\/  | ____|_   _| ____|  _ \\   \n+  / _ \\ | |_) / _ \\| |   | |_| |  _|    _  | | |\\/| |  _|   | | |  _| | |_) | \n+ / ___ \\|  __/ ___ \\ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ <  \n+/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\  ",
                "raw_url": "https://github.com/apache/jmeter/raw/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "sha": "5c9e1e91e2901112f58b061497bbdb0cd82d9912",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\nRemove version from Ascii art\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737311 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0b67c02e614c463264cd3e8b9d883812bdd944f7",
        "parent": "https://github.com/apache/jmeter/commit/811512421014197e646596bda626350e7d6d9c08",
        "patched_files": [
            "JMeter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "JMeterTest.java"
        ]
    },
    "jmeter_d675190": {
        "bug_id": "jmeter_d675190",
        "commit": "https://github.com/apache/jmeter/commit/d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/jmeter/blob/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
                "deletions": 37,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "patch": "@@ -28,8 +28,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.swing.SwingUtilities;\n-\n import org.apache.jmeter.assertions.ResponseAssertion;\n import org.apache.jmeter.assertions.gui.AssertionGui;\n import org.apache.jmeter.config.Arguments;\n@@ -396,42 +394,30 @@ public void setTarget(JMeterTreeNode target) {\n      * server's response while recording. A future consideration.\n      */\n     public synchronized void deliverSampler(final HTTPSamplerBase sampler, final TestElement[] subConfigs, final SampleResult result) {\n-        try {\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    if (filterContentType(result) && filterUrl(sampler)) {\n-                        JMeterTreeNode myTarget = findTargetControllerNode();\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n-\n-                        removeValuesFromSampler(sampler, defaultConfigurations);\n-                        replaceValues(sampler, subConfigs, userDefinedVariables);\n-                        sampler.setAutoRedirects(samplerRedirectAutomatically);\n-                        sampler.setFollowRedirects(samplerFollowRedirects);\n-                        sampler.setUseKeepAlive(useKeepAlive);\n-                        sampler.setImageParser(samplerDownloadImages);\n-\n-                        placeSampler(sampler, subConfigs, myTarget);\n-                    }\n-                    else {\n-                        if(log.isDebugEnabled()) {\n-                            log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n-                        }\n-                        result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n-                    }\n-                    // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n-                    notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n-                }\n-            });\n-        } catch (InterruptedException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n-        } catch (InvocationTargetException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n+        if (filterContentType(result) && filterUrl(sampler)) {\n+            JMeterTreeNode myTarget = findTargetControllerNode();\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n+\n+            removeValuesFromSampler(sampler, defaultConfigurations);\n+            replaceValues(sampler, subConfigs, userDefinedVariables);\n+            sampler.setAutoRedirects(samplerRedirectAutomatically);\n+            sampler.setFollowRedirects(samplerFollowRedirects);\n+            sampler.setUseKeepAlive(useKeepAlive);\n+            sampler.setImageParser(samplerDownloadImages);\n+\n+            placeSampler(sampler, subConfigs, myTarget);\n+        }\n+        else {\n+            if(log.isDebugEnabled()) {\n+                log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n+            }\n+            result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n         }\n+        // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n+        notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n     }\n \n     public void stopProxy() {",
                "raw_url": "https://github.com/apache/jmeter/raw/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "sha": "d7c2d434cd11a39bf14205add3ba69f042b76a50",
                "status": "modified"
            }
        ],
        "message": "Revert back invokeLater as we must wait for sample to occur before delivering otherwise a NPE will occurs in ResultCollector\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294195 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ffed87786446f8a9710d3b80320eeb8862b23e86",
        "parent": "https://github.com/apache/jmeter/commit/ded56a6a606b8cd74e9dae302bc25faf7c74b5aa",
        "patched_files": [
            "ProxyControl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestProxyControl.java"
        ]
    },
    "jmeter_d763e53": {
        "bug_id": "jmeter_d763e53",
        "commit": "https://github.com/apache/jmeter/commit/d763e53d5c230502b65addb96b758460c8126280",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "deletions": 1,
                "filename": "src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "patch": "@@ -68,7 +68,7 @@ public String getResponseCode() {\n      * @return the response message, 'none' if the code is empty\n      */\n     public String getResponseMessage() {\n-        if (responseMessage.isEmpty()) {\n+        if (responseMessage == null || responseMessage.isEmpty()) {\n             return \"None\";\n         } else {\n             return responseMessage.trim();",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "sha": "48e02e8dacbdc44dc1d0881b39799a568260e7c5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "deletions": 1,
                "filename": "src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "patch": "@@ -1582,7 +1582,7 @@ public void setIgnore() {\n     }\n \n     /**\n-     * @return String first non null assertion failure message\n+     * @return String first non null assertion failure message if assertionResults is not null, null otherwise\n      */\n     public String getFirstAssertionFailureMessage() {\n         String message = null;",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "sha": "397a7b7387665c95b1f13b4f7a6535781ffd2afd",
                "status": "modified"
            }
        ],
        "message": "ErrorMetric: test for nullity of responseMessage as it may be null\n\nThis resolves Bug 63906 - NPE for InfluxDB backend listener during\nfailover testing",
        "parent": "https://github.com/apache/jmeter/commit/d2224af264bb8fd941dd07f5a3628f446bb05bd3",
        "patched_files": [
            "SampleResult.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestSampleResult.java"
        ]
    },
    "jmeter_daca37d": {
        "bug_id": "jmeter_daca37d",
        "commit": "https://github.com/apache/jmeter/commit/daca37df3212ca4d462a5826ec566225f1e98390",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/jmeter/blob/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=daca37df3212ca4d462a5826ec566225f1e98390",
                "deletions": 1,
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "patch": "@@ -540,7 +540,11 @@ private static String getResStringDefault(String key, String defaultValue, Local\n      */\n     public static String getParsedLabel(String key) {\n         String value = JMeterUtils.getResString(key);\n-        return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        if(value != null) {\n+            return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        } else {\n+            return null;\n+        }\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/jmeter/raw/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "sha": "da0e2ffd60fe742375e97a47f6ae38c41156f9ed",
                "status": "modified"
            }
        ],
        "message": "Fix NPE sonar\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783484 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 29c65bafda9bb5aec6d517d33a81cc46d41533b7",
        "parent": "https://github.com/apache/jmeter/commit/a43aaf43fe496f4eb31e91640a2260827323f9da",
        "patched_files": [
            "JMeterUtils.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterUtils.java"
        ]
    },
    "jmeter_dbb3bfe": {
        "bug_id": "jmeter_dbb3bfe",
        "commit": "https://github.com/apache/jmeter/commit/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/jmeter/blob/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
                "deletions": 2,
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "patch": "@@ -27,6 +27,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.net.URL;\n import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Iterator;\n@@ -188,11 +189,16 @@ public static Properties loadProperties(String file) {\n             p.load(is);\n \t\t} catch (IOException e) {\n \t\t\ttry {\n-\t\t\t\tis = JMeterUtils.class.getClassLoader().getResource(file).openStream();\n-\t\t\t\tif (is == null) {\n+\t\t\t\tfinal URL resource = JMeterUtils.class.getClassLoader().getResource(file);\n+\t\t\t\tif (resource == null) {\n \t\t\t\t\tlog.warn(\"Cannot find \" + file);\n \t\t\t\t\treturn null;\n \t\t\t\t}\n+\t\t\t\tis = resource.openStream();\n+\t\t\t\tif (is == null) {\n+\t\t\t\t\tlog.warn(\"Cannot open \" + file);\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n \t\t\t\tp.load(is);\n \t\t\t} catch (IOException ex) {\n \t\t\t\tlog.warn(\"Error reading \" + file + \" \" + ex.toString());",
                "raw_url": "https://github.com/apache/jmeter/raw/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "sha": "1aa38a8f53fbee3f5efd6f6531375a61f81d10b0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -36,6 +36,7 @@\n <li>Fixed errors when running non-GUI on a headless host</li>\n <li>Bug 43054 - SSLManager causes stress tests to saturate and crash</li>\n <li>Clarified HTTP Request Defaults usage of the port field</li>\n+<li>Bug 43006 - NPE if icon.properties file not found</li>\n </ul>\n \n <h3>Version 2.3RC3</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/xdocs/changes.xml",
                "sha": "ed39475f706adcd1569e99146ffbc9f8dac340f9",
                "status": "modified"
            }
        ],
        "message": "Bug 43006 - NPE if icon.properties file not found\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@564889 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f3fd01535cf6c6851975f64d91e112762c63cb0",
        "parent": "https://github.com/apache/jmeter/commit/d887c2c9262ae8362a1b202f378996534fdd1809",
        "patched_files": [
            "JMeterUtils.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestJMeterUtils.java"
        ]
    },
    "jmeter_dede859": {
        "bug_id": "jmeter_dede859",
        "commit": "https://github.com/apache/jmeter/commit/dede859efdea2bc40e41fd690117de92033bcdea",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/jmeter/blob/dede859efdea2bc40e41fd690117de92033bcdea/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java?ref=dede859efdea2bc40e41fd690117de92033bcdea",
                "deletions": 22,
                "filename": "src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "patch": "@@ -126,9 +126,13 @@ public SampleResult runTest(JavaSamplerContext context) {\n             // Record sample start time.\n             results.sampleStart();\n \n-            // Generate a random value using the current time.\n-            long start = System.currentTimeMillis();\n-            long sleep = getSleepTime() + (start % getSleepMask());\n+            long sleep = sleepTime;\n+            // Only do the calculation if it is needed\n+            if (sleepTime > 0 && sleepMask > 0) {\n+                long start = System.currentTimeMillis();\n+                // Generate a random-ish offset value using the current time.\n+                sleep = sleepTime + (start % sleepMask);\n+            }\n \n             results.setSampleLabel(\"Sleep Test: time = \" + sleep);\n \n@@ -217,23 +221,4 @@ private String whoAmI() {\n         sb.append(Integer.toHexString(hashCode()));\n         return sb.toString();\n     }\n-\n-    /**\n-     * Get the value of the sleepTime field.\n-     *\n-     * @return the base number of milliseconds to sleep during each sample.\n-     */\n-    private long getSleepTime() {\n-        return sleepTime;\n-    }\n-\n-    /**\n-     * Get the value of the sleepMask field.\n-     *\n-     * @return a mask to be applied to the current time in order to add a random\n-     *         component to the sleep time.\n-     */\n-    private long getSleepMask() {\n-        return sleepMask;\n-    }\n }",
                "raw_url": "https://github.com/apache/jmeter/raw/dede859efdea2bc40e41fd690117de92033bcdea/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "sha": "b6f3f7bf40f3d53cdb5e70283064fe5cdfd8bbad",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when mask == 0\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@921767 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1060990ec30920f824574e87bb278df5ce86406c",
        "parent": "https://github.com/apache/jmeter/commit/31253bab32e08a6186a95dc954ad096038a75347",
        "patched_files": [],
        "repo": "jmeter",
        "unit_tests": [
            "SleepTest.java"
        ]
    },
    "jmeter_e7111c7": {
        "bug_id": "jmeter_e7111c7",
        "commit": "https://github.com/apache/jmeter/commit/e7111c7210f94b14b6fd3730f4440016446b6809",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/jmeter/blob/e7111c7210f94b14b6fd3730f4440016446b6809/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java?ref=e7111c7210f94b14b6fd3730f4440016446b6809",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "patch": "@@ -190,6 +190,20 @@ public void testThreadGroupName() throws Exception {\n             FileServer.getFileServer().setScriptName(null);\n         }\n     }\n+    \n+    @Test\n+    public void testThreadGroupNameBug63241() throws Exception {\n+        AbstractFunctionByKey function = new ThreadGroupName();\n+        try {\n+            HTTPSamplerProxy httpRequest = new HTTPSamplerProxy();\n+            JMeterContext context = JMeterContextService.getContext();\n+            context.setCurrentSampler(httpRequest);\n+            String ret = function.execute(result, httpRequest);\n+            assertEquals(\"\", ret);\n+        } finally {\n+            FileServer.getFileServer().setScriptName(null);\n+        }\n+    }\n \n     @Test\n     public void testThreadGroupNameParameterCount() throws Exception {",
                "raw_url": "https://github.com/apache/jmeter/raw/e7111c7210f94b14b6fd3730f4440016446b6809/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "sha": "9d6b04a48482e8192cd184c0c09b64d8a80fe7bd",
                "status": "modified"
            }
        ],
        "message": "Bug 63241 - __threadGroupName causes a NullPointerException if called from non Test threads\n\nAdd a test\nBugzilla Id: 63241\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1855128 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 350f6db68e1e7439068a4d3531ae9db2d4653d10",
        "parent": "https://github.com/apache/jmeter/commit/9a0e28e169cd9e0d3d02d2f541215ec364204463",
        "patched_files": [],
        "repo": "jmeter",
        "unit_tests": [
            "TestSimpleFunctions.java"
        ]
    },
    "jmeter_ee27caa": {
        "bug_id": "jmeter_ee27caa",
        "commit": "https://github.com/apache/jmeter/commit/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "deletions": 2,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "patch": "@@ -327,8 +327,9 @@ public String getName() { // HC3.1 does not have the method\n                     if(!STRICT_RFC_2616 && !(redirectLocation.startsWith(\"http://\")||redirectLocation.startsWith(\"https://\"))) {\n                         redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);\n                     }\n-\n-                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(new URL(redirectLocation)).toString());\n+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails\n+                    final URL redirectUrl = new URL(redirectLocation);\n+                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());\n                 } catch (Exception e) {\n                     log.error(\"Error sanitizing URL:\"+headerLocation.getValue()+\", message:\"+e.getMessage());\n                 }",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "sha": "6902a9543ac168ab94bf745687859b77d467b32c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "deletions": 0,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -364,6 +364,7 @@ protected HTTPSampleResult sample(URL url, String method,\n                     redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);\n                 }\n                 try {\n+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails\n                     final URL redirectUrl = new URL(redirectLocation);\n                     res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());\n                 } catch (Exception e) {",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "df41ea0c9eb0bca2a8bee68a23fa79ea1c37d353",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/xdocs/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -124,6 +124,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n <ul>\n <li><bugzilla>55998</bugzilla> - HTTP recording \u2013 Replacing port value by user defined variable does not work</li>\n <li><bugzilla>56178</bugzilla> - keytool error: Invalid escaped character in AVA: - some characters must be escaped</li>\n+<li><bugzilla>56222</bugzilla> - NPE if jmeter.httpclient.strict_rfc2616=true and location is not absolute</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/xdocs/changes.xml",
                "sha": "2fde2fe997c71eab82be27cb554b92ad3fb96edf",
                "status": "modified"
            }
        ],
        "message": "NPE if jmeter.httpclient.strict_rfc2616=true and location is not absolute\nBugzilla Id: 56222\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1574701 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 419a6ad523522f4c114b2dc4d669a3e62645653f",
        "parent": "https://github.com/apache/jmeter/commit/fe1d3362cc9c4f4ecb1c9c3fa3b61422d8b5ca76",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_f62911e": {
        "bug_id": "jmeter_f62911e",
        "commit": "https://github.com/apache/jmeter/commit/f62911e5f18c89aa8d27c945645ab9a5243e0b87",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/jmeter/blob/f62911e5f18c89aa8d27c945645ab9a5243e0b87/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/RegexFunction.java?ref=f62911e5f18c89aa8d27c945645ab9a5243e0b87",
                "deletions": 10,
                "filename": "src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "patch": "@@ -30,15 +30,15 @@\n import org.apache.jmeter.samplers.Sampler;\n import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.Logger;\n import org.apache.oro.text.MalformedCachePatternException;\n import org.apache.oro.text.regex.MatchResult;\n import org.apache.oro.text.regex.Pattern;\n import org.apache.oro.text.regex.PatternMatcher;\n import org.apache.oro.text.regex.PatternMatcherInput;\n import org.apache.oro.text.regex.Perl5Compiler;\n import org.apache.oro.text.regex.Util;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n /**\n  * Implements regular expression parsing of sample results and variables\n  * @since 1.X\n@@ -157,15 +157,17 @@ public String execute(SampleResult previousResult, Sampler currentSampler)\n             PatternMatcherInput input = new PatternMatcherInput(textToMatch);\n             while (matcher.contains(input, searchPattern)) {\n                 MatchResult match = matcher.getMatch();\n-                collectAllMatches.add(match);\n+                if(match != null) {\n+                    collectAllMatches.add(match);\n+                } \n             }\n         } finally {\n             if (name.length() > 0){\n                 vars.put(name + \"_matchNr\", Integer.toString(collectAllMatches.size())); //$NON-NLS-1$\n             }\n         }\n \n-        if (collectAllMatches.size() == 0) {\n+        if (collectAllMatches.isEmpty()) {\n             return defaultValue;\n         }\n \n@@ -188,25 +190,24 @@ public String execute(SampleResult previousResult, Sampler currentSampler)\n         } else {\n             try {\n                 int index = Integer.parseInt(valueIndex) - 1;\n+                if(index >= collectAllMatches.size()) {\n+                    return defaultValue;\n+                }\n                 MatchResult result = collectAllMatches.get(index);\n                 return generateResult(result, name, tmplt, vars);\n             } catch (NumberFormatException e) {\n                 float ratio = Float.parseFloat(valueIndex);\n                 MatchResult result = collectAllMatches\n                         .get((int) (collectAllMatches.size() * ratio + .5) - 1);\n                 return generateResult(result, name, tmplt, vars);\n-            } catch (IndexOutOfBoundsException e) {\n-                return defaultValue;\n             }\n         }\n \n     }\n \n     private void saveGroups(MatchResult result, String namep, JMeterVariables vars) {\n-        if (result != null) {\n-            for (int x = 0; x < result.groups(); x++) {\n-                vars.put(namep + \"_g\" + x, result.group(x)); //$NON-NLS-1$\n-            }\n+        for (int x = 0; x < result.groups(); x++) {\n+            vars.put(namep + \"_g\" + x, result.group(x)); //$NON-NLS-1$\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/f62911e5f18c89aa8d27c945645ab9a5243e0b87/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "sha": "94603e471451b34d4f2b493184f61e6628f74be3",
                "status": "modified"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/jmeter/blob/f62911e5f18c89aa8d27c945645ab9a5243e0b87/test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestRegexFunction.java?ref=f62911e5f18c89aa8d27c945645ab9a5243e0b87",
                "deletions": 0,
                "filename": "test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "patch": "@@ -350,6 +350,52 @@ public void testVariableExtraction3() throws Exception {\n             String match = variable.execute(result, null);\n             assertEquals(\"_pinposition2\", match);\n         }\n+        \n+        @Test\n+        public void testExtractionIndexTooHigh() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<value field=\\\"(pinposition\\\\d+)\\\">(\\\\d+)</value>\"));\n+            params.add(new CompoundVariable(\"_$1$\"));\n+            params.add(new CompoundVariable(\"10\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"No Value Found\", match);\n+        }\n+        \n+        @Test\n+        public void testRandomExtraction() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<company-xmlext-query-ret>(.+?)</company-xmlext-query-ret>\"));\n+            params.add(new CompoundVariable(\"$1$\"));\n+            params.add(new CompoundVariable(\"RAND\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"<row>\" + \"<value field=\\\"RetCode\\\">\" + \"LIS_OK</value><value\"\n+                    + \" field=\\\"RetCodeExtension\\\"></value>\" + \"<value field=\\\"alias\\\"></value><value\"\n+                    + \" field=\\\"positioncount\\\"></value>\" + \"<value field=\\\"invalidpincount\\\">0</value><value\"\n+                    + \" field=\\\"pinposition1\\\">1</value><value\" + \" field=\\\"pinpositionvalue1\\\"></value><value\"\n+                    + \" field=\\\"pinposition2\\\">5</value><value\" + \" field=\\\"pinpositionvalue2\\\"></value><value\"\n+                    + \" field=\\\"pinposition3\\\">6</value><value\" + \" field=\\\"pinpositionvalue3\\\"></value>\"\n+                    + \"</row>\", match);\n+        }\n+        \n+        \n+        @Test(expected=NumberFormatException.class)\n+        public void testExtractionIndexNotNumeric() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<value field=\\\"(pinposition\\\\d+)\\\">(\\\\d+)</value>\"));\n+            params.add(new CompoundVariable(\"_$1$\"));\n+            params.add(new CompoundVariable(\"0.333a\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"No Value Found\", match);\n+        }\n \n         @Test\n         public void testVariableExtraction4() throws Exception {",
                "raw_url": "https://github.com/apache/jmeter/raw/f62911e5f18c89aa8d27c945645ab9a5243e0b87/test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "sha": "b1cfd9eb415ee92ab30229fbdb699aa4dd67c1f4",
                "status": "modified"
            }
        ],
        "message": "Fix sonar error on possible NPE by enforcing collection does not contain null values\nAdd Tests \n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1785447 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6dca17fa9be340e6fa8fb4c538c28a34d2587249",
        "parent": "https://github.com/apache/jmeter/commit/e8595cb202799a9f0929741ba81f9a3f68f7cc01",
        "patched_files": [
            "RegexFunction.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestRegexFunction.java"
        ]
    },
    "jmeter_f9eff90": {
        "bug_id": "jmeter_f9eff90",
        "commit": "https://github.com/apache/jmeter/commit/f9eff90317ab5876f6bbde9fde853584bc6875bc",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/jmeter/blob/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=f9eff90317ab5876f6bbde9fde853584bc6875bc",
                "deletions": 26,
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "patch": "@@ -180,7 +180,10 @@\n     \n     static final String CONTEXT_ATTRIBUTE_SAMPLER_RESULT = \"__jmeter.S_R__\"; //$NON-NLS-1$\n     \n-    private static final String CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN = \"__jmeter.H_T__\";\n+    /**\n+     * Holds data used by HTTP request if Embedded resource download is enabled\n+     */\n+    private static final String CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE = \"__jmeter.H_T__\";\n \n     private static final String CONTEXT_ATTRIBUTE_CLIENT_KEY = \"__jmeter.C_K__\";\n \n@@ -548,13 +551,8 @@ protected HTTPSampleResult sample(URL url, String method,\n         HttpClientKey key = createHttpClientKey(url);\n         MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple;\n         try {\n-            httpClient = setupClient(key, jMeterVariables, clientContext);\n-            // Cache triple for further use\n-            Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> \n-                mapHttpClientPerHttpClientKey =\n-                    HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n-            triple =\n-                    mapHttpClientPerHttpClientKey.get(key);\n+            triple = setupClient(key, jMeterVariables, clientContext);\n+            httpClient = triple.getLeft();\n             URI uri = url.toURI();\n             httpRequest = createHttpRequest(uri, method, areFollowingRedirect);\n             setupRequest(url, httpRequest, res); // can throw IOException\n@@ -695,7 +693,7 @@ protected HTTPSampleResult sample(URL url, String method,\n         } finally {\n             JOrphanUtils.closeQuietly(httpResponse);\n             currentRequest = null;\n-            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n         }\n         return res;\n     }\n@@ -708,21 +706,19 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        if (triple != null) {\n-            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n-        }\n+        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n     }\n \n     /**\n      * Store in localContext Proxy auth state of triple \n-     * @param triple {@link MutableTriple}\n+     * @param triple {@link MutableTriple} May be null if first request\n      * @param localContext {@link HttpContext}\n      */\n-    private void setupProxyAuth(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n+    private void setupProxyAuthState(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n                                 HttpContext localContext) {\n         if (triple != null) {\n-            AuthState proxy = triple.getMiddle();\n-            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxy);\n+            AuthState proxyAuthState = triple.getMiddle();\n+            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxyAuthState);\n         }\n     }\n \n@@ -993,22 +989,27 @@ public String toString() {\n         }\n     }\n \n-    private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n+    private MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n             HttpClientContext clientContext) throws GeneralSecurityException {\n         Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey =\n                 HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n         clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY, key);\n         CloseableHttpClient httpClient = null;\n+        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = null;\n         boolean concurrentDwn = this.testElement.isConcurrentDwn();\n+        Map<String, Object> samplerContext = JMeterContextService.getContext().getSamplerContext();\n         if(concurrentDwn) {\n-            httpClient = (CloseableHttpClient) JMeterContextService.getContext().getSamplerContext().get(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            triple = (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>) \n+                    samplerContext.get(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n+        }\n+        if (triple == null) {\n+            triple = mapHttpClientPerHttpClientKey.get(key);\n         }\n-        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = \n-                mapHttpClientPerHttpClientKey.get(key);\n-        if (httpClient == null) {\n-            httpClient = triple != null ? triple.getLeft() : null;\n+        \n+        if(triple != null) {\n+            httpClient = triple.getLeft();\n         }\n-        setupProxyAuth(triple, clientContext);\n+        setupProxyAuthState(triple, clientContext);\n         resetStateIfNeeded(triple, jMeterVariables, clientContext, mapHttpClientPerHttpClientKey);\n \n         if (httpClient == null) { // One-time init for this client\n@@ -1096,17 +1097,18 @@ private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMete\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Created new HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)), key);\n             }\n-            mapHttpClientPerHttpClientKey.put(key, MutableTriple.of(httpClient, null, pHCCM)); // save the agent for next time round\n+            triple = MutableTriple.of(httpClient, null, pHCCM);\n+            mapHttpClientPerHttpClientKey.put(key, triple); // save the agent for next time round\n         } else {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Reusing the HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)),key);\n             }\n         }\n \n         if(concurrentDwn) {\n-            JMeterContextService.getContext().getSamplerContext().put(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN, httpClient);\n+            samplerContext.put(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE, triple);\n         }\n-        return httpClient;\n+        return triple;\n     }\n \n     protected AuthenticationStrategy getProxyAuthStrategy() {",
                "raw_url": "https://github.com/apache/jmeter/raw/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "sha": "843c47112d585ee0c6182ac389f6356d22c515fa",
                "status": "modified"
            }
        ],
        "message": "Bug 62672 - HTTP Request send double requests when configure proxy with authentication\n\nFix NPE\nBugzilla Id: 62672\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1860065 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b0fe4cdcb2a0485abb539973fce2db1aabfd53b5",
        "parent": "https://github.com/apache/jmeter/commit/18c6c45a7a28b5a8328be5699101773953b7ffe6",
        "patched_files": [
            "HTTPHC4Impl.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestHTTPHC4Impl.java"
        ]
    },
    "jmeter_fa39c74": {
        "bug_id": "jmeter_fa39c74",
        "commit": "https://github.com/apache/jmeter/commit/fa39c74107de23696a3ac4489760ca3000870b18",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "deletions": 0,
                "filename": "src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n \n+import org.apache.commons.lang3.Validate;\n import org.apache.jorphan.util.JOrphanUtils;\n \n /**",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "sha": "6497821a444e121a46591a61d2d4c61563b44f3c",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "deletions": 22,
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "patch": "@@ -114,29 +114,27 @@ public void writeHeader() {\n \n     @Override\n     public long write(Sample sample) {\n-        try {\n-            row.setLength(0);\n-            char[] specials = new char[] { separator,\n-                    CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n-            for (int i = 0; i < columnCount; i++) {\n-                String data = sample.getString(i);\n-                row.append(CSVSaveService.quoteDelimiters(data, specials))\n-                        .append(separator);\n-            }\n-            int rowLength = row.length() - 1;\n-            row.setLength(rowLength);\n-            writer.println(row.toString());\n-            sampleCount++;\n-        } catch (NullPointerException npe) {\n-            if (writer == null) {\n-                throw new IllegalStateException(\n-                        \"No writer set ! Call setWriter() first !\", npe);\n-            } else if (sample == null) {\n-                throw new ArgumentNullException(\"sample\");\n-            } else {\n-                throw npe;\n-            }\n+        if (sample == null) {\n+            throw new ArgumentNullException(\"sample\");\n+        }\n+        if (writer == null) {\n+            throw new IllegalStateException(\n+                    \"No writer set! Call setWriter() first!\");\n         }\n+\n+        row.setLength(0);\n+        char[] specials = new char[] { separator,\n+                CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n+        for (int i = 0; i < columnCount; i++) {\n+            String data = sample.getString(i);\n+            row.append(CSVSaveService.quoteDelimiters(data, specials))\n+                    .append(separator);\n+        }\n+        int rowLength = row.length() - 1;\n+        row.setLength(rowLength);\n+        writer.println(row.toString());\n+        sampleCount++;\n+\n         return sampleCount;\n     }\n ",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "sha": "855d0567d3bac714454a4694f0421e7e45e7279b",
                "status": "modified"
            }
        ],
        "message": "Check for not-null first, instead of waiting for the npe to happen. After\nthat, there is no need to catch a npe just to throw it again.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719793 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4a799f6d91546bec4e3826e1cc4f7e4c80d8e607",
        "parent": "https://github.com/apache/jmeter/commit/e2fbe6671c0a507266efbf4bc8888d656c479a33",
        "patched_files": [
            "CsvSampleWriter.java"
        ],
        "repo": "jmeter",
        "unit_tests": [
            "TestCsvSampleWriter.java"
        ]
    }
}