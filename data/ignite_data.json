[
    {
        "repo": "ignite",
        "message": "IGNITE-12101 Fixed NullPointerException when IgniteQueue.removeAll is called. - Fixes #7266.\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811",
        "parent": "https://github.com/apache/ignite/commit/f0b88f676d0d15e99ebc0eb715d229a60c197c96",
        "bug_id": "ignite_1",
        "file": [
            {
                "sha": "e7bde03c3e1e78d1df9956b0d52d103d3f107b70",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java?ref=1fbc284fd0c89e6aaedf76bd2df3581cf85a1811",
                "patch": "@@ -1045,13 +1045,13 @@ public RemoveProcessor(IgniteUuid id, Long idx) {\n         /** {@inheritDoc} */\n         @Override public void writeExternal(ObjectOutput out) throws IOException {\n             U.writeGridUuid(out, id);\n-            out.writeLong(idx);\n+            out.writeObject(idx);\n         }\n \n         /** {@inheritDoc} */\n         @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n             id = U.readGridUuid(in);\n-            idx = in.readLong();\n+            idx = (Long)in.readObject();\n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "1541510f89ef128fd62d770005cc81b69e0a2cfb",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/datastructures/GridCacheReplicatedQueueRemoveSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/test/java/org/apache/ignite/internal/processors/datastructures/GridCacheReplicatedQueueRemoveSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/test/java/org/apache/ignite/internal/processors/datastructures/GridCacheReplicatedQueueRemoveSelfTest.java",
                "status": "added",
                "changes": 144,
                "additions": 144,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/datastructures/GridCacheReplicatedQueueRemoveSelfTest.java?ref=1fbc284fd0c89e6aaedf76bd2df3581cf85a1811",
                "patch": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.datastructures;\n+\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.ignite.IgniteQueue;\n+import org.apache.ignite.cache.CacheAtomicityMode;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.configuration.CollectionConfiguration;\n+import org.apache.ignite.internal.processors.cache.CacheInvokeEntry;\n+import org.apache.ignite.internal.processors.cache.GridCacheContext;\n+import org.apache.ignite.internal.processors.cache.KeyCacheObjectImpl;\n+import org.apache.ignite.internal.processors.cache.datastructures.IgniteCollectionAbstractTest;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheEntry;\n+import org.apache.ignite.internal.util.io.GridByteArrayInputStream;\n+import org.apache.ignite.internal.util.io.GridByteArrayOutputStream;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n+import static org.apache.ignite.cache.CacheMode.REPLICATED;\n+\n+/**\n+ * Tests for Ignite Queue remove method.\n+ */\n+public class GridCacheReplicatedQueueRemoveSelfTest extends IgniteCollectionAbstractTest {\n+    /** */\n+    public static final int CACHE_SIZE = 1_000;\n+\n+    /** */\n+    public static final int THREADS_CNT = 8;\n+\n+    /** {@inheritDoc} */\n+    @Override protected int gridCount() {\n+        return 2;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected CacheMode collectionCacheMode() {\n+        return REPLICATED;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected CacheAtomicityMode collectionCacheAtomicityMode() {\n+        return TRANSACTIONAL;\n+    }\n+\n+    /**\n+     * This a unit test of Ignite queue's RemoveProcessor process() method.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testQueueRemovalProcessor() throws Exception {\n+        GridCacheContext cctx = grid(0).context().cache().cache(\"ignite-sys-cache\").context();\n+\n+        IgniteUuid id = IgniteUuid.randomUuid();\n+\n+        CacheInvokeEntry entry = new CacheInvokeEntry<>(null, null, null, false,\n+            new GridDhtCacheEntry(cctx, null,\n+                new KeyCacheObjectImpl(1, BigInteger.valueOf(1).toByteArray(), 1)));\n+\n+        entry.setValue(new GridCacheQueueHeader(\n+            id,\n+            2147483647,\n+            false,\n+            0L,\n+            10000L,\n+            Collections.singleton(1L)));\n+\n+        GridCacheQueueAdapter.RemoveProcessor rp = new GridCacheQueueAdapter.RemoveProcessor(id, 1L);\n+\n+        rp.process(entry);\n+\n+        GridCacheQueueAdapter.RemoveProcessor externalRP = new GridCacheQueueAdapter.RemoveProcessor();\n+\n+        GridByteArrayOutputStream output = new GridByteArrayOutputStream();\n+\n+        rp.writeExternal(new ObjectOutputStream(output));\n+\n+        externalRP.readExternal(new ObjectInputStream(new GridByteArrayInputStream(output.toByteArray())));\n+\n+        assertEquals(id, GridTestUtils.getFieldValue(externalRP, \"id\"));\n+\n+        // idx should be null, cause entry was already removed, see GridCacheQueueAdapter.RemoveProcessor.code\n+        // for more details.\n+        assertNull(GridTestUtils.getFieldValue(externalRP, \"idx\"));\n+    }\n+\n+    /**\n+     * Removes buckets of data from the queue in many threads at the same time.\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testQueueRemoval() throws Exception {\n+        IgniteQueue queue = grid(0).queue(\"SomeQueue\", 0,\n+            new CollectionConfiguration().setCollocated(true).setCacheMode(REPLICATED).setAtomicityMode(TRANSACTIONAL));\n+\n+        // Populate queue with some data.\n+        for (int i = 0; i < CACHE_SIZE; i++)\n+            queue.add(i);\n+\n+        CountDownLatch latch = new CountDownLatch(THREADS_CNT);\n+\n+        // Remove buckets of data from the queue in many threads at the same time.\n+        GridTestUtils.runMultiThreaded(() -> {\n+            ArrayList dataToRmv = new ArrayList();\n+\n+            for (int i = 0; i < CACHE_SIZE / 10; i++)\n+                dataToRmv.add(ThreadLocalRandom.current().nextInt(CACHE_SIZE));\n+\n+            latch.countDown();\n+            latch.await();\n+\n+            queue.removeAll(dataToRmv);\n+\n+            return null;\n+        }, THREADS_CNT, \"queue-test-worker\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "42216cae8c3c758900acdbacb8aeec691fb1c3c3",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheDataStructuresSelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheDataStructuresSelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/1fbc284fd0c89e6aaedf76bd2df3581cf85a1811/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheDataStructuresSelfTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheDataStructuresSelfTestSuite.java?ref=1fbc284fd0c89e6aaedf76bd2df3581cf85a1811",
                "patch": "@@ -91,6 +91,7 @@\n import org.apache.ignite.internal.processors.cache.datastructures.replicated.IgniteReplicatedLockSelfTest;\n import org.apache.ignite.internal.processors.cache.datastructures.replicated.IgniteReplicatedSemaphoreSelfTest;\n import org.apache.ignite.internal.processors.cache.distributed.replicated.IgniteCacheAtomicReplicatedNodeRestartSelfTest;\n+import org.apache.ignite.internal.processors.datastructures.GridCacheReplicatedQueueRemoveSelfTest;\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n \n@@ -124,6 +125,7 @@\n     IgniteReplicatedSemaphoreSelfTest.class,\n     IgniteReplicatedLockSelfTest.class,\n     IgniteCacheAtomicReplicatedNodeRestartSelfTest.class,\n+    GridCacheReplicatedQueueRemoveSelfTest.class,\n \n     GridCachePartitionedSequenceApiSelfTest.class,\n     GridCachePartitionedSequenceMultiNodeSelfTest.class,",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12013 NullPointerException is thrown by ExchangeLatchManager during cache creation - Fixes #7335.\n\nSigned-off-by: Ivan Rakov <ivan.glukos@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/e2c597fff12192f736738569e244d0aee96b6e97",
        "parent": "https://github.com/apache/ignite/commit/906fa9eed60c45954559c02fee5214dd43a53d7c",
        "bug_id": "ignite_2",
        "file": [
            {
                "sha": "8cc317a8d86444d347a1347ff66a306a4b11c2d8",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -183,9 +183,6 @@\n     /** */\n     public static final String NODES_SYS_VIEW_DESC = \"Cluster nodes\";\n \n-    /** Discovery cached history size. */\n-    private static final int DISCOVERY_HISTORY_SIZE = getInteger(IGNITE_DISCOVERY_HISTORY_SIZE, 500);\n-\n     /** Predicate filtering out daemon nodes. */\n     private static final IgnitePredicate<ClusterNode> FILTER_NOT_DAEMON = new P1<ClusterNode>() {\n         @Override public boolean apply(ClusterNode n) {\n@@ -200,6 +197,9 @@\n         }\n     };\n \n+    /** Discovery cached history size. */\n+    private final int DISCOVERY_HISTORY_SIZE = getInteger(IGNITE_DISCOVERY_HISTORY_SIZE, 500);\n+\n     /** */\n     private final Object discoEvtMux = new Object();\n ",
                "deletions": 3
            },
            {
                "sha": "9297ae89e3dcf597dd766f98975f193b8dbffe87",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -355,7 +355,7 @@ public IdealAffinityAssignment calculate(\n                 assignment = IdealAffinityAssignment.create(\n                     topVer,\n                     sorted,\n-                    baselineAssignmentWithoutOfflineNodes(topVer)\n+                    baselineAssignmentWithoutOfflineNodes(discoCache)\n                 );\n             }\n             else if (skipCalculation)\n@@ -367,7 +367,7 @@ else if (hasBaseline) {\n                 assignment = IdealAffinityAssignment.create(\n                     topVer,\n                     sorted,\n-                    baselineAssignmentWithoutOfflineNodes(topVer)\n+                    baselineAssignmentWithoutOfflineNodes(discoCache)\n                 );\n             }\n             else {\n@@ -388,7 +388,7 @@ else if (hasBaseline) {\n \n                 assignment = IdealAffinityAssignment.createWithPreservedPrimaries(\n                     topVer,\n-                    baselineAssignmentWithoutOfflineNodes(topVer),\n+                    baselineAssignmentWithoutOfflineNodes(discoCache),\n                     baselineAssignment\n                 );\n             }\n@@ -455,16 +455,14 @@ private void recalculateBaselineAssignment(\n     }\n \n     /**\n-     * @param topVer Topology version.\n+     * @param disco Discovery history.\n      * @return Baseline assignment with filtered out offline nodes.\n      */\n-    private List<List<ClusterNode>> baselineAssignmentWithoutOfflineNodes(AffinityTopologyVersion topVer) {\n+    private List<List<ClusterNode>> baselineAssignmentWithoutOfflineNodes(DiscoCache disco) {\n         Map<Object, ClusterNode> alives = new HashMap<>();\n \n-        for (ClusterNode node : ctx.discovery().nodes(topVer)) {\n-            if (!node.isClient() && !node.isDaemon())\n-                alives.put(node.consistentId(), node);\n-        }\n+        for (ClusterNode node : disco.serverNodes())\n+            alives.put(node.consistentId(), node);\n \n         List<List<ClusterNode>> assignment = baselineAssignment.assignment();\n ",
                "deletions": 9
            },
            {
                "sha": "28bf6dc214c91fb06eb065787e9bcd74e437b242",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -1508,8 +1508,8 @@ private void distributedExchange() throws IgniteCheckedException {\n         timeBag.finishGlobalStage(\"WAL history reservation\");\n \n         // Skipping wait on local join is available when all cluster nodes have the same protocol.\n-        boolean skipWaitOnLocalJoin = cctx.exchange().latch().canSkipJoiningNodes(initialVersion())\n-            && localJoinExchange();\n+        boolean skipWaitOnLocalJoin = localJoinExchange()\n+            && cctx.exchange().latch().canSkipJoiningNodes(initialVersion());\n \n         if (context().exchangeFreeSwitch())\n             waitPartitionRelease(true, false);",
                "deletions": 2
            },
            {
                "sha": "53b576ac8cb7cc4597e19259fb781d01de9205f3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -275,6 +275,7 @@ public void dropLatch(String id, AffinityTopologyVersion topVer) {\n      *\n      * @param topVer Topology version.\n      * @return Collection of nodes with at least one cache configured.\n+     * @throws IgniteException If nodes for the given {@code topVer} cannot be found in the discovery history.\n      */\n     private Collection<ClusterNode> aliveNodesForTopologyVer(AffinityTopologyVersion topVer) {\n         if (topVer == AffinityTopologyVersion.NONE)\n@@ -286,9 +287,9 @@ public void dropLatch(String id, AffinityTopologyVersion topVer) {\n                 return histNodes.stream().filter(n -> !n.isClient() && !n.isDaemon() && discovery.alive(n))\n                     .collect(Collectors.toList());\n             else\n-                throw new IgniteException(\"Topology \" + topVer + \" not found in discovery history \"\n-                    + \"; consider increasing IGNITE_DISCOVERY_HISTORY_SIZE property. Current value is \"\n-                    + IgniteSystemProperties.getInteger(IgniteSystemProperties.IGNITE_DISCOVERY_HISTORY_SIZE, -1));\n+                throw new IgniteException(\"Topology \" + topVer + \" not found in discovery history. \"\n+                        + \"Consider increasing IGNITE_DISCOVERY_HISTORY_SIZE property. Current value is \"\n+                        + IgniteSystemProperties.getInteger(IgniteSystemProperties.IGNITE_DISCOVERY_HISTORY_SIZE, -1));\n         }\n     }\n \n@@ -351,11 +352,10 @@ public void dropLatch(String id, AffinityTopologyVersion topVer) {\n      * Checks that latch manager can use V2 protocol and skip joining nodes from latch participants.\n      *\n      * @param topVer Topology version.\n+     * @throws IgniteException If nodes for the given {@code topVer} cannot be found in the discovery history.\n      */\n     public boolean canSkipJoiningNodes(AffinityTopologyVersion topVer) {\n-        Collection<ClusterNode> applicableNodes = topVer.equals(AffinityTopologyVersion.NONE)\n-            ? discovery.aliveServerNodes()\n-            : discovery.topology(topVer.topologyVersion());\n+        Collection<ClusterNode> applicableNodes = aliveNodesForTopologyVer(topVer);\n \n         return applicableNodes.stream()\n             .allMatch(node -> node.version().compareTo(PROTOCOL_V2_VERSION_SINCE) >= 0);",
                "deletions": 6
            },
            {
                "sha": "71cd842f7d9af24bc348fa890602d036075ef890",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteExchangeLatchManagerDiscoHistoryTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteExchangeLatchManagerDiscoHistoryTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteExchangeLatchManagerDiscoHistoryTest.java",
                "status": "added",
                "changes": 293,
                "additions": 293,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteExchangeLatchManagerDiscoHistoryTest.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -0,0 +1,293 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.datastructures;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.AbstractFailureHandler;\n+import org.apache.ignite.failure.FailureContext;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.IgnitionEx;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.PartitionsExchangeAware;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.latch.ExchangeLatchManager;\n+import org.apache.ignite.internal.processors.metastorage.DistributedMetastorageLifecycleListener;\n+import org.apache.ignite.internal.processors.metastorage.ReadableDistributedMetaStorage;\n+import org.apache.ignite.internal.util.typedef.X;\n+import org.apache.ignite.lifecycle.LifecycleBean;\n+import org.apache.ignite.lifecycle.LifecycleEventType;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.TestTcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.WithSystemProperty;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.IgniteSystemProperties.IGNITE_DISCOVERY_HISTORY_SIZE;\n+\n+/**\n+ * Test {@link ExchangeLatchManager} throws {@link IgniteException} with appropriate message when topology history\n+ * cannot be obtained.\n+ */\n+public class IgniteExchangeLatchManagerDiscoHistoryTest extends GridCommonAbstractTest {\n+    /** Topology history size. */\n+    private static final int TOPOLOGY_HISTORY_SIZE = 2;\n+\n+    /** Disco cache size. */\n+    private static final String DISCO_HISTORY_SIZE = \"2\";\n+\n+    /** Timeout in millis. */\n+    private static final long DEFAULT_TIMEOUT = 30_000;\n+\n+    /** Lifecycle bean that is used to register required listeners. */\n+    private LifecycleBean lifecycleBean;\n+\n+    /** Flag indicates that a node, that is starting, should have short topology history. */\n+    private boolean victim;\n+\n+    /** Discovery SPI that is used by the node with short topology history. */\n+    private CustomTcpDiscoverySpi disco;\n+\n+    /** Failure context. */\n+    private final AtomicReference<FailureContext> cpFailureCtx = new AtomicReference<>();\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        TcpDiscoveryIpFinder ipFinder = ((TcpDiscoverySpi)cfg.getDiscoverySpi()).getIpFinder();\n+\n+        int topHistSize = victim? TOPOLOGY_HISTORY_SIZE: TcpDiscoverySpi.DFLT_TOP_HISTORY_SIZE;\n+\n+        CustomTcpDiscoverySpi discoSpi = new CustomTcpDiscoverySpi(topHistSize, ipFinder);\n+\n+        cfg.setDiscoverySpi(discoSpi);\n+\n+        if (victim) {\n+            cfg.setFailureHandler(new AbstractFailureHandler() {\n+                /** {@inheritDoc} */\n+                @Override protected boolean handle(Ignite ignite, FailureContext failureCtx) {\n+                    cpFailureCtx.compareAndSet(null, failureCtx);\n+\n+                    // Invalidate kernel context.\n+                    return true;\n+                }\n+            });\n+\n+            cfg.setLifecycleBeans(lifecycleBean);\n+\n+            disco = discoSpi;\n+        }\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Prepares test for execution.\n+     */\n+    @Before\n+    public void startup() {\n+        shutdown();\n+    }\n+\n+    /**\n+     * Cleans after the test.\n+     */\n+    @After\n+    public void shutdown() {\n+        lifecycleBean = null;\n+\n+        victim = false;\n+\n+        cpFailureCtx.set(null);\n+\n+        disco = null;\n+\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @WithSystemProperty(key = IGNITE_DISCOVERY_HISTORY_SIZE, value = DISCO_HISTORY_SIZE)\n+    public void testProperException() throws Exception {\n+        final IgniteEx crd = startGrid(0);\n+\n+        final CountDownLatch exchangeLatch = new CountDownLatch(1);\n+\n+        final CountDownLatch startSrvsLatch = new CountDownLatch(1);\n+\n+        final AtomicReference<Exception> err = new AtomicReference<>();\n+\n+        // Lifecycle bean that is used to register PartitionsExchangeAware listener.\n+        lifecycleBean = new LifecycleBean() {\n+            /** Ignite instance. */\n+            @IgniteInstanceResource\n+            IgniteEx ignite;\n+\n+            /** {@inheritDoc} */\n+            @Override public void onLifecycleEvent(LifecycleEventType evt) throws IgniteException {\n+                if (evt == LifecycleEventType.BEFORE_NODE_START) {\n+                    // The goal is registering PartitionsExchangeAware listener before the discovery manager is started.\n+                    ignite.context().internalSubscriptionProcessor()\n+                        .registerDistributedMetastorageListener(new DistributedMetastorageLifecycleListener() {\n+                            @Override public void onReadyForRead(ReadableDistributedMetaStorage metastorage) {\n+                                ignite.context().cache().context().exchange()\n+                                    .registerExchangeAwareComponent(new PartitionsExchangeAware() {\n+                                        /** {@inheritDoc} */\n+                                        @Override public void onInitBeforeTopologyLock(GridDhtPartitionsExchangeFuture fut) {\n+                                            try {\n+                                                // Let's start nodes.\n+                                                startSrvsLatch.countDown();\n+\n+                                                // Blocks the initial exchange and waits for other nodes.\n+                                                exchangeLatch.await(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);\n+                                            }\n+                                            catch (Exception e) {\n+                                                err.compareAndSet(null, e);\n+                                            }\n+                                        }\n+                                });\n+                            }\n+                    });\n+                }\n+            }\n+        };\n+\n+        // Start server node with short topology history.\n+        victim = true;\n+\n+        GridTestUtils.runAsync(() ->startGrid(1));\n+\n+        // Waits for the initial exchange.\n+        startSrvsLatch.await(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+        victim = false;\n+\n+        lifecycleBean = null;\n+\n+        List<IgniteInternalFuture> srvFuts = new ArrayList<>(TOPOLOGY_HISTORY_SIZE);\n+\n+        try {\n+            // Major topology version that is corresponding to the start of the node with short topology history.\n+            final long topVer = 2;\n+\n+            // Starting server nodes to exhaust the topology history.\n+            for (int i = 2; i < 3 * TOPOLOGY_HISTORY_SIZE && !disco.isEmptyTopologyHistory(topVer); ++i) {\n+                final int currNodeIdx = i;\n+\n+                final int joinedNodesCnt = disco.totalJoinedNodes();\n+\n+                srvFuts.add(GridTestUtils.runAsync(() -> startGrid(currNodeIdx)));\n+\n+                assertTrue(\"Failed to wait for a new server node [joinedNodesCnt=\" + joinedNodesCnt + \"]\",\n+                    GridTestUtils.waitForCondition(\n+                        () -> disco.totalJoinedNodes() >= (joinedNodesCnt + 1), DEFAULT_TIMEOUT));\n+            }\n+\n+            assertTrue(\n+                \"Disco cache history is not empty for the topology [majorTopVer=\" + topVer + ']',\n+                disco.isEmptyTopologyHistory(topVer));\n+\n+            // Let's continue the ongoing exchange.\n+            exchangeLatch.countDown();\n+\n+            boolean failureHnd = GridTestUtils.waitForCondition(() -> cpFailureCtx.get() != null, DEFAULT_TIMEOUT);\n+\n+            assertNull(\n+                \"Unexpected exception (probably, the topology history still exists [err=\" + err + ']',\n+                err.get());\n+\n+            assertTrue(\"Failure handler was not triggered.\", failureHnd);\n+\n+            // Check that IgniteException was thrown instead of NullPointerException.\n+            assertTrue(\n+                \"IgniteException must be thrown.\",\n+                X.hasCause(cpFailureCtx.get().error(), IgniteException.class));\n+\n+            // Check that message contains a hint to fix the issue.\n+            GridTestUtils.assertContains(\n+                log,\n+                cpFailureCtx.get().error().getMessage(),\n+                \"Consider increasing IGNITE_DISCOVERY_HISTORY_SIZE property. Current value is \" + DISCO_HISTORY_SIZE);\n+        }\n+        finally {\n+            IgnitionEx.stop(getTestIgniteInstanceName(1), true, true);\n+\n+            srvFuts.forEach(f -> {\n+                try {\n+                    f.get(DEFAULT_TIMEOUT);\n+                }\n+                catch (IgniteCheckedException e) {\n+                    err.compareAndSet(null, e);\n+                }\n+            });\n+        }\n+\n+        assertNull(\"Unexpected exception [err=\" + err.get() + ']', err.get());\n+    }\n+\n+    /**\n+     * Custom discovery SPI that allows specifying a short topology history for testing purposes.\n+     */\n+    private static class CustomTcpDiscoverySpi extends TestTcpDiscoverySpi {\n+        /**\n+         * Creates a new instance of discovery spi with the given size of topology snapshots history.\n+         *\n+         * @param topHistSize Size of topology snapshots history.\n+         * @param ipFinder IP finder\n+         */\n+        CustomTcpDiscoverySpi(int topHistSize, TcpDiscoveryIpFinder ipFinder) {\n+            this.topHistSize = topHistSize;\n+\n+            setIpFinder(ipFinder);\n+        }\n+\n+        /**\n+         * Returns the number of joined nodes.\n+         *\n+         * @return Number of joined nodes.\n+         */\n+        int totalJoinedNodes() {\n+            return stats.joinedNodesCount();\n+        }\n+\n+        /**\n+         * Returns {@code true} if the given topology version is already removed from the history.\n+         *\n+         * @param topVer Major topology version.\n+         * @return {@code true} if the given topology version is already removed from the history.\n+         */\n+        boolean isEmptyTopologyHistory(long topVer) {\n+            return ((IgniteEx)ignite).context().discovery().topology(topVer) == null;\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "3db1f05cc7080cbb6e3cc255b487e8d81a61868b",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheMvccTestSuite6.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheMvccTestSuite6.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheMvccTestSuite6.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheMvccTestSuite6.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.ignite.internal.processors.cache.ReplicatedTransactionalOptimisticCacheGetsDistributionTest;\n import org.apache.ignite.internal.processors.cache.ReplicatedTransactionalPessimisticCacheGetsDistributionTest;\n import org.apache.ignite.internal.processors.cache.datastructures.IgniteExchangeLatchManagerCoordinatorFailTest;\n+import org.apache.ignite.internal.processors.cache.datastructures.IgniteExchangeLatchManagerDiscoHistoryTest;\n import org.apache.ignite.internal.processors.cache.distributed.CacheExchangeMergeTest;\n import org.apache.ignite.internal.processors.cache.distributed.CacheParallelStartTest;\n import org.apache.ignite.internal.processors.cache.distributed.ExchangeMergeStaleServerNodesTest;\n@@ -82,6 +83,7 @@\n         ignoredTests.add(CacheExchangeMergeTest.class);\n         ignoredTests.add(ExchangeMergeStaleServerNodesTest.class);\n         ignoredTests.add(IgniteExchangeLatchManagerCoordinatorFailTest.class);\n+        ignoredTests.add(IgniteExchangeLatchManagerDiscoHistoryTest.class);\n         ignoredTests.add(PartitionsExchangeCoordinatorFailoverTest.class);\n         ignoredTests.add(CacheParallelStartTest.class);\n         ignoredTests.add(IgniteCache150ClientsTest.class);",
                "deletions": 0
            },
            {
                "sha": "96c2f30836a25a175d35467297ade6defc9cea68",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "blob_url": "https://github.com/apache/ignite/blob/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "raw_url": "https://github.com/apache/ignite/raw/e2c597fff12192f736738569e244d0aee96b6e97/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java?ref=e2c597fff12192f736738569e244d0aee96b6e97",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.ignite.internal.processors.cache.ReplicatedTransactionalOptimisticCacheGetsDistributionTest;\n import org.apache.ignite.internal.processors.cache.ReplicatedTransactionalPessimisticCacheGetsDistributionTest;\n import org.apache.ignite.internal.processors.cache.datastructures.IgniteExchangeLatchManagerCoordinatorFailTest;\n+import org.apache.ignite.internal.processors.cache.datastructures.IgniteExchangeLatchManagerDiscoHistoryTest;\n import org.apache.ignite.internal.processors.cache.distributed.CacheExchangeMergeTest;\n import org.apache.ignite.internal.processors.cache.distributed.CacheParallelStartTest;\n import org.apache.ignite.internal.processors.cache.distributed.CachePartitionLossDetectionOnNodeLeftTest;\n@@ -127,6 +128,7 @@\n         GridTestUtils.addTestIfNeeded(suite, TxOptimisticOnPartitionExchangeTest.class, ignoredTests);\n \n         GridTestUtils.addTestIfNeeded(suite, IgniteExchangeLatchManagerCoordinatorFailTest.class, ignoredTests);\n+        GridTestUtils.addTestIfNeeded(suite, IgniteExchangeLatchManagerDiscoHistoryTest.class, ignoredTests);\n \n         GridTestUtils.addTestIfNeeded(suite, PartitionsExchangeCoordinatorFailoverTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, CacheTryLockMultithreadedTest.class, ignoredTests);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12580: NPE in GridMetricManager. (#7317)",
        "commit": "https://github.com/apache/ignite/commit/54a051b9621b433112ebfe27411fad36aadc416f",
        "parent": "https://github.com/apache/ignite/commit/a1b939a40bfa9be36aa94bb37696dcb0488c9ec4",
        "bug_id": "ignite_3",
        "file": [
            {
                "sha": "56886c0f37ba8eb6b67bdc16178a87c002f2cd22",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/metric/GridMetricManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/54a051b9621b433112ebfe27411fad36aadc416f/modules/core/src/main/java/org/apache/ignite/internal/processors/metric/GridMetricManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/54a051b9621b433112ebfe27411fad36aadc416f/modules/core/src/main/java/org/apache/ignite/internal/processors/metric/GridMetricManager.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/metric/GridMetricManager.java?ref=54a051b9621b433112ebfe27411fad36aadc416f",
                "patch": "@@ -386,14 +386,19 @@ public void remove(String regName) {\n \n         notifyListeners(mreg, metricRegRemoveLsnrs, log);\n \n+        DistributedMetaStorage metastorage0 = metastorage;\n+\n+        if (metastorage0 == null)\n+            return;\n+\n         try {\n             GridCompoundFuture opsFut = new GridCompoundFuture<>();\n \n             for (Metric m : mreg) {\n                 if (m instanceof HitRateMetric)\n-                    opsFut.add(metastorage.removeAsync(metricName(HITRATE_CFG_PREFIX, m.name())));\n+                    opsFut.add(metastorage0.removeAsync(metricName(HITRATE_CFG_PREFIX, m.name())));\n                 else if (m instanceof HistogramMetric)\n-                    opsFut.add(metastorage.removeAsync(metricName(HISTOGRAM_CFG_PREFIX, m.name())));\n+                    opsFut.add(metastorage0.removeAsync(metricName(HISTOGRAM_CFG_PREFIX, m.name())));\n             }\n \n             opsFut.markInitialized();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12124 Fixed possible NullPointerException/Error related to the cache stop with configured TTL\n\nSigned-off-by: Andrey Gura <agura@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/85cf73fb964152b1edd5baa730bcf9e34e761819",
        "parent": "https://github.com/apache/ignite/commit/669570906b1654b1a38a46f987fcede948f48f82",
        "bug_id": "ignite_4",
        "file": [
            {
                "sha": "2f1e5bcdb2645d3333819ccd281c239b4309c128",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=85cf73fb964152b1edd5baa730bcf9e34e761819",
                "patch": "@@ -2718,6 +2718,12 @@ private void processCacheStopRequestOnExchangeDone(ExchangeActions exchActions)\n \n                                 context().tm().rollbackTransactionsForStoppingCache(action.descriptor().cacheId());\n \n+                                // TTL manager has to be unregistered before the checkpointReadLock is acquired.\n+                                GridCacheAdapter<?, ?> cache = caches.get(action.request().cacheName());\n+\n+                                if (cache != null)\n+                                    cache.context().ttl().unregister();\n+\n                                 sharedCtx.database().checkpointReadLock();\n \n                                 try {",
                "deletions": 0
            },
            {
                "sha": "bd9b6756fd716fe271eebe480bd90837c9c072d3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedTtlCleanupManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedTtlCleanupManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedTtlCleanupManager.java",
                "status": "modified",
                "changes": 94,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedTtlCleanupManager.java?ref=85cf73fb964152b1edd5baa730bcf9e34e761819",
                "patch": "@@ -17,13 +17,15 @@\n \n package org.apache.ignite.internal.processors.cache;\n \n-import java.util.List;\n-import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.ReentrantLock;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.failure.FailureContext;\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n-import org.apache.ignite.internal.util.typedef.X;\n import org.apache.ignite.internal.NodeStoppingException;\n+import org.apache.ignite.internal.util.typedef.X;\n import org.apache.ignite.internal.util.typedef.internal.U;\n import org.apache.ignite.internal.util.worker.GridWorker;\n import org.apache.ignite.thread.IgniteThread;\n@@ -44,17 +46,15 @@\n     /** Cleanup worker. */\n     private CleanupWorker cleanupWorker;\n \n-    /** Mutex on worker thread creation. */\n-    private final Object mux = new Object();\n+    /** Lock on worker thread creation. */\n+    private final ReentrantLock lock = new ReentrantLock();\n \n-    /** List of registered ttl managers. */\n-    private List<GridCacheTtlManager> mgrs = new CopyOnWriteArrayList<>();\n+    /** Map of registered ttl managers, where the cache id is used as the key. */\n+    private final Map<Integer, GridCacheTtlManager> mgrs = new ConcurrentHashMap<>();\n \n     /** {@inheritDoc} */\n     @Override protected void onKernalStop0(boolean cancel) {\n-        synchronized (mux) {\n-            stopCleanupWorker();\n-        }\n+        stopCleanupWorker();\n     }\n \n     /**\n@@ -63,12 +63,10 @@\n      * @param mgr ttl manager of cache.\n      * */\n     public void register(GridCacheTtlManager mgr) {\n-        synchronized (mux) {\n-            if (cleanupWorker == null)\n-                startCleanupWorker();\n+        if (mgrs.isEmpty())\n+            startCleanupWorker();\n \n-            mgrs.add(mgr);\n-        }\n+        mgrs.put(mgr.context().cacheId(), mgr);\n     }\n \n     /**\n@@ -77,12 +75,10 @@ public void register(GridCacheTtlManager mgr) {\n      * @param mgr ttl manager of cache.\n      * */\n     public void unregister(GridCacheTtlManager mgr) {\n-        synchronized (mux) {\n-            mgrs.remove(mgr);\n+        mgrs.remove(mgr.context().cacheId());\n \n-            if (mgrs.isEmpty())\n-                stopCleanupWorker();\n-        }\n+        if (mgrs.isEmpty())\n+            stopCleanupWorker();\n     }\n \n     /**\n@@ -91,27 +87,51 @@ public void unregister(GridCacheTtlManager mgr) {\n     public boolean eagerTtlEnabled() {\n         assert cctx != null : \"Manager is not started\";\n \n-        return cleanupWorker != null;\n+        lock.lock();\n+\n+        try {\n+            return cleanupWorker != null;\n+        }\n+        finally {\n+            lock.unlock();\n+        }\n     }\n \n     /**\n      *\n      */\n     private void startCleanupWorker() {\n-        cleanupWorker = new CleanupWorker();\n+        lock.lock();\n \n-        new IgniteThread(cleanupWorker).start();\n+        try {\n+            if (cleanupWorker != null)\n+                return;\n+\n+            cleanupWorker = new CleanupWorker();\n+\n+            new IgniteThread(cleanupWorker).start();\n+        }\n+        finally {\n+            lock.unlock();\n+        }\n     }\n \n     /**\n      *\n      */\n     private void stopCleanupWorker() {\n-        if (null != cleanupWorker) {\n-            U.cancel(cleanupWorker);\n-            U.join(cleanupWorker, log);\n+        lock.lock();\n+\n+        try {\n+            if (null != cleanupWorker) {\n+                U.cancel(cleanupWorker);\n+                U.join(cleanupWorker, log);\n \n-            cleanupWorker = null;\n+                cleanupWorker = null;\n+            }\n+        }\n+        finally {\n+            lock.unlock();\n         }\n     }\n \n@@ -143,22 +163,32 @@ private void stopCleanupWorker() {\n \n                 assert !cctx.kernalContext().recoveryMode();\n \n+                final AtomicBoolean expiredRemains = new AtomicBoolean();\n+\n                 while (!isCancelled()) {\n-                    boolean expiredRemains = false;\n+                    expiredRemains.set(false);\n \n-                    for (GridCacheTtlManager mgr : mgrs) {\n+                    for (Map.Entry<Integer, GridCacheTtlManager> mgr : mgrs.entrySet()) {\n                         updateHeartbeat();\n \n-                        if (mgr.expire(CLEANUP_WORKER_ENTRIES_PROCESS_LIMIT))\n-                            expiredRemains = true;\n+                        Integer processedCacheID = mgr.getKey();\n+\n+                        // Need to be sure that the cache to be processed will not be unregistered and,\n+                        // therefore, stopped during the process of expiration is in progress.\n+                        mgrs.computeIfPresent(processedCacheID, (id, m) -> {\n+                            if (m.expire(CLEANUP_WORKER_ENTRIES_PROCESS_LIMIT))\n+                                expiredRemains.set(true);\n+\n+                            return m;\n+                        });\n \n                         if (isCancelled())\n                             return;\n                     }\n \n                     updateHeartbeat();\n \n-                    if (!expiredRemains)\n+                    if (!expiredRemains.get())\n                         U.sleep(CLEANUP_WORKER_SLEEP_INTERVAL);\n \n                     onIdle();",
                "deletions": 32
            },
            {
                "sha": "72e403b337c32015cdfe6370aca5589563fa9588",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java?ref=85cf73fb964152b1edd5baa730bcf9e34e761819",
                "patch": "@@ -121,6 +121,15 @@ public boolean eagerTtlEnabled() {\n     @Override protected void onKernalStop0(boolean cancel) {\n         if (pendingEntries != null)\n             pendingEntries.clear();\n+    }\n+\n+    /**\n+     * Unregister this TTL manager of cache from periodical check on expired entries.\n+     */\n+    public void unregister() {\n+        // Ignoring attempt to unregister manager that has never been started.\n+        if (!starting.get())\n+            return;\n \n         cctx.shared().ttl().unregister(this);\n     }",
                "deletions": 0
            },
            {
                "sha": "e04f2a50e245a4ee142035a530d9daf50e567829",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/IgnitePdsWithTtlTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/IgnitePdsWithTtlTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/85cf73fb964152b1edd5baa730bcf9e34e761819/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/IgnitePdsWithTtlTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/IgnitePdsWithTtlTest.java?ref=85cf73fb964152b1edd5baa730bcf9e34e761819",
                "patch": "@@ -172,6 +172,8 @@ public void testTtlIsAppliedForMultipleCaches() throws Exception {\n \n         waitAndCheckExpired(srv, srv.cache(CACHE_NAME + \"-\" + (cacheCnt - 1)));\n \n+        srv.cluster().active(false);\n+\n         stopAllGrids();\n     }\n \n@@ -206,6 +208,8 @@ private void loadAndWaitForCleanup(boolean restartGrid) throws Exception {\n \n         waitAndCheckExpired(srv, cache);\n \n+        srv.cluster().active(false);\n+\n         stopAllGrids();\n     }\n \n@@ -230,6 +234,8 @@ public void testRebalancingWithTtlExpirable() throws Exception {\n \n         waitAndCheckExpired(srv, cache);\n \n+        srv.cluster().active(false);\n+\n         stopAllGrids();\n     }\n \n@@ -268,6 +274,8 @@ public void testStartStopAfterRebalanceWithTtlExpirable() throws Exception {\n \n             stopGrid(1);\n             startGrid(1);\n+\n+            srv.cluster().active(false);\n         }\n         finally {\n             stopAllGrids();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12444: SQL: Query reduce can fail with NPE on retry. This closes #7138.",
        "commit": "https://github.com/apache/ignite/commit/a835bdf7fce305df302241eea2d6b15ff7751db1",
        "parent": "https://github.com/apache/ignite/commit/6c7fe053661e6f822d8d18ee9a323897e630ab6b",
        "bug_id": "ignite_5",
        "file": [
            {
                "sha": "d3e7772aa57f47ca6bb22d9ce9c86fa32429407f",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/a835bdf7fce305df302241eea2d6b15ff7751db1/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/a835bdf7fce305df302241eea2d6b15ff7751db1/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java?ref=a835bdf7fce305df302241eea2d6b15ff7751db1",
                "patch": "@@ -394,11 +394,13 @@ else if (msg.page() == 0) // Count down only on each first page received.\n             }\n \n             if (attempt > 0 && retryTimeout > 0 && (U.currentTimeMillis() - startTime > retryTimeout)) {\n+                // There are few cases when 'retryCause' can be undefined, so we should throw exception with proper message here.\n+                if (lastRun == null || lastRun.retryCause() == null)\n+                    throw new CacheException(\"Failed to map SQL query to topology during timeout: \" + retryTimeout + \"ms\");\n+\n                 UUID retryNodeId = lastRun.retryNodeId();\n                 String retryCause = lastRun.retryCause();\n \n-                assert !F.isEmpty(retryCause);\n-\n                 throw new CacheException(\"Failed to map SQL query to topology on data node [dataNodeId=\" + retryNodeId +\n                     \", msg=\" + retryCause + ']');\n             }\n@@ -469,11 +471,9 @@ else if (msg.page() == 0) // Count down only on each first page received.\n                 partsMap = nodesParts.partitionsMap();\n                 qryMap = nodesParts.queryPartitionsMap();\n \n-                if (nodes == null)\n+                if (F.isEmpty(nodes))\n                     continue; // Retry.\n \n-                assert !nodes.isEmpty();\n-\n                 if (isReplicatedOnly || qry.explain()) {\n                     ClusterNode locNode = ctx.discovery().localNode();\n \n@@ -785,7 +785,7 @@ public UpdateResult update(\n \n         Collection<ClusterNode> nodes = nodesParts.nodes();\n \n-        if (nodes == null)\n+        if (F.isEmpty(nodes))\n             throw new CacheException(\"Failed to determine nodes participating in the update. \" +\n                 \"Explanation (Retry update once topology recovers).\");\n \n@@ -855,7 +855,7 @@ public UpdateResult update(\n \n             U.error(log, \"Error during update [localNodeId=\" + ctx.localNodeId() + \"]\", e);\n \n-            throw new CacheException(\"Failed to run update. \" + e.getMessage(), e);\n+            throw new CacheException(\"Failed to run SQL update query. \" + e.getMessage(), e);\n         }\n         finally {\n             if (release)",
                "deletions": 7
            },
            {
                "sha": "8f229c28319f58242c86dc7d604a90421cdb9c61",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/twostep/RetryCauseMessageSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a835bdf7fce305df302241eea2d6b15ff7751db1/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/twostep/RetryCauseMessageSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a835bdf7fce305df302241eea2d6b15ff7751db1/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/twostep/RetryCauseMessageSelfTest.java",
                "status": "modified",
                "changes": 85,
                "additions": 85,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/twostep/RetryCauseMessageSelfTest.java?ref=a835bdf7fce305df302241eea2d6b15ff7751db1",
                "patch": "@@ -17,23 +17,29 @@\n \n package org.apache.ignite.internal.processors.query.h2.twostep;\n \n+import java.util.Collections;\n+import java.util.List;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n import javax.cache.CacheException;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.cache.query.SqlQuery;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.cache.GridCacheContext;\n import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n import org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtLocalPartition;\n import org.apache.ignite.internal.processors.cache.index.AbstractIndexingCommonTest;\n+import org.apache.ignite.internal.processors.cache.query.SqlFieldsQueryEx;\n import org.apache.ignite.internal.processors.query.GridQueryProcessor;\n import org.apache.ignite.internal.processors.query.h2.H2Utils;\n import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n@@ -63,6 +69,9 @@\n     /** */\n     private static final String ORG_SQL = \"select * from Organization\";\n \n+    /** */\n+    static final String UPDATE_SQL = \"UPDATE Person SET name=lower(?) \";\n+\n     /** */\n     private static final String ORG = \"org\";\n \n@@ -296,6 +305,82 @@ public void onQueryRequest(ClusterNode node, GridH2QueryRequest qryReq) throws I\n         fail();\n     }\n \n+    /**\n+     * Test query remap failure reason.\n+     */\n+    @Test\n+    public void testQueryMappingFailureMessage() {\n+        final GridReduceQueryExecutor rdcQryExec = GridTestUtils.getFieldValue(h2Idx, IgniteH2Indexing.class, \"rdcQryExec\");\n+        final ReducePartitionMapper mapper = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\");\n+\n+        final IgniteLogger logger = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"log\");\n+        final GridKernalContext ctx = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"ctx\");\n+\n+        GridTestUtils.setFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\",\n+            new ReducePartitionMapper(ctx, logger) {\n+                @Override public ReducePartitionMapResult nodesForPartitions(List<Integer> cacheIds,\n+                    AffinityTopologyVersion topVer, int[] parts, boolean isReplicatedOnly, long qryId) {\n+                    final ReducePartitionMapResult res = super.nodesForPartitions(cacheIds, topVer, parts, isReplicatedOnly, qryId);\n+\n+                    return new ReducePartitionMapResult(Collections.emptyList(), res.partitionsMap(), res.queryPartitionsMap());\n+                }\n+            });\n+\n+        try {\n+            SqlFieldsQuery qry = new SqlFieldsQuery(JOIN_SQL).setArgs(\"Organization #0\");\n+\n+            final Throwable throwable = GridTestUtils.assertThrows(log, () -> {\n+                return personCache.query(qry).getAll();\n+            }, CacheException.class, \"Failed to map SQL query to topology during timeout:\");\n+\n+            throwable.printStackTrace();\n+        }\n+        finally {\n+            GridTestUtils.setFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\", mapper);\n+        }\n+    }\n+\n+    /**\n+     * Test update query remap failure reason.\n+     */\n+    @Test\n+    public void testUpdateQueryMappingFailureMessage() {\n+        final GridReduceQueryExecutor rdcQryExec = GridTestUtils.getFieldValue(h2Idx, IgniteH2Indexing.class, \"rdcQryExec\");\n+        final ReducePartitionMapper mapper = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\");\n+\n+        final IgniteLogger logger = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"log\");\n+        final GridKernalContext ctx = GridTestUtils.getFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"ctx\");\n+\n+        GridTestUtils.setFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\",\n+            new ReducePartitionMapper(ctx, logger) {\n+                @Override public ReducePartitionMapResult nodesForPartitions(List<Integer> cacheIds,\n+                    AffinityTopologyVersion topVer, int[] parts, boolean isReplicatedOnly, long qryId) {\n+                    final ReducePartitionMapResult res = super.nodesForPartitions(cacheIds, topVer, parts, isReplicatedOnly, qryId);\n+\n+                    return new ReducePartitionMapResult(Collections.emptyList(), res.partitionsMap(), res.queryPartitionsMap());\n+                }\n+            });\n+\n+        try {\n+            final SqlFieldsQueryEx qry = new SqlFieldsQueryEx(UPDATE_SQL, false)\n+                .setArgs(\"New Name\");\n+\n+            GridTestUtils.assertThrows(log, () -> {\n+                return personCache.query(qry).getAll();\n+            }, CacheException.class, \"Failed to map SQL query to topology during timeout\");\n+\n+            qry.setArgs(\"Another Name\");\n+            qry.setSkipReducerOnUpdate(true);\n+\n+            GridTestUtils.assertThrows(log, () -> {\n+                return personCache.query(qry).getAll();\n+            }, CacheException.class, \"Failed to determine nodes participating in the update. \");\n+        }\n+        finally {\n+            GridTestUtils.setFieldValue(rdcQryExec, GridReduceQueryExecutor.class, \"mapper\", mapper);\n+        }\n+    }\n+\n     /** {@inheritDoc} */\n     @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n         IgniteConfiguration cfg = super.getConfiguration(gridName);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12305 Extend test coverage [IGNITE-11959] NullPointerException if transaction failed and failure handler dwas not configured explicitly - Fixes #6993.\n\nSigned-off-by: ipavlukhin <vololo100@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/2035f9de6f63c93f60467eff87cdacb60bf815cf",
        "parent": "https://github.com/apache/ignite/commit/a6e577e6d02e25c37cf98504e3456f2c3ab26618",
        "bug_id": "ignite_6",
        "file": [
            {
                "sha": "09283a0d23de21af0301d54fecda06e24e4a89cd",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/SafeLogTxFinishErrorTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2035f9de6f63c93f60467eff87cdacb60bf815cf/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/SafeLogTxFinishErrorTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2035f9de6f63c93f60467eff87cdacb60bf815cf/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/SafeLogTxFinishErrorTest.java",
                "status": "added",
                "changes": 161,
                "additions": 161,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/SafeLogTxFinishErrorTest.java?ref=2035f9de6f63c93f60467eff87cdacb60bf815cf",
                "patch": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import java.util.Collection;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cache.distributed.near.GridNearTxLocal;\n+import org.apache.ignite.internal.processors.cache.transactions.IgniteInternalTx;\n+import org.apache.ignite.internal.processors.cache.transactions.IgniteTxAdapter;\n+import org.apache.ignite.internal.processors.cache.transactions.IgniteTxLocalAdapter;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.transactions.Transaction;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n+import static org.apache.ignite.testframework.GridTestUtils.getFieldValue;\n+import static org.apache.ignite.testframework.GridTestUtils.setFieldValue;\n+\n+/**\n+ * Tests verifying that {@link IgniteTxAdapter#logTxFinishErrorSafe}\n+ * runs without errors.\n+ */\n+public class SafeLogTxFinishErrorTest extends GridCommonAbstractTest {\n+    /** Logger for listen log messages. */\n+    private final ListeningTestLogger log = new ListeningTestLogger(false, GridCommonAbstractTest.log);\n+\n+    /** Flag to remove the FailureHandler when creating configuration for node. */\n+    private boolean rmvFailureHnd;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCacheConfiguration(\n+            new CacheConfiguration<>(DEFAULT_CACHE_NAME)\n+                .setAffinity(new RendezvousAffinityFunction(false, 32))\n+                .setAtomicityMode(TRANSACTIONAL)\n+        );\n+\n+        if (rmvFailureHnd)\n+            cfg.setFailureHandler(null);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Checking that {@link IgniteTxAdapter#logTxFinishErrorSafe} is executable\n+     * without errors with FailureHandler.\n+     *\n+     * @throws Exception If any error occurs.\n+     */\n+    @Test\n+    public void testSafeLogTxFinishErrorWithFailureHandler() throws Exception {\n+        checkSafeLogTxFinishError(false);\n+    }\n+\n+    /**\n+     * Checking that {@link IgniteTxAdapter#logTxFinishErrorSafe} is executable\n+     * without errors without FailureHandler.\n+     *\n+     * @throws Exception If any error occurs.\n+     */\n+    @Test\n+    public void testSafeLogTxFinishErrorWithoutFailureHandler()throws Exception {\n+        rmvFailureHnd = true;\n+\n+        checkSafeLogTxFinishError(false);\n+    }\n+\n+    /**\n+     * Checking that {@link IgniteTxAdapter#logTxFinishErrorSafe} is executable\n+     * without errors with FailureHandler. Provided that txState field\n+     * is deleted in transaction, which leads to NPE when\n+     * {@link GridNearTxLocal#toString()} is called.\n+     *\n+     * @throws Exception If any error occurs.\n+     */\n+    @Test\n+    public void testSafeLogTxFinishErrorWithFailureHandlerAndRemoveTxState() throws Exception {\n+        checkSafeLogTxFinishError(true);\n+    }\n+\n+    /**\n+     * Checking that {@link IgniteTxAdapter#logTxFinishErrorSafe} is executed\n+     * without errors.\n+     *\n+     * @param rmvTxState Remove txState field in transaction.\n+     * @throws Exception If any error occurs.\n+     */\n+    private void checkSafeLogTxFinishError(boolean rmvTxState) throws Exception {\n+        IgniteEx igniteEx = startGrid(0);\n+\n+        try (Transaction transaction = igniteEx.transactions().txStart()) {\n+            IgniteCache<Object, Object> cache = igniteEx.cache(DEFAULT_CACHE_NAME);\n+\n+            cache.put(1, 1);\n+\n+            Collection<IgniteInternalTx> activeTxs = igniteEx.context().cache().context().tm().activeTransactions();\n+\n+            assertEquals(1, activeTxs.size());\n+\n+            GridNearTxLocal activeTx = (GridNearTxLocal)activeTxs.iterator().next();\n+\n+            AtomicBoolean containsFailedCompletingTxInLog = new AtomicBoolean();\n+\n+            Object txState = null;\n+\n+            if (rmvTxState) {\n+                txState = getFieldValue(activeTx, IgniteTxLocalAdapter.class, \"txState\");\n+                setFieldValue(activeTx, IgniteTxLocalAdapter.class, \"txState\", null);\n+            }\n+\n+            boolean commit = false;\n+\n+            String errPrefix = \"Failed completing the transaction: [commit=\" + commit;\n+\n+            String xidVer = (rmvTxState ? \"xidVersion\" : \"xidVer\") + '=' + activeTx.xidVersion();\n+\n+            log.registerListener(logStr -> {\n+                if (logStr.startsWith(errPrefix) && logStr.contains(xidVer))\n+                    containsFailedCompletingTxInLog.set(true);\n+            });\n+\n+            activeTx.logTxFinishErrorSafe(log, commit, new RuntimeException(\"Test\"));\n+\n+            assertTrue(containsFailedCompletingTxInLog.get());\n+\n+            //That there was no NPE when closing a transaction.\n+            if (rmvTxState)\n+                setFieldValue(activeTx, IgniteTxLocalAdapter.class, \"txState\", txState);\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "918426eb3e1b56313c3bd00a67157768c1aa2a9a",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite7.java",
                "blob_url": "https://github.com/apache/ignite/blob/2035f9de6f63c93f60467eff87cdacb60bf815cf/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite7.java",
                "raw_url": "https://github.com/apache/ignite/raw/2035f9de6f63c93f60467eff87cdacb60bf815cf/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite7.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite7.java?ref=2035f9de6f63c93f60467eff87cdacb60bf815cf",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.ignite.internal.processors.cache.CacheMetricsManageTest;\n import org.apache.ignite.internal.processors.cache.GridTransactionsSystemUserTimeMetricsTest;\n import org.apache.ignite.internal.processors.cache.IgniteDynamicCacheStartFailWithPersistenceTest;\n+import org.apache.ignite.internal.processors.cache.SafeLogTxFinishErrorTest;\n import org.apache.ignite.internal.processors.cache.WalModeChangeAdvancedSelfTest;\n import org.apache.ignite.internal.processors.cache.WalModeChangeCoordinatorNotAffinityNodeSelfTest;\n import org.apache.ignite.internal.processors.cache.WalModeChangeSelfTest;\n@@ -118,6 +119,8 @@\n \n         GridTestUtils.addTestIfNeeded(suite, GridTransactionsSystemUserTimeMetricsTest.class, ignoredTests);\n \n+        GridTestUtils.addTestIfNeeded(suite, SafeLogTxFinishErrorTest.class, ignoredTests);\n+\n         return suite;\n     }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12062 IntMap throws NullPointerException when map is creating - Fixes #6769.\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/a7834c62d3ad086b4f64f25fb5c926f467225869",
        "parent": "https://github.com/apache/ignite/commit/b1862bc184fc2015c7ccc54264d4ed2c65803134",
        "bug_id": "ignite_7",
        "file": [
            {
                "sha": "d6b57d8da8a8c0d0f7743cd65cbfb27099d8ebfe",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/collection/IntHashMap.java",
                "blob_url": "https://github.com/apache/ignite/blob/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/main/java/org/apache/ignite/internal/util/collection/IntHashMap.java",
                "raw_url": "https://github.com/apache/ignite/raw/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/main/java/org/apache/ignite/internal/util/collection/IntHashMap.java",
                "status": "modified",
                "changes": 29,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/collection/IntHashMap.java?ref=a7834c62d3ad086b4f64f25fb5c926f467225869",
                "patch": "@@ -72,25 +72,34 @@\n         }\n     }\n \n-    /** Default constructor. */\n-    public IntHashMap() {\n-        entries = (Entry<V>[])new Entry[INITIAL_CAPACITY];\n-    }\n-\n-    /** Create map with preallocated array. */\n-    public IntHashMap(int cap) {\n+    /**\n+     * Returns required size of table.\n+     *\n+     * @param cap Capacity.\n+     */\n+    static int tableSize(int cap) {\n         int n = cap - 1;\n         n |= n >>> 1;\n         n |= n >>> 2;\n         n |= n >>> 4;\n         n |= n >>> 8;\n         n |= n >>> 16;\n \n-        int entriesSize = (n < INITIAL_CAPACITY) ? INITIAL_CAPACITY : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n+        return  (n < INITIAL_CAPACITY) ? INITIAL_CAPACITY : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n+    }\n \n-        compactThreshold = (int)(COMPACT_LOAD_FACTOR * (entries.length >> 1));\n+    /** Default constructor. */\n+    public IntHashMap() {\n+        entries = (Entry<V>[])new Entry[INITIAL_CAPACITY];\n+    }\n \n-        scaleThreshold = (int)(entries.length * SCALE_LOAD_FACTOR);\n+    /** Create map with preallocated array. */\n+    public IntHashMap(int cap) {\n+        int entriesSize = tableSize(cap);\n+\n+        compactThreshold = (int)(COMPACT_LOAD_FACTOR * (entriesSize >> 1));\n+\n+        scaleThreshold = (int)(entriesSize * SCALE_LOAD_FACTOR);\n \n         entries = (Entry<V>[])new Entry[entriesSize];\n     }",
                "deletions": 10
            },
            {
                "sha": "1e7f580dd49e8099cbb0de04803f8348437cf1fa",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheGroupsTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheGroupsTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheGroupsTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheGroupsTest.java?ref=a7834c62d3ad086b4f64f25fb5c926f467225869",
                "patch": "@@ -81,6 +81,7 @@\n import org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtLocalPartition;\n import org.apache.ignite.internal.processors.cache.persistence.CacheDataRow;\n import org.apache.ignite.internal.processors.platform.cache.expiry.PlatformExpiryPolicyFactory;\n+import org.apache.ignite.internal.util.collection.IntMap;\n import org.apache.ignite.internal.util.lang.GridAbsPredicate;\n import org.apache.ignite.internal.util.lang.GridIterator;\n import org.apache.ignite.internal.util.lang.GridPlainCallable;\n@@ -4177,12 +4178,11 @@ public void testRestartsAndCacheCreateDestroy() throws Exception {\n                     assertNotNull(grp);\n \n                     for (GridDhtLocalPartition part : grp.topology().currentLocalPartitions()) {\n-                        Map<Integer, Object> cachesMap = GridTestUtils.getFieldValue(part, \"cacheMaps\");\n+                        IntMap<Object> cachesMap = GridTestUtils.getFieldValue(part, \"cacheMaps\");\n \n                         assertTrue(cachesMap.size() <= cacheIds.size());\n \n-                        for (Integer cacheId : cachesMap.keySet())\n-                            assertTrue(cachesMap.containsKey(cacheId));\n+                        cachesMap.forEach((cacheId, v) -> assertTrue(cachesMap.containsKey(cacheId)));\n                     }\n                 }\n             }",
                "deletions": 3
            },
            {
                "sha": "da84dfcdf1ed260e73ff685160e492db8e1d9dc0",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/util/collection/IntHashMapTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/internal/util/collection/IntHashMapTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/internal/util/collection/IntHashMapTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/util/collection/IntHashMapTest.java?ref=a7834c62d3ad086b4f64f25fb5c926f467225869",
                "patch": "@@ -103,7 +103,15 @@ public void shouldAllocateMapWithInitialCapacity() {\n         assertEquals(16, realCapacityForInitialSize(9));\n         assertEquals(128, realCapacityForInitialSize(99));\n         assertEquals(256, realCapacityForInitialSize(155));\n-        assertEquals(MAXIMUM_CAPACITY, realCapacityForInitialSize(Integer.MAX_VALUE));\n+    }\n+\n+    /**\n+     *\n+     */\n+    @Test\n+    public void shouldReturnsRequiredTableSizeForCustomCapacity() {\n+        assertEquals(INITIAL_CAPACITY, IntHashMap.tableSize(1));\n+        assertEquals(MAXIMUM_CAPACITY, IntHashMap.tableSize(Integer.MAX_VALUE));\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "ac8dd150810f8222b47c934bd2afa22444aef5e3",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/a7834c62d3ad086b4f64f25fb5c926f467225869/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicTestSuite.java?ref=a7834c62d3ad086b4f64f25fb5c926f467225869",
                "patch": "@@ -91,6 +91,8 @@\n import org.apache.ignite.internal.util.collection.BitSetIntSetTest;\n import org.apache.ignite.internal.util.collection.ImmutableIntSetTest;\n import org.apache.ignite.internal.util.GridCleanerTest;\n+import org.apache.ignite.internal.util.collection.IntHashMapTest;\n+import org.apache.ignite.internal.util.collection.IntRWHashMapTest;\n import org.apache.ignite.internal.util.nio.IgniteExceptionInNioWorkerSelfTest;\n import org.apache.ignite.marshaller.DynamicProxySerializationMultiJvmSelfTest;\n import org.apache.ignite.marshaller.MarshallerContextSelfTest;\n@@ -201,6 +203,8 @@\n     SwapPathConstructionSelfTest.class,\n     BitSetIntSetTest.class,\n     ImmutableIntSetTest.class,\n+    IntHashMapTest.class,\n+    IntRWHashMapTest.class,\n \n     IgniteMarshallerCacheFSRestoreTest.class,\n     IgniteMarshallerCacheClassNameConflictTest.class,",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12286: IGNITE-12286: SqlViewExporter NPE Fix (#6972)",
        "commit": "https://github.com/apache/ignite/commit/1d9a953a8786997dbcb6b86566f09b3622503be8",
        "parent": "https://github.com/apache/ignite/commit/9ba9cc582b1e9a4aeae434dc639e364009161e52",
        "bug_id": "ignite_8",
        "file": [
            {
                "sha": "f44dfdb34e2327f4642b606cb944bdc505efe4f6",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/spi/metric/sql/MetricRegistryLocalSystemView.java",
                "blob_url": "https://github.com/apache/ignite/blob/1d9a953a8786997dbcb6b86566f09b3622503be8/modules/indexing/src/main/java/org/apache/ignite/spi/metric/sql/MetricRegistryLocalSystemView.java",
                "raw_url": "https://github.com/apache/ignite/raw/1d9a953a8786997dbcb6b86566f09b3622503be8/modules/indexing/src/main/java/org/apache/ignite/spi/metric/sql/MetricRegistryLocalSystemView.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/spi/metric/sql/MetricRegistryLocalSystemView.java?ref=1d9a953a8786997dbcb6b86566f09b3622503be8",
                "patch": "@@ -72,7 +72,7 @@ private boolean advance() {\n                 while (grps.hasNext()) {\n                     MetricRegistry mreg = grps.next();\n \n-                    if (!filter.test(mreg))\n+                    if (filter != null && !filter.test(mreg))\n                         continue;\n \n                     curr = mreg.iterator();",
                "deletions": 1
            },
            {
                "sha": "986d8402c26cb340cc3156e4e0129a0f7cf8c310",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/metric/SqlViewExporterSpiTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1d9a953a8786997dbcb6b86566f09b3622503be8/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/metric/SqlViewExporterSpiTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1d9a953a8786997dbcb6b86566f09b3622503be8/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/metric/SqlViewExporterSpiTest.java",
                "status": "modified",
                "changes": 167,
                "additions": 90,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/metric/SqlViewExporterSpiTest.java?ref=1d9a953a8786997dbcb6b86566f09b3622503be8",
                "patch": "@@ -72,7 +72,10 @@\n /** */\n public class SqlViewExporterSpiTest extends AbstractExporterSpiTest {\n     /** */\n-    private static IgniteEx ignite;\n+    private static IgniteEx ignite0;\n+\n+    /** */\n+    private static IgniteEx ignite1;\n \n     /** {@inheritDoc} */\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n@@ -85,7 +88,8 @@\n \n         SqlViewMetricExporterSpi sqlSpi = new SqlViewMetricExporterSpi();\n \n-        sqlSpi.setExportFilter(mgrp -> !mgrp.name().startsWith(FILTERED_PREFIX));\n+        if (igniteInstanceName.endsWith(\"1\"))\n+            sqlSpi.setExportFilter(mgrp -> !mgrp.name().startsWith(FILTERED_PREFIX));\n \n         cfg.setMetricExporterSpi(sqlSpi);\n \n@@ -96,17 +100,18 @@\n     @Override protected void beforeTestsStarted() throws Exception {\n         cleanPersistenceDir();\n \n-        ignite = startGrid(0);\n+        ignite0 = startGrid(0);\n+        ignite1 = startGrid(1);\n \n-        ignite.cluster().active(true);\n+        ignite0.cluster().active(true);\n     }\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        Collection<String> caches = ignite.cacheNames();\n+        Collection<String> caches = ignite0.cacheNames();\n \n         for (String cache : caches)\n-            ignite.destroyCache(cache);\n+            ignite0.destroyCache(cache);\n     }\n \n     /** {@inheritDoc} */\n@@ -118,8 +123,17 @@\n \n     /** */\n     @Test\n-    public void testDataRegionJmxMetrics() throws Exception {\n-        List<List<?>> res = execute(ignite,\n+    public void testEmptyFilter() throws Exception {\n+        List<List<?>> res = execute(ignite0, \"SELECT * FROM SYS.METRICS\");\n+\n+        assertNotNull(res);\n+        assertFalse(res.isEmpty());\n+    }\n+\n+    /** */\n+    @Test\n+    public void testDataRegionMetrics() throws Exception {\n+        List<List<?>> res = execute(ignite0,\n             \"SELECT REPLACE(name, 'io.dataregion.default.'), value, description FROM SYS.METRICS\");\n \n         Set<String> names = new HashSet<>();\n@@ -137,10 +151,11 @@ public void testDataRegionJmxMetrics() throws Exception {\n     /** */\n     @Test\n     public void testFilterAndExport() throws Exception {\n-        createAdditionalMetrics(ignite);\n+        createAdditionalMetrics(ignite1);\n \n-        List<List<?>> res = execute(ignite,\n-            \"SELECT name, value, description FROM SYS.METRICS WHERE name LIKE 'other.prefix%'\");\n+        List<List<?>> res = execute(ignite1,\n+            \"SELECT name, value, description FROM SYS.METRICS \" +\n+                \"WHERE name LIKE 'other.prefix%' OR name LIKE '\" + FILTERED_PREFIX + \"%'\");\n \n         Set<IgniteBiTuple<String, String>> expVals = new HashSet<>(asList(\n             t(\"other.prefix.test\", \"42\"),\n@@ -162,11 +177,11 @@ public void testCachesView() throws Exception {\n         Set<String> cacheNames = new HashSet<>(asList(\"cache-1\", \"cache-2\"));\n \n         for (String name : cacheNames)\n-            ignite.createCache(name);\n+            ignite0.createCache(name);\n \n-        List<List<?>> caches = execute(ignite, \"SELECT CACHE_NAME FROM SYS.CACHES\");\n+        List<List<?>> caches = execute(ignite0, \"SELECT CACHE_NAME FROM SYS.CACHES\");\n \n-        assertEquals(ignite.context().cache().cacheDescriptors().size(), caches.size());\n+        assertEquals(ignite0.context().cache().cacheDescriptors().size(), caches.size());\n \n         for (List<?> row : caches)\n             cacheNames.remove(row.get(0));\n@@ -180,11 +195,11 @@ public void testCacheGroupsView() throws Exception {\n         Set<String> grpNames = new HashSet<>(asList(\"grp-1\", \"grp-2\"));\n \n         for (String grpName : grpNames)\n-            ignite.createCache(new CacheConfiguration<>(\"cache-\" + grpName).setGroupName(grpName));\n+            ignite0.createCache(new CacheConfiguration<>(\"cache-\" + grpName).setGroupName(grpName));\n \n-        List<List<?>> grps = execute(ignite, \"SELECT CACHE_GROUP_NAME FROM SYS.CACHE_GROUPS\");\n+        List<List<?>> grps = execute(ignite0, \"SELECT CACHE_GROUP_NAME FROM SYS.CACHE_GROUPS\");\n \n-        assertEquals(ignite.context().cache().cacheGroupDescriptors().size(), grps.size());\n+        assertEquals(ignite0.context().cache().cacheGroupDescriptors().size(), grps.size());\n \n         for (List<?> row : grps)\n             grpNames.remove(row.get(0));\n@@ -198,7 +213,7 @@ public void testComputeBroadcast() throws Exception {\n         CyclicBarrier barrier = new CyclicBarrier(6);\n \n         for (int i = 0; i < 5; i++) {\n-            ignite.compute().broadcastAsync(() -> {\n+            ignite0.compute().broadcastAsync(() -> {\n                 try {\n                     barrier.await();\n                     barrier.await();\n@@ -211,7 +226,7 @@ public void testComputeBroadcast() throws Exception {\n \n         barrier.await();\n \n-        List<List<?>> tasks = execute(ignite,\n+        List<List<?>> tasks = execute(ignite0,\n             \"SELECT \" +\n             \"  INTERNAL, \" +\n             \"  AFFINITY_CACHE_NAME, \" +\n@@ -231,7 +246,7 @@ public void testComputeBroadcast() throws Exception {\n         assertEquals(-1, t.get(2));\n         assertTrue(t.get(3).toString().startsWith(getClass().getName()));\n         assertTrue(t.get(4).toString().startsWith(getClass().getName()));\n-        assertEquals(ignite.localNode().id(), t.get(5));\n+        assertEquals(ignite0.localNode().id(), t.get(5));\n         assertEquals(\"0\", t.get(6));\n \n         barrier.await();\n@@ -246,9 +261,9 @@ public void testServices() throws Exception {\n         srvcCfg.setMaxPerNodeCount(1);\n         srvcCfg.setService(new DummyService());\n \n-        ignite.services().deploy(srvcCfg);\n+        ignite0.services().deploy(srvcCfg);\n \n-        List<List<?>> srvs = execute(ignite,\n+        List<List<?>> srvs = execute(ignite0,\n             \"SELECT \" +\n                 \"  NAME, \" +\n                 \"  SERVICE_ID, \" +\n@@ -262,7 +277,7 @@ public void testServices() throws Exception {\n                 \"  ORIGIN_NODE_ID \" +\n                 \"FROM SYS.SERVICES\");\n \n-        assertEquals(ignite.context().service().serviceDescriptors().size(), srvs.size());\n+        assertEquals(ignite0.context().service().serviceDescriptors().size(), srvs.size());\n \n         List<?> sysView = srvs.iterator().next();\n \n@@ -274,16 +289,16 @@ public void testServices() throws Exception {\n     /** */\n     @Test\n     public void testClientsConnections() throws Exception {\n-        String host = ignite.configuration().getClientConnectorConfiguration().getHost();\n+        String host = ignite0.configuration().getClientConnectorConfiguration().getHost();\n \n         if (host == null)\n-            host = ignite.configuration().getLocalHost();\n+            host = ignite0.configuration().getLocalHost();\n \n-        int port = ignite.configuration().getClientConnectorConfiguration().getPort();\n+        int port = ignite0.configuration().getClientConnectorConfiguration().getPort();\n \n         try (IgniteClient client = Ignition.startClient(new ClientConfiguration().setAddresses(host + \":\" + port))) {\n             try (Connection conn = new IgniteJdbcThinDriver().connect(\"jdbc:ignite:thin://\" + host, new Properties())) {\n-                List<List<?>> conns = execute(ignite, \"SELECT * FROM SYS.CLIENT_CONNECTIONS\");\n+                List<List<?>> conns = execute(ignite0, \"SELECT * FROM SYS.CLIENT_CONNECTIONS\");\n \n                 assertEquals(2, conns.size());\n             }\n@@ -293,18 +308,18 @@ public void testClientsConnections() throws Exception {\n     /** */\n     @Test\n     public void testTransactions() throws Exception {\n-        IgniteCache<Integer, Integer> cache = ignite.createCache(new CacheConfiguration<Integer, Integer>(\"c\")\n+        IgniteCache<Integer, Integer> cache = ignite0.createCache(new CacheConfiguration<Integer, Integer>(\"c\")\n             .setAtomicityMode(CacheAtomicityMode.TRANSACTIONAL));\n \n-        assertTrue(execute(ignite, \"SELECT * FROM SYS.TRANSACTIONS\").isEmpty());\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.TRANSACTIONS\").isEmpty());\n \n         CountDownLatch latch1 = new CountDownLatch(10);\n         CountDownLatch latch2 = new CountDownLatch(1);\n \n         AtomicInteger cntr = new AtomicInteger();\n \n         GridTestUtils.runMultiThreadedAsync(() -> {\n-            try (Transaction tx = ignite.transactions().withLabel(\"test\").txStart(PESSIMISTIC, REPEATABLE_READ)) {\n+            try (Transaction tx = ignite0.transactions().withLabel(\"test\").txStart(PESSIMISTIC, REPEATABLE_READ)) {\n                 cache.put(cntr.incrementAndGet(), cntr.incrementAndGet());\n                 cache.put(cntr.incrementAndGet(), cntr.incrementAndGet());\n \n@@ -317,7 +332,7 @@ public void testTransactions() throws Exception {\n         }, 5, \"xxx\");\n \n         GridTestUtils.runMultiThreadedAsync(() -> {\n-            try (Transaction tx = ignite.transactions().txStart(OPTIMISTIC, SERIALIZABLE)) {\n+            try (Transaction tx = ignite0.transactions().txStart(OPTIMISTIC, SERIALIZABLE)) {\n                 cache.put(cntr.incrementAndGet(), cntr.incrementAndGet());\n                 cache.put(cntr.incrementAndGet(), cntr.incrementAndGet());\n \n@@ -331,13 +346,13 @@ public void testTransactions() throws Exception {\n \n         latch1.await(5, TimeUnit.SECONDS);\n \n-        List<List<?>> txs = execute(ignite, \"SELECT * FROM SYS.TRANSACTIONS\");\n+        List<List<?>> txs = execute(ignite0, \"SELECT * FROM SYS.TRANSACTIONS\");\n \n         assertEquals(10, txs.size());\n \n         latch2.countDown();\n \n-        boolean res = waitForCondition(() -> execute(ignite, \"SELECT * FROM SYS.TRANSACTIONS\").isEmpty(), 5_000);\n+        boolean res = waitForCondition(() -> execute(ignite0, \"SELECT * FROM SYS.TRANSACTIONS\").isEmpty(), 5_000);\n \n         assertTrue(res);\n     }\n@@ -394,7 +409,7 @@ public void testViews() throws Exception {\n \n         Set<String> actViews = new HashSet<>();\n \n-        List<List<?>> res = execute(ignite, \"SELECT * FROM SYS.VIEWS\");\n+        List<List<?>> res = execute(ignite0, \"SELECT * FROM SYS.VIEWS\");\n \n         for (List<?> row : res)\n             actViews.add(row.get(0).toString());\n@@ -405,11 +420,11 @@ public void testViews() throws Exception {\n     /** */\n     @Test\n     public void testTable() throws Exception {\n-        assertTrue(execute(ignite, \"SELECT * FROM SYS.TABLES\").isEmpty());\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.TABLES\").isEmpty());\n \n-        execute(ignite, \"CREATE TABLE T1(ID LONG PRIMARY KEY, NAME VARCHAR)\");\n+        execute(ignite0, \"CREATE TABLE T1(ID LONG PRIMARY KEY, NAME VARCHAR)\");\n \n-        List<List<?>> res = execute(ignite, \"SELECT * FROM SYS.TABLES\");\n+        List<List<?>> res = execute(ignite0, \"SELECT * FROM SYS.TABLES\");\n \n         assertEquals(1, res.size());\n \n@@ -428,31 +443,31 @@ public void testTable() throws Exception {\n         assertEquals(\"java.lang.Long\", tbl.get(7)); // KEY_TYPE_NAME\n         assertNotNull(tbl.get(8)); // VALUE_TYPE_NAME\n \n-        execute(ignite, \"CREATE TABLE T2(ID LONG PRIMARY KEY, NAME VARCHAR)\");\n+        execute(ignite0, \"CREATE TABLE T2(ID LONG PRIMARY KEY, NAME VARCHAR)\");\n \n-        assertEquals(2, execute(ignite, \"SELECT * FROM SYS.TABLES\").size());\n+        assertEquals(2, execute(ignite0, \"SELECT * FROM SYS.TABLES\").size());\n \n-        execute(ignite, \"DROP TABLE T1\");\n-        execute(ignite, \"DROP TABLE T2\");\n+        execute(ignite0, \"DROP TABLE T1\");\n+        execute(ignite0, \"DROP TABLE T2\");\n \n-        assertTrue(execute(ignite, \"SELECT * FROM SYS.TABLES\").isEmpty());\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.TABLES\").isEmpty());\n     }\n \n     /** */\n     @Test\n     public void testTableColumns() throws Exception {\n-        assertTrue(execute(ignite, \"SELECT * FROM SYS.TABLE_COLUMNS\").isEmpty());\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.TABLE_COLUMNS\").isEmpty());\n \n-        execute(ignite, \"CREATE TABLE T1(ID LONG PRIMARY KEY, NAME VARCHAR(40))\");\n+        execute(ignite0, \"CREATE TABLE T1(ID LONG PRIMARY KEY, NAME VARCHAR(40))\");\n \n-        Set<?> actCols = execute(ignite, \"SELECT * FROM SYS.TABLE_COLUMNS\")\n+        Set<?> actCols = execute(ignite0, \"SELECT * FROM SYS.TABLE_COLUMNS\")\n             .stream()\n             .map(l -> l.get(0))\n             .collect(Collectors.toSet());\n \n         assertEquals(new HashSet<>(asList(\"ID\", \"NAME\", \"_KEY\", \"_VAL\")), actCols);\n \n-        execute(ignite, \"CREATE TABLE T2(ID LONG PRIMARY KEY, NAME VARCHAR(50))\");\n+        execute(ignite0, \"CREATE TABLE T2(ID LONG PRIMARY KEY, NAME VARCHAR(50))\");\n \n         List<List<?>> expRes = asList(\n             asList(\"ID\", \"T1\", \"PUBLIC\", false, false, \"null\", true, true, -1, -1, Long.class.getName()),\n@@ -465,20 +480,20 @@ public void testTableColumns() throws Exception {\n             asList(\"_VAL\", \"T2\", \"PUBLIC\", false, false, null, true, false, -1, -1, null)\n         );\n \n-        List<List<?>> res = execute(ignite, \"SELECT * FROM SYS.TABLE_COLUMNS ORDER BY TABLE_NAME, COLUMN_NAME\");\n+        List<List<?>> res = execute(ignite0, \"SELECT * FROM SYS.TABLE_COLUMNS ORDER BY TABLE_NAME, COLUMN_NAME\");\n \n         assertEquals(expRes, res);\n \n-        execute(ignite, \"DROP TABLE T1\");\n-        execute(ignite, \"DROP TABLE T2\");\n+        execute(ignite0, \"DROP TABLE T1\");\n+        execute(ignite0, \"DROP TABLE T2\");\n \n-        assertTrue(execute(ignite, \"SELECT * FROM SYS.TABLE_COLUMNS\").isEmpty());\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.TABLE_COLUMNS\").isEmpty());\n     }\n \n     /** */\n     @Test\n     public void testViewColumns() throws Exception {\n-        execute(ignite, \"SELECT * FROM SYS.VIEW_COLUMNS\");\n+        execute(ignite0, \"SELECT * FROM SYS.VIEW_COLUMNS\");\n \n         List<List<?>> expRes = asList(\n             asList(\"CONNECTION_ID\", \"CLIENT_CONNECTIONS\", SCHEMA_SYS, \"null\", true, 19L, 0, Long.class.getName()),\n@@ -494,39 +509,37 @@ public void testViewColumns() throws Exception {\n                 String.class.getName())\n         );\n \n-        List<List<?>> res = execute(ignite, \"SELECT * FROM SYS.VIEW_COLUMNS WHERE VIEW_NAME = 'CLIENT_CONNECTIONS'\");\n+        List<List<?>> res = execute(ignite0, \"SELECT * FROM SYS.VIEW_COLUMNS WHERE VIEW_NAME = 'CLIENT_CONNECTIONS'\");\n \n         assertEquals(expRes, res);\n     }\n \n     /** */\n     @Test\n     public void testContinuousQuery() throws Exception {\n-        try(IgniteEx remoteNode = startGrid(1)) {\n-            IgniteCache<Integer, Integer> cache = ignite.createCache(\"cache-1\");\n-\n-            assertTrue(execute(ignite, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n-            assertTrue(execute(remoteNode, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n-\n-            try(QueryCursor qry = cache.query(new ContinuousQuery<>()\n-                .setInitialQuery(new ScanQuery<>())\n-                .setPageSize(100)\n-                .setTimeInterval(1000)\n-                .setLocalListener(evts -> {\n-                    // No-op.\n-                })\n-                .setRemoteFilterFactory(() -> evt -> true)\n-            )) {\n-                for (int i=0; i<100; i++)\n-                    cache.put(i, i);\n-\n-                checkContinuouQueryView(ignite, true);\n-                checkContinuouQueryView(remoteNode, false);\n-            }\n-\n-            assertTrue(execute(ignite, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n-            assertTrue(execute(remoteNode, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n+        IgniteCache<Integer, Integer> cache = ignite0.createCache(\"cache-1\");\n+\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n+        assertTrue(execute(ignite1, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n+\n+        try (QueryCursor qry = cache.query(new ContinuousQuery<>()\n+            .setInitialQuery(new ScanQuery<>())\n+            .setPageSize(100)\n+            .setTimeInterval(1000)\n+            .setLocalListener(evts -> {\n+                // No-op.\n+            })\n+            .setRemoteFilterFactory(() -> evt -> true)\n+        )) {\n+            for (int i = 0; i < 100; i++)\n+                cache.put(i, i);\n+\n+            checkContinuouQueryView(ignite0, true);\n+            checkContinuouQueryView(ignite1, false);\n         }\n+\n+        assertTrue(execute(ignite0, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n+        assertTrue(execute(ignite1, \"SELECT * FROM SYS.QUERY_CONTINUOUS\").isEmpty());\n     }\n \n     /** */\n@@ -550,7 +563,7 @@ private void checkContinuouQueryView(IgniteEx g, boolean loc) {\n         assertEquals(\"cache-1\", cq.get(0));\n         assertEquals(100, cq.get(1));\n         assertEquals(1000L, cq.get(2));\n-        assertEquals(ignite.localNode().id(), cq.get(3));\n+        assertEquals(ignite0.localNode().id(), cq.get(3));\n \n         if (loc)\n             assertTrue(cq.get(4).toString().startsWith(getClass().getName()));",
                "deletions": 77
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12232 NPE while authenticating joined node - Fixes #6911.\n\nSigned-off-by: Aleksey Plekhanov <plehanov.alex@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/93f19a464f70e630e71ac53a48c63d66058674ce",
        "parent": "https://github.com/apache/ignite/commit/ce9f593495a6c9c89311aa1608ffda7fe92d0aa0",
        "bug_id": "ignite_9",
        "file": [
            {
                "sha": "4a4b15a1c7b309afc470f26e5d5f65b95b3e445b",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "status": "modified",
                "changes": 22,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -2044,7 +2044,11 @@ private boolean recordable(TcpDiscoveryAbstractMessage msg) {\n      * @param rmtPerms The second set of permissions.\n      * @return {@code True} if given parameters contain the same permissions, {@code False} otherwise.\n      */\n-    private boolean permissionsEqual(SecurityPermissionSet locPerms, SecurityPermissionSet rmtPerms) {\n+    private boolean permissionsEqual(@Nullable SecurityPermissionSet locPerms,\n+        @Nullable SecurityPermissionSet rmtPerms) {\n+        if (locPerms == null || rmtPerms == null)\n+            return false;\n+\n         boolean dfltAllowMatch = locPerms.defaultAllowAll() == rmtPerms.defaultAllowAll();\n \n         boolean bothHaveSamePerms = F.eqNotOrdered(rmtPerms.systemPermissions(), locPerms.systemPermissions()) &&\n@@ -4737,7 +4741,7 @@ else if (!locNodeId.equals(node.id()) && ring.node(node.id()) != null) {\n                                 spi.marshaller(), U.resolveClassLoader(spi.ignite().configuration()), node\n                             );\n \n-                            if (!permissionsEqual(coordSubj.subject().permissions(), subj.subject().permissions())) {\n+                            if (!permissionsEqual(getPermissions(coordSubj), getPermissions(subj))) {\n                                 // Node has not pass authentication.\n                                 LT.warn(log, \"Authentication failed [nodeId=\" + node.id() +\n                                     \", addrs=\" + U.addressesAsString(node) + ']');\n@@ -4838,8 +4842,7 @@ else if (spiState == CONNECTING)\n                                         spi.marshaller(), ldr, locNode\n                                     );\n \n-                                    if (!permissionsEqual(locCrd.subject().permissions(),\n-                                        rmCrd.subject().permissions())) {\n+                                    if (!permissionsEqual(getPermissions(locCrd), getPermissions(rmCrd))) {\n                                         // Node has not pass authentication.\n                                         LT.warn(log,\n                                             \"Failed to authenticate local node \" +\n@@ -4937,6 +4940,17 @@ else if (spiState == CONNECTING)\n                 sendMessageAcrossRing(msg);\n         }\n \n+        /**\n+         * @param secCtx Security context.\n+         * @return Security permission set.\n+         */\n+        private @Nullable SecurityPermissionSet getPermissions(SecurityContext secCtx) {\n+            if (secCtx == null || secCtx.subject() == null)\n+                return null;\n+\n+            return secCtx.subject().permissions();\n+        }\n+\n         /**\n          * Processes node add finished message.\n          *",
                "deletions": 4
            },
            {
                "sha": "13688dccc7ad687e16765bff2e2789a526c777e4",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/AbstractSecurityTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/AbstractSecurityTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/AbstractSecurityTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/AbstractSecurityTest.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -35,6 +35,9 @@\n     /** Empty array of permissions. */\n     protected static final SecurityPermission[] EMPTY_PERMS = new SecurityPermission[0];\n \n+    /** Global authentication flag. */\n+    protected boolean globalAuth;\n+\n     /** {@inheritDoc} */\n     @Override protected void afterTestsStopped() throws Exception {\n         stopAllGrids();\n@@ -76,7 +79,7 @@ protected IgniteEx startClientAllowAll(String login) throws Exception {\n      * @param isClient Is client.\n      */\n     protected IgniteEx startGrid(String login, SecurityPermissionSet prmSet, boolean isClient) throws Exception {\n-        return startGrid(getConfiguration(login, new TestSecurityPluginProvider(login, \"\", prmSet))\n+        return startGrid(getConfiguration(login, new TestSecurityPluginProvider(login, \"\", prmSet, globalAuth))\n                 .setClientMode(isClient));\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "7e2e6dcd5b50960ed1441a1f53b88037ccefac32",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/InvalidServerTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/InvalidServerTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/InvalidServerTest.java",
                "status": "added",
                "changes": 65,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/InvalidServerTest.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.security;\n+\n+import org.apache.ignite.IgniteAuthenticationException;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.processors.security.impl.TestSecurityProcessor;\n+import org.apache.ignite.plugin.security.SecurityCredentials;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.messages.TcpDiscoveryAbstractMessage;\n+import org.apache.ignite.spi.discovery.tcp.messages.TcpDiscoveryJoinRequestMessage;\n+import org.apache.ignite.spi.discovery.tcp.messages.TcpDiscoveryNodeAddedMessage;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause;\n+\n+/**\n+ * Test server connection when it's permissions are removed after\n+ * {@link TcpDiscoveryJoinRequestMessage} processed.\n+ */\n+public class InvalidServerTest extends AbstractSecurityTest {\n+    /** Test server name. */\n+    private static final String TEST_SERVER_NAME = \"test_server\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String instanceName,\n+            AbstractTestSecurityPluginProvider pluginProv) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(instanceName, pluginProv);\n+\n+        cfg.setDiscoverySpi(new TcpDiscoverySpi() {\n+            @Override protected void startMessageProcess(TcpDiscoveryAbstractMessage msg) {\n+                if (msg instanceof TcpDiscoveryNodeAddedMessage && msg.verified())\n+                    TestSecurityProcessor.PERMS.remove(new SecurityCredentials(TEST_SERVER_NAME, \"\"));\n+            }\n+        });\n+\n+        return cfg;\n+    }\n+\n+    /** */\n+    @Test\n+    public void testInvalidServer() throws Exception {\n+        globalAuth = true;\n+\n+        startGridAllowAll(\"server1\");\n+        startGridAllowAll(\"server2\");\n+\n+        assertThrowsWithCause(() -> startGridAllowAll(TEST_SERVER_NAME), IgniteAuthenticationException.class);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "6f5354ca9c20c8e32e6953b3bfaa2c19dc3e806b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/client/ThinClientPermissionCheckTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/client/ThinClientPermissionCheckTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/client/ThinClientPermissionCheckTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/client/ThinClientPermissionCheckTest.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -99,7 +99,7 @@ private IgniteConfiguration getConfiguration(int idx, TestSecurityData... client\n \n         return getConfiguration(\n             instanceName,\n-            new TestSecurityPluginProvider(\"srv_\" + instanceName, null, ALLOW_ALL, clientData)\n+            new TestSecurityPluginProvider(\"srv_\" + instanceName, null, ALLOW_ALL, false, clientData)\n         ).setCacheConfiguration(\n             new CacheConfiguration().setName(CACHE),\n             new CacheConfiguration().setName(FORBIDDEN_CACHE)",
                "deletions": 1
            },
            {
                "sha": "5ee18ff44bde456de96cfa89ede4695f8ab935f8",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityPluginProvider.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityPluginProvider.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityPluginProvider.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityPluginProvider.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -34,22 +34,27 @@\n     /** Permissions. */\n     private final SecurityPermissionSet perms;\n \n+    /** Global authentication. */\n+    private final boolean globalAuth;\n+\n     /** Users security data. */\n     private final TestSecurityData[] clientData;\n \n     /** */\n-    public TestSecurityPluginProvider(String login, String pwd, SecurityPermissionSet perms,\n+    public TestSecurityPluginProvider(String login, String pwd, SecurityPermissionSet perms, boolean globalAuth,\n         TestSecurityData... clientData) {\n         this.login = login;\n         this.pwd = pwd;\n         this.perms = perms;\n+        this.globalAuth = globalAuth;\n         this.clientData = clientData.clone();\n     }\n \n     /** {@inheritDoc} */\n     @Override protected GridSecurityProcessor securityProcessor(GridKernalContext ctx) {\n         return new TestSecurityProcessor(ctx,\n             new TestSecurityData(login, pwd, perms),\n-            Arrays.asList(clientData));\n+            Arrays.asList(clientData),\n+            globalAuth);\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "b62f97bf022c1c5afccf4e0f46e6897841ff8e9b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityProcessor.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/security/impl/TestSecurityProcessor.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -46,29 +46,36 @@\n  */\n public class TestSecurityProcessor extends GridProcessorAdapter implements GridSecurityProcessor {\n     /** Permissions. */\n-    private static final Map<SecurityCredentials, SecurityPermissionSet> PERMS = new ConcurrentHashMap<>();\n+    public static final Map<SecurityCredentials, SecurityPermissionSet> PERMS = new ConcurrentHashMap<>();\n \n     /** Node security data. */\n     private final TestSecurityData nodeSecData;\n \n     /** Users security data. */\n     private final Collection<TestSecurityData> predefinedAuthData;\n \n+    /** Global authentication. */\n+    private final boolean globalAuth;\n+\n     /**\n      * Constructor.\n      */\n     public TestSecurityProcessor(GridKernalContext ctx, TestSecurityData nodeSecData,\n-        Collection<TestSecurityData> predefinedAuthData) {\n+        Collection<TestSecurityData> predefinedAuthData, boolean globalAuth) {\n         super(ctx);\n \n         this.nodeSecData = nodeSecData;\n         this.predefinedAuthData = predefinedAuthData.isEmpty()\n             ? Collections.emptyList()\n             : new ArrayList<>(predefinedAuthData);\n+        this.globalAuth = globalAuth;\n     }\n \n     /** {@inheritDoc} */\n     @Override public SecurityContext authenticateNode(ClusterNode node, SecurityCredentials cred) {\n+        if (!PERMS.containsKey(cred))\n+            return null;\n+\n         return new TestSecurityContext(\n             new TestSecuritySubject()\n                 .setType(REMOTE_NODE)\n@@ -81,11 +88,14 @@ public TestSecurityProcessor(GridKernalContext ctx, TestSecurityData nodeSecData\n \n     /** {@inheritDoc} */\n     @Override public boolean isGlobalNodeAuthentication() {\n-        return false;\n+        return globalAuth;\n     }\n \n     /** {@inheritDoc} */\n     @Override public SecurityContext authenticate(AuthenticationContext ctx) {\n+        if (!PERMS.containsKey(ctx.credentials()))\n+            return null;\n+\n         return new TestSecurityContext(\n             new TestSecuritySubject()\n                 .setType(ctx.subjectType())",
                "deletions": 3
            },
            {
                "sha": "5b7725e729e2f0c492ed7b890cff66a5ac8fe495",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/93f19a464f70e630e71ac53a48c63d66058674ce/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/SecurityTestSuite.java?ref=93f19a464f70e630e71ac53a48c63d66058674ce",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.ignite.testsuites;\n \n+import org.apache.ignite.internal.processors.security.InvalidServerTest;\n import org.apache.ignite.internal.processors.security.cache.CacheOperationPermissionCheckTest;\n import org.apache.ignite.internal.processors.security.cache.EntryProcessorPermissionCheckTest;\n import org.apache.ignite.internal.processors.security.cache.ScanQueryPermissionCheckTest;\n@@ -52,6 +53,7 @@\n     DataStreamerRemoteSecurityContextCheckTest.class,\n     CacheLoadRemoteSecurityContextCheckTest.class,\n     ThinClientPermissionCheckTest.class,\n+    InvalidServerTest.class,\n })\n public class SecurityTestSuite {\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11959 NullPointerException If transaction failed and failure handler doesn't configured explicitly\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/3479460b6fcf8a77c487d14e15f044aa2cbffef7",
        "parent": "https://github.com/apache/ignite/commit/19fbf061e611649d45737bd395acd203fa641191",
        "bug_id": "ignite_10",
        "file": [
            {
                "sha": "11eac792662ea24c2b8ae952f1b12cf7d9ede26e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/3479460b6fcf8a77c487d14e15f044aa2cbffef7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/3479460b6fcf8a77c487d14e15f044aa2cbffef7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java?ref=3479460b6fcf8a77c487d14e15f044aa2cbffef7",
                "patch": "@@ -808,18 +808,16 @@ public final IgniteCheckedException heuristicException(Throwable ex) {\n     public void logTxFinishErrorSafe(@Nullable IgniteLogger log, boolean commit, Throwable e) {\n         assert e != null : \"Exception is expected\";\n \n-        final String fmt = \"Failed completing the transaction: [commit=%s, tx=%s, plc=%s]\";\n+        final String fmt = \"Failed completing the transaction: [commit=%s, tx=%s]\";\n \n         try {\n             // First try printing a full transaction. This is error prone.\n-            U.error(log, String.format(fmt, commit, this,\n-                cctx.gridConfig().getFailureHandler().getClass().getSimpleName()), e);\n+            U.error(log, String.format(fmt, commit, this), e);\n         }\n         catch (Throwable e0) {\n             e.addSuppressed(e0);\n \n-            U.error(log, String.format(fmt, commit, CU.txString(this),\n-                cctx.gridConfig().getFailureHandler().getClass().getSimpleName()), e);\n+            U.error(log, String.format(fmt, commit, CU.txString(this)), e);\n         }\n     }\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12234 .NET: Fix flaky tests\n\n* PersistenceTest.TestBaselineTopology\r\n* CancellationTest.TestTask (fix NPE when cancelling tasks)\r\n* CacheTest.TestAsyncCompletionOrder\r\n* DataStorageMetricsTest.TestDataStorageMetrics\r\n* MessagingTest.TestMessageDataTypes\r\n* ClientConnectionTest.TestClientDisposeWhileOperationsAreInProgress",
        "commit": "https://github.com/apache/ignite/commit/c5562e893693c985e5e488eed67a60c9191545c6",
        "parent": "https://github.com/apache/ignite/commit/b67f2df77b96e05f99a30d1abb8bb4d4d4707fe9",
        "bug_id": "ignite_11",
        "file": [
            {
                "sha": "2000bc6ad17e8d545b91480a312e487a29983221",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -121,6 +121,9 @@\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicLongTest.cs\" Link=\"DataStructures\\AtomicLongTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicReferenceTest.cs\" Link=\"DataStructures\\AtomicReferenceTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicSequenceTest.cs\" Link=\"DataStructures\\AtomicSequenceTest.cs\" />\n+    <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DisposeAction.cs\">\n+      <Link>Common\\DisposeAction.cs</Link>\n+    </Compile>\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\EventsTestLocalListeners.cs\" Link=\"Common\\EventsTestLocalListeners.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\IgniteConfigurationTest.cs\" Link=\"Common\\IgniteConfigurationTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\TestBase.cs\" Link=\"Common\\TestBase.cs\" />",
                "deletions": 0
            },
            {
                "sha": "0a7b97a2ac35615eac78016a83e889e3eed703e1",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -206,6 +206,7 @@\n     <Compile Include=\"Collections\\ReadOnlyDictionaryTest.cs\" />\n     <Compile Include=\"Common\\IgniteGuidTest.cs\" />\n     <Compile Include=\"Deployment\\RuntimeDependencyFunc.cs\" />\n+    <Compile Include=\"DisposeAction.cs\" />\n     <Compile Include=\"EnvVar.cs\" />\n     <Compile Include=\"EventsTestLocalListeners.cs\" />\n     <Compile Include=\"FailureHandlerTest.cs\" />",
                "deletions": 0
            },
            {
                "sha": "2956669e36e8b82238033fb8fd258e8e10107fea",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -571,8 +571,16 @@ public void TestTxDeadlockDetection()\n \n             Assert.AreEqual(2, aex.InnerExceptions.Count);\n \n-            var deadlockEx = aex.InnerExceptions.OfType<TransactionDeadlockException>().First();\n-            Assert.IsTrue(deadlockEx.Message.Trim().StartsWith(\"Deadlock detected:\"), deadlockEx.Message);\n+            var deadlockEx = aex.InnerExceptions.OfType<TransactionDeadlockException>().FirstOrDefault();\n+\n+            if (deadlockEx != null)\n+            {\n+                Assert.IsTrue(deadlockEx.Message.Trim().StartsWith(\"Deadlock detected:\"), deadlockEx.Message);\n+            }\n+            else\n+            {\n+                Assert.Fail(\"Unexpected exception: \" + aex);\n+            }\n         }\n \n         /// <summary>",
                "deletions": 2
            },
            {
                "sha": "fbaa3992c2d91b6c0ce4f1e504229e35195dcc52",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -81,7 +81,7 @@ public void TestDataStorageMetrics()\n \n                 Assert.GreaterOrEqual(metrics.LastCheckpointTotalPagesNumber, 1);\n                 Assert.AreEqual(0, metrics.LastCheckpointDataPagesNumber);\n-                Assert.AreEqual(0, metrics.LastCheckpointCopiedOnWritePagesNumber);\n+                Assert.GreaterOrEqual(metrics.LastCheckpointCopiedOnWritePagesNumber, 0);\n                 Assert.Greater(TimeSpan.FromSeconds(1), metrics.LastCheckpointLockWaitDuration);\n \n                 Assert.Greater(metrics.LastCheckpointPagesWriteDuration, TimeSpan.Zero);",
                "deletions": 1
            },
            {
                "sha": "85bb74902d9bea3a432e294234d83d9deb91b2a0",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -223,6 +223,8 @@ public void TestGridActivationNoPersistence()\n         /// Tests the baseline topology.\n         /// </summary>\n         [Test]\n+        [Ignore(\"SetBaselineAutoAdjustEnabledFlag is not supported in 8.7, and IGNITE_BASELINE_AUTO_ADJUST_ENABLED \" +\n+                \"can't be set reliably with environment variables.'\")]\n         public void TestBaselineTopology()\n         {\n             using (EnvVar.Set(\"IGNITE_BASELINE_AUTO_ADJUST_ENABLED\", \"false\"))",
                "deletions": 0
            },
            {
                "sha": "7f1a6f42411783628f028e40121f264dcf4d9fde",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -20,6 +20,7 @@ namespace Apache.Ignite.Core.Tests.Client.Cache\n     using System;\n     using System.Collections.Concurrent;\n     using System.Collections.Generic;\n+    using System.Diagnostics;\n     using System.Linq;\n     using System.Threading;\n     using Apache.Ignite.Core.Binary;\n@@ -846,9 +847,11 @@ public void TestPutGetAsyncMultithreaded()\n         public void TestAsyncCompletionOrder()\n         {\n             var cache = GetClientCache<int>();\n+            var cache2 = Client.GetOrCreateCache<int, int>(\"TestAsyncCompletionOrder\");\n \n-            var t1 = cache.PutAllAsync(Enumerable.Range(1, 100000).ToDictionary(x => x, x => x));\n-            var t2 = cache.PutAsync(-1, -1);\n+            cache.PutAll(Enumerable.Range(1, 500000).Select(x => new KeyValuePair<int, int>(x, x)));\n+            var t1 = cache.RemoveAllAsync();\n+            var t2 = cache2.PutAsync(1, 1);\n \n             t2.Wait();\n             Assert.IsFalse(t1.IsCompleted);",
                "deletions": 2
            },
            {
                "sha": "810cc0cc61a0cd6864c2da618244de541ec8a8d2",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -403,10 +403,10 @@ public void TestClientDisposeWhileOperationsAreInProgress()\n             using (var client = StartClient())\n             {\n                 var cache = client.GetOrCreateCache<int, int>(\"foo\");\n-                Parallel.For(0, count, new ParallelOptions {MaxDegreeOfParallelism = 16},\n+                Parallel.For(0, count, new ParallelOptions {MaxDegreeOfParallelism = Environment.ProcessorCount},\n                     i =>\n                     {\n-                        ops[i] = cache.PutAsync(i, i);\n+                        ops[i] = cache.PutAllAsync(Enumerable.Range(i*100, 100).ToDictionary(x => x, x => x));\n                     });\n             }\n ",
                "deletions": 2
            },
            {
                "sha": "0e98aa25f3ec8827c5f34195f1aa2ac8db30e823",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -142,7 +142,8 @@ protected virtual IgniteClientConfiguration GetClientConfiguration()\n         {\n             return new IgniteClientConfiguration\n             {\n-                Endpoints = new List<string> { IPAddress.Loopback.ToString() }\n+                Endpoints = new List<string> { IPAddress.Loopback.ToString() },\n+                SocketTimeout = TimeSpan.FromSeconds(15)\n             };\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "1a275386d8b4f33f0d302acab71cfa9bdc105f0e",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -30,7 +30,10 @@ namespace Apache.Ignite.Core.Tests.Compute\n     /// </summary>\n     public class CancellationTest : SpringTestBase\n     {\n-        public CancellationTest() \n+        /** */\n+        private const int MillisecondsTimeout = 50;\n+\n+        public CancellationTest()\n             : base(\"config\\\\compute\\\\compute-grid1.xml\", \"config\\\\compute\\\\compute-grid2.xml\")\n         {\n             // No-op.\n@@ -92,17 +95,19 @@ private void TestTask(Func<ICompute, CancellationToken, System.Threading.Tasks.T\n         {\n             Job.CancelCount = 0;\n \n-            TestClosure(runner);\n+            TestClosure(runner, MillisecondsTimeout * 2);\n \n             Assert.IsTrue(TestUtils.WaitForCondition(() => Job.CancelCount > 0, 5000));\n         }\n \n-        private void TestClosure(Func<ICompute, CancellationToken, System.Threading.Tasks.Task> runner)\n+        private void TestClosure(Func<ICompute, CancellationToken, System.Threading.Tasks.Task> runner, int delay = 0)\n         {\n             using (var cts = new CancellationTokenSource())\n             {\n                 var task = runner(Compute, cts.Token);\n \n+                Thread.Sleep(delay);\n+\n                 Assert.IsFalse(task.IsCanceled);\n \n                 cts.Cancel();\n@@ -148,7 +153,7 @@ public static int CancelCount\n \n             public int Execute()\n             {\n-                Thread.Sleep(50);\n+                Thread.Sleep(MillisecondsTimeout);\n                 return 1;\n             }\n \n@@ -163,7 +168,7 @@ private class ComputeBiFunc : IComputeFunc<int, int>\n         {\n             public int Invoke(int arg)\n             {\n-                Thread.Sleep(50);\n+                Thread.Sleep(MillisecondsTimeout);\n                 return arg;\n             }\n         }",
                "deletions": 5
            },
            {
                "sha": "c76365b59d779222a2fe2d161ee99a6d661b074c",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "status": "added",
                "changes": 47,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests\n+{\n+    using System;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Wraps an action to be executed on Dispose call.\n+    /// </summary>\n+    public class DisposeAction : IDisposable\n+    {\n+        /** */\n+        private readonly Action _action;\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"DisposeAction\"/>.\n+        /// </summary>\n+        /// <param name=\"action\">Action.</param>\n+        public DisposeAction(Action action)\n+        {\n+            IgniteArgumentCheck.NotNull(action, \"action\");\n+            _action = action;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public void Dispose()\n+        {\n+            _action();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e1f86409c5e6f9c0b07c73813a3a79a0bc7c362a",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "status": "modified",
                "changes": 31,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -38,36 +38,7 @@ public static IDisposable Set(string name, string value)\n             var oldValue = Environment.GetEnvironmentVariable(name);\n             Environment.SetEnvironmentVariable(name, value);\n \n-            return new EnvVarDisposableRestore(name, oldValue);\n-        }\n-\n-        /// <summary>\n-        /// Disposable helper.\n-        /// </summary>\n-        private class EnvVarDisposableRestore : IDisposable\n-        {\n-            /** */\n-            private readonly string _name;\n-\n-            /** */\n-            private readonly string _value;\n-\n-            /// <summary>\n-            /// Ctor.\n-            /// </summary>\n-            /// <param name=\"name\">Name.</param>\n-            /// <param name=\"value\">Value.</param>\n-            public EnvVarDisposableRestore(string name, string value)\n-            {\n-                _name = name;\n-                _value = value;\n-            }\n-\n-            /** <inheritDoc /> */\n-            public void Dispose()\n-            {\n-                Environment.SetEnvironmentVariable(_name, _value);\n-            }\n+            return new DisposeAction(() => Environment.SetEnvironmentVariable(name, oldValue));\n         }\n     }\n }",
                "deletions": 30
            },
            {
                "sha": "af1096be185dd54c0a1364e8dcd9d3a97b3d52fd",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -106,7 +106,6 @@ public void TearDown()\n         [Test]\n         public void TestMessageDataTypes()\n         {\n-            var topic = \"dataTypes\";\n             object lastMsg = null;\n             var evt = new AutoResetEvent(false);\n \n@@ -120,16 +119,15 @@ public void TestMessageDataTypes()\n                 return true;\n             });\n \n-            messaging1.LocalListen(listener, topic);\n-\n             foreach (var msg in Objects.Where(x => x != null))\n             {\n+                var topic = \"dataTypes\" + Guid.NewGuid();\n+                messaging1.LocalListen(listener, topic);\n                 messaging2.Send(msg, topic);\n                 evt.WaitOne(500);\n                 Assert.AreEqual(msg, lastMsg);\n+                messaging1.StopLocalListen(listener, topic);\n             }\n-\n-            messaging1.StopLocalListen(listener, topic);\n         }\n \n         /// <summary>",
                "deletions": 5
            },
            {
                "sha": "bc0065fbfab516683319cc4cea338703b144d3c1",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -108,7 +108,7 @@ public static void RunTestInNewProcess(string fixtureName, string testName)\n             {\n                 IgniteProcess.AttachProcessConsoleReader(proc);\n \n-                Assert.IsTrue(proc.WaitForExit(19000));\n+                Assert.IsTrue(proc.WaitForExit(30000));\n                 Assert.AreEqual(0, proc.ExitCode);\n             }\n             finally",
                "deletions": 1
            },
            {
                "sha": "14569f6c47f7fd7c75d4a9445d92c52d98a7f744",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -272,11 +272,19 @@ private void HandleResponse(byte[] response)\n             Request req;\n             if (!_requests.TryRemove(requestId, out req))\n             {\n+                if (_exception != null)\n+                {\n+                    return;\n+                }\n+\n                 // Response with unknown id.\n                 throw new IgniteClientException(\"Invalid thin client response id: \" + requestId);\n             }\n \n-            req.CompletionSource.TrySetResult(stream);\n+            if (req != null)\n+            {\n+                req.CompletionSource.TrySetResult(stream);\n+            }\n         }\n \n         /// <summary>\n@@ -659,12 +667,11 @@ private void CheckTimeouts(object _)\n                 {\n                     var req = pair.Value;\n \n-                    if (req.Duration > _timeout)\n+                    if (req != null && req.Duration > _timeout)\n                     {\n-                        Console.WriteLine(req.Duration);\n-                        req.CompletionSource.TrySetException(new SocketException((int)SocketError.TimedOut));\n+                        _requests[pair.Key] = null;\n \n-                        _requests.TryRemove(pair.Key, out req);\n+                        req.CompletionSource.TrySetException(new SocketException((int)SocketError.TimedOut));\n                     }\n                 }\n             }\n@@ -711,7 +718,7 @@ private void EndRequestsWithError()\n                 foreach (var reqId in _requests.Keys.ToArray())\n                 {\n                     Request req;\n-                    if (_requests.TryRemove(reqId, out req))\n+                    if (_requests.TryRemove(reqId, out req) && req != null)\n                     {\n                         req.CompletionSource.TrySetException(ex);\n                     }",
                "deletions": 6
            },
            {
                "sha": "c2490eeb58812ac8233d6546394c3ff7d115cf03",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -154,4 +154,4 @@ public MethodId(Env env)\n             PlatformUtilsReallocate = env.GetStaticMethodId(PlatformUtils, \"reallocate\", \"(JI)V\");\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            },
            {
                "sha": "7b834ce81b67272c5456e3957a9770ff66d6fe6f",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "blob_url": "https://github.com/apache/ignite/blob/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "raw_url": "https://github.com/apache/ignite/raw/c5562e893693c985e5e488eed67a60c9191545c6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs?ref=c5562e893693c985e5e488eed67a60c9191545c6",
                "patch": "@@ -518,7 +518,13 @@ private long ComputeJobExecute(long memPtr)\n \n         private long ComputeJobCancel(long jobPtr)\n         {\n-            Job(jobPtr).Cancel();\n+            var job = Job(jobPtr);\n+\n+            // Job can be null: some jobs are destroyed in ComputeTaskComplete\n+            if (job != null)\n+            {\n+                job.Cancel();\n+            }\n \n             return 0;\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12123 Cache throws npe at {null, null, null} array key. - Fixes #6828.\n\nSigned-off-by: Pavel Kovalenko <jokserfn@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/8c9e5e46e102bcdd6e99f9f46197d834ebc9a428",
        "parent": "https://github.com/apache/ignite/commit/6afec64c208a5a6e52e8a18576aa14a748ad745b",
        "bug_id": "ignite_12",
        "file": [
            {
                "sha": "8c091961476f8710ad9cc563c27bb77a0270a384",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/8c9e5e46e102bcdd6e99f9f46197d834ebc9a428/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/8c9e5e46e102bcdd6e99f9f46197d834ebc9a428/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=8c9e5e46e102bcdd6e99f9f46197d834ebc9a428",
                "patch": "@@ -5366,6 +5366,9 @@ public static void writeMap(ObjectOutput out, Map<?, ?> map) throws IOException\n      * @param obj Object.\n      */\n     public static int hashCode(Object obj) {\n+        if(obj == null)\n+            return 0;\n+\n         if (obj.getClass().isArray()) {\n             if (obj instanceof byte[])\n                 return Arrays.hashCode((byte[])obj);",
                "deletions": 0
            },
            {
                "sha": "52d3427a8e0e106ddf334762a41909fa41fba6cb",
                "filename": "modules/core/src/test/java/org/apache/ignite/cache/store/StoreArrayKeyTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/8c9e5e46e102bcdd6e99f9f46197d834ebc9a428/modules/core/src/test/java/org/apache/ignite/cache/store/StoreArrayKeyTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/8c9e5e46e102bcdd6e99f9f46197d834ebc9a428/modules/core/src/test/java/org/apache/ignite/cache/store/StoreArrayKeyTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/cache/store/StoreArrayKeyTest.java?ref=8c9e5e46e102bcdd6e99f9f46197d834ebc9a428",
                "patch": "@@ -82,15 +82,15 @@\n             new String[][] {new String[] {\"a\", \"b\", \"c\"}, new String[] {\"c\", \"b\", \"a\"}, new String[] {\"a\", \"b\", \"c\"}},\n             new Object[][] {\n                 new String[][] {\n-                    new String[] {\"a\", \"b\", \"c\"},\n-                    new String[] {\"a\", \"b\", \"c\"},\n-                    new String[] {\"a\", \"b\", \"c\"}\n+                    new String[] {\"a\", \"b\", null},\n+                    new String[] {\"a\", null, \"c\"},\n+                    new String[] {null, \"b\", \"c\"}\n                 },\n-                new String[] {\"c\", \"b\", \"a\"},\n+                new String[] {null, null, null},\n                 new String[][] {\n-                    new String[] {\"a\", \"b\", \"c\"},\n-                    new String[] {\"a\", \"b\", \"c\"},\n-                    new String[] {\"a\", \"b\", \"c\"}\n+                    new String[] {\"a\", \"b\", null},\n+                    new String[] {\"a\", null, \"c\"},\n+                    new String[] {null, \"b\", \"c\"}\n                 }}\n         );\n     }",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12234 .NET: Fix flaky tests\n\n* PersistenceTest.TestBaselineTopology (use Java system properties instead of env vars)\n* CancellationTest.TestTask (fix NPE when cancelling tasks)\n* CacheTest.TestAsyncCompletionOrder\n* DataStorageMetricsTest.TestDataStorageMetrics\n* MessagingTest.TestMessageDataTypes\n* ClientConnectionTest.TestClientDisposeWhileOperationsAreInProgress",
        "commit": "https://github.com/apache/ignite/commit/bcc416a5b0954b87037e363eadf190e2eceb373b",
        "parent": "https://github.com/apache/ignite/commit/b67f2df77b96e05f99a30d1abb8bb4d4d4707fe9",
        "bug_id": "ignite_13",
        "file": [
            {
                "sha": "2000bc6ad17e8d545b91480a312e487a29983221",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests.DotNetCore/Apache.Ignite.Core.Tests.DotNetCore.csproj?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -121,6 +121,9 @@\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicLongTest.cs\" Link=\"DataStructures\\AtomicLongTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicReferenceTest.cs\" Link=\"DataStructures\\AtomicReferenceTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DataStructures\\AtomicSequenceTest.cs\" Link=\"DataStructures\\AtomicSequenceTest.cs\" />\n+    <Compile Include=\"..\\Apache.Ignite.Core.Tests\\DisposeAction.cs\">\n+      <Link>Common\\DisposeAction.cs</Link>\n+    </Compile>\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\EventsTestLocalListeners.cs\" Link=\"Common\\EventsTestLocalListeners.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\IgniteConfigurationTest.cs\" Link=\"Common\\IgniteConfigurationTest.cs\" />\n     <Compile Include=\"..\\Apache.Ignite.Core.Tests\\TestBase.cs\" Link=\"Common\\TestBase.cs\" />",
                "deletions": 0
            },
            {
                "sha": "0a7b97a2ac35615eac78016a83e889e3eed703e1",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Apache.Ignite.Core.Tests.csproj?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -206,6 +206,7 @@\n     <Compile Include=\"Collections\\ReadOnlyDictionaryTest.cs\" />\n     <Compile Include=\"Common\\IgniteGuidTest.cs\" />\n     <Compile Include=\"Deployment\\RuntimeDependencyFunc.cs\" />\n+    <Compile Include=\"DisposeAction.cs\" />\n     <Compile Include=\"EnvVar.cs\" />\n     <Compile Include=\"EventsTestLocalListeners.cs\" />\n     <Compile Include=\"FailureHandlerTest.cs\" />",
                "deletions": 0
            },
            {
                "sha": "2956669e36e8b82238033fb8fd258e8e10107fea",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheAbstractTransactionalTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -571,8 +571,16 @@ public void TestTxDeadlockDetection()\n \n             Assert.AreEqual(2, aex.InnerExceptions.Count);\n \n-            var deadlockEx = aex.InnerExceptions.OfType<TransactionDeadlockException>().First();\n-            Assert.IsTrue(deadlockEx.Message.Trim().StartsWith(\"Deadlock detected:\"), deadlockEx.Message);\n+            var deadlockEx = aex.InnerExceptions.OfType<TransactionDeadlockException>().FirstOrDefault();\n+\n+            if (deadlockEx != null)\n+            {\n+                Assert.IsTrue(deadlockEx.Message.Trim().StartsWith(\"Deadlock detected:\"), deadlockEx.Message);\n+            }\n+            else\n+            {\n+                Assert.Fail(\"Unexpected exception: \" + aex);\n+            }\n         }\n \n         /// <summary>",
                "deletions": 2
            },
            {
                "sha": "fbaa3992c2d91b6c0ce4f1e504229e35195dcc52",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/DataStorageMetricsTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -81,7 +81,7 @@ public void TestDataStorageMetrics()\n \n                 Assert.GreaterOrEqual(metrics.LastCheckpointTotalPagesNumber, 1);\n                 Assert.AreEqual(0, metrics.LastCheckpointDataPagesNumber);\n-                Assert.AreEqual(0, metrics.LastCheckpointCopiedOnWritePagesNumber);\n+                Assert.GreaterOrEqual(metrics.LastCheckpointCopiedOnWritePagesNumber, 0);\n                 Assert.Greater(TimeSpan.FromSeconds(1), metrics.LastCheckpointLockWaitDuration);\n \n                 Assert.Greater(metrics.LastCheckpointPagesWriteDuration, TimeSpan.Zero);",
                "deletions": 1
            },
            {
                "sha": "85bb74902d9bea3a432e294234d83d9deb91b2a0",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -223,6 +223,8 @@ public void TestGridActivationNoPersistence()\n         /// Tests the baseline topology.\n         /// </summary>\n         [Test]\n+        [Ignore(\"SetBaselineAutoAdjustEnabledFlag is not supported in 8.7, and IGNITE_BASELINE_AUTO_ADJUST_ENABLED \" +\n+                \"can't be set reliably with environment variables.'\")]\n         public void TestBaselineTopology()\n         {\n             using (EnvVar.Set(\"IGNITE_BASELINE_AUTO_ADJUST_ENABLED\", \"false\"))",
                "deletions": 0
            },
            {
                "sha": "7f1a6f42411783628f028e40121f264dcf4d9fde",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/Cache/CacheTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -20,6 +20,7 @@ namespace Apache.Ignite.Core.Tests.Client.Cache\n     using System;\n     using System.Collections.Concurrent;\n     using System.Collections.Generic;\n+    using System.Diagnostics;\n     using System.Linq;\n     using System.Threading;\n     using Apache.Ignite.Core.Binary;\n@@ -846,9 +847,11 @@ public void TestPutGetAsyncMultithreaded()\n         public void TestAsyncCompletionOrder()\n         {\n             var cache = GetClientCache<int>();\n+            var cache2 = Client.GetOrCreateCache<int, int>(\"TestAsyncCompletionOrder\");\n \n-            var t1 = cache.PutAllAsync(Enumerable.Range(1, 100000).ToDictionary(x => x, x => x));\n-            var t2 = cache.PutAsync(-1, -1);\n+            cache.PutAll(Enumerable.Range(1, 500000).Select(x => new KeyValuePair<int, int>(x, x)));\n+            var t1 = cache.RemoveAllAsync();\n+            var t2 = cache2.PutAsync(1, 1);\n \n             t2.Wait();\n             Assert.IsFalse(t1.IsCompleted);",
                "deletions": 2
            },
            {
                "sha": "810cc0cc61a0cd6864c2da618244de541ec8a8d2",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -403,10 +403,10 @@ public void TestClientDisposeWhileOperationsAreInProgress()\n             using (var client = StartClient())\n             {\n                 var cache = client.GetOrCreateCache<int, int>(\"foo\");\n-                Parallel.For(0, count, new ParallelOptions {MaxDegreeOfParallelism = 16},\n+                Parallel.For(0, count, new ParallelOptions {MaxDegreeOfParallelism = Environment.ProcessorCount},\n                     i =>\n                     {\n-                        ops[i] = cache.PutAsync(i, i);\n+                        ops[i] = cache.PutAllAsync(Enumerable.Range(i*100, 100).ToDictionary(x => x, x => x));\n                     });\n             }\n ",
                "deletions": 2
            },
            {
                "sha": "0e98aa25f3ec8827c5f34195f1aa2ac8db30e823",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientTestBase.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -142,7 +142,8 @@ protected virtual IgniteClientConfiguration GetClientConfiguration()\n         {\n             return new IgniteClientConfiguration\n             {\n-                Endpoints = new List<string> { IPAddress.Loopback.ToString() }\n+                Endpoints = new List<string> { IPAddress.Loopback.ToString() },\n+                SocketTimeout = TimeSpan.FromSeconds(15)\n             };\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "1a275386d8b4f33f0d302acab71cfa9bdc105f0e",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Compute/CancellationTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -30,7 +30,10 @@ namespace Apache.Ignite.Core.Tests.Compute\n     /// </summary>\n     public class CancellationTest : SpringTestBase\n     {\n-        public CancellationTest() \n+        /** */\n+        private const int MillisecondsTimeout = 50;\n+\n+        public CancellationTest()\n             : base(\"config\\\\compute\\\\compute-grid1.xml\", \"config\\\\compute\\\\compute-grid2.xml\")\n         {\n             // No-op.\n@@ -92,17 +95,19 @@ private void TestTask(Func<ICompute, CancellationToken, System.Threading.Tasks.T\n         {\n             Job.CancelCount = 0;\n \n-            TestClosure(runner);\n+            TestClosure(runner, MillisecondsTimeout * 2);\n \n             Assert.IsTrue(TestUtils.WaitForCondition(() => Job.CancelCount > 0, 5000));\n         }\n \n-        private void TestClosure(Func<ICompute, CancellationToken, System.Threading.Tasks.Task> runner)\n+        private void TestClosure(Func<ICompute, CancellationToken, System.Threading.Tasks.Task> runner, int delay = 0)\n         {\n             using (var cts = new CancellationTokenSource())\n             {\n                 var task = runner(Compute, cts.Token);\n \n+                Thread.Sleep(delay);\n+\n                 Assert.IsFalse(task.IsCanceled);\n \n                 cts.Cancel();\n@@ -148,7 +153,7 @@ public static int CancelCount\n \n             public int Execute()\n             {\n-                Thread.Sleep(50);\n+                Thread.Sleep(MillisecondsTimeout);\n                 return 1;\n             }\n \n@@ -163,7 +168,7 @@ private class ComputeBiFunc : IComputeFunc<int, int>\n         {\n             public int Invoke(int arg)\n             {\n-                Thread.Sleep(50);\n+                Thread.Sleep(MillisecondsTimeout);\n                 return arg;\n             }\n         }",
                "deletions": 5
            },
            {
                "sha": "4b281b159b080be6f3faf8b50632ec6cbb87b994",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/DisposeAction.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests\n+{\n+    using System;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Wraps an action to be executed on Dispose call.\n+    /// </summary>\n+    public class DisposeAction : IDisposable\n+    {\n+        /** */\n+        private readonly Action _action;\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"DisposeAction\"/>.\n+        /// </summary>\n+        /// <param name=\"action\">Action.</param>\n+        public DisposeAction(Action action)\n+        {\n+            IgniteArgumentCheck.NotNull(action, \"action\");\n+            _action = action;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public void Dispose()\n+        {\n+            _action();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e1f86409c5e6f9c0b07c73813a3a79a0bc7c362a",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs",
                "status": "modified",
                "changes": 31,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/EnvVar.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -38,36 +38,7 @@ public static IDisposable Set(string name, string value)\n             var oldValue = Environment.GetEnvironmentVariable(name);\n             Environment.SetEnvironmentVariable(name, value);\n \n-            return new EnvVarDisposableRestore(name, oldValue);\n-        }\n-\n-        /// <summary>\n-        /// Disposable helper.\n-        /// </summary>\n-        private class EnvVarDisposableRestore : IDisposable\n-        {\n-            /** */\n-            private readonly string _name;\n-\n-            /** */\n-            private readonly string _value;\n-\n-            /// <summary>\n-            /// Ctor.\n-            /// </summary>\n-            /// <param name=\"name\">Name.</param>\n-            /// <param name=\"value\">Value.</param>\n-            public EnvVarDisposableRestore(string name, string value)\n-            {\n-                _name = name;\n-                _value = value;\n-            }\n-\n-            /** <inheritDoc /> */\n-            public void Dispose()\n-            {\n-                Environment.SetEnvironmentVariable(_name, _value);\n-            }\n+            return new DisposeAction(() => Environment.SetEnvironmentVariable(name, oldValue));\n         }\n     }\n }",
                "deletions": 30
            },
            {
                "sha": "af1096be185dd54c0a1364e8dcd9d3a97b3d52fd",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/MessagingTest.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -106,7 +106,6 @@ public void TearDown()\n         [Test]\n         public void TestMessageDataTypes()\n         {\n-            var topic = \"dataTypes\";\n             object lastMsg = null;\n             var evt = new AutoResetEvent(false);\n \n@@ -120,16 +119,15 @@ public void TestMessageDataTypes()\n                 return true;\n             });\n \n-            messaging1.LocalListen(listener, topic);\n-\n             foreach (var msg in Objects.Where(x => x != null))\n             {\n+                var topic = \"dataTypes\" + Guid.NewGuid();\n+                messaging1.LocalListen(listener, topic);\n                 messaging2.Send(msg, topic);\n                 evt.WaitOne(500);\n                 Assert.AreEqual(msg, lastMsg);\n+                messaging1.StopLocalListen(listener, topic);\n             }\n-\n-            messaging1.StopLocalListen(listener, topic);\n         }\n \n         /// <summary>",
                "deletions": 5
            },
            {
                "sha": "bc0065fbfab516683319cc4cea338703b144d3c1",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/TestUtils.Windows.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -108,7 +108,7 @@ public static void RunTestInNewProcess(string fixtureName, string testName)\n             {\n                 IgniteProcess.AttachProcessConsoleReader(proc);\n \n-                Assert.IsTrue(proc.WaitForExit(19000));\n+                Assert.IsTrue(proc.WaitForExit(30000));\n                 Assert.AreEqual(0, proc.ExitCode);\n             }\n             finally",
                "deletions": 1
            },
            {
                "sha": "14569f6c47f7fd7c75d4a9445d92c52d98a7f744",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -272,11 +272,19 @@ private void HandleResponse(byte[] response)\n             Request req;\n             if (!_requests.TryRemove(requestId, out req))\n             {\n+                if (_exception != null)\n+                {\n+                    return;\n+                }\n+\n                 // Response with unknown id.\n                 throw new IgniteClientException(\"Invalid thin client response id: \" + requestId);\n             }\n \n-            req.CompletionSource.TrySetResult(stream);\n+            if (req != null)\n+            {\n+                req.CompletionSource.TrySetResult(stream);\n+            }\n         }\n \n         /// <summary>\n@@ -659,12 +667,11 @@ private void CheckTimeouts(object _)\n                 {\n                     var req = pair.Value;\n \n-                    if (req.Duration > _timeout)\n+                    if (req != null && req.Duration > _timeout)\n                     {\n-                        Console.WriteLine(req.Duration);\n-                        req.CompletionSource.TrySetException(new SocketException((int)SocketError.TimedOut));\n+                        _requests[pair.Key] = null;\n \n-                        _requests.TryRemove(pair.Key, out req);\n+                        req.CompletionSource.TrySetException(new SocketException((int)SocketError.TimedOut));\n                     }\n                 }\n             }\n@@ -711,7 +718,7 @@ private void EndRequestsWithError()\n                 foreach (var reqId in _requests.Keys.ToArray())\n                 {\n                     Request req;\n-                    if (_requests.TryRemove(reqId, out req))\n+                    if (_requests.TryRemove(reqId, out req) && req != null)\n                     {\n                         req.CompletionSource.TrySetException(ex);\n                     }",
                "deletions": 6
            },
            {
                "sha": "c2490eeb58812ac8233d6546394c3ff7d115cf03",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/Jni/MethodId.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -154,4 +154,4 @@ public MethodId(Env env)\n             PlatformUtilsReallocate = env.GetStaticMethodId(PlatformUtils, \"reallocate\", \"(JI)V\");\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            },
            {
                "sha": "7b834ce81b67272c5456e3957a9770ff66d6fe6f",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "blob_url": "https://github.com/apache/ignite/blob/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "raw_url": "https://github.com/apache/ignite/raw/bcc416a5b0954b87037e363eadf190e2eceb373b/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Unmanaged/UnmanagedCallbacks.cs?ref=bcc416a5b0954b87037e363eadf190e2eceb373b",
                "patch": "@@ -518,7 +518,13 @@ private long ComputeJobExecute(long memPtr)\n \n         private long ComputeJobCancel(long jobPtr)\n         {\n-            Job(jobPtr).Cancel();\n+            var job = Job(jobPtr);\n+\n+            // Job can be null: some jobs are destroyed in ComputeTaskComplete\n+            if (job != null)\n+            {\n+                job.Cancel();\n+            }\n \n             return 0;\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-12036 Changing baseline via set command may cause NPEs if configured NodeFilter takes node attributes into account - Fixes #6743.\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/e7864f198539f87a38e993cc68f0931dca195534",
        "parent": "https://github.com/apache/ignite/commit/1392332d84a1fc21700292ef4d16d028b23f01de",
        "bug_id": "ignite_14",
        "file": [
            {
                "sha": "a3a69e19d9659ec091f983ffc49ceef674328dc7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/cluster/DetachedClusterNode.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/main/java/org/apache/ignite/internal/cluster/DetachedClusterNode.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/main/java/org/apache/ignite/internal/cluster/DetachedClusterNode.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/cluster/DetachedClusterNode.java?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -30,7 +30,9 @@\n import org.jetbrains.annotations.Nullable;\n \n /**\n- * Representation of cluster node that isn't currently present in cluster.\n+ * Representation of cluster node that either isn't currently present in cluster, or semantically detached.\n+ * For example nodes returned from {@code BaselineTopology.currentBaseline()} are always considered as\n+ * semantically detached, even if they are currently present in cluster.\n  */\n public class DetachedClusterNode implements ClusterNode {\n     /** */",
                "deletions": 1
            },
            {
                "sha": "6249301bbb82e5c540c1e4819de1a81c2bc40c8c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java",
                "status": "modified",
                "changes": 21,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -29,7 +29,10 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.ConcurrentLinkedQueue;\n@@ -404,6 +407,22 @@ private void validateBeforeBaselineChange(Collection<? extends BaselineNode> bas\n             if (baselineTop.isEmpty())\n                 throw new IgniteException(\"BaselineTopology must contain at least one node.\");\n \n+            List<BaselineNode> currBlT = Optional.ofNullable(ctx.state().clusterState().baselineTopology()).\n+                map(BaselineTopology::currentBaseline).orElse(Collections.emptyList());\n+\n+            Collection<ClusterNode> srvrs = ctx.cluster().get().forServers().nodes();\n+\n+            for (BaselineNode node : baselineTop) {\n+                Object consistentId = node.consistentId();\n+\n+                if (currBlT.stream().noneMatch(\n+                    currBlTNode -> Objects.equals(currBlTNode.consistentId(), consistentId)) &&\n+                    srvrs.stream().noneMatch(\n+                        currServersNode -> Objects.equals(currServersNode.consistentId(), consistentId)))\n+                    throw new IgniteException(\"Check arguments. Node with consistent ID [\" + consistentId +\n+                        \"] not found in server nodes.\");\n+            }\n+\n             Collection<Object> onlineNodes = onlineBaselineNodesRequestedForRemoval(baselineTop);\n \n             if (onlineNodes != null) {\n@@ -473,7 +492,7 @@ private void setBaselineTopology(long topVer, boolean isBaselineAutoAdjust) {\n             Collection<BaselineNode> target = new ArrayList<>(top.size());\n \n             for (ClusterNode node : top) {\n-                if (!node.isClient())\n+                if (!node.isClient() && !node.isDaemon())\n                     target.add(node);\n             }\n ",
                "deletions": 1
            },
            {
                "sha": "6d80c1963aff20835b40160a55d70701c3b27498",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CacheBaselineTopologyTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CacheBaselineTopologyTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CacheBaselineTopologyTest.java",
                "status": "modified",
                "changes": 62,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CacheBaselineTopologyTest.java?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -28,8 +28,11 @@\n import java.util.Random;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteSystemProperties;\n import org.apache.ignite.cache.CacheAtomicityMode;\n import org.apache.ignite.cache.CacheMode;\n@@ -47,6 +50,7 @@\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n+import org.apache.ignite.internal.cluster.DetachedClusterNode;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionFullMap;\n import org.apache.ignite.internal.processors.cache.distributed.dht.topology.GridDhtPartitionState;\n@@ -505,7 +509,8 @@ private void testBaselineTopologyChanges(boolean fromClient) throws Exception {\n \n         Set<ClusterNode> blt2 = new HashSet<>(ignite.cluster().nodes());\n \n-        ignite.cluster().setBaselineTopology(baselineNodes(blt2));\n+        ignite.cluster().setBaselineTopology(baselineNodes(\n+            blt2.stream().filter(n -> !n.isClient()).collect(Collectors.toSet())));\n \n         awaitPartitionMapExchange();\n \n@@ -526,7 +531,8 @@ private void testBaselineTopologyChanges(boolean fromClient) throws Exception {\n \n         Set<ClusterNode> blt3 = new HashSet<>(ignite.cluster().nodes());\n \n-        ignite.cluster().setBaselineTopology(baselineNodes(blt3));\n+        ignite.cluster().setBaselineTopology(baselineNodes(\n+            blt3.stream().filter(n -> !n.isClient()).collect(Collectors.toSet())));\n \n         awaitPartitionMapExchange();\n \n@@ -1009,6 +1015,58 @@ public void testAffinityAssignmentChangedAfterRestart() throws Exception {\n             assertEquals(\"k=\" + k, Integer.valueOf(k), cache.get(k));\n     }\n \n+    /**\n+     * Verify that in case of setting baseline topology with offline node among others\n+     * {@link IgniteException} is thrown.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"unchecked\", \"ThrowableNotThrown\"})\n+    public void testSettingBaselineTopologyWithOfflineNode() throws Exception {\n+        Ignite ignite = startGrids(2);\n+\n+        ignite.cluster().active(true);\n+\n+        ignite(0).createCache(defaultCacheConfiguration().setNodeFilter(\n+            (IgnitePredicate<ClusterNode>)node -> node.attribute(\"some-attr\") != null));\n+\n+        Collection<ClusterNode> nodes = new ArrayList<>(ignite.cluster().nodes());\n+        nodes.add(new DetachedClusterNode(\"non-existing-node-id\", null));\n+\n+        GridTestUtils.assertThrows(log, (Callable<Void>)() -> {\n+            ignite.cluster().setBaselineTopology(nodes);\n+\n+            return null;\n+        }, IgniteException.class, \"Check arguments. Node with consistent ID [non-existing-node-id] \" +\n+            \"not found in server nodes.\");\n+    }\n+\n+    /**\n+     * Verify that in case of setting baseline topology with offline node among others {@link IgniteException} is\n+     * thrown.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings({\"unchecked\", \"ThrowableNotThrown\"})\n+    public void testSettingBaselineTopologyWithOfflineNodeFromOldTopology() throws Exception {\n+        Ignite ignite = startGrids(2);\n+\n+        ignite.cluster().active(true);\n+\n+        stopGrid(1);\n+\n+        ignite.cluster().setBaselineTopology(ignite.cluster().topologyVersion());\n+\n+        GridTestUtils.assertThrows(log, (Callable<Void>)() -> {\n+            ignite.cluster().setBaselineTopology(ignite.cluster().topologyVersion() - 1);\n+\n+            return null;\n+        }, IgniteException.class, \"Check arguments. Node with consistent ID \" +\n+            \"[distributed.CacheBaselineTopologyTest1] not found in server nodes.\");\n+    }\n+\n     /** */\n     private Collection<BaselineNode> baselineNodes(Collection<ClusterNode> clNodes) {\n         Collection<BaselineNode> res = new ArrayList<>(clNodes.size());",
                "deletions": 2
            },
            {
                "sha": "6fec27081c0dc9a18c04c8ec0b300223feb25f70",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgniteBaselineAffinityTopologyActivationTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgniteBaselineAffinityTopologyActivationTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgniteBaselineAffinityTopologyActivationTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgniteBaselineAffinityTopologyActivationTest.java?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -758,39 +758,6 @@ public void testActivationHashIsNotUpdatedOnMultipleActivationRequests() throws\n         verifyBaselineTopologyOnNodes(verifier, new Ignite[] {nodeA, nodeB});\n     }\n \n-    /**\n-     * Verifies that grid is autoactivated when full BaselineTopology is preset even on one node\n-     * and then all other nodes from BaselineTopology are started.\n-     */\n-    @Test\n-    public void testAutoActivationWithBaselineTopologyPreset() throws Exception {\n-        Ignite ig = startGridWithConsistentId(\"A\");\n-\n-        ig.cluster().active(true);\n-\n-        ig.cluster().setBaselineTopology(Arrays.asList(new BaselineNode[] {\n-            createBaselineNodeWithConsId(\"A\"), createBaselineNodeWithConsId(\"B\"), createBaselineNodeWithConsId(\"C\")}));\n-\n-        stopAllGrids();\n-\n-        final Ignite ig1 = startGridWithConsistentId(\"A\");\n-\n-        startGridWithConsistentId(\"B\");\n-\n-        startGridWithConsistentId(\"C\");\n-\n-        boolean activated = GridTestUtils.waitForCondition(\n-            new GridAbsPredicate() {\n-               @Override public boolean apply() {\n-                   return ig1.cluster().active();\n-               }\n-            },\n-            10_000\n-        );\n-\n-        assertTrue(activated);\n-    }\n-\n     /**\n      * Creates BaselineNode with specific attribute indicating that this node is not client.\n      */",
                "deletions": 33
            },
            {
                "sha": "983395017a3f88341fc538195c89f6eb2569c795",
                "filename": "modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -54,6 +54,7 @@\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteCluster;\n import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;\n import org.apache.ignite.cluster.BaselineNode;\n import org.apache.ignite.cluster.ClusterNode;\n@@ -2702,6 +2703,26 @@ public void testUnusedWalDelete() throws Exception {\n         assertNotContains(log, out, \"error\");\n     }\n \n+    /**\n+     * Verify that in case of setting baseline topology with offline node among others\n+     * {@link IgniteException} is thrown.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void setConsistenceIdsWithOfflineBaselineNode() throws Exception {\n+        Ignite ignite = startGrids(2);\n+\n+        ignite.cluster().active(true);\n+\n+        ignite(0).createCache(defaultCacheConfiguration().setNodeFilter(\n+            (IgnitePredicate<ClusterNode>)node -> node.attribute(\"some-attr\") != null));\n+\n+        assertEquals(EXIT_CODE_UNEXPECTED_ERROR,\n+            execute(\"--baseline\", \"set\", \"non-existing-node-id ,\" + consistentIds(ignite)));\n+    }\n+\n     /**\n      * Test execution of --diagnostic command.\n      *",
                "deletions": 0
            },
            {
                "sha": "e5acbdf159211fc4b0d005b45546e5a18f4d8992",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/e7864f198539f87a38e993cc68f0931dca195534/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/e7864f198539f87a38e993cc68f0931dca195534/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/PersistenceTest.cs?ref=e7864f198539f87a38e993cc68f0931dca195534",
                "patch": "@@ -250,27 +250,29 @@ public void TestBaselineTopology()\n                 var ex = Assert.Throws<IgniteException>(() => cluster.SetBaselineTopology(2));\n                 Assert.AreEqual(\"Changing BaselineTopology on inactive cluster is not allowed.\", ex.Message);\n \n-                // Set with version.\n                 cluster.SetActive(true);\n-                cluster.SetBaselineTopology(2);\n \n-                var res = cluster.GetBaselineTopology();\n-                CollectionAssert.AreEquivalent(new[] {\"node1\", \"node2\"}, res.Select(x => x.ConsistentId));\n+                // Can not set baseline with offline node.\n+                ex = Assert.Throws<IgniteException>(() => cluster.SetBaselineTopology(2));\n+                Assert.AreEqual(\"Check arguments. Node with consistent ID [node2] not found in server nodes.\",\n+                    ex.Message);\n \n                 cluster.SetBaselineTopology(1);\n                 Assert.AreEqual(\"node1\", cluster.GetBaselineTopology().Single().ConsistentId);\n \n-                // Set with nodes.\n-                cluster.SetBaselineTopology(res);\n-                \n-                res = cluster.GetBaselineTopology();\n-                CollectionAssert.AreEquivalent(new[] { \"node1\", \"node2\" }, res.Select(x => x.ConsistentId));\n+                // Set with node.\n+                cluster.SetBaselineTopology(cluster.GetBaselineTopology());\n+\n+                var res = cluster.GetBaselineTopology();\n+                CollectionAssert.AreEquivalent(new[] { \"node1\"}, res.Select(x => x.ConsistentId));\n \n                 cluster.SetBaselineTopology(cluster.GetTopology(1));\n                 Assert.AreEqual(\"node1\", cluster.GetBaselineTopology().Single().ConsistentId);\n \n-                // Set to two nodes.\n-                cluster.SetBaselineTopology(cluster.GetTopology(2));\n+                // Can not set baseline with offline node.\n+                ex = Assert.Throws<IgniteException>(() => cluster.SetBaselineTopology(cluster.GetTopology(2)));\n+                Assert.AreEqual(\"Check arguments. Node with consistent ID [node2] not found in server nodes.\",\n+                  ex.Message);\n             }\n \n             // Check auto activation on cluster restart.\n@@ -279,9 +281,9 @@ public void TestBaselineTopology()\n             {\n                 var cluster = ignite.GetCluster();\n                 Assert.IsTrue(cluster.IsActive());\n-                \n+\n                 var res = cluster.GetBaselineTopology();\n-                CollectionAssert.AreEquivalent(new[] { \"node1\", \"node2\" }, res.Select(x => x.ConsistentId));\n+                CollectionAssert.AreEquivalent(new[] { \"node1\"}, res.Select(x => x.ConsistentId));\n             }\n \n             Environment.SetEnvironmentVariable(\"IGNITE_BASELINE_AUTO_ADJUST_ENABLED\", null);",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9113: NPE fix.",
        "commit": "https://github.com/apache/ignite/commit/987c9b71b08b93f1d692b93e9d35e333b8a05156",
        "parent": "https://github.com/apache/ignite/commit/0010cc2af4c2823a4d3bc3e4f379a063d4a60c27",
        "bug_id": "ignite_15",
        "file": [
            {
                "sha": "85aa6d842337a394ec2749435d09693e5b840ebf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/987c9b71b08b93f1d692b93e9d35e333b8a05156/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/987c9b71b08b93f1d692b93e9d35e333b8a05156/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=987c9b71b08b93f1d692b93e9d35e333b8a05156",
                "patch": "@@ -2781,10 +2781,12 @@ private CacheGroupContext startCacheGroup(\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n \n-        if (cacheType != USER || (sharedCtx.isLazyMemoryAllocation(dataRegion) &&\n-            (!cacheObjCtx.kernalContext().clientNode() || cfg.getCacheMode() == LOCAL))) {\n+        boolean needToStart = (dataRegion != null) && (\n+            cacheType != USER || (sharedCtx.isLazyMemoryAllocation(dataRegion) &&\n+                (!cacheObjCtx.kernalContext().clientNode() || cfg.getCacheMode() == LOCAL)));\n+\n+        if (needToStart)\n             dataRegion.pageMemory().start();\n-        }\n \n         FreeList freeList = sharedCtx.database().freeList(memPlcName);\n         ReuseList reuseList = sharedCtx.database().reuseList(memPlcName);",
                "deletions": 3
            },
            {
                "sha": "74a292984159d11ce856e14fd6fb4b2ff3880d23",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/987c9b71b08b93f1d692b93e9d35e333b8a05156/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/987c9b71b08b93f1d692b93e9d35e333b8a05156/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=987c9b71b08b93f1d692b93e9d35e333b8a05156",
                "patch": "@@ -2195,7 +2195,7 @@ private RestoreBinaryState performBinaryMemoryRestore(\n                 try {\n                     DataRegion region = cctx.database().dataRegion(desc.config().getDataRegionName());\n \n-                    if (!cctx.isLazyMemoryAllocation(region))\n+                    if (region == null || !cctx.isLazyMemoryAllocation(region))\n                         return;\n \n                     region.pageMemory().start();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9113: NPE fixes for some modes.",
        "commit": "https://github.com/apache/ignite/commit/253b00221d4d02157c9c478c027653525d71b363",
        "parent": "https://github.com/apache/ignite/commit/394b104c9e20f25dc1a59fcb19843fae6d3f2603",
        "bug_id": "ignite_16",
        "file": [
            {
                "sha": "bd03c5473bcd2ebb6c81feaa8ac22bdb1d97d1fe",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "patch": "@@ -36,11 +36,6 @@\n      */\n     public void stop(boolean deallocate) throws IgniteException;\n \n-    /**\n-     * @return {@code True} if this memory is stopped.\n-     */\n-    public boolean stopped();\n-\n     /**\n      * @return Page size in bytes.\n      */",
                "deletions": 5
            },
            {
                "sha": "c60c63c53914a8ec89149a4e3a5a2654178b3003",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "patch": "@@ -273,11 +273,6 @@ public PageMemoryNoStoreImpl(\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public ByteBuffer pageBuffer(long pageAddr) {\n         return wrapPointer(pageAddr, pageSize());",
                "deletions": 5
            },
            {
                "sha": "e0ba2da0ba67ab6160534802b2aef443e3cfd3fc",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "patch": "@@ -2779,8 +2779,7 @@ private CacheGroupContext startCacheGroup(\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n \n-        if (sharedCtx.isLazyMemoryAllocation() &&\n-            (dataRegion != null && dataRegion.pageMemory().stopped()) &&\n+        if (sharedCtx.isLazyMemoryAllocation() && dataRegion != null &&\n             (!ctx.clientNode() || desc.config().getCacheMode() == LOCAL)) {\n             dataRegion.pageMemory().start();\n         }",
                "deletions": 2
            },
            {
                "sha": "a94c32083034d6f64009e1bd04e53e975ddd3076",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "patch": "@@ -440,10 +440,6 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n         }\n     }\n \n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void releasePage(int grpId, long pageId, long page) {\n         assert !stopped;\n@@ -1779,6 +1775,9 @@ void beforeReleaseWrite(FullPageId pageId, long ptr, boolean pageWalRec) throws\n      * @return Segment.\n      */\n     private Segment segment(int grpId, long pageId) {\n+        if (segments == null)\n+            System.out.println(\"PageMemoryImpl.segment\");\n+\n         int idx = segmentIndex(grpId, pageId, segments.length);\n \n         return segments[idx];",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9113: NPE fixes for client nodes..",
        "commit": "https://github.com/apache/ignite/commit/394b104c9e20f25dc1a59fcb19843fae6d3f2603",
        "parent": "https://github.com/apache/ignite/commit/166ffa9adffc0ee401d8873d74e79f57d9085734",
        "bug_id": "ignite_17",
        "file": [
            {
                "sha": "7eb42fa6b6cf34c5920467a1f51b994303e615d4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/394b104c9e20f25dc1a59fcb19843fae6d3f2603/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/394b104c9e20f25dc1a59fcb19843fae6d3f2603/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=394b104c9e20f25dc1a59fcb19843fae6d3f2603",
                "patch": "@@ -2780,7 +2780,7 @@ private CacheGroupContext startCacheGroup(\n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n \n         if (sharedCtx.isLazyMemoryAllocation() &&\n-            dataRegion.pageMemory().stopped() &&\n+            (dataRegion != null && dataRegion.pageMemory().stopped()) &&\n             (!ctx.clientNode() || desc.config().getCacheMode() == LOCAL)) {\n             dataRegion.pageMemory().start();\n         }",
                "deletions": 1
            },
            {
                "sha": "8f117ebce0466088372948b18b10b956cfc79877",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/394b104c9e20f25dc1a59fcb19843fae6d3f2603/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/394b104c9e20f25dc1a59fcb19843fae6d3f2603/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=394b104c9e20f25dc1a59fcb19843fae6d3f2603",
                "patch": "@@ -1160,6 +1160,8 @@ public void setTxManager(IgniteTxManager txMgr) {\n      * @return {@code True} if lazy memory allocation enabled. {@code False} otherwise.\n      */\n     public boolean isLazyMemoryAllocation() {\n-        return gridConfig().getDataStorageConfiguration().isLazyMemoryAllocation() || gridConfig().isClientMode() ;\n+        return gridConfig().isClientMode() ||\n+            (gridConfig().getDataStorageConfiguration() != null &&\n+                gridConfig().getDataStorageConfiguration().isLazyMemoryAllocation());\n     }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11018 Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/7eb3ef8b6a8e017a11427a52d261ad44e4c8ee12",
        "parent": "https://github.com/apache/ignite/commit/bfbbe21ea58655085b4bd2936a135fa8a4314dc4",
        "bug_id": "ignite_18",
        "file": [
            {
                "sha": "4ed373b70dcd7ec9ce0118125e5c2923a4a054e7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorCacheRebalanceCollectorTask.java",
                "blob_url": "https://github.com/apache/ignite/blob/7eb3ef8b6a8e017a11427a52d261ad44e4c8ee12/modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorCacheRebalanceCollectorTask.java",
                "raw_url": "https://github.com/apache/ignite/raw/7eb3ef8b6a8e017a11427a52d261ad44e4c8ee12/modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorCacheRebalanceCollectorTask.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorCacheRebalanceCollectorTask.java?ref=7eb3ef8b6a8e017a11427a52d261ad44e4c8ee12",
                "patch": "@@ -173,9 +173,13 @@ else if (total == 0 && rebalanceInProgress)\n \n                 Collection<? extends BaselineNode> baseline = cluster.currentBaselineTopology();\n \n-                boolean inBaseline = baseline.stream().anyMatch(n -> consistentId.equals(n.consistentId()));\n+                if (baseline != null) {\n+                    boolean inBaseline = baseline.stream().anyMatch(n -> consistentId.equals(n.consistentId()));\n \n-                res.setBaseline(inBaseline ? NODE_IN_BASELINE : NODE_NOT_IN_BASELINE);\n+                    res.setBaseline(inBaseline ? NODE_IN_BASELINE : NODE_NOT_IN_BASELINE);\n+                }\n+                else\n+                    res.setBaseline(BASELINE_NOT_AVAILABLE);\n             }\n             else\n                 res.setBaseline(BASELINE_NOT_AVAILABLE);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8178 ZookeeperDiscoverySpiTest#testReconnectServersRestart* tests fail on TC (#5755)\n\n* Fix NPE. Fix clear client reconnect event.\r\n\r\n* Test with mvcc fix\r\n\r\n* Clear debug\r\n\r\n* Fix mvcc disconnected flag\r\n\r\n* Fix disconnected flag(use reconnected event)\r\n\r\n* Hard synchronizing\r\n\r\n* Optimizing synchronization\r\n\r\n* Fix NPE\r\n\r\n* Cleanup debug.",
        "commit": "https://github.com/apache/ignite/commit/646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
        "parent": "https://github.com/apache/ignite/commit/6008a0af5f8bb8051aca7cbc67878c138097d6df",
        "bug_id": "ignite_19",
        "file": [
            {
                "sha": "3ebfc6e39b8c4910df5606a333e02364edea5747",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
                "patch": "@@ -890,9 +890,12 @@ else if (msg instanceof WalStateAbstractMessage)\n                 exchLog.info(\"Finished exchange init [topVer=\" + topVer + \", crd=\" + crdNode + ']');\n         }\n         catch (IgniteInterruptedCheckedException e) {\n-            assert cctx.kernalContext().isStopping();\n+            assert cctx.kernalContext().isStopping() || cctx.kernalContext().clientDisconnected();\n \n-            onDone(new IgniteCheckedException(\"Node stopped\"));\n+            if (cctx.kernalContext().clientDisconnected())\n+                onDone(new IgniteCheckedException(\"Client disconnected\"));\n+            else\n+                onDone(new IgniteCheckedException(\"Node stopped\"));\n \n             throw e;\n         }",
                "deletions": 2
            },
            {
                "sha": "04f158662b1f5d4851bab72eb932be5eb0379ad0",
                "filename": "modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java?ref=646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
                "patch": "@@ -569,7 +569,7 @@ private void notifySegmented() {\n     public boolean allNodesSupport(IgniteFeatures feature) {\n         checkState();\n \n-        return rtState.top.isAllNodes(n -> IgniteFeatures.nodeSupports(n, feature));\n+        return rtState != null && rtState.top.isAllNodes(n -> IgniteFeatures.nodeSupports(n, feature));\n     }\n \n     /**\n@@ -2022,7 +2022,7 @@ private void processJoinError(String aliveNodePath,\n     }\n \n     /**\n-     * @param node Joining node data.\n+     * @param joiningNodeData Joining node data.\n      * @return Validation result.\n      */\n     private ZkNodeValidateResult validateJoiningNode(ZkJoiningNodeData joiningNodeData) {\n@@ -4468,7 +4468,7 @@ private void processResult0(int rc, String path, byte[] data) throws Exception {\n             id = IgniteUuid.fromUuid(node.id());\n \n             endTime = System.currentTimeMillis() + node.sessionTimeout() + 1000;\n-        };\n+        }\n \n         /** {@inheritDoc} */\n         @Override public IgniteUuid id() {",
                "deletions": 3
            },
            {
                "sha": "f8a5f361a88861e1addb18adec9d9e6372b27e54",
                "filename": "modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpiTestSuite1.java",
                "blob_url": "https://github.com/apache/ignite/blob/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpiTestSuite1.java",
                "raw_url": "https://github.com/apache/ignite/raw/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpiTestSuite1.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpiTestSuite1.java?ref=646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
                "patch": "@@ -19,17 +19,17 @@\n \n import org.apache.curator.test.ByteCodeRewrite;\n import org.apache.ignite.spi.discovery.zk.internal.ZookeeperClientTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryClientDisconnectTest;\n import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryClientReconnectTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySpiSaslFailedAuthTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySpiSaslSuccessfulAuthTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryCommunicationFailureTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryConcurrentStartAndStartStopTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryCustomEventsTest;\n import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryMiscTest;\n import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySegmentationAndConnectionRestoreTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryConcurrentStartAndStartStopTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryTopologyChangeAndReconnectTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryCommunicationFailureTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryClientDisconnectTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySpiSaslFailedAuthTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySpiSaslSuccessfulAuthTest;\n import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoverySplitBrainTest;\n-import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryCustomEventsTest;\n+import org.apache.ignite.spi.discovery.zk.internal.ZookeeperDiscoveryTopologyChangeAndReconnectTest;\n import org.apache.zookeeper.jmx.MBeanRegistry;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;",
                "deletions": 7
            },
            {
                "sha": "03daa01a3764f40ef1a77c47a764d71d6d2f456c",
                "filename": "modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryClientReconnectTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryClientReconnectTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryClientReconnectTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryClientReconnectTest.java?ref=646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
                "patch": "@@ -17,19 +17,17 @@\n \n package org.apache.ignite.spi.discovery.zk.internal;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.util.lang.GridAbsPredicate;\n import org.apache.ignite.lang.IgniteInClosure;\n import org.apache.ignite.testframework.GridTestUtils;\n-import org.junit.Ignore;\n import org.junit.Test;\n \n-import java.util.concurrent.Callable;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n import static java.util.concurrent.TimeUnit.SECONDS;\n import static org.apache.ignite.events.EventType.EVT_CLIENT_NODE_DISCONNECTED;\n \n@@ -40,7 +38,6 @@\n     /**\n      * @throws Exception If failed.\n      */\n-    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-8178\")\n     @Test\n     public void testReconnectServersRestart_1() throws Exception {\n         reconnectServersRestart(1);\n@@ -49,11 +46,11 @@ public void testReconnectServersRestart_1() throws Exception {\n     /**\n      * @throws Exception If failed.\n      */\n-    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-8178\")\n     @Test\n     public void testReconnectServersRestart_2() throws Exception {\n         reconnectServersRestart(3);\n     }\n+\n     /**\n      * @throws Exception If failed.\n      */\n@@ -141,6 +138,8 @@ public void testReconnectServersRestart_4() throws Exception {\n      * @throws Exception If failed.\n      */\n     private void reconnectServersRestart(int srvs) throws Exception {\n+        sesTimeout = 30_000;\n+\n         startGridsMultiThreaded(srvs);\n \n         helper.clientMode(true);",
                "deletions": 8
            },
            {
                "sha": "08d89351b1515e57784ddb0a86a3fc109ec46a24",
                "filename": "modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoverySpiTestBase.java",
                "blob_url": "https://github.com/apache/ignite/blob/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoverySpiTestBase.java",
                "raw_url": "https://github.com/apache/ignite/raw/646e5f8c6339b0d055ac7976e421d3c25a5f3b05/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoverySpiTestBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/test/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoverySpiTestBase.java?ref=646e5f8c6339b0d055ac7976e421d3c25a5f3b05",
                "patch": "@@ -432,13 +432,13 @@ private void clearAckEveryEventSystemProperty() {\n                 private UUID nodeId = currNodeId;\n \n                 @Override public boolean apply(Event evt) {\n-                    if(evt.type() == EVT_CLIENT_NODE_RECONNECTED){\n+                    if (evt.type() == EVT_CLIENT_NODE_RECONNECTED) {\n                         evts.remove(nodeId);\n \n                         nodeId = evt.node().id();\n                     }\n \n-                    return false;\n+                    return true;\n                 }\n             }, new int[] {EVT_CLIENT_NODE_RECONNECTED});\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11763 Fix NPE in GridP2PComputeWithNestedEntryProcessorTest - Fixes #6466.\n\nSigned-off-by: Ilya Kasnacheev <ilya.kasnacheev@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/be48a28bdf05d8b37f5b2243d605e9646f644267",
        "parent": "https://github.com/apache/ignite/commit/22652aa9883cfa3fd020658bcb230cea9ea6e4d4",
        "bug_id": "ignite_20",
        "file": [
            {
                "sha": "382328be57e996106d472ea5fa5b861467de0891",
                "filename": "modules/core/src/test/java/org/apache/ignite/p2p/GridP2PComputeWithNestedEntryProcessorTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/be48a28bdf05d8b37f5b2243d605e9646f644267/modules/core/src/test/java/org/apache/ignite/p2p/GridP2PComputeWithNestedEntryProcessorTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/be48a28bdf05d8b37f5b2243d605e9646f644267/modules/core/src/test/java/org/apache/ignite/p2p/GridP2PComputeWithNestedEntryProcessorTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/p2p/GridP2PComputeWithNestedEntryProcessorTest.java?ref=be48a28bdf05d8b37f5b2243d605e9646f644267",
                "patch": "@@ -126,6 +126,8 @@ public void processTest() throws Exception {\n \n             createAndLoadCache(ignite);\n \n+            awaitPartitionMapExchange();\n+\n             for (int i = 0; i < 10; i++) {\n                 try (Ignite client = startGrid(\"client\")) {\n \n@@ -134,7 +136,7 @@ public void processTest() throws Exception {\n                     Integer key = primaryKey(ignite(1).cache(DEFAULT_CACHE_NAME));\n \n                     for (Boolean res : runJob(client, 10_000, DEFAULT_CACHE_NAME, key)) {\n-                        assertTrue(res);\n+                        assertTrue(key >= ENTRIES || res);\n                     }\n \n                     scnaCacheData(cache);",
                "deletions": 1
            },
            {
                "sha": "4879f8a3f4138d3b2ce19ed810694dc0fad32b2b",
                "filename": "modules/extdata/p2p/src/main/java/org/apache/ignite/tests/p2p/pedicates/CompositePredicate.java",
                "blob_url": "https://github.com/apache/ignite/blob/be48a28bdf05d8b37f5b2243d605e9646f644267/modules/extdata/p2p/src/main/java/org/apache/ignite/tests/p2p/pedicates/CompositePredicate.java",
                "raw_url": "https://github.com/apache/ignite/raw/be48a28bdf05d8b37f5b2243d605e9646f644267/modules/extdata/p2p/src/main/java/org/apache/ignite/tests/p2p/pedicates/CompositePredicate.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/extdata/p2p/src/main/java/org/apache/ignite/tests/p2p/pedicates/CompositePredicate.java?ref=be48a28bdf05d8b37f5b2243d605e9646f644267",
                "patch": "@@ -36,6 +36,7 @@\n \n         for (BinaryPredicate predicate : predicates) {\n             predicate.ignite = ignite;\n+            predicate.log = log;\n \n             if (!predicate.apply(bo))\n                 return false;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11615 Fixed NPE on node stop in IgniteBaselineAffinityTopologyActivationTest - Fixes #6331.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/984998763a4d501431c5de00e83dcbae88f728b6",
        "parent": "https://github.com/apache/ignite/commit/df17242ea4005ea5a315cd97e1f86b3c746e73aa",
        "bug_id": "ignite_21",
        "file": [
            {
                "sha": "9329a6c086ee59aea6561a22531332683fc4a6a0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/984998763a4d501431c5de00e83dcbae88f728b6/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/984998763a4d501431c5de00e83dcbae88f728b6/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java?ref=984998763a4d501431c5de00e83dcbae88f728b6",
                "patch": "@@ -739,7 +739,11 @@ public void onKernalStop() {\n         if (!isRecoveryMode()) {\n             aff.cancelFutures(new IgniteCheckedException(\"Failed to wait for topology update, node is stopping.\"));\n \n-            preldr.onKernalStop();\n+            // This may happen if an exception is occurred on node start and we stop a node in the middle of the start\n+            // procedure. It is safe to do a null-check here because preldr may be created only in exchange-worker\n+            // thread which is stopped by the time this method is invoked.\n+            if (preldr != null)\n+                preldr.onKernalStop();\n         }\n \n         offheapMgr.onKernalStop();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10513 Fix NullPointerException on reconnect for TCP/Zookeeper Discovery SPIs - Fixes #5557.\n\nSigned-off-by: Ilya Kasnacheev <ilya.kasnacheev@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a",
        "parent": "https://github.com/apache/ignite/commit/f0544d46a00447bd15f1121a0f97747ba37bd718",
        "bug_id": "ignite_22",
        "file": [
            {
                "sha": "e094151dfc7aeed5e99e66082b185b26973ff192",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java?ref=5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a",
                "patch": "@@ -732,7 +732,7 @@ private static void sleepEx(long millis, Runnable before, Runnable after) throws\n                     TcpDiscoveryNode node = locNode;\n \n                     if (locNode.order() > 0) {\n-                        node = locNode.clientReconnectNode(spi.spiCtx.nodeAttributes());\n+                        node = locNode.clientReconnectNode(spi.locNodeAttrs);\n \n                         marshalCredentials(node);\n                     }",
                "deletions": 1
            },
            {
                "sha": "222b73bb10e581dd478102397d433a3b5fbe1f0d",
                "filename": "modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpi.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/ZookeeperDiscoverySpi.java?ref=5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a",
                "patch": "@@ -501,6 +501,13 @@ public DiscoverySpiNodeAuthenticator getAuthenticator() {\n             impl.stop();\n     }\n \n+    /**\n+     * @return Local node attributes\n+     */\n+    public Map<String, Object> getLocNodeAttrs() {\n+        return locNodeAttrs;\n+    }\n+\n     /**\n      * @return Local node instance.\n      */",
                "deletions": 0
            },
            {
                "sha": "fa218fff4f2aa9e767d854815b01d704aa6f68c1",
                "filename": "modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/zk/internal/ZookeeperDiscoveryImpl.java?ref=5f9a1e68c2575ef8bf16ae188036bc6ef9620b9a",
                "patch": "@@ -740,7 +740,7 @@ private void joinTopology(@Nullable ZkRuntimeState prevState) throws Interrupted\n                 internalLsnr.beforeJoin(locNode, log);\n \n             if (locNode.isClient() && reconnect)\n-                locNode.setAttributes(spi.getSpiContext().nodeAttributes());\n+                locNode.setAttributes(spi.getLocNodeAttrs());\n \n             marshalCredentialsOnJoin(locNode);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11631 Fix NPE on server node start and persistence - Fixes #6344.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/51ab35fa094cc409bb0c20d24affecfc100a9006",
        "parent": "https://github.com/apache/ignite/commit/18d20a632e5fbabc28f0bb355e5b458171842a0a",
        "bug_id": "ignite_23",
        "file": [
            {
                "sha": "b7df2702b4c587ae9bef42bfe01008145fee938f",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "patch": "@@ -2080,8 +2080,6 @@ protected void onExchange(DiscoveryDataPacket dataPacket, ClassLoader clsLdr) {\n \n     /** {@inheritDoc} */\n     @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n-        sslEnable = ignite().configuration().getSslContextFactory() != null;\n-\n         initializeImpl();\n \n         registerMBean(igniteInstanceName, new TcpDiscoverySpiMBeanImpl(this), TcpDiscoverySpiMBean.class);\n@@ -2096,6 +2094,8 @@ private void initializeImpl() {\n         if (impl != null)\n             return;\n \n+        sslEnable = ignite().configuration().getSslContextFactory() != null;\n+\n         initFailureDetectionTimeout();\n \n         if (!forceSrvMode && (Boolean.TRUE.equals(ignite.configuration().isClientMode()))) {",
                "deletions": 2
            },
            {
                "sha": "118d57de9a45c7048c0e6ce6883630c9f0dceeca",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "status": "added",
                "changes": 73,
                "additions": 73,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence;\n+\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+/**\n+ * Checks, that cluster correct workds with enabled persistence and SSL.\n+ */\n+public class SingleNodePersistenceSslTest extends GridCommonAbstractTest {\n+    /** {@inheritDoc} */\n+    @Override public IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        return super.getConfiguration(igniteInstanceName)\n+            .setSslContextFactory(GridTestUtils.sslFactory())\n+            .setFailureHandler(new StopNodeFailureHandler())\n+            .setDataStorageConfiguration(\n+                new DataStorageConfiguration().setDefaultDataRegionConfiguration(\n+                    new DataRegionConfiguration().setPersistenceEnabled(true)\n+                )\n+            );\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * Checks, that cluster could be started and activated.\n+     *\n+     * @throws Exception If test failed.\n+     */\n+    @Test\n+    public void testActivate() throws Exception {\n+        startGrids(2).cluster().active(true);\n+\n+        assertTrue(grid(0).cluster().active());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "2e9a1325ea07a19522d01c89cb91fd05ccddc7db",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.ignite.internal.encryption.EncryptedCachePreconfiguredRestartTest;\n import org.apache.ignite.internal.encryption.EncryptedCacheRestartTest;\n import org.apache.ignite.internal.processors.cache.persistence.CheckpointReadLockFailureTest;\n+import org.apache.ignite.internal.processors.cache.persistence.SingleNodePersistenceSslTest;\n import org.apache.ignite.marshaller.GridMarshallerMappingConsistencyTest;\n import org.apache.ignite.util.GridCommandHandlerSslTest;\n import org.apache.ignite.util.GridCommandHandlerTest;\n@@ -64,6 +65,8 @@\n     EncryptedCacheNodeJoinTest.class,\n     EncryptedCacheRestartTest.class,\n     EncryptedCachePreconfiguredRestartTest.class,\n+\n+    SingleNodePersistenceSslTest.class\n })\n public class IgniteBasicWithPersistenceTestSuite {\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10949 Fix NPE in org.apache.ignite.internal.MarshallerContextImpl.CombinedMap - Fixes #5834.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/9f51dc76a6b6a1366e987a2fd6e4121c2098b437",
        "parent": "https://github.com/apache/ignite/commit/95c6c28a39d021f1a9e4843afa08dcb236cde33d",
        "bug_id": "ignite_24",
        "file": [
            {
                "sha": "02aefd990bbc28a5837a0bfbecf9ae91a581c4eb",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/9f51dc76a6b6a1366e987a2fd6e4121c2098b437/modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/9f51dc76a6b6a1366e987a2fd6e4121c2098b437/modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java?ref=9f51dc76a6b6a1366e987a2fd6e4121c2098b437",
                "patch": "@@ -638,7 +638,7 @@ public void setMarshallerMappingFileStoreDir(@Nullable final File marshallerMapp\n \n         /** {@inheritDoc} */\n         @Override public Set<Entry<Integer, MappedName>> entrySet() {\n-            return null;\n+            return Collections.emptySet();\n         }\n \n         /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11590: NPE during onKernalStop in mvcc processor. This closes #6317.\n\nSigned-off-by: Andrey V. Mashenkov <andrey.mashenkov@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/87bd39fe0995719dbf4be51c09c6fad3f4abef6a",
        "parent": "https://github.com/apache/ignite/commit/3b5364925e204fe17a6724870e877aa72131f1a1",
        "bug_id": "ignite_25",
        "file": [
            {
                "sha": "760abca865545b86aaa3d6c3f93820e6c9cf7d75",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/87bd39fe0995719dbf4be51c09c6fad3f4abef6a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/87bd39fe0995719dbf4be51c09c6fad3f4abef6a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java?ref=87bd39fe0995719dbf4be51c09c6fad3f4abef6a",
                "patch": "@@ -456,7 +456,10 @@ private void txLogPageStoreInit(IgniteCacheDatabaseSharedManager mgr) throws Ign\n         }\n         finally {\n             // Cleanup pending futures.\n-            onCoordinatorFailed(curCrd.nodeId());\n+            MvccCoordinator curCrd0 = curCrd;\n+\n+            if (curCrd0.nodeId() != null) //Skip if coordinator is unassigned or disconnected.\n+                onCoordinatorFailed(curCrd0.nodeId());\n         }\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10909 Fix GridServiceProcessorBatchDeploySelfTest.testDeployAllTopologyChange flaky fail with NPE in Service Grid (legacy mode) - Fixes #5815.",
        "commit": "https://github.com/apache/ignite/commit/0fddf1a8b46482e3d0016b48e2cc9ba4bde026fb",
        "parent": "https://github.com/apache/ignite/commit/e3dbc8f32a39fee5190ba59d43398cd0724b6a8f",
        "bug_id": "ignite_26",
        "file": [
            {
                "sha": "f5057cf89806ef086260a44e3e3a813b2289c95c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/0fddf1a8b46482e3d0016b48e2cc9ba4bde026fb/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/0fddf1a8b46482e3d0016b48e2cc9ba4bde026fb/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java?ref=0fddf1a8b46482e3d0016b48e2cc9ba4bde026fb",
                "patch": "@@ -642,8 +642,12 @@ else if (cfgsCp.size() > 1) {\n                 break;\n             }\n             catch (IgniteException | IgniteCheckedException e) {\n-                for (String name : res.servicesToRollback())\n-                    depFuts.remove(name).onDone(e);\n+                for (String name : res.servicesToRollback()) {\n+                    GridServiceDeploymentFuture<String> fut;\n+\n+                    if ((fut = depFuts.remove(name)) != null)\n+                        fut.onDone(e);\n+                }\n \n                 if (X.hasCause(e, ClusterTopologyCheckedException.class)) {\n                     if (log.isDebugEnabled())",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11220 Web Console: Fixed NPE in Web Agent in case of using SSL without trust manager. Fixes #6036.",
        "commit": "https://github.com/apache/ignite/commit/c3fa2996ab03a6cd368ac669095852cb6c7a80f6",
        "parent": "https://github.com/apache/ignite/commit/6b5a70bae5c722d0779c7087e422f61a276dca86",
        "bug_id": "ignite_27",
        "file": [
            {
                "sha": "2eddee8135de79ffc911ab02b62810b4cae7d16a",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "blob_url": "https://github.com/apache/ignite/blob/c3fa2996ab03a6cd368ac669095852cb6c7a80f6/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "raw_url": "https://github.com/apache/ignite/raw/c3fa2996ab03a6cd368ac669095852cb6c7a80f6/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java?ref=c3fa2996ab03a6cd368ac669095852cb6c7a80f6",
                "patch": "@@ -368,7 +368,10 @@ public static void main(String[] args) throws Exception {\n             );\n \n             if (sslSocketFactory != null) {\n-                builder.sslSocketFactory(sslSocketFactory, serverTrustMgr);\n+                if (serverTrustMgr != null)\n+                    builder.sslSocketFactory(sslSocketFactory, serverTrustMgr);\n+                else\n+                    builder.sslSocketFactory(sslSocketFactory);\n \n                 if (!F.isEmpty(cipherSuites))\n                     builder.connectionSpecs(sslConnectionSpec(cipherSuites));",
                "deletions": 1
            },
            {
                "sha": "d5f2c1e5d9d4b016b040545594d8008a3eda51cf",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/c3fa2996ab03a6cd368ac669095852cb6c7a80f6/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/c3fa2996ab03a6cd368ac669095852cb6c7a80f6/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java?ref=c3fa2996ab03a6cd368ac669095852cb6c7a80f6",
                "patch": "@@ -115,7 +115,10 @@ public RestExecutor(\n         );\n \n         if (sslSocketFactory != null) {\n-            builder.sslSocketFactory(sslSocketFactory, trustMgr);\n+            if (trustMgr != null)\n+                builder.sslSocketFactory(sslSocketFactory, trustMgr);\n+            else\n+                builder.sslSocketFactory(sslSocketFactory);\n \n             if (!F.isEmpty(cipherSuites))\n                 builder.connectionSpecs(sslConnectionSpec(cipherSuites));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11213 Fix for suites failed because of maven-surefire-plugin NPE for Java 11 build (#6041)",
        "commit": "https://github.com/apache/ignite/commit/760556e0b597c57f5558fd1992a6ad5799e15233",
        "parent": "https://github.com/apache/ignite/commit/65b18b7ba920b069251da2ec2002a530ceee1404",
        "bug_id": "ignite_28",
        "file": [
            {
                "sha": "3b451790c8c3ca74d59abfe03686be027ae5c273",
                "filename": "parent/pom.xml",
                "blob_url": "https://github.com/apache/ignite/blob/760556e0b597c57f5558fd1992a6ad5799e15233/parent/pom.xml",
                "raw_url": "https://github.com/apache/ignite/raw/760556e0b597c57f5558fd1992a6ad5799e15233/parent/pom.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/parent/pom.xml?ref=760556e0b597c57f5558fd1992a6ad5799e15233",
                "patch": "@@ -629,7 +629,7 @@\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-surefire-plugin</artifactId>\n-                <version>2.20.1</version>\n+                <version>3.0.0-M3</version>\n                 <configuration>\n                     <forkCount>0</forkCount>\n                 </configuration>\n@@ -1014,7 +1014,7 @@\n                     <plugin>\n                         <groupId>org.apache.maven.plugins</groupId>\n                         <artifactId>maven-surefire-plugin</artifactId>\n-                        <version>2.20.1</version>\n+                        <version>3.0.0-M3</version>\n                         <configuration>\n                             <forkCount>1</forkCount>\n                         </configuration>",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9999 Added verbose logging for node recovery (fixed NPE)",
        "commit": "https://github.com/apache/ignite/commit/d6d4965fd86d8177903abf0ccf9a7e8ac77917a0",
        "parent": "https://github.com/apache/ignite/commit/8c08de7beabf79dec28d2920707e7851b4c97823",
        "bug_id": "ignite_29",
        "file": [
            {
                "sha": "ab35f46c31be660c83db35232bde682effda31b0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/serializer/RecordDataV1Serializer.java",
                "blob_url": "https://github.com/apache/ignite/blob/d6d4965fd86d8177903abf0ccf9a7e8ac77917a0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/serializer/RecordDataV1Serializer.java",
                "raw_url": "https://github.com/apache/ignite/raw/d6d4965fd86d8177903abf0ccf9a7e8ac77917a0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/serializer/RecordDataV1Serializer.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/serializer/RecordDataV1Serializer.java?ref=d6d4965fd86d8177903abf0ccf9a7e8ac77917a0",
                "patch": "@@ -244,7 +244,9 @@ private boolean needEncryption(int grpId) {\n         if (encSpi instanceof NoopEncryptionSpi)\n             return false;\n \n-        return encMgr.groupKey(grpId) != null;\n+        GridEncryptionManager encMgr = cctx.kernalContext().encryption();\n+\n+        return encMgr != null && encMgr.groupKey(grpId) != null;\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10448: MVCC: Fixed NPE on data page eviction. This closes #5704.",
        "commit": "https://github.com/apache/ignite/commit/525680c748e9479b02cecbdca1e2ac5d582105ad",
        "parent": "https://github.com/apache/ignite/commit/76ad0a4d10ac761f5cdec01e6ec4d7299e434a07",
        "bug_id": "ignite_30",
        "file": [
            {
                "sha": "b919024d5ffff1f40eb26f9f07061c8b209c7e99",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=525680c748e9479b02cecbdca1e2ac5d582105ad",
                "patch": "@@ -55,6 +55,7 @@\n import org.apache.ignite.cache.store.CacheStoreSessionListener;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataPageEvictionMode;\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.DeploymentMode;\n import org.apache.ignite.configuration.FileSystemConfiguration;\n@@ -539,6 +540,19 @@ private void validate(IgniteConfiguration c,\n \n             assertParameter(cc.getInterceptor() == null,\n                 \"interceptor cannot be used with TRANSACTIONAL_SNAPSHOT atomicity mode\");\n+\n+            // Disable in-memory evictions for mvcc cache. TODO IGNITE-10738\n+            String memPlcName = cc.getDataRegionName();\n+            DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n+\n+            if (dataRegion != null && !dataRegion.config().isPersistenceEnabled() &&\n+                dataRegion.config().getPageEvictionMode() != DataPageEvictionMode.DISABLED) {\n+                throw new IgniteCheckedException(\"Data pages evictions cannot be used with TRANSACTIONAL_SNAPSHOT \" +\n+                    \"cache atomicity mode for in-memory regions. Please, either disable evictions or enable \" +\n+                    \"persistence for data regions with TRANSACTIONAL_SNAPSHOT caches. [cacheName=\" + cc.getName() +\n+                    \", dataRegionName=\" + memPlcName + \", pageEvictionMode=\" +\n+                    dataRegion.config().getPageEvictionMode() + ']');\n+            }\n         }\n \n         if (cc.isWriteBehindEnabled()) {",
                "deletions": 0
            },
            {
                "sha": "52bb29d127a10e19711fc743c8fdcb4ba03c5324",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/eviction/paged/PageEvictionMultinodeAbstractTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/eviction/paged/PageEvictionMultinodeAbstractTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/eviction/paged/PageEvictionMultinodeAbstractTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/eviction/paged/PageEvictionMultinodeAbstractTest.java?ref=525680c748e9479b02cecbdca1e2ac5d582105ad",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.ignite.cache.CacheWriteSynchronizationMode;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n@@ -96,10 +97,9 @@ public void testPageEviction() throws Exception {\n     /**\n      * @throws Exception If failed.\n      */\n+    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-10738\")\n     @Test\n     public void testPageEvictionMvcc() throws Exception {\n-        fail(\"https://issues.apache.org/jira/browse/IGNITE-10448\");\n-\n         for (int i = 0; i < CACHE_MODES.length; i++) {\n             CacheConfiguration<Object, Object> cfg = cacheConfig(\n                 \"evict\" + i, null, CACHE_MODES[i], CacheAtomicityMode.TRANSACTIONAL_SNAPSHOT,",
                "deletions": 2
            },
            {
                "sha": "92ec8122ccaec8ab019a5728305f2ba9f15ec0b8",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/525680c748e9479b02cecbdca1e2ac5d582105ad/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java",
                "status": "modified",
                "changes": 39,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java?ref=525680c748e9479b02cecbdca1e2ac5d582105ad",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.configuration.NearCacheConfiguration;\n+import org.apache.ignite.internal.util.typedef.X;\n import org.apache.ignite.lang.IgniteBiTuple;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n@@ -48,6 +49,8 @@\n import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL_SNAPSHOT;\n import static org.apache.ignite.cache.CacheMode.LOCAL;\n+import static org.apache.ignite.configuration.DataPageEvictionMode.RANDOM_2_LRU;\n+import static org.apache.ignite.configuration.DataPageEvictionMode.RANDOM_LRU;\n \n /**\n  *\n@@ -200,6 +203,7 @@ public void testNodeRestartWithCacheModeChangedMvccToTx() throws Exception {\n         DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n         DataRegionConfiguration regionCfg = new DataRegionConfiguration();\n         regionCfg.setPersistenceEnabled(true);\n+        regionCfg.setPageEvictionMode(RANDOM_LRU);\n         storageCfg.setDefaultDataRegionConfiguration(regionCfg);\n         IgniteConfiguration cfg = getConfiguration(\"testGrid\");\n         cfg.setDataStorageConfiguration(storageCfg);\n@@ -236,6 +240,41 @@ public void testNodeRestartWithCacheModeChangedMvccToTx() throws Exception {\n         }, IgniteCheckedException.class, \"Cannot start cache. Statically configured atomicity mode\");\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testMvccInMemoryEvictionDisabled() throws Exception {\n+        final String memRegName = \"in-memory-evictions\";\n+\n+        // Enable in-memory eviction.\n+        DataRegionConfiguration regionCfg = new DataRegionConfiguration();\n+        regionCfg.setPersistenceEnabled(false);\n+        regionCfg.setPageEvictionMode(RANDOM_2_LRU);\n+        regionCfg.setName(memRegName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+        storageCfg.setDefaultDataRegionConfiguration(regionCfg);\n+\n+        IgniteConfiguration cfg = getConfiguration(\"testGrid\");\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        Ignite node = startGrid(cfg);\n+\n+        CacheConfiguration ccfg1 = new CacheConfiguration(\"test1\")\n+            .setAtomicityMode(TRANSACTIONAL_SNAPSHOT)\n+            .setDataRegionName(memRegName);\n+\n+        try {\n+            node.createCache(ccfg1);\n+\n+            fail(\"In memory evictions should be disabled for MVCC caches.\");\n+        }\n+        catch (Exception e) {\n+            assertTrue(X.getFullStackTrace(e).contains(\"Data pages evictions cannot be used with TRANSACTIONAL_SNAPSHOT\"));\n+        }\n+    }\n+\n     /**\n      * Test TRANSACTIONAL_SNAPSHOT and near cache.\n      *",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9739 fix NPE on MVCC path - Fixes #5846.\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/d15c475fc960534588c4e66b2fccdbef4bc1ff63",
        "parent": "https://github.com/apache/ignite/commit/84298cf4e85edd137ddceb1f203c5f9e2837d4d4",
        "bug_id": "ignite_31",
        "file": [
            {
                "sha": "6c11cbc24cc69ee1a447f8541fbbca755e148c75",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/d15c475fc960534588c4e66b2fccdbef4bc1ff63/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/d15c475fc960534588c4e66b2fccdbef4bc1ff63/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java?ref=d15c475fc960534588c4e66b2fccdbef4bc1ff63",
                "patch": "@@ -2429,8 +2429,9 @@ public void mvccFinish(IgniteTxAdapter tx, boolean commit) throws IgniteCheckedE\n             cctx.database().checkpointReadLock();\n \n             try {\n-                if (cctx.wal() != null)\n-                    ptr = cctx.wal().log(newTxRecord(tx));\n+                TxRecord rec;\n+                if (cctx.wal() != null && (rec = newTxRecord(tx)) != null)\n+                    cctx.wal().log(rec);\n \n                 cctx.coordinators().updateState(tx.mvccSnapshot, commit ? TxState.COMMITTED : TxState.ABORTED, tx.local());\n             }\n@@ -2454,8 +2455,9 @@ public void mvccPrepare(IgniteTxAdapter tx) throws IgniteCheckedException {\n             cctx.database().checkpointReadLock();\n \n             try {\n-                if (cctx.wal() != null)\n-                    cctx.wal().log(newTxRecord(tx));\n+                TxRecord rec;\n+                if (cctx.wal() != null && (rec = newTxRecord(tx)) != null)\n+                    cctx.wal().log(rec);\n \n                 cctx.coordinators().updateState(tx.mvccSnapshot, TxState.PREPARED);\n             }\n@@ -2497,7 +2499,7 @@ public void mvccPrepare(IgniteTxAdapter tx) throws IgniteCheckedException {\n      * @param tx Transaction.\n      * @return Tx state record.\n      */\n-    private TxRecord newTxRecord(IgniteTxAdapter tx) {\n+    private @Nullable TxRecord newTxRecord(IgniteTxAdapter tx) {\n         BaselineTopology baselineTop = cctx.kernalContext().state().clusterState().baselineTopology();\n \n         if (baselineTop != null && baselineTop.consistentIds().contains(cctx.localNode().consistentId())) {",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9845 Web Agent: Fixed NPE in case of \"-Dtrust.all=true\" and not configured server trust store.",
        "commit": "https://github.com/apache/ignite/commit/0a16208a87d4044391de7f2ce8fd497c9cd817b5",
        "parent": "https://github.com/apache/ignite/commit/41becafd7bb13c03a46bfbba75eb54b7eaeeb47a",
        "bug_id": "ignite_32",
        "file": [
            {
                "sha": "74c83760ce29de5122aa9478d6a35e9e527daff6",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "blob_url": "https://github.com/apache/ignite/blob/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "raw_url": "https://github.com/apache/ignite/raw/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java?ref=0a16208a87d4044391de7f2ce8fd497c9cd817b5",
                "patch": "@@ -318,22 +318,24 @@ public static void main(String[] args) throws Exception {\n             return;\n         }\n \n-        boolean trustAll = Boolean.getBoolean(\"trust.all\");\n+        boolean serverTrustAll = Boolean.getBoolean(\"trust.all\");\n         boolean hasServerTrustStore = cfg.serverTrustStore() != null;\n-        boolean hasNodeTrustStore = cfg.nodeTrustStore() != null;\n \n-        if (trustAll && hasServerTrustStore) {\n+        if (serverTrustAll && hasServerTrustStore) {\n             log.warn(\"Options contains both '--server-trust-store' and '-Dtrust.all=true'. \" +\n-                \"Option '-Dtrust.all=true' will be ignored.\");\n+                \"Option '-Dtrust.all=true' will be ignored on connect to Web server.\");\n \n-            trustAll = false;\n+            serverTrustAll = false;\n         }\n \n-        if (trustAll && hasNodeTrustStore) {\n+        boolean nodeTrustAll = Boolean.getBoolean(\"trust.all\");\n+        boolean hasNodeTrustStore = cfg.nodeTrustStore() != null;\n+\n+        if (nodeTrustAll && hasNodeTrustStore) {\n             log.warn(\"Options contains both '--node-trust-store' and '-Dtrust.all=true'. \" +\n-                \"Option '-Dtrust.all=true' will be ignored.\");\n+                \"Option '-Dtrust.all=true' will be ignored on connect to cluster.\");\n \n-            trustAll = false;\n+            nodeTrustAll = false;\n         }\n \n         cfg.nodeURIs(nodeURIs);\n@@ -344,14 +346,14 @@ public static void main(String[] args) throws Exception {\n         List<String> cipherSuites = cfg.cipherSuites();\n \n         if (\n-            trustAll ||\n+            serverTrustAll ||\n             hasServerTrustStore ||\n             cfg.serverKeyStore() != null\n         ) {\n             OkHttpClient.Builder builder = new OkHttpClient.Builder();\n \n             X509TrustManager serverTrustMgr = trustManager(\n-                trustAll,\n+                serverTrustAll,\n                 cfg.serverTrustStore(),\n                 cfg.serverTrustStorePassword()\n             );\n@@ -381,6 +383,7 @@ public static void main(String[] args) throws Exception {\n \n         try (\n             RestExecutor restExecutor = new RestExecutor(\n+                nodeTrustAll,\n                 cfg.nodeKeyStore(), cfg.nodeKeyStorePassword(),\n                 cfg.nodeTrustStore(), cfg.nodeTrustStorePassword(),\n                 cipherSuites);",
                "deletions": 10
            },
            {
                "sha": "5a9783cf4e7bddbe946bcdfbf8e73ba3b28dc625",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/rest/RestExecutor.java?ref=0a16208a87d4044391de7f2ce8fd497c9cd817b5",
                "patch": "@@ -77,6 +77,7 @@\n     /**\n      * Constructor.\n      *\n+     * @param trustAll {@code true} If we trust to self-signed sertificates.\n      * @param keyStorePath Optional path to key store file.\n      * @param keyStorePwd Optional password for key store.\n      * @param trustStorePath Optional path to trust store file.\n@@ -86,6 +87,7 @@\n      * @throws IOException If failed to load content of key stores.\n      */\n     public RestExecutor(\n+        boolean trustAll,\n         String keyStorePath,\n         String keyStorePwd,\n         String trustStorePath,\n@@ -101,7 +103,7 @@ public RestExecutor(\n             .readTimeout(0, TimeUnit.MILLISECONDS)\n             .dispatcher(dispatcher);\n \n-        X509TrustManager trustMgr = trustManager(Boolean.getBoolean(\"trust.all\"), trustStorePath, trustStorePwd);\n+        X509TrustManager trustMgr = trustManager(trustAll, trustStorePath, trustStorePwd);\n \n         SSLSocketFactory sslSocketFactory = sslSocketFactory(\n             keyStorePath, keyStorePwd,",
                "deletions": 1
            },
            {
                "sha": "dcf53f24be228466e574f435f98e4a1d6be3549f",
                "filename": "modules/web-console/web-agent/src/test/java/org/apache/ignite/console/agent/rest/RestExecutorSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/test/java/org/apache/ignite/console/agent/rest/RestExecutorSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/0a16208a87d4044391de7f2ce8fd497c9cd817b5/modules/web-console/web-agent/src/test/java/org/apache/ignite/console/agent/rest/RestExecutorSelfTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/test/java/org/apache/ignite/console/agent/rest/RestExecutorSelfTest.java?ref=0a16208a87d4044391de7f2ce8fd497c9cd817b5",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.UUID;\n+import javax.net.ssl.SSLException;\n import javax.net.ssl.SSLHandshakeException;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.Ignition;\n@@ -178,7 +179,7 @@ private void checkRest(\n     ) throws Exception {\n         try(\n             Ignite ignite = Ignition.getOrStart(nodeCfg);\n-            RestExecutor exec = new RestExecutor(keyStore, keyStorePwd, trustStore, trustStorePwd, cipherSuites)\n+            RestExecutor exec = new RestExecutor(false, keyStore, keyStorePwd, trustStore, trustStorePwd, cipherSuites)\n         ) {\n             Map<String, Object> params = new HashMap<>();\n             params.put(\"cmd\", \"top\");\n@@ -216,7 +217,7 @@ public void nodeNoSslAgentNoSsl() throws Exception {\n     @Test\n     public void nodeNoSslAgentWithSsl() throws Exception {\n         // Check Web Agent with SSL.\n-        ruleForExpectedException.expect(SSLHandshakeException.class);\n+        ruleForExpectedException.expect(SSLException.class);\n         checkRest(\n             nodeConfiguration(\"\"),\n             HTTPS_URI,\n@@ -305,7 +306,7 @@ public void differentCiphers1() throws Exception {\n     /** */\n     @Test\n     public void differentCiphers2() throws Exception {\n-        ruleForExpectedException.expect(SSLHandshakeException.class);\n+        ruleForExpectedException.expect(SSLException.class);\n         checkRest(\n             nodeConfiguration(JETTY_WITH_CIPHERS_2),\n             HTTPS_URI,",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11243 Fixed NPE when using control.sh script with an older node - Fixes #6118.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/a66e679e4f91b099724fca67ea88689c8e4e7907",
        "parent": "https://github.com/apache/ignite/commit/a69e6103789c38caf5328af9fde64ac2549735b1",
        "bug_id": "ignite_33",
        "file": [
            {
                "sha": "41e67a1050389c24e013a300e5f9704195e98829",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/a66e679e4f91b099724fca67ea88689c8e4e7907/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/a66e679e4f91b099724fca67ea88689c8e4e7907/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java?ref=a66e679e4f91b099724fca67ea88689c8e4e7907",
                "patch": "@@ -30,7 +30,6 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Scanner;\n import java.util.Set;\n import java.util.UUID;\n@@ -1302,14 +1301,17 @@ private void baselinePrint0(VisorBaselineTaskResult res) {\n \n         Map<String, VisorBaselineNode> srvs = res.getServers();\n \n-        Optional<VisorBaselineNode> crdOpt = srvs.values().stream()\n-            .min(Comparator.comparing(VisorBaselineNode::getOrder));\n+        // if task runs on a node with VisorBaselineNode of old version (V1) we'll get order=null for all nodes.\n \n-        String crdStr = crdOpt.map(\n-            crd -> \"ConsistentId=\" + crd.getConsistentId() + \", Order=\" + crd.getOrder())\n+        String crdStr = srvs.values().stream()\n+            // check for not null\n+            .filter(node -> node.getOrder() != null)\n+            .min(Comparator.comparing(VisorBaselineNode::getOrder))\n+            // format\n+            .map(crd -> \" (Coordinator: ConsistentId=\" + crd.getConsistentId() + \", Order=\" + crd.getOrder() + \")\")\n             .orElse(\"\");\n \n-        log(\"Current topology version: \" + res.getTopologyVersion() + \" (Coordinator: \" + crdStr + \")\");\n+        log(\"Current topology version: \" + res.getTopologyVersion() + crdStr);\n         nl();\n \n         if (F.isEmpty(baseline))",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11293 Fix of NPE in TcpCommunicationSpi caused by simultaneous node stopping. - Fixes #6081.\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
        "parent": "https://github.com/apache/ignite/commit/033170d90f6c0618b9d6a3fd997e13a5ec1fff89",
        "bug_id": "ignite_34",
        "file": [
            {
                "sha": "243f707bce7a59038c895d4c3664eccfc03bab0b",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
                "patch": "@@ -2781,6 +2781,9 @@ private void sendMessage0(ClusterNode node, Message msg, IgniteInClosure<IgniteE\n                 while (retry);\n             }\n             catch (Throwable t) {\n+                if (stopping)\n+                    throw new IgniteSpiException(\"Node is stopping.\", t);\n+\n                 log.error(\"Failed to send message to remote node [node=\" + node + \", msg=\" + msg + ']', t);\n \n                 if (t instanceof Error)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10908 Fixed NPE in case of failure of service deployment - Fixes #6077.\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/5551faa9ce967245ba6a3c4c4c963c4d64c5f764",
        "parent": "https://github.com/apache/ignite/commit/d0c7925ac09b04bada1f8656b6397b4d97d41e4b",
        "bug_id": "ignite_35",
        "file": [
            {
                "sha": "291039456251be47fe2e9fc4557775273ac92529",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/5551faa9ce967245ba6a3c4c4c963c4d64c5f764/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/5551faa9ce967245ba6a3c4c4c963c4d64c5f764/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java?ref=5551faa9ce967245ba6a3c4c4c963c4d64c5f764",
                "patch": "@@ -32,13 +32,6 @@\n     /** */\n     private final T srvcId;\n \n-    /**\n-     * @param cfg Configuration.\n-     */\n-    public GridServiceDeploymentFuture(ServiceConfiguration cfg) {\n-        this(cfg, null);\n-    }\n-\n     /**\n      * @param cfg Configuration.\n      * @param srvcId Service id.",
                "deletions": 7
            },
            {
                "sha": "2b6e05098824d7b0920351e623c62d3efb22560c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/5551faa9ce967245ba6a3c4c4c963c4d64c5f764/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/5551faa9ce967245ba6a3c4c4c963c4d64c5f764/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java?ref=5551faa9ce967245ba6a3c4c4c963c4d64c5f764",
                "patch": "@@ -566,7 +566,7 @@ private void ensure(boolean cond, String desc, @Nullable Object v) {\n                 if (failedFuts == null)\n                     failedFuts = new ArrayList<>();\n \n-                GridServiceDeploymentFuture<String> fut = new GridServiceDeploymentFuture<>(cfg);\n+                GridServiceDeploymentFuture<String> fut = new GridServiceDeploymentFuture<>(cfg, cfg.getName());\n \n                 fut.onDone(err);\n \n@@ -700,7 +700,7 @@ private void writeServiceToCache(GridServiceDeploymentCompoundFuture<String> res\n         throws IgniteCheckedException {\n         String name = cfg.getName();\n \n-        GridServiceDeploymentFuture<String> fut = new GridServiceDeploymentFuture<>(cfg);\n+        GridServiceDeploymentFuture<String> fut = new GridServiceDeploymentFuture<>(cfg, name);\n \n         GridServiceDeploymentFuture<String> old = depFuts.putIfAbsent(name, fut);\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-11276: Solve NPE problem, uses exchCtx from parent if state is merged. mergeWith sets inside mux - Fixes #6072.\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/cca4491ff794eb5398ae56a7d05fc804bee8d827",
        "parent": "https://github.com/apache/ignite/commit/0acfa84fd426a9f0f9b15d11b13319ceb7b3139e",
        "bug_id": "ignite_36",
        "file": [
            {
                "sha": "d8ec4789b7728643c7eb15289cf8394ac59005dd",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/cca4491ff794eb5398ae56a7d05fc804bee8d827/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/cca4491ff794eb5398ae56a7d05fc804bee8d827/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=cca4491ff794eb5398ae56a7d05fc804bee8d827",
                "patch": "@@ -2627,7 +2627,7 @@ private void removeMergedFutures(AffinityTopologyVersion resVer, GridDhtPartitio\n                         GridDhtPartitionsExchangeFuture fut0 = (GridDhtPartitionsExchangeFuture)task;\n \n                         if (resVer.compareTo(fut0.initialVersion()) >= 0) {\n-                            fut0.finishMerged(resVer);\n+                            fut0.finishMerged(resVer, exchFut);\n \n                             futQ.remove(fut0);\n                         }",
                "deletions": 1
            },
            {
                "sha": "343ad3ff3449ed2c8c9c52906323480ff9fb1047",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/cca4491ff794eb5398ae56a7d05fc804bee8d827/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/cca4491ff794eb5398ae56a7d05fc804bee8d827/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 25,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=cca4491ff794eb5398ae56a7d05fc804bee8d827",
                "patch": "@@ -475,7 +475,22 @@ public void affinityChangeMessage(CacheAffinityChangeMessage affChangeMsg) {\n          */\n         assert exchangeDone() : \"Should not be called before exchange is finished\";\n \n-        return isDone() ? result() : exchCtx.events().topologyVersion();\n+        if (isDone())\n+            return result();\n+\n+        final ExchangeContext exchCtx0;\n+\n+        synchronized (mux) {\n+            if (state == ExchangeLocalState.MERGED) {\n+                assert mergedWith != null;\n+\n+                exchCtx0 = mergedWith.exchCtx;\n+            }\n+            else\n+                exchCtx0 = exchCtx;\n+        }\n+\n+        return exchCtx0.events().topologyVersion();\n     }\n \n     /**\n@@ -2031,9 +2046,13 @@ public boolean serverNodeDiscoveryEvent() {\n     /**\n      * Finish merged future to allow GridCachePartitionExchangeManager.ExchangeFutureSet cleanup.\n      */\n-    public void finishMerged(AffinityTopologyVersion resVer) {\n+    public void finishMerged(AffinityTopologyVersion resVer, GridDhtPartitionsExchangeFuture exchFut) {\n         synchronized (mux) {\n-            if (state == null) state = ExchangeLocalState.MERGED;\n+            if (state == null) {\n+                state = ExchangeLocalState.MERGED;\n+\n+                mergedWith = exchFut;\n+            }\n         }\n \n         done.set(true);",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9721 Fixed NPE in IgniteAuthenticationProcessor.body - Fixes #4853.",
        "commit": "https://github.com/apache/ignite/commit/1047b6495d921a41d4bc006826a7d25d6680f279",
        "parent": "https://github.com/apache/ignite/commit/b1206121e7a87f2d84414ab03b86b8614c0bc3c0",
        "bug_id": "ignite_37",
        "file": [
            {
                "sha": "d11df1e0356c4fd23aac2d86e0c052a9de069f99",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/1047b6495d921a41d4bc006826a7d25d6680f279/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/1047b6495d921a41d4bc006826a7d25d6680f279/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "status": "modified",
                "changes": 73,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java?ref=1047b6495d921a41d4bc006826a7d25d6680f279",
                "patch": "@@ -34,7 +34,6 @@\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.cluster.ClusterNode;\n-import org.apache.ignite.events.DiscoveryEvent;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.GridTopic;\n import org.apache.ignite.internal.IgniteInternalFuture;\n@@ -44,7 +43,6 @@\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n import org.apache.ignite.internal.managers.communication.GridMessageListener;\n import org.apache.ignite.internal.managers.discovery.CustomEventListener;\n-import org.apache.ignite.internal.managers.discovery.DiscoCache;\n import org.apache.ignite.internal.managers.discovery.GridDiscoveryManager;\n import org.apache.ignite.internal.managers.eventstorage.DiscoveryEventListener;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n@@ -101,7 +99,7 @@\n     private final Object mux = new Object();\n \n     /** Active operations. Collects to send on joining node. */\n-    private Map<IgniteUuid, UserManagementOperation> activeOps =  Collections.synchronizedMap(new LinkedHashMap<>());\n+    private final Map<IgniteUuid, UserManagementOperation> activeOps = Collections.synchronizedMap(new LinkedHashMap<>());\n \n     /** User map. */\n     private ConcurrentMap<String, User> users;\n@@ -138,7 +136,7 @@\n     private DiscoveryEventListener discoLsnr;\n \n     /** Node activate future. */\n-    private GridFutureAdapter<Void> activateFut = new GridFutureAdapter<>();\n+    private final GridFutureAdapter<Void> activateFut = new GridFutureAdapter<>();\n \n     /** Validate error. */\n     private String validateErr;\n@@ -148,23 +146,23 @@\n      */\n     public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n         super(ctx);\n-\n-        isEnabled = ctx.config().isAuthenticationEnabled();\n-\n-        ctx.internalSubscriptionProcessor().registerMetastorageListener(this);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void start() throws IgniteCheckedException {\n         super.start();\n \n+        isEnabled = ctx.config().isAuthenticationEnabled();\n+\n         if (isEnabled && !GridCacheUtils.isPersistenceEnabled(ctx.config())) {\n             isEnabled = false;\n \n             throw new IgniteCheckedException(\"Authentication can be enabled only for cluster with enabled persistence.\"\n                 + \" Check the DataRegionConfiguration\");\n         }\n \n+        ctx.internalSubscriptionProcessor().registerMetastorageListener(this);\n+\n         ctx.addNodeAttribute(IgniteNodeAttributes.ATTR_AUTHENTICATION_ENABLED, isEnabled);\n \n         GridDiscoveryManager discoMgr = ctx.discovery();\n@@ -175,38 +173,34 @@ public IgniteAuthenticationProcessor(GridKernalContext ctx) {\n \n         discoMgr.setCustomEventListener(UserAcceptedMessage.class, new UserAcceptedListener());\n \n-        discoLsnr = new DiscoveryEventListener() {\n-            @Override public void onEvent(DiscoveryEvent evt, DiscoCache discoCache) {\n-                if (!isEnabled || ctx.isStopping())\n-                    return;\n+        discoLsnr = (evt, discoCache) -> {\n+            if (!isEnabled || ctx.isStopping())\n+                return;\n \n-                switch (evt.type()) {\n-                    case EVT_NODE_LEFT:\n-                    case EVT_NODE_FAILED:\n-                        onNodeLeft(evt.eventNode().id());\n-                        break;\n+            switch (evt.type()) {\n+                case EVT_NODE_LEFT:\n+                case EVT_NODE_FAILED:\n+                    onNodeLeft(evt.eventNode().id());\n+                    break;\n \n-                    case EVT_NODE_JOINED:\n-                        onNodeJoin(evt.eventNode());\n-                        break;\n-                }\n+                case EVT_NODE_JOINED:\n+                    onNodeJoin(evt.eventNode());\n+                    break;\n             }\n         };\n \n         ctx.event().addDiscoveryEventListener(discoLsnr, DISCO_EVT_TYPES);\n \n-        ioLsnr = new GridMessageListener() {\n-            @Override public void onMessage(UUID nodeId, Object msg, byte plc) {\n-                if (!isEnabled || ctx.isStopping())\n-                    return;\n+        ioLsnr = (nodeId, msg, plc) -> {\n+            if (!isEnabled || ctx.isStopping())\n+                return;\n \n-                if (msg instanceof UserManagementOperationFinishedMessage)\n-                    onFinishMessage(nodeId, (UserManagementOperationFinishedMessage)msg);\n-                else if (msg instanceof UserAuthenticateRequestMessage)\n-                    onAuthenticateRequestMessage(nodeId, (UserAuthenticateRequestMessage)msg);\n-                else if (msg instanceof UserAuthenticateResponseMessage)\n-                    onAuthenticateResponseMessage((UserAuthenticateResponseMessage)msg);\n-            }\n+            if (msg instanceof UserManagementOperationFinishedMessage)\n+                onFinishMessage(nodeId, (UserManagementOperationFinishedMessage)msg);\n+            else if (msg instanceof UserAuthenticateRequestMessage)\n+                onAuthenticateRequestMessage(nodeId, (UserAuthenticateRequestMessage)msg);\n+            else if (msg instanceof UserAuthenticateResponseMessage)\n+                onAuthenticateResponseMessage((UserAuthenticateResponseMessage)msg);\n         };\n \n         ioMgr.addMessageListener(GridTopic.TOPIC_AUTH, ioLsnr);\n@@ -395,11 +389,8 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n         if (!ctx.clientNode()) {\n             users = new ConcurrentHashMap<>();\n \n-            Map<String, User> readUsers = (Map<String, User>)metastorage.readForPredicate(new IgnitePredicate<String>() {\n-                @Override public boolean apply(String key) {\n-                    return key != null && key.startsWith(STORE_USER_PREFIX);\n-                }\n-            });\n+            Map<String, User> readUsers = (Map<String, User>)metastorage.readForPredicate(\n+                (IgnitePredicate<String>)key -> key != null && key.startsWith(STORE_USER_PREFIX));\n \n             for (User u : readUsers.values())\n                 users.put(u.name(), u);\n@@ -1304,6 +1295,7 @@ private UserOperationWorker(UserManagementOperation op, UserOperationFinishFutur\n      * Initial users set worker.\n      */\n     private class RefreshUsersStorageWorker extends GridWorker {\n+        /** */\n         private final ArrayList<User> newUsrs;\n \n         /**\n@@ -1329,11 +1321,8 @@ private RefreshUsersStorageWorker(ArrayList<User> usrs) {\n                 sharedCtx.database().checkpointReadLock();\n \n             try {\n-                Map<String, User> existUsrs = (Map<String, User>)metastorage.readForPredicate(new IgnitePredicate<String>() {\n-                    @Override public boolean apply(String key) {\n-                        return key != null && key.startsWith(STORE_USER_PREFIX);\n-                    }\n-                });\n+                Map<String, User> existUsrs = (Map<String, User>)metastorage.readForPredicate(\n+                    (IgnitePredicate<String>)key -> key != null && key.startsWith(STORE_USER_PREFIX));\n \n                 for (String key : existUsrs.keySet())\n                     metastorage.remove(key);",
                "deletions": 42
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9845 Web Agent:\n 1. Fixed NPE in disabled trust manager.\n 2. Renamed short options, added description to README.txt, added new options in generated \"default.properties\".",
        "commit": "https://github.com/apache/ignite/commit/6ffaba550bc85722823c7b67140e84c370716693",
        "parent": "https://github.com/apache/ignite/commit/94fce9743b89b2fc5f603fb9eb46671393af55e2",
        "bug_id": "ignite_38",
        "file": [
            {
                "sha": "75548c883ecc8df18b9622540061889192f2563d",
                "filename": "modules/web-console/backend/services/downloads.js",
                "blob_url": "https://github.com/apache/ignite/blob/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/backend/services/downloads.js",
                "raw_url": "https://github.com/apache/ignite/raw/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/backend/services/downloads.js",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/backend/services/downloads.js?ref=6ffaba550bc85722823c7b67140e84c370716693",
                "patch": "@@ -67,6 +67,16 @@ module.exports.factory = (settings, agentsHnd, errors) => {\n                             prop.push('#node-login=ignite');\n                             prop.push('#node-password=ignite');\n                             prop.push('#driver-folder=./jdbc-drivers');\n+                            prop.push('#Uncomment and configure following SSL options if needed:');\n+                            prop.push('#node-key-store=client.jks');\n+                            prop.push('#node-key-store-password=MY_PASSWORD');\n+                            prop.push('#node-trust-store=ca.jks');\n+                            prop.push('#node-trust-store-password=MY_PASSWORD');\n+                            prop.push('#server-key-store=client.jks');\n+                            prop.push('#server-key-store-password=MY_PASSWORD');\n+                            prop.push('#server-trust-store=ca.jks');\n+                            prop.push('#server-trust-store-password=MY_PASSWORD');\n+                            prop.push('#cipher-suites=CIPHER1,CIPHER2,CIPHER3');\n \n                             zip.file(`${folder}/default.properties`, prop.join('\\n'));\n ",
                "deletions": 0
            },
            {
                "sha": "6b2990202b8917b0b709e0d64c919b1ca824d0f3",
                "filename": "modules/web-console/web-agent/README.txt",
                "blob_url": "https://github.com/apache/ignite/blob/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/README.txt",
                "raw_url": "https://github.com/apache/ignite/raw/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/README.txt",
                "status": "modified",
                "changes": 50,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/README.txt?ref=6ffaba550bc85722823c7b67140e84c370716693",
                "patch": "@@ -23,6 +23,15 @@ Configuration file:\n     node-login\n     node-password\n     driver-folder\n+    node-key-store\n+    node-key-store-password\n+    node-trust-store\n+    node-trust-store-password\n+    server-key-store\n+    server-key-store-password\n+    server-trust-store\n+    server-trust-store-password\n+    cipher-suites\n \n   Example configuration file:\n     tokens=1a2b3c4d5f,2j1s134d12\n@@ -41,23 +50,44 @@ Ignite Web agent requirements:\n \n Options:\n   -h, --help\n-     Print this help message.\n+    Print this help message\n   -c, --config\n-     Path to configuration file\n+    Path to agent property file\n+    Default value: default.properties\n   -d, --driver-folder\n-     Path to folder with JDBC drivers, default value: ./jdbc-drivers\n+    Path to folder with JDBC drivers\n+    Default value: ./jdbc-drivers\n   -n, --node-uri\n-     Comma-separated list of URIs for connect to Ignite REST server,\n-     default value: http://localhost:8080\n+    Comma-separated list of URIs for connect to Ignite node via REST\n+    Default value: http://localhost:8080\n   -nl, --node-login\n-     User name that will be used to connect to secured cluster.\n+    User name that will be used to connect to secured cluster\n   -np, --node-password\n-     Password that will be used to connect to secured cluster\n+    Password that will be used to connect to secured cluster\n   -s, --server-uri\n-     URI for connect to Ignite Web Console via web-socket protocol,\n-     default value: http://localhost:3000\n+    URI for connect to Ignite Console via web-socket protocol\n+    Default value: http://localhost:3000\n   -t, --tokens\n-     Comma-separated list of user's security tokens.\n+     User's tokens separated by comma used to connect to Ignite Console.\n+  -nks, --node-key-store\n+    Path to key store that will be used to connect to cluster\n+  -nksp, --node-key-store-password\n+    Optional password for node key store\n+  -nts, --node-trust-store\n+    Path to trust store that will be used to connect to cluster\n+  -ntsp, --node-trust-store-password\n+    Optional password for node trust store\n+  -sks, --server-key-store\n+    Path to key store that will be used to connect to Web server\n+  -sksp, --server-key-store-password\n+    Optional password for server key store\n+  -sts, --server-trust-store\n+    Path to trust store that will be used to connect to Web server\n+  -stsp, --server-trust-store-password\n+    Optional password for server trust store\n+  -cs, --cipher-suites\n+     Optional comma-separated list of SSL cipher suites to be used to connect\n+     to server and cluster\n \n How to build:\n   To build from sources run following command in Ignite project root folder:",
                "deletions": 10
            },
            {
                "sha": "6eed5179847ee723eb32bd9c13eb017a7a8e3e0a",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentConfiguration.java",
                "blob_url": "https://github.com/apache/ignite/blob/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentConfiguration.java",
                "raw_url": "https://github.com/apache/ignite/raw/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentConfiguration.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentConfiguration.java?ref=6ffaba550bc85722823c7b67140e84c370716693",
                "patch": "@@ -60,7 +60,7 @@\n \n     /** */\n     @Parameter(names = {\"-n\", \"--node-uri\"},\n-        description = \"Comma-separated URIs for connect to Ignite node via REST\" +\n+        description = \"Comma-separated list of URIs for connect to Ignite node via REST\" +\n             \"                        \" +\n             \"      Default value: \" + DFLT_NODE_URI)\n     private List<String> nodeURIs;\n@@ -102,7 +102,7 @@\n     private String nodeKeyStore;\n \n     /** */\n-    @Parameter(names = {\"-nkp\", \"--node-key-store-password\"},\n+    @Parameter(names = {\"-nksp\", \"--node-key-store-password\"},\n         description = \"Optional password for node key store\")\n     private String nodeKeyStorePass;\n \n@@ -112,7 +112,7 @@\n     private String nodeTrustStore;\n \n     /** */\n-    @Parameter(names = {\"-ntp\", \"--node-trust-store-password\"},\n+    @Parameter(names = {\"-ntsp\", \"--node-trust-store-password\"},\n         description = \"Optional password for node trust store\")\n     private String nodeTrustStorePass;\n \n@@ -122,7 +122,7 @@\n     private String srvKeyStore;\n \n     /** */\n-    @Parameter(names = {\"-skp\", \"--server-key-store-password\"},\n+    @Parameter(names = {\"-sksp\", \"--server-key-store-password\"},\n         description = \"Optional password for server key store\")\n     private String srvKeyStorePass;\n \n@@ -132,7 +132,7 @@\n     private String srvTrustStore;\n \n     /** */\n-    @Parameter(names = {\"-stp\", \"--server-trust-store-password\"},\n+    @Parameter(names = {\"-stsp\", \"--server-trust-store-password\"},\n         description = \"Optional password for server trust store\")\n     private String srvTrustStorePass;\n ",
                "deletions": 5
            },
            {
                "sha": "c109da664effbf43f9325a2f02e91448f6b50f11",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/6ffaba550bc85722823c7b67140e84c370716693/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentUtils.java?ref=6ffaba550bc85722823c7b67140e84c370716693",
                "patch": "@@ -318,7 +318,7 @@ private static X509TrustManager disabledTrustManager() {\n         return new X509TrustManager() {\n             /** {@inheritDoc} */\n             @Override public X509Certificate[] getAcceptedIssuers() {\n-                return null;\n+                return new X509Certificate[0];\n             }\n \n             /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10385 Avoid NPE by replacing null fields with zero-length arrays - Fixes #5487.\n\nSigned-off-by: Ilya Kasnacheev <ilya.kasnacheev@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/7256e5752084118fc1530eb1893ffab8ba733e0c",
        "parent": "https://github.com/apache/ignite/commit/0b3718f6050290b1c2ec0c070eb207d65eba671c",
        "bug_id": "ignite_39",
        "file": [
            {
                "sha": "986a100222ac6f937c072f96f99bed8bbf8b8a36",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/CachePartitionPartialCountersMap.java",
                "blob_url": "https://github.com/apache/ignite/blob/7256e5752084118fc1530eb1893ffab8ba733e0c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/CachePartitionPartialCountersMap.java",
                "raw_url": "https://github.com/apache/ignite/raw/7256e5752084118fc1530eb1893ffab8ba733e0c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/CachePartitionPartialCountersMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/CachePartitionPartialCountersMap.java?ref=7256e5752084118fc1530eb1893ffab8ba733e0c",
                "patch": "@@ -53,7 +53,7 @@\n \n     /** */\n     private CachePartitionPartialCountersMap() {\n-        // Empty map.\n+        this(0);\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "08c62598eaea4ad2fe3e47c183270a3e6f93684b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/CachePartitionPartialCountersMapSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/7256e5752084118fc1530eb1893ffab8ba733e0c/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/CachePartitionPartialCountersMapSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/7256e5752084118fc1530eb1893ffab8ba733e0c/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/CachePartitionPartialCountersMapSelfTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/CachePartitionPartialCountersMapSelfTest.java?ref=7256e5752084118fc1530eb1893ffab8ba733e0c",
                "patch": "@@ -23,9 +23,12 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n+/**\n+ *\n+ */\n @RunWith(JUnit4.class)\n public class CachePartitionPartialCountersMapSelfTest extends GridCommonAbstractTest {\n-\n+    /** */\n     @Test\n     public void testAddAndRemove() throws Exception {\n         CachePartitionPartialCountersMap map = new CachePartitionPartialCountersMap(10);\n@@ -59,4 +62,15 @@ public void testAddAndRemove() throws Exception {\n         }\n     }\n \n+    /** */\n+    @Test\n+    public void testEmptyMap() throws Exception {\n+        CachePartitionPartialCountersMap map = CachePartitionPartialCountersMap.EMPTY;\n+\n+        assertFalse(map.remove(1));\n+\n+        map.trim();\n+\n+        assertNotNull(map.toString());\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4111 Fixed NPE on client connect before disco impl is initialized - Fixes #5650.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/c48f3bc1046b1c496e0261edf7a693efc728b8f6",
        "parent": "https://github.com/apache/ignite/commit/4ae29fca74e814321c8448e00e9d3fdcd54733aa",
        "bug_id": "ignite_40",
        "file": [
            {
                "sha": "c48fa11325ad5aad84bacbab46b9319c382d7b43",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "patch": "@@ -451,6 +451,10 @@ public UUID getCoordinator() {\n \n     /** {@inheritDoc} */\n     @Override public Collection<ClusterNode> getRemoteNodes() {\n+        // Return empty nodes for resolving compatibility until implementation started.\n+        if (impl == null)\n+            return Collections.emptyList();\n+\n         return impl.getRemoteNodes();\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "029331617fa1110b92cc074d89beea38910140bf",
                "filename": "modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "status": "added",
                "changes": 172,
                "additions": 172,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.communication.tcp;\n+\n+import java.net.BindException;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.SocketChannel;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioServerListenerAdapter;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.IgniteSpiException;\n+import org.apache.ignite.spi.communication.tcp.messages.HandshakeWaitMessage;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Testing {@link TcpCommunicationSpi} that will send the wait handshake message on received connections until SPI\n+ * context initialized.\n+ */\n+@RunWith(JUnit4.class)\n+public class IgniteTcpCommunicationConnectOnInitTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final int START_PORT = 55443;\n+\n+    /** */\n+    private volatile CountDownLatch commStartLatch;\n+\n+    /** */\n+    private volatile int commSpiBoundedPort;\n+\n+    /** */\n+    private volatile String commSpiSrvAddr;\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestCommunicationSpi());\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testClientConnectBeforeDiscoveryStarted() throws Exception {\n+        GridNioServer<?> srvr = startServer();\n+\n+        try {\n+            commStartLatch = new CountDownLatch(1);\n+\n+            IgniteInternalFuture<Boolean> fut = GridTestUtils.runAsync(() -> {\n+                startGrid(0);\n+\n+                return true;\n+            });\n+\n+            assertTrue(commStartLatch.await(5_000, TimeUnit.MILLISECONDS));\n+\n+            SocketChannel ch = SocketChannel.open(new InetSocketAddress(commSpiSrvAddr, commSpiBoundedPort));\n+\n+            GridNioSession ses = srvr.createSession(ch, null, false, null).get();\n+\n+            boolean wait = GridTestUtils.waitForCondition(\n+                () -> ses.bytesReceived() == HandshakeWaitMessage.MESSAGE_FULL_SIZE, 1000);\n+\n+            assertTrue(\"Handshake not started.\", wait);\n+\n+            fut.get();\n+        }\n+        finally {\n+            srvr.stop();\n+        }\n+    }\n+\n+    /**\n+     * Starts custom server.\n+     *\n+     * @return Started server.\n+     * @throws Exception If failed.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private GridNioServer<?> startServer() throws Exception {\n+        int srvPort = START_PORT;\n+\n+        for (int i = 0; i < 10; i++) {\n+            try {\n+                GridNioServerListenerAdapter lsnr = new GridNioServerListenerAdapter() {\n+                    @Override public void onConnected(GridNioSession ses) {\n+                        // No-op.\n+                    }\n+\n+                    @Override public void onDisconnected(GridNioSession ses, @Nullable Exception e) {\n+                        // No-op.\n+                    }\n+\n+                    @Override public void onMessage(GridNioSession ses, Object msg) {\n+                        // No-op.\n+                    }\n+                };\n+\n+                GridNioServer<?> srvr = GridNioServer.builder()\n+                    .address(U.getLocalHost())\n+                    .port(srvPort)\n+                    .listener(lsnr)\n+                    .logger(log)\n+                    .selectorCount(Runtime.getRuntime().availableProcessors())\n+                    .igniteInstanceName(\"nio-test-grid\")\n+                    .filters().build();\n+\n+                srvr.start();\n+\n+                return srvr;\n+            }\n+            catch (IgniteCheckedException e) {\n+                if (i < 9 && e.hasCause(BindException.class)) {\n+                    log.error(\"Failed to start server, will try another port [err=\" + e + \", port=\" + srvPort + ']');\n+\n+                    U.sleep(1000);\n+\n+                    srvPort++;\n+                }\n+                else\n+                    throw e;\n+            }\n+        }\n+\n+        fail(\"Failed to start server.\");\n+\n+        return null;\n+    }\n+\n+    /** */\n+    private class TestCommunicationSpi extends TcpCommunicationSpi {\n+        /** {@inheritDoc} */\n+        @Override public void spiStart(String igniteInstanceName) throws IgniteSpiException {\n+            super.spiStart(igniteInstanceName);\n+\n+            commSpiBoundedPort = boundPort();\n+\n+            commSpiSrvAddr = getLocalAddress();\n+\n+            commStartLatch.countDown();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "5a208e67343e1a3eb2e1e00f4f52a3849e5fcd0f",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpFailureDetectionSelfTest;\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpNoDelayOffSelfTest;\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpSelfTest;\n+import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationConnectOnInitTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationHandshakeWaitSslTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationHandshakeWaitTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationRecoveryAckClosureSelfTest;\n@@ -92,6 +93,7 @@ public static TestSuite suite() throws Exception {\n \n         suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationHandshakeWaitTest.class));\n         suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationHandshakeWaitSslTest.class));\n+        suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationConnectOnInitTest.class));\n \n         //suite.addTest(new TestSuite(GridCacheDhtLockBackupSelfTest.class));\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9612 Fix NPE related not thread safe usage TreeMap onMarkCheckpointBegin",
        "commit": "https://github.com/apache/ignite/commit/4527fe6de8bddea31a8142e78a84eacb534d0384",
        "parent": "https://github.com/apache/ignite/commit/9e0c1e7eacd4ffdb48f3086a22591e2e4a70757e",
        "bug_id": "ignite_41",
        "file": [
            {
                "sha": "cab90c5b3954ac5ca2269885a38b1c8ba1d4e25c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/partstate/PartitionAllocationMap.java",
                "blob_url": "https://github.com/apache/ignite/blob/4527fe6de8bddea31a8142e78a84eacb534d0384/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/partstate/PartitionAllocationMap.java",
                "raw_url": "https://github.com/apache/ignite/raw/4527fe6de8bddea31a8142e78a84eacb534d0384/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/partstate/PartitionAllocationMap.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/partstate/PartitionAllocationMap.java?ref=4527fe6de8bddea31a8142e78a84eacb534d0384",
                "patch": "@@ -17,14 +17,14 @@\n \n package org.apache.ignite.internal.processors.cache.persistence.partstate;\n \n-import java.util.HashSet;\n import java.util.Map;\n import java.util.NavigableMap;\n import java.util.Set;\n-import java.util.TreeMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n import org.apache.ignite.internal.pagemem.FullPageId;\n import org.apache.ignite.internal.pagemem.PageIdAllocator;\n import org.apache.ignite.internal.pagemem.PageIdUtils;\n+import org.apache.ignite.internal.util.GridConcurrentHashSet;\n import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n import org.jetbrains.annotations.NotNull;\n@@ -37,11 +37,11 @@\n public class PartitionAllocationMap {\n     /** Maps following pairs: (groupId, partId) -> (lastAllocatedCount, allocatedCount) */\n     @GridToStringInclude\n-    private final NavigableMap<GroupPartitionId, PagesAllocationRange> map = new TreeMap<>();\n+    private final NavigableMap<GroupPartitionId, PagesAllocationRange> map = new ConcurrentSkipListMap<>();\n \n     /** Partitions forced to be skipped. */\n     @GridToStringInclude\n-    private final Set<GroupPartitionId> skippedParts = new HashSet<>();\n+    private final Set<GroupPartitionId> skippedParts = new GridConcurrentHashSet<>();\n \n     /**\n      * Returns the value to which the specified key is mapped,",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-10446 Fix control.sh --cache idle_verify fail with NPE when node left grid\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/d7af985383d9e82608fd77904415960492ed6290",
        "parent": "https://github.com/apache/ignite/commit/859b37cc8016e4d12178d80e717bd52f992d6e34",
        "bug_id": "ignite_42",
        "file": [
            {
                "sha": "8dcceed65e50361df415595621bf9cfde4813a89",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/commandline/CommandHandler.java?ref=d7af985383d9e82608fd77904415960492ed6290",
                "patch": "@@ -855,7 +855,7 @@ private void cacheContention(GridClient client, CacheArguments cacheArgs) throws\n             log(\"Contention check failed on nodes:\");\n \n             for (Map.Entry<UUID, Exception> e : res.exceptions().entrySet()) {\n-                log(\"Node ID = \" + e.getKey());\n+                log(\"Node ID: \" + e.getKey());\n \n                 log(\"Exception message:\");\n                 log(e.getValue().getMessage());\n@@ -890,7 +890,7 @@ private void cacheValidateIndexes(GridClient client, CacheArguments cacheArgs) t\n             log(\"Index validation failed on nodes:\");\n \n             for (Map.Entry<UUID, Exception> e : taskRes.exceptions().entrySet()) {\n-                log(i(\"Node ID = \" + e.getKey()));\n+                log(i(\"Node ID: \" + e.getKey()));\n \n                 log(i(\"Exception message:\"));\n                 log(i(e.getValue().getMessage(), 2));",
                "deletions": 2
            },
            {
                "sha": "a153063d8998a039b0bba98e0f66057c1a26371d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/IdleVerifyResultV2.java",
                "blob_url": "https://github.com/apache/ignite/blob/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/IdleVerifyResultV2.java",
                "raw_url": "https://github.com/apache/ignite/raw/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/IdleVerifyResultV2.java",
                "status": "modified",
                "changes": 34,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/IdleVerifyResultV2.java?ref=d7af985383d9e82608fd77904415960492ed6290",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.ObjectOutput;\n import java.util.List;\n import java.util.Map;\n+import java.util.UUID;\n import java.util.function.Consumer;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.util.typedef.internal.S;\n@@ -43,6 +44,9 @@\n     /** Moving partitions. */\n     private Map<PartitionKeyV2, List<PartitionHashRecordV2>> movingPartitions;\n \n+    /** Exceptions. */\n+    private Map<UUID, Exception> exceptions;\n+\n     /**\n      * @param cntrConflicts Counter conflicts.\n      * @param hashConflicts Hash conflicts.\n@@ -51,11 +55,13 @@\n     public IdleVerifyResultV2(\n         Map<PartitionKeyV2, List<PartitionHashRecordV2>> cntrConflicts,\n         Map<PartitionKeyV2, List<PartitionHashRecordV2>> hashConflicts,\n-        Map<PartitionKeyV2, List<PartitionHashRecordV2>> movingPartitions\n+        Map<PartitionKeyV2, List<PartitionHashRecordV2>> movingPartitions,\n+        Map<UUID, Exception> exceptions\n     ) {\n         this.cntrConflicts = cntrConflicts;\n         this.hashConflicts = hashConflicts;\n         this.movingPartitions = movingPartitions;\n+        this.exceptions = exceptions;\n     }\n \n     /**\n@@ -64,11 +70,17 @@ public IdleVerifyResultV2(\n     public IdleVerifyResultV2() {\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public byte getProtocolVersion() {\n+        return V2;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override protected void writeExternalData(ObjectOutput out) throws IOException {\n         U.writeMap(out, cntrConflicts);\n         U.writeMap(out, hashConflicts);\n         U.writeMap(out, movingPartitions);\n+        U.writeMap(out, exceptions);\n     }\n \n     /** {@inheritDoc} */\n@@ -77,6 +89,9 @@ public IdleVerifyResultV2() {\n         cntrConflicts = U.readMap(in);\n         hashConflicts = U.readMap(in);\n         movingPartitions = U.readMap(in);\n+\n+        if (protoVer >= V2)\n+            exceptions = U.readMap(in);\n     }\n \n     /**\n@@ -107,6 +122,13 @@ public boolean hasConflicts() {\n         return !F.isEmpty(hashConflicts()) || !F.isEmpty(counterConflicts());\n     }\n \n+    /**\n+     * @return Exceptions on nodes.\n+     */\n+    public Map<UUID, Exception> exceptions() {\n+        return exceptions;\n+    }\n+\n     /**\n      * Print formatted result to given printer.\n      *\n@@ -159,6 +181,16 @@ public void print(Consumer<String> printer) {\n \n             printer.accept(\"\\n\");\n         }\n+\n+        if (!F.isEmpty(exceptions())) {\n+            printer.accept(\"Idle verify failed on nodes:\\n\");\n+\n+            for (Map.Entry<UUID, Exception> e : exceptions().entrySet()) {\n+                printer.accept(\"Node ID: \" + e.getKey() + \"\\n\");\n+                printer.accept(\"Exception message:\" + \"\\n\");\n+                printer.accept(e.getValue().getMessage() + \"\\n\");\n+            }\n+        }\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "5945f4d0990b139be96b717b5697822cde3b08a3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsDumpTask.java",
                "blob_url": "https://github.com/apache/ignite/blob/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsDumpTask.java",
                "raw_url": "https://github.com/apache/ignite/raw/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsDumpTask.java",
                "status": "modified",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsDumpTask.java?ref=d7af985383d9e82608fd77904415960492ed6290",
                "patch": "@@ -30,15 +30,18 @@\n import java.util.TreeMap;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteException;\n+import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.compute.ComputeJob;\n import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n import org.apache.ignite.compute.ComputeTaskAdapter;\n import org.apache.ignite.internal.processors.task.GridInternal;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.visor.verify.VisorIdleVerifyDumpTaskArg;\n import org.apache.ignite.internal.visor.verify.VisorIdleVerifyTaskArg;\n import org.apache.ignite.resources.IgniteInstanceResource;\n+import org.apache.ignite.resources.LoggerResource;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n@@ -68,6 +71,10 @@\n     @IgniteInstanceResource\n     private Ignite ignite;\n \n+    /** Injected logger. */\n+    @LoggerResource\n+    private IgniteLogger log;\n+\n     /** {@inheritDoc} */\n     @Nullable @Override public Map<? extends ComputeJob, ClusterNode> map(\n         List<ClusterNode> subgrid, VisorIdleVerifyTaskArg arg) throws IgniteException {\n@@ -83,6 +90,9 @@\n         Map<PartitionKeyV2, List<PartitionHashRecordV2>> clusterHashes = new TreeMap<>(buildPartitionKeyComparator());\n \n         for (ComputeJobResult res : results) {\n+            if (res.getException() != null)\n+                continue;\n+\n             Map<PartitionKeyV2, PartitionHashRecordV2> nodeHashes = res.getData();\n \n             for (Map.Entry<PartitionKeyV2, PartitionHashRecordV2> e : nodeHashes.entrySet()) {\n@@ -111,6 +121,22 @@\n         return writeHashes(partitions, delegate.reduce(results), skippedRecords);\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) throws\n+        IgniteException {\n+        ComputeJobResultPolicy superRes = super.result(res, rcvd);\n+\n+        // Deny failover.\n+        if (superRes == ComputeJobResultPolicy.FAILOVER) {\n+            superRes = ComputeJobResultPolicy.WAIT;\n+\n+            log.warning(\"VerifyBackupPartitionsJobV2 failed on node \" +\n+                \"[consistentId=\" + res.getNode().consistentId() + \"]\", res.getException());\n+        }\n+\n+        return superRes;\n+    }\n+\n     /**\n      * Checking conditions for adding given record to result.\n      *\n@@ -140,6 +166,8 @@ private boolean needToAdd(List<PartitionHashRecordV2> records) {\n \n     /**\n      * @param partitions Dump result.\n+     * @param conflictRes Conflict results.\n+     * @param skippedRecords Number of empty partitions.\n      * @return Path where results are written.\n      * @throws IgniteException If failed to write the file.\n      */",
                "deletions": 0
            },
            {
                "sha": "5e872eb7c61216e8e33a3b53490ec798982f1b8e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsTaskV2.java",
                "blob_url": "https://github.com/apache/ignite/blob/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsTaskV2.java",
                "raw_url": "https://github.com/apache/ignite/raw/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsTaskV2.java",
                "status": "modified",
                "changes": 31,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/verify/VerifyBackupPartitionsTaskV2.java?ref=d7af985383d9e82608fd77904415960492ed6290",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.UUID;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ForkJoinPool;\n@@ -41,6 +42,7 @@\n import org.apache.ignite.compute.ComputeJob;\n import org.apache.ignite.compute.ComputeJobAdapter;\n import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n import org.apache.ignite.compute.ComputeTaskAdapter;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.configuration.DataStorageConfiguration;\n@@ -77,6 +79,10 @@\n     /** First version of Ignite that is capable of executing Idle Verify V2. */\n     public static final IgniteProductVersion V2_SINCE_VER = IgniteProductVersion.fromString(\"2.5.3\");\n \n+    /** Injected logger. */\n+    @LoggerResource\n+    private IgniteLogger log;\n+\n     /** */\n     private static final long serialVersionUID = 0L;\n \n@@ -95,8 +101,15 @@\n     @Nullable @Override public IdleVerifyResultV2 reduce(List<ComputeJobResult> results)\n         throws IgniteException {\n         Map<PartitionKeyV2, List<PartitionHashRecordV2>> clusterHashes = new HashMap<>();\n+        Map<UUID, Exception> exceptions = new HashMap<>();\n \n         for (ComputeJobResult res : results) {\n+            if (res.getException() != null) {\n+                exceptions.put(res.getNode().id(), res.getException());\n+\n+                continue;\n+            }\n+\n             Map<PartitionKeyV2, PartitionHashRecordV2> nodeHashes = res.getData();\n \n             for (Map.Entry<PartitionKeyV2, PartitionHashRecordV2> e : nodeHashes.entrySet()) {\n@@ -141,7 +154,23 @@\n             }\n         }\n \n-        return new IdleVerifyResultV2(updateCntrConflicts, hashConflicts, movingParts);\n+        return new IdleVerifyResultV2(updateCntrConflicts, hashConflicts, movingParts, exceptions);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) throws\n+        IgniteException {\n+        ComputeJobResultPolicy superRes = super.result(res, rcvd);\n+\n+        // Deny failover.\n+        if (superRes == ComputeJobResultPolicy.FAILOVER) {\n+            superRes = ComputeJobResultPolicy.WAIT;\n+\n+            log.warning(\"VerifyBackupPartitionsJobV2 failed on node \" +\n+                \"[consistentId=\" + res.getNode().consistentId() + \"]\", res.getException());\n+        }\n+\n+        return superRes;\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "318b8379996ec597e78c0a085eefc0d3d4d83201",
                "filename": "modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/d7af985383d9e82608fd77904415960492ed6290/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "status": "modified",
                "changes": 214,
                "additions": 144,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java?ref=d7af985383d9e82608fd77904415960492ed6290",
                "patch": "@@ -32,6 +32,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n+import java.util.UUID;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -47,6 +48,7 @@\n import org.apache.ignite.IgniteAtomicSequence;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteDataStreamer;\n import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.configuration.AtomicConfiguration;\n@@ -56,6 +58,7 @@\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.configuration.WALMode;\n+import org.apache.ignite.internal.GridJobExecuteResponse;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n@@ -922,13 +925,7 @@ public void testCacheIdleVerify() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, 32))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n-\n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        createCacheAndPreload(ignite, 100);\n \n         injectTestSystemOut();\n \n@@ -956,15 +953,7 @@ public void testCacheIdleVerifyTwoConflictTypes() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        int parts = 32;\n-\n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, parts))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n-\n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        createCacheAndPreload(ignite, 100);\n \n         injectTestSystemOut();\n \n@@ -976,7 +965,7 @@ public void testCacheIdleVerifyTwoConflictTypes() throws Exception {\n \n         corruptDataEntry(cacheCtx, 1, true, false);\n \n-        corruptDataEntry(cacheCtx, 1 + parts / 2, false, true);\n+        corruptDataEntry(cacheCtx, 1 + cacheCtx.config().getAffinity().partitions() / 2, false, true);\n \n         assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\"));\n \n@@ -994,12 +983,11 @@ public void testCacheIdleVerifyDump() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        int parts = 32;\n+        int keysCount = 20;//less than parts number for ability to check skipZeros flag.\n \n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, parts))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n+        createCacheAndPreload(ignite, keysCount);\n+\n+        int parts = ignite.affinity(DEFAULT_CACHE_NAME).partitions();\n \n         ignite.createCache(new CacheConfiguration<>()\n             .setAffinity(new RendezvousAffinityFunction(false, parts))\n@@ -1008,11 +996,6 @@ public void testCacheIdleVerifyDump() throws Exception {\n \n         injectTestSystemOut();\n \n-        int keysCount = 20;//less than parts number for ability to check skipZeros flag.\n-\n-        for (int i = 0; i < keysCount; i++)\n-            cache.put(i, i);\n-\n         assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\", \"--dump\", DEFAULT_CACHE_NAME));\n \n         assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\", \"--dump\", \"--skipZeros\", DEFAULT_CACHE_NAME));\n@@ -1081,31 +1064,25 @@ public void testCacheIdleVerifyDumpForCorruptedData() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        int parts = 32;\n-\n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, parts))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n+        createCacheAndPreload(ignite, 100);\n \n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        injectTestSystemOut();\n \n-        corruptingAndCheckDefaultCache(ignite, parts, CacheFilterEnum.ALL);\n+        corruptingAndCheckDefaultCache(ignite, CacheFilterEnum.ALL);\n     }\n \n     /**\n      * @param ignite Ignite.\n-     * @param parts Parts.\n+     * @param cacheFilterEnum Filter enum.\n      */\n-    private void corruptingAndCheckDefaultCache(IgniteEx ignite, int parts, CacheFilterEnum cacheFilterEnum) throws IOException {\n+    private void corruptingAndCheckDefaultCache(IgniteEx ignite, CacheFilterEnum cacheFilterEnum) throws IOException {\n         injectTestSystemOut();\n \n         GridCacheContext<Object, Object> cacheCtx = ignite.cachex(DEFAULT_CACHE_NAME).context();\n \n         corruptDataEntry(cacheCtx, 0, true, false);\n \n-        corruptDataEntry(cacheCtx, parts / 2, false, true);\n+        corruptDataEntry(cacheCtx, cacheCtx.config().getAffinity().partitions() / 2, false, true);\n \n         assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\", \"--dump\", \"--cacheFilter\", cacheFilterEnum.toString()));\n \n@@ -1120,6 +1097,130 @@ private void corruptingAndCheckDefaultCache(IgniteEx ignite, int parts, CacheFil\n             fail(\"Should be found dump with conflicts\");\n     }\n \n+    /**\n+     * Tests that idle verify print partitions info when node failing.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testCacheIdleVerifyDumpWhenNodeFailing() throws Exception {\n+        Ignite ignite = startGrids(3);\n+\n+        Ignite unstable = startGrid(\"unstable\");\n+\n+        ignite.cluster().active(true);\n+\n+        createCacheAndPreload(ignite, 100);\n+\n+        for (int i = 0; i < 3; i++) {\n+            TestRecordingCommunicationSpi.spi(unstable).blockMessages(GridJobExecuteResponse.class,\n+                getTestIgniteInstanceName(i));\n+        }\n+\n+        injectTestSystemOut();\n+\n+        IgniteInternalFuture fut = GridTestUtils.runAsync(() -> {\n+            assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\", \"--dump\"));\n+        });\n+\n+        TestRecordingCommunicationSpi.spi(unstable).waitForBlocked();\n+\n+        UUID unstableNodeId = unstable.cluster().localNode().id();\n+\n+        unstable.close();\n+\n+        fut.get();\n+\n+        checkExceptionMessageOnReport(unstableNodeId);\n+    }\n+\n+    /**\n+     * Tests that idle verify print partitions info when several nodes failing at same time.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testCacheIdleVerifyDumpWhenSeveralNodesFailing() throws Exception {\n+        int nodes = 6;\n+\n+        Ignite ignite = startGrids(nodes);\n+\n+        List<Ignite> unstableNodes = new ArrayList<>(nodes / 2);\n+\n+        for (int i = 0; i < nodes; i++) {\n+            if (i % 2 == 1)\n+                unstableNodes.add(ignite(i));\n+        }\n+\n+        ignite.cluster().active(true);\n+\n+        createCacheAndPreload(ignite, 100);\n+\n+        for (Ignite unstable : unstableNodes) {\n+            for (int i = 0; i < nodes; i++) {\n+                TestRecordingCommunicationSpi.spi(unstable).blockMessages(GridJobExecuteResponse.class,\n+                    getTestIgniteInstanceName(i));\n+            }\n+        }\n+\n+        injectTestSystemOut();\n+\n+        IgniteInternalFuture fut = GridTestUtils.runAsync(() -> {\n+            assertEquals(EXIT_CODE_OK, execute(\"--cache\", \"idle_verify\", \"--dump\"));\n+        });\n+\n+        List<UUID> unstableNodeIds = new ArrayList<>(nodes / 2);\n+\n+        for (Ignite unstable : unstableNodes) {\n+            TestRecordingCommunicationSpi.spi(unstable).waitForBlocked();\n+\n+            unstableNodeIds.add(unstable.cluster().localNode().id());\n+\n+            unstable.close();\n+        }\n+\n+        fut.get();\n+\n+        for (UUID unstableId : unstableNodeIds)\n+            checkExceptionMessageOnReport(unstableId);\n+    }\n+\n+    /**\n+     * Creates default cache and preload some data entries.\n+     *\n+     * @param ignite Ignite.\n+     * @param countEntries Count of entries.\n+     */\n+    private void createCacheAndPreload(Ignite ignite, int countEntries) {\n+        ignite.createCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME)\n+            .setAffinity(new RendezvousAffinityFunction(false, 32))\n+            .setBackups(1));\n+\n+        try (IgniteDataStreamer streamer = ignite.dataStreamer(DEFAULT_CACHE_NAME)) {\n+            for (int i = 0; i < countEntries; i++)\n+                streamer.addData(i, i);\n+        }\n+    }\n+\n+    /**\n+     * Try to finds node failed exception message on output report.\n+     *\n+     * @param unstableNodeId Unstable node id.\n+     */\n+    private void checkExceptionMessageOnReport(UUID unstableNodeId) throws IOException {\n+        Matcher fileNameMatcher = dumpFileNameMatcher();\n+\n+        if (fileNameMatcher.find()) {\n+            String dumpWithConflicts = new String(Files.readAllBytes(Paths.get(fileNameMatcher.group(1))));\n+\n+            assertTrue(dumpWithConflicts.contains(\"Idle verify failed on nodes:\"));\n+\n+            assertTrue(dumpWithConflicts.contains(\"Node ID: \" + unstableNodeId + \"\\n\" +\n+                \"Exception message:\\n\" +\n+                \"Node has left grid: \" + unstableNodeId));\n+        }\n+        else\n+            fail(\"Should be found dump with conflicts\");\n+    }\n+\n     /**\n      * Tests that idle verify print partitions info over system caches.\n      *\n@@ -1188,28 +1289,13 @@ public void testCacheIdleVerifyDumpForCorruptedDataOnSystemCache() throws Except\n      */\n     @Test\n     public void testCacheIdleVerifyDumpForCorruptedDataOnPersistenceClientCache() throws Exception {\n-        int parts = 32;\n-\n-        dataRegionConfiguration = new DataRegionConfiguration()\n-            .setName(\"persistence-region\")\n-            .setMaxSize(100L * 1024 * 1024)\n-            .setPersistenceEnabled(true);\n-\n         IgniteEx ignite = (IgniteEx)startGrids(3);\n \n         ignite.cluster().active(true);\n \n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, parts))\n-            .setBackups(2)\n-            .setName(DEFAULT_CACHE_NAME)\n-            .setDataRegionName(\"persistence-region\"));\n-\n-        // Adding some assignments without deployments.\n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        createCacheAndPreload(ignite, 100);\n \n-        corruptingAndCheckDefaultCache(ignite, parts, CacheFilterEnum.PERSISTENT);\n+        corruptingAndCheckDefaultCache(ignite, CacheFilterEnum.PERSISTENT);\n     }\n \n     /**\n@@ -1572,13 +1658,7 @@ public void testCacheDistribution() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, 32))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n-\n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        createCacheAndPreload(ignite, 100);\n \n         injectTestSystemOut();\n \n@@ -1623,13 +1703,7 @@ public void testCacheResetLostPartitions() throws Exception {\n \n         ignite.cluster().active(true);\n \n-        IgniteCache<Object, Object> cache = ignite.createCache(new CacheConfiguration<>()\n-            .setAffinity(new RendezvousAffinityFunction(false, 32))\n-            .setBackups(1)\n-            .setName(DEFAULT_CACHE_NAME));\n-\n-        for (int i = 0; i < 100; i++)\n-            cache.put(i, i);\n+        createCacheAndPreload(ignite, 100);\n \n         injectTestSystemOut();\n ",
                "deletions": 70
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9113: Lazy memory allocation implementation (#6388)\n\n* IGNITE-9113: Lazy memory allocation implemented.\r\n\r\n* IGNITE-9113: Lazy memory allocation implemented.\r\n\r\n* IGNITE-9113:\r\n\r\n* useless file removed\r\n* test added to suite.\r\n\r\n* IGNITE-9113:\r\n\r\n* Fix for persistence mode.\r\n* One test Ignored as it not working.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: double start fix.\r\n\r\n* IGNITE-9113: double start assert.\r\n\r\n* IGNITE-9113: Fix of several issues.\r\n\r\n* IGNITE-9113: Minor fixes.\r\n\r\n* IGNITE-9113: Tests fixes.\r\n\r\n* IGNITE-9113: NPE fixes for client nodes..\r\n\r\n* IGNITE-9113: NPE fixes for some modes.\r\n\r\n* IGNITE-9113: .Net fixes.\r\n\r\n* IGNITE-9113: .Net fixes.\r\n\r\n* IGNITE-9113: Useless log removed.\r\n\r\n* IGNITE-9113: Temporary commit.\r\n\r\n* IGNITE-9113: Flag moved to DataRegionConfiguration.\r\n\r\n* IGNITE-9113: NPE fix.\r\n\r\n* IGNITE-9113: Revert unnecessary static import.\r\n\r\n* IGNITE-9113: System data regions are not lazy.\r\n\r\n* IGNITE-9113: JavaDoc fix.\r\n\r\n* IGNITE-9113: Unused import removed.\r\n\r\n* IGNITE-9113: double stop fix.\r\n\r\n* IGNITE-9113: Unused import fix.\r\n\r\n* IGNITE-9113: Code review fixes.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: Tests fixed.\r\n\r\n* IGNITE-9560: Fix test.",
        "commit": "https://github.com/apache/ignite/commit/4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
        "parent": "https://github.com/apache/ignite/commit/48e6719f1f7156126dcf0dce54fad58c73da2392",
        "bug_id": "ignite_43",
        "file": [
            {
                "sha": "85910005a37ee560d4ee17ee70f522a6691616b0",
                "filename": "modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "status": "modified",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -133,6 +133,14 @@\n     /** Temporary buffer size for checkpoints in bytes. */\n     private long checkpointPageBufSize;\n \n+    /**\n+     * If {@code true}, memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     *\n+     * Default is {@code true}.\n+     */\n+    private boolean lazyMemoryAllocation = true;\n+\n     /**\n      * Gets data region name.\n      *\n@@ -433,6 +441,29 @@ public DataRegionConfiguration setCheckpointPageBufferSize(long checkpointPageBu\n         return this;\n     }\n \n+    /**\n+     * @return {@code True} if memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     */\n+    public boolean isLazyMemoryAllocation() {\n+        return lazyMemoryAllocation;\n+    }\n+\n+    /**\n+     * Sets {@code lazyMemoryAllocation} flag value.\n+     *\n+     * If {@code true}, memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     *\n+     * @param lazyMemoryAllocation Flag value.\n+     * @return {@code this} for chaining.\n+     */\n+    public DataRegionConfiguration setLazyMemoryAllocation(boolean lazyMemoryAllocation) {\n+        this.lazyMemoryAllocation = lazyMemoryAllocation;\n+\n+        return this;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(DataRegionConfiguration.class, this);",
                "deletions": 0
            },
            {
                "sha": "c3c725d9430ae8518d98061a0a889eb03bf5d5b5",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -2010,7 +2010,8 @@ private String dataRegionConfigurationMessage(DataRegionConfiguration regCfg) {\n         m.a(\"  ^-- \").a(regCfg.getName()).a(\" [\");\n         m.a(\"initSize=\").a(U.readableSize(regCfg.getInitialSize(), false));\n         m.a(\", maxSize=\").a(U.readableSize(regCfg.getMaxSize(), false));\n-        m.a(\", persistence=\" + regCfg.isPersistenceEnabled()).a(']');\n+        m.a(\", persistence=\" + regCfg.isPersistenceEnabled());\n+        m.a(\", lazyMemoryAllocation=\" + regCfg.isLazyMemoryAllocation()).a(']');\n \n         return m.toString();\n     }",
                "deletions": 1
            },
            {
                "sha": "adfbf449c64ff5a868bcdfb4b126e3f616d0a685",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "status": "modified",
                "changes": 96,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -140,6 +140,9 @@\n     /** Segments array. */\n     private volatile Segment[] segments;\n \n+    /** Lock for segments changes. */\n+    private Object segmentsLock = new Object();\n+\n     /** */\n     private final AtomicInteger allocatedPages = new AtomicInteger();\n \n@@ -165,9 +168,9 @@\n     private final GridCacheSharedContext<?, ?> ctx;\n \n     /**\n-     * Marker that stop was invoked and memory is not supposed for any usage.\n+     * {@code False} if memory was not started or already stopped and is not supposed for any usage.\n      */\n-    private volatile boolean stopped;\n+    private volatile boolean started;\n \n     /**\n      * @param log Logger.\n@@ -208,58 +211,65 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public void start() throws IgniteException {\n-        stopped = false;\n+        synchronized (segmentsLock) {\n+            if (started)\n+                return;\n+\n+            started = true;\n \n-        long startSize = dataRegionCfg.getInitialSize();\n-        long maxSize = dataRegionCfg.getMaxSize();\n+            long startSize = dataRegionCfg.getInitialSize();\n+            long maxSize = dataRegionCfg.getMaxSize();\n \n-        long[] chunks = new long[SEG_CNT];\n+            long[] chunks = new long[SEG_CNT];\n \n-        chunks[0] = startSize;\n+            chunks[0] = startSize;\n \n-        long total = startSize;\n+            long total = startSize;\n \n-        long allocChunkSize = Math.max((maxSize - startSize) / (SEG_CNT - 1), 256L * 1024 * 1024);\n+            long allocChunkSize = Math.max((maxSize - startSize) / (SEG_CNT - 1), 256L * 1024 * 1024);\n \n-        int lastIdx = 0;\n+            int lastIdx = 0;\n \n-        for (int i = 1; i < SEG_CNT; i++) {\n-            long allocSize = Math.min(allocChunkSize, maxSize - total);\n+            for (int i = 1; i < SEG_CNT; i++) {\n+                long allocSize = Math.min(allocChunkSize, maxSize - total);\n \n-            if (allocSize <= 0)\n-                break;\n+                if (allocSize <= 0)\n+                    break;\n \n-            chunks[i] = allocSize;\n+                chunks[i] = allocSize;\n \n-            total += allocSize;\n+                total += allocSize;\n \n-            lastIdx = i;\n-        }\n+                lastIdx = i;\n+            }\n \n-        if (lastIdx != SEG_CNT - 1)\n-            chunks = Arrays.copyOf(chunks, lastIdx + 1);\n+            if (lastIdx != SEG_CNT - 1)\n+                chunks = Arrays.copyOf(chunks, lastIdx + 1);\n \n-        if (segments == null)\n-            directMemoryProvider.initialize(chunks);\n+            if (segments == null)\n+                directMemoryProvider.initialize(chunks);\n \n-        addSegment(null);\n+            addSegment(null);\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override public void stop(boolean deallocate) throws IgniteException {\n-        if (log.isDebugEnabled())\n-            log.debug(\"Stopping page memory.\");\n+        synchronized (segmentsLock) {\n+            if (log.isDebugEnabled())\n+                log.debug(\"Stopping page memory.\");\n \n-        stopped = true;\n+            started = false;\n \n-        directMemoryProvider.shutdown(deallocate);\n+            directMemoryProvider.shutdown(deallocate);\n \n-        if (directMemoryProvider instanceof Closeable) {\n-            try {\n-                ((Closeable)directMemoryProvider).close();\n-            }\n-            catch (IOException e) {\n-                throw new IgniteException(e);\n+            if (directMemoryProvider instanceof Closeable) {\n+                try {\n+                    ((Closeable)directMemoryProvider).close();\n+                }\n+                catch (IOException e) {\n+                    throw new IgniteException(e);\n+                }\n             }\n         }\n     }\n@@ -271,7 +281,7 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public long allocatePage(int grpId, int partId, byte flags) {\n-        assert !stopped;\n+        assert started;\n \n         long relPtr = borrowFreePage();\n         long absPtr = 0;\n@@ -335,7 +345,7 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public boolean freePage(int cacheId, long pageId) {\n-        assert !stopped;\n+        assert started;\n \n         releaseFreePage(pageId);\n \n@@ -461,7 +471,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long acquirePage(int cacheId, long pageId, IoStatisticsHolder statHolder) {\n-        assert !stopped;\n+        assert started;\n \n         int pageIdx = PageIdUtils.pageIndex(pageId);\n \n@@ -476,7 +486,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public void releasePage(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (trackAcquiredPages) {\n             Segment seg = segment(PageIdUtils.pageIndex(pageId));\n@@ -487,7 +497,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long readLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.readLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -497,7 +507,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long readLockForce(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.readLock(page + LOCK_OFFSET, -1))\n             return page + PAGE_OVERHEAD;\n@@ -507,14 +517,14 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public void readUnlock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         rwLock.readUnlock(page + LOCK_OFFSET);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.writeLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -524,7 +534,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long tryWriteLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.tryWriteLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -540,7 +550,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n         Boolean walPlc,\n         boolean dirtyFlag\n     ) {\n-        assert !stopped;\n+        assert started;\n \n         long actualId = PageIO.getPageId(page + PAGE_OVERHEAD);\n ",
                "deletions": 43
            },
            {
                "sha": "e095db4ae3577caebf145d570c2177b457440a23",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -2813,6 +2813,15 @@ private CacheGroupContext startCacheGroup(\n         String memPlcName = cfg.getDataRegionName();\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n+\n+        boolean needToStart = (dataRegion != null)\n+            && (cacheType != CacheType.USER\n+                || (sharedCtx.isLazyMemoryAllocation(dataRegion)\n+                    && (!cacheObjCtx.kernalContext().clientNode() || cfg.getCacheMode() == LOCAL)));\n+\n+        if (needToStart)\n+            dataRegion.pageMemory().start();\n+\n         FreeList freeList = sharedCtx.database().freeList(memPlcName);\n         ReuseList reuseList = sharedCtx.database().reuseList(memPlcName);\n ",
                "deletions": 0
            },
            {
                "sha": "32a8f5b81a44f343655d4f574e5a6c9caf8eaf33",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.ignite.internal.processors.cache.mvcc.DeadlockDetectionManager;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccCachingManager;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccProcessor;\n+import org.apache.ignite.internal.processors.cache.persistence.DataRegion;\n import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n import org.apache.ignite.internal.processors.cache.persistence.snapshot.IgniteCacheSnapshotManager;\n import org.apache.ignite.internal.processors.cache.store.CacheStoreManager;\n@@ -1155,4 +1156,11 @@ public void readOnlyMode(boolean readOnlyMode) {\n     public void setTxManager(IgniteTxManager txMgr) {\n         this.txMgr = txMgr;\n     }\n+\n+    /**\n+     * @return {@code True} if lazy memory allocation enabled. {@code False} otherwise.\n+     */\n+    public boolean isLazyMemoryAllocation(@Nullable DataRegion region) {\n+        return gridConfig().isClientMode() || region == null || region.config().isLazyMemoryAllocation();\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "6643b125c4ccf5ae670bb2fa96993993ef1edcd4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -965,6 +965,8 @@ private DataRegionConfiguration createTxLogRegion(DataStorageConfiguration dscfg\n         cfg.setInitialSize(dscfg.getSystemRegionInitialSize());\n         cfg.setMaxSize(dscfg.getSystemRegionMaxSize());\n         cfg.setPersistenceEnabled(CU.isPersistenceEnabled(dscfg));\n+        cfg.setLazyMemoryAllocation(false);\n+\n         return cfg;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "9110c95b484923f989d371bc33094bef42f6d109",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -508,6 +508,7 @@ private DataRegionConfiguration createMetastoreDataRegionConfig(DataStorageConfi\n         cfg.setInitialSize(storageCfg.getSystemRegionInitialSize());\n         cfg.setMaxSize(storageCfg.getSystemRegionMaxSize());\n         cfg.setPersistenceEnabled(true);\n+        cfg.setLazyMemoryAllocation(false);\n \n         return cfg;\n     }\n@@ -2188,7 +2189,24 @@ private RestoreBinaryState performBinaryMemoryRestore(\n                     U.quietAndWarn(log, \"Ignite node stopped in the middle of checkpoint. Will restore memory state and \" +\n                         \"finish checkpoint on node start.\");\n \n-                cctx.pageStore().beginRecover();\n+            cctx.cache().cacheGroupDescriptors().forEach((grpId, desc) -> {\n+                if (!cacheGroupsPredicate.apply(grpId))\n+                    return;\n+\n+                try {\n+                    DataRegion region = cctx.database().dataRegion(desc.config().getDataRegionName());\n+\n+                    if (region == null || !cctx.isLazyMemoryAllocation(region))\n+                        return;\n+\n+                    region.pageMemory().start();\n+                }\n+                catch (IgniteCheckedException e) {\n+                    throw new IgniteException(e);\n+                }\n+            });\n+\n+            cctx.pageStore().beginRecover();\n \n                 if (!(startRec instanceof CheckpointRecord))\n                     throw new StorageException(\"Checkpoint marker doesn't point to checkpoint record \" +",
                "deletions": 1
            },
            {
                "sha": "d93c189f974518694f3c6fc3f6821637f401965f",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -276,7 +276,8 @@ public int pageSize() {\n      */\n     private void startDataRegions() {\n         for (DataRegion region : dataRegionMap.values()) {\n-            region.pageMemory().start();\n+            if (!cctx.isLazyMemoryAllocation(region))\n+                region.pageMemory().start();\n \n             region.evictionTracker().start();\n         }\n@@ -463,6 +464,7 @@ private DataRegionConfiguration createSystemDataRegion(\n         res.setInitialSize(sysCacheInitSize);\n         res.setMaxSize(sysCacheMaxSize);\n         res.setPersistenceEnabled(persistenceEnabled);\n+        res.setLazyMemoryAllocation(false);\n \n         return res;\n     }",
                "deletions": 1
            },
            {
                "sha": "45dfae1e1725c52abb6ac84ef5893e1ff64cb1c3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "status": "modified",
                "changes": 185,
                "additions": 112,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -238,7 +238,10 @@\n     private final DirectMemoryProvider directMemoryProvider;\n \n     /** Segments array. */\n-    private Segment[] segments;\n+    private volatile Segment[] segments;\n+\n+    /** Lock for segments changes. */\n+    private Object segmentsLock = new Object();\n \n     /** */\n     private PagePool checkpointPool;\n@@ -281,9 +284,9 @@\n     private DataRegionMetricsImpl memMetrics;\n \n     /**\n-     * Marker that stop was invoked and memory is not supposed for any usage.\n+     * {@code False} if memory was not started or already stopped and is not supposed for any usage.\n      */\n-    private volatile boolean stopped;\n+    private volatile boolean started;\n \n     /**\n      * @param directMemoryProvider Memory allocator to use.\n@@ -347,56 +350,64 @@ public PageMemoryImpl(\n \n     /** {@inheritDoc} */\n     @Override public void start() throws IgniteException {\n-        stopped = false;\n+        synchronized (segmentsLock) {\n+            if (started)\n+                return;\n \n-        directMemoryProvider.initialize(sizes);\n+            started = true;\n \n-        List<DirectMemoryRegion> regions = new ArrayList<>(sizes.length);\n+            directMemoryProvider.initialize(sizes);\n \n-        while (true) {\n-            DirectMemoryRegion reg = directMemoryProvider.nextRegion();\n+            List<DirectMemoryRegion> regions = new ArrayList<>(sizes.length);\n \n-            if (reg == null)\n-                break;\n+            while (true) {\n+                DirectMemoryRegion reg = directMemoryProvider.nextRegion();\n \n-            regions.add(reg);\n-        }\n+                if (reg == null)\n+                    break;\n \n-        int regs = regions.size();\n+                regions.add(reg);\n+            }\n \n-        segments = new Segment[regs - 1];\n+            int regs = regions.size();\n \n-        DirectMemoryRegion cpReg = regions.get(regs - 1);\n+            Segment[] segments = new Segment[regs - 1];\n \n-        checkpointPool = new PagePool(regs - 1, cpReg, cpBufPagesCntr);\n+            DirectMemoryRegion cpReg = regions.get(regs - 1);\n \n-        long checkpointBuf = cpReg.size();\n+            checkpointPool = new PagePool(regs - 1, cpReg, cpBufPagesCntr);\n \n-        long totalAllocated = 0;\n-        int pages = 0;\n-        long totalTblSize = 0;\n+            long checkpointBuf = cpReg.size();\n \n-        for (int i = 0; i < regs - 1; i++) {\n-            assert i < segments.length;\n+            long totalAllocated = 0;\n+            int pages = 0;\n+            long totalTblSize = 0;\n \n-            DirectMemoryRegion reg = regions.get(i);\n+            for (int i = 0; i < regs - 1; i++) {\n+                assert i < segments.length;\n \n-            totalAllocated += reg.size();\n+                DirectMemoryRegion reg = regions.get(i);\n \n-            segments[i] = new Segment(i, regions.get(i), checkpointPool.pages() / segments.length, throttlingPlc);\n+                totalAllocated += reg.size();\n \n-            pages += segments[i].pages();\n-            totalTblSize += segments[i].tableSize();\n-        }\n+                segments[i] = new Segment(i, regions.get(i), checkpointPool.pages() / segments.length, throttlingPlc);\n+\n+                pages += segments[i].pages();\n+                totalTblSize += segments[i].tableSize();\n+            }\n \n-        initWriteThrottle();\n+            this.segments = segments;\n \n-        if (log.isInfoEnabled())\n-            log.info(\"Started page memory [memoryAllocated=\" + U.readableSize(totalAllocated, false) +\n-                \", pages=\" + pages +\n-                \", tableSize=\" + U.readableSize(totalTblSize, false) +\n-                \", checkpointBuffer=\" + U.readableSize(checkpointBuf, false) +\n-                ']');\n+            initWriteThrottle();\n+\n+            if (log.isInfoEnabled())\n+                log.info(\"Started page memory [memoryAllocated=\" + U.readableSize(totalAllocated, false) +\n+                    \", pages=\" + pages +\n+                    \", tableSize=\" + U.readableSize(totalTblSize, false) +\n+                    \", checkpointBuffer=\" + U.readableSize(checkpointBuf, false) +\n+                    ']');\n+\n+        }\n     }\n \n     /**\n@@ -413,24 +424,29 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n \n     /** {@inheritDoc} */\n     @Override public void stop(boolean deallocate) throws IgniteException {\n-        if (log.isDebugEnabled())\n-            log.debug(\"Stopping page memory.\");\n+        synchronized (segmentsLock) {\n+            if (!started)\n+                return;\n \n-        U.shutdownNow(getClass(), asyncRunner, log);\n+            if (log.isDebugEnabled())\n+                log.debug(\"Stopping page memory.\");\n \n-        if (segments != null) {\n-            for (Segment seg : segments)\n-                seg.close();\n-        }\n+            U.shutdownNow(getClass(), asyncRunner, log);\n \n-        stopped = true;\n+            if (segments != null) {\n+                for (Segment seg : segments)\n+                    seg.close();\n+            }\n+\n+            started = false;\n \n-        directMemoryProvider.shutdown(deallocate);\n+            directMemoryProvider.shutdown(deallocate);\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override public void releasePage(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         Segment seg = segment(grpId, pageId);\n \n@@ -446,58 +462,58 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n \n     /** {@inheritDoc} */\n     @Override public long readLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return readLock(page, pageId, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void readUnlock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         readUnlockPage(page);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return writeLock(grpId, pageId, page, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int grpId, long pageId, long page, boolean restore) {\n-        assert !stopped;\n+        assert started;\n \n         return writeLockPage(page, new FullPageId(pageId, grpId), !restore);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long tryWriteLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return tryWriteLockPage(page, new FullPageId(pageId, grpId), true);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void writeUnlock(int grpId, long pageId, long page, Boolean walPlc,\n         boolean dirtyFlag) {\n-        assert !stopped;\n+        assert started;\n \n         writeUnlock(grpId, pageId, page, walPlc, dirtyFlag, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void writeUnlock(int grpId, long pageId, long page, Boolean walPlc,\n         boolean dirtyFlag, boolean restore) {\n-        assert !stopped;\n+        assert started;\n \n         writeUnlockPage(page, new FullPageId(pageId, grpId), walPlc, dirtyFlag, restore);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isDirty(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return isDirty(page);\n     }\n@@ -508,7 +524,7 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n             flags == PageIdAllocator.FLAG_IDX && partId == PageIdAllocator.INDEX_PARTITION :\n             \"flags = \" + flags + \", partId = \" + partId;\n \n-        assert !stopped;\n+        assert started;\n         assert stateChecker.checkpointLockIsHeldByThread();\n \n         if (isThrottlingEnabled())\n@@ -664,14 +680,14 @@ private DataRegionConfiguration getDataRegionConfiguration() {\n \n     /** {@inheritDoc} */\n     @Override public long metaPageId(int grpId) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return storeMgr.metaPageId(grpId);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long partitionMetaPageId(int grpId, int partId) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return PageIdUtils.pageId(partId, PageIdAllocator.FLAG_DATA, 0);\n     }\n@@ -684,15 +700,15 @@ private DataRegionConfiguration getDataRegionConfiguration() {\n     /** {@inheritDoc} */\n     @Override public long acquirePage(int grpId, long pageId,\n         IoStatisticsHolder statHolder) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return acquirePage(grpId, pageId, statHolder, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long acquirePage(int grpId, long pageId, IoStatisticsHolder statHolder,\n         boolean restore) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         FullPageId fullId = new FullPageId(pageId, grpId);\n \n@@ -1047,6 +1063,9 @@ private void tryToRestorePage(FullPageId fullId, ByteBuffer buf) throws IgniteCh\n      * @param dirtyRatioThreshold Throttle threshold.\n      */\n     boolean shouldThrottle(double dirtyRatioThreshold) {\n+        if (segments == null)\n+            return false;\n+\n         for (Segment segment : segments) {\n             if (segment.shouldThrottle(dirtyRatioThreshold))\n                 return true;\n@@ -1059,6 +1078,9 @@ boolean shouldThrottle(double dirtyRatioThreshold) {\n      * @return Max dirty ratio from the segments.\n      */\n     double getDirtyPagesRatio() {\n+        if (segments == null)\n+            return 0;\n+\n         double res = 0;\n \n         for (Segment segment : segments) {\n@@ -1072,6 +1094,9 @@ boolean shouldThrottle(double dirtyRatioThreshold) {\n      * @return Total pages can be placed in all segments.\n      */\n     public long totalPages() {\n+        if (segments == null)\n+            return 0;\n+\n         long res = 0;\n \n         for (Segment segment : segments) {\n@@ -1319,25 +1344,30 @@ private void copyInBuffer(long absPtr, ByteBuffer buf) {\n \n     /** {@inheritDoc} */\n     @Override public int invalidate(int grpId, int partId) {\n-        int tag = 0;\n+        synchronized (segmentsLock) {\n+            if (!started)\n+                return 0;\n \n-        for (Segment seg : segments) {\n-            seg.writeLock().lock();\n+            int tag = 0;\n \n-            try {\n-                int newTag = seg.incrementPartGeneration(grpId, partId);\n+            for (Segment seg : segments) {\n+                seg.writeLock().lock();\n \n-                if (tag == 0)\n-                    tag = newTag;\n+                try {\n+                    int newTag = seg.incrementPartGeneration(grpId, partId);\n \n-                assert tag == newTag;\n-            }\n-            finally {\n-                seg.writeLock().unlock();\n+                    if (tag == 0)\n+                        tag = newTag;\n+\n+                    assert tag == newTag;\n+                }\n+                finally {\n+                    seg.writeLock().unlock();\n+                }\n             }\n-        }\n \n-        return tag;\n+            return tag;\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -1407,6 +1437,9 @@ private void copyInBuffer(long absPtr, ByteBuffer buf) {\n      * @return Total number of acquired pages.\n      */\n     public long acquiredPages() {\n+        if (segments == null)\n+            return 0L;\n+\n         long total = 0;\n \n         for (Segment seg : segments) {\n@@ -1438,7 +1471,7 @@ private long readLock(long absPtr, long pageId, boolean force) {\n \n     /** {@inheritDoc} */\n     @Override  public long readLock(long absPtr, long pageId, boolean force, boolean touch) {\n-        assert !stopped;\n+        assert started;\n \n         int tag = force ? -1 : PageIdUtils.tag(pageId);\n \n@@ -1457,7 +1490,7 @@ private long readLock(long absPtr, long pageId, boolean force) {\n \n     /** {@inheritDoc} */\n     @Override public long readLockForce(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return readLock(page, pageId, true);\n     }\n@@ -1676,6 +1709,9 @@ boolean isDirty(long absPtr) {\n      * @return Number of active pages.\n      */\n     public int activePagesCount() {\n+        if (segments == null)\n+            return 0;\n+\n         int total = 0;\n \n         for (Segment seg : segments)\n@@ -1947,6 +1983,9 @@ private int pages() {\n      * @return Collection of all page IDs marked as dirty.\n      */\n     public Collection<FullPageId> dirtyPages() {\n+        if (segments == null)\n+            return Collections.EMPTY_SET;\n+\n         Collection<FullPageId> res = new HashSet<>((int)loadedPages());\n \n         for (Segment seg : segments)",
                "deletions": 73
            },
            {
                "sha": "25f7a96cfa58bc997598c6f22e304949a43e2ec4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -44,11 +44,15 @@\n     /** Version 1.2.0. */\n     public static final ClientListenerProtocolVersion VER_1_2_0 = ClientListenerProtocolVersion.create(1, 2, 0);\n \n+    /** Version 1.3.0. */\n+    public static final ClientListenerProtocolVersion VER_1_3_0 = ClientListenerProtocolVersion.create(1, 3, 0);\n+\n     /** Version 1.2.0. */\n-    public static final ClientListenerProtocolVersion CURRENT_VER = VER_1_2_0;\n+    public static final ClientListenerProtocolVersion CURRENT_VER = VER_1_3_0;\n \n     /** Supported versions. */\n     private static final Collection<ClientListenerProtocolVersion> SUPPORTED_VERS = Arrays.asList(\n+        VER_1_3_0,\n         VER_1_2_0,\n         VER_1_1_0,\n         VER_1_0_0",
                "deletions": 1
            },
            {
                "sha": "857c1b12c71b7aab790981deed9634e88b6fb59d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "status": "modified",
                "changes": 64,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -110,6 +110,7 @@\n import org.apache.ignite.transactions.TransactionIsolation;\n \n import static org.apache.ignite.internal.processors.platform.client.ClientConnectionContext.VER_1_2_0;\n+import static org.apache.ignite.internal.processors.platform.client.ClientConnectionContext.VER_1_3_0;\n \n /**\n  * Configuration utils.\n@@ -815,7 +816,7 @@ public static void readIgniteConfiguration(BinaryRawReaderEx in, IgniteConfigura\n             cfg.setPersistentStoreConfiguration(readPersistentStoreConfiguration(in));\n \n         if (in.readBoolean())\n-            cfg.setDataStorageConfiguration(readDataStorageConfiguration(in));\n+            cfg.setDataStorageConfiguration(readDataStorageConfiguration(in, ver));\n \n         if (in.readBoolean())\n             cfg.setSslContextFactory(readSslContextFactory(in));\n@@ -1410,7 +1411,7 @@ else if (evtStorageSpi instanceof MemoryEventStorageSpi) {\n \n         writePersistentStoreConfiguration(w, cfg.getPersistentStoreConfiguration());\n \n-        writeDataStorageConfiguration(w, cfg.getDataStorageConfiguration());\n+        writeDataStorageConfiguration(w, cfg.getDataStorageConfiguration(), ver);\n \n         writeSslContextFactory(w, cfg.getSslContextFactory());\n \n@@ -1885,9 +1886,11 @@ private static PersistentStoreConfiguration readPersistentStoreConfiguration(Bin\n      * Reads the data storage configuration.\n      *\n      * @param in Reader.\n+     * @param ver Client version.\n      * @return Config.\n      */\n-    private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawReader in) {\n+    private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawReader in,\n+        ClientListenerProtocolVersion ver) {\n         DataStorageConfiguration res = new DataStorageConfiguration()\n                 .setStoragePath(in.readString())\n                 .setCheckpointFrequency(in.readLong())\n@@ -1926,13 +1929,13 @@ private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawRe\n             DataRegionConfiguration[] regs = new DataRegionConfiguration[cnt];\n \n             for (int i = 0; i < cnt; i++)\n-                regs[i] = readDataRegionConfiguration(in);\n+                regs[i] = readDataRegionConfiguration(in, ver);\n \n             res.setDataRegionConfigurations(regs);\n         }\n \n         if (in.readBoolean())\n-            res.setDefaultDataRegionConfiguration(readDataRegionConfiguration(in));\n+            res.setDefaultDataRegionConfiguration(readDataRegionConfiguration(in, ver));\n \n         return res;\n     }\n@@ -2011,8 +2014,11 @@ private static void writePersistentStoreConfiguration(BinaryRawWriter w, Persist\n      * Writes the data storage configuration.\n      *\n      * @param w Writer.\n+     * @param cfg Data storage configuration.\n+     * @param ver Client version.\n      */\n-    private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorageConfiguration cfg) {\n+    private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorageConfiguration cfg,\n+        ClientListenerProtocolVersion ver) {\n         assert w != null;\n \n         if (cfg != null) {\n@@ -2057,14 +2063,14 @@ private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorage\n                 w.writeInt(cfg.getDataRegionConfigurations().length);\n \n                 for (DataRegionConfiguration d : cfg.getDataRegionConfigurations())\n-                    writeDataRegionConfiguration(w, d);\n+                    writeDataRegionConfiguration(w, d, ver);\n             }\n             else\n                 w.writeInt(0);\n \n             if (cfg.getDefaultDataRegionConfiguration() != null) {\n                 w.writeBoolean(true);\n-                writeDataRegionConfiguration(w, cfg.getDefaultDataRegionConfiguration());\n+                writeDataRegionConfiguration(w, cfg.getDefaultDataRegionConfiguration(), ver);\n             }\n             else\n                 w.writeBoolean(false);\n@@ -2077,8 +2083,10 @@ private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorage\n      * Writes the data region configuration.\n      *\n      * @param w Writer.\n+     * @param ver Client version.\n      */\n-    private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionConfiguration cfg) {\n+    private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionConfiguration cfg,\n+        ClientListenerProtocolVersion ver) {\n         assert w != null;\n         assert cfg != null;\n \n@@ -2094,6 +2102,9 @@ private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionCo\n         w.writeInt(cfg.getMetricsSubIntervalCount());\n         w.writeLong(cfg.getMetricsRateTimeInterval());\n         w.writeLong(cfg.getCheckpointPageBufferSize());\n+\n+        if (ver.compareTo(VER_1_3_0) >= 0)\n+            w.writeBoolean(cfg.isLazyMemoryAllocation());\n     }\n \n     /**\n@@ -2131,23 +2142,30 @@ private static void writeSslContextFactory(BinaryRawWriter w, Factory<SSLContext\n      * Reads the data region configuration.\n      *\n      * @param r Reader.\n+     * @param ver Client version.\n      */\n-    private static DataRegionConfiguration readDataRegionConfiguration(BinaryRawReader r) {\n+    private static DataRegionConfiguration readDataRegionConfiguration(BinaryRawReader r,\n+        ClientListenerProtocolVersion ver) {\n         assert r != null;\n \n-        return new DataRegionConfiguration()\n-                .setName(r.readString())\n-                .setPersistenceEnabled(r.readBoolean())\n-                .setInitialSize(r.readLong())\n-                .setMaxSize(r.readLong())\n-                .setSwapPath(r.readString())\n-                .setPageEvictionMode(DataPageEvictionMode.fromOrdinal(r.readInt()))\n-                .setEvictionThreshold(r.readDouble())\n-                .setEmptyPagesPoolSize(r.readInt())\n-                .setMetricsEnabled(r.readBoolean())\n-                .setMetricsSubIntervalCount(r.readInt())\n-                .setMetricsRateTimeInterval(r.readLong())\n-                .setCheckpointPageBufferSize(r.readLong());\n+        DataRegionConfiguration cfg = new DataRegionConfiguration()\n+            .setName(r.readString())\n+            .setPersistenceEnabled(r.readBoolean())\n+            .setInitialSize(r.readLong())\n+            .setMaxSize(r.readLong())\n+            .setSwapPath(r.readString())\n+            .setPageEvictionMode(DataPageEvictionMode.fromOrdinal(r.readInt()))\n+            .setEvictionThreshold(r.readDouble())\n+            .setEmptyPagesPoolSize(r.readInt())\n+            .setMetricsEnabled(r.readBoolean())\n+            .setMetricsSubIntervalCount(r.readInt())\n+            .setMetricsRateTimeInterval(r.readLong())\n+            .setCheckpointPageBufferSize(r.readLong());\n+\n+        if (ver.compareTo(VER_1_3_0) >= 0)\n+            cfg.setLazyMemoryAllocation(r.readBoolean());\n+\n+        return cfg;\n     }\n \n     /**",
                "deletions": 23
            },
            {
                "sha": "999b4409870eb65a01605fe7146bd98dc145bade",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -296,7 +296,7 @@\n @SuppressWarnings({\"UnusedReturnValue\", \"RedundantStringConstructorCall\"})\n public abstract class IgniteUtils {\n     /** */\n-    private static final long GB = 1024L * 1024 * 1024;\n+    public static final long GB = 1024L * 1024 * 1024;\n \n     /** Minimum checkpointing page buffer size (may be adjusted by Ignite). */\n     public static final Long DFLT_MIN_CHECKPOINTING_PAGE_BUFFER_SIZE = GB / 4;",
                "deletions": 1
            },
            {
                "sha": "c7478ec71bdbdbbd629262dcf25b424bf20dd38a",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "status": "added",
                "changes": 275,
                "additions": 275,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.pagemem;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.pagemem.PageMemory;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.lang.IgnitePredicate;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/** */\n+public class PageMemoryLazyAllocationTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final String LAZY_REGION = \"lazyRegion\";\n+\n+    /** */\n+    public static final String EAGER_REGION = \"eagerRegion\";\n+\n+    /** */\n+    protected boolean client = false;\n+\n+    /** */\n+    protected boolean lazyAllocation = true;\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setClientMode(client);\n+\n+        cfg.setDataStorageConfiguration(new DataStorageConfiguration()\n+            .setDataRegionConfigurations(\n+                new DataRegionConfiguration()\n+                    .setName(LAZY_REGION)\n+                    .setLazyMemoryAllocation(lazyAllocation)\n+                    .setPersistenceEnabled(persistenceEnabled()),\n+                new DataRegionConfiguration()\n+                    .setName(EAGER_REGION)\n+                    .setLazyMemoryAllocation(lazyAllocation)\n+                    .setPersistenceEnabled(persistenceEnabled())));\n+\n+        CacheConfiguration<?, ?> ccfg = new CacheConfiguration<>(\"my-cache\")\n+            .setDataRegionName(EAGER_REGION);\n+\n+        cfg.setCacheConfiguration(ccfg);\n+\n+        return cfg;\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLazyMemoryAllocationOnServer() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager db = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(db.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(srv);\n+\n+        checkMemoryAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLazyMemoryAllocationOnClient() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt);\n+\n+        checkMemoryAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testEagerMemoryAllocationOnServer() throws Exception {\n+        lazyAllocation = false;\n+        client = false;\n+\n+        IgniteEx g = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager db = g.context().cache().context().database();\n+\n+        checkMemoryAllocated(db.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(g);\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testEagerMemoryAllocationOnClient() throws Exception {\n+        lazyAllocation = false;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt);\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLocalCacheOnClientNodeWithLazyAllocation() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt, CacheMode.LOCAL);\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        //LOCAL Cache was created in LAZY_REGION so it has to be allocated on client node.\n+        checkMemoryAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testStopNotAllocatedRegions() throws Exception {\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        stopGrid(0);\n+    }\n+\n+    @After\n+    public void after() {\n+        stopAllGrids();\n+    }\n+\n+    @Before\n+    public void before() throws Exception {\n+        cleanPersistenceDir();\n+    }\n+\n+    /** */\n+    protected void createCacheAndPut(IgniteEx g) {\n+        createCacheAndPut(g, CacheConfiguration.DFLT_CACHE_MODE);\n+    }\n+\n+    /** */\n+    private void createCacheAndPut(IgniteEx g, CacheMode cacheMode) {\n+        createCacheAndPut(g, cacheMode, null);\n+    }\n+\n+    /** */\n+    private void createCacheAndPut(IgniteEx g, CacheMode cacheMode, IgnitePredicate<ClusterNode> fltr) {\n+        IgniteCache<Integer, String> cache =\n+            g.createCache(new CacheConfiguration<Integer, String>(\"my-cache-2\")\n+                .setCacheMode(cacheMode)\n+                .setDataRegionName(LAZY_REGION)\n+                .setNodeFilter(fltr));\n+\n+        cache.put(1, \"test\");\n+\n+        assertEquals(cache.get(1), \"test\");\n+    }\n+\n+    /** */\n+    protected void checkMemoryAllocated(PageMemory pageMem) {\n+        Object[] segments = GridTestUtils.getFieldValue(pageMem, \"segments\");\n+\n+        assertNotNull(segments);\n+        assertTrue(segments.length > 0);\n+        assertNotNull(segments[0]);\n+    }\n+\n+    /** */\n+    protected void checkMemoryNotAllocated(PageMemory pageMem) {\n+        Object[] segments = GridTestUtils.getFieldValue(pageMem, \"segments\");\n+\n+        assertNull(segments);\n+    }\n+\n+    /** */\n+    protected IgniteEx[] startSrv() throws Exception {\n+        IgniteEx srv0 = startGrid(0);\n+        IgniteEx srv1 = startGrid(1);\n+\n+        srv0.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+\n+        return new IgniteEx[] {srv0, srv1};\n+    }\n+\n+    /** */\n+    protected boolean persistenceEnabled() {\n+        return false;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "c84928b60f6a35e176abdd7f3ca73a4237d90d00",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "status": "added",
                "changes": 159,
                "additions": 159,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.pagemem;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.util.IgniteUtils.GB;\n+\n+/** */\n+public class PageMemoryLazyAllocationWithPDSTest extends PageMemoryLazyAllocationTest {\n+\n+    public static final long PETA_BYTE = 1024 * GB;\n+\n+    /** {@inheritDoc} */\n+    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-11677\")\n+    @Override public void testLocalCacheOnClientNodeWithLazyAllocation() throws Exception {\n+        // No-op.\n+    }\n+\n+    /** */\n+    @Test\n+    public void testNodeRestart() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        createCacheAndPut(srv);\n+\n+        stopAllGrids(false);\n+\n+        IgniteCache<Integer, String> cache = startSrv()[0].cache(\"my-cache-2\");\n+\n+        assertEquals(\"test\", cache.get(1));\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeRestart() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        createCacheAndPut(clnt);\n+\n+        stopAllGrids(false);\n+\n+        client = false;\n+\n+        srv = startSrv()[0];\n+\n+        client = true;\n+\n+        IgniteCache<Integer, String> cache = startGrid(2).cache(\"my-cache-2\");\n+\n+        assertEquals(\"test\", cache.get(1));\n+    }\n+\n+    /** */\n+    @Test\n+    public void testHugeNotUsedMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\"));\n+\n+        startGrid(cfgWithHugeRegion(\"test-server-2\"));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+\n+        stopAllGrids(false);\n+\n+        srv = startGrid(cfgWithHugeRegion(\"test-server\"));\n+\n+        startGrid(cfgWithHugeRegion(\"test-server-2\"));\n+\n+        srv.cluster().active(true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCreateCacheFailsInHugeMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCreateCacheFromClientFailsInHugeMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(cfgWithHugeRegion(\"test-client\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+    }\n+\n+    @NotNull private IgniteConfiguration cfgWithHugeRegion(String name) throws Exception {\n+        IgniteConfiguration cfg = getConfiguration(name);\n+\n+        for (DataRegionConfiguration drc : cfg.getDataStorageConfiguration().getDataRegionConfigurations()) {\n+            if (drc.getName().equals(LAZY_REGION))\n+                drc.setMaxSize(PETA_BYTE);\n+        }\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected boolean persistenceEnabled() {\n+        return true;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e21577da56074e247fdf6fab317ed76983751c93",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -44,6 +44,8 @@\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.IndexStoragePageMemoryImplTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryImplNoLoadTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryImplTest;\n+import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryLazyAllocationTest;\n+import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryLazyAllocationWithPDSTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryNoStoreLeakTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PagesWriteThrottleSmokeTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.UsedPagesMetricTest;\n@@ -88,6 +90,8 @@\n         //GridTestUtils.addTestIfNeeded(suite, PageMemoryNoLoadSelfTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryImplNoLoadTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryNoStoreLeakTest.class, ignoredTests);\n+        GridTestUtils.addTestIfNeeded(suite, PageMemoryLazyAllocationTest.class, ignoredTests);\n+        GridTestUtils.addTestIfNeeded(suite, PageMemoryLazyAllocationWithPDSTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, IndexStoragePageMemoryImplTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryImplTest.class, ignoredTests);\n         //GridTestUtils.addTestIfNeeded(suite, PageIdDistributionTest.class, ignoredTests);",
                "deletions": 0
            },
            {
                "sha": "ef0759e52ed2193af0154571d40af2a643fc2ae9",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "status": "modified",
                "changes": 30,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -24,6 +24,7 @@ namespace Apache.Ignite.Core.Configuration\n     using Apache.Ignite.Core.Cache.Configuration;\n     using Apache.Ignite.Core.Impl;\n     using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Client;\n \n     /// <summary>\n     /// Defines custom data region configuration for Apache Ignite page memory\n@@ -74,6 +75,11 @@ public class DataRegionConfiguration\n         /// </summary>\n         public static readonly TimeSpan DefaultMetricsRateTimeInterval = TimeSpan.FromSeconds(60);\n \n+        /// <summary>\n+        /// Default value for <see cref=\"LazyMemoryAllocation\"/>.\n+        /// </summary>\n+        public const bool DefaultLazyMemoryAllocation = true;\n+\n         /// <summary>\n         /// Initializes a new instance of the <see cref=\"DataRegionConfiguration\"/> class.\n         /// </summary>\n@@ -86,13 +92,15 @@ public DataRegionConfiguration()\n             MaxSize = DefaultMaxSize;\n             MetricsSubIntervalCount = DefaultMetricsSubIntervalCount;\n             MetricsRateTimeInterval = DefaultMetricsRateTimeInterval;\n+            LazyMemoryAllocation = DefaultLazyMemoryAllocation;\n         }\n \n         /// <summary>\n         /// Initializes a new instance of the <see cref=\"DataRegionConfiguration\"/> class.\n         /// </summary>\n         /// <param name=\"reader\">The reader.</param>\n-        internal DataRegionConfiguration(IBinaryRawReader reader)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal DataRegionConfiguration(IBinaryRawReader reader, ClientProtocolVersion srvVer)\n         {\n             Name = reader.ReadString();\n             PersistenceEnabled = reader.ReadBoolean();\n@@ -106,12 +114,19 @@ internal DataRegionConfiguration(IBinaryRawReader reader)\n             MetricsSubIntervalCount = reader.ReadInt();\n             MetricsRateTimeInterval = reader.ReadLongAsTimespan();\n             CheckpointPageBufferSize = reader.ReadLong();\n+\n+            if (srvVer.CompareTo(ClientSocket.Ver130) >= 0)\n+            {\n+                LazyMemoryAllocation = reader.ReadBoolean();\n+            }\n         }\n \n         /// <summary>\n         /// Writes this instance to a writer.\n         /// </summary>\n-        internal void Write(IBinaryRawWriter writer)\n+        /// <param name=\"writer\">The writer.</param>\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal void Write(IBinaryRawWriter writer, ClientProtocolVersion srvVer)\n         {\n             writer.WriteString(Name);\n             writer.WriteBoolean(PersistenceEnabled);\n@@ -125,6 +140,11 @@ internal void Write(IBinaryRawWriter writer)\n             writer.WriteInt(MetricsSubIntervalCount);\n             writer.WriteTimeSpanAsLong(MetricsRateTimeInterval);\n             writer.WriteLong(CheckpointPageBufferSize);\n+\n+            if (srvVer.CompareTo(ClientSocket.Ver130) >= 0)\n+            {\n+                writer.WriteBoolean(LazyMemoryAllocation);\n+            }\n         }\n \n         /// <summary>\n@@ -218,5 +238,11 @@ internal void Write(IBinaryRawWriter writer)\n         /// Default is <c>0</c>: Ignite will choose buffer size automatically.\n         /// </summary>\n         public long CheckpointPageBufferSize { get; set; }\n+        \n+        /// <summary>\n+        /// Gets or sets the lazy memory allocation flag.\n+        /// </summary>\n+        [DefaultValue(DefaultLazyMemoryAllocation)]\n+        public bool LazyMemoryAllocation { get; set; }\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "17ddf6b4b66b44b2e425de146bdb68a6ee358ee3",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -26,6 +26,7 @@ namespace Apache.Ignite.Core.Configuration\n     using Apache.Ignite.Core.Binary;\n     using Apache.Ignite.Core.Common;\n     using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Client;\n \n     /// <summary>\n     /// Data storage configuration for Ignite page memory.\n@@ -202,7 +203,8 @@ public DataStorageConfiguration()\n         /// Initializes a new instance of the <see cref=\"DataStorageConfiguration\"/> class.\n         /// </summary>\n         /// <param name=\"reader\">The reader.</param>\n-        internal DataStorageConfiguration(IBinaryRawReader reader)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal DataStorageConfiguration(IBinaryRawReader reader, ClientProtocolVersion srvVer)\n         {\n             Debug.Assert(reader != null);\n \n@@ -241,21 +243,22 @@ internal DataStorageConfiguration(IBinaryRawReader reader)\n             if (count > 0)\n             {\n                 DataRegionConfigurations = Enumerable.Range(0, count)\n-                    .Select(x => new DataRegionConfiguration(reader))\n+                    .Select(x => new DataRegionConfiguration(reader, srvVer))\n                     .ToArray();\n             }\n \n             if (reader.ReadBoolean())\n             {\n-                DefaultDataRegionConfiguration = new DataRegionConfiguration(reader);\n+                DefaultDataRegionConfiguration = new DataRegionConfiguration(reader, srvVer);\n             }\n         }\n \n         /// <summary>\n         /// Writes this instance to the specified writer.\n         /// </summary>\n         /// <param name=\"writer\">The writer.</param>\n-        internal void Write(IBinaryRawWriter writer)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal void Write(IBinaryRawWriter writer, ClientProtocolVersion srvVer)\n         {\n             Debug.Assert(writer != null);\n \n@@ -301,7 +304,7 @@ internal void Write(IBinaryRawWriter writer)\n                             \"DataStorageConfiguration.DataRegionConfigurations must not contain null items.\");\n                     }\n \n-                    region.Write(writer);\n+                    region.Write(writer, srvVer);\n                 }\n             }\n             else\n@@ -312,7 +315,7 @@ internal void Write(IBinaryRawWriter writer)\n             if (DefaultDataRegionConfiguration != null)\n             {\n                 writer.WriteBoolean(true);\n-                DefaultDataRegionConfiguration.Write(writer);\n+                DefaultDataRegionConfiguration.Write(writer, srvVer);\n             }\n             else\n             {",
                "deletions": 6
            },
            {
                "sha": "f98acf9e182e69de806593e5fae9d3b77f91f49e",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -574,7 +574,7 @@ internal void Write(BinaryWriter writer, ClientProtocolVersion srvVer)\n             if (DataStorageConfiguration != null)\n             {\n                 writer.WriteBoolean(true);\n-                DataStorageConfiguration.Write(writer);\n+                DataStorageConfiguration.Write(writer, srvVer);\n             }\n             else\n             {\n@@ -863,7 +863,7 @@ private void ReadCore(BinaryReader r, ClientProtocolVersion srvVer)\n             // Data storage.\n             if (r.ReadBoolean())\n             {\n-                DataStorageConfiguration = new DataStorageConfiguration(r);\n+                DataStorageConfiguration = new DataStorageConfiguration(r, srvVer);\n             }\n \n             // SSL context factory.",
                "deletions": 2
            },
            {
                "sha": "0a6dca1f8453755698b7993e5f09ce3793f20e8e",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -1714,6 +1714,13 @@\n                                             <xs:documentation>Size of the checkpointing page buffer.</xs:documentation>\n                                         </xs:annotation>\n                                     </xs:attribute>\n+                                    <xs:attribute name=\"lazyMemoryAllocation\" type=\"xs:boolean\">\n+                                        <xs:annotation>\n+                                            <xs:documentation>\n+                                                Enable lazy memory allocation.\n+                                            </xs:documentation>\n+                                        </xs:annotation>\n+                                    </xs:attribute>\n                                 </xs:complexType>\n                             </xs:element>\n                             <xs:element name=\"dataRegionConfigurations\">\n@@ -1787,6 +1794,13 @@\n                                                         <xs:documentation>Size of the checkpointing page buffer.</xs:documentation>\n                                                     </xs:annotation>\n                                                 </xs:attribute>\n+                                                <xs:attribute name=\"lazyMemoryAllocation\" type=\"xs:boolean\">\n+                                                    <xs:annotation>\n+                                                        <xs:documentation>\n+                                                            Enable lazy memory allocation.\n+                                                        </xs:documentation>\n+                                                    </xs:annotation>\n+                                                </xs:attribute>\n                                             </xs:complexType>\n                                         </xs:element>\n                                     </xs:sequence>",
                "deletions": 0
            },
            {
                "sha": "e2567ef3791514fab2467d15695148993e81fcfd",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "patch": "@@ -46,8 +46,11 @@ internal sealed class ClientSocket : IClientSocket\n         /** Version 1.2.0. */\n         public static readonly ClientProtocolVersion Ver120 = new ClientProtocolVersion(1, 2, 0);\n \n+        /** Version 1.3.0. */\n+        public static readonly ClientProtocolVersion Ver130 = new ClientProtocolVersion(1, 3, 0);\n+\n         /** Current version. */\n-        public static readonly ClientProtocolVersion CurrentProtocolVersion = Ver120;\n+        public static readonly ClientProtocolVersion CurrentProtocolVersion = Ver130;\n \n         /** Handshake opcode. */\n         private const byte OpHandshake = 1;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8201 Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/ced5d2768d47504533064000c8ce525d80613ca3",
        "parent": "https://github.com/apache/ignite/commit/69606e4248a69d44f798c9f59865281c19744a69",
        "bug_id": "ignite_44",
        "file": [
            {
                "sha": "0285f3af530ed32cfb8b4e4b62691ab210c73076",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ced5d2768d47504533064000c8ce525d80613ca3/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ced5d2768d47504533064000c8ce525d80613ca3/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java?ref=ced5d2768d47504533064000c8ce525d80613ca3",
                "patch": "@@ -985,9 +985,11 @@ private void failIgnite_5874() {\n         if (dsCfg.getDefaultDataRegionConfiguration().isPersistenceEnabled())\n             fail(\"IGNITE-5874\");\n \n-        for (DataRegionConfiguration dataRegCfg : dsCfg.getDataRegionConfigurations()) {\n-            if (dataRegCfg.isPersistenceEnabled())\n-                fail(\"IGNITE-5874\");\n+        if (!F.isEmpty(dsCfg.getDataRegionConfigurations())) {\n+            for (DataRegionConfiguration dataRegCfg : dsCfg.getDataRegionConfigurations()) {\n+                if (dataRegCfg.isPersistenceEnabled())\n+                    fail(\"IGNITE-5874\");\n+            }\n         }\n     }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9731 Fixed NPE on concurrent WAL flush - Fixes #4863.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/69adfd5e94530457525bd0403182f577b418ca95",
        "parent": "https://github.com/apache/ignite/commit/036bd074d8bfd25a2c4c463a60dde00604d11b9d",
        "bug_id": "ignite_45",
        "file": [
            {
                "sha": "8388bb2b77a36cb6a4c28484b68fed2e046fd24a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FileWriteAheadLogManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/69adfd5e94530457525bd0403182f577b418ca95/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FileWriteAheadLogManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/69adfd5e94530457525bd0403182f577b418ca95/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FileWriteAheadLogManager.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FileWriteAheadLogManager.java?ref=69adfd5e94530457525bd0403182f577b418ca95",
                "patch": "@@ -2412,19 +2412,23 @@ else if (create)\n     private abstract static class FileHandle {\n         /** I/O interface for read/write operations with file */\n         SegmentIO fileIO;\n+        \n+        /** Segment idx corresponded to fileIo*/\n+        final long segmentIdx;\n \n         /**\n-         * @param fileIO I/O interface for read/write operations of FileHandle.         *\n+         * @param fileIO I/O interface for read/write operations of FileHandle.\n          */\n-        private FileHandle(SegmentIO fileIO) {\n+        private FileHandle(@NotNull SegmentIO fileIO) {\n             this.fileIO = fileIO;\n+            segmentIdx = fileIO.getSegmentId();\n         }\n \n         /**\n          * @return Absolute WAL segment file index (incremental counter).\n          */\n         public long getSegmentId(){\n-            return fileIO.getSegmentId();\n+            return segmentIdx;\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "67caf6350664134bb2ad80867a0db64d59391044",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/69adfd5e94530457525bd0403182f577b418ca95/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/69adfd5e94530457525bd0403182f577b418ca95/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "status": "added",
                "changes": 156,
                "additions": 156,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java?ref=69adfd5e94530457525bd0403182f577b418ca95",
                "patch": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.wal;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeOrHaltFailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n+import org.apache.ignite.internal.pagemem.wal.IgniteWriteAheadLogManager;\n+import org.apache.ignite.internal.pagemem.wal.record.CheckpointRecord;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+import static org.apache.ignite.configuration.DataStorageConfiguration.DFLT_WAL_PATH;\n+import static org.apache.ignite.configuration.WALMode.LOG_ONLY;\n+/**\n+ *\n+ */\n+public class WalRolloverRecordLoggingTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** */\n+    private static class RolloverRecord extends CheckpointRecord {\n+        /** */\n+        private RolloverRecord() {\n+            super(null);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean rollOver() {\n+            return true;\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String name) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(name);\n+\n+        cfg.setDiscoverySpi(new TcpDiscoverySpi().setIpFinder(IP_FINDER));\n+\n+        cfg.setDataStorageConfiguration(new DataStorageConfiguration()\n+            .setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n+                .setPersistenceEnabled(true)\n+                .setMaxSize(40 * 1024 * 1024))\n+            .setWalMode(LOG_ONLY)\n+            .setWalSegmentSize(4 * 1024 * 1024)\n+            .setWalArchivePath(DFLT_WAL_PATH));\n+\n+        cfg.setFailureHandler(new StopNodeOrHaltFailureHandler(false, 0));\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** */\n+    public void testAvoidInfinityWaitingOnRolloverOfSegment() throws Exception {\n+        IgniteEx ig = startGrid(0);\n+\n+        ig.cluster().active(true);\n+\n+        IgniteCache<Integer, Integer> cache = ig.getOrCreateCache(DEFAULT_CACHE_NAME);\n+\n+        long startTime = U.currentTimeMillis();\n+        long duration = 5_000;\n+\n+        IgniteInternalFuture<Long> fut = GridTestUtils.runMultiThreadedAsync(\n+            () -> {\n+                ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+                while (U.currentTimeMillis() - startTime < duration)\n+                    cache.put(random.nextInt(100_000), random.nextInt(100_000));\n+            },\n+            8, \"cache-put-thread\");\n+\n+        Thread t = new Thread(() -> {\n+            do {\n+                try {\n+                    U.sleep(100);\n+                }\n+                catch (IgniteInterruptedCheckedException e) {\n+                    // No-op.\n+                }\n+\n+                ig.context().cache().context().database().wakeupForCheckpoint(\"test\");\n+            } while (U.currentTimeMillis() - startTime < duration);\n+        });\n+\n+        t.start();\n+\n+        IgniteWriteAheadLogManager walMgr = ig.context().cache().context().wal();\n+\n+        IgniteCacheDatabaseSharedManager dbMgr = ig.context().cache().context().database();\n+\n+        RolloverRecord rec = new RolloverRecord();\n+\n+        do {\n+            try {\n+                dbMgr.checkpointReadLock();\n+\n+                try {\n+                    walMgr.log(rec);\n+                }\n+                finally {\n+                    dbMgr.checkpointReadUnlock();\n+                }\n+            }\n+            catch (IgniteCheckedException e) {\n+                log.error(e.getMessage(), e);\n+            }\n+        } while (U.currentTimeMillis() - startTime < duration);\n+\n+        fut.get();\n+\n+        t.join();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "caea388359d11df3968e756fb8eeab49ca88fcc8",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/69adfd5e94530457525bd0403182f577b418ca95/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/69adfd5e94530457525bd0403182f577b418ca95/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java?ref=69adfd5e94530457525bd0403182f577b418ca95",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.IgniteWalRecoveryWithCompactionTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalPathsTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRecoveryTxLogicalRecordsTest;\n+import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRolloverRecordLoggingTest;\n \n /**\n  * Test suite for tests that cover core PDS features and depend on indexing module.\n@@ -59,6 +60,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(PersistenceDirectoryWarningLoggingTest.class);\n         suite.addTestSuite(WalPathsTest.class);\n         suite.addTestSuite(WalRecoveryTxLogicalRecordsTest.class);\n+        suite.addTestSuite(WalRolloverRecordLoggingTest.class);\n \n         suite.addTestSuite(IgniteWalRecoveryTest.class);\n         suite.addTestSuite(IgniteWalRecoveryWithCompactionTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8639: SQL: Fixed NPE in org.h2.util.StringUtils.indent where query has a lot of nested subqueries. This closes #4919.",
        "commit": "https://github.com/apache/ignite/commit/84d329c29ebc6989793af0778c080429e69c875e",
        "parent": "https://github.com/apache/ignite/commit/c3462fffff3b09c52c4c0bcb55867015449a2fb6",
        "bug_id": "ignite_46",
        "file": [
            {
                "sha": "72c1102abed933f22b87ca2f0b632e1c269234ff",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2DefaultTableEngine.java",
                "blob_url": "https://github.com/apache/ignite/blob/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2DefaultTableEngine.java",
                "raw_url": "https://github.com/apache/ignite/raw/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2DefaultTableEngine.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2DefaultTableEngine.java?ref=84d329c29ebc6989793af0778c080429e69c875e",
                "patch": "@@ -28,7 +28,9 @@\n public class GridH2DefaultTableEngine implements TableEngine {\n     /** {@inheritDoc} */\n     @Override public Table createTable(CreateTableData data) {\n-        assert !data.persistData && !data.persistIndexes;\n+        // Used to create shadow table view used by CTE.\n+        data.persistData = false;\n+        data.persistIndexes = false;\n \n         if (data.isHidden && data.id == 0 && \"SYS\".equals(data.tableName))\n             return new GridH2MetaTable(data);",
                "deletions": 1
            },
            {
                "sha": "f3545f259559a2ae64b6a08925ba553ed299946e",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlNestedQuerySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlNestedQuerySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlNestedQuerySelfTest.java",
                "status": "added",
                "changes": 75,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlNestedQuerySelfTest.java?ref=84d329c29ebc6989793af0778c080429e69c875e",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.util.List;\n+import org.apache.ignite.cache.query.SqlFieldsQuery;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Tests for schemas.\n+ */\n+public class SqlNestedQuerySelfTest extends GridCommonAbstractTest {\n+    /** Node. */\n+    private IgniteEx node;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        node = (IgniteEx)startGrid();\n+\n+        startGrid(2);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     */\n+    public void testNestingQuery() {\n+        sql(\"CREATE TABLE txs(txId INTEGER PRIMARY KEY, created INTEGER)\");\n+        sql(\"CREATE TABLE ops(id INTEGER PRIMARY KEY, txId INTEGER, stage VARCHAR, tStamp INTEGER)\");\n+\n+        sql(\"INSERT INTO txs(txId, created) VALUES (1, 599000), (2, 599111), (3, 599234)\");\n+        sql(\"INSERT INTO ops(id, txId, stage, tStamp) VALUES\" +\n+            \" (1, 1, 'NEW', 599686), (2, 1, 'OLD', 599722), (3, 1, 'OLD', 599736), (4, 2, 'NEW', 599767)\");\n+\n+        sql(\"WITH cacheJoin (txId, stage, tStamp)\" +\n+              \" AS (SELECT t.txId, o.stage, o.tStamp FROM txs t INNER JOIN ops o ON t.txId = o.txId)\" +\n+            \" SELECT ou.stage, COUNT(*) as cou, SUM(CASE WHEN ou.stage = in.stage THEN 1 ELSE 0 END) AS ttl\" +\n+              \" FROM (SELECT txId, stage FROM cacheJoin cte GROUP BY txId, stage) ou\" +\n+                \" INNER JOIN (SELECT mx.txId, mx.stage FROM (SELECT txId, tStamp, stage FROM cacheJoin cte) mx\" +\n+                  \" INNER JOIN (SELECT txId, MAX(tStamp) AS maxTStamp FROM cacheJoin cte GROUP BY txId) mix\" +\n+                    \" ON mx.txId = mix.txId AND mx.tStamp = mix.maxTStamp) in ON ou.txId = in.txId\" +\n+            \" GROUP BY ou.stage\");\n+    }\n+\n+    /**\n+     * @param sql SQL query.\n+     * @return Results.\n+     */\n+    private List<List<?>> sql(String sql) {\n+        GridQueryProcessor qryProc = node.context().query();\n+\n+        SqlFieldsQuery qry = new SqlFieldsQuery(sql).setSchema(\"PUBLIC\");\n+\n+        return qryProc.querySqlFields(qry, true).getAll();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "87a0b2ed5faf6ebf896d547c5fdccc27c5508b36",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/84d329c29ebc6989793af0778c080429e69c875e/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteBinaryCacheQueryTestSuite.java?ref=84d329c29ebc6989793af0778c080429e69c875e",
                "patch": "@@ -193,6 +193,7 @@\n import org.apache.ignite.internal.processors.query.LazyQuerySelfTest;\n import org.apache.ignite.internal.processors.query.MultipleStatementsSqlQuerySelfTest;\n import org.apache.ignite.internal.processors.query.SqlIllegalSchemaSelfTest;\n+import org.apache.ignite.internal.processors.query.SqlNestedQuerySelfTest;\n import org.apache.ignite.internal.processors.query.SqlPushDownFunctionTest;\n import org.apache.ignite.internal.processors.query.SqlSchemaSelfTest;\n import org.apache.ignite.internal.processors.query.SqlSystemViewsSelfTest;\n@@ -244,6 +245,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(AffinityKeyNameAndValueFieldNameConflictTest.class);\n         suite.addTestSuite(DmlInsideTransactionTest.class);\n         suite.addTestSuite(ComplexPrimaryKeyUnwrapSelfTest.class);\n+        suite.addTestSuite(SqlNestedQuerySelfTest.class);\n \n         suite.addTestSuite(PartitionedSqlTest.class);\n         suite.addTestSuite(ReplicatedSqlTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8404 Fixed NPE in MappedFileMemoryProvider",
        "commit": "https://github.com/apache/ignite/commit/a7651b2f0f27f9af750bd482a42c1813f870e6f0",
        "parent": "https://github.com/apache/ignite/commit/b7fd0218e617596b52bcfec2673dabd92dc07135",
        "bug_id": "ignite_47",
        "file": [
            {
                "sha": "7186b27f081180c8d16ec4a762597006e7693d38",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/mem/file/MappedFileMemoryProvider.java",
                "blob_url": "https://github.com/apache/ignite/blob/a7651b2f0f27f9af750bd482a42c1813f870e6f0/modules/core/src/main/java/org/apache/ignite/internal/mem/file/MappedFileMemoryProvider.java",
                "raw_url": "https://github.com/apache/ignite/raw/a7651b2f0f27f9af750bd482a42c1813f870e6f0/modules/core/src/main/java/org/apache/ignite/internal/mem/file/MappedFileMemoryProvider.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/mem/file/MappedFileMemoryProvider.java?ref=a7651b2f0f27f9af750bd482a42c1813f870e6f0",
                "patch": "@@ -94,14 +94,18 @@ public MappedFileMemoryProvider(IgniteLogger log, File allocationPath) {\n \n     /** {@inheritDoc} */\n     @Override public void shutdown() {\n-        for (MappedFile file : mappedFiles) {\n-            try {\n-                file.close();\n-            }\n-            catch (IOException e) {\n-                log.error(\"Failed to close memory-mapped file upon stop (will ignore) [file=\" +\n-                    file.file() + \", err=\" + e.getMessage() + ']');\n+        if (mappedFiles != null) {\n+            for (MappedFile file : mappedFiles) {\n+                try {\n+                    file.close();\n+                }\n+                catch (IOException e) {\n+                    log.error(\"Failed to close memory-mapped file upon stop (will ignore) [file=\" +\n+                        file.file() + \", err=\" + e.getMessage() + ']');\n+                }\n             }\n+\n+            mappedFiles = null;\n         }\n     }\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9425 Fixed NPE on index rebuild - Fixes #4647.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/c7aaee7ed577dbfc550948494ca74d8261bbdff4",
        "parent": "https://github.com/apache/ignite/commit/8cb4591d691e9438fd0bf0809bb105229b4f7ff8",
        "bug_id": "ignite_48",
        "file": [
            {
                "sha": "a86b9f5c449f04d99c41d4fe31623d59040f1aff",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=c7aaee7ed577dbfc550948494ca74d8261bbdff4",
                "patch": "@@ -1362,7 +1362,8 @@ private void prepareIndexRebuildFuture(int cacheId) {\n                     final int cacheId = cacheCtx.cacheId();\n                     final GridFutureAdapter<Void> usrFut = idxRebuildFuts.get(cacheId);\n \n-                    if (!cctx.pageStore().hasIndexStore(cacheCtx.groupId()) && cacheCtx.affinityNode()) {\n+                    if (!cctx.pageStore().hasIndexStore(cacheCtx.groupId()) && cacheCtx.affinityNode()\n+                        && cacheCtx.group().persistenceEnabled()) {\n                         IgniteInternalFuture<?> rebuildFut = cctx.kernalContext().query()\n                             .rebuildIndexesFromHash(Collections.singleton(cacheCtx.cacheId()));\n ",
                "deletions": 1
            },
            {
                "sha": "7d5b296f931cae706052a99447409142523bc02b",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/database/IgniteTwoRegionsRebuildIndexTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/database/IgniteTwoRegionsRebuildIndexTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/database/IgniteTwoRegionsRebuildIndexTest.java",
                "status": "added",
                "changes": 124,
                "additions": 124,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/database/IgniteTwoRegionsRebuildIndexTest.java?ref=c7aaee7ed577dbfc550948494ca74d8261bbdff4",
                "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.database;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteDataStreamer;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Tests the case when preformed index rebuild for created by client in-memory cache.\n+ */\n+public class IgniteTwoRegionsRebuildIndexTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final String PERSISTED_CACHE = \"persisted\";\n+\n+    /** */\n+    private static final String INMEMORY_CACHE = \"inmemory\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        boolean client = igniteInstanceName.startsWith(\"client\");\n+\n+        DataStorageConfiguration dsCfg = new DataStorageConfiguration();\n+\n+        if (!client) {\n+            DataRegionConfiguration drCfg1 = new DataRegionConfiguration();\n+            drCfg1.setMaxSize(16 * 1024 * 1024);\n+            drCfg1.setName(\"nopersistence\");\n+            drCfg1.setInitialSize(drCfg1.getMaxSize());\n+            drCfg1.setPersistenceEnabled(false);\n+\n+            DataRegionConfiguration drCfg2 = new DataRegionConfiguration();\n+            drCfg2.setMaxSize(16 * 1024 * 1024);\n+            drCfg2.setName(\"persistence\");\n+            drCfg2.setInitialSize(drCfg2.getMaxSize());\n+            drCfg2.setPersistenceEnabled(true);\n+\n+            dsCfg.setDataRegionConfigurations(drCfg1, drCfg2);\n+\n+            cfg.setDataStorageConfiguration(dsCfg);\n+        }\n+        else {\n+            CacheConfiguration ccfg1 = new CacheConfiguration(PERSISTED_CACHE);\n+            CacheConfiguration ccfg2 = new CacheConfiguration(INMEMORY_CACHE);\n+\n+            ccfg1.setDataRegionName(\"persistence\");\n+            ccfg2.setDataRegionName(\"nopersistence\");\n+\n+            cfg.setCacheConfiguration(ccfg1, ccfg2);\n+            cfg.setClientMode(true);\n+        }\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testRebuildIndexes() throws Exception {\n+        startGrid(\"server\");\n+        Ignite client = startGrid(\"client\");\n+\n+        client.cluster().active(true);\n+\n+        populateData(client, PERSISTED_CACHE);\n+        populateData(client, INMEMORY_CACHE);\n+\n+        stopGrid(\"server\");\n+        startGrid(\"server\");\n+\n+        stopGrid(\"client\");\n+        startGrid(\"client\");\n+    }\n+\n+    /**\n+     * @param ignite Ignite.\n+     * @param cacheName Cache name.\n+     */\n+    private void populateData(Ignite ignite, String cacheName) {\n+        try (IgniteDataStreamer<Object, Object> streamer = ignite.dataStreamer(cacheName)) {\n+            for (int i = 0; i < 1000; i++)\n+                streamer.addData(i, i);\n+\n+            streamer.flush();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "67b9fad63cde2232a34300806acf3a74684370b0",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/c7aaee7ed577dbfc550948494ca74d8261bbdff4/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingTestSuite.java?ref=c7aaee7ed577dbfc550948494ca74d8261bbdff4",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.ignite.internal.processors.database.IgniteDbSingleNodeWithIndexingWalRestoreTest;\n import org.apache.ignite.internal.processors.database.IgnitePersistentStoreQueryWithMultipleClassesPerCacheTest;\n import org.apache.ignite.internal.processors.database.IgnitePersistentStoreSchemaLoadTest;\n+import org.apache.ignite.internal.processors.database.IgniteTwoRegionsRebuildIndexTest;\n \n /**\n  *\n@@ -44,6 +45,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(IgnitePdsSingleNodeWithIndexingAndGroupPutGetPersistenceSelfTest.class);\n         suite.addTestSuite(IgnitePersistentStoreSchemaLoadTest.class);\n         suite.addTestSuite(IgnitePersistentStoreQueryWithMultipleClassesPerCacheTest.class);\n+        suite.addTestSuite(IgniteTwoRegionsRebuildIndexTest.class);\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9055: [ML] SVM throws NPE in case of empty partitions\n\nthis closes #4412",
        "commit": "https://github.com/apache/ignite/commit/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
        "parent": "https://github.com/apache/ignite/commit/13e2a314b72d9155ce7f0126651805064e20358c",
        "bug_id": "ignite_49",
        "file": [
            {
                "sha": "67e0d56fb0e05b39610c6a84b60a1a66fd2d7312",
                "filename": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "patch": "@@ -163,7 +163,8 @@ public CacheBasedDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteB\n \n         R res = identity;\n         for (R partRes : results)\n-            res = reduce.apply(res, partRes);\n+            if (partRes != null)\n+                res = reduce.apply(res, partRes);\n \n         return res;\n     }",
                "deletions": 1
            },
            {
                "sha": "d227de7e329e07ae1f498fab11888908b7528325",
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "status": "added",
                "changes": 102,
                "additions": 102,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.svm;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.internal.util.IgniteUtils;\n+import org.apache.ignite.ml.TestUtils;\n+import org.apache.ignite.ml.math.primitives.vector.VectorUtils;\n+import org.apache.ignite.ml.math.primitives.vector.impl.DenseVector;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Tests for {@link SVMLinearBinaryClassificationTrainer} that require to start the whole Ignite infrastructure.\n+ */\n+public class SVMBinaryTrainerIntegrationTest extends GridCommonAbstractTest {\n+    /** Fixed size of Dataset. */\n+    private static final int AMOUNT_OF_OBSERVATIONS = 1000;\n+\n+    /** Fixed size of columns in Dataset. */\n+    private static final int AMOUNT_OF_FEATURES = 2;\n+\n+    /** Precision in test checks. */\n+    private static final double PRECISION = 1e-2;\n+\n+    /** Number of nodes in grid */\n+    private static final int NODE_COUNT = 3;\n+\n+    /** Ignite instance. */\n+    private Ignite ignite;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        for (int i = 1; i <= NODE_COUNT; i++)\n+            startGrid(i);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override protected void beforeTest() throws Exception {\n+        /* Grid instance. */\n+        ignite = grid(NODE_COUNT);\n+        ignite.configuration().setPeerClassLoadingEnabled(true);\n+        IgniteUtils.setCurrentIgniteName(ignite.configuration().getIgniteInstanceName());\n+    }\n+\n+    /**\n+     * Test trainer on classification model y = x.\n+     */\n+    public void testTrainWithTheLinearlySeparableCase() {\n+        IgniteCache<Integer, double[]> data = ignite.getOrCreateCache(UUID.randomUUID().toString());\n+\n+        ThreadLocalRandom rndX = ThreadLocalRandom.current();\n+        ThreadLocalRandom rndY = ThreadLocalRandom.current();\n+\n+        for (int i = 0; i < AMOUNT_OF_OBSERVATIONS; i++) {\n+            double x = rndX.nextDouble(-1000, 1000);\n+            double y = rndY.nextDouble(-1000, 1000);\n+            double[] vec = new double[AMOUNT_OF_FEATURES + 1];\n+            vec[0] = y - x > 0 ? 1 : -1; // assign label.\n+            vec[1] = x;\n+            vec[2] = y;\n+            data.put(i, vec);\n+        }\n+\n+        SVMLinearBinaryClassificationTrainer trainer = new SVMLinearBinaryClassificationTrainer();\n+\n+        SVMLinearBinaryClassificationModel mdl = trainer.fit(\n+            ignite,\n+            data,\n+            (k, v) -> VectorUtils.of(Arrays.copyOfRange(v, 1, v.length)),\n+            (k, v) -> v[0]\n+        );\n+\n+        TestUtils.assertEquals(-1, mdl.apply(new DenseVector(new double[]{100, 10})), PRECISION);\n+        TestUtils.assertEquals(1, mdl.apply(new DenseVector(new double[]{10, 100})), PRECISION);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "822ad184ea929405ed01cd8fa7ddc8ce79925d71",
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "patch": "@@ -27,7 +27,8 @@\n @Suite.SuiteClasses({\n     SVMModelTest.class,\n     SVMBinaryTrainerTest.class,\n-    SVMMultiClassTrainerTest.class\n+    SVMMultiClassTrainerTest.class,\n+    SVMBinaryTrainerIntegrationTest.class\n })\n public class SVMTestSuite {\n     // No-op.",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9796 NPE if you call array() method on empty GridLongList - Fixes #4917.\n\nSigned-off-by: Ivan Rakov <irakov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/447ce47cc2781fc4b95172ab386e87f2c08ce040",
        "parent": "https://github.com/apache/ignite/commit/ccf9c1ce33b5513372beed0ee8463ed3684e35e9",
        "bug_id": "ignite_50",
        "file": [
            {
                "sha": "5a7e66aefc7bb7e9b1f5194aa9dc929fccf13eb3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/BaselineTopology.java",
                "blob_url": "https://github.com/apache/ignite/blob/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/BaselineTopology.java",
                "raw_url": "https://github.com/apache/ignite/raw/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/BaselineTopology.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/BaselineTopology.java?ref=447ce47cc2781fc4b95172ab386e87f2c08ce040",
                "patch": "@@ -298,13 +298,15 @@ public ClusterNode baselineNode(Object consId) {\n      * @return Sorted list of baseline topology nodes.\n      */\n     public List<ClusterNode> createBaselineView(\n-        List<ClusterNode> aliveNodes,\n-        @Nullable IgnitePredicate<ClusterNode> nodeFilter)\n-    {\n+        Collection<ClusterNode> aliveNodes,\n+        @Nullable IgnitePredicate<ClusterNode> nodeFilter\n+    ) {\n         List<ClusterNode> res = new ArrayList<>(nodeMap.size());\n \n+        boolean nullNodeFilter = nodeFilter == null;\n+\n         for (ClusterNode node : aliveNodes) {\n-            if (nodeMap.containsKey(node.consistentId()) && (nodeFilter == null || CU.affinityNode(node, nodeFilter)))\n+            if (nodeMap.containsKey(node.consistentId()) && (nullNodeFilter || CU.affinityNode(node, nodeFilter)))\n                 res.add(node);\n         }\n \n@@ -316,7 +318,7 @@ public ClusterNode baselineNode(Object consId) {\n         Map<Object, ClusterNode> consIdMap = new HashMap<>();\n \n         for (ClusterNode node : aliveNodes) {\n-            if (nodeMap.containsKey(node.consistentId()) && (nodeFilter == null || CU.affinityNode(node, nodeFilter)))\n+            if (nodeMap.containsKey(node.consistentId()) && (nullNodeFilter || CU.affinityNode(node, nodeFilter)))\n                 consIdMap.put(node.consistentId(), node);\n         }\n \n@@ -326,7 +328,7 @@ public ClusterNode baselineNode(Object consId) {\n             if (!consIdMap.containsKey(consId)) {\n                 DetachedClusterNode node = new DetachedClusterNode(consId, e.getValue());\n \n-                if (nodeFilter == null || CU.affinityNode(node, nodeFilter))\n+                if (nullNodeFilter || CU.affinityNode(node, nodeFilter))\n                     consIdMap.put(consId, node);\n             }\n         }",
                "deletions": 6
            },
            {
                "sha": "8d09539590f4300b8f09b4a6fac2b2701a63ec97",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/GridLongList.java",
                "blob_url": "https://github.com/apache/ignite/blob/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/main/java/org/apache/ignite/internal/util/GridLongList.java",
                "raw_url": "https://github.com/apache/ignite/raw/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/main/java/org/apache/ignite/internal/util/GridLongList.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/GridLongList.java?ref=447ce47cc2781fc4b95172ab386e87f2c08ce040",
                "patch": "@@ -42,6 +42,9 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    /** Empty array. */\n+    public static final long[] EMPTY_ARRAY = new long[0];\n+\n     /** */\n     private long[] arr;\n \n@@ -390,6 +393,9 @@ public int replaceValue(int startIdx, long oldVal, long newVal) {\n      * @return Array copy.\n      */\n     public long[] array() {\n+        if (arr == null)\n+            return EMPTY_ARRAY;\n+\n         long[] res = new long[idx];\n \n         System.arraycopy(arr, 0, res, 0, idx);",
                "deletions": 0
            },
            {
                "sha": "f1d66825b715b36915865da6ba51166b0d517fc9",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "status": "modified",
                "changes": 53,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java?ref=447ce47cc2781fc4b95172ab386e87f2c08ce040",
                "patch": "@@ -17,6 +17,31 @@\n \n package org.apache.ignite.testframework.junits;\n \n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.cache.configuration.Factory;\n+import javax.cache.configuration.FactoryBuilder;\n import junit.framework.TestCase;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n@@ -98,32 +123,6 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.FileSystemXmlApplicationContext;\n \n-import javax.cache.configuration.Factory;\n-import javax.cache.configuration.FactoryBuilder;\n-import java.io.ObjectStreamException;\n-import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.Proxy;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.UUID;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n import static org.apache.ignite.IgniteSystemProperties.IGNITE_CLIENT_CACHE_CHANGE_MESSAGE_TIMEOUT;\n import static org.apache.ignite.IgniteSystemProperties.IGNITE_DISCO_FAILED_CLIENT_RECONNECT_DELAY;\n import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n@@ -604,7 +603,7 @@ protected void afterTestsStopped() throws Exception {\n             info(\">>> Starting test class: \" + testClassDescription() + \" <<<\");\n \n             if(isSafeTopology())\n-                assert G.allGrids().isEmpty() : \"Not all Ignite instances stopped before tests execution\";\n+                assert G.allGrids().isEmpty() : \"Not all Ignite instances stopped before tests execution:\" +  G.allGrids();\n \n             if (startGrid) {\n                 IgniteConfiguration cfg = optimize(getConfiguration());",
                "deletions": 27
            },
            {
                "sha": "8849a3d2727d084c47ad541856d97e3b70150059",
                "filename": "modules/core/src/test/java/org/apache/ignite/util/GridLongListSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/test/java/org/apache/ignite/util/GridLongListSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/447ce47cc2781fc4b95172ab386e87f2c08ce040/modules/core/src/test/java/org/apache/ignite/util/GridLongListSelfTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/util/GridLongListSelfTest.java?ref=447ce47cc2781fc4b95172ab386e87f2c08ce040",
                "patch": "@@ -150,4 +150,27 @@ public void testSort() {\n         assertEquals(asList(1, 3, 4, 5, 0), list);\n         assertEquals(asList(0, 1, 3, 4, 5), list.sort());\n     }\n+\n+    /**\n+     *\n+     */\n+    public void testArray() {\n+        GridLongList list = new GridLongList();\n+\n+        long[] array = list.array();\n+\n+        assertNotNull(array);\n+\n+        assertEquals(0, array.length);\n+\n+        list.add(1L);\n+\n+        array = list.array();\n+\n+        assertNotNull(array);\n+\n+        assertEquals(1, array.length);\n+\n+        assertEquals(1L, array[0]);\n+    }\n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6802 Test of NullPointerException when WAL store and WAL archive paths are same - Fixes #3021.\n\nSigned-off-by: dpavlov <dpavlov@gridgain.com>",
        "commit": "https://github.com/apache/ignite/commit/631ff3ad082330ec7b8165271be131399a2d8957",
        "parent": "https://github.com/apache/ignite/commit/6875ac3e069358af43586ad7068cfb7c50d8c08f",
        "bug_id": "ignite_51",
        "file": [
            {
                "sha": "7141fed0807f47c70546988fb2b93e5db4da4e77",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalPathsTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/631ff3ad082330ec7b8165271be131399a2d8957/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalPathsTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/631ff3ad082330ec7b8165271be131399a2d8957/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalPathsTest.java",
                "status": "added",
                "changes": 86,
                "additions": 86,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalPathsTest.java?ref=631ff3ad082330ec7b8165271be131399a2d8957",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.wal;\n+\n+import java.io.File;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/** Tests equal paths to WAL storage and WAL archive. */\n+public class WalPathsTest extends GridCommonAbstractTest {\n+    /** WalPath and WalArchivePath. */\n+    private File walDir;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+\n+        U.delete(walDir);\n+    }\n+\n+    /**\n+     * @param relativePath {@code True} - if wal archive path should be relative, {@code false} - for absolute path.\n+     * @return Ignite configuration with the same path to wal store and wal archive.\n+     * @throws Exception If failed.\n+     */\n+    private IgniteConfiguration getConfig(boolean relativePath) throws Exception {\n+        IgniteConfiguration cfg = getConfiguration();\n+\n+        DataStorageConfiguration dsCfg = new DataStorageConfiguration();\n+\n+        dsCfg.setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n+            .setPersistenceEnabled(true)\n+            .setMaxSize(200 * 1024 * 1024));\n+\n+        walDir = new File(U.defaultWorkDirectory(), getClass().getSimpleName());\n+\n+        dsCfg.setWalPath(walDir.getAbsolutePath());\n+        dsCfg.setWalArchivePath(relativePath ? getClass().getSimpleName() : walDir.getAbsolutePath());\n+\n+        cfg.setDataStorageConfiguration(dsCfg);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests equal paths to the same directory.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testWalStoreAndArchivePathsEquality() throws Exception {\n+        IgniteConfiguration cfg = getConfig(false);\n+\n+        startGrid(cfg);\n+    }\n+\n+    /**\n+     * Tests absolute and relative paths to the same directory.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testWalStoreAndArchiveAbsolutAndRelativePathsEquality() throws Exception {\n+        final IgniteConfiguration cfg = getConfig(true);\n+\n+        startGrid(cfg);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "447b622f451ee19a66e4ce53bf604352a9d6f2e9",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/631ff3ad082330ec7b8165271be131399a2d8957/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/631ff3ad082330ec7b8165271be131399a2d8957/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java?ref=631ff3ad082330ec7b8165271be131399a2d8957",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.IgniteWalRecoveryPPCTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.IgniteWalRecoveryTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.IgniteWalRecoveryWithCompactionTest;\n+import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalPathsTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRecoveryTxLogicalRecordsTest;\n \n /**\n@@ -50,6 +51,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(IgnitePdsPageEvictionTest.class);\n         suite.addTestSuite(IgnitePdsMultiNodePutGetRestartTest.class);\n         suite.addTestSuite(IgnitePersistentStoreCacheGroupsTest.class);\n+        suite.addTestSuite(WalPathsTest.class);\n         suite.addTestSuite(WalRecoveryTxLogicalRecordsTest.class);\n \n         suite.addTestSuite(IgniteWalRecoveryTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9760 Fixed NPE in WAL manager for FSYNC mode - Fixes #4888.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/a03c6e9833e4767025c9aefeedbead07495da4a5",
        "parent": "https://github.com/apache/ignite/commit/bd07c83583807714757ed033901bf885c9a77b24",
        "bug_id": "ignite_52",
        "file": [
            {
                "sha": "3d1b0e0304d2fc7917a32b89f9b5fb0b5ccacc6c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FsyncModeFileWriteAheadLogManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FsyncModeFileWriteAheadLogManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FsyncModeFileWriteAheadLogManager.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/wal/FsyncModeFileWriteAheadLogManager.java?ref=a03c6e9833e4767025c9aefeedbead07495da4a5",
                "patch": "@@ -2330,19 +2330,22 @@ public static long writeSerializerVersion(FileIO io, long idx, int version, WALM\n     private abstract static class FileHandle {\n         /** I/O interface for read/write operations with file */\n         protected SegmentIO fileIO;\n+        /** Segment idx corresponded to fileIo*/\n+        final long segmentIdx;\n \n         /**\n          * @param fileIO I/O interface for read/write operations of FileHandle.\n          */\n-        private FileHandle(SegmentIO fileIO) {\n+        private FileHandle(@NotNull SegmentIO fileIO) {\n             this.fileIO = fileIO;\n+            this.segmentIdx = fileIO.getSegmentId();\n         }\n \n         /**\n          * @return Current segment id.\n          */\n         public long getSegmentId(){\n-            return fileIO.getSegmentId();\n+            return segmentIdx;\n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "7454e5f68dfe26e023ce1ada3ceaf2430927b3f9",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingFsyncTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingFsyncTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingFsyncTest.java",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingFsyncTest.java?ref=a03c6e9833e4767025c9aefeedbead07495da4a5",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.wal;\n+\n+import org.apache.ignite.configuration.WALMode;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ *\n+ */\n+public class WalRolloverRecordLoggingFsyncTest extends WalRolloverRecordLoggingTest {\n+\n+    /** {@inheritDoc} */\n+    @NotNull @Override public WALMode walMode() {\n+        return WALMode.FSYNC;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "765fdeb5c455671a5c3a6bd3961d5e6f9e41d4c2",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingLogOnlyTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingLogOnlyTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingLogOnlyTest.java",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingLogOnlyTest.java?ref=a03c6e9833e4767025c9aefeedbead07495da4a5",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.wal;\n+\n+import org.apache.ignite.configuration.WALMode;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ *\n+ */\n+public class WalRolloverRecordLoggingLogOnlyTest extends WalRolloverRecordLoggingTest {\n+\n+    /** {@inheritDoc} */\n+    @NotNull @Override public WALMode walMode() {\n+        return WALMode.LOG_ONLY;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "395b03ae4367ce680c35ad2f7b2e08ba8a13600d",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRolloverRecordLoggingTest.java?ref=a03c6e9833e4767025c9aefeedbead07495da4a5",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.ignite.configuration.DataRegionConfiguration;\n import org.apache.ignite.configuration.DataStorageConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.configuration.WALMode;\n import org.apache.ignite.failure.StopNodeOrHaltFailureHandler;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.IgniteInternalFuture;\n@@ -36,13 +37,11 @@\n import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n-\n-import static org.apache.ignite.configuration.DataStorageConfiguration.DFLT_WAL_PATH;\n-import static org.apache.ignite.configuration.WALMode.LOG_ONLY;\n+import org.jetbrains.annotations.NotNull;\n /**\n  *\n  */\n-public class WalRolloverRecordLoggingTest extends GridCommonAbstractTest {\n+public abstract class WalRolloverRecordLoggingTest extends GridCommonAbstractTest {\n     /** */\n     private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n \n@@ -69,15 +68,20 @@ private RolloverRecord() {\n             .setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n                 .setPersistenceEnabled(true)\n                 .setMaxSize(40 * 1024 * 1024))\n-            .setWalMode(LOG_ONLY)\n+            .setWalMode(walMode())\n             .setWalSegmentSize(4 * 1024 * 1024)\n-            .setWalArchivePath(DFLT_WAL_PATH));\n+        );\n \n         cfg.setFailureHandler(new StopNodeOrHaltFailureHandler(false, 0));\n \n         return cfg;\n     }\n \n+    /**\n+     * @return Wal mode.\n+     */\n+    @NotNull public abstract WALMode walMode();\n+\n     /** {@inheritDoc} */\n     @Override protected void beforeTest() throws Exception {\n         stopAllGrids();",
                "deletions": 6
            },
            {
                "sha": "e9159bf7cd553b0552c53d55c271ae6be52d12c7",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/a03c6e9833e4767025c9aefeedbead07495da4a5/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgnitePdsWithIndexingCoreTestSuite.java?ref=a03c6e9833e4767025c9aefeedbead07495da4a5",
                "patch": "@@ -40,7 +40,8 @@\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.IgniteWalRecoveryWithCompactionTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalPathsTest;\n import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRecoveryTxLogicalRecordsTest;\n-import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRolloverRecordLoggingTest;\n+import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRolloverRecordLoggingFsyncTest;\n+import org.apache.ignite.internal.processors.cache.persistence.db.wal.WalRolloverRecordLoggingLogOnlyTest;\n \n /**\n  * Test suite for tests that cover core PDS features and depend on indexing module.\n@@ -60,7 +61,8 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(PersistenceDirectoryWarningLoggingTest.class);\n         suite.addTestSuite(WalPathsTest.class);\n         suite.addTestSuite(WalRecoveryTxLogicalRecordsTest.class);\n-        suite.addTestSuite(WalRolloverRecordLoggingTest.class);\n+        suite.addTestSuite(WalRolloverRecordLoggingFsyncTest.class);\n+        suite.addTestSuite(WalRolloverRecordLoggingLogOnlyTest.class);\n \n         suite.addTestSuite(IgniteWalRecoveryTest.class);\n         suite.addTestSuite(IgniteWalRecoveryWithCompactionTest.class);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7639 Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/c917327b74b3dbcb65b961277f5d2c99a71b7a8a",
        "parent": "https://github.com/apache/ignite/commit/ce7c1478ff19e2cd4becfda855246745b248b287",
        "bug_id": "ignite_53",
        "file": [
            {
                "sha": "b022754c6670a0ec50dada54717ef2ba2a3ade66",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/DiscoveryDataClusterState.java",
                "blob_url": "https://github.com/apache/ignite/blob/c917327b74b3dbcb65b961277f5d2c99a71b7a8a/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/DiscoveryDataClusterState.java",
                "raw_url": "https://github.com/apache/ignite/raw/c917327b74b3dbcb65b961277f5d2c99a71b7a8a/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/DiscoveryDataClusterState.java",
                "status": "modified",
                "changes": 41,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/DiscoveryDataClusterState.java?ref=c917327b74b3dbcb65b961277f5d2c99a71b7a8a",
                "patch": "@@ -28,36 +28,55 @@\n import org.jetbrains.annotations.Nullable;\n \n /**\n- * Discovery data related to cluster state.\n+ * A pojo-object representing current cluster global state. The state includes cluster active flag and cluster\n+ * baseline topology.\n+ * <p>\n+ * This object also captures a transitional cluster state, when one or more fields are changing. In this case,\n+ * a {@code transitionReqId} field is set to a non-null value and {@code prevState} captures previous cluster state.\n+ * A joining node catching the cluster in an intermediate state will observe {@code transitionReqId} field to be\n+ * non-null, however the {@code prevState} will not be sent to the joining node.\n+ *\n+ * TODO https://issues.apache.org/jira/browse/IGNITE-7640 This class must be immutable, transitionRes must be set by calling finish().\n  */\n public class DiscoveryDataClusterState implements Serializable {\n     /** */\n     private static final long serialVersionUID = 0L;\n \n-    /** */\n+    /** Flag indicating if the cluster in in active state. */\n     private final boolean active;\n \n-    /** */\n+    /** Current cluster baseline topology. */\n     @Nullable private final BaselineTopology baselineTopology;\n \n-    /** */\n+    /**\n+     * Transition request ID. Set to a non-null value if the cluster is changing it's state.\n+     * The ID is assigned on the initiating node.\n+     */\n     private final UUID transitionReqId;\n \n-    /** Topology version for state change exchange. */\n+    /**\n+     * Topology version in the cluster when state change request was received by the coordinator.\n+     * The exchange fired for the cluster state change will be on version {@code transitionTopVer.nextMinorVersion()}.\n+     */\n     @GridToStringInclude\n     private final AffinityTopologyVersion transitionTopVer;\n \n     /** Nodes participating in state change exchange. */\n     @GridToStringExclude\n     private final Set<UUID> transitionNodes;\n \n-    /** Local flag for state transition result (global state is updated asynchronously by custom message). */\n+    /**\n+     * Local flag for state transition active state result (global state is updated asynchronously by custom message),\n+     * {@code null} means that state change is not completed yet.\n+     */\n     private transient volatile Boolean transitionRes;\n \n-    /** */\n+    /**\n+     * Previous cluster state if this state is a transition state and it was not received by a joining node.\n+     */\n     private transient DiscoveryDataClusterState prevState;\n \n-    /** */\n+    /** Transition result error. */\n     private transient volatile Exception transitionError;\n \n     /**\n@@ -86,6 +105,7 @@ static DiscoveryDataClusterState createTransitionState(\n         assert transitionReqId != null;\n         assert transitionTopVer != null;\n         assert !F.isEmpty(transitionNodes) : transitionNodes;\n+        assert prevState != null;\n \n         return new DiscoveryDataClusterState(\n             prevState,\n@@ -156,7 +176,7 @@ public boolean transition() {\n      * @return {@code True} if cluster active state change is in progress, {@code false} otherwise.\n      */\n     public boolean activeStateChanging() {\n-        return transition() && active != prevState.active;\n+        return transition() && (prevState == null || (prevState.active != active));\n     }\n \n     /**\n@@ -202,6 +222,9 @@ public void transitionError(Exception ex) {\n     }\n \n     /**\n+     * Creates a non-transitional cluster state. This method effectively cleans all fields identifying the\n+     * state as transitional and creates a new state with the state transition result.\n+     *\n      * @param success Transition success status.\n      * @return Cluster state that finished transition.\n      */",
                "deletions": 9
            },
            {
                "sha": "2337329c5ce83f8f88d8b113182ab62ef1874809",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteClusterActivateDeactivateTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/c917327b74b3dbcb65b961277f5d2c99a71b7a8a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteClusterActivateDeactivateTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/c917327b74b3dbcb65b961277f5d2c99a71b7a8a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteClusterActivateDeactivateTest.java",
                "status": "modified",
                "changes": 222,
                "additions": 96,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteClusterActivateDeactivateTest.java?ref=c917327b74b3dbcb65b961277f5d2c99a71b7a8a",
                "patch": "@@ -37,7 +37,6 @@\n import org.apache.ignite.internal.IgniteClientReconnectAbstractTest;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.IgniteInternalFuture;\n-import org.apache.ignite.internal.IgniteKernal;\n import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsFullMessage;\n@@ -49,7 +48,6 @@\n import org.apache.ignite.lang.IgniteBiPredicate;\n import org.apache.ignite.plugin.extensions.communication.Message;\n import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n-import org.apache.ignite.spi.discovery.tcp.TestTcpDiscoverySpi;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n import org.apache.ignite.testframework.GridTestUtils;\n@@ -84,9 +82,6 @@\n     /** */\n     private boolean testSpi;\n \n-    /** */\n-    private boolean testDiscoSpi;\n-\n     /** */\n     private boolean testReconnectSpi;\n \n@@ -104,8 +99,6 @@\n \n             spi.setJoinTimeout(2 * 60_000);\n         }\n-        else if (testDiscoSpi)\n-            cfg.setDiscoverySpi(new TestTcpDiscoverySpi());\n \n         ((TcpDiscoverySpi)cfg.getDiscoverySpi()).setIpFinder(IP_FINDER);\n \n@@ -220,14 +213,14 @@ private void activateSimple(int srvs, int clients, int activateFrom) throws Exce\n         }\n \n         for (int i = 0; i < srvs + clients; i++)\n-            assertFalse(ignite(i).active());\n+            assertFalse(ignite(i).cluster().active());\n \n-        ignite(activateFrom).active(false); // Should be no-op.\n+        ignite(activateFrom).cluster().active(false); // Should be no-op.\n \n-        ignite(activateFrom).active(true);\n+        ignite(activateFrom).cluster().active(true);\n \n         for (int i = 0; i < srvs + clients; i++)\n-            assertTrue(ignite(i).active());\n+            assertTrue(ignite(i).cluster().active());\n \n         for (int i = 0; i < srvs + clients; i++) {\n             for (int c = 0; c < 2; c++)\n@@ -308,16 +301,14 @@ public void testJoinWhileActivate1_Client() throws Exception {\n     private void joinWhileActivate1(final boolean startClient, final boolean withNewCache) throws Exception {\n         IgniteInternalFuture<?> activeFut = startNodesAndBlockStatusChange(2, 0, 0, false);\n \n-        IgniteInternalFuture<?> startFut = GridTestUtils.runAsync(new Callable<Void>() {\n-            @Override public Void call() throws Exception {\n-                client = startClient;\n+        IgniteInternalFuture<?> startFut = GridTestUtils.runAsync((Callable<Void>)() -> {\n+            client = startClient;\n \n-                ccfgs = withNewCache ? cacheConfigurations2() : cacheConfigurations1();\n+            ccfgs = withNewCache ? cacheConfigurations2() : cacheConfigurations1();\n \n-                startGrid(2);\n+            startGrid(2);\n \n-                return null;\n-            }\n+            return null;\n         });\n \n         TestRecordingCommunicationSpi spi1 = TestRecordingCommunicationSpi.spi(ignite(1));\n@@ -376,7 +367,7 @@ private void joinWhileActivate1(final boolean startClient, final boolean withNew\n         int minorVer = 1;\n \n         if (initiallyActive && persistenceEnabled()) {\n-            ignite(0).active(true);\n+            ignite(0).cluster().active(true);\n \n             minorVer++;\n         }\n@@ -396,11 +387,9 @@ private void joinWhileActivate1(final boolean startClient, final boolean withNew\n             blockExchangeSingleMessage(spi, STATE_CHANGE_TOP_VER);\n         }\n \n-        IgniteInternalFuture<?> stateChangeFut = GridTestUtils.runAsync(new Runnable() {\n-            @Override public void run() {\n-                ignite(stateChangeFrom).active(!initiallyActive);\n-            }\n-        });\n+        IgniteInternalFuture<?> stateChangeFut = GridTestUtils.runAsync(() ->\n+            ignite(stateChangeFrom).cluster().active(!initiallyActive)\n+        );\n \n         for (TestRecordingCommunicationSpi spi : spis)\n             spi.waitForBlocked();\n@@ -417,17 +406,15 @@ private void joinWhileActivate1(final boolean startClient, final boolean withNew\n      * @param topVer Exchange topology version.\n      */\n     private void blockExchangeSingleMessage(TestRecordingCommunicationSpi spi, final AffinityTopologyVersion topVer) {\n-        spi.blockMessages(new IgniteBiPredicate<ClusterNode, Message>() {\n-            @Override public boolean apply(ClusterNode clusterNode, Message msg) {\n-                if (msg instanceof GridDhtPartitionsSingleMessage) {\n-                    GridDhtPartitionsSingleMessage pMsg = (GridDhtPartitionsSingleMessage)msg;\n-\n-                    if (pMsg.exchangeId() != null && pMsg.exchangeId().topologyVersion().equals(topVer))\n-                        return true;\n-                }\n+        spi.blockMessages((IgniteBiPredicate<ClusterNode, Message>)(clusterNode, msg) -> {\n+            if (msg instanceof GridDhtPartitionsSingleMessage) {\n+                GridDhtPartitionsSingleMessage pMsg = (GridDhtPartitionsSingleMessage)msg;\n \n-                return false;\n+                if (pMsg.exchangeId() != null && pMsg.exchangeId().topologyVersion().equals(topVer))\n+                    return true;\n             }\n+\n+            return false;\n         });\n     }\n \n@@ -460,16 +447,14 @@ public void testJoinWhileDeactivate1_Client() throws Exception {\n     private void joinWhileDeactivate1(final boolean startClient, final boolean withNewCache) throws Exception {\n         IgniteInternalFuture<?> activeFut = startNodesAndBlockStatusChange(2, 0, 0, true);\n \n-        IgniteInternalFuture<?> startFut = GridTestUtils.runAsync(new Callable<Void>() {\n-            @Override public Void call() throws Exception {\n-                client = startClient;\n+        IgniteInternalFuture<?> startFut = GridTestUtils.runAsync((Callable<Void>)() -> {\n+            client = startClient;\n \n-                ccfgs = withNewCache ? cacheConfigurations2() : cacheConfigurations1();\n+            ccfgs = withNewCache ? cacheConfigurations2() : cacheConfigurations1();\n \n-                startGrid(2);\n+            startGrid(2);\n \n-                return null;\n-            }\n+            return null;\n         });\n \n         TestRecordingCommunicationSpi spi1 = TestRecordingCommunicationSpi.spi(ignite(1));\n@@ -481,7 +466,7 @@ private void joinWhileDeactivate1(final boolean startClient, final boolean withN\n \n         checkNoCaches(3);\n \n-        ignite(2).active(true);\n+        ignite(2).cluster().active(true);\n \n         for (int c = 0; c < 2; c++)\n             checkCache(ignite(2), CACHE_NAME_PREFIX + c, true);\n@@ -529,30 +514,26 @@ public void testConcurrentJoinAndActivate() throws Exception {\n \n             final CyclicBarrier b = new CyclicBarrier(START_NODES + 1);\n \n-            IgniteInternalFuture<?> fut1 = GridTestUtils.runAsync(new Callable<Void>() {\n-                @Override public Void call() throws Exception {\n-                    b.await();\n+            IgniteInternalFuture<Void> fut1 = GridTestUtils.runAsync(() -> {\n+                b.await();\n \n-                    Thread.sleep(ThreadLocalRandom.current().nextLong(100) + 1);\n+                U.sleep(ThreadLocalRandom.current().nextLong(100) + 1);\n \n-                    ignite(0).active(true);\n+                ignite(0).cluster().active(true);\n \n-                    return null;\n-                }\n+                return null;\n             });\n \n             final AtomicInteger nodeIdx = new AtomicInteger(3);\n \n-            IgniteInternalFuture<?> fut2 = GridTestUtils.runMultiThreadedAsync(new Callable<Void>() {\n-                @Override public Void call() throws Exception {\n-                    int idx = nodeIdx.getAndIncrement();\n+            IgniteInternalFuture<Long> fut2 = GridTestUtils.runMultiThreadedAsync((Callable<Void>)() -> {\n+                int idx = nodeIdx.getAndIncrement();\n \n-                    b.await();\n+                b.await();\n \n-                    startGrid(idx);\n+                startGrid(idx);\n \n-                    return null;\n-                }\n+                return null;\n             }, START_NODES, \"start-node\");\n \n             fut1.get();\n@@ -619,19 +600,19 @@ private void deactivateSimple(int srvs, int clients, int deactivateFrom) throws\n         }\n \n         if (persistenceEnabled())\n-            ignite(deactivateFrom).active(true);\n+            ignite(deactivateFrom).cluster().active(true);\n \n-        ignite(deactivateFrom).active(true); // Should be no-op.\n+        ignite(deactivateFrom).cluster().active(true); // Should be no-op.\n \n         checkCaches(srvs + clients, CACHES);\n \n         for (int i = 0; i < srvs + clients; i++)\n-            assertTrue(ignite(i).active());\n+            assertTrue(ignite(i).cluster().active());\n \n-        ignite(deactivateFrom).active(false);\n+        ignite(deactivateFrom).cluster().active(false);\n \n         for (int i = 0; i < srvs + clients; i++)\n-            assertFalse(ignite(i).active());\n+            assertFalse(ignite(i).cluster().active());\n \n         checkNoCaches(srvs + clients);\n \n@@ -648,12 +629,12 @@ private void deactivateSimple(int srvs, int clients, int deactivateFrom) throws\n         checkNoCaches(srvs + clients + 2);\n \n         for (int i = 0; i < srvs + clients + 2; i++)\n-            assertFalse(ignite(i).active());\n+            assertFalse(ignite(i).cluster().active());\n \n-        ignite(deactivateFrom).active(true);\n+        ignite(deactivateFrom).cluster().active(true);\n \n         for (int i = 0; i < srvs + clients + 2; i++) {\n-            assertTrue(ignite(i).active());\n+            assertTrue(ignite(i).cluster().active());\n \n             checkCache(ignite(i), CU.UTILITY_CACHE_NAME, true);\n         }\n@@ -695,7 +676,7 @@ public void testClientReconnectClusterActive() throws Exception {\n         startWithCaches1(SRVS, CLIENTS);\n \n         if (persistenceEnabled())\n-            ignite(0).active(true);\n+            ignite(0).cluster().active(true);\n \n         Ignite srv = ignite(0);\n         Ignite client = ignite(SRVS);\n@@ -741,7 +722,7 @@ public void testClientReconnectClusterInactive() throws Exception {\n \n         checkNoCaches(SRVS + CLIENTS);\n \n-        ignite(0).active(true);\n+        ignite(0).cluster().active(true);\n \n         checkCache(client, CU.UTILITY_CACHE_NAME, true);\n \n@@ -789,39 +770,38 @@ private void clientReconnectClusterDeactivated(final boolean transition) throws\n         IgniteEx client = grid(SRVS);\n \n         if (persistenceEnabled())\n-            ignite(0).active(true);\n+            ignite(0).cluster().active(true);\n \n         checkCache(client, CU.UTILITY_CACHE_NAME, true);\n \n         checkCaches1(SRVS + CLIENTS);\n \n+        // Wait for late affinity assignment to finish.\n+        grid(0).context().cache().context().exchange().affinityReadyFuture(\n+            new AffinityTopologyVersion(SRVS + CLIENTS, 1)).get();\n+\n         final AffinityTopologyVersion STATE_CHANGE_TOP_VER = new AffinityTopologyVersion(SRVS + CLIENTS + 1, 1);\n \n         final TestRecordingCommunicationSpi spi1 = transition ? TestRecordingCommunicationSpi.spi(ignite(1)) : null;\n \n         final AtomicReference<IgniteInternalFuture> stateFut = new AtomicReference<>();\n \n-        IgniteClientReconnectAbstractTest.reconnectClientNode(log, client, srv, new Runnable() {\n-            @Override public void run() {\n-                if (transition) {\n-                    blockExchangeSingleMessage(spi1, STATE_CHANGE_TOP_VER);\n-\n-                    stateFut.set(GridTestUtils.runAsync(new Runnable() {\n-                        @Override public void run() {\n-                            srv.active(false);\n-                        }\n-                    }, \"deactivate\"));\n-\n-                    try {\n-                        U.sleep(500);\n-                    }\n-                    catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n+        IgniteClientReconnectAbstractTest.reconnectClientNode(log, client, srv, () -> {\n+            if (transition) {\n+                blockExchangeSingleMessage(spi1, STATE_CHANGE_TOP_VER);\n+\n+                stateFut.set(GridTestUtils.runAsync(() -> srv.cluster().active(false),\n+                    \"deactivate\"));\n+\n+                try {\n+                    U.sleep(500);\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n                 }\n-                else\n-                    srv.active(false);\n             }\n+            else\n+                srv.cluster().active(false);\n         });\n \n         if (transition) {\n@@ -839,11 +819,11 @@ private void clientReconnectClusterDeactivated(final boolean transition) throws\n \n         checkNoCaches(SRVS + CLIENTS);\n \n-        ignite(0).active(true);\n+        ignite(0).cluster().active(true);\n \n         checkCache(client, CU.UTILITY_CACHE_NAME, true);\n \n-        assertTrue(client.active());\n+        assertTrue(client.cluster().active());\n \n         checkCaches1(SRVS + CLIENTS);\n \n@@ -900,27 +880,22 @@ private void clientReconnectClusterActivated(final boolean transition) throws Ex\n \n         final AtomicReference<IgniteInternalFuture> stateFut = new AtomicReference<>();\n \n-        IgniteClientReconnectAbstractTest.reconnectClientNode(log, client, srv, new Runnable() {\n-            @Override public void run() {\n-                if (transition) {\n-                    blockExchangeSingleMessage(spi1, STATE_CHANGE_TOP_VER);\n-\n-                    stateFut.set(GridTestUtils.runAsync(new Runnable() {\n-                        @Override public void run() {\n-                            srv.active(true);\n-                        }\n-                    }, \"activate\"));\n-\n-                    try {\n-                        U.sleep(500);\n-                    }\n-                    catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n+        IgniteClientReconnectAbstractTest.reconnectClientNode(log, client, srv, () -> {\n+            if (transition) {\n+                blockExchangeSingleMessage(spi1, STATE_CHANGE_TOP_VER);\n+\n+                stateFut.set(GridTestUtils.runAsync(() -> srv.cluster().active(true),\n+                    \"activate\"));\n+\n+                try {\n+                    U.sleep(500);\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n                 }\n-                else\n-                    srv.active(true);\n             }\n+            else\n+                srv.cluster().active(true);\n         });\n \n         if (transition) {\n@@ -989,7 +964,7 @@ public void testInactiveTopologyChanges() throws Exception {\n \n         checkRecordedMessages(false);\n \n-        ignite(0).active(true);\n+        ignite(0).cluster().active(true);\n \n         checkCaches1(SRVS + CLIENTS);\n \n@@ -1033,12 +1008,10 @@ private void stateChangeFailover1(boolean activate) throws Exception {\n         client = false;\n \n         // Start one more node while transition is in progress.\n-        IgniteInternalFuture startFut = GridTestUtils.runAsync(new Callable() {\n-            @Override public Object call() throws Exception {\n-                startGrid(8);\n+        IgniteInternalFuture<Void> startFut = GridTestUtils.runAsync(() -> {\n+            startGrid(8);\n \n-                return null;\n-            }\n+            return null;\n         }, \"start-node\");\n \n         U.sleep(500);\n@@ -1061,7 +1034,7 @@ private void stateChangeFailover1(boolean activate) throws Exception {\n         if (!activate) {\n             checkNoCaches(9);\n \n-            ignite(0).active(true);\n+            ignite(0).cluster().active(true);\n         }\n \n         checkCaches1(9);\n@@ -1092,19 +1065,16 @@ private void stateChangeFailover2(boolean activate) throws Exception {\n         client = false;\n \n         // Start more nodes while transition is in progress.\n-        IgniteInternalFuture startFut1 = GridTestUtils.runAsync(new Callable() {\n-            @Override public Object call() throws Exception {\n-                startGrid(8);\n+        IgniteInternalFuture<Void> startFut1 = GridTestUtils.runAsync(() -> {\n+            startGrid(8);\n \n-                return null;\n-            }\n+            return null;\n         }, \"start-node1\");\n-        IgniteInternalFuture startFut2 = GridTestUtils.runAsync(new Callable() {\n-            @Override public Object call() throws Exception {\n-                startGrid(9);\n \n-                return null;\n-            }\n+        IgniteInternalFuture<Void> startFut2 = GridTestUtils.runAsync(() -> {\n+            startGrid(9);\n+\n+            return null;\n         }, \"start-node2\");\n \n         U.sleep(500);\n@@ -1132,7 +1102,7 @@ private void stateChangeFailover2(boolean activate) throws Exception {\n         if (!activate) {\n             checkNoCaches(10);\n \n-            ignite(0).active(true);\n+            ignite(0).cluster().active(true);\n         }\n \n         checkCaches1(10);\n@@ -1214,7 +1184,7 @@ void checkCache(Ignite node, String cacheName, boolean exp) throws IgniteChecked\n \n         ((IgniteEx)node).context().state().publicApiActiveState(true);\n \n-        GridCacheAdapter cache = ((IgniteKernal)node).context().cache().internalCache(cacheName);\n+        GridCacheAdapter cache = ((IgniteEx)node).context().cache().internalCache(cacheName);\n \n         if (exp)\n             assertNotNull(\"Cache not found [cache=\" + cacheName + \", node=\" + node.name() + ']', cache);\n@@ -1229,7 +1199,7 @@ final void checkNoCaches(int nodes) {\n         for (int i = 0; i < nodes; i++) {\n             grid(i).context().state().publicApiActiveState(true);\n \n-            GridCacheProcessor cache = ((IgniteKernal)ignite(i)).context().cache();\n+            GridCacheProcessor cache = ((IgniteEx)ignite(i)).context().cache();\n \n             assertTrue(cache.caches().isEmpty());\n             assertTrue(cache.internalCaches().isEmpty());",
                "deletions": 126
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#gg-10186: NullPointerException at CacheDrStateTransferHandler.java:320\n#gg-10187: NullPointerException at GridEntSecurityProcessor.java:263",
        "commit": "https://github.com/apache/ignite/commit/587103fdd1273e1d98897a07f98594dac85e38bc",
        "parent": "https://github.com/apache/ignite/commit/99c7e228d12e25826f74d6d8706d158ec36004ed",
        "bug_id": "ignite_54",
        "file": [
            {
                "sha": "d22d2244ac779e23b214c29b9e6128e7dce15a67",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 109,
                "additions": 63,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=587103fdd1273e1d98897a07f98594dac85e38bc",
                "patch": "@@ -124,6 +124,9 @@\n     /** Must use JDK marshaller since it is used by discovery to fire custom events. */\n     private Marshaller marshaller = new JdkMarshaller();\n \n+    /** Count down latch for caches. */\n+    private final CountDownLatch cacheStartedLatch = new CountDownLatch(1);\n+\n     /**\n      * @param ctx Kernal context.\n      */\n@@ -657,87 +660,92 @@ else if (internalCaches.contains(maskNull(cfg.getName())))\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"unchecked\")\n     @Override public void onKernalStart() throws IgniteCheckedException {\n-        if (ctx.config().isDaemon())\n-            return;\n+        try {\n+            if (ctx.config().isDaemon())\n+                return;\n \n-        ClusterNode locNode = ctx.discovery().localNode();\n+            ClusterNode locNode = ctx.discovery().localNode();\n \n-        // Init cache plugin managers.\n-        final Map<String, CachePluginManager> cache2PluginMgr = new HashMap<>();\n+            // Init cache plugin managers.\n+            final Map<String, CachePluginManager> cache2PluginMgr = new HashMap<>();\n \n-        for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n-            CacheConfiguration locCcfg = desc.cacheConfiguration();\n+            for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n+                CacheConfiguration locCcfg = desc.cacheConfiguration();\n \n-            CachePluginManager pluginMgr = new CachePluginManager(ctx, locCcfg);\n+                CachePluginManager pluginMgr = new CachePluginManager(ctx, locCcfg);\n \n-            cache2PluginMgr.put(locCcfg.getName(), pluginMgr);\n-        }\n+                cache2PluginMgr.put(locCcfg.getName(), pluginMgr);\n+            }\n \n-        if (!getBoolean(IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK)) {\n-            for (ClusterNode n : ctx.discovery().remoteNodes()) {\n-                checkTransactionConfiguration(n);\n+            if (!getBoolean(IGNITE_SKIP_CONFIGURATION_CONSISTENCY_CHECK)) {\n+                for (ClusterNode n : ctx.discovery().remoteNodes()) {\n+                    checkTransactionConfiguration(n);\n \n-                DeploymentMode locDepMode = ctx.config().getDeploymentMode();\n-                DeploymentMode rmtDepMode = n.attribute(IgniteNodeAttributes.ATTR_DEPLOYMENT_MODE);\n+                    DeploymentMode locDepMode = ctx.config().getDeploymentMode();\n+                    DeploymentMode rmtDepMode = n.attribute(IgniteNodeAttributes.ATTR_DEPLOYMENT_MODE);\n \n-                CU.checkAttributeMismatch(log, null, n.id(), \"deploymentMode\", \"Deployment mode\",\n-                    locDepMode, rmtDepMode, true);\n+                    CU.checkAttributeMismatch(log, null, n.id(), \"deploymentMode\", \"Deployment mode\",\n+                        locDepMode, rmtDepMode, true);\n \n-                for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n-                    CacheConfiguration rmtCfg = desc.remoteConfiguration(n.id());\n+                    for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n+                        CacheConfiguration rmtCfg = desc.remoteConfiguration(n.id());\n \n-                    if (rmtCfg != null) {\n-                        CacheConfiguration locCfg = desc.cacheConfiguration();\n+                        if (rmtCfg != null) {\n+                            CacheConfiguration locCfg = desc.cacheConfiguration();\n \n-                        checkCache(locCfg, rmtCfg, n);\n+                            checkCache(locCfg, rmtCfg, n);\n \n-                        // Check plugin cache configurations.\n-                        CachePluginManager pluginMgr = cache2PluginMgr.get(locCfg.getName());\n+                            // Check plugin cache configurations.\n+                            CachePluginManager pluginMgr = cache2PluginMgr.get(locCfg.getName());\n \n-                        assert pluginMgr != null : \" Map=\" + cache2PluginMgr;\n+                            assert pluginMgr != null : \" Map=\" + cache2PluginMgr;\n \n-                        pluginMgr.validateRemotes(rmtCfg, n);\n+                            pluginMgr.validateRemotes(rmtCfg, n);\n+                        }\n                     }\n                 }\n             }\n-        }\n \n-        // Start dynamic caches received from collect discovery data.\n-        for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n-            boolean started = desc.onStart();\n+            // Start dynamic caches received from collect discovery data.\n+            for (DynamicCacheDescriptor desc : registeredCaches.values()) {\n+                boolean started = desc.onStart();\n \n-            assert started : \"Failed to change started flag for locally configured cache: \" + desc;\n+                assert started : \"Failed to change started flag for locally configured cache: \" + desc;\n \n-            desc.clearRemoteConfigurations();\n+                desc.clearRemoteConfigurations();\n \n-            CacheConfiguration ccfg = desc.cacheConfiguration();\n+                CacheConfiguration ccfg = desc.cacheConfiguration();\n \n-            IgnitePredicate filter = ccfg.getNodeFilter();\n+                IgnitePredicate filter = ccfg.getNodeFilter();\n \n-            if (filter.apply(locNode)) {\n-                CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(ccfg);\n+                if (filter.apply(locNode)) {\n+                    CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(ccfg);\n \n-                CachePluginManager pluginMgr = cache2PluginMgr.get(ccfg.getName());\n+                    CachePluginManager pluginMgr = cache2PluginMgr.get(ccfg.getName());\n \n-                assert pluginMgr != null : \" Map=\" + cache2PluginMgr;\n+                    assert pluginMgr != null : \" Map=\" + cache2PluginMgr;\n \n-                GridCacheContext ctx = createCache(ccfg, pluginMgr, desc.cacheType(), cacheObjCtx);\n+                    GridCacheContext ctx = createCache(ccfg, pluginMgr, desc.cacheType(), cacheObjCtx);\n \n-                ctx.dynamicDeploymentId(desc.deploymentId());\n+                    ctx.dynamicDeploymentId(desc.deploymentId());\n \n-                sharedCtx.addCacheContext(ctx);\n+                    sharedCtx.addCacheContext(ctx);\n \n-                GridCacheAdapter cache = ctx.cache();\n+                    GridCacheAdapter cache = ctx.cache();\n \n-                String name = ccfg.getName();\n+                    String name = ccfg.getName();\n \n-                caches.put(maskNull(name), cache);\n+                    caches.put(maskNull(name), cache);\n \n-                startCache(cache);\n+                    startCache(cache);\n \n-                jCacheProxies.put(maskNull(name), new IgniteCacheProxy(ctx, cache, null, false));\n+                    jCacheProxies.put(maskNull(name), new IgniteCacheProxy(ctx, cache, null, false));\n+                }\n             }\n         }\n+        finally {\n+            cacheStartedLatch.countDown();\n+        }\n \n         ctx.marshallerContext().onMarshallerCacheStarted(ctx);\n \n@@ -835,6 +843,8 @@ public void blockGateways() {\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"unchecked\")\n     @Override public void onKernalStop(boolean cancel) {\n+        cacheStartedLatch.countDown();\n+\n         if (ctx.config().isDaemon())\n             return;\n \n@@ -958,6 +968,13 @@ private void stopCache(GridCacheAdapter<?, ?> cache, boolean cancel) {\n         cleanup(ctx);\n     }\n \n+    /**\n+     * @throws IgniteCheckedException If failed to wait.\n+     */\n+    public void awaitStarted() throws IgniteCheckedException {\n+        U.await(cacheStartedLatch);\n+    }\n+\n     /**\n      * @param cache Cache.\n      * @throws IgniteCheckedException If failed.",
                "deletions": 46
            },
            {
                "sha": "5859beca97f2322d15ba36db7064d774892fe222",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheGetFromJobTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheGetFromJobTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheGetFromJobTest.java",
                "status": "added",
                "changes": 110,
                "additions": 110,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/CacheGetFromJobTest.java?ref=587103fdd1273e1d98897a07f98594dac85e38bc",
                "patch": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import org.apache.ignite.*;\n+import org.apache.ignite.internal.*;\n+import org.apache.ignite.internal.util.typedef.*;\n+import org.apache.ignite.lang.*;\n+import org.apache.ignite.resources.*;\n+import org.apache.ignite.testframework.*;\n+\n+import java.util.concurrent.atomic.*;\n+\n+/**\n+ * Job tries to get cache during topology change.\n+ */\n+public class CacheGetFromJobTest extends GridCacheAbstractSelfTest {\n+    /** {@inheritDoc} */\n+    @Override protected int gridCount() {\n+        return 1;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testTopologyChange() throws Exception {\n+        final AtomicReference<Exception> err = new AtomicReference<>();\n+\n+        final AtomicInteger id = new AtomicInteger(1);\n+\n+        IgniteInternalFuture<?> fut = GridTestUtils.runMultiThreadedAsync(new CA() {\n+            @Override public void apply() {\n+                info(\"Run topology change.\");\n+\n+                try {\n+                    for (int i = 0; i < 5; i++) {\n+                        info(\"Topology change: \" + i);\n+\n+                        startGrid(id.getAndIncrement());\n+                    }\n+                }\n+                catch (Exception e) {\n+                    err.set(e);\n+\n+                    log.error(\"Unexpected exception in topology-change-thread: \" + e, e);\n+                }\n+            }\n+        }, 3, \"topology-change-thread\");\n+\n+        int cntr = 0;\n+\n+        while (!fut.isDone()) {\n+            grid(0).compute().broadcast(new TestJob());\n+\n+            cntr++;\n+        }\n+\n+        log.info(\"Job execution count: \" + cntr);\n+\n+        Exception err0 = err.get();\n+\n+        if (err0 != null)\n+            throw err0;\n+    }\n+\n+    /**\n+     * Test job.\n+     */\n+    private static class TestJob implements IgniteCallable<Object> {\n+        /** Ignite. */\n+        @IgniteInstanceResource\n+        private Ignite ignite;\n+\n+        /** */\n+        public TestJob() {\n+            // No-op.\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public Object call() throws Exception {\n+            IgniteCache cache = ignite.cache(null);\n+\n+            assertNotNull(cache);\n+\n+            assertEquals(0, cache.localSize());\n+\n+            return null;\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "796d1386ddd3b305c12151b95b31ada664047bf4",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheRestartTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheRestartTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/587103fdd1273e1d98897a07f98594dac85e38bc/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheRestartTestSuite.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheRestartTestSuite.java?ref=587103fdd1273e1d98897a07f98594dac85e38bc",
                "patch": "@@ -48,6 +48,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(IgniteCacheAtomicPutAllFailoverSelfTest.class);\n         suite.addTestSuite(IgniteCachePutAllRestartTest.class);\n         suite.addTestSuite(GridCachePutAllFailoverSelfTest.class);\n+        suite.addTestSuite(CacheGetFromJobTest.class);\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7471 fix npe",
        "commit": "https://github.com/apache/ignite/commit/46fdd6a224edd8b34e25b51bfae524fd1bf18a8b",
        "parent": "https://github.com/apache/ignite/commit/cb1233a03f8b58a0834dd22a2319fab084a3f04b",
        "bug_id": "ignite_55",
        "file": [
            {
                "sha": "580fb3a268f6327fbab778ad1e24d7ac0d3294f6",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/46fdd6a224edd8b34e25b51bfae524fd1bf18a8b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/46fdd6a224edd8b34e25b51bfae524fd1bf18a8b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=46fdd6a224edd8b34e25b51bfae524fd1bf18a8b",
                "patch": "@@ -1537,13 +1537,18 @@ private void restoreState() throws IgniteCheckedException {\n     ) {\n         final Map<Integer, Map<Integer, CheckpointEntry>> res = new HashMap<>();\n \n+        if (F.isEmpty(part4reserve))\n+            return res;\n+\n         for (Long cpTs : checkpointHist.checkpoints()) {\n+            CheckpointEntry chpEntry = null;\n+\n             try {\n-                final CheckpointEntry chpEntry = checkpointHist.entry(cpTs);\n+                chpEntry = checkpointHist.entry(cpTs);\n \n                 Map<Integer, CheckpointEntry.GroupState> grpsState = chpEntry.groupState(cctx);\n \n-                if (grpsState.isEmpty()){\n+                if (F.isEmpty(grpsState)) {\n                     res.clear();\n \n                     continue;\n@@ -1579,7 +1584,12 @@ private void restoreState() throws IgniteCheckedException {\n                     }\n                 }\n             }\n-            catch (IgniteCheckedException ignore) {\n+            catch (IgniteCheckedException ex) {\n+                String msg = chpEntry != null ?\n+                    \", chpId=\" + chpEntry.cpId + \" ptr=\" + chpEntry.cpMark + \" ts=\" + chpEntry.cpTs : \"\";\n+\n+                U.error(log, \"Failed to read checkpoint entry\" + msg, ex);\n+\n                 // Treat exception the same way as a gap.\n                 res.clear();\n             }\n@@ -3849,10 +3859,10 @@ private int indexByPartition(int partId) {\n                 AtomicIntegerFieldUpdater.newUpdater(GroupStateLazyStore.class, \"initGuard\");\n \n             /** Cache states. Initialized lazily. */\n-            private Map<Integer, GroupState> grpStates;\n+            private volatile Map<Integer, GroupState> grpStates;\n \n             /** */\n-            private volatile CountDownLatch latch;\n+            private final CountDownLatch latch;\n \n             /** */\n             @SuppressWarnings(\"unused\")\n@@ -3920,7 +3930,7 @@ private GroupStateLazyStore(Map<Integer, CacheState> cacheGrpStates) {\n             private Long partitionCounter(int grpId, int part) {\n                 assert initGuard != 0 : initGuard;\n \n-                if (initEx != null)\n+                if (initEx != null || grpStates == null)\n                     return null;\n \n                 GroupState state = grpStates.get(grpId);\n@@ -3963,6 +3973,8 @@ private void initIfNeeded(\n                     }\n                     catch (IgniteCheckedException e) {\n                         initEx = e;\n+\n+                        throw e;\n                     }\n                     finally {\n                         latch.countDown();",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8915: NPE during executing local SqlQuery from client node. - Fixes #4378.\n\nSigned-off-by: Nikolay Izhikov <nizhikov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/8633d34ec7542cda739ad38448955ac09238006c",
        "parent": "https://github.com/apache/ignite/commit/26e405281792d38b5505cde22b5c6a91749c4990",
        "bug_id": "ignite_56",
        "file": [
            {
                "sha": "688f293cf1df96ed38c608a693e776bb0add149a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/8633d34ec7542cda739ad38448955ac09238006c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/8633d34ec7542cda739ad38448955ac09238006c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxyImpl.java?ref=8633d34ec7542cda739ad38448955ac09238006c",
                "patch": "@@ -755,6 +755,9 @@ private void validate(Query qry) {\n             (qry instanceof SqlQuery || qry instanceof SqlFieldsQuery || qry instanceof TextQuery))\n             throw new CacheException(\"Failed to execute query. Add module 'ignite-indexing' to the classpath \" +\n                     \"of all Ignite nodes.\");\n+\n+        if (qry.isLocal() && (qry instanceof SqlQuery) && ctx.kernalContext().clientNode())\n+            throw new CacheException(\"Execution of local sql query on client node disallowed.\");\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 0
            },
            {
                "sha": "bd3dffdbded4b3a2d7f9530374519ae54a7bd134",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/distributed/replicated/IgniteCacheReplicatedQuerySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/8633d34ec7542cda739ad38448955ac09238006c/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/distributed/replicated/IgniteCacheReplicatedQuerySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/8633d34ec7542cda739ad38448955ac09238006c/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/distributed/replicated/IgniteCacheReplicatedQuerySelfTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/distributed/replicated/IgniteCacheReplicatedQuerySelfTest.java?ref=8633d34ec7542cda739ad38448955ac09238006c",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n import javax.cache.Cache;\n+import javax.cache.CacheException;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteException;\n@@ -52,6 +53,7 @@\n import static org.apache.ignite.cache.CacheMode.REPLICATED;\n import static org.apache.ignite.cache.CachePeekMode.ALL;\n import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause;\n \n /**\n  * Tests replicated query.\n@@ -160,6 +162,31 @@ public void testClientOnlyNode() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testClientsLocalQuery() throws Exception {\n+        try {\n+            Ignite g = startGrid(\"client\");\n+\n+            IgniteCache<Integer, Integer> c = jcache(g, Integer.class, Integer.class);\n+\n+            for (int i = 0; i < 10; i++)\n+                c.put(i, i);\n+\n+            assertEquals(0, c.localSize());\n+\n+            SqlQuery<Integer, Integer> qry = new SqlQuery<>(Integer.class, \"_key >= 5 order by _key\");\n+\n+            qry.setLocal(true);\n+\n+            assertThrowsWithCause(() -> c.query(qry), CacheException.class);\n+        }\n+        finally {\n+            stopGrid(\"client\");\n+        }\n+    }\n+\n     /**\n      * JUnit.\n      *",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8147: SQL: fixed NPE during DELETE statement execution.",
        "commit": "https://github.com/apache/ignite/commit/1dded3ae8fe21bc25f09d597b808ce409271cd42",
        "parent": "https://github.com/apache/ignite/commit/54096d7c6dfe97db833960e783c18be9b15dcb55",
        "bug_id": "ignite_57",
        "file": [
            {
                "sha": "f194423320737ab86b467f6ec9d490799b2e5053",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/1dded3ae8fe21bc25f09d597b808ce409271cd42/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/1dded3ae8fe21bc25f09d597b808ce409271cd42/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java?ref=1dded3ae8fe21bc25f09d597b808ce409271cd42",
                "patch": "@@ -1841,6 +1841,10 @@ public KeyCacheObject toCacheKeyObject(byte[] bytes) throws IgniteCheckedExcepti\n      * @throws IgniteCheckedException, If validation fails.\n      */\n     public void validateKeyAndValue(KeyCacheObject key, CacheObject val) throws IgniteCheckedException {\n+        // No validation for removal.\n+        if (val == null)\n+            return;\n+\n         if (!isQueryEnabled())\n             return;\n ",
                "deletions": 0
            },
            {
                "sha": "74dabe9a1f7dda4a3667321a388e1894289ea5b4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "blob_url": "https://github.com/apache/ignite/blob/1dded3ae8fe21bc25f09d597b808ce409271cd42/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "raw_url": "https://github.com/apache/ignite/raw/1dded3ae8fe21bc25f09d597b808ce409271cd42/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java?ref=1dded3ae8fe21bc25f09d597b808ce409271cd42",
                "patch": "@@ -1489,8 +1489,7 @@ else if (ttl == CU.TTL_NOT_CHANGED)\n \n                         updated = cctx.toCacheObject(updated0);\n \n-                        if (updated != null) // no validation for remove case\n-                            cctx.validateKeyAndValue(key, updated);\n+                        cctx.validateKeyAndValue(key, updated);\n                     }\n                     else\n                         updated = old;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-9422 Fixed NPE on clients when new binary meta from joined node arrived. - Fixes #4681.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/19c990ce58825f7c39deb4f524b7a60b328e286c",
        "parent": "https://github.com/apache/ignite/commit/7f22f08f7db0f45a5cde97307c68fc81cb6eb26c",
        "bug_id": "ignite_58",
        "file": [
            {
                "sha": "4c101b290fd54f613b7b617ad1368d85565ed0df",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/binary/CacheObjectBinaryProcessorImpl.java?ref=19c990ce58825f7c39deb4f524b7a60b328e286c",
                "patch": "@@ -492,7 +492,8 @@ public GridBinaryMarshaller marshaller() {\n         try {\n             BinaryMetadata mergedMeta = BinaryUtils.mergeMetadata(oldMeta, newMeta0);\n \n-            metadataFileStore.mergeAndWriteMetadata(mergedMeta);\n+            if (!ctx.clientNode())\n+                metadataFileStore.mergeAndWriteMetadata(mergedMeta);\n \n             metadataLocCache.put(typeId, new BinaryMetadataHolder(mergedMeta, 0, 0));\n         }\n@@ -1016,7 +1017,8 @@ private IgniteNodeValidationResult validateBinaryMetadata(UUID rmtNodeId, Map<In\n                             localMetaHolder.pendingVersion(),\n                             localMetaHolder.acceptedVersion()));\n \n-                    metadataFileStore.writeMetadata(mergedMeta);\n+                    if (!ctx.clientNode())\n+                        metadataFileStore.writeMetadata(mergedMeta);\n                 }\n             }\n             else {\n@@ -1032,7 +1034,8 @@ private IgniteNodeValidationResult validateBinaryMetadata(UUID rmtNodeId, Map<In\n \n                 metadataLocCache.put(metaEntry.getKey(), newMetaHolder);\n \n-                metadataFileStore.writeMetadata(newMeta);\n+                if (!ctx.clientNode())\n+                    metadataFileStore.writeMetadata(newMeta);\n             }\n         }\n     }",
                "deletions": 3
            },
            {
                "sha": "279d3c8c4e62090b5225fe1019f1ce0557e4fee9",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest.java",
                "status": "added",
                "changes": 125,
                "additions": 125,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest.java?ref=19c990ce58825f7c39deb4f524b7a60b328e286c",
                "patch": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence;\n+\n+import java.util.Arrays;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.lang.IgniteBiTuple;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ *\n+ */\n+public class IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        if (\"client\".equals(igniteInstanceName))\n+            cfg.setClientMode(true).setFailureHandler(new StopNodeFailureHandler());\n+\n+        return cfg.setDiscoverySpi(new TcpDiscoverySpi()\n+                .setIpFinder(IP_FINDER))\n+                .setDataStorageConfiguration(new DataStorageConfiguration()\n+                        .setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n+                                .setPersistenceEnabled(true)));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * Tests that joining node metadata correctly handled on client.\n+     * @throws Exception If fails.\n+     */\n+    public void testJoiningNodeBinaryMetaOnClient() throws Exception {\n+        IgniteEx ig0 = (IgniteEx)startGrids(2);\n+\n+        ig0.cluster().active(true);\n+\n+        addBinaryType(ig0, \"test_1\", new IgniteBiTuple<>(\"name\", String.class));\n+\n+        stopGrid(0);\n+\n+        Ignite ig1 = grid(1);\n+\n+        // Modify existing type.\n+        addBinaryType(ig1, \"test_1\", new IgniteBiTuple<>(\"id\", Integer.class));\n+\n+        // Add new type.\n+        addBinaryType(ig1, \"test_2\", new IgniteBiTuple<>(\"name\", String.class));\n+\n+        stopGrid(1);\n+\n+        startGrid(0);\n+\n+        IgniteEx client = startGrid(getConfiguration(\"client\"));\n+\n+        startGrid(1);\n+\n+        awaitPartitionMapExchange();\n+\n+        // Check that new metadata from grid_1 was handled without NPE on client.\n+        assertNull(client.context().failure().failureContext());\n+\n+        // Check that metadata from grid_1 correctly loaded on client.\n+        assertTrue(client.binary().type(\"test_1\").fieldNames().containsAll(Arrays.asList(\"id\", \"name\")));\n+        assertTrue(client.binary().type(\"test_2\").fieldNames().contains(\"name\"));\n+    }\n+\n+    /**\n+     * @param ig Ig.\n+     * @param typeName Type name.\n+     * @param fields Fields.\n+     */\n+    @SafeVarargs\n+    private final BinaryObject addBinaryType(Ignite ig, String typeName, IgniteBiTuple<String, Class<?>>... fields) {\n+        BinaryObjectBuilder builder = ig.binary().builder(typeName);\n+\n+        if (fields != null) {\n+            for (IgniteBiTuple<String,Class<?>> field: fields)\n+                builder.setField(field.get1(), field.get2());\n+        }\n+\n+        return builder.build();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "9f50b328916b1e613951fee7923ad3db01f17e84",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/19c990ce58825f7c39deb4f524b7a60b328e286c/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java?ref=19c990ce58825f7c39deb4f524b7a60b328e286c",
                "patch": "@@ -20,6 +20,7 @@\n import junit.framework.TestSuite;\n import org.apache.ignite.internal.pagemem.impl.PageMemoryNoLoadSelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteClusterActivateDeactivateTestWithPersistence;\n+import org.apache.ignite.internal.processors.cache.persistence.IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest;\n import org.apache.ignite.internal.processors.cache.persistence.IgnitePdsDestroyCacheTest;\n import org.apache.ignite.internal.processors.cache.persistence.IgnitePdsDestroyCacheWithoutCheckpointsTest;\n import org.apache.ignite.internal.processors.cache.persistence.IgnitePdsCacheConfigurationFileConsistencyCheckTest;\n@@ -95,6 +96,9 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(ExplicitWalDeltaConsistencyTest.class);\n         suite.addTestSuite(SysPropWalDeltaConsistencyTest.class);\n \n+        // Binary meta tests.\n+        suite.addTestSuite(IgnitePdsCacheObjectBinaryProcessorOnDiscoveryTest.class);\n+\n         return suite;\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6815 NPE when using expiry policy: storeLoadedVal needs to be set at each branch of these conditionals or NPE in inevitible. - Fixes #3726.\n\nSigned-off-by: dpavlov <dpavlov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/28304fdb5984eb426fbf6c20a71c2072a3339c6a",
        "parent": "https://github.com/apache/ignite/commit/4b7ce965ddc02df6dce272a7f02fa844cfd0af35",
        "bug_id": "ignite_59",
        "file": [
            {
                "sha": "bc0e9540775bafd66bdb9d01dcfc7b116cfc6e06",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "blob_url": "https://github.com/apache/ignite/blob/28304fdb5984eb426fbf6c20a71c2072a3339c6a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "raw_url": "https://github.com/apache/ignite/raw/28304fdb5984eb426fbf6c20a71c2072a3339c6a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java?ref=28304fdb5984eb426fbf6c20a71c2072a3339c6a",
                "patch": "@@ -4708,6 +4708,7 @@ else if (updateExpireTime && expiryPlc != null && entry.val != null){\n                         expiryPlc.ttlUpdated(entry.key, entry.ver, null);\n \n                         needUpdate = true;\n+                        storeLoadedVal = entry.val;\n                     }\n                 }\n             }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8806: SQL: Fixed NPE in GridH2ProxyIndex when underlying index doesn't support lookup batches. This closes #4193.",
        "commit": "https://github.com/apache/ignite/commit/fe336fc647ba61b1bcbada789c0414bdfdb1c113",
        "parent": "https://github.com/apache/ignite/commit/e1963d1a2ae3bfc82efc04457960d1694e90ee16",
        "bug_id": "ignite_60",
        "file": [
            {
                "sha": "95a253bda6f10df87a24695570370d68840bc4f8",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ProxyIndex.java",
                "blob_url": "https://github.com/apache/ignite/blob/fe336fc647ba61b1bcbada789c0414bdfdb1c113/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ProxyIndex.java",
                "raw_url": "https://github.com/apache/ignite/raw/fe336fc647ba61b1bcbada789c0414bdfdb1c113/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ProxyIndex.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2ProxyIndex.java?ref=fe336fc647ba61b1bcbada789c0414bdfdb1c113",
                "patch": "@@ -152,7 +152,9 @@ public Index underlyingIndex() {\n \n     /** {@inheritDoc} */\n     @Override public IndexLookupBatch createLookupBatch(TableFilter[] filters, int filter) {\n-        return new ProxyIndexLookupBatch(idx.createLookupBatch(filters, filter));\n+        IndexLookupBatch batch = idx.createLookupBatch(filters, filter);\n+\n+        return batch != null ? new ProxyIndexLookupBatch(batch) : null;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8311 IgniteClientRejoinTest.testClientsReconnectDisabled causes exchange-worker to terminate via NPE\n\nSigned-off-by: Andrey Gura <agura@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/1adbc44d1b5d22616a42190082a5f0a24624c074",
        "parent": "https://github.com/apache/ignite/commit/ecca4ca252e0d8d9cd5123ca039bc2a8d9d3137f",
        "bug_id": "ignite_61",
        "file": [
            {
                "sha": "3a990892bfe8d6b2e325ca05f4f6ef9d387e3d84",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -2358,7 +2358,7 @@ else if (err != null)\n         /**\n          *\n          */\n-        private void body0() throws InterruptedException, IgniteInterruptedCheckedException {\n+        private void body0() throws InterruptedException, IgniteCheckedException {\n             long timeout = cctx.gridConfig().getNetworkTimeout();\n \n             long cnt = 0;\n@@ -2662,6 +2662,8 @@ else if (r != null) {\n                 catch (IgniteCheckedException e) {\n                     U.error(log, \"Failed to wait for completion of partition map exchange \" +\n                         \"(preloading will not start): \" + task, e);\n+\n+                    throw e;\n                 }\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "8d56ced75f2cca11e5c8884646615f907ea8b3ae",
                "filename": "modules/core/src/test/java/org/apache/ignite/failure/FailureHandlerTriggeredTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/failure/FailureHandlerTriggeredTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/failure/FailureHandlerTriggeredTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/failure/FailureHandlerTriggeredTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -19,7 +19,6 @@\n \n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n-import org.apache.ignite.Ignite;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.managers.discovery.DiscoveryCustomMessage;\n import org.apache.ignite.internal.processors.cache.CachePartitionExchangeWorkerTask;\n@@ -66,40 +65,6 @@ public void testFailureHandlerTriggeredOnExchangeWorkerTermination() throws Exce\n         }\n     }\n \n-    /**\n-     * Test failure handler implementation\n-     */\n-    private class TestFailureHandler implements FailureHandler {\n-        /** Invalidate. */\n-        private final boolean invalidate;\n-\n-        /** Latch. */\n-        private final CountDownLatch latch;\n-\n-        /** Failure context. */\n-        volatile FailureContext failureCtx;\n-\n-        /**\n-         * @param invalidate Invalidate.\n-         * @param latch Latch.\n-         */\n-        TestFailureHandler(boolean invalidate, CountDownLatch latch) {\n-            this.invalidate = invalidate;\n-            this.latch = latch;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n-            this.failureCtx = failureCtx;\n-\n-            this.latch.countDown();\n-\n-            ignite.log().warning(\"Handled ignite failure: \" + failureCtx);\n-\n-            return invalidate;\n-        }\n-    }\n-\n     /**\n      * Custom exchange worker task implementation for delaying exchange worker processing.\n      */",
                "deletions": 35
            },
            {
                "sha": "1159683e6b54f5045d62accb9afc3dffd00e3738",
                "filename": "modules/core/src/test/java/org/apache/ignite/failure/TestFailureHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/failure/TestFailureHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/failure/TestFailureHandler.java",
                "status": "added",
                "changes": 63,
                "additions": 63,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/failure/TestFailureHandler.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.failure;\n+\n+import java.util.concurrent.CountDownLatch;\n+import org.apache.ignite.Ignite;\n+\n+/**\n+ * Test failure handler implementation\n+ */\n+public class TestFailureHandler implements FailureHandler {\n+    /** Invalidate. */\n+    private final boolean invalidate;\n+\n+    /** Latch. */\n+    private final CountDownLatch latch;\n+\n+    /** Failure context. */\n+    volatile FailureContext failureCtx;\n+\n+    /**\n+     * @param invalidate Invalidate.\n+     * @param latch Latch.\n+     */\n+    public TestFailureHandler(boolean invalidate, CountDownLatch latch) {\n+        this.invalidate = invalidate;\n+        this.latch = latch;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n+        this.failureCtx = failureCtx;\n+\n+        if (latch != null)\n+            latch.countDown();\n+\n+        ignite.log().warning(\"Handled ignite failure: \" + failureCtx);\n+\n+        return invalidate;\n+    }\n+\n+    /**\n+     * @return Failure context.\n+     */\n+    public FailureContext failureContext() {\n+        return failureCtx;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "9a98a888aa2cb786dc332939848ea043c5d8dfa4",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/IgniteClientRejoinTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/internal/IgniteClientRejoinTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/internal/IgniteClientRejoinTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/IgniteClientRejoinTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.Random;\n import java.util.concurrent.Callable;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteCheckedException;\n@@ -35,6 +36,7 @@\n import org.apache.ignite.Ignition;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.TestFailureHandler;\n import org.apache.ignite.internal.util.typedef.internal.U;\n import org.apache.ignite.lang.IgniteInClosure;\n import org.apache.ignite.plugin.extensions.communication.Message;\n@@ -282,14 +284,19 @@ public void testClientsReconnectDisabled() throws Exception {\n \n         final int CLIENTS_NUM = 5;\n \n+        final CountDownLatch failureHndLatch = new CountDownLatch(CLIENTS_NUM);\n+\n         for (int i = 0; i < CLIENTS_NUM; i++) {\n             final int idx = i;\n \n             IgniteInternalFuture<Ignite> fut = GridTestUtils.runAsync(new Callable<Ignite>() {\n                 @Override public Ignite call() throws Exception {\n                     latch.await();\n \n-                    return startGrid(\"client\" + idx);\n+                    String igniteInstanceName = \"client\" + idx;\n+\n+                    return startGrid(igniteInstanceName, getConfiguration(igniteInstanceName)\n+                        .setFailureHandler(new TestFailureHandler(true, failureHndLatch)));\n                 }\n             });\n \n@@ -309,6 +316,8 @@ public void testClientsReconnectDisabled() throws Exception {\n             }, IgniteCheckedException.class, null);\n         }\n \n+        assertTrue(failureHndLatch.await(1000, TimeUnit.MILLISECONDS));\n+\n         assertEquals(0, srv1.cluster().forClients().nodes().size());\n         assertEquals(0, srv2.cluster().forClients().nodes().size());\n     }",
                "deletions": 1
            },
            {
                "sha": "9152ab90319dfef2732be868e1664fac6c2b577a",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteChangeGlobalStateTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteChangeGlobalStateTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteChangeGlobalStateTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteChangeGlobalStateTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -543,6 +543,8 @@ public void testFailGetLock() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testActivateAfterFailGetLock() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         Ignite ig1P = primary(0);\n         Ignite ig2P = primary(1);\n         Ignite ig3P = primary(2);",
                "deletions": 0
            },
            {
                "sha": "db0e1bebe80265fa28baec24e7b6ca0a62705b58",
                "filename": "modules/hibernate-4.2/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/hibernate-4.2/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/hibernate-4.2/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hibernate-4.2/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -83,6 +83,8 @@ public void testXmlConfiguration() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testIncorrectBeanConfiguration() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n                 try(Ignite ignite =",
                "deletions": 0
            },
            {
                "sha": "0ffe52ef1176f8480a41ec7603beb7505d0c315e",
                "filename": "modules/hibernate-5.1/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/hibernate-5.1/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/hibernate-5.1/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hibernate-5.1/src/test/java/org/apache/ignite/cache/store/hibernate/CacheHibernateStoreFactorySelfTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -83,6 +83,8 @@ public void testXmlConfiguration() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testIncorrectBeanConfiguration() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n                 try(Ignite ignite =",
                "deletions": 0
            },
            {
                "sha": "2dee617502424deffd6be1da0cccdc42ff72a86e",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlSchemaIndexingTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlSchemaIndexingTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlSchemaIndexingTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlSchemaIndexingTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -87,7 +87,8 @@ private static CacheConfiguration cacheConfig(String name, boolean partitioned,\n      */\n     public void testCaseSensitive() throws Exception {\n         //TODO rewrite with dynamic cache creation, and GRID start in #beforeTest after resolve of\n-        //https://issues.apache.org/jira/browse/IGNITE-1094\n+        //TODO https://issues.apache.org/jira/browse/IGNITE-1094\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n \n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n@@ -117,6 +118,8 @@ public void testCaseSensitive() throws Exception {\n     public void testCustomSchemaMultipleCachesTablesCollision() throws Exception {\n         //TODO: Rewrite with dynamic cache creation, and GRID start in #beforeTest after resolve of\n         //TODO: https://issues.apache.org/jira/browse/IGNITE-1094\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n                 final CacheConfiguration cfg = cacheConfig(\"cache1\", true, Integer.class, Fact.class)",
                "deletions": 1
            },
            {
                "sha": "be2238bd8bf9368dbec50b07258af758263e1bed",
                "filename": "modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStoreFactorySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStoreFactorySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStoreFactorySelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStoreFactorySelfTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -77,6 +77,8 @@ public void testCacheConfiguration() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testIncorrectBeanConfiguration() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         GridTestUtils.assertThrows(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n                 try(Ignite ignite = Ignition.start(\"modules/spring/src/test/config/incorrect-store-cache.xml\")) {",
                "deletions": 0
            },
            {
                "sha": "ba4984d22cab924000545b2de71025a812702803",
                "filename": "modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactorySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactorySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/1adbc44d1b5d22616a42190082a5f0a24624c074/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactorySelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/spring/src/test/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStoreFactorySelfTest.java?ref=1adbc44d1b5d22616a42190082a5f0a24624c074",
                "patch": "@@ -69,6 +69,8 @@ public void testSerializable() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testIncorrectBeanConfiguration() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-1094\");\n+\n         GridTestUtils.assertThrowsAnyCause(log, new Callable<Object>() {\n             @Override public Object call() throws Exception {\n                 try (Ignite ignored = Ignition.start(\"modules/spring/src/test/config/pojo-incorrect-store-cache.xml\")) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8248 Fixed npe in Web Console agent int case of self-signed certificate.",
        "commit": "https://github.com/apache/ignite/commit/8a42f64a38422304f62f263623c4517f469f8ddb",
        "parent": "https://github.com/apache/ignite/commit/56e3f43e8b31d13e3a7cc590208ffe92187ad00d",
        "bug_id": "ignite_62",
        "file": [
            {
                "sha": "385ce08a12289ad959643bcfd06351630d102929",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "blob_url": "https://github.com/apache/ignite/blob/8a42f64a38422304f62f263623c4517f469f8ddb/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "raw_url": "https://github.com/apache/ignite/raw/8a42f64a38422304f62f263623c4517f469f8ddb/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java",
                "status": "modified",
                "changes": 11,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/AgentLauncher.java?ref=8a42f64a38422304f62f263623c4517f469f8ddb",
                "patch": "@@ -32,6 +32,7 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.UnknownHostException;\n+import java.security.cert.X509Certificate;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n@@ -122,18 +123,16 @@\n         return new TrustManager[] {\n             new X509TrustManager() {\n                 /** {@inheritDoc} */\n-                @Override public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n-                    return null;\n+                @Override public X509Certificate[] getAcceptedIssuers() {\n+                    return new X509Certificate[0];\n                 }\n \n                 /** {@inheritDoc} */\n-                @Override public void checkClientTrusted(\n-                    java.security.cert.X509Certificate[] certs, String authType) {\n+                @Override public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                 }\n \n                 /** {@inheritDoc} */\n-                @Override public void checkServerTrusted(\n-                    java.security.cert.X509Certificate[] certs, String authType) {\n+                @Override public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                 }\n             }};\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7983: NPE fixed in transactions\n\nSigned-off-by: Andrey Gura <agura@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/08a700db31604d33959e3b5aa3f709dbf66a878b",
        "parent": "https://github.com/apache/ignite/commit/adaedb44b767da49c4ec6c57c655b13caa3edd35",
        "bug_id": "ignite_63",
        "file": [
            {
                "sha": "fc8a9a3fb2f6cbd75d40e8ef512ac11ced78efec",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java",
                "blob_url": "https://github.com/apache/ignite/blob/08a700db31604d33959e3b5aa3f709dbf66a878b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java",
                "raw_url": "https://github.com/apache/ignite/raw/08a700db31604d33959e3b5aa3f709dbf66a878b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java?ref=08a700db31604d33959e3b5aa3f709dbf66a878b",
                "patch": "@@ -3916,6 +3916,15 @@ public TransactionProxy proxy() {\n                         throw new GridClosureException(e);\n                     }\n \n+                    if (isRollbackOnly()) {\n+                        if (timedOut())\n+                            throw new GridClosureException(new IgniteTxTimeoutCheckedException(\n+                                \"Transaction has been timed out: \" + GridNearTxLocal.this));\n+                        else\n+                            throw new GridClosureException(new IgniteTxRollbackCheckedException(\n+                                \"Transaction has been rolled back: \" + GridNearTxLocal.this));\n+                    }\n+\n                     return map;\n                 }\n             },",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8159 control.sh: Fixed NPE on adding nodes on empty baseline and not active cluster.",
        "commit": "https://github.com/apache/ignite/commit/834869c2ac7897c8891cd1dca537488230191ab6",
        "parent": "https://github.com/apache/ignite/commit/b97b1eec43be60c020adb142503e59735d8e07a2",
        "bug_id": "ignite_64",
        "file": [
            {
                "sha": "721b4b3d7519d54e4559a691a3ce8c9759244d8a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/baseline/VisorBaselineTask.java",
                "blob_url": "https://github.com/apache/ignite/blob/834869c2ac7897c8891cd1dca537488230191ab6/modules/core/src/main/java/org/apache/ignite/internal/visor/baseline/VisorBaselineTask.java",
                "raw_url": "https://github.com/apache/ignite/raw/834869c2ac7897c8891cd1dca537488230191ab6/modules/core/src/main/java/org/apache/ignite/internal/visor/baseline/VisorBaselineTask.java",
                "status": "modified",
                "changes": 24,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/baseline/VisorBaselineTask.java?ref=834869c2ac7897c8891cd1dca537488230191ab6",
                "patch": "@@ -71,10 +71,10 @@ private VisorBaselineTaskResult collect() {\n \n             Collection<? extends BaselineNode> baseline = cluster.currentBaselineTopology();\n \n-            Collection<? extends BaselineNode> servers = cluster.forServers().nodes();\n+            Collection<? extends BaselineNode> srvrs = cluster.forServers().nodes();\n \n-            return new VisorBaselineTaskResult(ignite.active(), cluster.topologyVersion(),\n-                F.isEmpty(baseline) ? null : baseline, servers);\n+            return new VisorBaselineTaskResult(ignite.cluster().active(), cluster.topologyVersion(),\n+                F.isEmpty(baseline) ? null : baseline, srvrs);\n         }\n \n         /**\n@@ -93,12 +93,14 @@ private VisorBaselineTaskResult set0(Collection<BaselineNode> baselineTop) {\n          * @return Current baseline.\n          */\n         private Map<String, BaselineNode> currentBaseLine() {\n-            Collection<BaselineNode> baseline = ignite.cluster().currentBaselineTopology();\n-\n             Map<String, BaselineNode> nodes = new HashMap<>();\n \n-            for (BaselineNode node : baseline)\n-                nodes.put(node.consistentId().toString(), node);\n+            Collection<BaselineNode> baseline = ignite.cluster().currentBaselineTopology();\n+\n+            if (!F.isEmpty(baseline)) {\n+                for (BaselineNode node : baseline)\n+                    nodes.put(node.consistentId().toString(), node);\n+            }\n \n             return nodes;\n         }\n@@ -122,12 +124,12 @@ private VisorBaselineTaskResult set0(Collection<BaselineNode> baselineTop) {\n          * @return New baseline.\n          */\n         private VisorBaselineTaskResult set(List<String> consistentIds) {\n-            Map<String, BaselineNode> servers = currentServers();\n+            Map<String, BaselineNode> srvrs = currentServers();\n \n             Collection<BaselineNode> baselineTop = new ArrayList<>();\n \n             for (String consistentId : consistentIds) {\n-                BaselineNode node = servers.get(consistentId);\n+                BaselineNode node = srvrs.get(consistentId);\n \n                 if (node == null)\n                     throw new IllegalStateException(\"Node not found for consistent ID: \" + consistentId);\n@@ -146,10 +148,10 @@ private VisorBaselineTaskResult set(List<String> consistentIds) {\n          */\n         private VisorBaselineTaskResult add(List<String> consistentIds) {\n             Map<String, BaselineNode> baseline = currentBaseLine();\n-            Map<String, BaselineNode> servers = currentServers();\n+            Map<String, BaselineNode> srvrs = currentServers();\n \n             for (String consistentId : consistentIds) {\n-                BaselineNode node = servers.get(consistentId);\n+                BaselineNode node = srvrs.get(consistentId);\n \n                 if (node == null)\n                     throw new IllegalStateException(\"Node not found for consistent ID: \" + consistentId);",
                "deletions": 11
            },
            {
                "sha": "eb18e29680082d29de089d99f1240a846d29bf71",
                "filename": "modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/834869c2ac7897c8891cd1dca537488230191ab6/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/834869c2ac7897c8891cd1dca537488230191ab6/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java",
                "status": "modified",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/util/GridCommandHandlerTest.java?ref=834869c2ac7897c8891cd1dca537488230191ab6",
                "patch": "@@ -17,7 +17,9 @@\n \n package org.apache.ignite.util;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n+import java.io.PrintStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n import org.apache.ignite.Ignite;\n@@ -61,6 +63,11 @@ protected File folder(String folder) throws IgniteCheckedException {\n         cleanPersistenceDir();\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public String getTestIgniteInstanceName() {\n+        return \"bltTest\";\n+    }\n+\n     /** {@inheritDoc} */\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n         IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n@@ -76,6 +83,8 @@ protected File folder(String folder) throws IgniteCheckedException {\n         dsCfg.setWalMode(WALMode.LOG_ONLY);\n         dsCfg.getDefaultDataRegionConfiguration().setPersistenceEnabled(true);\n \n+        cfg.setConsistentId(igniteInstanceName);\n+\n         return cfg;\n     }\n \n@@ -205,6 +214,40 @@ public void testBaselineAdd() throws Exception {\n         assertEquals(2, ignite.cluster().currentBaselineTopology().size());\n     }\n \n+    /**\n+     * Test baseline add items works via control.sh\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testBaselineAddOnNotActiveCluster() throws Exception {\n+        try {\n+            Ignite ignite = startGrid(1);\n+\n+            assertFalse(ignite.cluster().active());\n+\n+            String consistentIDs = getTestIgniteInstanceName(1);\n+\n+            ByteArrayOutputStream out = new ByteArrayOutputStream(4096);\n+            System.setOut(new PrintStream(out));\n+\n+            assertEquals(EXIT_CODE_UNEXPECTED_ERROR, execute(\"--baseline\", \"add\", consistentIDs));\n+\n+            assertTrue(out.toString().contains(\"Changing BaselineTopology on inactive cluster is not allowed.\"));\n+\n+            consistentIDs =\n+                getTestIgniteInstanceName(1) + \", \" +\n+                    getTestIgniteInstanceName(2) + \",\" +\n+                    getTestIgniteInstanceName(3);\n+\n+            assertEquals(EXIT_CODE_UNEXPECTED_ERROR, execute(\"--baseline\", \"add\", consistentIDs));\n+\n+            assertTrue(out.toString().contains(\"Node not found for consistent ID: bltTest2\"));\n+        }\n+        finally {\n+            System.setOut(System.out);\n+        }\n+    }\n+\n     /**\n      * Test baseline remove works via control.sh\n      *",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7399 .NET: Thin client: Fix NPE in Dispose",
        "commit": "https://github.com/apache/ignite/commit/66cf82d2e4335d01d71184a60182e3e8ae1f0bb6",
        "parent": "https://github.com/apache/ignite/commit/31c60bd6b71953226fb6e2f5b439656d9c1109bf",
        "bug_id": "ignite_65",
        "file": [
            {
                "sha": "417e60ad8c5bf3ab5f586b10c53b8b0c8a3db385",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "blob_url": "https://github.com/apache/ignite/blob/66cf82d2e4335d01d71184a60182e3e8ae1f0bb6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "raw_url": "https://github.com/apache/ignite/raw/66cf82d2e4335d01d71184a60182e3e8ae1f0bb6/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core.Tests/Client/ClientConnectionTest.cs?ref=66cf82d2e4335d01d71184a60182e3e8ae1f0bb6",
                "patch": "@@ -303,6 +303,21 @@ public void TestIdleTimeout()\n             }\n         }\n \n+        /// <summary>\n+        /// Tests the protocol mismatch behavior: attempt to connect to an HTTP endpoint.\n+        /// </summary>\n+        [Test]\n+        public void TestProtocolMismatch()\n+        {\n+            using (Ignition.Start(TestUtils.GetTestConfiguration()))\n+            {\n+                // Connect to Ignite REST endpoint.\n+                var cfg = new IgniteClientConfiguration {Host = \"127.0.0.1\", Port = 11211 };\n+                var ex = Assert.Throws<SocketException>(() => Ignition.StartClient(cfg));\n+                Assert.AreEqual(SocketError.ConnectionAborted, ex.SocketErrorCode);\n+            }\n+        }\n+\n         /// <summary>\n         /// Starts the client.\n         /// </summary>",
                "deletions": 0
            },
            {
                "sha": "f9e77fcbdc23cc5ce5a8fc1f7fedc1356715a903",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "blob_url": "https://github.com/apache/ignite/blob/66cf82d2e4335d01d71184a60182e3e8ae1f0bb6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "raw_url": "https://github.com/apache/ignite/raw/66cf82d2e4335d01d71184a60182e3e8ae1f0bb6/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs?ref=66cf82d2e4335d01d71184a60182e3e8ae1f0bb6",
                "patch": "@@ -590,7 +590,11 @@ public void Dispose()\n                 _socket.Dispose();\n                 _listenerEvent.Set();\n                 _listenerEvent.Dispose();\n-                _timeoutCheckTimer.Dispose();\n+\n+                if (_timeoutCheckTimer != null)\n+                {\n+                    _timeoutCheckTimer.Dispose();\n+                }\n \n                 // Wait for lock to be released and dispose.\n                 if (!_sendRequestLock.IsWriteLockHeld)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8252 NPE is replaced with IgniteException with meaningful message - Fixes #3908.\n\nSigned-off-by: dspavlov <dpavlov@gridgain.com>",
        "commit": "https://github.com/apache/ignite/commit/5135f82f3f53eddef9ab91da2e647e14488b2d5a",
        "parent": "https://github.com/apache/ignite/commit/411755620215dd03ba5422d27ab420f92531b12f",
        "bug_id": "ignite_66",
        "file": [
            {
                "sha": "d44d165d375bd634f73a088248a2c5ba14dea27b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/5135f82f3f53eddef9ab91da2e647e14488b2d5a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/5135f82f3f53eddef9ab91da2e647e14488b2d5a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java",
                "status": "modified",
                "changes": 33,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java?ref=5135f82f3f53eddef9ab91da2e647e14488b2d5a",
                "patch": "@@ -30,12 +30,15 @@\n import java.util.concurrent.locks.ReentrantLock;\n import java.util.stream.Collectors;\n import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.IgniteSystemProperties;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.GridTopic;\n import org.apache.ignite.internal.managers.communication.GridIoManager;\n import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n+import org.apache.ignite.internal.managers.discovery.DiscoCache;\n import org.apache.ignite.internal.managers.discovery.GridDiscoveryManager;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.util.GridConcurrentHashSet;\n@@ -228,14 +231,34 @@ public Latch getOrCreate(String id, AffinityTopologyVersion topVer) {\n         }\n     }\n \n+    /**\n+     * Gets alive server nodes from disco cache for provided AffinityTopologyVersion.\n+     *\n+     * @param topVer Topology version.\n+     * @return Collection of nodes with at least one cache configured.\n+     */\n+    private Collection<ClusterNode> aliveNodesForTopologyVer(AffinityTopologyVersion topVer) {\n+        if (topVer == AffinityTopologyVersion.NONE)\n+            return discovery.aliveServerNodes();\n+        else {\n+            DiscoCache discoCache = discovery.discoCache(topVer);\n+\n+            if (discoCache != null)\n+                return discoCache.aliveServerNodes();\n+            else\n+                throw new IgniteException(\"DiscoCache not found for topology \"\n+                    + topVer\n+                    + \"; consider increasing IGNITE_DISCOVERY_HISTORY_SIZE property. Current value is \"\n+                    + IgniteSystemProperties.getInteger(IgniteSystemProperties.IGNITE_DISCOVERY_HISTORY_SIZE, -1));\n+        }\n+    }\n+\n     /**\n      * @param topVer Latch topology version.\n      * @return Collection of alive server nodes with latch functionality.\n      */\n     private Collection<ClusterNode> getLatchParticipants(AffinityTopologyVersion topVer) {\n-        Collection<ClusterNode> aliveNodes = topVer == AffinityTopologyVersion.NONE\n-                ? discovery.aliveServerNodes()\n-                : discovery.discoCache(topVer).aliveServerNodes();\n+        Collection<ClusterNode> aliveNodes = aliveNodesForTopologyVer(topVer);\n \n         return aliveNodes\n                 .stream()\n@@ -248,9 +271,7 @@ public Latch getOrCreate(String id, AffinityTopologyVersion topVer) {\n      * @return Oldest alive server node with latch functionality.\n      */\n     @Nullable private ClusterNode getLatchCoordinator(AffinityTopologyVersion topVer) {\n-        Collection<ClusterNode> aliveNodes = topVer == AffinityTopologyVersion.NONE\n-                ? discovery.aliveServerNodes()\n-                : discovery.discoCache(topVer).aliveServerNodes();\n+        Collection<ClusterNode> aliveNodes = aliveNodesForTopologyVer(topVer);\n \n         return aliveNodes\n                 .stream()",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-db-x  fix rebalance npe, index tree npe",
        "commit": "https://github.com/apache/ignite/commit/26000caa83b92d43ce14fd53f7802e9802a7670c",
        "parent": "https://github.com/apache/ignite/commit/b9826ef677eaf045d7c1f7914cecd25d32b08396",
        "bug_id": "ignite_67",
        "file": [
            {
                "sha": "5261e34346551bcd03d3404beef2f5cd5175cbef",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicSingleUpdateFuture.java?ref=26000caa83b92d43ce14fd53f7802e9802a7670c",
                "patch": "@@ -208,7 +208,7 @@ public GridNearAtomicSingleUpdateFuture(\n             if (!res.futureVersion().equals(futVer))\n                 return;\n \n-            if (!this.req.nodeId().equals(nodeId))\n+            if (this.req == null || !this.req.nodeId().equals(nodeId))\n                 return;\n \n             req = this.req;",
                "deletions": 1
            },
            {
                "sha": "204e4da954aecff5b62a76c4dd512d0af3550a2e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "blob_url": "https://github.com/apache/ignite/blob/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "raw_url": "https://github.com/apache/ignite/raw/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "status": "modified",
                "changes": 18,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java?ref=26000caa83b92d43ce14fd53f7802e9802a7670c",
                "patch": "@@ -452,23 +452,15 @@ private void requestPartitions(\n         for (Map.Entry<ClusterNode, GridDhtPartitionDemandMessage> e : assigns.entrySet()) {\n             final ClusterNode node = e.getKey();\n \n-            GridDhtPartitionDemandMessage d = e.getValue();\n+            final GridDhtPartitionDemandMessage d = e.getValue();\n \n-            fut.appendPartitions(node.id(), d.partitions()); //Future preparation.\n-        }\n-\n-        for (Map.Entry<ClusterNode, GridDhtPartitionDemandMessage> e : assigns.entrySet()) {\n-            final ClusterNode node = e.getKey();\n-\n-            final CacheConfiguration cfg = cctx.config();\n-\n-            final Collection<Integer> parts = fut.remaining.get(node.id()).get2();\n+            final Collection<Integer> parts = d.partitions();\n \n-            GridDhtPartitionDemandMessage d = e.getValue();\n+            fut.appendPartitions(node.id(), parts);\n \n             //Check remote node rebalancing API version.\n             if (node.version().compareTo(GridDhtPreloader.REBALANCING_VER_2_SINCE) >= 0) {\n-                U.log(log, \"Starting rebalancing [mode=\" + cfg.getRebalanceMode() +\n+                U.log(log, \"Starting rebalancing [mode=\" + cctx.config().getRebalanceMode() +\n                     \", fromNode=\" + node.id() + \", partitionsCount=\" + parts.size() +\n                     \", topology=\" + fut.topologyVersion() + \", updateSeq=\" + fut.updateSeq + \"]\");\n \n@@ -513,7 +505,7 @@ private void requestPartitions(\n             }\n             else {\n                 U.log(log, \"Starting rebalancing (old api) [cache=\" + cctx.name() +\n-                    \", mode=\" + cfg.getRebalanceMode() +\n+                    \", mode=\" + cctx.config().getRebalanceMode() +\n                     \", fromNode=\" + node.id() +\n                     \", partitionsCount=\" + parts.size() +\n                     \", topology=\" + fut.topologyVersion() +",
                "deletions": 13
            },
            {
                "sha": "ba2ab3cfd2f9f3d9c7bed8d54e955eda66a08c1a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java?ref=26000caa83b92d43ce14fd53f7802e9802a7670c",
                "patch": "@@ -675,15 +675,18 @@ else if (txFinishMsgLog.isDebugEnabled()) {\n      * @param req Request.\n      * @return Future.\n      */\n-    @Nullable private IgniteInternalFuture<IgniteInternalTx> processNearTxFinishRequest(UUID nodeId,\n-        GridNearTxFinishRequest req) {\n+    @Nullable private IgniteInternalFuture<IgniteInternalTx> processNearTxFinishRequest(\n+        UUID nodeId,\n+        GridNearTxFinishRequest req\n+    ) {\n         if (txFinishMsgLog.isDebugEnabled())\n             txFinishMsgLog.debug(\"Received near finish request [txId=\" + req.version() + \", node=\" + nodeId + ']');\n \n         IgniteInternalFuture<IgniteInternalTx> fut = finish(nodeId, null, req);\n \n         assert req.txState() != null || (fut != null && fut.error() != null) ||\n-            (ctx.tm().tx(req.version()) == null && ctx.tm().nearTx(req.version()) == null);\n+            (ctx.tm().tx(req.version()) == null && ctx.tm().nearTx(req.version()) == null) :\n+            \"[req=\" + req + \", fut=\" + fut + \"]\";\n \n         return fut;\n     }",
                "deletions": 3
            },
            {
                "sha": "f82746f87b9bf996bf44ce45a40eb726ba0cd3da",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/H2TreeIndex.java",
                "blob_url": "https://github.com/apache/ignite/blob/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/H2TreeIndex.java",
                "raw_url": "https://github.com/apache/ignite/raw/26000caa83b92d43ce14fd53f7802e9802a7670c/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/H2TreeIndex.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/H2TreeIndex.java?ref=26000caa83b92d43ce14fd53f7802e9802a7670c",
                "patch": "@@ -199,7 +199,7 @@ public H2Tree tree() {\n     /** {@inheritDoc} */\n     @Override public void destroy() {\n         try {\n-            if (!cctx.kernalContext().clientNode()) {\n+            if (cctx.affinityNode()) {\n                 tree.destroy();\n \n                 cctx.offheap().dropRootPageForIndex(tree.getName());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7197 Avoid NPE in services() by waiting on latch",
        "commit": "https://github.com/apache/ignite/commit/226711357db742a5073a98ef179997480e1b1a56",
        "parent": "https://github.com/apache/ignite/commit/6e8cfe324fc7ea69a2b5477ac3187d333aef3134",
        "bug_id": "ignite_68",
        "file": [
            {
                "sha": "85810239cad21579461d8001ff281a6f107b19be",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java",
                "status": "modified",
                "changes": 53,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java?ref=226711357db742a5073a98ef179997480e1b1a56",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.UUID;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadFactory;\n@@ -160,11 +161,14 @@\n     private ThreadLocal<String> svcName = new ThreadLocal<>();\n \n     /** Service cache. */\n-    private IgniteInternalCache<Object, Object> cache;\n+    private volatile IgniteInternalCache<Object, Object> serviceCache;\n \n     /** Topology listener. */\n     private DiscoveryEventListener topLsnr = new TopologyListener();\n \n+    /** */\n+    private final CountDownLatch startLatch = new CountDownLatch(1);\n+\n     /**\n      * @param ctx Kernal context.\n      */\n@@ -223,19 +227,21 @@ public void onContinuousProcessorStarted(GridKernalContext ctx) throws IgniteChe\n      * @throws IgniteCheckedException If failed.\n      */\n     private void onKernalStart0() throws IgniteCheckedException {\n-        updateUtilityCache();\n-\n         if (!ctx.clientNode())\n             ctx.event().addDiscoveryEventListener(topLsnr, EVTS);\n \n+        updateUtilityCache();\n+\n+        startLatch.countDown();\n+\n         try {\n             if (ctx.deploy().enabled())\n                 ctx.cache().context().deploy().ignoreOwnership(true);\n \n             if (!ctx.clientNode()) {\n-                assert cache.context().affinityNode();\n+                assert serviceCache.context().affinityNode();\n \n-                cache.context().continuousQueries().executeInternalQuery(\n+                serviceCache.context().continuousQueries().executeInternalQuery(\n                     new ServiceEntriesListener(), null, true, true, false\n                 );\n             }\n@@ -246,7 +252,7 @@ private void onKernalStart0() throws IgniteCheckedException {\n                     @Override public void run() {\n                         try {\n                             Iterable<CacheEntryEvent<?, ?>> entries =\n-                                cache.context().continuousQueries().existingEntries(false, null);\n+                                serviceCache.context().continuousQueries().existingEntries(false, null);\n \n                             onSystemCacheUpdated(entries);\n                         }\n@@ -275,7 +281,17 @@ private void onKernalStart0() throws IgniteCheckedException {\n      *\n      */\n     public void updateUtilityCache() {\n-        cache = ctx.cache().utilityCache();\n+        serviceCache = ctx.cache().utilityCache();\n+    }\n+\n+    /**\n+     * @return Service cache.\n+     */\n+    private IgniteInternalCache<Object, Object> serviceCache() {\n+        if (serviceCache == null)\n+            U.awaitQuiet(startLatch);\n+\n+        return serviceCache;\n     }\n \n     /** {@inheritDoc} */\n@@ -292,6 +308,8 @@ public void updateUtilityCache() {\n             this.busyLock = null;\n         }\n \n+        startLatch.countDown();\n+\n         U.shutdownNow(GridServiceProcessor.class, depExe, log);\n \n         if (!ctx.clientNode())\n@@ -617,7 +635,7 @@ else if (prj.predicate() == F.<ClusterNode>alwaysTrue())\n                 if (cfgsCp.size() == 1)\n                     writeServiceToCache(res, cfgsCp.get(0));\n                 else if (cfgsCp.size() > 1) {\n-                    try (Transaction tx = cache.txStart(PESSIMISTIC, READ_COMMITTED)) {\n+                    try (Transaction tx = serviceCache().txStart(PESSIMISTIC, READ_COMMITTED)) {\n                         for (ServiceConfiguration cfg : cfgsCp) {\n                             try {\n                                 writeServiceToCache(res, cfg);\n@@ -709,7 +727,7 @@ private void writeServiceToCache(GridServiceDeploymentCompoundFuture res, Servic\n \n             GridServiceDeploymentKey key = new GridServiceDeploymentKey(name);\n \n-            GridServiceDeployment dep = (GridServiceDeployment)cache.getAndPutIfAbsent(key,\n+            GridServiceDeployment dep = (GridServiceDeployment)serviceCache().getAndPutIfAbsent(key,\n                 new GridServiceDeployment(ctx.localNodeId(), cfg));\n \n             if (dep != null) {\n@@ -809,7 +827,7 @@ private void writeServiceToCache(GridServiceDeploymentCompoundFuture res, Servic\n \n             List<String> toRollback = new ArrayList<>();\n \n-            try (Transaction tx = cache.txStart(PESSIMISTIC, READ_COMMITTED)) {\n+            try (Transaction tx = serviceCache().txStart(PESSIMISTIC, READ_COMMITTED)) {\n                 for (String name : svcNames) {\n                     if (res == null)\n                         res = new GridCompoundFuture<>();\n@@ -882,7 +900,7 @@ private CancelResult removeServiceFromCache(String name) throws IgniteCheckedExc\n             GridServiceDeploymentKey key = new GridServiceDeploymentKey(name);\n \n             try {\n-                if (cache.getAndRemove(key) == null) {\n+                if (serviceCache().getAndRemove(key) == null) {\n                     // Remove future from local map if service was not deployed.\n                     undepFuts.remove(name, fut);\n \n@@ -910,6 +928,8 @@ private CancelResult removeServiceFromCache(String name) throws IgniteCheckedExc\n      * @throws IgniteCheckedException On error.\n      */\n     public Map<UUID, Integer> serviceTopology(String name, long timeout) throws IgniteCheckedException {\n+        IgniteInternalCache<Object, Object> cache = serviceCache();\n+\n         ClusterNode node = cache.affinity().mapKeyToNode(name);\n \n         final ServiceTopologyCallable call = new ServiceTopologyCallable(name);\n@@ -952,7 +972,7 @@ private CancelResult removeServiceFromCache(String name) throws IgniteCheckedExc\n             ServiceDescriptorImpl desc = new ServiceDescriptorImpl(dep);\n \n             try {\n-                GridServiceAssignments assigns = (GridServiceAssignments)cache.getForcePrimary(\n+                GridServiceAssignments assigns = (GridServiceAssignments)serviceCache().getForcePrimary(\n                     new GridServiceAssignmentsKey(dep.configuration().getName()));\n \n                 if (assigns != null) {\n@@ -1117,8 +1137,9 @@ private boolean hasLocalNode(ClusterGroup prj) {\n      * @throws IgniteCheckedException If failed.\n      */\n     private void reassign(GridServiceDeployment dep, AffinityTopologyVersion topVer) throws IgniteCheckedException {\n-        ServiceConfiguration cfg = dep.configuration();\n+        IgniteInternalCache<Object, Object> cache = serviceCache();\n \n+        ServiceConfiguration cfg = dep.configuration();\n         Object nodeFilter = cfg.getNodeFilter();\n \n         if (nodeFilter != null)\n@@ -1475,6 +1496,8 @@ private void cancel(Iterable<ServiceContextImpl> ctxs, int cancelCnt) {\n     @SuppressWarnings(\"unchecked\")\n     private Iterator<Cache.Entry<Object, Object>> serviceEntries(IgniteBiPredicate<Object, Object> p) {\n         try {\n+            IgniteInternalCache<Object, Object> cache = serviceCache();\n+\n             GridCacheQueryManager qryMgr = cache.context().queries();\n \n             CacheQuery<Map.Entry<Object, Object>> qry = qryMgr.createScanQuery(p, null, false);\n@@ -1615,6 +1638,8 @@ private void processDeployment(CacheEntryEvent<GridServiceDeploymentKey, GridSer\n             GridServiceAssignmentsKey key = new GridServiceAssignmentsKey(name);\n \n             // Remove assignment on primary node in case of undeploy.\n+            IgniteInternalCache<Object, Object> cache = serviceCache();\n+\n             if (cache.cache().affinity().isPrimary(ctx.discovery().localNode(), key)) {\n                 try {\n                     cache.getAndRemove(key);\n@@ -1783,6 +1808,8 @@ else if (msg instanceof DynamicCacheChangeBatch) {\n                         Iterator<Cache.Entry<Object, Object>> it = serviceEntries(ServiceAssignmentsPredicate.INSTANCE);\n \n                         // Clean up zombie assignments.\n+                        IgniteInternalCache<Object, Object> cache = serviceCache();\n+\n                         while (it.hasNext()) {\n                             Cache.Entry<Object, Object> e = it.next();\n ",
                "deletions": 13
            },
            {
                "sha": "871d945021514f3474a6c005dffd207c50708691",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java?ref=226711357db742a5073a98ef179997480e1b1a56",
                "patch": "@@ -198,6 +198,8 @@ private IgniteClientDisconnectedCheckedException disconnectedError(@Nullable Ign\n             lock.writeUnlock();\n         }\n \n+        startLatch.countDown();\n+\n         int size = tasks.size();\n \n         if (size > 0) {",
                "deletions": 0
            },
            {
                "sha": "4b8b49402200109a9f6b8fab05b3634c865cbf64",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/GridJobServicesAddNodeTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/test/java/org/apache/ignite/internal/GridJobServicesAddNodeTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/test/java/org/apache/ignite/internal/GridJobServicesAddNodeTest.java",
                "status": "added",
                "changes": 172,
                "additions": 172,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/GridJobServicesAddNodeTest.java?ref=226711357db742a5073a98ef179997480e1b1a56",
                "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.processors.service.DummyService;\n+import org.apache.ignite.internal.util.IgniteUtils;\n+import org.apache.ignite.internal.util.typedef.CAX;\n+import org.apache.ignite.internal.util.typedef.CIX1;\n+import org.apache.ignite.internal.util.typedef.X;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteFuture;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+import org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+\n+/**\n+ * Tests multiple parallel jobs execution, accessing services(), while starting new nodes.\n+ */\n+@GridCommonTest(group = \"Kernal Self\")\n+public class GridJobServicesAddNodeTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final int LOG_MOD = 100;\n+\n+    /** */\n+    private static final int MAX_ADD_NODES = 64;\n+\n+    /** IP finder. */\n+    private static final TcpDiscoveryIpFinder ipFinder = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        startGrid(1);\n+        startGrid(2);\n+\n+        assertEquals(2, grid(1).cluster().nodes().size());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        stopAllGrids();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration c = super.getConfiguration(igniteInstanceName);\n+\n+        TcpDiscoverySpi disco = new TcpDiscoverySpi();\n+\n+        disco.setIpFinder(ipFinder);\n+\n+        c.setDiscoverySpi(disco);\n+\n+        TcpCommunicationSpi commSpi = new TcpCommunicationSpi();\n+\n+        commSpi.setSharedMemoryPort(-1);\n+\n+        c.setCommunicationSpi(commSpi);\n+\n+        return c;\n+    }\n+\n+    /**\n+     * @throws Exception If test failed.\n+     */\n+    public void testServiceDescriptorsJob() throws Exception {\n+        final int tasks = 5000;\n+        final int threads = 10;\n+\n+        final Ignite ignite1 = grid(1);\n+        final CountDownLatch latch = new CountDownLatch(tasks);\n+        final AtomicInteger jobsCnt = new AtomicInteger();\n+        final AtomicInteger resCnt = new AtomicInteger();\n+\n+        ignite1.services().deployClusterSingleton(\"jobsSvc\", new DummyService());\n+\n+        GridTestUtils.runMultiThreadedAsync(new CAX() {\n+            @Override public void applyx() throws IgniteCheckedException {\n+                while (true) {\n+                    int cnt = jobsCnt.incrementAndGet();\n+\n+                    if (cnt > 5000)\n+                        break;\n+\n+                    IgniteCallable<Boolean> job;\n+\n+                    job = new ServiceDescriptorsJob();\n+\n+                    IgniteFuture<Boolean> fut = ignite1.compute().callAsync(job);\n+\n+                    if (cnt % LOG_MOD == 0)\n+                        X.println(\"Submitted jobs: \" + cnt);\n+\n+                    fut.listen(new CIX1<IgniteFuture<Boolean>>() {\n+                        @Override public void applyx(IgniteFuture<Boolean> f) {\n+                            try {\n+                                assert f.get();\n+\n+                                long cnt = resCnt.incrementAndGet();\n+\n+                                if (cnt % LOG_MOD == 0)\n+                                    X.println(\"Results count: \" + cnt);\n+                            }\n+                            finally {\n+                                latch.countDown();\n+                            }\n+                        }\n+                    });\n+\n+                    IgniteUtils.sleep(5);\n+                }\n+            }\n+        }, threads, \"TEST-THREAD\");\n+\n+        int additionalNodesStarted = 0;\n+        while (!latch.await(threads, TimeUnit.MILLISECONDS)) {\n+            if (additionalNodesStarted++ <= MAX_ADD_NODES) {\n+                startGrid(2 + additionalNodesStarted);\n+            }\n+        }\n+\n+        assertEquals(\"Jobs cnt != Results cnt\", jobsCnt.get() - threads, resCnt.get());\n+    }\n+\n+    /**\n+     * Test service enumerating job.\n+     */\n+    @SuppressWarnings({\"PublicInnerClass\"})\n+    public static class ServiceDescriptorsJob implements IgniteCallable<Boolean> {\n+        /** */\n+        @IgniteInstanceResource\n+        private Ignite ignite;\n+\n+        /** {@inheritDoc} */\n+        @Override public Boolean call() throws Exception {\n+            try {\n+                return ignite.services().serviceDescriptors().iterator().hasNext();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+\n+                return false;\n+            } finally {\n+                Thread.sleep(10);\n+            }\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "2ffa11ebf2849a42ff99fb91d77b535f8fe7664d",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/226711357db742a5073a98ef179997480e1b1a56/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java?ref=226711357db742a5073a98ef179997480e1b1a56",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.ignite.internal.GridJobCollisionCancelSelfTest;\n import org.apache.ignite.internal.GridJobContextSelfTest;\n import org.apache.ignite.internal.GridJobMasterLeaveAwareSelfTest;\n+import org.apache.ignite.internal.GridJobServicesAddNodeTest;\n import org.apache.ignite.internal.GridJobStealingSelfTest;\n import org.apache.ignite.internal.GridJobStealingZeroActiveJobsSelfTest;\n import org.apache.ignite.internal.GridJobSubjectIdSelfTest;\n@@ -160,6 +161,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(IgniteRoundRobinErrorAfterClientReconnectTest.class);\n         suite.addTestSuite(PublicThreadpoolStarvationTest.class);\n         suite.addTestSuite(StripedExecutorTest.class);\n+        suite.addTestSuite(GridJobServicesAddNodeTest.class);\n \n         suite.addTestSuite(IgniteComputeCustomExecutorConfigurationSelfTest.class);\n         suite.addTestSuite(IgniteComputeCustomExecutorSelfTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8355 Fixed NPE on concurrent nodes start - Fixes #3899.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/74f46515368df83177f1ae7e59794295f20c1774",
        "parent": "https://github.com/apache/ignite/commit/8a7e8f07fccebb9d5786e5624e353af730d4d039",
        "bug_id": "ignite_69",
        "file": [
            {
                "sha": "261e73db97786eefd7c0c71d07c16d9d7c963347",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -2140,7 +2140,7 @@ public Serializable consistentId() {\n      *\n      * @return Wrapped DiscoverySpi SPI.\n      */\n-    private DiscoverySpi getInjectedDiscoverySpi() {\n+    public DiscoverySpi getInjectedDiscoverySpi() {\n         try {\n             inject();\n         }",
                "deletions": 1
            },
            {
                "sha": "ac713c3dce87505172715cd43b4f4248616d388d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "status": "modified",
                "changes": 19,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -68,6 +68,8 @@\n import org.apache.ignite.lang.IgniteUuid;\n import org.apache.ignite.spi.IgniteNodeValidationResult;\n import org.apache.ignite.spi.discovery.DiscoveryDataBag;\n+import org.apache.ignite.spi.discovery.DiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n import org.apache.ignite.thread.IgniteThreadPoolExecutor;\n import org.jetbrains.annotations.Nullable;\n \n@@ -451,7 +453,7 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n     @Override public void collectGridNodeData(DiscoveryDataBag dataBag) {\n         // 1. Collect users info only on coordinator\n         // 2. Doesn't collect users info to send on client node due to security reason.\n-        if (!isEnabled || !F.eq(ctx.localNodeId(), coordinator().id()) || dataBag.isJoiningNodeClient())\n+        if (!isEnabled || !isLocalNodeCoordinator() || dataBag.isJoiningNodeClient())\n             return;\n \n         synchronized (mux) {\n@@ -466,6 +468,21 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n         }\n     }\n \n+    /**\n+     * Checks whether local node is coordinator. Nodes that are leaving or failed\n+     * (but are still in topology) are removed from search.\n+     *\n+     * @return {@code true} if local node is coordinator.\n+     */\n+    private boolean isLocalNodeCoordinator() {\n+        DiscoverySpi spi = ctx.discovery().getInjectedDiscoverySpi();\n+\n+        if (spi instanceof TcpDiscoverySpi)\n+            return ((TcpDiscoverySpi)spi).isLocalNodeCoordinator();\n+        else\n+            return F.eq(ctx.localNodeId(), coordinator().id());\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void onGridDataReceived(DiscoveryDataBag.GridDiscoveryData data) {\n         initUsrs = (InitialUsersData)data.commonData();",
                "deletions": 1
            },
            {
                "sha": "6b2293a1d275c1ac4b73a9067d85226731f2c422",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -1473,7 +1473,7 @@ private void notifyDiscovery(int type, long topVer, TcpDiscoveryNode node) {\n      *\n      * @return {@code true} if local node is coordinator.\n      */\n-    private boolean isLocalNodeCoordinator() {\n+    public boolean isLocalNodeCoordinator() {\n         synchronized (mux) {\n             boolean crd = spiState == CONNECTED && locNode.equals(resolveCoordinator());\n ",
                "deletions": 1
            },
            {
                "sha": "801f2b65655218946e11999472002b5e3e366150",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -2235,6 +2235,19 @@ public void brakeConnection() {\n         impl.brakeConnection();\n     }\n \n+    /**\n+     * Checks whether local node is coordinator. Nodes that are leaving or failed\n+     * (but are still in topology) are removed from search.\n+     *\n+     * @return {@code true} if local node is coordinator.\n+     */\n+    public boolean isLocalNodeCoordinator() {\n+        if (impl instanceof ServerImpl)\n+            return ((ServerImpl)impl).isLocalNodeCoordinator();\n+\n+        return false;\n+    }\n+\n     /**\n      * @return Marshaller.\n      */",
                "deletions": 0
            },
            {
                "sha": "9748db772747ab8c16cbc390b30bba765ae4ee1e",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "status": "added",
                "changes": 90,
                "additions": 90,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.authentication;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Test for NPE on start node simultaneous.\n+ */\n+public class AuthenticationProcessorNPEOnStartTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        TcpDiscoverySpi spi = new TcpDiscoverySpi();\n+\n+        spi.setIpFinder(IP_FINDER);\n+\n+        cfg.setDiscoverySpi(spi);\n+\n+        cfg.setAuthenticationEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(new DataStorageConfiguration()\n+            .setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n+                .setPersistenceEnabled(true)));\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        U.resolveWorkDirectory(U.defaultWorkDirectory(), \"db\", true);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void test() throws Exception {\n+        final AtomicInteger nodeIdx = new AtomicInteger();\n+\n+        GridTestUtils.runMultiThreaded(new Runnable() {\n+            @Override public void run() {\n+                try {\n+                    startGrid(nodeIdx.getAndIncrement());\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+\n+                    fail(\"Unexpected exception\");\n+                }\n+            }\n+        }, 10, \"auth-grid-starter\");\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "a31bd7544a31d210fc47b85aa1474ecfabb318ba",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "patch": "@@ -20,6 +20,7 @@\n import junit.framework.TestSuite;\n import org.apache.ignite.internal.processors.authentication.AuthenticationConfigurationClusterTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationOnNotActiveClusterTest;\n+import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorNPEOnStartTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorNodeRestartTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorSelfTest;\n import org.apache.ignite.internal.processors.cache.PartitionedAtomicCacheGetsDistributionTest;\n@@ -87,6 +88,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(AuthenticationProcessorSelfTest.class);\n         suite.addTestSuite(AuthenticationOnNotActiveClusterTest.class);\n         suite.addTestSuite(AuthenticationProcessorNodeRestartTest.class);\n+        suite.addTestSuite(AuthenticationProcessorNPEOnStartTest.class);\n \n         suite.addTestSuite(ReplicatedAtomicCacheGetsDistributionTest.class);\n         suite.addTestSuite(ReplicatedTransactionalOptimisticCacheGetsDistributionTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7972 Fixed NPE in TTL manager on unwindEvicts. - Fixes #3810.\n\nSigned-off-by: dpavlov <dpavlov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/737933e6db33f7f74005f3783d81d4bd7331c21d",
        "parent": "https://github.com/apache/ignite/commit/baaef27661971ff093d861d699e43167602e11cf",
        "bug_id": "ignite_70",
        "file": [
            {
                "sha": "d36485ab70a7f0fa41bd3017711b07d80699208e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/737933e6db33f7f74005f3783d81d4bd7331c21d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/737933e6db33f7f74005f3783d81d4bd7331c21d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java?ref=737933e6db33f7f74005f3783d81d4bd7331c21d",
                "patch": "@@ -40,8 +40,8 @@\n     /** Entries pending removal. */\n     private GridConcurrentSkipListSetEx pendingEntries;\n \n-    /** */\n-    private boolean eagerTtlEnabled;\n+    /** See {@link CacheConfiguration#isEagerTtl()}. */\n+    private volatile boolean eagerTtlEnabled;\n \n     /** */\n     private GridCacheContext dhtCtx;\n@@ -166,6 +166,12 @@ public void expire() {\n      * @return {@code True} if unprocessed expired entries remains.\n      */\n     public boolean expire(int amount) {\n+        // TTL manager is not initialized or eagerTtl disabled for cache.\n+        if (!eagerTtlEnabled)\n+            return false;\n+\n+        assert cctx != null;\n+\n         long now = U.currentTimeMillis();\n \n         try {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE on node stop when SSL is used.",
        "commit": "https://github.com/apache/ignite/commit/132ec3fa4f3e55f001899f4eef3cdf3786cefa41",
        "parent": "https://github.com/apache/ignite/commit/250ceb726d38631282599fb39b3990e66a667922",
        "bug_id": "ignite_71",
        "file": [
            {
                "sha": "1d595d2485f0fbed7d05e68718662566147f4c58",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "blob_url": "https://github.com/apache/ignite/blob/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "raw_url": "https://github.com/apache/ignite/raw/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java?ref=132ec3fa4f3e55f001899f4eef3cdf3786cefa41",
                "patch": "@@ -3371,8 +3371,12 @@ protected HeadFilter() {\n \n                     GridSelectorNioSessionImpl ses0 = (GridSelectorNioSessionImpl)ses;\n \n-                    if (!ses0.procWrite.get() && ses0.procWrite.compareAndSet(false, true))\n-                        ses0.worker().registerWrite(ses0);\n+                    if (!ses0.procWrite.get() && ses0.procWrite.compareAndSet(false, true)) {\n+                        GridNioWorker worker = ses0.worker();\n+\n+                        if (worker != null)\n+                            worker.registerWrite(ses0);\n+                    }\n \n                     return null;\n                 }",
                "deletions": 2
            },
            {
                "sha": "666bc1dfbf6c285b3cc95bfd1f2fde77ce47332d",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationBalanceTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationBalanceTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationBalanceTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationBalanceTest.java?ref=132ec3fa4f3e55f001899f4eef3cdf3786cefa41",
                "patch": "@@ -72,9 +72,19 @@\n \n         cfg.setClientMode(client);\n \n+        if (sslEnabled())\n+            cfg.setSslContextFactory(GridTestUtils.sslFactory());\n+\n         return cfg;\n     }\n \n+    /**\n+     * @return {@code True} to enable SSL.\n+     */\n+    protected boolean sslEnabled() {\n+        return false;\n+    }\n+\n     /**\n      * @return Value for {@link TcpCommunicationSpi#setUsePairedConnections(boolean)}.\n      */\n@@ -100,6 +110,9 @@ protected int connectionsPerNode() {\n      * @throws Exception If failed.\n      */\n     public void testBalance1() throws Exception {\n+        if (sslEnabled())\n+            return;\n+\n         System.setProperty(IgniteSystemProperties.IGNITE_IO_BALANCE_PERIOD, \"5000\");\n \n         try {",
                "deletions": 0
            },
            {
                "sha": "68094e265577a7ed960dc7f17717d86e8b80ac19",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationSslBalanceTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationSslBalanceTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationSslBalanceTest.java",
                "status": "added",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/managers/communication/IgniteCommunicationSslBalanceTest.java?ref=132ec3fa4f3e55f001899f4eef3cdf3786cefa41",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.managers.communication;\n+\n+/**\n+ *\n+ */\n+public class IgniteCommunicationSslBalanceTest extends IgniteCommunicationBalanceTest {\n+    /** {@inheritDoc} */\n+    @Override protected boolean sslEnabled() {\n+        return true;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e3ebbc16e00fe6962a3ee4124019d2ba1f5db2ec",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/132ec3fa4f3e55f001899f4eef3cdf3786cefa41/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite.java?ref=132ec3fa4f3e55f001899f4eef3cdf3786cefa41",
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.ignite.internal.managers.communication.IgniteCommunicationBalanceMultipleConnectionsTest;\n import org.apache.ignite.internal.managers.communication.IgniteCommunicationBalancePairedConnectionsTest;\n import org.apache.ignite.internal.managers.communication.IgniteCommunicationBalanceTest;\n+import org.apache.ignite.internal.managers.communication.IgniteCommunicationSslBalanceTest;\n import org.apache.ignite.internal.managers.communication.IgniteIoTestMessagesTest;\n import org.apache.ignite.internal.managers.communication.IgniteVariousConnectionNumberTest;\n import org.apache.ignite.internal.processors.cache.CacheAffinityCallSelfTest;\n@@ -309,6 +310,7 @@ public static TestSuite suite(Set<Class> ignoredTests) throws Exception {\n         suite.addTestSuite(IgniteCommunicationBalanceTest.class);\n         suite.addTestSuite(IgniteCommunicationBalancePairedConnectionsTest.class);\n         suite.addTestSuite(IgniteCommunicationBalanceMultipleConnectionsTest.class);\n+        suite.addTestSuite(IgniteCommunicationSslBalanceTest.class);\n         suite.addTestSuite(IgniteIoTestMessagesTest.class);\n         suite.addTestSuite(IgniteDiagnosticMessagesTest.class);\n         suite.addTestSuite(IgniteDiagnosticMessagesMultipleConnectionsTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in tests",
        "commit": "https://github.com/apache/ignite/commit/18bdfe96a1e579371108c661e3374183c58a296d",
        "parent": "https://github.com/apache/ignite/commit/3c1749da82e663500e45a34369eac48dbbc62bdc",
        "bug_id": "ignite_72",
        "file": [
            {
                "sha": "4a32df27c08aabba6be5221a2c0d7cf810670128",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/database/BPlusTreeSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/18bdfe96a1e579371108c661e3374183c58a296d/modules/core/src/test/java/org/apache/ignite/internal/processors/database/BPlusTreeSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/18bdfe96a1e579371108c661e3374183c58a296d/modules/core/src/test/java/org/apache/ignite/internal/processors/database/BPlusTreeSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/database/BPlusTreeSelfTest.java?ref=18bdfe96a1e579371108c661e3374183c58a296d",
                "patch": "@@ -1774,7 +1774,9 @@ private void checkNotRemoved(Long row) {\n      * @return Page memory.\n      */\n     protected PageMemory createPageMemory() throws Exception {\n-        MemoryPolicyConfiguration plcCfg = new MemoryPolicyConfiguration().setMaxSize(1024 * MB);\n+        MemoryPolicyConfiguration plcCfg = new MemoryPolicyConfiguration()\n+            .setInitialSize(1024 * MB)\n+            .setMaxSize(1024 * MB);\n \n         PageMemory pageMem = new PageMemoryNoStoreImpl(log,\n             new UnsafeMemoryProvider(log),",
                "deletions": 1
            },
            {
                "sha": "c190b1d559eb57b48127546a8c0f822f53d62c33",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/database/FreeListImplSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/18bdfe96a1e579371108c661e3374183c58a296d/modules/core/src/test/java/org/apache/ignite/internal/processors/database/FreeListImplSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/18bdfe96a1e579371108c661e3374183c58a296d/modules/core/src/test/java/org/apache/ignite/internal/processors/database/FreeListImplSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/database/FreeListImplSelfTest.java?ref=18bdfe96a1e579371108c661e3374183c58a296d",
                "patch": "@@ -335,7 +335,9 @@ protected PageMemory createPageMemory(int pageSize, MemoryPolicyConfiguration pl\n      * @throws Exception If failed.\n      */\n     protected FreeList createFreeList(int pageSize) throws Exception {\n-        MemoryPolicyConfiguration plcCfg = new MemoryPolicyConfiguration().setMaxSize(1024 * MB);\n+        MemoryPolicyConfiguration plcCfg = new MemoryPolicyConfiguration()\n+            .setInitialSize(1024 * MB)\n+            .setMaxSize(1024 * MB);\n \n         pageMem = createPageMemory(pageSize, plcCfg);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6762: Fixed SparseDistributedMatrixExample failed with NPE.\nThis closes #3003",
        "commit": "https://github.com/apache/ignite/commit/c939bdba3a159d1ccb080686796b50a03ac77c9f",
        "parent": "https://github.com/apache/ignite/commit/8195ba512a7bff7b0e882ce01017724be8bbd8d7",
        "bug_id": "ignite_73",
        "file": [
            {
                "sha": "8c8bba79df6110a8382b19e18b3104b1931e8f17",
                "filename": "modules/ml/src/main/java/org/apache/ignite/ml/math/distributed/CacheUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/main/java/org/apache/ignite/ml/math/distributed/CacheUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/main/java/org/apache/ignite/ml/math/distributed/CacheUtils.java",
                "status": "modified",
                "changes": 14,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/main/java/org/apache/ignite/ml/math/distributed/CacheUtils.java?ref=c939bdba3a159d1ccb080686796b50a03ac77c9f",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.function.BinaryOperator;\n import javax.cache.Cache;\n import org.apache.ignite.Ignite;\n@@ -72,15 +73,13 @@\n         }\n \n         /**\n-         *\n          *\n          */\n         public Cache.Entry<K, V> entry() {\n             return entry;\n         }\n \n         /**\n-         *\n          *\n          */\n         public IgniteCache<K, V> cache() {\n@@ -165,12 +164,8 @@ else if (v instanceof BlockEntry) {\n      * @return Sum of the values.\n      */\n     private static double sum(Collection<Double> c) {\n-        double sum = 0.0;\n-\n-        for (double d : c)\n-            sum += d;\n-\n-        return sum;\n+        // Fix for IGNITE-6762, some collections could store null values.\n+        return c.stream().filter(Objects::nonNull).mapToDouble(Double::doubleValue).sum();\n     }\n \n     /**\n@@ -401,7 +396,8 @@ else if (key instanceof RowColMatrixKey)\n \n                 // Iterate over given partition.\n                 // Query returns an empty cursor if this partition is not stored on this node.\n-                for (Cache.Entry<K, V> entry : cache.query(new ScanQuery<K, V>(part, (k, v) -> affinity.mapPartitionToNode(p) == locNode && (keyFilter == null || keyFilter.apply(k)))))\n+                for (Cache.Entry<K, V> entry : cache.query(new ScanQuery<K, V>(part,\n+                    (k, v) -> affinity.mapPartitionToNode(p) == locNode && (keyFilter == null || keyFilter.apply(k)))))\n                     fun.accept(new CacheEntry<>(entry, cache));\n             }\n         });",
                "deletions": 9
            },
            {
                "sha": "1008cc2cb0ed43d25947608a396dd2c25e907871",
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/CacheVectorTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/CacheVectorTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/CacheVectorTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/CacheVectorTest.java?ref=c939bdba3a159d1ccb080686796b50a03ac77c9f",
                "patch": "@@ -143,19 +143,13 @@ public void testSum() {\n     }\n \n     /** */\n-    public void testSumNegative() {\n+    public void testSumEmptyVector() {\n         IgniteUtils.setCurrentIgniteName(ignite.configuration().getIgniteInstanceName());\n \n         IdentityValueMapper valMapper = new IdentityValueMapper();\n         CacheVector<Integer, Double> cacheVector = new CacheVector<>(size, getCache(), keyMapper, valMapper);\n \n-        try {\n-            double d = cacheVector.sum();\n-            fail();\n-        }\n-        catch (NullPointerException e) {\n-            // No-op.\n-        }\n+        cacheVector.sum();\n     }\n \n     /** */",
                "deletions": 8
            },
            {
                "sha": "a003dcfd62a852bdcfa0baa4552564b4cbd5fb2b",
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/VectorToMatrixTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/VectorToMatrixTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/c939bdba3a159d1ccb080686796b50a03ac77c9f/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/VectorToMatrixTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/math/impls/vector/VectorToMatrixTest.java?ref=c939bdba3a159d1ccb080686796b50a03ac77c9f",
                "patch": "@@ -188,9 +188,6 @@ public void testCross() {\n \n     /** */\n     private void assertCross(Vector v1, Vector v2, String desc) {\n-        if (true) // TODO: IGNITE-5777, wait BLAS integration.\n-            return;\n-\n         assertNotNull(v1);\n         assertNotNull(v2);\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in setOwners.",
        "commit": "https://github.com/apache/ignite/commit/0b9527e851fd7c1d63bfc427721ca8af80d54b0c",
        "parent": "https://github.com/apache/ignite/commit/a53544410dd15a3a5112d6de88648db21bd3fcf3",
        "bug_id": "ignite_74",
        "file": [
            {
                "sha": "7c62cca59c4c1641ed82003d8e786478206681da",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b9527e851fd7c1d63bfc427721ca8af80d54b0c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b9527e851fd7c1d63bfc427721ca8af80d54b0c/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java?ref=0b9527e851fd7c1d63bfc427721ca8af80d54b0c",
                "patch": "@@ -1722,7 +1722,7 @@ else if (plc != PartitionLossPolicy.IGNORE) {\n                     }\n \n                     U.warn(log, \"Partition has been scheduled for rebalancing due to outdated update counter \" +\n-                        \"[nodeId=\" + ctx.localNodeId() + \"cacheOrGroupName=\" + grp.cacheOrGroupName() +\n+                        \"[nodeId=\" + ctx.localNodeId() + \", cacheOrGroupName=\" + grp.cacheOrGroupName() +\n                         \", partId=\" + locPart.id() + \", haveHistory=\" + haveHistory + \"]\");\n \n                 }\n@@ -1743,8 +1743,8 @@ else if (plc != PartitionLossPolicy.IGNORE) {\n                 }\n \n                 U.warn(log, \"Partition has been scheduled for rebalancing due to outdated update counter \" +\n-                    \"[nodeId=\" + ctx.localNodeId() + \"cacheOrGroupName=\" + grp.cacheOrGroupName() +\n-                    \", partId=\" + locPart.id() + \", haveHistory=\" + haveHistory + \"]\");\n+                    \"[nodeId=\" + ctx.localNodeId() + \", cacheOrGroupName=\" + grp.cacheOrGroupName() +\n+                    \", partId=\" + p + \", haveHistory=\" + haveHistory + \"]\");\n             }\n \n             if (updateSeq)",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#ignite-180: Fix NullPointerException in DataStructuresProcessor.",
        "commit": "https://github.com/apache/ignite/commit/8f6e7a624306cbf184f7879c8f0169a3755ed1e4",
        "parent": "https://github.com/apache/ignite/commit/079186af3086a76b9d9cf98ad3f997f464f71d27",
        "bug_id": "ignite_75",
        "file": [
            {
                "sha": "1a9ea2342c4f3135684a104e0f295a7fce0632b1",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/8f6e7a624306cbf184f7879c8f0169a3755ed1e4/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/8f6e7a624306cbf184f7879c8f0169a3755ed1e4/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java?ref=8f6e7a624306cbf184f7879c8f0169a3755ed1e4",
                "patch": "@@ -1242,6 +1242,9 @@ private void checkAtomicsConfiguration() throws IgniteException {\n      * @return Name of the cache with compatible configuration or null.\n      */\n     private static String findCompatibleConfiguration(CollectionConfiguration cfg, List<CacheCollectionInfo> infos) {\n+        if (infos == null)\n+            return null;\n+\n         for (CacheCollectionInfo col : infos) {\n             if (col.cfg.getAtomicityMode() == cfg.getAtomicityMode() &&\n                 col.cfg.getMemoryMode() == cfg.getMemoryMode() &&",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "NPE in GridDhtPartitionDemander.requestPartitions.",
        "commit": "https://github.com/apache/ignite/commit/7b17bb85f262efa991c83e92cbf3545caedfac33",
        "parent": "https://github.com/apache/ignite/commit/f3b067271d5f1e393ffc01479ceaab541e143e8c",
        "bug_id": "ignite_76",
        "file": [
            {
                "sha": "15caae24563b134374072d927791f96b84eb22f0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "blob_url": "https://github.com/apache/ignite/blob/7b17bb85f262efa991c83e92cbf3545caedfac33/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "raw_url": "https://github.com/apache/ignite/raw/7b17bb85f262efa991c83e92cbf3545caedfac33/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java?ref=7b17bb85f262efa991c83e92cbf3545caedfac33",
                "patch": "@@ -363,7 +363,6 @@ else if (delay > 0) {\n     /**\n      * @param fut Rebalance future.\n      * @param assigns Assignments.\n-     * @throws IgniteCheckedException If failed.\n      */\n     private void requestPartitions(final RebalanceFuture fut, GridDhtPreloaderAssignments assigns) {\n         assert fut != null;\n@@ -398,10 +397,10 @@ private void requestPartitions(final RebalanceFuture fut, GridDhtPreloaderAssign\n         for (Map.Entry<ClusterNode, GridDhtPartitionDemandMessage> e : assigns.entrySet()) {\n             final ClusterNode node = e.getKey();\n \n-            final Collection<Integer> parts = fut.remaining.get(node.id()).get2();\n-\n             GridDhtPartitionDemandMessage d = e.getValue();\n \n+            final Collection<Integer> parts = d.partitions();\n+\n             U.log(log, \"Starting rebalancing [mode=\" + cfg.getRebalanceMode() +\n                 \", fromNode=\" + node.id() + \", partitionsCount=\" + parts.size() +\n                 \", topology=\" + fut.topologyVersion() + \", updateSeq=\" + fut.updateSeq + \"]\");",
                "deletions": 3
            },
            {
                "sha": "a8afa8b928a4fe40bbc95fa1f0f65cb6ed9318e9",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManagerAliveCacheSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/7b17bb85f262efa991c83e92cbf3545caedfac33/modules/core/src/test/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManagerAliveCacheSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/7b17bb85f262efa991c83e92cbf3545caedfac33/modules/core/src/test/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManagerAliveCacheSelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManagerAliveCacheSelfTest.java?ref=7b17bb85f262efa991c83e92cbf3545caedfac33",
                "patch": "@@ -169,8 +169,6 @@ public void testAlives() throws Exception {\n      * @throws Exception If failed.\n      */\n     public void testAlivesClient() throws Exception {\n-        fail(\"https://issues.apache.org/jira/browse/IGNITE-1583\");\n-\n         clientMode = true;\n \n         doTestAlive();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8531 Fixed NPE if checkpoint has no pages to write, but has partitions to destroy. - Fixes #4026.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4",
        "parent": "https://github.com/apache/ignite/commit/c2285c73c8ad0aad154f06e4b0adaf05685d37b1",
        "bug_id": "ignite_77",
        "file": [
            {
                "sha": "2eb6e6ffb1dd3acd7cb904c2a31c85597926766f",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 24,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4",
                "patch": "@@ -3110,6 +3110,8 @@ private void doCheckpoint() {\n \n                 boolean success = false;\n \n+                int destroyedPartitionsCnt;\n+\n                 try {\n                     if (chp.hasDelta()) {\n                         // Identity stores set.\n@@ -3196,7 +3198,7 @@ private void doCheckpoint() {\n                     snapshotMgr.afterCheckpointPageWritten();\n \n                     try {\n-                        destroyEvictedPartitions();\n+                        destroyedPartitionsCnt = destroyEvictedPartitions();\n                     }\n                     catch (IgniteCheckedException e) {\n                         chp.progress.cpFinishFut.onDone(e);\n@@ -3216,15 +3218,15 @@ private void doCheckpoint() {\n \n                 tracker.onEnd();\n \n-                if (chp.hasDelta()) {\n+                if (chp.hasDelta() || destroyedPartitionsCnt > 0) {\n                     if (printCheckpointStats) {\n                         if (log.isInfoEnabled())\n                             log.info(String.format(\"Checkpoint finished [cpId=%s, pages=%d, markPos=%s, \" +\n                                     \"walSegmentsCleared=%d, markDuration=%dms, pagesWrite=%dms, fsync=%dms, \" +\n                                     \"total=%dms]\",\n-                                chp.cpEntry.checkpointId(),\n+                                chp.cpEntry != null ? chp.cpEntry.checkpointId() : \"\",\n                                 chp.pagesSize,\n-                                chp.cpEntry.checkpointMark(),\n+                                chp.cpEntry != null ? chp.cpEntry.checkpointMark() : \"\",\n                                 chp.walFilesDeleted,\n                                 tracker.markDuration(),\n                                 tracker.pagesWriteDuration(),\n@@ -3264,12 +3266,14 @@ private void doCheckpoint() {\n          * Processes all evicted partitions scheduled for destroy.\n          *\n          * @throws IgniteCheckedException If failed.\n+         *\n+         * @return The number of destroyed partition files.\n          */\n-        private void destroyEvictedPartitions() throws IgniteCheckedException {\n+        private int destroyEvictedPartitions() throws IgniteCheckedException {\n             PartitionDestroyQueue destroyQueue = curCpProgress.destroyQueue;\n \n             if (destroyQueue.pendingReqs.isEmpty())\n-                return;\n+                return 0;\n \n             List<PartitionDestroyRequest> reqs = null;\n \n@@ -3327,6 +3331,8 @@ private void destroyEvictedPartitions() throws IgniteCheckedException {\n                     req.waitCompleted();\n \n             destroyQueue.pendingReqs.clear();\n+\n+            return reqs != null ? reqs.size() : 0;\n         }\n \n         /**\n@@ -3495,7 +3501,7 @@ private Checkpoint markCheckpointBegin(CheckpointMetricsTracker tracker) throws\n \n                 hasPages = hasPageForWrite(cpPagesTuple.get1());\n \n-                if (hasPages || curr.nextSnapshot) {\n+                if (hasPages || curr.nextSnapshot || !curr.destroyQueue.pendingReqs.isEmpty()) {\n                     // No page updates for this checkpoint are allowed from now on.\n                     cpPtr = cctx.wal().log(cpRec);\n \n@@ -3874,7 +3880,7 @@ private WriteCheckpointPages(\n      */\n     private static class Checkpoint {\n         /** Checkpoint entry. */\n-        private final CheckpointEntry cpEntry;\n+        @Nullable private final CheckpointEntry cpEntry;\n \n         /** Checkpoint pages. */\n         private final GridMultiCollectionWrapper<FullPageId> cpPages;\n@@ -3894,7 +3900,7 @@ private WriteCheckpointPages(\n          * @param progress Checkpoint progress status.\n          */\n         private Checkpoint(\n-            CheckpointEntry cpEntry,\n+            @Nullable CheckpointEntry cpEntry,\n             @NotNull GridMultiCollectionWrapper<FullPageId> cpPages,\n             CheckpointProgress progress\n         ) {",
                "deletions": 9
            },
            {
                "sha": "5e0ccc9ce1fc84e72b36b1c0674dcb165f9a8e52",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsPartitionFilesDestroyTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsPartitionFilesDestroyTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsPartitionFilesDestroyTest.java",
                "status": "modified",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/IgnitePdsPartitionFilesDestroyTest.java?ref=5c8d9ffa20fbe4497c5cd96a11f315df2baa9ba4",
                "patch": "@@ -19,6 +19,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.OpenOption;\n+import java.util.List;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.IgniteCheckedException;\n@@ -332,6 +333,33 @@ public void testPartitionFileDestroyCrashRecovery2() throws Exception {\n             checkData((IgniteEx) ignite, keysCnt, 1);\n     }\n \n+    /**\n+     * Test destroy when partition files are empty and there are no pages for checkpoint.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testDestroyWhenPartitionsAreEmpty() throws Exception {\n+        IgniteEx crd = (IgniteEx) startGrids(2);\n+\n+        crd.cluster().active(true);\n+\n+        forceCheckpoint();\n+\n+        // Evict arbitrary partition.\n+        List<GridDhtLocalPartition> parts = crd.cachex(CACHE).context().topology().localPartitions();\n+        for (GridDhtLocalPartition part : parts)\n+            if (part.state() != GridDhtPartitionState.EVICTED) {\n+                part.rent(false).get();\n+\n+                break;\n+            }\n+\n+        // This checkpoint has no pages to write, but has one partition file to destroy.\n+        forceCheckpoint(crd);\n+\n+        checkPartitionFiles(crd, false);\n+    }\n+\n     /**\n      * If {@code exists} is {@code true}, checks that all partition files exist\n      * if partition has state EVICTED.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-7396 NPE fixed\n\nSigned-off-by: Andrey Gura <agura@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/792ab3fe857cbf517f4e9dbaa038a6087b5f5bc1",
        "parent": "https://github.com/apache/ignite/commit/83f104aadcdbab91297b7a5b4d6809fbe1059f39",
        "bug_id": "ignite_78",
        "file": [
            {
                "sha": "138f73e6444f405fe86221771940159974da06bf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/792ab3fe857cbf517f4e9dbaa038a6087b5f5bc1/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/792ab3fe857cbf517f4e9dbaa038a6087b5f5bc1/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=792ab3fe857cbf517f4e9dbaa038a6087b5f5bc1",
                "patch": "@@ -1246,8 +1246,12 @@ public static double offheapSize(Iterable<ClusterNode> nodes, int precision) {\n         // In bytes.\n         double totalOffheap = 0.0;\n \n-        for (ClusterNode n : nodesPerJvm(nodes))\n-            totalOffheap += n.<Long>attribute(ATTR_DATA_REGIONS_OFFHEAP_SIZE);\n+        for (ClusterNode n : nodesPerJvm(nodes)) {\n+            Long val = n.<Long>attribute(ATTR_DATA_REGIONS_OFFHEAP_SIZE);\n+\n+            if (val != null)\n+                totalOffheap += val;\n+        }\n \n         return roundedHeapSize(totalOffheap, precision);\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE inf GridCacheInternalKeyImpl.",
        "commit": "https://github.com/apache/ignite/commit/b172b4b27b07d09e726faf0a3e41747d6158cdc8",
        "parent": "https://github.com/apache/ignite/commit/52626df05253afb520c5d96b25c9177ac38c61dc",
        "bug_id": "ignite_79",
        "file": [
            {
                "sha": "5cd3d85fecedbc39d8b1c29f2e85bfcee90de6ea",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheInternalKeyImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/b172b4b27b07d09e726faf0a3e41747d6158cdc8/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheInternalKeyImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/b172b4b27b07d09e726faf0a3e41747d6158cdc8/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheInternalKeyImpl.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheInternalKeyImpl.java?ref=b172b4b27b07d09e726faf0a3e41747d6158cdc8",
                "patch": "@@ -74,14 +74,24 @@ public GridCacheInternalKeyImpl() {\n     /** {@inheritDoc} */\n     @Override public int hashCode() {\n         int result = name != null ? name.hashCode() : 0;\n+\n         result = 31 * result + (grpName != null ? grpName.hashCode() : 0);\n+\n         return result;\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean equals(Object obj) {\n-        return this == obj || (obj instanceof GridCacheInternalKey && name.equals(((GridCacheInternalKey)obj).name())\n-            && grpName.equals(((GridCacheInternalKey)obj).groupName()));\n+        if (this == obj)\n+            return true;\n+\n+        if (obj instanceof GridCacheInternalKeyImpl) {\n+            GridCacheInternalKeyImpl other = (GridCacheInternalKeyImpl)obj;\n+\n+            return F.eq(name, other.name) && F.eq(grpName, other.grpName);\n+        }\n+\n+        return false;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-5415 Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/e6348d6cba34e53d55444aeaac55e4f83886d5c8",
        "parent": "https://github.com/apache/ignite/commit/179972871d5e6c214046ae878e8811cd899baa67",
        "bug_id": "ignite_80",
        "file": [
            {
                "sha": "7b4e25a2c77457a75618f98e8a386e8747c5f9ea",
                "filename": "modules/web-console/frontend/app/modules/configuration/generator/ConfigurationGenerator.js",
                "blob_url": "https://github.com/apache/ignite/blob/e6348d6cba34e53d55444aeaac55e4f83886d5c8/modules/web-console/frontend/app/modules/configuration/generator/ConfigurationGenerator.js",
                "raw_url": "https://github.com/apache/ignite/raw/e6348d6cba34e53d55444aeaac55e4f83886d5c8/modules/web-console/frontend/app/modules/configuration/generator/ConfigurationGenerator.js",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/frontend/app/modules/configuration/generator/ConfigurationGenerator.js?ref=e6348d6cba34e53d55444aeaac55e4f83886d5c8",
                "patch": "@@ -414,7 +414,7 @@ export default class IgniteConfigurationGenerator {\n         if (acfg.valueOf('cacheMode') === 'PARTITIONED')\n             acfg.intProperty('backups');\n \n-        if (available('2.1.0'))\n+        if (available('2.1.0') && _.nonNil(atomics))\n             this.affinity(atomics.affinity, acfg);\n \n         if (acfg.isEmpty())",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7632 Fixed NPE during IGFS metrics update - Fixes #3502.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/1974adc24f2b975118c8ed0057abd2fa7b748a7d",
        "parent": "https://github.com/apache/ignite/commit/e28f68ec4dc6629111e31fd0e85edf5ef02ff4cb",
        "bug_id": "ignite_81",
        "file": [
            {
                "sha": "f7892af8913b0a83d331349e3eceabbddcddec0e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/1974adc24f2b975118c8ed0057abd2fa7b748a7d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/1974adc24f2b975118c8ed0057abd2fa7b748a7d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java?ref=1974adc24f2b975118c8ed0057abd2fa7b748a7d",
                "patch": "@@ -1586,8 +1586,13 @@ private void updateIgfsMetrics(\n             CacheObject oldVal,\n             CacheObject newVal\n         ) {\n+            GridCacheAdapter cache = cctx.cache();\n+            if (cache == null) {\n+                return;\n+            }\n+\n             // In case we deal with IGFS cache, count updated data\n-            if (cctx.cache().isIgfsDataCache() &&\n+            if (cache.isIgfsDataCache() &&\n                 !cctx.isNear() &&\n                 ctx.kernalContext()\n                     .igfsHelper()\n@@ -1598,7 +1603,7 @@ private void updateIgfsMetrics(\n                 int delta = newSize - oldSize;\n \n                 if (delta != 0)\n-                    cctx.cache().onIgfsDataSizeChanged(delta);\n+                    cache.onIgfsDataSizeChanged(delta);\n             }\n         }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4862: Fixed NPE when reading data from IGFS. This closes #1706.",
        "commit": "https://github.com/apache/ignite/commit/5cd3e263b9ca1464044c1eec24fc642873a881ab",
        "parent": "https://github.com/apache/ignite/commit/edc66af8221508e8d892bd9bd1e550ada9ac4a47",
        "bug_id": "ignite_82",
        "file": [
            {
                "sha": "90b5e9b3c4726d88c9f9ffc234cfdc0f781a4b20",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java?ref=5cd3e263b9ca1464044c1eec24fc642873a881ab",
                "patch": "@@ -419,9 +419,11 @@ public ClusterNode affinityNode(Object affinityKey) {\n         int read = 0;\n \n         try {\n+            int r;\n+\n             // Delegate to the secondary file system.\n             while (read < blockSize) {\n-                int r = secReader.read(pos + read, res, read, blockSize - read);\n+                r = secReader.read(pos + read, res, read, blockSize - read);\n \n                 if (r < 0)\n                     break;",
                "deletions": 1
            },
            {
                "sha": "bbb542084d5dff4388b39e1a68a6718ace2822af",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsLazySecondaryFileSystemPositionedReadable.java",
                "blob_url": "https://github.com/apache/ignite/blob/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsLazySecondaryFileSystemPositionedReadable.java",
                "raw_url": "https://github.com/apache/ignite/raw/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsLazySecondaryFileSystemPositionedReadable.java",
                "status": "modified",
                "changes": 15,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsLazySecondaryFileSystemPositionedReadable.java?ref=5cd3e263b9ca1464044c1eec24fc642873a881ab",
                "patch": "@@ -37,6 +37,9 @@\n     /** Buffer size. */\n     private final int bufSize;\n \n+    /** Synchronization mutex. */\n+    private final Object mux = new Object();\n+\n     /** Target stream. */\n     private IgfsSecondaryFileSystemPositionedReadable target;\n \n@@ -58,16 +61,20 @@ public IgfsLazySecondaryFileSystemPositionedReadable(IgfsSecondaryFileSystem fs,\n \n     /** {@inheritDoc} */\n     @Override public int read(long pos, byte[] buf, int off, int len) throws IOException {\n-        if (target == null)\n-            target = fs.open(path, bufSize);\n+        synchronized (mux) {\n+            if (target == null)\n+                target = fs.open(path, bufSize);\n+        }\n \n         return target.read(pos, buf, off, len);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void close() throws IOException {\n-        if (target != null)\n-            target.close();\n+        synchronized (mux) {\n+            if (target != null)\n+                target.close();\n+        }\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 4
            },
            {
                "sha": "84f628328f48bcb6c23daac32916f6bc32c47d3b",
                "filename": "modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/impl/igfs/HadoopIgfsSecondaryFileSystemPositionedReadable.java",
                "blob_url": "https://github.com/apache/ignite/blob/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/impl/igfs/HadoopIgfsSecondaryFileSystemPositionedReadable.java",
                "raw_url": "https://github.com/apache/ignite/raw/5cd3e263b9ca1464044c1eec24fc642873a881ab/modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/impl/igfs/HadoopIgfsSecondaryFileSystemPositionedReadable.java",
                "status": "modified",
                "changes": 41,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/impl/igfs/HadoopIgfsSecondaryFileSystemPositionedReadable.java?ref=5cd3e263b9ca1464044c1eec24fc642873a881ab",
                "patch": "@@ -42,6 +42,9 @@\n     /** Buffer size. */\n     private final int bufSize;\n \n+    /** Synchronization mutex. */\n+    private final Object mux = new Object();\n+\n     /** Actual input stream. */\n     private FSDataInputStream in;\n \n@@ -69,34 +72,38 @@ public HadoopIgfsSecondaryFileSystemPositionedReadable(FileSystem fs, Path path,\n \n     /** Get input stream. */\n     private PositionedReadable in() throws IOException {\n-        if (opened) {\n-            if (err != null)\n-                throw err;\n-        }\n-        else {\n-            opened = true;\n+        synchronized (mux) {\n+            if (opened) {\n+                if (err != null)\n+                    throw err;\n+            }\n+            else {\n+                opened = true;\n \n-            try {\n-                in = fs.open(path, bufSize);\n+                try {\n+                    in = fs.open(path, bufSize);\n \n-                if (in == null)\n-                    throw new IOException(\"Failed to open input stream (file system returned null): \" + path);\n-            }\n-            catch (IOException e) {\n-                err = e;\n+                    if (in == null)\n+                        throw new IOException(\"Failed to open input stream (file system returned null): \" + path);\n+                }\n+                catch (IOException e) {\n+                    err = e;\n \n-                throw err;\n+                    throw err;\n+                }\n             }\n-        }\n \n-        return in;\n+            return in;\n+        }\n     }\n \n     /**\n      * Close wrapped input stream in case it was previously opened.\n      */\n     @Override public void close() {\n-        U.closeQuiet(in);\n+        synchronized (mux) {\n+            U.closeQuiet(in);\n+        }\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 17
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6404 Fix failures in .NET (NPE in ExceptionUtils, inspections)",
        "commit": "https://github.com/apache/ignite/commit/22002141a1d594556f1b72fa0dd139ab0a1414aa",
        "parent": "https://github.com/apache/ignite/commit/64b4abe52fcc5b506529d063cd43db43943e0f14",
        "bug_id": "ignite_83",
        "file": [
            {
                "sha": "b8bd6fe5d1602e89d42cc6b22e4bc0cb637eebde",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/ICacheClient.cs",
                "blob_url": "https://github.com/apache/ignite/blob/22002141a1d594556f1b72fa0dd139ab0a1414aa/modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/ICacheClient.cs",
                "raw_url": "https://github.com/apache/ignite/raw/22002141a1d594556f1b72fa0dd139ab0a1414aa/modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/ICacheClient.cs",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Client/Cache/ICacheClient.cs?ref=22002141a1d594556f1b72fa0dd139ab0a1414aa",
                "patch": "@@ -22,6 +22,7 @@ namespace Apache.Ignite.Core.Client.Cache\n     /// <summary>\n     /// Client cache API. See <see cref=\"IIgniteClient.GetCache{K, V}\"/>.\n     /// </summary>\n+    // ReSharper disable once TypeParameterCanBeVariant (ICache shoul not be variant, more methods will be added)\n     public interface ICacheClient<TK, TV>\n     {\n         /// <summary>",
                "deletions": 0
            },
            {
                "sha": "b81d04b5784a8aea7e675057bee85e5493e411aa",
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/ExceptionUtils.cs",
                "blob_url": "https://github.com/apache/ignite/blob/22002141a1d594556f1b72fa0dd139ab0a1414aa/modules/platforms/dotnet/Apache.Ignite.Core/Impl/ExceptionUtils.cs",
                "raw_url": "https://github.com/apache/ignite/raw/22002141a1d594556f1b72fa0dd139ab0a1414aa/modules/platforms/dotnet/Apache.Ignite.Core/Impl/ExceptionUtils.cs",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/ExceptionUtils.cs?ref=22002141a1d594556f1b72fa0dd139ab0a1414aa",
                "patch": "@@ -115,19 +115,21 @@ static ExceptionUtils()\n         /// <summary>\n         /// Creates exception according to native code class and message.\n         /// </summary>\n-        /// <param name=\"ignite\">The ignite.</param>\n+        /// <param name=\"igniteInt\">The ignite.</param>\n         /// <param name=\"clsName\">Exception class name.</param>\n         /// <param name=\"msg\">Exception message.</param>\n         /// <param name=\"stackTrace\">Native stack trace.</param>\n         /// <param name=\"reader\">Error data reader.</param>\n         /// <param name=\"innerException\">Inner exception.</param>\n         /// <returns>Exception.</returns>\n-        public static Exception GetException(IIgniteInternal ignite, string clsName, string msg, string stackTrace,\n+        public static Exception GetException(IIgniteInternal igniteInt, string clsName, string msg, string stackTrace,\n             BinaryReader reader = null, Exception innerException = null)\n         {\n             // Set JavaException as immediate inner.\n             innerException = new JavaException(clsName, msg, stackTrace, innerException);\n \n+            var ignite = igniteInt == null ? null : igniteInt.GetIgnite();\n+\n             ExceptionFactory ctor;\n \n             if (Exs.TryGetValue(clsName, out ctor))\n@@ -139,11 +141,11 @@ static ExceptionUtils()\n                 if (match.Success && Exs.TryGetValue(match.Groups[1].Value, out innerCtor))\n                 {\n                     return ctor(clsName, msg,\n-                        innerCtor(match.Groups[1].Value, match.Groups[2].Value, innerException, ignite.GetIgnite()), \n-                        ignite.GetIgnite());\n+                        innerCtor(match.Groups[1].Value, match.Groups[2].Value, innerException, ignite), \n+                        ignite);\n                 }\n \n-                return ctor(clsName, msg, innerException, ignite.GetIgnite());\n+                return ctor(clsName, msg, innerException, ignite);\n             }\n \n             if (ClsNoClsDefFoundErr.Equals(clsName, StringComparison.OrdinalIgnoreCase))\n@@ -155,16 +157,16 @@ static ExceptionUtils()\n                     \"variable?): \" + msg, innerException);\n \n             if (ClsCachePartialUpdateErr.Equals(clsName, StringComparison.OrdinalIgnoreCase))\n-                return ProcessCachePartialUpdateException(ignite, msg, stackTrace, reader);\n+                return ProcessCachePartialUpdateException(igniteInt, msg, stackTrace, reader);\n \n             // Predefined mapping not found - check plugins.\n-            if (ignite != null && ignite.PluginProcessor != null)\n+            if (igniteInt != null && igniteInt.PluginProcessor != null)\n             {\n-                ctor = ignite.PluginProcessor.GetExceptionMapping(clsName);\n+                ctor = igniteInt.PluginProcessor.GetExceptionMapping(clsName);\n \n                 if (ctor != null)\n                 {\n-                    return ctor(clsName, msg, innerException, ignite.GetIgnite());\n+                    return ctor(clsName, msg, innerException, ignite);\n                 }\n             }\n ",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-8280 Fix of NPE on some cases at the QueryEntity.getDecimalInfo - Fixes #3831.\n\nSigned-off-by: dpavlov <dpavlov@apache.org>",
        "commit": "https://github.com/apache/ignite/commit/9557f6dcbbe5d86d892ffaca5a9bb66cc5401e84",
        "parent": "https://github.com/apache/ignite/commit/7586cfd50e01fd7d781ad652df23734a7ebeb54d",
        "bug_id": "ignite_84",
        "file": [
            {
                "sha": "976bd67a69e3004cd6374595062c8ef73b6ab779",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/QueryEntity.java",
                "blob_url": "https://github.com/apache/ignite/blob/9557f6dcbbe5d86d892ffaca5a9bb66cc5401e84/modules/core/src/main/java/org/apache/ignite/cache/QueryEntity.java",
                "raw_url": "https://github.com/apache/ignite/raw/9557f6dcbbe5d86d892ffaca5a9bb66cc5401e84/modules/core/src/main/java/org/apache/ignite/cache/QueryEntity.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/QueryEntity.java?ref=9557f6dcbbe5d86d892ffaca5a9bb66cc5401e84",
                "patch": "@@ -405,7 +405,7 @@ public QueryEntity setNotNullFields(@Nullable Set<String> notNullFields) {\n      * @return Set of names of fields that must have non-null values.\n      */\n     public Map<String, IgniteBiTuple<Integer, Integer>> getDecimalInfo() {\n-        return unmodifiableMap(decimalInfo);\n+        return decimalInfo == null ? Collections.emptyMap() : unmodifiableMap(decimalInfo);\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Quick fix for NPE in PageMemoryImpl.loadedPages",
        "commit": "https://github.com/apache/ignite/commit/f2a5a93f0748f905ede77ff84787947a0893c3f8",
        "parent": "https://github.com/apache/ignite/commit/fd09d301b14a2e20774503359bcef4280a67da92",
        "bug_id": "ignite_85",
        "file": [
            {
                "sha": "6bb5c337db0f90056259b2699753771461259513",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "status": "modified",
                "changes": 21,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=f2a5a93f0748f905ede77ff84787947a0893c3f8",
                "patch": "@@ -1014,14 +1014,21 @@ private void copyInBuffer(long absPtr, ByteBuffer tmpBuf) {\n     @Override public long loadedPages() {\n         long total = 0;\n \n-        for (Segment seg : segments) {\n-            seg.readLock().lock();\n+        Segment[] segments = this.segments;\n \n-            try {\n-                total += seg.loadedPages.size();\n-            }\n-            finally {\n-                seg.readLock().unlock();\n+        if (segments != null) {\n+            for (Segment seg : segments) {\n+                if (seg == null)\n+                    break;\n+\n+                seg.readLock().lock();\n+\n+                try {\n+                    total += seg.loadedPages.size();\n+                }\n+                finally {\n+                    seg.readLock().unlock();\n+                }\n             }\n         }\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#ignite-841: NullPointerException at IgfsMetaManager.onKernalStart0 (IgfsMetaManager.java:115).",
        "commit": "https://github.com/apache/ignite/commit/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
        "parent": "https://github.com/apache/ignite/commit/d4908f2449a4fde9298f6ca11590e0a94a94c955",
        "bug_id": "ignite_86",
        "file": [
            {
                "sha": "0e1a9c23ec0a81ee0e6641d52377c2f4b5f39b4e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 72,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -2451,6 +2451,24 @@ public long lastDataVersion() {\n         return jcache == null ? null : jcache.internalProxy();\n     }\n \n+    /**\n+     * @param name Cache name.\n+     * @return Cache instance for given name.\n+     * @throws IgniteCheckedException If failed.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public <K, V> IgniteInternalCache<K, V> getOrStartCache(@Nullable String name) throws IgniteCheckedException {\n+        if (log.isDebugEnabled())\n+            log.debug(\"Getting cache for name: \" + name);\n+\n+        IgniteCache<K, V> jcache = (IgniteCache<K, V>)jCacheProxies.get(maskNull(name));\n+\n+        if (jcache == null)\n+            jcache = startJCache(name, true);\n+\n+        return jcache == null ? null : ((IgniteCacheProxy<K, V>)jcache).internalProxy();\n+    }\n+\n     /**\n      * @return All configured cache instances.\n      */\n@@ -2558,37 +2576,53 @@ public long lastDataVersion() {\n         if (desc != null && !desc.cacheType().userCache())\n             throw new IllegalStateException(\"Failed to get cache because it is a system cache: \" + cacheName);\n \n-        if (cache == null) {\n-            if (desc == null || desc.cancelled()) {\n-                if (failIfNotStarted)\n-                    throw new IllegalArgumentException(\"Cache is not started: \" + cacheName);\n+        if (cache == null)\n+           cache = startJCache(cacheName, failIfNotStarted);\n \n-                return null;\n-            }\n+        return cache;\n+    }\n \n-            DynamicCacheChangeRequest req = new DynamicCacheChangeRequest(cacheName, ctx.localNodeId());\n+    /**\n+     * @param cacheName Cache name.\n+     * @param failIfNotStarted If {@code true} throws {@link IllegalArgumentException} if cache is not started,\n+     *        otherwise returns {@code null} in this case.\n+     * @return Cache instance for given name.\n+     * @throws IgniteCheckedException If failed.\n+     */\n+    private IgniteCache startJCache(String cacheName, boolean failIfNotStarted) throws IgniteCheckedException {\n+        String masked = maskNull(cacheName);\n \n-            req.cacheName(cacheName);\n+        DynamicCacheDescriptor desc = registeredCaches.get(masked);\n \n-            req.deploymentId(desc.deploymentId());\n+        if (desc == null || desc.cancelled()) {\n+            if (failIfNotStarted)\n+                throw new IllegalArgumentException(\"Cache is not started: \" + cacheName);\n \n-            CacheConfiguration cfg = new CacheConfiguration(desc.cacheConfiguration());\n+            return null;\n+        }\n \n-            cfg.setNearConfiguration(null);\n+        DynamicCacheChangeRequest req = new DynamicCacheChangeRequest(cacheName, ctx.localNodeId());\n \n-            req.startCacheConfiguration(cfg);\n+        req.cacheName(cacheName);\n \n-            req.cacheType(desc.cacheType());\n+        req.deploymentId(desc.deploymentId());\n \n-            req.clientStartOnly(true);\n+        CacheConfiguration cfg = new CacheConfiguration(desc.cacheConfiguration());\n \n-            F.first(initiateCacheChanges(F.asList(req))).get();\n+        cfg.setNearConfiguration(null);\n \n-            cache = (IgniteCache<K, V>)jCacheProxies.get(masked);\n+        req.startCacheConfiguration(cfg);\n \n-            if (cache == null && failIfNotStarted)\n-                throw new IllegalArgumentException(\"Cache is not started: \" + cacheName);\n-        }\n+        req.cacheType(desc.cacheType());\n+\n+        req.clientStartOnly(true);\n+\n+        F.first(initiateCacheChanges(F.asList(req))).get();\n+\n+        IgniteCache cache = jCacheProxies.get(masked);\n+\n+        if (cache == null && failIfNotStarted)\n+            throw new IllegalArgumentException(\"Cache is not started: \" + cacheName);\n \n         return cache;\n     }",
                "deletions": 19
            },
            {
                "sha": "aa6427d78753ec6c6f0f44dbc2abdd5784c816a8",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -202,7 +202,10 @@ else if (msg instanceof IgfsAckMessage)\n \n     /** {@inheritDoc} */\n     @Override protected void onKernalStart0() throws IgniteCheckedException {\n+        igfsCtx.kernalContext().cache().getOrStartCache(igfsCtx.configuration().getDataCacheName());\n         dataCachePrj = igfsCtx.kernalContext().cache().internalCache(igfsCtx.configuration().getDataCacheName());\n+\n+        igfsCtx.kernalContext().cache().getOrStartCache(igfsCtx.configuration().getDataCacheName());\n         dataCache = igfsCtx.kernalContext().cache().internalCache(igfsCtx.configuration().getDataCacheName());\n \n         metrics = igfsCtx.igfs().localMetrics();",
                "deletions": 0
            },
            {
                "sha": "e33e0d4b7afe0aaa99384c39abfda864f090d9c2",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -108,7 +108,7 @@ void awaitInit() {\n \n     /** {@inheritDoc} */\n     @Override protected void onKernalStart0() throws IgniteCheckedException {\n-        metaCache = igfsCtx.kernalContext().cache().cache(cfg.getMetaCacheName());\n+        metaCache = igfsCtx.kernalContext().cache().getOrStartCache(cfg.getMetaCacheName());\n \n         assert metaCache != null;\n ",
                "deletions": 1
            },
            {
                "sha": "d98330279b7a395713960bb68c6d37eed6b554db",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsClientCacheSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsClientCacheSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsClientCacheSelfTest.java",
                "status": "added",
                "changes": 132,
                "additions": 132,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsClientCacheSelfTest.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.igfs;\n+\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.cache.*;\n+import org.apache.ignite.configuration.*;\n+import org.apache.ignite.igfs.*;\n+import org.apache.ignite.igfs.secondary.IgfsSecondaryFileSystem;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.spi.discovery.tcp.*;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.*;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*;\n+\n+import static org.apache.ignite.cache.CacheAtomicityMode.*;\n+import static org.apache.ignite.cache.CacheMode.*;\n+\n+/**\n+ * Test for igfs with nodes in client mode (see {@link IgniteConfiguration#setClientMode(boolean)}.\n+ */\n+public class IgfsClientCacheSelfTest extends IgfsAbstractSelfTest {\n+    /** */\n+    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** Meta-information cache name. */\n+    private static final String META_CACHE_NAME = \"meta\";\n+\n+    /** Data cache name. */\n+    private static final String DATA_CACHE_NAME = null;\n+\n+    /** Regular cache name. */\n+    private static final String CACHE_NAME = \"cache\";\n+\n+    /**\n+     * Constructor.\n+     */\n+    public IgfsClientCacheSelfTest() {\n+        super(IgfsMode.PRIMARY);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        igfsSecondaryFileSystem = createSecondaryFileSystemStack();\n+\n+        Ignite ignite1 = G.start(getConfiguration(getTestGridName(1)));\n+\n+        igfs = (IgfsImpl) ignite1.fileSystem(\"igfs\");\n+    }\n+\n+    /**{@inheritDoc} */\n+    protected IgfsSecondaryFileSystem createSecondaryFileSystemStack() throws Exception {\n+        Ignite igniteSecondary = G.start(getConfiguration(getTestGridName(0)));\n+\n+        IgfsEx secondaryIgfsImpl = (IgfsEx)igniteSecondary.fileSystem(\"igfs\");\n+\n+        igfsSecondary = new IgfsExUniversalFileSystemAdapter(secondaryIgfsImpl);\n+\n+        return secondaryIgfsImpl.asSecondary();\n+    }\n+\n+    /**\n+     *\n+     * @param gridName Grid name.\n+     * @return Ignite configuration.\n+     * @throws Exception If failed.\n+     */\n+    protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        cfg.setCacheConfiguration(cacheConfiguration(META_CACHE_NAME), cacheConfiguration(DATA_CACHE_NAME),\n+            cacheConfiguration(CACHE_NAME));\n+\n+        if (!gridName.equals(getTestGridName(0)))\n+            cfg.setClientMode(true);\n+\n+        TcpDiscoverySpi disco = new TcpDiscoverySpi();\n+\n+        disco.setIpFinder(IP_FINDER);\n+\n+        cfg.setDiscoverySpi(disco);\n+\n+        FileSystemConfiguration igfsCfg = new FileSystemConfiguration();\n+\n+        igfsCfg.setMetaCacheName(META_CACHE_NAME);\n+        igfsCfg.setDataCacheName(DATA_CACHE_NAME);\n+        igfsCfg.setName(\"igfs\");\n+\n+        cfg.setFileSystemConfiguration(igfsCfg);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * @param cacheName Cache name.\n+     * @return Cache configuration.\n+     */\n+    protected CacheConfiguration cacheConfiguration(String cacheName) {\n+        CacheConfiguration cacheCfg = defaultCacheConfiguration();\n+\n+        cacheCfg.setName(cacheName);\n+\n+        if (META_CACHE_NAME.equals(cacheName))\n+            cacheCfg.setCacheMode(REPLICATED);\n+        else {\n+            cacheCfg.setCacheMode(PARTITIONED);\n+            cacheCfg.setNearConfiguration(null);\n+\n+            cacheCfg.setBackups(0);\n+            cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));\n+        }\n+\n+        cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);\n+        cacheCfg.setAtomicityMode(TRANSACTIONAL);\n+\n+        return cacheCfg;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "d3775606cc1c1d545e3013d72e7d5e934c60e5f2",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -154,7 +154,7 @@ protected CacheConfiguration cacheConfiguration(String cacheName) {\n      */\n     public void testConfiguration() throws IgniteCheckedException {\n         IgniteInternalCache metaCache = getFieldValue(fs, \"meta\", \"metaCache\");\n-        GridCacheAdapter dataCache = getFieldValue(fs, \"data\", \"dataCache\");\n+        IgniteInternalCache dataCache = getFieldValue(fs, \"data\", \"dataCache\");\n \n         assertNotNull(metaCache);\n         assertEquals(META_CACHE_NAME, metaCache.name());",
                "deletions": 1
            },
            {
                "sha": "4f3178e5af50a4f380418a22e449dd753194c737",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteIgfsTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteIgfsTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/a452dac26c47ac10586f1f49bc26f03b6b5e6fd4/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteIgfsTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteIgfsTestSuite.java?ref=a452dac26c47ac10586f1f49bc26f03b6b5e6fd4",
                "patch": "@@ -59,6 +59,8 @@ public static TestSuite suite() throws Exception {\n         suite.addTest(new TestSuite(IgfsDualSyncSelfTest.class));\n         suite.addTest(new TestSuite(IgfsDualAsyncSelfTest.class));\n \n+        suite.addTest(new TestSuite(IgfsClientCacheSelfTest.class));\n+\n         suite.addTest(new TestSuite(IgfsModeResolverSelfTest.class));\n \n         suite.addTestSuite(IgfsFragmentizerSelfTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4643: Fixed NPE in  JdbcDatabaseMetadata.getIndexInfo(). This closes #2481.",
        "commit": "https://github.com/apache/ignite/commit/ac94426ced2cee5df2c993029e2a17ea5a9aa398",
        "parent": "https://github.com/apache/ignite/commit/d22631e647280eff9f661dd7cfd492a6ba7460af",
        "bug_id": "ignite_87",
        "file": [
            {
                "sha": "f2ef769ed0c7177f3fd508e3a8d8d0e2a82f8f33",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ac94426ced2cee5df2c993029e2a17ea5a9aa398/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ac94426ced2cee5df2c993029e2a17ea5a9aa398/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java?ref=ac94426ced2cee5df2c993029e2a17ea5a9aa398",
                "patch": "@@ -277,6 +277,23 @@ public void testMetadataResultSetClose() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testIndexMetadata() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(BASE_URL);\n+             ResultSet rs = conn.getMetaData().getIndexInfo(null, \"pers\", \"PERSON\", false, false)) {\n+\n+            int cnt = 0;\n+\n+            while (rs.next()) {\n+                cnt++;\n+            }\n+\n+            assertEquals(0, cnt);\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 0
            },
            {
                "sha": "e9a5fde77d153d10b0fe20d694ad27fe4524932e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java",
                "blob_url": "https://github.com/apache/ignite/blob/ac94426ced2cee5df2c993029e2a17ea5a9aa398/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java",
                "raw_url": "https://github.com/apache/ignite/raw/ac94426ced2cee5df2c993029e2a17ea5a9aa398/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java?ref=ac94426ced2cee5df2c993029e2a17ea5a9aa398",
                "patch": "@@ -965,6 +965,8 @@\n     /** {@inheritDoc} */\n     @Override public ResultSet getIndexInfo(String catalog, String schema, String tbl, boolean unique,\n         boolean approximate) throws SQLException {\n+        updateMetaData();\n+\n         Collection<List<?>> rows = new ArrayList<>(indexes.size());\n \n         for (List<Object> idx : indexes) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-6124 Fixed NPE in GridDhtPartitionsExchangeFuture.topologyVersion after future cleanup.",
        "commit": "https://github.com/apache/ignite/commit/2c9057a3eb060cb5beb8ae9bc4173d15d99433e4",
        "parent": "https://github.com/apache/ignite/commit/1f5054a2cfc94ae044b77251818583811d5ea1a6",
        "bug_id": "ignite_88",
        "file": [
            {
                "sha": "ceb5abc418587a1c8c6a4ba133c557af61cc2731",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/2c9057a3eb060cb5beb8ae9bc4173d15d99433e4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/2c9057a3eb060cb5beb8ae9bc4173d15d99433e4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=2c9057a3eb060cb5beb8ae9bc4173d15d99433e4",
                "patch": "@@ -365,7 +365,7 @@ public AffinityTopologyVersion initialVersion() {\n          */\n         assert exchangeDone() : \"Should not be called before exchange is finished\";\n \n-        return exchCtx.events().topologyVersion();\n+        return isDone() ? result() : exchCtx.events().topologyVersion();\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6947 Abandon remap after single map if future is done (fixes NPE)",
        "commit": "https://github.com/apache/ignite/commit/38f66c7f7735bab7c7ae581269f67a45246253ba",
        "parent": "https://github.com/apache/ignite/commit/e3099cc47e4086605312d88aeda3ca85e1e6aeff",
        "bug_id": "ignite_89",
        "file": [
            {
                "sha": "6cf076b2708b8372896fdb25a11cdd5015835ecf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/38f66c7f7735bab7c7ae581269f67a45246253ba/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/38f66c7f7735bab7c7ae581269f67a45246253ba/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java?ref=38f66c7f7735bab7c7ae581269f67a45246253ba",
                "patch": "@@ -368,20 +368,20 @@ private void prepareSingle(IgniteTxEntry write, boolean topLocked, boolean remap\n \n         GridDistributedTxMapping mapping = map(write, topVer, null, topLocked, remap);\n \n-        if (mapping.primary().isLocal()) {\n-            if (write.context().isNear())\n-                tx.nearLocallyMapped(true);\n-            else if (write.context().isColocated())\n-                tx.colocatedLocallyMapped(true);\n-        }\n-\n         if (isDone()) {\n             if (log.isDebugEnabled())\n                 log.debug(\"Abandoning (re)map because future is done: \" + this);\n \n             return;\n         }\n \n+        if (mapping.primary().isLocal()) {\n+            if (write.context().isNear())\n+                tx.nearLocallyMapped(true);\n+            else if (write.context().isColocated())\n+                tx.colocatedLocallyMapped(true);\n+        }\n+\n         if (keyLockFut != null)\n             keyLockFut.onAllKeysAdded();\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-5267 - Fixed NPE in checkpointer",
        "commit": "https://github.com/apache/ignite/commit/f9ed6120baa6d0db826f1e58f4fd7b791711734a",
        "parent": "https://github.com/apache/ignite/commit/ffe1a010c9452954aabd091b25e3dc47128acdcd",
        "bug_id": "ignite_90",
        "file": [
            {
                "sha": "10b664d10b9ea9b9e490fdb77324fb380ff5cc46",
                "filename": "modules/pds/src/main/java/org/apache/ignite/internal/processors/cache/database/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/f9ed6120baa6d0db826f1e58f4fd7b791711734a/modules/pds/src/main/java/org/apache/ignite/internal/processors/cache/database/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/f9ed6120baa6d0db826f1e58f4fd7b791711734a/modules/pds/src/main/java/org/apache/ignite/internal/processors/cache/database/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/pds/src/main/java/org/apache/ignite/internal/processors/cache/database/GridCacheDatabaseSharedManager.java?ref=f9ed6120baa6d0db826f1e58f4fd7b791711734a",
                "patch": "@@ -1928,8 +1928,6 @@ private void doCheckpoint() {\n \n                 snapshotMgr.onCheckPointBegin();\n \n-                int pages = chp.cpPages.size();\n-\n                 boolean interrupted = true;\n \n                 try {\n@@ -2016,7 +2014,7 @@ private void doCheckpoint() {\n                                     \"walSegmentsCleared=%d, markDuration=%dms, pagesWrite=%dms, fsync=%dms, \" +\n                                     \"total=%dms]\",\n                                 chp.cpEntry.checkpointId(),\n-                                pages,\n+                                chp.pagesSize,\n                                 chp.cpEntry.checkpointMark(),\n                                 chp.walFilesDeleted,\n                                 tracker.markDuration(),\n@@ -2031,7 +2029,7 @@ private void doCheckpoint() {\n                         tracker.pagesWriteDuration(),\n                         tracker.fsyncDuration(),\n                         tracker.totalDuration(),\n-                        pages,\n+                        chp.pagesSize,\n                         tracker.dataPagesWritten(),\n                         tracker.cowPagesWritten());\n                 }\n@@ -2042,7 +2040,7 @@ private void doCheckpoint() {\n                         tracker.pagesWriteDuration(),\n                         tracker.fsyncDuration(),\n                         tracker.totalDuration(),\n-                        pages,\n+                        chp.pagesSize,\n                         tracker.dataPagesWritten(),\n                         tracker.cowPagesWritten());\n                 }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-2.0 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/a4d91484384ff2e0323fa9375083621e87d2f5e2",
        "parent": "https://github.com/apache/ignite/commit/32379ee4c6680a58121a72c7e5b9809a713ef1c3",
        "bug_id": "ignite_91",
        "file": [
            {
                "sha": "015646d78d81aff197d3afaa2d1c8e7722481b74",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/a4d91484384ff2e0323fa9375083621e87d2f5e2/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/a4d91484384ff2e0323fa9375083621e87d2f5e2/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java?ref=a4d91484384ff2e0323fa9375083621e87d2f5e2",
                "patch": "@@ -1272,7 +1272,8 @@ else if (op instanceof SchemaIndexDropOperation) {\n     private void registerCache0(String space, GridCacheContext<?, ?> cctx, Collection<QueryTypeCandidate> cands)\n         throws IgniteCheckedException {\n         synchronized (stateMux) {\n-            idx.registerCache(space, cctx, cctx.config());\n+            if (idx != null)\n+                idx.registerCache(space, cctx, cctx.config());\n \n             try {\n                 for (QueryTypeCandidate cand : cands) {\n@@ -1301,7 +1302,8 @@ private void registerCache0(String space, GridCacheContext<?, ?> cctx, Collectio\n                         }\n                     }\n \n-                    idx.registerType(space, desc);\n+                    if (idx != null)\n+                        idx.registerType(space, desc);\n                 }\n \n                 spaces.add(CU.mask(space));",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE when test kernal context is used",
        "commit": "https://github.com/apache/ignite/commit/56868102ef46e37a914593fa0f81317ccb8e4cc4",
        "parent": "https://github.com/apache/ignite/commit/17d881ba0122a7f90cac9846c376300a1d001bdd",
        "bug_id": "ignite_92",
        "file": [
            {
                "sha": "6b39faaf019925331440050b8e037f4ef0f0c008",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/GridTestKernalContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/56868102ef46e37a914593fa0f81317ccb8e4cc4/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridTestKernalContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/56868102ef46e37a914593fa0f81317ccb8e4cc4/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridTestKernalContext.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridTestKernalContext.java?ref=56868102ef46e37a914593fa0f81317ccb8e4cc4",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.ignite.testframework.junits;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.concurrent.ExecutorService;\n@@ -28,8 +29,10 @@\n import org.apache.ignite.internal.GridKernalGatewayImpl;\n import org.apache.ignite.internal.GridLoggerProxy;\n import org.apache.ignite.internal.IgniteKernal;\n+import org.apache.ignite.internal.processors.plugin.IgnitePluginProcessor;\n import org.apache.ignite.internal.util.typedef.internal.S;\n import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.plugin.PluginProvider;\n import org.apache.ignite.testframework.GridTestUtils;\n \n /**\n@@ -41,6 +44,13 @@\n      */\n     public GridTestKernalContext(IgniteLogger log) {\n         this(log, new IgniteConfiguration());\n+\n+        try {\n+            add(new IgnitePluginProcessor(this, config(), Collections.<PluginProvider>emptyList()));\n+        }\n+        catch (IgniteCheckedException e) {\n+            throw new IllegalStateException(\"Must not fail for empty plugins list.\", e);\n+        }\n     }\n \n     /**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed potential NPE on index rebuild when it is finished too early and cache configuration is not available yet.",
        "commit": "https://github.com/apache/ignite/commit/b0f6d19b37870ef84549b34aea385522713a509d",
        "parent": "https://github.com/apache/ignite/commit/226711357db742a5073a98ef179997480e1b1a56",
        "bug_id": "ignite_93",
        "file": [
            {
                "sha": "3a00e24bcd5f820bdd2f39cd0fc3dc5773094834",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/b0f6d19b37870ef84549b34aea385522713a509d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/b0f6d19b37870ef84549b34aea385522713a509d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=b0f6d19b37870ef84549b34aea385522713a509d",
                "patch": "@@ -63,6 +63,7 @@\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.IgniteSystemProperties;\n import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.configuration.CheckpointWriteOrder;\n import org.apache.ignite.configuration.DataPageEvictionMode;\n import org.apache.ignite.configuration.DataRegionConfiguration;\n@@ -878,8 +879,12 @@ private void shutdownCheckpointer(boolean cancel) {\n                         @Override public void apply(IgniteInternalFuture igniteInternalFut) {\n                             idxRebuildFuts.remove(cacheId, rebuildFut);\n \n-                            log().info(\"Finished indexes rebuilding for cache: [name=\" + cacheCtx.config().getName()\n-                                + \", grpName=\" + cacheCtx.config().getGroupName());\n+                            CacheConfiguration ccfg = cacheCtx.config();\n+\n+                            if (ccfg != null) {\n+                                log().info(\"Finished indexes rebuilding for cache: [name=\" + ccfg.getName()\n+                                    + \", grpName=\" + ccfg.getGroupName());\n+                            }\n                         }\n                     });\n                 }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-5041 NPE in deadlock detection fixed",
        "commit": "https://github.com/apache/ignite/commit/746f8ebc2e56720b50873af1b4ee2a320ca58793",
        "parent": "https://github.com/apache/ignite/commit/8f9edebfe74e2de1368d42ba951fa074b116eb17",
        "bug_id": "ignite_94",
        "file": [
            {
                "sha": "09b4c3a52dc41c5e05623ae70685eee9bc3d39d8",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -20,9 +20,11 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.UUID;\n+import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.internal.GridKernalContext;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n+import org.apache.ignite.internal.processors.cacheobject.IgniteCacheObjectProcessor;\n import org.apache.ignite.internal.processors.plugin.CachePluginManager;\n import org.apache.ignite.internal.processors.query.QuerySchema;\n import org.apache.ignite.internal.processors.query.schema.message.SchemaFinishDiscoveryMessage;\n@@ -83,6 +85,12 @@\n     /** */\n     private AffinityTopologyVersion rcvdFromVer;\n \n+    /** Mutex. */\n+    private final Object mux = new Object();\n+\n+    /** Cached object context for marshalling issues when cache isn't started. */\n+    private volatile CacheObjectContext objCtx;\n+\n     /** */\n     private transient AffinityTopologyVersion clientCacheStartVer;\n \n@@ -227,6 +235,22 @@ public CacheConfiguration cacheConfiguration() {\n         return cacheCfg;\n     }\n \n+    /**\n+     * Creates and caches cache object context if needed.\n+     *\n+     * @param proc Object processor.\n+     */\n+    public CacheObjectContext cacheObjectContext(IgniteCacheObjectProcessor proc) throws IgniteCheckedException {\n+        if (objCtx == null) {\n+            synchronized (mux) {\n+                if (objCtx == null)\n+                    objCtx = proc.contextForCache(cacheCfg);\n+            }\n+        }\n+\n+        return objCtx;\n+    }\n+\n     /**\n      * @return Cache plugin manager.\n      */",
                "deletions": 0
            },
            {
                "sha": "55f3c42b0fa94cda7041f4e2d7b6b7270935d6b0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "status": "modified",
                "changes": 18,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -22,8 +22,6 @@\n import java.util.List;\n import java.util.ListIterator;\n import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicIntegerArray;\n import org.apache.ignite.IgniteCheckedException;\n@@ -447,6 +445,22 @@ public boolean closed(GridCacheContext ctx) {\n         return ctxMap.get(cacheId);\n     }\n \n+    /**\n+     * Returns cache object context if created or creates new and caches it until cache started.\n+     *\n+     * @param cacheId Cache id.\n+     */\n+    public @Nullable CacheObjectContext cacheObjectContext(int cacheId) throws IgniteCheckedException {\n+        GridCacheContext<K, V> ctx = ctxMap.get(cacheId);\n+\n+        if (ctx != null)\n+            return ctx.cacheObjectContext();\n+\n+        DynamicCacheDescriptor desc = cache().cacheDescriptor(cacheId);\n+\n+        return desc != null ? desc.cacheObjectContext(kernalContext().cacheObjects()) : null;\n+    }\n+\n     /**\n      * @return Ignite instance name.\n      */",
                "deletions": 2
            },
            {
                "sha": "db0395f70390df65944c456f2bdfa9413e3a793d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java",
                "status": "modified",
                "changes": 20,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -2409,11 +2409,18 @@ private CommitListener(IgniteInternalTx tx) {\n         @Override public void onMessage(UUID nodeId, Object msg) {\n             GridCacheMessage cacheMsg = (GridCacheMessage)msg;\n \n-            unmarshall(nodeId, cacheMsg);\n+            Throwable err = null;\n \n-            if (cacheMsg.classError() != null) {\n+            try {\n+                unmarshall(nodeId, cacheMsg);\n+            }\n+            catch (Exception e) {\n+                err = e;\n+            }\n+\n+            if (err != null || cacheMsg.classError() != null) {\n                 try {\n-                    processFailedMessage(nodeId, cacheMsg);\n+                    processFailedMessage(nodeId, cacheMsg, err);\n                 }\n                 catch(Throwable e){\n                     U.error(log, \"Failed to process message [senderId=\" + nodeId +\n@@ -2466,7 +2473,7 @@ else if (msg instanceof TxLocksResponse) {\n          * @param nodeId Node ID.\n          * @param msg Message.\n          */\n-        private void processFailedMessage(UUID nodeId, GridCacheMessage msg) throws IgniteCheckedException {\n+        private void processFailedMessage(UUID nodeId, GridCacheMessage msg, Throwable err) throws IgniteCheckedException {\n             switch (msg.directType()) {\n                 case -24: {\n                     TxLocksRequest req = (TxLocksRequest)msg;\n@@ -2498,7 +2505,10 @@ private void processFailedMessage(UUID nodeId, GridCacheMessage msg) throws Igni\n                         return;\n                     }\n \n-                    fut.onResult(nodeId, res);\n+                    if (err == null)\n+                        fut.onResult(nodeId, res);\n+                    else\n+                        fut.onDone(null, err);\n                 }\n \n                 break;",
                "deletions": 5
            },
            {
                "sha": "97db6988052c97390f3f97bdfcfc5f63455f24d0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java",
                "status": "modified",
                "changes": 19,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlock.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -21,11 +21,10 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.UUID;\n-import org.apache.ignite.internal.processors.cache.GridCacheContext;\n+import org.apache.ignite.internal.processors.cache.CacheObjectContext;\n import org.apache.ignite.internal.processors.cache.GridCacheSharedContext;\n import org.apache.ignite.internal.processors.cache.version.GridCacheVersion;\n import org.apache.ignite.internal.util.typedef.T2;\n-import org.apache.ignite.internal.util.typedef.internal.CU;\n import org.apache.ignite.internal.util.typedef.internal.U;\n \n /**\n@@ -133,11 +132,21 @@ public String toString(GridCacheSharedContext ctx) {\n         for (Map.Entry<IgniteTxKey, String> e : keyLabels.entrySet()) {\n             IgniteTxKey txKey = e.getKey();\n \n-            GridCacheContext cctx = ctx.cacheContext(txKey.cacheId());\n+            try {\n+                CacheObjectContext objCtx = ctx.cacheObjectContext(txKey.cacheId());\n \n-            Object val = CU.value(txKey.key(), cctx, true);\n+                Object val = txKey.key().value(objCtx, true);\n \n-            sb.append(e.getValue()).append(\" [key=\").append(val).append(\", cache=\").append(cctx.namexx()).append(\"]\\n\");\n+                sb.append(e.getValue())\n+                    .append(\" [key=\")\n+                    .append(val)\n+                    .append(\", cache=\")\n+                    .append(objCtx.cacheName())\n+                    .append(\"]\\n\");\n+            }\n+            catch (Exception ex) {\n+                sb.append(\"Unable to unmarshall deadlock information for key [key=\").append(e.getValue()).append(\"]\\n\");\n+            }\n         }\n \n         return sb.toString();",
                "deletions": 5
            },
            {
                "sha": "7856eaab1918ffb860a1ffa9bae475dbe985f42c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java",
                "status": "modified",
                "changes": 37,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxLocksResponse.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -181,31 +181,36 @@ public void addKey(IgniteTxKey key) {\n \n     /** {@inheritDoc} */\n     @Override public void finishUnmarshal(GridCacheSharedContext ctx, ClassLoader ldr) throws IgniteCheckedException {\n-        super.finishUnmarshal(ctx, ldr);\n+        try {\n+            super.finishUnmarshal(ctx, ldr);\n \n-        if (nearTxKeysArr != null) {\n-            for (int i = 0; i < nearTxKeysArr.length; i++) {\n-                IgniteTxKey key = nearTxKeysArr[i];\n+            if (nearTxKeysArr != null) {\n+                for (int i = 0; i < nearTxKeysArr.length; i++) {\n+                    IgniteTxKey txKey = nearTxKeysArr[i];\n \n-                key.finishUnmarshal(ctx.cacheContext(key.cacheId()), ldr);\n+                    txKey.key().finishUnmarshal(ctx.cacheObjectContext(txKey.cacheId()), ldr);\n \n-                txLocks().put(key, locksArr[i]);\n+                    txLocks().put(txKey, locksArr[i]);\n+                }\n+\n+                nearTxKeysArr = null;\n+                locksArr = null;\n             }\n \n-            nearTxKeysArr = null;\n-            locksArr = null;\n-        }\n+            if (txKeysArr != null) {\n+                txKeys = U.newHashSet(txKeysArr.length);\n \n-        if (txKeysArr != null) {\n-            txKeys = U.newHashSet(txKeysArr.length);\n+                for (IgniteTxKey txKey : txKeysArr) {\n+                    txKey.key().finishUnmarshal(ctx.cacheObjectContext(txKey.cacheId()), ldr);\n \n-            for (IgniteTxKey key : txKeysArr) {\n-                key.finishUnmarshal(ctx.cacheContext(key.cacheId()), ldr);\n+                    txKeys.add(txKey);\n+                }\n \n-                txKeys.add(key);\n+                txKeysArr = null;\n             }\n-\n-            txKeysArr = null;\n+        }\n+        catch (Exception e) {\n+            throw new IgniteCheckedException(e);\n         }\n     }\n ",
                "deletions": 16
            },
            {
                "sha": "dd7c3b3a5bf5488dbea2eb547e0eff35c4e4915b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionMessageMarshallingTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionMessageMarshallingTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionMessageMarshallingTest.java",
                "status": "added",
                "changes": 116,
                "additions": 116,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionMessageMarshallingTest.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.transactions;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteKernal;\n+import org.apache.ignite.internal.managers.communication.GridIoPolicy;\n+import org.apache.ignite.internal.managers.communication.GridMessageListener;\n+import org.apache.ignite.internal.processors.cache.GridCacheContext;\n+import org.apache.ignite.internal.processors.cache.GridCacheSharedContext;\n+import org.apache.ignite.internal.processors.cache.IgniteCacheProxy;\n+import org.apache.ignite.internal.processors.cache.KeyCacheObject;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ *\n+ */\n+public class TxDeadlockDetectionMessageMarshallingTest extends GridCommonAbstractTest {\n+    /** Topic. */\n+    private static final String TOPIC = \"mytopic\";\n+\n+    /** Client mode. */\n+    private static boolean clientMode;\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        cfg.setClientMode(clientMode);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMessageUnmarshallWithoutCacheContext() throws Exception {\n+        try {\n+            Ignite ignite = startGrid(0);\n+\n+            CacheConfiguration<Integer, Integer> ccfg = new CacheConfiguration<>();\n+\n+            IgniteCache<Integer, Integer> cache = ignite.getOrCreateCache(ccfg);\n+\n+            clientMode = true;\n+\n+            Ignite client = startGrid(1);\n+\n+            final GridCacheSharedContext<Object, Object> clientCtx = ((IgniteKernal)client).context().cache().context();\n+\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            final AtomicBoolean res = new AtomicBoolean();\n+\n+            clientCtx.gridIO().addMessageListener(TOPIC, new GridMessageListener() {\n+                @Override public void onMessage(UUID nodeId, Object msg) {\n+                    if (msg instanceof TxLocksResponse) {\n+                        try {\n+                            ((TxLocksResponse)msg).finishUnmarshal(clientCtx, clientCtx.deploy().globalLoader());\n+\n+                            res.set(true);\n+                        }\n+                        catch (Exception e) {\n+                            log.error(\"Message unmarshal failed\", e);\n+                        }\n+                        finally {\n+                            latch.countDown();\n+                        }\n+                    }\n+                }\n+            });\n+\n+            GridCacheContext cctx = ((IgniteCacheProxy)cache).context();\n+\n+            KeyCacheObject key = cctx.toCacheKeyObject(1);\n+\n+            TxLocksResponse msg = new TxLocksResponse();\n+            msg.addKey(cctx.txKey(key));\n+\n+            msg.prepareMarshal(cctx.shared());\n+\n+            ((IgniteKernal)ignite).context().cache().context().gridIO().sendToCustomTopic(\n+                ((IgniteKernal)client).localNode(), TOPIC, msg, GridIoPolicy.PUBLIC_POOL);\n+\n+            boolean await = latch.await(1, TimeUnit.SECONDS);\n+\n+            assertTrue(await && res.get());\n+        }\n+        finally {\n+            stopAllGrids();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "598725e328f5fdb8ee385c1027f1c5296c6eca8b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionUnmasrhalErrorsTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionUnmasrhalErrorsTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionUnmasrhalErrorsTest.java",
                "status": "added",
                "changes": 225,
                "additions": 225,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/transactions/TxDeadlockDetectionUnmasrhalErrorsTest.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.transactions;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.cache.CacheException;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.IgniteKernal;\n+import org.apache.ignite.internal.util.typedef.X;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionDeadlockException;\n+import org.apache.ignite.transactions.TransactionTimeoutException;\n+\n+import static org.apache.ignite.internal.util.typedef.X.hasCause;\n+import static org.apache.ignite.transactions.TransactionConcurrency.PESSIMISTIC;\n+import static org.apache.ignite.transactions.TransactionIsolation.READ_COMMITTED;\n+import static org.apache.ignite.transactions.TransactionIsolation.REPEATABLE_READ;\n+\n+/**\n+ *\n+ */\n+public class TxDeadlockDetectionUnmasrhalErrorsTest extends GridCommonAbstractTest {\n+    /** Nodes count. */\n+    private static final int NODES_CNT = 2;\n+\n+    /** Client. */\n+    private static boolean client;\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        cfg.setClientMode(client);\n+\n+        if (isDebug()) {\n+            TcpDiscoverySpi discoSpi = new TcpDiscoverySpi();\n+\n+            discoSpi.failureDetectionTimeoutEnabled(false);\n+\n+            cfg.setDiscoverySpi(discoSpi);\n+        }\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrid(0);\n+\n+        client = true;\n+\n+        startGrid(1);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        super.afterTestsStopped();\n+\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testDeadlockCacheObjectContext() throws Exception {\n+        IgniteCache<Integer, Integer> cache0 = null;\n+        IgniteCache<Integer, Integer> cache1 = null;\n+        try {\n+            cache0 = getCache(ignite(0), \"cache0\");\n+            cache1 = getCache(ignite(0), \"cache1\");\n+\n+            IgniteCache<Integer, Integer> clientCache0 = grid(1).cache(\"cache0\");\n+\n+            awaitPartitionMapExchange();\n+\n+            final CyclicBarrier barrier = new CyclicBarrier(2);\n+\n+            final CountDownLatch latch = new CountDownLatch(1);\n+\n+            final AtomicInteger threadCnt = new AtomicInteger();\n+\n+            final AtomicBoolean deadlock = new AtomicBoolean();\n+\n+            IgniteInternalFuture<Long> fut = GridTestUtils.runMultiThreadedAsync(new Runnable() {\n+                @Override public void run() {\n+                    int threadNum = threadCnt.getAndIncrement();\n+\n+                    Ignite ignite = ignite(0);\n+\n+                    IgniteCache<Integer, Integer> cache1 = ignite.cache(\"cache\" + (threadNum == 0 ? 0 : 1));\n+\n+                    IgniteCache<Integer, Integer> cache2 = ignite.cache(\"cache\" + (threadNum == 0 ? 1 : 0));\n+\n+                    try (Transaction tx = ignite.transactions().txStart(PESSIMISTIC, REPEATABLE_READ, 1000, 0)) {\n+                        int key1 = threadNum == 0 ? 0 : 1;\n+\n+                        log.info(\">>> Performs put [node=\" + ((IgniteKernal)ignite).localNode() +\n+                            \", tx=\" + tx + \", key=\" + key1 + \", cache=\" + cache1.getName() + ']');\n+\n+                        cache1.put(key1, 0);\n+\n+                        barrier.await();\n+\n+                        int key2 = threadNum == 0 ? 1 : 0;\n+\n+                        log.info(\">>> Performs put [node=\" + ((IgniteKernal)ignite).localNode() +\n+                            \", tx=\" + tx + \", key=\" + key2 + \", cache=\" + cache2.getName() + ']');\n+\n+                        latch.countDown();\n+\n+                        cache2.put(key2, 1);\n+\n+                        tx.commit();\n+\n+                        log.info(\">>> Commit done\");\n+                    }\n+                    catch (Throwable e) {\n+                        // At least one stack trace should contain TransactionDeadlockException.\n+                        if (hasCause(e, TransactionTimeoutException.class) &&\n+                            hasCause(e, TransactionDeadlockException.class)\n+                            ) {\n+                            if (deadlock.compareAndSet(false, true))\n+                                U.error(log, \"At least one stack trace should contain \" +\n+                                    TransactionDeadlockException.class.getSimpleName(), e);\n+                        }\n+                    }\n+                }\n+            }, 2, \"tx-thread\");\n+\n+            latch.await();\n+\n+            Ignite client = grid(1);\n+\n+            try (Transaction tx = client.transactions().txStart(PESSIMISTIC, READ_COMMITTED, 500, 0)) {\n+                clientCache0.put(0, 3);\n+                clientCache0.put(1, 3);\n+\n+                tx.commit();\n+\n+                log.info(\">>> Commit done\");\n+            }\n+            catch (CacheException e) {\n+                assertTrue(X.hasCause(e, TransactionTimeoutException.class));\n+            }\n+            catch (Throwable e) {\n+                log.error(\"Unexpected exception occurred\", e);\n+\n+                fail();\n+            }\n+\n+            fut.get();\n+\n+            assertTrue(deadlock.get());\n+\n+            for (int i = 0; i < NODES_CNT ; i++) {\n+                Ignite ignite = ignite(i);\n+\n+                IgniteTxManager txMgr = ((IgniteKernal)ignite).context().cache().context().tm();\n+\n+                Collection<IgniteInternalFuture<?>> futs = txMgr.deadlockDetectionFutures();\n+\n+                assertTrue(futs.isEmpty());\n+            }\n+\n+            //assertNotNull(grid(1).context().cache().context().cacheContext(cacheId));\n+        }\n+        finally {\n+            if (cache0 != null)\n+                cache0.destroy();\n+\n+            if (cache1 != null)\n+                cache1.destroy();\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * @param ignite Ignite.\n+     * @param name Name.\n+     */\n+    private IgniteCache<Integer, Integer> getCache(Ignite ignite, String name) {\n+        CacheConfiguration ccfg = defaultCacheConfiguration();\n+\n+        ccfg.setName(name);\n+        ccfg.setCacheMode(CacheMode.PARTITIONED);\n+        ccfg.setBackups(0);\n+        ccfg.setNearConfiguration(null);\n+\n+        return ignite.getOrCreateCache(ccfg);\n+    }\n+\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "337d4d46a06d0e5370c6680330ba582f43dff4f2",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/TxDeadlockDetectionTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/testsuites/TxDeadlockDetectionTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/746f8ebc2e56720b50873af1b4ee2a320ca58793/modules/core/src/test/java/org/apache/ignite/testsuites/TxDeadlockDetectionTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/TxDeadlockDetectionTestSuite.java?ref=746f8ebc2e56720b50873af1b4ee2a320ca58793",
                "patch": "@@ -19,8 +19,10 @@\n \n import junit.framework.TestSuite;\n import org.apache.ignite.internal.processors.cache.transactions.DepthFirstSearchTest;\n+import org.apache.ignite.internal.processors.cache.transactions.TxDeadlockDetectionMessageMarshallingTest;\n import org.apache.ignite.internal.processors.cache.transactions.TxDeadlockDetectionNoHangsTest;\n import org.apache.ignite.internal.processors.cache.transactions.TxDeadlockDetectionTest;\n+import org.apache.ignite.internal.processors.cache.transactions.TxDeadlockDetectionUnmasrhalErrorsTest;\n import org.apache.ignite.internal.processors.cache.transactions.TxOptimisticDeadlockDetectionCrossCacheTest;\n import org.apache.ignite.internal.processors.cache.transactions.TxOptimisticDeadlockDetectionTest;\n import org.apache.ignite.internal.processors.cache.transactions.TxPessimisticDeadlockDetectionCrossCacheTest;\n@@ -44,6 +46,8 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(TxPessimisticDeadlockDetectionCrossCacheTest.class);\n         suite.addTestSuite(TxDeadlockDetectionTest.class);\n         suite.addTestSuite(TxDeadlockDetectionNoHangsTest.class);\n+        suite.addTestSuite(TxDeadlockDetectionUnmasrhalErrorsTest.class);\n+        suite.addTestSuite(TxDeadlockDetectionMessageMarshallingTest.class);\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-5068 : Fixed possible NPE in detectLostPartitions(...)",
        "commit": "https://github.com/apache/ignite/commit/81d9dcb60d077c829af828a10a3250ed066c8ab1",
        "parent": "https://github.com/apache/ignite/commit/c094ac5a95e546f03713ec1def9157fe273bb032",
        "bug_id": "ignite_95",
        "file": [
            {
                "sha": "19c5f3acd7fac6152b79a660055e8c6bfe47da3d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/81d9dcb60d077c829af828a10a3250ed066c8ab1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/81d9dcb60d077c829af828a10a3250ed066c8ab1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java?ref=81d9dcb60d077c829af828a10a3250ed066c8ab1",
                "patch": "@@ -1481,6 +1481,9 @@ else if (loc != null && state == RENTING && cctx.allowFastEviction())\n         lock.writeLock().lock();\n \n         try {\n+            if (node2part == null)\n+                return false;\n+\n             int parts = cctx.affinity().partitions();\n \n             Set<Integer> lost = new HashSet<>(parts);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6307 If getAll() fails with NPE, onHeap entry is not removed, for local cache",
        "commit": "https://github.com/apache/ignite/commit/e74163a99870bd50b24ea6799b7566dc37682f74",
        "parent": "https://github.com/apache/ignite/commit/b2a0295894dbdeb638ac8f764549a724578322ac",
        "bug_id": "ignite_96",
        "file": [
            {
                "sha": "8c5d6f2ae6cf75ed76708ac019a6f58fb3fe8e59",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/e74163a99870bd50b24ea6799b7566dc37682f74/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/e74163a99870bd50b24ea6799b7566dc37682f74/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java?ref=e74163a99870bd50b24ea6799b7566dc37682f74",
                "patch": "@@ -1853,6 +1853,8 @@ private boolean evictx(K key, GridCacheVersion ver,\n         if (tx == null || tx.implicit()) {\n             Map<KeyCacheObject, EntryGetResult> misses = null;\n \n+            Set<GridCacheEntryEx> newLocalEntries = null;\n+\n             final AffinityTopologyVersion topVer = tx == null ? ctx.affinity().affinityTopologyVersion() :\n                 tx.topologyVersion();\n \n@@ -1925,6 +1927,8 @@ else if (storeEnabled)\n                             }\n \n                             if (!skipEntry) {\n+                                boolean isNewLocalEntry = this.map.getEntry(ctx, key) == null;\n+\n                                 entry = entryEx(key);\n \n                                 if (entry == null) {\n@@ -1934,6 +1938,13 @@ else if (storeEnabled)\n                                     break;\n                                 }\n \n+                                if (isNewLocalEntry) {\n+                                    if (newLocalEntries == null)\n+                                        newLocalEntries = new HashSet<>();\n+\n+                                    newLocalEntries.add(entry);\n+                                }\n+\n                                 if (storeEnabled) {\n                                     res = entry.innerGetAndReserveForLoad(updateMetrics,\n                                         evt,\n@@ -2128,6 +2139,11 @@ else if (storeEnabled)\n                         ctx.evicts().touch(peekEx(key0), topVer);\n                 }\n \n+                if (newLocalEntries != null) {\n+                    for (GridCacheEntryEx entry : newLocalEntries)\n+                        removeEntry(entry);\n+                }\n+\n                 return new GridFinishedFuture<>(e);\n             }\n             catch (IgniteCheckedException e) {",
                "deletions": 0
            },
            {
                "sha": "e6c9589a5ec304d79b9b2c92eb7df3fb86cae32c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e74163a99870bd50b24ea6799b7566dc37682f74/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e74163a99870bd50b24ea6799b7566dc37682f74/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "status": "modified",
                "changes": 45,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java?ref=e74163a99870bd50b24ea6799b7566dc37682f74",
                "patch": "@@ -919,13 +919,54 @@ public void testGetEntries() throws Exception {\n     /**\n      * @throws Exception In case of error.\n      */\n-    public void testGetAllWithNulls() throws Exception {\n+    public void testGetAllWithLastNull() throws Exception {\n         final IgniteCache<String, Integer> cache = jcache();\n \n-        final Set<String> c = new HashSet<>();\n+        final Set<String> c = new LinkedHashSet<>();\n+\n+        c.add(\"key1\");\n+        c.add(null);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Void>() {\n+            @Override public Void call() throws Exception {\n+                cache.getAll(c);\n+\n+                return null;\n+            }\n+        }, NullPointerException.class, null);\n+    }\n+\n+    /**\n+     * @throws Exception In case of error.\n+     */\n+    public void testGetAllWithFirstNull() throws Exception {\n+        final IgniteCache<String, Integer> cache = jcache();\n+\n+        final Set<String> c = new LinkedHashSet<>();\n+\n+        c.add(null);\n+        c.add(\"key1\");\n+\n+        GridTestUtils.assertThrows(log, new Callable<Void>() {\n+            @Override public Void call() throws Exception {\n+                cache.getAll(c);\n+\n+                return null;\n+            }\n+        }, NullPointerException.class, null);\n+    }\n+\n+    /**\n+     * @throws Exception In case of error.\n+     */\n+    public void testGetAllWithInTheMiddle() throws Exception {\n+        final IgniteCache<String, Integer> cache = jcache();\n+\n+        final Set<String> c = new LinkedHashSet<>();\n \n         c.add(\"key1\");\n         c.add(null);\n+        c.add(\"key2\");\n \n         GridTestUtils.assertThrows(log, new Callable<Void>() {\n             @Override public Void call() throws Exception {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in IgniteProcessProxy.kill()",
        "commit": "https://github.com/apache/ignite/commit/11bc0586318c36e59aa227febc5268b33f0e1be0",
        "parent": "https://github.com/apache/ignite/commit/b02ad0deaae78424356f9a4b1748fc43b21eac03",
        "bug_id": "ignite_97",
        "file": [
            {
                "sha": "7c622084b233a47b37d1235e5d2f3c28b6c4c80b",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "blob_url": "https://github.com/apache/ignite/blob/11bc0586318c36e59aa227febc5268b33f0e1be0/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "raw_url": "https://github.com/apache/ignite/raw/11bc0586318c36e59aa227febc5268b33f0e1be0/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java?ref=11bc0586318c36e59aa227febc5268b33f0e1be0",
                "patch": "@@ -234,9 +234,12 @@ public static void stop(String gridName, boolean cancel) {\n      * @param gridName Grid name.\n      */\n     public static void kill(String gridName) {\n+        A.notNull(gridName, \"gridName\");\n+\n         IgniteProcessProxy proxy = gridProxies.get(gridName);\n \n-        A.notNull(gridName, \"gridName\");\n+        if (proxy == null)\n+            return;\n \n         try {\n             proxy.getProcess().kill();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in CacheContinuousQueryHandler.",
        "commit": "https://github.com/apache/ignite/commit/5475bfda2b06feaa80e9060dfcd87f6cb819d20f",
        "parent": "https://github.com/apache/ignite/commit/f167a58eed911946df617c42d84878eb429175f0",
        "bug_id": "ignite_98",
        "file": [
            {
                "sha": "ea5551d1c449dd44430ff112f174308f7ec0971b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/5475bfda2b06feaa80e9060dfcd87f6cb819d20f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/5475bfda2b06feaa80e9060dfcd87f6cb819d20f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java?ref=5475bfda2b06feaa80e9060dfcd87f6cb819d20f",
                "patch": "@@ -166,7 +166,7 @@\n     private transient boolean ignoreClsNotFound;\n \n     /** */\n-    private transient boolean asyncCallback;\n+    private transient boolean asyncCb;\n \n     /** */\n     private transient UUID nodeId;\n@@ -308,12 +308,12 @@ public void keepBinary(boolean keepBinary) {\n             if (locLsnr instanceof JCacheQueryLocalListener) {\n                 ctx.resource().injectGeneric(((JCacheQueryLocalListener)locLsnr).impl);\n \n-                asyncCallback = ((JCacheQueryLocalListener)locLsnr).async();\n+                asyncCb = ((JCacheQueryLocalListener)locLsnr).async();\n             }\n             else {\n                 ctx.resource().injectGeneric(locLsnr);\n \n-                asyncCallback = U.hasAnnotation(locLsnr, IgniteAsyncCallback.class);\n+                asyncCb = U.hasAnnotation(locLsnr, IgniteAsyncCallback.class);\n             }\n         }\n \n@@ -324,14 +324,14 @@ public void keepBinary(boolean keepBinary) {\n                 if (((JCacheQueryRemoteFilter)filter).impl != null)\n                     ctx.resource().injectGeneric(((JCacheQueryRemoteFilter)filter).impl);\n \n-                if (!asyncCallback)\n-                    asyncCallback = ((JCacheQueryRemoteFilter)filter).async();\n+                if (!asyncCb)\n+                    asyncCb = ((JCacheQueryRemoteFilter)filter).async();\n             }\n             else {\n                 ctx.resource().injectGeneric(filter);\n \n-                if (!asyncCallback)\n-                    asyncCallback = U.hasAnnotation(filter, IgniteAsyncCallback.class);\n+                if (!asyncCb)\n+                    asyncCb = U.hasAnnotation(filter, IgniteAsyncCallback.class);\n             }\n         }\n \n@@ -396,7 +396,7 @@ public void keepBinary(boolean keepBinary) {\n                 // skipPrimaryCheck is set only when listen locally for replicated cache events.\n                 assert !skipPrimaryCheck || (cctx.isReplicated() && ctx.localNodeId().equals(nodeId));\n \n-                if (asyncCallback) {\n+                if (asyncCb) {\n                     ContinuousQueryAsyncClosure clsr = new ContinuousQueryAsyncClosure(\n                         primary,\n                         evt,\n@@ -599,7 +599,7 @@ private CacheContinuousQueryManager manager(GridKernalContext ctx) {\n         if (objs.isEmpty())\n             return;\n \n-        if (asyncCallback) {\n+        if (asyncCb) {\n             final List<CacheContinuousQueryEntry> entries = objs instanceof List ? (List)objs : new ArrayList(objs);\n \n             IgniteStripedThreadPoolExecutor asyncPool = ctx.asyncCallbackPool();\n@@ -876,7 +876,7 @@ else if (initUpdCntrs != null)\n                     partCntrs = initUpdCntrs.get(partId);\n             }\n \n-            rec = new PartitionRecovery(ctx.log(getClass()), initTopVer0, partCntrs.get2());\n+            rec = new PartitionRecovery(ctx.log(getClass()), initTopVer0, partCntrs != null ? partCntrs.get2() : null);\n \n             PartitionRecovery oldRec = rcvs.putIfAbsent(partId, rec);\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "fix NPE",
        "commit": "https://github.com/apache/ignite/commit/6bfa38370a5dff58baad7a47a0c43f769e858072",
        "parent": "https://github.com/apache/ignite/commit/a64004c368cdfaf6972981575b472846dab1e174",
        "bug_id": "ignite_99",
        "file": [
            {
                "sha": "73d949d91b17ece9717bd2c070f3c1c0ba253057",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/6bfa38370a5dff58baad7a47a0c43f769e858072/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/6bfa38370a5dff58baad7a47a0c43f769e858072/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=6bfa38370a5dff58baad7a47a0c43f769e858072",
                "patch": "@@ -183,7 +183,7 @@ public GridCacheSharedContext(\n \n         locStoreCnt = new AtomicInteger();\n \n-        if (dbMgr.persistenceEnabled())\n+        if (dbMgr != null && dbMgr.persistenceEnabled())\n             dhtAtomicUpdCnt = new AtomicIntegerArray(kernalCtx.config().getSystemThreadPoolSize());\n \n         msgLog = kernalCtx.log(CU.CACHE_MSG_LOG_CATEGORY);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE on cache restart.",
        "commit": "https://github.com/apache/ignite/commit/fbb66ce8df4b4156069701b777dbdb5371bd4df5",
        "parent": "https://github.com/apache/ignite/commit/4e81e9479580d67b3505cf810714e776a767c376",
        "bug_id": "ignite_100",
        "file": [
            {
                "sha": "5b37ed4c41b204997eb96baf24c34a21276e1a1a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/fbb66ce8df4b4156069701b777dbdb5371bd4df5/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/fbb66ce8df4b4156069701b777dbdb5371bd4df5/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=fbb66ce8df4b4156069701b777dbdb5371bd4df5",
                "patch": "@@ -1882,7 +1882,8 @@ private void stopGateway(DynamicCacheChangeRequest req) {\n         if (req.restart()) {\n             proxy = jCacheProxies.get(maskNull(req.cacheName()));\n \n-            proxy.restart();\n+            if (proxy != null)\n+                proxy.restart();\n         }\n         else\n             proxy = jCacheProxies.remove(maskNull(req.cacheName()));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6223 Fixed NPE when data is null on job fail.",
        "commit": "https://github.com/apache/ignite/commit/fdfd47367756816104620a1f324e0e38f6a68d8f",
        "parent": "https://github.com/apache/ignite/commit/d753e9005c5a86cb4adde090149d600177d87a13",
        "bug_id": "ignite_101",
        "file": [
            {
                "sha": "2eec89b8317c3e52675cfbd548511d2a4854794d",
                "filename": "modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/handlers/AbstractListener.java",
                "blob_url": "https://github.com/apache/ignite/blob/fdfd47367756816104620a1f324e0e38f6a68d8f/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/handlers/AbstractListener.java",
                "raw_url": "https://github.com/apache/ignite/raw/fdfd47367756816104620a1f324e0e38f6a68d8f/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/handlers/AbstractListener.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/web-console/web-agent/src/main/java/org/apache/ignite/console/agent/handlers/AbstractListener.java?ref=fdfd47367756816104620a1f324e0e38f6a68d8f",
                "patch": "@@ -76,15 +76,17 @@ else if (args.length == 1)\n                         if (res instanceof RestResult) {\n                             RestResult restRes = (RestResult) res;\n \n-                            ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);\n-                            Base64OutputStream b64os = new Base64OutputStream(baos);\n-                            GZIPOutputStream gzip = new GZIPOutputStream(b64os);\n+                            if (restRes.getData() != null) {\n+                                ByteArrayOutputStream baos = new ByteArrayOutputStream(4096);\n+                                Base64OutputStream b64os = new Base64OutputStream(baos);\n+                                GZIPOutputStream gzip = new GZIPOutputStream(b64os);\n \n-                            gzip.write(restRes.getData().getBytes());\n+                                gzip.write(restRes.getData().getBytes());\n \n-                            gzip.close();\n+                                gzip.close();\n \n-                            restRes.zipData(baos.toString());\n+                                restRes.zipData(baos.toString());\n+                            }\n                         }\n \n                         cb.call(null, toJSON(res));",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7476 Avoid NPE during metrics gathering leading to discovery thread failure. - Fixes #3448.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/e36e383f1dea725c44270fad6b40648d832b187a",
        "parent": "https://github.com/apache/ignite/commit/bf5131fa40706e1538a69de1db99025a2ed72a41",
        "bug_id": "ignite_102",
        "file": [
            {
                "sha": "e731c52f88b2db0bde3779078c2e77d370acbf14",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/e36e383f1dea725c44270fad6b40648d832b187a/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/e36e383f1dea725c44270fad6b40648d832b187a/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "status": "modified",
                "changes": 27,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=e36e383f1dea725c44270fad6b40648d832b187a",
                "patch": "@@ -1059,25 +1059,28 @@ private DiscoveryMetricsProvider createMetricsProvider() {\n \n             /** {@inheritDoc} */\n             @Override public Map<Integer, CacheMetrics> cacheMetrics() {\n-                Collection<GridCacheAdapter<?, ?>> caches = ctx.cache().internalCaches();\n+                try {\n+                    Collection<GridCacheAdapter<?, ?>> caches = ctx.cache().internalCaches();\n \n-                if (F.isEmpty(caches))\n-                    return Collections.emptyMap();\n+                    if (!F.isEmpty(caches)) {\n+                        Map<Integer, CacheMetrics> metrics = U.newHashMap(caches.size());\n \n-                Map<Integer, CacheMetrics> metrics = null;\n+                        for (GridCacheAdapter<?, ?> cache : caches) {\n+                            if (cache.context().isStatisticsEnabled() &&\n+                                cache.context().started() &&\n+                                cache.context().affinity().affinityTopologyVersion().topologyVersion() > 0) {\n \n-                for (GridCacheAdapter<?, ?> cache : caches) {\n-                    if (cache.context().statisticsEnabled() &&\n-                        cache.context().started() &&\n-                        cache.context().affinity().affinityTopologyVersion().topologyVersion() > 0) {\n-                        if (metrics == null)\n-                            metrics = U.newHashMap(caches.size());\n+                                metrics.put(cache.context().cacheId(), cache.localMetrics());\n+                            }\n+                        }\n \n-                        metrics.put(cache.context().cacheId(), cache.localMetrics());\n+                        return metrics;\n                     }\n+                } catch (Exception e) {\n+                    U.warn(log, \"Failed to compute cache metrics\", e);\n                 }\n \n-                return metrics == null ? Collections.<Integer, CacheMetrics>emptyMap() : metrics;\n+                return Collections.emptyMap();\n             }\n         };\n     }",
                "deletions": 12
            },
            {
                "sha": "2b8a6c5a4fd8c620d135fdb74223fd7ab698a0bc",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/e36e383f1dea725c44270fad6b40648d832b187a/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/e36e383f1dea725c44270fad6b40648d832b187a/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java?ref=e36e383f1dea725c44270fad6b40648d832b187a",
                "patch": "@@ -2132,9 +2132,7 @@ else if (ttl == CU.TTL_NOT_CHANGED)\n                         // No-op.\n                     }\n                     catch (IgniteCheckedException ex) {\n-                        IgniteLogger log = cache.unwrap(Ignite.class).log();\n-\n-                        U.error(log, \"Failed to set initial value for cache entry: \" + e, ex);\n+                        throw new IgniteException(\"Failed to set initial value for cache entry\", ex);\n                     }\n                     finally {\n                         cctx.shared().database().checkpointReadUnlock();",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6288: SQL: fixed NPE in IgniteH2Indexing.bindPartitionInfoParameter. This closes #2617.",
        "commit": "https://github.com/apache/ignite/commit/e383dc4057436c2fb384f4443d91b16701949fa3",
        "parent": "https://github.com/apache/ignite/commit/d808e33efc950d70975a69d51fd6fc6de0613656",
        "bug_id": "ignite_103",
        "file": [
            {
                "sha": "3d3ed84d6fa2351f0a5a25104a0b99bd9f411ab8",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java",
                "blob_url": "https://github.com/apache/ignite/blob/e383dc4057436c2fb384f4443d91b16701949fa3/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java",
                "raw_url": "https://github.com/apache/ignite/raw/e383dc4057436c2fb384f4443d91b16701949fa3/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java?ref=e383dc4057436c2fb384f4443d91b16701949fa3",
                "patch": "@@ -2378,7 +2378,7 @@ private int bindPartitionInfoParameter(CacheQueryPartitionInfo partInfo, Object[\n         assert partInfo != null;\n         assert partInfo.partition() < 0;\n \n-        GridH2RowDescriptor desc = dataTable(partInfo.cacheName(),\n+        GridH2RowDescriptor desc = dataTable(schema(partInfo.cacheName()),\n                 partInfo.tableName()).rowDescriptor();\n \n         Object param = H2Utils.convert(params[partInfo.paramIdx()],",
                "deletions": 1
            },
            {
                "sha": "183a88442c73b59208b324e18387f4b1c172963c",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSchemaSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/e383dc4057436c2fb384f4443d91b16701949fa3/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSchemaSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/e383dc4057436c2fb384f4443d91b16701949fa3/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSchemaSelfTest.java",
                "status": "modified",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/SqlSchemaSelfTest.java?ref=e383dc4057436c2fb384f4443d91b16701949fa3",
                "patch": "@@ -17,7 +17,9 @@\n \n package org.apache.ignite.internal.processors.query;\n \n+import java.util.Collections;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.QueryEntity;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n import org.apache.ignite.cache.query.annotations.QuerySqlField;\n import org.apache.ignite.configuration.CacheConfiguration;\n@@ -189,6 +191,36 @@ public void testSchemaChangeOnCacheWithPublicSchema() throws Exception {\n         ).getAll().size());\n     }\n \n+    /**\n+     * Test simple query.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testCustomSchemaName() throws Exception {\n+        QueryEntity qe = new QueryEntity()\n+            .setValueType(Person.class.getName())\n+            .setKeyType(Long.class.getName())\n+            .setValueFieldName(\"_value\")\n+            .setKeyFieldName(\"id\")\n+            .addQueryField(\"id\", Long.class.getName(), null)\n+            .addQueryField(\"_value\", Person.class.getName(), null)\n+            .addQueryField(\"name\", String.class.getName(), null)\n+            .addQueryField(\"orgId\", Long.class.getName(), null);\n+\n+        qe.setTableName(\"Person\");\n+\n+        IgniteCache<Long, Person> cache = node.createCache(new CacheConfiguration<Long, Person>()\n+            .setName(CACHE_PERSON)\n+            .setQueryEntities(Collections.singletonList(qe))\n+            .setSqlSchema(\"TEST\"));\n+\n+        cache.put(1L, new Person(\"Vasya\", 2));\n+\n+        assertEquals(1, node.context().query().querySqlFieldsNoCache(\n+            new SqlFieldsQuery(\"SELECT id, name, orgId FROM TEST.Person where (id = ?)\").setArgs(1L), false\n+        ).getAll().size());\n+    }\n+\n     /**\n      * Test type conflict in public schema.\n      *",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4347: Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/b4aedfd5350b4a318f1608596a171789513835a4",
        "parent": "https://github.com/apache/ignite/commit/cc13d9d155f70e22e08ef203ac64e5cc0aa0a50f",
        "bug_id": "ignite_104",
        "file": [
            {
                "sha": "0a70a68856672b83ed5f4ad46cedd0d1a9b0af5b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/b4aedfd5350b4a318f1608596a171789513835a4/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/b4aedfd5350b4a318f1608596a171789513835a4/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java?ref=b4aedfd5350b4a318f1608596a171789513835a4",
                "patch": "@@ -184,11 +184,17 @@ private OdbcResponse executeQuery(long reqId, OdbcQueryExecuteRequest req) {\n             qry.setDistributedJoins(distributedJoins);\n             qry.setEnforceJoinOrder(enforceJoinOrder);\n \n-            IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName());\n+            IgniteCache<Object, Object> cache0 = ctx.grid().cache(req.cacheName());\n+\n+            if (cache0 == null)\n+                return new OdbcResponse(OdbcResponse.STATUS_FAILED,\n+                        \"Cache doesn't exist (did you configure it?): \" + req.cacheName());\n+\n+            IgniteCache<Object, Object> cache = cache0.withKeepBinary();\n \n             if (cache == null)\n                 return new OdbcResponse(OdbcResponse.STATUS_FAILED,\n-                    \"Cache doesn't exist (did you configure it?): \" + req.cacheName());\n+                    \"Can not get cache with keep binary: \" + req.cacheName());\n \n             QueryCursor qryCur = cache.query(qry);\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fix NPE in GridCachePartitionExchangeManager.createPartitionsFullMessage.",
        "commit": "https://github.com/apache/ignite/commit/15956a8a6a26e37d99501fdb7e5af0b00efae506",
        "parent": "https://github.com/apache/ignite/commit/56162b39a9a86751ea0b791505db14f69348163b",
        "bug_id": "ignite_105",
        "file": [
            {
                "sha": "004e07c26d0814f6a944510674e8afe4d944cf78",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/15956a8a6a26e37d99501fdb7e5af0b00efae506/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/15956a8a6a26e37d99501fdb7e5af0b00efae506/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 24,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=15956a8a6a26e37d99501fdb7e5af0b00efae506",
                "patch": "@@ -871,17 +871,23 @@ else if (!canUsePartitionMapCompression(node)) {\n                     ready = cacheCtx.started();\n \n                 if (ready) {\n-                    GridDhtPartitionFullMap locMap = cacheCtx.topology().partitionMap(true);\n+                    GridAffinityAssignmentCache affCache = cacheCtx.affinity().affinityCache();\n \n-                    addFullPartitionsMap(m,\n-                        dupData,\n-                        compress,\n-                        cacheCtx.cacheId(),\n-                        locMap,\n-                        cacheCtx.affinity().affinityCache().similarAffinityKey());\n+                    if (affCache != null) {\n+                        GridDhtPartitionFullMap locMap = cacheCtx.topology().partitionMap(true);\n \n-                    if (exchId != null)\n-                        m.addPartitionUpdateCounters(cacheCtx.cacheId(), cacheCtx.topology().updateCounters(true));\n+                        addFullPartitionsMap(m,\n+                            dupData,\n+                            compress,\n+                            cacheCtx.cacheId(),\n+                            locMap,\n+                            affCache.similarAffinityKey());\n+\n+                        if (exchId != null)\n+                            m.addPartitionUpdateCounters(cacheCtx.cacheId(), cacheCtx.topology().updateCounters(true));\n+                    }\n+                    else\n+                        assert cctx.cacheContext(cacheCtx.cacheId()) == null : cacheCtx.name();\n                 }\n             }\n         }",
                "deletions": 9
            },
            {
                "sha": "75ddf523941abe15a1a95105d98d66b355996853",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/expiry/IgniteCacheAtomicPrimaryWriteOrderWithStoreExpiryPolicyTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/15956a8a6a26e37d99501fdb7e5af0b00efae506/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/expiry/IgniteCacheAtomicPrimaryWriteOrderWithStoreExpiryPolicyTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/15956a8a6a26e37d99501fdb7e5af0b00efae506/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/expiry/IgniteCacheAtomicPrimaryWriteOrderWithStoreExpiryPolicyTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/expiry/IgniteCacheAtomicPrimaryWriteOrderWithStoreExpiryPolicyTest.java?ref=15956a8a6a26e37d99501fdb7e5af0b00efae506",
                "patch": "@@ -24,7 +24,7 @@\n  *\n  */\n public class IgniteCacheAtomicPrimaryWriteOrderWithStoreExpiryPolicyTest extends\n-    IgniteCacheAtomicPrimaryWriteOrderExpiryPolicyTest{\n+    IgniteCacheAtomicPrimaryWriteOrderExpiryPolicyTest {\n     /** {@inheritDoc} */\n     @Override protected Factory<CacheStore> cacheStoreFactory() {\n         return new TestStoreFactory();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4066 Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/b1ec58f716ece3a5866dd654ebc707bef67caf57",
        "parent": "https://github.com/apache/ignite/commit/eaf8ae246cc799c1353332fcac05cb3a8efab02c",
        "bug_id": "ignite_106",
        "file": [
            {
                "sha": "f17e5889663fc41440507184a40d7d6abc719d33",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "blob_url": "https://github.com/apache/ignite/blob/b1ec58f716ece3a5866dd654ebc707bef67caf57/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "raw_url": "https://github.com/apache/ignite/raw/b1ec58f716ece3a5866dd654ebc707bef67caf57/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "status": "modified",
                "changes": 70,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java?ref=b1ec58f716ece3a5866dd654ebc707bef67caf57",
                "patch": "@@ -111,51 +111,55 @@\n         if (factory != null && factory instanceof CacheJdbcPojoStoreFactory) {\n              CacheJdbcPojoStoreFactory jdbcFactory = (CacheJdbcPojoStoreFactory) factory;\n \n-            for (JdbcType jdbcType : jdbcFactory.getTypes()) {\n-                VisorCacheTypeMetadata meta = metaMap.get(jdbcType.getKeyType());\n+            JdbcType[] jdbcTypes = jdbcFactory.getTypes();\n \n-                boolean notFound = meta == null;\n+            if (jdbcTypes != null && jdbcTypes.length > 0) {\n+                for (JdbcType jdbcType : jdbcTypes) {\n+                    VisorCacheTypeMetadata meta = metaMap.get(jdbcType.getKeyType());\n \n-                if (notFound) {\n-                    meta = new VisorCacheTypeMetadata();\n+                    boolean notFound = meta == null;\n \n-                    meta.keyType = jdbcType.getKeyType();\n-                    meta.valType = jdbcType.getValueType();\n+                    if (notFound) {\n+                        meta = new VisorCacheTypeMetadata();\n \n-                    meta.qryFlds = Collections.emptyMap();\n-                    meta.ascFlds = Collections.emptyMap();\n-                    meta.descFlds = Collections.emptyMap();\n-                    meta.txtFlds = Collections.emptyList();\n-                    meta.grps = Collections.emptyMap();\n-                }\n+                        meta.keyType = jdbcType.getKeyType();\n+                        meta.valType = jdbcType.getValueType();\n \n-                meta.dbSchema = jdbcType.getDatabaseSchema();\n-                meta.dbTbl = jdbcType.getDatabaseTable();\n+                        meta.qryFlds = Collections.emptyMap();\n+                        meta.ascFlds = Collections.emptyMap();\n+                        meta.descFlds = Collections.emptyMap();\n+                        meta.txtFlds = Collections.emptyList();\n+                        meta.grps = Collections.emptyMap();\n+                    }\n \n-                JdbcTypeField[] keyFields = jdbcType.getKeyFields();\n+                    meta.dbSchema = jdbcType.getDatabaseSchema();\n+                    meta.dbTbl = jdbcType.getDatabaseTable();\n \n-                if (keyFields != null) {\n-                    meta.keyFields = new ArrayList<>(keyFields.length);\n+                    JdbcTypeField[] keyFields = jdbcType.getKeyFields();\n \n-                    for (JdbcTypeField fld : keyFields)\n-                        meta.keyFields.add(new VisorCacheTypeFieldMetadata(\n-                            fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n-                            fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n-                }\n+                    if (keyFields != null) {\n+                        meta.keyFields = new ArrayList<>(keyFields.length);\n \n-                JdbcTypeField[] valFields = jdbcType.getValueFields();\n+                        for (JdbcTypeField fld : keyFields)\n+                            meta.keyFields.add(new VisorCacheTypeFieldMetadata(\n+                                fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n+                                fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n+                    }\n \n-                if (valFields != null) {\n-                    meta.valFields = new ArrayList<>(valFields.length);\n+                    JdbcTypeField[] valFields = jdbcType.getValueFields();\n \n-                    for (JdbcTypeField fld : valFields)\n-                        meta.valFields.add(new VisorCacheTypeFieldMetadata(\n-                            fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n-                            fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n-                }\n+                    if (valFields != null) {\n+                        meta.valFields = new ArrayList<>(valFields.length);\n \n-                if (notFound)\n-                    metas.add(meta);\n+                        for (JdbcTypeField fld : valFields)\n+                            meta.valFields.add(new VisorCacheTypeFieldMetadata(\n+                                fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n+                                fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n+                    }\n+\n+                    if (notFound)\n+                        metas.add(meta);\n+                }\n             }\n         }\n ",
                "deletions": 33
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4800: Lucene query may fails with NPE. This closes #2315.",
        "commit": "https://github.com/apache/ignite/commit/359777f2355483b3d206b874117d680076a03853",
        "parent": "https://github.com/apache/ignite/commit/48c914dcc3a092655636b0df5634c6336dd58a9d",
        "bug_id": "ignite_107",
        "file": [
            {
                "sha": "3ac9641f762db19dff87b70c1a99422f90273ab7",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java",
                "status": "modified",
                "changes": 64,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -21,22 +21,27 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.internal.util.offheap.unsafe.GridUnsafeMemory;\n+import org.apache.ignite.internal.util.typedef.F;\n import org.apache.lucene.store.BaseDirectory;\n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.IOContext;\n import org.apache.lucene.store.IndexInput;\n import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.Accountable;\n+import org.apache.lucene.util.Accountables;\n \n /**\n  * A memory-resident {@link Directory} implementation.\n  */\n-public class GridLuceneDirectory extends BaseDirectory {\n+public class GridLuceneDirectory extends BaseDirectory implements Accountable {\n     /** */\n     protected final Map<String, GridLuceneFile> fileMap = new ConcurrentHashMap<>();\n \n@@ -51,7 +56,7 @@\n      *\n      * @param mem Memory.\n      */\n-    public GridLuceneDirectory(GridUnsafeMemory mem) {\n+    GridLuceneDirectory(GridUnsafeMemory mem) {\n         super(new GridLuceneLockFactory());\n \n         this.mem = mem;\n@@ -64,10 +69,7 @@ public GridLuceneDirectory(GridUnsafeMemory mem) {\n         // and the code below is resilient to map changes during the array population.\n         Set<String> fileNames = fileMap.keySet();\n \n-        List<String> names = new ArrayList<>(fileNames.size());\n-\n-        for (String name : fileNames)\n-            names.add(name);\n+        List<String> names = new ArrayList<>(fileNames);\n \n         return names.toArray(new String[names.size()]);\n     }\n@@ -82,6 +84,7 @@ public GridLuceneDirectory(GridUnsafeMemory mem) {\n             throw new FileNotFoundException(source);\n \n         fileMap.put(dest, file);\n+\n         fileMap.remove(source);\n     }\n \n@@ -101,21 +104,25 @@ public GridLuceneDirectory(GridUnsafeMemory mem) {\n     @Override public void deleteFile(String name) throws IOException {\n         ensureOpen();\n \n-        doDeleteFile(name);\n+        doDeleteFile(name, false);\n     }\n \n     /**\n      * Deletes file.\n      *\n      * @param name File name.\n+     * @param onClose If on close directory;\n      * @throws IOException If failed.\n      */\n-    private void doDeleteFile(String name) throws IOException {\n+    private void doDeleteFile(String name, boolean onClose) throws IOException {\n         GridLuceneFile file = fileMap.remove(name);\n \n         if (file != null) {\n             file.delete();\n \n+            // All files should be closed when Directory is closing.\n+            assert !onClose || !file.hasRefs() : \"Possible memory leak, resource is not closed: \" + file.toString();\n+\n             sizeInBytes.addAndGet(-file.getSizeInBytes());\n         }\n         else\n@@ -128,16 +135,17 @@ private void doDeleteFile(String name) throws IOException {\n \n         GridLuceneFile file = newRAMFile();\n \n-        GridLuceneFile existing = fileMap.remove(name);\n+        // Lock for using in stream. Will be unlocked on stream closing.\n+        file.lockRef();\n+\n+        GridLuceneFile existing = fileMap.put(name, file);\n \n         if (existing != null) {\n             sizeInBytes.addAndGet(-existing.getSizeInBytes());\n \n             existing.delete();\n         }\n \n-        fileMap.put(name, file);\n-\n         return new GridLuceneOutputStream(file);\n     }\n \n@@ -165,23 +173,53 @@ protected GridLuceneFile newRAMFile() {\n         if (file == null)\n             throw new FileNotFoundException(name);\n \n+        // Lock for using in stream. Will be unlocked on stream closing.\n+        file.lockRef();\n+\n+        if (!fileMap.containsKey(name)) {\n+            // Unblock for deferred delete.\n+            file.releaseRef();\n+\n+            throw new FileNotFoundException(name);\n+        }\n+\n         return new GridLuceneInputStream(name, file);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void close() {\n         isOpen = false;\n \n+        IgniteException errs = null;\n+\n         for (String fileName : fileMap.keySet()) {\n             try {\n-                doDeleteFile(fileName);\n+                doDeleteFile(fileName, true);\n             }\n             catch (IOException e) {\n-                throw new IllegalStateException(e);\n+                if (errs == null)\n+                    errs = new IgniteException(\"Error closing index directory.\");\n+\n+                errs.addSuppressed(e);\n             }\n         }\n \n         assert fileMap.isEmpty();\n+\n+        if (errs != null && !F.isEmpty(errs.getSuppressed()))\n+            throw errs;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public long ramBytesUsed() {\n+        ensureOpen();\n+\n+        return sizeInBytes.get();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized Collection<Accountable> getChildResources() {\n+        return Accountables.namedAccountables(\"file\", new HashMap<>(fileMap));\n     }\n \n     /**",
                "deletions": 13
            },
            {
                "sha": "d7ae132903b976618a0c47bd599bdce2e04849a9",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java",
                "status": "modified",
                "changes": 91,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -17,22 +17,19 @@\n \n package org.apache.ignite.internal.processors.query.h2.opt;\n \n-import java.io.Serializable;\n import java.util.Arrays;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.lucene.util.Accountable;\n \n import static org.apache.ignite.internal.processors.query.h2.opt.GridLuceneOutputStream.BUFFER_SIZE;\n \n /**\n  * Lucene file.\n  */\n-public class GridLuceneFile implements Serializable {\n-    /** */\n-    private static final long serialVersionUID = 0L;\n-\n-    /** */\n-    public static final AtomicInteger filesCnt = new AtomicInteger();\n-\n+public class GridLuceneFile implements Accountable {\n     /** */\n     private LongArray buffers = new LongArray();\n \n@@ -45,15 +42,19 @@\n     /** */\n     private volatile long sizeInBytes;\n \n+    /** */\n+    private final AtomicLong refCnt = new AtomicLong();\n+\n+    /** */\n+    private final AtomicBoolean deleted = new AtomicBoolean();\n+\n     /**\n      * File used as buffer, in no RAMDirectory\n      *\n      * @param dir Directory.\n      */\n     GridLuceneFile(GridLuceneDirectory dir) {\n         this.dir = dir;\n-\n-        filesCnt.incrementAndGet();\n     }\n \n     /**\n@@ -92,52 +93,90 @@ final long addBuffer() {\n         return buf;\n     }\n \n+    /**\n+     * Increment ref counter.\n+     */\n+    void lockRef() {\n+        refCnt.incrementAndGet();\n+    }\n+\n+    /**\n+     * Decrement ref counter.\n+     */\n+    void releaseRef() {\n+        refCnt.decrementAndGet();\n+\n+        deferredDelete();\n+    }\n+\n+    /**\n+     * Checks if there is file stream opened.\n+     *\n+     * @return {@code True} if file has external references.\n+     */\n+    boolean hasRefs() {\n+        long refs = refCnt.get();\n+\n+        assert refs >= 0;\n+\n+        return refs != 0;\n+    }\n+\n     /**\n      * Gets address of buffer.\n      *\n      * @param idx Index.\n      * @return Pointer.\n      */\n-    protected final synchronized long getBuffer(int idx) {\n+    final synchronized long getBuffer(int idx) {\n         return buffers.get(idx);\n     }\n \n     /**\n      * @return Number of buffers.\n      */\n-    protected final synchronized int numBuffers() {\n+    final synchronized int numBuffers() {\n         return buffers.size();\n     }\n \n     /**\n-     * Expert: allocate a new buffer.\n-     * Subclasses can allocate differently.\n+     * Expert: allocate a new buffer. Subclasses can allocate differently.\n      *\n      * @return allocated buffer.\n      */\n-    protected long newBuffer() {\n+    private long newBuffer() {\n         return dir.memory().allocate(BUFFER_SIZE);\n     }\n \n     /**\n      * Deletes file and deallocates memory..\n      */\n-    public synchronized void delete() {\n-        if (buffers == null)\n+    public void delete() {\n+        if (!deleted.compareAndSet(false, true))\n             return;\n \n+        deferredDelete();\n+    }\n+\n+    /**\n+     * Deferred delete.\n+     */\n+    synchronized void deferredDelete() {\n+        if (!deleted.get() || hasRefs())\n+            return;\n+\n+        assert refCnt.get() == 0;\n+\n         for (int i = 0; i < buffers.idx; i++)\n             dir.memory().release(buffers.arr[i], BUFFER_SIZE);\n \n         buffers = null;\n-\n-        filesCnt.decrementAndGet();\n     }\n \n     /**\n      * @return Size in bytes.\n      */\n-    public long getSizeInBytes() {\n+    long getSizeInBytes() {\n         return sizeInBytes;\n     }\n \n@@ -148,6 +187,16 @@ public GridLuceneDirectory getDirectory() {\n         return dir;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public long ramBytesUsed() {\n+        return sizeInBytes;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<Accountable> getChildResources() {\n+        return Collections.emptyList();\n+    }\n+\n     /**\n      * Simple expandable long[] wrapper.\n      */",
                "deletions": 21
            },
            {
                "sha": "c51eb5d37cf5428990681f1224ec60969f51ec28",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -296,7 +296,8 @@ public void remove(CacheObject key) throws IgniteCheckedException {\n     /** {@inheritDoc} */\n     @Override public void close() {\n         U.closeQuiet(writer);\n-        U.closeQuiet(dir);\n+\n+        dir.close();\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "9b1bf0c2a90909b11c2e90778769f5de18d66987",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java",
                "status": "modified",
                "changes": 42,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -20,14 +20,15 @@\n import java.io.EOFException;\n import java.io.IOException;\n import org.apache.ignite.internal.util.offheap.unsafe.GridUnsafeMemory;\n+import org.apache.lucene.store.AlreadyClosedException;\n import org.apache.lucene.store.IndexInput;\n \n import static org.apache.ignite.internal.processors.query.h2.opt.GridLuceneOutputStream.BUFFER_SIZE;\n \n /**\n  * A memory-resident {@link IndexInput} implementation.\n  */\n-public class GridLuceneInputStream extends IndexInput {\n+public class GridLuceneInputStream extends IndexInput implements Cloneable {\n     /** */\n     private GridLuceneFile file;\n \n@@ -52,6 +53,11 @@\n     /** */\n     private final GridUnsafeMemory mem;\n \n+    /** */\n+    private volatile boolean closed;\n+\n+    /** */\n+    private boolean isClone;\n     /**\n      * Constructor.\n      *\n@@ -91,7 +97,24 @@ public GridLuceneInputStream(String name, GridLuceneFile f, final long length) t\n \n     /** {@inheritDoc} */\n     @Override public void close() {\n-        // nothing to do here\n+        if (!isClone) {\n+            closed = true;\n+\n+            file.releaseRef();\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public IndexInput clone() {\n+        GridLuceneInputStream clone = (GridLuceneInputStream) super.clone();\n+\n+        if(closed)\n+            throw new AlreadyClosedException(toString());\n+\n+        clone.isClone = true;\n+\n+        return clone;\n+\n     }\n \n     /** {@inheritDoc} */\n@@ -222,35 +245,34 @@ void readBytes(long ptr, int len) throws IOException {\n         public SlicedInputStream(String newResourceDescription, long offset, long length) throws IOException {\n             super(newResourceDescription, GridLuceneInputStream.this.file, offset + length);\n \n+            // Avoid parent resource closing together with this.\n+            super.isClone = true;\n+\n             this.offset = offset;\n \n             seek(0L);\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public void seek(long pos) throws IOException {\n+        @Override public void seek(long pos) throws IOException {\n             if (pos < 0L) {\n                 throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n             }\n             super.seek(pos + offset);\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public long getFilePointer() {\n+        @Override public long getFilePointer() {\n             return super.getFilePointer() - offset;\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public long length() {\n+        @Override public long length() {\n             return super.length() - offset;\n         }\n \n         /** {@inheritDoc} */\n-        @Override\n-        public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n+        @Override public IndexInput slice(String sliceDescription, long ofs, long len) throws IOException {\n             return super.slice(sliceDescription, offset + ofs, len);\n         }\n     }",
                "deletions": 10
            },
            {
                "sha": "d8f09dfd0cf0fd10d278e20e67ce6470aaf96b03",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java",
                "status": "modified",
                "changes": 18,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -18,17 +18,21 @@\n package org.apache.ignite.internal.processors.query.h2.opt;\n \n import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.zip.CRC32;\n import java.util.zip.Checksum;\n import org.apache.ignite.internal.util.offheap.unsafe.GridUnsafeMemory;\n import org.apache.lucene.store.BufferedChecksum;\n import org.apache.lucene.store.DataInput;\n import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.Accountable;\n+import org.apache.lucene.util.Accountables;\n \n /**\n  * A memory-resident {@link IndexOutput} implementation.\n  */\n-public class GridLuceneOutputStream extends IndexOutput {\n+public class GridLuceneOutputStream extends IndexOutput implements Accountable {\n     /** Off-heap page size. */\n     static final int BUFFER_SIZE = 32 * 1024;\n \n@@ -93,6 +97,8 @@ public void reset() {\n     /** {@inheritDoc} */\n     @Override public void close() throws IOException {\n         flush();\n+\n+        file.releaseRef();\n     }\n \n     /** {@inheritDoc} */\n@@ -201,4 +207,14 @@ private void flush() throws IOException {\n             bufPosition += toCp;\n         }\n     }\n+\n+    /** {@inheritDoc} */\n+    @Override public long ramBytesUsed() {\n+        return file.getSizeInBytes();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<Accountable> getChildResources() {\n+        return Collections.singleton(Accountables.namedAccountable(\"file\", file));\n+    }\n }\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "162b1e5bacaaaa02cb1e036edd732a025252d28e",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheFullTextQueryNodeJoiningSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheFullTextQueryNodeJoiningSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheFullTextQueryNodeJoiningSelfTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheFullTextQueryNodeJoiningSelfTest.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -42,7 +42,6 @@\n import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC;\n \n /**\n- * TODO https://issues.apache.org/jira/browse/IGNITE-2229\n  * Tests cache in-place modification logic with iterative value increment.\n  */\n public class IgniteCacheFullTextQueryNodeJoiningSelfTest extends GridCommonAbstractTest {\n@@ -107,6 +106,8 @@ protected CacheAtomicityMode atomicityMode() {\n      * @throws Exception If failed.\n      */\n     public void testFullTextQueryNodeJoin() throws Exception {\n+        fail(\"https://issues.apache.org/jira/browse/IGNITE-2229\");\n+\n         for (int r = 0; r < 5; r++) {\n             startGrids(GRID_CNT);\n ",
                "deletions": 1
            },
            {
                "sha": "1ad0d4bfb8ca24cccb130153828078b03c8c37f7",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/359777f2355483b3d206b874117d680076a03853/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java?ref=359777f2355483b3d206b874117d680076a03853",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.ignite.internal.processors.cache.IgniteCacheDeleteSqlQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheDuplicateEntityConfigurationSelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheFieldsQueryNoDataSelfTest;\n+import org.apache.ignite.internal.processors.cache.IgniteCacheFullTextQueryNodeJoiningSelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheInsertSqlQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheJoinPartitionedAndReplicatedTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheJoinQueryWithAffinityKeyTest;\n@@ -273,6 +274,7 @@ public static TestSuite suite() throws Exception {\n \n         // Full text queries.\n         suite.addTestSuite(GridCacheFullTextQuerySelfTest.class);\n+        suite.addTestSuite(IgniteCacheFullTextQueryNodeJoiningSelfTest.class);\n \n         // Ignite cache and H2 comparison.\n         suite.addTestSuite(BaseH2CompareQueryTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "EA1 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/aa7d28222563adbac0ddd246745e5e14e62d886e",
        "parent": "https://github.com/apache/ignite/commit/d574038a4694d3a7273797696af4e1b712f8cfbc",
        "bug_id": "ignite_108",
        "file": [
            {
                "sha": "d5acfbba2f3c66d77bcad9774ee57b6e96e75793",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/aa7d28222563adbac0ddd246745e5e14e62d886e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/aa7d28222563adbac0ddd246745e5e14e62d886e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 25,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=aa7d28222563adbac0ddd246745e5e14e62d886e",
                "patch": "@@ -591,21 +591,23 @@ private void cleanup(CacheConfiguration cfg, @Nullable Object rsrc, boolean near\n             registerCache(internalCaches, cfg);\n         }\n \n-        Set<String> savedCacheNames = sharedCtx.pageStore().savedCacheNames();\n+        if (sharedCtx.pageStore() != null) {\n+            Set<String> savedCacheNames = sharedCtx.pageStore().savedCacheNames();\n \n-        for (CacheConfiguration cfg : cfgs)\n-            savedCacheNames.remove(cfg.getName());\n+            for (CacheConfiguration cfg : cfgs)\n+                savedCacheNames.remove(cfg.getName());\n \n-        for (String name : internalCaches)\n-            savedCacheNames.remove(name);\n+            for (String name : internalCaches)\n+                savedCacheNames.remove(name);\n \n-        if (!ctx.config().isDaemon() && sharedCtx.database().persistenceEnabled() && !F.isEmpty(savedCacheNames)) {\n-            log.info(\"Will start persisted dynamic caches: \" + savedCacheNames);\n+            if (!ctx.config().isDaemon() && sharedCtx.database().persistenceEnabled() && !F.isEmpty(savedCacheNames)) {\n+                log.info(\"Will start persisted dynamic caches: \" + savedCacheNames);\n \n-            for (String name : savedCacheNames) {\n-                CacheConfiguration cfg = sharedCtx.pageStore().readConfiguration(name);\n+                for (String name : savedCacheNames) {\n+                    CacheConfiguration cfg = sharedCtx.pageStore().readConfiguration(name);\n \n-                registerCache(internalCaches, cfg);\n+                    registerCache(internalCaches, cfg);\n+                }\n             }\n         }\n \n@@ -762,7 +764,8 @@ else if (internalCaches.contains(maskNull(cfg.getName())))\n                 if (ctx.config().isDaemon() && !CU.isMarshallerCache(desc.cacheConfiguration().getName()))\n                     continue;\n \n-                sharedCtx.pageStore().initializeForCache(desc.cacheConfiguration());\n+                if (sharedCtx.pageStore() != null)\n+                    sharedCtx.pageStore().initializeForCache(desc.cacheConfiguration());\n             }\n \n             sharedCtx.database().onKernalStart(false);",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-12495 SaveStoreMetadata doesn't work for local cache. Got NPE.",
        "commit": "https://github.com/apache/ignite/commit/0d6b73081725d006947a11bfe787bf01f0e869f4",
        "parent": "https://github.com/apache/ignite/commit/310d903a3ae23a2761c5c8339e5cd53ea6a7eb03",
        "bug_id": "ignite_109",
        "file": [
            {
                "sha": "a6ed7c5351c06c234b003a11574d1704ed14d8c6",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MetaPageUpdatePartitionDataRecord.java",
                "blob_url": "https://github.com/apache/ignite/blob/0d6b73081725d006947a11bfe787bf01f0e869f4/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MetaPageUpdatePartitionDataRecord.java",
                "raw_url": "https://github.com/apache/ignite/raw/0d6b73081725d006947a11bfe787bf01f0e869f4/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MetaPageUpdatePartitionDataRecord.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MetaPageUpdatePartitionDataRecord.java?ref=0d6b73081725d006947a11bfe787bf01f0e869f4",
                "patch": "@@ -111,6 +111,8 @@ public byte state() {\n         io.setGlobalRemoveId(pageAddr, globalRmvId);\n         io.setSize(pageAddr, partSize);\n         io.setCountersPageId(pageAddr, cntrsPageId);\n+        io.setPartitionState(pageAddr, state);\n+        io.setCandidatePageCount(pageAddr, allocatedIdxCandidate);\n     }\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "ed6eee2f06d212da25e320da7fa6b9003d86f7b7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/0d6b73081725d006947a11bfe787bf01f0e869f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/0d6b73081725d006947a11bfe787bf01f0e869f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java?ref=0d6b73081725d006947a11bfe787bf01f0e869f4",
                "patch": "@@ -363,7 +363,7 @@ private boolean saveStoreMetadata(CacheDataStore store, Context ctx, boolean sav\n                                 rmvId,\n                                 size,\n                                 cntrsPageId,\n-                                (byte)state.ordinal(),\n+                                state == null ? -1 : (byte)state.ordinal(),\n                                 pageCnt\n                             ));\n                     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-1178 fix for NPE in GridCacheProcessor.onKernalStop(). Fixes #1517",
        "commit": "https://github.com/apache/ignite/commit/0b996e62119b316f9758da09623c722ec2fb7921",
        "parent": "https://github.com/apache/ignite/commit/e6703518f4549a183993a5422fbf75b18f1237de",
        "bug_id": "ignite_110",
        "file": [
            {
                "sha": "621634c8b81861113df6e1db187898cc5dcce8c4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "status": "modified",
                "changes": 21,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -17,6 +17,11 @@\n \n package org.apache.ignite.internal.processors.cache;\n \n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.binary.BinaryObject;\n@@ -33,12 +38,6 @@\n import org.apache.ignite.lang.IgniteFuture;\n import org.jetbrains.annotations.Nullable;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.UUID;\n-\n /**\n  * Cache affinity manager.\n  */\n@@ -88,18 +87,24 @@\n      *\n      */\n     public void cancelFutures() {\n+        if (!starting.get())\n+            // Ignoring attempt to stop manager that has never been started.\n+            return;\n+\n         IgniteCheckedException err =\n             new IgniteCheckedException(\"Failed to wait for topology update, cache (or node) is stopping.\");\n \n-        aff.cancelFutures(err);\n+        if (aff != null)\n+            aff.cancelFutures(err);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void onDisconnected(IgniteFuture reconnectFut) {\n         IgniteCheckedException err = new IgniteClientDisconnectedCheckedException(reconnectFut,\n             \"Failed to wait for topology update, client disconnected.\");\n \n-        aff.cancelFutures(err);\n+        if (aff != null)\n+            aff.cancelFutures(err);\n     }\n \n     /**",
                "deletions": 8
            },
            {
                "sha": "ab965dea912d4f8a0bef91fb308b040e9f496622",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -34,7 +34,7 @@\n     protected IgniteLogger log;\n \n     /** Starting flag. */\n-    private final AtomicBoolean starting = new AtomicBoolean(false);\n+    protected final AtomicBoolean starting = new AtomicBoolean(false);\n \n     /** {@inheritDoc} */\n     @Override public final void start(GridCacheContext<K, V> cctx) throws IgniteCheckedException {",
                "deletions": 1
            },
            {
                "sha": "b016883c21045468228ba90ebcc40a9d32d8948d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -63,7 +63,6 @@\n import org.apache.ignite.configuration.TransactionConfiguration;\n import org.apache.ignite.events.EventType;\n import org.apache.ignite.internal.GridKernalContext;\n-import org.apache.ignite.internal.suggestions.GridPerformanceSuggestions;\n import org.apache.ignite.internal.IgniteClientDisconnectedCheckedException;\n import org.apache.ignite.internal.IgniteComponentType;\n import org.apache.ignite.internal.IgniteInternalFuture;\n@@ -102,6 +101,7 @@\n import org.apache.ignite.internal.processors.plugin.CachePluginManager;\n import org.apache.ignite.internal.processors.query.GridQueryProcessor;\n import org.apache.ignite.internal.processors.timeout.GridTimeoutObject;\n+import org.apache.ignite.internal.suggestions.GridPerformanceSuggestions;\n import org.apache.ignite.internal.util.F0;\n import org.apache.ignite.internal.util.future.GridCompoundFuture;\n import org.apache.ignite.internal.util.future.GridFinishedFuture;",
                "deletions": 1
            },
            {
                "sha": "fddb8df07b58ab9ce39b7a047a8088d7985603a9",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "status": "modified",
                "changes": 20,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -1653,13 +1653,27 @@ private static ClassProperty buildClassProperty(Class<?> keyCls, Class<?> valCls\n             res = buildClassProperty(false, valCls, pathStr, resType, aliases, coCtx);\n \n         if (res == null)\n-            throw new IgniteCheckedException(\"Failed to initialize property '\" + pathStr + \"' of type '\" +\n-                resType.getName() + \"' for key class '\" + keyCls + \"' and value class '\" + valCls + \"'. \" +\n-                \"Make sure that one of these classes contains respective getter method or field.\");\n+            throw new IgniteCheckedException(propertyInitializationExceptionMessage(keyCls, valCls, pathStr, resType));\n \n         return res;\n     }\n \n+    /**\n+     * Exception message to compare in tests.\n+     *\n+     * @param keyCls key class\n+     * @param valCls value class\n+     * @param pathStr property name\n+     * @param resType property type\n+     * @return\n+     */\n+    public static String propertyInitializationExceptionMessage(Class<?> keyCls, Class<?> valCls, String pathStr,\n+        Class<?> resType) {\n+        return \"Failed to initialize property '\" + pathStr + \"' of type '\" +\n+            resType.getName() + \"' for key class '\" + keyCls + \"' and value class '\" + valCls + \"'. \" +\n+            \"Make sure that one of these classes contains respective getter method or field.\";\n+    }\n+\n     /**\n      * @param key If this is a key property.\n      * @param cls Source type class.",
                "deletions": 3
            },
            {
                "sha": "4178cde490585e823b22eb79dee99979a5b3d119",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectCacheTypeMetadataTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectCacheTypeMetadataTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectCacheTypeMetadataTest.java",
                "status": "added",
                "changes": 72,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectCacheTypeMetadataTest.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.cache.CacheTypeMetadata;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.processors.query.GridQueryProcessor;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * A test for {@link CacheTypeMetadata} initialization with incorrect query field name\n+ */\n+public class IncorrectCacheTypeMetadataTest extends GridCommonAbstractTest {\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        CacheConfiguration dfltCacheCfg = defaultCacheConfiguration();\n+\n+        CacheTypeMetadata cacheTypeMetadata = new CacheTypeMetadata();\n+\n+        Map<String, Class<?>> queryFieldsMap = new HashMap<>();\n+\n+        queryFieldsMap.put(\"exceptionOid\", Object.class);\n+\n+        cacheTypeMetadata.setQueryFields(queryFieldsMap);\n+        cacheTypeMetadata.setValueType(Object.class);\n+\n+        dfltCacheCfg.setTypeMetadata(Collections.singleton(cacheTypeMetadata));\n+\n+        cfg.setCacheConfiguration(dfltCacheCfg);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Grid must be stopped with property initialization exception.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testIncorrectQueryField() throws Exception {\n+        try {\n+            startGrid();\n+        }\n+        catch (Exception exception) {\n+            if (!exception.getMessage().contains(\n+                GridQueryProcessor.propertyInitializationExceptionMessage(\n+                    Object.class, Object.class, \"exceptionOid\", Object.class))) {\n+                fail(\"property initialization exception must be thrown, but got \" + exception.getMessage());\n+            }\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "5d89a58b2987309bbe766431c421a7d07dda7871",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectQueryEntityTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectQueryEntityTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectQueryEntityTest.java",
                "status": "added",
                "changes": 75,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IncorrectQueryEntityTest.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import org.apache.ignite.cache.QueryEntity;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.processors.query.GridQueryProcessor;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+public class IncorrectQueryEntityTest extends GridCommonAbstractTest {\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        CacheConfiguration dfltCacheCfg = defaultCacheConfiguration();\n+\n+        QueryEntity queryEntity = new QueryEntity(Object.class.getName(), Object.class.getName());\n+\n+        LinkedHashMap<String, String> fields = new LinkedHashMap<>();\n+\n+        fields.put(\"exceptionOid\", Object.class.getName());\n+\n+        queryEntity.setFields(fields);\n+\n+        Set<String> keyFields = new HashSet<>();\n+\n+        keyFields.add(\"exceptionOid\");\n+\n+        queryEntity.setKeyFields(keyFields);\n+\n+        dfltCacheCfg.setQueryEntities(F.asList(queryEntity));\n+\n+        cfg.setCacheConfiguration(dfltCacheCfg);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Grid must be stopped with property initialization exception.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testIncorrectQueryField() throws Exception {\n+        try {\n+            startGrid();\n+        }\n+        catch (Exception exception) {\n+            if (!exception.getMessage().contains(\n+                GridQueryProcessor.propertyInitializationExceptionMessage(\n+                    Object.class, Object.class, \"exceptionOid\", Object.class))) {\n+                fail(\"property initialization exception must be thrown, but got \" + exception.getMessage());\n+            }\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "b7be713309f1364b253eb023efa8816212ebfab8",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/0b996e62119b316f9758da09623c722ec2fb7921/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java?ref=0b996e62119b316f9758da09623c722ec2fb7921",
                "patch": "@@ -68,6 +68,8 @@\n import org.apache.ignite.internal.processors.cache.IgniteCacheQueryLoadSelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCacheUpdateSqlQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.IgniteCrossCachesJoinsQueryTest;\n+import org.apache.ignite.internal.processors.cache.IncorrectCacheTypeMetadataTest;\n+import org.apache.ignite.internal.processors.cache.IncorrectQueryEntityTest;\n import org.apache.ignite.internal.processors.cache.QueryEntityCaseMismatchTest;\n import org.apache.ignite.internal.processors.cache.SqlFieldsQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.distributed.near.IgniteCacheAtomicFieldsQuerySelfTest;\n@@ -133,6 +135,8 @@ public static TestSuite suite() throws Exception {\n \n         // Config.\n         suite.addTestSuite(IgniteCacheDuplicateEntityConfigurationSelfTest.class);\n+        suite.addTestSuite(IncorrectCacheTypeMetadataTest.class);\n+        suite.addTestSuite(IncorrectQueryEntityTest.class);\n \n         // Queries tests.\n         suite.addTestSuite(IgniteSqlSplitterSelfTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-5204: Fixed NPE on certain data with index inlining. This closes #2115.",
        "commit": "https://github.com/apache/ignite/commit/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
        "parent": "https://github.com/apache/ignite/commit/ea4420e6aad509c4ae58d6d0880918c98fd1959a",
        "bug_id": "ignite_111",
        "file": [
            {
                "sha": "19cf857fece29f356d79697bc57850802241012f",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "blob_url": "https://github.com/apache/ignite/blob/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "raw_url": "https://github.com/apache/ignite/raw/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java?ref=0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
                "patch": "@@ -441,7 +441,7 @@ public int put(long pageAddr, int off, Value val, int maxSize) {\n                     size = (short)s.length;\n                 else {\n                     s = trimUTF8(s, maxSize - 3);\n-                    size = (short)(s.length | 0x8000);\n+                    size = (short)(s == null ? 0 : s.length | 0x8000);\n                 }\n \n                 if (s == null) {",
                "deletions": 1
            },
            {
                "sha": "a2a3a7204cc6b1273ebb047edecf78b3b00f4fe3",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java?ref=0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
                "patch": "@@ -167,6 +167,10 @@ public void testStringTruncate() throws Exception {\n             assertTrue(ih.isValueFull(pageAddr, off));\n \n             assertEquals(\"aaa\", ih.get(pageAddr, off, 3 + 5).getString());\n+\n+            ih.put(pageAddr, off, ValueString.get(\"\\u20acaaa\"), 3 + 2);\n+\n+            assertNull(ih.get(pageAddr, off, 3 + 2));\n         }\n         finally {\n             if (page != 0L)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in IgniteProcessProxy.kill()\n(cherry picked from commit 11bc058)",
        "commit": "https://github.com/apache/ignite/commit/9e6b8ccea36ba2665cbe4e91c59a35a26590f9ae",
        "parent": "https://github.com/apache/ignite/commit/4c97f43be8b608f20f2a5a3d40280233cffd46e8",
        "bug_id": "ignite_112",
        "file": [
            {
                "sha": "4f204c4ebfe9e72206f63ac0de7a76e802b1df88",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "blob_url": "https://github.com/apache/ignite/blob/9e6b8ccea36ba2665cbe4e91c59a35a26590f9ae/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "raw_url": "https://github.com/apache/ignite/raw/9e6b8ccea36ba2665cbe4e91c59a35a26590f9ae/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java?ref=9e6b8ccea36ba2665cbe4e91c59a35a26590f9ae",
                "patch": "@@ -241,9 +241,12 @@ public static void stop(String gridName, boolean cancel) {\n      * @param gridName Grid name.\n      */\n     public static void kill(String gridName) {\n+        A.notNull(gridName, \"gridName\");\n+\n         IgniteProcessProxy proxy = gridProxies.get(gridName);\n \n-        A.notNull(gridName, \"gridName\");\n+        if (proxy == null)\n+            return;\n \n         try {\n             proxy.getProcess().kill();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-db-x  try/catch for npe, odbc refactoring",
        "commit": "https://github.com/apache/ignite/commit/39894517ed30646627bfaadf3fed60fb72a7057b",
        "parent": "https://github.com/apache/ignite/commit/425ae4c4df9d621a8b82fc9f0b8a479d597e5c0d",
        "bug_id": "ignite_113",
        "file": [
            {
                "sha": "26b4fe8d2cb45aa61f5d397a7f5f3d45c65baa32",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java",
                "blob_url": "https://github.com/apache/ignite/blob/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java",
                "raw_url": "https://github.com/apache/ignite/raw/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java?ref=39894517ed30646627bfaadf3fed60fb72a7057b",
                "patch": "@@ -462,6 +462,12 @@ protected void end(@Nullable Connection conn, @Nullable Statement st) {\n                         clo.apply(key, val);\n                     }\n                 }\n+                catch (NullPointerException e){\n+                    //todo only for investigation\n+                    System.out.println(\"Got NPE\");\n+\n+                    e.printStackTrace();\n+                }\n                 catch (SQLException e) {\n                     throw new IgniteCheckedException(\"Failed to load cache\", e);\n                 }",
                "deletions": 0
            },
            {
                "sha": "b70513b271f5fba5b1ca336e644a6059b0078fd4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=39894517ed30646627bfaadf3fed60fb72a7057b",
                "patch": "@@ -7586,7 +7586,12 @@ public static void join(GridWorker w) throws IgniteInterruptedCheckedException {\n             return fut.get();\n         }\n         catch (ExecutionException e) {\n-             throw new IgniteCheckedException(e.getCause());\n+            //todo only for investigation\n+            System.out.println(\"Task exception:\");\n+\n+            e.getCause().printStackTrace();\n+\n+            throw new IgniteCheckedException(e.getCause());\n         }\n         catch (InterruptedException e) {\n             Thread.currentThread().interrupt();",
                "deletions": 1
            },
            {
                "sha": "d0cdddf6d1ae4567f172e2ce69b025b600037c1c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/odbc/OdbcProcessorValidationSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/test/java/org/apache/ignite/internal/processors/odbc/OdbcProcessorValidationSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/39894517ed30646627bfaadf3fed60fb72a7057b/modules/core/src/test/java/org/apache/ignite/internal/processors/odbc/OdbcProcessorValidationSelfTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/odbc/OdbcProcessorValidationSelfTest.java?ref=39894517ed30646627bfaadf3fed60fb72a7057b",
                "patch": "@@ -17,18 +17,17 @@\n \n package org.apache.ignite.internal.processors.odbc;\n \n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.ignite.IgniteException;\n-import org.apache.ignite.Ignition;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.configuration.OdbcConfiguration;\n+import org.apache.ignite.internal.binary.BinaryMarshaller;\n import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n \n-import java.util.concurrent.Callable;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n /**\n  * ODBC configuration validation tests.\n  */\n@@ -155,11 +154,12 @@ public void testThreadPoolSize() throws Exception {\n      */\n     @SuppressWarnings(\"ThrowableResultOfMethodCallIgnored\")\n     private void check(OdbcConfiguration odbcCfg, boolean success) throws Exception {\n-        final IgniteConfiguration cfg = new IgniteConfiguration();\n+        final IgniteConfiguration cfg = super.getConfiguration();\n \n         cfg.setGridName(OdbcProcessorValidationSelfTest.class.getName() + \"-\" + NODE_IDX_GEN.incrementAndGet());\n         cfg.setLocalHost(\"127.0.0.1\");\n         cfg.setOdbcConfiguration(odbcCfg);\n+        cfg.setMarshaller(new BinaryMarshaller());\n \n         TcpDiscoverySpi spi = new TcpDiscoverySpi();\n         spi.setIpFinder(new TcpDiscoveryVmIpFinder(true));",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in IgniteProcessProxy.kill()\n(cherry picked from commit 11bc058)",
        "commit": "https://github.com/apache/ignite/commit/9eb26bd83ff57980adb929dddf7d4bd62810bf51",
        "parent": "https://github.com/apache/ignite/commit/7a65281a60ffb2a3dfad7b75fb303ccd0eb8d3d6",
        "bug_id": "ignite_114",
        "file": [
            {
                "sha": "7c622084b233a47b37d1235e5d2f3c28b6c4c80b",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "blob_url": "https://github.com/apache/ignite/blob/9eb26bd83ff57980adb929dddf7d4bd62810bf51/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "raw_url": "https://github.com/apache/ignite/raw/9eb26bd83ff57980adb929dddf7d4bd62810bf51/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/multijvm/IgniteProcessProxy.java?ref=9eb26bd83ff57980adb929dddf7d4bd62810bf51",
                "patch": "@@ -234,9 +234,12 @@ public static void stop(String gridName, boolean cancel) {\n      * @param gridName Grid name.\n      */\n     public static void kill(String gridName) {\n+        A.notNull(gridName, \"gridName\");\n+\n         IgniteProcessProxy proxy = gridProxies.get(gridName);\n \n-        A.notNull(gridName, \"gridName\");\n+        if (proxy == null)\n+            return;\n \n         try {\n             proxy.getProcess().kill();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-12336 fix npe in cluster state processor on stop daemon client node",
        "commit": "https://github.com/apache/ignite/commit/b9999269468cd6e91a8c855adb2efc6e017df09d",
        "parent": "https://github.com/apache/ignite/commit/7c515eef4b5e07d8799a860b32ad472d77e319a2",
        "bug_id": "ignite_115",
        "file": [
            {
                "sha": "c425bfbcd6fa95814f173d621357cb105e1043e4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/b9999269468cd6e91a8c855adb2efc6e017df09d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/b9999269468cd6e91a8c855adb2efc6e017df09d/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=b9999269468cd6e91a8c855adb2efc6e017df09d",
                "patch": "@@ -692,8 +692,16 @@ private void cleanup(CacheConfiguration cfg, @Nullable Object rsrc, boolean near\n         for (GridCacheSharedManager mgr : sharedCtx.managers())\n             mgr.start(sharedCtx);\n \n-        if (ctx.config().isDaemon())\n+        if (ctx.config().isDaemon()) {\n+            ctx.state().cacheProcessorStarted(new CacheJoinNodeDiscoveryData(\n+                IgniteUuid.randomUuid(),\n+                Collections.<String, CacheInfo>emptyMap(),\n+                Collections.<String, CacheInfo>emptyMap(),\n+                false\n+            ));\n+\n             return;\n+        }\n \n         Map<String, CacheInfo> caches = new HashMap<>();\n ",
                "deletions": 1
            },
            {
                "sha": "c3bdcdaf734098ac07043c5232b504f243a0f16c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteStandByClusterTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/b9999269468cd6e91a8c855adb2efc6e017df09d/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteStandByClusterTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/b9999269468cd6e91a8c855adb2efc6e017df09d/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteStandByClusterTest.java",
                "status": "modified",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/standbycluster/IgniteStandByClusterTest.java?ref=b9999269468cd6e91a8c855adb2efc6e017df09d",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.ignite.internal.processors.cache.persistence.standbycluster;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Map;\n import org.apache.ignite.IgniteCache;\n import org.apache.ignite.cluster.ClusterNode;\n@@ -40,8 +41,12 @@\n  *\n  */\n public class IgniteStandByClusterTest extends GridCommonAbstractTest {\n+    /** */\n     private static final TcpDiscoveryIpFinder vmIpFinder = new TcpDiscoveryVmIpFinder(true);\n \n+    /**\n+     *\n+     */\n     @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n         IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n \n@@ -52,6 +57,9 @@\n         return cfg;\n     }\n \n+    /**\n+     * @throws Exception if fail.\n+     */\n     public void testNotStartDynamicCachesOnClientAfterActivation() throws Exception {\n         final String cacheName0 = \"cache0\";\n         final String cacheName = \"cache\";\n@@ -117,6 +125,9 @@ public void testNotStartDynamicCachesOnClientAfterActivation() throws Exception\n         assertNotNull(ig3.cache(cacheName));\n     }\n \n+    /**\n+     * @throws Exception if fail.\n+     */\n     public void testStaticCacheStartAfterActivationWithCacheFilter() throws Exception {\n         String cache1 = \"cache1\";\n         String cache2 = \"cache2\";\n@@ -187,6 +198,9 @@ public void testStaticCacheStartAfterActivationWithCacheFilter() throws Exceptio\n         Assert.assertNotNull(caches3.get(cache3));\n     }\n \n+    /**\n+     * @throws Exception if fail.\n+     */\n     public void testSimple() throws Exception {\n         IgniteEx ig = startGrid(0);\n \n@@ -209,6 +223,29 @@ public void testSimple() throws Exception {\n         assertEquals(\"1\", cache.get(1));\n     }\n \n+    /**\n+     * @throws Exception if fail.\n+     */\n+    public void testJoinDaemonAndDaemonStop() throws Exception {\n+        IgniteEx ig = startGrid(0);\n+\n+        IgniteEx daemon = startGrid(\n+            getConfiguration(\"daemon\")\n+                .setDaemon(true)\n+                .setClientMode(true)\n+        );\n+\n+        Collection<ClusterNode> daemons = ig.cluster().forDaemons().nodes();\n+\n+        Assert.assertEquals(1, daemons.size());\n+        assertEquals(daemon.localNode().id(), daemons.iterator().next().id());\n+\n+        daemon.close();\n+    }\n+\n+    /**\n+     * @throws Exception if fail.\n+     */\n     public void testRestartCluster() throws Exception {\n         IgniteEx ig1 = startGrid(getConfiguration(\"node1\"));\n         IgniteEx ig2 = startGrid(getConfiguration(\"node2\"));\n@@ -241,18 +278,29 @@ public void testRestartCluster() throws Exception {\n             assertEquals(String.valueOf(i), cache2.get(i));\n     }\n \n+    /**\n+     *\n+     */\n     private static class NodeFilterIgnoreByName implements IgnitePredicate<ClusterNode> {\n+        /** */\n         private final String name;\n \n+        /**\n+         * @param name\n+         */\n         private NodeFilterIgnoreByName(String name) {\n             this.name = name;\n         }\n \n+        /** */\n         @Override public boolean apply(ClusterNode node) {\n             return !name.equals(node.consistentId());\n         }\n     }\n \n+    /**\n+     *\n+     */\n     @Override protected void beforeTest() throws Exception {\n         super.beforeTest();\n \n@@ -261,6 +309,9 @@ private NodeFilterIgnoreByName(String name) {\n         deleteRecursively(U.resolveWorkDirectory(U.defaultWorkDirectory(), \"db\", true));\n     }\n \n+    /**\n+     *\n+     */\n     @Override protected void afterTest() throws Exception {\n         super.beforeTest();\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-7008 TcpDiscoverySharedFsIpFinder fails with NPE if address can't be resolved. This closes #3087.\n\nSigned-off-by: nikolay_tikhonov <ntikhonov@gridgain.com>",
        "commit": "https://github.com/apache/ignite/commit/e39283e88d5948ebfe1d8a166e3ed74a9304b7b2",
        "parent": "https://github.com/apache/ignite/commit/c5c512e460140c91fb77b527ff909ddbe3d1fd72",
        "bug_id": "ignite_116",
        "file": [
            {
                "sha": "397af1a5d16edabff1fae399870ad6de9c6d9f5e",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java",
                "blob_url": "https://github.com/apache/ignite/blob/e39283e88d5948ebfe1d8a166e3ed74a9304b7b2/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java",
                "raw_url": "https://github.com/apache/ignite/raw/e39283e88d5948ebfe1d8a166e3ed74a9304b7b2/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java",
                "status": "modified",
                "changes": 34,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java?ref=e39283e88d5948ebfe1d8a166e3ed74a9304b7b2",
                "patch": "@@ -186,29 +186,24 @@ private File initFolder() throws IgniteSpiException {\n \n         Collection<InetSocketAddress> addrs = new LinkedList<>();\n \n-        for (String fileName : folder.list())\n-            if (!\".svn\".equals(fileName)) {\n-                InetSocketAddress addr = null;\n+        for (String fileName : folder.list()) {\n+            StringTokenizer st = new StringTokenizer(fileName, DELIM);\n \n-                StringTokenizer st = new StringTokenizer(fileName, DELIM);\n+            if (st.countTokens() != 2)\n+                continue;\n \n-                if (st.countTokens() == 2) {\n-                    String addrStr = st.nextToken();\n-                    String portStr = st.nextToken();\n+            String addrStr = st.nextToken();\n+            String portStr = st.nextToken();\n \n-                    try {\n-                        int port = Integer.parseInt(portStr);\n-\n-                        addr = new InetSocketAddress(denormalizeAddress(addrStr), port);\n-                    }\n-                    catch (IllegalArgumentException e) {\n-                        U.error(log, \"Failed to parse file entry: \" + fileName, e);\n-                    }\n-                }\n+            try {\n+                int port = Integer.parseInt(portStr);\n \n-                if (addr != null)\n-                    addrs.add(addr);\n+                addrs.add(new InetSocketAddress(denormalizeAddress(addrStr), port));\n             }\n+            catch (IllegalArgumentException e) {\n+                U.error(log, \"Failed to parse file entry: \" + fileName, e);\n+            }\n+        }\n \n         return Collections.unmodifiableCollection(addrs);\n     }\n@@ -277,7 +272,8 @@ private String name(InetSocketAddress addr) {\n \n         SB sb = new SB();\n \n-        sb.a(normalizeAddress(addr.getAddress().getHostAddress()))\n+        // There is no need to normalize hostname as DNS name specification doesn't allow ':' and '_' chars.\n+        sb.a(addr.isUnresolved() ? addr.getHostName() : normalizeAddress(addr.getAddress().getHostAddress()))\n             .a(DELIM)\n             .a(addr.getPort());\n ",
                "deletions": 19
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-5485 Fixed NPE, though need investigate if such state ist ok in processFullPartitionUpdate.",
        "commit": "https://github.com/apache/ignite/commit/353e5442d06b3193bb32bd33091c7bc879e3272f",
        "parent": "https://github.com/apache/ignite/commit/5b8eb6099f6057b20b48060302b16f90e57d7b08",
        "bug_id": "ignite_117",
        "file": [
            {
                "sha": "e8fcef986f54d4ec78250e9a34c99e2d6c074810",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/353e5442d06b3193bb32bd33091c7bc879e3272f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/353e5442d06b3193bb32bd33091c7bc879e3272f/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java?ref=353e5442d06b3193bb32bd33091c7bc879e3272f",
                "patch": "@@ -2030,7 +2030,10 @@ private void removeNode(UUID nodeId) {\n         lock.readLock().lock();\n \n         try {\n-            assert node2part != null && node2part.valid() : \"Invalid node2part [node2part: \" + node2part +\n+            if (node2part == null)\n+                return false;\n+\n+            assert node2part.valid() : \"Invalid node2part [node2part: \" + node2part +\n                 \", grp=\" + grp.cacheOrGroupName() +\n                 \", stopping=\" + stopping +\n                 \", locNodeId=\" + ctx.localNodeId() +",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-gg-12290 fix npe in cluster processor if got exception on start in plugin processor.",
        "commit": "https://github.com/apache/ignite/commit/e7a7751a9d60c541c57f570779a6301abdb696b5",
        "parent": "https://github.com/apache/ignite/commit/752dd65f82221fdc7570c50ae4c0d41652541422",
        "bug_id": "ignite_118",
        "file": [
            {
                "sha": "5ad1b059044f54eebc11b5e2cd552fef9aa6e645",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/e7a7751a9d60c541c57f570779a6301abdb696b5/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/e7a7751a9d60c541c57f570779a6301abdb696b5/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cluster/ClusterProcessor.java?ref=e7a7751a9d60c541c57f570779a6301abdb696b5",
                "patch": "@@ -346,7 +346,10 @@ private Boolean findLastFlag(Collection<Serializable> vals) {\n         if (verChecker != null)\n             verChecker.stop();\n \n-        ctx.io().removeMessageListener(TOPIC_INTERNAL_DIAGNOSTIC);\n+        // Io manager can be null, if invoke stop before create io manager, for example\n+        // exception on start.\n+        if (ctx.io() != null)\n+            ctx.io().removeMessageListener(TOPIC_INTERNAL_DIAGNOSTIC);\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in special case.",
        "commit": "https://github.com/apache/ignite/commit/9db16d1b2a23e703546c472676620139e82e747f",
        "parent": "https://github.com/apache/ignite/commit/a20ca351b33efb07b83c6f5967fa7a3cef154c83",
        "bug_id": "ignite_119",
        "file": [
            {
                "sha": "870e0333eb0c52c4d6920e65bae155ce8a11701d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "blob_url": "https://github.com/apache/ignite/blob/9db16d1b2a23e703546c472676620139e82e747f/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "raw_url": "https://github.com/apache/ignite/raw/9db16d1b2a23e703546c472676620139e82e747f/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java",
                "status": "modified",
                "changes": 20,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java?ref=9db16d1b2a23e703546c472676620139e82e747f",
                "patch": "@@ -134,21 +134,25 @@\n \n                 JdbcTypeField[] keyFields = jdbcType.getKeyFields();\n \n-                meta.keyFields = new ArrayList<>(keyFields.length);\n+                if (keyFields != null) {\n+                    meta.keyFields = new ArrayList<>(keyFields.length);\n \n-                for (JdbcTypeField fld : keyFields)\n-                    meta.keyFields.add(new VisorCacheTypeFieldMetadata(\n-                        fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n-                        fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n+                    for (JdbcTypeField fld : keyFields)\n+                        meta.keyFields.add(new VisorCacheTypeFieldMetadata(\n+                            fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n+                            fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n+                }\n \n                 JdbcTypeField[] valFields = jdbcType.getValueFields();\n \n-                meta.valFields = new ArrayList<>(valFields.length);\n+                if (valFields != null) {\n+                    meta.valFields = new ArrayList<>(valFields.length);\n \n-                for (JdbcTypeField fld : valFields)\n-                    meta.valFields.add(new VisorCacheTypeFieldMetadata(\n+                    for (JdbcTypeField fld : valFields)\n+                        meta.valFields.add(new VisorCacheTypeFieldMetadata(\n                             fld.getDatabaseFieldName(), fld.getDatabaseFieldType(),\n                             fld.getDatabaseFieldName(), U.compact(fld.getJavaFieldType().getName())));\n+                }\n \n                 if (notFound)\n                     metas.add(meta);",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11602 NPE while node restart",
        "commit": "https://github.com/apache/ignite/commit/83cbb2d2f87447ef394374f5116c60f4eeeac065",
        "parent": "https://github.com/apache/ignite/commit/6559cd77464b1c00f869d97b995748a92ae96b90",
        "bug_id": "ignite_120",
        "file": [
            {
                "sha": "de60f0ee2beb9a430940cba0a686762f89e21f85",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/83cbb2d2f87447ef394374f5116c60f4eeeac065/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/83cbb2d2f87447ef394374f5116c60f4eeeac065/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java?ref=83cbb2d2f87447ef394374f5116c60f4eeeac065",
                "patch": "@@ -50,22 +50,22 @@\n     private final ByteBuffer buf;\n \n     /** Page for memory restore */\n-    private final boolean restore;\n+    private final boolean noTagCheck;\n \n     /**\n      * @param segIdx Segment index.\n      * @param absPtr Absolute pointer.\n      */\n     public PageNoStoreImpl(\n-        PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, int cacheId, long pageId, boolean restore\n+        PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, int cacheId, long pageId, boolean noTagCheck\n     ) {\n         this.pageMem = pageMem;\n         this.segIdx = segIdx;\n         this.absPtr = absPtr;\n \n         this.cacheId = cacheId;\n         this.pageId = pageId;\n-        this.restore = restore;\n+        this.noTagCheck = noTagCheck;\n \n         buf = pageMem.wrapPointer(absPtr + PageMemoryNoStoreImpl.PAGE_OVERHEAD, pageMem.pageSize());\n     }\n@@ -95,9 +95,10 @@ public PageNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public ByteBuffer getForWrite() {\n-        boolean locked = pageMem.writeLockPage(absPtr, OffheapReadWriteLock.TAG_LOCK_ALWAYS);\n+        int tag =  noTagCheck ? OffheapReadWriteLock.TAG_LOCK_ALWAYS :  PageIdUtils.itemId(pageId);\n+        boolean locked = pageMem.writeLockPage(absPtr, tag);\n \n-        if (!locked && !restore)\n+        if (!locked && !noTagCheck)\n             return null;\n \n         assert locked;\n@@ -108,7 +109,9 @@ public PageNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public ByteBuffer tryGetForWrite() {\n-        if (pageMem.tryWriteLockPage(absPtr, PageIdUtils.itemId(pageId)))\n+        int tag =  noTagCheck ? OffheapReadWriteLock.TAG_LOCK_ALWAYS :  PageIdUtils.itemId(pageId);\n+\n+        if (pageMem.tryWriteLockPage(absPtr, tag))\n             return reset(buf);\n \n         return null;",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11602 NPE while node restart",
        "commit": "https://github.com/apache/ignite/commit/6559cd77464b1c00f869d97b995748a92ae96b90",
        "parent": "https://github.com/apache/ignite/commit/2a8737d126131e9ec252a1c466a8d38b3eb947aa",
        "bug_id": "ignite_121",
        "file": [
            {
                "sha": "73382e594574bfdd4d24b8ee3d8dc496eaa4f8f9",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "blob_url": "https://github.com/apache/ignite/blob/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "raw_url": "https://github.com/apache/ignite/raw/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java?ref=6559cd77464b1c00f869d97b995748a92ae96b90",
                "patch": "@@ -39,7 +39,7 @@\n      *\n      * @param cacheId Cache id.\n      * @param pageId Page id.\n-     * @param restore Skip reading from file.\n+     * @param restore Get page for memory restore\n      */\n     public Page page(int cacheId, long pageId, boolean restore) throws IgniteCheckedException;\n ",
                "deletions": 1
            },
            {
                "sha": "1986719d80af8b1125e117c2a30b6b309eba319f",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=6559cd77464b1c00f869d97b995748a92ae96b90",
                "patch": "@@ -265,11 +265,14 @@ public PageMemoryNoStoreImpl(\n     @Override public Page page(int cacheId, long pageId) throws IgniteCheckedException {\n         Segment seg = segment(pageId);\n \n-        return seg.acquirePage(cacheId, pageId);\n+        return seg.acquirePage(cacheId, pageId, false);\n     }\n \n+    /** {@inheritDoc} */\n     @Override public Page page(int cacheId, long pageId, boolean restore) throws IgniteCheckedException {\n-        throw new UnsupportedOperationException();\n+        Segment seg = segment(pageId);\n+\n+        return seg.acquirePage(cacheId, pageId, true);\n     }\n \n     /** {@inheritDoc} */\n@@ -531,7 +534,7 @@ private void init() {\n          * @return Pinned page impl.\n          */\n         @SuppressWarnings(\"TypeMayBeWeakened\")\n-        private PageNoStoreImpl acquirePage(int cacheId, long pageId) {\n+        private PageNoStoreImpl acquirePage(int cacheId, long pageId, boolean restore) {\n             long absPtr = absolute(pageId);\n \n             long marker = GridUnsafe.getLong(absPtr);\n@@ -554,7 +557,7 @@ private PageNoStoreImpl acquirePage(int cacheId, long pageId) {\n \n             acquiredPages.incrementAndGet();\n \n-            return new PageNoStoreImpl(PageMemoryNoStoreImpl.this, idx, absPtr, cacheId, pageId);\n+            return new PageNoStoreImpl(PageMemoryNoStoreImpl.this, idx, absPtr, cacheId, pageId, restore);\n         }\n \n         /**",
                "deletions": 4
            },
            {
                "sha": "7cb3357436a8842e822f1e4c196f1059218494b5",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/6559cd77464b1c00f869d97b995748a92ae96b90/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java?ref=6559cd77464b1c00f869d97b995748a92ae96b90",
                "patch": "@@ -49,17 +49,23 @@\n     /** */\n     private final ByteBuffer buf;\n \n+    /** Page for memory restore */\n+    private final boolean restore;\n+\n     /**\n      * @param segIdx Segment index.\n      * @param absPtr Absolute pointer.\n      */\n-    public PageNoStoreImpl(PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, int cacheId, long pageId) {\n+    public PageNoStoreImpl(\n+        PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, int cacheId, long pageId, boolean restore\n+    ) {\n         this.pageMem = pageMem;\n         this.segIdx = segIdx;\n         this.absPtr = absPtr;\n \n         this.cacheId = cacheId;\n         this.pageId = pageId;\n+        this.restore = restore;\n \n         buf = pageMem.wrapPointer(absPtr + PageMemoryNoStoreImpl.PAGE_OVERHEAD, pageMem.pageSize());\n     }\n@@ -89,20 +95,16 @@ public PageNoStoreImpl(PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, i\n \n     /** {@inheritDoc} */\n     @Override public ByteBuffer getForWrite() {\n-        if (pageMem.writeLockPage(absPtr, PageIdUtils.itemId(pageId)))\n-            return reset(buf);\n+        boolean locked = pageMem.writeLockPage(absPtr, OffheapReadWriteLock.TAG_LOCK_ALWAYS);\n \n-        return null;\n-    }\n+        if (!locked && !restore)\n+            return null;\n \n-//    /** {@inheritDoc} */\n-//    @Override public ByteBuffer getForWriteNoTagCheck() {\n-//        boolean locked = pageMem.writeLockPage(absPtr, OffheapReadWriteLock.TAG_LOCK_ALWAYS);\n-//\n-//        assert locked;\n-//\n-//        return reset(buf);\n-//    }\n+        assert locked;\n+\n+        return reset(buf);\n+\n+    }\n \n     /** {@inheritDoc} */\n     @Override public ByteBuffer tryGetForWrite() {",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11602 NPE while node restart",
        "commit": "https://github.com/apache/ignite/commit/2a8737d126131e9ec252a1c466a8d38b3eb947aa",
        "parent": "https://github.com/apache/ignite/commit/4f98931e9e8a5829044c9a4a046bd6c757405d52",
        "bug_id": "ignite_122",
        "file": [
            {
                "sha": "e08fad6af2011f5916710c5149d13c049e21b484",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/Page.java",
                "blob_url": "https://github.com/apache/ignite/blob/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/Page.java",
                "raw_url": "https://github.com/apache/ignite/raw/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/Page.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/Page.java?ref=2a8737d126131e9ec252a1c466a8d38b3eb947aa",
                "patch": "@@ -53,13 +53,6 @@\n      */\n     public ByteBuffer getForWrite();\n \n-    /**\n-     * Gets page for write without conditional RWLock tag check.\n-     *\n-     * @return ByteBuffer for modifying the page.\n-     */\n-    public ByteBuffer getForWriteNoTagCheck();\n-\n     /**\n      * @return ByteBuffer for modifying the page of {@code null} if failed to get write lock.\n      */",
                "deletions": 7
            },
            {
                "sha": "ce3f538e33e9397ff83a46c3ebffa996e79a633d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "blob_url": "https://github.com/apache/ignite/blob/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "raw_url": "https://github.com/apache/ignite/raw/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java?ref=2a8737d126131e9ec252a1c466a8d38b3eb947aa",
                "patch": "@@ -33,6 +33,16 @@\n      */\n     public Page page(int cacheId, long pageId) throws IgniteCheckedException;\n \n+    /**\n+     * @see #page(int, long)\n+     * Will not read page from file if it is not present in memory\n+     *\n+     * @param cacheId Cache id.\n+     * @param pageId Page id.\n+     * @param restore Skip reading from file.\n+     */\n+    public Page page(int cacheId, long pageId, boolean restore) throws IgniteCheckedException;\n+\n     /**\n      * @param page Page to release.\n      */",
                "deletions": 0
            },
            {
                "sha": "f0a6d27f04777d260fa8de320560754f2fbfcb07",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=2a8737d126131e9ec252a1c466a8d38b3eb947aa",
                "patch": "@@ -268,6 +268,10 @@ public PageMemoryNoStoreImpl(\n         return seg.acquirePage(cacheId, pageId);\n     }\n \n+    @Override public Page page(int cacheId, long pageId, boolean restore) throws IgniteCheckedException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void releasePage(Page p) {\n         PageNoStoreImpl page = (PageNoStoreImpl)p;",
                "deletions": 0
            },
            {
                "sha": "996e30463375e3090c61153b4d08147316d748ed",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageNoStoreImpl.java?ref=2a8737d126131e9ec252a1c466a8d38b3eb947aa",
                "patch": "@@ -95,14 +95,14 @@ public PageNoStoreImpl(PageMemoryNoStoreImpl pageMem, int segIdx, long absPtr, i\n         return null;\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public ByteBuffer getForWriteNoTagCheck() {\n-        boolean locked = pageMem.writeLockPage(absPtr, OffheapReadWriteLock.TAG_LOCK_ALWAYS);\n-\n-        assert locked;\n-\n-        return reset(buf);\n-    }\n+//    /** {@inheritDoc} */\n+//    @Override public ByteBuffer getForWriteNoTagCheck() {\n+//        boolean locked = pageMem.writeLockPage(absPtr, OffheapReadWriteLock.TAG_LOCK_ALWAYS);\n+//\n+//        assert locked;\n+//\n+//        return reset(buf);\n+//    }\n \n     /** {@inheritDoc} */\n     @Override public ByteBuffer tryGetForWrite() {",
                "deletions": 8
            },
            {
                "sha": "8dc5a6c1ef38d2419b24557fe438715e1fd80d0c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MergeRecord.java",
                "blob_url": "https://github.com/apache/ignite/blob/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MergeRecord.java",
                "raw_url": "https://github.com/apache/ignite/raw/2a8737d126131e9ec252a1c466a8d38b3eb947aa/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MergeRecord.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/record/delta/MergeRecord.java?ref=2a8737d126131e9ec252a1c466a8d38b3eb947aa",
                "patch": "@@ -62,8 +62,8 @@ public MergeRecord(int cacheId, long pageId, long prntId, int prntIdx, long righ\n         BPlusIO<L> io = PageIO.getBPlusIO(leftBuf);\n \n         try (\n-            Page prnt = pageMem.page(cacheId(), prntId);\n-            Page right = pageMem.page(cacheId(), rightId)\n+            Page prnt = pageMem.page(cacheId(), prntId, true);\n+            Page right = pageMem.page(cacheId(), rightId, true)\n         ) {\n             ByteBuffer prntBuf = prnt.getForRead();\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-5295: NPE when Persistent Store is used and Memory Configuration is missing",
        "commit": "https://github.com/apache/ignite/commit/c68b61d3c3229c1c473cf06023df2ffe6d5aa547",
        "parent": "https://github.com/apache/ignite/commit/3450241fb101eaa6a6c0378f085097ba7609f1c0",
        "bug_id": "ignite_123",
        "file": [
            {
                "sha": "bed060158d55b832c7e3212fceac105a9c7e368a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/c68b61d3c3229c1c473cf06023df2ffe6d5aa547/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/c68b61d3c3229c1c473cf06023df2ffe6d5aa547/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 16,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=c68b61d3c3229c1c473cf06023df2ffe6d5aa547",
                "patch": "@@ -420,7 +420,7 @@ private void validate(IgniteConfiguration c,\n \n         if (storesLocallyOnClient(c, cc))\n             throw new IgniteCheckedException(\"MemoryPolicy for client caches must be explicitly configured \" +\n-                    \"on client node startup. Use MemoryConfiguration to configure MemoryPolicy.\");\n+                \"on client node startup. Use MemoryConfiguration to configure MemoryPolicy.\");\n \n         if (cc.getCacheMode() == LOCAL && !cc.getAffinity().getClass().equals(LocalAffinityFunction.class))\n             U.warn(log, \"AffinityFunction configuration parameter will be ignored for local cache [cacheName=\" +\n@@ -2075,11 +2075,19 @@ private GridCacheSharedContext createSharedContext(GridKernalContext kernalCtx,\n         IgniteWriteAheadLogManager walMgr = null;\n \n         if (ctx.config().isPersistentStoreEnabled()) {\n-            dbMgr = IgniteComponentType.DATABASE_MANAGER.create(ctx, false);\n+            if (ctx.clientNode()) {\n+                U.warn(log, \"Persistent Store is not supported on client nodes (Persistent Store's\" +\n+                    \" configuration will be ignored).\");\n \n-            pageStoreMgr = IgniteComponentType.PAGE_STORE_MANAGER.create(ctx, false);\n+                dbMgr = new IgniteCacheDatabaseSharedManager();\n+            }\n+            else {\n+                dbMgr = IgniteComponentType.DATABASE_MANAGER.create(ctx, false);\n \n-            walMgr = IgniteComponentType.WAL_MANAGER.create(ctx, false);\n+                pageStoreMgr = IgniteComponentType.PAGE_STORE_MANAGER.create(ctx, false);\n+\n+                walMgr = IgniteComponentType.WAL_MANAGER.create(ctx, false);\n+            }\n         }\n         else\n             dbMgr = new IgniteCacheDatabaseSharedManager();",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-5225: Fix NPE caused by changes in IGNITE-4577.\n\n(cherry picked from commit d463840)",
        "commit": "https://github.com/apache/ignite/commit/95850b47bde6df109ecd029d6a3a59b8e3772f81",
        "parent": "https://github.com/apache/ignite/commit/dacf973ef8580ff649fc2dafd5a55a420edf7759",
        "bug_id": "ignite_124",
        "file": [
            {
                "sha": "0668708c8e15904b19bc84d92f001004d8911663",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "patch": "@@ -1858,11 +1858,11 @@ public static synchronized boolean isLocalHostChanged() throws IOException {\n      * @return List of reachable addresses.\n      */\n     public static List<InetAddress> filterReachable(Collection<InetAddress> addrs) {\n-        final int reachTimeout = 2000;\n-\n         if (addrs.isEmpty())\n             return Collections.emptyList();\n \n+        final int reachTimeout = 2000;\n+\n         if (addrs.size() == 1) {\n             InetAddress addr = F.first(addrs);\n ",
                "deletions": 2
            },
            {
                "sha": "769a02ed0da8cd26921346e9d3fca4fe45f7bcca",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "status": "modified",
                "changes": 17,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "patch": "@@ -2885,22 +2885,27 @@ protected GridCommunicationClient createTcpClient(ClusterNode node, int connIdx)\n \n         Set<InetAddress> allInetAddrs = U.newHashSet(addrs.size());\n \n-        for (InetSocketAddress addr : addrs)\n-            allInetAddrs.add(addr.getAddress());\n+        for (InetSocketAddress addr : addrs) {\n+            // Skip unresolved as addr.getAddress() can return null.\n+            if(!addr.isUnresolved())\n+                allInetAddrs.add(addr.getAddress());\n+        }\n \n         List<InetAddress> reachableInetAddrs = U.filterReachable(allInetAddrs);\n \n         if (reachableInetAddrs.size() < allInetAddrs.size()) {\n             LinkedHashSet<InetSocketAddress> addrs0 = U.newLinkedHashSet(addrs.size());\n \n+            List<InetSocketAddress> unreachableInetAddr = new ArrayList<>(allInetAddrs.size() - reachableInetAddrs.size());\n+\n             for (InetSocketAddress addr : addrs) {\n                 if (reachableInetAddrs.contains(addr.getAddress()))\n                     addrs0.add(addr);\n+                else\n+                    unreachableInetAddr.add(addr);\n             }\n-            for (InetSocketAddress addr : addrs) {\n-                if (!reachableInetAddrs.contains(addr.getAddress()))\n-                    addrs0.add(addr);\n-            }\n+\n+            addrs0.addAll(unreachableInetAddr);\n \n             addrs = addrs0;\n         }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed potential NPE on IgniteNode initialization.",
        "commit": "https://github.com/apache/ignite/commit/3fb9894eb130e7e5d2fee460c785a4aacadb8373",
        "parent": "https://github.com/apache/ignite/commit/cfdae56db683a709924719e878ebadfe1e984b4a",
        "bug_id": "ignite_125",
        "file": [
            {
                "sha": "a261b98514b783441fa7b0b51f52abdeac1b150c",
                "filename": "modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java",
                "blob_url": "https://github.com/apache/ignite/blob/3fb9894eb130e7e5d2fee460c785a4aacadb8373/modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java",
                "raw_url": "https://github.com/apache/ignite/raw/3fb9894eb130e7e5d2fee460c785a4aacadb8373/modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java",
                "status": "modified",
                "changes": 74,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java?ref=3fb9894eb130e7e5d2fee460c785a4aacadb8373",
                "patch": "@@ -87,58 +87,64 @@ public IgniteNode(boolean clientMode, Ignite ignite) {\n \n         assert appCtx != null;\n \n-        for (CacheConfiguration cc : c.getCacheConfiguration()) {\n-            // IgniteNode can not run in CLIENT_ONLY mode,\n-            // except the case when it's used inside IgniteAbstractBenchmark.\n-            boolean cl = args.isClientOnly() && (args.isNearCache() || clientMode);\n+        CacheConfiguration[] ccfgs = c.getCacheConfiguration();\n \n-            if (cl)\n-                c.setClientMode(true);\n+        if (ccfgs != null) {\n+            for (CacheConfiguration cc : ccfgs) {\n+                // IgniteNode can not run in CLIENT_ONLY mode,\n+                // except the case when it's used inside IgniteAbstractBenchmark.\n+                boolean cl = args.isClientOnly() && (args.isNearCache() || clientMode);\n \n-            if (args.isNearCache()) {\n-                NearCacheConfiguration nearCfg = new NearCacheConfiguration();\n+                if (cl)\n+                    c.setClientMode(true);\n \n-                if (args.getNearCacheSize() != 0)\n-                    nearCfg.setNearEvictionPolicy(new LruEvictionPolicy(args.getNearCacheSize()));\n+                if (args.isNearCache()) {\n+                    NearCacheConfiguration nearCfg = new NearCacheConfiguration();\n \n-                cc.setNearConfiguration(nearCfg);\n-            }\n+                    if (args.getNearCacheSize() != 0)\n+                        nearCfg.setNearEvictionPolicy(new LruEvictionPolicy(args.getNearCacheSize()));\n \n-            cc.setWriteSynchronizationMode(args.syncMode());\n+                    cc.setNearConfiguration(nearCfg);\n+                }\n \n-            if (args.orderMode() != null)\n-                cc.setAtomicWriteOrderMode(args.orderMode());\n+                cc.setWriteSynchronizationMode(args.syncMode());\n \n-            cc.setBackups(args.backups());\n+                if (args.orderMode() != null)\n+                    cc.setAtomicWriteOrderMode(args.orderMode());\n \n-            if (args.restTcpPort() != 0) {\n-                ConnectorConfiguration ccc = new ConnectorConfiguration();\n+                cc.setBackups(args.backups());\n \n-                ccc.setPort(args.restTcpPort());\n+                if (args.restTcpPort() != 0) {\n+                    ConnectorConfiguration ccc = new ConnectorConfiguration();\n \n-                if (args.restTcpHost() != null)\n-                    ccc.setHost(args.restTcpHost());\n+                    ccc.setPort(args.restTcpPort());\n \n-                c.setConnectorConfiguration(ccc);\n-            }\n+                    if (args.restTcpHost() != null)\n+                        ccc.setHost(args.restTcpHost());\n \n-            if (args.isOffHeap()) {\n-                cc.setOffHeapMaxMemory(0);\n+                    c.setConnectorConfiguration(ccc);\n+                }\n \n-                if (args.isOffheapValues())\n-                    cc.setMemoryMode(OFFHEAP_VALUES);\n-                else\n-                    cc.setEvictionPolicy(new LruEvictionPolicy(50000));\n-            }\n+                if (args.isOffHeap()) {\n+                    cc.setOffHeapMaxMemory(0);\n \n-            cc.setReadThrough(args.isStoreEnabled());\n+                    if (args.isOffheapValues())\n+                        cc.setMemoryMode(OFFHEAP_VALUES);\n+                    else\n+                        cc.setEvictionPolicy(new LruEvictionPolicy(50000));\n+                }\n \n-            cc.setWriteThrough(args.isStoreEnabled());\n+                cc.setReadThrough(args.isStoreEnabled());\n \n-            cc.setWriteBehindEnabled(args.isWriteBehind());\n+                cc.setWriteThrough(args.isStoreEnabled());\n \n-            BenchmarkUtils.println(cfg, \"Cache configured with the following parameters: \" + cc);\n+                cc.setWriteBehindEnabled(args.isWriteBehind());\n+\n+                BenchmarkUtils.println(cfg, \"Cache configured with the following parameters: \" + cc);\n+            }\n         }\n+        else\n+            BenchmarkUtils.println(cfg, \"There are no caches configured\");\n \n         TransactionConfiguration tc = c.getTransactionConfiguration();\n ",
                "deletions": 34
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-3515: NullPointerException when stopping IgniteSemaphore and no method has been called previously to initialize semaphore with initializeSemaphore().\nReviewed by Denis Magda.",
        "commit": "https://github.com/apache/ignite/commit/ab4963a686ea7ca560604079c52b8939b605cfcf",
        "parent": "https://github.com/apache/ignite/commit/a989f04ec08638855f13ef4195ce7d9d1efee083",
        "bug_id": "ignite_126",
        "file": [
            {
                "sha": "a11c79db6282cd3818640671ad71e7eb5a44b77e",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/ab4963a686ea7ca560604079c52b8939b605cfcf/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/ab4963a686ea7ca560604079c52b8939b605cfcf/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java",
                "status": "modified",
                "changes": 108,
                "additions": 71,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSemaphoreImpl.java?ref=ab4963a686ea7ca560604079c52b8939b605cfcf",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.IgniteSemaphore;\n import org.apache.ignite.internal.GridKernalContext;\n+import org.apache.ignite.internal.IgniteInterruptedCheckedException;\n import org.apache.ignite.internal.IgnitionEx;\n import org.apache.ignite.internal.processors.cache.GridCacheContext;\n import org.apache.ignite.internal.processors.cache.IgniteInternalCache;\n@@ -51,11 +52,11 @@\n import static org.apache.ignite.transactions.TransactionIsolation.REPEATABLE_READ;\n \n /**\n- * Cache semaphore implementation based on AbstractQueuedSynchronizer.\n- * Current implementation supports only unfair semaphores.\n- * If any node fails after acquiring permissions on cache semaphore, there are two different behaviors controlled with the\n- * parameter failoverSafe. If this parameter is true, other nodes can reacquire permits that were acquired by the failing node.\n- * In case this parameter is false, IgniteInterruptedException is called on every node waiting on this semaphore.\n+ * Cache semaphore implementation based on AbstractQueuedSynchronizer. Current implementation supports only unfair\n+ * semaphores. If any node fails after acquiring permissions on cache semaphore, there are two different behaviors\n+ * controlled with the parameter failoverSafe. If this parameter is true, other nodes can reacquire permits that were\n+ * acquired by the failing node. In case this parameter is false, IgniteInterruptedException is called on every node\n+ * waiting on this semaphore.\n  */\n public final class GridCacheSemaphoreImpl implements GridCacheSemaphoreEx, Externalizable {\n     /** */\n@@ -104,8 +105,7 @@ public GridCacheSemaphoreImpl() {\n     }\n \n     /**\n-     * Synchronization implementation for semaphore.\n-     * Uses AQS state to represent permits.\n+     * Synchronization implementation for semaphore. Uses AQS state to represent permits.\n      */\n     final class Sync extends AbstractQueuedSynchronizer {\n         private static final long serialVersionUID = 1192457210091910933L;\n@@ -155,10 +155,10 @@ public int getWaiters() {\n          * Get number of permits for node.\n          *\n          * @param nodeID Node ID.\n-         * @return Number of permits node has acquired at this semaphore. Can be less than 0 if\n-         * more permits were released than acquired on node.\n+         * @return Number of permits node has acquired at this semaphore. Can be less than 0 if more permits were\n+         * released than acquired on node.\n          */\n-        public int getPermitsForNode(UUID nodeID){\n+        public int getPermitsForNode(UUID nodeID) {\n             return nodeMap.containsKey(nodeID) ? nodeMap.get(nodeID) : 0;\n         }\n \n@@ -182,24 +182,23 @@ final int getPermits() {\n         }\n \n         /**\n-         * Set a flag indicating that it is not safe to continue using this semaphore.\n-         * This is the case only if one of two things happened:\n-         * 1. A node that previously acquired on this semaphore failed and\n-         * semaphore is created in non-failoversafe mode;\n-         * 2. Local node failed (is closed), so any any threads on this node\n-         * waiting to acquire are notified, and semaphore is not safe to be used anymore.\n+         * Set a flag indicating that it is not safe to continue using this semaphore. This is the case only if one of\n+         * two things happened: 1. A node that previously acquired on this semaphore failed and semaphore is created in\n+         * non-failoversafe mode; 2. Local node failed (is closed), so any any threads on this node waiting to acquire\n+         * are notified, and semaphore is not safe to be used anymore.\n          *\n          * @return True is semaphore is not safe to be used anymore.\n          */\n         protected boolean isBroken() {\n             return broken;\n         }\n \n-        /** Flag indicating that a node failed and it is not safe to continue using this semaphore.\n-         * Any attempt to acquire on broken semaphore will result in {@linkplain IgniteInterruptedException}.\n+        /**\n+         * Flag indicating that a node failed and it is not safe to continue using this semaphore. Any attempt to\n+         * acquire on broken semaphore will result in {@linkplain IgniteInterruptedException}.\n          *\n          * @param broken True if semaphore should not be used anymore.\n-         * */\n+         */\n         protected void setBroken(boolean broken) {\n             this.broken = broken;\n         }\n@@ -211,9 +210,9 @@ protected void setBroken(boolean broken) {\n          * @return Negative number if thread should block, positive if thread successfully acquires permits.\n          */\n         final int nonfairTryAcquireShared(int acquires) {\n-            for (;;) {\n+            for (; ; ) {\n                 // If broken, return immediately, exception will be thrown anyway.\n-                if(broken)\n+                if (broken)\n                     return 1;\n \n                 int available = getState();\n@@ -238,9 +237,9 @@ final int nonfairTryAcquireShared(int acquires) {\n             if (releases == 0)\n                 return true;\n \n-            for (;;) {\n+            for (; ; ) {\n                 // If broken, return immediately, exception will be thrown anyway.\n-                if(broken)\n+                if (broken)\n                     return true;\n \n                 int cur = getState();\n@@ -261,9 +260,9 @@ final int nonfairTryAcquireShared(int acquires) {\n          * @return Number of permits to drain.\n          */\n         final int drainPermits() {\n-            for (;;) {\n+            for (; ; ) {\n                 // If broken, return immediately, exception will be thrown anyway.\n-                if(broken)\n+                if (broken)\n                     return 1;\n \n                 int current = getState();\n@@ -288,7 +287,7 @@ protected boolean compareAndSetGlobalState(final int expVal, final int newVal, f\n                         @Override public Boolean call() throws Exception {\n                             try (IgniteInternalTx tx = CU.txStartInternal(ctx,\n                                 semView,\n-                                    PESSIMISTIC, REPEATABLE_READ)\n+                                PESSIMISTIC, REPEATABLE_READ)\n                             ) {\n                                 GridCacheSemaphoreState val = semView.get(key);\n \n@@ -304,11 +303,11 @@ protected boolean compareAndSetGlobalState(final int expVal, final int newVal, f\n                                     if (!draining) {\n                                         UUID nodeID = ctx.localNodeId();\n \n-                                        Map<UUID,Integer> map = val.getWaiters();\n+                                        Map<UUID, Integer> map = val.getWaiters();\n \n                                         int waitingCnt = expVal - newVal;\n \n-                                        if(map.containsKey(nodeID))\n+                                        if (map.containsKey(nodeID))\n                                             waitingCnt += map.get(nodeID);\n \n                                         map.put(nodeID, waitingCnt);\n@@ -370,17 +369,17 @@ protected boolean releaseFailedNode(final UUID nodeId) {\n                                     throw new IgniteCheckedException(\"Failed to find semaphore with given name: \" +\n                                         name);\n \n-                                Map<UUID,Integer> map = val.getWaiters();\n+                                Map<UUID, Integer> map = val.getWaiters();\n \n-                                if(!map.containsKey(nodeId)){\n+                                if (!map.containsKey(nodeId)) {\n                                     tx.rollback();\n \n                                     return false;\n                                 }\n \n                                 int numPermits = map.get(nodeId);\n \n-                                if(numPermits > 0)\n+                                if (numPermits > 0)\n                                     val.setCount(val.getCount() + numPermits);\n \n                                 map.remove(nodeId);\n@@ -552,7 +551,42 @@ private void initializeSemaphore() throws IgniteCheckedException {\n         }\n     }\n \n+    /** {@inheritDoc} */\n     @Override public void stop() {\n+        if (initGuard.get()) {\n+            try {\n+                // Wait while initialization is in progress.\n+                U.await(initLatch);\n+            }\n+            catch (IgniteInterruptedCheckedException e) {\n+                if (log.isDebugEnabled())\n+                    log.error(\"Failed waiting while initialization is completed.\", e);\n+            }\n+        }\n+        else {\n+            // Preventing concurrent initialization.\n+            if (initGuard.compareAndSet(false, true)) {\n+                initLatch.countDown();\n+\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Semaphore wasn't initialized. Prevented further initialization.\");\n+\n+                return;\n+            }\n+            else {\n+                try {\n+                    // Wait while initialization is in progress.\n+                    U.await(initLatch);\n+                }\n+                catch (IgniteInterruptedCheckedException e) {\n+                    if (log.isDebugEnabled())\n+                        log.error(\"Failed waiting while initialization is completed.\", e);\n+                }\n+            }\n+        }\n+\n+        assert sync != null;\n+\n         sync.setBroken(true);\n \n         // Try to notify any waiting threads.\n@@ -580,7 +614,7 @@ private void initializeSemaphore() throws IgniteCheckedException {\n \n             sync.acquireSharedInterruptibly(permits);\n \n-            if(isBroken())\n+            if (isBroken())\n                 throw new InterruptedException();\n         }\n         catch (IgniteCheckedException e) {\n@@ -697,7 +731,7 @@ private void initializeSemaphore() throws IgniteCheckedException {\n \n             boolean result = sync.nonfairTryAcquireShared(1) >= 0;\n \n-            if(isBroken())\n+            if (isBroken())\n                 throw new InterruptedException();\n \n             return result;\n@@ -722,7 +756,7 @@ private void initializeSemaphore() throws IgniteCheckedException {\n \n             boolean result = sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n \n-            if(isBroken())\n+            if (isBroken())\n                 throw new InterruptedException();\n \n             return result;\n@@ -789,9 +823,9 @@ private void initializeSemaphore() throws IgniteCheckedException {\n         try {\n             initializeSemaphore();\n \n-            boolean result =  sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));\n+            boolean result = sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));\n \n-            if(isBroken())\n+            if (isBroken())\n                 throw new InterruptedException();\n \n             return result;\n@@ -859,7 +893,7 @@ private void initializeSemaphore() throws IgniteCheckedException {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public boolean isBroken(){\n+    @Override public boolean isBroken() {\n         ctx.kernalContext().gateway().readLock();\n \n         try {",
                "deletions": 37
            },
            {
                "sha": "5241dd1562487bc7c4abbf75b509a5421954d644",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteSemaphoreAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ab4963a686ea7ca560604079c52b8939b605cfcf/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteSemaphoreAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ab4963a686ea7ca560604079c52b8939b605cfcf/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteSemaphoreAbstractSelfTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/datastructures/IgniteSemaphoreAbstractSelfTest.java?ref=ab4963a686ea7ca560604079c52b8939b605cfcf",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.ignite.IgniteCompute;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.IgniteSemaphore;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.internal.IgniteEx;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.IgniteKernal;\n@@ -39,6 +40,7 @@\n import org.apache.ignite.lang.IgniteFuture;\n import org.apache.ignite.resources.IgniteInstanceResource;\n import org.apache.ignite.resources.LoggerResource;\n+import org.apache.ignite.testframework.GridStringLogger;\n import org.apache.ignite.testframework.GridTestUtils;\n import org.jetbrains.annotations.Nullable;\n import org.junit.Rule;\n@@ -231,6 +233,25 @@ private void checkSemaphore() throws Exception {\n         checkRemovedSemaphore(semaphore1);\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testSemaphoreClosing() throws Exception {\n+        IgniteConfiguration cfg;\n+        GridStringLogger stringLogger;\n+\n+        stringLogger = new GridStringLogger();\n+\n+        cfg = optimize(getConfiguration(\"npeGrid\"));\n+        cfg.setGridLogger(stringLogger);\n+\n+        try (Ignite ignite = startGrid(cfg.getGridName(), cfg)) {\n+            ignite.semaphore(\"semaphore\", 1, true, true);\n+        }\n+\n+        assertFalse(stringLogger.toString().contains(NullPointerException.class.getName()));\n+    }\n+\n     /**\n      * @throws Exception If failed.\n      */\n@@ -276,8 +297,8 @@ protected void checkRemovedSemaphore(final IgniteSemaphore semaphore) throws Exc\n     }\n \n     /**\n-     * This method only checks if parameter of new semaphore is initialized properly.\n-     * For tests considering failure recovery see @GridCachePartitionedNodeFailureSelfTest.\n+     * This method only checks if parameter of new semaphore is initialized properly. For tests considering failure\n+     * recovery see\n      *\n      * @throws Exception Exception.\n      */",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "fixed npe",
        "commit": "https://github.com/apache/ignite/commit/022cdafec2f23651c8de82ae7bd9bd5f37999e21",
        "parent": "https://github.com/apache/ignite/commit/b274a5caf27c83ee4603ef7aa25a3ab5b89eb5ff",
        "bug_id": "ignite_127",
        "file": [
            {
                "sha": "970556923a34067fa037b38f11f431f6c2b35a8b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/022cdafec2f23651c8de82ae7bd9bd5f37999e21/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/022cdafec2f23651c8de82ae7bd9bd5f37999e21/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java?ref=022cdafec2f23651c8de82ae7bd9bd5f37999e21",
                "patch": "@@ -264,11 +264,13 @@ private void map(\n                 if (!success) {\n                     GridCacheVersion obsolete = cctx.versions().next(topVer);\n \n-                    for (GridNearCacheEntry reserved : savedEntries.values()) {\n-                        reserved.releaseEviction();\n+                    if (savedEntries != null) {\n+                        for (GridNearCacheEntry reserved : savedEntries.values()) {\n+                            reserved.releaseEviction();\n \n-                        if (reserved.markObsolete(obsolete))\n-                            reserved.context().cache().removeEntry(reserved);\n+                            if (reserved.markObsolete(obsolete))\n+                                reserved.context().cache().removeEntry(reserved);\n+                        }\n                     }\n                 }\n             }\n@@ -543,7 +545,7 @@ private void map(\n                         }\n                         else {\n                             K key0 = (K)cctx.unwrapPortableIfNeeded(key, !deserializePortable, false);\n-                            V val0 = !skipVals ? \n+                            V val0 = !skipVals ?\n                                 (V)cctx.unwrapPortableIfNeeded(v, !deserializePortable, false) :\n                                 (V)Boolean.TRUE;\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Added test, fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/d20e43fc5f99893ff25f329f144d2cf14c9f5990",
        "parent": "https://github.com/apache/ignite/commit/2476bb1c8605dc30b4028784c47e3eba041a087d",
        "bug_id": "ignite_128",
        "file": [
            {
                "sha": "28a95d8dcfece496de5d483d62607809abf243bf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/d20e43fc5f99893ff25f329f144d2cf14c9f5990/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/d20e43fc5f99893ff25f329f144d2cf14c9f5990/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java?ref=d20e43fc5f99893ff25f329f144d2cf14c9f5990",
                "patch": "@@ -71,6 +71,9 @@ protected boolean needCopy(CacheObjectContext ctx) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf, CacheObjectContext ctx) throws IgniteCheckedException {\n+        if (valBytes == null)\n+            valueBytes(ctx);\n+\n         if (buf.remaining() < valBytes.length + 5)\n             return false;\n ",
                "deletions": 0
            },
            {
                "sha": "2dc18f5ad9c3e8a26bb7a24a89498bee309e6993",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/d20e43fc5f99893ff25f329f144d2cf14c9f5990/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/d20e43fc5f99893ff25f329f144d2cf14c9f5990/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "status": "added",
                "changes": 177,
                "additions": 177,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java?ref=d20e43fc5f99893ff25f329f144d2cf14c9f5990",
                "patch": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cacheobject.IgniteCacheObjectProcessor;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ *\n+ */\n+public class IgniteCacheObjectPutSelfTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final String CACHE_NAME = \"partitioned\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        CacheConfiguration ccfg = new CacheConfiguration();\n+\n+        ccfg.setName(CACHE_NAME);\n+\n+        cfg.setCacheConfiguration(ccfg);\n+\n+        cfg.setMarshaller(null);\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrid(0);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testPrimitiveValues() throws Exception {\n+        IgniteEx ignite = grid(0);\n+\n+        IgniteCache<Object, Object> cache = ignite.cache(CACHE_NAME);\n+\n+        for (int i = 0; i < 10; i++)\n+            cache.put(i, String.valueOf(i));\n+\n+        IgniteCacheObjectProcessor co = ignite.context().cacheObjects();\n+        GridCacheAdapter<Object, Object> iCache = ignite.context().cache().internalCache(CACHE_NAME);\n+        CacheObjectContext coCtx = iCache.context().cacheObjectContext();\n+\n+        ByteBuffer buf = ByteBuffer.allocate(2048);\n+\n+        for (int i = 0; i < 10; i++) {\n+            KeyCacheObject key = co.toCacheKeyObject(coCtx, i, false);\n+\n+            GridCacheEntryEx entry = iCache.peekEx(key);\n+\n+            assertNotNull(entry);\n+\n+            assertTrue(entry.key().putValue(buf, coCtx));\n+            assertTrue(entry.valueBytes().putValue(buf, coCtx));\n+        }\n+\n+        buf.flip();\n+\n+        for (int i = 0; i < 10; i++) {\n+            CacheObject co1 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(i, co1.value(coCtx, false));\n+\n+            CacheObject co2 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(String.valueOf(i), co2.value(coCtx, false));\n+        }\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testClassValues() throws Exception {\n+        IgniteEx ignite = grid(0);\n+\n+        IgniteCache<Object, Object> cache = ignite.cache(CACHE_NAME);\n+\n+        for (int i = 0; i < 10; i++)\n+            cache.put(new TestValue(i), new TestValue(i));\n+\n+        IgniteCacheObjectProcessor co = ignite.context().cacheObjects();\n+        GridCacheAdapter<Object, Object> iCache = ignite.context().cache().internalCache(CACHE_NAME);\n+        CacheObjectContext coCtx = iCache.context().cacheObjectContext();\n+\n+        ByteBuffer buf = ByteBuffer.allocate(2048);\n+\n+        for (int i = 0; i < 10; i++) {\n+            KeyCacheObject key = co.toCacheKeyObject(coCtx, new TestValue(i), false);\n+\n+            GridCacheEntryEx entry = iCache.peekEx(key);\n+\n+            assertNotNull(entry);\n+\n+            assertTrue(entry.key().putValue(buf, coCtx));\n+            assertTrue(entry.valueBytes().putValue(buf, coCtx));\n+        }\n+\n+        buf.flip();\n+\n+        for (int i = 0; i < 10; i++) {\n+            CacheObject co1 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(new TestValue(i), co1.value(coCtx, false));\n+\n+            CacheObject co2 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(new TestValue(i), co2.value(coCtx, false));\n+        }\n+    }\n+\n+    /**\n+     *\n+     */\n+    private static class TestValue implements Serializable {\n+        /** */\n+        private int val;\n+\n+        /**\n+         * @param val Value.\n+         */\n+        private TestValue(int val) {\n+            this.val = val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean equals(Object o) {\n+            if (this == o)\n+                return true;\n+\n+            if (!(o instanceof TestValue))\n+                return false;\n+\n+            TestValue value = (TestValue)o;\n+\n+            return val == value.val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public int hashCode() {\n+            return val;\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-6362 Fixed NPE in Log4J2Logger. Cleanup tests and added tests to suite. This closes #2833.\n\nSigned-off-by: nikolay_tikhonov <ntikhonov@gridgain.com>",
        "commit": "https://github.com/apache/ignite/commit/f8824c86112c99f5f9657d86a3f0aa53777b1f17",
        "parent": "https://github.com/apache/ignite/commit/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd",
        "bug_id": "ignite_129",
        "file": [
            {
                "sha": "5c92afaae90df93832b72576056bb99aee8c4452",
                "filename": "modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java",
                "blob_url": "https://github.com/apache/ignite/blob/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java",
                "raw_url": "https://github.com/apache/ignite/raw/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java",
                "status": "modified",
                "changes": 130,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java?ref=f8824c86112c99f5f9657d86a3f0aa53777b1f17",
                "patch": "@@ -42,10 +42,8 @@\n import org.apache.logging.log4j.core.appender.RollingFileAppender;\n import org.apache.logging.log4j.core.appender.routing.RoutingAppender;\n import org.apache.logging.log4j.core.config.AppenderControl;\n-import org.apache.logging.log4j.core.config.AppenderRef;\n import org.apache.logging.log4j.core.config.Configuration;\n import org.apache.logging.log4j.core.config.Configurator;\n-import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.logging.log4j.core.layout.PatternLayout;\n import org.jetbrains.annotations.Nullable;\n \n@@ -102,11 +100,6 @@\n     @SuppressWarnings(\"FieldAccessedSynchronizedAndUnsynchronized\")\n     private Logger impl;\n \n-    /** Auto added at verbose mode console logger (nullable). */\n-    @GridToStringExclude\n-    @SuppressWarnings(\"FieldAccessedSynchronizedAndUnsynchronized\")\n-    private Logger consoleLog;\n-\n     /** Quiet flag. */\n     private final boolean quiet;\n \n@@ -117,30 +110,33 @@\n      * Creates new logger with given implementation.\n      *\n      * @param impl Log4j implementation to use.\n-     * @param consoleLog Cosole logger (optional).\n      */\n-    private Log4J2Logger(final Logger impl, @Nullable final Logger consoleLog) {\n+    private Log4J2Logger(final Logger impl) {\n         assert impl != null;\n-        this.impl = impl;\n-        this.consoleLog = consoleLog;\n+        \n+        addConsoleAppenderIfNeeded(new C1<Boolean, Logger>() {\n+            @Override public Logger apply(Boolean init) {\n+                return impl;\n+            }\n+        });\n \n         quiet = quiet0;\n     }\n \n     /**\n      * Creates new logger with given configuration {@code path}.\n      *\n-     * @param path Path to log4j configuration XML file.\n+     * @param path Path to log4j2 configuration XML file.\n      * @throws IgniteCheckedException Thrown in case logger can't be created.\n      */\n     public Log4J2Logger(String path) throws IgniteCheckedException {\n         if (path == null)\n-            throw new IgniteCheckedException(\"Configuration XML file for Log4j must be specified.\");\n+            throw new IgniteCheckedException(\"Configuration XML file for Log4j2 must be specified.\");\n \n         final URL cfgUrl = U.resolveIgniteUrl(path);\n \n         if (cfgUrl == null)\n-            throw new IgniteCheckedException(\"Log4j configuration path was not found: \" + path);\n+            throw new IgniteCheckedException(\"Log4j2 configuration path was not found: \" + path);\n \n         addConsoleAppenderIfNeeded(new C1<Boolean, Logger>() {\n             @Override public Logger apply(Boolean init) {\n@@ -204,18 +200,16 @@ public Log4J2Logger(final URL cfgUrl) throws IgniteCheckedException {\n     }\n \n     /**\n-     * Sets level for internal log4j implementation.\n-     *\n-     * @param level Log level to set.\n+     * Cleans up the logger configuration. Should be used in unit tests only for sequential tests run with\n+     * different configurations\n      */\n-    public void setLevel(Level level) {\n-        LoggerContext ctx = (LoggerContext)LogManager.getContext(false);\n-\n-        Configuration conf = ctx.getConfiguration();\n-\n-        conf.getLoggerConfig(impl.getName()).setLevel(level);\n+    static void cleanup() {\n+        synchronized (mux) {\n+            if (inited)\n+                LogManager.shutdown();\n \n-        ctx.updateLoggers(conf);\n+            inited = false;\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -242,10 +236,10 @@ public void setLevel(Level level) {\n                             Appender innerApp = control.getAppender();\n \n                             if (innerApp instanceof FileAppender)\n-                                return normilize(((FileAppender)innerApp).getFileName());\n+                                return normalize(((FileAppender)innerApp).getFileName());\n \n                             if (innerApp instanceof RollingFileAppender)\n-                                return normilize(((RollingFileAppender)innerApp).getFileName());\n+                                return normalize(((RollingFileAppender)innerApp).getFileName());\n                         }\n                     }\n                     catch (IllegalAccessException | NoSuchFieldException e) {\n@@ -265,7 +259,7 @@ public void setLevel(Level level) {\n      * @param path Path.\n      * @return Normalized path.\n      */\n-    private String normilize(String path) {\n+    private String normalize(String path) {\n         if (!U.isWindows())\n             return path;\n \n@@ -335,7 +329,7 @@ private void addConsoleAppenderIfNeeded(@Nullable IgniteClosure<Boolean, Logger>\n \n                 // User launched ignite in verbose mode and did not add console appender with INFO level\n                 // to configuration and did not set IGNITE_CONSOLE_APPENDER to false.\n-                consoleLog = createConsoleLogger();\n+                createConsoleLogger();\n             }\n \n             quiet0 = quiet;\n@@ -348,45 +342,34 @@ private void addConsoleAppenderIfNeeded(@Nullable IgniteClosure<Boolean, Logger>\n      *\n      * @return Logger with auto configured console appender.\n      */\n-    public static Logger createConsoleLogger() {\n-        LoggerContext ctx = (LoggerContext)LogManager.getContext(true);\n+    public Logger createConsoleLogger() {\n+        // from http://logging.apache.org/log4j/2.x/manual/customconfig.html\n+        final LoggerContext ctx = impl.getContext();\n \n-        Configuration cfg = ctx.getConfiguration();\n+        final Configuration cfg = ctx.getConfiguration();\n \n-        PatternLayout.Builder builder = PatternLayout.newBuilder();\n-\n-        builder\n+        PatternLayout.Builder builder = PatternLayout.newBuilder()\n             .withPattern(\"%d{ISO8601}][%-5p][%t][%c{1}] %m%n\")\n             .withCharset(Charset.defaultCharset())\n             .withAlwaysWriteExceptions(false)\n             .withNoConsoleNoAnsi(false);\n \n         PatternLayout layout = builder.build();\n \n-        ConsoleAppender.Builder consoleAppenderBuilder = ConsoleAppender.newBuilder();\n-\n-        consoleAppenderBuilder\n+        ConsoleAppender.Builder consoleAppenderBuilder = ConsoleAppender.newBuilder()\n             .withName(CONSOLE_APPENDER)\n             .withLayout(layout);\n \n         ConsoleAppender consoleApp = consoleAppenderBuilder.build();\n \n         consoleApp.start();\n \n-        AppenderRef ref = AppenderRef.createAppenderRef(CONSOLE_APPENDER, Level.TRACE, null);\n-\n-        AppenderRef[] refs = {ref};\n-\n-        LoggerConfig logCfg = LoggerConfig.createLogger(false, Level.INFO, LogManager.ROOT_LOGGER_NAME, \"\", refs, null, null, null);\n-\n-        logCfg.addAppender(consoleApp, null, null);\n         cfg.addAppender(consoleApp);\n-\n-        cfg.addLogger(LogManager.ROOT_LOGGER_NAME, logCfg);\n+        cfg.getRootLogger().addAppender(consoleApp, Level.TRACE, null);\n \n         ctx.updateLoggers(cfg);\n \n-        return (Logger)LogManager.getContext().getLogger(LogManager.ROOT_LOGGER_NAME);\n+        return ctx.getRootLogger();\n     }\n \n     /** {@inheritDoc} */\n@@ -398,7 +381,22 @@ public static Logger createConsoleLogger() {\n         // Set nodeId as system variable to be used at configuration.\n         System.setProperty(NODE_ID, U.id8(nodeId));\n \n-        ((LoggerContext)LogManager.getContext(false)).reconfigure();\n+        if (inited) {\n+            final LoggerContext ctx = impl.getContext();\n+\n+            synchronized (mux) {\n+                inited = false;\n+            }\n+\n+            addConsoleAppenderIfNeeded(new C1<Boolean, Logger>() {\n+                @Override public Logger apply(Boolean init) {\n+                    if (init)\n+                        ctx.reconfigure();\n+\n+                    return (Logger)LogManager.getRootLogger();\n+                }\n+            });\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -417,20 +415,17 @@ public static Logger createConsoleLogger() {\n      */\n     @Override public Log4J2Logger getLogger(Object ctgr) {\n         if (ctgr == null)\n-            return new Log4J2Logger((Logger)LogManager.getRootLogger(),\n-                consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(\"\"));\n+            return new Log4J2Logger((Logger)LogManager.getRootLogger());\n \n         if (ctgr instanceof Class) {\n             String name = ((Class<?>)ctgr).getName();\n \n-            return new Log4J2Logger((Logger)LogManager.getLogger(name),\n-                consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));\n+            return new Log4J2Logger((Logger)LogManager.getLogger(name));\n         }\n \n         String name = ctgr.toString();\n \n-        return new Log4J2Logger((Logger)LogManager.getLogger(name),\n-            consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));\n+        return new Log4J2Logger((Logger)LogManager.getLogger(name));\n     }\n \n     /** {@inheritDoc} */\n@@ -439,9 +434,6 @@ public static Logger createConsoleLogger() {\n             warning(\"Logging at TRACE level without checking if TRACE level is enabled: \" + msg);\n \n         impl.trace(msg);\n-\n-        if (consoleLog != null)\n-            consoleLog.trace(msg);\n     }\n \n     /** {@inheritDoc} */\n@@ -450,9 +442,6 @@ public static Logger createConsoleLogger() {\n             warning(\"Logging at DEBUG level without checking if DEBUG level is enabled: \" + msg);\n \n         impl.debug(msg);\n-\n-        if (consoleLog != null)\n-            consoleLog.debug(msg);\n     }\n \n     /** {@inheritDoc} */\n@@ -461,56 +450,41 @@ public static Logger createConsoleLogger() {\n             warning(\"Logging at INFO level without checking if INFO level is enabled: \" + msg);\n \n         impl.info(msg);\n-\n-        if (consoleLog != null)\n-            consoleLog.info(msg);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void warning(String msg) {\n         impl.warn(msg);\n-\n-        if (consoleLog != null)\n-            consoleLog.warn(msg);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void warning(String msg, @Nullable Throwable e) {\n         impl.warn(msg, e);\n-\n-        if (consoleLog != null)\n-            consoleLog.warn(msg, e);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void error(String msg) {\n         impl.error(msg);\n-\n-        if (consoleLog != null)\n-            consoleLog.error(msg);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void error(String msg, @Nullable Throwable e) {\n         impl.error(msg, e);\n-\n-        if (consoleLog != null)\n-            consoleLog.error(msg, e);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isTraceEnabled() {\n-        return impl.isTraceEnabled() || (consoleLog != null && consoleLog.isTraceEnabled());\n+        return impl.isTraceEnabled();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isDebugEnabled() {\n-        return impl.isDebugEnabled() || (consoleLog != null && consoleLog.isDebugEnabled());\n+        return impl.isDebugEnabled();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isInfoEnabled() {\n-        return impl.isInfoEnabled() || (consoleLog != null && consoleLog.isInfoEnabled());\n+        return impl.isInfoEnabled();\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 78
            },
            {
                "sha": "b56be27f07d86a589797e63fb09c6df8bf91a342",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2CorrectFileNameTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2CorrectFileNameTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2CorrectFileNameTest.java",
                "status": "removed",
                "changes": 94,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2CorrectFileNameTest.java?ref=6679b6cbe6a26f8e9ba2a02bcf56801811e99abd",
                "patch": "@@ -1,94 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.ignite.logger.log4j2;\n-\n-import java.io.File;\n-import junit.framework.TestCase;\n-import org.apache.ignite.Ignite;\n-import org.apache.ignite.configuration.IgniteConfiguration;\n-import org.apache.ignite.internal.util.typedef.G;\n-import org.apache.ignite.internal.util.typedef.internal.U;\n-import org.apache.ignite.testframework.GridTestUtils;\n-import org.apache.ignite.testframework.junits.common.GridCommonTest;\n-\n-/**\n- * Tests that several grids log to files with correct names.\n- */\n-@GridCommonTest(group = \"Logger\")\n-public class GridLog4j2CorrectFileNameTest extends TestCase {\n-\n-    /**\n-     * Tests correct behaviour in case 2 local nodes are started.\n-     *\n-     * @throws Exception If error occurs.\n-     */\n-    public void testLogFilesTwoNodes() throws Exception {\n-        checkOneNode(0);\n-        checkOneNode(1);\n-    }\n-\n-    /**\n-     * Starts the local node and checks for presence of log file. Also checks\n-     * that this is really a log of a started node.\n-     * \n-     * @param id Test-local node ID.\n-     * @throws Exception If error occurred.\n-     */\n-    private void checkOneNode(int id) throws Exception {\n-        try (Ignite ignite = G.start(getConfiguration(\"grid\" + id))) {\n-            String id8 = U.id8(ignite.cluster().localNode().id());\n-            String logPath = \"work/log/ignite-\" + id8 + \".log\";\n-            File logFile = U.resolveIgnitePath(logPath);\n-            assertNotNull(\"Failed to resolve path: \" + logPath, logFile);\n-            assertTrue(\"Log file does not exist: \" + logFile, logFile.exists());\n-            // We have a row in log with the following content\n-            // con >>> Local node [ID=NodeId ]\n-            String logContent = U.readFileToString(logFile.getAbsolutePath(),\n-                    \"UTF-8\");\n-            assertTrue(\n-                    \"Log file does not contain it's node ID: \" + logFile,\n-                    logContent.contains(\">>> Local node [ID=\"\n-                            + id8.toUpperCase()));\n-        }\n-    }\n-\n-    /**\n-     * Creates grid configuration.\n-     *\n-     * @param igniteInstanceName Ignite instance name.\n-     * @return Grid configuration.\n-     * @throws Exception If error occurred.\n-     */\n-    private static IgniteConfiguration getConfiguration(String igniteInstanceName)\n-            throws Exception {\n-        IgniteConfiguration cfg = new IgniteConfiguration();\n-        \n-   \n-        cfg.setIgniteInstanceName(igniteInstanceName);\n-        // We need of a configuration file passed in\n-        File xml = GridTestUtils\n-                .resolveIgnitePath(\"modules/core/src/test/config/log4j2-test.xml\");\n-\n-        assert xml != null;\n-        assert xml.exists() == true;\n-\n-        cfg.setGridLogger(new Log4J2Logger(xml));\n-        cfg.setConnectorConfiguration(null);\n-\n-        return cfg;\n-    }\n-}\n\\ No newline at end of file",
                "deletions": 94
            },
            {
                "sha": "4758e0a6a1e238229d8cc67a887c3d1ffa353e8c",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2InitializedTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2InitializedTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2InitializedTest.java",
                "status": "removed",
                "changes": 77,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2InitializedTest.java?ref=6679b6cbe6a26f8e9ba2a02bcf56801811e99abd",
                "patch": "@@ -1,77 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.ignite.logger.log4j2;\n-\n-import java.net.URL;\n-import java.util.UUID;\n-import junit.framework.TestCase;\n-import org.apache.ignite.IgniteCheckedException;\n-import org.apache.ignite.IgniteLogger;\n-import org.apache.ignite.configuration.IgniteConfiguration;\n-import org.apache.ignite.internal.util.typedef.internal.U;\n-import org.apache.ignite.testframework.junits.common.GridCommonTest;\n-\n-/**\n- * Log4j initialized test.\n- */\n-@GridCommonTest(group = \"Logger\")\n-public class GridLog4j2InitializedTest extends TestCase {\n-\n-    /**\n-     * @throws Exception If failed.\n-     */\n-    @Override protected void setUp() throws Exception {\n-\n-    }\n-\n-    /** */\n-    public void testLogInitialize() {\n-\n-        IgniteConfiguration cfg = new IgniteConfiguration();\n-\n-        cfg.setIgniteInstanceName(\"grid\" + 1);\n-        cfg.setNodeId(new UUID(1, 1));\n-        // cfg.setIgniteHome(\"/home/glutters/Documenti/apache-ignite/ignite-master/ignite/\");\n-\n-        URL xml = U.resolveIgniteUrl(\"config/ignite-log4j2.xml\");\n-        IgniteLogger log;\n-        try {\n-\n-            log = new Log4J2Logger(xml);\n-            // log.isQuiet();\n-            cfg.setGridLogger(log);\n-        } catch (IgniteCheckedException e) {\n-            e.printStackTrace();\n-            return;\n-        }\n-\n-        assert log.isInfoEnabled() == true;\n-\n-        if (log.isDebugEnabled())\n-            log.debug(\"This is 'debug' message.\");\n-\n-        log.info(\"This is 'info' message.\");\n-        log.warning(\"This is 'warning' message.\");\n-        log.warning(\"This is 'warning' message.\", new Exception(\n-                \"It's a test warning exception\"));\n-        log.error(\"This is 'error' message.\");\n-\n-        assert log.getLogger(GridLog4j2InitializedTest.class.getName()) instanceof Log4J2Logger;\n-    }\n-\n-}\n\\ No newline at end of file",
                "deletions": 77
            },
            {
                "sha": "5c19de065005a9e2b2b5acfeffcc042d9437370a",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2LoggingFileTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2LoggingFileTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/6679b6cbe6a26f8e9ba2a02bcf56801811e99abd/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2LoggingFileTest.java",
                "status": "removed",
                "changes": 68,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/GridLog4j2LoggingFileTest.java?ref=6679b6cbe6a26f8e9ba2a02bcf56801811e99abd",
                "patch": "@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.ignite.logger.log4j2;\n-\n-import java.io.File;\n-import java.util.UUID;\n-import junit.framework.TestCase;\n-import org.apache.ignite.IgniteLogger;\n-import org.apache.ignite.logger.LoggerNodeIdAware;\n-import org.apache.ignite.testframework.GridTestUtils;\n-import org.junit.Test;\n-\n-/**\n- * Grid Log4j SPI test.\n- */\n-public class GridLog4j2LoggingFileTest extends TestCase {\n-    /** */\n-    private IgniteLogger log;\n-\n-    /** {@inheritDoc} */\n-    @Override protected void setUp() throws Exception {\n-        \n-\n-        File xml = GridTestUtils\n-                .resolveIgnitePath(\"modules/core/src/test/config/log4j2-test.xml\");\n-\n-        assert xml != null;\n-        assert xml.exists() == true;\n-\n-        log = new Log4J2Logger(xml).getLogger(getClass());\n-        ((LoggerNodeIdAware) log).setNodeId(UUID.randomUUID());\n-\n-    }\n-\n-    /**\n-     * Tests log4j logging SPI.\n-     */\n-    @Test\n-    public void testLog() {\n-        assert log.isDebugEnabled() == true;\n-        assert log.isInfoEnabled() == true;\n-\n-        log.debug(\"This is 'debug' message.\");\n-        log.info(\"This is 'info' message.\");\n-        log.warning(\"This is 'warning' message.\");\n-        log.warning(\"This is 'warning' message.\", new Exception(\n-                \"It's a test warning exception\"));\n-        log.error(\"This is 'error' message.\");\n-        log.error(\"This is 'error' message.\", new Exception(\n-                \"It's a test error exception\"));\n-    }\n-\n-}\n\\ No newline at end of file",
                "deletions": 68
            },
            {
                "sha": "a5564da01175ab485e54a22161fad60bfec47a4d",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerSelfTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerSelfTest.java?ref=f8824c86112c99f5f9657d86a3f0aa53777b1f17",
                "patch": "@@ -41,6 +41,13 @@\n     /** */\n     private static final String LOG_PATH_MAIN = \"config/ignite-log4j2.xml\";\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Override protected void setUp() throws Exception {\n+        Log4J2Logger.cleanup();\n+    }\n+\n     /**\n      * @throws Exception If failed.\n      */",
                "deletions": 0
            },
            {
                "sha": "c28108ce54914fc5722b169da2c6c47f1dfde398",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerVerboseModeSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerVerboseModeSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerVerboseModeSelfTest.java",
                "status": "modified",
                "changes": 71,
                "additions": 47,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/logger/log4j2/Log4j2LoggerVerboseModeSelfTest.java?ref=f8824c86112c99f5f9657d86a3f0aa53777b1f17",
                "patch": "@@ -18,6 +18,7 @@\n package org.apache.ignite.logger.log4j2;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.PrintStream;\n import java.util.Collections;\n import junit.framework.TestCase;\n@@ -26,17 +27,26 @@\n import org.apache.ignite.internal.util.typedef.G;\n import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.logging.log4j.Level;\n \n /**\n  * Grid Log4j2 SPI test.\n  */\n public class Log4j2LoggerVerboseModeSelfTest extends TestCase {\n     /** */\n-    public static final String LOG_PATH_VERBOSE_TEST = \"modules/core/src/test/config/log4j2-verbose-test.xml\";\n+    private static final String LOG_PATH_VERBOSE_TEST = \"modules/core/src/test/config/log4j2-verbose-test.xml\";\n \n     /**\n-     * Test does not work after another tests. Can be run from IDE as separate test.\n+     * @throws Exception If failed.\n+     */\n+    @Override protected void setUp() throws Exception {\n+        Log4J2Logger.cleanup();\n+\n+    }\n+\n+    /**\n+     * Test works fine after other tests. Please do not forget to call Log4J2Logger.cleanup()\n      *\n      * @throws Exception If failed.\n      */\n@@ -47,49 +57,58 @@ public void testVerboseMode() throws Exception {\n         final ByteArrayOutputStream testOut = new ByteArrayOutputStream();\n         final ByteArrayOutputStream testErr = new ByteArrayOutputStream();\n \n+        String consoleOut = \"Empty\";\n+        String consoleErr = \"Empty\";\n+        String testMsg = \"******* Hello Tester! ******* \";\n+\n         try {\n             System.setOut(new PrintStream(testOut));\n             System.setErr(new PrintStream(testErr));\n \n+\n             System.setProperty(\"IGNITE_QUIET\", \"false\");\n \n+\n             try (Ignite ignite = G.start(getConfiguration(\"verboseLogGrid\", LOG_PATH_VERBOSE_TEST))) {\n-                String testMsg = \"******* Hello Tester! ******* \";\n \n                 ignite.log().error(testMsg + Level.ERROR);\n                 ignite.log().warning(testMsg + Level.WARN);\n                 ignite.log().info(testMsg + Level.INFO);\n                 ignite.log().debug(testMsg + Level.DEBUG);\n                 ignite.log().trace(testMsg + Level.TRACE);\n-\n-                String consoleOut = testOut.toString();\n-                String consoleErr = testErr.toString();\n-\n-                assertTrue(consoleOut.contains(testMsg + Level.INFO));\n-                assertTrue(consoleOut.contains(testMsg + Level.DEBUG));\n-                assertTrue(consoleOut.contains(testMsg + Level.TRACE));\n-                assertTrue(consoleOut.contains(testMsg + Level.ERROR));\n-                assertTrue(consoleOut.contains(testMsg + Level.WARN));\n-\n-                assertTrue(consoleErr.contains(testMsg + Level.ERROR));\n-                assertTrue(consoleErr.contains(testMsg + Level.WARN));\n-                assertTrue(!consoleErr.contains(testMsg + Level.INFO));\n-                assertTrue(consoleErr.contains(testMsg + Level.DEBUG));\n-                assertTrue(consoleErr.contains(testMsg + Level.TRACE));\n             }\n+\n         }\n         finally {\n             System.setProperty(\"IGNITE_QUIET\", \"true\");\n \n             System.setOut(backupSysOut);\n             System.setErr(backupSysErr);\n+        }\n \n-            System.out.println(\"**************** Out Console content ***************\");\n-            System.out.println(testOut.toString());\n+        testOut.flush();\n+        testErr.flush();\n \n-            System.err.println(\"**************** Err Console content ***************\");\n-            System.err.println(testErr.toString());\n-        }\n+        consoleOut = testOut.toString();\n+        consoleErr = testErr.toString();\n+\n+        System.out.println(\"**************** Out Console content ***************\");\n+        System.out.println(consoleOut);\n+\n+        System.out.println(\"**************** Err Console content ***************\");\n+        System.out.println(consoleErr);\n+\n+        assertTrue(consoleOut.contains(testMsg + Level.INFO));\n+        assertTrue(consoleOut.contains(testMsg + Level.DEBUG));\n+        assertTrue(consoleOut.contains(testMsg + Level.TRACE));\n+        assertTrue(consoleOut.contains(testMsg + Level.ERROR));\n+        assertTrue(consoleOut.contains(testMsg + Level.WARN));\n+\n+        assertTrue(consoleErr.contains(testMsg + Level.ERROR));\n+        assertTrue(consoleErr.contains(testMsg + Level.WARN));\n+        assertTrue(!consoleErr.contains(testMsg + Level.INFO));\n+        assertTrue(consoleErr.contains(testMsg + Level.DEBUG));\n+        assertTrue(consoleErr.contains(testMsg + Level.TRACE));\n     }\n \n     /**\n@@ -108,9 +127,13 @@ private static IgniteConfiguration getConfiguration(String igniteInstanceName, S\n             setAddresses(Collections.singleton(\"127.0.0.1:47500..47509\"));\n         }});\n \n+        File xml = GridTestUtils.resolveIgnitePath(LOG_PATH_VERBOSE_TEST);\n+\n+        Log4J2Logger logger = new Log4J2Logger(xml);\n+\n         return new IgniteConfiguration()\n             .setIgniteInstanceName(igniteInstanceName)\n-            .setGridLogger(new Log4J2Logger(logPath))\n+            .setGridLogger(logger)\n             .setConnectorConfiguration(null)\n             .setDiscoverySpi(disco);\n     }",
                "deletions": 24
            },
            {
                "sha": "a23cb477742f4162c094b3b785fac29a3be8239b",
                "filename": "modules/log4j2/src/test/java/org/apache/ignite/testsuites/IgniteLog4j2TestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/testsuites/IgniteLog4j2TestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/f8824c86112c99f5f9657d86a3f0aa53777b1f17/modules/log4j2/src/test/java/org/apache/ignite/testsuites/IgniteLog4j2TestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/log4j2/src/test/java/org/apache/ignite/testsuites/IgniteLog4j2TestSuite.java?ref=f8824c86112c99f5f9657d86a3f0aa53777b1f17",
                "patch": "@@ -19,6 +19,7 @@\n \n import junit.framework.TestSuite;\n import org.apache.ignite.logger.log4j2.Log4j2LoggerSelfTest;\n+import org.apache.ignite.logger.log4j2.Log4j2LoggerVerboseModeSelfTest;\n \n /**\n  * Log4j2 logging tests.\n@@ -32,6 +33,7 @@ public static TestSuite suite() throws Exception {\n         TestSuite suite = new TestSuite(\"Log4j2 Logging Test Suite\");\n \n         suite.addTest(new TestSuite(Log4j2LoggerSelfTest.class));\n+        suite.addTest(new TestSuite(Log4j2LoggerVerboseModeSelfTest.class));\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Added test, fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/557bf5dd118af9ef825624bb36fb50c44046456e",
        "parent": "https://github.com/apache/ignite/commit/26a191b4f7652e40f2e8d23bd2e46503bcf9514c",
        "bug_id": "ignite_130",
        "file": [
            {
                "sha": "28a95d8dcfece496de5d483d62607809abf243bf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/557bf5dd118af9ef825624bb36fb50c44046456e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/557bf5dd118af9ef825624bb36fb50c44046456e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java?ref=557bf5dd118af9ef825624bb36fb50c44046456e",
                "patch": "@@ -71,6 +71,9 @@ protected boolean needCopy(CacheObjectContext ctx) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf, CacheObjectContext ctx) throws IgniteCheckedException {\n+        if (valBytes == null)\n+            valueBytes(ctx);\n+\n         if (buf.remaining() < valBytes.length + 5)\n             return false;\n ",
                "deletions": 0
            },
            {
                "sha": "2dc18f5ad9c3e8a26bb7a24a89498bee309e6993",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/557bf5dd118af9ef825624bb36fb50c44046456e/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/557bf5dd118af9ef825624bb36fb50c44046456e/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java",
                "status": "added",
                "changes": 177,
                "additions": 177,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheObjectPutSelfTest.java?ref=557bf5dd118af9ef825624bb36fb50c44046456e",
                "patch": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache;\n+\n+import java.io.Serializable;\n+import java.nio.ByteBuffer;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cacheobject.IgniteCacheObjectProcessor;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ *\n+ */\n+public class IgniteCacheObjectPutSelfTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final String CACHE_NAME = \"partitioned\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(gridName);\n+\n+        CacheConfiguration ccfg = new CacheConfiguration();\n+\n+        ccfg.setName(CACHE_NAME);\n+\n+        cfg.setCacheConfiguration(ccfg);\n+\n+        cfg.setMarshaller(null);\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrid(0);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testPrimitiveValues() throws Exception {\n+        IgniteEx ignite = grid(0);\n+\n+        IgniteCache<Object, Object> cache = ignite.cache(CACHE_NAME);\n+\n+        for (int i = 0; i < 10; i++)\n+            cache.put(i, String.valueOf(i));\n+\n+        IgniteCacheObjectProcessor co = ignite.context().cacheObjects();\n+        GridCacheAdapter<Object, Object> iCache = ignite.context().cache().internalCache(CACHE_NAME);\n+        CacheObjectContext coCtx = iCache.context().cacheObjectContext();\n+\n+        ByteBuffer buf = ByteBuffer.allocate(2048);\n+\n+        for (int i = 0; i < 10; i++) {\n+            KeyCacheObject key = co.toCacheKeyObject(coCtx, i, false);\n+\n+            GridCacheEntryEx entry = iCache.peekEx(key);\n+\n+            assertNotNull(entry);\n+\n+            assertTrue(entry.key().putValue(buf, coCtx));\n+            assertTrue(entry.valueBytes().putValue(buf, coCtx));\n+        }\n+\n+        buf.flip();\n+\n+        for (int i = 0; i < 10; i++) {\n+            CacheObject co1 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(i, co1.value(coCtx, false));\n+\n+            CacheObject co2 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(String.valueOf(i), co2.value(coCtx, false));\n+        }\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testClassValues() throws Exception {\n+        IgniteEx ignite = grid(0);\n+\n+        IgniteCache<Object, Object> cache = ignite.cache(CACHE_NAME);\n+\n+        for (int i = 0; i < 10; i++)\n+            cache.put(new TestValue(i), new TestValue(i));\n+\n+        IgniteCacheObjectProcessor co = ignite.context().cacheObjects();\n+        GridCacheAdapter<Object, Object> iCache = ignite.context().cache().internalCache(CACHE_NAME);\n+        CacheObjectContext coCtx = iCache.context().cacheObjectContext();\n+\n+        ByteBuffer buf = ByteBuffer.allocate(2048);\n+\n+        for (int i = 0; i < 10; i++) {\n+            KeyCacheObject key = co.toCacheKeyObject(coCtx, new TestValue(i), false);\n+\n+            GridCacheEntryEx entry = iCache.peekEx(key);\n+\n+            assertNotNull(entry);\n+\n+            assertTrue(entry.key().putValue(buf, coCtx));\n+            assertTrue(entry.valueBytes().putValue(buf, coCtx));\n+        }\n+\n+        buf.flip();\n+\n+        for (int i = 0; i < 10; i++) {\n+            CacheObject co1 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(new TestValue(i), co1.value(coCtx, false));\n+\n+            CacheObject co2 = co.toCacheObject(coCtx, buf);\n+\n+            assertEquals(new TestValue(i), co2.value(coCtx, false));\n+        }\n+    }\n+\n+    /**\n+     *\n+     */\n+    private static class TestValue implements Serializable {\n+        /** */\n+        private int val;\n+\n+        /**\n+         * @param val Value.\n+         */\n+        private TestValue(int val) {\n+            this.val = val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean equals(Object o) {\n+            if (this == o)\n+                return true;\n+\n+            if (!(o instanceof TestValue))\n+                return false;\n+\n+            TestValue value = (TestValue)o;\n+\n+            return val == value.val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public int hashCode() {\n+            return val;\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": " IGNITE-2796 NPE during rebalancing",
        "commit": "https://github.com/apache/ignite/commit/69d1f4b7774769ca7334b2290b492c8e0f0a8ddb",
        "parent": "https://github.com/apache/ignite/commit/a1efc5a06b15acffa40ad0a9d3352206061b42f6",
        "bug_id": "ignite_131",
        "file": [
            {
                "sha": "0cf974ff8a65f84778cfb8be4d1b27c783f8ec7c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "blob_url": "https://github.com/apache/ignite/blob/69d1f4b7774769ca7334b2290b492c8e0f0a8ddb/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "raw_url": "https://github.com/apache/ignite/raw/69d1f4b7774769ca7334b2290b492c8e0f0a8ddb/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java",
                "status": "modified",
                "changes": 29,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemander.java?ref=69d1f4b7774769ca7334b2290b492c8e0f0a8ddb",
                "patch": "@@ -841,6 +841,8 @@ private boolean isInitial() {\n          */\n         private void appendPartitions(UUID nodeId, Collection<Integer> parts) {\n             synchronized (this) {\n+                assert parts != null : \"Partitions are null [cache=\" + cctx.name() + \", fromNode=\" + nodeId + \"]\";\n+\n                 remaining.put(nodeId, new T2<>(U.currentTimeMillis(), parts));\n             }\n         }\n@@ -972,22 +974,25 @@ private void partitionDone(UUID nodeId, int p) {\n                     preloadEvent(p, EVT_CACHE_REBALANCE_PART_LOADED,\n                         exchFut.discoveryEvent());\n \n-                Collection<Integer> parts = remaining.get(nodeId).get2();\n+                T2<Long, Collection<Integer>> t = remaining.get(nodeId);\n \n-                if (parts != null) {\n-                    boolean rmvd = parts.remove(p);\n+                assert t != null : \"Remaining not found [cache=\" + cctx.name() + \", fromNode=\" + nodeId +\n+                    \", part=\" + p + \"]\";\n \n-                    assert rmvd : \"Partition already done [cache=\" + cctx.name() + \", fromNode=\" + nodeId +\n-                        \", part=\" + p + \", left=\" + parts + \"]\";\n+                Collection<Integer> parts = t.get2();\n \n-                    if (parts.isEmpty()) {\n-                        U.log(log, \"Completed \" + ((remaining.size() == 1 ? \"(final) \" : \"\") +\n-                            \"rebalancing [cache=\" + cctx.name() +\n-                            \", fromNode=\" + nodeId + \", topology=\" + topologyVersion() +\n-                            \", time=\" + (U.currentTimeMillis() - remaining.get(nodeId).get1()) + \" ms]\"));\n+                boolean rmvd = parts.remove(p);\n \n-                        remaining.remove(nodeId);\n-                    }\n+                assert rmvd : \"Partition already done [cache=\" + cctx.name() + \", fromNode=\" + nodeId +\n+                    \", part=\" + p + \", left=\" + parts + \"]\";\n+\n+                if (parts.isEmpty()) {\n+                    U.log(log, \"Completed \" + ((remaining.size() == 1 ? \"(final) \" : \"\") +\n+                        \"rebalancing [cache=\" + cctx.name() +\n+                        \", fromNode=\" + nodeId + \", topology=\" + topologyVersion() +\n+                        \", time=\" + (U.currentTimeMillis() - t.get1()) + \" ms]\"));\n+\n+                    remaining.remove(nodeId);\n                 }\n \n                 checkIsDone();",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-3274: Hadoop: Fixed NPE in BasicUserNameMapper.",
        "commit": "https://github.com/apache/ignite/commit/4273950458a9bb2f83d5fc0489da49aa1fa1dfaf",
        "parent": "https://github.com/apache/ignite/commit/c300448b94ed0d3f847197d1bbe67c31165c6ae6",
        "bug_id": "ignite_132",
        "file": [
            {
                "sha": "c34808ae84bc4dab96ccbdddebcca23534ce891a",
                "filename": "modules/hadoop/src/main/java/org/apache/ignite/hadoop/util/BasicUserNameMapper.java",
                "blob_url": "https://github.com/apache/ignite/blob/4273950458a9bb2f83d5fc0489da49aa1fa1dfaf/modules/hadoop/src/main/java/org/apache/ignite/hadoop/util/BasicUserNameMapper.java",
                "raw_url": "https://github.com/apache/ignite/raw/4273950458a9bb2f83d5fc0489da49aa1fa1dfaf/modules/hadoop/src/main/java/org/apache/ignite/hadoop/util/BasicUserNameMapper.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/apache/ignite/hadoop/util/BasicUserNameMapper.java?ref=4273950458a9bb2f83d5fc0489da49aa1fa1dfaf",
                "patch": "@@ -41,9 +41,7 @@\n \n     /** {@inheritDoc} */\n     @Nullable @Override public String map(String name) {\n-        assert mappings != null;\n-\n-        String res = mappings.get(name);\n+        String res = mappings != null ? mappings.get(name) : null;\n \n         return res != null ? res : useDfltUsrName ? dfltUsrName : name;\n     }",
                "deletions": 3
            },
            {
                "sha": "fd8fdef0369eb9d8ff657a80af096cd34274f1ea",
                "filename": "modules/hadoop/src/test/java/org/apache/ignite/hadoop/util/BasicUserNameMapperSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/4273950458a9bb2f83d5fc0489da49aa1fa1dfaf/modules/hadoop/src/test/java/org/apache/ignite/hadoop/util/BasicUserNameMapperSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/4273950458a9bb2f83d5fc0489da49aa1fa1dfaf/modules/hadoop/src/test/java/org/apache/ignite/hadoop/util/BasicUserNameMapperSelfTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/test/java/org/apache/ignite/hadoop/util/BasicUserNameMapperSelfTest.java?ref=4273950458a9bb2f83d5fc0489da49aa1fa1dfaf",
                "patch": "@@ -27,14 +27,31 @@\n  * Test for basic user name mapper.\n  */\n public class BasicUserNameMapperSelfTest extends GridCommonAbstractTest {\n+    /**\n+     * Test null mappings.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    public void testNullMappings() throws Exception {\n+        checkNullOrEmptyMappings(null);\n+    }\n+\n     /**\n      * Test empty mappings.\n      *\n      * @throws Exception If failed.\n      */\n     public void testEmptyMappings() throws Exception {\n-        Map<String, String> map = new HashMap<>();\n+        checkNullOrEmptyMappings(new HashMap<String, String>());\n+    }\n \n+    /**\n+     * Check null or empty mappings.\n+     *\n+     * @param map Mappings.\n+     * @throws Exception If failed.\n+     */\n+    private void checkNullOrEmptyMappings(@Nullable Map<String, String> map) throws Exception {\n         BasicUserNameMapper mapper = create(map, false, null);\n \n         assertNull(mapper.map(null));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixing snapshot tests for 8.2.1 release: Activating grid in tests, NPE fix, class cast fix",
        "commit": "https://github.com/apache/ignite/commit/3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77",
        "parent": "https://github.com/apache/ignite/commit/29df01dd2196fda7ed927e67e5e8bad194ce6f34",
        "bug_id": "ignite_133",
        "file": [
            {
                "sha": "a81ceab3faded9d92c567e2decc85c322e429917",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77",
                "patch": "@@ -2175,7 +2175,7 @@ private GridCacheSharedContext createSharedContext(GridKernalContext kernalCtx,\n         IgnitePageStoreManager pageStoreMgr = null;\n         IgniteWriteAheadLogManager walMgr = null;\n \n-        if (ctx.config().isPersistentStoreEnabled() && !ctx.clientNode()) {\n+        if (ctx.config().isPersistentStoreEnabled()) {\n             if (ctx.clientNode()) {\n                 U.warn(log, \"Persistent Store is not supported on client nodes (Persistent Store's\" +\n                     \" configuration will be ignored).\");",
                "deletions": 1
            },
            {
                "sha": "2143df5ec20ea3d439d7ea30bb158875ef4f919b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=3bf8b0319fc50cb4a9294f90f4cf7b689bc48a77",
                "patch": "@@ -237,7 +237,7 @@\n     /** */\n     private long checkpointPageBufSize;\n \n-    /** */\n+    /** <code>null</code> for client node */\n     private FilePageStoreManager storeMgr;\n \n     /** */\n@@ -267,7 +267,7 @@\n     /** */\n     private final ConcurrentMap<Integer, IgniteInternalFuture> idxRebuildFuts = new ConcurrentHashMap<>();\n \n-    /** Lock holder. */\n+    /** Lock holder. <code>null</code> for client node */\n     private FileLockHolder fileLockHolder;\n \n     /** Lock wait time. */\n@@ -554,7 +554,8 @@ public Checkpointer getCheckpointer() {\n         /* Must be here, because after deactivate we can invoke activate and file lock must be already configured */\n         stopping = false;\n \n-        fileLockHolder = new FileLockHolder(storeMgr.workDir().getPath(), cctx.kernalContext(), log);\n+        if (!cctx.kernalContext().clientNode())\n+            fileLockHolder = new FileLockHolder(storeMgr.workDir().getPath(), cctx.kernalContext(), log);\n     }\n \n     /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed \"IGNITE-6360: NPE occurs if object with null indexed field is added\". This closes #2739.\n\nSigned-off-by: nikolay_tikhonov <ntikhonov@gridgain.com>",
        "commit": "https://github.com/apache/ignite/commit/2929acef591a6309438cd46e11751bf86a11bf8b",
        "parent": "https://github.com/apache/ignite/commit/12cbf75bb70615cf31ac059e89dabac1dabce77e",
        "bug_id": "ignite_134",
        "file": [
            {
                "sha": "5c42d0d3097b40669b0890f9865b931d9f5f2ba9",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "blob_url": "https://github.com/apache/ignite/blob/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "raw_url": "https://github.com/apache/ignite/raw/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java?ref=2929acef591a6309438cd46e11751bf86a11bf8b",
                "patch": "@@ -383,6 +383,9 @@ private int tryCompareOptimized(long pageAddr, int off, int maxSize, Value v) {\n         if (type == Value.NULL)\n             return Integer.MIN_VALUE;\n \n+        if (v == ValueNull.INSTANCE)\n+            return fixSort(1, sortType());\n+\n         if (this.type != type)\n             throw new UnsupportedOperationException(\"Invalid fast index type: \" + type);\n ",
                "deletions": 0
            },
            {
                "sha": "4a6988734093f018999f3bf1c35e01e795b025f0",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java?ref=2929acef591a6309438cd46e11751bf86a11bf8b",
                "patch": "@@ -207,15 +207,15 @@ private int putAndCompare(String v1, String v2, int maxSize) throws Exception {\n             InlineIndexHelper ih = new InlineIndexHelper(Value.STRING, 1, 0,\n                 CompareMode.getInstance(null, 0));\n \n-            ih.put(pageAddr, off, ValueString.get(v1), maxSize);\n+            ih.put(pageAddr, off, v1 == null ? ValueNull.INSTANCE : ValueString.get(v1), maxSize);\n \n             Comparator<Value> comp = new Comparator<Value>() {\n                 @Override public int compare(Value o1, Value o2) {\n                     throw new AssertionError(\"Optimized algorithm should be used.\");\n                 }\n             };\n \n-            return ih.compare(pageAddr, off, maxSize,  ValueString.get(v2), comp);\n+            return ih.compare(pageAddr, off, maxSize,  v2 == null ? ValueNull.INSTANCE : ValueString.get(v2), comp);\n         }\n         finally {\n             if (page != 0L)\n@@ -378,6 +378,10 @@ public void testBytes() throws Exception {\n     /** */\n     public void testNull() throws Exception {\n         testPutGet(ValueInt.get(-1), ValueNull.INSTANCE, ValueInt.get(3));\n+        testPutGet(ValueInt.get(-1), ValueNull.INSTANCE, ValueInt.get(3));\n+\n+        int maxSize = 3 + 2; // 2 ascii chars + 3 bytes header.\n+        assertEquals(1, putAndCompare(\"aa\", null, maxSize));\n     }\n \n     /** */",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in GridNioServer",
        "commit": "https://github.com/apache/ignite/commit/5d224f192cee59b9f7dee2a0741c5b334657b845",
        "parent": "https://github.com/apache/ignite/commit/457ca6fb5d64faf88869f4db7525673d067002df",
        "bug_id": "ignite_135",
        "file": [
            {
                "sha": "c0f5cfc923daf2a280bac791f295c299e7feecd0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "blob_url": "https://github.com/apache/ignite/blob/5d224f192cee59b9f7dee2a0741c5b334657b845/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "raw_url": "https://github.com/apache/ignite/raw/5d224f192cee59b9f7dee2a0741c5b334657b845/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java?ref=5d224f192cee59b9f7dee2a0741c5b334657b845",
                "patch": "@@ -997,7 +997,7 @@ private void processWriteSsl(SelectionKey key) throws IOException {\n \n                         finished = msg.writeTo(buf, writer);\n \n-                        if (finished)\n+                        if (finished && writer != null)\n                             writer.reset();\n                     }\n \n@@ -1019,7 +1019,7 @@ private void processWriteSsl(SelectionKey key) throws IOException {\n \n                         finished = msg.writeTo(buf, writer);\n \n-                        if (finished)\n+                        if (finished && writer != null)\n                             writer.reset();\n                     }\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in ServerImpl.cleanIpFinder.",
        "commit": "https://github.com/apache/ignite/commit/74f69847810c5cfe17cb0b5f1a595540c4d8d080",
        "parent": "https://github.com/apache/ignite/commit/eb78b2ab1579149cfac72eeb6f80836ee84acb36",
        "bug_id": "ignite_136",
        "file": [
            {
                "sha": "c69a61136cf3cc1f08099a754ccbfa2b253f1d5a",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/74f69847810c5cfe17cb0b5f1a595540c4d8d080/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/74f69847810c5cfe17cb0b5f1a595540c4d8d080/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=74f69847810c5cfe17cb0b5f1a595540c4d8d080",
                "patch": "@@ -1722,12 +1722,11 @@ private void cleanIpFinder() {\n \n                         if (res == null) {\n                             try {\n-                                res = pingNode(addr, null, null).get1() != null;\n+                                res = pingNode(addr, null, null) != null;\n                             }\n                             catch (IgniteCheckedException e) {\n                                 if (log.isDebugEnabled())\n-                                    log.debug(\"Failed to ping node [addr=\" + addr +\n-                                        \", err=\" + e.getMessage() + ']');\n+                                    log.debug(\"Failed to ping node [addr=\" + addr + \", err=\" + e.getMessage() + ']');\n \n                                 res = false;\n                             }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-db - fix for NPE GG-11088",
        "commit": "https://github.com/apache/ignite/commit/edb1692569aebcd9cd21c0b12d1ea835d086f055",
        "parent": "https://github.com/apache/ignite/commit/4c84e80f21b560159f5db536260eac53526e03a9",
        "bug_id": "ignite_137",
        "file": [
            {
                "sha": "3914bd791472f5d254bebbe409bbe125b230dc5b",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java",
                "blob_url": "https://github.com/apache/ignite/blob/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java",
                "raw_url": "https://github.com/apache/ignite/raw/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java",
                "status": "modified",
                "changes": 32,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java?ref=edb1692569aebcd9cd21c0b12d1ea835d086f055",
                "patch": "@@ -28,6 +28,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import javax.cache.CacheException;\n import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.GridKernalContext;\n import org.h2.engine.Constants;\n import org.h2.engine.Session;\n import org.h2.index.BaseIndex;\n@@ -69,21 +70,31 @@\n     /** */\n     private int fetchedCnt;\n \n+    /** */\n+    private final GridKernalContext ctx;\n+\n     /**\n+     * @param ctx Context.\n      * @param tbl Table.\n      * @param name Index name.\n      * @param type Type.\n      * @param cols Columns.\n      */\n-    public GridMergeIndex(GridMergeTable tbl, String name, IndexType type, IndexColumn[] cols) {\n+    public GridMergeIndex(GridKernalContext ctx,\n+        GridMergeTable tbl,\n+        String name,\n+        IndexType type,\n+        IndexColumn[] cols) {\n+        this.ctx = ctx;\n+\n         initBaseIndex(tbl, 0, name, cols, type);\n     }\n \n     /**\n-     *\n+     * @param ctx Context.\n      */\n-    protected GridMergeIndex() {\n-        // No-op.\n+    protected GridMergeIndex(GridKernalContext ctx) {\n+        this.ctx = ctx;\n     }\n \n     /**\n@@ -93,6 +104,19 @@ protected GridMergeIndex() {\n         return remainingRows.keySet();\n     }\n \n+    /**\n+     * Fails index if any source node is left.\n+     */\n+    protected final void checkSourceNodesAlive() {\n+        for (UUID nodeId : sources()) {\n+            if (!ctx.discovery().alive(nodeId)) {\n+                fail(nodeId);\n+\n+                return;\n+            }\n+        }\n+    }\n+\n     /**\n      * @param nodeId Node ID.\n      * @return {@code true} If this index needs data from the given source node.",
                "deletions": 4
            },
            {
                "sha": "5639340790585c0dd94a7cc0024c2ad3e90a1f13",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java",
                "blob_url": "https://github.com/apache/ignite/blob/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java",
                "raw_url": "https://github.com/apache/ignite/raw/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java",
                "status": "modified",
                "changes": 19,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java?ref=edb1692569aebcd9cd21c0b12d1ea835d086f055",
                "patch": "@@ -24,6 +24,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n import javax.cache.CacheException;\n+import org.apache.ignite.internal.GridKernalContext;\n import org.h2.index.Cursor;\n import org.h2.index.IndexType;\n import org.h2.result.Row;\n@@ -40,25 +41,27 @@\n     private final BlockingQueue<GridResultPage> queue = new LinkedBlockingQueue<>();\n \n     /**\n+     * @param ctx Context.\n      * @param tbl  Table.\n      * @param name Index name.\n      */\n-    public GridMergeIndexUnsorted(GridMergeTable tbl, String name) {\n-        super(tbl, name, IndexType.createScan(false), IndexColumn.wrap(tbl.getColumns()));\n+    public GridMergeIndexUnsorted(GridKernalContext ctx, GridMergeTable tbl, String name) {\n+        super(ctx, tbl, name, IndexType.createScan(false), IndexColumn.wrap(tbl.getColumns()));\n     }\n \n     /**\n+     * @param ctx Context.\n      * @return Dummy index instance.\n      */\n-    public static GridMergeIndexUnsorted createDummy() {\n-        return new GridMergeIndexUnsorted();\n+    public static GridMergeIndexUnsorted createDummy(GridKernalContext ctx) {\n+        return new GridMergeIndexUnsorted(ctx);\n     }\n \n     /**\n-     *\n+     * @param ctx Context.\n      */\n-    private GridMergeIndexUnsorted() {\n-        // No-op.\n+    private GridMergeIndexUnsorted(GridKernalContext ctx) {\n+        super(ctx);\n     }\n \n     /** {@inheritDoc} */\n@@ -94,7 +97,7 @@ private GridMergeIndexUnsorted() {\n                         if (page != null)\n                             break;\n \n-                        ((GridMergeTable)table).checkSourceNodesAlive();\n+                        checkSourceNodesAlive();\n                     }\n \n                     if (page.isLast())",
                "deletions": 8
            },
            {
                "sha": "a86cbcdd4be87389f337dc87104f80a19b6400d4",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeTable.java",
                "blob_url": "https://github.com/apache/ignite/blob/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeTable.java",
                "raw_url": "https://github.com/apache/ignite/raw/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeTable.java",
                "status": "modified",
                "changes": 16,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeTable.java?ref=edb1692569aebcd9cd21c0b12d1ea835d086f055",
                "patch": "@@ -18,7 +18,6 @@\n package org.apache.ignite.internal.processors.query.h2.twostep;\n \n import java.util.ArrayList;\n-import java.util.UUID;\n import org.apache.ignite.internal.GridKernalContext;\n import org.h2.command.ddl.CreateTableData;\n import org.h2.engine.Session;\n@@ -47,20 +46,7 @@ public GridMergeTable(CreateTableData data, GridKernalContext ctx) {\n         super(data);\n \n         this.ctx = ctx;\n-        idx = new GridMergeIndexUnsorted(this, \"merge_scan\");\n-    }\n-\n-    /**\n-     * Fails merge table if any source node is left.\n-     */\n-    public void checkSourceNodesAlive() {\n-        for (UUID nodeId : idx.sources()) {\n-            if (!ctx.discovery().alive(nodeId)) {\n-                idx.fail(nodeId);\n-\n-                return;\n-            }\n-        }\n+        idx = new GridMergeIndexUnsorted(ctx, this, \"merge_scan\");\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 15
            },
            {
                "sha": "47ab0833e84f9d5a511ce176d4058c8b38ecb20c",
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/edb1692569aebcd9cd21c0b12d1ea835d086f055/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java?ref=edb1692569aebcd9cd21c0b12d1ea835d086f055",
                "patch": "@@ -532,7 +532,7 @@ else if (!cctx.isReplicated() && !extraCctx.isReplicated()) {\n                     fakeTable(r.conn, tblIdx++).setInnerTable(tbl);\n                 }\n                 else\n-                    idx = GridMergeIndexUnsorted.createDummy();\n+                    idx = GridMergeIndexUnsorted.createDummy(ctx);\n \n                 for (ClusterNode node : nodes)\n                     idx.addSource(node.id());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Fixed NPE in GridCacheAbstractFullApiSelfTest in multi jvm tests.",
        "commit": "https://github.com/apache/ignite/commit/121b89b07990068a31d384da8d6f3c781cf0efb8",
        "parent": "https://github.com/apache/ignite/commit/b5121adff860d96e5954d3466137854f8fae4c27",
        "bug_id": "ignite_138",
        "file": [
            {
                "sha": "a31c82ef72bca0826d3de64c960008ac79bbc6b2",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/121b89b07990068a31d384da8d6f3c781cf0efb8/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/121b89b07990068a31d384da8d6f3c781cf0efb8/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java?ref=121b89b07990068a31d384da8d6f3c781cf0efb8",
                "patch": "@@ -296,7 +296,7 @@ protected CacheMemoryMode memoryMode() {\n         for (int i = 0; i < gridCount(); i++) {\n             Boolean clientMode = grid(i).configuration().isClientMode();\n \n-            if (clientMode)\n+            if (clientMode != null && clientMode) // Can be null in multi jvm tests.\n                 continue;\n \n             grid(0).services(grid(0).cluster()).deployNodeSingleton(SERVICE_NAME1, new DummyServiceImpl());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/2ad974e6af0767f4b639564092f9ae18116616cf",
        "parent": "https://github.com/apache/ignite/commit/77d092c75fd8de40dd6a814c3a38839b80190119",
        "bug_id": "ignite_139",
        "file": [
            {
                "sha": "e1750640a0237fe0f3805632bd20274d3f127aa8",
                "filename": "modules/ssh/src/test/java/org/apache/ignite/internal/IgniteProjectionStartStopRestartSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2ad974e6af0767f4b639564092f9ae18116616cf/modules/ssh/src/test/java/org/apache/ignite/internal/IgniteProjectionStartStopRestartSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2ad974e6af0767f4b639564092f9ae18116616cf/modules/ssh/src/test/java/org/apache/ignite/internal/IgniteProjectionStartStopRestartSelfTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ssh/src/test/java/org/apache/ignite/internal/IgniteProjectionStartStopRestartSelfTest.java?ref=2ad974e6af0767f4b639564092f9ae18116616cf",
                "patch": "@@ -145,15 +145,21 @@\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        if (!ignite.cluster().nodes().isEmpty()) {\n-            leftLatch = new CountDownLatch(ignite.cluster().nodes().size());\n+        boolean wasEmpty = true;\n \n-            ignite.cluster().stopNodes();\n+        if (ignite != null) {\n+            if (!ignite.cluster().nodes().isEmpty()) {\n+                leftLatch = new CountDownLatch(ignite.cluster().nodes().size());\n \n-            assert leftLatch.await(WAIT_TIMEOUT, MILLISECONDS);\n-        }\n+                ignite.cluster().stopNodes();\n+\n+                assert leftLatch.await(\n+                    WAIT_TIMEOUT,\n+                    MILLISECONDS);\n+            }\n \n-        boolean wasEmpty = ignite.cluster().nodes().isEmpty();\n+            wasEmpty = ignite.cluster().nodes().isEmpty();\n+        }\n \n         G.stop(true);\n \n@@ -163,7 +169,8 @@\n         joinedLatch = null;\n         leftLatch = null;\n \n-        assert wasEmpty : \"grid.isEmpty() returned false after all nodes were stopped [nodes=\" + ignite.cluster().nodes() + ']';\n+        assert wasEmpty : \"grid.isEmpty() returned false after all nodes were stopped \" +\n+            \"[nodes=\" + ignite.cluster().nodes() + ']';\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "NPE fix (in case cache creation failed)",
        "commit": "https://github.com/apache/ignite/commit/134f26e0d020bad9cc6dbff046bb2c38a939c018",
        "parent": "https://github.com/apache/ignite/commit/7a5024cb47938932739d8cc469c61ae05621ab04",
        "bug_id": "ignite_140",
        "file": [
            {
                "sha": "54580fdabce907053ba83efc940455a48aa17415",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/134f26e0d020bad9cc6dbff046bb2c38a939c018/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/134f26e0d020bad9cc6dbff046bb2c38a939c018/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=134f26e0d020bad9cc6dbff046bb2c38a939c018",
                "patch": "@@ -1258,7 +1258,7 @@ void addFuture(GridDhtPartitionsExchangeFuture exchFut) {\n                     boolean preloadFinished = true;\n \n                     for (GridCacheContext cacheCtx : cctx.cacheContexts()) {\n-                        preloadFinished &= cacheCtx.preloader().syncFuture().isDone();\n+                        preloadFinished &= cacheCtx.preloader() != null && cacheCtx.preloader().syncFuture().isDone();\n \n                         if (!preloadFinished)\n                             break;",
                "deletions": 1
            },
            {
                "sha": "f5ebc0d7dff2d4e363e628408bac3db523f79540",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/134f26e0d020bad9cc6dbff046bb2c38a939c018/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/134f26e0d020bad9cc6dbff046bb2c38a939c018/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=134f26e0d020bad9cc6dbff046bb2c38a939c018",
                "patch": "@@ -1721,7 +1721,8 @@ public void onExchangeDone(\n             GridCacheContext<?, ?> cacheCtx = cache.context();\n \n             if (F.eq(cacheCtx.startTopologyVersion(), topVer)) {\n-                cacheCtx.preloader().onInitialExchangeComplete(err);\n+                if (cacheCtx.preloader() != null)\n+                    cacheCtx.preloader().onInitialExchangeComplete(err);\n \n                 String masked = maskNull(cacheCtx.name());\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-db-x fix collectEntries assert error, Ignite Streamers suit, testReconnectClusterRestartMultinode  NPE",
        "commit": "https://github.com/apache/ignite/commit/f2f5dc99895d1a44ad2803e79b03985b8054b51a",
        "parent": "https://github.com/apache/ignite/commit/8dd2181f5f914677b18dd43ca24025f471c7f081",
        "bug_id": "ignite_141",
        "file": [
            {
                "sha": "cead53bfe83a5dc0bb1da4fecc4b4626ac5c5aa7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "blob_url": "https://github.com/apache/ignite/blob/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "raw_url": "https://github.com/apache/ignite/raw/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java?ref=f2f5dc99895d1a44ad2803e79b03985b8054b51a",
                "patch": "@@ -2367,12 +2367,12 @@ private synchronized void stop0(boolean cancel) {\n \n                     shutdownHook = null;\n \n-                    if (log.isDebugEnabled())\n+                    if (log != null && log.isDebugEnabled())\n                         log.debug(\"Shutdown hook is removed.\");\n                 }\n                 catch (IllegalStateException e) {\n                     // Shutdown is in progress...\n-                    if (log.isDebugEnabled())\n+                    if (log != null && log.isDebugEnabled())\n                         log.debug(\"Shutdown is in progress (ignoring): \" + e.getMessage());\n                 }\n \n@@ -2382,7 +2382,7 @@ private synchronized void stop0(boolean cancel) {\n             try {\n                 grid0.stop(cancel);\n \n-                if (log.isDebugEnabled())\n+                if (log != null && log.isDebugEnabled())\n                     log.debug(\"Grid instance stopped ok: \" + name);\n             }\n             catch (Throwable e) {",
                "deletions": 3
            },
            {
                "sha": "9ac9b93cf48e06c143f966237b9d2bd58cad51e7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEntry.java",
                "blob_url": "https://github.com/apache/ignite/blob/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEntry.java",
                "raw_url": "https://github.com/apache/ignite/raw/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEntry.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEntry.java?ref=f2f5dc99895d1a44ad2803e79b03985b8054b51a",
                "patch": "@@ -221,8 +221,8 @@ CacheContinuousQueryEntry forBackupQueue() {\n         if (!isFiltered())\n             return this;\n \n-        CacheContinuousQueryEntry e =\n-            new CacheContinuousQueryEntry(cacheId, null, null, null, null, keepBinary, part, updateCntr, null);\n+        CacheContinuousQueryEntry e = new CacheContinuousQueryEntry(\n+                cacheId, null, null, null, null, keepBinary, part, updateCntr, topVer);\n \n         e.flags = flags;\n ",
                "deletions": 2
            },
            {
                "sha": "30f02c84fa52c604a5f5ac0b4c8be9856c2ace69",
                "filename": "modules/kafka/src/test/java/org/apache/ignite/stream/kafka/TestKafkaBroker.java",
                "blob_url": "https://github.com/apache/ignite/blob/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/kafka/src/test/java/org/apache/ignite/stream/kafka/TestKafkaBroker.java",
                "raw_url": "https://github.com/apache/ignite/raw/f2f5dc99895d1a44ad2803e79b03985b8054b51a/modules/kafka/src/test/java/org/apache/ignite/stream/kafka/TestKafkaBroker.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/kafka/src/test/java/org/apache/ignite/stream/kafka/TestKafkaBroker.java?ref=f2f5dc99895d1a44ad2803e79b03985b8054b51a",
                "patch": "@@ -56,7 +56,7 @@\n     private static final String BROKER_HOST = \"localhost\";\n \n     /** Broker port. */\n-    private static final int BROKER_PORT = 9092;\n+    private static final int BROKER_PORT = 11092;\n \n     /** Kafka config. */\n     private KafkaConfig kafkaCfg;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11752:\nFixed sporadic NPE on node start, was caused by bug in GridDhtForceKeyResponse handling",
        "commit": "https://github.com/apache/ignite/commit/af66fb1b643dc911b042b2e101490611c7b645fd",
        "parent": "https://github.com/apache/ignite/commit/6a88642543bd8391c678455ff1705a1a953b0299",
        "bug_id": "ignite_142",
        "file": [
            {
                "sha": "e3dd3042f17b39231580bf0e5f1ea0f064e3358a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "blob_url": "https://github.com/apache/ignite/blob/af66fb1b643dc911b042b2e101490611c7b645fd/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "raw_url": "https://github.com/apache/ignite/raw/af66fb1b643dc911b042b2e101490611c7b645fd/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java?ref=af66fb1b643dc911b042b2e101490611c7b645fd",
                "patch": "@@ -2969,7 +2969,7 @@ else if (deletedUnlocked())\n                         cctx.cacheId(),\n                         key,\n                         val,\n-                        GridCacheOperation.CREATE,\n+                        val == null ? GridCacheOperation.DELETE : GridCacheOperation.CREATE,\n                         null,\n                         ver,\n                         expireTime,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": " IGNITE-3389 metadata result set throws NPE when closed - fixed",
        "commit": "https://github.com/apache/ignite/commit/9ecccc7c559342fcc6b67457f7456d6af2c084d8",
        "parent": "https://github.com/apache/ignite/commit/c075ab33254b7178c6e6b0a7b16801e787189ced",
        "bug_id": "ignite_143",
        "file": [
            {
                "sha": "7184b8dea1a115cb5b56b615cbbfb7a474dbba72",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 63,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java?ref=9ecccc7c559342fcc6b67457f7456d6af2c084d8",
                "patch": "@@ -17,24 +17,33 @@\n \n package org.apache.ignite.internal.jdbc2;\n \n-import org.apache.ignite.*;\n-import org.apache.ignite.cache.affinity.*;\n-import org.apache.ignite.cache.query.annotations.*;\n-import org.apache.ignite.configuration.*;\n-import org.apache.ignite.internal.util.typedef.*;\n-import org.apache.ignite.spi.discovery.tcp.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*;\n-import org.apache.ignite.testframework.junits.common.*;\n-\n-import java.io.*;\n-import java.sql.*;\n-import java.util.*;\n-\n-import static java.sql.Types.*;\n-import static org.apache.ignite.IgniteJdbcDriver.*;\n-import static org.apache.ignite.cache.CacheMode.*;\n-import static org.apache.ignite.cache.CacheWriteSynchronizationMode.*;\n+import java.io.Serializable;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.AffinityKey;\n+import org.apache.ignite.cache.query.annotations.QuerySqlField;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.ConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+import static java.sql.Types.INTEGER;\n+import static java.sql.Types.OTHER;\n+import static java.sql.Types.VARCHAR;\n+import static org.apache.ignite.IgniteJdbcDriver.CFG_URL_PREFIX;\n+import static org.apache.ignite.cache.CacheMode.PARTITIONED;\n+import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC;\n \n /**\n  * Metadata tests.\n@@ -276,6 +285,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(BASE_URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 18
            },
            {
                "sha": "72d93c97009cdeb481b20fb4b81c3bc1cdc216a8",
                "filename": "modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java?ref=9ecccc7c559342fcc6b67457f7456d6af2c084d8",
                "patch": "@@ -288,6 +288,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 0
            },
            {
                "sha": "69dddad3ad27859354e40aef9e8a63b7c9bb8f33",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "blob_url": "https://github.com/apache/ignite/blob/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "raw_url": "https://github.com/apache/ignite/raw/9ecccc7c559342fcc6b67457f7456d6af2c084d8/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java?ref=9ecccc7c559342fcc6b67457f7456d6af2c084d8",
                "patch": "@@ -182,7 +182,7 @@ else if (!finished) {\n      * If this result set is associated with locally executed query then query cursor will also closed.\n      */\n     void closeInternal() throws SQLException  {\n-        if (((JdbcConnection)stmt.getConnection()).nodeId() == null)\n+        if (((JdbcConnection)stmt.getConnection()).nodeId() == null && uuid != null)\n             JdbcQueryTask.remove(uuid);\n \n         closed = true;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11785 Fix for NPE: we should iterate over valid caches.",
        "commit": "https://github.com/apache/ignite/commit/306923f0adb7e6e55991192c49907ffcf8ce701c",
        "parent": "https://github.com/apache/ignite/commit/738caa1a9fe0f3d9c74bbfdf57f8aa759f715059",
        "bug_id": "ignite_144",
        "file": [
            {
                "sha": "42be691cdcad94783a72d6720a054686f98c3cbe",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/306923f0adb7e6e55991192c49907ffcf8ce701c/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/306923f0adb7e6e55991192c49907ffcf8ce701c/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java?ref=306923f0adb7e6e55991192c49907ffcf8ce701c",
                "patch": "@@ -197,8 +197,8 @@ public GridQueryProcessor(GridKernalContext ctx) throws IgniteCheckedException {\n         // Schedule queries detail metrics eviction.\n         qryDetailMetricsEvictTask = ctx.timeout().schedule(new Runnable() {\n             @Override public void run() {\n-                for (IgniteCacheProxy cache : ctx.cache().jcaches())\n-                    cache.context().queries().evictDetailMetrics();\n+                for (GridCacheContext ctxs : ctx.cache().context().cacheContexts())\n+                    ctxs.queries().evictDetailMetrics();\n             }\n         }, QRY_DETAIL_METRICS_EVICTION_FREQ, QRY_DETAIL_METRICS_EVICTION_FREQ);\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4487 Fixed NPE on query execution during concurrent cache destroy. This closes #1388",
        "commit": "https://github.com/apache/ignite/commit/177d7f49934e24e85472a8e44a641c4b57a25914",
        "parent": "https://github.com/apache/ignite/commit/7b711a3248b0dafdcea195766b50be4d44656f7f",
        "bug_id": "ignite_145",
        "file": [
            {
                "sha": "3ecacf840dd453994ef4c51c5fb03fdb9337a1dd",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/177d7f49934e24e85472a8e44a641c4b57a25914/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/177d7f49934e24e85472a8e44a641c4b57a25914/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java?ref=177d7f49934e24e85472a8e44a641c4b57a25914",
                "patch": "@@ -34,6 +34,7 @@\n import org.apache.ignite.cache.query.QueryMetrics;\n import org.apache.ignite.cluster.ClusterGroup;\n import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.cluster.ClusterTopologyException;\n import org.apache.ignite.internal.IgniteClientDisconnectedCheckedException;\n import org.apache.ignite.internal.IgniteInternalFuture;\n import org.apache.ignite.internal.cluster.ClusterGroupEmptyCheckedException;\n@@ -666,6 +667,13 @@ private ScanQueryFallbackClosableIterator(int part, GridCacheQueryAdapter qry,\n \n             nodes = fallbacks(cctx.discovery().topologyVersionEx());\n \n+            if (F.isEmpty(nodes))\n+                throw new ClusterTopologyException(\"Failed to execute the query \" +\n+                    \"(all affinity nodes left the grid) [cache=\" + cctx.name() +\n+                    \", qry=\" + qry +\n+                    \", startTopVer=\" + cctx.versions().last().topologyVersion() +\n+                    \", curTopVer=\" + qryMgr.queryTopologyVersion().topologyVersion() + ']');\n+\n             init();\n         }\n ",
                "deletions": 0
            },
            {
                "sha": "dc104ff229fe5bf69c176d53bd3326c3a916504c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/IgniteCacheQueryCacheDestroySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/177d7f49934e24e85472a8e44a641c4b57a25914/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/IgniteCacheQueryCacheDestroySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/177d7f49934e24e85472a8e44a641c4b57a25914/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/IgniteCacheQueryCacheDestroySelfTest.java",
                "status": "added",
                "changes": 142,
                "additions": 142,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/IgniteCacheQueryCacheDestroySelfTest.java?ref=177d7f49934e24e85472a8e44a641c4b57a25914",
                "patch": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.cache.Cache;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.CacheAtomicityMode;\n+import org.apache.ignite.cache.CacheMemoryMode;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cache.CacheRebalanceMode;\n+import org.apache.ignite.cache.CacheWriteSynchronizationMode;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.cache.query.ScanQuery;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.util.typedef.X;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * The test for the destruction of the cache during the execution of the query\n+ */\n+public class IgniteCacheQueryCacheDestroySelfTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final String CACHE_NAME = \"cache\";\n+\n+    /** */\n+    public static final int GRID_CNT = 3;\n+\n+    /**\n+     * The main test code.\n+     */\n+    public void testQueue() throws Throwable {\n+        startGridsMultiThreaded(GRID_CNT);\n+\n+        Ignite ig = ignite(0);\n+\n+        ig.getOrCreateCache(cacheConfiguration());\n+\n+        final AtomicBoolean stop = new AtomicBoolean();\n+        final AtomicReference<Exception> npe = new AtomicReference<>();\n+\n+        IgniteInternalFuture<Long> fut = GridTestUtils.runMultiThreadedAsync(new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                try {\n+                    while (!stop.get())\n+                        runQuery();\n+                }\n+                catch (Exception e) {\n+                    NullPointerException npe0 = X.cause(e, NullPointerException.class);\n+\n+                    if (npe0 != null)\n+                        npe.compareAndSet(null, npe0);\n+                    else\n+                        info(\"Expected exception: \" + e);\n+                }\n+\n+                return null;\n+            }\n+        }, 6, \"query-runner\");\n+\n+        U.sleep(500);\n+\n+        ig.destroyCache(CACHE_NAME);\n+\n+        stop.set(true);\n+\n+        fut.get();\n+\n+        assertNull(npe.get());\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    private void runQuery() throws Exception {\n+        ScanQuery<String, String> scanQuery = new ScanQuery<String, String>()\n+            .setLocal(true)\n+            .setFilter(new IgniteBiPredicate<String, String>() {\n+                @Override public boolean apply(String key, String p) {\n+                    return key != null && key.isEmpty();\n+                }\n+            });\n+\n+        Ignite ignite = ignite(ThreadLocalRandom.current().nextInt(GRID_CNT));\n+\n+        IgniteCache<String, String> example = ignite.cache(CACHE_NAME);\n+\n+        for (int partition : ignite.affinity(CACHE_NAME).primaryPartitions(ignite.cluster().localNode())) {\n+            scanQuery.setPartition(partition);\n+\n+            try (QueryCursor cursor = example.query(scanQuery)) {\n+                for (Object p : cursor) {\n+                    String value = (String) ((Cache.Entry)p).getValue();\n+\n+                    assertNotNull(value);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @return Cache configuration for this test.\n+     */\n+    private CacheConfiguration cacheConfiguration() {\n+        CacheConfiguration cfg = new CacheConfiguration(CACHE_NAME);\n+\n+        cfg.setAtomicityMode(CacheAtomicityMode.ATOMIC)\n+            .setCacheMode(CacheMode.PARTITIONED)\n+            .setMemoryMode(CacheMemoryMode.OFFHEAP_TIERED)\n+            .setRebalanceMode(CacheRebalanceMode.SYNC)\n+            .setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC)\n+            .setRebalanceThrottle(100)\n+            .setRebalanceBatchSize(2 * 1024 * 1024)\n+            .setBackups(1)\n+            .setEagerTtl(false);\n+\n+        return cfg;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "b5e40782a81096737b064f8c680c3e3e7ac2da27",
                "filename": "modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/177d7f49934e24e85472a8e44a641c4b57a25914/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/177d7f49934e24e85472a8e44a641c4b57a25914/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/testsuites/IgniteCacheQuerySelfTestSuite.java?ref=177d7f49934e24e85472a8e44a641c4b57a25914",
                "patch": "@@ -92,6 +92,7 @@\n import org.apache.ignite.internal.processors.cache.local.IgniteCacheLocalQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.query.GridCacheQueryTransformerSelfTest;\n import org.apache.ignite.internal.processors.cache.query.GridCacheSwapScanQuerySelfTest;\n+import org.apache.ignite.internal.processors.cache.query.IgniteCacheQueryCacheDestroySelfTest;\n import org.apache.ignite.internal.processors.cache.query.IndexingSpiQuerySelfTest;\n import org.apache.ignite.internal.processors.cache.query.IndexingSpiQueryTxSelfTest;\n import org.apache.ignite.internal.processors.query.IgniteSqlSchemaIndexingTest;\n@@ -238,6 +239,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(CacheQueryNewClientSelfTest.class);\n         suite.addTestSuite(CacheOffheapBatchIndexingSingleTypeTest.class);\n         suite.addTestSuite(CacheSqlQueryValueCopySelfTest.class);\n+        suite.addTestSuite(IgniteCacheQueryCacheDestroySelfTest.class);\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": " IGNITE-3389 metadata result set throws NPE when closed - fixed",
        "commit": "https://github.com/apache/ignite/commit/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1",
        "parent": "https://github.com/apache/ignite/commit/6c5218f4d67c8e247f59dbe8deb58b51db2954a2",
        "bug_id": "ignite_146",
        "file": [
            {
                "sha": "7184b8dea1a115cb5b56b615cbbfb7a474dbba72",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 63,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java?ref=7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1",
                "patch": "@@ -17,24 +17,33 @@\n \n package org.apache.ignite.internal.jdbc2;\n \n-import org.apache.ignite.*;\n-import org.apache.ignite.cache.affinity.*;\n-import org.apache.ignite.cache.query.annotations.*;\n-import org.apache.ignite.configuration.*;\n-import org.apache.ignite.internal.util.typedef.*;\n-import org.apache.ignite.spi.discovery.tcp.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*;\n-import org.apache.ignite.testframework.junits.common.*;\n-\n-import java.io.*;\n-import java.sql.*;\n-import java.util.*;\n-\n-import static java.sql.Types.*;\n-import static org.apache.ignite.IgniteJdbcDriver.*;\n-import static org.apache.ignite.cache.CacheMode.*;\n-import static org.apache.ignite.cache.CacheWriteSynchronizationMode.*;\n+import java.io.Serializable;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.AffinityKey;\n+import org.apache.ignite.cache.query.annotations.QuerySqlField;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.ConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+import static java.sql.Types.INTEGER;\n+import static java.sql.Types.OTHER;\n+import static java.sql.Types.VARCHAR;\n+import static org.apache.ignite.IgniteJdbcDriver.CFG_URL_PREFIX;\n+import static org.apache.ignite.cache.CacheMode.PARTITIONED;\n+import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC;\n \n /**\n  * Metadata tests.\n@@ -276,6 +285,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(BASE_URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 18
            },
            {
                "sha": "72d93c97009cdeb481b20fb4b81c3bc1cdc216a8",
                "filename": "modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java?ref=7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1",
                "patch": "@@ -288,6 +288,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 0
            },
            {
                "sha": "69dddad3ad27859354e40aef9e8a63b7c9bb8f33",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "blob_url": "https://github.com/apache/ignite/blob/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "raw_url": "https://github.com/apache/ignite/raw/7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java?ref=7fb03c7ca0e4f64ff1629404f0b34d3d7a6e2bf1",
                "patch": "@@ -182,7 +182,7 @@ else if (!finished) {\n      * If this result set is associated with locally executed query then query cursor will also closed.\n      */\n     void closeInternal() throws SQLException  {\n-        if (((JdbcConnection)stmt.getConnection()).nodeId() == null)\n+        if (((JdbcConnection)stmt.getConnection()).nodeId() == null && uuid != null)\n             JdbcQueryTask.remove(uuid);\n \n         closed = true;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": " IGNITE-3389 metadata result set throws NPE when closed - fixed",
        "commit": "https://github.com/apache/ignite/commit/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8",
        "parent": "https://github.com/apache/ignite/commit/68891e89dd0e0f19321d6a4d45ae7372279b8b08",
        "bug_id": "ignite_147",
        "file": [
            {
                "sha": "7184b8dea1a115cb5b56b615cbbfb7a474dbba72",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 63,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/jdbc2/JdbcMetadataSelfTest.java?ref=ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8",
                "patch": "@@ -17,24 +17,33 @@\n \n package org.apache.ignite.internal.jdbc2;\n \n-import org.apache.ignite.*;\n-import org.apache.ignite.cache.affinity.*;\n-import org.apache.ignite.cache.query.annotations.*;\n-import org.apache.ignite.configuration.*;\n-import org.apache.ignite.internal.util.typedef.*;\n-import org.apache.ignite.spi.discovery.tcp.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.*;\n-import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*;\n-import org.apache.ignite.testframework.junits.common.*;\n-\n-import java.io.*;\n-import java.sql.*;\n-import java.util.*;\n-\n-import static java.sql.Types.*;\n-import static org.apache.ignite.IgniteJdbcDriver.*;\n-import static org.apache.ignite.cache.CacheMode.*;\n-import static org.apache.ignite.cache.CacheWriteSynchronizationMode.*;\n+import java.io.Serializable;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.Statement;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.affinity.AffinityKey;\n+import org.apache.ignite.cache.query.annotations.QuerySqlField;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.ConnectorConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.F;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+import static java.sql.Types.INTEGER;\n+import static java.sql.Types.OTHER;\n+import static java.sql.Types.VARCHAR;\n+import static org.apache.ignite.IgniteJdbcDriver.CFG_URL_PREFIX;\n+import static org.apache.ignite.cache.CacheMode.PARTITIONED;\n+import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC;\n \n /**\n  * Metadata tests.\n@@ -276,6 +285,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(BASE_URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 18
            },
            {
                "sha": "72d93c97009cdeb481b20fb4b81c3bc1cdc216a8",
                "filename": "modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/jdbc/JdbcMetadataSelfTest.java?ref=ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8",
                "patch": "@@ -288,6 +288,24 @@ public void testGetColumns() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testMetadataResultSetClose() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(URL);\n+             ResultSet tbls = conn.getMetaData().getTables(null, null, \"%\", null)) {\n+            int colCnt = tbls.getMetaData().getColumnCount();\n+\n+            while (tbls.next()) {\n+                for (int i = 0; i < colCnt; i++)\n+                    tbls.getObject(i + 1);\n+            }\n+        }\n+        catch (Exception e) {\n+            fail();\n+        }\n+    }\n+\n     /**\n      * Person.\n      */",
                "deletions": 0
            },
            {
                "sha": "69dddad3ad27859354e40aef9e8a63b7c9bb8f33",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "blob_url": "https://github.com/apache/ignite/blob/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "raw_url": "https://github.com/apache/ignite/raw/ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java?ref=ca5c8d8051e5bfb9c17e34738e2a4555e2b8c3f8",
                "patch": "@@ -182,7 +182,7 @@ else if (!finished) {\n      * If this result set is associated with locally executed query then query cursor will also closed.\n      */\n     void closeInternal() throws SQLException  {\n-        if (((JdbcConnection)stmt.getConnection()).nodeId() == null)\n+        if (((JdbcConnection)stmt.getConnection()).nodeId() == null && uuid != null)\n             JdbcQueryTask.remove(uuid);\n \n         closed = true;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1088 Implemented store for multi jvm tests (fixed NPE)",
        "commit": "https://github.com/apache/ignite/commit/d31a47696079755189f3f3f990e7341740240aa4",
        "parent": "https://github.com/apache/ignite/commit/8e09f12a535c97b416de25f627bdc1992810f6df",
        "bug_id": "ignite_148",
        "file": [
            {
                "sha": "d58e560fed72442cad2cf1e2b3b6892c53a42f50",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/d31a47696079755189f3f3f990e7341740240aa4/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/d31a47696079755189f3f3f990e7341740240aa4/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java?ref=d31a47696079755189f3f3f990e7341740240aa4",
                "patch": "@@ -220,16 +220,18 @@ void initStoreStrategy() throws IgniteCheckedException {\n     protected CacheConfiguration cacheConfiguration(String gridName) throws Exception {\n         CacheConfiguration cfg = defaultCacheConfiguration();\n \n-        Factory<? extends CacheStore<Object, Object>> storeFactory = storeStgy.getStoreFactory();\n+        if (storeStgy != null) {\n+            Factory<? extends CacheStore<Object, Object>> storeFactory = storeStgy.getStoreFactory();\n \n-        CacheStore<?, ?> store = storeFactory.create();\n+            CacheStore<?, ?> store = storeFactory.create();\n \n-        if (store != null) {\n-            cfg.setCacheStoreFactory(storeFactory);\n-            cfg.setReadThrough(true);\n-            cfg.setWriteThrough(true);\n-            cfg.setLoadPreviousValue(true);\n-            storeStgy.updateCacheConfiguration(cfg);\n+            if (store != null) {\n+                cfg.setCacheStoreFactory(storeFactory);\n+                cfg.setReadThrough(true);\n+                cfg.setWriteThrough(true);\n+                cfg.setLoadPreviousValue(true);\n+                storeStgy.updateCacheConfiguration(cfg);\n+            }\n         }\n \n         cfg.setSwapEnabled(swapEnabled());",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-12118 Stabilize tests in 8.0.4.ea1 after master merge\n-fixing NPE in exchange future",
        "commit": "https://github.com/apache/ignite/commit/c812cc843e3fdfbc17a99920247320af997b3aa4",
        "parent": "https://github.com/apache/ignite/commit/7808492b7dee12bdd0c3922e1760ffa364183bc2",
        "bug_id": "ignite_149",
        "file": [
            {
                "sha": "ac789001c64aad22ab6405bf1a047150f7ee1e5a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/c812cc843e3fdfbc17a99920247320af997b3aa4/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/c812cc843e3fdfbc17a99920247320af997b3aa4/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=c812cc843e3fdfbc17a99920247320af997b3aa4",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.ignite.internal.util.GridUnsafe;\n import org.apache.ignite.internal.util.OffheapReadWriteLock;\n import org.apache.ignite.internal.util.offheap.GridOffHeapOutOfMemoryException;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n import org.apache.ignite.lifecycle.LifecycleAware;\n \n import static org.apache.ignite.internal.util.GridUnsafe.wrapPointer;\n@@ -254,7 +255,7 @@ public PageMemoryNoStoreImpl(\n         if (relPtr == INVALID_REL_PTR)\n             throw new OutOfMemoryException();\n \n-        assert (relPtr & ~PageIdUtils.PAGE_IDX_MASK) == 0;\n+        assert (relPtr & ~PageIdUtils.PAGE_IDX_MASK) == 0 : U.hexLong(relPtr & ~PageIdUtils.PAGE_IDX_MASK);\n \n         // Assign page ID according to flags and partition ID.\n         long pageId = PageIdUtils.pageId(partId, flags, (int)relPtr);",
                "deletions": 1
            },
            {
                "sha": "5bd12d021754ad316c4a658b7ec4dd0e52b29214",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/c812cc843e3fdfbc17a99920247320af997b3aa4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/c812cc843e3fdfbc17a99920247320af997b3aa4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=c812cc843e3fdfbc17a99920247320af997b3aa4",
                "patch": "@@ -1357,7 +1357,7 @@ private void sendPartitions(ClusterNode oldestNode) {\n      */\n     private StartSnapshotOperationAckDiscoveryMessage getSnapshotOperationMessage() {\n         // If it's a snapshot operation request, synchronously wait for backup start.\n-        if (discoEvt.type() == EVT_DISCOVERY_CUSTOM_EVT) {\n+        if (discoEvt != null && discoEvt.type() == EVT_DISCOVERY_CUSTOM_EVT) {\n             DiscoveryCustomMessage customMsg = ((DiscoveryCustomEvent)discoEvt).customMessage();\n \n             if (customMsg instanceof StartSnapshotOperationAckDiscoveryMessage)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-709 Fix NPE",
        "commit": "https://github.com/apache/ignite/commit/d59a712ad75c306ac43f37a9a77401f80821d3a5",
        "parent": "https://github.com/apache/ignite/commit/12aa8ab7fb107f5fa8067eb36cfc1aee930dbae9",
        "bug_id": "ignite_150",
        "file": [
            {
                "sha": "71a2a66fecc4f8cb5c0a649df9520a35538fb204",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/d59a712ad75c306ac43f37a9a77401f80821d3a5/modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/d59a712ad75c306ac43f37a9a77401f80821d3a5/modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java?ref=d59a712ad75c306ac43f37a9a77401f80821d3a5",
                "patch": "@@ -92,6 +92,9 @@\n     /** Number of retries using to send messages. */\n     private int retryCnt = 3;\n \n+    /** */\n+    private volatile boolean processorStopped;\n+\n     /**\n      * @param ctx Kernal context.\n      */\n@@ -256,6 +259,11 @@ public GridContinuousProcessor(GridKernalContext ctx) {\n             log.debug(\"Continuous processor started.\");\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public void onKernalStop(boolean cancel) {\n+        processorStopped = true;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void stop(boolean cancel) throws IgniteCheckedException {\n         if (ctx.config().isDaemon())\n@@ -551,6 +559,9 @@ public void addNotification(UUID nodeId,\n \n         assert !nodeId.equals(ctx.localNodeId());\n \n+        if (processorStopped)\n+            return;\n+\n         RemoteRoutineInfo info = rmtInfos.get(routineId);\n \n         if (info != null) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-831 Fix NPE",
        "commit": "https://github.com/apache/ignite/commit/d0dac7de1e573ae3870e20adfe18abf61caa84ec",
        "parent": "https://github.com/apache/ignite/commit/5ffaa4cb6f35ead8fc94c563d52e98cc5241acbc",
        "bug_id": "ignite_151",
        "file": [
            {
                "sha": "8051172e63104e8a74bb6602b01d3cd3b92e942c",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "status": "modified",
                "changes": 28,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=d0dac7de1e573ae3870e20adfe18abf61caa84ec",
                "patch": "@@ -1766,7 +1766,7 @@ private void notifyDiscovery(int type, long topVer, TcpDiscoveryNode node) {\n                 log.debug(\"Discovery notification [node=\" + node + \", spiState=\" + spiState +\n                     \", type=\" + U.gridEventName(type) + \", topVer=\" + topVer + ']');\n \n-            Collection<ClusterNode> top = F.<TcpDiscoveryNode, ClusterNode>upcast(ring.visibleNodes());\n+            Collection<ClusterNode> top = F.upcast(ring.visibleNodes());\n \n             Map<Long, Collection<ClusterNode>> hist = updateTopologyHistory(topVer, top);\n \n@@ -4522,20 +4522,22 @@ private void notifyDiscoveryListener(TcpDiscoveryCustomEventMessage msg) {\n \n                 TcpDiscoveryNode node = ring.node(msg.creatorNodeId());\n \n-                try {\n-                    Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n+                if (node != null) {\n+                    try {\n+                        Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n \n-                    lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n-                        msg.topologyVersion(),\n-                        node,\n-                        snapshot,\n-                        hist,\n-                        msgObj);\n+                        lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n+                            msg.topologyVersion(),\n+                            node,\n+                            snapshot,\n+                            hist,\n+                            msgObj);\n \n-                    msg.messageBytes(marsh.marshal(msgObj));\n-                }\n-                catch (IgniteCheckedException e) {\n-                    U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                        msg.messageBytes(marsh.marshal(msgObj));\n+                    }\n+                    catch (IgniteCheckedException e) {\n+                        U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                    }\n                 }\n             }\n         }",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-858 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/396f2f31207e9fa5133e2a669d50f3d998fae2f3",
        "parent": "https://github.com/apache/ignite/commit/c4bc92974bace5e4cdb3ac9dc80790193e46d203",
        "bug_id": "ignite_152",
        "file": [
            {
                "sha": "61ea0a9b4d2516bb7f07280c431ce7b25bceaeed",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/396f2f31207e9fa5133e2a669d50f3d998fae2f3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/396f2f31207e9fa5133e2a669d50f3d998fae2f3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=396f2f31207e9fa5133e2a669d50f3d998fae2f3",
                "patch": "@@ -745,6 +745,9 @@ else if (log.isDebugEnabled())\n             int skipped = 0;\n \n             for (GridDhtPartitionsExchangeFuture fut : exchFuts0.values()) {\n+                if (exchFut.exchangeId().topologyVersion().compareTo(fut.exchangeId().topologyVersion()) < 0)\n+                    continue;\n+\n                 skipped++;\n \n                 if (skipped == EXCH_FUT_CLEANUP_HISTORY_SIZE) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-db-x No-op IgniteWriteAheadLogManager to avoid NPEs.",
        "commit": "https://github.com/apache/ignite/commit/5e1ab1b2c42f5630db1c897e8c343af156e26e6b",
        "parent": "https://github.com/apache/ignite/commit/9350e21d47de9b253e0a6023b0db615a0643ccaa",
        "bug_id": "ignite_153",
        "file": [
            {
                "sha": "248bf8ce8a0cc99590dec02052cb82ed7fc021d0",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/IgniteWriteAheadLogNoopManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/5e1ab1b2c42f5630db1c897e8c343af156e26e6b/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/IgniteWriteAheadLogNoopManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/5e1ab1b2c42f5630db1c897e8c343af156e26e6b/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/IgniteWriteAheadLogNoopManager.java",
                "status": "added",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/wal/IgniteWriteAheadLogNoopManager.java?ref=5e1ab1b2c42f5630db1c897e8c343af156e26e6b",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.pagemem.wal;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.pagemem.wal.record.WALRecord;\n+import org.apache.ignite.internal.processors.cache.GridCacheSharedManagerAdapter;\n+\n+/**\n+ *\n+ */\n+public class IgniteWriteAheadLogNoopManager extends GridCacheSharedManagerAdapter\n+    implements IgniteWriteAheadLogManager {\n+    /** {@inheritDoc} */\n+    @Override public void resumeLogging() throws IgniteCheckedException {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public WALPointer log(WALRecord entry) throws IgniteCheckedException, StorageException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void fsync(WALPointer ptr) throws IgniteCheckedException, StorageException {\n+        // No-op.\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public WALIterator replay(WALPointer start) throws IgniteCheckedException, StorageException {\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public int truncate(WALPointer ptr) throws IgniteException, StorageException {\n+        return 0;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "9c84abc67336cedcb5f094c232f242b57db9487d",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/5e1ab1b2c42f5630db1c897e8c343af156e26e6b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/5e1ab1b2c42f5630db1c897e8c343af156e26e6b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=5e1ab1b2c42f5630db1c897e8c343af156e26e6b",
                "patch": "@@ -74,6 +74,7 @@\n import org.apache.ignite.internal.managers.discovery.DiscoveryCustomMessage;\n import org.apache.ignite.internal.pagemem.store.IgnitePageStoreManager;\n import org.apache.ignite.internal.pagemem.wal.IgniteWriteAheadLogManager;\n+import org.apache.ignite.internal.pagemem.wal.IgniteWriteAheadLogNoopManager;\n import org.apache.ignite.internal.processors.GridProcessorAdapter;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.cache.binary.CacheObjectBinaryProcessorImpl;\n@@ -1835,6 +1836,9 @@ private GridCacheSharedContext createSharedContext(GridKernalContext kernalCtx,\n         IgnitePageStoreManager pageStoreMgr = ctx.plugins().createComponent(IgnitePageStoreManager.class);\n         IgniteWriteAheadLogManager walMgr = ctx.plugins().createComponent(IgniteWriteAheadLogManager.class);\n \n+        if (walMgr == null)\n+            walMgr = new IgniteWriteAheadLogNoopManager();\n+\n         GridCacheIoManager ioMgr = new GridCacheIoManager();\n         CacheAffinitySharedManager topMgr = new CacheAffinitySharedManager();\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# Bug fix: avoid NPE.",
        "commit": "https://github.com/apache/ignite/commit/ee94aca15694f6fb69fca24897f4f081f5619254",
        "parent": "https://github.com/apache/ignite/commit/cec2bfe05f868af50f9d987282020ac32eb9344b",
        "bug_id": "ignite_154",
        "file": [
            {
                "sha": "5f2de5fe365718da50fd33b35f4dfbd330b4421f",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpClientDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/ee94aca15694f6fb69fca24897f4f081f5619254/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpClientDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/ee94aca15694f6fb69fca24897f4f081f5619254/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpClientDiscoverySpi.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpClientDiscoverySpi.java?ref=ee94aca15694f6fb69fca24897f4f081f5619254",
                "patch": "@@ -332,7 +332,7 @@ public void setDisconnectCheckInterval(long disconnectCheckInt) {\n \n     /** {@inheritDoc} */\n     @Override public Collection<Object> injectables() {\n-        return Arrays.<Object>asList(ipFinder);\n+        return F.<Object>asList(ipFinder);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#ignite-758: Fix NPE.",
        "commit": "https://github.com/apache/ignite/commit/1550bf86e4e0ed6075109d8481cdfa21ace85c21",
        "parent": "https://github.com/apache/ignite/commit/c4b870882bfdf5d7a451f5b1a86d767a5f76f669",
        "bug_id": "ignite_155",
        "file": [
            {
                "sha": "a9201d1ab25eee0956feb6c5a7efcddd75051224",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/1550bf86e4e0ed6075109d8481cdfa21ace85c21/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/1550bf86e4e0ed6075109d8481cdfa21ace85c21/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java?ref=1550bf86e4e0ed6075109d8481cdfa21ace85c21",
                "patch": "@@ -3675,7 +3675,8 @@ void globalLoadCache(@Nullable IgniteBiPredicate<K, V> p, @Nullable Object... ar\n     private Iterator<Cache.Entry<K, V>> localIteratorHonorExpirePolicy(final CacheOperationContext opCtx) {\n         return F.iterator(iterator(),\n             new IgniteClosure<Cache.Entry<K, V>, Cache.Entry<K, V>>() {\n-                private IgniteCacheExpiryPolicy expiryPlc = ctx.cache().expiryPolicy(opCtx.expiry());\n+                private IgniteCacheExpiryPolicy expiryPlc =\n+                        ctx.cache().expiryPolicy(opCtx != null ? opCtx.expiry() : null);\n \n                 @Override public Cache.Entry<K, V> apply(Cache.Entry<K, V> lazyEntry) {\n                     CacheOperationContext prev = ctx.gate().enter(opCtx);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1.5 Avoid NPE in dumpDebugInfo.",
        "commit": "https://github.com/apache/ignite/commit/5f26538d7ac7838500259e9213abf26db50da9d9",
        "parent": "https://github.com/apache/ignite/commit/7f35bc6d13cd609e63b8e59b1a28d30f402bd44f",
        "bug_id": "ignite_156",
        "file": [
            {
                "sha": "6e0be10665c54a1b794060e25dbf6687d9438be9",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "blob_url": "https://github.com/apache/ignite/blob/5f26538d7ac7838500259e9213abf26db50da9d9/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "raw_url": "https://github.com/apache/ignite/raw/5f26538d7ac7838500259e9213abf26db50da9d9/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "status": "modified",
                "changes": 35,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=5f26538d7ac7838500259e9213abf26db50da9d9",
                "patch": "@@ -3245,26 +3245,33 @@ private boolean skipDaemon(GridComponent comp) {\n \n     /** {@inheritDoc} */\n     public void dumpDebugInfo() {\n-        GridKernalContextImpl ctx = this.ctx;\n+        try {\n+            GridKernalContextImpl ctx = this.ctx;\n+\n+            GridDiscoveryManager discoMrg = ctx != null ? ctx.discovery() : null;\n \n-        if (ctx != null) {\n-            boolean client = ctx.clientNode();\n+            ClusterNode locNode = discoMrg != null ? discoMrg.localNode() : null;\n \n-            ClusterNode locNode = ctx.discovery().localNode();\n+            if (ctx != null && discoMrg != null && locNode != null) {\n+                boolean client = ctx.clientNode();\n \n-            UUID routerId = locNode instanceof TcpDiscoveryNode ? ((TcpDiscoveryNode)locNode).clientRouterNodeId() : null;\n+                UUID routerId = locNode instanceof TcpDiscoveryNode ? ((TcpDiscoveryNode)locNode).clientRouterNodeId() : null;\n \n-            U.warn(log, \"Dumping debug info for node [id=\" + locNode.id() +\n-                \", name=\" + ctx.gridName() +\n-                \", order=\" + locNode.order() +\n-                \", topVer=\" + ctx.discovery().topologyVersion() +\n-                \", client=\" + client +\n-                (client && routerId != null ? \", routerId=\" + routerId : \"\") + ']');\n+                U.warn(log, \"Dumping debug info for node [id=\" + locNode.id() +\n+                    \", name=\" + ctx.gridName() +\n+                    \", order=\" + locNode.order() +\n+                    \", topVer=\" + discoMrg.topologyVersion() +\n+                    \", client=\" + client +\n+                    (client && routerId != null ? \", routerId=\" + routerId : \"\") + ']');\n \n-            ctx.cache().context().exchange().dumpDebugInfo();\n+                ctx.cache().context().exchange().dumpDebugInfo();\n+            }\n+            else\n+                U.warn(log, \"Dumping debug info for node, context is not initialized [name=\" + gridName + ']');\n+        }\n+        catch (Exception e) {\n+            U.error(log, \"Failed to dump debug info for node: \" + e, e);\n         }\n-        else\n-            U.warn(log, \"Dumping debug info for node, context is not initialized [name=\" + gridName + ']');\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-379 Fix NPE.",
        "commit": "https://github.com/apache/ignite/commit/6d0d4ed5022cba0332d1450a2e233a59f05162a8",
        "parent": "https://github.com/apache/ignite/commit/5aabf2237b0813b381b2ed4c59bee5329fd95c75",
        "bug_id": "ignite_157",
        "file": [
            {
                "sha": "5ac0d3921a37874e1f3f345c146492d8c8de4652",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/6d0d4ed5022cba0332d1450a2e233a59f05162a8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/6d0d4ed5022cba0332d1450a2e233a59f05162a8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java?ref=6d0d4ed5022cba0332d1450a2e233a59f05162a8",
                "patch": "@@ -786,11 +786,11 @@ private void handleClassCastException(ClassCastException e) throws IgniteChecked\n      * Clears session holder.\n      */\n     void endSession(@Nullable IgniteInternalTx tx) {\n-        if (sesHolder != null)\n-            sesHolder.set(null);\n-\n         if (tx == null)\n             store.sessionEnd(true);\n+\n+        if (sesHolder != null)\n+            sesHolder.set(null);\n     }\n \n     /**\n@@ -800,6 +800,8 @@ void initSession(@Nullable IgniteInternalTx tx) {\n         if (sesHolder == null)\n             return;\n \n+        assert sesHolder.get() == null;\n+\n         SessionData ses;\n \n         if (tx != null) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1.5 Fixed NPE in GridPartitionedSingleGetFuture.",
        "commit": "https://github.com/apache/ignite/commit/1224658fe0d4b572b9980fa5de65bbb043646377",
        "parent": "https://github.com/apache/ignite/commit/68d317952485dd0a4e09844a9cdbb3a0f23ae399",
        "bug_id": "ignite_158",
        "file": [
            {
                "sha": "f3f225a1d0704e68f55f41c7abee5d0cc696a220",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/1224658fe0d4b572b9980fa5de65bbb043646377/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/1224658fe0d4b572b9980fa5de65bbb043646377/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedSingleGetFuture.java?ref=1224658fe0d4b572b9980fa5de65bbb043646377",
                "patch": "@@ -416,7 +416,8 @@ private void map(AffinityTopologyVersion topVer) {\n      * @param res Result.\n      */\n     public void onResult(UUID nodeId, GridNearSingleGetResponse res) {\n-        if (!processResponse(nodeId) || !checkError(res.error(), res.invalidPartitions(), res.topologyVersion()))\n+        if (!processResponse(nodeId) ||\n+            !checkError(res.error(), res.invalidPartitions(), res.topologyVersion(), nodeId))\n             return;\n \n         Message res0 = res.result();\n@@ -451,7 +452,7 @@ public void onResult(UUID nodeId, GridNearSingleGetResponse res) {\n      */\n     @Override public void onResult(UUID nodeId, GridNearGetResponse res) {\n         if (!processResponse(nodeId) ||\n-            !checkError(res.error(), !F.isEmpty(res.invalidPartitions()), res.topologyVersion()))\n+            !checkError(res.error(), !F.isEmpty(res.invalidPartitions()), res.topologyVersion(), nodeId))\n             return;\n \n         Collection<GridCacheEntryInfo> infos = res.entries();\n@@ -481,10 +482,13 @@ private boolean processResponse(UUID nodeId) {\n      * @param err Error.\n      * @param invalidParts Invalid partitions error flag.\n      * @param rmtTopVer Received topology version.\n+     * @param nodeId Node ID.\n+     * @return {@code True} if should process received response.\n      */\n     private boolean checkError(@Nullable IgniteCheckedException err,\n         boolean invalidParts,\n-        AffinityTopologyVersion rmtTopVer) {\n+        AffinityTopologyVersion rmtTopVer,\n+        UUID nodeId) {\n         if (err != null) {\n             onDone(err);\n \n@@ -499,7 +503,7 @@ private boolean checkError(@Nullable IgniteCheckedException err,\n                 onDone(new IgniteCheckedException(\"Failed to process invalid partitions response (remote node reported \" +\n                     \"invalid partitions but remote topology version does not differ from local) \" +\n                     \"[topVer=\" + topVer + \", rmtTopVer=\" + rmtTopVer + \", part=\" + cctx.affinity().partition(key) +\n-                    \", nodeId=\" + node.id() + ']'));\n+                    \", nodeId=\" + nodeId + ']'));\n \n                 return false;\n             }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "fixed NPE unwrapping",
        "commit": "https://github.com/apache/ignite/commit/4af3397a3805c24d18f6d3481c7baf8461404bb0",
        "parent": "https://github.com/apache/ignite/commit/e99a52bc55908f39bb43ddc6ca5592e4aef728aa",
        "bug_id": "ignite_159",
        "file": [
            {
                "sha": "83bd16bad94eb23f67fbc6ade1c9a3e1439c08ec",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/4af3397a3805c24d18f6d3481c7baf8461404bb0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/4af3397a3805c24d18f6d3481c7baf8461404bb0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java?ref=4af3397a3805c24d18f6d3481c7baf8461404bb0",
                "patch": "@@ -48,7 +48,6 @@\n \n import static org.apache.ignite.IgniteSystemProperties.*;\n import static org.apache.ignite.cache.CacheAtomicityMode.*;\n-import static org.apache.ignite.cache.CacheDistributionMode.*;\n import static org.apache.ignite.cache.CacheMode.*;\n import static org.apache.ignite.cache.CacheRebalanceMode.*;\n import static org.apache.ignite.cache.CacheWriteSynchronizationMode.*;\n@@ -1795,7 +1794,7 @@ public static CacheEntryPredicate cachePrimary(\n      * @param e Ignite checked exception.\n      * @return CacheException runtime exception, never null.\n      */\n-    @NotNull public static CacheException convertToCacheException(IgniteCheckedException e) {\n+    @NotNull public static RuntimeException convertToCacheException(IgniteCheckedException e) {\n         if (e.hasCause(CacheWriterException.class))\n             return new CacheWriterException(U.convertExceptionNoWrap(e));\n \n@@ -1807,6 +1806,9 @@ else if (e instanceof CacheAtomicUpdateTimeoutCheckedException)\n         if (e.getCause() instanceof CacheException)\n             return (CacheException)e.getCause();\n \n+        if (e.getCause() instanceof NullPointerException)\n+            return (NullPointerException)e.getCause();\n+\n         C1<IgniteCheckedException, IgniteException> converter = U.getExceptionConverter(e.getClass());\n \n         return converter != null ? new CacheException(converter.apply(e)) : new CacheException(e);",
                "deletions": 2
            },
            {
                "sha": "521f51c3cfdc92e5b2c307ac621a279a9fa66009",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java",
                "blob_url": "https://github.com/apache/ignite/blob/4af3397a3805c24d18f6d3481c7baf8461404bb0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java",
                "raw_url": "https://github.com/apache/ignite/raw/4af3397a3805c24d18f6d3481c7baf8461404bb0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java?ref=4af3397a3805c24d18f6d3481c7baf8461404bb0",
                "patch": "@@ -1531,7 +1531,7 @@ else if (clazz.isAssignableFrom(legacyProxy.getClass()))\n      * @param e Checked exception.\n      * @return Cache exception.\n      */\n-    private CacheException cacheException(IgniteCheckedException e) {\n+    private RuntimeException cacheException(IgniteCheckedException e) {\n         return CU.convertToCacheException(e);\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-45 Fix NPE.",
        "commit": "https://github.com/apache/ignite/commit/99321a1adb54899bf65ac88e8c20ae51d41c6bc1",
        "parent": "https://github.com/apache/ignite/commit/f3b49a5533fbac9886c870b33375ccf2aedaff2d",
        "bug_id": "ignite_160",
        "file": [
            {
                "sha": "73c7418f3f1184a0b68119535505ca884615c149",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/99321a1adb54899bf65ac88e8c20ae51d41c6bc1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/99321a1adb54899bf65ac88e8c20ae51d41c6bc1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=99321a1adb54899bf65ac88e8c20ae51d41c6bc1",
                "patch": "@@ -740,9 +740,13 @@ public void cleanUp() {\n         singleMsgs.clear();\n         fullMsgs.clear();\n         rcvdIds.clear();\n-        rmtNodes.clear();\n         oldestNode.set(null);\n         partReleaseFut = null;\n+\n+        Collection<ClusterNode> rmtNodes = this.rmtNodes;\n+\n+        if (rmtNodes != null)\n+            rmtNodes.clear();\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1.6 Fixed NPE in GridDhtTxFinishFuture.onDone",
        "commit": "https://github.com/apache/ignite/commit/21daa23ce0d1bdb1e1e28247aac7cd29ece5c898",
        "parent": "https://github.com/apache/ignite/commit/e5c8dfe243951543bc2a6032efb5f9c087f5b184",
        "bug_id": "ignite_161",
        "file": [
            {
                "sha": "de04782f322b9620b84fa8bd22cc5fa775a83ccb",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/21daa23ce0d1bdb1e1e28247aac7cd29ece5c898/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/21daa23ce0d1bdb1e1e28247aac7cd29ece5c898/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java?ref=21daa23ce0d1bdb1e1e28247aac7cd29ece5c898",
                "patch": "@@ -218,7 +218,7 @@ public void onResult(UUID nodeId, GridDhtTxFinishResponse res) {\n                 if (finishErr == null)\n                     finishErr = this.tx.commitError();\n \n-                if (tx.syncMode() != PRIMARY_SYNC)\n+                if (this.tx.syncMode() != PRIMARY_SYNC)\n                     this.tx.sendFinishReply(commit, finishErr);\n \n                 // Don't forget to clean up.",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-4347: ODBC: Fixed NPE in OdbcRequestHandler appearing when cache doesn't exist. This closes #1305.",
        "commit": "https://github.com/apache/ignite/commit/af24a9e2c3b61dff7c9116f1a3bea8c398b7ce78",
        "parent": "https://github.com/apache/ignite/commit/4ba8fcd08e9fb7c876e3532a0caef6d416df8a66",
        "bug_id": "ignite_162",
        "file": [
            {
                "sha": "ea3ae8b74db77706a38eaa9943ddcd2fa4d78c51",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/af24a9e2c3b61dff7c9116f1a3bea8c398b7ce78/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/af24a9e2c3b61dff7c9116f1a3bea8c398b7ce78/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/odbc/OdbcRequestHandler.java?ref=af24a9e2c3b61dff7c9116f1a3bea8c398b7ce78",
                "patch": "@@ -18,7 +18,6 @@\n package org.apache.ignite.internal.processors.odbc;\n \n import org.apache.ignite.IgniteCache;\n-import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.cache.query.QueryCursor;\n import org.apache.ignite.cache.query.SqlFieldsQuery;\n@@ -199,13 +198,13 @@ private OdbcResponse executeQuery(long reqId, OdbcQueryExecuteRequest req) {\n             qry.setDistributedJoins(distributedJoins);\n             qry.setEnforceJoinOrder(enforceJoinOrder);\n \n-            IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName()).withKeepBinary();\n+            IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName());\n \n             if (cache == null)\n-                return new OdbcResponse(OdbcResponse.STATUS_FAILED,\n-                    \"Cache doesn't exist (did you configure it?): \" + req.cacheName());\n+                return new OdbcResponse(OdbcResponse.STATUS_FAILED, \"Cache doesn't exist (did you configure it?): \" +\n+                    req.cacheName());\n \n-            QueryCursor qryCur = cache.query(qry);\n+            QueryCursor qryCur = cache.withKeepBinary().query(qry);\n \n             qryCursors.put(qryId, new IgniteBiTuple<QueryCursor, Iterator>(qryCur, null));\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "minor, fixed NPE in test",
        "commit": "https://github.com/apache/ignite/commit/3087662e3b32b1575ac429d43dae1f7eab2dcb7f",
        "parent": "https://github.com/apache/ignite/commit/86cc1ade3bc56a8ba7ae2efcce3e1876c406ba87",
        "bug_id": "ignite_163",
        "file": [
            {
                "sha": "f3a9051ce72816fa7d391ca8e3db53f4fedcf18c",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/3087662e3b32b1575ac429d43dae1f7eab2dcb7f/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/3087662e3b32b1575ac429d43dae1f7eab2dcb7f/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/junits/GridAbstractTest.java?ref=3087662e3b32b1575ac429d43dae1f7eab2dcb7f",
                "patch": "@@ -985,7 +985,7 @@ protected IgniteConfiguration getConfiguration(String gridName) throws Exception\n \n         cfg.setNodeId(null);\n \n-        if (gridName.matches(\".*\\\\d\")) {\n+        if (gridName != null && gridName.matches(\".*\\\\d\")) {\n             String idStr = UUID.randomUUID().toString();\n \n             char[] chars = idStr.toCharArray();",
                "deletions": 1
            },
            {
                "sha": "ecc7fb787c30e7093f6fc1848cc66f171c59ed27",
                "filename": "modules/spring/src/test/java/org/apache/ignite/internal/GridFactorySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/3087662e3b32b1575ac429d43dae1f7eab2dcb7f/modules/spring/src/test/java/org/apache/ignite/internal/GridFactorySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/3087662e3b32b1575ac429d43dae1f7eab2dcb7f/modules/spring/src/test/java/org/apache/ignite/internal/GridFactorySelfTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/spring/src/test/java/org/apache/ignite/internal/GridFactorySelfTest.java?ref=3087662e3b32b1575ac429d43dae1f7eab2dcb7f",
                "patch": "@@ -62,7 +62,8 @@\n     private static final AtomicInteger cnt = new AtomicInteger();\n \n     /** */\n-    private static final String CUSTOM_CFG_PATH = \"modules/core/src/test/config/factory/custom-grid-name-spring-test.xml\";\n+    private static final String CUSTOM_CFG_PATH =\n+        \"modules/core/src/test/config/factory/custom-grid-name-spring-test.xml\";\n \n     /**\n      *",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-656: NPE is fixed",
        "commit": "https://github.com/apache/ignite/commit/c769709865d88762b914284b4557b7ba2fc0c4ff",
        "parent": "https://github.com/apache/ignite/commit/daf30ae49ba36dee2af799f71ab59afda00f2e83",
        "bug_id": "ignite_164",
        "file": [
            {
                "sha": "f247c0c51cdbd01af719f07322384c159bb66374",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/c769709865d88762b914284b4557b7ba2fc0c4ff/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/c769709865d88762b914284b4557b7ba2fc0c4ff/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java?ref=c769709865d88762b914284b4557b7ba2fc0c4ff",
                "patch": "@@ -957,7 +957,9 @@ private void loadMissingFromStore() {\n             final GridCacheVersion ver = version();\n \n             for (GridDhtCacheEntry entry : entries) {\n-                if (!entry.hasValue() && !tx.entry(entry.txKey()).skipStore())\n+                IgniteTxEntry txEntry = tx != null ? tx.entry(entry.txKey()) : null;\n+\n+                if (!entry.hasValue() && (txEntry == null || !txEntry.skipStore()))\n                     loadMap.put(entry.key(), entry);\n             }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sp-29 fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/5b2fe1f558dcc6784eaec81843332633372e4630",
        "parent": "https://github.com/apache/ignite/commit/d01b4e795a0fefa5e5c67e97f173b14c17dbc563",
        "bug_id": "ignite_165",
        "file": [
            {
                "sha": "560a16b3d61ccbf529c02834a29174db7872b4d7",
                "filename": "modules/indexing/src/main/java/org/gridgain/grid/spi/indexing/h2/GridH2ResultSetIterator.java",
                "blob_url": "https://github.com/apache/ignite/blob/5b2fe1f558dcc6784eaec81843332633372e4630/modules/indexing/src/main/java/org/gridgain/grid/spi/indexing/h2/GridH2ResultSetIterator.java",
                "raw_url": "https://github.com/apache/ignite/raw/5b2fe1f558dcc6784eaec81843332633372e4630/modules/indexing/src/main/java/org/gridgain/grid/spi/indexing/h2/GridH2ResultSetIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/gridgain/grid/spi/indexing/h2/GridH2ResultSetIterator.java?ref=5b2fe1f558dcc6784eaec81843332633372e4630",
                "patch": "@@ -101,6 +101,10 @@ private boolean fetchNext() {\n \n     /** {@inheritDoc} */\n     @Override public void close() throws GridException {\n+        if (data == null)\n+            // Nothing to close.\n+            return;\n+\n         try {\n             U.closeQuiet(data.getStatement());\n         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Quick fix to Hadoop IGFS tests NPE.",
        "commit": "https://github.com/apache/ignite/commit/adf5ef6100b58beb6fb00d85123f34cb5d9e084a",
        "parent": "https://github.com/apache/ignite/commit/2aa292c47b87c0099d6d602dc282c231cd408f2b",
        "bug_id": "ignite_166",
        "file": [
            {
                "sha": "076c2698385a4803875cce20440f8666924599e8",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/adf5ef6100b58beb6fb00d85123f34cb5d9e084a/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/adf5ef6100b58beb6fb00d85123f34cb5d9e084a/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsAbstractSelfTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsAbstractSelfTest.java?ref=adf5ef6100b58beb6fb00d85123f34cb5d9e084a",
                "patch": "@@ -2686,6 +2686,7 @@ public static void clear(IgniteFileSystem igfs) throws Exception {\n     public static void clear(UniversalFileSystemAdapter uni) throws Exception {\n         IgfsEx igfsEx = uni.getAdapter(IgfsEx.class);\n \n-        clear(igfsEx);\n+        if (igfsEx != null)\n+            clear(igfsEx);\n     }\n }\n\\ No newline at end of file",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-9931 NPE in GridTaskProcessor.",
        "commit": "https://github.com/apache/ignite/commit/be0ddab33e2d0eb87f5c6920efbdb672f7db19b9",
        "parent": "https://github.com/apache/ignite/commit/e4834f478fb4a63b87f56853586afcf422a0ce5c",
        "bug_id": "ignite_167",
        "file": [
            {
                "sha": "02743df959b55ac6904bdf1b9f5136d497125e3a",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/be0ddab33e2d0eb87f5c6920efbdb672f7db19b9/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/be0ddab33e2d0eb87f5c6920efbdb672f7db19b9/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java?ref=be0ddab33e2d0eb87f5c6920efbdb672f7db19b9",
                "patch": "@@ -94,8 +94,6 @@ public GridTaskProcessor(GridKernalContext ctx) {\n         marsh = ctx.config().getMarshaller();\n \n         discoLsnr = new TaskDiscoveryListener();\n-\n-        tasksMetaCache = ctx.security().enabled() ? ctx.cache().<GridTaskNameHashKey, String>utilityCache() : null;\n     }\n \n     /** {@inheritDoc} */\n@@ -110,6 +108,11 @@ public GridTaskProcessor(GridKernalContext ctx) {\n             log.debug(\"Started task processor.\");\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public void onKernalStart() throws IgniteCheckedException {\n+        tasksMetaCache = ctx.security().enabled() ? ctx.cache().<GridTaskNameHashKey, String>utilityCache() : null;\n+    }\n+\n     /** {@inheritDoc} */\n     @SuppressWarnings(\"TooBroadScope\")\n     @Override public void onKernalStop(boolean cancel) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# FIxed NPE in IgniteUtils.resolveIgniteUrl().",
        "commit": "https://github.com/apache/ignite/commit/e986b62f2e5a29210fcf9f4b57e5fddc9559bfd8",
        "parent": "https://github.com/apache/ignite/commit/13bd63186931e1e4a8f692ce078e7930a063bcfe",
        "bug_id": "ignite_168",
        "file": [
            {
                "sha": "7f366aa3b6e30c6f1536b2155d36e0fecb15ac93",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/e986b62f2e5a29210fcf9f4b57e5fddc9559bfd8/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/e986b62f2e5a29210fcf9f4b57e5fddc9559bfd8/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=e986b62f2e5a29210fcf9f4b57e5fddc9559bfd8",
                "patch": "@@ -3210,7 +3210,9 @@ public static void setIgniteHome(@Nullable String path) {\n \n         String locPath = (metaInf ? \"META-INF/\" : \"\") + path.replaceAll(\"\\\\\\\\\", \"/\");\n \n-        return Thread.currentThread().getContextClassLoader().getResource(locPath);\n+        ClassLoader clsLdr = Thread.currentThread().getContextClassLoader();\n+\n+        return clsLdr != null ? clsLdr.getResource(locPath) : null;\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-8634 Fix NPE",
        "commit": "https://github.com/apache/ignite/commit/827eb79e858247642e545cb79351992cb816a4bb",
        "parent": "https://github.com/apache/ignite/commit/83847326fbc82a0fab647172bc5cbcdf1694a0d8",
        "bug_id": "ignite_169",
        "file": [
            {
                "sha": "d0404e67986a976d210799ed1d3f7aa73fe05047",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/827eb79e858247642e545cb79351992cb816a4bb/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/827eb79e858247642e545cb79351992cb816a4bb/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java?ref=827eb79e858247642e545cb79351992cb816a4bb",
                "patch": "@@ -4587,6 +4587,9 @@ private void validateCacheKey(Object key) {\n      * @throws GridRuntimeException If validation fails.\n      */\n     protected void validateCacheKeys(Iterable<?> keys) {\n+        if (keys == null)\n+            return;\n+\n         if (keyChecks <= MAX_KEY_CHECKS) {\n             for (Object key : keys) {\n                 if (key == null)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sprint-26 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6",
        "parent": "https://github.com/apache/ignite/commit/dfb364cfcb5b79e27863708fe7bcdc57060aaa94",
        "bug_id": "ignite_170",
        "file": [
            {
                "sha": "b18ce45a9d1084e1c5cb58455680fd619b666e7f",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java?ref=50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6",
                "patch": "@@ -701,7 +701,7 @@ private void map(Collection<? extends K> keys) {\n                                         inTx() ? tx.groupLockKey() : null,\n                                         inTx() && tx.partitionLock(),\n                                         inTx() ? tx.subjectId() : null,\n-                                        inTx() ? tx.taskNameHash() : null);\n+                                        inTx() ? tx.taskNameHash() : 0);\n \n                                     mapping.request(req);\n                                 }",
                "deletions": 1
            },
            {
                "sha": "d3a4f6dcb27691cef6d93f62b235f3b682318fba",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/near/GridNearLockFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/near/GridNearLockFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/near/GridNearLockFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/near/GridNearLockFuture.java?ref=50e17ebb8dc7cd4d7e782338d4b6d0cd442d7af6",
                "patch": "@@ -843,7 +843,7 @@ private void map(Iterable<? extends K> keys) {\n                                             inTx() ? tx.groupLockKey() : null,\n                                             inTx() && tx.partitionLock(),\n                                             inTx() ? tx.subjectId() : null,\n-                                            inTx() ? tx.taskNameHash() : null);\n+                                            inTx() ? tx.taskNameHash() : 0);\n \n                                         mapping.request(req);\n                                     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "commit": "https://github.com/apache/ignite/commit/ce153e4d76122d2c1f060018530e94fe443ff2bf",
        "parent": "https://github.com/apache/ignite/commit/65a852be839581099688593dabae75490798f1b2",
        "bug_id": "ignite_171",
        "file": [
            {
                "sha": "f2d6cae5c79bff27a9987faba4aa10b17a846054",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "blob_url": "https://github.com/apache/ignite/blob/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "raw_url": "https://github.com/apache/ignite/raw/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=ce153e4d76122d2c1f060018530e94fe443ff2bf",
                "patch": "@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n-                            \", property: \" + field.getJavaName() + \"]\", e);\n+                        throw new CacheException(\"Failed to find getter in POJO class [class name=\" + clsName +\n+                            \", property=\" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n-                        \", property: \" + field.getJavaName() + \"]\", e);\n+                    throw new CacheException(\"Failed to find setter in POJO class [class name=\" + clsName +\n+                        \", property=\" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -167,8 +167,8 @@ protected Object newInstance() throws CacheLoaderException {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n                 if (setter == null)\n-                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n-                        \", property: \" + field.getJavaName() + \"]\");\n+                    throw new CacheLoaderException(\"Failed to find setter in POJO class [class name=\" + typeName +\n+                        \", property=\" + field.getJavaName() + \"]\");\n \n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n@@ -194,8 +194,8 @@ protected Object newInstance() throws CacheLoaderException {\n             Method getter = mc.getters.get(fieldName);\n \n             if (getter == null)\n-                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n-                    \", property: \" + fieldName + \"]\");\n+                throw new CacheLoaderException(\"Failed to find getter in POJO class [class name=\" + typeName +\n+                    \", property=\" + fieldName + \"]\");\n \n             return getter.invoke(obj);\n         }",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "commit": "https://github.com/apache/ignite/commit/7ada6a5f5a339b1282bd554c068b380254f78065",
        "parent": "https://github.com/apache/ignite/commit/dd6c24f4e45cf136aa1d496028c20ce5f0d1a35d",
        "bug_id": "ignite_172",
        "file": [
            {
                "sha": "0c6292d302f76d3e1ccbb0a21de3aa0a41226eb0",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "blob_url": "https://github.com/apache/ignite/blob/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "raw_url": "https://github.com/apache/ignite/raw/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "status": "modified",
                "changes": 28,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=7ada6a5f5a339b1282bd554c068b380254f78065",
                "patch": "@@ -69,7 +69,7 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                 throw new CacheException(\"Failed to find class: \" + clsName, e);\n             }\n             catch (NoSuchMethodException e) {\n-                throw new CacheException(\"Failed to find empty constructor for class: \" + clsName, e);\n+                throw new CacheException(\"Failed to find default constructor for class: \" + clsName, e);\n             }\n \n             setters = U.newHashMap(fields.size());\n@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter for property \" + field.getJavaName() +\n-                            \" of class: \" + cls.getName(), e);\n+                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n+                            \", property: \" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter for property \" + field.getJavaName() +\n-                        \" of class: \" + clsName, e);\n+                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n+                        \", property: \" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -157,12 +157,19 @@ protected Object newInstance() throws CacheLoaderException {\n         Map<String, Integer> loadColIdxs, ResultSet rs) throws CacheLoaderException {\n         PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n+        if (mc == null)\n+            throw new CacheLoaderException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n         Object obj = mc.newInstance();\n \n         try {\n             for (CacheTypeFieldMetadata field : fields) {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n+                if (setter == null)\n+                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n+                        \", property: \" + field.getJavaName() + \"]\");\n+\n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n                 setter.invoke(obj, getColumnValue(rs, colIdx, field.getJavaType()));\n@@ -181,7 +188,16 @@ protected Object newInstance() throws CacheLoaderException {\n         try {\n             PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n-            return mc.getters.get(fieldName).invoke(obj);\n+            if (mc == null)\n+                throw new CacheException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n+            Method getter = mc.getters.get(fieldName);\n+\n+            if (getter == null)\n+                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n+                    \", property: \" + fieldName + \"]\");\n+\n+            return getter.invoke(obj);\n         }\n         catch (Exception e) {\n             throw new CacheException(\"Failed to read object of class: \" + typeName, e);",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# Fixed potential NPE in GridCachePartitionExchangeManager.dumpPendingObjects",
        "commit": "https://github.com/apache/ignite/commit/ae11e9b5aa9af4d0d58e2a16dd3a3331969961df",
        "parent": "https://github.com/apache/ignite/commit/19fb305d5ceff430911d8dc25685686f6446ea21",
        "bug_id": "ignite_173",
        "file": [
            {
                "sha": "e00d3b7461341d8e6ee1ff6e736e3c2624d4fb25",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/ae11e9b5aa9af4d0d58e2a16dd3a3331969961df/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/ae11e9b5aa9af4d0d58e2a16dd3a3331969961df/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 32,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=ae11e9b5aa9af4d0d58e2a16dd3a3331969961df",
                "patch": "@@ -984,25 +984,33 @@ public void dumpDebugInfo() {\n      *\n      */\n     public void dumpPendingObjects() {\n-        U.warn(log, \"Pending transactions:\");\n+        IgniteTxManager tm = cctx.tm();\n \n-        for (IgniteInternalTx tx : cctx.tm().activeTransactions())\n-            U.warn(log, \">>> \" + tx);\n+        if (tm != null) {\n+            U.warn(log, \"Pending transactions:\");\n \n-        U.warn(log, \"Pending explicit locks:\");\n+            for (IgniteInternalTx tx : tm.activeTransactions())\n+                U.warn(log, \">>> \" + tx);\n+        }\n \n-        for (GridCacheExplicitLockSpan lockSpan : cctx.mvcc().activeExplicitLocks())\n-            U.warn(log, \">>> \" + lockSpan);\n+        GridCacheMvccManager mvcc = cctx.mvcc();\n \n-        U.warn(log, \"Pending cache futures:\");\n+        if (mvcc != null) {\n+            U.warn(log, \"Pending explicit locks:\");\n \n-        for (GridCacheFuture<?> fut : cctx.mvcc().activeFutures())\n-            U.warn(log, \">>> \" + fut);\n+            for (GridCacheExplicitLockSpan lockSpan : mvcc.activeExplicitLocks())\n+                U.warn(log, \">>> \" + lockSpan);\n \n-        U.warn(log, \"Pending atomic cache futures:\");\n+            U.warn(log, \"Pending cache futures:\");\n \n-        for (GridCacheFuture<?> fut : cctx.mvcc().atomicFutures())\n-            U.warn(log, \">>> \" + fut);\n+            for (GridCacheFuture<?> fut : mvcc.activeFutures())\n+                U.warn(log, \">>> \" + fut);\n+\n+            U.warn(log, \"Pending atomic cache futures:\");\n+\n+            for (GridCacheFuture<?> fut : mvcc.atomicFutures())\n+                U.warn(log, \">>> \" + fut);\n+        }\n     }\n \n     /**",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# Fixed potential NPE in GridCachePartitionExchangeManager.dumpDebugInfo",
        "commit": "https://github.com/apache/ignite/commit/bd770a54a554c8c22f36ea00f8c735218c29b330",
        "parent": "https://github.com/apache/ignite/commit/d9acbd1da16efac59d3cc44c18c16af2db5f50f2",
        "bug_id": "ignite_174",
        "file": [
            {
                "sha": "cf491975fbc1e1f08a7bbc25d190fbf3d2054e69",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/bd770a54a554c8c22f36ea00f8c735218c29b330/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/bd770a54a554c8c22f36ea00f8c735218c29b330/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 16,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java?ref=bd770a54a554c8c22f36ea00f8c735218c29b330",
                "patch": "@@ -962,15 +962,19 @@ public void dumpDebugInfo() {\n         for (GridDhtPartitionsExchangeFuture fut : pendingExchangeFuts)\n             U.warn(log, \">>> \" + fut);\n \n-        U.warn(log, \"Last 10 exchange futures (total: \" + exchFuts.size() + \"):\");\n+        ExchangeFutureSet exchFuts = this.exchFuts;\n \n-        int cnt = 0;\n+        if (exchFuts != null) {\n+            U.warn(log, \"Last 10 exchange futures (total: \" + exchFuts.size() + \"):\");\n \n-        for (GridDhtPartitionsExchangeFuture fut : exchFuts) {\n-            U.warn(log, \">>> \" + fut);\n+            int cnt = 0;\n+\n+            for (GridDhtPartitionsExchangeFuture fut : exchFuts) {\n+                U.warn(log, \">>> \" + fut);\n \n-            if (++cnt == 10)\n-                break;\n+                if (++cnt == 10)\n+                    break;\n+            }\n         }\n \n         dumpPendingObjects();",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "gg-8022 - NPE fixes",
        "commit": "https://github.com/apache/ignite/commit/ec7b419b5bb643f2619780dd88d26b1a3259ca5b",
        "parent": "https://github.com/apache/ignite/commit/6aaeaa4051267b4200f4f8ec47fd59f58d373a84",
        "bug_id": "ignite_175",
        "file": [
            {
                "sha": "a20a8fff5011c8b796dc6233372de787739928e3",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java?ref=ec7b419b5bb643f2619780dd88d26b1a3259ca5b",
                "patch": "@@ -661,10 +661,16 @@ else if (msg instanceof GridHadoopTaskFinishedMessage) {\n \n         /** {@inheritDoc} */\n         @Override public void onConnectionLost(GridHadoopProcessDescriptor desc) {\n-            if (desc == null || !busyLock.tryReadLock())\n+            if (!busyLock.tryReadLock())\n                 return;\n \n             try {\n+                if (desc == null) {\n+                    U.warn(log, \"Handshake failed.\");\n+\n+                    return;\n+                }\n+\n                 // Notify job tracker about failed tasks.\n                 HadoopProcess proc = runningProcsByProcId.get(desc.processId());\n ",
                "deletions": 1
            },
            {
                "sha": "f8b40399ed1ce2524faaf37c71157a0fa1a4ee17",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/child/GridHadoopChildProcessRunner.java",
                "blob_url": "https://github.com/apache/ignite/blob/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/child/GridHadoopChildProcessRunner.java",
                "raw_url": "https://github.com/apache/ignite/raw/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/child/GridHadoopChildProcessRunner.java",
                "status": "modified",
                "changes": 30,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/child/GridHadoopChildProcessRunner.java?ref=ec7b419b5bb643f2619780dd88d26b1a3259ca5b",
                "patch": "@@ -380,7 +380,7 @@ private void terminate() {\n      */\n     private class MessageListener implements GridHadoopMessageListener {\n         /** {@inheritDoc} */\n-        @Override public void onMessageReceived(GridHadoopProcessDescriptor desc, GridHadoopMessage msg) {\n+        @Override public void onMessageReceived(final GridHadoopProcessDescriptor desc, final GridHadoopMessage msg) {\n             if (msg instanceof GridHadoopTaskExecutionRequest) {\n                 if (validateNodeMessage(desc, msg))\n                     runTasks((GridHadoopTaskExecutionRequest)msg);\n@@ -394,19 +394,23 @@ else if (msg instanceof GridHadoopPrepareForJobRequest) {\n                     prepareProcess((GridHadoopPrepareForJobRequest)msg);\n             }\n             else if (msg instanceof GridHadoopShuffleMessage) {\n-                try {\n-                    if (log.isTraceEnabled())\n-                        log.trace(\"Received shuffle message [desc=\" + desc + \", msg=\" + msg + ']');\n+                if (log.isTraceEnabled())\n+                    log.trace(\"Received shuffle message [desc=\" + desc + \", msg=\" + msg + ']');\n \n-                    GridHadoopShuffleMessage m = (GridHadoopShuffleMessage)msg;\n+                initFut.listenAsync(new CI1<GridFuture<?>>() {\n+                    @Override public void apply(GridFuture<?> f) {\n+                        try {\n+                            GridHadoopShuffleMessage m = (GridHadoopShuffleMessage)msg;\n \n-                    shuffleJob.onShuffleMessage(m);\n+                            shuffleJob.onShuffleMessage(m);\n \n-                    comm.sendMessage(desc, new GridHadoopShuffleAck(m.id(), m.jobId()));\n-                }\n-                catch (GridException e) {\n-                    U.error(log, \"Failed to process hadoop shuffle message [desc=\" + desc + \", msg=\" + msg + ']', e);\n-                }\n+                            comm.sendMessage(desc, new GridHadoopShuffleAck(m.id(), m.jobId()));\n+                        }\n+                        catch (GridException e) {\n+                            U.error(log, \"Failed to process hadoop shuffle message [desc=\" + desc + \", msg=\" + msg + ']', e);\n+                        }\n+                    }\n+                });\n             }\n             else if (msg instanceof GridHadoopShuffleAck) {\n                 if (log.isTraceEnabled())\n@@ -423,7 +427,9 @@ else if (msg instanceof GridHadoopShuffleAck) {\n             if (log.isDebugEnabled())\n                 log.debug(\"Lost connection with remote process: \" + desc);\n \n-            if (desc.processId().equals(nodeDesc.processId())) {\n+            if (desc == null)\n+                U.warn(log, \"Handshake failed.\");\n+            else if (desc.processId().equals(nodeDesc.processId())) {\n                 log.warning(\"Child process lost connection with parent node (will terminate child process).\");\n \n                 shutdown();",
                "deletions": 12
            },
            {
                "sha": "32ea15d65a36869399355cc9e93be4f630c8690a",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/communication/GridHadoopExternalCommunication.java",
                "blob_url": "https://github.com/apache/ignite/blob/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/communication/GridHadoopExternalCommunication.java",
                "raw_url": "https://github.com/apache/ignite/raw/ec7b419b5bb643f2619780dd88d26b1a3259ca5b/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/communication/GridHadoopExternalCommunication.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/communication/GridHadoopExternalCommunication.java?ref=ec7b419b5bb643f2619780dd88d26b1a3259ca5b",
                "patch": "@@ -94,6 +94,9 @@\n                 if (log.isDebugEnabled())\n                     log.debug(\"Closed connection for session: \" + ses);\n \n+                if (e != null)\n+                    U.error(log, \"Session disconnected due to exception: \" + ses, e);\n+\n                 GridHadoopProcessDescriptor desc = ses.meta(PROCESS_META);\n \n                 if (desc != null) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "gg-8022 - NPE fixed",
        "commit": "https://github.com/apache/ignite/commit/6aaeaa4051267b4200f4f8ec47fd59f58d373a84",
        "parent": "https://github.com/apache/ignite/commit/4bcdc6281c02a77fb0d7911ad383b200adf8ace8",
        "bug_id": "ignite_176",
        "file": [
            {
                "sha": "2ec0c1e7ca0d2a3c2ead9f7c29bd2db43738448d",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/6aaeaa4051267b4200f4f8ec47fd59f58d373a84/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/6aaeaa4051267b4200f4f8ec47fd59f58d373a84/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/external/GridHadoopExternalTaskExecutor.java?ref=6aaeaa4051267b4200f4f8ec47fd59f58d373a84",
                "patch": "@@ -661,9 +661,7 @@ else if (msg instanceof GridHadoopTaskFinishedMessage) {\n \n         /** {@inheritDoc} */\n         @Override public void onConnectionLost(GridHadoopProcessDescriptor desc) {\n-            assert desc != null;\n-\n-            if (!busyLock.tryReadLock())\n+            if (desc == null || !busyLock.tryReadLock())\n                 return;\n \n             try {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "fixed npe - https://issues.apache.org/jira/browse/IGNITE-2532",
        "commit": "https://github.com/apache/ignite/commit/4035d40f18fa2d829eaa17c0496eeecfad81fee1",
        "parent": "https://github.com/apache/ignite/commit/ee20f1d9fb94f792d0b62097499c7c3f976ff6f5",
        "bug_id": "ignite_177",
        "file": [
            {
                "sha": "75b5f9147a2dc1d56c75fede92d54b8275a06fe8",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java",
                "blob_url": "https://github.com/apache/ignite/blob/4035d40f18fa2d829eaa17c0496eeecfad81fee1/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java",
                "raw_url": "https://github.com/apache/ignite/raw/4035d40f18fa2d829eaa17c0496eeecfad81fee1/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java?ref=4035d40f18fa2d829eaa17c0496eeecfad81fee1",
                "patch": "@@ -116,7 +116,7 @@\n     private String locAddr;\n \n     /** Time to live. */\n-    private Integer ttl;\n+    private int ttl = -1;\n \n     /** */\n     @GridToStringExclude\n@@ -267,6 +267,8 @@ public String getLocalAddress() {\n      * <p>\n      * If TTL is {@code 0}, packets are not transmitted on the network,\n      * but may be delivered locally.\n+     * <p>\n+     * Default value is {@code -1} which corresponds to system default value.\n      *\n      * @param ttl Time to live.\n      */\n@@ -307,7 +309,7 @@ public int getTimeToLive() {\n             throw new IgniteSpiException(\"Invalid number of address request attempts, \" +\n                 \"value greater than zero is expected: \" + addrReqAttempts);\n \n-        if (ttl != null && (ttl < 0 || ttl > 255))\n+        if (ttl != -1 && (ttl < 0 || ttl > 255))\n             throw new IgniteSpiException(\"Time-to-live value is out of 0 <= TTL <= 255 range: \" + ttl);\n \n         if (F.isEmpty(getRegisteredAddresses()))\n@@ -545,7 +547,7 @@ public int getTimeToLive() {\n \n                     sock.setSoTimeout(resWaitTime);\n \n-                    if (ttl != null)\n+                    if (ttl != -1)\n                         sock.setTimeToLive(ttl);\n \n                     reqPckt.setData(MSG_ADDR_REQ_DATA);\n@@ -817,7 +819,7 @@ private MulticastSocket createSocket() throws IOException {\n \n             sock.joinGroup(mcastGrp);\n \n-            if (ttl != null)\n+            if (ttl != -1)\n                 sock.setTimeToLive(ttl);\n \n             return sock;\n@@ -908,4 +910,4 @@ private MulticastSocket createSocket() throws IOException {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-9463 NPE in GridPortableContext.",
        "commit": "https://github.com/apache/ignite/commit/09708a863486a22148f488483d41f2e60d0e5043",
        "parent": "https://github.com/apache/ignite/commit/bb05dfe4247e23211d63c1168a44f806bf65e23a",
        "bug_id": "ignite_178",
        "file": [
            {
                "sha": "23b11c548db56310e2bf99c8ec02c268be5aab68",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/GridGainEx.java",
                "blob_url": "https://github.com/apache/ignite/blob/09708a863486a22148f488483d41f2e60d0e5043/modules/core/src/main/java/org/gridgain/grid/kernal/GridGainEx.java",
                "raw_url": "https://github.com/apache/ignite/raw/09708a863486a22148f488483d41f2e60d0e5043/modules/core/src/main/java/org/gridgain/grid/kernal/GridGainEx.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/GridGainEx.java?ref=09708a863486a22148f488483d41f2e60d0e5043",
                "patch": "@@ -957,10 +957,10 @@ public static Grid grid(@Nullable String name) throws GridIllegalStateException\n     public static GridKernal gridx(@Nullable String name) {\n         GridNamedInstance grid = name != null ? grids.get(name) : dfltGrid;\n \n-        GridKernal res = null;\n+        GridKernal res;\n \n         if (grid == null || (res = grid.gridx()) == null)\n-            U.warn(null, \"Grid instance was not properly started or was already stopped: \" + name);\n+            throw new IllegalStateException(\"Grid instance was not properly started or was already stopped: \" + name);\n \n         return res;\n     }",
                "deletions": 2
            },
            {
                "sha": "f157c8edeb9c761154d25ab0987fa1484be93225",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/09708a863486a22148f488483d41f2e60d0e5043/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/09708a863486a22148f488483d41f2e60d0e5043/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheContext.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheContext.java?ref=09708a863486a22148f488483d41f2e60d0e5043",
                "patch": "@@ -1931,9 +1931,6 @@ protected Object readResolve() throws ObjectStreamException {\n \n             GridKernal grid = GridGainEx.gridx(t.get1());\n \n-            if (grid == null)\n-                throw new IllegalStateException(\"Failed to find grid for name: \" + t.get1());\n-\n             GridCacheAdapter<K, V> cache = grid.internalCache(t.get2());\n \n             if (cache == null)",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8028 - Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/2f70a609c19f38f8a15e3d9f9e1643096878c44d",
        "parent": "https://github.com/apache/ignite/commit/0f13b3915f0582202587895beeb29aa34eaed6be",
        "bug_id": "ignite_179",
        "file": [
            {
                "sha": "9692f102da9284714987310e85bcaf7923d7f5fa",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/planner/GridHadoopDefaultMapReducePlanner.java",
                "blob_url": "https://github.com/apache/ignite/blob/2f70a609c19f38f8a15e3d9f9e1643096878c44d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/planner/GridHadoopDefaultMapReducePlanner.java",
                "raw_url": "https://github.com/apache/ignite/raw/2f70a609c19f38f8a15e3d9f9e1643096878c44d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/planner/GridHadoopDefaultMapReducePlanner.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/planner/GridHadoopDefaultMapReducePlanner.java?ref=2f70a609c19f38f8a15e3d9f9e1643096878c44d",
                "patch": "@@ -130,6 +130,7 @@ private UUID nodeId(GridHadoopJob job, GridHadoopFileBlock block, Collection<Gri\n             Collection<GridGgfsBlockLocation> aff = ggfs.affinity(new GridGgfsPath(block.file()), block.start(),\n                 block.length());\n \n+            // TODO-gg-8170 do we need to handle collection or we can assert aff.size() == 1?\n             long maxLen = Long.MIN_VALUE;\n             UUID max = null;\n ",
                "deletions": 0
            },
            {
                "sha": "fd2e55c7a3b1791e5a66af5abbaa117735ecffec",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/2f70a609c19f38f8a15e3d9f9e1643096878c44d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/2f70a609c19f38f8a15e3d9f9e1643096878c44d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java?ref=2f70a609c19f38f8a15e3d9f9e1643096878c44d",
                "patch": "@@ -81,7 +81,7 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n \n                         task.run(taskCtx);\n \n-                        return out.finish();\n+                        return out == null ? new GridFinishedFutureEx<>() : out.finish();\n                     }\n                 }\n             }, false).listenAsync(fut);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-8184 - NPE fix",
        "commit": "https://github.com/apache/ignite/commit/b952849c4ad17213d62e29d3cf82bd7f3ee723a5",
        "parent": "https://github.com/apache/ignite/commit/dcbf996f92bd53fe8666d9ce85433d7947a11843",
        "bug_id": "ignite_180",
        "file": [
            {
                "sha": "87f59647478d2e9bb90a532c98f614894c42337d",
                "filename": "modules/core/src/main/java/org/gridgain/grid/util/GridUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/b952849c4ad17213d62e29d3cf82bd7f3ee723a5/modules/core/src/main/java/org/gridgain/grid/util/GridUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/b952849c4ad17213d62e29d3cf82bd7f3ee723a5/modules/core/src/main/java/org/gridgain/grid/util/GridUtils.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/util/GridUtils.java?ref=b952849c4ad17213d62e29d3cf82bd7f3ee723a5",
                "patch": "@@ -7863,13 +7863,15 @@ public static ApplicationContext applicationContext(URL cfgUrl, final String...\n                 for (String beanName : beanFactory.getBeanDefinitionNames()) {\n                     BeanDefinition def = beanFactory.getBeanDefinition(beanName);\n \n-                    try {\n-                        Class.forName(def.getBeanClassName());\n-                    }\n-                    catch (ClassNotFoundException ignored) {\n-                        ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);\n+                    if (def.getBeanClassName() != null) {\n+                        try {\n+                            Class.forName(def.getBeanClassName());\n+                        }\n+                        catch (ClassNotFoundException ignored) {\n+                            ((BeanDefinitionRegistry)beanFactory).removeBeanDefinition(beanName);\n \n-                        continue;\n+                            continue;\n+                        }\n                     }\n \n                     MutablePropertyValues vals = def.getPropertyValues();",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# ignite-sprint-5 NPE in RoundRobinGlobalLoadBalancer",
        "commit": "https://github.com/apache/ignite/commit/308b0c0c9cfff7f8615cbeedd2e0ccfa8288407b",
        "parent": "https://github.com/apache/ignite/commit/8f455a9ee27144adc2f3fe7cd8c5516d3da15fed",
        "bug_id": "ignite_181",
        "file": [
            {
                "sha": "a47a17fd1c6efc6d6c464ac46d6e8c0a31a4a573",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java",
                "blob_url": "https://github.com/apache/ignite/blob/308b0c0c9cfff7f8615cbeedd2e0ccfa8288407b/modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java",
                "raw_url": "https://github.com/apache/ignite/raw/308b0c0c9cfff7f8615cbeedd2e0ccfa8288407b/modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java?ref=308b0c0c9cfff7f8615cbeedd2e0ccfa8288407b",
                "patch": "@@ -45,7 +45,7 @@\n     private final IgniteLogger log;\n \n     /** Current snapshot of nodes which participated in load balancing. */\n-    private volatile GridNodeList nodeList = new GridNodeList(0, null);\n+    private volatile GridNodeList nodeList = new GridNodeList(0, new ArrayList<UUID>(0));\n \n     /** Mutex for updating current topology. */\n     private final Object mux = new Object();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11503 WAL history is too short / NPE upon repetitive node restarts\n-fixes in PageIO.getPageIO",
        "commit": "https://github.com/apache/ignite/commit/86878562536fa20596a656df62906a23d8b077f4",
        "parent": "https://github.com/apache/ignite/commit/2e82ce0acebf4ff7553428231b918a334956a99a",
        "bug_id": "ignite_182",
        "file": [
            {
                "sha": "b4f89ca34178b9723170553daea005c6b20d61f1",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/86878562536fa20596a656df62906a23d8b077f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/86878562536fa20596a656df62906a23d8b077f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java?ref=86878562536fa20596a656df62906a23d8b077f4",
                "patch": "@@ -1386,7 +1386,7 @@ static PendingRow createRowWithKey(GridCacheContext cctx, long expireTime, long\n     /**\n      *\n      */\n-    private static class PendingEntryInnerIO extends BPlusInnerIO<PendingRow> implements PendingRowIO {\n+    public static class PendingEntryInnerIO extends BPlusInnerIO<PendingRow> implements PendingRowIO {\n         /** */\n         public static final IOVersions<PendingEntryInnerIO> VERSIONS = new IOVersions<>(\n             new PendingEntryInnerIO(1)\n@@ -1443,7 +1443,7 @@ static PendingRow createRowWithKey(GridCacheContext cctx, long expireTime, long\n     /**\n      *\n      */\n-    private static class PendingEntryLeafIO extends BPlusLeafIO<PendingRow> implements PendingRowIO {\n+    public static class PendingEntryLeafIO extends BPlusLeafIO<PendingRow> implements PendingRowIO {\n         /** */\n         public static final IOVersions<PendingEntryLeafIO> VERSIONS = new IOVersions<>(\n             new PendingEntryLeafIO(1)",
                "deletions": 2
            },
            {
                "sha": "dbdb7e541c8de907797149173dee905a09514081",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/database/tree/io/PageIO.java",
                "blob_url": "https://github.com/apache/ignite/blob/86878562536fa20596a656df62906a23d8b077f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/database/tree/io/PageIO.java",
                "raw_url": "https://github.com/apache/ignite/raw/86878562536fa20596a656df62906a23d8b077f4/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/database/tree/io/PageIO.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/database/tree/io/PageIO.java?ref=86878562536fa20596a656df62906a23d8b077f4",
                "patch": "@@ -354,6 +354,12 @@ public void initNewPage(ByteBuffer buf, long pageId) {\n \n             case T_REUSE_LEAF:\n                 return (Q)ReuseLeafIO.VERSIONS.forVersion(ver);\n+\n+            case T_PENDING_REF_LEAF:\n+                return (Q)IgniteCacheOffheapManagerImpl.PendingEntryLeafIO.VERSIONS.forVersion(ver);\n+\n+            case T_PENDING_REF_INNER:\n+                return (Q)IgniteCacheOffheapManagerImpl.PendingEntryInnerIO.VERSIONS.forVersion(ver);\n         }\n \n         throw new IgniteCheckedException(\"Unknown page IO type: \" + type);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11503 WAL history is too short / NPE upon repetitive node restarts",
        "commit": "https://github.com/apache/ignite/commit/2e82ce0acebf4ff7553428231b918a334956a99a",
        "parent": "https://github.com/apache/ignite/commit/05dda32c206664751e95f520325d7af7f9f5def9",
        "bug_id": "ignite_183",
        "file": [
            {
                "sha": "358f6a9453358fd74e3e27aa56d12a7b60a9b7f8",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/store/IgnitePageStoreManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/2e82ce0acebf4ff7553428231b918a334956a99a/modules/core/src/main/java/org/apache/ignite/internal/pagemem/store/IgnitePageStoreManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/2e82ce0acebf4ff7553428231b918a334956a99a/modules/core/src/main/java/org/apache/ignite/internal/pagemem/store/IgnitePageStoreManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/store/IgnitePageStoreManager.java?ref=2e82ce0acebf4ff7553428231b918a334956a99a",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.ignite.internal.pagemem.store;\n \n+import java.util.Set;\n import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.internal.pagemem.PageMemory;\n@@ -145,4 +146,15 @@\n      * @return Meta page ID.\n      */\n     public long metaPageId(int cacheId);\n+\n+    /**\n+     * @return set of cache names which configurations were saved\n+     */\n+    public Set<String> savedCacheNames();\n+\n+    /**\n+     * @param cacheName Cache name.\n+     * @return saved configuration for cache\n+     */\n+    public CacheConfiguration readConfiguration(String cacheName);\n }",
                "deletions": 0
            },
            {
                "sha": "e38b5825dc41d5daca69bfd003d5e1c22d8c1627",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/2e82ce0acebf4ff7553428231b918a334956a99a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/2e82ce0acebf4ff7553428231b918a334956a99a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "status": "modified",
                "changes": 145,
                "additions": 83,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=2e82ce0acebf4ff7553428231b918a334956a99a",
                "patch": "@@ -36,7 +36,6 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ThreadLocalRandom;\n import javax.cache.configuration.Factory;\n import javax.cache.integration.CacheLoader;\n import javax.cache.integration.CacheWriter;\n@@ -583,90 +582,112 @@ private void cleanup(CacheConfiguration cfg, @Nullable Object rsrc, boolean near\n             if (ctx.config().isDaemon() && !CU.isMarshallerCache(cfgs[i].getName()))\n                 continue;\n \n-            cloneCheckSerializable(cfgs[i]);\n-\n             CacheConfiguration<?, ?> cfg = new CacheConfiguration(cfgs[i]);\n \n-            CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(cfg);\n+            cfgs[i] = cfg; // Replace original configuration value.\n \n-            // Initialize defaults.\n-            initialize(internalCaches.contains(maskNull(cfg.getName())), cfg, cacheObjCtx);\n+            registerCache(internalCaches, cfg);\n+        }\n \n-            cfgs[i] = cfg; // Replace original configuration value.\n+        Set<String> savedCacheNames = sharedCtx.pageStore().savedCacheNames();\n+//TODO        Set<String> savedCacheNames = Collections.emptySet();\n \n-            String masked = maskNull(cfg.getName());\n+        for (CacheConfiguration cfg : cfgs)\n+            savedCacheNames.remove(cfg.getName());\n \n-            if (registeredCaches.containsKey(masked)) {\n-                String cacheName = cfg.getName();\n+        for (String name : internalCaches)\n+            savedCacheNames.remove(name);\n \n-                if (cacheName != null)\n-                    throw new IgniteCheckedException(\"Duplicate cache name found (check configuration and \" +\n-                        \"assign unique name to each cache): \" + U.maskName(cacheName));\n-                else\n-                    throw new IgniteCheckedException(\"Default cache has already been configured (check configuration and \" +\n-                        \"assign unique name to each cache).\");\n-            }\n+        for (String name : savedCacheNames) {\n+            CacheConfiguration cfg = sharedCtx.pageStore().readConfiguration(name);\n \n-            CacheType cacheType;\n+            if (ctx.config().isDaemon() && !CU.isMarshallerCache(cfg.getName()))\n+                continue;\n \n-            if (CU.isUtilityCache(cfg.getName()))\n-                cacheType = CacheType.UTILITY;\n-            else if (CU.isMarshallerCache(cfg.getName()))\n-                cacheType = CacheType.MARSHALLER;\n-            else if (internalCaches.contains(maskNull(cfg.getName())))\n-                cacheType = CacheType.INTERNAL;\n-            else\n-                cacheType = CacheType.USER;\n+            registerCache(internalCaches, cfg);\n+        }\n \n-            boolean template = cfg.getName() != null && cfg.getName().endsWith(\"*\");\n+        transactions = new IgniteTransactionsImpl(sharedCtx);\n \n-            DynamicCacheDescriptor desc = new DynamicCacheDescriptor(ctx, cfg, cacheType, template,\n-                IgniteUuid.randomUuid());\n+        if (log.isDebugEnabled())\n+            log.debug(\"Started cache processor.\");\n+    }\n \n-            desc.locallyConfigured(true);\n-            desc.staticallyConfigured(true);\n-            desc.receivedFrom(ctx.localNodeId());\n+    private void registerCache(Set<String> internalCaches, CacheConfiguration<?, ?> cfg) throws IgniteCheckedException {\n+        cloneCheckSerializable(cfg);\n \n-            if (!template) {\n-                registeredCaches.put(masked, desc);\n+        CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(cfg);\n \n-                ctx.discovery().setCacheFilter(\n-                    cfg.getName(),\n-                    cfg.getNodeFilter(),\n-                    cfg.getNearConfiguration() != null && cfg.getCacheMode() == PARTITIONED,\n-                    cfg.getCacheMode());\n+        // Initialize defaults.\n+        initialize(internalCaches.contains(maskNull(cfg.getName())), cfg, cacheObjCtx);\n \n-                ctx.discovery().addClientNode(cfg.getName(),\n-                    ctx.localNodeId(),\n-                    cfg.getNearConfiguration() != null);\n+        String masked = maskNull(cfg.getName());\n \n-                if (!cacheType.userCache())\n-                    stopSeq.addLast(cfg.getName());\n-                else\n-                    stopSeq.addFirst(cfg.getName());\n-            }\n-            else {\n-                if (log.isDebugEnabled())\n-                    log.debug(\"Use cache configuration as template: \" + cfg);\n+        if (registeredCaches.containsKey(masked)) {\n+            String cacheName = cfg.getName();\n \n-                registeredTemplates.put(masked, desc);\n-            }\n+            if (cacheName != null)\n+                throw new IgniteCheckedException(\"Duplicate cache name found (check configuration and \" +\n+                    \"assign unique name to each cache): \" + U.maskName(cacheName));\n+            else\n+                throw new IgniteCheckedException(\"Default cache has already been configured (check configuration and \" +\n+                    \"assign unique name to each cache).\");\n+        }\n \n-            if (cfg.getName() == null) { // Use cache configuration with null name as template.\n-                DynamicCacheDescriptor desc0 =\n-                    new DynamicCacheDescriptor(ctx, cfg, cacheType, true, IgniteUuid.randomUuid());\n+        CacheType cacheType;\n \n-                desc0.locallyConfigured(true);\n-                desc0.staticallyConfigured(true);\n+        if (CU.isUtilityCache(cfg.getName()))\n+            cacheType = CacheType.UTILITY;\n+        else if (CU.isMarshallerCache(cfg.getName()))\n+            cacheType = CacheType.MARSHALLER;\n+        else if (internalCaches.contains(maskNull(cfg.getName())))\n+            cacheType = CacheType.INTERNAL;\n+        else\n+            cacheType = CacheType.USER;\n \n-                registeredTemplates.put(masked, desc0);\n-            }\n+        boolean template = cfg.getName() != null && cfg.getName().endsWith(\"*\");\n+\n+        DynamicCacheDescriptor desc = new DynamicCacheDescriptor(ctx, cfg, cacheType, template,\n+            IgniteUuid.randomUuid());\n+\n+        desc.locallyConfigured(true);\n+        desc.staticallyConfigured(true);\n+        desc.receivedFrom(ctx.localNodeId());\n+\n+        if (!template) {\n+            registeredCaches.put(masked, desc);\n+\n+            ctx.discovery().setCacheFilter(\n+                cfg.getName(),\n+                cfg.getNodeFilter(),\n+                cfg.getNearConfiguration() != null && cfg.getCacheMode() == PARTITIONED,\n+                cfg.getCacheMode());\n+\n+            ctx.discovery().addClientNode(cfg.getName(),\n+                ctx.localNodeId(),\n+                cfg.getNearConfiguration() != null);\n+\n+            if (!cacheType.userCache())\n+                stopSeq.addLast(cfg.getName());\n+            else\n+                stopSeq.addFirst(cfg.getName());\n         }\n+        else {\n+            if (log.isDebugEnabled())\n+                log.debug(\"Use cache configuration as template: \" + cfg);\n \n-        transactions = new IgniteTransactionsImpl(sharedCtx);\n+            registeredTemplates.put(masked, desc);\n+        }\n \n-        if (log.isDebugEnabled())\n-            log.debug(\"Started cache processor.\");\n+        if (cfg.getName() == null) { // Use cache configuration with null name as template.\n+            DynamicCacheDescriptor desc0 =\n+                new DynamicCacheDescriptor(ctx, cfg, cacheType, true, IgniteUuid.randomUuid());\n+\n+            desc0.locallyConfigured(true);\n+            desc0.staticallyConfigured(true);\n+\n+            registeredTemplates.put(masked, desc0);\n+        }\n     }\n \n     /**",
                "deletions": 62
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-7171 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/c192a39a884fc00b391c009934e84070651e18db",
        "parent": "https://github.com/apache/ignite/commit/cbb2f82700b957f21ef4c51e2e81b7fd6fe8deeb",
        "bug_id": "ignite_184",
        "file": [
            {
                "sha": "b9d8387a8795f974d79edfc0caf43a02fd52e103",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/c192a39a884fc00b391c009934e84070651e18db/modules/core/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/c192a39a884fc00b391c009934e84070651e18db/modules/core/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java?ref=c192a39a884fc00b391c009934e84070651e18db",
                "patch": "@@ -1176,7 +1176,7 @@ else if (log.isDebugEnabled())\n                 }\n             }\n \n-            return new ArrayList<>(toSnd);\n+            return toSnd != null ? new ArrayList<>(toSnd) : null;\n         }\n \n         /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11503 WAL history is too short / NPE upon repetitive node restarts",
        "commit": "https://github.com/apache/ignite/commit/05dda32c206664751e95f520325d7af7f9f5def9",
        "parent": "https://github.com/apache/ignite/commit/4b01a4bcc2d162613ea84eb5d8f609cc06b82558",
        "bug_id": "ignite_185",
        "file": [
            {
                "sha": "19ea43df3ff66225611bdf963c371f4d404af7bc",
                "filename": "modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/05dda32c206664751e95f520325d7af7f9f5def9/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/05dda32c206664751e95f520325d7af7f9f5def9/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testframework/GridTestUtils.java?ref=05dda32c206664751e95f520325d7af7f9f5def9",
                "patch": "@@ -43,6 +43,7 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Queue;\n+import java.util.Random;\n import java.util.Set;\n import java.util.Timer;\n import java.util.TimerTask;\n@@ -109,6 +110,9 @@\n     /** Default busy wait sleep interval in milliseconds.  */\n     public static final long DFLT_BUSYWAIT_SLEEP_INTERVAL = 200;\n \n+    /** */\n+    static final String ALPHABETH = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_\";\n+\n     /** */\n     private static final Map<Class<?>, String> addrs = new HashMap<>();\n \n@@ -1794,6 +1798,25 @@ public static void setMemoryMode(IgniteConfiguration cfg, CacheConfiguration ccf\n         ccfg.setOffHeapMaxMemory(offheapMaxMem);\n     }\n \n+    /**\n+     * Generate random alphabetical string.\n+     *\n+     * @param rnd Random object.\n+     * @param maxLen Maximal length of string\n+     * @return Random string object.\n+     */\n+    public static String randomString(Random rnd, int maxLen) {\n+        int len = rnd.nextInt(maxLen);\n+\n+        StringBuilder b = new StringBuilder(len);\n+\n+        for (int i = 0; i < len; i++)\n+            b.append(ALPHABETH.charAt(rnd.nextInt(ALPHABETH.length())));\n+\n+        return b.toString();\n+    }\n+\n+\n     /**\n      *\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-7625 - Fixed NPE",
        "commit": "https://github.com/apache/ignite/commit/b9bb776e4f06ca138ee2d878a3a8d8f3cd09a847",
        "parent": "https://github.com/apache/ignite/commit/fa5b72aff5365406f2f9d78ca0dd34b2e4a58e12",
        "bug_id": "ignite_186",
        "file": [
            {
                "sha": "d7c3cf9644fb4fc766b02a68c0619f063fc8d90c",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/cache/query/GridCacheDistributedQueryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/b9bb776e4f06ca138ee2d878a3a8d8f3cd09a847/modules/core/java/org/gridgain/grid/kernal/processors/cache/query/GridCacheDistributedQueryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/b9bb776e4f06ca138ee2d878a3a8d8f3cd09a847/modules/core/java/org/gridgain/grid/kernal/processors/cache/query/GridCacheDistributedQueryManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/cache/query/GridCacheDistributedQueryManager.java?ref=b9bb776e4f06ca138ee2d878a3a8d8f3cd09a847",
                "patch": "@@ -305,18 +305,22 @@ private boolean sendQueryResponse(UUID nodeId, GridCacheQueryResponse<K, V> res,\n     @Override protected void removeQueryIterator(@Nullable UUID sndId, long reqId) {\n         super.removeQueryIterator(sndId, reqId);\n \n-        Object topic = topic(sndId, reqId);\n+        if (sndId != null) {\n+            Object topic = topic(sndId, reqId);\n \n-        cctx.io().removeMessageId(topic);\n+            cctx.io().removeMessageId(topic);\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override protected void removeFieldsQueryResult(@Nullable UUID sndId, long reqId) {\n         super.removeFieldsQueryResult(sndId, reqId);\n \n-        Object topic = topic(sndId, reqId);\n+        if (sndId != null) {\n+            Object topic = topic(sndId, reqId);\n \n-        cctx.io().removeMessageId(topic);\n+            cctx.io().removeMessageId(topic);\n+        }\n     }\n \n     /**",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sp-19 NPE fix",
        "commit": "https://github.com/apache/ignite/commit/fb0b12d454077fbde6573dc7976cbeed61e6ecaa",
        "parent": "https://github.com/apache/ignite/commit/fe1bfdbbf60dadec056f5016085ae12404eaa3a8",
        "bug_id": "ignite_187",
        "file": [
            {
                "sha": "3670c7aa69e1c9b2b532192b52415b7c7bf9523e",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/dataload/GridDataLoaderImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/fb0b12d454077fbde6573dc7976cbeed61e6ecaa/modules/core/java/org/gridgain/grid/kernal/processors/dataload/GridDataLoaderImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/fb0b12d454077fbde6573dc7976cbeed61e6ecaa/modules/core/java/org/gridgain/grid/kernal/processors/dataload/GridDataLoaderImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/dataload/GridDataLoaderImpl.java?ref=fb0b12d454077fbde6573dc7976cbeed61e6ecaa",
                "patch": "@@ -902,11 +902,11 @@ private void submit(final List<Map.Entry<K, V>> entries, final GridFutureAdapter\n \n                 if (ctx.deploy().enabled()) {\n                     try {\n-                        dep = ctx.deploy().deploy(jobPda0.deployClass(), jobPda0.classLoader());\n-\n                         jobPda0 = jobPda;\n \n                         assert jobPda0 != null;\n+\n+                        dep = ctx.deploy().deploy(jobPda0.deployClass(), jobPda0.classLoader());\n                     }\n                     catch (GridException e) {\n                         U.error(log, \"Failed to deploy class (request will not be sent): \" + jobPda0.deployClass(), e);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-866 NPE during clean up",
        "commit": "https://github.com/apache/ignite/commit/2d9a938a281887fdae804ac68a89e93e5ad1b02b",
        "parent": "https://github.com/apache/ignite/commit/8455c7a6ed6f7449c7ad31b1ef7b129705262e1b",
        "bug_id": "ignite_188",
        "file": [
            {
                "sha": "af19077137683b46ec6e915b09927d0b830208e3",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/2d9a938a281887fdae804ac68a89e93e5ad1b02b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/2d9a938a281887fdae804ac68a89e93e5ad1b02b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsImpl.java",
                "status": "modified",
                "changes": 62,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsImpl.java?ref=2d9a938a281887fdae804ac68a89e93e5ad1b02b",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.ignite.*;\n import org.apache.ignite.cache.*;\n+import org.apache.ignite.configuration.*;\n import org.apache.ignite.internal.processors.cache.store.*;\n import org.apache.ignite.internal.util.tostring.*;\n import org.apache.ignite.internal.util.typedef.internal.*;\n@@ -118,7 +119,9 @@ public void delegate(CacheMetricsImpl delegate) {\n     /** {@inheritDoc} */\n     @Override public long getOverflowSize() {\n         try {\n-            return cctx.cache().overflowSize();\n+            GridCacheAdapter<?, ?> cache = cctx.cache();\n+\n+            return cache != null ? cache.overflowSize() : -1;\n         }\n         catch (IgniteCheckedException ignored) {\n             return -1;\n@@ -127,34 +130,47 @@ public void delegate(CacheMetricsImpl delegate) {\n \n     /** {@inheritDoc} */\n     @Override public long getOffHeapEntriesCount() {\n-        return cctx.cache().offHeapEntriesCount();\n+        GridCacheAdapter<?, ?> cache = cctx.cache();\n+\n+        return cache != null ? cache.offHeapEntriesCount() : -1;\n     }\n \n     /** {@inheritDoc} */\n     @Override public long getOffHeapAllocatedSize() {\n-        return cctx.cache().offHeapAllocatedSize();\n+        GridCacheAdapter<?, ?> cache = cctx.cache();\n+\n+        return cache != null ? cache.offHeapAllocatedSize() : -1;\n     }\n \n     /** {@inheritDoc} */\n     @Override public int getSize() {\n-        return cctx.cache().size();\n+        GridCacheAdapter<?, ?> cache = cctx.cache();\n+\n+        return cache != null ? cache.size() : 0;\n     }\n \n     /** {@inheritDoc} */\n     @Override public int getKeySize() {\n-        return cctx.cache().size();\n+        return getSize();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isEmpty() {\n-        return cctx.cache().isEmpty();\n+        GridCacheAdapter<?, ?> cache = cctx.cache();\n+\n+        return cache == null || cache.isEmpty();\n     }\n \n     /** {@inheritDoc} */\n     @Override public int getDhtEvictQueueCurrentSize() {\n-        return cctx.isNear() ?\n-                dhtCtx != null ? dhtCtx.evicts().evictQueueSize() : -1\n-                : cctx.evicts().evictQueueSize();\n+        GridCacheContext<?, ?> ctx = cctx.isNear() ? dhtCtx : cctx;\n+\n+        if (ctx == null)\n+            return -1;\n+\n+        GridCacheEvictionManager evictMgr = ctx.evicts();\n+\n+        return evictMgr != null ? evictMgr.evictQueueSize() : -1;\n     }\n \n     /** {@inheritDoc} */\n@@ -548,37 +564,51 @@ public void addPutAndGetTimeNanos(long duration) {\n \n     /** {@inheritDoc} */\n     @Override public String getKeyType() {\n-        return cctx.config().getKeyType().getName();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null ? ccfg.getKeyType().getName() : null;\n     }\n \n     /** {@inheritDoc} */\n     @Override public String getValueType() {\n-        return cctx.config().getValueType().getName();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null ? ccfg.getValueType().getName() : null;\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isReadThrough() {\n-        return cctx.config().isReadThrough();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null && ccfg.isReadThrough();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isWriteThrough() {\n-        return cctx.config().isWriteThrough();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null && ccfg.isWriteThrough();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isStoreByValue() {\n-        return cctx.config().isStoreByValue();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null && ccfg.isStoreByValue();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isStatisticsEnabled() {\n-        return cctx.config().isStatisticsEnabled();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null && ccfg.isStatisticsEnabled();\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isManagementEnabled() {\n-        return cctx.config().isManagementEnabled();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        return ccfg != null && ccfg.isManagementEnabled();\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 16
            },
            {
                "sha": "c97596150e5a6c0002d298c1f6cc162b4de2a877",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/2d9a938a281887fdae804ac68a89e93e5ad1b02b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/2d9a938a281887fdae804ac68a89e93e5ad1b02b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java?ref=2d9a938a281887fdae804ac68a89e93e5ad1b02b",
                "patch": "@@ -3249,7 +3249,9 @@ public CacheMetricsImpl metrics0() {\n \n     /** {@inheritDoc} */\n     @Override public long overflowSize() throws IgniteCheckedException {\n-        return ctx.swap().swapSize();\n+        GridCacheSwapManager swapMgr = ctx.swap();\n+\n+        return swapMgr != null ? swapMgr.swapSize() : -1;\n     }\n \n     /**\n@@ -3802,12 +3804,16 @@ void globalLoadCache(@Nullable IgniteBiPredicate<K, V> p, @Nullable Object... ar\n \n     /** {@inheritDoc} */\n     @Override public long offHeapEntriesCount() {\n-        return ctx.swap().offHeapEntriesCount();\n+        GridCacheSwapManager swapMgr = ctx.swap();\n+\n+        return swapMgr != null ? swapMgr.offHeapEntriesCount() : -1;\n     }\n \n     /** {@inheritDoc} */\n     @Override public long offHeapAllocatedSize() {\n-        return ctx.swap().offHeapAllocatedSize();\n+        GridCacheSwapManager swapMgr = ctx.swap();\n+\n+        return swapMgr != null ? swapMgr.offHeapAllocatedSize() : -1;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-943 Bug fix: NPE in setAuthenticator",
        "commit": "https://github.com/apache/ignite/commit/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
        "parent": "https://github.com/apache/ignite/commit/2bc07956a828ac836641f4fbe6ae0db7b3cc1793",
        "bug_id": "ignite_189",
        "file": [
            {
                "sha": "e672d6490b14fb1048d50d90e425f54ad83cdaf7",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "patch": "@@ -318,11 +318,6 @@\n         rmtNodes.clear();\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        // No-op.\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         if (segmented)",
                "deletions": 5
            },
            {
                "sha": "57c13d668cc171c61b0c2b2fdf26cbf831ba7d75",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "status": "modified",
                "changes": 20,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "patch": "@@ -115,9 +115,6 @@\n     /** Response on join request from coordinator (in case of duplicate ID or auth failure). */\n     private final GridTuple<TcpDiscoveryAbstractMessage> joinRes = F.t1();\n \n-    /** Node authenticator. */\n-    private DiscoverySpiNodeAuthenticator nodeAuth;\n-\n     /** Mutex. */\n     private final Object mux = new Object();\n \n@@ -630,11 +627,6 @@ private boolean pingNode(TcpDiscoveryNode node) {\n         spiStop0(true);\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator nodeAuth) {\n-        this.nodeAuth = nodeAuth;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         try {\n@@ -680,10 +672,10 @@ private void joinTopology() throws IgniteSpiException {\n                 if (log.isDebugEnabled())\n                     log.debug(\"Join request message has not been sent (local node is the first in the topology).\");\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate local node.\n                     try {\n-                        SecurityContext subj = nodeAuth.authenticateNode(locNode, locCred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(locNode, locCred);\n \n                         if (subj == null)\n                             throw new IgniteSpiException(\"Authentication failed for local node: \" + locNode.id());\n@@ -2469,12 +2461,12 @@ private void processJoinRequestMessage(TcpDiscoveryJoinRequestMessage msg) {\n                     return;\n                 }\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate node first.\n                     try {\n                         SecurityCredentials cred = unmarshalCredentials(node);\n \n-                        SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                         if (subj == null) {\n                             // Node has not pass authentication.\n@@ -2843,7 +2835,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                     return;\n                 }\n \n-                if (!isLocalNodeCoordinator() && nodeAuth != null && nodeAuth.isGlobalNodeAuthentication()) {\n+                if (!isLocalNodeCoordinator() && spi.nodeAuth != null && spi.nodeAuth.isGlobalNodeAuthentication()) {\n                     boolean authFailed = true;\n \n                     try {\n@@ -2861,7 +2853,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                             authFailed = false;\n                         }\n                         else {\n-                            SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                            SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                             SecurityContext coordSubj = spi.ignite().configuration().getMarshaller().unmarshal(\n                                 node.<byte[]>attribute(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT),",
                "deletions": 14
            },
            {
                "sha": "f285279cda828e68f75764f20660bb5ec61e8032",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "patch": "@@ -112,11 +112,6 @@ protected void onException(String msg, Exception e){\n      */\n     public abstract void disconnect() throws IgniteSpiException;\n \n-    /**\n-     * @param auth Auth.\n-     */\n-    public abstract void setAuthenticator(DiscoverySpiNodeAuthenticator auth);\n-\n     /**\n      * @param msg Message.\n      */",
                "deletions": 5
            },
            {
                "sha": "1b8424ca76a1204181792e3443784581d732e0a6",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "patch": "@@ -294,6 +294,9 @@\n     @SuppressWarnings({\"FieldAccessedSynchronizedAndUnsynchronized\"})\n     protected long ipFinderCleanFreq = DFLT_IP_FINDER_CLEAN_FREQ;\n \n+    /** Node authenticator. */\n+    protected DiscoverySpiNodeAuthenticator nodeAuth;\n+\n     /** Context initialization latch. */\n     @GridToStringExclude\n     private final CountDownLatch ctxInitLatch = new CountDownLatch(1);\n@@ -353,7 +356,7 @@\n \n     /** {@inheritDoc} */\n     @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        impl.setAuthenticator(auth);\n+        nodeAuth = auth;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1.5 Fixed NPE in IgniteKernal.dumpDebugInfo.",
        "commit": "https://github.com/apache/ignite/commit/acb57c5eb95d11ebde5557618226d80f25ac610c",
        "parent": "https://github.com/apache/ignite/commit/717dab259e3f0287046ffcefa28cf9214ab65ff7",
        "bug_id": "ignite_190",
        "file": [
            {
                "sha": "0f781d6d629e237b1caa7579f7b966f5e90b67bf",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "blob_url": "https://github.com/apache/ignite/blob/acb57c5eb95d11ebde5557618226d80f25ac610c/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "raw_url": "https://github.com/apache/ignite/raw/acb57c5eb95d11ebde5557618226d80f25ac610c/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "status": "modified",
                "changes": 26,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=acb57c5eb95d11ebde5557618226d80f25ac610c",
                "patch": "@@ -3244,20 +3244,26 @@ private boolean skipDaemon(GridComponent comp) {\n \n     /** {@inheritDoc} */\n     public void dumpDebugInfo() {\n-        boolean client = ctx.clientNode();\n+        GridKernalContextImpl ctx = this.ctx;\n \n-        ClusterNode locNode = ctx.discovery().localNode();\n+        if (ctx != null) {\n+            boolean client = ctx.clientNode();\n \n-        UUID routerId = locNode instanceof TcpDiscoveryNode ? ((TcpDiscoveryNode)locNode).clientRouterNodeId() : null;\n+            ClusterNode locNode = ctx.discovery().localNode();\n \n-        U.warn(log, \"Dumping debug info for node [id=\" + locNode.id() +\n-            \", name=\" + ctx.gridName() +\n-            \", order=\" + locNode.order() +\n-            \", topVer=\" + ctx.discovery().topologyVersion() +\n-            \", client=\" + client +\n-            (client && routerId != null ? \", routerId=\" + routerId : \"\") + ']');\n+            UUID routerId = locNode instanceof TcpDiscoveryNode ? ((TcpDiscoveryNode)locNode).clientRouterNodeId() : null;\n \n-        ctx.cache().context().exchange().dumpDebugInfo();\n+            U.warn(log, \"Dumping debug info for node [id=\" + locNode.id() +\n+                \", name=\" + ctx.gridName() +\n+                \", order=\" + locNode.order() +\n+                \", topVer=\" + ctx.discovery().topologyVersion() +\n+                \", client=\" + client +\n+                (client && routerId != null ? \", routerId=\" + routerId : \"\") + ']');\n+\n+            ctx.cache().context().exchange().dumpDebugInfo();\n+        }\n+        else\n+            U.warn(log, \"Dumping debug info for node, context is not initialized [name=\" + gridName + ']');\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-721 - Fixed NPE in fair affinity",
        "commit": "https://github.com/apache/ignite/commit/2d3eac747656132ff877c76e70603580f6cc2efb",
        "parent": "https://github.com/apache/ignite/commit/1757473754a94e0e3ac0fb75c9767126de278dbb",
        "bug_id": "ignite_191",
        "file": [
            {
                "sha": "a28f69c481162e7ec142de43af73a93e4b57ddac",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=2d3eac747656132ff877c76e70603580f6cc2efb",
                "patch": "@@ -313,6 +313,9 @@ public boolean isLocalClientAdded(int cacheId) {\n      * Rechecks topology.\n      */\n     private void initTopology(GridCacheContext cacheCtx) throws IgniteCheckedException {\n+        if (stopping(cacheCtx.cacheId()))\n+            return;\n+\n         if (canCalculateAffinity(cacheCtx)) {\n             if (log.isDebugEnabled())\n                 log.debug(\"Will recalculate affinity [locNodeId=\" + cctx.localNodeId() + \", exchId=\" + exchId + ']');",
                "deletions": 0
            },
            {
                "sha": "dcf45086db9a68214ff3655c9c4379f746d5ac36",
                "filename": "modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/GridFairAffinityFunctionSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/GridFairAffinityFunctionSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/GridFairAffinityFunctionSelfTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/GridFairAffinityFunctionSelfTest.java?ref=2d3eac747656132ff877c76e70603580f6cc2efb",
                "patch": "@@ -254,8 +254,6 @@ private void verifyAssignment(List<List<ClusterNode>> assignment, int keyBackups\n \n         log().warning(\"max=\" + max + \", min=\" + min + \", ideal=\" + ideal + \", minDev=\" + deviation(min, ideal) + \"%, \" +\n             \"maxDev=\" + deviation(max, ideal) + \"%\");\n-\n-        assertTrue(\"max=\" + max + \", min=\" + min, max - min < (keyBackups + 1) * topSize);\n     }\n \n     private static int deviation(int val, int ideal) {",
                "deletions": 2
            },
            {
                "sha": "90571a4b49953d4be6021d026e1e00f755669e5f",
                "filename": "modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/IgniteFairAffinityDynamicCacheSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/IgniteFairAffinityDynamicCacheSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2d3eac747656132ff877c76e70603580f6cc2efb/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/IgniteFairAffinityDynamicCacheSelfTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/cache/affinity/fair/IgniteFairAffinityDynamicCacheSelfTest.java?ref=2d3eac747656132ff877c76e70603580f6cc2efb",
                "patch": "@@ -70,27 +70,30 @@ public IgniteFairAffinityDynamicCacheSelfTest(){\n      * @throws Exception If failed.\n      */\n     public void testStartStopCache() throws Exception {\n-        CacheConfiguration<Integer, Integer> cacheCfg = new CacheConfiguration<>();\n+        for (int k = 0; k < 10; k++) {\n+            CacheConfiguration<Integer, Integer> cacheCfg = new CacheConfiguration<>();\n \n-        cacheCfg.setCacheMode(CacheMode.PARTITIONED);\n-        cacheCfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);\n-        cacheCfg.setBackups(1);\n-        cacheCfg.setName(\"test\");\n-        cacheCfg.setAffinity(new FairAffinityFunction());\n+            cacheCfg.setCacheMode(CacheMode.PARTITIONED);\n+            cacheCfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);\n+            cacheCfg.setBackups(1);\n+            cacheCfg.setName(\"test\");\n+            cacheCfg.setAffinity(new FairAffinityFunction());\n \n-        final IgniteCache<Integer, Integer> cache = ignite(0).createCache(cacheCfg);\n+            final IgniteCache<Integer, Integer> cache = ignite(0).createCache(cacheCfg);\n \n-        for (int i = 0; i < 10_000; i++)\n-            cache.put(i, i);\n+            for (int i = 0; i < 10_000; i++)\n+                cache.put(i, i);\n \n-        IgniteInternalFuture<Object> destFut = GridTestUtils.runAsync(new Callable<Object>() {\n-            @Override public Object call() throws Exception {\n-                ignite(0).destroyCache(cache.getName());\n+            IgniteInternalFuture<Object> destFut = GridTestUtils.runAsync(new Callable<Object>() {\n+                @Override\n+                public Object call() throws Exception {\n+                    ignite(0).destroyCache(cache.getName());\n \n-                return null;\n-            }\n-        });\n+                    return null;\n+                }\n+            });\n \n-        destFut.get(2000L);\n+            destFut.get(2000L);\n+        }\n     }\n }",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-3713 .NET:  Fix possible NPE in PlatformConfigurationUtils due to null Enum values",
        "commit": "https://github.com/apache/ignite/commit/354318ad9fca00c0cb5d9f58db73ca81366f3ee4",
        "parent": "https://github.com/apache/ignite/commit/05c5939aeeb4a9eabd4a49a9a58c957c1bd73967",
        "bug_id": "ignite_192",
        "file": [
            {
                "sha": "010c2aee7ac540619d706fa7724c4bd4737d2813",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/354318ad9fca00c0cb5d9f58db73ca81366f3ee4/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/354318ad9fca00c0cb5d9f58db73ca81366f3ee4/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "status": "modified",
                "changes": 57,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java?ref=354318ad9fca00c0cb5d9f58db73ca81366f3ee4",
                "patch": "@@ -343,6 +343,7 @@ private static void writeAffinityFunction(BinaryRawWriter out, AffinityFunction\n      * @param out Stream.\n      * @param p Policy.\n      */\n+    @SuppressWarnings(\"TypeMayBeWeakened\")\n     private static void writeEvictionPolicy(BinaryRawWriter out, EvictionPolicy p) {\n         if (p instanceof FifoEvictionPolicy) {\n             out.writeByte((byte)1);\n@@ -654,12 +655,10 @@ public static void writeCacheConfiguration(BinaryRawWriter writer, CacheConfigur\n         assert writer != null;\n         assert ccfg != null;\n \n-        writer.writeInt(ccfg.getAtomicityMode() == null ?\n-            CacheConfiguration.DFLT_CACHE_ATOMICITY_MODE.ordinal() : ccfg.getAtomicityMode().ordinal());\n-        writer.writeInt(ccfg.getAtomicWriteOrderMode() == null ? 0 : ccfg.getAtomicWriteOrderMode().ordinal());\n+        writeEnumInt(writer, ccfg.getAtomicityMode(), CacheConfiguration.DFLT_CACHE_ATOMICITY_MODE);\n+        writeEnumInt(writer, ccfg.getAtomicWriteOrderMode());\n         writer.writeInt(ccfg.getBackups());\n-        writer.writeInt(ccfg.getCacheMode() == null ?\n-            CacheConfiguration.DFLT_CACHE_MODE.ordinal() : ccfg.getCacheMode().ordinal());\n+        writeEnumInt(writer, ccfg.getCacheMode(), CacheConfiguration.DFLT_CACHE_MODE);\n         writer.writeBoolean(ccfg.isCopyOnRead());\n         writer.writeBoolean(ccfg.isEagerTtl());\n         writer.writeBoolean(ccfg.isSwapEnabled());\n@@ -674,15 +673,13 @@ public static void writeCacheConfiguration(BinaryRawWriter writer, CacheConfigur\n         writer.writeLong(ccfg.getLongQueryWarningTimeout());\n         writer.writeInt(ccfg.getMaxConcurrentAsyncOperations());\n         writer.writeFloat(ccfg.getEvictMaxOverflowRatio());\n-        writer.writeInt(ccfg.getMemoryMode() == null ?\n-            CacheConfiguration.DFLT_MEMORY_MODE.ordinal() : ccfg.getMemoryMode().ordinal());\n+        writeEnumInt(writer, ccfg.getMemoryMode(), CacheConfiguration.DFLT_MEMORY_MODE);\n         writer.writeString(ccfg.getName());\n         writer.writeLong(ccfg.getOffHeapMaxMemory());\n         writer.writeBoolean(ccfg.isReadFromBackup());\n         writer.writeInt(ccfg.getRebalanceBatchSize());\n         writer.writeLong(ccfg.getRebalanceDelay());\n-        writer.writeInt(ccfg.getRebalanceMode() == null ?\n-            CacheConfiguration.DFLT_REBALANCE_MODE.ordinal() : ccfg.getRebalanceMode().ordinal());\n+        writeEnumInt(writer, ccfg.getRebalanceMode(), CacheConfiguration.DFLT_REBALANCE_MODE);\n         writer.writeLong(ccfg.getRebalanceThrottle());\n         writer.writeLong(ccfg.getRebalanceTimeout());\n         writer.writeBoolean(ccfg.isSqlEscapeAll());\n@@ -693,7 +690,7 @@ public static void writeCacheConfiguration(BinaryRawWriter writer, CacheConfigur\n         writer.writeLong(ccfg.getWriteBehindFlushFrequency());\n         writer.writeInt(ccfg.getWriteBehindFlushSize());\n         writer.writeInt(ccfg.getWriteBehindFlushThreadCount());\n-        writer.writeInt(ccfg.getWriteSynchronizationMode() == null ? 0 : ccfg.getWriteSynchronizationMode().ordinal());\n+        writeEnumInt(writer, ccfg.getWriteSynchronizationMode());\n         writer.writeBoolean(ccfg.isReadThrough());\n         writer.writeBoolean(ccfg.isWriteThrough());\n \n@@ -790,7 +787,7 @@ private static void writeQueryIndex(BinaryRawWriter writer, QueryIndex index) {\n         assert index != null;\n \n         writer.writeString(index.getName());\n-        writer.writeByte((byte)index.getIndexType().ordinal());\n+        writeEnumByte(writer, index.getIndexType());\n \n         LinkedHashMap<String, Boolean> fields = index.getFields();\n \n@@ -896,7 +893,7 @@ public static void writeIgniteConfiguration(BinaryRawWriter w, IgniteConfigurati\n \n             w.writeInt(atomic.getAtomicSequenceReserveSize());\n             w.writeInt(atomic.getBackups());\n-            w.writeInt(atomic.getCacheMode().ordinal());\n+            writeEnumInt(w, atomic.getCacheMode(), AtomicConfiguration.DFLT_CACHE_MODE);\n         }\n         else\n             w.writeBoolean(false);\n@@ -907,8 +904,8 @@ public static void writeIgniteConfiguration(BinaryRawWriter w, IgniteConfigurati\n             w.writeBoolean(true);\n \n             w.writeInt(tx.getPessimisticTxLogSize());\n-            w.writeInt(tx.getDefaultTxConcurrency().ordinal());\n-            w.writeInt(tx.getDefaultTxIsolation().ordinal());\n+            writeEnumInt(w, tx.getDefaultTxConcurrency(), TransactionConfiguration.DFLT_TX_CONCURRENCY);\n+            writeEnumInt(w, tx.getDefaultTxIsolation(), TransactionConfiguration.DFLT_TX_ISOLATION);\n             w.writeLong(tx.getDefaultTxTimeout());\n             w.writeInt(tx.getPessimisticTxLogLinger());\n         }\n@@ -997,6 +994,38 @@ private static void writeDiscoveryConfiguration(BinaryRawWriter w, DiscoverySpi\n         w.writeInt((int)tcp.getTopHistorySize());\n     }\n \n+    /**\n+     * Writes enum as byte.\n+     *\n+     * @param w Writer.\n+     * @param e Enum.\n+     */\n+    private static void writeEnumByte(BinaryRawWriter w, Enum e) {\n+        w.writeByte(e == null ? 0 : (byte)e.ordinal());\n+    }\n+\n+    /**\n+     * Writes enum as int.\n+     *\n+     * @param w Writer.\n+     * @param e Enum.\n+     */\n+    private static void writeEnumInt(BinaryRawWriter w, Enum e) {\n+        w.writeInt(e == null ? 0 : e.ordinal());\n+    }\n+\n+    /**\n+     * Writes enum as int.\n+     *\n+     * @param w Writer.\n+     * @param e Enum.\n+     */\n+    private static void writeEnumInt(BinaryRawWriter w, Enum e, Enum def) {\n+        assert def != null;\n+\n+        w.writeInt(e == null ? def.ordinal() : e.ordinal());\n+    }\n+\n     /**\n      * Private constructor.\n      */",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1.5 Fix for NPE in GridCachePartitionExchangeManager.processFullPartitionUpdate.",
        "commit": "https://github.com/apache/ignite/commit/e1554df4511eedf15b9471ca3f078a9d6c475129",
        "parent": "https://github.com/apache/ignite/commit/2089b7890dd15eaf5dc1bbf0b8dc03ca1ad18690",
        "bug_id": "ignite_193",
        "file": [
            {
                "sha": "0cbdc91ec0cc68b110ee4c506ea40005170f5c63",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java",
                "blob_url": "https://github.com/apache/ignite/blob/e1554df4511eedf15b9471ca3f078a9d6c475129/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java",
                "raw_url": "https://github.com/apache/ignite/raw/e1554df4511eedf15b9471ca3f078a9d6c475129/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java?ref=e1554df4511eedf15b9471ca3f078a9d6c475129",
                "patch": "@@ -159,8 +159,14 @@ public void topologyVersion(AffinityTopologyVersion topVer) {\n         if (partsBytes != null && parts == null)\n             parts = ctx.marshaller().unmarshal(partsBytes, ldr);\n \n-        if (partCntrsBytes != null)\n+        if (parts == null)\n+            parts = new HashMap<>();\n+\n+        if (partCntrsBytes != null && partCntrs == null)\n             partCntrs = ctx.marshaller().unmarshal(partCntrsBytes, ldr);\n+\n+        if (partCntrs == null)\n+            partCntrs = new HashMap<>();\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-594 - Fixed NPE, added test.",
        "commit": "https://github.com/apache/ignite/commit/411481c80797384b61e520a0b2bd057058701a82",
        "parent": "https://github.com/apache/ignite/commit/f9f649aae3943bb9034dcdd56c279a3317db6f6b",
        "bug_id": "ignite_194",
        "file": [
            {
                "sha": "3cd6aab4742cf74bab22a1669a49025a00f86c50",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/411481c80797384b61e520a0b2bd057058701a82/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/411481c80797384b61e520a0b2bd057058701a82/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=411481c80797384b61e520a0b2bd057058701a82",
                "patch": "@@ -369,7 +369,8 @@ else if (evtType != EVT_NODE_METRICS_UPDATED)\n \n                 if (type == DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT) {\n                     try {\n-                        customEvtLsnr.apply(data);\n+                        if (customEvtLsnr != null)\n+                            customEvtLsnr.apply(data);\n                     }\n                     catch (Exception e) {\n                         U.error(log, \"Failed to notify direct custom event listener: \" + data, e);",
                "deletions": 1
            },
            {
                "sha": "e57a0a24e66460edba562b5b31e5f01f81eb3e8c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteDynamicCacheStartSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/411481c80797384b61e520a0b2bd057058701a82/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteDynamicCacheStartSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/411481c80797384b61e520a0b2bd057058701a82/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteDynamicCacheStartSelfTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/IgniteDynamicCacheStartSelfTest.java?ref=411481c80797384b61e520a0b2bd057058701a82",
                "patch": "@@ -62,6 +62,9 @@ public boolean apply(ClusterNode n) {\n     /** */\n     private boolean testAttribute = true;\n \n+    /** */\n+    private boolean daemon;\n+\n     /**\n      * @return Number of nodes for this test.\n      */\n@@ -88,6 +91,9 @@ protected IgniteConfiguration getConfiguration(String gridName) throws Exception\n \n         cfg.setIncludeEventTypes(EventType.EVT_CACHE_STARTED, EventType.EVT_CACHE_STOPPED, EventType.EVT_CACHE_NODES_LEFT);\n \n+        if (daemon)\n+            cfg.setDaemon(true);\n+\n         return cfg;\n     }\n \n@@ -969,4 +975,31 @@ public boolean apply(CacheEvent e) {\n                 ignite(i).events().stopLocalListen(lsnrs[i]);\n         }\n     }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testDaemonNode() throws Exception {\n+        daemon = true;\n+\n+        Ignite dNode = startGrid(nodeCount());\n+\n+        try {\n+            CacheConfiguration cfg = new CacheConfiguration(DYNAMIC_CACHE_NAME);\n+\n+            try (IgniteCache cache = ignite(0).createCache(cfg)) {\n+                for (int i = 0; i < 100; i++) {\n+                    assertFalse(ignite(0).affinity(DYNAMIC_CACHE_NAME).mapKeyToPrimaryAndBackups(i)\n+                        .contains(dNode.cluster().localNode()));\n+\n+                    cache.put(i, i);\n+                }\n+            }\n+        }\n+        finally {\n+            stopGrid(nodeCount());\n+\n+            daemon = false;\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-3407 HTTP REST: query commands without pageSize failed with NPE",
        "commit": "https://github.com/apache/ignite/commit/bfa375bbc991c1d0eea9837952be5fee87e4b558",
        "parent": "https://github.com/apache/ignite/commit/a235985ef65ba22e5c4e36f893e3a48151fdfc7e",
        "bug_id": "ignite_195",
        "file": [
            {
                "sha": "ee728a62770b46e3ebf0aea8c146c61c2049afad",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java?ref=bfa375bbc991c1d0eea9837952be5fee87e4b558",
                "patch": "@@ -30,6 +30,7 @@\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.locks.ReentrantLock;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.cache.query.Query;\n import org.apache.ignite.cache.query.QueryCursor;\n@@ -217,22 +218,31 @@ private static void removeQueryCursor(Long qryId, ConcurrentHashMap<Long, QueryC\n         assert SUPPORTED_COMMANDS.contains(req.command());\n         assert req instanceof RestQueryRequest : \"Invalid type of query request.\";\n \n+        if (req.command() != CLOSE_SQL_QUERY) {\n+            Integer pageSize = ((RestQueryRequest) req).pageSize();\n+\n+            if (pageSize == null)\n+                return new GridFinishedFuture<>(\n+                        new IgniteCheckedException(GridRestCommandHandlerAdapter.missingParameter(\"pageSize\"))\n+                );\n+        }\n+\n         switch (req.command()) {\n             case EXECUTE_SQL_QUERY:\n             case EXECUTE_SQL_FIELDS_QUERY:\n             case EXECUTE_SCAN_QUERY: {\n                 return ctx.closure().callLocalSafe(\n-                    new ExecuteQueryCallable(ctx, (RestQueryRequest)req, qryCurs), false);\n+                        new ExecuteQueryCallable(ctx, (RestQueryRequest) req, qryCurs), false);\n             }\n \n             case FETCH_SQL_QUERY: {\n                 return ctx.closure().callLocalSafe(\n-                    new FetchQueryCallable((RestQueryRequest)req, qryCurs), false);\n+                        new FetchQueryCallable((RestQueryRequest) req, qryCurs), false);\n             }\n \n             case CLOSE_SQL_QUERY: {\n                 return ctx.closure().callLocalSafe(\n-                    new CloseQueryCallable((RestQueryRequest)req, qryCurs), false);\n+                        new CloseQueryCallable((RestQueryRequest) req, qryCurs), false);\n             }\n         }\n ",
                "deletions": 3
            },
            {
                "sha": "75c74db557f3728ed16a5bf19ebb933c78a0dcf4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestQueryRequest.java",
                "blob_url": "https://github.com/apache/ignite/blob/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestQueryRequest.java",
                "raw_url": "https://github.com/apache/ignite/raw/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestQueryRequest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/RestQueryRequest.java?ref=bfa375bbc991c1d0eea9837952be5fee87e4b558",
                "patch": "@@ -88,7 +88,7 @@ public void pageSize(Integer pageSize) {\n     /**\n      * @return Page size.\n      */\n-    public int pageSize() {\n+    public Integer pageSize() {\n         return pageSize;\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "7e4cd828c8793d9035f15d00aa4f2ddfff3e5c1c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/rest/handlers/query/GridQueryCommandHandlerTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/test/java/org/apache/ignite/internal/processors/rest/handlers/query/GridQueryCommandHandlerTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/test/java/org/apache/ignite/internal/processors/rest/handlers/query/GridQueryCommandHandlerTest.java",
                "status": "added",
                "changes": 191,
                "additions": 191,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/rest/handlers/query/GridQueryCommandHandlerTest.java?ref=bfa375bbc991c1d0eea9837952be5fee87e4b558",
                "patch": "@@ -0,0 +1,191 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.rest.handlers.query;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.ConnectorConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.processors.rest.GridRestCommand;\n+import org.apache.ignite.internal.processors.rest.GridRestResponse;\n+import org.apache.ignite.internal.processors.rest.request.RestQueryRequest;\n+import org.apache.ignite.internal.processors.timeout.GridTimeoutProcessor;\n+import org.apache.ignite.testframework.junits.GridTestKernalContext;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+import java.util.Collection;\n+\n+/**\n+ * REST query command handler tests.\n+ */\n+public class GridQueryCommandHandlerTest extends GridCommonAbstractTest {\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrid();\n+\n+        ConnectorConfiguration connCfg = new ConnectorConfiguration();\n+\n+        connCfg.setIdleQueryCursorCheckFrequency(1000);\n+        connCfg.setIdleQueryCursorTimeout(1000);\n+\n+        grid().configuration().setConnectorConfiguration(connCfg);\n+\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        super.afterTestsStopped();\n+\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testSupportedCommands() throws Exception {\n+        GridTestKernalContext ctx = newContext(grid().configuration());\n+\n+        ctx.add(new GridTimeoutProcessor(ctx));\n+\n+        QueryCommandHandler cmdHnd = new QueryCommandHandler(ctx);\n+\n+        Collection<GridRestCommand> commands = cmdHnd.supportedCommands();\n+\n+        assertEquals(5, commands.size());\n+\n+        assertTrue(commands.contains(GridRestCommand.EXECUTE_SQL_QUERY));\n+        assertTrue(commands.contains(GridRestCommand.EXECUTE_SQL_FIELDS_QUERY));\n+        assertTrue(commands.contains(GridRestCommand.EXECUTE_SCAN_QUERY));\n+        assertTrue(commands.contains(GridRestCommand.FETCH_SQL_QUERY));\n+        assertTrue(commands.contains(GridRestCommand.CLOSE_SQL_QUERY));\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testUnsupportedCommands() throws Exception {\n+        GridTestKernalContext ctx = newContext(grid().configuration());\n+\n+        ctx.add(new GridTimeoutProcessor(ctx));\n+\n+        QueryCommandHandler cmdHnd = new QueryCommandHandler(ctx);\n+\n+        Collection<GridRestCommand> commands = cmdHnd.supportedCommands();\n+\n+        assertFalse(commands.contains(GridRestCommand.LOG));\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testNullCache() throws Exception {\n+        QueryCommandHandler cmdHnd = new QueryCommandHandler(grid().context());\n+\n+        Integer arg1 = 1000;\n+\n+        Object[] arr = new Object[] {arg1, arg1};\n+\n+        RestQueryRequest req = new RestQueryRequest();\n+\n+        req.command(GridRestCommand.EXECUTE_SQL_QUERY);\n+        req.queryType(RestQueryRequest.QueryType.SCAN);\n+        req.typeName(Integer.class.getName());\n+        req.pageSize(10);\n+        req.sqlQuery(\"salary+>+%3F+and+salary+<%3D+%3F\");\n+        req.arguments(arr);\n+        req.cacheName(null);\n+\n+        IgniteInternalFuture<GridRestResponse> resp = cmdHnd.handleAsync(req);\n+        resp.get();\n+\n+        assertEquals(\"Failed to find cache with name: null\", resp.result().getError());\n+        assertEquals(GridRestResponse.STATUS_FAILED, resp.result().getSuccessStatus());\n+        assertNull(resp.result().getResponse());\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testNullPageSize() throws Exception {\n+        grid().getOrCreateCache(getName());\n+\n+        QueryCommandHandler cmdHnd = new QueryCommandHandler(grid().context());\n+\n+        Integer arg1 = 1000;\n+\n+        Object[] arr = new Object[] {arg1, arg1};\n+\n+        RestQueryRequest req = new RestQueryRequest();\n+\n+        req.command(GridRestCommand.EXECUTE_SQL_QUERY);\n+        req.queryType(RestQueryRequest.QueryType.SCAN);\n+        req.typeName(Integer.class.getName());\n+\n+        req.pageSize(null);\n+        req.sqlQuery(\"salary+>+%3F+and+salary+<%3D+%3F\");\n+\n+        req.arguments(arr);\n+        req.cacheName(getName());\n+\n+        try {\n+            IgniteInternalFuture<GridRestResponse> resp = cmdHnd.handleAsync(req);\n+            resp.get();\n+\n+            fail(\"Expected exception not thrown.\");\n+        }\n+        catch (IgniteCheckedException e) {\n+            info(\"Got expected exception: \" + e);\n+        }\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testQuery() throws Exception {\n+        grid().getOrCreateCache(getName());\n+\n+        QueryCommandHandler cmdHnd = new QueryCommandHandler(grid().context());\n+\n+        Integer arg1 = 1000;\n+\n+        Object[] arr = new Object[] {arg1, arg1};\n+\n+        RestQueryRequest req = new RestQueryRequest();\n+\n+        req.command(GridRestCommand.EXECUTE_SQL_QUERY);\n+        req.queryType(RestQueryRequest.QueryType.SCAN);\n+        req.typeName(Integer.class.getName());\n+        req.pageSize(null);\n+        req.sqlQuery(\"salary+>+%3F+and+salary+<%3D+%3F\");\n+        req.arguments(arr);\n+        req.cacheName(getName());\n+        req.pageSize(10);\n+\n+        IgniteInternalFuture<GridRestResponse> resp = cmdHnd.handleAsync(req);\n+        resp.get();\n+\n+        assertNull(resp.result().getError());\n+        assertEquals(GridRestResponse.STATUS_SUCCESS, resp.result().getSuccessStatus());\n+        assertNotNull(resp.result().getResponse());\n+\n+        CacheQueryResult res = (CacheQueryResult) resp.result().getResponse();\n+\n+        assertTrue(res.getLast());\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "6263e8bee18a09e6e7be7f1ecc69d7f3f11ed076",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteRestHandlerTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteRestHandlerTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/bfa375bbc991c1d0eea9837952be5fee87e4b558/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteRestHandlerTestSuite.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteRestHandlerTestSuite.java?ref=bfa375bbc991c1d0eea9837952be5fee87e4b558",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.ignite.internal.processors.rest.handlers.cache.GridCacheAtomicCommandHandlerSelfTest;\n import org.apache.ignite.internal.processors.rest.handlers.cache.GridCacheCommandHandlerSelfTest;\n import org.apache.ignite.internal.processors.rest.handlers.log.GridLogCommandHandlerTest;\n+import org.apache.ignite.internal.processors.rest.handlers.query.GridQueryCommandHandlerTest;\n \n /**\n  * REST support tests.\n@@ -36,6 +37,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(GridCacheCommandHandlerSelfTest.class);\n         suite.addTestSuite(GridCacheAtomicCommandHandlerSelfTest.class);\n         suite.addTestSuite(GridLogCommandHandlerTest.class);\n+        suite.addTestSuite(GridQueryCommandHandlerTest.class);\n \n         return suite;\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# FIxed NPE in IgniteUtils.resolveIgniteUrl() (2).",
        "commit": "https://github.com/apache/ignite/commit/623709395072a61a3ed4164e1895a845c52dff02",
        "parent": "https://github.com/apache/ignite/commit/e986b62f2e5a29210fcf9f4b57e5fddc9559bfd8",
        "bug_id": "ignite_196",
        "file": [
            {
                "sha": "24d2f8a1f3da40dfa7592595609ff7c4e0483ce4",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "blob_url": "https://github.com/apache/ignite/blob/623709395072a61a3ed4164e1895a845c52dff02/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "raw_url": "https://github.com/apache/ignite/raw/623709395072a61a3ed4164e1895a845c52dff02/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=623709395072a61a3ed4164e1895a845c52dff02",
                "patch": "@@ -3208,11 +3208,15 @@ public static void setIgniteHome(@Nullable String path) {\n             }\n         }\n \n-        String locPath = (metaInf ? \"META-INF/\" : \"\") + path.replaceAll(\"\\\\\\\\\", \"/\");\n-\n         ClassLoader clsLdr = Thread.currentThread().getContextClassLoader();\n \n-        return clsLdr != null ? clsLdr.getResource(locPath) : null;\n+        if (clsLdr != null) {\n+            String locPath = (metaInf ? \"META-INF/\" : \"\") + path.replaceAll(\"\\\\\\\\\", \"/\");\n+\n+            return clsLdr.getResource(locPath);\n+        }\n+        else\n+            return null;\n     }\n \n     /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-exchange - fixed NPE on stop.",
        "commit": "https://github.com/apache/ignite/commit/4f430a15e420505ec3c00931f1408c3ed57120d1",
        "parent": "https://github.com/apache/ignite/commit/126ce4658cebc79d3211b9f21e5f642ed6712af6",
        "bug_id": "ignite_197",
        "file": [
            {
                "sha": "9418f70ec75b2ceb8a4219af0408af3f0175bb41",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "blob_url": "https://github.com/apache/ignite/blob/4f430a15e420505ec3c00931f1408c3ed57120d1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "raw_url": "https://github.com/apache/ignite/raw/4f430a15e420505ec3c00931f1408c3ed57120d1/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java?ref=4f430a15e420505ec3c00931f1408c3ed57120d1",
                "patch": "@@ -466,13 +466,21 @@ private void processAffinityAssignmentResponse(ClusterNode node, GridDhtAffinity\n      * @param updateSeq Update sequence.\n      */\n     public void onPartitionEvicted(GridDhtLocalPartition<K, V> part, boolean updateSeq) {\n-        top.onEvicted(part, updateSeq);\n+        if (!enterBusy())\n+            return;\n+\n+        try {\n+            top.onEvicted(part, updateSeq);\n \n-        if (cctx.events().isRecordable(EVT_CACHE_PRELOAD_PART_UNLOADED))\n-            cctx.events().addUnloadEvent(part.id());\n+            if (cctx.events().isRecordable(EVT_CACHE_PRELOAD_PART_UNLOADED))\n+                cctx.events().addUnloadEvent(part.id());\n \n-        if (updateSeq)\n-            cctx.shared().exchange().scheduleResendPartitions();\n+            if (updateSeq)\n+                cctx.shared().exchange().scheduleResendPartitions();\n+        }\n+        finally {\n+            leaveBusy();\n+        }\n     }\n \n     /**",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-7944 NPE in GridCacheGateway",
        "commit": "https://github.com/apache/ignite/commit/2f7278869b9af0c180b19046d7385802eeffa57b",
        "parent": "https://github.com/apache/ignite/commit/2e90c9c764a7c82afe554a8ebc5f286ccb8f4d07",
        "bug_id": "ignite_198",
        "file": [
            {
                "sha": "91a9efdd45d39beaef7825871735911f6ddce49e",
                "filename": "modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/2f7278869b9af0c180b19046d7385802eeffa57b/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/2f7278869b9af0c180b19046d7385802eeffa57b/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java?ref=2f7278869b9af0c180b19046d7385802eeffa57b",
                "patch": "@@ -103,7 +103,19 @@ protected GridCacheDistributionMode distributionMode() {\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        assertEquals(gridCount(), grid(0).nodes().size());\n+        GridTestUtils.waitForCondition(new PA() {\n+            @Override public boolean apply() {\n+                for (int i = 0; i < gridCount(); i++) {\n+                    if (grid(i).nodes().size() != gridCount())\n+                        return false;\n+                }\n+\n+                return true;\n+            }\n+        }, 3000);\n+\n+        for (int i = 0; i < gridCount(); i++)\n+            assertEquals(gridCount(), grid(i).nodes().size());\n \n         for (int i = 0; i < gridCount(); i++)\n             grid(i).cache(null).removeAll();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-7944 NPE in GridCacheGateway",
        "commit": "https://github.com/apache/ignite/commit/7376da38672962b7083932c7bc418742a4335628",
        "parent": "https://github.com/apache/ignite/commit/b65e33d1dcb06d6499c5e87bf1aadcd46084aca2",
        "bug_id": "ignite_199",
        "file": [
            {
                "sha": "18f4829ee8bb3a3ce3d649e9fb99032fc68e0570",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheGateway.java",
                "blob_url": "https://github.com/apache/ignite/blob/7376da38672962b7083932c7bc418742a4335628/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheGateway.java",
                "raw_url": "https://github.com/apache/ignite/raw/7376da38672962b7083932c7bc418742a4335628/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheGateway.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheGateway.java?ref=7376da38672962b7083932c7bc418742a4335628",
                "patch": "@@ -79,7 +79,15 @@ public void leave() {\n      */\n     @Nullable public GridCacheProjectionImpl<K, V> enter(@Nullable GridCacheProjectionImpl<K, V> prj) {\n         try {\n-            ctx.preloader().startFuture().get();\n+            GridCacheAdapter<K, V> cache = ctx.cache();\n+\n+            GridCachePreloader<K, V> preldr = cache != null ? cache.preloader() : null;\n+\n+            if (preldr == null)\n+                throw new IllegalStateException(\"Grid is in invalid state to perform this operation. \" +\n+                    \"It either not started yet or has already being or have stopped [gridName=\" + ctx.gridName() + ']');\n+\n+            preldr.startFuture().get();\n         }\n         catch (GridException e) {\n             throw new GridRuntimeException(\"Failed to wait for cache preloader start [cacheName=\" +",
                "deletions": 1
            },
            {
                "sha": "93b473a59a511b7af6a542b8052a2970ef58a7ed",
                "filename": "modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/GridCacheStopSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/7376da38672962b7083932c7bc418742a4335628/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/GridCacheStopSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/7376da38672962b7083932c7bc418742a4335628/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/GridCacheStopSelfTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/gridgain/grid/kernal/processors/cache/GridCacheStopSelfTest.java?ref=7376da38672962b7083932c7bc418742a4335628",
                "patch": "@@ -175,6 +175,16 @@ private void testStop(final boolean startTx) throws Exception {\n                     assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().startsWith(EXPECTED_MSG));\n                 }\n             }\n+\n+            try {\n+                cache.put(1, 1);\n+            }\n+            catch (IllegalStateException e) {\n+                if (!e.getMessage().startsWith(EXPECTED_MSG))\n+                    e.printStackTrace();\n+\n+                assertTrue(\"Unexpected error message: \" + e.getMessage(), e.getMessage().startsWith(EXPECTED_MSG));\n+            }\n         }\n     }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1717: NPE during running ScalarCreditRiskExample with portableMarshaller",
        "commit": "https://github.com/apache/ignite/commit/15da54b9e392791818c5419068e0761d7a78f613",
        "parent": "https://github.com/apache/ignite/commit/48de05989c858e8776a0947761486eed950bd8ce",
        "bug_id": "ignite_200",
        "file": [
            {
                "sha": "a43ebc31cc2b39a458f53646f5f022530b749427",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/portable/PortableWriterExImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/15da54b9e392791818c5419068e0761d7a78f613/modules/core/src/main/java/org/apache/ignite/internal/portable/PortableWriterExImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/15da54b9e392791818c5419068e0761d7a78f613/modules/core/src/main/java/org/apache/ignite/internal/portable/PortableWriterExImpl.java",
                "status": "modified",
                "changes": 66,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/portable/PortableWriterExImpl.java?ref=15da54b9e392791818c5419068e0761d7a78f613",
                "patch": "@@ -77,7 +77,7 @@\n import static org.apache.ignite.internal.portable.GridPortableMarshaller.UUID;\n import static org.apache.ignite.internal.portable.GridPortableMarshaller.UUID_ARR;\n \n- /**\n+/**\n  * Portable writer implementation.\n  */\n public class PortableWriterExImpl implements PortableWriter, PortableRawWriterEx, ObjectOutput {\n@@ -187,6 +187,16 @@ private PortableWriterExImpl(PortableContext ctx, WriterContext wCtx) {\n      * @throws PortableException In case of error.\n      */\n     void marshal(Object obj, boolean detached) throws PortableException {\n+        marshal(obj, detached, true);\n+    }\n+\n+    /**\n+     * @param obj Object.\n+     * @param detached Detached or not.\n+     * @param enableReplace Object replacing enabled flag.\n+     * @throws PortableException In case of error.\n+     */\n+    void marshal(Object obj, boolean detached, boolean enableReplace) throws PortableException {\n         assert obj != null;\n \n         cls = obj.getClass();\n@@ -218,11 +228,11 @@ void marshal(Object obj, boolean detached) throws PortableException {\n             return;\n         }\n \n-        if (desc.getWriteReplaceMethod() != null) {\n-            Object replace;\n+        if (enableReplace && desc.getWriteReplaceMethod() != null) {\n+            Object replacedObj;\n \n             try {\n-                replace = desc.getWriteReplaceMethod().invoke(obj);\n+                replacedObj = desc.getWriteReplaceMethod().invoke(obj);\n             }\n             catch (IllegalAccessException e) {\n                 throw new RuntimeException(e);\n@@ -234,21 +244,14 @@ void marshal(Object obj, boolean detached) throws PortableException {\n                 throw new PortableException(\"Failed to execute writeReplace() method on \" + obj, e);\n             }\n \n-            if (replace == null) {\n+            if (replacedObj == null) {\n                 doWriteByte(NULL);\n                 return;\n             }\n \n-            if (cls != replace.getClass()) {\n-                cls = replace.getClass();\n-\n-                desc = ctx.descriptorForClass(cls);\n-\n-                if (desc == null)\n-                    throw new PortableException(\"Object is not portable: [class=\" + cls + ']');\n-            }\n+            marshal(replacedObj, detached, false);\n \n-            obj = replace;\n+            return;\n         }\n \n         typeId = desc.typeId();\n@@ -301,7 +304,7 @@ void position(int pos) {\n         wCtx.out.position(pos);\n     }\n \n-     /**\n+    /**\n      * @param bytes Number of bytes to reserve.\n      * @return Offset.\n      */\n@@ -1740,7 +1743,7 @@ void writePortableObjectField(@Nullable PortableObjectImpl po) throws PortableEx\n         return reserve(LEN_INT);\n     }\n \n-     /** {@inheritDoc} */\n+    /** {@inheritDoc} */\n     @Override public void writeInt(int pos, int val) throws PortableException {\n         wCtx.out.writeInt(pos, val);\n     }\n@@ -1764,27 +1767,28 @@ private void writeFieldId(String fieldName, byte fieldType) throws PortableExcep\n         doWriteInt(id);\n     }\n \n-     /**\n-      * Attempts to write the object as a handle.\n-      *\n-      * @param obj Object to write.\n-      * @return {@code true} if the object has been written as a handle.\n-      */\n-     boolean tryWriteAsHandle(Object obj) {\n-         int handle = handle(obj);\n+    /**\n+     * Attempts to write the object as a handle.\n+     *\n+     * @param obj Object to write.\n+     * @return {@code true} if the object has been written as a handle.\n+     */\n+    boolean tryWriteAsHandle(Object obj) {\n+        int handle = handle(obj);\n \n-         if (handle >= 0) {\n-             doWriteByte(GridPortableMarshaller.HANDLE);\n-             doWriteInt(handle);\n+        if (handle >= 0) {\n+            doWriteByte(GridPortableMarshaller.HANDLE);\n+            doWriteInt(handle);\n \n-             return true;\n-         }\n+            return true;\n+        }\n \n-         return false;\n-     }\n+        return false;\n+    }\n \n     /**\n      * Create new writer with same context.\n+     *\n      * @param typeId type\n      * @return New writer.\n      */",
                "deletions": 31
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-32: Fixed NPE for indexes.",
        "commit": "https://github.com/apache/ignite/commit/7871d381aedf69de53d66540ff833c5f2df84f75",
        "parent": "https://github.com/apache/ignite/commit/f304e00c624c298b1fb348fdda36a090046614c4",
        "bug_id": "ignite_201",
        "file": [
            {
                "sha": "27e1382e1e02787ceb17714fe8ceffda1f76a5fa",
                "filename": "modules/schema-load/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java",
                "blob_url": "https://github.com/apache/ignite/blob/7871d381aedf69de53d66540ff833c5f2df84f75/modules/schema-load/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java",
                "raw_url": "https://github.com/apache/ignite/raw/7871d381aedf69de53d66540ff833c5f2df84f75/modules/schema-load/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/schema-load/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java?ref=7871d381aedf69de53d66540ff833c5f2df84f75",
                "patch": "@@ -211,8 +211,17 @@ private static PojoDescriptor parseTable(PojoDescriptor parent, DatabaseMetaData\n \n         try (ResultSet idxs = dbMeta.getIndexInfo(catalog, schema, tbl, false, true)) {\n             while (idxs.next()) {\n-                String idx = toJavaFieldName(idxs.getString(6));\n-                String col = toJavaFieldName(idxs.getString(9));\n+                String idxName = idxs.getString(6);\n+\n+                String colName = idxs.getString(9);\n+\n+                if (idxName == null || colName == null)\n+                    continue;\n+\n+                String idx = toJavaFieldName(idxName);\n+\n+                String col = toJavaFieldName(colName);\n+\n                 String askOrDesc = idxs.getString(10);\n \n                 LinkedHashMap<String, IgniteBiTuple<Class<?>, Boolean>> idxCols = groups.get(idx);",
                "deletions": 2
            },
            {
                "sha": "9f1b211892e4a5849f12f54895a14f0eeefb008b",
                "filename": "modules/schema-load/src/main/java/org/apache/ignite/schema/ui/MessageBox.java",
                "blob_url": "https://github.com/apache/ignite/blob/7871d381aedf69de53d66540ff833c5f2df84f75/modules/schema-load/src/main/java/org/apache/ignite/schema/ui/MessageBox.java",
                "raw_url": "https://github.com/apache/ignite/raw/7871d381aedf69de53d66540ff833c5f2df84f75/modules/schema-load/src/main/java/org/apache/ignite/schema/ui/MessageBox.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/schema-load/src/main/java/org/apache/ignite/schema/ui/MessageBox.java?ref=7871d381aedf69de53d66540ff833c5f2df84f75",
                "patch": "@@ -232,7 +232,8 @@ public static void warningDialog(Stage owner, String msg) {\n      * @param e Optional exception to show.\n      */\n     public static void errorDialog(Stage owner, String msg, Throwable e) {\n-        showDialog(owner, MessageType.ERROR,\n-            (e != null && e.getMessage() != null) ? msg + \"\\n\" + e.getMessage() : msg, false);\n+        String exMsg = e != null ? (e.getMessage() != null ? e.getMessage() : e.getClass().getName()) : null;\n+\n+        showDialog(owner, MessageType.ERROR, exMsg != null ? msg + \"\\n\" + exMsg : msg, false);\n     }\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-7873 Fix ggfs NPEs",
        "commit": "https://github.com/apache/ignite/commit/5a8a8cfe488359086b24bea528f21d787da15896",
        "parent": "https://github.com/apache/ignite/commit/1392ea90f513d38d59e119f436ab41f5173ef335",
        "bug_id": "ignite_202",
        "file": [
            {
                "sha": "8ed088bab2a011f42eb3c89b38aeddac900c1235",
                "filename": "modules/core/java/org/gridgain/grid/ggfs/GridGgfs.java",
                "blob_url": "https://github.com/apache/ignite/blob/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/ggfs/GridGgfs.java",
                "raw_url": "https://github.com/apache/ignite/raw/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/ggfs/GridGgfs.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/ggfs/GridGgfs.java?ref=5a8a8cfe488359086b24bea528f21d787da15896",
                "patch": "@@ -56,6 +56,11 @@\n     /** Property: permission. */\n     public static final String PROP_PERMISSION = \"permission\";\n \n+    /**\n+     * Kernal start callback.\n+     */\n+    public void onKernalStart();\n+\n     /**\n      * Stops GGFS cleaning all used resources.\n      */",
                "deletions": 0
            },
            {
                "sha": "7f88c1aa3899b588d7ed940d86e49b9aaa1ce122",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsImpl.java?ref=5a8a8cfe488359086b24bea528f21d787da15896",
                "patch": "@@ -133,7 +133,6 @@\n         log = ggfsCtx.kernalContext().log(GridGgfsImpl.class);\n         evts = ggfsCtx.kernalContext().event();\n         locNodeId = ggfsCtx.kernalContext().localNodeId();\n-        locNode = ggfsCtx.kernalContext().discovery().localNode();\n         meta = ggfsCtx.meta();\n         data = ggfsCtx.data();\n \n@@ -260,6 +259,11 @@\n         ggfsCtx.kernalContext().event().addLocalEventListener(delDiscoLsnr, EVT_NODE_LEFT, EVT_NODE_FAILED);\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public void onKernalStart() {\n+        locNode = ggfsCtx.kernalContext().discovery().localNode();\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void stop() {\n         workerLock.block();",
                "deletions": 1
            },
            {
                "sha": "0f1175e751d5f0ef5813fc6fac00d65ded7215a1",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsMetaManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsMetaManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/5a8a8cfe488359086b24bea528f21d787da15896/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsMetaManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/ggfs/GridGgfsMetaManager.java?ref=5a8a8cfe488359086b24bea528f21d787da15896",
                "patch": "@@ -81,8 +81,6 @@\n \n         locNodeId = ggfsCtx.kernalContext().localNodeId();\n \n-        locNode = ggfsCtx.kernalContext().discovery().localNode();\n-\n         sampling = new GridGgfsSamplingKey(cfg.getName());\n \n         assert metaCache != null;\n@@ -94,6 +92,8 @@\n \n     /** {@inheritDoc} */\n     @Override protected void onKernalStart0() throws GridException {\n+        locNode = ggfsCtx.kernalContext().discovery().localNode();\n+\n         // Start background delete worker.\n         delWorker = new GridGgfsDeleteWorker(ggfsCtx);\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-1088 Implemented store for multi jvm tests (fixed NPE)\n(cherry picked from commit d31a476)",
        "commit": "https://github.com/apache/ignite/commit/ade57eaf5b77f779642be424d8cdf858a327ce2d",
        "parent": "https://github.com/apache/ignite/commit/2f78346e0e3d6a1cb9483b66144175c826a1ff5f",
        "bug_id": "ignite_203",
        "file": [
            {
                "sha": "d58e560fed72442cad2cf1e2b3b6892c53a42f50",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/ade57eaf5b77f779642be424d8cdf858a327ce2d/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/ade57eaf5b77f779642be424d8cdf858a327ce2d/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractSelfTest.java?ref=ade57eaf5b77f779642be424d8cdf858a327ce2d",
                "patch": "@@ -220,16 +220,18 @@ void initStoreStrategy() throws IgniteCheckedException {\n     protected CacheConfiguration cacheConfiguration(String gridName) throws Exception {\n         CacheConfiguration cfg = defaultCacheConfiguration();\n \n-        Factory<? extends CacheStore<Object, Object>> storeFactory = storeStgy.getStoreFactory();\n+        if (storeStgy != null) {\n+            Factory<? extends CacheStore<Object, Object>> storeFactory = storeStgy.getStoreFactory();\n \n-        CacheStore<?, ?> store = storeFactory.create();\n+            CacheStore<?, ?> store = storeFactory.create();\n \n-        if (store != null) {\n-            cfg.setCacheStoreFactory(storeFactory);\n-            cfg.setReadThrough(true);\n-            cfg.setWriteThrough(true);\n-            cfg.setLoadPreviousValue(true);\n-            storeStgy.updateCacheConfiguration(cfg);\n+            if (store != null) {\n+                cfg.setCacheStoreFactory(storeFactory);\n+                cfg.setReadThrough(true);\n+                cfg.setWriteThrough(true);\n+                cfg.setLoadPreviousValue(true);\n+                storeStgy.updateCacheConfiguration(cfg);\n+            }\n         }\n \n         cfg.setSwapEnabled(swapEnabled());",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-1479 Platform .Net: NPE in PlatformAbstractService upon service cancellation",
        "commit": "https://github.com/apache/ignite/commit/a0cd9afd1cbf471ced0363416f4577156a7296ea",
        "parent": "https://github.com/apache/ignite/commit/b4c515e62bc8412a2859a5a771ef3c4b38691529",
        "bug_id": "ignite_204",
        "file": [
            {
                "sha": "dd5c28a3df3a9c2264cb6ab04c9da8cd39069ec4",
                "filename": "modules/platform/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformAbstractService.java",
                "blob_url": "https://github.com/apache/ignite/blob/a0cd9afd1cbf471ced0363416f4577156a7296ea/modules/platform/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformAbstractService.java",
                "raw_url": "https://github.com/apache/ignite/raw/a0cd9afd1cbf471ced0363416f4577156a7296ea/modules/platform/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformAbstractService.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platform/src/main/java/org/apache/ignite/internal/processors/platform/services/PlatformAbstractService.java?ref=a0cd9afd1cbf471ced0363416f4577156a7296ea",
                "patch": "@@ -212,7 +212,9 @@ private void writeServiceContext(ServiceContext ctx, PortableRawWriterEx writer)\n     @SuppressWarnings(\"UnusedDeclaration\")\n     @IgniteInstanceResource\n     public void setIgniteInstance(Ignite ignite) {\n-        platformCtx = PlatformUtils.platformContext(ignite);\n+        platformCtx = ignite != null\n+            ? PlatformUtils.platformContext(ignite)\n+            : null;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "gg-8022 - NPE in getClusterMetrics fix",
        "commit": "https://github.com/apache/ignite/commit/555b971f26f35df5679461f1ea89c12ab529c38c",
        "parent": "https://github.com/apache/ignite/commit/ca312333da7bf4563a49d74014f55d69c5f68caf",
        "bug_id": "ignite_205",
        "file": [
            {
                "sha": "f5c9cb51efdc200080e39ec6ff1a86f549ddc47c",
                "filename": "modules/hadoop/src/main/java/org/gridgain/client/hadoop/GridHadoopClientProtocol.java",
                "blob_url": "https://github.com/apache/ignite/blob/555b971f26f35df5679461f1ea89c12ab529c38c/modules/hadoop/src/main/java/org/gridgain/client/hadoop/GridHadoopClientProtocol.java",
                "raw_url": "https://github.com/apache/ignite/raw/555b971f26f35df5679461f1ea89c12ab529c38c/modules/hadoop/src/main/java/org/gridgain/client/hadoop/GridHadoopClientProtocol.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/client/hadoop/GridHadoopClientProtocol.java?ref=555b971f26f35df5679461f1ea89c12ab529c38c",
                "patch": "@@ -98,7 +98,7 @@\n \n     /** {@inheritDoc} */\n     @Override public ClusterMetrics getClusterMetrics() throws IOException, InterruptedException {\n-        return null;\n+        return new ClusterMetrics(0, 0, 0, 0, 0, 0, 1000, 1000, 1, 100, 0, 0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sprint-23-6.1.7 - Fixed NPE.",
        "commit": "https://github.com/apache/ignite/commit/c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d",
        "parent": "https://github.com/apache/ignite/commit/b8225e7236affb622345519491601ced5aa8d164",
        "bug_id": "ignite_206",
        "file": [
            {
                "sha": "d48f2ddd319dc351232006292a53408ba5793cc0",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/GridProjectionAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d/modules/core/src/main/java/org/gridgain/grid/kernal/GridProjectionAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d/modules/core/src/main/java/org/gridgain/grid/kernal/GridProjectionAdapter.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/GridProjectionAdapter.java?ref=c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d",
                "patch": "@@ -497,7 +497,8 @@ private GridProjection forOthers(Collection<UUID> excludeIds) {\n \n     /** {@inheritDoc} */\n     @Override public GridProjectionEx forSubjectId(UUID subjId) {\n-        assert subjId != null;\n+        if (subjId == null)\n+            return this;\n \n         guard();\n ",
                "deletions": 1
            },
            {
                "sha": "b7b52332e8182c660a2050a32ddb0196aff55bbb",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/rest/handlers/cache/GridCacheCommandHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/rest/handlers/cache/GridCacheCommandHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d/modules/core/src/main/java/org/gridgain/grid/kernal/processors/rest/handlers/cache/GridCacheCommandHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/rest/handlers/cache/GridCacheCommandHandler.java?ref=c35d8e645ef7b4e51c4ff3bbb6dce88cb623466d",
                "patch": "@@ -365,8 +365,6 @@ public GridCacheCommandHandler(GridKernalContext ctx) {\n         final String cacheName,\n         final Object key,\n         final CacheCommand op) throws GridException {\n-        assert clientId != null;\n-\n         final boolean locExec = destId == null || destId.equals(ctx.localNodeId()) ||\n             ctx.cache().cache(cacheName) != null;\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-11615 Incremental backups: Track changed pages for incremental backups\n-skip marking page as changed while restoration\n-fix npe",
        "commit": "https://github.com/apache/ignite/commit/dc7df2e2ce4680b10c093e1ceb8b80a8ead3399e",
        "parent": "https://github.com/apache/ignite/commit/4d8d78f06514129d3d38c9dca9456baa3b05b104",
        "bug_id": "ignite_207",
        "file": [
            {
                "sha": "73d949d91b17ece9717bd2c070f3c1c0ba253057",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "blob_url": "https://github.com/apache/ignite/blob/dc7df2e2ce4680b10c093e1ceb8b80a8ead3399e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "raw_url": "https://github.com/apache/ignite/raw/dc7df2e2ce4680b10c093e1ceb8b80a8ead3399e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=dc7df2e2ce4680b10c093e1ceb8b80a8ead3399e",
                "patch": "@@ -183,7 +183,7 @@ public GridCacheSharedContext(\n \n         locStoreCnt = new AtomicInteger();\n \n-        if (dbMgr.persistenceEnabled())\n+        if (dbMgr != null && dbMgr.persistenceEnabled())\n             dhtAtomicUpdCnt = new AtomicIntegerArray(kernalCtx.config().getSystemThreadPoolSize());\n \n         msgLog = kernalCtx.log(CU.CACHE_MSG_LOG_CATEGORY);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# ignite-sprint-6 fixed NPE in comm spi unit tests",
        "commit": "https://github.com/apache/ignite/commit/895771a79d8acca3baf06c23bf3f82483ec62d6f",
        "parent": "https://github.com/apache/ignite/commit/ef4abeba881f079cab08af9ade99fe52ecf5d26d",
        "bug_id": "ignite_208",
        "file": [
            {
                "sha": "bbb9b1ca06b92a3186579141f26b41b8bcbb1d20",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=895771a79d8acca3baf06c23bf3f82483ec62d6f",
                "patch": "@@ -1458,8 +1458,10 @@ public CommunicationListener getListener() {\n                     }\n                 };\n \n+                boolean clientMode = Boolean.TRUE.equals(ignite.configuration().isClientMode());\n+\n                 IgniteBiInClosure<GridNioSession, Integer> queueSizeMonitor =\n-                    !ignite.configuration().isClientMode() && slowClientQueueLimit > 0 ?\n+                    !clientMode && slowClientQueueLimit > 0 ?\n                     new CI2<GridNioSession, Integer>() {\n                         @Override public void apply(GridNioSession ses, Integer qSize) {\n                             checkClientQueueSize(ses, qSize);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8366 NPE in GridHadoopJobTrackerSelfTest.testTaskWithCombiner",
        "commit": "https://github.com/apache/ignite/commit/8ede36482b082bca583ea5be036a75d637f39173",
        "parent": "https://github.com/apache/ignite/commit/17fd3222c57001f584dc38fa2bc3cd6178b5f18a",
        "bug_id": "ignite_209",
        "file": [
            {
                "sha": "2c732695d84b8ed53899cd9ae07f5e9dc4cc1d15",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java?ref=8ede36482b082bca583ea5be036a75d637f39173",
                "patch": "@@ -139,7 +139,7 @@\n         if (meta.phase() == GridHadoopJobPhase.PHASE_COMPLETE) {\n             Collection<GridFuture<?>> futures = jobs.remove(job.id());\n \n-            assert futures.isEmpty();\n+            assert futures == null || futures.isEmpty();\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "6f206a46d01c113639d4c3914a7f63c0e39b2c58",
                "filename": "modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java?ref=8ede36482b082bca583ea5be036a75d637f39173",
                "patch": "@@ -85,7 +85,6 @@\n     @Override public GridHadoopConfiguration hadoopConfiguration(String gridName) {\n         GridHadoopConfiguration cfg = super.hadoopConfiguration(gridName);\n \n-        cfg.setExternalExecution(false);\n         cfg.setJobFactory(new HadoopTestJobFactory());\n         cfg.setMapReducePlanner(new GridHadoopTestRoundRobinMrPlanner());\n         cfg.setExternalExecution(false);",
                "deletions": 1
            },
            {
                "sha": "519a0893879a2ef0fe1c41ca63aa6557bdd4ca0d",
                "filename": "modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/8ede36482b082bca583ea5be036a75d637f39173/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java?ref=8ede36482b082bca583ea5be036a75d637f39173",
                "patch": "@@ -226,15 +226,6 @@ private void prepareFile(String fileName, int lineCnt) throws Exception {\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public GridHadoopConfiguration hadoopConfiguration(String gridName) {\n-        GridHadoopConfiguration cfg = super.hadoopConfiguration(gridName);\n-\n-        cfg.setExternalExecution(false);\n-\n-        return cfg;\n-    }\n-\n     /**\n      * @throws Exception If failed.\n      */",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8366 NPE in GridHadoopJobTrackerSelfTest.testTaskWithCombiner",
        "commit": "https://github.com/apache/ignite/commit/a3d8feec9c0d1fe784d7be116f56b84986ab344c",
        "parent": "https://github.com/apache/ignite/commit/252ad756fe102515c574f37958e0fac63dd83308",
        "bug_id": "ignite_210",
        "file": [
            {
                "sha": "7b061d26722b3975df88ab5b6f4083026484e9f5",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java",
                "status": "modified",
                "changes": 43,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopEmbeddedTaskExecutor.java?ref=a3d8feec9c0d1fe784d7be116f56b84986ab344c",
                "patch": "@@ -11,7 +11,6 @@\n \n import org.gridgain.grid.*;\n import org.gridgain.grid.hadoop.*;\n-import org.gridgain.grid.kernal.processors.hadoop.*;\n import org.gridgain.grid.kernal.processors.hadoop.jobtracker.*;\n import org.gridgain.grid.util.*;\n import org.gridgain.grid.util.lang.*;\n@@ -26,7 +25,7 @@\n /**\n  * Task executor.\n  */\n-public class GridHadoopTaskExecutor extends GridHadoopComponent {\n+public class GridHadoopEmbeddedTaskExecutor extends GridHadoopTaskExecutorAdapter {\n     /** Job tracker. */\n     private GridHadoopJobTracker jobTracker;\n \n@@ -40,13 +39,8 @@\n         jobTracker = ctx.jobTracker();\n     }\n \n-    /**\n-     * Runs tasks.\n-     *\n-     * @param job Job.\n-     * @param tasks Tasks.\n-     */\n-    public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n+    /** {@inheritDoc} */\n+    @Override public void run(final GridHadoopJob job, Collection<GridHadoopTaskInfo> tasks) {\n         if (log.isDebugEnabled())\n             log.debug(\"Submitting tasks for local execution [locNodeId=\" + ctx.localNodeId() +\n                 \", tasksCnt=\" + tasks.size() + ']');\n@@ -61,24 +55,24 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n             assert extractedCol == null;\n         }\n \n-        for (final GridHadoopTask task : tasks) {\n-            assert task != null;\n+        for (final GridHadoopTaskInfo info : tasks) {\n+            assert info != null;\n \n             GridFuture<GridFuture<?>> fut = ctx.kernalContext().closure().callLocalSafe(new GridPlainCallable<GridFuture<?>>() {\n                 @Override public GridFuture<?> call() throws Exception {\n-                    GridHadoopTaskInfo info = task.info();\n-\n                     try (GridHadoopTaskOutput out = createOutput(info);\n                          GridHadoopTaskInput in = createInput(info)) {\n-                        GridHadoopTaskContext taskCtx = new GridHadoopTaskContext(ctx.kernalContext(), job, in, out);\n+                        GridHadoopTaskContext taskCtx = new GridHadoopTaskContext(job, in, out);\n+\n+                        GridHadoopTask task = job.createTask(info);\n \n                         if (log.isDebugEnabled())\n                             log.debug(\"Running task: \" + task);\n \n                         task.run(taskCtx);\n                     }\n                     catch (Exception e) {\n-                        U.error(log, \"Failed to execute task: \" + task.info(), e);\n+                        U.error(log, \"Failed to execute task: \" + info, e);\n \n                         throw e;\n                     }\n@@ -90,8 +84,8 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n             futures.add(fut);\n \n             fut.listenAsync(new CIX1<GridFuture<?>>() {\n-                @Override public void applyx(GridFuture<?> f) throws GridException {\n-                    Collection<GridFuture<?>> futs = jobs.get(task.info().jobId());\n+                @Override public void applyx(GridFuture<?> f) {\n+                    Collection<GridFuture<?>> futs = jobs.get(info.jobId());\n \n                     futs.remove(f);\n \n@@ -101,15 +95,15 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n                     try {\n                         f.get();\n                     }\n-                    catch (GridFutureCancelledException e) {\n+                    catch (GridFutureCancelledException ignored) {\n                         state = CANCELED;\n                     }\n                     catch (Throwable e) {\n                         state = FAILED;\n                         err = e;\n                     }\n \n-                    jobTracker.onTaskFinished(task.info(), new GridHadoopTaskStatus(state, err));\n+                    jobTracker.onTaskFinished(info, new GridHadoopTaskStatus(state, err));\n                 }\n             });\n         }\n@@ -125,7 +119,7 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n      *\n      * @param jobId Job ID to cancel.\n      */\n-    public void cancelTasks(GridHadoopJobId jobId) {\n+    @Override public void cancelTasks(GridHadoopJobId jobId) {\n         Collection<GridFuture<?>> futures = jobs.get(jobId);\n \n         if (futures != null) {\n@@ -140,6 +134,15 @@ public void cancelTasks(GridHadoopJobId jobId) {\n         }\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public void onJobStateChanged(GridHadoopJob job, GridHadoopJobMetadata meta) {\n+        if (meta.phase() == GridHadoopJobPhase.PHASE_COMPLETE) {\n+            Collection<GridFuture<?>> futures = jobs.remove(job.id());\n+\n+            assert futures.isEmpty();\n+        }\n+    }\n+\n     /**\n      * Creates task output.\n      *",
                "deletions": 20
            },
            {
                "sha": "1d9026385ee1ccf67354c5e009081909058cd3cf",
                "filename": "modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopJobTrackerSelfTest.java?ref=a3d8feec9c0d1fe784d7be116f56b84986ab344c",
                "patch": "@@ -85,6 +85,7 @@\n     @Override public GridHadoopConfiguration hadoopConfiguration(String gridName) {\n         GridHadoopConfiguration cfg = super.hadoopConfiguration(gridName);\n \n+        cfg.setExternalExecution(false);\n         cfg.setJobFactory(new HadoopTestJobFactory());\n         cfg.setMapReducePlanner(new GridHadoopTestRoundRobinMrPlanner());\n ",
                "deletions": 0
            },
            {
                "sha": "eaadf4afd964f81407258b8efc8dc62839d1b963",
                "filename": "modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/a3d8feec9c0d1fe784d7be116f56b84986ab344c/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/test/java/org/gridgain/grid/kernal/processors/hadoop/GridHadoopTaskExecutionSelfTest.java?ref=a3d8feec9c0d1fe784d7be116f56b84986ab344c",
                "patch": "@@ -217,6 +217,15 @@ private void prepareFile(String fileName, int lineCnt) throws Exception {\n         }\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public GridHadoopConfiguration hadoopConfiguration(String gridName) {\n+        GridHadoopConfiguration cfg = super.hadoopConfiguration(gridName);\n+\n+        cfg.setExternalExecution(false);\n+\n+        return cfg;\n+    }\n+\n     /**\n      * @throws Exception If failed.\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8366 NPE in GridHadoopJobTrackerSelfTest.testTaskWithCombiner",
        "commit": "https://github.com/apache/ignite/commit/41a5236a4baa52f30661ababef6f50798a4a35dc",
        "parent": "https://github.com/apache/ignite/commit/9ca8d95a1d75d614a4913cd36542db1df9cdf712",
        "bug_id": "ignite_211",
        "file": [
            {
                "sha": "d32c2f743b525f8d20bfaccc2e5852d67473bc6f",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/41a5236a4baa52f30661ababef6f50798a4a35dc/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/41a5236a4baa52f30661ababef6f50798a4a35dc/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java?ref=41a5236a4baa52f30661ababef6f50798a4a35dc",
                "patch": "@@ -51,6 +51,11 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n             log.debug(\"Submitting tasks for local execution [locNodeId=\" + ctx.localNodeId() +\n                 \", tasksCnt=\" + tasks.size() + ']');\n \n+        for (Map.Entry<GridHadoopJobId, Collection<GridFuture<?>>> entry : jobs.entrySet()) {\n+            if (entry.getValue().isEmpty())\n+                jobs.remove(entry.getKey());\n+        }\n+\n         Collection<GridFuture<?>> futures = jobs.get(job.id());\n \n         if (futures == null) {\n@@ -98,9 +103,6 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n \n                     futs.remove(f);\n \n-                    if (futs.isEmpty())\n-                        jobs.remove(task.info().jobId());\n-\n                     GridHadoopTaskState state = COMPLETED;\n                     Throwable err = null;\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8366 NPE in GridHadoopJobTrackerSelfTest.testTaskWithCombiner",
        "commit": "https://github.com/apache/ignite/commit/9fee6c0de119d00352729f30df331cfd16c773b7",
        "parent": "https://github.com/apache/ignite/commit/4f5f6c7927c34f4c6eafc2f9a1d492644dab28b4",
        "bug_id": "ignite_212",
        "file": [
            {
                "sha": "4b0c1bb0f2fe1a575b00f1bb612c944544a03c9b",
                "filename": "modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "blob_url": "https://github.com/apache/ignite/blob/9fee6c0de119d00352729f30df331cfd16c773b7/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "raw_url": "https://github.com/apache/ignite/raw/9fee6c0de119d00352729f30df331cfd16c773b7/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/gridgain/grid/kernal/processors/hadoop/taskexecutor/GridHadoopTaskExecutor.java?ref=9fee6c0de119d00352729f30df331cfd16c773b7",
                "patch": "@@ -51,6 +51,11 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n             log.debug(\"Submitting tasks for local execution [locNodeId=\" + ctx.localNodeId() +\n                 \", tasksCnt=\" + tasks.size() + ']');\n \n+        for (Map.Entry<GridHadoopJobId, Collection<GridFuture<?>>> entry : jobs.entrySet()) {\n+            if (entry.getValue().isEmpty())\n+                jobs.remove(entry.getKey());\n+        }\n+\n         Collection<GridFuture<?>> futures = jobs.get(job.id());\n \n         if (futures == null) {\n@@ -95,9 +100,6 @@ public void run(final GridHadoopJob job, Collection<GridHadoopTask> tasks) {\n \n                     futs.remove(f);\n \n-                    if (futs.isEmpty())\n-                        jobs.remove(task.info().jobId());\n-\n                     GridHadoopTaskState state = COMPLETED;\n                     Throwable err = null;\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-8244 Fix NPE in GridOptimizedClassResolver",
        "commit": "https://github.com/apache/ignite/commit/1780c19da109bfd5ac1e73a02f6741e2c0342708",
        "parent": "https://github.com/apache/ignite/commit/88ebdf3061b1710eb273078a34b56a4a81504724",
        "bug_id": "ignite_213",
        "file": [
            {
                "sha": "2d31bb0b23a820e4d086b08d8dd838f9daa9b8f0",
                "filename": "modules/core/src/main/java/org/gridgain/grid/marshaller/optimized/GridOptimizedClassResolver.java",
                "blob_url": "https://github.com/apache/ignite/blob/1780c19da109bfd5ac1e73a02f6741e2c0342708/modules/core/src/main/java/org/gridgain/grid/marshaller/optimized/GridOptimizedClassResolver.java",
                "raw_url": "https://github.com/apache/ignite/raw/1780c19da109bfd5ac1e73a02f6741e2c0342708/modules/core/src/main/java/org/gridgain/grid/marshaller/optimized/GridOptimizedClassResolver.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/marshaller/optimized/GridOptimizedClassResolver.java?ref=1780c19da109bfd5ac1e73a02f6741e2c0342708",
                "patch": "@@ -290,7 +290,11 @@ static GridOptimizedClassDescriptor readClass(DataInput in, ClassLoader clsLdr)\n                 T3<String, Class<?>, GridOptimizedClassDescriptor> usrT;\n \n                 try {\n-                    usrT = usrId2Name != null ? usrId2Name[usrId] : null;\n+                    if (usrId2Name != null)\n+                        usrT = usrId2Name[usrId];\n+                    else\n+                        throw new ClassNotFoundException(\"Failed to find user defined class ID \" +\n+                            \"(make sure to register identical classes on all nodes for optimization): \" + usrId);\n                 }\n                 catch (ArrayIndexOutOfBoundsException e) {\n                     throw new ClassNotFoundException(\"Failed to find user defined class ID \" +",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# ignite-sprint-5 potential NPE in syncFuture listener",
        "commit": "https://github.com/apache/ignite/commit/82cfb47cd652895d517dae50d670f13f7fcb9065",
        "parent": "https://github.com/apache/ignite/commit/45566fe9879f0055008b9c6bb40fd6d6926472cb",
        "bug_id": "ignite_214",
        "file": [
            {
                "sha": "1aef18cb96d6ba6ea385cfd4068b8ff891f66379",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "blob_url": "https://github.com/apache/ignite/blob/82cfb47cd652895d517dae50d670f13f7fcb9065/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "raw_url": "https://github.com/apache/ignite/raw/82cfb47cd652895d517dae50d670f13f7fcb9065/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java?ref=82cfb47cd652895d517dae50d670f13f7fcb9065",
                "patch": "@@ -19,6 +19,7 @@\n \n import org.apache.ignite.*;\n import org.apache.ignite.cluster.*;\n+import org.apache.ignite.configuration.*;\n import org.apache.ignite.events.*;\n import org.apache.ignite.internal.*;\n import org.apache.ignite.internal.cluster.*;\n@@ -227,12 +228,14 @@ public GridDhtPreloader(GridCacheContext<?, ?> cctx) {\n \n             final long start = U.currentTimeMillis();\n \n-            if (cctx.config().getRebalanceDelay() >= 0) {\n-                U.log(log, \"Starting rebalancing in \" + cctx.config().getRebalanceMode() + \" mode: \" + cctx.name());\n+            final CacheConfiguration cfg = cctx.config();\n+\n+            if (cfg.getRebalanceDelay() >= 0) {\n+                U.log(log, \"Starting rebalancing in \" + cfg.getRebalanceMode() + \" mode: \" + cctx.name());\n \n                 demandPool.syncFuture().listen(new CI1<Object>() {\n                     @Override public void apply(Object t) {\n-                        U.log(log, \"Completed rebalancing in \" + cctx.config().getRebalanceMode() + \" mode \" +\n+                        U.log(log, \"Completed rebalancing in \" + cfg.getRebalanceMode() + \" mode \" +\n                             \"[cache=\" + cctx.name() + \", time=\" + (U.currentTimeMillis() - start) + \" ms]\");\n                     }\n                 });",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-7873 Fix NPEs found by TC",
        "commit": "https://github.com/apache/ignite/commit/11e81e6bc5df20905519a10aef946c04a285658c",
        "parent": "https://github.com/apache/ignite/commit/c4e21a02fab22da3cf6bbe3c85fc87ca01476fee",
        "bug_id": "ignite_215",
        "file": [
            {
                "sha": "3d225007f00b49a99bf22c9517d36fc30751afa2",
                "filename": "modules/core/java/org/gridgain/grid/kernal/managers/deployment/GridDeploymentPerLoaderStore.java",
                "blob_url": "https://github.com/apache/ignite/blob/11e81e6bc5df20905519a10aef946c04a285658c/modules/core/java/org/gridgain/grid/kernal/managers/deployment/GridDeploymentPerLoaderStore.java",
                "raw_url": "https://github.com/apache/ignite/raw/11e81e6bc5df20905519a10aef946c04a285658c/modules/core/java/org/gridgain/grid/kernal/managers/deployment/GridDeploymentPerLoaderStore.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/managers/deployment/GridDeploymentPerLoaderStore.java?ref=11e81e6bc5df20905519a10aef946c04a285658c",
                "patch": "@@ -282,7 +282,7 @@ else if (d.sequenceNumber() > meta.sequenceNumber()) {\n                     false);\n \n                 dep = new IsolatedDeployment(meta.deploymentMode(), clsLdr, meta.classLoaderId(),\n-                    meta.userVersion(), meta.senderNodeId(), meta.className());\n+                    meta.userVersion(), snd, meta.className());\n \n                 cache.put(meta.classLoaderId(), dep);\n \n@@ -386,21 +386,21 @@ private void scheduleUndeploy(final IsolatedDeployment dep, long timeout) {\n      */\n     private class IsolatedDeployment extends GridDeployment {\n         /** Sender node ID. */\n-        private final UUID sndNodeId;\n+        private final GridNode sndNode;\n \n         /**\n          * @param depMode Deployment mode.\n          * @param clsLdr Class loader.\n          * @param clsLdrId Class loader ID.\n          * @param userVer User version.\n-         * @param sndNodeId Sender node ID.\n+         * @param sndNode Sender node.\n          * @param sampleClsName Sample class name.\n          */\n         IsolatedDeployment(GridDeploymentMode depMode, ClassLoader clsLdr, GridUuid clsLdrId,\n-            String userVer, UUID sndNodeId, String sampleClsName) {\n+            String userVer, GridNode sndNode, String sampleClsName) {\n             super(depMode, clsLdr, clsLdrId, userVer, sampleClsName, false);\n \n-            this.sndNodeId = sndNodeId;\n+            this.sndNode = sndNode;\n         }\n \n         /**\n@@ -409,7 +409,7 @@ private void scheduleUndeploy(final IsolatedDeployment dep, long timeout) {\n          * @return Property senderNodeId.\n          */\n         UUID senderNodeId() {\n-            return sndNodeId;\n+            return sndNode.id();\n         }\n \n         /** {@inheritDoc} */\n@@ -435,7 +435,7 @@ void recordDeployed(Class<?> cls, boolean recordEvt) {\n \n                 // Record task event.\n                 evt.type(isTask ? EVT_TASK_DEPLOYED : EVT_CLASS_DEPLOYED);\n-                evt.node(ctx.discovery().node(sndNodeId));\n+                evt.node(sndNode);\n                 evt.message(msg);\n                 evt.alias(cls.getName());\n \n@@ -466,7 +466,7 @@ void recordUndeployed(@Nullable UUID leftNodeId) {\n                     if (evts.isRecordable(!isTask ? EVT_CLASS_UNDEPLOYED : EVT_TASK_UNDEPLOYED)) {\n                         GridDeploymentEvent evt = new GridDeploymentEvent();\n \n-                        evt.node(ctx.discovery().node(sndNodeId));\n+                        evt.node(sndNode);\n                         evt.message(msg);\n                         evt.type(!isTask ? EVT_CLASS_UNDEPLOYED : EVT_TASK_UNDEPLOYED);\n                         evt.alias(depCls.getKey());",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-379 Fix NPE.\n(cherry picked from commit 6d0d4ed)",
        "commit": "https://github.com/apache/ignite/commit/69b52dfc96d04751a260d9aedb1e9a3a466d20c0",
        "parent": "https://github.com/apache/ignite/commit/22bdbce45bb1044b4834625fa445512bb75152d2",
        "bug_id": "ignite_216",
        "file": [
            {
                "sha": "5ac0d3921a37874e1f3f345c146492d8c8de4652",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/69b52dfc96d04751a260d9aedb1e9a3a466d20c0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/69b52dfc96d04751a260d9aedb1e9a3a466d20c0/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheStoreManager.java?ref=69b52dfc96d04751a260d9aedb1e9a3a466d20c0",
                "patch": "@@ -786,11 +786,11 @@ private void handleClassCastException(ClassCastException e) throws IgniteChecked\n      * Clears session holder.\n      */\n     void endSession(@Nullable IgniteInternalTx tx) {\n-        if (sesHolder != null)\n-            sesHolder.set(null);\n-\n         if (tx == null)\n             store.sessionEnd(true);\n+\n+        if (sesHolder != null)\n+            sesHolder.set(null);\n     }\n \n     /**\n@@ -800,6 +800,8 @@ void initSession(@Nullable IgniteInternalTx tx) {\n         if (sesHolder == null)\n             return;\n \n+        assert sesHolder.get() == null;\n+\n         SessionData ses;\n \n         if (tx != null) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-45 - Fixed NPE when node stops on error.",
        "commit": "https://github.com/apache/ignite/commit/a6e063b6c21d82e58b7be96f5af004782797b30c",
        "parent": "https://github.com/apache/ignite/commit/4b84c2fe07a5135b8b7a67a5ea00c3eb2c6a9e1c",
        "bug_id": "ignite_217",
        "file": [
            {
                "sha": "41cceac301f5957ba3d6015a4b37d474ae1abeaa",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "blob_url": "https://github.com/apache/ignite/blob/a6e063b6c21d82e58b7be96f5af004782797b30c/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "raw_url": "https://github.com/apache/ignite/raw/a6e063b6c21d82e58b7be96f5af004782797b30c/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=a6e063b6c21d82e58b7be96f5af004782797b30c",
                "patch": "@@ -1752,7 +1752,10 @@ else if (state == STARTING)\n                 Thread.currentThread().interrupt();\n \n             try {\n-                ctx.cache().blockGateways();\n+                GridCacheProcessor cache = ctx.cache();\n+\n+                if (cache != null)\n+                    cache.blockGateways();\n \n                 assert gw.getState() == STARTED || gw.getState() == STARTING;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-45 Fixing IgniteCacheAffinitySelfTest#testAffinity() : fixed NPE and cleanup code.",
        "commit": "https://github.com/apache/ignite/commit/06a5b1c92240363dce6201d7bca80f02f8d66124",
        "parent": "https://github.com/apache/ignite/commit/1108b45715828b3b8485774124653b18ba739cdf",
        "bug_id": "ignite_218",
        "file": [
            {
                "sha": "b4bd2e9ae1e5c73da04d488da30027d8afd4845b",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/CachePartitionFairAffinity.java",
                "blob_url": "https://github.com/apache/ignite/blob/06a5b1c92240363dce6201d7bca80f02f8d66124/modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/CachePartitionFairAffinity.java",
                "raw_url": "https://github.com/apache/ignite/raw/06a5b1c92240363dce6201d7bca80f02f8d66124/modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/CachePartitionFairAffinity.java",
                "status": "modified",
                "changes": 91,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/CachePartitionFairAffinity.java?ref=06a5b1c92240363dce6201d7bca80f02f8d66124",
                "patch": "@@ -23,7 +23,6 @@\n import org.apache.ignite.events.*;\n import org.apache.ignite.internal.util.typedef.*;\n import org.apache.ignite.internal.util.typedef.internal.*;\n-import org.apache.ignite.lang.*;\n \n import java.io.*;\n import java.util.*;\n@@ -32,7 +31,7 @@\n  * Fair affinity function which tries to ensure that all nodes get equal number of partitions with\n  * minimum amount of reassignments between existing nodes.\n  * <p>\n- * Cache affinity can be configured for individual caches via {@link org.apache.ignite.configuration.CacheConfiguration#getAffinity()} method.\n+ * Cache affinity can be configured for individual caches via {@link CacheConfiguration#getAffinity()} method.\n  */\n @CacheCentralizedAffinityFunction\n public class CachePartitionFairAffinity implements CacheAffinityFunction {\n@@ -43,13 +42,13 @@\n     private static final long serialVersionUID = 0L;\n \n     /** Ascending comparator. */\n-    private static final Comparator<PartitionSet> ASC_CMP = new PartitionSetComparator(false);\n+    private static final Comparator<PartitionSet> ASC_CMP = new PartitionSetComparator();\n \n     /** Descending comparator. */\n-    private static final Comparator<PartitionSet> DESC_CMP = new PartitionSetComparator(true);\n+    private static final Comparator<PartitionSet> DESC_CMP = Collections.reverseOrder(ASC_CMP);\n \n     /** */\n-    private int parts;\n+    private final int parts;\n \n     /**\n      * Creates fair affinity with default partition count.\n@@ -75,9 +74,7 @@ public CachePartitionFairAffinity(int parts) {\n             return Collections.nCopies(parts, Collections.singletonList(primary));\n         }\n \n-        IgniteBiTuple<List<List<ClusterNode>>, Map<UUID, PartitionSet>> cp = createCopy(ctx, topSnapshot);\n-\n-        List<List<ClusterNode>> assignment = cp.get1();\n+        List<List<ClusterNode>> assignment = createCopy(ctx);\n \n         int tiers = Math.min(ctx.backups() + 1, topSnapshot.size());\n \n@@ -381,61 +378,44 @@ private PrioritizedPartitionMap filterNodes(Map<UUID, PartitionSet> mapping, int\n      * Creates copy of previous partition assignment.\n      *\n      * @param ctx Affinity function context.\n-     * @param topSnapshot Topology snapshot.\n      * @return Assignment copy and per node partition map.\n      */\n-    private IgniteBiTuple<List<List<ClusterNode>>, Map<UUID, PartitionSet>> createCopy(\n-        CacheAffinityFunctionContext ctx, Iterable<ClusterNode> topSnapshot) {\n+    private List<List<ClusterNode>> createCopy(CacheAffinityFunctionContext ctx) {\n         DiscoveryEvent discoEvt = ctx.discoveryEvent();\n \n-        UUID leftNodeId = discoEvt.type() == EventType.EVT_NODE_JOINED ? null : discoEvt.eventNode().id();\n+        UUID leftNodeId = (discoEvt == null || discoEvt.type() == EventType.EVT_NODE_JOINED)\n+            ? null\n+            : discoEvt.eventNode().id();\n \n         List<List<ClusterNode>> cp = new ArrayList<>(parts);\n \n-        Map<UUID, PartitionSet> parts = new HashMap<>();\n-\n-        for (int part = 0; part < this.parts; part++) {\n+        for (int part = 0; part < parts; part++) {\n             List<ClusterNode> partNodes = ctx.previousAssignment(part);\n \n-            List<ClusterNode> partNodesCp = new ArrayList<>(partNodes.size());\n-\n-            for (ClusterNode affNode : partNodes) {\n-                if (!affNode.id().equals(leftNodeId)) {\n-                    partNodesCp.add(affNode);\n+            List<ClusterNode> partNodesCp;\n \n-                    PartitionSet partSet = parts.get(affNode.id());\n+            if (partNodes == null)\n+                partNodesCp = new ArrayList<>();\n+            else {\n+                if (leftNodeId == null) {\n+                    partNodesCp = new ArrayList<>(partNodes.size() + 1); // Node joined.\n \n-                    if (partSet == null) {\n-                        partSet = new PartitionSet(affNode);\n+                    partNodesCp.addAll(partNodes);\n+                }\n+                else {\n+                    partNodesCp = new ArrayList<>(partNodes.size());\n \n-                        parts.put(affNode.id(), partSet);\n+                    for (ClusterNode affNode : partNodes) {\n+                        if (!affNode.id().equals(leftNodeId))\n+                            partNodesCp.add(affNode);\n                     }\n-\n-                    partSet.add(part);\n                 }\n             }\n \n             cp.add(partNodesCp);\n         }\n \n-        if (leftNodeId == null) {\n-            // Node joined, find it and add empty set to mapping.\n-            ClusterNode joinedNode = null;\n-\n-            for (ClusterNode node : topSnapshot) {\n-                if (node.id().equals(discoEvt.eventNode().id())) {\n-                    joinedNode = node;\n-\n-                    break;\n-                }\n-            }\n-\n-            assert joinedNode != null;\n-\n-            parts.put(joinedNode.id(), new PartitionSet(joinedNode));\n-        }\n-\n-        return F.t(cp, parts);\n+        return cp;\n     }\n \n     /**\n@@ -445,21 +425,9 @@ private PrioritizedPartitionMap filterNodes(Map<UUID, PartitionSet> mapping, int\n         /** */\n         private static final long serialVersionUID = 0L;\n \n-        /** */\n-        private boolean descending;\n-\n-        /**\n-         * @param descending {@code True} if comparator should be descending.\n-         */\n-        private PartitionSetComparator(boolean descending) {\n-            this.descending = descending;\n-        }\n-\n         /** {@inheritDoc} */\n         @Override public int compare(PartitionSet o1, PartitionSet o2) {\n-            int res = o1.parts.size() < o2.parts.size() ? -1 : o1.parts.size() > o2.parts.size() ? 1 : 0;\n-\n-            return descending ? -res : res;\n+            return Integer.compare(o1.parts.size(), o2.parts.size());\n         }\n     }\n \n@@ -511,12 +479,18 @@ public void update() {\n             return assignmentList;\n         }\n \n+        /**\n+         * @param uuid Uuid.\n+         */\n         public void remove(UUID uuid) {\n             PartitionSet rmv = assignmentMap.remove(uuid);\n \n             assignmentList.remove(rmv);\n         }\n \n+        /**\n+         *\n+         */\n         public boolean isEmpty() {\n             return assignmentList.isEmpty();\n         }\n@@ -715,6 +689,9 @@ private static int hash(int h) {\n         return h ^ (h >>> 16);\n     }\n \n+    /**\n+     *\n+     */\n     @SuppressWarnings(\"ComparableImplementedButEqualsNotOverridden\")\n     private static class PartitionSet {\n         /** */",
                "deletions": 57
            },
            {
                "sha": "59f4c22fd96142714bc4434417570a2bc15c3007",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridCacheAffinityFunctionContextImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/06a5b1c92240363dce6201d7bca80f02f8d66124/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridCacheAffinityFunctionContextImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/06a5b1c92240363dce6201d7bca80f02f8d66124/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridCacheAffinityFunctionContextImpl.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridCacheAffinityFunctionContextImpl.java?ref=06a5b1c92240363dce6201d7bca80f02f8d66124",
                "patch": "@@ -29,19 +29,19 @@\n  */\n public class GridCacheAffinityFunctionContextImpl implements CacheAffinityFunctionContext {\n     /** Topology snapshot. */\n-    private List<ClusterNode> topSnapshot;\n+    private final List<ClusterNode> topSnapshot;\n \n     /** Previous affinity assignment. */\n-    private List<List<ClusterNode>> prevAssignment;\n+    private final List<List<ClusterNode>> prevAssignment;\n \n     /** Discovery event that caused this topology change. */\n-    private DiscoveryEvent discoEvt;\n+    private final DiscoveryEvent discoEvt;\n \n     /** Topology version. */\n-    private AffinityTopologyVersion topVer;\n+    private final AffinityTopologyVersion topVer;\n \n     /** Number of backups to assign. */\n-    private int backups;\n+    private final int backups;\n \n     /**\n      * @param topSnapshot Topology snapshot.\n@@ -58,7 +58,7 @@ public GridCacheAffinityFunctionContextImpl(List<ClusterNode> topSnapshot, List<\n \n     /** {@inheritDoc} */\n     @Nullable @Override public List<ClusterNode> previousAssignment(int part) {\n-        return prevAssignment.get(part);\n+        return prevAssignment == null ? null : prevAssignment.get(part);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-2541: Fixed potential NPE in GridCacheUpdateAtomicResult caused by unsafe [long -> Long -> long] transitions.",
        "commit": "https://github.com/apache/ignite/commit/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b",
        "parent": "https://github.com/apache/ignite/commit/74d9d05b7cee071dad4c50a3a053781d78a488a8",
        "bug_id": "ignite_219",
        "file": [
            {
                "sha": "ae402957ed8a541b3c24a953063887733051400b",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "blob_url": "https://github.com/apache/ignite/blob/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "raw_url": "https://github.com/apache/ignite/raw/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java?ref=10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b",
                "patch": "@@ -2135,7 +2135,7 @@ assert isNew() || ATOMIC_VER_COMPARATOR.compare(ver, newVer, ignoreTime) <= 0 :\n                         null,\n                         null,\n                         false,\n-                        updateCntr0 == null ? 0 : updateCntr);\n+                        updateCntr0 == null ? 0 : updateCntr0);\n                 }\n             }\n             else\n@@ -2431,7 +2431,7 @@ assert deletedUnlocked() || new0 || isInternal() : \"Invalid entry [entry=\" + thi\n             enqueueVer,\n             conflictCtx,\n             true,\n-            updateCntr0);\n+            updateCntr0 == null ? 0 : updateCntr0);\n     }\n \n     /**",
                "deletions": 2
            },
            {
                "sha": "2355b7c4f17c19465e4aad8c32c15ba20a6d7bf1",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateAtomicResult.java",
                "blob_url": "https://github.com/apache/ignite/blob/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateAtomicResult.java",
                "raw_url": "https://github.com/apache/ignite/raw/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateAtomicResult.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUpdateAtomicResult.java?ref=10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b",
                "patch": "@@ -58,7 +58,7 @@\n     private final boolean sndToDht;\n \n     /** */\n-    private final Long updateCntr;\n+    private final long updateCntr;\n \n     /** Value computed by entry processor. */\n     private IgniteBiTuple<Object, Exception> res;\n@@ -137,7 +137,7 @@ public long newTtl() {\n     /**\n      * @return Partition update index.\n      */\n-    public Long updateCounter() {\n+    public long updateCounter() {\n         return updateCntr;\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "06c844120247c4fd0081204d58c5046f34fe14c7",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java?ref=10a2b7a18de3d9e0cb3fdf147956c127fa4d4d2b",
                "patch": "@@ -225,7 +225,7 @@ public void addWriteEntry(GridDhtCacheEntry entry,\n         @Nullable GridCacheVersion conflictVer,\n         boolean addPrevVal,\n         @Nullable CacheObject prevVal,\n-        @Nullable Long updateCntr) {\n+        long updateCntr) {\n         AffinityTopologyVersion topVer = updateReq.topologyVersion();\n \n         Collection<ClusterNode> dhtNodes = cctx.dht().topology().nodes(entry.partition(), topVer);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-9447 Bug fix: NPE if plugins are not configured.",
        "commit": "https://github.com/apache/ignite/commit/6dd28e6728dc92cb36e18d0edfbcefd3c0331c26",
        "parent": "https://github.com/apache/ignite/commit/914ccf6d1698e8d67ea232c64b822ce2fbce735d",
        "bug_id": "ignite_220",
        "file": [
            {
                "sha": "1f9d5cb6270e70e2ea966b6d2b219e67ce767bfe",
                "filename": "modules/core/src/main/java/org/gridgain/grid/design/plugin/IgnitePluginProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/6dd28e6728dc92cb36e18d0edfbcefd3c0331c26/modules/core/src/main/java/org/gridgain/grid/design/plugin/IgnitePluginProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/6dd28e6728dc92cb36e18d0edfbcefd3c0331c26/modules/core/src/main/java/org/gridgain/grid/design/plugin/IgnitePluginProcessor.java",
                "status": "modified",
                "changes": 63,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/design/plugin/IgnitePluginProcessor.java?ref=6dd28e6728dc92cb36e18d0edfbcefd3c0331c26",
                "patch": "@@ -40,56 +40,55 @@\n     public IgnitePluginProcessor(GridKernalContext ctx, @Nullable Collection<? extends PluginConfiguration> cfgs) {\n         super(ctx);\n \n-        if (cfgs == null)\n-            return;\n-\n         ExtensionRegistry registry = new ExtensionRegistry();\n \n-        for (PluginConfiguration pluginCfg : cfgs) {\n-            GridPluginContext pluginCtx = new GridPluginContext(ctx, pluginCfg);\n-\n-            PluginProvider provider;\n+        if (cfgs != null) {\n+            for (PluginConfiguration pluginCfg : cfgs) {\n+                GridPluginContext pluginCtx = new GridPluginContext(ctx, pluginCfg);\n \n-            try {\n-                if (pluginCfg.providerClass() == null)\n-                    throw new IgniteException(\"Provider class is null.\");\n+                PluginProvider provider;\n \n                 try {\n-                    Constructor<? extends  PluginProvider> ctr =\n-                        pluginCfg.providerClass().getConstructor(pluginCfg.getClass(), PluginContext.class);\n+                    if (pluginCfg.providerClass() == null)\n+                        throw new IgniteException(\"Provider class is null.\");\n \n-                    provider = ctr.newInstance(pluginCfg, pluginCtx);\n-                }\n-                catch (NoSuchMethodException ignore) {\n                     try {\n                         Constructor<? extends  PluginProvider> ctr =\n-                            pluginCfg.providerClass().getConstructor(pluginCfg.getClass());\n+                            pluginCfg.providerClass().getConstructor(pluginCfg.getClass(), PluginContext.class);\n \n-                        provider = ctr.newInstance(pluginCfg);\n+                        provider = ctr.newInstance(pluginCfg, pluginCtx);\n                     }\n-                    catch (NoSuchMethodException ignored) {\n-                        provider = pluginCfg.providerClass().newInstance();\n+                    catch (NoSuchMethodException ignore) {\n+                        try {\n+                            Constructor<? extends  PluginProvider> ctr =\n+                                pluginCfg.providerClass().getConstructor(pluginCfg.getClass());\n+\n+                            provider = ctr.newInstance(pluginCfg);\n+                        }\n+                        catch (NoSuchMethodException ignored) {\n+                            provider = pluginCfg.providerClass().newInstance();\n+                        }\n                     }\n                 }\n-            }\n-            catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n-                throw new IgniteException(\"Failed to create plugin provider instance.\", e);\n-            }\n+                catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n+                    throw new IgniteException(\"Failed to create plugin provider instance.\", e);\n+                }\n \n-            if (F.isEmpty(provider.name()))\n-                throw new IgniteException(\"Plugin name can not be empty.\");\n+                if (F.isEmpty(provider.name()))\n+                    throw new IgniteException(\"Plugin name can not be empty.\");\n \n-            if (provider.plugin() == null)\n-                throw new IgniteException(\"Plugin is null.\");\n+                if (provider.plugin() == null)\n+                    throw new IgniteException(\"Plugin is null.\");\n \n-            if (plugins.containsKey(provider.name()))\n-                throw new IgniteException(\"Duplicated plugin name: \" + provider.name());\n+                if (plugins.containsKey(provider.name()))\n+                    throw new IgniteException(\"Duplicated plugin name: \" + provider.name());\n \n-            plugins.put(provider.name(), provider);\n+                plugins.put(provider.name(), provider);\n \n-            pluginCtxMap.put(provider, pluginCtx);\n+                pluginCtxMap.put(provider, pluginCtx);\n \n-            provider.initExtensions(pluginCtx, registry);\n+                provider.initExtensions(pluginCtx, registry);\n+            }\n         }\n \n         extensions = registry.createExtensionMap();",
                "deletions": 32
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-7419 - Fixed NPE in near atomic failure test.",
        "commit": "https://github.com/apache/ignite/commit/8785e46fc0fe7f3d2ac833485aeb9a49ee79c0ad",
        "parent": "https://github.com/apache/ignite/commit/6dc2bee245cb90ecfc80a148b3236641385ffd25",
        "bug_id": "ignite_221",
        "file": [
            {
                "sha": "d51ac8892ee412855f51e76059d0f0997b46d499",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/8785e46fc0fe7f3d2ac833485aeb9a49ee79c0ad/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/8785e46fc0fe7f3d2ac833485aeb9a49ee79c0ad/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java?ref=8785e46fc0fe7f3d2ac833485aeb9a49ee79c0ad",
                "patch": "@@ -392,6 +392,10 @@ private void mapOnTopology(final Collection<? extends K> keys, final boolean rem\n             GridDhtTopologyFuture fut = cctx.topologyVersionFuture();\n \n             if (fut.isDone()) {\n+                if (futVer == null)\n+                    // Assign future version in topology read lock before first exception may be thrown.\n+                    futVer = cctx.versions().next(topVer);\n+\n                 // We are holding topology read lock and current topology is ready, we can start mapping.\n                 snapshot = fut.topologySnapshot();\n             }\n@@ -407,10 +411,6 @@ private void mapOnTopology(final Collection<? extends K> keys, final boolean rem\n \n             topVer = snapshot.topologyVersion();\n \n-            if (futVer == null)\n-                // Assign future version in topology read lock.\n-                futVer = cctx.versions().next(topVer);\n-\n             if (!remap && (cctx.config().getAtomicWriteOrderMode() == CLOCK || syncMode != FULL_ASYNC))\n                 cctx.mvcc().addAtomicFuture(version(), this);\n         }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-8634 Fix NPE, add validation check system property",
        "commit": "https://github.com/apache/ignite/commit/83847326fbc82a0fab647172bc5cbcdf1694a0d8",
        "parent": "https://github.com/apache/ignite/commit/8227e4fd0354151281779226939928f73dd1ab94",
        "bug_id": "ignite_222",
        "file": [
            {
                "sha": "709375e774c5b958d5f73e6b1676f8ba13ca03b1",
                "filename": "modules/core/src/main/java/org/gridgain/grid/GridSystemProperties.java",
                "blob_url": "https://github.com/apache/ignite/blob/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/GridSystemProperties.java",
                "raw_url": "https://github.com/apache/ignite/raw/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/GridSystemProperties.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/GridSystemProperties.java?ref=83847326fbc82a0fab647172bc5cbcdf1694a0d8",
                "patch": "@@ -433,6 +433,11 @@\n     public static final String GG_SKIP_CONFIGURATION_CONSISTENCY_CHECK =\n         \"GRIDGAIN_SKIP_CONFIGURATION_CONSISTENCY_CHECK\";\n \n+    /**\n+     * Maximum number of key validation checks.\n+     */\n+    public static final String GG_CACHE_KEY_VALIDATION_CHECKS = \"GRIDGAIN_CACHE_KEY_VALIDATION_CHECKS\";\n+\n     /**\n      * Enforces singleton.\n      */",
                "deletions": 0
            },
            {
                "sha": "7ee6077fa408e61e46f104ff71c453a032b27f30",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 33,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCacheAdapter.java?ref=83847326fbc82a0fab647172bc5cbcdf1694a0d8",
                "patch": "@@ -9,12 +9,12 @@\n \n package org.gridgain.grid.kernal.processors.cache;\n \n-import org.gridgain.grid.cache.affinity.*;\n-import org.gridgain.grid.compute.*;\n import org.gridgain.grid.*;\n import org.gridgain.grid.cache.*;\n+import org.gridgain.grid.cache.affinity.*;\n import org.gridgain.grid.cache.datastructures.*;\n import org.gridgain.grid.cache.query.*;\n+import org.gridgain.grid.compute.*;\n import org.gridgain.grid.dataload.*;\n import org.gridgain.grid.dr.cache.sender.*;\n import org.gridgain.grid.dr.hub.sender.*;\n@@ -48,13 +48,14 @@\n import java.util.concurrent.locks.*;\n \n import static java.util.Collections.*;\n-import static org.gridgain.grid.kernal.GridClosureCallMode.*;\n+import static org.gridgain.grid.GridSystemProperties.*;\n import static org.gridgain.grid.cache.GridCacheFlag.*;\n import static org.gridgain.grid.cache.GridCachePeekMode.*;\n import static org.gridgain.grid.cache.GridCacheTxConcurrency.*;\n import static org.gridgain.grid.cache.GridCacheTxIsolation.*;\n import static org.gridgain.grid.cache.GridCacheTxState.*;\n import static org.gridgain.grid.events.GridEventType.*;\n+import static org.gridgain.grid.kernal.GridClosureCallMode.*;\n import static org.gridgain.grid.kernal.processors.dr.GridDrType.*;\n import static org.gridgain.grid.kernal.processors.task.GridTaskThreadContextKey.*;\n \n@@ -70,7 +71,7 @@\n     public static final int CLEAR_ALL_SPLIT_THRESHOLD = 10000;\n \n     /** Maximum number of key checks (approximate value). */\n-    private static final int MAX_KEY_CHECKS = 100;\n+    private static final int MAX_KEY_CHECKS = Integer.getInteger(GG_CACHE_KEY_VALIDATION_CHECKS, 100);\n \n     /** Deserialization stash. */\n     private static final ThreadLocal<GridBiTuple<String, String>> stash = new ThreadLocal<GridBiTuple<String,\n@@ -743,8 +744,6 @@ public void onKernalStop() {\n         if (F.isEmpty(keys))\n             return Collections.emptyMap();\n \n-        assert keys != null;\n-\n         validateCacheKeys(keys);\n \n         ctx.checkSecurity(GridSecurityPermission.CACHE_READ);\n@@ -884,8 +883,6 @@ else if (m == DB)\n         if (F.isEmpty(keys))\n             return emptyMap();\n \n-        assert keys != null;\n-\n         validateCacheKeys(keys);\n \n         Map<K, V> ret = new HashMap<>(keys.size(), 1.0f);\n@@ -1224,9 +1221,8 @@ else if (log.isDebugEnabled())\n      * @param readers Readers flag.\n      */\n     public void clearAll(Collection<? extends K> keys, boolean readers) {\n-        if (F.isEmpty(keys)) {\n+        if (F.isEmpty(keys))\n             return;\n-        }\n \n         validateCacheKeys(keys);\n \n@@ -2147,8 +2143,6 @@ public String toString() {\n         if (F.isEmpty(drMap))\n             return;\n \n-        validateCacheKeys(drMap.keySet());\n-\n         metrics.onReceiveCacheEntriesReceived(drMap.size());\n \n         ctx.denyOnLocalRead();\n@@ -2170,8 +2164,6 @@ public String toString() {\n         if (F.isEmpty(drMap))\n             return new GridFinishedFuture<Object>(ctx.kernalContext());\n \n-        validateCacheKeys(drMap.keySet());\n-\n         metrics.onReceiveCacheEntriesReceived(drMap.size());\n \n         ctx.denyOnLocalRead();\n@@ -2838,8 +2830,6 @@ public String toString() {\n         if (F.isEmpty(drMap))\n             return;\n \n-        validateCacheKeys(drMap.keySet());\n-\n         metrics.onReceiveCacheEntriesReceived(drMap.size());\n \n         syncOp(new SyncInOp(false) {\n@@ -2861,8 +2851,6 @@ public String toString() {\n         if (F.isEmpty(drMap))\n             return new GridFinishedFuture<Object>(ctx.kernalContext());\n \n-        validateCacheKeys(drMap.keySet());\n-\n         metrics.onReceiveCacheEntriesReceived(drMap.size());\n \n         return asyncOp(new AsyncInOp(drMap.keySet()) {\n@@ -4076,9 +4064,8 @@ public void clearAll0(Collection<? extends K> keys,\n         ctx.denyOnFlag(READ);\n         ctx.checkSecurity(GridSecurityPermission.CACHE_REMOVE);\n \n-        if (F.isEmpty(keys)) {\n+        if (F.isEmpty(keys))\n             return;\n-        }\n \n         validateCacheKeys(keys);\n \n@@ -4212,8 +4199,6 @@ public boolean containsAllKeys(@Nullable Collection<? extends K> keys,\n         if (F.isEmpty(keys))\n             return true;\n \n-        assert keys != null;\n-\n         validateCacheKeys(keys);\n \n         for (K k : keys)\n@@ -4233,8 +4218,6 @@ public boolean containsAnyKeys(@Nullable Collection<? extends K> keys,\n         if (F.isEmpty(keys))\n             return true;\n \n-        assert keys != null;\n-\n         validateCacheKeys(keys);\n \n         for (K k : keys) {\n@@ -4588,7 +4571,7 @@ private void validateCacheValues(Iterable<?> vals) {\n      * @param key Cache key.\n      * @throws IllegalArgumentException If validation fails.\n      */\n-    protected void validateCacheKey(Object key) {\n+    private void validateCacheKey(Object key) {\n         if (keyChecks <= MAX_KEY_CHECKS) {\n             CU.validateCacheKey(log, key);\n ",
                "deletions": 25
            },
            {
                "sha": "238fc02584129b01f75cb4413d8233156260893c",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "blob_url": "https://github.com/apache/ignite/blob/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "raw_url": "https://github.com/apache/ignite/raw/83847326fbc82a0fab647172bc5cbcdf1694a0d8/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java?ref=83847326fbc82a0fab647172bc5cbcdf1694a0d8",
                "patch": "@@ -609,7 +609,8 @@ private GridFuture updateAllAsync0(\n         long ttl,\n         @Nullable final GridPredicate<GridCacheEntry<K, V>>[] filter\n     ) {\n-        validateCacheKeys(map.keySet());\n+        if (map != null)\n+            validateCacheKeys(map.keySet());\n \n         ctx.checkSecurity(GridSecurityPermission.CACHE_PUT);\n \n@@ -666,7 +667,6 @@ private GridFuture removeAllAsync0(\n         assert keys != null || drMap != null;\n \n         validateCacheKeys(keys);\n-        validateCacheKeys(drMap.keySet());\n \n         ctx.checkSecurity(GridSecurityPermission.CACHE_REMOVE);\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sprint-25-6.2.0 - Fixed NPE and exception handling",
        "commit": "https://github.com/apache/ignite/commit/d2ae7b63ed99e5bef942c363a92138a936fe2627",
        "parent": "https://github.com/apache/ignite/commit/b175301ecd0524e7608a5ea449f13635c2d1f376",
        "bug_id": "ignite_223",
        "file": [
            {
                "sha": "e9b74d15fe301f224ac41f9b7e9b2842b823862f",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/d2ae7b63ed99e5bef942c363a92138a936fe2627/modules/core/src/main/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/d2ae7b63ed99e5bef942c363a92138a936fe2627/modules/core/src/main/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java",
                "status": "modified",
                "changes": 42,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/continuous/GridContinuousProcessor.java?ref=d2ae7b63ed99e5bef942c363a92138a936fe2627",
                "patch": "@@ -137,24 +137,25 @@ public GridContinuousProcessor(GridKernalContext ctx) {\n                 switch (evt.type()) {\n                     case EVT_NODE_JOINED:\n                         if (reqs != null) {\n+                            UUID routineId = null;\n+\n                             // Send pending requests.\n-                            for (GridContinuousMessage req : reqs) {\n-                                try {\n+                            try {\n+                                for (GridContinuousMessage req : reqs) {\n+                                    routineId = req.routineId();\n+\n                                     sendWithRetries(nodeId, req, null);\n                                 }\n-                                catch (GridException e) {\n-                                    U.error(log, \"Failed to send pending start request to node: \" + nodeId, e);\n-\n-                                    UUID routineId = req.routineId();\n-\n-                                    Collection<UUID> nodeIds = waitForStartAck.get(routineId);\n-\n-                                    assert nodeIds != null;\n-\n-                                    nodeIds.remove(nodeId);\n+                            }\n+                            catch (GridTopologyException ignored) {\n+                                if (log.isDebugEnabled())\n+                                    log.debug(\"Failed to send pending start request to node (is node alive?): \" +\n+                                        nodeId);\n+                            }\n+                            catch (GridException e) {\n+                                U.error(log, \"Failed to send pending start request to node: \" + nodeId, e);\n \n-                                    completeStartFuture(routineId);\n-                                }\n+                                completeStartFuture(routineId);\n                             }\n                         }\n \n@@ -782,6 +783,10 @@ private void processStopRequest(UUID nodeId, GridContinuousMessage req) {\n         try {\n             sendWithRetries(nodeId, new GridContinuousMessage(MSG_STOP_ACK, routineId, null), null);\n         }\n+        catch (GridTopologyException ignored) {\n+            if (log.isDebugEnabled())\n+                log.debug(\"Failed to send stop acknowledgement to node (is node alive?): \" + nodeId);\n+        }\n         catch (GridException e) {\n             U.error(log, \"Failed to send stop acknowledgement to node: \" + nodeId, e);\n         }\n@@ -910,6 +915,10 @@ private boolean registerHandler(final UUID nodeId, final UUID routineId, final G\n                                 try {\n                                     sendNotification(nodeId, routineId, toSnd, hnd.orderedTopic());\n                                 }\n+                                catch (GridTopologyException ignored) {\n+                                    if (log.isDebugEnabled())\n+                                        log.debug(\"Failed to send notification to node (is node alive?): \" + nodeId);\n+                                }\n                                 catch (GridException e) {\n                                     U.error(log, \"Failed to send notification to node: \" + nodeId, e);\n                                 }\n@@ -1068,6 +1077,7 @@ else if (log.isDebugEnabled())\n     /**\n      * Local routine info.\n      */\n+    @SuppressWarnings(\"PackageVisibleInnerClass\")\n     static class LocalRoutineInfo {\n         /** Projection predicate. */\n         private final GridPredicate<GridNode> prjPred;\n@@ -1672,6 +1682,10 @@ protected StopTimeoutObject(long timeout, UUID routineId, GridContinuousMessage\n                             try {\n                                 sendWithRetries(id, req, null);\n                             }\n+                            catch (GridTopologyException ignored) {\n+                                if (log.isDebugEnabled())\n+                                    log.debug(\"Failed to resend stop request to node (is node alive?): \" + id);\n+                            }\n                             catch (GridException e) {\n                                 U.error(log, \"Failed to resend stop request to node: \" + id, e);\n ",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sprint-25 - Fixed NPE in continuous query processor.",
        "commit": "https://github.com/apache/ignite/commit/50cc53d3d242e66ecbc66cc27e72356c362dd375",
        "parent": "https://github.com/apache/ignite/commit/b3cc06087ef271bd78d556b61c2641673904f617",
        "bug_id": "ignite_224",
        "file": [
            {
                "sha": "fbe6b52fcc7f4552a9331ea76ff4f9d6d6f4d611",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryHandler.java",
                "blob_url": "https://github.com/apache/ignite/blob/50cc53d3d242e66ecbc66cc27e72356c362dd375/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryHandler.java",
                "raw_url": "https://github.com/apache/ignite/raw/50cc53d3d242e66ecbc66cc27e72356c362dd375/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryHandler.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/query/continuous/GridCacheContinuousQueryHandler.java?ref=50cc53d3d242e66ecbc66cc27e72356c362dd375",
                "patch": "@@ -136,8 +136,10 @@ public GridCacheContinuousQueryHandler() {\n                     }\n                     else {\n                         try {\n-                            if (ctx.config().isPeerClassLoadingEnabled() &&\n-                                U.hasCache(ctx.discovery().node(nodeId), cacheName)) {\n+                            GridNode node = ctx.discovery().node(nodeId);\n+\n+                            if (ctx.config().isPeerClassLoadingEnabled() && node != null &&\n+                                U.hasCache(node, cacheName)) {\n                                 e.p2pMarshal(ctx.config().getMarshaller());\n \n                                 e.cacheName(cacheName);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-8519 Fix NPE during encoding of POST parameters",
        "commit": "https://github.com/apache/ignite/commit/a60daff4f36c9c26bfa4ef2e2af6f52f6ed0f9fb",
        "parent": "https://github.com/apache/ignite/commit/73c5e43c6c161aa18aa9e8ff2b09e582c7aedce4",
        "bug_id": "ignite_225",
        "file": [
            {
                "sha": "5934e6120bb1e4046b81def6e83e6a0427048034",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/GridUpdateNotifier.java",
                "blob_url": "https://github.com/apache/ignite/blob/a60daff4f36c9c26bfa4ef2e2af6f52f6ed0f9fb/modules/core/src/main/java/org/gridgain/grid/kernal/GridUpdateNotifier.java",
                "raw_url": "https://github.com/apache/ignite/raw/a60daff4f36c9c26bfa4ef2e2af6f52f6ed0f9fb/modules/core/src/main/java/org/gridgain/grid/kernal/GridUpdateNotifier.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/GridUpdateNotifier.java?ref=a60daff4f36c9c26bfa4ef2e2af6f52f6ed0f9fb",
                "patch": "@@ -114,7 +114,7 @@\n \n             url = \"http://\" + site + \"/update_status.php\";\n \n-            this.gridName = gridName;\n+            this.gridName = gridName == null ? \"null\" : gridName;\n             this.reportOnlyNew = reportOnlyNew;\n         }\n         catch (ParserConfigurationException e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "sprint-23-6.1.7 - Fixed NPE on start.",
        "commit": "https://github.com/apache/ignite/commit/915df1cebb39d3354b009c4303c508218dc6e9ea",
        "parent": "https://github.com/apache/ignite/commit/ad77a757937da87dd990bbd09eaadd3a69a496de",
        "bug_id": "ignite_226",
        "file": [
            {
                "sha": "b9f8ccfccf03087a1113e39c7c6b45f70495e601",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/managers/security/os/GridOsSecurityManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/915df1cebb39d3354b009c4303c508218dc6e9ea/modules/core/src/main/java/org/gridgain/grid/kernal/managers/security/os/GridOsSecurityManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/915df1cebb39d3354b009c4303c508218dc6e9ea/modules/core/src/main/java/org/gridgain/grid/kernal/managers/security/os/GridOsSecurityManager.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/managers/security/os/GridOsSecurityManager.java?ref=915df1cebb39d3354b009c4303c508218dc6e9ea",
                "patch": "@@ -53,12 +53,14 @@ public GridOsSecurityManager(GridKernalContext ctx) {\n     }\n \n     /** {@inheritDoc} */\n-    @Override public GridSecurityContext authenticate(GridAuthenticationContext ctx) throws GridException {\n-        GridSecuritySubjectAdapter s = new GridSecuritySubjectAdapter(ctx.subjectType(), ctx.subjectId());\n+    @Override public GridSecurityContext authenticate(GridAuthenticationContext authCtx) throws GridException {\n+        GridSecuritySubjectAdapter s = new GridSecuritySubjectAdapter(authCtx.subjectType(), authCtx.subjectId());\n \n         s.permissions(ALLOW_ALL);\n-        s.address(ctx.address());\n-        s.login(ctx.credentials().getLogin());\n+        s.address(authCtx.address());\n+\n+        if (authCtx.credentials() != null)\n+            s.login(authCtx.credentials().getLogin());\n \n         return new GridSecurityContext(s);\n     }",
                "deletions": 4
            },
            {
                "sha": "22e6aa83df8d236a0b0567e7167e3c28bb9d1c70",
                "filename": "modules/core/src/main/java/org/gridgain/grid/spi/authentication/noop/GridNoopAuthenticationSpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/915df1cebb39d3354b009c4303c508218dc6e9ea/modules/core/src/main/java/org/gridgain/grid/spi/authentication/noop/GridNoopAuthenticationSpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/915df1cebb39d3354b009c4303c508218dc6e9ea/modules/core/src/main/java/org/gridgain/grid/spi/authentication/noop/GridNoopAuthenticationSpi.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/spi/authentication/noop/GridNoopAuthenticationSpi.java?ref=915df1cebb39d3354b009c4303c508218dc6e9ea",
                "patch": "@@ -79,7 +79,9 @@\n \n         subj.address(authCtx.address());\n         subj.permissions(allowAll);\n-        subj.login(authCtx.credentials().getLogin());\n+\n+        if (authCtx.credentials() != null)\n+            subj.login(authCtx.credentials().getLogin());\n \n         return subj;\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8358 WIP npe fix in config task.",
        "commit": "https://github.com/apache/ignite/commit/afa17f6dd4fda6f04fadb51411268dd0f186bb7c",
        "parent": "https://github.com/apache/ignite/commit/e0c0c9394f97f8f25e09e8b64af5fd9494e1514e",
        "bug_id": "ignite_227",
        "file": [
            {
                "sha": "1646c0441aaa2751ba78fe2a0d898c6f346eb10b",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/tasks/VisorConfigCollectorTask.java",
                "blob_url": "https://github.com/apache/ignite/blob/afa17f6dd4fda6f04fadb51411268dd0f186bb7c/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/tasks/VisorConfigCollectorTask.java",
                "raw_url": "https://github.com/apache/ignite/raw/afa17f6dd4fda6f04fadb51411268dd0f186bb7c/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/tasks/VisorConfigCollectorTask.java",
                "status": "modified",
                "changes": 90,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/tasks/VisorConfigCollectorTask.java?ref=afa17f6dd4fda6f04fadb51411268dd0f186bb7c",
                "patch": "@@ -494,51 +494,53 @@ else if (policy instanceof GridCacheFifoEvictionPolicyMBean)\n                     drReceiverCfg));\n             }\n \n-            final List<VisorGgfsConfig> ggfss = new ArrayList<>(c.getGgfsConfiguration().length);\n-\n-            for (GridGgfsConfiguration ggfs : c.getGgfsConfiguration()) {\n-                ggfss.add(new VisorGgfsConfig(\n-                    ggfs.getName(),\n-                    ggfs.getMetaCacheName(),\n-                    ggfs.getDataCacheName(),\n-                    ggfs.getBlockSize(),\n-                    ggfs.getPrefetchBlocks(),\n-                    ggfs.getStreamBufferSize(),\n-                    ggfs.getPerNodeBatchSize(),\n-                    ggfs.getPerNodeParallelBatchCount(),\n-                    ggfs.getSecondaryHadoopFileSystemUri(),\n-                    ggfs.getSecondaryHadoopFileSystemConfigPath(),\n-                    ggfs.getDefaultMode(),\n-                    ggfs.getPathModes(),\n-                    compactClass(ggfs.getDualModePutExecutorService()),\n-                    ggfs.getDualModePutExecutorServiceShutdown(),\n-                    ggfs.getDualModeMaxPendingPutsSize(),\n-                    ggfs.getMaximumTaskRangeLength(),\n-                    ggfs.getFragmentizerConcurrentFiles(),\n-                    ggfs.getFragmentizerLocalWritesRatio(),\n-                    ggfs.isFragmentizerEnabled(),\n-                    ggfs.getFragmentizerThrottlingBlockLength(),\n-                    ggfs.getFragmentizerThrottlingDelay(),\n-                    ggfs.getIpcEndpointConfiguration(),\n-                    ggfs.isIpcEndpointEnabled(),\n-                    ggfs.getMaxSpaceSize(),\n-                    ggfs.getManagementPort(),\n-                    ggfs.getSequentialReadsBeforePrefetch(),\n-                    ggfs.getTrashPurgeTimeout()\n-                ));\n-            }\n+            final List<VisorGgfsConfig> ggfss = new ArrayList<>();\n+\n+            if (c.getGgfsConfiguration() != null)\n+                for (GridGgfsConfiguration ggfs : c.getGgfsConfiguration()) {\n+                    ggfss.add(new VisorGgfsConfig(\n+                        ggfs.getName(),\n+                        ggfs.getMetaCacheName(),\n+                        ggfs.getDataCacheName(),\n+                        ggfs.getBlockSize(),\n+                        ggfs.getPrefetchBlocks(),\n+                        ggfs.getStreamBufferSize(),\n+                        ggfs.getPerNodeBatchSize(),\n+                        ggfs.getPerNodeParallelBatchCount(),\n+                        ggfs.getSecondaryHadoopFileSystemUri(),\n+                        ggfs.getSecondaryHadoopFileSystemConfigPath(),\n+                        ggfs.getDefaultMode(),\n+                        ggfs.getPathModes(),\n+                        compactClass(ggfs.getDualModePutExecutorService()),\n+                        ggfs.getDualModePutExecutorServiceShutdown(),\n+                        ggfs.getDualModeMaxPendingPutsSize(),\n+                        ggfs.getMaximumTaskRangeLength(),\n+                        ggfs.getFragmentizerConcurrentFiles(),\n+                        ggfs.getFragmentizerLocalWritesRatio(),\n+                        ggfs.isFragmentizerEnabled(),\n+                        ggfs.getFragmentizerThrottlingBlockLength(),\n+                        ggfs.getFragmentizerThrottlingDelay(),\n+                        ggfs.getIpcEndpointConfiguration(),\n+                        ggfs.isIpcEndpointEnabled(),\n+                        ggfs.getMaxSpaceSize(),\n+                        ggfs.getManagementPort(),\n+                        ggfs.getSequentialReadsBeforePrefetch(),\n+                        ggfs.getTrashPurgeTimeout()\n+                    ));\n+                }\n \n-            final List<VisorStreamerConfig> streamers = new ArrayList<>(c.getStreamerConfiguration().length);\n-\n-            for (GridStreamerConfiguration streamer : c.getStreamerConfiguration())\n-                streamers.add(new VisorStreamerConfig(\n-                    streamer.getName(),\n-                    compactClass(streamer.getRouter()),\n-                    streamer.isAtLeastOnce(),\n-                    streamer.getMaximumFailoverAttempts(),\n-                    streamer.getMaximumConcurrentSessions(),\n-                    streamer.isExecutorServiceShutdown()\n-                ));\n+            final List<VisorStreamerConfig> streamers = new ArrayList<>();\n+\n+            if (c.getStreamerConfiguration() != null)\n+                for (GridStreamerConfiguration streamer : c.getStreamerConfiguration())\n+                    streamers.add(new VisorStreamerConfig(\n+                        streamer.getName(),\n+                        compactClass(streamer.getRouter()),\n+                        streamer.isAtLeastOnce(),\n+                        streamer.getMaximumFailoverAttempts(),\n+                        streamer.getMaximumConcurrentSessions(),\n+                        streamer.isExecutorServiceShutdown()\n+                    ));\n \n             final VisorDrSenderHubConfig senderHub = null;\n ",
                "deletions": 44
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#GG-8178 Fixed possible npe on cache command",
        "commit": "https://github.com/apache/ignite/commit/58c6f2305bac2eda1f79b7254bcf8cbcd64f4896",
        "parent": "https://github.com/apache/ignite/commit/7062caa630e9d5a4c8b4d14c0abd167c185514e2",
        "bug_id": "ignite_228",
        "file": [
            {
                "sha": "732583b935078d096255e762584caca0c519588d",
                "filename": "modules/visor-console/src/main/scala/org/gridgain/visor/visor.scala",
                "blob_url": "https://github.com/apache/ignite/blob/58c6f2305bac2eda1f79b7254bcf8cbcd64f4896/modules/visor-console/src/main/scala/org/gridgain/visor/visor.scala",
                "raw_url": "https://github.com/apache/ignite/raw/58c6f2305bac2eda1f79b7254bcf8cbcd64f4896/modules/visor-console/src/main/scala/org/gridgain/visor/visor.scala",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/visor-console/src/main/scala/org/gridgain/visor/visor.scala?ref=58c6f2305bac2eda1f79b7254bcf8cbcd64f4896",
                "patch": "@@ -1748,7 +1748,7 @@ object visor extends VisorTag {\n         else {\n             val n = grid.node(id)\n \n-            val id8 = nid8(n)\n+            val id8 = nid8(id)\n             val v = mfind(id8)\n \n             id8 +\n@@ -1768,9 +1768,7 @@ object visor extends VisorTag {\n         assert(id != null)\n         assert(isCon)\n \n-        val n = grid.node(id)\n-\n-        val id8 = nid8(n)\n+        val id8 = nid8(id)\n         val v = mfind(id8)\n \n         id8 + (if (v.isDefined) \"(@\" + v.get._1 + \")\" else \"\")\n@@ -2551,7 +2549,17 @@ object visor extends VisorTag {\n      * @return Node ID in ID8 format.\n      */\n     def nid8(node: GridNode): String = {\n-        node.id().toString.take(8).toUpperCase\n+        nid8(node.id())\n+    }\n+\n+    /**\n+     * Transform node ID to ID8 string.\n+     *\n+     * @param nid Node ID.\n+     * @return Node ID in ID8 format.\n+     */\n+    def nid8(nid: UUID): String = {\n+        nid.toString.take(8).toUpperCase\n     }\n \n     /**",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-7689 - Fixing NPE in transform in GGFS.",
        "commit": "https://github.com/apache/ignite/commit/99e3fdde2bd67621779cf807559b6c183ca924d8",
        "parent": "https://github.com/apache/ignite/commit/04b712a4586d6d2a441ca6024f339f393838a26f",
        "bug_id": "ignite_229",
        "file": [
            {
                "sha": "1fe109a863ecb3872eefd42b3b6ab62a79b1d2a1",
                "filename": "modules/core/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/GridDhtCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/99e3fdde2bd67621779cf807559b6c183ca924d8/modules/core/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/GridDhtCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/99e3fdde2bd67621779cf807559b6c183ca924d8/modules/core/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/GridDhtCacheAdapter.java",
                "status": "modified",
                "changes": 32,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/GridDhtCacheAdapter.java?ref=99e3fdde2bd67621779cf807559b6c183ca924d8",
                "patch": "@@ -1586,20 +1586,28 @@ protected final void processDhtTxFinishRequest0(final UUID nodeId, final GridDht\n      * @param req Request.\n      */\n     protected final void processDhtLockRequest(final UUID nodeId, final GridDhtLockRequest<K, V> req) {\n-        if (beforePessimisticLock == null)\n+        GridFuture<Object> keyFut = F.isEmpty(req.keys()) ? null :\n+            ctx.dht().dhtPreloader().request(req.keys(), req.topologyVersion());\n+\n+        if (beforePessimisticLock != null) {\n+            keyFut = keyFut == null ?\n+                beforePessimisticLock.apply(req.keys(), req.inTx()) :\n+                new GridEmbeddedFuture<>(true, keyFut,\n+                    new C2<Object, Exception, GridFuture<Object>>() {\n+                        @Override public GridFuture<Object> apply(Object o, Exception e) {\n+                            return beforePessimisticLock.apply(req.keys(), req.inTx());\n+                        }\n+                    }, ctx.kernalContext());\n+        }\n+\n+        if (keyFut == null || keyFut.isDone())\n             processDhtLockRequest0(nodeId, req);\n         else {\n-            GridFuture<Object> fut = beforePessimisticLock.apply(req.keys(), req.inTx());\n-\n-            if (fut != null) {\n-                fut.listenAsync(new CI1<GridFuture<Object>>() {\n-                    @Override public void apply(GridFuture<Object> t) {\n-                        processDhtLockRequest0(nodeId, req);\n-                    }\n-                });\n-            }\n-            else\n-                processDhtLockRequest0(nodeId, req);\n+            keyFut.listenAsync(new CI1<GridFuture<Object>>() {\n+                @Override public void apply(GridFuture<Object> t) {\n+                    processDhtLockRequest0(nodeId, req);\n+                }\n+            });\n         }\n     }\n ",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "ignite-762 NPE at org.apache.ignite.internal.processors.cache.GridCacheSwapManager.swapSize",
        "commit": "https://github.com/apache/ignite/commit/aaa5ceef5a46b1bc84c03d9fdfe23ec7f86b7023",
        "parent": "https://github.com/apache/ignite/commit/d0e606fc05c63e7a9c7260eadf649df8341e6fcc",
        "bug_id": "ignite_230",
        "file": [
            {
                "sha": "11fa261aac936c2f16b1f8b2f9ef3135b02b4de5",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/aaa5ceef5a46b1bc84c03d9fdfe23ec7f86b7023/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/aaa5ceef5a46b1bc84c03d9fdfe23ec7f86b7023/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=aaa5ceef5a46b1bc84c03d9fdfe23ec7f86b7023",
                "patch": "@@ -660,7 +660,7 @@ private DiscoveryMetricsProvider createMetricsProvider() {\n                 Map<Integer, CacheMetrics> metrics = null;\n \n                 for (GridCacheAdapter<?, ?> cache : caches) {\n-                    if (cache.configuration().isStatisticsEnabled()) {\n+                    if (cache.context().started() && cache.configuration().isStatisticsEnabled()) {\n                         if (metrics == null)\n                             metrics = U.newHashMap(caches.size());\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# IGNITE-685 NPE on node start if client discovery is used.",
        "commit": "https://github.com/apache/ignite/commit/654b4e98f2f618e4ffffad6486d13f883a1a5d7d",
        "parent": "https://github.com/apache/ignite/commit/0cf79e467ab532e21ccac9ee6d36f57145c457de",
        "bug_id": "ignite_231",
        "file": [
            {
                "sha": "a4aea6640cf75edbf98027b6df36910ea6670175",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "blob_url": "https://github.com/apache/ignite/blob/654b4e98f2f618e4ffffad6486d13f883a1a5d7d/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "raw_url": "https://github.com/apache/ignite/raw/654b4e98f2f618e4ffffad6486d13f883a1a5d7d/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java",
                "status": "modified",
                "changes": 172,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java?ref=654b4e98f2f618e4ffffad6486d13f883a1a5d7d",
                "patch": "@@ -1675,23 +1675,32 @@ else if (marsh instanceof OptimizedMarshaller && !U.isHotSpot()) {\n          */\n         @SuppressWarnings(\"unchecked\")\n         public void initializeDefaultCacheConfiguration(IgniteConfiguration cfg) throws IgniteCheckedException {\n-            CacheConfiguration[] cacheCfgs = cfg.getCacheConfiguration();\n+            List<CacheConfiguration> cacheCfgs = new ArrayList<>();\n \n-            final boolean hasHadoop = IgniteComponentType.HADOOP.inClassPath();\n+            boolean clientDisco = cfg.getDiscoverySpi() instanceof TcpClientDiscoverySpi;\n \n-            final boolean hasAtomics = cfg.getAtomicConfiguration() != null;\n+            // Add marshaller and utility caches.\n+            if (!clientDisco) {\n+                cacheCfgs.add(marshallerSystemCache());\n \n-            final boolean clientDisco = cfg.getDiscoverySpi() instanceof TcpClientDiscoverySpi;\n+                cacheCfgs.add(utilitySystemCache());\n+            }\n+\n+            if (IgniteComponentType.HADOOP.inClassPath())\n+                cacheCfgs.add(CU.hadoopSystemCache());\n \n-            CacheConfiguration[] copies;\n+            if (cfg.getAtomicConfiguration() != null && !clientDisco)\n+                cacheCfgs.add(atomicsSystemCache(cfg.getAtomicConfiguration()));\n \n-            if (cacheCfgs != null && cacheCfgs.length > 0) {\n+            CacheConfiguration[] userCaches = cfg.getCacheConfiguration();\n+\n+            if (userCaches != null && userCaches.length > 0) {\n                 if (!U.discoOrdered(cfg.getDiscoverySpi()) && !U.relaxDiscoveryOrdered())\n                     throw new IgniteCheckedException(\"Discovery SPI implementation does not support node ordering and \" +\n                         \"cannot be used with cache (use SPI with @GridDiscoverySpiOrderSupport annotation, \" +\n                         \"like GridTcpDiscoverySpi)\");\n \n-                for (CacheConfiguration ccfg : cacheCfgs) {\n+                for (CacheConfiguration ccfg : userCaches) {\n                     if (CU.isHadoopSystemCache(ccfg.getName()))\n                         throw new IgniteCheckedException(\"Cache name cannot be \\\"\" + CU.SYS_CACHE_HADOOP_MR +\n                             \"\\\" because it is reserved for internal purposes.\");\n@@ -1709,52 +1718,15 @@ public void initializeDefaultCacheConfiguration(IgniteConfiguration cfg) throws\n                             \"\\\" because it is reserved for internal purposes.\");\n                 }\n \n-                int addCacheCnt = 2; // Always add marshaller and utility caches.\n-\n-                if (hasHadoop)\n-                    addCacheCnt++;\n-\n-                if (hasAtomics)\n-                    addCacheCnt++;\n-\n-                copies = new CacheConfiguration[cacheCfgs.length + addCacheCnt];\n-\n-                int cloneIdx = 2;\n-\n-                if (hasHadoop)\n-                    copies[cloneIdx++] = CU.hadoopSystemCache();\n-\n-                if (hasAtomics)\n-                    copies[cloneIdx++] = atomicsSystemCache(cfg.getAtomicConfiguration(), clientDisco);\n-\n-                for (CacheConfiguration ccfg : cacheCfgs)\n-                    copies[cloneIdx++] = new CacheConfiguration(ccfg);\n-            }\n-            else {\n-                int cacheCnt = 2; // Always add marshaller and utility caches.\n-\n-                if (hasHadoop)\n-                    cacheCnt++;\n-\n-                if (hasAtomics)\n-                    cacheCnt++;\n+                for (CacheConfiguration ccfg : userCaches) {\n+                    if (ccfg == null)\n+                        throw new NullPointerException(\"Cache configuration list must not contains null element\");\n \n-                copies = new CacheConfiguration[cacheCnt];\n-\n-                int cacheIdx = 2;\n-\n-                if (hasHadoop)\n-                    copies[cacheIdx++] = CU.hadoopSystemCache();\n-\n-                if (hasAtomics)\n-                    copies[cacheIdx] = atomicsSystemCache(cfg.getAtomicConfiguration(), clientDisco);\n+                    cacheCfgs.add(ccfg);\n+                }\n             }\n \n-            // Always add marshaller and utility caches.\n-            copies[0] = marshallerSystemCache(clientDisco);\n-            copies[1] = utilitySystemCache(clientDisco);\n-\n-            cfg.setCacheConfiguration(copies);\n+            cfg.setCacheConfiguration(cacheCfgs.toArray(new CacheConfiguration[cacheCfgs.size()]));\n         }\n \n         /**\n@@ -1899,78 +1871,64 @@ private IgniteLogger initLogger(@Nullable IgniteLogger cfgLog, UUID nodeId) thro\n          *\n          * @return Marshaller system cache configuration.\n          */\n-        private static CacheConfiguration marshallerSystemCache(boolean client) {\n-            if (!client) {\n-                CacheConfiguration cache = new CacheConfiguration();\n-\n-                cache.setName(CU.MARSH_CACHE_NAME);\n-                cache.setCacheMode(REPLICATED);\n-                cache.setAtomicityMode(ATOMIC);\n-                cache.setSwapEnabled(false);\n-                cache.setRebalanceMode(SYNC);\n-                cache.setWriteSynchronizationMode(FULL_SYNC);\n-                cache.setAffinity(new RendezvousAffinityFunction(false, 20));\n-                cache.setNodeFilter(CacheConfiguration.ALL_NODES);\n-                cache.setStartSize(300);\n-\n-                return cache;\n-            }\n-\n-            return null;\n+        private static CacheConfiguration marshallerSystemCache() {\n+            CacheConfiguration cache = new CacheConfiguration();\n+\n+            cache.setName(CU.MARSH_CACHE_NAME);\n+            cache.setCacheMode(REPLICATED);\n+            cache.setAtomicityMode(ATOMIC);\n+            cache.setSwapEnabled(false);\n+            cache.setRebalanceMode(SYNC);\n+            cache.setWriteSynchronizationMode(FULL_SYNC);\n+            cache.setAffinity(new RendezvousAffinityFunction(false, 20));\n+            cache.setNodeFilter(CacheConfiguration.ALL_NODES);\n+            cache.setStartSize(300);\n+\n+            return cache;\n         }\n \n         /**\n          * Creates utility system cache configuration.\n          *\n-         * @param client If {@code true} creates client-only cache configuration.\n          * @return Utility system cache configuration.\n          */\n-        private static CacheConfiguration utilitySystemCache(boolean client) {\n-            if (!client) {\n-                CacheConfiguration cache = new CacheConfiguration();\n-\n-                cache.setName(CU.UTILITY_CACHE_NAME);\n-                cache.setCacheMode(REPLICATED);\n-                cache.setAtomicityMode(TRANSACTIONAL);\n-                cache.setSwapEnabled(false);\n-                cache.setRebalanceMode(SYNC);\n-                cache.setWriteSynchronizationMode(FULL_SYNC);\n-                cache.setAffinity(new RendezvousAffinityFunction(false, 100));\n-                cache.setNodeFilter(CacheConfiguration.ALL_NODES);\n-\n-                return cache;\n-            }\n-\n-            return null;\n+        private static CacheConfiguration utilitySystemCache() {\n+            CacheConfiguration cache = new CacheConfiguration();\n+\n+            cache.setName(CU.UTILITY_CACHE_NAME);\n+            cache.setCacheMode(REPLICATED);\n+            cache.setAtomicityMode(TRANSACTIONAL);\n+            cache.setSwapEnabled(false);\n+            cache.setRebalanceMode(SYNC);\n+            cache.setWriteSynchronizationMode(FULL_SYNC);\n+            cache.setAffinity(new RendezvousAffinityFunction(false, 100));\n+            cache.setNodeFilter(CacheConfiguration.ALL_NODES);\n+\n+            return cache;\n         }\n \n         /**\n          * Creates cache configuration for atomic data structures.\n          *\n          * @param cfg Atomic configuration.\n-         * @param client If {@code true} creates client-only cache configuration.\n          * @return Cache configuration for atomic data structures.\n          */\n-        private static CacheConfiguration atomicsSystemCache(AtomicConfiguration cfg, boolean client) {\n-            if (!client) {\n-                CacheConfiguration ccfg = new CacheConfiguration();\n-\n-                ccfg.setName(CU.ATOMICS_CACHE_NAME);\n-                ccfg.setAtomicityMode(TRANSACTIONAL);\n-                ccfg.setSwapEnabled(false);\n-                ccfg.setRebalanceMode(SYNC);\n-                ccfg.setWriteSynchronizationMode(FULL_SYNC);\n-                ccfg.setCacheMode(cfg.getCacheMode());\n-                ccfg.setNodeFilter(CacheConfiguration.ALL_NODES);\n-                ccfg.setNearConfiguration(new NearCacheConfiguration());\n-\n-                if (cfg.getCacheMode() == PARTITIONED)\n-                    ccfg.setBackups(cfg.getBackups());\n-\n-                return ccfg;\n-            }\n-\n-            return null;\n+        private static CacheConfiguration atomicsSystemCache(AtomicConfiguration cfg) {\n+            CacheConfiguration ccfg = new CacheConfiguration();\n+\n+            ccfg.setName(CU.ATOMICS_CACHE_NAME);\n+            ccfg.setAtomicityMode(TRANSACTIONAL);\n+            ccfg.setSwapEnabled(false);\n+            ccfg.setRebalanceMode(SYNC);\n+            ccfg.setWriteSynchronizationMode(FULL_SYNC);\n+            ccfg.setCacheMode(cfg.getCacheMode());\n+            ccfg.setNodeFilter(CacheConfiguration.ALL_NODES);\n+            ccfg.setNearConfiguration(new NearCacheConfiguration());\n+\n+            if (cfg.getCacheMode() == PARTITIONED)\n+                ccfg.setBackups(cfg.getBackups());\n+\n+            return ccfg;\n         }\n \n         /**",
                "deletions": 107
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-1355 - Fixed potential NPE in CacheAffinityProxy - Fixes #263.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
        "parent": "https://github.com/apache/ignite/commit/a34d7058bd2901359cd2fda3d57a3f05ab6291df",
        "bug_id": "ignite_232",
        "file": [
            {
                "sha": "c059ced378342427f47ad5cd3a31f6083a08fecf",
                "filename": "examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -22,10 +22,10 @@\n import java.util.Map;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n-import org.apache.ignite.IgniteCluster;\n import org.apache.ignite.IgniteCompute;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n+import org.apache.ignite.cache.affinity.Affinity;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.examples.ExampleNodeStartup;\n import org.apache.ignite.lang.IgniteRunnable;\n@@ -103,7 +103,7 @@ private static void visitUsingAffinityRun() {\n     }\n \n     /**\n-     * Collocates jobs with keys they need to work on using {@link IgniteCluster#mapKeysToNodes(String, Collection)}\n+     * Collocates jobs with keys they need to work on using {@link Affinity#mapKeysToNodes(Collection)}\n      * method. The difference from {@code affinityRun(...)} method is that here we process multiple keys\n      * in a single job.\n      */\n@@ -116,7 +116,7 @@ private static void visitUsingMapKeysToNodes() {\n             keys.add(i);\n \n         // Map all keys to nodes.\n-        Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);\n+        Map<ClusterNode, Collection<Integer>> mappings = ignite.<Integer>affinity(CACHE_NAME).mapKeysToNodes(keys);\n \n         for (Map.Entry<ClusterNode, Collection<Integer>> mapping : mappings.entrySet()) {\n             ClusterNode node = mapping.getKey();\n@@ -139,4 +139,4 @@ private static void visitUsingMapKeysToNodes() {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "2867bf118ae2cd310a7bb5d8bf457e1dd5796c64",
                "filename": "examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -22,11 +22,11 @@\n import java.util.Map;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n-import org.apache.ignite.IgniteCluster;\n import org.apache.ignite.IgniteCompute;\n import org.apache.ignite.IgniteException;\n import org.apache.ignite.Ignition;\n import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cache.affinity.Affinity;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.examples.ExampleNodeStartup;\n@@ -105,7 +105,7 @@ private static void visitUsingAffinityRun() {\n     }\n \n     /**\n-     * Collocates jobs with keys they need to work on using {@link IgniteCluster#mapKeysToNodes(String, Collection)}\n+     * Collocates jobs with keys they need to work on using {@link Affinity#mapKeysToNodes(Collection)}\n      * method. The difference from {@code affinityRun(...)} method is that here we process multiple keys\n      * in a single job.\n      */\n@@ -118,7 +118,7 @@ private static void visitUsingMapKeysToNodes() {\n             keys.add(i);\n \n         // Map all keys to nodes.\n-        Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);\n+        Map<ClusterNode, Collection<Integer>> mappings = ignite.<Integer>affinity(CACHE_NAME).mapKeysToNodes(keys);\n \n         for (Map.Entry<ClusterNode, Collection<Integer>> mapping : mappings.entrySet()) {\n             ClusterNode node = mapping.getKey();",
                "deletions": 3
            },
            {
                "sha": "509324a40086aa8331ec086b518f2816c6fa9995",
                "filename": "modules/clients/src/test/java/org/apache/ignite/internal/client/ClientGetAffinityTask.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientGetAffinityTask.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientGetAffinityTask.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/clients/src/test/java/org/apache/ignite/internal/client/ClientGetAffinityTask.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -50,7 +50,7 @@\n         if (\"null\".equals(cacheName))\n             cacheName = null;\n \n-        ClusterNode node = ignite.cluster().mapKeyToNode(cacheName, affKey);\n+        ClusterNode node = ignite.affinity(cacheName).mapKeyToNode(affKey);\n \n         return node.id().toString();\n     }\n@@ -62,4 +62,4 @@\n \n         return WAIT;\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "23b03df442dadf050c5002b56789c860e43620d3",
                "filename": "modules/core/src/main/java/org/apache/ignite/IgniteCluster.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/IgniteCluster.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/IgniteCluster.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/IgniteCluster.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.UUID;\n import java.util.concurrent.ConcurrentMap;\n+import org.apache.ignite.cache.affinity.Affinity;\n import org.apache.ignite.cache.affinity.AffinityFunction;\n import org.apache.ignite.cluster.ClusterGroup;\n import org.apache.ignite.cluster.ClusterNode;\n@@ -124,7 +125,9 @@\n      * @param keys Cache keys to map to nodes.\n      * @return Map of nodes to cache keys or empty map if there are no alive nodes for this cache.\n      * @throws IgniteException If failed to map cache keys.\n+     * @deprecated Use {@link Affinity#mapKeysToNodes(Collection)} instead.\n      */\n+    @Deprecated\n     public <K> Map<ClusterNode, Collection<K>> mapKeysToNodes(@Nullable String cacheName,\n         @Nullable Collection<? extends K> keys) throws IgniteException;\n \n@@ -148,7 +151,9 @@\n      * @return Primary node for the key or {@code null} if cache with given name\n      *      is not present in the grid.\n      * @throws IgniteException If failed to map key.\n+     * @deprecated Use {@link Affinity#mapKeyToNode(Object)} instead.\n      */\n+    @Deprecated\n     public <K> ClusterNode mapKeyToNode(@Nullable String cacheName, K key) throws IgniteException;\n \n     /**\n@@ -343,4 +348,4 @@\n \n     /** {@inheritDoc} */\n     @Override public IgniteCluster withAsync();\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            },
            {
                "sha": "a5756e9f3cc144da3f6398b46f5da24012025b5c",
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/affinity/Affinity.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/cache/affinity/Affinity.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/cache/affinity/Affinity.java",
                "status": "modified",
                "changes": 24,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/affinity/Affinity.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -19,13 +19,14 @@\n \n import java.util.Collection;\n import java.util.Map;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.cluster.ClusterNode;\n import org.jetbrains.annotations.Nullable;\n \n /**\n  * Provides affinity information to detect which node is primary and which nodes are\n  * backups for a partitioned cache. You can get an instance of this interface by calling\n- * {@code Cache.affinity()} method.\n+ * {@code Ignite.affinity(cacheName)} method.\n  * <p>\n  * Mapping of a key to a node is a three-step operation. First step will get an affinity key for given key\n  * using {@link AffinityKeyMapper}. If mapper is not specified, the original key will be used. Second step\n@@ -41,6 +42,7 @@\n      * Gets number of partitions in cache according to configured affinity function.\n      *\n      * @return Number of cache partitions.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -52,6 +54,7 @@\n      *\n      * @param key Key to get partition id for.\n      * @return Partition id.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -64,6 +67,7 @@\n      * @param n Node to check.\n      * @param key Key to check.\n      * @return {@code True} if local node is the primary node for given key.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public boolean isPrimary(ClusterNode n, K key);\n \n@@ -73,6 +77,7 @@\n      * @param n Node to check.\n      * @param key Key to check.\n      * @return {@code True} if local node is one of the backup nodes for given key.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public boolean isBackup(ClusterNode n, K key);\n \n@@ -86,6 +91,7 @@\n      * @param n Node to check.\n      * @param key Key to check.\n      * @return {@code True} if local node is primary or backup for given key.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public boolean isPrimaryOrBackup(ClusterNode n, K key);\n \n@@ -94,6 +100,7 @@\n      *\n      * @param n Cluster node.\n      * @return Partition ids for which given cluster node has primary ownership.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -105,6 +112,7 @@\n      *\n      * @param n Cluster node.\n      * @return Partition ids for which given cluster node has backup ownership.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -117,6 +125,7 @@\n      *\n      * @param n Cluster node.\n      * @return Partition ids for which given cluster node has any ownership, primary or backup.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -132,6 +141,7 @@\n      * @param key Key to map.\n      * @return Key to be used for node-to-affinity mapping (may be the same\n      *      key as passed in).\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public Object affinityKey(K key);\n \n@@ -151,7 +161,8 @@\n      * </ul>\n      *\n      * @param keys Keys to map to nodes.\n-     * @return Map of nodes to keys or empty map if there are no alive nodes for this cache.\n+     * @return Map of nodes to keys.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public Map<ClusterNode, Collection<K>> mapKeysToNodes(Collection<? extends K> keys);\n \n@@ -171,7 +182,8 @@\n      * </ul>\n      *\n      * @param key Keys to map to a node.\n-     * @return Primary node for the key or {@code null} if there are no alive nodes for this cache.\n+     * @return Primary node for the key.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     @Nullable public ClusterNode mapKeyToNode(K key);\n \n@@ -182,6 +194,7 @@\n      * @param key Key to get affinity nodes for.\n      * @return Collection of primary and backup nodes for the key with primary node\n      *      always first.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public Collection<ClusterNode> mapKeyToPrimaryAndBackups(K key);\n \n@@ -190,6 +203,7 @@\n      *\n      * @param part Partition id.\n      * @return Primary node for the given partition.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -201,6 +215,7 @@\n      *\n      * @param parts Partition ids.\n      * @return Mapping of given partitions to their primary nodes.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      * @see AffinityFunction\n      * @see org.apache.ignite.configuration.CacheConfiguration#getAffinity()\n      * @see org.apache.ignite.configuration.CacheConfiguration#setAffinity(AffinityFunction)\n@@ -214,6 +229,7 @@\n      * @param part Partition to get affinity nodes for.\n      * @return Collection of primary and backup nodes for partition with primary node\n      *      always first.\n+     * @throws IgniteException If there are no alive nodes for this cache.\n      */\n     public Collection<ClusterNode> mapPartitionToPrimaryAndBackups(int part);\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "8a0194c6096aa7a4bbfec6c0dee953ec342be4f6",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java",
                "status": "modified",
                "changes": 60,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -178,7 +178,8 @@ public GridAffinityProcessor(GridKernalContext ctx) {\n      * @return Picked node.\n      * @throws IgniteCheckedException If failed.\n      */\n-    @Nullable public <K> ClusterNode mapKeyToNode(@Nullable String cacheName, K key, AffinityTopologyVersion topVer) throws IgniteCheckedException {\n+    @Nullable public <K> ClusterNode mapKeyToNode(@Nullable String cacheName, K key,\n+        AffinityTopologyVersion topVer) throws IgniteCheckedException {\n         Map<ClusterNode, Collection<K>> map = keysToNodes(cacheName, F.asList(key), topVer);\n \n         return map != null ? F.first(map.keySet()) : null;\n@@ -208,20 +209,6 @@ public GridAffinityProcessor(GridKernalContext ctx) {\n         return primaryAndBackups(affInfo, key);\n     }\n \n-    /**\n-     * Map single key to primary and backup nodes.\n-     *\n-     * @param cacheName Cache name.\n-     * @param key Key to map.\n-     * @return Affinity nodes, primary first.\n-     * @throws IgniteCheckedException If failed.\n-     */\n-    public <K> List<ClusterNode> mapKeyToPrimaryAndBackups(@Nullable String cacheName, K key)\n-        throws IgniteCheckedException\n-    {\n-        return mapKeyToPrimaryAndBackups(cacheName, key, ctx.discovery().topologyVersionEx());\n-    }\n-\n     /**\n      * Gets affinity key for cache key.\n      *\n@@ -318,7 +305,7 @@ private String maskNull(@Nullable String cacheName) {\n             if (cache == null)\n                 return null;\n \n-            GridCacheContext<Object,Object> cctx = cache.context();\n+            GridCacheContext<Object, Object> cctx = cache.context();\n \n             cctx.awaitStarted();\n \n@@ -424,8 +411,7 @@ private String maskNull(@Nullable String cacheName) {\n     }\n \n     /**\n-     * Requests {@link AffinityFunction} and\n-     * {@link AffinityKeyMapper} from remote node.\n+     * Requests {@link AffinityFunction} and {@link AffinityKeyMapper} from remote node.\n      *\n      * @param cacheName Name of cache on which affinity is requested.\n      * @param topVer Topology version.\n@@ -518,7 +504,7 @@ private AffinityInfo affinityInfoFromNode(@Nullable String cacheName, AffinityTo\n      */\n     private <K> List<ClusterNode> primaryAndBackups(AffinityInfo aff, K key) {\n         if (key instanceof CacheObject && !(key instanceof BinaryObject))\n-            key = ((CacheObject) key).value(aff.cacheObjCtx, false);\n+            key = ((CacheObject)key).value(aff.cacheObjCtx, false);\n \n         int part = aff.affFunc.partition(aff.mapper.affinityKey(key));\n \n@@ -801,7 +787,12 @@ public CacheAffinityProxy(String cacheName) {\n             ctx.gateway().readLock();\n \n             try {\n-                return GridAffinityProcessor.this.mapKeysToNodes(cacheName, keys);\n+                if (F.isEmpty(keys))\n+                    return Collections.emptyMap();\n+\n+                AffinityInfo affInfo = cache();\n+\n+                return affinityMap(affInfo, keys);\n             }\n             catch (IgniteCheckedException e) {\n                 throw new IgniteException(e);\n@@ -813,10 +804,16 @@ public CacheAffinityProxy(String cacheName) {\n \n         /** {@inheritDoc} */\n         @Nullable @Override public ClusterNode mapKeyToNode(K key) {\n+            A.notNull(key, \"key\");\n+\n             ctx.gateway().readLock();\n \n             try {\n-                return GridAffinityProcessor.this.mapKeyToNode(cacheName, key);\n+                AffinityInfo affInfo = cache();\n+\n+                Map<ClusterNode, Collection<K>> map = affinityMap(affInfo, Collections.singletonList(key));\n+\n+                return F.first(map.keySet());\n             }\n             catch (IgniteCheckedException e) {\n                 throw new IgniteException(e);\n@@ -880,9 +877,7 @@ public CacheAffinityProxy(String cacheName) {\n             ctx.gateway().readLock();\n \n             try {\n-                AffinityInfo cache = cache();\n-\n-                return cache != null ? cache.assignment().get(part) : Collections.<ClusterNode>emptyList();\n+                return cache().assignment().get(part);\n             }\n             catch (IgniteCheckedException e) {\n                 throw new IgniteException(e);\n@@ -896,15 +891,14 @@ public CacheAffinityProxy(String cacheName) {\n          * @return Affinity info for current topology version.\n          * @throws IgniteCheckedException If failed.\n          */\n-        @Nullable private AffinityInfo cache() throws IgniteCheckedException {\n-            return affinityCache(cacheName, new AffinityTopologyVersion(topologyVersion()));\n-        }\n+        private AffinityInfo cache() throws IgniteCheckedException {\n+            AffinityInfo aff = affinityCache(cacheName, ctx.discovery().topologyVersionEx());\n \n-        /**\n-         * @return Topology version.\n-         */\n-        private long topologyVersion() {\n-            return ctx.discovery().topologyVersion();\n+            if (aff == null)\n+                throw new IgniteException(\"Failed to find cache (cache was not started \" +\n+                    \"yet or cache was already stopped): \" + cacheName);\n+\n+            return aff;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 33
            },
            {
                "sha": "375219a172a9d82e19ab937f7d451177e6b3dee2",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java",
                "status": "modified",
                "changes": 47,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.UUID;\n import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.cluster.ClusterNode;\n import org.apache.ignite.events.DiscoveryEvent;\n import org.apache.ignite.internal.IgniteClientDisconnectedCheckedException;\n@@ -42,6 +43,10 @@\n     /** */\n     private static final AffinityTopologyVersion TOP_FIRST = new AffinityTopologyVersion(1);\n \n+    /** */\n+    public static final String FAILED_TO_FIND_CACHE_ERR_MSG = \"Failed to find cache (cache was not started \" +\n+        \"yet or cache was already stopped): \";\n+\n     /** Affinity cached function. */\n     private GridAffinityAssignmentCache aff;\n \n@@ -189,7 +194,12 @@ public void clientEventTopologyChange(DiscoveryEvent evt, AffinityTopologyVersio\n      * @return Partition count.\n      */\n     public int partitions() {\n-        return aff.partitions();\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.partitions();\n     }\n \n     /**\n@@ -201,7 +211,12 @@ public int partitions() {\n      * @return Partition.\n      */\n     public int partition(Object key) {\n-        return aff.partition(key);\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.partition(key);\n     }\n \n     /**\n@@ -222,7 +237,12 @@ public int partition(Object key) {\n         if (cctx.isLocal())\n             topVer = new AffinityTopologyVersion(1);\n \n-        return aff.nodes(part, topVer);\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.nodes(part, topVer);\n     }\n \n     /**\n@@ -363,7 +383,12 @@ public boolean belongs(ClusterNode node, int part, AffinityTopologyVersion topVe\n         if (cctx.isLocal())\n             topVer = new AffinityTopologyVersion(1);\n \n-        return aff.primaryPartitions(nodeId, topVer);\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.primaryPartitions(nodeId, topVer);\n     }\n \n     /**\n@@ -375,14 +400,24 @@ public boolean belongs(ClusterNode node, int part, AffinityTopologyVersion topVe\n         if (cctx.isLocal())\n             topVer = new AffinityTopologyVersion(1);\n \n-        return aff.backupPartitions(nodeId, topVer);\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.backupPartitions(nodeId, topVer);\n     }\n \n     /**\n      * @return Affinity-ready topology version.\n      */\n     public AffinityTopologyVersion affinityTopologyVersion() {\n-        return aff.lastVersion();\n+        GridAffinityAssignmentCache aff0 = aff;\n+\n+        if (aff0 == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return aff0.lastVersion();\n     }\n \n     /**",
                "deletions": 6
            },
            {
                "sha": "3bc71fe5ce8a9548d5f7f16ebc525806db196437",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java",
                "status": "modified",
                "changes": 48,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -23,12 +23,15 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.IgniteLogger;\n import org.apache.ignite.binary.BinaryObject;\n import org.apache.ignite.cache.affinity.Affinity;\n import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;\n import org.apache.ignite.internal.processors.cache.CacheObject;\n+import org.apache.ignite.internal.processors.cache.CacheObjectContext;\n import org.apache.ignite.internal.processors.cache.GridCacheContext;\n import org.apache.ignite.internal.util.typedef.F;\n import org.apache.ignite.internal.util.typedef.internal.A;\n@@ -39,6 +42,10 @@\n  * Affinity interface implementation.\n  */\n public class GridCacheAffinityImpl<K, V> implements Affinity<K> {\n+    /** */\n+    public static final String FAILED_TO_FIND_CACHE_ERR_MSG = \"Failed to find cache (cache was not started \" +\n+        \"yet or cache was already stopped): \";\n+\n     /** Cache context. */\n     private GridCacheContext<K, V> cctx;\n \n@@ -56,7 +63,12 @@ public GridCacheAffinityImpl(GridCacheContext<K, V> cctx) {\n \n     /** {@inheritDoc} */\n     @Override public int partitions() {\n-        return cctx.config().getAffinity().partitions();\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        if (ccfg == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+        return ccfg.getAffinity().partitions();\n     }\n \n     /** {@inheritDoc} */\n@@ -151,10 +163,21 @@ public GridCacheAffinityImpl(GridCacheContext<K, V> cctx) {\n     @Override public Object affinityKey(K key) {\n         A.notNull(key, \"key\");\n \n-        if (key instanceof CacheObject && !(key instanceof BinaryObject))\n-            key = ((CacheObject)key).value(cctx.cacheObjectContext(), false);\n+        if (key instanceof CacheObject && !(key instanceof BinaryObject)) {\n+            CacheObjectContext ctx = cctx.cacheObjectContext();\n+\n+            if (ctx == null)\n+                throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n+\n+            key = ((CacheObject)key).value(ctx, false);\n+        }\n+\n+        CacheConfiguration ccfg = cctx.config();\n+\n+        if (ccfg == null)\n+            throw new IgniteException(FAILED_TO_FIND_CACHE_ERR_MSG + cctx.name());\n \n-        return cctx.config().getAffinityMapper().affinityKey(key);\n+        return ccfg.getAffinityMapper().affinityKey(key);\n     }\n \n     /** {@inheritDoc} */\n@@ -178,17 +201,18 @@ public GridCacheAffinityImpl(GridCacheContext<K, V> cctx) {\n         for (K key : keys) {\n             ClusterNode primary = cctx.affinity().primary(key, topVer);\n \n-            if (primary != null) {\n-                Collection<K> mapped = res.get(primary);\n+            if (primary == null)\n+                throw new IgniteException(\"Failed to get primare node [topVer=\" + topVer + \", key=\" + key + ']');\n \n-                if (mapped == null) {\n-                    mapped = new ArrayList<>(Math.max(keys.size() / nodesCnt, 16));\n+            Collection<K> mapped = res.get(primary);\n \n-                    res.put(primary, mapped);\n-                }\n+            if (mapped == null) {\n+                mapped = new ArrayList<>(Math.max(keys.size() / nodesCnt, 16));\n \n-                mapped.add(key);\n+                res.put(primary, mapped);\n             }\n+\n+            mapped.add(key);\n         }\n \n         return res;\n@@ -216,4 +240,4 @@ public GridCacheAffinityImpl(GridCacheContext<K, V> cctx) {\n     private AffinityTopologyVersion topologyVersion() {\n         return cctx.affinity().affinityTopologyVersion();\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 12
            },
            {
                "sha": "099afd14fc6e89ff3cd376eef8c8edc1709c8e9c",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/GridAffinityMappedTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityMappedTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityMappedTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityMappedTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -109,18 +109,18 @@ public void testMappedAffinity() throws IgniteCheckedException {\n         //Key 0 is mapped to partition 0, first node.\n         //Key 1 is mapped to partition 1, second node.\n         //key 2 is mapped to partition 0, first node because mapper substitutes key 2 with affinity key 0.\n-        Map<ClusterNode, Collection<Integer>> map = g1.cluster().mapKeysToNodes(null, F.asList(0));\n+        Map<ClusterNode, Collection<Integer>> map = g1.<Integer>affinity(null).mapKeysToNodes(F.asList(0));\n \n         assertNotNull(map);\n         assertEquals(\"Invalid map size: \" + map.size(), 1, map.size());\n         assertEquals(F.first(map.keySet()), first);\n \n-        UUID id1 = g1.cluster().mapKeyToNode(null, 1).id();\n+        UUID id1 = g1.affinity(null).mapKeyToNode(1).id();\n \n         assertNotNull(id1);\n         assertEquals(second.id(),  id1);\n \n-        UUID id2 = g1.cluster().mapKeyToNode(null, 2).id();\n+        UUID id2 = g1.affinity(null).mapKeyToNode(2).id();\n \n         assertNotNull(id2);\n         assertEquals(first.id(),  id2);\n@@ -163,4 +163,4 @@ private MockCacheAffinityFunction() {\n             // This mapper is stateless and needs no initialization logic.\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "6fb12809f839a459e8aa02f596a9e3277f80701b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/GridAffinityNoCacheSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityNoCacheSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityNoCacheSelfTest.java",
                "status": "added",
                "changes": 290,
                "additions": 290,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityNoCacheSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -0,0 +1,290 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.concurrent.Callable;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cache.affinity.Affinity;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.cache.CacheObject;\n+import org.apache.ignite.internal.processors.cache.CacheObjectContext;\n+import org.apache.ignite.internal.processors.cache.affinity.GridCacheAffinityImpl;\n+import org.apache.ignite.internal.util.typedef.internal.A;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Tests usage of affinity in case when cache doesn't exist.\n+ */\n+public class GridAffinityNoCacheSelfTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final String EXPECTED_MSG = \"Failed to find cache\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        startGrids(2);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        stopAllGrids();\n+\n+        super.afterTestsStopped();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testAffinityProxyNoCache() throws Exception {\n+        checkAffinityProxyNoCache(new Object());\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testAffinityProxyNoCacheCacheObject() throws Exception {\n+        checkAffinityProxyNoCache(new TestCacheObject(new Object()));\n+    }\n+\n+    /**\n+     * @param key Key.\n+     */\n+    private void checkAffinityProxyNoCache(Object key) {\n+        IgniteEx ignite = grid(0);\n+\n+        final Affinity<Object> affinity = ignite.affinity(\"noCache\");\n+\n+        assertFalse(\"Affinity proxy instance expected\", affinity instanceof GridCacheAffinityImpl);\n+\n+        final ClusterNode n = ignite.cluster().localNode();\n+\n+        assertAffinityMethodsException(affinity, key, n);\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testAffinityImplCacheDeleted() throws Exception {\n+        checkAffinityImplCacheDeleted(new Object());\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void testAffinityImplCacheDeletedCacheObject() throws Exception {\n+        checkAffinityImplCacheDeleted(new TestCacheObject(new Object()));\n+    }\n+\n+    /**\n+     * @param key Key.\n+     */\n+    private void checkAffinityImplCacheDeleted(Object key) {\n+        IgniteEx grid = grid(0);\n+\n+        final String cacheName = \"cacheToBeDeleted\";\n+\n+        grid(1).getOrCreateCache(cacheName);\n+\n+        Affinity<Object> affinity = grid.affinity(cacheName);\n+\n+        assertTrue(affinity instanceof GridCacheAffinityImpl);\n+\n+        final ClusterNode n = grid.cluster().localNode();\n+\n+        grid.cache(cacheName).destroy();\n+\n+        assertAffinityMethodsException(affinity, key, n);\n+    }\n+\n+    /**\n+     * @param affinity Affinity.\n+     * @param key Key.\n+     * @param n Node.\n+     */\n+    private void assertAffinityMethodsException(final Affinity<Object> affinity, final Object key,\n+        final ClusterNode n) {\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.affinityKey(key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.allPartitions(n);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.backupPartitions(n);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.isBackup(n, key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.isPrimary(n, key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.isPrimaryOrBackup(n, key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapKeysToNodes(Collections.singleton(key));\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapKeyToPrimaryAndBackups(key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapPartitionsToNodes(Collections.singleton(0));\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapPartitionToNode(0);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapPartitionToPrimaryAndBackups(0);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.mapKeyToNode(key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.partition(key);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.partitions();\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+\n+        GridTestUtils.assertThrows(log, new Callable<Object>() {\n+            @Override public Object call() throws Exception {\n+                return affinity.primaryPartitions(n);\n+            }\n+        }, IgniteException.class, EXPECTED_MSG);\n+    }\n+\n+    /**\n+     */\n+    private static class TestCacheObject implements CacheObject {\n+        /** */\n+        private Object val;\n+\n+        /**\n+         * @param val Value.\n+         */\n+        private TestCacheObject(Object val) {\n+            this.val = val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public <T> T value(CacheObjectContext ctx, boolean cpy) {\n+            A.notNull(ctx, \"ctx\");\n+\n+            return (T)val;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public byte[] valueBytes(CacheObjectContext ctx) throws IgniteCheckedException {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public byte cacheObjectType() {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean isPlatformType() {\n+            return true;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public CacheObject prepareForCache(CacheObjectContext ctx) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void finishUnmarshal(CacheObjectContext ctx, ClassLoader ldr) throws IgniteCheckedException {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void prepareMarshal(CacheObjectContext ctx) throws IgniteCheckedException {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean writeTo(ByteBuffer buf, MessageWriter writer) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public byte directType() {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public byte fieldsCount() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "e42c4fbeeccdb4262e68b3ec0f9e541a40e9f15e",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/GridAffinityP2PSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityP2PSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityP2PSelfTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/GridAffinityP2PSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -176,13 +176,13 @@ private void affinityTest() throws Exception {\n             //Key 0 is mapped to partition 0, first node.\n             //Key 1 is mapped to partition 1, second node.\n             //key 2 is mapped to partition 0, first node because mapper substitutes key 2 with affinity key 0.\n-            Map<ClusterNode, Collection<Integer>> map = g1.cluster().mapKeysToNodes(null, F.asList(0));\n+            Map<ClusterNode, Collection<Integer>> map = g1.<Integer>affinity(null).mapKeysToNodes(F.asList(0));\n \n             assertNotNull(map);\n             assertEquals(\"Invalid map size: \" + map.size(), 1, map.size());\n             assertEquals(F.first(map.keySet()), first);\n \n-            ClusterNode n1 = g1.cluster().mapKeyToNode(null, 1);\n+            ClusterNode n1 = g1.affinity(null).mapKeyToNode(1);\n \n             assertNotNull(n1);\n \n@@ -191,7 +191,7 @@ private void affinityTest() throws Exception {\n             assertNotNull(id1);\n             assertEquals(second.id(), id1);\n \n-            ClusterNode n2 = g1.cluster().mapKeyToNode(null, 2);\n+            ClusterNode n2 = g1.affinity(null).mapKeyToNode(2);\n \n             assertNotNull(n2);\n \n@@ -206,4 +206,4 @@ private void affinityTest() throws Exception {\n             stopGrid(3);\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "0515685f0622bce906e2520c8f0cded6311f979b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/GridAffinitySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinitySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/GridAffinitySelfTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/GridAffinitySelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -91,18 +91,18 @@ public void testAffinity() throws IgniteCheckedException {\n         assert caches(g1).size() == 0;\n         assert F.first(caches(g2)).getCacheMode() == PARTITIONED;\n \n-        Map<ClusterNode, Collection<String>> map = g1.cluster().mapKeysToNodes(null, F.asList(\"1\"));\n+        Map<ClusterNode, Collection<String>> map = g1.<String>affinity(null).mapKeysToNodes(F.asList(\"1\"));\n \n         assertNotNull(map);\n         assertEquals(\"Invalid map size: \" + map.size(), 1, map.size());\n         assertEquals(F.first(map.keySet()), g2.cluster().localNode());\n \n-        UUID id1 = g1.cluster().mapKeyToNode(null, \"2\").id();\n+        UUID id1 = g1.affinity(null).mapKeyToNode(\"2\").id();\n \n         assertNotNull(id1);\n         assertEquals(g2.cluster().localNode().id(), id1);\n \n-        UUID id2 = g1.cluster().mapKeyToNode(null, \"3\").id();\n+        UUID id2 = g1.affinity(null).mapKeyToNode(\"3\").id();\n \n         assertNotNull(id2);\n         assertEquals(g2.cluster().localNode().id(), id2);\n@@ -120,4 +120,4 @@ public void testAffinity() throws IgniteCheckedException {\n             }\n         });\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "93ff51580039bc72cd210d466f67a155c1591a43",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractFullApiSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -325,7 +325,7 @@ public void testSize() throws Exception {\n             map.put(\"key\" + i, i);\n \n         // Put in primary nodes to avoid near readers which will prevent entry from being cleared.\n-        Map<ClusterNode, Collection<String>> mapped = grid(0).cluster().mapKeysToNodes(null, map.keySet());\n+        Map<ClusterNode, Collection<String>> mapped = grid(0).<String>affinity(null).mapKeysToNodes(map.keySet());\n \n         for (int i = 0; i < gridCount(); i++) {\n             Collection<String> keys = mapped.get(grid(i).localNode());\n@@ -338,7 +338,7 @@ public void testSize() throws Exception {\n \n         map.remove(\"key0\");\n \n-        mapped = grid(0).cluster().mapKeysToNodes(null, map.keySet());\n+        mapped = grid(0).<String>affinity(null).mapKeysToNodes(map.keySet());\n \n         for (int i = 0; i < gridCount(); i++) {\n             // Will actually delete entry from map.",
                "deletions": 2
            },
            {
                "sha": "34a74eb4df5bea934b851c56c18a049e63c82963",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityRoutingSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityRoutingSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityRoutingSelfTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityRoutingSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -276,8 +276,8 @@ private CheckRunnable(Object affKey, Object key) {\n \n         /** {@inheritDoc} */\n         @Override public void applyx() throws IgniteCheckedException {\n-            assert ignite.cluster().localNode().id().equals(ignite.cluster().mapKeyToNode(null, affKey).id());\n-            assert ignite.cluster().localNode().id().equals(ignite.cluster().mapKeyToNode(null, key).id());\n+            assert ignite.cluster().localNode().id().equals(ignite.affinity(null).mapKeyToNode(affKey).id());\n+            assert ignite.cluster().localNode().id().equals(ignite.affinity(null).mapKeyToNode(key).id());\n         }\n     }\n \n@@ -412,10 +412,10 @@ private CheckCallable(Object affKey, Object key) {\n \n         /** {@inheritDoc} */\n         @Override public Object call() throws IgniteCheckedException {\n-            assert ignite.cluster().localNode().id().equals(ignite.cluster().mapKeyToNode(null, affKey).id());\n-            assert ignite.cluster().localNode().id().equals(ignite.cluster().mapKeyToNode(null, key).id());\n+            assert ignite.cluster().localNode().id().equals(ignite.affinity(null).mapKeyToNode(affKey).id());\n+            assert ignite.cluster().localNode().id().equals(ignite.affinity(null).mapKeyToNode(key).id());\n \n             return null;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 5
            },
            {
                "sha": "69445ea30f89f2a7bab18759ee5d8226fba72eb8",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentTxMultiNodeTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentTxMultiNodeTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentTxMultiNodeTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentTxMultiNodeTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -228,7 +228,7 @@ public void testEvictions() throws Exception {\n                     String terminalId = String.valueOf(++tid);\n \n                     // Server partition cache\n-                    UUID mappedId = srvr1.cluster().mapKeyToNode(null, terminalId).id();\n+                    UUID mappedId = srvr1.affinity(null).mapKeyToNode(terminalId).id();\n \n                     if (!srvrId.equals(mappedId))\n                         continue;\n@@ -840,4 +840,4 @@ public String getCacheKey() {\n             return null;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "7d209c6a0859347a1a6ef8889bbd00a43eca5653",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDaemonNodeAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDaemonNodeAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDaemonNodeAbstractSelfTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDaemonNodeAbstractSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -19,15 +19,18 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.Callable;\n import org.apache.ignite.Ignite;\n import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n import org.apache.ignite.cache.CacheMode;\n import org.apache.ignite.configuration.CacheConfiguration;\n import org.apache.ignite.configuration.IgniteConfiguration;\n import org.apache.ignite.configuration.NearCacheConfiguration;\n import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n import org.apache.ignite.transactions.Transaction;\n \n@@ -167,18 +170,24 @@ public void testMapKeyToNode() throws Exception {\n             // Start daemon node.\n             daemon = true;\n \n-            Ignite g2 = startGrid(4);\n+            final Ignite g2 = startGrid(4);\n \n             for (long i = 0; i < Integer.MAX_VALUE; i = (i << 1) + 1) {\n                 // Call mapKeyToNode for normal node.\n-                assertNotNull(g1.cluster().mapKeyToNode(null, i));\n+                assertNotNull(g1.<Long>affinity(null).mapKeyToNode(i));\n \n                 // Call mapKeyToNode for daemon node.\n-                assertNull(g2.cluster().mapKeyToNode(null, i));\n+                final long i0 = i;\n+\n+                GridTestUtils.assertThrows(log, new Callable<Object>() {\n+                    @Override public Object call() throws Exception {\n+                        return g2.<Long>affinity(null).mapKeyToNode(i0);\n+                    }\n+                }, IgniteException.class, \"Failed to find cache\");\n             }\n         }\n         finally {\n             stopAllGrids();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "db6c88279898beeede9a224a354544e586281865",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentSelfTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -158,7 +158,7 @@ public void testDeployment2() throws Exception {\n             for (int i = 0; i < 1000; i++) {\n                 key = \"1\" + i;\n \n-                if (g1.cluster().mapKeyToNode(null, key).id().equals(g2.cluster().localNode().id()))\n+                if (g1.affinity(null).mapKeyToNode(key).id().equals(g2.cluster().localNode().id()))\n                     break;\n             }\n \n@@ -193,7 +193,7 @@ public void testDeployment3() throws Exception {\n             for (int i = 0; i < 1000; i++) {\n                 key = \"1\" + i;\n \n-                if (g1.cluster().mapKeyToNode(null, key).id().equals(g2.cluster().localNode().id()))\n+                if (g1.affinity(null).mapKeyToNode(key).id().equals(g2.cluster().localNode().id()))\n                     break;\n             }\n \n@@ -352,7 +352,7 @@ public void testDeployment6() throws Exception {\n             for (int i = 0; i < 1000; i++) {\n                 key = \"1\" + i;\n \n-                if (g1.cluster().mapKeyToNode(null, key).id().equals(g2.cluster().localNode().id()))\n+                if (g1.affinity(null).mapKeyToNode(key).id().equals(g2.cluster().localNode().id()))\n                     break;\n             }\n \n@@ -385,7 +385,7 @@ public void testDeployment7() throws Exception {\n             for (int i = 0; i < 1000; i++) {\n                 key = \"1\" + i;\n \n-                if (g1.cluster().mapKeyToNode(null, key).id().equals(g2.cluster().localNode().id()))\n+                if (g1.affinity(null).mapKeyToNode(key).id().equals(g2.cluster().localNode().id()))\n                     break;\n             }\n ",
                "deletions": 4
            },
            {
                "sha": "9e3ea7b58f733ff5c2fd2fcd7e7e46eef6be5dbf",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheEntryMemorySizeSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheEntryMemorySizeSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheEntryMemorySizeSelfTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheEntryMemorySizeSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -217,7 +217,7 @@ public void testPartitionedNearEnabled() throws Exception {\n                 while (true) {\n                     key++;\n \n-                    if (grid(0).cluster().mapKeyToNode(null, key).equals(grid(0).localNode())) {\n+                    if (grid(0).affinity(null).mapKeyToNode(key).equals(grid(0).localNode())) {\n                         if (i > 0)\n                             jcache(0).put(key, new Value(new byte[i * 1024]));\n \n@@ -271,7 +271,7 @@ public void testPartitionedNearDisabled() throws Exception {\n                 while (true) {\n                     key++;\n \n-                    if (grid(0).cluster().mapKeyToNode(null, key).equals(grid(0).localNode())) {\n+                    if (grid(0).affinity(null).mapKeyToNode(key).equals(grid(0).localNode())) {\n                         if (i > 0)\n                             jcache(0).put(key, new Value(new byte[i * 1024]));\n \n@@ -346,4 +346,4 @@ private Value(byte[] arr) {\n             return arr != null ? Arrays.hashCode(arr) : 0;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 3
            },
            {
                "sha": "7d2b5503588a8b099261b8b40f60d7a95cca8ef8",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePartitionedProjectionAffinitySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePartitionedProjectionAffinitySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePartitionedProjectionAffinitySelfTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePartitionedProjectionAffinitySelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -88,7 +88,7 @@ public void testAffinity() throws Exception {\n         Ignite g1 = grid(1);\n \n         for (int i = 0; i < 100; i++)\n-            assertEquals(g0.cluster().mapKeyToNode(null, i).id(), g1.cluster().mapKeyToNode(null, i).id());\n+            assertEquals(g0.affinity(null).mapKeyToNode(i).id(), g1.affinity(null).mapKeyToNode(i).id());\n     }\n \n     /** @throws Exception If failed. */\n@@ -105,13 +105,13 @@ public void testProjectionAffinity() throws Exception {\n             g1.cluster().forNodeIds(F.asList(g0.cluster().localNode().id(), g1.cluster().localNode().id()));\n \n         for (int i = 0; i < 100; i++)\n-            assertEquals(g0Pinned.ignite().cluster().mapKeyToNode(null, i).id(),\n-                g01Pinned.ignite().cluster().mapKeyToNode(null, i).id());\n+            assertEquals(g0Pinned.ignite().affinity(null).mapKeyToNode(i).id(),\n+                g01Pinned.ignite().affinity(null).mapKeyToNode(i).id());\n     }\n \n     /** @throws Exception If failed. */\n     @SuppressWarnings(\"BusyWait\")\n     private void waitTopologyUpdate() throws Exception {\n         GridTestUtils.waitTopologyUpdate(null, BACKUPS, log());\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "b48bbc7974c254d490aac36913eb5c417a6246fc",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePutAllFailoverSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePutAllFailoverSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePutAllFailoverSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCachePutAllFailoverSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -303,7 +303,7 @@ public void checkPutAllFailover(boolean near, int workerCnt, int shutdownCnt) th\n \n         try {\n             // Dummy call to fetch affinity function from remote node\n-            master.cluster().mapKeyToNode(CACHE_NAME, \"Dummy\");\n+            master.affinity(CACHE_NAME).mapKeyToNode(\"Dummy\");\n \n             Random rnd = new Random();\n \n@@ -517,7 +517,7 @@ public void checkPutAllFailoverColocated(boolean near, int workerCnt, int shutdo\n             IgniteCompute comp = compute(master.cluster().forPredicate(workerNodesFilter)).withAsync();\n \n             for (Integer key : testKeys) {\n-                ClusterNode mappedNode = master.cluster().mapKeyToNode(CACHE_NAME, key);\n+                ClusterNode mappedNode = master.affinity(CACHE_NAME).mapKeyToNode(key);\n \n                 UUID nodeId = mappedNode.id();\n ",
                "deletions": 2
            },
            {
                "sha": "e1e5315dda4d356b5bb63e9952c48d02c990cb2b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridCacheDhtMultiBackupTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridCacheDhtMultiBackupTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridCacheDhtMultiBackupTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridCacheDhtMultiBackupTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -70,7 +70,7 @@ public void testPut() throws Exception {\n             for (int key = 0; key < 1000; key++) {\n                 SampleKey key1 = new SampleKey(key);\n \n-                if (!g.cluster().localNode().id().equals(g.cluster().mapKeyToNode(\"partitioned\", key1).id())) {\n+                if (!g.cluster().localNode().id().equals(g.affinity(\"partitioned\").mapKeyToNode(key1).id())) {\n                     cache.put(key1, new SampleValue(key));\n \n                     cnt++;\n@@ -133,4 +133,4 @@ private SampleValue(int val) {\n             return obj instanceof SampleValue && ((SampleValue)obj).val == val;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "c7e53e8c79c278d998ee8cb41987ec147d7e7cdb",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearOnlyTopologySelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearOnlyTopologySelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearOnlyTopologySelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearOnlyTopologySelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -148,7 +148,7 @@ public void testKeyMappingOnComputeNode() throws Exception {\n             Ignite compute = startGrid(4);\n \n             for (int i = 0; i < 100; i++) {\n-                ClusterNode node = compute.cluster().mapKeyToNode(null, i);\n+                ClusterNode node = compute.affinity(null).mapKeyToNode(i);\n \n                 assertFalse(\"For key: \" + i, node.id().equals(compute.cluster().localNode().id()));\n                 assertFalse(\"For key: \" + i, node.id().equals(grid(0).localNode().id()));\n@@ -250,4 +250,4 @@ private void checkStartupNearNode(int nearNodeIdx, int totalNodeCnt) throws Exce\n             stopAllGrids();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "c246049dc617c07bff4b3c1f850b31d91391753e",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearTxMultiNodeSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearTxMultiNodeSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearTxMultiNodeSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCacheNearTxMultiNodeSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -104,7 +104,7 @@ public void testTxCleanup() throws Exception {\n         try {\n             Integer mainKey = 0;\n \n-            ClusterNode priNode = ignite.cluster().mapKeyToNode(null, mainKey);\n+            ClusterNode priNode = ignite.affinity(null).mapKeyToNode(mainKey);\n             ClusterNode backupNode = F.first(F.view(ignite.affinity(null).mapKeyToPrimaryAndBackups(mainKey),\n                 F.notIn(F.asList(priNode))));\n             ClusterNode otherNode = F.first(ignite.cluster().forPredicate(F.notIn(F.asList(priNode, backupNode))).nodes());\n@@ -250,4 +250,4 @@ private void checkTm(Ignite g, IgniteTxManager tm) {\n         for (IgniteInternalTx tx : txs)\n             assert tx.done() : \"Transaction is not finished: \" + tx;\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "a7eaa3399d3ef733046f5da6da3bfbe025d4ffd9",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCachePartitionedExplicitLockNodeFailureSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCachePartitionedExplicitLockNodeFailureSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCachePartitionedExplicitLockNodeFailureSelfTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/near/GridCachePartitionedExplicitLockNodeFailureSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -92,10 +92,10 @@ public void testLockFromNearOrBackup() throws Exception {\n \n         Integer key = 0;\n \n-        while (grid(idx).cluster().mapKeyToNode(null, key).id().equals(grid(0).localNode().id()))\n+        while (grid(idx).affinity(null).mapKeyToNode(key).id().equals(grid(0).localNode().id()))\n             key++;\n \n-        ClusterNode node = grid(idx).cluster().mapKeyToNode(null, key);\n+        ClusterNode node = grid(idx).affinity(null).mapKeyToNode(key);\n \n         info(\"Primary node for key [id=\" + node.id() + \", order=\" + node.order() + \", key=\" + key + ']');\n \n@@ -158,4 +158,4 @@ public void testLockFromNearOrBackup() throws Exception {\n             break;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 3
            },
            {
                "sha": "5abb98dd9754688d3838b7ffae2716d59a9cc812",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/GridCacheContinuousQueryAbstractSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -70,10 +70,10 @@\n import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n import org.jetbrains.annotations.Nullable;\n import org.jsr166.ConcurrentHashMap8;\n-import org.jsr166.ConcurrentLinkedDeque8;\n \n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n import static java.util.concurrent.TimeUnit.SECONDS;\n+\n import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC;\n import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n import static org.apache.ignite.cache.CacheMode.LOCAL;\n@@ -581,7 +581,7 @@ public void testLocalNodeOnly() throws Exception {\n             int key = 0;\n \n             while (true) {\n-                ClusterNode n = grid(0).cluster().mapKeyToNode(null, key);\n+                ClusterNode n = grid(0).affinity(null).mapKeyToNode(key);\n \n                 assert n != null;\n \n@@ -655,7 +655,7 @@ public void testBuffering() throws Exception {\n             int key = 0;\n \n             while (true) {\n-                ClusterNode n = grid(0).cluster().mapKeyToNode(null, key);\n+                ClusterNode n = grid(0).affinity(null).mapKeyToNode(key);\n \n                 assert n != null;\n \n@@ -741,7 +741,7 @@ public void testTimeInterval() throws Exception {\n             int key = 0;\n \n             while (true) {\n-                ClusterNode n = grid(0).cluster().mapKeyToNode(null, key);\n+                ClusterNode n = grid(0).affinity(null).mapKeyToNode(key);\n \n                 assert n != null;\n \n@@ -1117,4 +1117,4 @@ public void testEvents() throws Exception {\n             // No-op.\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 5
            },
            {
                "sha": "8383a1874d34d72f7be43acc677599842b836e2b",
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/igfs/IgfsStreamsSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -214,7 +214,7 @@ public void testCreateFileColocated() throws Exception {\n         while (true) {\n             affKey = new IgniteUuid(uuid, idx);\n \n-            if (grid(0).cluster().mapKeyToNode(DATA_CACHE_NAME, affKey).id().equals(grid(0).localNode().id()))\n+            if (grid(0).affinity(DATA_CACHE_NAME).mapKeyToNode(affKey).id().equals(grid(0).localNode().id()))\n                 break;\n \n             idx++;\n@@ -488,4 +488,4 @@ else if (seek % 2 == 0)\n                 \"[size=%7d, rate=%3.1f MB/sec]\", expSize, expSize * 1000. / time / 1024 / 1024));\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "a065580f056c939759e922ea67405689c2ae4506",
                "filename": "modules/core/src/test/java/org/apache/ignite/loadtests/dsi/GridDsiClient.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/loadtests/dsi/GridDsiClient.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/loadtests/dsi/GridDsiClient.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/loadtests/dsi/GridDsiClient.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -272,7 +272,7 @@ public static void main(String[] args) throws Exception {\n                             String terminalId = String.valueOf(++tid);\n \n                             // Server partition cache.\n-                            if (!srvrId.equals(g.cluster().mapKeyToNode(\"PARTITIONED_CACHE\", terminalId).id()))\n+                            if (!srvrId.equals(g.affinity(\"PARTITIONED_CACHE\").mapKeyToNode(terminalId).id()))\n                                 continue;\n \n                             if (terminalsPerSrv < srvMaxNoTerminals) {\n@@ -428,4 +428,4 @@ public static void main(String[] args) throws Exception {\n             fileLock.close();\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "f600e994e8f413d4c1dae1c14008f76166d52a3b",
                "filename": "modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/GridCacheDhtLockBackupSelfTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/GridCacheDhtLockBackupSelfTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/GridCacheDhtLockBackupSelfTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/GridCacheDhtLockBackupSelfTest.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -110,7 +110,7 @@ public void testLock() throws Exception {\n \n         Ignite ignite2 = startGridWithSpi(2, new TestCommunicationSpi(GridNearUnlockRequest.class, 1000));\n \n-        if (!ignite1.cluster().mapKeyToNode(null, kv).id().equals(ignite1.cluster().localNode().id())) {\n+        if (!ignite1.affinity(null).mapKeyToNode(kv).id().equals(ignite1.cluster().localNode().id())) {\n             Ignite tmp = ignite1;\n             ignite1 = ignite2;\n             ignite2 = tmp;\n@@ -287,4 +287,4 @@ private void checkAwaitMessageType(Message obj, UUID srcNodeId) {\n             super.notifyListener(sndId, msg, msgC);\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "699ad0c920f2dfaa231bc96e38bf811b38d6b265",
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/550a4ea7eab41a3d27ff29d1e3a8df09d698524a/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteComputeGridTestSuite.java?ref=550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
                "patch": "@@ -19,6 +19,7 @@\n \n import junit.framework.TestSuite;\n import org.apache.ignite.internal.ClusterNodeMetricsSelfTest;\n+import org.apache.ignite.internal.GridAffinityNoCacheSelfTest;\n import org.apache.ignite.internal.GridAffinitySelfTest;\n import org.apache.ignite.internal.GridAlwaysFailoverSpiFailSelfTest;\n import org.apache.ignite.internal.GridCancelOnGridStopSelfTest;\n@@ -137,6 +138,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(GridFailoverTaskWithPredicateSelfTest.class);\n         suite.addTestSuite(GridProjectionLocalJobMultipleArgumentsSelfTest.class);\n         suite.addTestSuite(GridAffinitySelfTest.class);\n+        suite.addTestSuite(GridAffinityNoCacheSelfTest.class);\n         suite.addTestSuite(GridEventStorageRuntimeConfigurationSelfTest.class);\n         suite.addTestSuite(GridMultinodeRedeployContinuousModeSelfTest.class);\n         suite.addTestSuite(GridMultinodeRedeploySharedModeSelfTest.class);\n@@ -149,4 +151,4 @@ public static TestSuite suite() throws Exception {\n \n         return suite;\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# sprint-2: Fixed NPE and changes for Visor after SQL rework.",
        "commit": "https://github.com/apache/ignite/commit/3eca5e705599033d1e395ed0e5f438dfcdcf681a",
        "parent": "https://github.com/apache/ignite/commit/7deceb2ab433b443a65837c7b0fcbdd762b3acec",
        "bug_id": "ignite_233",
        "file": [
            {
                "sha": "720685349daeec62fe6aa14787dabb94c6f5f57f",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java",
                "blob_url": "https://github.com/apache/ignite/blob/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java",
                "raw_url": "https://github.com/apache/ignite/raw/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java",
                "status": "modified",
                "changes": 21,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java?ref=3eca5e705599033d1e395ed0e5f438dfcdcf681a",
                "patch": "@@ -21,7 +21,6 @@\n import org.apache.ignite.cache.*;\n import org.apache.ignite.configuration.*;\n import org.apache.ignite.internal.util.typedef.internal.*;\n-import org.apache.ignite.internal.visor.node.*;\n import org.jetbrains.annotations.*;\n \n import java.io.*;\n@@ -60,9 +59,6 @@\n     /** Swap enabled flag. */\n     private boolean swapEnabled;\n \n-    /** Flag indicating whether Ignite should attempt to index value and/or key instances stored in cache. */\n-    private boolean qryIdxEnabled;\n-\n     /** Invalidate. */\n     private boolean invalidate;\n \n@@ -75,9 +71,6 @@\n     /** Off-heap max memory. */\n     private long offHeapMaxMemory;\n \n-    /** Max query iterator count */\n-    private int maxQryIterCnt;\n-\n     /** Max concurrent async operations */\n     private int maxConcurrentAsyncOps;\n \n@@ -240,13 +233,6 @@ public boolean swapEnabled() {\n         return swapEnabled;\n     }\n \n-    /**\n-     * @return Flag indicating whether Ignite should attempt to index value and/or key instances stored in cache.\n-     */\n-    public boolean queryIndexEnabled() {\n-        return qryIdxEnabled;\n-    }\n-\n     /**\n      * @return Invalidate.\n      */\n@@ -275,13 +261,6 @@ public long offsetHeapMaxMemory() {\n         return offHeapMaxMemory;\n     }\n \n-    /**\n-     * @return Max query iterator count\n-     */\n-    public int maxQueryIteratorCount() {\n-        return maxQryIterCnt;\n-    }\n-\n     /**\n      * @return Max concurrent async operations\n      */",
                "deletions": 21
            },
            {
                "sha": "53f0ae5826f52a06fd59abd709974e387badab2c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java",
                "blob_url": "https://github.com/apache/ignite/blob/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java",
                "raw_url": "https://github.com/apache/ignite/raw/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java?ref=3eca5e705599033d1e395ed0e5f438dfcdcf681a",
                "patch": "@@ -38,9 +38,6 @@\n     /** */\n     private static final long serialVersionUID = 0L;\n \n-    /** */\n-    private static final String[] EMPTY_STR_ARR = new String[0];\n-\n     /** */\n     private String[] sqlFuncClss;\n \n@@ -61,7 +58,7 @@\n      */\n     private static String[] compactClasses(Class<?>[] clss) {\n         if (clss == null)\n-            return EMPTY_STR_ARR;\n+            return null;\n \n         int len = clss.length;\n ",
                "deletions": 4
            },
            {
                "sha": "37dc4795a8d50c3e5a60ce03bc27f9ec4dd25189",
                "filename": "modules/visor-console/src/main/scala/org/apache/ignite/visor/commands/cache/VisorCacheCommand.scala",
                "blob_url": "https://github.com/apache/ignite/blob/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/visor-console/src/main/scala/org/apache/ignite/visor/commands/cache/VisorCacheCommand.scala",
                "raw_url": "https://github.com/apache/ignite/raw/3eca5e705599033d1e395ed0e5f438dfcdcf681a/modules/visor-console/src/main/scala/org/apache/ignite/visor/commands/cache/VisorCacheCommand.scala",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/visor-console/src/main/scala/org/apache/ignite/visor/commands/cache/VisorCacheCommand.scala?ref=3eca5e705599033d1e395ed0e5f438dfcdcf681a",
                "patch": "@@ -809,8 +809,6 @@ object VisorCacheCommand {\n \n         cacheT += (\"Default Lock Timeout\", defaultCfg.txLockTimeout())\n         cacheT += (\"Default Query Timeout\", defaultCfg.queryTimeout())\n-        cacheT += (\"Query Indexing Enabled\", bool2Str(cfg.queryIndexEnabled()))\n-        cacheT += (\"Query Iterators Number\", cfg.maxQueryIteratorCount())\n         cacheT += (\"Metadata type count\", cfg.typeMeta().size())\n         cacheT += (\"Cache Interceptor\", safe(cfg.interceptor()))\n \n@@ -844,19 +842,23 @@ object VisorCacheCommand {\n \n         val sqlFxs = queryCfg.sqlFunctionClasses()\n \n-        if (sqlFxs.isEmpty)\n+        val hasSqlFxs = sqlFxs != null && sqlFxs.nonEmpty\n+\n+        if (!hasSqlFxs)\n             cacheT +=(\"Query SQL functions\", NA)\n \n         val indexedTypes = queryCfg.indexedTypes()\n \n-        if (indexedTypes.isEmpty)\n+        val hasIndexedTypes = indexedTypes != null && indexedTypes.nonEmpty\n+\n+        if (!hasIndexedTypes)\n             cacheT +=(\"Query Indexed Types\", NA)\n \n         println(title)\n \n         cacheT.render()\n \n-        if (sqlFxs.nonEmpty) {\n+        if (hasSqlFxs) {\n             println(\"\\nQuery SQL functions:\")\n \n             val sqlFxsT = VisorTextTable()\n@@ -868,7 +870,7 @@ object VisorCacheCommand {\n             sqlFxsT.render()\n         }\n \n-        if (indexedTypes.nonEmpty) {\n+        if (hasIndexedTypes) {\n             println(\"\\nQuery Indexed Types:\")\n \n             val indexedTypesT = VisorTextTable()",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "[IGNITE-349]: bugfix by integration testing results: (1) NPE in properties serialization; (2) small usability improvement.",
        "commit": "https://github.com/apache/ignite/commit/d1ebb02bb58b0c2e2e76bccafe832a900b91e729",
        "parent": "https://github.com/apache/ignite/commit/d3a3a3e5d2a018471eabf145da0e2dadf595758c",
        "bug_id": "ignite_234",
        "file": [
            {
                "sha": "3320a96af4e8273f4d75ca89e8872e49cf7b4e07",
                "filename": "modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java",
                "blob_url": "https://github.com/apache/ignite/blob/d1ebb02bb58b0c2e2e76bccafe832a900b91e729/modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java",
                "raw_url": "https://github.com/apache/ignite/raw/d1ebb02bb58b0c2e2e76bccafe832a900b91e729/modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java?ref=d1ebb02bb58b0c2e2e76bccafe832a900b91e729",
                "patch": "@@ -64,7 +64,12 @@ public IgniteHadoopIgfsSecondaryFileSystem(String uri) throws IgniteCheckedExcep\n      * @param cfgPath Additional path to Hadoop configuration.\n      * @throws IgniteCheckedException In case of error.\n      */\n-    public IgniteHadoopIgfsSecondaryFileSystem(@Nullable String uri, @Nullable String cfgPath) throws IgniteCheckedException {\n+    public IgniteHadoopIgfsSecondaryFileSystem(@Nullable String uri, @Nullable String cfgPath)\n+            throws IgniteCheckedException {\n+        // Treat empty uri argument as null to improve configuration usability:\n+        if (F.isEmpty(uri))\n+            uri = null;\n+\n         try {\n             SecondaryFileSystemProvider secProvider = new SecondaryFileSystemProvider(uri, cfgPath);\n \n@@ -75,7 +80,9 @@ public IgniteHadoopIgfsSecondaryFileSystem(@Nullable String uri, @Nullable Strin\n             if (!uri.endsWith(\"/\"))\n                 uri += \"/\";\n \n-            props.put(SECONDARY_FS_CONFIG_PATH, cfgPath);\n+            if (cfgPath != null)\n+                props.put(SECONDARY_FS_CONFIG_PATH, cfgPath);\n+\n             props.put(SECONDARY_FS_URI, uri);\n         }\n         catch (IOException e) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Ignite - Enabled managed services tests and fixed NPE on node stop.",
        "commit": "https://github.com/apache/ignite/commit/ab6275cb5f992f5e9ab5964bd87ee6e90509d15c",
        "parent": "https://github.com/apache/ignite/commit/0a66bd57bfef7c867715a46f7d7c472dc38469e1",
        "bug_id": "ignite_235",
        "file": [
            {
                "sha": "e0873778ce6832a916819b6d749c8845dbfd7af8",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCachePartitionExchangeManager.java",
                "blob_url": "https://github.com/apache/ignite/blob/ab6275cb5f992f5e9ab5964bd87ee6e90509d15c/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCachePartitionExchangeManager.java",
                "raw_url": "https://github.com/apache/ignite/raw/ab6275cb5f992f5e9ab5964bd87ee6e90509d15c/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCachePartitionExchangeManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/GridCachePartitionExchangeManager.java?ref=ab6275cb5f992f5e9ab5964bd87ee6e90509d15c",
                "patch": "@@ -256,15 +256,15 @@\n         for (GridDhtPartitionsExchangeFuture<K, V> f : exchFuts.values())\n             f.onDone(new GridInterruptedException(\"Grid is stopping: \" + cctx.gridName()));\n \n-        exchFuts = null;\n-\n         U.cancel(exchWorker);\n \n         if (log.isDebugEnabled())\n             log.debug(\"Before joining on exchange worker: \" + exchWorker);\n \n         U.join(exchWorker, log);\n \n+        exchFuts = null;\n+\n         ResendTimeoutObject resendTimeoutObj = pendingResend.getAndSet(null);\n \n         if (resendTimeoutObj != null)",
                "deletions": 2
            },
            {
                "sha": "e722efbf9a730e33cd874117f90783aeff581e6c",
                "filename": "modules/core/src/test/java/org/gridgain/testsuites/GridKernalSelfTestSuite.java",
                "blob_url": "https://github.com/apache/ignite/blob/ab6275cb5f992f5e9ab5964bd87ee6e90509d15c/modules/core/src/test/java/org/gridgain/testsuites/GridKernalSelfTestSuite.java",
                "raw_url": "https://github.com/apache/ignite/raw/ab6275cb5f992f5e9ab5964bd87ee6e90509d15c/modules/core/src/test/java/org/gridgain/testsuites/GridKernalSelfTestSuite.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/gridgain/testsuites/GridKernalSelfTestSuite.java?ref=ab6275cb5f992f5e9ab5964bd87ee6e90509d15c",
                "patch": "@@ -61,11 +61,11 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(GridLocalEventListenerSelfTest.class);\n \n         // Managed Services.\n-//        suite.addTestSuite(GridServiceProcessorSingleNodeSelfTest.class); TODO GG-9141\n-//        suite.addTestSuite(GridServiceProcessorMultiNodeSelfTest.class);\n-//        suite.addTestSuite(GridServiceProcessorMultiNodeConfigSelfTest.class);\n-//        suite.addTestSuite(GridServiceProcessorProxySelfTest.class);\n-//        suite.addTestSuite(GridServiceReassignmentSelfTest.class);\n+        suite.addTestSuite(GridServiceProcessorSingleNodeSelfTest.class);\n+        suite.addTestSuite(GridServiceProcessorMultiNodeSelfTest.class);\n+        suite.addTestSuite(GridServiceProcessorMultiNodeConfigSelfTest.class);\n+        suite.addTestSuite(GridServiceProcessorProxySelfTest.class);\n+        suite.addTestSuite(GridServiceReassignmentSelfTest.class);\n \n         return suite;\n     }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-8825 Fixed usage of deprecated API and NPE in case if restEnabled = false.",
        "commit": "https://github.com/apache/ignite/commit/132658167159cf70d59d73cd7ed49e2f12b1e8ec",
        "parent": "https://github.com/apache/ignite/commit/bec2e03afb27237b28b9192373f43ff6af142ac1",
        "bug_id": "ignite_236",
        "file": [
            {
                "sha": "59c9c9cf111f2aa6ef76400305dbc2c140b13da6",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorExecutorServiceConfig.java",
                "blob_url": "https://github.com/apache/ignite/blob/132658167159cf70d59d73cd7ed49e2f12b1e8ec/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorExecutorServiceConfig.java",
                "raw_url": "https://github.com/apache/ignite/raw/132658167159cf70d59d73cd7ed49e2f12b1e8ec/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorExecutorServiceConfig.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorExecutorServiceConfig.java?ref=132658167159cf70d59d73cd7ed49e2f12b1e8ec",
                "patch": "@@ -65,8 +65,10 @@ public static VisorExecutorServiceConfig from(GridConfiguration c) {\n \n         GridClientConnectionConfiguration cc = c.getClientConnectionConfiguration();\n \n-        cfg.restExecutorService(compactClass(cc.getRestExecutorService()));\n-        cfg.restExecutorServiceShutdown(cc.isRestExecutorServiceShutdown());\n+        if (cc != null) {\n+            cfg.restExecutorService(compactClass(cc.getRestExecutorService()));\n+            cfg.restExecutorServiceShutdown(cc.isRestExecutorServiceShutdown());\n+        }\n \n         return cfg;\n     }",
                "deletions": 2
            },
            {
                "sha": "277529e2d13b24369fc947fc33157fc1ba859f1a",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorRestConfig.java",
                "blob_url": "https://github.com/apache/ignite/blob/132658167159cf70d59d73cd7ed49e2f12b1e8ec/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorRestConfig.java",
                "raw_url": "https://github.com/apache/ignite/raw/132658167159cf70d59d73cd7ed49e2f12b1e8ec/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorRestConfig.java",
                "status": "modified",
                "changes": 25,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/visor/cmd/dto/node/VisorRestConfig.java?ref=132658167159cf70d59d73cd7ed49e2f12b1e8ec",
                "patch": "@@ -60,15 +60,22 @@\n     public static VisorRestConfig from(GridConfiguration c) {\n         VisorRestConfig cfg = new VisorRestConfig();\n \n-        cfg.restEnabled(c.isRestEnabled());\n-        cfg.tcpSslEnabled(c.isRestTcpSslEnabled());\n-        cfg.accessibleFolders(c.getRestAccessibleFolders());\n-        cfg.jettyPath(c.getRestJettyPath());\n-        cfg.jettyHost(getProperty(GG_JETTY_HOST));\n-        cfg.jettyPort(intValue(GG_JETTY_PORT, null));\n-        cfg.tcpHost(c.getRestTcpHost());\n-        cfg.tcpPort(c.getRestTcpPort());\n-        cfg.tcpSslContextFactory(compactClass(c.getRestTcpSslContextFactory()));\n+        GridClientConnectionConfiguration clnCfg = c.getClientConnectionConfiguration();\n+\n+        boolean restEnabled = clnCfg != null;\n+\n+        cfg.restEnabled(restEnabled);\n+\n+        if (restEnabled) {\n+            cfg.tcpSslEnabled(clnCfg.isRestTcpSslEnabled());\n+            cfg.accessibleFolders(clnCfg.getRestAccessibleFolders());\n+            cfg.jettyPath(clnCfg.getRestJettyPath());\n+            cfg.jettyHost(getProperty(GG_JETTY_HOST));\n+            cfg.jettyPort(intValue(GG_JETTY_PORT, null));\n+            cfg.tcpHost(clnCfg.getRestTcpHost());\n+            cfg.tcpPort(clnCfg.getRestTcpPort());\n+            cfg.tcpSslContextFactory(compactClass(clnCfg.getRestTcpSslContextFactory()));\n+        }\n \n         return cfg;\n     }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "GG-8512 - Guard deferred response buffer sending with cache gateway to prevent NPE on Grid stop.",
        "commit": "https://github.com/apache/ignite/commit/d85828e1a748e8abcedf61fbb362b5d3cc6214b2",
        "parent": "https://github.com/apache/ignite/commit/d5649fb52102042dd319f263062137387ab63801",
        "bug_id": "ignite_237",
        "file": [
            {
                "sha": "7da912dc5bccc3c6a457e242527073944ab40bad",
                "filename": "modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "blob_url": "https://github.com/apache/ignite/blob/d85828e1a748e8abcedf61fbb362b5d3cc6214b2/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "raw_url": "https://github.com/apache/ignite/raw/d85828e1a748e8abcedf61fbb362b5d3cc6214b2/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/gridgain/grid/kernal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java?ref=d85828e1a748e8abcedf61fbb362b5d3cc6214b2",
                "patch": "@@ -2398,7 +2398,19 @@ private void finish() {\n             GridDhtAtomicDeferredUpdateResponse<K, V> msg = new GridDhtAtomicDeferredUpdateResponse<>(respVers);\n \n             try {\n-                ctx.io().send(nodeId, msg);\n+                ctx.gate().enter();\n+\n+                try {\n+                    ctx.io().send(nodeId, msg);\n+                }\n+                finally {\n+                    ctx.gate().leave();\n+                }\n+            }\n+            catch (IllegalStateException ignored) {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Failed to send deferred dht update response to remote node (grid is stopping) \" +\n+                        \"[nodeId=\" + nodeId + \", msg=\" + msg + ']');\n             }\n             catch (GridTopologyException ignored) {\n                 if (log.isDebugEnabled())",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "# GG-7625 Fixed NPE in visor-console. Changed output of cache queries metrics.",
        "commit": "https://github.com/apache/ignite/commit/48e0977f1e883c33751421bc43fca8aa8d0f3218",
        "parent": "https://github.com/apache/ignite/commit/b9bb776e4f06ca138ee2d878a3a8d8f3cd09a847",
        "bug_id": "ignite_238",
        "file": [
            {
                "sha": "c2526f4c55dd86539e7b9ca36919601e0fde61d8",
                "filename": "modules/visor-console/src/org/gridgain/visor/commands/cache/VisorCacheCommand.scala",
                "blob_url": "https://github.com/apache/ignite/blob/48e0977f1e883c33751421bc43fca8aa8d0f3218/modules/visor-console/src/org/gridgain/visor/commands/cache/VisorCacheCommand.scala",
                "raw_url": "https://github.com/apache/ignite/raw/48e0977f1e883c33751421bc43fca8aa8d0f3218/modules/visor-console/src/org/gridgain/visor/commands/cache/VisorCacheCommand.scala",
                "status": "modified",
                "changes": 90,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/visor-console/src/org/gridgain/visor/commands/cache/VisorCacheCommand.scala?ref=48e0977f1e883c33751421bc43fca8aa8d0f3218",
                "patch": "@@ -308,42 +308,36 @@ class VisorCacheCommand {\n \n                         csT.render()\n \n-                        println(\"\\nNodes for: \" + cacheNameVar)\n+                        nl()\n+                        println(\"Nodes for: \" + cacheNameVar)\n \n                         ciT.render()\n \n+                        // Print footnote.\n+                        println(\"'Hi' - Number of cache hits.\")\n+                        println(\"'Mi' - Number of cache misses.\")\n+                        println(\"'Rd' - number of cache reads.\")\n+                        println(\"'Wr' - Number of cache writes.\")\n+\n+                        // Print metrics.\n                         val qm = ad.qryMetrics\n \n-                        println(\"\\nQueries metrics:\")\n-                        println(\"Minimum execution time: \" + X.timeSpan2HMSM(qm.minTime))\n-                        println(\"Maximum execution time: \" + X.timeSpan2HMSM(qm.maxTime))\n-                        println(\"Average execution time: \" + X.timeSpan2HMSM(qm.avgTime.toLong))\n-                        println(\"Total Number of executions: \" + qm.execs)\n-                        println(\"Total number of failures: \" + qm.fails)\n+                        nl()\n+                        println(\"Aggregated queries metrics:\")\n+                        println(\"  Minimum execution time: \" + X.timeSpan2HMSM(qm.minTime))\n+                        println(\"  Maximum execution time: \" + X.timeSpan2HMSM(qm.maxTime))\n+                        println(\"  Average execution time: \" + X.timeSpan2HMSM(qm.avgTime.toLong))\n+                        println(\"  Total number of executions: \" + qm.execs)\n+                        println(\"  Total number of failures:   \" + qm.fails)\n                     })\n \n-                    nl()\n-\n-                    footnote()\n                 }\n                 else\n                     println(\"\\nUse \\\"-a\\\" flag to see detailed statistics.\")\n             }\n         }\n     }\n \n-    /**\n-     * Prints footnote.\n-     */\n-    private def footnote() {\n-        println(\"'Hi' - Number of cache hits.\")\n-        println(\"'Mi' - Number of cache misses.\")\n-        println(\"'Rd' - number of cache reads.\")\n-        println(\"'Wr' - Number of cache writes.\")\n-        println(\"\\n'Ex' - Number of query executions.\")\n-        println(\"'Fa' - Number of query failures.\")\n-    }\n-\n     /**\n      * Makes extended cache host attaching optional visor variable host\n      * associated with it.\n@@ -496,29 +490,33 @@ private class VisorCacheDataTask extends VisorConsoleMultiNodeTask[Option[String\n                 case None => g.cachesx()\n             }\n \n-            caches.collect {\n-                case c =>\n-                    val m = g.localNode.metrics\n-                    val qm = c.queries().metrics()\n-\n-                    VisorCacheData(\n-                        cacheName = c.name,\n-                        nodeId = g.localNode.id,\n-                        cpus = m.getTotalCpus,\n-                        heapUsed = m.getHeapMemoryUsed / m.getHeapMemoryMaximum * 100,\n-                        cpuLoad = m.getCurrentCpuLoad * 100,\n-                        upTime = m.getUpTime,\n-                        size = c.size,\n-                        lastRead = c.metrics.readTime,\n-                        lastWrite = c.metrics.writeTime,\n-                        hits = c.metrics.hits,\n-                        misses = c.metrics.misses,\n-                        reads = c.metrics.reads,\n-                        writes = c.metrics.writes,\n-                        VisorCacheQueryMetrics(qm.minimumTime(), qm.maximumTime(), qm.averageTime(),\n-                            qm.executions(), qm.fails())\n-                    )\n-            }.toSeq\n+            if (caches != null)\n+                caches.collect {\n+                    case c =>\n+                        val m = g.localNode.metrics\n+                        val qm = c.queries().metrics()\n+\n+                        VisorCacheData(\n+                            cacheName = c.name,\n+                            nodeId = g.localNode.id,\n+                            cpus = m.getTotalCpus,\n+                            heapUsed = m.getHeapMemoryUsed / m.getHeapMemoryMaximum * 100,\n+                            cpuLoad = m.getCurrentCpuLoad * 100,\n+                            upTime = m.getUpTime,\n+                            size = c.size,\n+                            lastRead = c.metrics.readTime,\n+                            lastWrite = c.metrics.writeTime,\n+                            hits = c.metrics.hits,\n+                            misses = c.metrics.misses,\n+                            reads = c.metrics.reads,\n+                            writes = c.metrics.writes,\n+                            VisorCacheQueryMetrics(qm.minimumTime(), qm.maximumTime(), qm.averageTime(),\n+                                qm.executions(), qm.fails())\n+                        )\n+                }.toSeq\n+            else\n+                Seq.empty[VisorCacheData]\n+\n         }\n     }\n \n@@ -579,7 +577,7 @@ private class VisorCacheDataTask extends VisorConsoleMultiNodeTask[Option[String\n \n             val aqm = ad.qryMetrics\n \n-            aqm.avgTime = aqm.totalTime / aqm.execs\n+            aqm.avgTime = if (aqm.execs > 0) aqm.totalTime / aqm.execs else 0\n         })\n \n         aggrData.values",
                "deletions": 46
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "#ignite-834: IgniteCache.clearAll() throws NPE.\n#ignite-732: IgniteCache.size() should not fail in case of topology changes.",
        "commit": "https://github.com/apache/ignite/commit/99c7e228d12e25826f74d6d8706d158ec36004ed",
        "parent": "https://github.com/apache/ignite/commit/9ff80298f395315027883ade7771730b6182477f",
        "bug_id": "ignite_239",
        "file": [
            {
                "sha": "6674993dd0c9b940a359656cecfbadfdee0db556",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "blob_url": "https://github.com/apache/ignite/blob/99c7e228d12e25826f74d6d8706d158ec36004ed/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "raw_url": "https://github.com/apache/ignite/raw/99c7e228d12e25826f74d6d8706d158ec36004ed/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java",
                "status": "modified",
                "changes": 511,
                "additions": 245,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java?ref=99c7e228d12e25826f74d6d8706d158ec36004ed",
                "patch": "@@ -21,10 +21,10 @@\n import org.apache.ignite.cache.*;\n import org.apache.ignite.cache.affinity.*;\n import org.apache.ignite.cluster.*;\n+import org.apache.ignite.compute.*;\n import org.apache.ignite.configuration.*;\n import org.apache.ignite.internal.*;\n import org.apache.ignite.internal.cluster.*;\n-import org.apache.ignite.internal.compute.*;\n import org.apache.ignite.internal.processors.affinity.*;\n import org.apache.ignite.internal.processors.cache.affinity.*;\n import org.apache.ignite.internal.processors.cache.distributed.*;\n@@ -1083,99 +1083,71 @@ private boolean clearLocally(GridCacheVersion obsoleteVer, K key, @Nullable Cach\n         // Clear local cache synchronously.\n         clearLocally();\n \n-        clearRemotes(0, new GlobalClearAllCallable(name()));\n+        clearRemotes(0, null);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void clear(K key) throws IgniteCheckedException {\n         // Clear local cache synchronously.\n         clearLocally(key);\n \n-        clearRemotes(0, new GlobalClearKeySetCallable<K, V>(name(), Collections.singleton(key)));\n+        clearRemotes(0, Collections.singleton(key));\n     }\n \n     /** {@inheritDoc} */\n     @Override public void clearAll(Set<? extends K> keys) throws IgniteCheckedException {\n         // Clear local cache synchronously.\n         clearLocallyAll(keys);\n \n-        clearRemotes(0, new GlobalClearKeySetCallable<K, V>(name(), keys));\n+        clearRemotes(0, keys);\n     }\n \n     /** {@inheritDoc} */\n     @Override public IgniteInternalFuture<?> clearAsync(K key) {\n-        return clearAsync(new GlobalClearKeySetCallable<K, V>(name(), Collections.singleton(key)));\n+        return clearKeysAsync(Collections.singleton(key));\n     }\n \n     /** {@inheritDoc} */\n     @Override public IgniteInternalFuture<?> clearAsync(Set<? extends K> keys) {\n-        return clearAsync(new GlobalClearKeySetCallable<K, V>(name(), keys));\n+        return clearKeysAsync(keys);\n     }\n \n     /**\n      * @param timeout Timeout for clearLocally all task in milliseconds (0 for never).\n      *      Set it to larger value for large caches.\n-     * @param clearCall Global clear callable object.\n+     * @param keys Keys to clear or {@code null} if all cache should be cleared.\n      * @throws IgniteCheckedException In case of cache could not be cleared on any of the nodes.\n      */\n-    private void clearRemotes(long timeout, GlobalClearCallable clearCall) throws IgniteCheckedException {\n-        try {\n-            // Send job to remote nodes only.\n-            Collection<ClusterNode> nodes =\n-                ctx.grid().cluster().forCacheNodes(name(), true, true, false).forRemotes().nodes();\n-\n-            IgniteInternalFuture<Object> fut = null;\n-\n-            if (!nodes.isEmpty()) {\n-                ctx.kernalContext().task().setThreadContext(TC_TIMEOUT, timeout);\n+    private void clearRemotes(long timeout, @Nullable final Set<? extends K> keys) throws IgniteCheckedException {\n+        // Send job to remote nodes only.\n+        Collection<ClusterNode> nodes =\n+            ctx.grid().cluster().forCacheNodes(name(), true, true, false).forRemotes().nodes();\n \n-                fut = ctx.closures().callAsyncNoFailover(BROADCAST, clearCall, nodes, true);\n-            }\n+        if (!nodes.isEmpty()) {\n+            ctx.kernalContext().task().setThreadContext(TC_TIMEOUT, timeout);\n \n-            if (fut != null)\n-                fut.get();\n-        }\n-        catch (ClusterGroupEmptyCheckedException ignore) {\n-            if (log.isDebugEnabled())\n-                log.debug(\"All remote nodes left while cache clearLocally [cacheName=\" + name() + \"]\");\n-        }\n-        catch (ComputeTaskTimeoutCheckedException e) {\n-            U.warn(log, \"Timed out waiting for remote nodes to finish cache clear (consider increasing \" +\n-                \"'networkTimeout' configuration property) [cacheName=\" + name() + \"]\");\n+            ctx.kernalContext().task().setThreadContext(TC_SUBGRID, nodes);\n \n-            throw e;\n+            ctx.kernalContext().task().execute(new ClearTask(ctx, keys), null).get();\n         }\n     }\n \n     /** {@inheritDoc} */\n     @Override public IgniteInternalFuture<?> clearAsync() {\n-        return clearAsync(new GlobalClearAllCallable(name()));\n+        return clearKeysAsync(null);\n     }\n \n     /**\n-     * @param clearCall Global clear callable object.\n+     * @param keys Keys to clear or {@code null} if all cache should be cleared.\n      * @return Future.\n      */\n-    private IgniteInternalFuture<?> clearAsync(GlobalClearCallable clearCall) {\n+    private IgniteInternalFuture<?> clearKeysAsync(final Set<? extends K> keys) {\n         Collection<ClusterNode> nodes = ctx.grid().cluster().forCacheNodes(name(), true, true, false).nodes();\n \n         if (!nodes.isEmpty()) {\n-            IgniteInternalFuture<Object> fut =\n-                ctx.closures().callAsyncNoFailover(BROADCAST, clearCall, nodes, true);\n+            ctx.kernalContext().task().setThreadContext(TC_SUBGRID, nodes);\n \n-            return fut.chain(new CX1<IgniteInternalFuture<Object>, Object>() {\n-                @Override public Object applyx(IgniteInternalFuture<Object> fut) throws IgniteCheckedException {\n-                    try {\n-                        return fut.get();\n-                    }\n-                    catch (ClusterGroupEmptyCheckedException ignore) {\n-                        if (log.isDebugEnabled())\n-                            log.debug(\"All remote nodes left while cache clearLocally [cacheName=\" + name() + \"]\");\n-\n-                        return null;\n-                    }\n-                }\n-            });\n+            return ctx.kernalContext().task().execute(new ClearTask(ctx, keys), null);\n         }\n         else\n             return new GridFinishedFuture<>();\n@@ -3562,7 +3534,7 @@ void globalLoadCache(@Nullable IgniteBiPredicate<K, V> p, @Nullable Object... ar\n     }\n \n     /** {@inheritDoc} */\n-    @Override public IgniteInternalFuture<Integer> sizeAsync(CachePeekMode[] peekModes) {\n+    @Override public IgniteInternalFuture<Integer> sizeAsync(final CachePeekMode[] peekModes) {\n         assert peekModes != null;\n \n         PeekModes modes = parsePeekModes(peekModes, true);\n@@ -3576,22 +3548,9 @@ void globalLoadCache(@Nullable IgniteBiPredicate<K, V> p, @Nullable Object... ar\n         if (nodes.isEmpty())\n             return new GridFinishedFuture<>(0);\n \n-        IgniteInternalFuture<Collection<Integer>> fut =\n-            ctx.closures().broadcastNoFailover(new SizeCallable(ctx.name(), peekModes), null, nodes);\n-\n-        return fut.chain(new CX1<IgniteInternalFuture<Collection<Integer>>, Integer>() {\n-            @Override public Integer applyx(IgniteInternalFuture<Collection<Integer>> fut)\n-            throws IgniteCheckedException {\n-                Collection<Integer> res = fut.get();\n+        ctx.kernalContext().task().setThreadContext(TC_SUBGRID, nodes);\n \n-                int totalSize = 0;\n-\n-                for (Integer size : res)\n-                    totalSize += size;\n-\n-                return totalSize;\n-            }\n-        });\n+        return ctx.kernalContext().task().execute(new SizeTask(ctx, peekModes), null);\n     }\n \n     /** {@inheritDoc} */\n@@ -3908,50 +3867,6 @@ public void awaitLastFut() {\n         }\n     }\n \n-    /**\n-     * Gets cache global size (with or without backups).\n-     *\n-     * @param primaryOnly {@code True} if only primary sizes should be included.\n-     * @return Global size.\n-     * @throws IgniteCheckedException If internal task execution failed.\n-     */\n-    private int globalSize(boolean primaryOnly) throws IgniteCheckedException {\n-        try {\n-            // Send job to remote nodes only.\n-            Collection<ClusterNode> nodes = ctx.grid().cluster().forCacheNodes(name()).forRemotes().nodes();\n-\n-            IgniteInternalFuture<Collection<Integer>> fut = null;\n-\n-            if (!nodes.isEmpty()) {\n-                ctx.kernalContext().task().setThreadContext(TC_TIMEOUT, gridCfg.getNetworkTimeout());\n-\n-                fut = ctx.closures().broadcastNoFailover(new GlobalSizeCallable(name(), primaryOnly), null, nodes);\n-            }\n-\n-            // Get local value.\n-            int globalSize = primaryOnly ? primarySize() : size();\n-\n-            if (fut != null) {\n-                for (Integer i : fut.get())\n-                    globalSize += i;\n-            }\n-\n-            return globalSize;\n-        }\n-        catch (ClusterGroupEmptyCheckedException ignore) {\n-            if (log.isDebugEnabled())\n-                log.debug(\"All remote nodes left while cache clearLocally [cacheName=\" + name() + \"]\");\n-\n-            return primaryOnly ? primarySize() : size();\n-        }\n-        catch (ComputeTaskTimeoutCheckedException e) {\n-            U.warn(log, \"Timed out waiting for remote nodes to finish cache clear (consider increasing \" +\n-                \"'networkTimeout' configuration property) [cacheName=\" + name() + \"]\");\n-\n-            throw e;\n-        }\n-    }\n-\n     /**\n      * @param op Cache operation.\n      * @param <T> Return type.\n@@ -4892,68 +4807,33 @@ protected AsyncInOp(Collection<?> keys) {\n         public abstract IgniteInternalFuture<?> inOp(IgniteTxLocalAdapter tx);\n     }\n \n-    /**\n-     * Internal callable which performs clear operation on a cache with the given name.\n-     */\n-    @GridInternal\n-    private static abstract class GlobalClearCallable implements Callable<Object>, Externalizable {\n-        /** Cache name. */\n-        protected String cacheName;\n-\n-        /** Injected grid instance. */\n-        @IgniteInstanceResource\n-        protected Ignite ignite;\n-\n-        /**\n-         * Empty constructor for serialization.\n-         */\n-        public GlobalClearCallable() {\n-            // No-op.\n-        }\n-\n-        /**\n-         * @param cacheName Cache name.\n-         */\n-        protected GlobalClearCallable(String cacheName) {\n-            this.cacheName = cacheName;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void writeExternal(ObjectOutput out) throws IOException {\n-            U.writeString(out, cacheName);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n-            cacheName = U.readString(in);\n-        }\n-    }\n-\n     /**\n      * Global clear all.\n      */\n     @GridInternal\n-    private static class GlobalClearAllCallable extends GlobalClearCallable {\n+    private static class GlobalClearAllJob extends TopologyVersionAwareJob {\n         /** */\n         private static final long serialVersionUID = 0L;\n \n         /**\n          * Empty constructor for serialization.\n          */\n-        public GlobalClearAllCallable() {\n+        public GlobalClearAllJob() {\n             // No-op.\n         }\n \n         /**\n          * @param cacheName Cache name.\n+         * @param topVer Affinity topology version.\n          */\n-        private GlobalClearAllCallable(String cacheName) {\n-            super(cacheName);\n+        private GlobalClearAllJob(String cacheName, AffinityTopologyVersion topVer) {\n+            super(cacheName, topVer);\n         }\n \n         /** {@inheritDoc} */\n-        @Override public Object call() throws Exception {\n-            ((IgniteEx)ignite).cachex(cacheName).clearLocally();\n+        @Nullable @Override public Object localExecute(@Nullable IgniteInternalCache cache) {\n+            if (cache != null)\n+                cache.clearLocally();\n \n             return null;\n         }\n@@ -4963,7 +4843,7 @@ private GlobalClearAllCallable(String cacheName) {\n      * Global clear keys.\n      */\n     @GridInternal\n-    private static class GlobalClearKeySetCallable<K, V> extends GlobalClearCallable {\n+    private static class GlobalClearKeySetJob<K> extends TopologyVersionAwareJob {\n         /** */\n         private static final long serialVersionUID = 0L;\n \n@@ -4973,166 +4853,75 @@ private GlobalClearAllCallable(String cacheName) {\n         /**\n          * Empty constructor for serialization.\n          */\n-        public GlobalClearKeySetCallable() {\n+        public GlobalClearKeySetJob() {\n             // No-op.\n         }\n \n         /**\n          * @param cacheName Cache name.\n+         * @param topVer Affinity topology version.\n          * @param keys Keys to clear.\n          */\n-        private GlobalClearKeySetCallable(String cacheName, Set<? extends K> keys) {\n-            super(cacheName);\n+        private GlobalClearKeySetJob(String cacheName, AffinityTopologyVersion topVer, Set<? extends K> keys) {\n+            super(cacheName, topVer);\n \n             this.keys = keys;\n         }\n \n         /** {@inheritDoc} */\n-        @Override public Object call() throws Exception {\n-            ((IgniteEx)ignite).<K, V>cachex(cacheName).clearLocallyAll(keys);\n+        @Nullable @Override public Object localExecute(@Nullable IgniteInternalCache cache) {\n+            if (cache != null)\n+                cache.clearLocallyAll(keys);\n \n             return null;\n         }\n-\n-        /** {@inheritDoc} */\n-        @Override public void writeExternal(ObjectOutput out) throws IOException {\n-            super.writeExternal(out);\n-\n-            out.writeObject(keys);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n-            super.readExternal(in);\n-\n-            keys = (Set<K>) in.readObject();\n-        }\n     }\n \n     /**\n      * Internal callable for global size calculation.\n      */\n     @GridInternal\n-    private static class SizeCallable extends IgniteClosureX<Object, Integer> implements Externalizable {\n+    private static class SizeJob extends TopologyVersionAwareJob {\n         /** */\n         private static final long serialVersionUID = 0L;\n \n-        /** Cache name. */\n-        private String cacheName;\n-\n         /** Peek modes. */\n         private CachePeekMode[] peekModes;\n \n-        /** Injected grid instance. */\n-        @IgniteInstanceResource\n-        private Ignite ignite;\n-\n         /**\n          * Required by {@link Externalizable}.\n          */\n-        public SizeCallable() {\n+        public SizeJob() {\n             // No-op.\n         }\n \n         /**\n          * @param cacheName Cache name.\n+         * @param topVer Affinity topology version.\n          * @param peekModes Cache peek modes.\n          */\n-        private SizeCallable(String cacheName, CachePeekMode[] peekModes) {\n-            this.cacheName = cacheName;\n-            this.peekModes = peekModes;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Integer applyx(Object o) throws IgniteCheckedException {\n-            IgniteInternalCache<Object, Object> cache = ((IgniteEx)ignite).cachex(cacheName);\n-\n-            assert cache != null : cacheName;\n-\n-            return cache.localSize(peekModes);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @SuppressWarnings(\"ForLoopReplaceableByForEach\")\n-        @Override public void writeExternal(ObjectOutput out) throws IOException {\n-            U.writeString(out, cacheName);\n-\n-            out.writeInt(peekModes.length);\n+        private SizeJob(String cacheName, AffinityTopologyVersion topVer, CachePeekMode[] peekModes) {\n+            super(cacheName, topVer);\n \n-            for (int i = 0; i < peekModes.length; i++)\n-                U.writeEnum(out, peekModes[i]);\n+            this.peekModes = peekModes;\n         }\n \n         /** {@inheritDoc} */\n-        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n-            cacheName = U.readString(in);\n-\n-            int len = in.readInt();\n+        @Nullable @Override public Object localExecute(@Nullable IgniteInternalCache cache) {\n+            if (cache == null)\n+                return 0;\n \n-            peekModes = new CachePeekMode[len];\n-\n-            for (int i = 0; i < len; i++)\n-                peekModes[i] = CachePeekMode.fromOrdinal(in.readByte());\n+            try {\n+                return cache.localSize(peekModes);\n+            }\n+            catch (IgniteCheckedException e) {\n+                throw U.convertException(e);\n+            }\n         }\n \n         /** {@inheritDoc} */\n         public String toString() {\n-            return S.toString(SizeCallable.class, this);\n-        }\n-    }\n-\n-    /**\n-     * Internal callable which performs {@link IgniteInternalCache#size()} or {@link IgniteInternalCache#primarySize()}\n-     * operation on a cache with the given name.\n-     */\n-    @GridInternal\n-    private static class GlobalSizeCallable implements IgniteClosure<Object, Integer>, Externalizable {\n-        /** */\n-        private static final long serialVersionUID = 0L;\n-\n-        /** Cache name. */\n-        private String cacheName;\n-\n-        /** Primary only flag. */\n-        private boolean primaryOnly;\n-\n-        /** Injected grid instance. */\n-        @IgniteInstanceResource\n-        private Ignite ignite;\n-\n-        /**\n-         * Empty constructor for serialization.\n-         */\n-        public GlobalSizeCallable() {\n-            // No-op.\n-        }\n-\n-        /**\n-         * @param cacheName Cache name.\n-         * @param primaryOnly Primary only flag.\n-         */\n-        private GlobalSizeCallable(String cacheName, boolean primaryOnly) {\n-            this.cacheName = cacheName;\n-            this.primaryOnly = primaryOnly;\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public Integer apply(Object o) {\n-            IgniteInternalCache<Object, Object> cache = ((IgniteEx)ignite).cachex(cacheName);\n-\n-            return primaryOnly ? cache.primarySize() : cache.size();\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void writeExternal(ObjectOutput out) throws IOException {\n-            U.writeString(out, cacheName);\n-            out.writeBoolean(primaryOnly);\n-        }\n-\n-        /** {@inheritDoc} */\n-        @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n-            cacheName = U.readString(in);\n-            primaryOnly = in.readBoolean();\n+            return S.toString(SizeJob.class, this);\n         }\n     }\n \n@@ -5697,4 +5486,194 @@ public UpdatePutAndGetTimeStatClosure(CacheMetricsImpl metrics, long start) {\n             metrics.addPutAndGetTimeNanos(System.nanoTime() - start);\n         }\n     }\n+\n+    /**\n+     * Delayed callable class.\n+     */\n+    protected static abstract class TopologyVersionAwareJob extends ComputeJobAdapter {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /** Injected job context. */\n+        @JobContextResource\n+        protected ComputeJobContext jobCtx;\n+\n+        /** Injected grid instance. */\n+        @IgniteInstanceResource\n+        protected Ignite ignite;\n+\n+        /** Affinity topology version. */\n+        protected AffinityTopologyVersion topVer;\n+\n+        /** Cache name. */\n+        protected String cacheName;\n+\n+        /**\n+         * Empty constructor for serialization.\n+         */\n+        public TopologyVersionAwareJob() {\n+            // No-op.\n+        }\n+\n+        /**\n+         * @param cacheName Cache name.\n+         * @param topVer Affinity topology version.\n+         */\n+        public TopologyVersionAwareJob(String cacheName, AffinityTopologyVersion topVer) {\n+            assert topVer != null;\n+\n+            this.cacheName = cacheName;\n+            this.topVer = topVer;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public final Object execute() {\n+            waitAffinityReadyFuture();\n+\n+            IgniteInternalCache cache = ((IgniteKernal)ignite).context().cache().cache(cacheName);\n+\n+            return localExecute(cache);\n+        }\n+\n+        /**\n+         * @param cache Cache.\n+         * @return Local execution result.\n+         */\n+        @Nullable protected abstract Object localExecute(@Nullable IgniteInternalCache cache);\n+\n+        /**\n+         * Holds (suspends) job execution until our cache version becomes equal to remote cache's version.\n+         */\n+        private void waitAffinityReadyFuture() {\n+            GridCacheProcessor cacheProc = ((IgniteKernal)ignite).context().cache();\n+\n+            AffinityTopologyVersion locTopVer = cacheProc.context().exchange().readyAffinityVersion();\n+\n+            if (locTopVer.compareTo(topVer) < 0) {\n+                IgniteInternalFuture<?> fut = cacheProc.context().exchange().affinityReadyFuture(topVer);\n+\n+                if (fut != null && !fut.isDone()) {\n+                    fut.listen(new CI1<IgniteInternalFuture<?>>() {\n+                        @Override public void apply(IgniteInternalFuture<?> t) {\n+                            jobCtx.callcc();\n+                        }\n+                    });\n+\n+                    jobCtx.holdcc();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Size task.\n+     */\n+    private static class SizeTask extends ComputeTaskAdapter<Object, Integer> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /** Cache context. */\n+        private GridCacheContext ctx;\n+\n+        /** Peek modes. */\n+        private CachePeekMode[] peekModes;\n+\n+        /**\n+         * Empty constructor for serialization.\n+         */\n+        public SizeTask() {\n+            // No-op.\n+        }\n+\n+        /**\n+         * @param ctx Cache context.\n+         */\n+        public SizeTask(GridCacheContext ctx, CachePeekMode[] peekModes) {\n+            this.ctx = ctx;\n+            this.peekModes = peekModes;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+            @Nullable Object arg) throws IgniteException {\n+            Map<ComputeJob, ClusterNode> jobs = new HashMap();\n+\n+            for (ClusterNode node : subgrid)\n+                jobs.put(new SizeJob(ctx.name(), ctx.affinity().affinityTopologyVersion(), peekModes), node);\n+\n+            return jobs;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) {\n+            return ComputeJobResultPolicy.WAIT;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public Integer reduce(List<ComputeJobResult> results) throws IgniteException {\n+            int size = 0;\n+\n+            for (ComputeJobResult res : results) {\n+                if (res.getException() == null && res != null)\n+                    size += res.<Integer>getData();\n+            }\n+\n+            return size;\n+        }\n+    }\n+\n+    /**\n+     * Clear task.\n+     */\n+    private static class ClearTask<K> extends ComputeTaskAdapter<Object, Object> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /** Cache context. */\n+        private GridCacheContext ctx;\n+\n+        /** Keys to clear. */\n+        private Set<? extends K> keys;\n+\n+        /**\n+         * Empty constructor for serialization.\n+         */\n+        public ClearTask() {\n+            // No-op.\n+        }\n+\n+        /**\n+         * @param ctx Cache context.\n+         * @param keys Keys to clear.\n+         */\n+        public ClearTask(GridCacheContext ctx, Set<? extends K> keys) {\n+            this.ctx = ctx;\n+            this.keys = keys;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+            @Nullable Object arg) throws IgniteException {\n+            Map<ComputeJob, ClusterNode> jobs = new HashMap();\n+\n+            for (ClusterNode node : subgrid) {\n+                jobs.put(keys == null ?\n+                        new GlobalClearAllJob(ctx.name(), ctx.affinity().affinityTopologyVersion()) :\n+                        new GlobalClearKeySetJob<K>(ctx.name(), ctx.affinity().affinityTopologyVersion(), keys),\n+                    node);\n+            }\n+\n+            return jobs;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) {\n+            return ComputeJobResultPolicy.WAIT;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+            return null;\n+        }\n+    }\n }",
                "deletions": 266
            },
            {
                "sha": "ff263cd4f7bb39e9cd9d09e613f3292d15786c16",
                "filename": "modules/core/src/main/resources/META-INF/classnames.properties",
                "blob_url": "https://github.com/apache/ignite/blob/99c7e228d12e25826f74d6d8706d158ec36004ed/modules/core/src/main/resources/META-INF/classnames.properties",
                "raw_url": "https://github.com/apache/ignite/raw/99c7e228d12e25826f74d6d8706d158ec36004ed/modules/core/src/main/resources/META-INF/classnames.properties",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/resources/META-INF/classnames.properties?ref=99c7e228d12e25826f74d6d8706d158ec36004ed",
                "patch": "@@ -323,13 +323,13 @@ org.apache.ignite.internal.processors.cache.GridCacheAdapter$72\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$73\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$74\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$9\n-org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalClearAllCallable\n+org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalClearAllJob\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalClearCallable\n-org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalClearKeySetCallable\n+org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalClearKeySetJob\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$GlobalSizeCallable\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$LoadCacheClosure\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$LoadKeysCallable\n-org.apache.ignite.internal.processors.cache.GridCacheAdapter$SizeCallable\n+org.apache.ignite.internal.processors.cache.GridCacheAdapter$SizeJob\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$UpdateGetTimeStatClosure\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$UpdatePutAndGetTimeStatClosure\n org.apache.ignite.internal.processors.cache.GridCacheAdapter$UpdatePutTimeStatClosure",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "IGNITE-2453 Fixed single primary and single backup failure cause NPE at future for backup - Fixes #427.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "commit": "https://github.com/apache/ignite/commit/579d33a0913a0acecab02b754dca4e4ff4c87ea7",
        "parent": "https://github.com/apache/ignite/commit/550a4ea7eab41a3d27ff29d1e3a8df09d698524a",
        "bug_id": "ignite_240",
        "file": [
            {
                "sha": "078e3225b24aebaaa09b6a24d4deeb3988c155ae",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/579d33a0913a0acecab02b754dca4e4ff4c87ea7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/579d33a0913a0acecab02b754dca4e4ff4c87ea7/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java",
                "status": "modified",
                "changes": 96,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java?ref=579d33a0913a0acecab02b754dca4e4ff4c87ea7",
                "patch": "@@ -418,10 +418,6 @@ private void checkBackup() {\n \n                 ClusterNode backup = cctx.discovery().node(backupId);\n \n-                final CheckBackupMiniFuture mini = new CheckBackupMiniFuture(backup, mapping);\n-\n-                add(mini);\n-\n                 // Nothing to do if backup has left the grid.\n                 if (backup == null) {\n                     readyNearMappingFromBackup(mapping);\n@@ -431,64 +427,70 @@ private void checkBackup() {\n \n                     cause.retryReadyFuture(cctx.nextAffinityReadyFuture(tx.topologyVersion()));\n \n-                    mini.onDone(new IgniteTxRollbackCheckedException(\"Failed to commit transaction \" +\n+                    onDone(new IgniteTxRollbackCheckedException(\"Failed to commit transaction \" +\n                         \"(backup has left grid): \" + tx.xidVersion(), cause));\n                 }\n-                else if (backup.isLocal()) {\n-                    boolean committed = !cctx.tm().addRolledbackTx(tx);\n+                else {\n+                    final CheckBackupMiniFuture mini = new CheckBackupMiniFuture(backup, mapping);\n \n-                    readyNearMappingFromBackup(mapping);\n+                    add(mini);\n \n-                    if (committed) {\n-                        if (tx.syncCommit()) {\n-                            GridCacheVersion nearXidVer = tx.nearXidVersion();\n+                    if (backup.isLocal()) {\n+                        boolean committed = !cctx.tm().addRolledbackTx(tx);\n \n-                            assert nearXidVer != null : tx;\n+                        readyNearMappingFromBackup(mapping);\n \n-                            IgniteInternalFuture<?> fut = cctx.tm().remoteTxFinishFuture(nearXidVer);\n+                        if (committed) {\n+                            if (tx.syncCommit()) {\n+                                GridCacheVersion nearXidVer = tx.nearXidVersion();\n \n-                            fut.listen(new CI1<IgniteInternalFuture<?>>() {\n-                                @Override public void apply(IgniteInternalFuture<?> fut) {\n-                                    mini.onDone(tx);\n-                                }\n-                            });\n+                                assert nearXidVer != null : tx;\n \n-                            return;\n-                        }\n+                                IgniteInternalFuture<?> fut = cctx.tm().remoteTxFinishFuture(nearXidVer);\n \n-                        mini.onDone(tx);\n-                    }\n-                    else {\n-                        ClusterTopologyCheckedException cause =\n-                            new ClusterTopologyCheckedException(\"Primary node left grid: \" + nodeId);\n+                                fut.listen(new CI1<IgniteInternalFuture<?>>() {\n+                                    @Override public void apply(IgniteInternalFuture<?> fut) {\n+                                        mini.onDone(tx);\n+                                    }\n+                                });\n \n-                        cause.retryReadyFuture(cctx.nextAffinityReadyFuture(tx.topologyVersion()));\n+                                return;\n+                            }\n \n-                        mini.onDone(new IgniteTxRollbackCheckedException(\"Failed to commit transaction \" +\n-                            \"(transaction has been rolled back on backup node): \" + tx.xidVersion(), cause));\n-                    }\n-                }\n-                else {\n-                    GridDhtTxFinishRequest finishReq = checkCommittedRequest(mini.futureId());\n+                            mini.onDone(tx);\n+                        }\n+                        else {\n+                            ClusterTopologyCheckedException cause =\n+                                new ClusterTopologyCheckedException(\"Primary node left grid: \" + nodeId);\n \n-                    // Preserve old behavior, otherwise response is not sent.\n-                    if (WAIT_REMOTE_TXS_SINCE.compareTo(backup.version()) > 0)\n-                        finishReq.syncCommit(true);\n+                            cause.retryReadyFuture(cctx.nextAffinityReadyFuture(tx.topologyVersion()));\n \n-                    try {\n-                        if (FINISH_NEAR_ONE_PHASE_SINCE.compareTo(backup.version()) <= 0)\n-                            cctx.io().send(backup, finishReq, tx.ioPolicy());\n-                        else {\n-                            mini.onDone(new IgniteTxHeuristicCheckedException(\"Failed to check for tx commit on \" +\n-                                \"the backup node (node has an old Ignite version) [rmtNodeId=\" + backup.id() +\n-                                \", ver=\" + backup.version() + ']'));\n+                            mini.onDone(new IgniteTxRollbackCheckedException(\"Failed to commit transaction \" +\n+                                \"(transaction has been rolled back on backup node): \" + tx.xidVersion(), cause));\n                         }\n                     }\n-                    catch (ClusterTopologyCheckedException e) {\n-                        mini.onNodeLeft(backupId);\n-                    }\n-                    catch (IgniteCheckedException e) {\n-                        mini.onDone(e);\n+                    else {\n+                        GridDhtTxFinishRequest finishReq = checkCommittedRequest(mini.futureId());\n+\n+                        // Preserve old behavior, otherwise response is not sent.\n+                        if (WAIT_REMOTE_TXS_SINCE.compareTo(backup.version()) > 0)\n+                            finishReq.syncCommit(true);\n+\n+                        try {\n+                            if (FINISH_NEAR_ONE_PHASE_SINCE.compareTo(backup.version()) <= 0)\n+                                cctx.io().send(backup, finishReq, tx.ioPolicy());\n+                            else {\n+                                mini.onDone(new IgniteTxHeuristicCheckedException(\"Failed to check for tx commit on \" +\n+                                    \"the backup node (node has an old Ignite version) [rmtNodeId=\" + backup.id() +\n+                                    \", ver=\" + backup.version() + ']'));\n+                            }\n+                        }\n+                        catch (ClusterTopologyCheckedException e) {\n+                            mini.onNodeLeft(backupId);\n+                        }\n+                        catch (IgniteCheckedException e) {\n+                            mini.onDone(e);\n+                        }\n                     }\n                 }\n             }",
                "deletions": 47
            }
        ]
    },
    {
        "repo": "ignite",
        "message": "Squashed commit of the following:\n\ncommit ed8dac68bb008c17246ecea5169b34a55b860869\nMerge: 6f915db a127756\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 16:56:39 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit 6f915db1890c81af035984f07a7195da9048a67f\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:50:53 2015 +0300\n\n    ignite-1139: uncommented tests\n\ncommit aadbdda1dab5e1c350afb0ac5e7f1182095ecd70\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:30:50 2015 +0300\n\n    ignite-1139: set cancel to true when stopping a client node\n\ncommit 86c6f6a8df6e828e5cc3c606c334925e948dee7a\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:06:49 2015 +0300\n\n    ignite-1139: temporaly disable some SPI tests\n\ncommit e6a2d88063a1c32478f3ee1dea80c2ffe2ee19af\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:51:51 2015 +0300\n\n    ignite-\n\ncommit f39086536e3afd031ed158e9cd2d65afb71a32bf\nMerge: 14ee9df 84f8b95\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:42:28 2015 +0300\n\n    Merge branch 'ignite-1139' of https://git-wip-us.apache.org/repos/asf/incubator-ignite into ignite-1139\n\ncommit 14ee9df2251716d1a3913742ce05154e2e958b56\nMerge: fd6b0e3 0341759\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:39:31 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit 84f8b956e40ae88d11e0ef125442203a497b8c4b\nAuthor: dmagda <magda7817@gmail.com>\nDate:   Fri Jul 24 13:35:32 2015 +0300\n\n    ignite-1139:\n    - fixed race in GridDhtPartitionsExchangeFuture\n    - fixed NPE in TcpCommunicationSpi when this SPI was not in the fully initialized state\n\ncommit 89da409d5e6a62e744c4030475bbbfcb822a103c\nMerge: fd6b0e3 ed5d3ed\nAuthor: dmagda <magda7817@gmail.com>\nDate:   Fri Jul 24 08:55:26 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit fd6b0e3684df97875947c7864487b658ac599fce\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Thu Jul 23 16:08:21 2015 +0300\n\n    ignite-1139: unmuted test",
        "commit": "https://github.com/apache/ignite/commit/271550fed7662c5032f9e4fb49cd135f3a55a46e",
        "parent": "https://github.com/apache/ignite/commit/abb2cef136da824c55964bb4032c47dd150242c1",
        "bug_id": "ignite_241",
        "file": [
            {
                "sha": "cbf6b405c86117178e63e7d0f742493de879593c",
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "patch": "@@ -583,7 +583,7 @@ public void init() throws IgniteInterruptedCheckedException {\n                             onDone(exchId.topologyVersion());\n                         }\n                         else\n-                            sendPartitions();\n+                            sendPartitions(oldest);\n                     }\n                     else {\n                         rmtIds = Collections.emptyList();\n@@ -816,9 +816,11 @@ public void init() throws IgniteInterruptedCheckedException {\n             if (log.isDebugEnabled())\n                 log.debug(\"Initialized future: \" + this);\n \n+            ClusterNode oldest = oldestNode.get();\n+\n             // If this node is not oldest.\n-            if (!oldestNode.get().id().equals(cctx.localNodeId()))\n-                sendPartitions();\n+            if (!oldest.id().equals(cctx.localNodeId()))\n+                sendPartitions(oldest);\n             else {\n                 boolean allReceived = allReceived();\n \n@@ -948,11 +950,9 @@ private void sendAllPartitions(Collection<? extends ClusterNode> nodes, GridDhtP\n     }\n \n     /**\n-     *\n+     * @param oldestNode Oldest node.\n      */\n-    private void sendPartitions() {\n-        ClusterNode oldestNode = this.oldestNode.get();\n-\n+    private void sendPartitions(ClusterNode oldestNode) {\n         try {\n             sendLocalPartitions(oldestNode, exchId);\n         }\n@@ -1402,8 +1402,10 @@ else if (rmtIds.contains(nodeId)) {\n      *\n      */\n     private void recheck() {\n+        ClusterNode oldest = oldestNode.get();\n+\n         // If this is the oldest node.\n-        if (oldestNode.get().id().equals(cctx.localNodeId())) {\n+        if (oldest.id().equals(cctx.localNodeId())) {\n             Collection<UUID> remaining = remaining();\n \n             if (!remaining.isEmpty()) {\n@@ -1423,7 +1425,7 @@ private void recheck() {\n             }\n         }\n         else\n-            sendPartitions();\n+            sendPartitions(oldest);\n \n         // Schedule another send.\n         scheduleRecheck();",
                "deletions": 9
            },
            {
                "sha": "1c74d5959c0a196440b3bbbbdd5b46ec80ff5396",
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "status": "modified",
                "changes": 41,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "patch": "@@ -1791,7 +1791,13 @@ private void checkAttributePresence(ClusterNode node, String attrName) {\n         if (log.isTraceEnabled())\n             log.trace(\"Sending message to node [node=\" + node + \", msg=\" + msg + ']');\n \n-        if (node.id().equals(getLocalNode().id()))\n+        ClusterNode localNode = getLocalNode();\n+\n+        if (localNode == null)\n+            throw new IgniteSpiException(\"Local node has not been started or fully initialized \" +\n+                \"[isStopping=\" + getSpiContext().isStopping() + ']');\n+\n+        if (node.id().equals(localNode.id()))\n             notifyListener(node.id(), msg, NOOP);\n         else {\n             GridCommunicationClient client = null;\n@@ -1804,7 +1810,7 @@ private void checkAttributePresence(ClusterNode node, String attrName) {\n \n                     UUID nodeId = null;\n \n-                    if (!client.async() && !getSpiContext().localNode().version().equals(node.version()))\n+                    if (!client.async() && !localNode.version().equals(node.version()))\n                         nodeId = node.id();\n \n                     retry = client.sendMessage(nodeId, msg);\n@@ -2435,8 +2441,14 @@ else if (log.isDebugEnabled())\n                     else\n                         ch.write(ByteBuffer.wrap(U.IGNITE_HEADER));\n \n+                    ClusterNode localNode = getLocalNode();\n+\n+                    if (localNode == null)\n+                        throw new IgniteCheckedException(\"Local node has not been started or \" +\n+                            \"fully initialized [isStopping=\" + getSpiContext().isStopping() + ']');\n+\n                     if (recovery != null) {\n-                        HandshakeMessage msg = new HandshakeMessage(getLocalNode().id(),\n+                        HandshakeMessage msg = new HandshakeMessage(localNode.id(),\n                             recovery.incrementConnectCount(),\n                             recovery.receivedCount());\n \n@@ -2629,7 +2641,20 @@ private void onException(String msg, Exception e) {\n      * @return Node ID message.\n      */\n     private NodeIdMessage nodeIdMessage() {\n-        return new NodeIdMessage(getLocalNode().id());\n+        ClusterNode localNode = getLocalNode();\n+\n+        UUID id;\n+\n+        if (localNode == null) {\n+            U.warn(log, \"Local node is not started or fully initialized [isStopping=\" +\n+                    getSpiContext().isStopping() + ']');\n+\n+            id = new UUID(0, 0);\n+        }\n+        else\n+            id = localNode.id();\n+\n+        return new NodeIdMessage(id);\n     }\n \n     /** {@inheritDoc} */\n@@ -3145,7 +3170,13 @@ else if (log.isDebugEnabled())\n             }\n \n             try {\n-                UUID id = getLocalNode().id();\n+                ClusterNode localNode = getLocalNode();\n+\n+                if (localNode == null)\n+                    throw new IgniteSpiException(\"Local node has not been started or fully initialized \" +\n+                        \"[isStopping=\" + getSpiContext().isStopping() + ']');\n+\n+                UUID id = localNode.id();\n \n                 NodeIdMessage msg = new NodeIdMessage(id);\n ",
                "deletions": 5
            },
            {
                "sha": "f7c73b647ede0d8531625a1fb893791ebd197a24",
                "filename": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "patch": "@@ -88,9 +88,9 @@ public TcpDiscoveryMultiThreadedTest() throws Exception {\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        super.afterTest();\n-\n         stopAllGrids();\n+\n+        super.afterTest();\n     }\n \n     /** {@inheritDoc} */\n@@ -102,8 +102,6 @@ public TcpDiscoveryMultiThreadedTest() throws Exception {\n      * @throws Exception If any error occurs.\n      */\n     public void testMultiThreadedClientsRestart() throws Exception {\n-        fail(\"https://issues.apache.org/jira/browse/IGNITE-1139\");\n-\n         clientFlagGlobal = false;\n \n         info(\"Test timeout: \" + (getTestTimeout() / (60 * 1000)) + \" min.\");\n@@ -126,7 +124,7 @@ public void testMultiThreadedClientsRestart() throws Exception {\n                     int idx = clientIdx.getAndIncrement();\n \n                     while (!done.get()) {\n-                        stopGrid(idx);\n+                        stopGrid(idx, true);\n                         startGrid(idx);\n                     }\n ",
                "deletions": 5
            }
        ]
    }
]