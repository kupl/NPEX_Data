{
    "freemarker_2d27bc5": {
        "bug_id": "freemarker_2d27bc5",
        "commit": "https://github.com/apache/freemarker/commit/2d27bc57643cb1d780c98bb0332dda06c4c58577",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/freemarker/blob/2d27bc57643cb1d780c98bb0332dda06c4c58577/src/main/java/freemarker/template/utility/StringUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/utility/StringUtil.java?ref=2d27bc57643cb1d780c98bb0332dda06c4c58577",
                "deletions": 1,
                "filename": "src/main/java/freemarker/template/utility/StringUtil.java",
                "patch": "@@ -578,8 +578,9 @@ public static String FTLStringLiteralDec(String s) throws ParseException {\n     }\n \n     public static Locale deduceLocale(String input) {\n+       if (input == null) return null;\n        Locale locale = Locale.getDefault();\n-       if (input.charAt(0) == '\"') input = input.substring(1, input.length() -1);\n+       if (input.length() > 0 && input.charAt(0) == '\"') input = input.substring(1, input.length() -1);\n        StringTokenizer st = new StringTokenizer(input, \",_ \");\n        String lang = \"\", country = \"\";\n        if (st.hasMoreTokens()) {",
                "raw_url": "https://github.com/apache/freemarker/raw/2d27bc57643cb1d780c98bb0332dda06c4c58577/src/main/java/freemarker/template/utility/StringUtil.java",
                "sha": "383a053f941d96cce20e15bb568f90318a56f761",
                "status": "modified"
            }
        ],
        "message": "Fixing an OutOfBoundsException (and NPE) in StringUtils.",
        "parent": "https://github.com/apache/freemarker/commit/b098e034764a435181149e4836d3dcaf9cded574",
        "repo": "freemarker",
        "unit_tests": [
            "StringUtilTest.java"
        ]
    },
    "freemarker_af15c1e": {
        "bug_id": "freemarker_af15c1e",
        "commit": "https://github.com/apache/freemarker/commit/af15c1ef11c3651c69a5eb867fa150d83534830c",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/freemarker/blob/af15c1ef11c3651c69a5eb867fa150d83534830c/src/main/java/freemarker/template/Configuration.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/template/Configuration.java?ref=af15c1ef11c3651c69a5eb867fa150d83534830c",
                "deletions": 8,
                "filename": "src/main/java/freemarker/template/Configuration.java",
                "patch": "@@ -134,14 +134,7 @@\n     public static final int AUTO_DETECT_TAG_SYNTAX = 0;\n     public static final int ANGLE_BRACKET_TAG_SYNTAX = 1;\n     public static final int SQUARE_BRACKET_TAG_SYNTAX = 2;\n-    \n-    /** The default of {@link #getIncompatibleImprovements()}, currently {@code new Version(2, 3, 0)}. */\n-    public static final Version DEFAULT_INCOMPATIBLE_IMPROVEMENTS = Configuration.VERSION_2_3_0;\n-    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n-    public static final String DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.toString();\n-    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n-    public static final int PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.intValue(); \n-    \n+\n     /** FreeMarker version 2.3.0 (an {@link #Configuration(Version) incompatible improvements break-point}) */\n     public static final Version VERSION_2_3_0 = new Version(2, 3, 0);\n     \n@@ -154,6 +147,13 @@\n     /** FreeMarker version 2.3.21 (an {@link #Configuration(Version) incompatible improvements break-point}) */\n     public static final Version VERSION_2_3_21 = new Version(2, 3, 21);\n     \n+    /** The default of {@link #getIncompatibleImprovements()}, currently {@code new Version(2, 3, 0)}. */\n+    public static final Version DEFAULT_INCOMPATIBLE_IMPROVEMENTS = Configuration.VERSION_2_3_0;\n+    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n+    public static final String DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.toString();\n+    /** @deprecated Use {@link #DEFAULT_INCOMPATIBLE_IMPROVEMENTS} instead. */\n+    public static final int PARSED_DEFAULT_INCOMPATIBLE_ENHANCEMENTS = DEFAULT_INCOMPATIBLE_IMPROVEMENTS.intValue(); \n+    \n     private static final Version version;\n     static {\n         try {",
                "raw_url": "https://github.com/apache/freemarker/raw/af15c1ef11c3651c69a5eb867fa150d83534830c/src/main/java/freemarker/template/Configuration.java",
                "sha": "9917b722046a94795c76eec3db3157415d2d79f5",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE introduced due to static field initialization order.",
        "parent": "https://github.com/apache/freemarker/commit/a36ad2dfe1b95844526b6aaf7887950a7cca3a39",
        "repo": "freemarker",
        "unit_tests": [
            "ConfigurationTest.java"
        ]
    },
    "freemarker_b07c69e": {
        "bug_id": "freemarker_b07c69e",
        "commit": "https://github.com/apache/freemarker/commit/b07c69ec7446950371b6dc9a895e20b5c36f4abb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/freemarker/blob/b07c69ec7446950371b6dc9a895e20b5c36f4abb/src/main/java/freemarker/cache/TemplateCache.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/cache/TemplateCache.java?ref=b07c69ec7446950371b6dc9a895e20b5c36f4abb",
                "deletions": 1,
                "filename": "src/main/java/freemarker/cache/TemplateCache.java",
                "patch": "@@ -337,7 +337,9 @@ else if(t instanceof IOException) {\n             return t;\n         }\n         catch(RuntimeException e) {\n-            storeNegativeLookup(tk, cachedTemplate, e);\n+            if (cachedTemplate != null) {\n+                storeNegativeLookup(tk, cachedTemplate, e);\n+            }\n             throw e;\n         }\n         catch(IOException e) {",
                "raw_url": "https://github.com/apache/freemarker/raw/b07c69ec7446950371b6dc9a895e20b5c36f4abb/src/main/java/freemarker/cache/TemplateCache.java",
                "sha": "b3cf0c4ef1ee1601b5fbb564c8a793961f725503",
                "status": "modified"
            }
        ],
        "message": "(There was a little chance for an NPE here... although then it just replaced the already raising RuntimeException.)",
        "parent": "https://github.com/apache/freemarker/commit/b7a491c79988fff1a4e1bf53f633a21b0745c019",
        "repo": "freemarker",
        "unit_tests": [
            "TemplateCacheTest.java"
        ]
    },
    "freemarker_d661acc": {
        "bug_id": "freemarker_d661acc",
        "commit": "https://github.com/apache/freemarker/commit/d661acc3797f9e4b70f9de194bcdbff71d89f0e9",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/freemarker/blob/d661acc3797f9e4b70f9de194bcdbff71d89f0e9/src/main/java/freemarker/core/TemplateConfiguration.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/freemarker/contents/src/main/java/freemarker/core/TemplateConfiguration.java?ref=d661acc3797f9e4b70f9de194bcdbff71d89f0e9",
                "deletions": 14,
                "filename": "src/main/java/freemarker/core/TemplateConfiguration.java",
                "patch": "@@ -49,7 +49,7 @@\n  * <p>\n  * Note that the result value of the reader methods (getter and \"is\" methods) is usually not useful unless the value of\n  * that setting was already set on this object. Otherwise you will get the value from the parent {@link Configuration},\n- * which is {@link Configuration#getDefaultConfiguration()} before this object is associated to a {@link Configuration}.\n+ * or an {@link IllegalStateException} before this object is associated to a {@link Configuration}.\n  * \n  * <p>\n  * If you are using this class for your own template loading and caching solution, rather than with the standard one,\n@@ -147,6 +147,11 @@ public void setParentConfiguration(Configuration cfg) {\n     public Configuration getParentConfiguration() {\n         return parentConfigurationSet ? (Configuration) getParent() : null;\n     }\n+\n+    private Configuration getNonNullParentConfiguration() {\n+        checkParentConfigurationSet();\n+        return (Configuration) getParent();\n+    }\n     \n     /**\n      * Set all settings in this {@link TemplateConfiguration} that were set in the parameter\n@@ -278,8 +283,7 @@ public void merge(TemplateConfiguration tc) {\n      *             If the parent configuration wasn't yet set.\n      */\n     public void apply(Template template) {\n-        checkParentConfigurationSet();\n-        Configuration cfg = getParentConfiguration();\n+        Configuration cfg = getNonNullParentConfiguration();\n         if (template.getConfiguration() != cfg) {\n             // This is actually not a problem right now, but for future BC we enforce this.\n             throw new IllegalArgumentException(\n@@ -386,7 +390,7 @@ public void setTagSyntax(int tagSyntax) {\n      * The getter pair of {@link #setTagSyntax(int)}.\n      */\n     public int getTagSyntax() {\n-        return tagSyntax != null ? tagSyntax.intValue() : getParentConfiguration().getTagSyntax();\n+        return tagSyntax != null ? tagSyntax.intValue() : getNonNullParentConfiguration().getTagSyntax();\n     }\n \n     /**\n@@ -408,7 +412,8 @@ public void setNamingConvention(int namingConvention) {\n      * The getter pair of {@link #setNamingConvention(int)}.\n      */\n     public int getNamingConvention() {\n-        return namingConvention != null ? namingConvention.intValue() : getParentConfiguration().getNamingConvention();\n+        return namingConvention != null ? namingConvention.intValue()\n+                : getNonNullParentConfiguration().getNamingConvention();\n     }\n \n     /**\n@@ -430,7 +435,7 @@ public void setWhitespaceStripping(boolean whitespaceStripping) {\n      */\n     public boolean getWhitespaceStripping() {\n         return whitespaceStripping != null ? whitespaceStripping.booleanValue()\n-                : getParentConfiguration().getWhitespaceStripping();\n+                : getNonNullParentConfiguration().getWhitespaceStripping();\n     }\n \n     /**\n@@ -453,7 +458,7 @@ public void setAutoEscapingPolicy(int autoEscapingPolicy) {\n      */\n     public int getAutoEscapingPolicy() {\n         return autoEscapingPolicy != null ? autoEscapingPolicy.intValue()\n-                : getParentConfiguration().getAutoEscapingPolicy();\n+                : getNonNullParentConfiguration().getAutoEscapingPolicy();\n     }\n \n     /**\n@@ -475,7 +480,7 @@ public void setOutputFormat(OutputFormat outputFormat) {\n      * The getter pair of {@link #setOutputFormat(OutputFormat)}.\n      */\n     public OutputFormat getOutputFormat() {\n-        return outputFormat != null ? outputFormat : getParentConfiguration().getOutputFormat();\n+        return outputFormat != null ? outputFormat : getNonNullParentConfiguration().getOutputFormat();\n     }\n \n     /**\n@@ -497,7 +502,7 @@ public void setRecognizeStandardFileExtensions(boolean recognizeStandardFileExte\n      */\n     public boolean getRecognizeStandardFileExtensions() {\n         return recognizeStandardFileExtensions != null ? recognizeStandardFileExtensions.booleanValue()\n-                : getParentConfiguration().getRecognizeStandardFileExtensions();\n+                : getNonNullParentConfiguration().getRecognizeStandardFileExtensions();\n     }\n     \n     /**\n@@ -519,7 +524,7 @@ public void setStrictSyntaxMode(boolean strictSyntaxMode) {\n      */\n     public boolean getStrictSyntaxMode() {\n         return strictSyntaxMode != null ? strictSyntaxMode.booleanValue()\n-                : getParentConfiguration().getStrictSyntaxMode();\n+                : getNonNullParentConfiguration().getStrictSyntaxMode();\n     }\n     \n     /**\n@@ -536,7 +541,7 @@ public void setStrictBeanModels(boolean strict) {\n     }\n \n     public String getEncoding() {\n-        return encoding != null ? encoding : getParentConfiguration().getDefaultEncoding();\n+        return encoding != null ? encoding : getNonNullParentConfiguration().getDefaultEncoding();\n     }\n \n     /**\n@@ -577,7 +582,7 @@ public void setTabSize(int tabSize) {\n      */\n     public int getTabSize() {\n         return tabSize != null ? tabSize.intValue()\n-                : getParentConfiguration().getTabSize();\n+                : getNonNullParentConfiguration().getTabSize();\n     }\n     \n     /**\n@@ -597,8 +602,7 @@ public boolean isTabSizeSet() {\n      *             If the parent configuration wasn't yet set.\n      */\n     public Version getIncompatibleImprovements() {\n-        checkParentConfigurationSet();\n-        return getParentConfiguration().getIncompatibleImprovements();\n+        return getNonNullParentConfiguration().getIncompatibleImprovements();\n     }\n \n     private void checkParentConfigurationSet() {",
                "raw_url": "https://github.com/apache/freemarker/raw/d661acc3797f9e4b70f9de194bcdbff71d89f0e9/src/main/java/freemarker/core/TemplateConfiguration.java",
                "sha": "804446b86c57c32ace89714f4c477dbdfb1b7e24",
                "status": "modified"
            }
        ],
        "message": "TemplateConfiguration.getXxx has thrown NPE instead of the more helpful IllegalStateException when the parent Configuration wasn't yet set.",
        "parent": "https://github.com/apache/freemarker/commit/e6ec6c46e926f8c89647d4475773a7ce49290dfe",
        "repo": "freemarker",
        "unit_tests": [
            "TemplateConfigurationTest.java"
        ]
    }
}