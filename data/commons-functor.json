{
    "commons-functor_1ee2ee2": {
        "bug_id": "commons-functor_1ee2ee2",
        "commit": "https://github.com/apache/commons-functor/commit/1ee2ee2378da773b81c0484b50ad68c8164f86ad",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "patch": "@@ -41,12 +41,14 @@\n      * @param function to apply\n      */\n     public TransformedIterator(Iterator iterator, UnaryFunction function) {\n-        if (null == iterator || null == function) {\n-            throw new NullPointerException();\n-        } else {\n-            this.function = function;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        if (null == function) {\n+            throw new IllegalArgumentException(\"filtering UnaryFunction argument was null\");\n+        }\n+        this.function = function;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods",
                "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/main/java/org/apache/commons/functor/core/collection/TransformedIterator.java",
                "sha": "0853f2bb60d3bf291d213addc944b61bfefc28a4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-functor/blob/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java?ref=1ee2ee2378da773b81c0484b50ad68c8164f86ad",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "patch": "@@ -175,19 +175,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new TransformedIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(null,negate);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new TransformedIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/commons-functor/raw/1ee2ee2378da773b81c0484b50ad68c8164f86ad/src/test/java/org/apache/commons/functor/core/collection/TestTransformedIterator.java",
                "sha": "30c40b12b59786c89b3efc7891e24bbbde761ead",
                "status": "modified"
            }
        ],
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646500 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-functor/commit/07c5d143cb9afc8415af1cc0b584119df58686fc",
        "repo": "commons-functor",
        "unit_tests": [
            "TestTransformedIterator.java"
        ]
    },
    "commons-functor_28e6c72": {
        "bug_id": "commons-functor_28e6c72",
        "commit": "https://github.com/apache/commons-functor/commit/28e6c72688908097c9f7e12c1cafca4827315536",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "patch": "@@ -45,12 +45,14 @@\n      * @param predicate to apply\n      */\n     public FilteredIterator(Iterator iterator, UnaryPredicate predicate) {\n-        if (null == iterator || null == predicate) {\n-            throw new NullPointerException();\n-        } else {\n-            this.predicate = predicate;\n-            this.iterator = iterator;\n+        if (null == iterator) {\n+            throw new IllegalArgumentException(\"iterator argument was null\");\n+        }\n+        if (null == predicate) {\n+            throw new IllegalArgumentException(\"filtering predicate argument was null\");\n         }\n+        this.predicate = predicate;\n+        this.iterator = iterator;\n     }\n \n     // iterator methods",
                "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/main/java/org/apache/commons/functor/core/collection/FilteredIterator.java",
                "sha": "2a59ce7bbbf70c6997a0b73f61de9a05de071155",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-functor/blob/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java?ref=28e6c72688908097c9f7e12c1cafca4827315536",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "patch": "@@ -213,19 +213,19 @@ public void testConstructorProhibitsNull() {\n         try {\n             new FilteredIterator(null,null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(null,Constant.truePredicate());\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n         try {\n             new FilteredIterator(list.iterator(),null);\n             fail(\"ExpectedNullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/commons-functor/raw/28e6c72688908097c9f7e12c1cafca4827315536/src/test/java/org/apache/commons/functor/core/collection/TestFilteredIterator.java",
                "sha": "7f6efa13687d2ce01ff12658859dabd65c82b783",
                "status": "modified"
            }
        ],
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646498 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-functor/commit/7edb9fc038b4ce1b5ae1b28525b4c560d4548566",
        "repo": "commons-functor",
        "unit_tests": [
            "TestFilteredIterator.java"
        ]
    },
    "commons-functor_d6da27d": {
        "bug_id": "commons-functor_d6da27d",
        "commit": "https://github.com/apache/commons-functor/commit/d6da27d20583db629fa71ea572907acf564f5904",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "patch": "@@ -40,10 +40,9 @@\n      */\n     public IteratorToGeneratorAdapter(Iterator iter) {\n         if (null == iter) {\n-            throw new NullPointerException();\n-        } else {\n-            this.iter = iter;\n+            throw new IllegalArgumentException(\"Iterator argument was null\");\n         }\n+        this.iter = iter;\n     }\n \n     // instance methods",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/main/java/org/apache/commons/functor/generator/IteratorToGeneratorAdapter.java",
                "sha": "75c4aa8503ae9d663cff867ba91fcc7e27c3287f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-functor/blob/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java?ref=d6da27d20583db629fa71ea572907acf564f5904",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "patch": "@@ -90,7 +90,7 @@ public void testConstructNull() {\n         try {\n             new IteratorToGeneratorAdapter(null);\n             fail(\"Expected NullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(IllegalArgumentException e) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/commons-functor/raw/d6da27d20583db629fa71ea572907acf564f5904/src/test/java/org/apache/commons/functor/generator/TestIteratorToGeneratorAdapter.java",
                "sha": "524f749cf1cf9168ed125fe2437074cd4c426a41",
                "status": "modified"
            }
        ],
        "message": "IllegalArgumentException more to-the-point than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/functor/trunk@646495 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-functor/commit/89d6b6f7b74beeefbfe0a3aff209e67c3b06b33e",
        "repo": "commons-functor",
        "unit_tests": [
            "TestIteratorToGeneratorAdapter.java"
        ]
    },
    "commons-functor_e738aef": {
        "bug_id": "commons-functor_e738aef",
        "commit": "https://github.com/apache/commons-functor/commit/e738aefa204b5e9420a8af0b6882e9be0db4d325",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/changes/changes.xml?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -23,6 +23,9 @@\n   </properties>\n   <body>\n     <release version=\"1.0\" date=\"2012-??-??\" description=\"First release.\">\n+      <action dev=\"simonetripodi\" issue=\"FUNCTOR-8\" due-to=\"Bruno P. Kinoshita\">\n+        Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null\n+      </action>\n       <action dev=\"simonetripodi\" issue=\"FUNCTOR-7\" due-to=\"Bruno P. Kinoshita\">\n         Tests for generators\n       </action>",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/changes/changes.xml",
                "sha": "40511fa2ebc67718e186a87033c6d8af29dbde87",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "patch": "@@ -86,7 +86,8 @@ public boolean equals(Object obj) {\n     public int hashCode() {\n         int result = \"TransformedGenerator\".hashCode();\n         result <<= 2;\n-        result ^= getWrappedGenerator().hashCode();\n+        Generator<?> gen = getWrappedGenerator();\n+        result ^= gen == null ? 0 : gen.hashCode();\n         result <<= 2;\n         result ^= func.hashCode();\n         return result;",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/main/java/org/apache/commons/functor/generator/TransformedGenerator.java",
                "sha": "8c8e3627be4173221bfce2b1bbedd3104df2abd4",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/commons-functor/blob/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/commons-functor/contents/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java?ref=e738aefa204b5e9420a8af0b6882e9be0db4d325",
                "deletions": 19,
                "filename": "src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "patch": "@@ -1,10 +1,7 @@\n /*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n@@ -17,6 +14,7 @@\n package org.apache.commons.functor.generator;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -33,7 +31,6 @@\n \n /**\n  * Tests the Transformed Generator class.\n- * @author Bruno P. Kinoshita (brunodepaulak@yahoo.com.br)\n  */\n public class TestTransformedGenerator\n {\n@@ -43,7 +40,7 @@ public void setUp() throws Exception {\n         wrappedGenerator = new IntegerRange(1, 10);\n         sumsTwoGenerator = new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n     }\n-    \n+\n     @After\n     public void tearDown() {\n         wrappedGenerator = null;\n@@ -53,7 +50,7 @@ public void tearDown() {\n \n     // Tests\n     // ------------------------------------------------------------------------\n-    \n+\n     @Test\n     public void testConstructorProhibitsNull() {\n         try {\n@@ -75,10 +72,10 @@ public void testConstructorProhibitsNull() {\n             // expected\n         }\n     }\n-    \n+\n     @Test\n     public void testEquals() {\n-        TransformedGenerator<Integer, Integer> anotherTransformedGenerator = \n+        TransformedGenerator<Integer, Integer> anotherTransformedGenerator =\n                         new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo);\n         assertEquals(sumsTwoGenerator, sumsTwoGenerator);\n         assertEquals(sumsTwoGenerator, anotherTransformedGenerator);\n@@ -91,18 +88,24 @@ public Integer evaluate( Integer obj ) {\n                 }\n             });\n         assertTrue( !sumsTwoGenerator.equals(aGenerateWithADifferentFunction));\n-        \n-        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped = \n+\n+        TransformedGenerator<Integer, Integer> aTransformedGeneratorWithADifferentWrapped =\n         \t\tnew TransformedGenerator<Integer, Integer>(new IntegerRange(1,2), sumsTwo);\n         assertTrue(!sumsTwoGenerator.equals(aTransformedGeneratorWithADifferentWrapped));\n     }\n-    \n+\n     @Test\n     public void testHashcode() {\n         assertEquals(sumsTwoGenerator.hashCode(), sumsTwoGenerator.hashCode());\n         assertEquals(sumsTwoGenerator.hashCode(), new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo).hashCode());\n+        assertFalse(sumsTwoGenerator.hashCode() == new TransformedGenerator<Integer, Integer>(wrappedGenerator, sumsTwo) {\n+            @Override\n+            protected Generator<? extends Integer> getWrappedGenerator() {\n+                return null;\n+            }\n+        }.hashCode());\n     }\n-    \n+\n     @Test\n     public void testGenerate() {\n         final List<Integer> doubledValues = new ArrayList<Integer>();\n@@ -111,23 +114,23 @@ public void run( Integer obj ) {\n                 doubledValues.add(obj);\n             }\n         });\n-        \n+\n         final List<Integer> expected = Arrays.asList(3, 4, 5, 6, 7, 8, 9, 10 , 11);\n-        \n+\n         assertEquals(9, doubledValues.size());\n         assertEquals(expected, doubledValues);\n     }\n \n     // Attributes\n     // ------------------------------------------------------------------------\n     private static final Integer TWO = new Integer(2);\n-    \n+\n     private Generator<Integer> wrappedGenerator = null;\n     private UnaryFunction<Integer, Integer> sumsTwo = new UnaryFunction<Integer, Integer>() {\n         public Integer evaluate( Integer obj ) {\n             return obj += TWO;\n         }\n     };\n     private TransformedGenerator<Integer, Integer> sumsTwoGenerator = null;\n-    \n+\n }",
                "raw_url": "https://github.com/apache/commons-functor/raw/e738aefa204b5e9420a8af0b6882e9be0db4d325/src/test/java/org/apache/commons/functor/generator/TestTransformedGenerator.java",
                "sha": "a1db4529bfdea72fec2d917032cd6d2d5136d3eb",
                "status": "modified"
            }
        ],
        "message": "[FUNCTOR-8] Possible NPE in TransformedGenerator if getWrappedGenerator() is overridden to return null - patch submitted by Bruno P. Kinoshita\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/functor/trunk@1344780 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-functor/commit/f501421ec00fe5c9a15382ec8355b75b096706f3",
        "repo": "commons-functor",
        "unit_tests": [
            "TestTransformedGenerator.java"
        ]
    }
}