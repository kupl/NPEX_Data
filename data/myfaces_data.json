[
    {
        "repo": "myfaces",
        "message": "possible NPE",
        "commit": "https://github.com/apache/myfaces/commit/dd0ecacce1cb31abc29ace80d1bef1e0cb262687",
        "parent": "https://github.com/apache/myfaces/commit/ef2e4e703188e18aede978a9fed4bdcddd609890",
        "bug_id": "myfaces_1",
        "file": [
            {
                "sha": "ac9c91f5d69f9e7c26e243e11c1a5959b4fc8ac8",
                "filename": "impl/src/main/java/org/apache/myfaces/spi/impl/DefaultFacesConfigurationProviderFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/dd0ecacce1cb31abc29ace80d1bef1e0cb262687/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultFacesConfigurationProviderFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/dd0ecacce1cb31abc29ace80d1bef1e0cb262687/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultFacesConfigurationProviderFactory.java",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultFacesConfigurationProviderFactory.java?ref=dd0ecacce1cb31abc29ace80d1bef1e0cb262687",
                "patch": "@@ -73,13 +73,9 @@ public FacesConfigurationProvider getFacesConfigurationProvider(ExternalContext\n                 {\n                     returnValue = resolveFacesConfigurationProviderFromService(extContext);\n                 }\n-                externalContext.getApplicationMap().put(FACES_CONFIGURATION_PROVIDER_INSTANCE_KEY, returnValue);\n             }\n-            catch (ClassNotFoundException | NoClassDefFoundError e)\n-            {\n-                // ignore\n-            }\n-            catch (InstantiationException | IllegalAccessException | InvocationTargetException e)\n+            catch (ClassNotFoundException | NoClassDefFoundError | InstantiationException | IllegalAccessException\n+                    | InvocationTargetException e)\n             {\n                 getLogger().log(Level.SEVERE, \"\", e);\n             }\n@@ -88,6 +84,13 @@ public FacesConfigurationProvider getFacesConfigurationProvider(ExternalContext\n                 throw new FacesException(e);\n             }\n         }\n+        \n+        if (returnValue == null)\n+        {\n+            returnValue = new DefaultFacesConfigurationProvider();\n+        }\n+\n+        externalContext.getApplicationMap().put(FACES_CONFIGURATION_PROVIDER_INSTANCE_KEY, returnValue);\n \n         return returnValue;\n     }",
                "deletions": 6
            },
            {
                "sha": "a95153086e0fb5a337480c3a088da3750c22d9c9",
                "filename": "impl/src/main/java/org/apache/myfaces/spi/impl/DefaultWebConfigProviderFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/dd0ecacce1cb31abc29ace80d1bef1e0cb262687/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultWebConfigProviderFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/dd0ecacce1cb31abc29ace80d1bef1e0cb262687/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultWebConfigProviderFactory.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/spi/impl/DefaultWebConfigProviderFactory.java?ref=dd0ecacce1cb31abc29ace80d1bef1e0cb262687",
                "patch": "@@ -72,11 +72,8 @@ public WebConfigProvider getWebConfigProvider(ExternalContext externalContext)\n                 returnValue = resolveWebXmlProviderFromService(extContext);\n             }\n         }\n-        catch (ClassNotFoundException | NoClassDefFoundError e)\n-        {\n-            // ignore\n-        }\n-        catch (InstantiationException | IllegalAccessException | InvocationTargetException e)\n+        catch (ClassNotFoundException | NoClassDefFoundError | InstantiationException | IllegalAccessException\n+                | InvocationTargetException e)\n         {\n             getLogger().log(Level.SEVERE, \"\", e);\n         }\n@@ -85,6 +82,11 @@ public WebConfigProvider getWebConfigProvider(ExternalContext externalContext)\n             throw new FacesException(e);\n         }\n \n+        if (returnValue == null)\n+        {\n+            returnValue = new DefaultWebConfigProvider();\n+        }\n+ \n         return returnValue;\n     }\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/c8f053b7e3181a3b3662dfbb84ad2fbe226ade19",
        "parent": "https://github.com/apache/myfaces/commit/3cedaec17bb86c96efa45122e80e1adc70d2c3ca",
        "bug_id": "myfaces_2",
        "file": [
            {
                "sha": "53213e9ed0d04ea2be49640c6b7a3f15f9a50dcc",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/c8f053b7e3181a3b3662dfbb84ad2fbe226ade19/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/c8f053b7e3181a3b3662dfbb84ad2fbe226ade19/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java?ref=c8f053b7e3181a3b3662dfbb84ad2fbe226ade19",
                "patch": "@@ -421,7 +421,8 @@ private DefaultFacelet _createCompositeComponentMetadataFacelet(URL url)\n         // The alias is used later for informative purposes, so we append \n         // some prefix to identify later where the errors comes from.\n         URL baseUrl = getBaseUrl();\n-        String alias = \"/compositeComponentMetadata/\" + _removeFirst(url.getFile(), baseUrl == null ? \"\" : baseUrl.getFile());\n+        String alias = \"/compositeComponentMetadata/\" + _removeFirst(url.getFile(),\n+                baseUrl == null ? \"\" : baseUrl.getFile());\n         try\n         {\n             FaceletHandler h = _compiler.compileCompositeComponentMetadata(url, alias);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/3cedaec17bb86c96efa45122e80e1adc70d2c3ca",
        "parent": "https://github.com/apache/myfaces/commit/998e4e290ee3e8aa14dd0054ec5c20cc5f5825c7",
        "bug_id": "myfaces_3",
        "file": [
            {
                "sha": "34135884451d222829d2bc2e2aa23466040b2347",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/3cedaec17bb86c96efa45122e80e1adc70d2c3ca/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/3cedaec17bb86c96efa45122e80e1adc70d2c3ca/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java?ref=3cedaec17bb86c96efa45122e80e1adc70d2c3ca",
                "patch": "@@ -420,7 +420,8 @@ private DefaultFacelet _createCompositeComponentMetadataFacelet(URL url)\n \n         // The alias is used later for informative purposes, so we append \n         // some prefix to identify later where the errors comes from.\n-        String alias = \"/compositeComponentMetadata/\" + _removeFirst(url.getFile(), getBaseUrl().getFile());\n+        URL baseUrl = getBaseUrl();\n+        String alias = \"/compositeComponentMetadata/\" + _removeFirst(url.getFile(), baseUrl == null ? \"\" : baseUrl.getFile());\n         try\n         {\n             FaceletHandler h = _compiler.compileCompositeComponentMetadata(url, alias);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/27618ce8b676c847a93226f831202c125a5cbc93",
        "parent": "https://github.com/apache/myfaces/commit/0070587f37be8698a5aaffdf502e7298ad3264ec",
        "bug_id": "myfaces_4",
        "file": [
            {
                "sha": "7730daf30cbfca87d198aeeaca90f19bd801a8d2",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/27618ce8b676c847a93226f831202c125a5cbc93/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/27618ce8b676c847a93226f831202c125a5cbc93/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFaceletFactory.java?ref=27618ce8b676c847a93226f831202c125a5cbc93",
                "patch": "@@ -350,7 +350,8 @@ private DefaultFacelet _createFacelet(URL url) throws IOException, FaceletExcept\n             log.fine(\"Creating Facelet for: \" + url);\n         }\n \n-        String alias = '/' + _removeFirst(url.getFile(), getBaseUrl().getFile());\n+        URL baseUrl = getBaseUrl();\n+        String alias = '/' + _removeFirst(url.getFile(), baseUrl == null ? \"\" : baseUrl.getFile());\n         try\n         {\n             FaceletHandler h = _compiler.compile(url, alias);\n@@ -383,7 +384,8 @@ private DefaultFacelet _createViewMetadataFacelet(URL url)\n \n         // The alias is used later for informative purposes, so we append \n         // some prefix to identify later where the errors comes from.\n-        String faceletId = '/' + _removeFirst(url.getFile(), getBaseUrl().getFile());\n+        URL baseUrl = getBaseUrl();\n+        String faceletId = '/' + _removeFirst(url.getFile(), baseUrl == null ? \"\" : baseUrl.getFile());\n         String alias = \"/viewMetadata\" + faceletId;\n         try\n         {\n@@ -396,7 +398,6 @@ private DefaultFacelet _createViewMetadataFacelet(URL url)\n         {\n             throw new FileNotFoundException(\"Facelet \" + alias + \" not found at: \" + url.toExternalForm());\n         }\n-\n     }\n     \n     /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed possible NPE",
        "commit": "https://github.com/apache/myfaces/commit/ca86c8d5fde765c78824bb70441eb065bc11b433",
        "parent": "https://github.com/apache/myfaces/commit/18f7f6e343d213b548fea42c31342909c6f6f7f9",
        "bug_id": "myfaces_5",
        "file": [
            {
                "sha": "23df782de60f0f6f9c85a5b77d324f437c5ad4dc",
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ca86c8d5fde765c78824bb70441eb065bc11b433/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ca86c8d5fde765c78824bb70441eb065bc11b433/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java?ref=ca86c8d5fde765c78824bb70441eb065bc11b433",
                "patch": "@@ -458,7 +458,7 @@ public String encodeWebsocketURL(String url)\n \n         FacesContext facesContext = getCurrentFacesContext();\n         Integer port = MyfacesConfig.getCurrentInstance(facesContext).getWebsocketEndpointPort();\n-        port = (port == 0) ? null : port;\n+        port = (port == null || port == 0) ? null : port;\n         if (port != null && !port.equals(facesContext.getExternalContext().getRequestServerPort()))\n         {\n             String scheme = facesContext.getExternalContext().getRequestScheme();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed NPE on 404",
        "commit": "https://github.com/apache/myfaces/commit/efebceb953fcd6860eb0034b220a900d15597aea",
        "parent": "https://github.com/apache/myfaces/commit/9d7718632cbb6067725fa70bbd804c4d6a0b08fc",
        "bug_id": "myfaces_6",
        "file": [
            {
                "sha": "28d93edb8f05dc388d20022bab8db1fda11c4e60",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "blob_url": "https://github.com/apache/myfaces/blob/efebceb953fcd6860eb0034b220a900d15597aea/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "raw_url": "https://github.com/apache/myfaces/raw/efebceb953fcd6860eb0034b220a900d15597aea/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java?ref=efebceb953fcd6860eb0034b220a900d15597aea",
                "patch": "@@ -620,6 +620,11 @@ public String calculateViewId(FacesContext facesContext)\n     \n     public boolean isViewProtected(FacesContext context, String viewId)\n     {\n+        if (viewId == null)\n+        {\n+            return false;\n+        }\n+        \n         Boolean protectedView = null;\n         if (viewIdProtectedCache != null)\n         {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed NPE",
        "commit": "https://github.com/apache/myfaces/commit/166882959f49c2ba714ad75f7b2babbbb72c8b25",
        "parent": "https://github.com/apache/myfaces/commit/120f4cf271d3caa437e79d88e13df19db0a0884f",
        "bug_id": "myfaces_7",
        "file": [
            {
                "sha": "c6e0393a9b4fa20b79c14067b975441f8082eccc",
                "filename": "impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/FacesServletMappingUtils.java?ref=166882959f49c2ba714ad75f7b2babbbb72c8b25",
                "patch": "@@ -48,7 +48,7 @@ public static FacesServletMapping getCurrentRequestFacesServletMapping(FacesCont\n         if (mapping == null)\r\n         {\r\n             ExternalContext externalContext = context.getExternalContext();\r\n-            mapping = FacesServletMappingUtils.calculateFacesServletMapping(\r\n+            mapping = calculateFacesServletMapping(\r\n                     context,\r\n                     externalContext.getRequestServletPath(),\r\n                     externalContext.getRequestPathInfo(),\r",
                "deletions": 1
            },
            {
                "sha": "a8131474dfda67399701ac275f10216cfc27977c",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "blob_url": "https://github.com/apache/myfaces/blob/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "raw_url": "https://github.com/apache/myfaces/raw/166882959f49c2ba714ad75f7b2babbbb72c8b25/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewIdSupport.java?ref=166882959f49c2ba714ad75f7b2babbbb72c8b25",
                "patch": "@@ -130,10 +130,16 @@ protected String deriveViewId(FacesContext context, String rawViewId, boolean ch\n             }\n             else if (mapping.isExactMapping())\n             {\n+                // if the current request is a exact mapping and the viewId equals the exact viewId\n                 if (rawViewId.equals(mapping.getExact()))\n                 {\n                     viewId = handleSuffixMapping(context, rawViewId + \".jsf\");\n                 }\n+                // otherwise lets try to resolve a possible mapping for the requested viewId\n+                else\n+                {\n+                    viewId = rawViewId;\n+                }\n             }\n             else if (mapping.isPrefixMapping())\n             {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "Merge pull request #22 from wtlucy/MYFACES-4252_searchdir_NPE_2.3\n\nMYFACES-4252 fix Classpath._searchDir NPE",
        "commit": "https://github.com/apache/myfaces/commit/bb4c36316a71ec4e4e417fcf2463aa48203a28fe",
        "parent": "https://github.com/apache/myfaces/commit/42391458f46d1005bbfe901f5db1aa2f365e8e08",
        "bug_id": "myfaces_8",
        "file": [
            {
                "sha": "c82b1b0dafc6210b85192f355f4a5514cfe98633",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "blob_url": "https://github.com/apache/myfaces/blob/bb4c36316a71ec4e4e417fcf2463aa48203a28fe/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "raw_url": "https://github.com/apache/myfaces/raw/bb4c36316a71ec4e4e417fcf2463aa48203a28fe/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java?ref=bb4c36316a71ec4e4e417fcf2463aa48203a28fe",
                "patch": "@@ -140,20 +140,23 @@ public Object run()\n         }\n         if (dirExists && dir.isDirectory())\n         {\n-            for (File file : dir.listFiles())\n+            File[] dirFiles = dir.listFiles();\n+            if (dirFiles != null) \n             {\n-                String path = file.getAbsolutePath();\n-                if (file.isDirectory())\n+                for (File file : dirFiles)\n                 {\n-                    _searchDir(result, file, suffix);\n-                }\n-                else if (path.endsWith(suffix))\n-                {\n-                    result.add(file.toURI().toURL());\n+                    String path = file.getAbsolutePath();\n+                    if (file.isDirectory())\n+                    {\n+                        _searchDir(result, file, suffix);\n+                    }\n+                    else if (path.endsWith(suffix))\n+                    {\n+                        result.add(file.toURI().toURL());\n+                    }\n                 }\n+                return true;\n             }\n-\n-            return true;\n         }\n \n         return false;",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4195 Unexpected NullPointerException thrown in IterableDataModel",
        "commit": "https://github.com/apache/myfaces/commit/d1deb64a27595aa2c0b3c7c54a6fb3fd8f6f3cbf",
        "parent": "https://github.com/apache/myfaces/commit/7d48b3488a543daf43321c3a09726cf6452f819c",
        "bug_id": "myfaces_9",
        "file": [
            {
                "sha": "def23e5bdbe451419c5ccc54396d9f9200019ffa",
                "filename": "api/src/main/java/javax/faces/model/IterableDataModel.java",
                "blob_url": "https://github.com/apache/myfaces/blob/d1deb64a27595aa2c0b3c7c54a6fb3fd8f6f3cbf/api/src/main/java/javax/faces/model/IterableDataModel.java",
                "raw_url": "https://github.com/apache/myfaces/raw/d1deb64a27595aa2c0b3c7c54a6fb3fd8f6f3cbf/api/src/main/java/javax/faces/model/IterableDataModel.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/model/IterableDataModel.java?ref=d1deb64a27595aa2c0b3c7c54a6fb3fd8f6f3cbf",
                "patch": "@@ -106,11 +106,11 @@ public void setRowIndex(int rowIndex)\n                 {\r\n                     _list = new ArrayList<E>();\r\n                 }\r\n-                if (_iterator == null)\r\n+                if (_iterator == null && _iterable != null)\r\n                 {\r\n                     _iterator = _iterable.iterator();\r\n                 }\r\n-                if (_iterator.hasNext())\r\n+                if (_iterator != null && _iterator.hasNext())\r\n                 {\r\n                     _list.add(_iterator.next());\r\n                 }\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4252 fix Classpath._searchDir NPE",
        "commit": "https://github.com/apache/myfaces/commit/950d00cf30f7a6ef3d4435c90977ffbbd18dda6b",
        "parent": "https://github.com/apache/myfaces/commit/42391458f46d1005bbfe901f5db1aa2f365e8e08",
        "bug_id": "myfaces_10",
        "file": [
            {
                "sha": "c82b1b0dafc6210b85192f355f4a5514cfe98633",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "blob_url": "https://github.com/apache/myfaces/blob/950d00cf30f7a6ef3d4435c90977ffbbd18dda6b/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "raw_url": "https://github.com/apache/myfaces/raw/950d00cf30f7a6ef3d4435c90977ffbbd18dda6b/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/util/Classpath.java?ref=950d00cf30f7a6ef3d4435c90977ffbbd18dda6b",
                "patch": "@@ -140,20 +140,23 @@ public Object run()\n         }\n         if (dirExists && dir.isDirectory())\n         {\n-            for (File file : dir.listFiles())\n+            File[] dirFiles = dir.listFiles();\n+            if (dirFiles != null) \n             {\n-                String path = file.getAbsolutePath();\n-                if (file.isDirectory())\n+                for (File file : dirFiles)\n                 {\n-                    _searchDir(result, file, suffix);\n-                }\n-                else if (path.endsWith(suffix))\n-                {\n-                    result.add(file.toURI().toURL());\n+                    String path = file.getAbsolutePath();\n+                    if (file.isDirectory())\n+                    {\n+                        _searchDir(result, file, suffix);\n+                    }\n+                    else if (path.endsWith(suffix))\n+                    {\n+                        result.add(file.toURI().toURL());\n+                    }\n                 }\n+                return true;\n             }\n-\n-            return true;\n         }\n \n         return false;",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "small fix on encodeWebsocketURL (nullpointerexception on facesContext)",
        "commit": "https://github.com/apache/myfaces/commit/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b",
        "parent": "https://github.com/apache/myfaces/commit/46f79888376c0b5b360c02edf7abb507e303cca9",
        "bug_id": "myfaces_11",
        "file": [
            {
                "sha": "51c14de3cae1d77ed7ef01289b1af5b064c42d8c",
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImpl.java?ref=24aa1a73704a1a87fedaa1c7c2fe459b7b191f2b",
                "patch": "@@ -392,14 +392,15 @@ public String encodeRedirectURL(String baseUrl, Map<String,List<String>> paramet\n     @Override\n     public String encodeWebsocketURL(String baseUrl)\n     {\n+        FacesContext facesContext = getCurrentFacesContext();\n         Integer port = WebConfigParamUtils.getIntegerInitParameter(\n-                _currentFacesContext.getExternalContext(), ViewHandler.WEBSOCKET_PORT);\n+                getCurrentFacesContext().getExternalContext(), ViewHandler.WEBSOCKET_PORT);\n         port = (port == 0) ? null : port;\n         if (port != null && \n-            !port.equals(_currentFacesContext.getExternalContext().getRequestServerPort()))\n+            !port.equals(facesContext.getExternalContext().getRequestServerPort()))\n         {\n-            String scheme = _currentFacesContext.getExternalContext().getRequestScheme();\n-            String serverName = _currentFacesContext.getExternalContext().getRequestServerName();\n+            String scheme = facesContext.getExternalContext().getRequestScheme();\n+            String serverName = facesContext.getExternalContext().getRequestServerName();\n             String url;\n             try\n             {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4199 NPE with <f:selectItem>",
        "commit": "https://github.com/apache/myfaces/commit/79c39694497954572ea5adad882ab30642dcbee4",
        "parent": "https://github.com/apache/myfaces/commit/52de1a1738c11f028aace01acbda0c8486b8f59c",
        "bug_id": "myfaces_12",
        "file": [
            {
                "sha": "1338e2d044fc702beaaa760fa62ed26691bf86a5",
                "filename": "api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/79c39694497954572ea5adad882ab30642dcbee4/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/79c39694497954572ea5adad882ab30642dcbee4/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_SelectItemsIterator.java?ref=79c39694497954572ea5adad882ab30642dcbee4",
                "patch": "@@ -255,9 +255,12 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_ATTR);\n-                if (itemLabel == null && itemValue != null)\n+                if (itemLabel == null)\n                 {\n-                    itemLabel = itemValue.toString();\n+\t\t\t\t    if (itemValue != null)\n+\t\t\t\t    {\n+                        itemLabel = itemValue.toString();\n+\t\t\t\t    }\n                 }\n                 else\n                 {",
                "deletions": 2
            },
            {
                "sha": "a689fa73197cbc3875490eca28c525650ad36dcb",
                "filename": "shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/79c39694497954572ea5adad882ab30642dcbee4/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/79c39694497954572ea5adad882ab30642dcbee4/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java?ref=79c39694497954572ea5adad882ab30642dcbee4",
                "patch": "@@ -264,9 +264,12 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_PROP);\n-                if (itemLabel == null && itemValue != null)\n+                if (itemLabel == null)\n                 {\n-                    itemLabel = itemValue.toString();\n+\t\t\t\t    if (itemValue != null)\n+\t\t\t\t    {\n+                        itemLabel = itemValue.toString();\n+\t\t\t\t    }\n                 }\n                 else\n                 {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4199 NPE with <f:selectItem>",
        "commit": "https://github.com/apache/myfaces/commit/ca52695286e5bd17262364f4c2fa7f685ea27c49",
        "parent": "https://github.com/apache/myfaces/commit/ed30ad211f78c4939934451a6adbad67632f32e7",
        "bug_id": "myfaces_13",
        "file": [
            {
                "sha": "dede1289487f929e0d9a93d058f3c2e8df2f9654",
                "filename": "api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ca52695286e5bd17262364f4c2fa7f685ea27c49/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ca52695286e5bd17262364f4c2fa7f685ea27c49/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_SelectItemsIterator.java?ref=ca52695286e5bd17262364f4c2fa7f685ea27c49",
                "patch": "@@ -257,9 +257,12 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_ATTR);\n-                if (itemLabel == null && itemValue != null)\n+                if (itemLabel == null)\n                 {\n-                    itemLabel = itemValue.toString();\n+\t\t\t\t    if (itemValue != null)\n+\t\t\t\t    {\n+                        itemLabel = itemValue.toString();\n+\t\t\t\t    }\n                 }\n                 else\n                 {",
                "deletions": 2
            },
            {
                "sha": "a689fa73197cbc3875490eca28c525650ad36dcb",
                "filename": "shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ca52695286e5bd17262364f4c2fa7f685ea27c49/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ca52695286e5bd17262364f4c2fa7f685ea27c49/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java?ref=ca52695286e5bd17262364f4c2fa7f685ea27c49",
                "patch": "@@ -264,9 +264,12 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_PROP);\n-                if (itemLabel == null && itemValue != null)\n+                if (itemLabel == null)\n                 {\n-                    itemLabel = itemValue.toString();\n+\t\t\t\t    if (itemValue != null)\n+\t\t\t\t    {\n+                        itemLabel = itemValue.toString();\n+\t\t\t\t    }\n                 }\n                 else\n                 {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4199 NPE with <f:selectItem>",
        "commit": "https://github.com/apache/myfaces/commit/ed30ad211f78c4939934451a6adbad67632f32e7",
        "parent": "https://github.com/apache/myfaces/commit/6637e825f2a42f03b755093b54508d3ae5ef0fb5",
        "bug_id": "myfaces_14",
        "file": [
            {
                "sha": "fa0a437e9b45a06f2c62843e74a617b1fde73923",
                "filename": "api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ed30ad211f78c4939934451a6adbad67632f32e7/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ed30ad211f78c4939934451a6adbad67632f32e7/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_SelectItemsIterator.java?ref=ed30ad211f78c4939934451a6adbad67632f32e7",
                "patch": "@@ -121,7 +121,7 @@ public boolean hasNext()\n                     boolean disabled = uiSelectItem.isItemDisabled();\n                     boolean escape = uiSelectItem.isItemEscaped();\n                     boolean noSelectionOption = uiSelectItem.isNoSelectionOption();\n-                    if (label == null)\n+                    if (label == null && itemValue != null)\n                     {\n                         label = itemValue.toString();\n                     }\n@@ -257,7 +257,7 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_ATTR);\n-                if (itemLabel == null)\n+                if (itemLabel == null && itemValue != null)\n                 {\n                     itemLabel = itemValue.toString();\n                 }",
                "deletions": 2
            },
            {
                "sha": "f1ed99af8dfd145f5aa5e1d3757eb0c83046a297",
                "filename": "shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ed30ad211f78c4939934451a6adbad67632f32e7/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ed30ad211f78c4939934451a6adbad67632f32e7/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java?ref=ed30ad211f78c4939934451a6adbad67632f32e7",
                "patch": "@@ -125,7 +125,7 @@ public boolean hasNext()\n                     boolean disabled = uiSelectItem.isItemDisabled();\n                     boolean escape = uiSelectItem.isItemEscaped();\n                     boolean noSelectionOption = uiSelectItem.isNoSelectionOption();\n-                    if (label == null)\n+                    if (label == null && itemValue != null)\n                     {\n                         label = itemValue.toString();\n                     }\n@@ -264,7 +264,7 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_PROP);\n-                if (itemLabel == null)\n+                if (itemLabel == null && itemValue != null)\n                 {\n                     itemLabel = itemValue.toString();\n                 }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4199 NPE with <f:selectItem>",
        "commit": "https://github.com/apache/myfaces/commit/52de1a1738c11f028aace01acbda0c8486b8f59c",
        "parent": "https://github.com/apache/myfaces/commit/31ab909b4cc768ff4ba1243449ae5457a0765619",
        "bug_id": "myfaces_15",
        "file": [
            {
                "sha": "d62f80f7658ba4f770dc21769db8e846c154c3ef",
                "filename": "api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/52de1a1738c11f028aace01acbda0c8486b8f59c/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/52de1a1738c11f028aace01acbda0c8486b8f59c/api/src/main/java/javax/faces/component/_SelectItemsIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_SelectItemsIterator.java?ref=52de1a1738c11f028aace01acbda0c8486b8f59c",
                "patch": "@@ -120,7 +120,7 @@ public boolean hasNext()\n                     boolean disabled = uiSelectItem.isItemDisabled();\n                     boolean escape = uiSelectItem.isItemEscaped();\n                     boolean noSelectionOption = uiSelectItem.isNoSelectionOption();\n-                    if (label == null)\n+                    if (label == null && itemValue != null)\n                     {\n                         label = itemValue.toString();\n                     }\n@@ -255,7 +255,7 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_ATTR);\n-                if (itemLabel == null)\n+                if (itemLabel == null && itemValue != null)\n                 {\n                     itemLabel = itemValue.toString();\n                 }",
                "deletions": 2
            },
            {
                "sha": "f1ed99af8dfd145f5aa5e1d3757eb0c83046a297",
                "filename": "shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/52de1a1738c11f028aace01acbda0c8486b8f59c/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/52de1a1738c11f028aace01acbda0c8486b8f59c/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared-public/src/main/java/org/apache/myfaces/shared/util/SelectItemsIterator.java?ref=52de1a1738c11f028aace01acbda0c8486b8f59c",
                "patch": "@@ -125,7 +125,7 @@ public boolean hasNext()\n                     boolean disabled = uiSelectItem.isItemDisabled();\n                     boolean escape = uiSelectItem.isItemEscaped();\n                     boolean noSelectionOption = uiSelectItem.isNoSelectionOption();\n-                    if (label == null)\n+                    if (label == null && itemValue != null)\n                     {\n                         label = itemValue.toString();\n                     }\n@@ -264,7 +264,7 @@ public SelectItem next()\n                 // Spec: When iterating over the select items, toString() \n                 // must be called on the string rendered attribute values\n                 Object itemLabel = attributeMap.get(ITEM_LABEL_PROP);\n-                if (itemLabel == null)\n+                if (itemLabel == null && itemValue != null)\n                 {\n                     itemLabel = itemValue.toString();\n                 }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4184 avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/a530ae5b6019233f22c954b4a990c1f6c249cbf8",
        "parent": "https://github.com/apache/myfaces/commit/e9ab2584d5dc8f5afa5aca004be9c274cc60fd6a",
        "bug_id": "myfaces_16",
        "file": [
            {
                "sha": "64a0f377c36e85180a15c43c1afcd287da64262e",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/util/FaceletsViewDeclarationLanguageUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a530ae5b6019233f22c954b4a990c1f6c249cbf8/impl/src/main/java/org/apache/myfaces/view/facelets/util/FaceletsViewDeclarationLanguageUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a530ae5b6019233f22c954b4a990c1f6c249cbf8/impl/src/main/java/org/apache/myfaces/view/facelets/util/FaceletsViewDeclarationLanguageUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/util/FaceletsViewDeclarationLanguageUtils.java?ref=a530ae5b6019233f22c954b4a990c1f6c249cbf8",
                "patch": "@@ -111,7 +111,7 @@ public static Class getReturnType(String signature)\n      */\r\n     public static void markRenderedResources(FacesContext facesContext, UIViewRoot view)\r\n     {\r\n-        if (facesContext.getPartialViewContext().isAjaxRequest())\r\n+        if (view != null && facesContext.getPartialViewContext().isAjaxRequest())\r\n         {\r\n             markRenderedResources(facesContext, view, view.getComponentResources(facesContext, \"head\"));\r\n             markRenderedResources(facesContext, view, view.getComponentResources(facesContext, \"body\"));\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4187: throw NPE with null resourceName",
        "commit": "https://github.com/apache/myfaces/commit/b881ddb17bbc6886d5845a74a90d16670b984d16",
        "parent": "https://github.com/apache/myfaces/commit/b5877dcc2f720cbd7d039c70c59fdfbf77e9d587",
        "bug_id": "myfaces_17",
        "file": [
            {
                "sha": "9d5c9d941a4b636f21d66098c5bf21b6b0b38650",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ResourceHandlerImpl.java?ref=b881ddb17bbc6886d5845a74a90d16670b984d16",
                "patch": "@@ -138,10 +138,16 @@ public Resource createResource(String resourceName, String libraryName,\n     {\n         Resource resource = null;\n         \n-        if (resourceName == null || resourceName.length() == 0) \n+        if (resourceName == null) \n+        {\n+            throw new NullPointerException();\n+        }\n+\n+        if (resourceName.length() == 0)\n         {\n             return null;\n         }\n+\n         if (resourceName.charAt(0) == '/')\n         {\n             // If resourceName starts with '/', remove that character because it",
                "deletions": 1
            },
            {
                "sha": "3ca420c6ef4ac8b9ddc7c2b6b92580741b107b3d",
                "filename": "impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b881ddb17bbc6886d5845a74a90d16670b984d16/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/ResourceHandlerImplTest.java?ref=b881ddb17bbc6886d5845a74a90d16670b984d16",
                "patch": "@@ -221,4 +221,19 @@ public boolean libraryExists(String libraryName)\n         Assert.assertNull(resource.getResourceVersion());        \n         Assert.assertEquals(\"myres.js\", resource.getResourceName());\n     }\n+\n+    @Test\n+    public void testCreateResourceNullResourceName() throws Exception\n+    {\n+        boolean didNPEOccur = false;\n+        try \n+        {\n+            resourceHandler.createResource(null);\n+        } catch (NullPointerException e)\n+        {\n+            didNPEOccur = true;\n+        }\n+        \n+        Assert.assertTrue(didNPEOccur);\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4163 fixed NPE",
        "commit": "https://github.com/apache/myfaces/commit/bedaade91416fd823b8c378d6e8e2db5be97950d",
        "parent": "https://github.com/apache/myfaces/commit/b4d9a85ec64699bbb9617d23d00b2f4f3d70861d",
        "bug_id": "myfaces_18",
        "file": [
            {
                "sha": "815fba57b6b6b136df8531e94fc9bfa5182b8e55",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlCommandScriptRenderer.java",
                "blob_url": "https://github.com/apache/myfaces/blob/bedaade91416fd823b8c378d6e8e2db5be97950d/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlCommandScriptRenderer.java",
                "raw_url": "https://github.com/apache/myfaces/raw/bedaade91416fd823b8c378d6e8e2db5be97950d/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlCommandScriptRenderer.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlCommandScriptRenderer.java?ref=bedaade91416fd823b8c378d6e8e2db5be97950d",
                "patch": "@@ -470,7 +470,7 @@ private StringBuilder buildOptions(StringBuilder retVal, List<String> options)\n             {\r\n                 if (!first)\r\n                 {\r\n-                    retVal.append(':');\r\n+                    retVal.append(',');\r\n                 }\r\n                 else\r\n                 {\r\n@@ -583,6 +583,11 @@ private void assertBehavior(ClientBehavior behavior)\n      */\r\n     private Collection<String> getCollectionFromSpaceSplitString(String stringValue)\r\n     {\r\n+        if (stringValue == null || stringValue.trim().isEmpty())\r\n+        {\r\n+            return Collections.emptyList();\r\n+        }\r\n+        \r\n         //@special handling for @all, @none, @form and @this\r\n         switch (stringValue)\r\n         {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "add NullPointerException check",
        "commit": "https://github.com/apache/myfaces/commit/8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
        "parent": "https://github.com/apache/myfaces/commit/178b9577502aad5d1b9385fdac5904c5fb8696b5",
        "bug_id": "myfaces_19",
        "file": [
            {
                "sha": "83c117430941abed1715908871038e6a3c98843f",
                "filename": "api/src/main/java/javax/faces/component/UIData.java",
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIData.java",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIData.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIData.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "patch": "@@ -1571,6 +1571,10 @@ public String getContainerClientId(FacesContext context)\n     @Override\n     public void queueEvent(FacesEvent event)\n     {\n+        if (event == null)\n+        {\n+            throw new NullPointerException(\"event\");\n+        }\n         super.queueEvent(new FacesEventWrapper(event, getRowIndex(), this));\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "fe7bb9683aec8b4ad00b1dc4ad9f938e1cb1adf9",
                "filename": "api/src/main/java/javax/faces/component/UIInput.java",
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIInput.java",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/component/UIInput.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIInput.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "patch": "@@ -387,6 +387,10 @@ public void broadcast(FacesEvent event) throws AbortProcessingException\n \n     public void updateModel(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException();\n+        }\n         if (!isValid())\n         {\n             return;",
                "deletions": 0
            },
            {
                "sha": "2f39e26c76689deddab7b6e4cbb767dc73ed167a",
                "filename": "api/src/main/java/javax/faces/event/FacesEvent.java",
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/event/FacesEvent.java",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/api/src/main/java/javax/faces/event/FacesEvent.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/event/FacesEvent.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "patch": "@@ -65,6 +65,10 @@ public PhaseId getPhaseId()\n \n     public void setPhaseId(PhaseId phaseId)\n     {\n+        if (phaseId == null)\n+        {\n+            throw new IllegalArgumentException(\"phaseId\");\n+        }\n         _phaseId = phaseId;\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "54b52dab68ec3162725f3520d73c76e296d4ea25",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/8fb098e8d9192454f1fe5db212e85c7395e3d0d4/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java?ref=8fb098e8d9192454f1fe5db212e85c7395e3d0d4",
                "patch": "@@ -262,12 +262,16 @@ public UIViewRoot createView(FacesContext context, String viewId)\n     @Override\n     public String getActionURL(FacesContext context, String viewId)\n     {\n+        checkNull(context, \"facesContext\");\n+        checkNull(viewId, \"viewId\");\n         return getViewHandlerSupport(context).calculateActionURL(context, viewId);\n     }\n \n     @Override\n     public String getResourceURL(FacesContext facesContext, String path)\n     {\n+        checkNull(facesContext, \"facesContext\");\n+        checkNull(path, \"path\");\n         if (path.length() > 0 && path.charAt(0) == '/')\n         {\n             return facesContext.getExternalContext().getRequestContextPath() + path;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "add NullPointerException check",
        "commit": "https://github.com/apache/myfaces/commit/0d30c3e05a89e6066b26de7b823214863539af9a",
        "parent": "https://github.com/apache/myfaces/commit/f9c4b4789ec3ca1eb9995616731be696db1d477d",
        "bug_id": "myfaces_20",
        "file": [
            {
                "sha": "61d7d32b91db48f5e2ce4c03c56a64aaeef4d4d0",
                "filename": "impl/src/main/java/org/apache/myfaces/flow/FlowHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0d30c3e05a89e6066b26de7b823214863539af9a/impl/src/main/java/org/apache/myfaces/flow/FlowHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0d30c3e05a89e6066b26de7b823214863539af9a/impl/src/main/java/org/apache/myfaces/flow/FlowHandlerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/flow/FlowHandlerImpl.java?ref=0d30c3e05a89e6066b26de7b823214863539af9a",
                "patch": "@@ -178,6 +178,8 @@ public Flow getCurrentFlow(FacesContext context)\n     public void transition(FacesContext context, Flow sourceFlow, Flow targetFlow, \n         FlowCallNode outboundCallNode, String toViewId)\n     {\n+        checkNull(context, \"context\");\n+        checkNull(toViewId, \"toViewId\");\n         ClientWindow clientWindow = context.getExternalContext().getClientWindow();\n         boolean outboundCallNodeProcessed = false;\n         if (clientWindow == null)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-4194: throw NPE in validators - restore/save state methods if FacesContext is null",
        "commit": "https://github.com/apache/myfaces/commit/7d48b3488a543daf43321c3a09726cf6452f819c",
        "parent": "https://github.com/apache/myfaces/commit/4bb1656d29e36455c9f0b528151496e16294761b",
        "bug_id": "myfaces_21",
        "file": [
            {
                "sha": "5056eab9542ca23a980ccc6ba1a18f30b3bb7847",
                "filename": "api/src/main/java/javax/faces/validator/BeanValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/BeanValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/BeanValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/BeanValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -425,6 +425,11 @@ public ClassLoader run() throws PrivilegedActionException\n     @Override\n     public Object saveState(final FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (!initialStateMarked())\n         {\n            //Full state saving.\n@@ -448,6 +453,11 @@ else if (DEFAULT_VALIDATION_GROUP_NAME.equals(this.validationGroups))\n     @Override\n     public void restoreState(final FacesContext context, final Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (state != null)\n         {\n             this.validationGroups = (String) state;",
                "deletions": 0
            },
            {
                "sha": "407dc7f598b50da2988f6f48e2c2e5877f88987c",
                "filename": "api/src/main/java/javax/faces/validator/DoubleRangeValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/DoubleRangeValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/DoubleRangeValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/DoubleRangeValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -183,6 +183,11 @@ public void setMinimum(double minimum)\n     // RESTORE/SAVE STATE\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (!initialStateMarked())\n         {\n             Object values[] = new Object[2];\n@@ -196,6 +201,11 @@ public Object saveState(FacesContext context)\n     public void restoreState(FacesContext context,\n                              Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+        \n         if (state != null)\n         {\n             Object values[] = (Object[])state;",
                "deletions": 0
            },
            {
                "sha": "7091b540343322b2c1eb1af8e030e212b3f8d534",
                "filename": "api/src/main/java/javax/faces/validator/LengthValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/LengthValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/LengthValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/LengthValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -164,6 +164,11 @@ public void setTransient(boolean transientValue)\n     // RESTORE & SAVE STATE\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (!initialStateMarked())\n         {\n             Object values[] = new Object[2];\n@@ -177,6 +182,11 @@ public Object saveState(FacesContext context)\n     public void restoreState(FacesContext context,\n                              Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (state != null)\n         {\n             Object values[] = (Object[])state;",
                "deletions": 0
            },
            {
                "sha": "f5c0a5450389ebeab38c8cde65df59ceed0e4454",
                "filename": "api/src/main/java/javax/faces/validator/LongRangeValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/LongRangeValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/LongRangeValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/LongRangeValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -193,6 +193,11 @@ public void setTransient(boolean transientValue)\n     // RESTORE & SAVE STATE\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (!initialStateMarked())\n         {\n             Object values[] = new Object[2];\n@@ -206,6 +211,11 @@ public Object saveState(FacesContext context)\n     public void restoreState(FacesContext context,\n                              Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (state != null)\n         {\n             Object values[] = (Object[])state;",
                "deletions": 0
            },
            {
                "sha": "3c704a995114e4cd3ea51e10a9d8c9fdc7566933",
                "filename": "api/src/main/java/javax/faces/validator/MethodExpressionValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/MethodExpressionValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/MethodExpressionValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/MethodExpressionValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -100,11 +100,21 @@ public void validate(FacesContext context, UIComponent component, Object value)\n \n     public void restoreState(FacesContext context, Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         methodExpression = (MethodExpression)state;\n     }\n \n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         return methodExpression;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "0820e3e492d41405837cd091f7524d84bb9152ce",
                "filename": "api/src/main/java/javax/faces/validator/RegexValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/RegexValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7d48b3488a543daf43321c3a09726cf6452f819c/api/src/main/java/javax/faces/validator/RegexValidator.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/RegexValidator.java?ref=7d48b3488a543daf43321c3a09726cf6452f819c",
                "patch": "@@ -164,6 +164,11 @@ public void validate(FacesContext context,\n     /** {@inheritDoc} */\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (!initialStateMarked())\n         {\n             return pattern;\n@@ -174,6 +179,11 @@ public Object saveState(FacesContext context)\n     /** {@inheritDoc} */\n     public void restoreState(FacesContext context, Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException(\"context\");\n+        }\n+\n         if (state != null)\n         {\n             //Since pattern is required, if state is null",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "small fix NullPointerException ViewExpired",
        "commit": "https://github.com/apache/myfaces/commit/d9cac6e37412ae24987a76026acb5fca7e439bda",
        "parent": "https://github.com/apache/myfaces/commit/a47b94251f262a097ad10732fcc3bd2c6439b9bf",
        "bug_id": "myfaces_22",
        "file": [
            {
                "sha": "9f279df300eba144fdf7f8c48fff2b2e2e62b334",
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/d9cac6e37412ae24987a76026acb5fca7e439bda/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/d9cac6e37412ae24987a76026acb5fca7e439bda/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=d9cac6e37412ae24987a76026acb5fca7e439bda",
                "patch": "@@ -159,11 +159,14 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                     partialViewContext.setRenderAll(true);\n                 }\n \n-                if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                if (facesContext.getViewRoot() != null)\n                 {\n-                    facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n-                    facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n-                    facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                    {\n+                        facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n+                        facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n+                        facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    }\n                 }\n \n                 // create UIViewRoot for new view",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "small fix NullPointerException ViewExpired",
        "commit": "https://github.com/apache/myfaces/commit/50b28c462edce6b5f54b9cf15464c2828d4217dd",
        "parent": "https://github.com/apache/myfaces/commit/a96f335daef3c789c8b6ce5c00f17ae0d65f5ea4",
        "bug_id": "myfaces_23",
        "file": [
            {
                "sha": "508ee02a76ef23ba59054e2921179c3514f026c7",
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/50b28c462edce6b5f54b9cf15464c2828d4217dd/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/50b28c462edce6b5f54b9cf15464c2828d4217dd/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=50b28c462edce6b5f54b9cf15464c2828d4217dd",
                "patch": "@@ -159,11 +159,14 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                     partialViewContext.setRenderAll(true);\n                 }\n \n-                if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                if (facesContext.getViewRoot() != null)\n                 {\n-                    facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n-                    facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n-                    facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    if (facesContext.getViewRoot().getAttributes().containsKey(\"oam.CALL_PRE_DISPOSE_VIEW\"))\n+                    {\n+                        facesContext.getAttributes().put(SKIP_ITERATION_HINT, Boolean.TRUE);\n+                        facesContext.getViewRoot().visitTree(VisitContext.createVisitContext(facesContext), new PreDisposeViewCallback());\n+                        facesContext.getAttributes().remove(SKIP_ITERATION_HINT);\n+                    }\n                 }\n \n                 // create UIViewRoot for new view",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3978 NullPointerException in FaceletStateValueExpression when ViewPooling enabled",
        "commit": "https://github.com/apache/myfaces/commit/236130dbf999fc1f10c9a374d7aec69ac953512c",
        "parent": "https://github.com/apache/myfaces/commit/e0c0782777acd430b7260f886df9b6caae8edaa9",
        "bug_id": "myfaces_24",
        "file": [
            {
                "sha": "10e5e69d1e6add191263a3388ed8f2c7f46814e5",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "blob_url": "https://github.com/apache/myfaces/blob/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "raw_url": "https://github.com/apache/myfaces/raw/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java",
                "status": "modified",
                "changes": 58,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/DefaultFaceletsStateManagementStrategy.java?ref=236130dbf999fc1f10c9a374d7aec69ac953512c",
                "patch": "@@ -27,7 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n+import javax.el.ValueExpression;\n import javax.faces.FacesException;\n import javax.faces.FactoryFinder;\n import javax.faces.application.ProjectStage;\n@@ -52,7 +52,6 @@\n import javax.faces.view.ViewDeclarationLanguage;\n import javax.faces.view.ViewDeclarationLanguageFactory;\n import javax.faces.view.ViewMetadata;\n-\n import org.apache.myfaces.application.StateManagerImpl;\n import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n import org.apache.myfaces.context.RequestViewContext;\n@@ -309,7 +308,25 @@ public UIViewRoot restoreView (FacesContext context, String viewId, String rende\n                     }\n                     if (faceletViewState != null)\n                     {\n-                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                        //if (skipBuildView)\n+                        //{\n+                            FaceletState newFaceletState = (FaceletState) view.getAttributes().get(\n+                                    ComponentSupport.FACELET_STATE_INSTANCE);\n+                            if (newFaceletState != null)\n+                            {\n+                                newFaceletState.restoreState(context, \n+                                        ((FaceletState)faceletViewState).saveState(context));\n+                                faceletViewState = newFaceletState;\n+                            }\n+                            else\n+                            {\n+                                view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                            }\n+                        //}\n+                        //else\n+                        //{\n+                        //    view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                        //}\n                     }\n                     if (state.length == 3)\n                     {\n@@ -373,6 +390,10 @@ public UIViewRoot restoreView (FacesContext context, String viewId, String rende\n                 states = (Map<String, Object>) state[1];\n                 //Save the last unique id counter key in UIViewRoot\n                 Integer lastUniqueIdCounter = (Integer) view.getAttributes().get(UNIQUE_ID_COUNTER_KEY);\n+                // Retrieve the facelet state before restore anything. The reason is\n+                // it could be necessary to restore the bindings map from here.\n+                FaceletState oldFaceletState = (FaceletState) view.getAttributes().get(\n+                        ComponentSupport.FACELET_STATE_INSTANCE);\n                 \n                 // Visit the children and restore their state.\n                 boolean emptyState = false;\n@@ -414,7 +435,36 @@ else if (states.size() == 1 &&\n                 }\n                 if (faceletViewState != null)\n                 {\n-                    view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                    // Make sure binding map\n+                    if (oldFaceletState != null && oldFaceletState.getBindings() != null && \n+                            !oldFaceletState.getBindings().isEmpty())\n+                    {\n+                        // Be sure the new facelet state has the binding map filled from the old one.\n+                        // When vdl.buildView() is called by restoreView, FaceletState.bindings map is filled, but\n+                        // when view pool is enabled, vdl.buildView() could restore the view, but create an alternate\n+                        // FaceletState instance, different from the one restored. In this case, the restored instance\n+                        // has precedence, but we need to fill bindings map using the entries from the instance that\n+                        // comes from the view pool.\n+                        FaceletState newFaceletState = (FaceletState) faceletViewState;\n+                        for (Map.Entry<String, Map<String, ValueExpression> > entry : \n+                                oldFaceletState.getBindings().entrySet())\n+                        {\n+                            for (Map.Entry<String, ValueExpression> entry2 : entry.getValue().entrySet())\n+                            {\n+                                ValueExpression expr = newFaceletState.getBinding(entry.getKey(), entry2.getKey());\n+                                if (expr == null)\n+                                {\n+                                    newFaceletState.putBinding(entry.getKey(), entry2.getKey(), entry2.getValue());\n+                                }\n+                            }\n+                        }\n+                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  newFaceletState);\n+                    }\n+                    else\n+                    {\n+                        //restore bindings\n+                        view.getAttributes().put(ComponentSupport.FACELET_STATE_INSTANCE,  faceletViewState);\n+                    }\n                 }\n                 if (lastUniqueIdCounter != null)\n                 {",
                "deletions": 4
            },
            {
                "sha": "21c6359686982ee67189a692af886ac46565df5e",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "blob_url": "https://github.com/apache/myfaces/blob/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "raw_url": "https://github.com/apache/myfaces/raw/236130dbf999fc1f10c9a374d7aec69ac953512c/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/FaceletState.java?ref=236130dbf999fc1f10c9a374d7aec69ac953512c",
                "patch": "@@ -147,6 +147,21 @@ public void putBinding(String uniqueId, String key, ValueExpression expr)\n         bindings.put(key, expr);\n     }\n     \n+    /**\n+     * A \"Facelet Binding ValueExpression\" is a ValueExpression used/generated by facelets algorithm\n+     * associated with an uniqueId, which usually is bound to the tagId. Components like c:forEach or\n+     * ui:param uses it and the reason behind this is avoid use VariableMapper to create EL Expressions\n+     * that later cannot be cached. Instead, the intention is make an indirection using 2 ValueExpression\n+     * instances. In that way, all EL Expressions can be cached, because VariableMapper will use an\n+     * instance that contains the uniqueId and the one stored in the map will have the real value or\n+     * EL Expression that points to the managed bean. (Remember each EL expression that uses a variable\n+     * stored in VariableMapper will copy the EL expression bound to the variable, so if the EL expression\n+     * value changes across views, all EL Expressions that contains a reference cannot be cached).\n+     * \n+     * This map is something special, because its content is related to the view structure. It does not need\n+     * to be saved fully into the state, and it does not have any delta state, but it \"evolves\" with the initial\n+     * state.\n+     */\n     public ValueExpression getBinding(String uniqueId, String key)\n     {\n         if (bindingsMap == null)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3735 NullPointerException in CompositeMetadataTargetImpl.<init>",
        "commit": "https://github.com/apache/myfaces/commit/5a8fa151635c0739b120272d55d9b50e2aac79b9",
        "parent": "https://github.com/apache/myfaces/commit/bb50d315696d422f13aff2ba706b8c3dcbf78c47",
        "bug_id": "myfaces_25",
        "file": [
            {
                "sha": "64bde666136f028b856c3d091b0a36f6cbe0fce4",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeComponentDefinitionTagHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/5a8fa151635c0739b120272d55d9b50e2aac79b9/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeComponentDefinitionTagHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/5a8fa151635c0739b120272d55d9b50e2aac79b9/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeComponentDefinitionTagHandler.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeComponentDefinitionTagHandler.java?ref=5a8fa151635c0739b120272d55d9b50e2aac79b9",
                "patch": "@@ -143,9 +143,9 @@ else if (_implementationHandler != null)\n                 {\n                     if (_cachedBeanInfo == null)\n                     {\n-                        _cachedBeanInfo = _createCompositeComponentMetadata(ctx, compositeBaseParent);\n+                        tempBeanInfo  = _createCompositeComponentMetadata(ctx, compositeBaseParent);\n                         compositeBaseParent.getAttributes().put(\n-                                UIComponent.BEANINFO_KEY, _cachedBeanInfo);\n+                                UIComponent.BEANINFO_KEY, tempBeanInfo);\n                         \n                         try\n                         {\n@@ -162,7 +162,7 @@ else if (_implementationHandler != null)\n                             \n                             Collection<String> declaredDefaultValues = null;\n                             \n-                            for (PropertyDescriptor pd : _cachedBeanInfo.getPropertyDescriptors())\n+                            for (PropertyDescriptor pd : tempBeanInfo.getPropertyDescriptors())\n                             {\n                                 if (pd.getValue(\"default\") != null)\n                                 {\n@@ -177,12 +177,14 @@ else if (_implementationHandler != null)\n                             {\n                                 declaredDefaultValues = Collections.emptyList();\n                             }\n-                            _cachedBeanInfo.getBeanDescriptor().\n+                            tempBeanInfo.getBeanDescriptor().\n                                     setValue(UIComponent.ATTRS_WITH_DECLARED_DEFAULT_VALUES, declaredDefaultValues);\n                         }\n                         finally\n                         {\n                             mctx.popCompositeComponentToStack();\n+                            \n+                            _cachedBeanInfo = tempBeanInfo;\n                         }\n                     }\n                     else",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3966 Setting oamEnableViewPool=\"false\" causes NullPointerException in ViewPoolProcessor.pushPartialView()",
        "commit": "https://github.com/apache/myfaces/commit/78a99b95e902a2398f12d3d1aed59261e214357b",
        "parent": "https://github.com/apache/myfaces/commit/0fd5efef5555d40ddcaa598c1ebec22d578593d2",
        "bug_id": "myfaces_26",
        "file": [
            {
                "sha": "5c46e451f5a8797ad58cdaefc92f8d349ea4ea2b",
                "filename": "api/src/main/java/javax/faces/component/UIViewRoot.java",
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/api/src/main/java/javax/faces/component/UIViewRoot.java",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/api/src/main/java/javax/faces/component/UIViewRoot.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIViewRoot.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "patch": "@@ -1447,6 +1447,7 @@ public Object saveState(FacesContext facesContext)\n             {\n                 listenerSuccessMap.clear();\n             }\n+            _restoreViewScopeStateCalled = false;\n         }\n         if (getResetSaveStateMode() == RESET_MODE_HARD)\n         {\n@@ -1474,6 +1475,7 @@ public Object saveState(FacesContext facesContext)\n                     _viewScope.clear();\n                 }\n             }\n+            _restoreViewScopeStateCalled = false;\n         }\n         \n         if (initialStateMarked())",
                "deletions": 0
            },
            {
                "sha": "2e66eb9e8ebc27348e22920bc88bd2da60608653",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java",
                "status": "modified",
                "changes": 51,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/ViewPoolProcessor.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "patch": "@@ -409,36 +409,43 @@ public ViewStructureMetadata retrieveViewStructureMetadata(FacesContext context,\n             UIViewRoot root)\n     {\n         ViewPool viewPool = getViewPool(context, root);\n-        FaceletState faceletState = (FaceletState) root.getAttributes().get(\n-                ComponentSupport.FACELET_STATE_INSTANCE);\n-        boolean isDynamic = faceletState != null ? faceletState.isDynamic() : false;\n-        if (!isDynamic)\n-        {\n-            return viewPool.retrieveStaticViewStructureMetadata(context, root);\n-        }\n-        else\n+        if (viewPool != null)\n         {\n-            return viewPool.retrieveDynamicViewStructureMetadata(context, root, faceletState);\n+            FaceletState faceletState = (FaceletState) root.getAttributes().get(\n+                    ComponentSupport.FACELET_STATE_INSTANCE);\n+            boolean isDynamic = faceletState != null ? faceletState.isDynamic() : false;\n+            if (!isDynamic)\n+            {\n+                return viewPool.retrieveStaticViewStructureMetadata(context, root);\n+            }\n+            else\n+            {\n+                return viewPool.retrieveDynamicViewStructureMetadata(context, root, faceletState);\n+            }\n         }\n+        return null;\n     }\n     \n     public void pushResetableView(FacesContext context, UIViewRoot view, FaceletState faceletViewState)\n     {\n         ViewPool viewPool = getViewPool(context, view);\n-        boolean isDynamic = faceletViewState != null ? faceletViewState.isDynamic() : false;\n-        if (!isDynamic)\n-        {\n-            clearTransientAndNonFaceletComponentsForStaticView(context, view);\n-            viewPool.pushStaticStructureView(context, view);\n-        }\n-        else\n+        if (viewPool != null)\n         {\n-            ViewStructureMetadata viewStructureMetadata = viewPool.retrieveDynamicViewStructureMetadata(\n-                context, view, faceletViewState);\n-            if (viewStructureMetadata != null)\n+            boolean isDynamic = faceletViewState != null ? faceletViewState.isDynamic() : false;\n+            if (!isDynamic)\n             {\n-                clearTransientAndNonFaceletComponentsForDynamicView(context, view, viewStructureMetadata);\n-                viewPool.pushDynamicStructureView(context, view, faceletViewState);\n+                clearTransientAndNonFaceletComponentsForStaticView(context, view);\n+                viewPool.pushStaticStructureView(context, view);\n+            }\n+            else\n+            {\n+                ViewStructureMetadata viewStructureMetadata = viewPool.retrieveDynamicViewStructureMetadata(\n+                    context, view, faceletViewState);\n+                if (viewStructureMetadata != null)\n+                {\n+                    clearTransientAndNonFaceletComponentsForDynamicView(context, view, viewStructureMetadata);\n+                    viewPool.pushDynamicStructureView(context, view, faceletViewState);\n+                }\n             }\n         }\n     }\n@@ -447,7 +454,7 @@ public void pushPartialView(FacesContext context, UIViewRoot view, FaceletState\n     {\n         ViewPool viewPool = getViewPool(context, view);\n         \n-        if (viewPool.isWorthToRecycleThisView(context, view))\n+        if (viewPool != null && viewPool.isWorthToRecycleThisView(context, view))\n         {\n             ViewStructureMetadata viewStructureMetadata = null;\n             if (faceletViewState == null)",
                "deletions": 22
            },
            {
                "sha": "dd4d5bd0d01f69b0243d9a97197ea8936da4004e",
                "filename": "impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java",
                "status": "modified",
                "changes": 179,
                "additions": 179,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/view/facelets/pool/ViewPoolMyFacesRequestTestCase.java?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "patch": "@@ -369,6 +369,137 @@ public void testStaticPage1_4() throws Exception\n         endRequest();\n     }\n     \n+    @Test\n+    public void testStaticPage1_5() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/staticPage.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+\n+        // Use view scope\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue2\");\n+        \n+        submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue2\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        Assert.assertTrue(facesContext.getViewRoot().getChildCount() > 0);\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/staticPage.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        ViewEntry entry = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNotNull(entry);\n+        Assert.assertEquals(RestoreViewFromPoolResult.COMPLETE, entry.getResult());\n+        \n+        endRequest();\n+    }    \n+    \n+    @Test\n+    public void testStaticPage1_6() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/staticPage3.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+\n+        // Use view scope\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue2\");\n+        \n+        submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+\n+        processLifecycleExecute();\n+        \n+        executeBeforeRender(facesContext);\n+        executeBuildViewCycle(facesContext);\n+        \n+        //Check if the view scope value is preserved\n+        Assert.assertEquals(\"someValue2\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        Assert.assertEquals(\"viewValue\", facesContext.getViewRoot().getViewMap().get(\"viewKey\"));\n+        \n+        Assert.assertTrue(facesContext.getViewRoot().getChildCount() > 0);\n+        \n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/staticPage3.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        ViewEntry entry = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNotNull(entry);\n+        Assert.assertEquals(RestoreViewFromPoolResult.COMPLETE, entry.getResult());\n+        \n+        endRequest();\n+    }    \n+    \n     @Test\n     public void testStaticPage2() throws Exception\n     {\n@@ -1785,6 +1916,54 @@ public void testPartialPage1_1() throws Exception\n         \n     }\n     \n+    @Test\n+    public void testPartialPage1_2() throws Exception\n+    {\n+        Locale locale = null;\n+        startViewRequest(\"/partialPage1.xhtml\");\n+        processLifecycleExecute();\n+        locale = facesContext.getViewRoot().getLocale();\n+\n+        executeBuildViewCycle(facesContext);\n+        \n+        // Now let's try to remove some component programatically\n+        // that invalidates the view to be reused without a refresh,\n+        // so in the pool it should be marked as REFRESH_REQUIRED\n+        UIPanel panel = (UIPanel) facesContext.getViewRoot().findComponent(\"mainForm:panel1\");\n+        panel.getParent().getChildren().remove(panel);\n+\n+        facesContext.getViewRoot().getViewMap().put(\"someKey\", \"someValue\");\n+        \n+        UICommand submitButton = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:submit\");\n+\n+        executeViewHandlerRender(facesContext);\n+        executeAfterRender(facesContext);\n+        \n+        client.submit(submitButton);\n+        \n+        processLifecycleExecute();\n+        \n+        Assert.assertEquals(\"someValue\", facesContext.getViewRoot().getViewMap().get(\"someKey\"));\n+        \n+        FaceletState faceletState = (FaceletState) facesContext.getViewRoot().getAttributes().get(\n+            ComponentSupport.FACELET_STATE_INSTANCE);        \n+                \n+        UIViewRoot root = new UIViewRoot();\n+        root.setLocale(locale);\n+        root.setRenderKitId(\"HTML_BASIC\");\n+        root.setViewId(\"/partialPage1.xhtml\");\n+        \n+        ViewPoolProcessor processor = ViewPoolProcessor.getInstance(facesContext);\n+        ViewPool viewPool = processor.getViewPool(facesContext, root);\n+        // Check the view was used\n+        ViewEntry entry2 = viewPool.popStaticOrPartialStructureView(facesContext, root);\n+        Assert.assertNull(entry2);\n+        ViewEntry entry3 = viewPool.popDynamicStructureView(facesContext, root, faceletState);\n+        Assert.assertNull(entry3);\n+        \n+    }    \n+    \n+    \n     //Pending tests:\n     // - Partial\n }",
                "deletions": 0
            },
            {
                "sha": "4fd1a570a8a7915dff945e0034e1a93532cd0688",
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "blob_url": "https://github.com/apache/myfaces/blob/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "raw_url": "https://github.com/apache/myfaces/raw/78a99b95e902a2398f12d3d1aed59261e214357b/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml",
                "status": "added",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/pool/staticPage3.xhtml?ref=78a99b95e902a2398f12d3d1aed59261e214357b",
                "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"\n+      xmlns:h=\"http://java.sun.com/jsf/html\"\n+      xmlns:f=\"http://java.sun.com/jsf/core\"\n+      xmlns:c=\"http://java.sun.com/jsp/jstl/core\">\n+<head>\n+    <title>Test Static Page</title>\n+</head>\n+<body>\n+    <div id=\"container\">\n+        <h1>Test cache of static page</h1>\n+        <!-- <h:messages showDetail=\"true\" showSummary=\"false\"/>  -->\n+        <c:set var=\"viewKey\" value=\"viewValue\" scope=\"view\" />\n+        <h:form id=\"mainForm\">\n+            <h:panelGrid id=\"testGroup1\" columns=\"2\">\n+                <h:outputLabel for=\"name\" value=\"Please enter your name\"/>\n+                <h:inputText id=\"name\" required=\"true\"/>\n+                <h:commandButton id=\"submit\" value=\"Submit\"/>\n+            </h:panelGrid>\n+        </h:form>\n+    </div>\n+</body>\n+</html>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3935 h:inputTextarea with null value throws NullPointerException",
        "commit": "https://github.com/apache/myfaces/commit/db6a66d4010d9e9b7d4eb8515915afe73581e5e3",
        "parent": "https://github.com/apache/myfaces/commit/ba5b2fdf34201e579015d0160ddce969fc0152c8",
        "bug_id": "myfaces_27",
        "file": [
            {
                "sha": "3f1bb88782e48e588a21cbee9edd8d7fdfc914fe",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlTextareaRendererBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/db6a66d4010d9e9b7d4eb8515915afe73581e5e3/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlTextareaRendererBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/db6a66d4010d9e9b7d4eb8515915afe73581e5e3/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlTextareaRendererBase.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlTextareaRendererBase.java?ref=db6a66d4010d9e9b7d4eb8515915afe73581e5e3",
                "patch": "@@ -182,7 +182,10 @@ else if (addNewLineAtStart instanceof Boolean)\n         }\n         \n         String strValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringValue(facesContext, uiComponent);\n-        writer.writeText(strValue, org.apache.myfaces.shared.renderkit.JSFAttr.VALUE_ATTR);\n+        if (strValue != null)\n+        {\n+            writer.writeText(strValue, org.apache.myfaces.shared.renderkit.JSFAttr.VALUE_ATTR);\n+        }\n     }\n     \n     protected void renderTextAreaEnd(FacesContext facesContext,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3931 RelocatableResourceHandler tag + inner f:facet = NullPointerException",
        "commit": "https://github.com/apache/myfaces/commit/ba5b2fdf34201e579015d0160ddce969fc0152c8",
        "parent": "https://github.com/apache/myfaces/commit/84ab634c1c9fce93d22e080d9177c9f61eae56d1",
        "bug_id": "myfaces_28",
        "file": [
            {
                "sha": "d3a05c2ec50fd62e9069221842d23b10dd2b1ff6",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "status": "modified",
                "changes": 64,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "patch": "@@ -341,6 +341,70 @@ else if (id.equals(facet.getAttributes().get(MARK_CREATED)))\n \n         return null;\n     }\n+    \n+    public static UIComponent findChildInChildrenByTagId(UIComponent parent, String id)\n+    {\n+        if (parent.getChildCount() > 0)\n+        {\n+            for (int i = 0, childCount = parent.getChildCount(); i < childCount; i ++)\n+            {\n+                UIComponent child = parent.getChildren().get(i);\n+                if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                {\n+                    return child;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    public static String findChildInFacetsByTagId(UIComponent parent, String id)\n+    {\n+        Iterator<Map.Entry<String, UIComponent>> itr = null;\n+        if (parent.getFacetCount() > 0)\n+        {\n+            itr = parent.getFacets().entrySet().iterator();\n+            while (itr.hasNext())\n+            {\n+                Map.Entry<String, UIComponent> entry = itr.next();\n+                UIComponent facet = entry.getValue();\n+                // check if this is a dynamically generated UIPanel\n+                if (Boolean.TRUE.equals(facet.getAttributes()\n+                             .get(FACET_CREATED_UIPANEL_MARKER)))\n+                {\n+                    // only check the children and facets of the panel\n+                    if (facet.getChildCount() > 0)\n+                    {\n+                        for (int i = 0, childCount = facet.getChildCount(); i < childCount; i ++)\n+                        {\n+                            UIComponent child = facet.getChildren().get(i);\n+                            if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                            {\n+                                return entry.getKey();\n+                            }\n+                        }\n+                    }\n+                    if (facet.getFacetCount() > 0)\n+                    {\n+                        Iterator<UIComponent> itr2 = facet.getFacets().values().iterator();\n+                        while (itr2.hasNext())\n+                        {\n+                            UIComponent child = itr2.next();\n+                            if (id.equals(child.getAttributes().get(MARK_CREATED)))\n+                            {\n+                                return entry.getKey();\n+                            }\n+                        }\n+                    }\n+                }\n+                else if (id.equals(facet.getAttributes().get(MARK_CREATED)))\n+                {\n+                    return entry.getKey();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n \n     /**\n      * According to JSF 1.2 tag specs, this helper method will use the TagAttribute passed in determining the Locale",
                "deletions": 0
            },
            {
                "sha": "aecf2e3be881bd907c0d5340aecbcb297830fb34",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentTagHandlerDelegate.java?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "patch": "@@ -389,6 +389,18 @@ public void apply(FaceletContext ctx, UIComponent parent) throws IOException\n                     {\n                         // Replace parent with the relocated parent.\n                         parent = c.getParent();\n+                        // Since we changed the parent, the facetName becomes invalid, because it points\n+                        // to the component before relocation. We need to find the right facetName (if any) so we can\n+                        // refresh the component properly.\n+                        UIComponent c1 = ComponentSupport.findChildInChildrenByTagId(parent, id);\n+                        if (c1 == null)\n+                        {\n+                            facetName = ComponentSupport.findChildInFacetsByTagId(parent, id);\n+                        }\n+                        else\n+                        {\n+                            facetName = null;\n+                        }\n                     }\n                     ComponentSupport.setCachedFacesContext(c, facesContext);\n                 }",
                "deletions": 0
            },
            {
                "sha": "ff18a0b324f82f6275feae6a8c23136a4638e0e2",
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js",
                "status": "added",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/resources/js/b.js?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "patch": "@@ -0,0 +1,16 @@\n+/*\n+ * Copyright 2012 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+var x = \"X\";\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "75bebbc296891a85a3bc007deaa4f5bbafb75d63",
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "blob_url": "https://github.com/apache/myfaces/blob/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "raw_url": "https://github.com/apache/myfaces/raw/ba5b2fdf34201e579015d0160ddce969fc0152c8/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/impl/test_conditional_include_resources.xhtml?ref=ba5b2fdf34201e579015d0160ddce969fc0152c8",
                "patch": "@@ -19,6 +19,9 @@\n     xmlns:f=\"http://java.sun.com/jsf/core\"\n     xmlns:c=\"http://java.sun.com/jsp/jstl/core\">\n <h:head id=\"head\">\n+    <f:facet name=\"first\">\n+\t <h:outputScript name=\"b.js\" target=\"body\"/>\n+    </f:facet>\n </h:head>\n <h:body id=\"body\">\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3907 NullPointerException in ManagedBeanBuilder after server restart",
        "commit": "https://github.com/apache/myfaces/commit/187f7c74855125766907890c643a975070a94add",
        "parent": "https://github.com/apache/myfaces/commit/ddf21c2410c12a287c3dc4d3ef227dc23a94bb04",
        "bug_id": "myfaces_29",
        "file": [
            {
                "sha": "501f13a834c6b31461866096cb4e0a56757124bc",
                "filename": "impl/src/main/java/org/apache/myfaces/config/ManagedBeanBuilder.java",
                "blob_url": "https://github.com/apache/myfaces/blob/187f7c74855125766907890c643a975070a94add/impl/src/main/java/org/apache/myfaces/config/ManagedBeanBuilder.java",
                "raw_url": "https://github.com/apache/myfaces/raw/187f7c74855125766907890c643a975070a94add/impl/src/main/java/org/apache/myfaces/config/ManagedBeanBuilder.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/config/ManagedBeanBuilder.java?ref=187f7c74855125766907890c643a975070a94add",
                "patch": "@@ -557,7 +557,8 @@ private String getScope(FacesContext facesContext, String expression)\n         {\n             return APPLICATION;\n         }\n-        if (facesContext.getViewRoot().getViewMap().get(beanName) != null)\n+        if (facesContext.getViewRoot() != null && \n+            facesContext.getViewRoot().getViewMap().get(beanName) != null)\n         {\n             return VIEW;\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3304 NullPointerException using h:selectOneRadio with an enum",
        "commit": "https://github.com/apache/myfaces/commit/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
        "parent": "https://github.com/apache/myfaces/commit/0cdb547f7caaf462ce285bf32434ba2e3d606025",
        "bug_id": "myfaces_30",
        "file": [
            {
                "sha": "fab6cfe5711bc7db40bcc5241e29559862cb8de7",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "status": "modified",
                "changes": 95,
                "additions": 95,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java?ref=0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
                "patch": "@@ -339,6 +339,101 @@ public static String getStringValue(FacesContext facesContext,\n             throw ex;\n         }\n     }\n+    \n+    public static String getStringFromSubmittedValueOrLocalValueReturnNull(FacesContext facesContext,\n+            UIComponent component)\n+    {\n+        try\n+        {\n+            if (!(component instanceof ValueHolder))\n+            {\n+                throw new IllegalArgumentException(\"Component : \"\n+                        + getPathToComponent(component)\n+                        + \"is not a ValueHolder\");\n+            }\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+                Object submittedValue = ((EditableValueHolder) component)\n+                        .getSubmittedValue();\n+                if (submittedValue != null)\n+                {\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"returning 1 '\" + submittedValue + \"'\");\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            Object value;\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+\n+                EditableValueHolder holder = (EditableValueHolder) component;\n+\n+                if (holder.isLocalValueSet())\n+                {\n+                    value = holder.getLocalValue();\n+                }\n+                else\n+                {\n+                    value = getValue(component);\n+                }\n+            }\n+            else\n+            {\n+                value = getValue(component);\n+            }\n+\n+            Converter converter = ((ValueHolder) component).getConverter();\n+            if (converter == null && value != null)\n+            {\n+\n+                try\n+                {\n+                    converter = facesContext.getApplication().createConverter(\n+                            value.getClass());\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"the created converter is \" + converter);\n+                }\n+                catch (FacesException e)\n+                {\n+                    log.log(Level.SEVERE, \"No converter for class \"\n+                            + value.getClass().getName()\n+                            + \" found (component id=\" + component.getId()\n+                            + \").\", e);\n+                    // converter stays null\n+                }\n+            }\n+\n+            if (converter == null)\n+            {\n+                if (value == null)\n+                {\n+                    //if (log.isLoggable(Level.FINE))\n+                    //    log.fine(\"returning an empty string\");\n+                    return null;\n+                }\n+\n+                if (log.isLoggable(Level.FINE))\n+                    log.fine(\"returning an .toString\");\n+                return value.toString();\n+\n+            }\n+\n+            if (log.isLoggable(Level.FINE))\n+                log.fine(\"returning converter get as string \" + converter);\n+            return converter.getAsString(facesContext, component, value);\n+\n+        }\n+        catch (PropertyNotFoundException ex)\n+        {\n+            log.log(Level.SEVERE, \"Property not found - called by component : \"\n+                    + getPathToComponent(component), ex);\n+\n+            throw ex;\n+        }\n+    }\n \n     private static Object getValue(UIComponent component) {\n         Object value;",
                "deletions": 0
            },
            {
                "sha": "0a8a1c698e1362b394d4de64d57044fd36ecef3c",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0e8e23aeb9ffcdd9bc71a54bfa51684d73636162/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java?ref=0e8e23aeb9ffcdd9bc71a54bfa51684d73636162",
                "patch": "@@ -115,7 +115,7 @@ else if (layout.equals(LINE_DIRECTION))\n         List selectItemList = org.apache.myfaces.shared.renderkit.RendererUtils.getSelectItemList(selectOne, facesContext);\n         converter = HtmlRendererUtils.findUIOutputConverterFailSafe(facesContext, selectOne);\n         \n-        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringValue(facesContext, selectOne);\n+        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringFromSubmittedValueOrLocalValueReturnNull(facesContext, selectOne);\n \n         int itemNum = 0;\n \n@@ -218,7 +218,11 @@ protected int renderGroupOrItemRadio(FacesContext facesContext,\n         else \n         {\n             String itemStrValue = org.apache.myfaces.shared.renderkit.RendererUtils.getConvertedStringValue(facesContext, selectOne, converter, selectItem.getValue());\n-            boolean itemChecked = itemStrValue.equals(currentValue);\n+            boolean itemChecked = (itemStrValue == null) ? \n+                    itemStrValue == currentValue : \n+                    \"\".equals(itemStrValue) ? \n+                            (currentValue == null || itemStrValue.equals(currentValue)) : \n+                            itemStrValue.equals(currentValue);\n             \n             // IF the hideNoSelectionOption attribute of the component is true\n             // AND this selectItem is the \"no selection option\"\n@@ -312,6 +316,10 @@ else if (renderId) {\n         {\n             writer.writeAttribute(HTML.VALUE_ATTR, value, null);\n         }\n+        else\n+        {\n+            writer.writeAttribute(HTML.VALUE_ATTR, \"\", null);\n+        }\n         \n         Map<String, List<ClientBehavior>> behaviors = null;\n         if (uiComponent instanceof ClientBehaviorHolder && JavascriptUtils.isJavascriptAllowed(facesContext.getExternalContext()))",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3304 NullPointerException using h:selectOneRadio with an enum",
        "commit": "https://github.com/apache/myfaces/commit/42ee4d58634064ca987ebf20aa123ad1f5bd4366",
        "parent": "https://github.com/apache/myfaces/commit/363639be0d7a74d78f56df554f8394e21b98b6fd",
        "bug_id": "myfaces_31",
        "file": [
            {
                "sha": "fab6cfe5711bc7db40bcc5241e29559862cb8de7",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java",
                "status": "modified",
                "changes": 95,
                "additions": 95,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/RendererUtils.java?ref=42ee4d58634064ca987ebf20aa123ad1f5bd4366",
                "patch": "@@ -339,6 +339,101 @@ public static String getStringValue(FacesContext facesContext,\n             throw ex;\n         }\n     }\n+    \n+    public static String getStringFromSubmittedValueOrLocalValueReturnNull(FacesContext facesContext,\n+            UIComponent component)\n+    {\n+        try\n+        {\n+            if (!(component instanceof ValueHolder))\n+            {\n+                throw new IllegalArgumentException(\"Component : \"\n+                        + getPathToComponent(component)\n+                        + \"is not a ValueHolder\");\n+            }\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+                Object submittedValue = ((EditableValueHolder) component)\n+                        .getSubmittedValue();\n+                if (submittedValue != null)\n+                {\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"returning 1 '\" + submittedValue + \"'\");\n+                    return submittedValue.toString();\n+                }\n+            }\n+\n+            Object value;\n+\n+            if (component instanceof EditableValueHolder)\n+            {\n+\n+                EditableValueHolder holder = (EditableValueHolder) component;\n+\n+                if (holder.isLocalValueSet())\n+                {\n+                    value = holder.getLocalValue();\n+                }\n+                else\n+                {\n+                    value = getValue(component);\n+                }\n+            }\n+            else\n+            {\n+                value = getValue(component);\n+            }\n+\n+            Converter converter = ((ValueHolder) component).getConverter();\n+            if (converter == null && value != null)\n+            {\n+\n+                try\n+                {\n+                    converter = facesContext.getApplication().createConverter(\n+                            value.getClass());\n+                    if (log.isLoggable(Level.FINE))\n+                        log.fine(\"the created converter is \" + converter);\n+                }\n+                catch (FacesException e)\n+                {\n+                    log.log(Level.SEVERE, \"No converter for class \"\n+                            + value.getClass().getName()\n+                            + \" found (component id=\" + component.getId()\n+                            + \").\", e);\n+                    // converter stays null\n+                }\n+            }\n+\n+            if (converter == null)\n+            {\n+                if (value == null)\n+                {\n+                    //if (log.isLoggable(Level.FINE))\n+                    //    log.fine(\"returning an empty string\");\n+                    return null;\n+                }\n+\n+                if (log.isLoggable(Level.FINE))\n+                    log.fine(\"returning an .toString\");\n+                return value.toString();\n+\n+            }\n+\n+            if (log.isLoggable(Level.FINE))\n+                log.fine(\"returning converter get as string \" + converter);\n+            return converter.getAsString(facesContext, component, value);\n+\n+        }\n+        catch (PropertyNotFoundException ex)\n+        {\n+            log.log(Level.SEVERE, \"Property not found - called by component : \"\n+                    + getPathToComponent(component), ex);\n+\n+            throw ex;\n+        }\n+    }\n \n     private static Object getValue(UIComponent component) {\n         Object value;",
                "deletions": 0
            },
            {
                "sha": "0a8a1c698e1362b394d4de64d57044fd36ecef3c",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/42ee4d58634064ca987ebf20aa123ad1f5bd4366/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlRadioRendererBase.java?ref=42ee4d58634064ca987ebf20aa123ad1f5bd4366",
                "patch": "@@ -115,7 +115,7 @@ else if (layout.equals(LINE_DIRECTION))\n         List selectItemList = org.apache.myfaces.shared.renderkit.RendererUtils.getSelectItemList(selectOne, facesContext);\n         converter = HtmlRendererUtils.findUIOutputConverterFailSafe(facesContext, selectOne);\n         \n-        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringValue(facesContext, selectOne);\n+        Object currentValue = org.apache.myfaces.shared.renderkit.RendererUtils.getStringFromSubmittedValueOrLocalValueReturnNull(facesContext, selectOne);\n \n         int itemNum = 0;\n \n@@ -218,7 +218,11 @@ protected int renderGroupOrItemRadio(FacesContext facesContext,\n         else \n         {\n             String itemStrValue = org.apache.myfaces.shared.renderkit.RendererUtils.getConvertedStringValue(facesContext, selectOne, converter, selectItem.getValue());\n-            boolean itemChecked = itemStrValue.equals(currentValue);\n+            boolean itemChecked = (itemStrValue == null) ? \n+                    itemStrValue == currentValue : \n+                    \"\".equals(itemStrValue) ? \n+                            (currentValue == null || itemStrValue.equals(currentValue)) : \n+                            itemStrValue.equals(currentValue);\n             \n             // IF the hideNoSelectionOption attribute of the component is true\n             // AND this selectItem is the \"no selection option\"\n@@ -312,6 +316,10 @@ else if (renderId) {\n         {\n             writer.writeAttribute(HTML.VALUE_ATTR, value, null);\n         }\n+        else\n+        {\n+            writer.writeAttribute(HTML.VALUE_ATTR, \"\", null);\n+        }\n         \n         Map<String, List<ClientBehavior>> behaviors = null;\n         if (uiComponent instanceof ClientBehaviorHolder && JavascriptUtils.isJavascriptAllowed(facesContext.getExternalContext()))",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3101 NavigationHandlerImpl throws NullpointerException if view is expired",
        "commit": "https://github.com/apache/myfaces/commit/f29adb8712b864e05eb79d3ebb1c82f377821b35",
        "parent": "https://github.com/apache/myfaces/commit/6d2fe74948bdc9e5642e1e5027fd1f3ac5f1fd47",
        "bug_id": "myfaces_32",
        "file": [
            {
                "sha": "01f8e1850abc45726660c1fdf45889c331efa167",
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "status": "modified",
                "changes": 29,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=f29adb8712b864e05eb79d3ebb1c82f377821b35",
                "patch": "@@ -114,9 +114,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(toViewId))\n+                     !toViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -143,9 +144,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(newViewId))\n+                     !newViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -200,15 +202,20 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n      */\n     public NavigationCase getNavigationCase(FacesContext facesContext, String fromAction, String outcome)\n     {\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n+        \n         Map<String, Set<NavigationCase>> casesMap = getNavigationCases();\n         NavigationCase navigationCase = null;\n-\n-        Set<? extends NavigationCase> casesSet = casesMap.get(viewId);\n-        if (casesSet != null)\n+        \n+        Set<? extends NavigationCase> casesSet;\n+        if (viewId != null)\n         {\n-            // Exact match?\n-            navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            casesSet = casesMap.get(viewId);\n+            if (casesSet != null)\n+            {\n+                // Exact match?\n+                navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            }\n         }\n \n         if (navigationCase == null)\n@@ -273,7 +280,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         boolean isRedirect = false;\n         String queryString = null;\n         NavigationCase result = null;\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n         String viewIdToTest = outcome;\n         \n         // If viewIdToTest contains a query string, remove it and set queryString with that value.\n@@ -300,7 +307,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         \n         // If viewIdToTest does not have a \"file extension\", use the one from the current viewId.\n         index = viewIdToTest.indexOf (\".\");\n-        if (index == -1)\n+        if (index == -1 && viewId != null)\n         {\n             index = viewId.lastIndexOf(\".\");\n             \n@@ -313,7 +320,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         // If viewIdToTest does not start with \"/\", look for the last \"/\" in viewId.  If not found, simply prepend \"/\".\n         // Otherwise, prepend everything before and including the last \"/\" in viewId.\n         \n-        if (!viewIdToTest.startsWith (\"/\"))\n+        if (!viewIdToTest.startsWith (\"/\") && viewId != null)\n         {\n             index = viewId.lastIndexOf (\"/\");\n             ",
                "deletions": 11
            },
            {
                "sha": "acde9b650efc1333bb00464044ce66d58731226a",
                "filename": "impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/f29adb8712b864e05eb79d3ebb1c82f377821b35/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java?ref=f29adb8712b864e05eb79d3ebb1c82f377821b35",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.myfaces.application;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -565,4 +568,37 @@ public void testFacesRedirectAddsUrlParametersFacesIncludeViewParams()\n         Assert.assertTrue(\"redirect=true in the query String must \"\n                 + \"set redirect to true.\", navigationCase.isRedirect());\n     }\n+    \n+    /**\n+     * Test for MYFACES-3101\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetion() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        // test is based on:\n+        // http://www.nfjsone.com/blog/ed_burns/2009/09/dealing_gracefully_with_viewexpiredexception_in_jsf2\n+        underTest.handleNavigation(facesContext, null, \"viewExpired\");\n+\n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"viewExpired\", facesContext.getViewRoot().getViewId());\n+        \n+    }\n+    \n+    /**\n+     * Test for MYFACES-3101 - partial request (without redirect)\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetionForPartial() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        facesContext.getPartialViewContext().setPartialRequest(true);\n+        \n+        underTest.handleNavigation(facesContext, null, \"/viewExpired.xhtml\");\n+        \n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"/viewExpired.xhtml\", facesContext.getViewRoot().getViewId());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3101: NavigationHandlerImpl throws NullpointerException if view is expired",
        "commit": "https://github.com/apache/myfaces/commit/2408e99751892daa7935f2ce100e4e9dbc39765e",
        "parent": "https://github.com/apache/myfaces/commit/0d9f2b086ae51cc6a3d0820e491508e20d0efaac",
        "bug_id": "myfaces_33",
        "file": [
            {
                "sha": "01f8e1850abc45726660c1fdf45889c331efa167",
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "status": "modified",
                "changes": 29,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=2408e99751892daa7935f2ce100e4e9dbc39765e",
                "patch": "@@ -114,9 +114,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(toViewId))\n+                     !toViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -143,9 +144,10 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 // PartialViewContext.setRenderAll(true)...\". The effect is that ajax requests\n                 // are included on navigation.\n                 PartialViewContext partialViewContext = facesContext.getPartialViewContext();\n+                String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n                 if ( partialViewContext.isPartialRequest() && \n                      !partialViewContext.isRenderAll() && \n-                     !facesContext.getViewRoot().getViewId().equals(newViewId))\n+                     !newViewId.equals(viewId))\n                 {\n                     partialViewContext.setRenderAll(true);\n                 }\n@@ -200,15 +202,20 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n      */\n     public NavigationCase getNavigationCase(FacesContext facesContext, String fromAction, String outcome)\n     {\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n+        \n         Map<String, Set<NavigationCase>> casesMap = getNavigationCases();\n         NavigationCase navigationCase = null;\n-\n-        Set<? extends NavigationCase> casesSet = casesMap.get(viewId);\n-        if (casesSet != null)\n+        \n+        Set<? extends NavigationCase> casesSet;\n+        if (viewId != null)\n         {\n-            // Exact match?\n-            navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            casesSet = casesMap.get(viewId);\n+            if (casesSet != null)\n+            {\n+                // Exact match?\n+                navigationCase = calcMatchingNavigationCase(facesContext, casesSet, fromAction, outcome);\n+            }\n         }\n \n         if (navigationCase == null)\n@@ -273,7 +280,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         boolean isRedirect = false;\n         String queryString = null;\n         NavigationCase result = null;\n-        String viewId = facesContext.getViewRoot().getViewId();\n+        String viewId = facesContext.getViewRoot() != null ? facesContext.getViewRoot().getViewId() : null;\n         String viewIdToTest = outcome;\n         \n         // If viewIdToTest contains a query string, remove it and set queryString with that value.\n@@ -300,7 +307,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         \n         // If viewIdToTest does not have a \"file extension\", use the one from the current viewId.\n         index = viewIdToTest.indexOf (\".\");\n-        if (index == -1)\n+        if (index == -1 && viewId != null)\n         {\n             index = viewId.lastIndexOf(\".\");\n             \n@@ -313,7 +320,7 @@ private NavigationCase getOutcomeNavigationCase (FacesContext facesContext, Stri\n         // If viewIdToTest does not start with \"/\", look for the last \"/\" in viewId.  If not found, simply prepend \"/\".\n         // Otherwise, prepend everything before and including the last \"/\" in viewId.\n         \n-        if (!viewIdToTest.startsWith (\"/\"))\n+        if (!viewIdToTest.startsWith (\"/\") && viewId != null)\n         {\n             index = viewId.lastIndexOf (\"/\");\n             ",
                "deletions": 11
            },
            {
                "sha": "acde9b650efc1333bb00464044ce66d58731226a",
                "filename": "impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/2408e99751892daa7935f2ce100e4e9dbc39765e/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/application/NavigationHandlerImplTest.java?ref=2408e99751892daa7935f2ce100e4e9dbc39765e",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.myfaces.application;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -565,4 +568,37 @@ public void testFacesRedirectAddsUrlParametersFacesIncludeViewParams()\n         Assert.assertTrue(\"redirect=true in the query String must \"\n                 + \"set redirect to true.\", navigationCase.isRedirect());\n     }\n+    \n+    /**\n+     * Test for MYFACES-3101\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetion() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        // test is based on:\n+        // http://www.nfjsone.com/blog/ed_burns/2009/09/dealing_gracefully_with_viewexpiredexception_in_jsf2\n+        underTest.handleNavigation(facesContext, null, \"viewExpired\");\n+\n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"viewExpired\", facesContext.getViewRoot().getViewId());\n+        \n+    }\n+    \n+    /**\n+     * Test for MYFACES-3101 - partial request (without redirect)\n+     */\n+    @Test\n+    public void testHandleViewExpiredExpcetionForPartial() throws Exception {\n+        NavigationHandlerImpl underTest = new NavigationHandlerImpl();\n+        // simulate no available ViewRoot (in case of VEE)\n+        facesContext.setViewRoot(null);\n+        facesContext.getPartialViewContext().setPartialRequest(true);\n+        \n+        underTest.handleNavigation(facesContext, null, \"/viewExpired.xhtml\");\n+        \n+        assertNotNull(facesContext.getViewRoot());\n+        assertEquals(\"/viewExpired.xhtml\", facesContext.getViewRoot().getViewId());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "(MYFACES-1866) Avoid possible NullPointerException and NumberFormatException in JspStateManagerImpl.getServerStateId",
        "commit": "https://github.com/apache/myfaces/commit/1e6b703d3f3eb7f9ab12e5e02bb0fee3d1bd77a4",
        "parent": "https://github.com/apache/myfaces/commit/131c9351bf41bb7795a931c5b1b5b762e04bc64f",
        "bug_id": "myfaces_34",
        "file": [
            {
                "sha": "3b94a2452d3cd11f9cd977b3f52138e368531ac5",
                "filename": "impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/1e6b703d3f3eb7f9ab12e5e02bb0fee3d1bd77a4/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/1e6b703d3f3eb7f9ab12e5e02bb0fee3d1bd77a4/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java?ref=1e6b703d3f3eb7f9ab12e5e02bb0fee3d1bd77a4",
                "patch": "@@ -213,10 +213,18 @@ protected void restoreComponentState(FacesContext facesContext,\n         if (log.isTraceEnabled()) log.trace(\"Exiting restoreComponentState\");\n     }\n \n-\tprotected Integer getServerStateId(Object[] state)\n-\t{\n-\t\treturn Integer.valueOf((String) state[JSF_SEQUENCE_INDEX], Character.MAX_RADIX);\n-\t}\n+\t  protected Integer getServerStateId(Object[] state)\n+\t  {\n+        if (state != null)\n+        {\n+            Object serverStateId = state[JSF_SEQUENCE_INDEX];\n+            if (serverStateId != null)\n+            {\n+                return Integer.valueOf((String) serverStateId, Character.MAX_RADIX);\n+            }\n+        }\n+        return null;\n+    }\n \n \t/**\n      * See getTreeStructureToSave.",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3987 NPE in FlashImpl.isKeepMessages (fix NPE getting view map)",
        "commit": "https://github.com/apache/myfaces/commit/b99b1ddc6a4a339f0c0af1861ed850e2a3496548",
        "parent": "https://github.com/apache/myfaces/commit/c3721524ffc6d5bb2f9fc9711e81bd2ccf0f51df",
        "bug_id": "myfaces_35",
        "file": [
            {
                "sha": "6b2a70c87eb7b54e52886fa2e579ae26a6ba2f5c",
                "filename": "impl/src/main/java/org/apache/myfaces/view/ViewScopeProxyMap.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b99b1ddc6a4a339f0c0af1861ed850e2a3496548/impl/src/main/java/org/apache/myfaces/view/ViewScopeProxyMap.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b99b1ddc6a4a339f0c0af1861ed850e2a3496548/impl/src/main/java/org/apache/myfaces/view/ViewScopeProxyMap.java",
                "status": "modified",
                "changes": 50,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/ViewScopeProxyMap.java?ref=b99b1ddc6a4a339f0c0af1861ed850e2a3496548",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.myfaces.view;\n \n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n import javax.faces.component.StateHolder;\n@@ -66,19 +67,28 @@ public void forceCreateWrappedMap(FacesContext facesContext)\n         {\n             FacesContext facesContext = FacesContext.getCurrentInstance();\n             \n-            ViewScopeProviderFactory factory = ViewScopeProviderFactory.getViewScopeHandlerFactory(\n-                facesContext.getExternalContext());\n-            \n-            ViewScopeProvider handler = factory.getViewScopeHandler(facesContext.getExternalContext());\n-            \n-            if (_viewScopeId == null)\n+            if (facesContext != null)\n             {\n-                _viewScopeId = handler.generateViewScopeId(facesContext);\n-                _delegate = handler.createViewScopeMap(facesContext, _viewScopeId);\n+                ViewScopeProviderFactory factory = ViewScopeProviderFactory.getViewScopeHandlerFactory(\n+                    facesContext.getExternalContext());\n+\n+                ViewScopeProvider handler = factory.getViewScopeHandler(facesContext.getExternalContext());\n+\n+                if (_viewScopeId == null)\n+                {\n+                    _viewScopeId = handler.generateViewScopeId(facesContext);\n+                    _delegate = handler.createViewScopeMap(facesContext, _viewScopeId);\n+                }\n+                else\n+                {\n+                    _delegate = handler.restoreViewScopeMap(facesContext, _viewScopeId);\n+                }\n             }\n             else\n             {\n-                _delegate = handler.restoreViewScopeMap(facesContext, _viewScopeId);\n+                // In junit test cases, where there is no facesContext instance, it is enough to\n+                // just get a blank instance.\n+                _delegate = new ViewScope();\n             }\n         }\n         return _delegate;\n@@ -171,5 +181,27 @@ public boolean isTransient()\n     public void setTransient(boolean newTransientValue)\n     {\n     }\n+    \n+    private static class ViewScope extends HashMap<String, Object>\n+    {\n+        \n+        private static final long serialVersionUID = -1088293802269478164L;\n+        \n+        @Override\n+        public void clear()\n+        {\n+            /*\n+             * The returned Map must be implemented such that calling clear() on the Map causes\n+             * Application.publishEvent(java.lang.Class, java.lang.Object) to be called, passing\n+             * ViewMapDestroyedEvent.class as the first argument and this UIViewRoot instance as the second argument.\n+             */\n+            FacesContext facesContext = FacesContext.getCurrentInstance();\n+            facesContext.getApplication().publishEvent(facesContext, \n+                    PreDestroyViewMapEvent.class, facesContext.getViewRoot());\n+            \n+            super.clear();\n+        }\n+        \n+    }\n \n }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3893 NullPointerException in ErrorPageWriter._writeAttributes [Line 1304] (thanks to Fabio for provide this patch)",
        "commit": "https://github.com/apache/myfaces/commit/14a2ebd8058c5db5e6ef789da7843bf9040def42",
        "parent": "https://github.com/apache/myfaces/commit/de4d7e1fb10a112c8a75a6f573109c603042e00c",
        "bug_id": "myfaces_36",
        "file": [
            {
                "sha": "80fb859f71c4b6403e0480c252924320a30f9ca3",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/14a2ebd8058c5db5e6ef789da7843bf9040def42/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/14a2ebd8058c5db5e6ef789da7843bf9040def42/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "status": "modified",
                "changes": 77,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=14a2ebd8058c5db5e6ef789da7843bf9040def42",
                "patch": "@@ -1286,52 +1286,55 @@ private static void _writeAttributes(Writer writer, UIComponent c, boolean value\n                     && Arrays.binarySearch(IGNORE, pd[i].getName()) < 0)\n                 {\n                     m = pd[i].getReadMethod();\n-                    try\n+                    if (m != null)\n                     {\n-                        // first check if the property is a ValueExpression\n-                        valueExpression = c.getValueExpression(pd[i].getName());\n-                        if (valueExpressionValues && valueExpression != null)\n-                        {\n-                            String expressionString = valueExpression.getExpressionString();\n-                            if (null == expressionString)\n-                            {\n-                                expressionString = \"\";\n-                            }\n-                            _writeAttribute(writer, pd[i].getName(), expressionString);\n-                        }\n-                        else\n+                        try\n                         {\n-                            v = m.invoke(c, null);\n-                            if (v != null)\n+                            // first check if the property is a ValueExpression\n+                            valueExpression = c.getValueExpression(pd[i].getName());\n+                            if (valueExpressionValues && valueExpression != null)\n                             {\n-                                if (v instanceof Collection || v instanceof Map || v instanceof Iterator)\n-                                {\n-                                    continue;\n-                                }\n-                                if (v instanceof Expression)\n+                                String expressionString = valueExpression.getExpressionString();\n+                                if (null == expressionString)\n                                 {\n-                                    str = ((Expression)v).getExpressionString();\n+                                    expressionString = \"\";\n                                 }\n-                                else if (v instanceof ValueBinding)\n-                                {\n-                                    str = ((ValueBinding) v).getExpressionString();\n-                                }\n-                                else if (v instanceof MethodBinding)\n-                                {\n-                                    str = ((MethodBinding) v).getExpressionString();\n-                                }\n-                                else\n+                                _writeAttribute(writer, pd[i].getName(), expressionString);\n+                            }\n+                            else\n+                            {\n+                                v = m.invoke(c, null);\n+                                if (v != null)\n                                 {\n-                                    str = v.toString();\n-                                }\n+                                    if (v instanceof Collection || v instanceof Map || v instanceof Iterator)\n+                                    {\n+                                        continue;\n+                                    }\n+                                    if (v instanceof Expression)\n+                                    {\n+                                        str = ((Expression)v).getExpressionString();\n+                                    }\n+                                    else if (v instanceof ValueBinding)\n+                                    {\n+                                        str = ((ValueBinding) v).getExpressionString();\n+                                    }\n+                                    else if (v instanceof MethodBinding)\n+                                    {\n+                                        str = ((MethodBinding) v).getExpressionString();\n+                                    }\n+                                    else\n+                                    {\n+                                        str = v.toString();\n+                                    }\n \n-                                _writeAttribute(writer, pd[i].getName(), str);\n+                                    _writeAttribute(writer, pd[i].getName(), str);\n+                                }\n                             }\n                         }\n-                    }\n-                    catch (Exception e)\n-                    {\n-                        // do nothing\n+                        catch (Exception e)\n+                        {\n+                            // do nothing\n+                        }\n                     }\n                 }\n             }",
                "deletions": 37
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3526 NullPointerException on javax.faces.application.Resource.toString when using -Dsun.io.serialization.extendedDebugInfo=true",
        "commit": "https://github.com/apache/myfaces/commit/6858838c033a68ed5c9370277c07dea088794834",
        "parent": "https://github.com/apache/myfaces/commit/17f9087dd596f06d38196f48a8541490d4e1d971",
        "bug_id": "myfaces_37",
        "file": [
            {
                "sha": "08396f3e63b99d27e71433106df0fd22e84f90b6",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeResouceWrapper.java",
                "blob_url": "https://github.com/apache/myfaces/blob/6858838c033a68ed5c9370277c07dea088794834/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeResouceWrapper.java",
                "raw_url": "https://github.com/apache/myfaces/raw/6858838c033a68ed5c9370277c07dea088794834/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeResouceWrapper.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/CompositeResouceWrapper.java?ref=6858838c033a68ed5c9370277c07dea088794834",
                "patch": "@@ -116,4 +116,14 @@ public void writeExternal(ObjectOutput out) throws IOException\n         out.writeObject(getLibraryName());\n         out.writeObject(getContentType());\n     }\n+    \n+    @Override\n+    public String toString()\n+    {\n+        // Delegate resource in this case could not be available in serialization, or\n+        // serialization could happen in other context. So it is better to return\n+        // a simple String representing the object without go into delegation.\n+        return ( (getLibraryName() != null) ? getLibraryName() : \"\") + \":\"+ \n+               ( (getResourceName() != null) ? getResourceName() : \"\") ;\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3354 NullPointerException on jetty 6.1.5 with faces-redirect=true action result",
        "commit": "https://github.com/apache/myfaces/commit/f4721aabfcebacfd4a837a1c369024d4edb6ee1f",
        "parent": "https://github.com/apache/myfaces/commit/e40ecd11869a3940ab6e821c789e58378d402887",
        "bug_id": "myfaces_38",
        "file": [
            {
                "sha": "4b14f05f3648e44eecd0f03adf7177a7e395059b",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/f4721aabfcebacfd4a837a1c369024d4edb6ee1f/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/f4721aabfcebacfd4a837a1c369024d4edb6ee1f/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=f4721aabfcebacfd4a837a1c369024d4edb6ee1f",
                "patch": "@@ -631,7 +631,9 @@ private void _restoreRedirectValue(FacesContext facesContext)\n                 // to this request object\n                 cookie.setMaxAge(0);\n                 cookie.setPath(_getCookiePath(externalContext));\n-                cookie.setValue(null);\n+                //MYFACES-3354 jetty 6.1.5 does not allow this,\n+                //call setMaxAge(0) is enough\n+                //cookie.setValue(null);\n                 httpResponse.addCookie(cookie);\n             }\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3354 NullPointerException on jetty 6.1.5 with faces-redirect=true action result",
        "commit": "https://github.com/apache/myfaces/commit/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9",
        "parent": "https://github.com/apache/myfaces/commit/9a88db3d80cc5a50c7d693309411df1cb4cf02ad",
        "bug_id": "myfaces_39",
        "file": [
            {
                "sha": "5780925032ed3cde3e4f31047aa9b5e8a6cfbd30",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b7afdd7c6c1bd57a7780ea29b96afc88b5231de9/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=b7afdd7c6c1bd57a7780ea29b96afc88b5231de9",
                "patch": "@@ -630,7 +630,9 @@ private void _restoreRedirectValue(FacesContext facesContext)\n                 // to this request object\n                 cookie.setMaxAge(0);\n                 cookie.setPath(_getCookiePath(externalContext));\n-                cookie.setValue(null);\n+                //MYFACES-3354 jetty 6.1.5 does not allow this,\n+                //call setMaxAge(0) is enough\n+                //cookie.setValue(null);\n                 httpResponse.addCookie(cookie);\n             }\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2563 Trinidad 1.2.x generates on POSTBACK a NullPointerException on MyFAces2",
        "commit": "https://github.com/apache/myfaces/commit/1ebb89d2d87b38b164b6b52235e1068d6ec08253",
        "parent": "https://github.com/apache/myfaces/commit/e1b747bb02ab724b7a13e549e622249f5190abe6",
        "bug_id": "myfaces_40",
        "file": [
            {
                "sha": "809825871fba28ea4bb0f971f0f9f7344fd8ae63",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/1ebb89d2d87b38b164b6b52235e1068d6ec08253/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/1ebb89d2d87b38b164b6b52235e1068d6ec08253/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ViewHandlerImpl.java?ref=1ebb89d2d87b38b164b6b52235e1068d6ec08253",
                "patch": "@@ -282,7 +282,7 @@ public void writeState(FacesContext context) throws IOException\n         Map<String, List<String>> viewParameters;\n         UIViewRoot viewRoot = context.getViewRoot();\n         String currentViewId = viewRoot.getViewId();\n-        Collection<UIViewParameter> toViewParams;\n+        Collection<UIViewParameter> toViewParams = null;\n         Collection<UIViewParameter> currentViewParams = ViewMetadata.getViewParameters(viewRoot);\n \n         if (currentViewId.equals(viewId))\n@@ -294,11 +294,15 @@ public void writeState(FacesContext context) throws IOException\n             String calculatedViewId = getViewHandlerSupport().calculateViewId(context, viewId);            \n             ViewDeclarationLanguage vdl = getViewDeclarationLanguage(context,calculatedViewId);\n             ViewMetadata viewMetadata = vdl.getViewMetadata(context, viewId);\n-            UIViewRoot viewFromMetaData = viewMetadata.createMetadataView(context);\n-            toViewParams = ViewMetadata.getViewParameters(viewFromMetaData);\n+            // getViewMetadata() returns null on JSP\n+            if (viewMetadata != null)\n+            {\n+                UIViewRoot viewFromMetaData = viewMetadata.createMetadataView(context);\n+                toViewParams = ViewMetadata.getViewParameters(viewFromMetaData);\n+            }\n         }\n \n-        if (toViewParams.isEmpty())\n+        if (toViewParams == null || toViewParams.isEmpty())\n         {\n             return parametersFromArg;\n         }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2408 UIComponent.subscribeToEvent and unsubscribeToEvent should throw NullPointerException when eventClass or componentListener is null",
        "commit": "https://github.com/apache/myfaces/commit/6e742c8869ca3785ff879db5c9cf9d8ff135094c",
        "parent": "https://github.com/apache/myfaces/commit/93a9c3f457365d8d9143464a5a224197b03eb72a",
        "bug_id": "myfaces_41",
        "file": [
            {
                "sha": "27f78805023afb5d6bf2478b7587ef3a53f602f4",
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "blob_url": "https://github.com/apache/myfaces/blob/6e742c8869ca3785ff879db5c9cf9d8ff135094c/api/src/main/java/javax/faces/component/UIComponent.java",
                "raw_url": "https://github.com/apache/myfaces/raw/6e742c8869ca3785ff879db5c9cf9d8ff135094c/api/src/main/java/javax/faces/component/UIComponent.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=6e742c8869ca3785ff879db5c9cf9d8ff135094c",
                "patch": "@@ -653,6 +653,15 @@ public void processEvent(ComponentSystemEvent event) throws AbortProcessingExcep\n     public void subscribeToEvent(Class<? extends SystemEvent> eventClass, ComponentSystemEventListener componentListener) {\n         // The default implementation creates an inner SystemEventListener instance that wraps argument\n         // componentListener as the listener argument.\n+        if (eventClass == null)\n+        {\n+            throw new NullPointerException(\"eventClass required\");\n+        }\n+        if (componentListener == null)\n+        {\n+            throw new NullPointerException(\"componentListener required\");\n+        }\n+        \n         SystemEventListener listener = new EventListenerWrapper(this, componentListener);\n \n         // Make sure the map exists\n@@ -681,6 +690,15 @@ public void unsubscribeFromEvent(Class<? extends SystemEvent> eventClass,\n          * What is that supposed to mean? Are we supposed to keep an internal map of created listener wrappers? TODO:\n          * Check with the EG what's the meaning of this, equals should be commutative -= Simon Lessard =-\n          */\n+        if (eventClass == null)\n+        {\n+            throw new NullPointerException(\"eventClass required\");\n+        }\n+        if (componentListener == null)\n+        {\n+            throw new NullPointerException(\"componentListener required\");\n+        }\n+\n         SystemEventListener listener = new EventListenerWrapper(this, componentListener);\n \n         getFacesContext().getApplication().unsubscribeFromEvent(eventClass, listener);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "Avoid NullPointerException when getClientId(..) returns null.\nAlso rename variable to more helpful name.",
        "commit": "https://github.com/apache/myfaces/commit/f9c03118ca223560531c81a0e634c66506b0d23f",
        "parent": "https://github.com/apache/myfaces/commit/8f80c32523db8eadb058091fa666038a8b284efb",
        "bug_id": "myfaces_42",
        "file": [
            {
                "sha": "f6de17fc9045a6cb2b24e90d5fe4ffae62a7c73d",
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "blob_url": "https://github.com/apache/myfaces/blob/f9c03118ca223560531c81a0e634c66506b0d23f/api/src/main/java/javax/faces/component/UIComponent.java",
                "raw_url": "https://github.com/apache/myfaces/raw/f9c03118ca223560531c81a0e634c66506b0d23f/api/src/main/java/javax/faces/component/UIComponent.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=f9c03118ca223560531c81a0e634c66506b0d23f",
                "patch": "@@ -152,8 +152,8 @@ public boolean invokeOnComponent(javax.faces.context.FacesContext context, Strin\n     \t}\n     \t\n     \t//searching for this component?\n-    \tboolean returnValue = this.getClientId(context).equals(clientId); \n-    \tif(returnValue)\n+    \tboolean found = clientId.equals(this.getClientId(context)); \n+    \tif(found)\n     \t{\n     \t\ttry\n     \t\t{\n@@ -162,14 +162,14 @@ public boolean invokeOnComponent(javax.faces.context.FacesContext context, Strin\n     \t\t{\n     \t\t\tthrow new FacesException(e);\n     \t\t}\n-    \t\treturn returnValue;\n+    \t\treturn found;\n     \t}\n \t\t//Searching for this component's children/facets \n-    \tfor (Iterator<UIComponent> it = this.getFacetsAndChildren(); !returnValue && it.hasNext();){\n-    \t\treturnValue = it.next().invokeOnComponent(context, clientId, callback);\n+    \tfor (Iterator<UIComponent> it = this.getFacetsAndChildren(); !found && it.hasNext();){\n+    \t\tfound = it.next().invokeOnComponent(context, clientId, callback);\n     \t}\n     \t\t\n-    \treturn returnValue;\n+    \treturn found;\n     }\n \n     public abstract java.lang.String getClientId(javax.faces.context.FacesContext context);",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3987: avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90",
        "parent": "https://github.com/apache/myfaces/commit/b99b1ddc6a4a339f0c0af1861ed850e2a3496548",
        "bug_id": "myfaces_43",
        "file": [
            {
                "sha": "eb5e362815cad15a1aa19ddb161f3c82cbc5c499",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java",
                "status": "modified",
                "changes": 21,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/flash/FlashImpl.java?ref=ceb11e3bb9d9ea4c58a1f0aae56f60bab3e49a90",
                "patch": "@@ -34,6 +34,7 @@\n import java.security.SecureRandom;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -967,14 +968,22 @@ private String _getNextToken()\n         // if we create more SubKeyMaps with the same subkey, because they are\n         // totally equal and point to the same entries in the SessionMap.\n         \n-        Map<String, Object> requestMap = context.getExternalContext().getRequestMap();\n-        Map<String, Object> map = (Map<String, Object>) requestMap.get(FLASH_EXECUTE_MAP);\n+        Map<String, Object> requestMap = context != null && context.getExternalContext() != null ?\n+                context.getExternalContext().getRequestMap() : null;\n+        Map<String, Object> map = requestMap != null ? (Map<String, Object>) requestMap.get(FLASH_EXECUTE_MAP) : null;\n         if (map == null)\n         {\n-            String token = (String) requestMap.get(FLASH_EXECUTE_MAP_TOKEN);\n-            String fullToken = FLASH_SESSION_MAP_SUBKEY_PREFIX + SEPARATOR_CHAR + token + SEPARATOR_CHAR;\n-            map = _createSubKeyMap(context, fullToken);\n-            requestMap.put(FLASH_EXECUTE_MAP, map);\n+            if (requestMap != null)\n+            {\n+                String token = (String) requestMap.get(FLASH_EXECUTE_MAP_TOKEN);\n+                String fullToken = FLASH_SESSION_MAP_SUBKEY_PREFIX + SEPARATOR_CHAR + token + SEPARATOR_CHAR;\n+                map = _createSubKeyMap(context, fullToken);\n+                requestMap.put(FLASH_EXECUTE_MAP, map);\n+            }\n+            else\n+            {\n+                map = Collections.emptyMap();\n+            }\n         }\n         return map;\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3413: Default MyFaces Error handling throws NullPointerException during component tree when javax.el.Expression.getExpressionString() is null",
        "commit": "https://github.com/apache/myfaces/commit/e5fcef63db537a0de8c863c1699aecbf907c207f",
        "parent": "https://github.com/apache/myfaces/commit/56e3fc412302e429076c47766dbaeb413477065c",
        "bug_id": "myfaces_44",
        "file": [
            {
                "sha": "2185e0baad2352e77f174996cd87d6bf8ac18106",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "patch": "@@ -1259,7 +1259,12 @@ private static void _writeAttributes(Writer writer, UIComponent c, boolean value\n                         valueExpression = c.getValueExpression(pd[i].getName());\n                         if (valueExpressionValues && valueExpression != null)\n                         {\n-                            _writeAttribute(writer, pd[i].getName(), valueExpression.getExpressionString());\n+                            String expressionString = valueExpression.getExpressionString();\n+                            if (null == expressionString)\n+                            {\n+                                expressionString = \"\";\n+                            }\n+                            _writeAttribute(writer, pd[i].getName(), expressionString);\n                         }\n                         else\n                         {",
                "deletions": 1
            },
            {
                "sha": "385475a70fe9d6b806450fc6ab2c274d275dcf9d",
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java",
                "status": "added",
                "changes": 119,
                "additions": 119,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/ErrorPageWriterTest.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import java.io.StringWriter;\n+\n+import javax.el.ValueExpression;\n+import javax.faces.component.UIViewRoot;\n+import javax.faces.component.html.HtmlOutputText;\n+import javax.validation.constraints.AssertTrue;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.myfaces.renderkit.html.HtmlTextRenderer;\n+import org.apache.myfaces.shared.util.StateUtils;\n+import org.apache.myfaces.shared_impl.util.serial.DefaultSerialFactory;\n+import org.apache.myfaces.test.base.AbstractJsfTestCase;\n+import org.apache.myfaces.test.mock.MockRenderKitFactory;\n+import org.apache.myfaces.test.mock.MockResponseWriter;\n+\n+/**\n+ * @author Bruno Aranda (latest modification by $Author: struberg $)\n+ * @version $Revision: 1188235 $ $Date: 2011-10-24 13:09:33 -0400 (Mon, 24 Oct 2011) $\n+ */\n+public class ErrorPageWriterTest extends AbstractJsfTestCase\n+{\n+    public static Test suite()\n+    {\n+        return new TestSuite(ErrorPageWriterTest.class); // needed in maven\n+    }\n+\n+    private MockResponseWriter writer ;\n+    private HtmlOutputText outputText;\n+\n+    public ErrorPageWriterTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        outputText = new HtmlOutputText();\n+\n+        writer = new MockResponseWriter(new StringWriter(), null, null);\n+        facesContext.setResponseWriter(writer);\n+        // TODO remove these two lines once myfaces-test goes alpha, see MYFACES-1155\n+        facesContext.getViewRoot().setRenderKitId(MockRenderKitFactory.HTML_BASIC_RENDER_KIT);\n+        facesContext.getRenderKit().addRenderer(\n+                outputText.getFamily(),\n+                outputText.getRendererType(),\n+                new HtmlTextRenderer());\n+        servletContext.setAttribute(StateUtils.SERIAL_FACTORY, new DefaultSerialFactory());\n+\n+        facesContext.getAttributes().put(\"org.apache.myfaces.RENDERED_JSF_JS\", Boolean.TRUE);\n+    }\n+\n+    public void tearDown() throws Exception\n+    {\n+        super.tearDown();\n+        outputText = null;\n+        writer = null;\n+    }\n+\n+    public void testValueExpressionGetExpressionStringReturnsNull()\n+    {\n+        //See MYFACES-3413 for details\n+        UIViewRoot root = facesContext.getViewRoot();\n+//        UIForm form = new UIForm();\n+//        form.setId(\"formId\");\n+//        \n+//        form.getChildren().add(inputText);\n+        root.getChildren().add(outputText);\n+\n+        ValueExpression ve = new NullReturningGetExpressionStringValueExpression();\n+        \n+        outputText.setValueExpression(\"rendered\", ve);\n+        String id = \"testValueExpressionGetExpressionStringReturnsNullOutputComponent\";\n+        outputText.setId(id);\n+        try \n+        {\n+            StringWriter w = new StringWriter();\n+            Throwable t = new Throwable(\"Placeholder throwable\");\n+            ErrorPageWriter.debugHtml(w, facesContext, t);\n+            String output = w.toString();\n+            int indexOfOutputComponentId = output.indexOf(id);\n+            String surroundingText = \"output component not found.\";\n+            if (-1 != indexOfOutputComponentId) {\n+                surroundingText = output.substring(Math.max(0, indexOfOutputComponentId - 20), Math.min(output.length(), indexOfOutputComponentId + 280));\n+            }\n+            int indexOfHasRenderedAttribute = output.indexOf(\"rendered=\\\"\\\"\");\n+            boolean hasRenderedAttribute = (-1 != indexOfHasRenderedAttribute);\n+            assertTrue(\"rendered attribute wasn't written correctly: \" + surroundingText, hasRenderedAttribute);\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+}",
                "deletions": 0
            },
            {
                "sha": "a933e5bd7595ca1356b127740497e0a86ec2eb53",
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e5fcef63db537a0de8c863c1699aecbf907c207f/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java",
                "status": "added",
                "changes": 88,
                "additions": 88,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/NullReturningGetExpressionStringValueExpression.java?ref=e5fcef63db537a0de8c863c1699aecbf907c207f",
                "patch": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+import java.io.Serializable;\n+\n+import javax.el.ELContext;\n+import javax.el.ELException;\n+import javax.el.PropertyNotFoundException;\n+import javax.el.PropertyNotWritableException;\n+import javax.el.ValueExpression;\n+\n+public class NullReturningGetExpressionStringValueExpression extends ValueExpression implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        public String getExpressionString() {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isReadOnly(ELContext arg0) {\n+            return true;\n+        }\n+\n+        @Override\n+        public Class<?> getExpectedType() {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Class<?> getType(ELContext arg0)\n+                throws NullPointerException, PropertyNotFoundException,\n+                ELException {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public Object getValue(ELContext arg0) throws NullPointerException,\n+                PropertyNotFoundException, ELException {\n+            // TODO Auto-generated method stub\n+            return null;\n+        }\n+\n+        @Override\n+        public void setValue(ELContext arg0, Object arg1)\n+                throws NullPointerException, PropertyNotFoundException,\n+                PropertyNotWritableException, ELException {\n+            // TODO Auto-generated method stub\n+            \n+        }\n+\n+        @Override\n+        public boolean equals(Object arg0) {\n+            // TODO Auto-generated method stub\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            // TODO Auto-generated method stub\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean isLiteralText() {\n+            // TODO Auto-generated method stub\n+            return false;\n+        }\n+    }\n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3617 NullPointerException occurs when using an EL Expression in f:viewParam name attribute (thanks to Paul Nicolucci for help testing this patch)",
        "commit": "https://github.com/apache/myfaces/commit/871514cb70975893c0942717c17c14722146bdf5",
        "parent": "https://github.com/apache/myfaces/commit/0127defb2fa604aadbc29f7a8a8097dcb1a48a2e",
        "bug_id": "myfaces_45",
        "file": [
            {
                "sha": "399caf96656872117c26cc27577bf2c367873de9",
                "filename": "api/src/main/java/javax/faces/component/UIViewParameter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/871514cb70975893c0942717c17c14722146bdf5/api/src/main/java/javax/faces/component/UIViewParameter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/871514cb70975893c0942717c17c14722146bdf5/api/src/main/java/javax/faces/component/UIViewParameter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIViewParameter.java?ref=871514cb70975893c0942717c17c14722146bdf5",
                "patch": "@@ -103,7 +103,7 @@ public void encodeAll(FacesContext context) throws IOException\n \n     public String getName()\n     {\n-        return (String) getStateHelper().get(PropertyKeys.name);\n+        return (String) getStateHelper().eval(PropertyKeys.name);\n     }\n \n     public String getStringValue(FacesContext context)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixing potential NPE",
        "commit": "https://github.com/apache/myfaces/commit/59a143ff6126aadbd4eadbed134765876be3236b",
        "parent": "https://github.com/apache/myfaces/commit/cef8d18c19dde09e079e9e3fb49cf2357ecfa2f2",
        "bug_id": "myfaces_46",
        "file": [
            {
                "sha": "387d5633570c8cfca3730d6864af18fc82fcbb34",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/59a143ff6126aadbd4eadbed134765876be3236b/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/59a143ff6126aadbd4eadbed134765876be3236b/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=59a143ff6126aadbd4eadbed134765876be3236b",
                "patch": "@@ -503,7 +503,10 @@ private static void _writeVariables(Writer writer, FacesContext faces, UIViewRoo\n         ExternalContext ctx = faces.getExternalContext();\r\n         _writeVariables(writer, ctx.getRequestParameterMap(), \"Request Parameters\");\r\n         _writeVariables(writer, ctx.getRequestMap(), \"Request Attributes\");\r\n-        _writeVariables(writer, view.getViewMap(), \"View Attributes\");\r\n+        if (view != null)\r\n+        {\r\n+          _writeVariables(writer, view.getViewMap(), \"View Attributes\");\r\n+        }\r\n         if (ctx.getSession(false) != null)\r\n         {\r\n             _writeVariables(writer, ctx.getSessionMap(), \"Session Attributes\");\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "NPE if message null",
        "commit": "https://github.com/apache/myfaces/commit/5534ae3312d6470591f84416faf09732421c1a6d",
        "parent": "https://github.com/apache/myfaces/commit/1602c37c38febae105f1c5cd33e1990814556a6c",
        "bug_id": "myfaces_47",
        "file": [
            {
                "sha": "fd352e50c624ca916653d9d9b4eb4ae1cfc822f1",
                "filename": "api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/5534ae3312d6470591f84416faf09732421c1a6d/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/5534ae3312d6470591f84416faf09732421c1a6d/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java?ref=5534ae3312d6470591f84416faf09732421c1a6d",
                "patch": "@@ -86,6 +86,10 @@ private static void init() throws IOException {\n \r\n     private static ArrayList getErrorId(Exception e){\r\n         String message = e.getMessage();\r\n+\r\n+        if(message==null)\r\n+            return null;\r\n+\r\n         ArrayList list = new ArrayList();\r\n         Pattern pattern = Pattern.compile(\".*?\\\\Q,Id:\\\\E\\\\s*(\\\\S+)\\\\s*\\\\].*?\");\r\n         Matcher matcher = pattern.matcher(message);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "hack to avoid NPE",
        "commit": "https://github.com/apache/myfaces/commit/c12017d8ddbe6bc039a5ad449d76487ec3aab11d",
        "parent": "https://github.com/apache/myfaces/commit/e2578f5b3bfba78a78d8b650c4cf02d2bcb4320d",
        "bug_id": "myfaces_48",
        "file": [
            {
                "sha": "d3ced02b5863841fba0e60ab197fc62e44cf9769",
                "filename": "impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/c12017d8ddbe6bc039a5ad449d76487ec3aab11d/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/c12017d8ddbe6bc039a5ad449d76487ec3aab11d/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/jsp/JspStateManagerImpl.java?ref=c12017d8ddbe6bc039a5ad449d76487ec3aab11d",
                "patch": "@@ -708,6 +708,8 @@ public synchronized void add(FacesContext context, Object state)\n         {\n             Object key = new SerializedViewKey(context);\n             _serializedViews.put(key, state);\n+            \n+            while (_keys.remove(key));\n             _keys.add(key);\n \n             int views = getNumberOfViewsInSession(context);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2371 NullPointerException on UIComponentClassicTagBase.getViewComponentIds() fixed on branch 2.0.x but not on branch 1.2.x (Thanks to Asuka Langley for note this issue)",
        "commit": "https://github.com/apache/myfaces/commit/84b7cf6f307939125f37ee3a176405cb6b386e63",
        "parent": "https://github.com/apache/myfaces/commit/432890b21829983dbcb6ebda24ed619a784319c0",
        "bug_id": "myfaces_49",
        "file": [
            {
                "sha": "acd90a8520ce501325b899a87bab9aa54b2464c8",
                "filename": "api/src/main/java/javax/faces/webapp/UIComponentClassicTagBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/84b7cf6f307939125f37ee3a176405cb6b386e63/api/src/main/java/javax/faces/webapp/UIComponentClassicTagBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/84b7cf6f307939125f37ee3a176405cb6b386e63/api/src/main/java/javax/faces/webapp/UIComponentClassicTagBase.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/webapp/UIComponentClassicTagBase.java?ref=84b7cf6f307939125f37ee3a176405cb6b386e63",
                "patch": "@@ -778,20 +778,29 @@ private boolean isFacet()\n     }\n \n     /** Map of <ID,Tag> in the view */\n-    private Map<String,Object> getViewComponentIds()\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<String, Object> getViewComponentIds()\n     {\n         Map<String, Object> requestMap = _facesContext.getExternalContext().getRequestMap();\n         Map<String, Object> viewComponentIds;\n \n         if (_parent == null)\n         {\n             // top level _componentInstance\n-            viewComponentIds = new HashMap<String,Object>();\n+            viewComponentIds = new HashMap<String, Object>();\n             requestMap.put(VIEW_IDS, viewComponentIds);\n         }\n         else\n         {\n-            viewComponentIds = (Map<String, Object>) requestMap.get(VIEW_IDS);\n+            viewComponentIds = (Map<String, Object>)requestMap.get(VIEW_IDS);\n+            \n+            // Check if null, this can happen if someone programatically tries to do an include of a \n+            // JSP fragment. This code will prevent NullPointerException from happening in such cases.\n+            if (viewComponentIds == null)\n+            {\n+                viewComponentIds = new HashMap<String, Object>();\n+                requestMap.put(VIEW_IDS, viewComponentIds);\n+            }\n         }\n \n         return viewComponentIds;",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "The javadocs for Collections state:\n\nThe methods of this class all throw a NullPointerException if the collections provided to them are null.",
        "commit": "https://github.com/apache/myfaces/commit/099025886aec3ef85895b2c5680a502c067bf9bb",
        "parent": "https://github.com/apache/myfaces/commit/5e50ea81057d6258b5a86a09a4a3fd8f17aaf5d3",
        "bug_id": "myfaces_50",
        "file": [
            {
                "sha": "cf11d08f422d91fcdb51337d5cab02a7b7debbca",
                "filename": "impl/src/main/java/org/apache/myfaces/config/RuntimeConfig.java",
                "blob_url": "https://github.com/apache/myfaces/blob/099025886aec3ef85895b2c5680a502c067bf9bb/impl/src/main/java/org/apache/myfaces/config/RuntimeConfig.java",
                "raw_url": "https://github.com/apache/myfaces/raw/099025886aec3ef85895b2c5680a502c067bf9bb/impl/src/main/java/org/apache/myfaces/config/RuntimeConfig.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/config/RuntimeConfig.java?ref=099025886aec3ef85895b2c5680a502c067bf9bb",
                "patch": "@@ -58,7 +58,8 @@ public static RuntimeConfig getCurrentInstance(ExternalContext externalContext)\n      */\n     public Collection getNavigationRules()\n     {\n-        return Collections.unmodifiableCollection(_navigationRules);\n+        return _navigationRules == null ?\n+                null : Collections.unmodifiableCollection(_navigationRules);\n     }\n \n     public void addNavigationRule(NavigationRule navigationRule)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "Add ViewNotFoundException (MYFACES-3188 NPE in org.apache.myfaces.lifecycle.RenderResponseExecutor.execute and MYFACES-3189 NavigationHandler: navigation to nonexistent view after ViewExpired throws NPE)",
        "commit": "https://github.com/apache/myfaces/commit/930a697cb00581702b772079725fa36a5419d45f",
        "parent": "https://github.com/apache/myfaces/commit/02945c409d86decc727afec7162de3e27ea3d0ab",
        "bug_id": "myfaces_51",
        "file": [
            {
                "sha": "a82190efad5d03ca24214e4513e5151f0307fc0f",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processDecodes(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "a1804333696ab2216e1bb5fe1c9f96b3a766231c",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processApplication(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "2cc0f7d306abfe6a897088b737316b79d0e92f23",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processValidators(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "4b215d0fee888e5aa54e98f948fa2f1fbfc35427",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -51,6 +51,11 @@ public boolean execute(FacesContext facesContext)\n         String viewId;\n         String newViewId;\n         \n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n+        \n         try\n         {\n             // do-while, because the view might change in PreRenderViewEvent-listeners",
                "deletions": 0
            },
            {
                "sha": "b81b4581496a90d6c880eb973d9ffad93008e57a",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processUpdates(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "3230492ad0474a5223c97c5add4810d5c345b7bf",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "blob_url": "https://github.com/apache/myfaces/blob/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "raw_url": "https://github.com/apache/myfaces/raw/930a697cb00581702b772079725fa36a5419d45f/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java?ref=930a697cb00581702b772079725fa36a5419d45f",
                "patch": "@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.myfaces.lifecycle;\r\n+\r\n+import javax.faces.FacesException;\r\n+\r\n+/**\r\n+ * This exception is thrown when a view is not present before start\r\n+ * one of the following phases: APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS,\r\n+ * INVOKE_APPLICATION, UPDATE_MODEL_VALUES, RENDER_RESPONSE.\r\n+\r\n+ * \r\n+ * @author Leonardo Uribe\r\n+ * @since 2.0.8\r\n+ *\r\n+ */\r\n+public class ViewNotFoundException extends FacesException\r\n+{\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    private static final long serialVersionUID = -537576038024094272L;\r\n+\r\n+    public ViewNotFoundException()\r\n+    {\r\n+        super();\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message, Throwable cause)\r\n+    {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message)\r\n+    {\r\n+        super(message);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(Throwable cause)\r\n+    {\r\n+        super(cause);\r\n+    }\r\n+\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "Add ViewNotFoundException (MYFACES-3188 NPE in org.apache.myfaces.lifecycle.RenderResponseExecutor.execute and MYFACES-3189 NavigationHandler: navigation to nonexistent view after ViewExpired throws NPE)",
        "commit": "https://github.com/apache/myfaces/commit/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
        "parent": "https://github.com/apache/myfaces/commit/0f91f72eeffd2caf16902b7599c77199a40eda5f",
        "bug_id": "myfaces_52",
        "file": [
            {
                "sha": "a82190efad5d03ca24214e4513e5151f0307fc0f",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ApplyRequestValuesExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processDecodes(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "a1804333696ab2216e1bb5fe1c9f96b3a766231c",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/InvokeApplicationExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processApplication(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "2cc0f7d306abfe6a897088b737316b79d0e92f23",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ProcessValidationsExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processValidators(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "4b215d0fee888e5aa54e98f948fa2f1fbfc35427",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/RenderResponseExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -51,6 +51,11 @@ public boolean execute(FacesContext facesContext)\n         String viewId;\n         String newViewId;\n         \n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n+        \n         try\n         {\n             // do-while, because the view might change in PreRenderViewEvent-listeners",
                "deletions": 0
            },
            {
                "sha": "b81b4581496a90d6c880eb973d9ffad93008e57a",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/UpdateModelValuesExecutor.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -31,6 +31,10 @@\n {\n     public boolean execute(FacesContext facesContext)\n     {\n+        if (facesContext.getViewRoot() == null)\n+        {\n+            throw new ViewNotFoundException(\"A view is required to execute \"+facesContext.getCurrentPhaseId());\n+        }\n         facesContext.getViewRoot().processUpdates(facesContext);\n         return false;\n     }",
                "deletions": 0
            },
            {
                "sha": "3230492ad0474a5223c97c5add4810d5c345b7bf",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/ViewNotFoundException.java?ref=a5a18f05d087fdfe6a7eaa6ba2482da70a9d881a",
                "patch": "@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.myfaces.lifecycle;\r\n+\r\n+import javax.faces.FacesException;\r\n+\r\n+/**\r\n+ * This exception is thrown when a view is not present before start\r\n+ * one of the following phases: APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS,\r\n+ * INVOKE_APPLICATION, UPDATE_MODEL_VALUES, RENDER_RESPONSE.\r\n+\r\n+ * \r\n+ * @author Leonardo Uribe\r\n+ * @since 2.0.8\r\n+ *\r\n+ */\r\n+public class ViewNotFoundException extends FacesException\r\n+{\r\n+    \r\n+    /**\r\n+     * \r\n+     */\r\n+    private static final long serialVersionUID = -537576038024094272L;\r\n+\r\n+    public ViewNotFoundException()\r\n+    {\r\n+        super();\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message, Throwable cause)\r\n+    {\r\n+        super(message, cause);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(String message)\r\n+    {\r\n+        super(message);\r\n+    }\r\n+\r\n+    public ViewNotFoundException(Throwable cause)\r\n+    {\r\n+        super(cause);\r\n+    }\r\n+\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed NPE in test case + added TODO",
        "commit": "https://github.com/apache/myfaces/commit/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a",
        "parent": "https://github.com/apache/myfaces/commit/aa04e62f6ae05986bc742ccb3732900bcfdb63b1",
        "bug_id": "myfaces_53",
        "file": [
            {
                "sha": "792a9624a6b2d7ad3662c036f287e9da27794078",
                "filename": "impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/4f99c822d7b1c0cd6ce20f10869fd782e1439a4a/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/webapp/Jsp21FacesInitializerTest.java?ref=4f99c822d7b1c0cd6ce20f10869fd782e1439a4a",
                "patch": "@@ -18,35 +18,47 @@\n  */\n package org.apache.myfaces.webapp;\n \n-import junit.framework.TestCase;\n+import static org.easymock.EasyMock.anyObject;\n+import static org.easymock.EasyMock.eq;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.isA;\n+\n+import javax.el.ExpressionFactory;\n+import javax.faces.webapp.FacesServlet;\n+import javax.servlet.ServletContext;\n+import javax.servlet.jsp.JspApplicationContext;\n+import javax.servlet.jsp.JspFactory;\n+\n import org.apache.myfaces.config.RuntimeConfig;\n import org.apache.myfaces.el.DefaultPropertyResolver;\n import org.apache.myfaces.el.VariableResolverImpl;\n import org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver;\n-import static org.easymock.EasyMock.*;\n+import org.apache.myfaces.test.base.AbstractJsfTestCase;\n import org.easymock.IAnswer;\n import org.easymock.classextension.EasyMock;\n import org.easymock.classextension.IMocksControl;\n \n-import javax.el.ExpressionFactory;\n-import javax.faces.webapp.FacesServlet;\n-import javax.servlet.ServletContext;\n-import javax.servlet.jsp.JspApplicationContext;\n-import javax.servlet.jsp.JspFactory;\n-\n /**\n  * @author Mathias Broekelmann (latest modification by $Author: baranda $)\n  * @version $Revision: 532019 $ $Date: 2007-04-24 19:34:36 +0200 (Di, 24 Apr 2007) $\n  */\n-public class Jsp21FacesInitializerTest extends TestCase\n+public class Jsp21FacesInitializerTest extends AbstractJsfTestCase\n {\n \n+    public Jsp21FacesInitializerTest(String name)\n+    {\n+        super(name);\n+    }\n+\n     /**\n      * Test method for {@link org.apache.myfaces.webapp.DefaultFacesInitializer#initFaces(javax.servlet.ServletContext)}.\n      * @throws Exception \n      */\n     public void testInitFaces() throws Exception\n     {\n+        // TODO adapt this test case for MyFaces 2.0, because currently it checks nothing!\n+        \n         Jsp21FacesInitializer initializer = new Jsp21FacesInitializer();\n         IMocksControl control = EasyMock.createControl();\n         ",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fix NPE if locale is null",
        "commit": "https://github.com/apache/myfaces/commit/c283a33b9f08a797c692ec70237f6cd3e5b3437a",
        "parent": "https://github.com/apache/myfaces/commit/e0b164d052980a5a874dbc7c071563e1b5c4e71b",
        "bug_id": "myfaces_54",
        "file": [
            {
                "sha": "270f7203fb8c5cdf093e5a0b457a9ee442374340",
                "filename": "api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/_MessageUtils.java?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "patch": "@@ -144,6 +144,11 @@ private static ResourceBundle getBundle(FacesContext facesContext,\n                                             Locale locale,\n                                             String bundleName)\n     {\n+        if(locale == null)\n+        {\n+            locale = Locale.getDefault();\n+        }\n+        \n         try\n         {\n             //First we try the JSF implementation class loader",
                "deletions": 0
            },
            {
                "sha": "5fc4a485c36ad7ce6dc931dc5ecf16ef9a986442",
                "filename": "api/src/test/java/javax/faces/Messages.properties",
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/Messages.properties",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/Messages.properties",
                "status": "added",
                "changes": 125,
                "additions": 125,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/Messages.properties?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "patch": "@@ -0,0 +1,125 @@\n+# Copyright 2004 The Apache Software Foundation.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# standard messages (Spec. 2.5.2.4)\n+\n+# components\n+javax.faces.component.UIInput.CONVERSION = {0}: Conversion error occurred.\n+javax.faces.component.UIInput.REQUIRED = {0}: Validation Error: Value is required.\n+javax.faces.component.UIInput.UPDATE = {0}: An error occurred when processing your submitted information. \n+\n+javax.faces.component.UISelectOne.INVALID = {0}: Validation Error: Value is not valid\n+javax.faces.component.UISelectMany.INVALID = {0}: Validation Error: Value is not valid\n+\n+# converters\n+javax.faces.converter.BigDecimalConverter.DECIMAL = {2}: ''{0}'' must be a signed decimal number.\n+javax.faces.converter.BigDecimalConverter.DECIMAL_detail = {2}: ''{0}'' must be a signed decimal number consisting of zero or more digits, that may be followed by a decimal point and fraction.  Example: {1}\n+ \n+javax.faces.converter.BigIntegerConverter.BIGINTEGER = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail = {2}: ''{0}'' must be a number consisting of one or more digits. Example: {1}\n+ \n+javax.faces.converter.BooleanConverter.BOOLEAN = {1}: ''{0}'' must be 'true' or 'false'.\n+javax.faces.converter.BooleanConverter.BOOLEAN_detail = {1}: ''{0}'' must be 'true' or 'false'.  Any value other than 'true' will evaluate to 'false'.\n+\n+javax.faces.converter.ByteConverter.BYTE = {2}: ''{0}'' must be a number between 0 and 255.\n+javax.faces.converter.ByteConverter.BYTE_detail = {2}: ''{0}'' must be a number between 0 and 255.  Example: {1}\n+ \n+javax.faces.converter.CharacterConverter.CHARACTER = {1}: ''{0}'' must be a valid character.\n+javax.faces.converter.CharacterConverter.CHARACTER_detail = {1}: ''{0}'' must be a valid ASCII character.\n+\n+javax.faces.converter.DateTimeConverter.DATE = {2}: ''{0}'' could not be understood as a date.\n+javax.faces.converter.DateTimeConverter.DATE_detail = {2}: ''{0}'' could not be understood as a date. Example: {1} \n+javax.faces.converter.DateTimeConverter.TIME = {2}: ''{0}'' could not be understood as a time.\n+javax.faces.converter.DateTimeConverter.TIME_detail = {2}: ''{0}'' could not be understood as a time. Example: {1} \n+javax.faces.converter.DateTimeConverter.DATETIME = {2}: ''{0}'' could not be understood as a date and time.\n+javax.faces.converter.DateTimeConverter.DATETIME_detail = {2}: ''{0}'' could not be understood as a date and time. Example: {1} \n+javax.faces.converter.DateTimeConverter.PATTERN_TYPE = {1}: A 'pattern' or 'type' attribute must be specified to convert the value ''{0}''.\n+\n+javax.faces.converter.DoubleConverter.DOUBLE = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.DoubleConverter.DOUBLE_detail = {2}: ''{0}'' must be a number between 4.9E-324 and 1.7976931348623157E308  Example: {1}\n+\n+javax.faces.converter.EnumConverter.ENUM = {2}: ''{0}'' must be convertible to an enum.\n+javax.faces.converter.EnumConverter.ENUM_detail = {2}: ''{0}'' must be convertible to an enum from the enum that contains the constant ''{1}''.\n+javax.faces.converter.EnumConverter.ENUM_NO_CLASS = {1}: ''{0}'' must be convertible to an enum from the enum, but no enum class provided.\n+javax.faces.converter.EnumConverter.ENUM_NO_CLASS_detail = {1}: ''{0}'' must be convertible to an enum from the enum, but no enum class provided.\n+\n+javax.faces.converter.FloatConverter.FLOAT = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.FloatConverter.FLOAT_detail = {2}: ''{0}'' must be a number between 1.4E-45 and 3.4028235E38  Example: {1}\n+\n+javax.faces.converter.IntegerConverter.INTEGER = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.IntegerConverter.INTEGER_detail = {2}: ''{0}'' must be a number between -2147483648 and 2147483647 Example: {1}\n+\n+javax.faces.converter.LongConverter.LONG = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.LongConverter.LONG_detail = {2}: ''{0}'' must be a number between -9223372036854775808 to 9223372036854775807 Example: {1}\n+\n+javax.faces.converter.NumberConverter.CURRENCY = {2}: ''{0}'' could not be understood as a currency value.\n+javax.faces.converter.NumberConverter.CURRENCY_detail = {2}: ''{0}'' could not be understood as a currency value. Example: {1}\n+javax.faces.converter.NumberConverter.PERCENT = {2}: ''{0}'' could not be understood as a percentage.\n+javax.faces.converter.NumberConverter.PERCENT_detail = {2}: ''{0}'' could not be understood as a percentage. Example: {1}\n+javax.faces.converter.NumberConverter.NUMBER = {2}: ''{0}'' is not a number.\n+javax.faces.converter.NumberConverter.NUMBER_detail = {2}: ''{0}'' is not a number. Example: {1}\n+javax.faces.converter.NumberConverter.PATTERN = {2}: ''{0}'' is not a number pattern.\n+javax.faces.converter.NumberConverter.PATTERN_detail = {2}: ''{0}'' is not a number pattern. Example: {1}\n+\n+javax.faces.converter.ShortConverter.SHORT = {2}: ''{0}'' must be a number consisting of one or more digits.\n+javax.faces.converter.ShortConverter.SHORT_detail = {2}: ''{0}'' must be a number between -32768 and 32767 Example: {1}\n+\n+javax.faces.converter.STRING = {1}: Could not convert ''{0}'' to a string.\n+\n+# validators\n+javax.faces.validator.NOT_IN_RANGE = Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+\n+javax.faces.validator.DoubleRangeValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of \"{0}\"\n+javax.faces.validator.DoubleRangeValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE = {2}: Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+javax.faces.validator.DoubleRangeValidator.TYPE = {0}: Validation Error: Value is not of the correct type\n+\n+javax.faces.validator.LengthValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of ''{0}''\n+javax.faces.validator.LengthValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+\n+javax.faces.validator.LongRangeValidator.MAXIMUM = {1}: Validation Error: Value is greater than allowable maximum of ''{0}''\n+javax.faces.validator.LongRangeValidator.MINIMUM = {1}: Validation Error: Value is less than allowable minimum of ''{0}''\n+javax.faces.validator.LongRangeValidator.NOT_IN_RANGE = {2}: Validation Error: Specified attribute is not between the expected values of {0} and {1}.\n+javax.faces.validator.LongRangeValidator.TYPE = {0}: Validation Error: Value is not of the correct type.\n+\n+# myfaces specific messages\n+org.apache.myfaces.renderkit.html.HtmlMessagesRenderer.IN_FIELD = \\u0020in {0}\n+org.apache.myfaces.Email.INVALID = Validation Error\n+org.apache.myfaces.Email.INVALID_detail =The given value ({0}) is not a correct email-address.\n+\n+org.apache.myfaces.Equal.INVALID = Validation Error\n+org.apache.myfaces.Equal.INVALID_detail =The given value ({0}) is not equal with value of \"{1}\".\n+\n+org.apache.myfaces.Creditcard.INVALID = Validation Error\n+org.apache.myfaces.Creditcard.INVALID_detail =The given value ({0}) is not a correct creditcard\n+\n+org.apache.myfaces.Regexpr.INVALID=Validation Error\n+org.apache.myfaces.Regexpr.INVALID_detail=The given value ({0}) is not valid.\n+\n+org.apache.myfaces.Date.INVALID = Validation Error\n+org.apache.myfaces.Date.INVALID_detail =The given value ({0}) is not a correct date\n+\n+org.apache.myfaces.ticker.NOCONNECTION = No Connection: \n+org.apache.myfaces.ticker.NOCONNECTION_detail = Maybe you are behind a firewall?\n+\n+org.apache.myfaces.ISBN.INVALID = Validation Error\n+org.apache.myfaces.ISBN.INVALID_detail =The given value ({0}) is not a correct isbn code.\n+\n+org.apache.myfaces.tree2.MISSING_NODE        = Missing Node\n+org.apache.myfaces.tree2.MISSING_NODE_detail = The requested node \"{0}\" does not exist.\n+\n+org.apache.myfaces.calendar.CONVERSION = Conversion Error\n+org.apache.myfaces.calendar.CONVERSION_detail = \"{0}\": The given value \"{1}\" could not be converted to a date.\n+\n+org.apache.myfaces.FileUpload.SIZE_LIMIT = \"{0}\": The uploaded file exceeded the maximum size of {1} bytes.\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "1527a4e3c20d56fae5690de0c58968ac0a35c77f",
                "filename": "api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/c283a33b9f08a797c692ec70237f6cd3e5b3437a/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/validator/_MessageUtilsTest.java?ref=c283a33b9f08a797c692ec70237f6cd3e5b3437a",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package javax.faces.validator;\n+\n+import static org.easymock.EasyMock.expect;\n+import static org.testng.Assert.assertEquals;\n+\n+import javax.faces.application.Application;\n+import javax.faces.component.UIViewRoot;\n+\n+import org.apache.shale.test.mock.MockFacesContext12;\n+import org.easymock.classextension.EasyMock;\n+import org.easymock.classextension.IMocksControl;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @author Mathias Broekelmann (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n+public class _MessageUtilsTest\n+{\n+\n+    /**\n+     * Test method for\n+     * {@link javax.faces.validator._MessageUtils#getErrorMessage(javax.faces.context.FacesContext, java.lang.String, java.lang.Object[])}.\n+     */\n+    @Test\n+    public void testErrorMessage()\n+    {\n+        UIViewRoot root = new UIViewRoot();\n+        MockFacesContext12 facesContext = new MockFacesContext12();\n+        IMocksControl mocksControl = EasyMock.createControl();\n+        Application application = mocksControl.createMock(Application.class);\n+        facesContext.setApplication(application);\n+        facesContext.setViewRoot(root);\n+\n+        expect(application.getMessageBundle()).andReturn(\"javax.faces.Messages\");\n+        mocksControl.replay();\n+\n+        assertEquals(_MessageUtils.getErrorMessage(facesContext, \"javax.faces.validator.DoubleRangeValidator.MAXIMUM\",\n+                new Object[] { \"xyz\", \"xxx\" }).getDetail(),\n+                \"xxx: Validation Error: Value is greater than allowable maximum of \\\"xyz\\\"\");\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed NPE setValueExpression\n+Tests for UIComponent implementation",
        "commit": "https://github.com/apache/myfaces/commit/603ae2579510db74b48ce649501bbeddf6c16b88",
        "parent": "https://github.com/apache/myfaces/commit/9224d6401c3ba612d21fc82106eea1a9ba3f43d4",
        "bug_id": "myfaces_55",
        "file": [
            {
                "sha": "2d443b4123742c7dcdddc29ba39d3a594cddd9e1",
                "filename": "api/src/main/java/javax/faces/component/UIComponent.java",
                "blob_url": "https://github.com/apache/myfaces/blob/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/main/java/javax/faces/component/UIComponent.java",
                "raw_url": "https://github.com/apache/myfaces/raw/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/main/java/javax/faces/component/UIComponent.java",
                "status": "modified",
                "changes": 62,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponent.java?ref=603ae2579510db74b48ce649501bbeddf6c16b88",
                "patch": "@@ -15,6 +15,7 @@\n  */\n package javax.faces.component;\n \n+import javax.el.ELException;\n import javax.el.ValueExpression;\n import javax.faces.FacesException;\n import javax.faces.context.FacesContext;\n@@ -62,31 +63,47 @@ public ValueExpression getValueExpression(String name) {\n     public abstract void setValueBinding(java.lang.String name,\n                                          javax.faces.el.ValueBinding binding);\n \n-    public void setValueExpression(String name, ValueExpression binding) {\n-        if (name == null) throw new NullPointerException(\"name\");\n-        if (name.equals(\"id\")) throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'id' property.\");\n-        if (name.equals(\"parent\")) throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'parent' property.\");\n-        \n-        if(binding == null) {\n-            this.getAttributes().remove(name);\n-        }\n+    public void setValueExpression(String name, ValueExpression expression)\n+    {\n+        if (name == null)\n+            throw new NullPointerException(\"name\");\n+        if (name.equals(\"id\"))\n+            throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'id' property.\");\n+        if (name.equals(\"parent\"))\n+            throw new IllegalArgumentException(\"Can't set a ValueExpression for the 'parent' property.\");\n         \n-        if (binding.isLiteralText()) {\n-            try {\n-                Object value = binding.getValue(getFacesContext().getELContext());\n-                this.getAttributes().put(name, value);\n-                return;\n-            } catch (Exception e) {\n-                throw new FacesException(e);\n+        if (expression == null)\n+        {\n+            if (bindings != null)\n+            {\n+                bindings.remove(name);\n+                if(bindings.isEmpty())\n+                    bindings = null;\n             }\n-            \n         }\n-        \n-        if (bindings == null) {\n-            bindings = new HashMap<String, ValueExpression>();\n+        else\n+        {\n+            if (expression.isLiteralText())\n+            {\n+                try\n+                {\n+                    Object value = expression.getValue(getFacesContext().getELContext());\n+                    getAttributes().put(name, value);\n+                    return;\n+                }\n+                catch (ELException e)\n+                {\n+                    throw new FacesException(e);\n+                }\n+            }\n+\n+            if (bindings == null)\n+            {\n+                bindings = new HashMap<String, ValueExpression>();\n+            }\n+\n+            bindings.put(name, expression);\n         }\n-        \n-        bindings.put(name, binding);\n     }\n     \n     /**\n@@ -209,8 +226,7 @@ public void encodeAll(javax.faces.context.FacesContext context) throws java.io.I\n \t\t\t\t\titer.next().encodeAll(context);;\n \t\t\t\t}\n     \t\t}\n-    \t\t\n-    \t\tthis.encodeEnd(context);\n+            this.encodeEnd(context);\n     \t}\n     }\n ",
                "deletions": 23
            },
            {
                "sha": "a8a0099d522d8c17f08412fb861733c642abcbef",
                "filename": "api/src/test/java/javax/faces/component/UIComponentTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/test/java/javax/faces/component/UIComponentTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/603ae2579510db74b48ce649501bbeddf6c16b88/api/src/test/java/javax/faces/component/UIComponentTest.java",
                "status": "added",
                "changes": 391,
                "additions": 391,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentTest.java?ref=603ae2579510db74b48ce649501bbeddf6c16b88",
                "patch": "@@ -0,0 +1,391 @@\n+/*\n+ * Copyright 2007 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.faces.component;\n+\n+import static org.apache.myfaces.Assert.*;\n+import static org.easymock.EasyMock.*;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.el.ELContext;\n+import javax.el.ELException;\n+import javax.el.ValueExpression;\n+import javax.faces.FacesException;\n+import javax.faces.context.FacesContext;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.myfaces.TestRunner;\n+import org.easymock.classextension.EasyMock;\n+import org.easymock.classextension.IMocksControl;\n+\n+/**\n+ * @author Mathias Broekelmann (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n+public class UIComponentTest extends TestCase\n+{\n+    public static Test suite()\n+    {\n+        TestSuite suite = new TestSuite(UIComponentTest.class.getName());\n+        suite.addTestSuite(BasicUIComponentTest.class);\n+        suite.addTestSuite(EncodeAllTest.class);\n+        suite.addTestSuite(ValueExpressionUIComponentTest.class);\n+        suite.addTestSuite(InvokeOnComponentTest.class);\n+        return suite;\n+    }\n+\n+    /**\n+     * @author Mathias Broekelmann (latest modification by $Author$)\n+     * @version $Revision$ $Date$\n+     */\n+    public static class UIComponentTestBase extends TestCase\n+    {\n+        protected IMocksControl _mocksControl;\n+        protected FacesContext _facesContext;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            _mocksControl = EasyMock.createControl();\n+            _facesContext = _mocksControl.createMock(FacesContext.class);\n+        }\n+    }\n+\n+    /**\n+     * Tests for\n+     * {@link javax.faces.component.UIComponent#invokeOnComponent(javax.faces.context.FacesContext, java.lang.String, javax.faces.component.ContextCallback)}.\n+     */\n+    public static class InvokeOnComponentTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+        private ContextCallback _contextCallback;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getClientId\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getFacetsAndChildren\", null));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _contextCallback = _mocksControl.createMock(ContextCallback.class);\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testInvokeOnComponentWithSameClientId() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            _contextCallback.invokeContextCallback(same(_facesContext), same(_testimpl));\n+            _mocksControl.replay();\n+            assertTrue(_testimpl.invokeOnComponent(_facesContext, \"xxxId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentAndNotFindComponentWithClientId() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            expect(_testimpl.getFacetsAndChildren()).andReturn(Collections.EMPTY_LIST.iterator());\n+            _mocksControl.replay();\n+            assertFalse(_testimpl.invokeOnComponent(_facesContext, \"xxId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentOnChild() throws Exception\n+        {\n+            expect(_testimpl.getClientId(same(_facesContext))).andReturn(\"xxxId\");\n+            String childId = \"childId\";\n+            UIComponent child = _mocksControl.createMock(UIComponent.class);\n+            expect(_testimpl.getFacetsAndChildren()).andReturn(Collections.singletonList(child).iterator());\n+            expect(child.invokeOnComponent(same(_facesContext), eq(childId), same(_contextCallback))).andReturn(true);\n+            _mocksControl.replay();\n+            assertTrue(_testimpl.invokeOnComponent(_facesContext, \"childId\", _contextCallback));\n+            _mocksControl.verify();\n+        }\n+\n+        public void testInvokeOnComponentExceptions() throws Exception\n+        {\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(null, \"xxx\", _contextCallback);\n+                }\n+            });\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(_facesContext, null, _contextCallback);\n+                }\n+            });\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.invokeOnComponent(_facesContext, \"xxx\", null);\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Tests for {@link javax.faces.component.UIComponent#encodeAll(javax.faces.context.FacesContext)}.\n+     */\n+    public static class EncodeAllTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"isRendered\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeBegin\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getRendersChildren\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeChildren\", new Class[] { FacesContext.class }));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getChildren\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"encodeEnd\", new Class[] { FacesContext.class }));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testEncodeAllNullContext() throws Exception\n+        {\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.encodeAll(null);\n+                }\n+            });\n+        }\n+\n+        public void testEncodeAllNotRendered() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(false);\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+\n+        public void testEncodeAllRenderesChildren() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(true);\n+            _testimpl.encodeBegin(same(_facesContext));\n+            expect(_testimpl.getRendersChildren()).andReturn(true);\n+            _testimpl.encodeChildren(same(_facesContext));\n+            _testimpl.encodeEnd(same(_facesContext));\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+\n+        public void testEncodeAllNotRenderesChildren() throws Exception\n+        {\n+            expect(_testimpl.isRendered()).andReturn(true);\n+            _testimpl.encodeBegin(same(_facesContext));\n+            expect(_testimpl.getRendersChildren()).andReturn(false);\n+\n+            List<UIComponent> childs = new ArrayList<UIComponent>();\n+            UIComponent testChild = _mocksControl.createMock(UIComponent.class);\n+            childs.add(testChild);\n+            expect(_testimpl.getChildren()).andReturn(childs);\n+            testChild.encodeAll(same(_facesContext));\n+\n+            _testimpl.encodeEnd(same(_facesContext));\n+            _mocksControl.replay();\n+            _testimpl.encodeAll(_facesContext);\n+            _mocksControl.verify();\n+        }\n+    }\n+\n+    /**\n+     * Test for {@link javax.faces.component.UIComponent#getValueExpression(java.lang.String)}. and\n+     * {@link javax.faces.component.UIComponent#setValueExpression(java.lang.String, javax.el.ValueExpression)}.\n+     */\n+    public static class ValueExpressionUIComponentTest extends UIComponentTestBase\n+    {\n+        private UIComponent _testimpl;\n+        private ValueExpression _expression;\n+        private ELContext _elContext;\n+\n+        @Override\n+        protected void setUp() throws Exception\n+        {\n+            super.setUp();\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getAttributes\", null));\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getFacesContext\", null));\n+\n+            _testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods.size()]));\n+            _expression = _mocksControl.createMock(ValueExpression.class);\n+            _elContext = _mocksControl.createMock(ELContext.class);\n+            _mocksControl.checkOrder(true);\n+        }\n+\n+        public void testSetValueExpressionArguments() throws Exception\n+        {\n+            assertException(NullPointerException.class, new SetValueExpressionTestRunner(_testimpl, null, _expression));\n+            assertException(IllegalArgumentException.class, new SetValueExpressionTestRunner(_testimpl, \"id\",\n+                    _expression));\n+            assertException(IllegalArgumentException.class, new SetValueExpressionTestRunner(_testimpl, \"parent\",\n+                    _expression));\n+        }\n+\n+        public void testSetValueExpression() throws Exception\n+        {\n+            expect(_expression.isLiteralText()).andReturn(false);\n+            _mocksControl.replay();\n+            _testimpl.setValueExpression(\"xxx\", _expression);\n+            _mocksControl.verify();\n+            assertEquals(_expression, _testimpl.getValueExpression(\"xxx\"));\n+            _testimpl.setValueExpression(\"xxx\", null);\n+            _mocksControl.verify();\n+            assertNull(_testimpl.getValueExpression(\"xxx\"));\n+            assertNull(_testimpl.bindings);\n+        }\n+\n+        public void testSetValueExpressionWithExceptionOnGetValue() throws Exception\n+        {\n+            assertSetValueExpressionWithExceptionOnGetValue(FacesException.class, new ELException());\n+        }\n+\n+        private void assertSetValueExpressionWithExceptionOnGetValue(Class<? extends Throwable> expected,\n+                Throwable fired)\n+        {\n+            expect(_expression.isLiteralText()).andReturn(true);\n+            expect(_testimpl.getFacesContext()).andReturn(_facesContext);\n+            expect(_facesContext.getELContext()).andReturn(_elContext);\n+            expect(_expression.getValue(eq(_elContext))).andThrow(fired);\n+            Map map = new HashMap();\n+            expect(_testimpl.getAttributes()).andReturn(map);\n+            _mocksControl.replay();\n+            assertException(expected, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    _testimpl.setValueExpression(\"xxx\", _expression);\n+                }\n+            });\n+            _mocksControl.reset();\n+        }\n+\n+        public void testSetValueExpressionWithLiteralText() throws Exception\n+        {\n+            expect(_expression.isLiteralText()).andReturn(true);\n+            expect(_testimpl.getFacesContext()).andReturn(_facesContext);\n+            expect(_facesContext.getELContext()).andReturn(_elContext);\n+            expect(_expression.getValue(eq(_elContext))).andReturn(\"abc\");\n+            Map map = new HashMap();\n+            expect(_testimpl.getAttributes()).andReturn(map);\n+            _mocksControl.replay();\n+            _testimpl.setValueExpression(\"xxx\", _expression);\n+            assertEquals(\"abc\", map.get(\"xxx\"));\n+            _mocksControl.verify();\n+            assertNull(_testimpl.getValueExpression(\"xxx\"));\n+        }\n+    }\n+\n+    public static class BasicUIComponentTest extends UIComponentTestBase\n+    {\n+        /**\n+         * Test method for {@link javax.faces.component.UIComponent#getFacetCount()}.\n+         */\n+        public void testGetFacetCount() throws Exception\n+        {\n+            UIComponent component = _mocksControl.createMock(UIComponent.class, new Method[] { UIComponent.class\n+                    .getDeclaredMethod(\"getFacets\", null) });\n+            Map<String, UIComponent> map = new HashMap<String, UIComponent>();\n+            map.put(\"xxx1\", new UIInput());\n+            map.put(\"xxx2\", new UIInput());\n+            map.put(\"xxx3\", new UIInput());\n+            expect(component.getFacets()).andReturn(map);\n+            _mocksControl.replay();\n+            assertEquals(3, component.getFacetCount());\n+            _mocksControl.verify();\n+\n+            _mocksControl.reset();\n+            expect(component.getFacets()).andReturn(null);\n+            _mocksControl.replay();\n+            assertEquals(0, component.getFacetCount());\n+            _mocksControl.verify();\n+        }\n+\n+        /**\n+         * Test method for\n+         * {@link javax.faces.component.UIComponent#getContainerClientId(javax.faces.context.FacesContext)}.\n+         * \n+         * @throws Exception\n+         */\n+        public void testGetContainerClientId() throws Exception\n+        {\n+            Collection<Method> mockedMethods = new ArrayList<Method>();\n+            Class<UIComponent> clazz = UIComponent.class;\n+            mockedMethods.add(clazz.getDeclaredMethod(\"getClientId\", new Class[] { FacesContext.class }));\n+            final UIComponent testimpl = _mocksControl.createMock(clazz, mockedMethods.toArray(new Method[mockedMethods\n+                    .size()]));\n+            _mocksControl.checkOrder(true);\n+\n+            assertException(NullPointerException.class, new TestRunner()\n+            {\n+                public void run() throws Throwable\n+                {\n+                    testimpl.getContainerClientId(null);\n+                }\n+            });\n+\n+            expect(testimpl.getClientId(same(_facesContext))).andReturn(\"xyz\");\n+            _mocksControl.replay();\n+            assertEquals(\"xyz\", testimpl.getContainerClientId(_facesContext));\n+            _mocksControl.verify();\n+        }\n+    }\n+\n+    private static class SetValueExpressionTestRunner implements TestRunner\n+    {\n+        private final String _name;\n+        private final ValueExpression _expression;\n+        private final UIComponent _component;\n+\n+        public SetValueExpressionTestRunner(UIComponent component, String name, ValueExpression expression)\n+        {\n+            _component = component;\n+            _name = name;\n+            _expression = expression;\n+        }\n+\n+        public void run() throws Throwable\n+        {\n+            _component.setValueExpression(_name, _expression);\n+        }\n+\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3982 javax.faces.context.ExternalContext#getInitParameter should throw NPE when name is null",
        "commit": "https://github.com/apache/myfaces/commit/43f28d6aa0d335759af8a92add5bcc542974d65b",
        "parent": "https://github.com/apache/myfaces/commit/3da7472370e5df9c9ff19aa66d7774abeb8c27c0",
        "bug_id": "myfaces_56",
        "file": [
            {
                "sha": "0ab3de98bf89925faf07eb426fa643b4d5241cd5",
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImplBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/43f28d6aa0d335759af8a92add5bcc542974d65b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImplBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/43f28d6aa0d335759af8a92add5bcc542974d65b/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImplBase.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/ServletExternalContextImplBase.java?ref=43f28d6aa0d335759af8a92add5bcc542974d65b",
                "patch": "@@ -100,6 +100,10 @@ public String getContextName()\n     @Override\n     public String getInitParameter(final String s)\n     {\n+        if (s == null)\n+        {\n+            throw new NullPointerException(\"Init parameter name cannot be null\");\n+        }\n         return _servletContext.getInitParameter(s);\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3708 NPE when no title using primefaces mobile",
        "commit": "https://github.com/apache/myfaces/commit/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345",
        "parent": "https://github.com/apache/myfaces/commit/e61ec49c975b7e941e61616a0da846f27b800e9c",
        "bug_id": "myfaces_57",
        "file": [
            {
                "sha": "12b7cfd7573482675cf992426e625fe7d87c65f8",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/ff101d4d344ba2e4bd63b7e6c0b42607ffb72345/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java?ref=ff101d4d344ba2e4bd63b7e6c0b42607ffb72345",
                "patch": "@@ -1086,7 +1086,7 @@ public void write(String str) throws IOException\n         closeStartTagIfNecessary();\n         // empty string commonly used to force the start tag to be closed.\n         // in such case, do not call down the writer chain\n-        if (str.length() > 0)\n+        if (str != null && str.length() > 0)\n         {\n             // Don't bother encoding anything if chosen character encoding is UTF-8\n             if (_isUTF8)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3708 NPE when no title using primefaces mobile",
        "commit": "https://github.com/apache/myfaces/commit/af9e0f64dba9d92f851e41f9428c8935bd307786",
        "parent": "https://github.com/apache/myfaces/commit/3de881004f40f87b8417e61ccecd4109329caab9",
        "bug_id": "myfaces_58",
        "file": [
            {
                "sha": "464cd3e79eadb480d550256173f4c0b90d27f882",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/af9e0f64dba9d92f851e41f9428c8935bd307786/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/af9e0f64dba9d92f851e41f9428c8935bd307786/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/renderkit/html/HtmlResponseWriterImpl.java?ref=af9e0f64dba9d92f851e41f9428c8935bd307786",
                "patch": "@@ -1015,7 +1015,7 @@ public void write(String str) throws IOException\n         closeStartTagIfNecessary();\n         // empty string commonly used to force the start tag to be closed.\n         // in such case, do not call down the writer chain\n-        if (str.length() > 0)\n+        if (str != null && str.length() > 0)\n         {\n             // Don't bother encoding anything if chosen character encoding is UTF-8\n             if (_isUTF8)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3105 Navigation with redirect after ViewExpiredExpcetion throws NPE",
        "commit": "https://github.com/apache/myfaces/commit/9164691bb29c782454b77019824530fd62d662cf",
        "parent": "https://github.com/apache/myfaces/commit/14a91bc64a3e3c2293a6b63c9c49aa4dd73b27bb",
        "bug_id": "myfaces_59",
        "file": [
            {
                "sha": "81eddc0ab447f53f4b13250d5583eb9c69f53b5d",
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/9164691bb29c782454b77019824530fd62d662cf/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/9164691bb29c782454b77019824530fd62d662cf/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java?ref=9164691bb29c782454b77019824530fd62d662cf",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import javax.faces.FactoryFinder;\n import javax.faces.component.UIComponent;\n import javax.faces.component.UIViewParameter;\n import javax.faces.component.UIViewRoot;\n@@ -40,6 +41,8 @@\n import javax.faces.context.PartialViewContext;\n import javax.faces.context.ResponseWriter;\n import javax.faces.event.PhaseId;\n+import javax.faces.render.RenderKit;\n+import javax.faces.render.RenderKitFactory;\n import javax.faces.view.ViewMetadata;\n \n import org.apache.myfaces.context.PartialResponseWriterImpl;\n@@ -298,7 +301,18 @@ public PartialResponseWriter getPartialResponseWriter() {\n                 // ResponseWriter from the RenderKit and then wrap if necessary. \n                 try\n                 {\n-                    responseWriter = _facesContext.getRenderKit().createResponseWriter(\n+                    RenderKit renderKit = _facesContext.getRenderKit();\n+                    if (renderKit == null)\n+                    {\n+                        // If the viewRoot was set to null by some reason, or there is no \n+                        // renderKitId on that view, this could be still an ajax redirect,\n+                        // so we have to try to calculate the renderKitId and return a \n+                        // RenderKit instance, to send the response.\n+                        String renderKitId = _facesContext.getApplication().getViewHandler().calculateRenderKitId(_facesContext);\n+                        RenderKitFactory rkf = (RenderKitFactory)FactoryFinder.getFactory(FactoryFinder.RENDER_KIT_FACTORY);\n+                        renderKit = rkf.getRenderKit(_facesContext, renderKitId);\n+                    }\n+                    responseWriter = renderKit.createResponseWriter(\n                             _facesContext.getExternalContext().getResponseOutputWriter(), \"text/xml\",\n                             _facesContext.getExternalContext().getRequestCharacterEncoding());\n                 }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3105 Navigation with redirect after ViewExpiredExpcetion throws NPE",
        "commit": "https://github.com/apache/myfaces/commit/f72dfc1272c7d10c228cf5d1c5c0a79c4008ee47",
        "parent": "https://github.com/apache/myfaces/commit/56fd620614dea540112683c0941217db126b381e",
        "bug_id": "myfaces_60",
        "file": [
            {
                "sha": "bfde96b66ad522df6afd47a3a23b33f113819fbd",
                "filename": "impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/f72dfc1272c7d10c228cf5d1c5c0a79c4008ee47/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/f72dfc1272c7d10c228cf5d1c5c0a79c4008ee47/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/context/servlet/PartialViewContextImpl.java?ref=f72dfc1272c7d10c228cf5d1c5c0a79c4008ee47",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import javax.faces.FactoryFinder;\n import javax.faces.component.UIComponent;\n import javax.faces.component.UIViewParameter;\n import javax.faces.component.UIViewRoot;\n@@ -40,6 +41,8 @@\n import javax.faces.context.PartialViewContext;\n import javax.faces.context.ResponseWriter;\n import javax.faces.event.PhaseId;\n+import javax.faces.render.RenderKit;\n+import javax.faces.render.RenderKitFactory;\n import javax.faces.view.ViewMetadata;\n \n import org.apache.myfaces.context.PartialResponseWriterImpl;\n@@ -298,7 +301,18 @@ public PartialResponseWriter getPartialResponseWriter() {\n                 // ResponseWriter from the RenderKit and then wrap if necessary. \n                 try\n                 {\n-                    responseWriter = _facesContext.getRenderKit().createResponseWriter(\n+                    RenderKit renderKit = _facesContext.getRenderKit();\n+                    if (renderKit == null)\n+                    {\n+                        // If the viewRoot was set to null by some reason, or there is no \n+                        // renderKitId on that view, this could be still an ajax redirect,\n+                        // so we have to try to calculate the renderKitId and return a \n+                        // RenderKit instance, to send the response.\n+                        String renderKitId = _facesContext.getApplication().getViewHandler().calculateRenderKitId(_facesContext);\n+                        RenderKitFactory rkf = (RenderKitFactory)FactoryFinder.getFactory(FactoryFinder.RENDER_KIT_FACTORY);\n+                        renderKit = rkf.getRenderKit(_facesContext, renderKitId);\n+                    }\n+                    responseWriter = renderKit.createResponseWriter(\n                             _facesContext.getExternalContext().getResponseOutputWriter(), \"text/xml\",\n                             _facesContext.getExternalContext().getRequestCharacterEncoding());\n                 }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fixed NPE in newly introduced error-page writing",
        "commit": "https://github.com/apache/myfaces/commit/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae",
        "parent": "https://github.com/apache/myfaces/commit/95a862a5bde26ea5556e1da8b17f6b1a5749f6ee",
        "bug_id": "myfaces_61",
        "file": [
            {
                "sha": "55d39ff8c9c7ec95da343c4404d263210a063432",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java",
                "status": "modified",
                "changes": 56,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ErrorPageWriter.java?ref=3ef84672f526d30c8bfffa3dff1c3ff1cd90f5ae",
                "patch": "@@ -18,41 +18,16 @@\n  */\n package org.apache.myfaces.renderkit;\n \n-import java.beans.BeanInfo;\n-import java.beans.Introspector;\n-import java.beans.PropertyDescriptor;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.PrintWriter;\n-import java.io.Serializable;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.lang.reflect.Method;\n-import java.text.DateFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n+import org.apache.myfaces.shared_impl.renderkit.html.HtmlResponseWriterImpl;\n+import org.apache.myfaces.shared_impl.util.ClassUtils;\n+import org.apache.myfaces.shared_impl.webapp.webxml.WebXml;\n+import org.apache.myfaces.view.facelets.component.UIRepeat;\n \n import javax.el.Expression;\n import javax.el.ValueExpression;\n import javax.faces.FacesException;\n-import javax.faces.component.UIColumn;\n-import javax.faces.component.UIComponent;\n-import javax.faces.component.UIData;\n-import javax.faces.component.UIInput;\n-import javax.faces.component.UIViewRoot;\n+import javax.faces.component.*;\n import javax.faces.component.visit.VisitCallback;\n import javax.faces.component.visit.VisitContext;\n import javax.faces.component.visit.VisitHint;\n@@ -66,12 +41,17 @@\n import javax.faces.render.Renderer;\n import javax.faces.view.Location;\n import javax.servlet.http.HttpServletResponse;\n-\n-import org.apache.myfaces.buildtools.maven2.plugin.builder.annotation.JSFWebConfigParam;\n-import org.apache.myfaces.shared_impl.renderkit.html.HtmlResponseWriterImpl;\n-import org.apache.myfaces.shared_impl.util.ClassUtils;\n-import org.apache.myfaces.shared_impl.webapp.webxml.WebXml;\n-import org.apache.myfaces.view.facelets.component.UIRepeat;\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.io.*;\n+import java.lang.reflect.Method;\n+import java.text.DateFormat;\n+import java.util.*;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * This class provides utility methods to generate the\n@@ -843,7 +823,7 @@ public VisitResult visit(VisitContext context, UIComponent target)\n                     _writer.write(\"</dl>\");\n                     \n                     while (parent != null \n-                            && (parent.getChildren().get(parent.getChildCount() - 1) == target\n+                            && ((parent.getChildCount()>0 && parent.getChildren().get(parent.getChildCount() - 1) == target)\n                                     || (parent.getFacetCount() != 0 \n                                             && _getVisitedFacetCount(parent) == parent.getFacetCount())))\n                     {",
                "deletions": 38
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "Corrected NPE with actionListener with type and no binding",
        "commit": "https://github.com/apache/myfaces/commit/63dfd44c285f756567f5e3e5b85b68c9ce39527a",
        "parent": "https://github.com/apache/myfaces/commit/814a5a6fa34e5b69e3f0dd77051a09513864b8da",
        "bug_id": "myfaces_62",
        "file": [
            {
                "sha": "282dfd80dbe74094485fef2ee7d64aa216dd10bb",
                "filename": "impl/src/main/java/org/apache/myfaces/taglib/core/DelegateActionListener.java",
                "blob_url": "https://github.com/apache/myfaces/blob/63dfd44c285f756567f5e3e5b85b68c9ce39527a/impl/src/main/java/org/apache/myfaces/taglib/core/DelegateActionListener.java",
                "raw_url": "https://github.com/apache/myfaces/raw/63dfd44c285f756567f5e3e5b85b68c9ce39527a/impl/src/main/java/org/apache/myfaces/taglib/core/DelegateActionListener.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/taglib/core/DelegateActionListener.java?ref=63dfd44c285f756567f5e3e5b85b68c9ce39527a",
                "patch": "@@ -27,6 +27,8 @@\n import javax.faces.event.ActionEvent;\n import javax.faces.event.ActionListener;\n \n+import org.apache.myfaces.shared_impl.util.ClassUtils;\n+\n \n /**\n  * This class is used in conjunction with ActionListenerTag. \n@@ -112,8 +114,7 @@ private ActionListener _createActionListener()\n                 }\n                 catch (ELException e)\n                 {\n-                    //throw new JspException(\"Exception while evaluating the binding attribute of Component \"\n-                    //        + component.getId(), e);\n+                    throw new ELException(\"Exception while evaluating the binding attribute\", e);\n                 }\n             }\n             if (null != _type)\n@@ -128,8 +129,8 @@ private ActionListener _createActionListener()\n                     className = (String) _type.getValue(facesContext\n                             .getELContext());\n                 }\n-                listener = null;\n-                //listener = (ActionListener) ClassUtils.newInstance(className);\n+\n+                listener = (ActionListener) ClassUtils.newInstance(className);\n                 if (null != _binding)\n                 {\n                     try\n@@ -139,8 +140,7 @@ private ActionListener _createActionListener()\n                     }\n                     catch (ELException e)\n                     {\n-                        //throw new JspException(\"Exception while evaluating the binding attribute of Component \"\n-                        //        + component.getId(), e);\n+                        throw new ELException(\"Exception while evaluating the binding attribute \");\n                     }\n                 }\n                 return listener;",
                "deletions": 6
            },
            {
                "sha": "f190962a24c7e3a422b98663a3f012ace9c079f1",
                "filename": "impl/src/main/java/org/apache/myfaces/taglib/core/GenericListenerTag.java",
                "blob_url": "https://github.com/apache/myfaces/blob/63dfd44c285f756567f5e3e5b85b68c9ce39527a/impl/src/main/java/org/apache/myfaces/taglib/core/GenericListenerTag.java",
                "raw_url": "https://github.com/apache/myfaces/raw/63dfd44c285f756567f5e3e5b85b68c9ce39527a/impl/src/main/java/org/apache/myfaces/taglib/core/GenericListenerTag.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/taglib/core/GenericListenerTag.java?ref=63dfd44c285f756567f5e3e5b85b68c9ce39527a",
                "patch": "@@ -143,13 +143,15 @@ protected void createListener(_Holder holder, UIComponent component)\n                 if (_type.isLiteralText())\n                 {\n                     className = _type.getExpressionString();\n+                    //If type is literal text we should create\n+                    //a new instance\n+                    listener = (_Listener) ClassUtils.newInstance(className);\n                 } else\n                 {\n                     className = (String) _type.getValue(facesContext.getELContext());\n+                    listener = null;\n                 }\n-                \n-                listener = null;\n-                //listener = (ActionListener) ClassUtils.newInstance(className);\n+                                \n                 if (null != _binding)\n                 {\n                     try\n@@ -160,6 +162,11 @@ protected void createListener(_Holder holder, UIComponent component)\n                         throw new JspException(\"Exception while evaluating the binding attribute of Component \"\n                                 + component.getId(), e);\n                     }\n+                }else{\n+                    //Type is a EL expression, and there is\n+                    //no binding property so we should create\n+                    //a new instance\n+                    listener = (_Listener) ClassUtils.newInstance(className);\n                 }\n                 addListener(holder, listener);\n             }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "refactored test and fixed a pre-existing NPE failure",
        "commit": "https://github.com/apache/myfaces/commit/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210",
        "parent": "https://github.com/apache/myfaces/commit/8910141a9bdb0dbd10a907731584d5e083f15063",
        "bug_id": "myfaces_63",
        "file": [
            {
                "sha": "4bb4f957052cfd6f511225657ba9bc5b10af9585",
                "filename": "api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210/api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/7dddc0aa1d8b16adbd93a70b1275e0d0ab843210/api/src/test/java/javax/faces/component/UIComponentBaseTest.java",
                "status": "modified",
                "changes": 891,
                "additions": 445,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentBaseTest.java?ref=7dddc0aa1d8b16adbd93a70b1275e0d0ab843210",
                "patch": "@@ -1,446 +1,445 @@\n-/*\n- * Copyright 2004-2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package javax.faces.component;\n-\n-import javax.faces.context.FacesContext;\n-import javax.faces.el.ValueBinding;\n-import javax.faces.FactoryFinder;\n-import org.apache.myfaces.mock.api.MockApplicationFactory;\n-import org.apache.myfaces.mock.api.MockRenderKitFactory;\n-\n-import org.apache.myfaces.AbstractTestCase;\n-import org.apache.myfaces.mock.api.MockFacesContextHelper;\n-import org.apache.myfaces.mock.api.MockFacesContext;\n-import org.easymock.MockControl;\n-import org.easymock.classextension.MockClassControl;\n-\n-public class UIComponentBaseTest extends AbstractTestCase {\n-  UIComponentBase mock = null;\n-  public static void main(String[] args) {\n-    junit.textui.TestRunner.run(UIComponentBaseTest.class);\n-  }\n-\n-  public UIComponentBaseTest(String name) {\n-    super(name);\n-  }\n-\n-  protected void setUp() throws Exception {\n-    super.setUp();\n-    \n-    mock = new UIComponentMock();\n-  }\n-\n-  protected void tearDown() throws Exception {\n-    super.tearDown();\n-    mock = null;\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.isRendered()'\n-   */\n-  public void testIsRendered() {\n-    // defaults to true\n-    assertTrue(mock.isRendered());\n-  }\n-\n-  public void testIsRenderedValueSet() {\n-    mock.setRendered(true);\n-    assertTrue(mock.isRendered());\n-    mock.setRendered(false);\n-    assertFalse(mock.isRendered());\n-  }\n-\n-  public void testIsRenderedBinding() {\n-    MockControl bindingControl = MockClassControl.createControl(ValueBinding.class);\n-    ValueBinding mockBinding = (ValueBinding)bindingControl.getMock();\n-    mockBinding.getValue(null);\n-    bindingControl.setReturnValue(Boolean.FALSE);\n-    bindingControl.replay();\n-    mock.setValueBinding(\"rendered\", mockBinding);\n-    assertFalse(mock.isRendered());\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getRendersChildren()'\n-   */\n-  public void testGetRendersChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getChildCount()'\n-   */\n-  public void testGetChildCount() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.UIComponentBase()'\n-   */\n-  public void testUIComponentBase() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getAttributes()'\n-   */\n-  public void testGetAttributes() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getValueBinding(String)'\n-   */\n-  public void testGetValueBindingString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setValueBinding(String, ValueBinding)'\n-   */\n-  public void testSetValueBindingStringValueBinding() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getClientId(FacesContext)'\n-   */\n-  public void testGetClientIdFacesContext() {\n-\n-      FacesContext context = new MockFacesContext();\n-\n-      UIInput input = createInputInTree(context);\n-\n-      String str = input.getClientId(context);\n-\n-      assertEquals(str, \"data:input\");\n-\n-      UIData uiData = (UIData) input.getParent().getParent();\n-\n-      uiData.setRowIndex(1);\n-\n-      str = input.getClientId(context);\n-  }\n-\n-    private UIInput createInputInTree(FacesContext context)\n-    {\n-        UIViewRoot viewRoot = new UIViewRoot();\n-        viewRoot.setId(\"root\");\n-\n-        UIData uiData = new UIData();\n-        uiData.setId(\"data\");\n-\n-        UIColumn column = new UIColumn();\n-\n-        uiData.getChildren().add(column);\n-\n-        UIInput input = new UIInput();\n-        input.setId(\"input\");\n-\n-        column.getChildren().add(input);\n-\n-        viewRoot.getChildren().add(uiData);\n-\n-        FactoryFinder.setFactory(FactoryFinder.APPLICATION_FACTORY,\n-          MockApplicationFactory.class.getName());\n-\n-        FactoryFinder.setFactory(FactoryFinder.RENDER_KIT_FACTORY,\n-          MockRenderKitFactory.class.getName());\n-\n-        context.setViewRoot(viewRoot);\n-\n-        MockFacesContextHelper.setCurrentInstance(context);\n-        return input;\n-    }\n-\n-    /*\n-    * Test method for 'javax.faces.component.UIComponentBase.getId()'\n-    */\n-    public void testGetId() {\n-\n-    }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setId(String)'\n-   */\n-  public void testSetIdString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getParent()'\n-   */\n-  public void testGetParent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setParent(UIComponent)'\n-   */\n-  public void testSetParentUIComponent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getChildren()'\n-   */\n-  public void testGetChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.findComponent(String)'\n-   */\n-  public void testFindComponentString() {\n-      FacesContext context = new MockFacesContext();\n-\n-      UIInput input = createInputInTree(context);\n-\n-      UIComponent comp = input.findComponent(\":data:input\");\n-\n-      assertEquals(input, comp);\n-\n-      comp = input.findComponent(\"input\");\n-\n-      assertEquals(input, comp);\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacets()'\n-   */\n-  public void testGetFacets() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacet(String)'\n-   */\n-  public void testGetFacetString() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacetsAndChildren()'\n-   */\n-  public void testGetFacetsAndChildren() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.broadcast(FacesEvent)'\n-   */\n-  public void testBroadcastFacesEvent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.decode(FacesContext)'\n-   */\n-  public void testDecodeFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeBegin(FacesContext)'\n-   */\n-  public void testEncodeBeginFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeChildren(FacesContext)'\n-   */\n-  public void testEncodeChildrenFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.encodeEnd(FacesContext)'\n-   */\n-  public void testEncodeEndFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.addFacesListener(FacesListener)'\n-   */\n-  public void testAddFacesListenerFacesListener() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacesListeners(Class)'\n-   */\n-  public void testGetFacesListenersClass() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.removeFacesListener(FacesListener)'\n-   */\n-  public void testRemoveFacesListenerFacesListener() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.queueEvent(FacesEvent)'\n-   */\n-  public void testQueueEventFacesEvent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processDecodes(FacesContext)'\n-   */\n-  public void testProcessDecodesFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processValidators(FacesContext)'\n-   */\n-  public void testProcessValidatorsFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processUpdates(FacesContext)'\n-   */\n-  public void testProcessUpdatesFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processSaveState(FacesContext)'\n-   */\n-  public void testProcessSaveStateFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.processRestoreState(FacesContext, Object)'\n-   */\n-  public void testProcessRestoreStateFacesContextObject() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getFacesContext()'\n-   */\n-  public void testGetFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getRenderer(FacesContext)'\n-   */\n-  public void testGetRendererFacesContext() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.getPathToComponent(UIComponent)'\n-   */\n-  public void testGetPathToComponent() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.isTransient()'\n-   */\n-  public void testIsTransient() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setTransient(boolean)'\n-   */\n-  public void testSetTransient() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.saveAttachedState(FacesContext, Object)'\n-   */\n-  public void testSaveAttachedState() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.restoreAttachedState(FacesContext, Object)'\n-   */\n-  public void testRestoreAttachedState() {\n-\n-  }\n-\n-  public void testSaveState() throws Exception {\n-    MockControl contextControl = MockClassControl.createControl(FacesContext.class);\n-    FacesContext facesContext = (FacesContext)contextControl.getMock();\n-    contextControl.replay();\n-    try {\n-      String id = \"id\";\n-      String rendererType = \"Whumpy\";\n-      mock.setId(id);\n-      mock.setRendered(true);\n-      mock.setRendererType(rendererType);\n-      Object value[] = (Object[])mock.saveState(facesContext);\n-      assertEquals(id, value[0]);\n-      assertEquals(Boolean.TRUE, value[1]);\n-      assertEquals(rendererType, value[2]);\n-      // the object 'mock' here, must be the same before and after saveState\n-      // calling getClientId in the saveState method would change the state\n-      // so it must be null if getClientId has not been called\n-      assertNull(value[3]);\n-      assertNull(value[4]);\n-      assertNull(value[5]);\n-      assertNull(value[6]);\n-    } catch (NullPointerException e) {\n-      fail(\"Should not throw an exception\");\n-    }\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.restoreState(FacesContext, Object)'\n-   */\n-  public void testRestoreState() {\n-\n-  }\n-\n-  /*\n-   * Test method for 'javax.faces.component.UIComponentBase.setRendererType(String)'\n-   */\n-  public void testSetRendererType() {\n-    assertNull(mock.getRendererType());\n-  }\n-  public void testSetRendererTypeStringValue() {\n-    String rendererType = \"BlueBlorf\";\n-    mock.setRendererType(rendererType);\n-    assertEquals(mock.getRendererType(), rendererType);\n-  }\n-  public void testSetRendererTypeStringBinding() {\n-    MockControl bindingControl = MockClassControl.createControl(ValueBinding.class);\n-    ValueBinding mockBinding = (ValueBinding)bindingControl.getMock();\n-    mockBinding.getValue(null);\n-    String whumpy = \"Whumpy\";\n-    bindingControl.setReturnValue(whumpy);\n-    bindingControl.replay();\n-    mock.setValueBinding(\"rendererType\", mockBinding);\n-    assertEquals(mock.getRendererType(), whumpy);\n-  }\n-\n-}\n+/*\r\n+ * Copyright 2004-2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package javax.faces.component;\r\n+\r\n+import javax.faces.context.FacesContext;\r\n+import javax.faces.el.ValueBinding;\r\n+import javax.faces.FactoryFinder;\r\n+\r\n+import junit.framework.Test;\r\n+\r\n+import org.apache.shale.test.base.AbstractJsfTestCase;\r\n+import org.apache.shale.test.mock.MockApplicationFactory;\r\n+import org.apache.shale.test.mock.MockRenderKitFactory;\r\n+import org.apache.shale.test.mock.MockValueBinding;\r\n+\r\n+public class UIComponentBaseTest extends AbstractJsfTestCase {\r\n+\tUIComponentBase mock = null;\r\n+\r\n+\tpublic static void main(String[] args) {\r\n+\t\tjunit.textui.TestRunner.run(UIComponentBaseTest.class);\r\n+\t}\r\n+\r\n+\tpublic UIComponentBaseTest(String name) {\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic static Test suite() {\r\n+\t\treturn null; // keep this method or maven won't run it\r\n+\t}\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp();\r\n+\r\n+\t\tmock = new UIComponentMock();\r\n+\t}\r\n+\r\n+\tpublic void tearDown() {\r\n+\t\tsuper.tearDown();\r\n+\t\tmock = null;\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.isRendered()'\r\n+\t */\r\n+\tpublic void testIsRendered() {\r\n+\t\t// defaults to true\r\n+\t\tassertTrue(mock.isRendered());\r\n+\t}\r\n+\r\n+\tpublic void testIsRenderedValueSet() {\r\n+\t\tmock.setRendered(true);\r\n+\t\tassertTrue(mock.isRendered());\r\n+\t\tmock.setRendered(false);\r\n+\t\tassertFalse(mock.isRendered());\r\n+\t}\r\n+\r\n+\tpublic void testIsRenderedBinding() {\r\n+\r\n+\t\tValueBinding vb = new MockValueBinding(application,\r\n+\t\t\t\t\"#{requestScope.foo}\");\r\n+\t\texternalContext.getRequestMap().put(\"foo\", new Boolean(false));\r\n+\r\n+\t\tmock.setValueBinding(\"rendered\", vb);\r\n+\t\tassertFalse(mock.isRendered());\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getRendersChildren()'\r\n+\t */\r\n+\tpublic void testGetRendersChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getChildCount()'\r\n+\t */\r\n+\tpublic void testGetChildCount() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.UIComponentBase()'\r\n+\t */\r\n+\tpublic void testUIComponentBase() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getAttributes()'\r\n+\t */\r\n+\tpublic void testGetAttributes() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getValueBinding(String)'\r\n+\t */\r\n+\tpublic void testGetValueBindingString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setValueBinding(String, ValueBinding)'\r\n+\t */\r\n+\tpublic void testSetValueBindingStringValueBinding() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getClientId(FacesContext)'\r\n+\t */\r\n+\tpublic void testGetClientIdFacesContext() {\r\n+\r\n+\t\tUIInput input = createInputInTree(facesContext);\r\n+\r\n+\t\tString str = input.getClientId(facesContext);\r\n+\r\n+\t\tassertEquals(str, \"data:input\");\r\n+\r\n+\t\tUIData uiData = (UIData) input.getParent().getParent();\r\n+\r\n+\t\tuiData.setRowIndex(1);\r\n+\r\n+\t\tstr = input.getClientId(facesContext);\r\n+\t}\r\n+\r\n+\tprivate UIInput createInputInTree(FacesContext context) {\r\n+\t\tUIViewRoot viewRoot = new UIViewRoot();\r\n+\t\tviewRoot.setId(\"root\");\r\n+\r\n+\t\tUIData uiData = new UIData();\r\n+\t\tuiData.setId(\"data\");\r\n+\r\n+\t\tUIColumn column = new UIColumn();\r\n+\r\n+\t\tuiData.getChildren().add(column);\r\n+\r\n+\t\tUIInput input = new UIInput();\r\n+\t\tinput.setId(\"input\");\r\n+\r\n+\t\tcolumn.getChildren().add(input);\r\n+\r\n+\t\tviewRoot.getChildren().add(uiData);\r\n+\r\n+\t\tFactoryFinder.setFactory(FactoryFinder.APPLICATION_FACTORY,\r\n+\t\t\t\tMockApplicationFactory.class.getName());\r\n+\r\n+\t\tFactoryFinder.setFactory(FactoryFinder.RENDER_KIT_FACTORY,\r\n+\t\t\t\tMockRenderKitFactory.class.getName());\r\n+\r\n+\t\tcontext.setViewRoot(viewRoot);\r\n+\r\n+\t\treturn input;\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getId()'\r\n+\t */\r\n+\tpublic void testGetId() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setId(String)'\r\n+\t */\r\n+\tpublic void testSetIdString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getParent()'\r\n+\t */\r\n+\tpublic void testGetParent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setParent(UIComponent)'\r\n+\t */\r\n+\tpublic void testSetParentUIComponent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getChildren()'\r\n+\t */\r\n+\tpublic void testGetChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.findComponent(String)'\r\n+\t */\r\n+\tpublic void testFindComponentString() {\r\n+\r\n+\t\tUIInput input = createInputInTree(facesContext);\r\n+\r\n+\t\tUIComponent comp = input.findComponent(\":data:input\");\r\n+\r\n+\t\tassertEquals(input, comp);\r\n+\r\n+\t\tcomp = input.findComponent(\"input\");\r\n+\r\n+\t\tassertEquals(input, comp);\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacets()'\r\n+\t */\r\n+\tpublic void testGetFacets() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacet(String)'\r\n+\t */\r\n+\tpublic void testGetFacetString() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacetsAndChildren()'\r\n+\t */\r\n+\tpublic void testGetFacetsAndChildren() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.broadcast(FacesEvent)'\r\n+\t */\r\n+\tpublic void testBroadcastFacesEvent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.decode(FacesContext)'\r\n+\t */\r\n+\tpublic void testDecodeFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeBegin(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeBeginFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeChildren(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeChildrenFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.encodeEnd(FacesContext)'\r\n+\t */\r\n+\tpublic void testEncodeEndFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.addFacesListener(FacesListener)'\r\n+\t */\r\n+\tpublic void testAddFacesListenerFacesListener() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacesListeners(Class)'\r\n+\t */\r\n+\tpublic void testGetFacesListenersClass() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.removeFacesListener(FacesListener)'\r\n+\t */\r\n+\tpublic void testRemoveFacesListenerFacesListener() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.queueEvent(FacesEvent)'\r\n+\t */\r\n+\tpublic void testQueueEventFacesEvent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processDecodes(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessDecodesFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processValidators(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessValidatorsFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processUpdates(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessUpdatesFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processSaveState(FacesContext)'\r\n+\t */\r\n+\tpublic void testProcessSaveStateFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.processRestoreState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testProcessRestoreStateFacesContextObject() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getFacesContext()'\r\n+\t */\r\n+\tpublic void testGetFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getRenderer(FacesContext)'\r\n+\t */\r\n+\tpublic void testGetRendererFacesContext() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.getPathToComponent(UIComponent)'\r\n+\t */\r\n+\tpublic void testGetPathToComponent() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.isTransient()'\r\n+\t */\r\n+\tpublic void testIsTransient() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setTransient(boolean)'\r\n+\t */\r\n+\tpublic void testSetTransient() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.saveAttachedState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testSaveAttachedState() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.restoreAttachedState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testRestoreAttachedState() {\r\n+\r\n+\t}\r\n+\r\n+\tpublic void testSaveState() throws Exception {\r\n+\r\n+\t\ttry {\r\n+\t\t\tString id = \"id\";\r\n+\t\t\tString rendererType = \"Whumpy\";\r\n+\t\t\tmock.setId(id);\r\n+\t\t\tmock.setRendered(true);\r\n+\t\t\tmock.setRendererType(rendererType);\r\n+\t\t\tObject value[] = (Object[]) mock.saveState(facesContext);\r\n+\t\t\tassertEquals(id, value[0]);\r\n+\t\t\tassertEquals(Boolean.TRUE, value[1]);\r\n+\t\t\tassertEquals(rendererType, value[2]);\r\n+\r\n+\t\t\tassertNull(value[3]);\r\n+\t\t\tassertNull(value[4]);\r\n+\t\t\tassertNull(value[5]);\r\n+\t\t\tassertNull(value[6]);\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\tfail(\"Should not throw an exception\");\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.restoreState(FacesContext, Object)'\r\n+\t */\r\n+\tpublic void testRestoreState() {\r\n+\r\n+\t}\r\n+\r\n+\t/*\r\n+\t * Test method for 'javax.faces.component.UIComponentBase.setRendererType(String)'\r\n+\t */\r\n+\tpublic void testSetRendererType() {\r\n+\t\tassertNull(mock.getRendererType());\r\n+\t}\r\n+\r\n+\tpublic void testSetRendererTypeStringValue() {\r\n+\t\tString rendererType = \"BlueBlorf\";\r\n+\t\tmock.setRendererType(rendererType);\r\n+\t\tassertEquals(mock.getRendererType(), rendererType);\r\n+\t}\r\n+\r\n+\tpublic void testSetRendererTypeStringBinding() {\r\n+\r\n+\t\tString whumpy = \"Whumpy\";\r\n+\r\n+\t\tValueBinding vb = new MockValueBinding(application,\r\n+\t\t\t\t\"#{requestScope.foo}\");\r\n+\t\texternalContext.getRequestMap().put(\"foo\", whumpy);\r\n+\r\n+\t\tmock.setValueBinding(\"rendererType\", vb);\r\n+\t\tassertEquals(mock.getRendererType(), whumpy);\r\n+\r\n+\t}\r\n+\r\n+}\r",
                "deletions": 446
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3942 <f:viewParam binding> causes NPE because UIViewRoot is null",
        "commit": "https://github.com/apache/myfaces/commit/b55639231d7607e357249da0e7bbe80636898b44",
        "parent": "https://github.com/apache/myfaces/commit/5641cc7e41fec3969d5037da65faf7c420423456",
        "bug_id": "myfaces_64",
        "file": [
            {
                "sha": "3524383fb022ef627dbabbcd088967fa036fe72c",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/FaceletCompositionContext.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/FaceletCompositionContext.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/FaceletCompositionContext.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/FaceletCompositionContext.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -699,6 +699,15 @@ public boolean isDynamicComponentSection()\n         return false;\n     }\n     \n+    public UIViewRoot getViewRoot(FacesContext facesContext)\n+    {\n+        return facesContext.getViewRoot();\n+    }\n+    \n+    public void setViewRoot(UIViewRoot root)\n+    {\n+    }\n+    \n     public VisitContextFactory getVisitContextFactory()\n     {\n         return (VisitContextFactory)FactoryFinder.getFactory(FactoryFinder.VISIT_CONTEXT_FACTORY);",
                "deletions": 0
            },
            {
                "sha": "b0c0df75dee27a1b361f4daa5525697d92e47f35",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFacelet.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFacelet.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFacelet.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/impl/DefaultFacelet.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -159,6 +159,7 @@ public void apply(FacesContext facesContext, UIComponent parent) throws IOExcept\n             }\n             if (parent instanceof UIViewRoot)\n             {\n+                myFaceletContext.setViewRoot((UIViewRoot)parent);\n                 ComponentSupport.setCachedFacesContext((UIViewRoot)parent, facesContext);\n             }\n         }",
                "deletions": 0
            },
            {
                "sha": "62c4276f8cbf2e34ac131cdada0b45fc408d51d2",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/impl/FaceletCompositionContextImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/impl/FaceletCompositionContextImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/impl/FaceletCompositionContextImpl.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/impl/FaceletCompositionContextImpl.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -162,6 +162,7 @@\n     private List<Integer> _dynamicOldDeletionLevel;\n     \n     private VisitContextFactory _visitContextFactory = null;\n+    private UIViewRoot _viewRoot = null;\n     \n     public FaceletCompositionContextImpl(FaceletFactory factory, FacesContext facesContext)\n     {\n@@ -201,6 +202,7 @@ public FaceletCompositionContextImpl(FaceletFactory factory, FacesContext facesC\n         _isInMetadataSection = 0;\n         _sharedStringBuilder = null;\n         _ccLevel = 0;\n+        _viewRoot = null;\n     }\n     \n     /**\n@@ -291,6 +293,7 @@ public void release(FacesContext facesContext)\n         _sharedStringBuilder = null;\n         _visitContextFactory = null;\n         _dynamicOldDeletionLevel = null;\n+        _viewRoot = null;\n     }\n    \n     @Override\n@@ -1222,6 +1225,22 @@ public boolean isDynamicComponentSection()\n     {\n         return _dynamicComponentSection > 0;\n     }\n+\n+    @Override\n+    public void setViewRoot(UIViewRoot root)\n+    {\n+        this._viewRoot = root;\n+    }\n+\n+    @Override\n+    public UIViewRoot getViewRoot(FacesContext facesContext)\n+    {\n+        if (_viewRoot == null)\n+        {\n+            return facesContext.getViewRoot();\n+        }\n+        return _viewRoot;\n+    }\n     \n     @Override\n     public VisitContextFactory getVisitContextFactory()",
                "deletions": 0
            },
            {
                "sha": "1c20bc571583df5c9b1f48b60b0ddda6def31fe5",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/jsf/ComponentSupport.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -460,7 +460,12 @@ public static UIViewRoot getViewRoot(FaceletContext ctx, UIComponent parent)\n             }\n         } while (c != null);\n \n-        return ctx.getFacesContext().getViewRoot();\n+        UIViewRoot root = ctx.getFacesContext().getViewRoot();\n+        if (root == null)\n+        {\n+            root = FaceletCompositionContext.getCurrentInstance(ctx).getViewRoot(ctx.getFacesContext());\n+        }\n+        return root;\n     }\n     \n     /**",
                "deletions": 1
            },
            {
                "sha": "8c91bae5385fad2ae0651f191cce62375d52ebdb",
                "filename": "impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/AcidMyFacesRequestTestCase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/AcidMyFacesRequestTestCase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/AcidMyFacesRequestTestCase.java",
                "status": "modified",
                "changes": 50,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/AcidMyFacesRequestTestCase.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.myfaces.view.facelets.pss.acid;\n \n-import java.util.HashSet;\n import java.util.Set;\n import java.util.TreeSet;\n import javax.el.ExpressionFactory;\n@@ -28,13 +27,15 @@\n import javax.faces.component.UIInput;\n import javax.faces.component.UIOutput;\n import javax.faces.component.UIPanel;\n+import javax.faces.component.UIViewParameter;\n import javax.faces.component.html.HtmlDataTable;\n \n import org.apache.myfaces.mc.test.core.AbstractMyFacesRequestTestCase;\n import org.apache.myfaces.shared.config.MyfacesConfig;\n import org.apache.myfaces.test.mock.MockPrintWriter;\n import org.apache.myfaces.view.facelets.pss.acid.component.UISimpleComponent1;\n import org.apache.myfaces.view.facelets.pss.acid.managed.CheckActionEventBean;\n+import org.apache.myfaces.view.facelets.pss.acid.managed.ComponentBindingBean;\n import org.apache.myfaces.view.facelets.pss.acid.managed.ComponentBindingFormBean;\n import org.apache.myfaces.view.facelets.pss.acid.managed.CustomSessionBean;\n import org.apache.myfaces.view.facelets.pss.acid.managed.ForEachBean;\n@@ -595,6 +596,53 @@ public void testComponentBinding2() throws Exception\n         endRequest();\n     }    \n     \n+    @Test\n+    public void testViewParamBinding() throws Exception\n+    {\n+        startViewRequest(\"/viewParamBinding1.xhtml\");\n+        processLifecycleExecuteAndRender();\n+        \n+        UIComponent comp = facesContext.getViewRoot().findComponent(\"panel\");\n+        Assert.assertNotNull(comp);\n+        Assert.assertEquals(1, comp.getChildCount());\n+        \n+        UIViewParameter viewParam = (UIViewParameter) facesContext.getExternalContext().getRequestMap().get(\"foo\");\n+        Assert.assertNotNull(viewParam);\n+        Assert.assertEquals(\"foo\", viewParam.getName());\n+        UIViewParameter viewParam2 = facesContext.getApplication().evaluateExpressionGet(\n+                facesContext, \"#{componentBindingBean}\", ComponentBindingBean.class).getViewParam();\n+        Assert.assertNotNull(viewParam2);\n+        Assert.assertEquals(\"foo2\", viewParam2.getName());\n+        \n+        UICommand button = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:postback\");\n+        client.submit(button);\n+        processLifecycleExecuteAndRender();\n+        Assert.assertNotNull(comp);\n+        // Even if in the postback two components were added, pss algorithm must replace the\n+        // component with the one saved.\n+        Assert.assertEquals(1, comp.getChildCount());\n+        \n+        comp = facesContext.getViewRoot().findComponent(\"panel\");\n+        \n+        Assert.assertEquals(\"value1\", comp.getAttributes().get(\"attr1\"));\n+        Assert.assertEquals(\"value2\", comp.getChildren().get(0).getAttributes().get(\"attr2\"));\n+        \n+        button = (UICommand) facesContext.getViewRoot().findComponent(\"mainForm:postback\");\n+        client.submit(button);\n+        processLifecycleExecuteAndRender();\n+\n+        comp = facesContext.getViewRoot().findComponent(\"panel\");\n+        Assert.assertNotNull(comp);\n+        // Even if in the postback two components were added, pss algorithm must replace the\n+        // component with the one saved.\n+        Assert.assertEquals(1, comp.getChildCount());\n+        \n+        Assert.assertEquals(\"value1\", comp.getAttributes().get(\"attr1\"));\n+        Assert.assertEquals(\"value2\", comp.getChildren().get(0).getAttributes().get(\"attr2\"));\n+        \n+        endRequest();\n+    }    \n+    \n     @Test\n     public void testDynamicForm() throws Exception\n     {",
                "deletions": 1
            },
            {
                "sha": "e7ee0bc757026085d7b37535234c1a1124f2512e",
                "filename": "impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/managed/ComponentBindingBean.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/managed/ComponentBindingBean.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/managed/ComponentBindingBean.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/view/facelets/pss/acid/managed/ComponentBindingBean.java?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -22,6 +22,7 @@\n import javax.faces.bean.RequestScoped;\n import javax.faces.component.UIOutput;\n import javax.faces.component.UIPanel;\n+import javax.faces.component.UIViewParameter;\n import javax.faces.component.html.HtmlPanelGroup;\n import javax.faces.context.FacesContext;\n \n@@ -35,6 +36,8 @@\n {\n     private UIPanel panel;\n     \n+    private UIViewParameter viewParam;\n+    \n     public UIPanel getPanel()\n     {\n         if (panel == null)\n@@ -72,4 +75,20 @@ public void setPanel(UIPanel panel)\n     {\n         this.panel = panel;\n     }\n+\n+    /**\n+     * @return the viewParam\n+     */\n+    public UIViewParameter getViewParam()\n+    {\n+        return viewParam;\n+    }\n+\n+    /**\n+     * @param viewParam the viewParam to set\n+     */\n+    public void setViewParam(UIViewParameter viewParam)\n+    {\n+        this.viewParam = viewParam;\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "4598d75bdc7a0f51f0013f4e12ee4182fccc2a72",
                "filename": "impl/src/test/resources/org/apache/myfaces/view/facelets/pss/acid/viewParamBinding1.xhtml",
                "blob_url": "https://github.com/apache/myfaces/blob/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/resources/org/apache/myfaces/view/facelets/pss/acid/viewParamBinding1.xhtml",
                "raw_url": "https://github.com/apache/myfaces/raw/b55639231d7607e357249da0e7bbe80636898b44/impl/src/test/resources/org/apache/myfaces/view/facelets/pss/acid/viewParamBinding1.xhtml",
                "status": "added",
                "changes": 32,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/resources/org/apache/myfaces/view/facelets/pss/acid/viewParamBinding1.xhtml?ref=b55639231d7607e357249da0e7bbe80636898b44",
                "patch": "@@ -0,0 +1,32 @@\n+<?xml version='1.0' encoding='UTF-8' ?>\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"\n+    xmlns:h=\"http://java.sun.com/jsf/html\"\n+    xmlns:f=\"http://java.sun.com/jsf/core\"\n+    xmlns:ui=\"http://java.sun.com/jsf/facelets\">\n+<f:metadata>\n+    <f:viewParam name=\"foo\" binding=\"#{foo}\"/>\n+    <f:viewParam name=\"foo2\" binding=\"#{componentBindingBean.viewParam}\"/>\n+</f:metadata>\n+<h:head>\n+</h:head>\n+<h:body>\n+  <h:panelGroup id=\"panel\" binding=\"#{componentBindingBean.panel}\"/>\n+  <h:form id=\"mainForm\">\n+     <h:commandButton id=\"postback\" value=\"POSTBACK\"/>\n+  </h:form>\n+</h:body>\n+</html>\n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3913 NPE in SwitchAjaxExceptionHandlerWrapperImpl (Thanks to Thomas Andraschko for provide this patch)",
        "commit": "https://github.com/apache/myfaces/commit/2fe9f03def23d90ea335e16c03c3febfc9f6e02e",
        "parent": "https://github.com/apache/myfaces/commit/541dc6eae66b4b979223ea426f8ec9342537e9e4",
        "bug_id": "myfaces_65",
        "file": [
            {
                "sha": "d80a94e5845cb7b7f657c225e140cc6928909c63",
                "filename": "shared/src/main/java/org/apache/myfaces/shared/context/SwitchAjaxExceptionHandlerWrapperImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/2fe9f03def23d90ea335e16c03c3febfc9f6e02e/shared/src/main/java/org/apache/myfaces/shared/context/SwitchAjaxExceptionHandlerWrapperImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/2fe9f03def23d90ea335e16c03c3febfc9f6e02e/shared/src/main/java/org/apache/myfaces/shared/context/SwitchAjaxExceptionHandlerWrapperImpl.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/shared/src/main/java/org/apache/myfaces/shared/context/SwitchAjaxExceptionHandlerWrapperImpl.java?ref=2fe9f03def23d90ea335e16c03c3febfc9f6e02e",
                "patch": "@@ -21,6 +21,7 @@\n import javax.faces.context.ExceptionHandler;\n import javax.faces.context.ExceptionHandlerWrapper;\n import javax.faces.context.FacesContext;\n+import javax.faces.context.PartialViewContext;\n import javax.faces.event.AbortProcessingException;\n import javax.faces.event.ExceptionQueuedEvent;\n import javax.faces.event.ExceptionQueuedEventContext;\n@@ -82,7 +83,12 @@ protected boolean isAjaxRequest(FacesContext facesContext)\n         if (_isAjaxRequest == null)\n         {\n             facesContext = (facesContext == null) ? FacesContext.getCurrentInstance() : facesContext;\n-            _isAjaxRequest = facesContext.getPartialViewContext().isAjaxRequest();\n+            PartialViewContext pvc = facesContext.getPartialViewContext();\n+            if (pvc == null)\n+            {\n+                return false;\n+            }\n+            _isAjaxRequest = pvc.isAjaxRequest();\n         }\n         return _isAjaxRequest;\n     }\n@@ -92,7 +98,12 @@ protected boolean isAjaxRequest()\n         if (_isAjaxRequest == null)\n         {\n             FacesContext facesContext = FacesContext.getCurrentInstance();\n-            _isAjaxRequest = facesContext.getPartialViewContext().isAjaxRequest();\n+            PartialViewContext pvc = facesContext.getPartialViewContext();\n+            if (pvc == null)\n+            {\n+                return false;\n+            }\n+            _isAjaxRequest = pvc.isAjaxRequest();\n         }\n         return _isAjaxRequest;\n     }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3613 NPE in composite component when ActionListener is missing in the source",
        "commit": "https://github.com/apache/myfaces/commit/b6860c118bb23acf11f1b473ebc7bea32a53d681",
        "parent": "https://github.com/apache/myfaces/commit/bb910064618bc93f7eca0abe884fee69a6917555",
        "bug_id": "myfaces_66",
        "file": [
            {
                "sha": "6ab7a6a2a9e479d733e3921dd9f6c7a5f421dc29",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/el/ValueExpressionMethodExpression.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b6860c118bb23acf11f1b473ebc7bea32a53d681/impl/src/main/java/org/apache/myfaces/view/facelets/el/ValueExpressionMethodExpression.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b6860c118bb23acf11f1b473ebc7bea32a53d681/impl/src/main/java/org/apache/myfaces/view/facelets/el/ValueExpressionMethodExpression.java",
                "status": "modified",
                "changes": 45,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/el/ValueExpressionMethodExpression.java?ref=b6860c118bb23acf11f1b473ebc7bea32a53d681",
                "patch": "@@ -59,19 +59,44 @@ public ValueExpressionMethodExpression(ValueExpression valueExpression)\n     @Override\n     public MethodInfo getMethodInfo(ELContext context)\n     {\n-        return getMethodExpression(context).getMethodInfo(context);\n+        MethodExpression me = getMethodExpression(context);\n+        if (me != null)\n+        {\n+            return me.getMethodInfo(context);\n+        }\n+        return null;\n     }\n \n     @Override\n     public Object invoke(ELContext context, Object[] params)\n     {\n-        return getMethodExpression(context).invoke(context, params);\n+        MethodExpression me = getMethodExpression(context);\n+        if (me != null)\n+        {        \n+            return me.invoke(context, params);\n+        }\n+        return null;\n     }\n \n     @Override\n     public boolean equals(Object obj)\n     {\n-        return getMethodExpression().equals(obj);\n+        MethodExpression me = getMethodExpression();\n+        if (me != null)\n+        {        \n+            return me.equals(obj);\n+        }\n+        if (!(obj instanceof ValueExpressionMethodExpression))\n+        {\n+            return false;\n+        }\n+        ValueExpressionMethodExpression other = (ValueExpressionMethodExpression) obj;\n+        if ((this.valueExpression == null && other.valueExpression != null) || \n+             (this.valueExpression != null && !this.valueExpression.equals(other.valueExpression)))\n+        {\n+            return false;\n+        }\n+        return true;\n     }\n \n     @Override\n@@ -84,13 +109,23 @@ public String getExpressionString()\n     @Override\n     public int hashCode()\n     {\n-        return getMethodExpression().hashCode();\n+        MethodExpression me = getMethodExpression();\n+        if (me != null)\n+        {        \n+            return me.hashCode();\n+        }\n+        return valueExpression.hashCode();\n     }\n \n     @Override\n     public boolean isLiteralText()\n     {\n-        return getMethodExpression().isLiteralText();\n+        MethodExpression me = getMethodExpression();\n+        if (me != null)\n+        {\n+            return me.isLiteralText();\n+        }\n+        return valueExpression.isLiteralText();\n     }\n     \n     private MethodExpression getMethodExpression()",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2663 NPE in UIParameter when value resolves to null (test cases from patch)",
        "commit": "https://github.com/apache/myfaces/commit/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
        "parent": "https://github.com/apache/myfaces/commit/975adb4389509c43a6536f60419e2885aa625430",
        "bug_id": "myfaces_67",
        "file": [
            {
                "sha": "fc5ec9bdff78daa058c8455352916507dbf9a756",
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java",
                "status": "modified",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlLinkRendererTest.java?ref=4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
                "patch": "@@ -397,4 +397,53 @@ public void testDisabledUIParameterNotRenderedOutputLink() throws Exception\n         assertTrue(output.contains(\"param2\"));\n         assertTrue(output.contains(\"value2\"));\n     }\n+    \n+    /**\n+     * Tests if the h:link correctly includes an UIParameter\n+     * with a non-null-name when creating the URL.\n+     */\n+    public void testOutcomeTargetLinkIncludesUIParameterInURL()\n+    {\n+        // create the UIParameter and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myParameter\");\n+        param.setValue(\"myValue\");\n+        outcomeTargetLink.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetLink.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertTrue(output.contains(\"myParameter=myValue\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+    /**\n+     * Tests if the h:link correctly skips an UIParameter\n+     * with a null-name when creating the URL.\n+     */\n+    public void testOutcomeTargetLinkSkipsNullValueOfUIParameterInURL()\n+    {\n+        // create the UIParameter with value = null and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myNullParameter\");\n+        param.setValue(null);\n+        outcomeTargetLink.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetLink.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertFalse(output.contains(\"myNullParameter\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "002b55839d1de68f40f77ff935280e84978d9569",
                "filename": "impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java",
                "status": "modified",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/test/java/org/apache/myfaces/renderkit/html/HtmlOutcomeTargetButtonRendererTest.java?ref=4bfe5e214adde2bd5387c1fb7e148d6ddb47f2c9",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.io.StringWriter;\n \n+import javax.faces.component.UIParameter;\n import javax.faces.component.behavior.AjaxBehavior;\n import javax.faces.component.html.HtmlForm;\n import javax.faces.component.html.HtmlOutcomeTargetButton;\n@@ -32,6 +33,12 @@\n import org.apache.myfaces.test.mock.MockRenderKitFactory;\n import org.apache.myfaces.test.mock.MockResponseWriter;\n \n+/**\n+ * Tests for HtmlOutcomeTargetButtonRenderer.\n+ * \n+ * @author Jakob Korherr (latest modification by $Author$)\n+ * @version $Revision$ $Date$\n+ */\n public class HtmlOutcomeTargetButtonRendererTest extends AbstractJsfTestCase \n {\n \n@@ -142,4 +149,52 @@ public void testFragment() throws Exception\n         assertTrue(output.contains(\"param1=value1#\" + fragment));\n     }\n     \n+    /**\n+     * Tests if the h:button correctly includes an UIParameter\n+     * with a non-null-name when creating the URL.\n+     */\n+    public void testIncludesUIParameterInURL()\n+    {\n+        // create the UIParameter and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myParameter\");\n+        param.setValue(\"myValue\");\n+        outcomeTargetButton.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetButton.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertTrue(output.contains(\"myParameter=myValue\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n+    /**\n+     * Tests if the h:button correctly skips an UIParameter\n+     * with a null-name when creating the URL.\n+     */\n+    public void testSkipsNullValueOfUIParameterInURL()\n+    {\n+        // create the UIParameter with value = null and attach it\n+        UIParameter param = new UIParameter();\n+        param.setName(\"myNullParameter\");\n+        param.setValue(null);\n+        outcomeTargetButton.getChildren().add(param);\n+        \n+        try\n+        {\n+            outcomeTargetButton.encodeAll(facesContext);\n+            String output = ((StringWriter) writer.getWriter()).getBuffer().toString();\n+            assertFalse(output.contains(\"myNullParameter\"));\n+        }\n+        catch (Exception e)\n+        {\n+            fail(e.getMessage());\n+        }\n+    }\n+    \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2636 - fix NPE in bean validation when there is no valueExpression binding.",
        "commit": "https://github.com/apache/myfaces/commit/a685b484262a21baa79485ffd062446dee9ecb87",
        "parent": "https://github.com/apache/myfaces/commit/c45be944b278f8125fb578ce390faf10be5950ac",
        "bug_id": "myfaces_68",
        "file": [
            {
                "sha": "5e24041a59e43bd17fee263b1f85dd6493a108d1",
                "filename": "api/src/main/java/javax/faces/validator/BeanValidator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a685b484262a21baa79485ffd062446dee9ecb87/api/src/main/java/javax/faces/validator/BeanValidator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a685b484262a21baa79485ffd062446dee9ecb87/api/src/main/java/javax/faces/validator/BeanValidator.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/BeanValidator.java?ref=a685b484262a21baa79485ffd062446dee9ecb87",
                "patch": "@@ -510,6 +510,11 @@ public final Object getProperty()\n      */\n     public static _ValueReferenceWrapper resolve(ValueExpression valueExpression, final ELContext elCtx)\n     {\n+        if(valueExpression == null)\n+        {\n+            return null;\n+        }\n+        \n         final _ValueReferenceResolver resolver = new _ValueReferenceResolver(elCtx.getELResolver());\n         final ELContext elCtxDecorator = new _ELContextDecorator(elCtx, resolver);\n         ",
                "deletions": 0
            },
            {
                "sha": "8d23f3e54ea571d286ba8f922d3453010bf45c6f",
                "filename": "api/src/main/java/javax/faces/validator/_BeanValidatorUELUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a685b484262a21baa79485ffd062446dee9ecb87/api/src/main/java/javax/faces/validator/_BeanValidatorUELUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a685b484262a21baa79485ffd062446dee9ecb87/api/src/main/java/javax/faces/validator/_BeanValidatorUELUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/_BeanValidatorUELUtils.java?ref=a685b484262a21baa79485ffd062446dee9ecb87",
                "patch": "@@ -44,6 +44,11 @@\n      */\n     public static _ValueReferenceWrapper getUELValueReferenceWrapper(ValueExpression valueExpression, final ELContext elCtx)\n     {\n+        if(valueExpression == null)\n+        {\n+            return null;\n+        }\n+                \n         ValueReference valueReference = valueExpression.getValueReference(elCtx);\n         \n         while (valueReference != null ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2607 Ugly NPE in CompositeFunctionMapper.resolveFunction() if second FunctionMapper is null",
        "commit": "https://github.com/apache/myfaces/commit/b1f4c89714c3122dd8ccdc721755bc2c97202068",
        "parent": "https://github.com/apache/myfaces/commit/a4371731b02b1108aee272329c190686a6cdd8dc",
        "bug_id": "myfaces_69",
        "file": [
            {
                "sha": "38545d4774f428fe03df3c2478036d233c189d0a",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b1f4c89714c3122dd8ccdc721755bc2c97202068/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b1f4c89714c3122dd8ccdc721755bc2c97202068/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java?ref=b1f4c89714c3122dd8ccdc721755bc2c97202068",
                "patch": "@@ -51,7 +51,7 @@ public CompositeFunctionMapper(FunctionMapper fn0, FunctionMapper fn1)\n     public Method resolveFunction(String prefix, String name)\r\n     {\r\n         Method m = this.fn0.resolveFunction(prefix, name);\r\n-        if (m == null)\r\n+        if (m == null && this.fn1 != null)\r\n         {\r\n             return this.fn1.resolveFunction(prefix, name);\r\n         }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2508 - saveState()/restoreState() need to throw NPEs if args are null.",
        "commit": "https://github.com/apache/myfaces/commit/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b",
        "parent": "https://github.com/apache/myfaces/commit/1b73275b33c07aad3f103a5db9405aabe1678797",
        "bug_id": "myfaces_70",
        "file": [
            {
                "sha": "ce78efc87bcc3c20383d4f293115377af6eecd9f",
                "filename": "api/src/main/java/javax/faces/component/UIComponentBase.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b/api/src/main/java/javax/faces/component/UIComponentBase.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b/api/src/main/java/javax/faces/component/UIComponentBase.java",
                "status": "modified",
                "changes": 22,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIComponentBase.java?ref=0f8e87cd65fb2825d5b24dc41cf1d62b7fd5aa8b",
                "patch": "@@ -1416,6 +1416,11 @@ public void setTransient(boolean transientFlag)\n      */\n     public static Object saveAttachedState(FacesContext context, Object attachedObject)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (attachedObject == null)\n             return null;\n         // StateHolder interface should take precedence over\n@@ -1506,6 +1511,11 @@ else if (stateObj instanceof _AttachedStateWrapper)\n      */\n     public Object saveState(FacesContext context)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (initialStateMarked())\n         {\n             //Delta\n@@ -1559,10 +1569,20 @@ public Object saveState(FacesContext context)\n     @SuppressWarnings(\"unchecked\")\n     public void restoreState(FacesContext context, Object state)\n     {\n+        if (context == null)\n+        {\n+            throw new NullPointerException (\"context\");\n+        }\n+        \n         if (state == null)\n         {\n             //Only happens if initialStateMarked return true\n-            return;\n+            //return;\n+            \n+            // Commenting the above out because Javadocs say that we need to\n+            // throw an NPE here.\n+            \n+            throw new NullPointerException (\"state\");\n         }\n         \n         Object values[] = (Object[]) state;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "https://issues.apache.org/jira/browse/MYFACES-1755\ncreate converter with unknown id fails with NPE",
        "commit": "https://github.com/apache/myfaces/commit/319f522066f1c096db6fd305754be0083cbe606a",
        "parent": "https://github.com/apache/myfaces/commit/6cfc33845af48302b19552a1e9573c2f6c009373",
        "bug_id": "myfaces_71",
        "file": [
            {
                "sha": "af73a7072234a2119b1cf482ff4034f5886233fd",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/319f522066f1c096db6fd305754be0083cbe606a/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/319f522066f1c096db6fd305754be0083cbe606a/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java?ref=319f522066f1c096db6fd305754be0083cbe606a",
                "patch": "@@ -71,7 +71,7 @@\n \n /**\n  * DOCUMENT ME!\n- * \n+ *\n  * @author Manfred Geiler (latest modification by $Author$)\n  * @author Anton Koinov\n  * @author Thomas Spiegl\n@@ -669,8 +669,12 @@ public Converter createConverter(String converterId)\n         checkEmpty(converterId, \"converterId\");\n \n         Class converterClass = _converterIdToClassMap.get(converterId);\n+        if(converterClass == null)\n+        {\n+            throw new FacesException(\"Could not find any registered converter-class by converterId : \"+converterId);\n+        }\n \n-        try\n+\t\ttry\n         {\n             Converter converter = (Converter) converterClass.newInstance();\n \n@@ -703,7 +707,7 @@ private Converter internalCreateConverter(Class targetClass)\n         if (converterClassName == null && targetClass.isEnum()) {\n         \tconverterClassName = _converterClassNameToClassMap.get(Enum.class);\n         }\n-        \n+\n         // Locate a Converter registered for interfaces that are\n         // implemented by the target class (directly or indirectly).\n         if (converterClassName == null)",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-1752: fix NPE with tags like t:htmlTag. Please review.",
        "commit": "https://github.com/apache/myfaces/commit/0e634abe18cadfeb802c9716b4ee8301516d3b04",
        "parent": "https://github.com/apache/myfaces/commit/5cd546d6bc8fbb39f7d01c9bbe9e20a4af50d831",
        "bug_id": "myfaces_72",
        "file": [
            {
                "sha": "b36aec2acccd056a26d0f0e0e26223b35c57a334",
                "filename": "api/src/main/java/javax/faces/webapp/UIComponentTag.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0e634abe18cadfeb802c9716b4ee8301516d3b04/api/src/main/java/javax/faces/webapp/UIComponentTag.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0e634abe18cadfeb802c9716b4ee8301516d3b04/api/src/main/java/javax/faces/webapp/UIComponentTag.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/webapp/UIComponentTag.java?ref=0e634abe18cadfeb802c9716b4ee8301516d3b04",
                "patch": "@@ -143,6 +143,7 @@ protected UIComponent createComponent(FacesContext context, String id)\n \n         UIComponent component = context.getApplication().createComponent(componentType);\n         component.setId(id);\n+        setProperties(component);\n \n         return component;\n         ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "void NPE if there is no ViewRoot which  might happen in the restore phase",
        "commit": "https://github.com/apache/myfaces/commit/77a610556326ec9207cab72696ca4d51f0c9073d",
        "parent": "https://github.com/apache/myfaces/commit/25cea8cc6a0ad4956c7ccc6686a5aac3d02df2e2",
        "bug_id": "myfaces_73",
        "file": [
            {
                "sha": "23df0defbc57645e6726479baca2890e7f42a9b4",
                "filename": "api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "blob_url": "https://github.com/apache/myfaces/blob/77a610556326ec9207cab72696ca4d51f0c9073d/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "raw_url": "https://github.com/apache/myfaces/raw/77a610556326ec9207cab72696ca4d51f0c9073d/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/webapp/_ErrorPageWriter.java?ref=77a610556326ec9207cab72696ca4d51f0c9073d",
                "patch": "@@ -132,7 +132,9 @@ public static void debugHtml(Writer writer, FacesContext faces, Exception e) thr\n             } else if (\"now\".equals(ERROR_PARTS[i])) {\r\n                 writer.write(DateFormat.getDateTimeInstance().format(now));\r\n             } else if (\"tree\".equals(ERROR_PARTS[i])) {\r\n-                writeComponent(writer, faces.getViewRoot(), getErrorId(e));\r\n+                if (faces.getViewRoot() != null) {\r\n+                    writeComponent(writer, faces.getViewRoot(), getErrorId(e));\r\n+                }\r\n             } else if (\"vars\".equals(ERROR_PARTS[i])) {\r\n                 writeVariables(writer, faces);\r\n             } else if (\"cause\".equals(ERROR_PARTS[i])) {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-1231 , SelectItem no longer throws NPE per 1.2 spec",
        "commit": "https://github.com/apache/myfaces/commit/b8f8d15cf955a92231413137455d7c08af06fd33",
        "parent": "https://github.com/apache/myfaces/commit/09d903e826bfc04e7b973046dece3810d5b2e340",
        "bug_id": "myfaces_74",
        "file": [
            {
                "sha": "e67168afbc2095b6c008a7a6eafdd9e83d216855",
                "filename": "api/src/main/java/javax/faces/model/SelectItem.java",
                "blob_url": "https://github.com/apache/myfaces/blob/b8f8d15cf955a92231413137455d7c08af06fd33/api/src/main/java/javax/faces/model/SelectItem.java",
                "raw_url": "https://github.com/apache/myfaces/raw/b8f8d15cf955a92231413137455d7c08af06fd33/api/src/main/java/javax/faces/model/SelectItem.java",
                "status": "modified",
                "changes": 13,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/model/SelectItem.java?ref=b8f8d15cf955a92231413137455d7c08af06fd33",
                "patch": "@@ -40,17 +40,14 @@ public SelectItem()\n \n     public SelectItem(Object value)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n         _value = value;\n-        _label = value.toString();\n+        _label = value == null ? null : value.toString();\n         _description = null;\n         _disabled = false;\n     }\n \n     public SelectItem(Object value, String label)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n-        if (label == null) throw new NullPointerException(\"label\");\n         _value = value;\n         _label = label;\n         _description = null;\n@@ -59,8 +56,6 @@ public SelectItem(Object value, String label)\n \n     public SelectItem(Object value, String label, String description)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n-        if (label == null) throw new NullPointerException(\"label\");\n         _value = value;\n         _label = label;\n         _description = description;\n@@ -69,8 +64,6 @@ public SelectItem(Object value, String label, String description)\n \n     public SelectItem(Object value, String label, String description, boolean disabled)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n-        if (label == null) throw new NullPointerException(\"label\");\n         _value = value;\n         _label = label;\n         _description = description;\n@@ -79,8 +72,6 @@ public SelectItem(Object value, String label, String description, boolean disabl\n \n     public SelectItem(Object value, String label, String description, boolean disabled, boolean escape)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n-        if (label == null) throw new NullPointerException(\"label\");\n         _value = value;\n         _label = label;\n         _description = description;\n@@ -116,7 +107,6 @@ public String getLabel()\n \n     public void setLabel(String label)\n     {\n-        if (label == null) throw new NullPointerException(\"label\");\n         _label = label;\n     }\n \n@@ -127,7 +117,6 @@ public Object getValue()\n \n     public void setValue(Object value)\n     {\n-        if (value == null) throw new NullPointerException(\"value\");\n         _value = value;\n     }\n ",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3638 NPE in ServerSideStateCacheImpl (apply alternate fix, just with a check for null before viewId.hashCode() call)",
        "commit": "https://github.com/apache/myfaces/commit/0ac6a86fc96040684af5b6f72a1f867e361de8ac",
        "parent": "https://github.com/apache/myfaces/commit/4a0ccf78b27b3ea959cf3bb06008c72902963360",
        "bug_id": "myfaces_75",
        "file": [
            {
                "sha": "1efef3b2bfd48af0846dfb8b1dbeebdaef42a18e",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/0ac6a86fc96040684af5b6f72a1f867e361de8ac/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/0ac6a86fc96040684af5b6f72a1f867e361de8ac/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java?ref=0ac6a86fc96040684af5b6f72a1f867e361de8ac",
                "patch": "@@ -1410,7 +1410,7 @@ public SerializedViewKey createSerializedViewKey(\n         {\n             if (context.isProjectStage(ProjectStage.Production))\n             {\n-                return new IntIntSerializedViewKey(viewId.hashCode(), key);\n+                return new IntIntSerializedViewKey(viewId == null ? 0 : viewId.hashCode(), key);\n             }\n             else\n             {\n@@ -1440,7 +1440,7 @@ public SerializedViewKey createSerializedViewKey(\n         {\n             if (context.isProjectStage(ProjectStage.Production))\n             {\n-                return new IntByteArraySerializedViewKey(viewId.hashCode(), key);\n+                return new IntByteArraySerializedViewKey(viewId == null ? 0 : viewId.hashCode(), key);\n             }\n             else\n             {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3434 UIInput.resetValue() throws NPE when no FacesContext available (Thanks to Martin Koci for provide this patch)",
        "commit": "https://github.com/apache/myfaces/commit/75995807f8c55cede8399655ebfe8d0701c4054d",
        "parent": "https://github.com/apache/myfaces/commit/76c9ee4335c0210df8c84fcaee584d5e657aa332",
        "bug_id": "myfaces_76",
        "file": [
            {
                "sha": "6002040eb0eb22252c6de3a5ff4eb6a46df24ae4",
                "filename": "api/src/main/java/javax/faces/component/UIInput.java",
                "blob_url": "https://github.com/apache/myfaces/blob/75995807f8c55cede8399655ebfe8d0701c4054d/api/src/main/java/javax/faces/component/UIInput.java",
                "raw_url": "https://github.com/apache/myfaces/raw/75995807f8c55cede8399655ebfe8d0701c4054d/api/src/main/java/javax/faces/component/UIInput.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/UIInput.java?ref=75995807f8c55cede8399655ebfe8d0701c4054d",
                "patch": "@@ -123,10 +123,11 @@ public String getFamily()\n     @Override\n     public void setValue(Object value)\n     {\n-        if (getFacesContext().isProjectStage(ProjectStage.Development))\n+        FacesContext facesContext = getFacesContext();\n+        if (facesContext != null && facesContext.isProjectStage(ProjectStage.Development))\n         {\n             // extended debug-info when in Development mode\n-            _createFieldDebugInfo(getFacesContext(), \"localValue\",\n+            _createFieldDebugInfo(facesContext, \"localValue\",\n                     getLocalValue(), value, 1);\n         }\n         setLocalValueSet(true);\n@@ -921,10 +922,11 @@ public Object getSubmittedValue()\n \n     public void setSubmittedValue(Object submittedValue)\n     {\n-        if (getFacesContext().isProjectStage(ProjectStage.Development))\n+        FacesContext facesContext = getFacesContext();\n+        if (facesContext != null && facesContext.isProjectStage(ProjectStage.Development))\n         {\n             // extended debug-info when in Development mode\n-            _createFieldDebugInfo(getFacesContext(), \"submittedValue\",\n+            _createFieldDebugInfo(facesContext, \"submittedValue\",\n                     getSubmittedValue(), submittedValue, 1);\n         }\n         getStateHelper().put(PropertyKeys.submittedValue, submittedValue );",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3472 NavigationHandler throws a NPE if current viewId is null (Thanks to Marcus B\u00fcttner for provide this patch)",
        "commit": "https://github.com/apache/myfaces/commit/2777a153a593dd47e423345b21b6e737ff573905",
        "parent": "https://github.com/apache/myfaces/commit/44e3b66885efc12f558c35dfaedf5987351437e5",
        "bug_id": "myfaces_77",
        "file": [
            {
                "sha": "45b89b0f83048056eb534b6881e74d1dfcd2a08f",
                "filename": "impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/2777a153a593dd47e423345b21b6e737ff573905/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/2777a153a593dd47e423345b21b6e737ff573905/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/NavigationHandlerImpl.java?ref=2777a153a593dd47e423345b21b6e737ff573905",
                "patch": "@@ -120,7 +120,7 @@ public void handleNavigation(FacesContext facesContext, String fromAction, Strin\n                 \n                 //Clear ViewMap if we are redirecting to other resource\n                 UIViewRoot viewRoot = facesContext.getViewRoot(); \n-                if (viewRoot != null && !viewRoot.getViewId().equals(toViewId))\n+                if (viewRoot != null && !toViewId.equals(viewRoot.getViewId()))\n                 {\n                     //call getViewMap(false) to prevent unnecessary map creation\n                     Map<String, Object> viewMap = viewRoot.getViewMap(false);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3433 PhaseListenerManager throws NPE if pre-phase action was unsuccessful (Thanks to Martin Koci for provide this patch)",
        "commit": "https://github.com/apache/myfaces/commit/bd6a8ec8197c39448649412e0e72edbf710e41e0",
        "parent": "https://github.com/apache/myfaces/commit/c8024c846f9d2e6dec585eab0f0d0019df23aa1a",
        "bug_id": "myfaces_78",
        "file": [
            {
                "sha": "7ac4ff14b83d3b0976b1f4ae13481ec033df9824",
                "filename": "impl/src/main/java/org/apache/myfaces/lifecycle/PhaseListenerManager.java",
                "blob_url": "https://github.com/apache/myfaces/blob/bd6a8ec8197c39448649412e0e72edbf710e41e0/impl/src/main/java/org/apache/myfaces/lifecycle/PhaseListenerManager.java",
                "raw_url": "https://github.com/apache/myfaces/raw/bd6a8ec8197c39448649412e0e72edbf710e41e0/impl/src/main/java/org/apache/myfaces/lifecycle/PhaseListenerManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/lifecycle/PhaseListenerManager.java?ref=bd6a8ec8197c39448649412e0e72edbf710e41e0",
                "patch": "@@ -94,6 +94,12 @@ void informPhaseListenersBefore(PhaseId phaseId)\n     void informPhaseListenersAfter(PhaseId phaseId)\n     {\n         boolean[] beforePhaseSuccess = listenerSuccessMap.get(phaseId);\n+        \n+        if (beforePhaseSuccess == null)\n+        {\n+            // informPhaseListenersBefore method was not called : maybe an exception in LifecycleImpl.executePhase  \n+            return;\n+        }\n \n         PhaseEvent event = null;\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2826 NPE when using the new UEL inside a composite component in Glassfish 3.0.1",
        "commit": "https://github.com/apache/myfaces/commit/191ac012f4332c903ae911df7e288309d21ecaf3",
        "parent": "https://github.com/apache/myfaces/commit/638bdb2154b91cd75535b469061b746378a3f0e9",
        "bug_id": "myfaces_79",
        "file": [
            {
                "sha": "101b0e324046e2f49fbb306e29a3730850493634",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeComponentELUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/191ac012f4332c903ae911df7e288309d21ecaf3/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeComponentELUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/191ac012f4332c903ae911df7e288309d21ecaf3/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeComponentELUtils.java",
                "status": "modified",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeComponentELUtils.java?ref=191ac012f4332c903ae911df7e288309d21ecaf3",
                "patch": "@@ -56,6 +56,21 @@\n      */\n     public static final String CC_EXPRESSION_REGEX = \".*[^\\\\w\\\\.]cc[^\\\\w].*\";\n     \n+    /**\n+     * A regular expression used to determine if cc.attrs is used as a method expression\n+     * in an expression String. This means cc.attrs must occur, must stand before a '(',\n+     * because otherwise it would be a method parameter (EL 2.2), and there must be no '.' after\n+     * cc.attrs unless there is a left parenthesis before it (e.g. #{cc.attrs.method(bean.parameter)}).\n+     * \n+     * Explanation of the parts:\n+     * - [^\\\\(]* - There can be any character except a '(' before cc.attrs\n+     * - [^\\\\w\\\\.\\\\(] - There must be no word character, dot, or left parenthesis directly before cc.attrs\n+     * - cc\\\\.attrs\\\\. - \"cc.attrs.\" must occur\n+     * - [^\\\\.]* - There must be no dot after cc.attrs to indicate a method invocation on cc.attrs\n+     * - (\\\\(.*)? - If there is a left paranthesis after cc.attrs, a dot is allowed again\n+     */\n+    public static final String CC_ATTRS_METHOD_EXPRESSION_REGEX = \"[^\\\\(]*[^\\\\w\\\\.\\\\(]cc\\\\.attrs\\\\.[^\\\\.]*(\\\\(.*)?\";\n+    \n     /**\n      * private constructor\n      */\n@@ -154,4 +169,17 @@ public static boolean isCompositeComponentExpression(String expression)\n         return expression.matches(CC_EXPRESSION_REGEX);\n     }\n     \n+    /**\n+     * Tests if cc.attrs is used as a method expression in an expression String. This means \n+     * cc.attrs must occur, must stand before a '(', because otherwise it would be a method parameter \n+     * (EL 2.2), and there must be no '.' after cc.attrs unless there is a left parenthesis\n+     * before it (e.g. #{cc.attrs.method(bean.parameter)}).\n+     * @param expression\n+     * @return\n+     */\n+    public static boolean isCompositeComponentAttrsMethodExpression(String expression)\n+    {\n+        return expression.matches(CC_ATTRS_METHOD_EXPRESSION_REGEX);\n+    }\n+    \n }",
                "deletions": 0
            },
            {
                "sha": "197395f3ac2583a968b09950e01958fdf4d2f271",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/TagAttributeImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/191ac012f4332c903ae911df7e288309d21ecaf3/impl/src/main/java/org/apache/myfaces/view/facelets/tag/TagAttributeImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/191ac012f4332c903ae911df7e288309d21ecaf3/impl/src/main/java/org/apache/myfaces/view/facelets/tag/TagAttributeImpl.java",
                "status": "modified",
                "changes": 25,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/TagAttributeImpl.java?ref=191ac012f4332c903ae911df7e288309d21ecaf3",
                "patch": "@@ -165,7 +165,9 @@ public MethodExpression getMethodExpression(FaceletContext ctx, Class type, Clas\n             // From this point we can suppose this attribute contains a ELExpression\r\n             // Now we have to check if the expression points to a composite component attribute map\r\n             // and if so deal with it as an indirection.\r\n-            if (isCompositeComponentAttributeMapExpression())\r\n+            // NOTE that we have to check if the expression refers to cc.attrs for a MethodExpression\r\n+            // (#{cc.attrs.myMethod}) or only for MethodExpression parameters (#{bean.method(cc.attrs.value)}).\r\n+            if (CompositeComponentELUtils.isCompositeComponentAttrsMethodExpression(this.getValue()))\r\n             {\r\n                 // The MethodExpression is on parent composite component attribute map.\r\n                 // create a pointer that are referred to the real one that is created in other side\r\n@@ -197,27 +199,6 @@ public MethodExpression getMethodExpression(FaceletContext ctx, Class type, Clas\n         }\r\n     }\r\n     \r\n-    private boolean isCompositeComponentAttributeMapExpression()\r\n-    {\r\n-        // Check if the ELExpression inside this.value has as target the composite component attribute map\r\n-        // and if so, return true, otherwise return false. \r\n-        int i = this.value.indexOf(\"cc.\");\r\n-        if (i >= 0)\r\n-        {\r\n-            i = this.value.indexOf(\"attrs.\",i+3); \r\n-            if (i >= 0)\r\n-            {\r\n-                // If the last target is a value inside the composite attribute map\r\n-                // we are in case.\r\n-                if (this.value.indexOf('.',i+6) < 0)\r\n-                {\r\n-                    return true;\r\n-                }\r\n-            }\r\n-        }\r\n-        return false;\r\n-    }\r\n-    \r\n     /**\r\n      * The resolved Namespace for this attribute\r\n      * \r",
                "deletions": 22
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2784 NPE when I forget to add an interface to a composite component (added FacesException and fixed typo)",
        "commit": "https://github.com/apache/myfaces/commit/e576ea9c2a3344c1698f007d26347c5ddca5e575",
        "parent": "https://github.com/apache/myfaces/commit/574cf62c495751b8987194a27e478cdcbe214480",
        "bug_id": "myfaces_80",
        "file": [
            {
                "sha": "a08b136c981dac9e62d7e46c99a59f1c42a0e8af",
                "filename": "impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/application/ApplicationImpl.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -1108,6 +1108,12 @@ public UIComponent createComponent(FacesContext context, Resource componentResou\n          * This version of JSF specification uses JavaBeans as the API to the component metadata.\n          */\n         BeanInfo metadata = vdl.getComponentMetadata(context, componentResource);\n+        if (metadata == null)\n+        {\n+            throw new FacesException(\"Could not get component metadata for \" \n+                    + componentResource.getResourceName()\n+                    + \". Did you forget to specify <composite:interface>?\");\n+        }\n \n         /*\n          * Determine if the component author declared a component-type for this component instance by obtaining the",
                "deletions": 0
            },
            {
                "sha": "5b5591c58716e9f7199bde877afc1cb4200981dd",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttachedObjectTargetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -109,7 +109,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "deletions": 1
            },
            {
                "sha": "fe99c66ef002e9db115cf1c0797c3b55a8bb23c0",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/AttributeHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -179,7 +179,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "deletions": 1
            },
            {
                "sha": "bc9f09fceb1e0a0b802367c6429fa76c91853fe9",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ClientBehaviorHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -136,7 +136,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\r\n             if (log.isLoggable(Level.SEVERE))\r\n             {\r\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\r\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\r\n             }\r\n             return;\r\n         }\r",
                "deletions": 1
            },
            {
                "sha": "193126ba4877e81a31eadac56765691a56658c1c",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ExtensionHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -61,7 +61,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "deletions": 1
            },
            {
                "sha": "98cc6a24171376526f5610cf473575ab4385674f",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/FacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -171,7 +171,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         {\n             if (log.isLoggable(Level.SEVERE))\n             {\n-                log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n             }\n             return;\n         }",
                "deletions": 1
            },
            {
                "sha": "000e375b6f6866daf239aabc83964ae58fdff997",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/ImplementationHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -78,7 +78,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }",
                "deletions": 1
            },
            {
                "sha": "1782869e5755ca47b2ac86e21d0be75453fa3247",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertChildrenHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -68,7 +68,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }",
                "deletions": 1
            },
            {
                "sha": "2fde7046e805db4524cb5a760ed6687f74d5e2a0",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InsertFacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -101,7 +101,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }\n@@ -146,7 +146,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n         \n         if (_required != null && _required.getBoolean(ctx) && parentCompositeComponent.getFacet(facetName) == null)\n         {\n-            throw new TagException(this.tag, \"Cannot found facet with name \"+facetName+\" in composite component \"\n+            throw new TagException(this.tag, \"Cannot find facet with name \"+facetName+\" in composite component \"\n                     +parentCompositeComponent.getClientId(ctx.getFacesContext()));\n         }\n         ",
                "deletions": 2
            },
            {
                "sha": "a3a25f566576a8b05eff789937b6dfa0fce21c27",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/InterfaceHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n-import javax.faces.application.Resource;\n import javax.faces.component.UIComponent;\n import javax.faces.view.Location;\n import javax.faces.view.facelets.FaceletContext;\n@@ -168,7 +167,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }            ",
                "deletions": 2
            },
            {
                "sha": "ebdb7210f64791a9091dd1ebb141c4427e52d8e3",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e576ea9c2a3344c1698f007d26347c5ddca5e575/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/tag/composite/RenderFacetHandler.java?ref=e576ea9c2a3344c1698f007d26347c5ddca5e575",
                "patch": "@@ -94,7 +94,7 @@ public void apply(FaceletContext ctx, UIComponent parent)\n             {\n                 if (log.isLoggable(Level.SEVERE))\n                 {\n-                    log.severe(\"Cannot found composite bean descriptor UIComponent.BEANINFO_KEY \");\n+                    log.severe(\"Cannot find composite bean descriptor UIComponent.BEANINFO_KEY \");\n                 }\n                 return;\n             }\n@@ -129,7 +129,7 @@ public void onComponentPopulated(FaceletContext ctx, UIComponent c,\n     \n             if (_required != null && _required.getBoolean(ctx) && parentCompositeComponent.getFacet(facetName) == null)\n             {\n-                throw new TagException(this.tag, \"Cannot found facet with name \"+facetName+\" in composite component \"\n+                throw new TagException(this.tag, \"Cannot find facet with name \"+facetName+\" in composite component \"\n                         +parentCompositeComponent.getClientId(ctx.getFacesContext()));\n             }\n             ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2748 NPE in htmlunit when testing ajax rendering (Thanks to Werner Punz for provide the patch)",
        "commit": "https://github.com/apache/myfaces/commit/13ab30b4f463f235f947b468529196b5d35207e8",
        "parent": "https://github.com/apache/myfaces/commit/5033c2effbd70561b1e97be0ebea7f06c8acaf3b",
        "bug_id": "myfaces_81",
        "file": [
            {
                "sha": "526bcbe43e088ee67a6cdbbefb6d45f418c2d5a8",
                "filename": "api/src/main/javascript/META-INF/resources/myfaces/_impl/_util/_Dom.js",
                "blob_url": "https://github.com/apache/myfaces/blob/13ab30b4f463f235f947b468529196b5d35207e8/api/src/main/javascript/META-INF/resources/myfaces/_impl/_util/_Dom.js",
                "raw_url": "https://github.com/apache/myfaces/raw/13ab30b4f463f235f947b468529196b5d35207e8/api/src/main/javascript/META-INF/resources/myfaces/_impl/_util/_Dom.js",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/javascript/META-INF/resources/myfaces/_impl/_util/_Dom.js?ref=13ab30b4f463f235f947b468529196b5d35207e8",
                "patch": "@@ -173,12 +173,26 @@ myfaces._impl.core._Runtime.singletonExtendClass(\"myfaces._impl._util._Dom\", Obj\n \n                 //now to the non w3c compliant browsers\n                 //http://blogs.perl.org/users/clinton_gormley/2010/02/forcing-ie-to-accept-script-tags-in-innerhtml.html\n+                //we have to cope with deficiencies between ie and its simulations in this case\n+                var probe = document.createElement(\"div\");\n+                probe.innerHTML = \"<table><div></div></table>\";\n+                var depth = 0;\n+                while(probe) {\n+                    probe = probe.childNodes[0];\n+                    depth++;\n+                }\n+                depth--;\n+\n                 var dummyPlaceHolder = document.createElement(\"div\");\n \n                 //fortunately a table element also works which is less critical than form elements regarding\n                 //the inner content\n                 dummyPlaceHolder.innerHTML = \"<table>\" + markup + \"</table>\";\n-                evalNode = dummyPlaceHolder.childNodes[0].childNodes[0].childNodes[0];\n+                evalNode = dummyPlaceHolder;\n+                for(var cnt = 0; cnt < depth; cnt++) {\n+                    evalNode = evalNode.childNodes[0];\n+                }\n+\n                 parentNode = item.parentNode;\n                 item.parentNode.replaceChild(evalNode, item);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2607 Ugly NPE in CompositeFunctionMapper.resolveFunction() if second FunctionMapper is null (added comment that fn1 can be null)",
        "commit": "https://github.com/apache/myfaces/commit/4ef5c780a1854cf35e195952ba56318dc96f2d46",
        "parent": "https://github.com/apache/myfaces/commit/a881973f4a0782cf0a89a640f9eec6da926fb5b2",
        "bug_id": "myfaces_82",
        "file": [
            {
                "sha": "a69f7f442ffc46017ae890fd78d8c885e50619fe",
                "filename": "impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "blob_url": "https://github.com/apache/myfaces/blob/4ef5c780a1854cf35e195952ba56318dc96f2d46/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "raw_url": "https://github.com/apache/myfaces/raw/4ef5c780a1854cf35e195952ba56318dc96f2d46/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/view/facelets/el/CompositeFunctionMapper.java?ref=4ef5c780a1854cf35e195952ba56318dc96f2d46",
                "patch": "@@ -42,7 +42,7 @@\n     public CompositeFunctionMapper(FunctionMapper fn0, FunctionMapper fn1)\r\n     {\r\n         this.fn0 = fn0;\r\n-        this.fn1 = fn1;\r\n+        this.fn1 = fn1; // this one can be null\r\n     }\r\n \r\n     /**\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-3638 fix NPE and key clashes in StateCacheImpl\n\nThe old impl had 2 issues. It die create key clashes and\nproduced a NPE.\nI also streamlined the impl, moved out lots of inner classes and\noptimized away half of them.",
        "commit": "https://github.com/apache/myfaces/commit/97642b7c55751343ab4f2e403cb133084ae05c00",
        "parent": "https://github.com/apache/myfaces/commit/e13d9005db20e942e59bf0c783738407c9e71212",
        "bug_id": "myfaces_83",
        "file": [
            {
                "sha": "5a7a8b099bb000ceb188dcf7d0327c70e6f10e71",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/CounterKeyFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/CounterKeyFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/CounterKeyFactory.java",
                "status": "added",
                "changes": 72,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/CounterKeyFactory.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import org.apache.myfaces.shared.renderkit.RendererUtils;\n+\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import java.util.Map;\n+\n+/**\n+ * View Key factory which incrementally counts upwards\n+ * in each session.\n+ */\n+public class CounterKeyFactory extends KeyFactory<Integer, String>\n+{\n+    /**\n+     * Take the counter from session scope and increment\n+     *\n+     * @param facesContext\n+     * @return\n+     */\n+    @Override\n+    public Integer generateKey(FacesContext facesContext)\n+    {\n+        ExternalContext externalContext = facesContext.getExternalContext();\n+        Object sessionObj = externalContext.getSession(true);\n+        Integer sequence = null;\n+        synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n+                                // are handled at the same time for the session\n+        {\n+            Map<String, Object> map = externalContext.getSessionMap();\n+            sequence = (Integer) map.get( RendererUtils.SEQUENCE_PARAM);\n+            if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n+            {\n+                sequence = Integer.valueOf(1);\n+            }\n+            else\n+            {\n+                sequence = Integer.valueOf(sequence.intValue() + 1);\n+            }\n+            map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n+        }\n+        return sequence;\n+    }\n+\n+    public String encode(Integer sequence)\n+    {\n+        return Integer.toString(sequence, Character.MAX_RADIX);\n+    }\n+\n+    public Integer decode(String serverStateId)\n+    {\n+         return Integer.valueOf((String) serverStateId, Character.MAX_RADIX);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "1ec5d38f1e6015825af34820c1432fa0fd419c11",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/KeyFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/KeyFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/KeyFactory.java",
                "status": "added",
                "changes": 53,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/KeyFactory.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import javax.faces.context.FacesContext;\n+\n+/**\n+ * Factory for handling View Keys\n+ */\n+public abstract class KeyFactory<K, V>\n+{\n+\n+    /**\n+     * Generates a unique key per session\n+     *\n+     * @param facesContext\n+     * @return\n+     */\n+    public abstract K generateKey(FacesContext facesContext);\n+\n+    /**\n+     * Encode a Key into a value that will be used as view state session token\n+     *\n+     * @param key\n+     * @return\n+     */\n+    public abstract V encode(K key);\n+\n+    /**\n+     * Decode a view state session token into a key\n+     *\n+     * @param value\n+     * @return\n+     */\n+    public abstract K decode(V value);\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "0573ff2d920a7e9db8801695451f36f0b33f775b",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/RandomKeyFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/RandomKeyFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/RandomKeyFactory.java",
                "status": "added",
                "changes": 111,
                "additions": 111,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/RandomKeyFactory.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.myfaces.shared.renderkit.RendererUtils;\n+import org.apache.myfaces.shared.util.WebConfigParamUtils;\n+\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import java.util.Map;\n+import java.util.Random;\n+\n+/**\n+ * View key factory which uses a random generator.\n+ */\n+class RandomKeyFactory extends KeyFactory<byte[], String>\n+{\n+    private final Random random;\n+    private final int length;\n+\n+    public RandomKeyFactory( FacesContext facesContext )\n+    {\n+        length = WebConfigParamUtils.getIntegerInitParameter( facesContext.getExternalContext(),\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM,\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT );\n+        random = new Random(((int)System.nanoTime())+this.hashCode());\n+    }\n+\n+    public Integer generateCounterKey(FacesContext facesContext)\n+    {\n+        ExternalContext externalContext = facesContext.getExternalContext();\n+        Object sessionObj = externalContext.getSession(true);\n+        Integer sequence = null;\n+        synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n+                                // are handled at the same time for the session\n+        {\n+            Map<String, Object> map = externalContext.getSessionMap();\n+            sequence = (Integer) map.get( RendererUtils.SEQUENCE_PARAM);\n+            if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n+            {\n+                sequence = Integer.valueOf(1);\n+            }\n+            else\n+            {\n+                sequence = Integer.valueOf(sequence.intValue() + 1);\n+            }\n+            map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n+        }\n+        return sequence;\n+    }\n+\n+    @Override\n+    public byte[] generateKey(FacesContext facesContext)\n+    {\n+        byte[] array = new byte[length];\n+        byte[] key = new byte[length+4];\n+\n+        //sessionIdGenerator.getRandomBytes(array);\n+        random.nextBytes(array);\n+        for (int i = 0; i < array.length; i++)\n+        {\n+            key[i] = array[i];\n+        }\n+        int value = generateCounterKey(facesContext);\n+        key[array.length] =  (byte) (value >>> 24);\n+        key[array.length+1] =  (byte) (value >>> 16);\n+        key[array.length+2] =  (byte) (value >>> 8);\n+        key[array.length+3] =  (byte) (value);\n+\n+        return key;\n+    }\n+\n+    @Override\n+    public String encode(byte[] key)\n+    {\n+        return new String( Hex.encodeHex( key ));\n+    }\n+\n+    @Override\n+    public byte[] decode(String value)\n+    {\n+        try\n+        {\n+            return Hex.decodeHex(value.toCharArray());\n+        }\n+        catch (DecoderException ex)\n+        {\n+            // Cannot decode, ignore silently, later it will be handled as\n+            // ViewExpiredException\n+        }\n+        return null;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "4cdaea92b977871d7c5e3e313371cccb8410b797",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/SecureRandomKeyFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SecureRandomKeyFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SecureRandomKeyFactory.java",
                "status": "added",
                "changes": 133,
                "additions": 133,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/SecureRandomKeyFactory.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.myfaces.shared.renderkit.RendererUtils;\n+import org.apache.myfaces.shared.util.WebConfigParamUtils;\n+\n+import javax.faces.context.ExternalContext;\n+import javax.faces.context.FacesContext;\n+import java.util.Map;\n+\n+/**\n+ * This factory generate a key composed by a counter and a random number. The\n+ * counter ensures uniqueness, and the random number prevents guess the next\n+ * session token.\n+ */\n+public class SecureRandomKeyFactory extends KeyFactory<byte[], String>\n+{\n+    private final SessionIdGenerator sessionIdGenerator;\n+    private final int length;\n+\n+    public SecureRandomKeyFactory( FacesContext facesContext )\n+    {\n+        length = WebConfigParamUtils.getIntegerInitParameter( facesContext.getExternalContext(),\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM,\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT );\n+        sessionIdGenerator = new SessionIdGenerator();\n+        sessionIdGenerator.setSessionIdLength(length);\n+        String secureRandomClass = WebConfigParamUtils.getStringInitParameter(\n+                facesContext.getExternalContext(),\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_CLASS_PARAM);\n+        if (secureRandomClass != null)\n+        {\n+            sessionIdGenerator.setSecureRandomClass(secureRandomClass);\n+        }\n+        String secureRandomProvider = WebConfigParamUtils.getStringInitParameter(\n+                facesContext.getExternalContext(),\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_PROVIDER_PARAM);\n+        if (secureRandomProvider != null)\n+        {\n+            sessionIdGenerator.setSecureRandomProvider(secureRandomProvider);\n+        }\n+        String secureRandomAlgorithm = WebConfigParamUtils.getStringInitParameter(\n+                facesContext.getExternalContext(),\n+                ServerSideStateCacheImpl.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_ALGORITM_PARAM);\n+        if (secureRandomAlgorithm != null)\n+        {\n+            sessionIdGenerator.setSecureRandomAlgorithm(secureRandomAlgorithm);\n+        }\n+    }\n+\n+    public Integer generateCounterKey(FacesContext facesContext)\n+    {\n+        ExternalContext externalContext = facesContext.getExternalContext();\n+        Object sessionObj = externalContext.getSession(true);\n+        Integer sequence = null;\n+        synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n+                                // are handled at the same time for the session\n+        {\n+            Map<String, Object> map = externalContext.getSessionMap();\n+            sequence = (Integer) map.get( RendererUtils.SEQUENCE_PARAM);\n+            if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n+            {\n+                sequence = Integer.valueOf(1);\n+            }\n+            else\n+            {\n+                sequence = Integer.valueOf(sequence.intValue() + 1);\n+            }\n+            map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n+        }\n+        return sequence;\n+    }\n+\n+    @Override\n+    public byte[] generateKey(FacesContext facesContext)\n+    {\n+        byte[] array = new byte[length];\n+        byte[] key = new byte[length+4];\n+\n+        sessionIdGenerator.getRandomBytes(array);\n+        for (int i = 0; i < array.length; i++)\n+        {\n+            key[i] = array[i];\n+        }\n+        int value = generateCounterKey(facesContext);\n+        key[array.length] =  (byte) (value >>> 24);\n+        key[array.length+1] =  (byte) (value >>> 16);\n+        key[array.length+2] =  (byte) (value >>> 8);\n+        key[array.length+3] =  (byte) (value);\n+\n+        return key;\n+    }\n+\n+    @Override\n+    public String encode(byte[] key)\n+    {\n+        return new String( Hex.encodeHex( key ));\n+    }\n+\n+    @Override\n+    public byte[] decode(String value)\n+    {\n+        try\n+        {\n+            return Hex.decodeHex(value.toCharArray());\n+        }\n+        catch (DecoderException ex)\n+        {\n+            // Cannot decode, ignore silently, later it will be handled as\n+            // ViewExpiredException\n+        }\n+        return null;\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "9901aeaffa21c8908daed2965aa462064a3a38a0",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/SerializedViewKey.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SerializedViewKey.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SerializedViewKey.java",
                "status": "added",
                "changes": 119,
                "additions": 119,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/SerializedViewKey.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/**\n+ *\n+ */\n+public class SerializedViewKey implements Serializable\n+{\n+    private static final long serialVersionUID = -1170697124386063642L;\n+\n+    private final String _viewId;\n+    private final int _viewIdHash;\n+\n+    private final Object _sequenceId;\n+    private final byte[] _sequenceIdArray;\n+\n+    public SerializedViewKey(String viewId, Object sequence)\n+    {\n+        _viewId = viewId;\n+        _viewIdHash = viewId != null ? viewId.hashCode() : 0;\n+\n+        if (sequence == null)\n+        {\n+            _sequenceId = null;\n+            _sequenceIdArray = null;\n+        }\n+        else if (sequence instanceof byte[])\n+        {\n+            _sequenceId = null;\n+            _sequenceIdArray = (byte[]) sequence;\n+        }\n+        else\n+        {\n+            _sequenceId = sequence;\n+            _sequenceIdArray = null;\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+        if (obj == null)\n+        {\n+            return false;\n+        }\n+\n+        if (getClass() != obj.getClass())\n+        {\n+            return false;\n+        }\n+        final SerializedViewKey other = (SerializedViewKey) obj;\n+        if (this._viewIdHash != other._viewIdHash)\n+        {\n+            return false;\n+        }\n+\n+        if (this._viewId == null || !this._viewId.equals(other._viewId))\n+        {\n+            return false;\n+        }\n+\n+        if (this._sequenceId == null && other._sequenceId != null ||\n+            this._sequenceId != null && other._sequenceId == null)\n+        {\n+            return false;\n+        }\n+\n+        if (this._sequenceId != null &&\n+            !this._sequenceId.equals(other._sequenceId))\n+        {\n+            return false;\n+        }\n+\n+        if (this._sequenceIdArray == null && other._sequenceIdArray != null ||\n+            this._sequenceIdArray != null && other._sequenceIdArray == null)\n+        {\n+            return false;\n+        }\n+\n+        if (this._sequenceIdArray != null &&\n+            Arrays.equals(this._sequenceIdArray, other._sequenceIdArray))\n+        {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        int hash = 7;\n+        hash = 83 * hash + this._viewIdHash;\n+        hash = 83 * hash + (this._sequenceId != null ? this._sequenceId.hashCode() : 0);\n+        hash = 83 * hash + (this._sequenceIdArray != null ? this._sequenceIdArray.hashCode() : 0);\n+        return hash;\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "ad0ae9d66e0b93dbfb82368d566f469660aefe4d",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java",
                "status": "modified",
                "changes": 679,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/ServerSideStateCacheImpl.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -30,21 +30,16 @@\n import java.security.PrivilegedActionException;\n import java.security.PrivilegedExceptionAction;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.zip.GZIPInputStream;\n import java.util.zip.GZIPOutputStream;\n-import javax.faces.application.ProjectStage;\n \n import javax.faces.context.ExternalContext;\n import javax.faces.context.FacesContext;\n-import org.apache.commons.codec.DecoderException;\n-import org.apache.commons.codec.binary.Hex;\n \n import org.apache.commons.collections.map.AbstractReferenceMap;\n import org.apache.commons.collections.map.ReferenceMap;\n@@ -57,31 +52,31 @@\n class ServerSideStateCacheImpl extends StateCache<Object, Object>\n {\n     private static final Logger log = Logger.getLogger(ServerSideStateCacheImpl.class.getName());\n-    \n-    private static final String SERIALIZED_VIEW_SESSION_ATTR= \n+\n+    private static final String SERIALIZED_VIEW_SESSION_ATTR=\n         ServerSideStateCacheImpl.class.getName() + \".SERIALIZED_VIEW\";\n-    \n-    private static final String RESTORED_SERIALIZED_VIEW_REQUEST_ATTR = \n+\n+    private static final String RESTORED_SERIALIZED_VIEW_REQUEST_ATTR =\n         ServerSideStateCacheImpl.class.getName() + \".RESTORED_SERIALIZED_VIEW\";\n \n-    private static final String RESTORED_VIEW_KEY_REQUEST_ATTR = \n+    private static final String RESTORED_VIEW_KEY_REQUEST_ATTR =\n         ServerSideStateCacheImpl.class.getName() + \".RESTORED_VIEW_KEY\";\n-    \n+\n     /**\n      * Defines the amount (default = 20) of the latest views are stored in session.\n-     * \n+     *\n      * <p>Only applicable if state saving method is \"server\" (= default).\n      * </p>\n-     * \n+     *\n      */\n     @JSFWebConfigParam(defaultValue=\"20\",since=\"1.1\", classType=\"java.lang.Integer\", group=\"state\", tags=\"performance\")\n     private static final String NUMBER_OF_VIEWS_IN_SESSION_PARAM = \"org.apache.myfaces.NUMBER_OF_VIEWS_IN_SESSION\";\n \n     /**\n      * Indicates the amount of views (default is not active) that should be stored in session between sequential\n      * POST or POST-REDIRECT-GET if org.apache.myfaces.USE_FLASH_SCOPE_PURGE_VIEWS_IN_SESSION is true.\n-     * \n-     * <p>Only applicable if state saving method is \"server\" (= default). For example, if this param has value = 2 and \n+     *\n+     * <p>Only applicable if state saving method is \"server\" (= default). For example, if this param has value = 2 and\n      * in your custom webapp there is a form that is clicked 3 times, only 2 views\n      * will be stored and the third one (the one stored the first time) will be\n      * removed from session, even if the view can\n@@ -93,14 +88,14 @@\n     @JSFWebConfigParam(since=\"2.0.6\", classType=\"java.lang.Integer\", group=\"state\", tags=\"performance\")\n     private static final String NUMBER_OF_SEQUENTIAL_VIEWS_IN_SESSION_PARAM\n             = \"org.apache.myfaces.NUMBER_OF_SEQUENTIAL_VIEWS_IN_SESSION\";\n-    \n+\n     /**\n      * Default value for <code>org.apache.myfaces.NUMBER_OF_VIEWS_IN_SESSION</code> context parameter.\n      */\n     private static final int DEFAULT_NUMBER_OF_VIEWS_IN_SESSION = 20;\n \n     /**\n-     * Indicate if the state should be serialized before save it on the session. \n+     * Indicate if the state should be serialized before save it on the session.\n      * <p>\n      * Only applicable if state saving method is \"server\" (= default).\n      * If <code>true</code> (default) the state will be serialized to a byte stream before it is written to the session.\n@@ -112,7 +107,7 @@\n \n     /**\n      * Indicates that the serialized state will be compressed before it is written to the session. By default true.\n-     * \n+     *\n      * Only applicable if state saving method is \"server\" (= default) and if\n      * <code>org.apache.myfaces.SERIALIZE_STATE_IN_SESSION</code> is <code>true</code> (= default).\n      * If <code>true</code> (default) the serialized state will be compressed before it is written to the session.\n@@ -145,38 +140,38 @@\n      * <p>\n      * By default no cache is used, so views removed from session became phantom references.\n      * </p>\n-     * <ul> \n-     * <li> off, no: default, no cache is used</li> \n+     * <ul>\n+     * <li> off, no: default, no cache is used</li>\n      * <li> hard-soft: use an ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.SOFT)</li>\n      * <li> soft: use an ReferenceMap(AbstractReferenceMap.SOFT, AbstractReferenceMap.SOFT, true) </li>\n      * <li> soft-weak: use an ReferenceMap(AbstractReferenceMap.SOFT, AbstractReferenceMap.WEAK, true) </li>\n      * <li> weak: use an ReferenceMap(AbstractReferenceMap.WEAK, AbstractReferenceMap.WEAK, true) </li>\n      * </ul>\n-     * \n+     *\n      */\n     @JSFWebConfigParam(defaultValue=\"off\", expectedValues=\"off, no, hard-soft, soft, soft-weak, weak\",\n                        since=\"1.2.5\", group=\"state\", tags=\"performance\")\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE = \"org.apache.myfaces.CACHE_OLD_VIEWS_IN_SESSION_MODE\";\n-    \n+\n     /**\n-     * This option uses an hard-soft ReferenceMap, but it could cause a \n+     * This option uses an hard-soft ReferenceMap, but it could cause a\n      * memory leak, because the keys are not removed by any method\n      * (MYFACES-1660). So use with caution.\n      */\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE_HARD_SOFT = \"hard-soft\";\n-    \n+\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE_SOFT = \"soft\";\n-    \n+\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE_SOFT_WEAK = \"soft-weak\";\n-    \n+\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE_WEAK = \"weak\";\n-    \n+\n     private static final String CACHE_OLD_VIEWS_IN_SESSION_MODE_OFF = \"off\";\n \n     /**\n      * Allow use flash scope to keep track of the views used in session and the previous ones,\n      * so server side state saving can delete old views even if POST-REDIRECT-GET pattern is used.\n-     * \n+     *\n      * <p>\n      * Only applicable if state saving method is \"server\" (= default).\n      * The default value is false.</p>\n@@ -188,90 +183,84 @@\n     private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_NONE = \"none\";\n     private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM = \"secureRandom\";\n     private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_RANDOM = \"random\";\n-    \n+\n     /**\n      * Adds a random key to the generated view state session token.\n      */\n-    @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", expectedValues=\"secureRandom, random, none\", \n+    @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", expectedValues=\"secureRandom, random, none\",\n             defaultValue=\"none\", group=\"state\")\n     private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM\n             = \"org.apache.myfaces.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN\";\n-    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM_DEFAULT = \n+    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM_DEFAULT =\n             RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_NONE;\n \n     /**\n      * Set the default length of the random key added to the view state session token.\n-     * By default is 8. \n+     * By default is 8.\n      */\n     @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", defaultValue=\"8\", group=\"state\")\n-    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM \n+    static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM\n             = \"org.apache.myfaces.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH\";\n-    private static final int RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT = 8;\n+    static final int RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT = 8;\n \n     /**\n-     * Sets the random class to initialize the secure random id generator. \n+     * Sets the random class to initialize the secure random id generator.\n      * By default it uses java.security.SecureRandom\n      */\n     @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", group=\"state\")\n-    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_CLASS_PARAM\n+    static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_CLASS_PARAM\n             = \"org.apache.myfaces.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_CLASS\";\n-    \n+\n     /**\n      * Sets the random provider to initialize the secure random id generator.\n      */\n     @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", group=\"state\")\n-    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_PROVIDER_PARAM\n+    static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_PROVIDER_PARAM\n             = \"org.apache.myfaces.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_PROVIDER\";\n-    \n+\n     /**\n-     * Sets the random algorithm to initialize the secure random id generator. \n+     * Sets the random algorithm to initialize the secure random id generator.\n      * By default is SHA1PRNG\n      */\n     @JSFWebConfigParam(since=\"2.1.9, 2.0.15\", defaultValue=\"SHA1PRNG\", group=\"state\")\n-    private static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_ALGORITM_PARAM \n+    static final String RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_ALGORITM_PARAM\n             = \"org.apache.myfaces.RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_ALGORITM\";\n-    \n-    \n+\n+\n     private static final int UNCOMPRESSED_FLAG = 0;\n     private static final int COMPRESSED_FLAG = 1;\n-    \n+\n     private static final Object[] EMPTY_STATES = new Object[]{null, null};\n \n-    //private static final int JSF_SEQUENCE_INDEX = 0;\n-    \n     private Boolean _useFlashScopePurgeViewsInSession = null;\n-    \n+\n     private Integer _numberOfSequentialViewsInSession = null;\n     private boolean _numberOfSequentialViewsInSessionSet = false;\n \n-    //private final KeyFactory keyFactory;\n     private SessionViewStorageFactory sessionViewStorageFactory;\n \n     public ServerSideStateCacheImpl()\n     {\n         FacesContext facesContext = FacesContext.getCurrentInstance();\n         String randomMode = WebConfigParamUtils.getStringInitParameter(facesContext.getExternalContext(),\n-                RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM, \n+                RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM,\n                 RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_PARAM_DEFAULT);\n         if (RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM.equals(randomMode))\n         {\n-            //keyFactory = new SecureRandomKeyFactory(facesContext);\n-            sessionViewStorageFactory = new RandomSessionViewStorageFactory(\n+            sessionViewStorageFactory = new SessionViewStorageFactory(\n                     new SecureRandomKeyFactory(facesContext));\n         }\n         else if (RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_RANDOM.equals(randomMode))\n         {\n-            //keyFactory = new RandomKeyFactory(facesContext);\n-            sessionViewStorageFactory = new RandomSessionViewStorageFactory(\n+            sessionViewStorageFactory = new SessionViewStorageFactory(\n                     new RandomKeyFactory(facesContext));\n         }\n         else\n         {\n-            //keyFactory = new CounterKeyFactory();\n-            sessionViewStorageFactory = new CounterSessionViewStorageFactory(new CounterKeyFactory());\n+            sessionViewStorageFactory = new SessionViewStorageFactory(new CounterKeyFactory());\n         }\n     }\n-    \n+\n     //------------------------------------- METHODS COPIED FROM JspStateManagerImpl--------------------------------\n \n     protected Object getServerStateId(FacesContext facesContext, Object state)\n@@ -296,16 +285,16 @@ protected void saveSerializedViewInServletSession(FacesContext context,\n         }\n \n         Map<Object,Object> attributeMap = context.getAttributes();\n-        \n+\n         SerializedViewKey key = null;\n         if (getNumberOfSequentialViewsInSession(context.getExternalContext()) != null &&\n             getNumberOfSequentialViewsInSession(context.getExternalContext()) > 0)\n         {\n             key = (SerializedViewKey) attributeMap.get(RESTORED_VIEW_KEY_REQUEST_ATTR);\n-            \n+\n             if (key == null )\n             {\n-                if (isUseFlashScopePurgeViewsInSession(context.getExternalContext()) && \n+                if (isUseFlashScopePurgeViewsInSession(context.getExternalContext()) &&\n                     Boolean.TRUE.equals(context.getExternalContext().getRequestMap()\n                             .get(\"oam.Flash.REDIRECT.PREVIOUSREQUEST\")))\n                 {\n@@ -314,7 +303,7 @@ protected void saveSerializedViewInServletSession(FacesContext context,\n                 }\n             }\n         }\n-        \n+\n         SerializedViewKey nextKey = getSessionViewStorageFactory().createSerializedViewKey(\n                 context, context.getViewRoot().getViewId(), getNextViewSequence(context));\n         viewCollection.add(context, serializeView(context, serializedView), nextKey, key);\n@@ -350,14 +339,14 @@ protected Object getSerializedViewFromServletSession(FacesContext context, Strin\n                 }\n             }\n             attributeMap.put(RESTORED_SERIALIZED_VIEW_REQUEST_ATTR, serializedView);\n-            \n+\n             if (getNumberOfSequentialViewsInSession(externalContext) != null &&\n                 getNumberOfSequentialViewsInSession(externalContext) > 0)\n             {\n                 SerializedViewKey key = getSessionViewStorageFactory().\n                         createSerializedViewKey(context, viewId, sequence);\n                 attributeMap.put(RESTORED_VIEW_KEY_REQUEST_ATTR, key);\n-                \n+\n                 if (isUseFlashScopePurgeViewsInSession(externalContext))\n                 {\n                     externalContext.getFlash().put(RESTORED_VIEW_KEY_REQUEST_ATTR, key);\n@@ -429,7 +418,7 @@ protected Object serializeView(FacesContext context, Object serializedView)\n                 //Object[] stateArray = (Object[]) serializedView;\n \n                 ObjectOutputStream out = new ObjectOutputStream(os);\n-                \n+\n                 out.writeObject(serializedView);\n                 //out.writeObject(stateArray[0]);\n                 //out.writeObject(stateArray[1]);\n@@ -524,9 +513,9 @@ protected Object deserializeView(Object state)\n                     final ObjectInputStream in = new MyFacesObjectInputStream(is);\n                     ois = in;\n                     Object object = null;\n-                    if (System.getSecurityManager() != null) \n+                    if (System.getSecurityManager() != null)\n                     {\n-                        object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() \n+                        object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>()\n                         {\n                             public Object run() throws PrivilegedActionException, IOException, ClassNotFoundException\n                             {\n@@ -551,7 +540,7 @@ public Object run() throws PrivilegedActionException, IOException, ClassNotFound\n                     }\n                 }\n             }\n-            catch (PrivilegedActionException e) \n+            catch (PrivilegedActionException e)\n             {\n                 log.log(Level.SEVERE, \"Exiting deserializeView - Could not deserialize state: \" + e.getMessage(), e);\n                 return null;\n@@ -588,16 +577,16 @@ else if(state == null)\n             return null;\n         }\n     }\n-    \n+\n     protected static class SerializedViewCollection implements Serializable\n     {\n         private static final long serialVersionUID = -3734849062185115847L;\n \n         private final List<SerializedViewKey> _keys\n                 = new ArrayList<SerializedViewKey>(DEFAULT_NUMBER_OF_VIEWS_IN_SESSION);\n         private final Map<SerializedViewKey, Object> _serializedViews = new HashMap<SerializedViewKey, Object>();\n-        \n-        private final Map<SerializedViewKey, SerializedViewKey> _precedence = \n+\n+        private final Map<SerializedViewKey, SerializedViewKey> _precedence =\n             new HashMap<SerializedViewKey, SerializedViewKey>();\n \n         // old views will be hold as soft references which will be removed by\n@@ -620,7 +609,7 @@ else if (state instanceof Object[] &&\n                 // into the map.\n                 state = null;\n             }\n-            \n+\n             Integer maxCount = getNumberOfSequentialViewsInSession(context);\n             if (maxCount != null)\n             {\n@@ -658,7 +647,7 @@ else if (state instanceof Object[] &&\n                   previousKey = _precedence.get(previousKey);\n                   count++;\n                 } while (previousKey != null && count < maxCount);\n-                \n+\n                 if (previousKey != null)\n                 {\n                     SerializedViewKey keyToRemove = (SerializedViewKey) previousKey;\n@@ -681,7 +670,7 @@ else if (state instanceof Object[] &&\n                         {\n                             _serializedViews.remove(keyToRemove);\n                         }\n-                    \n+\n                         keyToRemove = _precedence.remove(keyToRemove);\n                     }  while(keyToRemove != null);\n                 }\n@@ -691,11 +680,11 @@ else if (state instanceof Object[] &&\n             while (_keys.size() > views)\n             {\n                 key = _keys.remove(0);\n-                \n+\n                 if (maxCount != null && maxCount > 0)\n                 {\n                     SerializedViewKey keyToRemove = (SerializedViewKey) key;\n-                    // Note in this case the key to delete is the oldest one, \n+                    // Note in this case the key to delete is the oldest one,\n                     // so it could be at least one precedence, but to be safe\n                     // do it with a loop.\n                     do\n@@ -707,7 +696,7 @@ else if (state instanceof Object[] &&\n                 if (_serializedViews.containsKey(key) &&\n                     !CACHE_OLD_VIEWS_IN_SESSION_MODE_OFF.equals(getCacheOldViewsInSessionMode(context)))\n                 {\n-                    \n+\n                     getOldSerializedViewsMap().put(key, _serializedViews.remove(key));\n                 }\n                 else\n@@ -719,10 +708,10 @@ else if (state instanceof Object[] &&\n \n         protected Integer getNumberOfSequentialViewsInSession(FacesContext context)\n         {\n-            return WebConfigParamUtils.getIntegerInitParameter(context.getExternalContext(), \n+            return WebConfigParamUtils.getIntegerInitParameter(context.getExternalContext(),\n                     NUMBER_OF_SEQUENTIAL_VIEWS_IN_SESSION_PARAM);\n         }\n-        \n+\n         /**\n          * Reads the amount (default = 20) of views to be stored in session.\n          * @see #NUMBER_OF_VIEWS_IN_SESSION_PARAM\n@@ -766,7 +755,7 @@ protected int getNumberOfViewsInSession(FacesContext context)\n             FacesContext context = FacesContext.getCurrentInstance();\n             if (_oldSerializedViews == null && context != null)\n             {\n-                String cacheMode = getCacheOldViewsInSessionMode(context); \n+                String cacheMode = getCacheOldViewsInSessionMode(context);\n                 if (CACHE_OLD_VIEWS_IN_SESSION_MODE_WEAK.equals(cacheMode))\n                 {\n                     _oldSerializedViews = new ReferenceMap(AbstractReferenceMap.WEAK, AbstractReferenceMap.WEAK, true);\n@@ -784,13 +773,13 @@ else if (CACHE_OLD_VIEWS_IN_SESSION_MODE_HARD_SOFT.equals(cacheMode))\n                     _oldSerializedViews = new ReferenceMap(AbstractReferenceMap.HARD, AbstractReferenceMap.SOFT);\n                 }\n             }\n-            \n+\n             return _oldSerializedViews;\n         }\n-        \n+\n         /**\n          * Reads the value of the <code>org.apache.myfaces.CACHE_OLD_VIEWS_IN_SESSION_MODE</code> context parameter.\n-         * \n+         *\n          * @since 1.2.5\n          * @param context\n          * @return constant indicating caching mode\n@@ -811,7 +800,7 @@ else if (value.equalsIgnoreCase(CACHE_OLD_VIEWS_IN_SESSION_MODE_SOFT))\n             else if (value.equalsIgnoreCase(CACHE_OLD_VIEWS_IN_SESSION_MODE_SOFT_WEAK))\n             {\n                 return CACHE_OLD_VIEWS_IN_SESSION_MODE_SOFT_WEAK;\n-            }            \n+            }\n             else if (value.equalsIgnoreCase(CACHE_OLD_VIEWS_IN_SESSION_MODE_WEAK))\n             {\n                 return CACHE_OLD_VIEWS_IN_SESSION_MODE_WEAK;\n@@ -825,7 +814,7 @@ else if (value.equalsIgnoreCase(CACHE_OLD_VIEWS_IN_SESSION_MODE_HARD_SOFT))\n                 return CACHE_OLD_VIEWS_IN_SESSION_MODE_OFF;\n             }\n         }\n-        \n+\n         public Object get(SerializedViewKey key)\n         {\n             Object value = _serializedViews.get(key);\n@@ -857,172 +846,7 @@ else if (value instanceof Object[] &&\n         }\n     }\n \n-    /**\n-     * Base implementation where all keys used to identify the state of a view should\n-     * extend.\n-     */\n-    protected abstract static class SerializedViewKey implements Serializable\n-    {\n-    }\n-\n-    /**\n-     * Implementation of SerializedViewKey, where the hashCode of the viewId is used\n-     * and the sequenceId is a numeric value.\n-     */\n-    private static class IntIntSerializedViewKey extends SerializedViewKey \n-        implements Serializable\n-    {\n-        private static final long serialVersionUID = -1170697124386063642L;\n-        \n-        private final int _viewId;\n-        private final int _sequenceId;\n-        \n-        public IntIntSerializedViewKey(int viewId, int sequence)\n-        {\n-            _sequenceId = sequence;\n-            _viewId = viewId;\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj)\n-        {\n-            if (obj == null)\n-            {\n-                return false;\n-            }\n-            if (getClass() != obj.getClass())\n-            {\n-                return false;\n-            }\n-            final IntIntSerializedViewKey other = (IntIntSerializedViewKey) obj;\n-            if (this._viewId != other._viewId)\n-            {\n-                return false;\n-            }\n-            if (this._sequenceId != other._sequenceId)\n-            {\n-                return false;\n-            }\n-            return true;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            int hash = 7;\n-            hash = 83 * hash + this._viewId;\n-            hash = 83 * hash + this._sequenceId;\n-            return hash;\n-        }\n-    }\n-\n-    /**\n-     * Implementation of SerializedViewKey, where the hashCode of the viewId is used\n-     * and the sequenceId is a string value.\n-     */\n-    private static class IntByteArraySerializedViewKey extends SerializedViewKey\n-        implements Serializable\n-    {\n-        private final int _viewId;\n-        private final byte[] _sequenceId;\n-        \n-        public IntByteArraySerializedViewKey(int viewId, byte[] sequence)\n-        {\n-            _sequenceId = sequence;\n-            _viewId = viewId;\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj)\n-        {\n-            if (obj == null)\n-            {\n-                return false;\n-            }\n-            if (getClass() != obj.getClass())\n-            {\n-                return false;\n-            }\n-            final IntByteArraySerializedViewKey other = (IntByteArraySerializedViewKey) obj;\n-            if (this._viewId != other._viewId)\n-            {\n-                return false;\n-            }\n-            if (!Arrays.equals(this._sequenceId, other._sequenceId))\n-            {\n-                return false;\n-            }\n-            return true;\n-        }\n \n-        @Override\n-        public int hashCode()\n-        {\n-            int hash = 5;\n-            hash = 37 * hash + this._viewId;\n-            hash = 37 * hash + Arrays.hashCode(this._sequenceId);\n-            return hash;\n-        }\n-    }\n-    \n-    \n-    /**\n-     * Implementation of SerializedViewKey, where the viewId and the sequenceId can be\n-     * anything.\n-     */\n-    private static class ReferenceSerializedViewKey<I,K> extends SerializedViewKey\n-        implements Serializable\n-    {\n-        private static final long serialVersionUID = -1170697124386063642L;\n-\n-        private final I _viewId;\n-        private final K _sequenceId;\n-\n-        public ReferenceSerializedViewKey()\n-        {\n-            _sequenceId = null;\n-            _viewId = null;\n-        }\n-        public ReferenceSerializedViewKey(I viewId, K sequence)\n-        {\n-            _sequenceId = sequence;\n-            _viewId = viewId;\n-        }\n-\n-        @Override\n-        public boolean equals(Object obj)\n-        {\n-            if (obj == null)\n-            {\n-                return false;\n-            }\n-            if (getClass() != obj.getClass())\n-            {\n-                return false;\n-            }\n-            final ReferenceSerializedViewKey<I, K> other = (ReferenceSerializedViewKey<I, K>) obj;\n-            if (this._viewId != other._viewId && (this._viewId == null || !this._viewId.equals(other._viewId)))\n-            {\n-                return false;\n-            }\n-            if (this._sequenceId != other._sequenceId && \n-                (this._sequenceId == null || !this._sequenceId.equals(other._sequenceId)))\n-            {\n-                return false;\n-            }\n-            return true;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            int hash = 7;\n-            hash = 83 * hash + (this._viewId != null ? this._viewId.hashCode() : 0);\n-            hash = 83 * hash + (this._sequenceId != null ? this._sequenceId.hashCode() : 0);\n-            return hash;\n-        }\n-    }\n-    \n     //------------------------------------- METHOD FROM StateCache ------------------------------------------------\n \n     @Override\n@@ -1034,12 +858,12 @@ public Object saveSerializedView(FacesContext facesContext, Object serializedVie\n         }\n         //save state in server session\n         saveSerializedViewInServletSession(facesContext, serializedView);\n-        \n+\n         if (log.isLoggable(Level.FINEST))\n         {\n             log.finest(\"Exiting saveSerializedView - server-side state saving - saved state\");\n         }\n-        \n+\n         return encodeSerializedState(facesContext, serializedView);\n     }\n \n@@ -1062,15 +886,15 @@ public Object encodeSerializedState(FacesContext facesContext, Object serialized\n     {\n         return getKeyFactory(facesContext).encode(getNextViewSequence(facesContext));\n     }\n-    \n+\n     @Override\n     public boolean isWriteStateAfterRenderViewRequired(FacesContext facesContext)\n     {\n         return false;\n     }\n \n     //------------------------------------- Custom methods -----------------------------------------------------\n-    \n+\n     private boolean isUseFlashScopePurgeViewsInSession(ExternalContext externalContext)\n     {\n         if (_useFlashScopePurgeViewsInSession == null)\n@@ -1080,372 +904,29 @@ private boolean isUseFlashScopePurgeViewsInSession(ExternalContext externalConte\n         }\n         return _useFlashScopePurgeViewsInSession;\n     }\n-    \n+\n     private Integer getNumberOfSequentialViewsInSession(ExternalContext externalContext)\n     {\n         if (!_numberOfSequentialViewsInSessionSet)\n         {\n             _numberOfSequentialViewsInSession = WebConfigParamUtils.getIntegerInitParameter(\n-                    externalContext, \n+                    externalContext,\n                     NUMBER_OF_SEQUENTIAL_VIEWS_IN_SESSION_PARAM);\n             _numberOfSequentialViewsInSessionSet = true;\n         }\n         return _numberOfSequentialViewsInSession;\n     }\n-    \n+\n     protected KeyFactory getKeyFactory(FacesContext facesContext)\n     {\n         //return keyFactory;\n         return sessionViewStorageFactory.getKeyFactory();\n     }\n-    \n+\n     protected SessionViewStorageFactory getSessionViewStorageFactory()\n     {\n         return sessionViewStorageFactory;\n     }\n-            \n-\n-    protected abstract static class KeyFactory<K, V>\n-    {\n-        \n-        /**\n-         * Generates a unique key per session \n-         * \n-         * @param facesContext\n-         * @return \n-         */\n-        public abstract K generateKey(FacesContext facesContext);\n-        \n-        /**\n-         * Encode a Key into a value that will be used as view state session token\n-         * \n-         * @param key\n-         * @return \n-         */\n-        public abstract V encode(K key);\n-\n-        /**\n-         * Decode a view state session token into a key\n-         * \n-         * @param value\n-         * @return \n-         */\n-        public abstract K decode(V value);\n-\n-    }\n \n-    private static class CounterKeyFactory extends KeyFactory<Integer, String>\n-    {\n-        /**\n-         * Take the counter from session scope and increment\n-         * \n-         * @param facesContext\n-         * @return \n-         */\n-        @Override\n-        public Integer generateKey(FacesContext facesContext)\n-        {\n-            ExternalContext externalContext = facesContext.getExternalContext();\n-            Object sessionObj = externalContext.getSession(true);\n-            Integer sequence = null;\n-            synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n-                                    // are handled at the same time for the session\n-            {\n-                Map<String, Object> map = externalContext.getSessionMap();\n-                sequence = (Integer) map.get(RendererUtils.SEQUENCE_PARAM);\n-                if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n-                {\n-                    sequence = Integer.valueOf(1);\n-                }\n-                else\n-                {\n-                    sequence = Integer.valueOf(sequence.intValue() + 1);\n-                }\n-                map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n-            }\n-            return sequence;\n-        }\n-        \n-        public String encode(Integer sequence)\n-        {\n-            return Integer.toString(sequence, Character.MAX_RADIX);\n-        }\n-                \n-        public Integer decode(String serverStateId)\n-        {\n-             return Integer.valueOf((String) serverStateId, Character.MAX_RADIX);\n-        }\n-    }\n-    \n-    /**\n-     * This factory generate a key composed by a counter and a random number. The\n-     * counter ensures uniqueness, and the random number prevents guess the next\n-     * session token.\n-     */\n-    private static class SecureRandomKeyFactory extends KeyFactory<byte[], String>\n-    {\n-        private final SessionIdGenerator sessionIdGenerator;\n-        private final int length;\n-\n-        public SecureRandomKeyFactory(FacesContext facesContext)\n-        {\n-            length = WebConfigParamUtils.getIntegerInitParameter(facesContext.getExternalContext(),\n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM, \n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT);\n-            sessionIdGenerator = new SessionIdGenerator();\n-            sessionIdGenerator.setSessionIdLength(length);\n-            String secureRandomClass = WebConfigParamUtils.getStringInitParameter(\n-                    facesContext.getExternalContext(),\n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_CLASS_PARAM);\n-            if (secureRandomClass != null)\n-            {\n-                sessionIdGenerator.setSecureRandomClass(secureRandomClass);\n-            }\n-            String secureRandomProvider = WebConfigParamUtils.getStringInitParameter(\n-                    facesContext.getExternalContext(),\n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_PROVIDER_PARAM);\n-            if (secureRandomProvider != null)\n-            {\n-                sessionIdGenerator.setSecureRandomProvider(secureRandomProvider);\n-            }\n-            String secureRandomAlgorithm = WebConfigParamUtils.getStringInitParameter(\n-                    facesContext.getExternalContext(), \n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_SECURE_RANDOM_ALGORITM_PARAM);\n-            if (secureRandomAlgorithm != null)\n-            {\n-                sessionIdGenerator.setSecureRandomAlgorithm(secureRandomAlgorithm);\n-            }\n-        }\n-        \n-        public Integer generateCounterKey(FacesContext facesContext)\n-        {\n-            ExternalContext externalContext = facesContext.getExternalContext();\n-            Object sessionObj = externalContext.getSession(true);\n-            Integer sequence = null;\n-            synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n-                                    // are handled at the same time for the session\n-            {\n-                Map<String, Object> map = externalContext.getSessionMap();\n-                sequence = (Integer) map.get(RendererUtils.SEQUENCE_PARAM);\n-                if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n-                {\n-                    sequence = Integer.valueOf(1);\n-                }\n-                else\n-                {\n-                    sequence = Integer.valueOf(sequence.intValue() + 1);\n-                }\n-                map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n-            }\n-            return sequence;\n-        }\n-\n-        @Override\n-        public byte[] generateKey(FacesContext facesContext)\n-        {\n-            byte[] array = new byte[length];\n-            byte[] key = new byte[length+4];\n-            \n-            sessionIdGenerator.getRandomBytes(array);\n-            for (int i = 0; i < array.length; i++)\n-            {\n-                key[i] = array[i];\n-            }\n-            int value = generateCounterKey(facesContext);\n-            key[array.length] =  (byte) (value >>> 24);\n-            key[array.length+1] =  (byte) (value >>> 16);\n-            key[array.length+2] =  (byte) (value >>> 8);\n-            key[array.length+3] =  (byte) (value);\n-            \n-            return key;\n-        }\n-\n-        @Override\n-        public String encode(byte[] key)\n-        {\n-            return new String(Hex.encodeHex(key));\n-        }\n-        \n-        @Override\n-        public byte[] decode(String value)\n-        {\n-            try\n-            {\n-                return Hex.decodeHex(value.toCharArray());\n-            }\n-            catch (DecoderException ex)\n-            {\n-                // Cannot decode, ignore silently, later it will be handled as\n-                // ViewExpiredException\n-            }\n-            return null;\n-        }\n-    }\n-    \n-    private static class RandomKeyFactory extends KeyFactory<byte[], String>\n-    {\n-        private final Random random;\n-        private final int length;\n-        \n-        public RandomKeyFactory(FacesContext facesContext)\n-        {\n-            length = WebConfigParamUtils.getIntegerInitParameter(facesContext.getExternalContext(),\n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM, \n-                    RANDOM_KEY_IN_VIEW_STATE_SESSION_TOKEN_LENGTH_PARAM_DEFAULT);\n-            random = new Random(((int)System.nanoTime())+this.hashCode());\n-        }\n-        \n-        public Integer generateCounterKey(FacesContext facesContext)\n-        {\n-            ExternalContext externalContext = facesContext.getExternalContext();\n-            Object sessionObj = externalContext.getSession(true);\n-            Integer sequence = null;\n-            synchronized(sessionObj) // synchronized to increase sequence if multiple requests\n-                                    // are handled at the same time for the session\n-            {\n-                Map<String, Object> map = externalContext.getSessionMap();\n-                sequence = (Integer) map.get(RendererUtils.SEQUENCE_PARAM);\n-                if(sequence == null || sequence.intValue() == Integer.MAX_VALUE)\n-                {\n-                    sequence = Integer.valueOf(1);\n-                }\n-                else\n-                {\n-                    sequence = Integer.valueOf(sequence.intValue() + 1);\n-                }\n-                map.put(RendererUtils.SEQUENCE_PARAM, sequence);\n-            }\n-            return sequence;\n-        }\n-\n-        @Override\n-        public byte[] generateKey(FacesContext facesContext)\n-        {\n-            byte[] array = new byte[length];\n-            byte[] key = new byte[length+4];\n-            \n-            //sessionIdGenerator.getRandomBytes(array);\n-            random.nextBytes(array);\n-            for (int i = 0; i < array.length; i++)\n-            {\n-                key[i] = array[i];\n-            }\n-            int value = generateCounterKey(facesContext);\n-            key[array.length] =  (byte) (value >>> 24);\n-            key[array.length+1] =  (byte) (value >>> 16);\n-            key[array.length+2] =  (byte) (value >>> 8);\n-            key[array.length+3] =  (byte) (value);\n-\n-            return key;\n-        }\n \n-        @Override\n-        public String encode(byte[] key)\n-        {\n-            return new String(Hex.encodeHex(key));\n-        }\n-        \n-        @Override\n-        public byte[] decode(String value)\n-        {\n-            try\n-            {\n-                return Hex.decodeHex(value.toCharArray());\n-            }\n-            catch (DecoderException ex)\n-            {\n-                // Cannot decode, ignore silently, later it will be handled as\n-                // ViewExpiredException\n-            }\n-            return null;\n-        }\n-    }\n-    \n-    /**\n-     * \n-     * @param <T>\n-     * @param <K>\n-     * @param <V> \n-     */\n-    protected abstract static class SessionViewStorageFactory <T extends KeyFactory<K,V>, K, V >\n-    {\n-        private KeyFactory<K, V> keyFactory;\n-        \n-        public SessionViewStorageFactory(KeyFactory<K, V> keyFactory)\n-        {\n-            this.keyFactory = keyFactory;\n-        }\n-        \n-        public KeyFactory<K, V> getKeyFactory()\n-        {\n-            return keyFactory;\n-        }\n-        \n-        public abstract SerializedViewCollection createSerializedViewCollection(\n-                FacesContext context);\n-        \n-        public abstract SerializedViewKey createSerializedViewKey(\n-                FacesContext facesContext, String viewId, K key);\n-        \n-    }\n-    \n-    private static class CounterSessionViewStorageFactory \n-        extends SessionViewStorageFactory <KeyFactory <Integer,String>, Integer, String>\n-    {\n-        public CounterSessionViewStorageFactory(KeyFactory<Integer, String> keyFactory)\n-        {\n-            super(keyFactory);\n-        }\n-\n-        @Override\n-        public SerializedViewCollection createSerializedViewCollection(\n-                FacesContext context)\n-        {\n-            return new SerializedViewCollection();\n-        }\n-\n-        @Override\n-        public SerializedViewKey createSerializedViewKey(\n-                FacesContext context, String viewId, Integer key)\n-        {\n-            if (context.isProjectStage(ProjectStage.Production))\n-            {\n-                return new IntIntSerializedViewKey(viewId.hashCode(), key);\n-            }\n-            else\n-            {\n-                return new ReferenceSerializedViewKey(viewId, key);\n-            }\n-        }\n-    }\n-    \n-    private static class RandomSessionViewStorageFactory\n-        extends SessionViewStorageFactory <KeyFactory <byte[],String>, byte[], String>\n-    {\n-        public RandomSessionViewStorageFactory(KeyFactory<byte[], String> keyFactory)\n-        {\n-            super(keyFactory);\n-        }\n-\n-        @Override\n-        public SerializedViewCollection createSerializedViewCollection(\n-                FacesContext context)\n-        {\n-            return new SerializedViewCollection();\n-        }\n-\n-        @Override\n-        public SerializedViewKey createSerializedViewKey(\n-                FacesContext context, String viewId, byte[] key)\n-        {\n-            if (context.isProjectStage(ProjectStage.Production))\n-            {\n-                return new IntByteArraySerializedViewKey(viewId.hashCode(), key);\n-            }\n-            else\n-            {\n-                return new ReferenceSerializedViewKey(viewId, key);\n-            }\n-        }\n-    }\n }",
                "deletions": 599
            },
            {
                "sha": "811235de025d4f7b6c615c41e4c0d6f01dd75ee2",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/SessionIdGenerator.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SessionIdGenerator.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SessionIdGenerator.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/SessionIdGenerator.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -30,7 +30,6 @@\n  * NOTE: Class taken from tomcat 7 org.apache.catalina.util.SessionIdGenerator\n  * and used here as an alternative for server side state token encryption.\n  * \n- * @author Leonardo Uribe\n  */\n class SessionIdGenerator\n {",
                "deletions": 1
            },
            {
                "sha": "42213ee1c02ca5387533fa5216f17c7133348fb4",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/SessionViewStorageFactory.java",
                "blob_url": "https://github.com/apache/myfaces/blob/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SessionViewStorageFactory.java",
                "raw_url": "https://github.com/apache/myfaces/raw/97642b7c55751343ab4f2e403cb133084ae05c00/impl/src/main/java/org/apache/myfaces/renderkit/SessionViewStorageFactory.java",
                "status": "added",
                "changes": 52,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/SessionViewStorageFactory.java?ref=97642b7c55751343ab4f2e403cb133084ae05c00",
                "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.myfaces.renderkit;\n+\n+import javax.faces.context.FacesContext;\n+\n+/**\n+ *\n+ */\n+class SessionViewStorageFactory<T extends KeyFactory<K,V>, K, V >\n+{\n+    private KeyFactory<K, V> keyFactory;\n+\n+    public SessionViewStorageFactory( KeyFactory<K, V> keyFactory )\n+    {\n+        this.keyFactory = keyFactory;\n+    }\n+\n+    public KeyFactory<K, V> getKeyFactory()\n+    {\n+        return keyFactory;\n+    }\n+\n+    public ServerSideStateCacheImpl.SerializedViewCollection createSerializedViewCollection(\n+            FacesContext context)\n+    {\n+        return new ServerSideStateCacheImpl.SerializedViewCollection();\n+    }\n+\n+    public SerializedViewKey createSerializedViewKey(\n+            FacesContext context, String viewId, Object key)\n+    {\n+        return new SerializedViewKey(viewId, key);\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-2663 NPE in UIParameter when value resolves to null (major refactoring of every use of UIParameter - introduced HtmlRendererUtils.getValidUIParameterChildren() to retrieve UIParameter children correctly)",
        "commit": "https://github.com/apache/myfaces/commit/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b",
        "parent": "https://github.com/apache/myfaces/commit/78698dda8b7641067f22e45d08a0b19fb9cd99f4",
        "bug_id": "myfaces_84",
        "file": [
            {
                "sha": "01227e28a680059b39fc7a54e1953925e9fb9d0c",
                "filename": "impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java",
                "status": "modified",
                "changes": 17,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/impl/src/main/java/org/apache/myfaces/renderkit/html/HtmlFormatRenderer.java?ref=e483a32e41ef71a4ffcf09dd291eb5c4ebc7541b",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.myfaces.shared_impl.renderkit.JSFAttr;\n import org.apache.myfaces.shared_impl.renderkit.RendererUtils;\n import org.apache.myfaces.shared_impl.renderkit.html.HtmlRenderer;\n+import org.apache.myfaces.shared_impl.renderkit.html.HtmlRendererUtils;\n import org.apache.myfaces.shared_impl.renderkit.html.HtmlTextRendererBase;\n \n /**\n@@ -90,18 +91,12 @@ private String getOutputFormatText(FacesContext facesContext, UIComponent htmlOu\n         else\n         {\n             List<Object> argsList = new ArrayList<Object>();\n-            for (UIComponent child : htmlOutputFormat.getChildren())\n+            \n+            List<UIParameter> validParams = HtmlRendererUtils.getValidUIParameterChildren(\n+                    facesContext, htmlOutputFormat.getChildren(), false, false, false);\n+            for (UIParameter param : validParams)\n             {\n-                if (child instanceof UIParameter)\n-                {\n-                    // check for the disable attribute (since 2.0)\n-                    if (((UIParameter) child).isDisable())\n-                    {\n-                        // ignore this UIParameter and continue\n-                        continue;\n-                    }\n-                    argsList.add(((UIParameter)child).getValue());\n-                }\n+                argsList.add(param.getValue());\n             }\n             \n             args = argsList.toArray(new Object[argsList.size()]);",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "fix NPE from NumberFormat.format() when DoubleRangeValidator detects MAXIMUM violation and locale is null.\nThe unit test didn't catch this error because it passes Strings to the message formatter instead of a Double.",
        "commit": "https://github.com/apache/myfaces/commit/a9f2138a6e70a7202d78580d651699d097b4c7c4",
        "parent": "https://github.com/apache/myfaces/commit/b73cd26009c0ecfde7e672f44abf075c9dafbde7",
        "bug_id": "myfaces_85",
        "file": [
            {
                "sha": "7a67aa55522a9ae7599ceda2cd1392fbd59d57ab",
                "filename": "api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "blob_url": "https://github.com/apache/myfaces/blob/a9f2138a6e70a7202d78580d651699d097b4c7c4/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "raw_url": "https://github.com/apache/myfaces/raw/a9f2138a6e70a7202d78580d651699d097b4c7c4/api/src/main/java/javax/faces/validator/_MessageUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/validator/_MessageUtils.java?ref=a9f2138a6e70a7202d78580d651699d097b4c7c4",
                "patch": "@@ -54,6 +54,11 @@ static FacesMessage getMessage(FacesContext facesContext,\n         String summary;\n         String detail;\n \n+        if(locale == null)\n+        {\n+            locale = Locale.getDefault();\n+        }\n+\n         appBundle = getApplicationBundle(facesContext, locale);\n         summary = getBundleString(appBundle, messageId);\n         if (summary != null)\n@@ -144,11 +149,6 @@ private static ResourceBundle getBundle(FacesContext facesContext,\n                                             Locale locale,\n                                             String bundleName)\n     {\n-        if(locale == null)\n-        {\n-            locale = Locale.getDefault();\n-        }\n-        \n         try\n         {\n             //First we try the JSF implementation class loader",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "javadoc for SelectItem only says that setValue can now be null (compare 1.1 jsf javadoc with 1.2 jsf javadoc). Label still throws a NPE in case of a null value",
        "commit": "https://github.com/apache/myfaces/commit/8d7496a12d6b19c19c74c69c6bd6300fa15cc33b",
        "parent": "https://github.com/apache/myfaces/commit/d6b9b4fa28d57913593a90b28f2a7335ba3576fe",
        "bug_id": "myfaces_86",
        "file": [
            {
                "sha": "20c8d69d0cd8b7b6683b6d3b12ff20f4c63ba6ae",
                "filename": "api/src/main/java/javax/faces/model/SelectItem.java",
                "blob_url": "https://github.com/apache/myfaces/blob/8d7496a12d6b19c19c74c69c6bd6300fa15cc33b/api/src/main/java/javax/faces/model/SelectItem.java",
                "raw_url": "https://github.com/apache/myfaces/raw/8d7496a12d6b19c19c74c69c6bd6300fa15cc33b/api/src/main/java/javax/faces/model/SelectItem.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/model/SelectItem.java?ref=8d7496a12d6b19c19c74c69c6bd6300fa15cc33b",
                "patch": "@@ -107,6 +107,8 @@ public String getLabel()\n \n     public void setLabel(String label)\n     {\n+        if (label == null)\n+          throw new NullPointerException(\"label\");\n         _label = label;\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "myfaces",
        "message": "MYFACES-1681\n\nthanks to Sun's Ryan Lubke, for pointing out, that MyFaces is too restrictive with respect\nto null values (on UIComponent.getAttributes().put(...)).\nThe RI will only throw the NPE against a null value *if* there isn't an associated property. \nMyfaces does this as well, now.\n\nJavaDoc is misleading, so Ryan will file a \"Spec Bug\" as well.\n\nadded fix for the problem\nadded test-case for this scenario.",
        "commit": "https://github.com/apache/myfaces/commit/e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
        "parent": "https://github.com/apache/myfaces/commit/119f9bf2a9049fa4b52e56eb1e617c96e6959d9c",
        "bug_id": "myfaces_87",
        "file": [
            {
                "sha": "80705070c6ab669a2b5e07c0d73d44d0e65b5f1c",
                "filename": "api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java",
                "status": "modified",
                "changes": 19,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/main/java/javax/faces/component/_ComponentAttributesMap.java?ref=e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
                "patch": "@@ -292,10 +292,15 @@ public Object remove(Object key)\n      */\n     public Object put(Object key, Object value)\n     {\n-        checkKeyAndValue(key, value);\n+        checkKey(key);\n \n         PropertyDescriptor propertyDescriptor = getPropertyDescriptor((String)key);\n-        if (propertyDescriptor != null)\n+        if(propertyDescriptor == null)\n+        {\n+          if(value==null)\n+              throw new NullPointerException(\"value is null for a not available property: \" + key);\n+        }\n+        else\n         {\n             if (propertyDescriptor.getReadMethod() != null)\n             {\n@@ -407,16 +412,6 @@ private void setComponentProperty(PropertyDescriptor propertyDescriptor, Object\n         }\n     }\n \n-\n-    private void checkKeyAndValue(Object key, Object value)\n-    {\n-        //http://issues.apache.org/jira/browse/MYFACES-458: obviously, the spec is a little unclear here,\n-        // but value == null should be allowed - if there is a TCK-test failing due to this, we should\n-        // apply for getting the TCK-test dropped\n-        if (value == null) throw new NullPointerException(\"value\");\n-        checkKey(key);\n-    }\n-\n     private void checkKey(Object key)\n     {\n         if (key == null) throw new NullPointerException(\"key\");",
                "deletions": 12
            },
            {
                "sha": "97912586c2240ebe5a9d318bbc3c4bcaba3c14aa",
                "filename": "api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "blob_url": "https://github.com/apache/myfaces/blob/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "raw_url": "https://github.com/apache/myfaces/raw/e73e5dc281ea7c7e819f59b606adc9a2d2088c01/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/myfaces/contents/api/src/test/java/javax/faces/component/UIComponentAttributesTest.java?ref=e73e5dc281ea7c7e819f59b606adc9a2d2088c01",
                "patch": "@@ -0,0 +1,40 @@\n+package javax.faces.component;\r\n+\r\n+import javax.faces.component.html.HtmlInputText;\r\n+\r\n+import org.apache.shale.test.base.AbstractJsfTestCase;\r\n+\r\n+public class UIComponentAttributesTest extends AbstractJsfTestCase{\r\n+  \r\n+    public UIComponentAttributesTest(String arg0)\r\n+    {\r\n+        super(arg0);\r\n+    }\r\n+\r\n+    private HtmlInputText input;\r\n+    \r\n+    \r\n+    protected void setUp() throws Exception {\r\n+        super.setUp();\r\n+        input = new HtmlInputText();\r\n+        input.setId(\"testId\");\r\n+    }\r\n+\r\n+    protected void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+        input = null;\r\n+    }\r\n+\r\n+    public void testSetNullAttributeOnValidProperty(){\r\n+        input.getAttributes().put(\"style\", null);\r\n+  }\r\n+    public void testSetNullAttributeOnInvalidProperty(){\r\n+        try{\r\n+            input.getAttributes().put(\"someBogus\", null);\r\n+            fail(\"Should have thrown NullPointerException\");\r\n+        }\r\n+        catch(NullPointerException npe){\r\n+            //expected\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    }
]