{
    "sling-org-apache-sling-validation-core_1041e77": {
        "repo": "sling-org-apache-sling-validation-core",
        "message": "SLING-4955 fix NPE whenever there was no model associated with the resource super type\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1696301 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/1041e77e6b6953a5c8dd17561c55baa95f612e50",
        "parent": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/4d3ceca0c6868f1ad15201c72c5cf163668626a8",
        "bug_id": "sling-org-apache-sling-validation-core_1041e77",
        "file": [
            {
                "sha": "5c65aa5c73c7f8fc38c78e0fb29c605bbbd69c32",
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationModelRetrieverImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/1041e77e6b6953a5c8dd17561c55baa95f612e50/src/main/java/org/apache/sling/validation/impl/ValidationModelRetrieverImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/1041e77e6b6953a5c8dd17561c55baa95f612e50/src/main/java/org/apache/sling/validation/impl/ValidationModelRetrieverImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationModelRetrieverImpl.java?ref=1041e77e6b6953a5c8dd17561c55baa95f612e50",
                "patch": "@@ -111,10 +111,12 @@ ValidationModel getModel(@Nonnull String resourceType, String resourcePath,\n             Collection<ValidationModel> modelsToMerge = new ArrayList<ValidationModel>();\n             while ((currentResourceType = resourceResolver.getParentResourceType(currentResourceType)) != null) {\n                 ValidationModel modelToMerge = getModel(currentResourceType, resourcePath, resourceResolver);\n-                if (baseModel == null) {\n-                    baseModel = modelToMerge;\n-                } else {\n-                    modelsToMerge.add(modelToMerge);\n+                if (modelToMerge != null) {\n+                    if (baseModel == null) {\n+                        baseModel = modelToMerge;\n+                    } else {\n+                        modelsToMerge.add(modelToMerge);\n+                    }\n                 }\n             }\n             if (!modelsToMerge.isEmpty()) {",
                "deletions": 4
            },
            {
                "sha": "39b7ee8c802e23976572d3ec730f56efcdc171cc",
                "filename": "src/test/java/org/apache/sling/validation/impl/ValidationModelRetrieverImplTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/1041e77e6b6953a5c8dd17561c55baa95f612e50/src/test/java/org/apache/sling/validation/impl/ValidationModelRetrieverImplTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/1041e77e6b6953a5c8dd17561c55baa95f612e50/src/test/java/org/apache/sling/validation/impl/ValidationModelRetrieverImplTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/test/java/org/apache/sling/validation/impl/ValidationModelRetrieverImplTest.java?ref=1041e77e6b6953a5c8dd17561c55baa95f612e50",
                "patch": "@@ -198,4 +198,37 @@ public void testGetModelWithResourceInheritance() {\n         Assert.assertNotNull(model);\n         Assert.assertThat(model.getResourceProperties(), Matchers.containsInAnyOrder(new ResourcePropertyNameMatcher(\"test/type\"), new ResourcePropertyNameMatcher(\"test/supertype\")));\n     }\n+    \n+    @Test\n+    public void testGetModelWithResourceInheritanceAndNoSuitableBaseModelFound() {\n+        // no model found for base type and no resource super type set\n+        ValidationModel model = validationModelRetriever.getModel(\"test/type\", \"/content/site1\", true, resourceResolver);\n+        Assert.assertNull(\"Found model although no model has been specified\", model);\n+        \n+        // set super super type\n+        Mockito.when(resourceResolver.getParentResourceType(\"test/type\")).thenReturn(\"test/supertype\");\n+        // no model found at all (neither base nor super type)\n+        model = validationModelRetriever.getModel(\"test/type\", \"/content/site1\", true, resourceResolver);\n+        Assert.assertNull(\"Found model although no model has been specified (neither in base nor in super type)\", model);\n+        \n+        validationModelRetriever.validationModelsCache.clear();\n+        \n+        // only supertype has model being set\n+        applicablePathPerResourceType.put(\"test/supertype\", \"/content/site1\");\n+        model = validationModelRetriever.getModel(\"test/type\", \"/content/site1\", true, resourceResolver);\n+        Assert.assertNotNull(model);\n+        Assert.assertThat(model.getResourceProperties(), Matchers.contains(new ResourcePropertyNameMatcher(\"test/supertype\")));\n+    }\n+    \n+    @Test\n+    public void testGetModelWithResourceInheritanceAndNoModelForSuperTypeFound() {\n+        applicablePathPerResourceType.put(\"test/type\", \"/content/site1\");\n+        Mockito.when(resourceResolver.getParentResourceType(\"test/type\")).thenReturn(\"test/supertype\");\n+        Mockito.when(resourceResolver.getParentResourceType(\"test/supertype\")).thenReturn(\"test/supersupertype\");\n+        \n+        // only model found for base type\n+        ValidationModel model = validationModelRetriever.getModel(\"test/type\", \"/content/site1\", true, resourceResolver);\n+        Assert.assertNotNull(model);\n+        Assert.assertThat(model.getResourceProperties(), Matchers.contains(new ResourcePropertyNameMatcher(\"test/type\")));\n+    }\n }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ValidationModelRetrieverImpl.java"
        ],
        "unit_tests": [
            "ValidationModelRetrieverImplTest.java"
        ]
    },
    "sling-org-apache-sling-validation-core_068e758": {
        "repo": "sling-org-apache-sling-validation-core",
        "message": "SLING-6659 prevent NPE by creating the ValidatorMap in the constructor rather than in its activate method\n\nEven for dynamic service references, the bind might be called during the activate (or even before), see http://stackoverflow.com/a/15782806/5155923\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1787953 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/068e7589fb8739b908882b92e7f880dca26f513e",
        "parent": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/4038819ff011b90cb308698902ca0a07df4c0e5b",
        "bug_id": "sling-org-apache-sling-validation-core_068e758",
        "file": [
            {
                "sha": "43622034a685621f14c3beb5af423ba0a2cae062",
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/068e7589fb8739b908882b92e7f880dca26f513e/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/068e7589fb8739b908882b92e7f880dca26f513e/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java?ref=068e7589fb8739b908882b92e7f880dca26f513e",
                "patch": "@@ -81,7 +81,7 @@\n     \n     /** List of all known validators (key=id of validator) */\n     @Nonnull\n-    ValidatorMap validatorMap;\n+    final ValidatorMap validatorMap;\n     \n     Collection<String> searchPaths;\n     \n@@ -101,10 +101,13 @@\n \n     @Reference\n     private ServiceUserMapped serviceUserMapped;\n+    \n+    public ValidationServiceImpl() {\n+        this.validatorMap = new ValidatorMap();\n+    }\n \n     @Activate\n     protected void activate(ValidationServiceConfiguration configuration) {\n-        this.validatorMap = new ValidatorMap();\n         this.configuration = configuration;\n         ResourceResolver rr = null;\n         try {",
                "deletions": 2
            },
            {
                "sha": "61911cd39cac66179c392ec8432fcc7738cafa03",
                "filename": "src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/068e7589fb8739b908882b92e7f880dca26f513e/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/068e7589fb8739b908882b92e7f880dca26f513e/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/test/java/org/apache/sling/validation/impl/ValidationServiceImplTest.java?ref=068e7589fb8739b908882b92e7f880dca26f513e",
                "patch": "@@ -115,7 +115,6 @@ public void setUp() throws LoginException, PersistenceException, RepositoryExcep\n         validationService = new ValidationServiceImpl();\n         validationService.searchPaths = Arrays.asList(context.resourceResolver().getSearchPath());\n         validationService.configuration = configuration;\n-        validationService.validatorMap = new ValidatorMap();\n         Mockito.doReturn(20).when(configuration).defaultSeverity();\n         validationService.resourceBundleProviders = Collections.singletonList(resourceBundleProvider);\n         Mockito.doReturn(defaultResourceBundle).when(resourceBundleProvider).getResourceBundle(Mockito.anyObject());",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ValidationServiceImpl.java"
        ],
        "unit_tests": [
            "ValidationServiceImplTest.java"
        ]
    },
    "sling-org-apache-sling-validation-core_2c87225": {
        "repo": "sling-org-apache-sling-validation-core",
        "message": "upgrade to Sling API 2.9.0 to leverage JSR 305 annotations fully\n\nfix some potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1785540 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/2c87225e6b46a424bc3a0052134a08caa52cf2bd",
        "parent": "https://github.com/apache/sling-org-apache-sling-validation-core/commit/93f783e9f63af0e078f460e029dee5bfdb301396",
        "bug_id": "sling-org-apache-sling-validation-core_2c87225",
        "file": [
            {
                "sha": "cb5bb940f0d6a9251ab06af6b1fe5af44cd6ab3a",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/pom.xml?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -97,7 +97,8 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n-            <version>2.5.0</version>\n+            <!-- for now we should rely on 2.9.0 only (not newer) to stay compatible with older Sling distributions -->\n+            <version>2.9.0</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>",
                "deletions": 1
            },
            {
                "sha": "cd4113402c30af5aaccf7011dd4e05b1074ed129",
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationResourceVisitor.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -76,7 +76,7 @@ protected void visit(Resource resource) {\n      * \n      * @return {@code true} in case the given resource should have its own Sling Validation model\n      */\n-    private boolean isValidSubResource(Resource resource) {\n+    private boolean isValidSubResource(@Nonnull Resource resource) {\n         if (ResourceUtil.isNonExistingResource(resource)) {\n             return false;\n         }",
                "deletions": 1
            },
            {
                "sha": "7942765a5c9025436c5bd59746c142f1c4f4fd03",
                "filename": "src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java",
                "status": "modified",
                "changes": 33,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/ValidationServiceImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -64,12 +64,12 @@\n public class ValidationServiceImpl implements ValidationService{\n \n     /** Keys whose values are defined in the JCR resource bundle contained in the content-repository section of this bundle */\n-    protected static final String I18N_KEY_WRONG_PROPERTY_TYPE = \"sling.validator.wrong-property-type\";\n-    protected static final String I18N_KEY_EXPECTED_MULTIVALUE_PROPERTY = \"sling.validator.multi-value-property-required\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_PROPERTY_WITH_NAME = \"sling.validator.missing-required-property-with-name\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_PROPERTY_MATCHING_PATTERN = \"sling.validator.missing-required-property-matching-pattern\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_WITH_NAME = \"sling.validator.missing-required-child-resource-with-name\";\n-    protected static final String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_MATCHING_PATTERN = \"sling.validator.missing-required-child-resource-matching-pattern\";\n+    protected static final @Nonnull String I18N_KEY_WRONG_PROPERTY_TYPE = \"sling.validator.wrong-property-type\";\n+    protected static final @Nonnull String I18N_KEY_EXPECTED_MULTIVALUE_PROPERTY = \"sling.validator.multi-value-property-required\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_PROPERTY_WITH_NAME = \"sling.validator.missing-required-property-with-name\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_PROPERTY_MATCHING_PATTERN = \"sling.validator.missing-required-property-matching-pattern\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_WITH_NAME = \"sling.validator.missing-required-child-resource-with-name\";\n+    protected static final @Nonnull String I18N_KEY_MISSING_REQUIRED_CHILD_RESOURCE_MATCHING_PATTERN = \"sling.validator.missing-required-child-resource-matching-pattern\";\n \n     private static final Logger LOG = LoggerFactory.getLogger(ValidationServiceImpl.class);\n     \n@@ -132,7 +132,6 @@ public void activate(ValidationServiceConfiguration configuration) {\n      * @return a relative resource type (without the leading search path)\n      * @throws IllegalArgumentException in case the resource type is starting with a \"/\" but not with any of the search paths.\n      */\n-    @SuppressWarnings(\"null\")\n     protected @Nonnull String getRelativeResourceType(@Nonnull String resourceType) throws IllegalArgumentException {\n         if (resourceType.startsWith(\"/\")) {\n             LOG.debug(\"try to strip the search path from the resource type\");\n@@ -150,7 +149,6 @@ public void activate(ValidationServiceConfiguration configuration) {\n         return resourceType;\n     }\n \n-    @SuppressWarnings(\"null\")\n     @Override\n     public @CheckForNull ValidationModel getValidationModel(@Nonnull Resource resource, boolean considerResourceSuperTypeModels) {\n         return getValidationModel(resource.getResourceType(), resource.getPath(), considerResourceSuperTypeModels);\n@@ -208,7 +206,7 @@ public void activate(ValidationServiceConfiguration configuration) {\n      * @param result\n      * @param childResources\n      */\n-    private void validateChildren(Resource resource, String relativePath, Collection<ChildResource> childResources, CompositeValidationResult result,  ResourceBundle defaultResourceBundle) {\n+    private void validateChildren(@Nonnull Resource resource, @Nonnull String relativePath, @Nonnull Collection<ChildResource> childResources, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         // validate children resources, if any\n         for (ChildResource childResource : childResources) {\n             // if a pattern is set we validate all children matching that pattern\n@@ -236,8 +234,8 @@ private void validateChildren(Resource resource, String relativePath, Collection\n         }\n     }\n \n-    private void validateChildResource(Resource resource, String relativePathOfParent, ChildResource childResource, CompositeValidationResult result,  ResourceBundle defaultResourceBundle) {\n-        final String relativePath;\n+    private void validateChildResource(@Nonnull Resource resource, @Nonnull String relativePathOfParent, @Nonnull ChildResource childResource, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n+        final @Nonnull String relativePath;\n         if (relativePathOfParent.isEmpty()) {\n             relativePath = resource.getName();\n         } else {\n@@ -259,15 +257,15 @@ private void validateChildResource(Resource resource, String relativePathOfParen\n     }    \n \n     @Override\n-    public @Nonnull ValidationResult validateResourceRecursively(@Nonnull Resource resource, boolean enforceValidation, Predicate filter, boolean considerResourceSuperTypeModels)\n+    public @Nonnull ValidationResult validateResourceRecursively(@Nonnull Resource resource, boolean enforceValidation, Predicate<Resource> filter, boolean considerResourceSuperTypeModels)\n             throws IllegalStateException, IllegalArgumentException, SlingValidationException {\n         ValidationResourceVisitor visitor = new ValidationResourceVisitor(this, resource.getPath(), enforceValidation, filter, considerResourceSuperTypeModels);\n         visitor.accept(resource);\n         return visitor.getResult();\n     }\n \n-    private void validateValueMap(ValueMap valueMap, Resource resource, String relativePath, Collection<ResourceProperty> resourceProperties,\n-            CompositeValidationResult result, ResourceBundle defaultResourceBundle) {\n+    private void validateValueMap(ValueMap valueMap, Resource resource, @Nonnull String relativePath, @Nonnull Collection<ResourceProperty> resourceProperties,\n+            @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         if (valueMap == null) {\n             throw new IllegalArgumentException(\"ValueMap may not be null\");\n         }\n@@ -290,7 +288,7 @@ private void validateValueMap(ValueMap valueMap, Resource resource, String relat\n         }\n     }\n \n-    private void validatePropertyValue(String property, ValueMap valueMap, Resource resource, String relativePath, ResourceProperty resourceProperty, CompositeValidationResult result, ResourceBundle defaultResourceBundle) {\n+    private void validatePropertyValue(String property, ValueMap valueMap, Resource resource, @Nonnull String relativePath, @Nonnull ResourceProperty resourceProperty, @Nonnull CompositeValidationResult result, @Nonnull ResourceBundle defaultResourceBundle) {\n         Object fieldValues = valueMap.get(property);\n         if (fieldValues == null) {\n             if (resourceProperty.isRequired()) {\n@@ -345,10 +343,9 @@ private void validatePropertyValue(String property, ValueMap valueMap, Resource\n         }\n     }\n     \n-    @SuppressWarnings(\"rawtypes\")\n-    private void validateValue(CompositeValidationResult result, @Nonnull Object value, String property, String relativePath, @Nonnull ValueMap valueMap, Resource resource, ParameterizedValidator validator, ResourceBundle defaultResourceBundle) {\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    private void validateValue(CompositeValidationResult result, @Nonnull Object value, String property, String relativePath, @Nonnull ValueMap valueMap, Resource resource, ParameterizedValidator validator, @Nonnull ResourceBundle defaultResourceBundle) {\n         try {\n-            @SuppressWarnings(\"unchecked\")\n             ValidationContext validationContext = new ValidationContextImpl(relativePath + property, validator.getSeverity(), valueMap, resource, defaultResourceBundle);\n             ValidationResult validatorResult = ((Validator)validator.getValidator()).validate(value, validationContext, validator.getParameters());\n             result.addValidationResult(validatorResult);",
                "deletions": 18
            },
            {
                "sha": "4e1c8583959c0861dbbe1c5dda8265be64829b24",
                "filename": "src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/model/ChildResourceImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -33,7 +33,7 @@\n  */\n public class ChildResourceImpl implements ChildResource {\n \n-    private final String name;\n+    private final @Nonnull String name;\n     private final Pattern namePattern;\n     private final @Nonnull List<ResourceProperty> properties;\n     private final @Nonnull List<ChildResource> children;\n@@ -56,7 +56,7 @@ public ChildResourceImpl(@Nonnull String name, String nameRegex, boolean isRequi\n     }\n \n     @Override\n-    public String getName() {\n+    public @Nonnull String getName() {\n         return name;\n     }\n \n@@ -104,10 +104,7 @@ public boolean equals(Object obj) {\n             return false;\n         if (isRequired != other.isRequired)\n             return false;\n-        if (name == null) {\n-            if (other.name != null)\n-                return false;\n-        } else if (!name.equals(other.name))\n+        if (!name.equals(other.name))\n             return false;\n         if (namePattern == null) {\n             if (other.namePattern != null)",
                "deletions": 6
            },
            {
                "sha": "b8efc61a031dd041b365625375375cf91112fbe9",
                "filename": "src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/model/MergedValidationModel.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.sling.validation.impl.model;\n \n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n@@ -42,7 +41,7 @@\n     private final ValidationModel baseModel;\n     private final Map<String, ResourceProperty> resourcePropertiesMap;\n     private final Map<String, ChildResource> childResourceMap;\n-    private final String source;\n+    private final @Nonnull String source;\n     \n     public MergedValidationModel(ValidationModel baseModel, ValidationModel... modelsToMerge) {\n         this.baseModel = baseModel;",
                "deletions": 2
            },
            {
                "sha": "1238982b585802a04e76ef5d037b0b74ac560ef1",
                "filename": "src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-validation-core/blob/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-validation-core/raw/2c87225e6b46a424bc3a0052134a08caa52cf2bd/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java",
                "status": "modified",
                "changes": 44,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-validation-core/contents/src/main/java/org/apache/sling/validation/impl/resourcemodel/ResourceValidationModelProviderImpl.java?ref=2c87225e6b46a424bc3a0052134a08caa52cf2bd",
                "patch": "@@ -41,12 +41,9 @@\n import org.apache.sling.api.resource.ValueMap;\n import org.apache.sling.serviceusermapping.ServiceUserMapped;\n import org.apache.sling.validation.impl.model.ChildResourceImpl;\n-import org.apache.sling.validation.impl.model.ParameterizedValidatorImpl;\n import org.apache.sling.validation.impl.model.ResourcePropertyBuilder;\n-import org.apache.sling.validation.impl.model.ResourcePropertyImpl;\n import org.apache.sling.validation.impl.model.ValidationModelBuilder;\n import org.apache.sling.validation.model.ChildResource;\n-import org.apache.sling.validation.model.ParameterizedValidator;\n import org.apache.sling.validation.model.ResourceProperty;\n import org.apache.sling.validation.model.ValidationModel;\n import org.apache.sling.validation.model.spi.ValidationModelProvider;\n@@ -73,17 +70,17 @@\n     static final String[] TOPICS = { SlingConstants.TOPIC_RESOURCE_REMOVED, SlingConstants.TOPIC_RESOURCE_CHANGED,\n             SlingConstants.TOPIC_RESOURCE_ADDED };\n \n-    public static final String NAME_REGEX = \"nameRegex\";\n-    public static final String CHILDREN = \"children\";\n-    public static final String VALIDATOR_ARGUMENTS = \"validatorArguments\";\n-    public static final String VALIDATORS = \"validators\";\n-    public static final String OPTIONAL = \"optional\";\n-    public static final String PROPERTY_MULTIPLE = \"propertyMultiple\";\n-    public static final String PROPERTIES = \"properties\";\n-    public static final String VALIDATION_MODEL_RESOURCE_TYPE = \"sling/validation/model\";\n-    public static final String APPLICABLE_PATHS = \"applicablePaths\";\n-    public static final String VALIDATED_RESOURCE_TYPE = \"validatedResourceType\";\n-    public static final String SEVERITY = \"severity\";\n+    public static final @Nonnull String NAME_REGEX = \"nameRegex\";\n+    public static final @Nonnull String CHILDREN = \"children\";\n+    public static final @Nonnull String VALIDATOR_ARGUMENTS = \"validatorArguments\";\n+    public static final @Nonnull String VALIDATORS = \"validators\";\n+    public static final @Nonnull String OPTIONAL = \"optional\";\n+    public static final @Nonnull String PROPERTY_MULTIPLE = \"propertyMultiple\";\n+    public static final @Nonnull String PROPERTIES = \"properties\";\n+    public static final @Nonnull String VALIDATION_MODEL_RESOURCE_TYPE = \"sling/validation/model\";\n+    public static final @Nonnull String APPLICABLE_PATHS = \"applicablePaths\";\n+    public static final @Nonnull String VALIDATED_RESOURCE_TYPE = \"validatedResourceType\";\n+    public static final @Nonnull String SEVERITY = \"severity\";\n \n     @Reference\n     ResourceResolverFactory rrf = null;\n@@ -194,16 +191,19 @@ public void handleEvent(Event event) {\n         }\n     }\n \n-    private String getResourceTypeOfValidationModel(String path) throws LoginException {\n+    private String getResourceTypeOfValidationModel(@Nonnull String path) throws LoginException {\n         ResourceResolver resourceResolver = null;\n         try {\n             resourceResolver = rrf.getServiceResourceResolver(null);\n             Resource modelResource = resourceResolver.getResource(path);\n+            if (modelResource == null) {\n+                throw new IllegalStateException(\"Can no longer access resource at \" + path);\n+            }\n             ValueMap properties = modelResource.adaptTo(ValueMap.class);\n             if (properties == null) {\n                 throw new IllegalStateException(\"Could not adapt resource at \" + path + \" to a ValueMap\");\n             }\n-            return properties.get(VALIDATED_RESOURCE_TYPE, null);\n+            return properties.get(VALIDATED_RESOURCE_TYPE, String.class);\n         } finally {\n             if (resourceResolver != null) {\n                 resourceResolver.close();\n@@ -254,7 +254,7 @@ private String getResourceTypeOfValidationModel(String path) throws LoginExcepti\n                     String resourcePath = model.getPath();\n                     try {\n                         ValidationModelBuilder modelBuilder = new ValidationModelBuilder();\n-                        ValueMap validationModelProperties = model.adaptTo(ValueMap.class);\n+                        ValueMap validationModelProperties = model.getValueMap();\n                         modelBuilder.addApplicablePaths(validationModelProperties.get(ResourceValidationModelProviderImpl.APPLICABLE_PATHS, new String[] {}));\n                         Resource propertiesResource = model.getChild(ResourceValidationModelProviderImpl.PROPERTIES);\n                         modelBuilder.resourceProperties(buildProperties(validatorsMap, propertiesResource));\n@@ -292,21 +292,21 @@ private String getResourceTypeOfValidationModel(String path) throws LoginExcepti\n     private @Nonnull List<ResourceProperty> buildProperties(@Nonnull Map<String, Validator<?>> validatorsMap, Resource propertiesResource) {\n         List<ResourceProperty> properties = new ArrayList<ResourceProperty>();\n         if (propertiesResource != null) {\n-            for (Resource property : propertiesResource.getChildren()) {\n+            for (Resource propertyResource : propertiesResource.getChildren()) {\n                 ResourcePropertyBuilder resourcePropertyBuilder = new ResourcePropertyBuilder();\n-                String fieldName = property.getName();\n-                ValueMap propertyValueMap = property.adaptTo(ValueMap.class);\n+                String fieldName = propertyResource.getName();\n+                ValueMap propertyValueMap = propertyResource.getValueMap();\n                 if (propertyValueMap.get(ResourceValidationModelProviderImpl.PROPERTY_MULTIPLE, false)) {\n                     resourcePropertyBuilder.multiple();\n                 }\n                 if (propertyValueMap.get(ResourceValidationModelProviderImpl.OPTIONAL, false)) {\n                     resourcePropertyBuilder.optional();\n                 }\n-                String nameRegex = propertyValueMap.get(ResourceValidationModelProviderImpl.NAME_REGEX, null);\n+                String nameRegex = propertyValueMap.get(ResourceValidationModelProviderImpl.NAME_REGEX, String.class);\n                 if (nameRegex != null) {\n                     resourcePropertyBuilder.nameRegex(nameRegex);\n                 }\n-                Resource validators = property.getChild(ResourceValidationModelProviderImpl.VALIDATORS);\n+                Resource validators = propertyResource.getChild(ResourceValidationModelProviderImpl.VALIDATORS);\n                 if (validators != null) {\n                     Iterator<Resource> validatorsIterator = validators.listChildren();\n                     while (validatorsIterator.hasNext()) {",
                "deletions": 22
            }
        ],
        "patched_files": [
            "ResourceValidationModelProviderImpl.java",
            "ValidationServiceImpl.java",
            "MergedValidationModel.java"
        ],
        "unit_tests": [
            "MergedValidationModelTest.java",
            "ResourceValidationModelProviderImplTest.java",
            "ValidationServiceImplTest.java"
        ]
    }
}