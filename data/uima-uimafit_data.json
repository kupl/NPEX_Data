[{"commit": "https://github.com/apache/uima-uimafit/commit/047549bab9d3406b00ada1a5a8f97f19222de5c3", "parent": "https://github.com/apache/uima-uimafit/commit/ab4543eebf6cc270c8721069bcd92ddf5aa464f2", "message": "[UIMA-2798] NPE when primitive AE is added to CpeBuilder \n- Fixed by using a non-empty delegate key\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uimafit/trunk@1464201 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-uimafit_1", "file": [{"additions": 4, "raw_url": "https://github.com/apache/uima-uimafit/raw/047549bab9d3406b00ada1a5a8f97f19222de5c3/uimafit/src/main/java/org/apache/uima/fit/factory/CpeBuilder.java", "blob_url": "https://github.com/apache/uima-uimafit/blob/047549bab9d3406b00ada1a5a8f97f19222de5c3/uimafit/src/main/java/org/apache/uima/fit/factory/CpeBuilder.java", "sha": "35e6bde97d0d7a5b2be9bf06407542c5201bcd82", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/uima-uimafit/contents/uimafit/src/main/java/org/apache/uima/fit/factory/CpeBuilder.java?ref=047549bab9d3406b00ada1a5a8f97f19222de5c3", "patch": "@@ -92,7 +92,7 @@ public void setAnalysisEngine(AnalysisEngineDescription aDesc) throws IOExceptio\n \n     if (aDesc.isPrimitive()) {\n       // For a primitive AE we just add it.\n-      CpeIntegratedCasProcessor proc = createProcessor(\"\", aDesc);\n+      CpeIntegratedCasProcessor proc = createProcessor(\"delegate\", aDesc);\n       cpeDesc.addCasProcessor(proc);\n     } else {\n       // For an aggregate AE we dive into the first aggregation level and add each of the\n@@ -125,7 +125,9 @@ public CollectionProcessingEngine createCpe(StatusCallbackListener aListener)\n       cpeDesc.setProcessingUnitThreadCount(maxProcessingUnitThreadCount);\n     }\n     CollectionProcessingEngine cpe = produceCollectionProcessingEngine(cpeDesc, resMgr, null);\n-    cpe.addStatusCallbackListener(aListener);\n+    if (aListener != null) {\n+      cpe.addStatusCallbackListener(aListener);\n+    }\n     return cpe;\n   }\n ", "filename": "uimafit/src/main/java/org/apache/uima/fit/factory/CpeBuilder.java"}, {"additions": 47, "raw_url": "https://github.com/apache/uima-uimafit/raw/047549bab9d3406b00ada1a5a8f97f19222de5c3/uimafit/src/test/java/org/apache/uima/fit/factory/CpeBuilderTest.java", "blob_url": "https://github.com/apache/uima-uimafit/blob/047549bab9d3406b00ada1a5a8f97f19222de5c3/uimafit/src/test/java/org/apache/uima/fit/factory/CpeBuilderTest.java", "sha": "e9f747acf6ad3842ca79ad610ff1cf908044f0ee", "changes": 47, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/uima-uimafit/contents/uimafit/src/test/java/org/apache/uima/fit/factory/CpeBuilderTest.java?ref=047549bab9d3406b00ada1a5a8f97f19222de5c3", "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.uima.fit.factory;\n+\n+import org.apache.uima.analysis_engine.AnalysisEngineDescription;\n+import org.apache.uima.collection.CollectionProcessingEngine;\n+import org.apache.uima.collection.CollectionReaderDescription;\n+import org.apache.uima.fit.component.NoOpAnnotator;\n+import org.apache.uima.fit.factory.testCrs.SingleFileXReader;\n+import org.junit.Test;\n+import static org.apache.uima.fit.factory.CollectionReaderFactory.*;\n+import static org.apache.uima.fit.factory.AnalysisEngineFactory.*;\n+\n+public class CpeBuilderTest {\n+\n+  @Test\n+  public void testSinglePrimitiveAE() throws Exception\n+  {\n+    CollectionReaderDescription cr = createDescription(\n+            SingleFileXReader.class,\n+            SingleFileXReader.PARAM_XML_SCHEME, \"XCAS\",\n+            SingleFileXReader.PARAM_FILE_NAME, \"src/test/resources/data/docs/test.xcas\");\n+\n+    AnalysisEngineDescription ae = createPrimitiveDescription(NoOpAnnotator.class);\n+    \n+    CpeBuilder builder = new CpeBuilder();\n+    builder.setReader(cr);\n+    builder.setAnalysisEngine(ae);\n+    CollectionProcessingEngine cpe = builder.createCpe(null);\n+  }  \n+}", "filename": "uimafit/src/test/java/org/apache/uima/fit/factory/CpeBuilderTest.java"}], "repo": "uima-uimafit"}, {"commit": "https://github.com/apache/uima-uimafit/commit/c3c6352bb4c1c90c36690ed30c1ed300ff24cb84", "parent": "https://github.com/apache/uima-uimafit/commit/24109ffead804b8a04cc35a32257d14bc99351ea", "message": "[UIMA-2613] Switch from Eclipse JDT to qdox\nhttps://issues.apache.org/jira/browse/UIMA-2613\n- Fixed NPE when no name constant field has been defined for a parameter field\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/uimafit/trunk@1451360 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "uima-uimafit_2", "file": [{"additions": 5, "raw_url": "https://github.com/apache/uima-uimafit/raw/c3c6352bb4c1c90c36690ed30c1ed300ff24cb84/uimafit-maven-plugin/src/main/java/org/apache/uima/fit/maven/EnhanceMojo.java", "blob_url": "https://github.com/apache/uima-uimafit/blob/c3c6352bb4c1c90c36690ed30c1ed300ff24cb84/uimafit-maven-plugin/src/main/java/org/apache/uima/fit/maven/EnhanceMojo.java", "sha": "d61a64eadbf8893a94c225ee1127afbb83e0d8b3", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/uima-uimafit/contents/uimafit-maven-plugin/src/main/java/org/apache/uima/fit/maven/EnhanceMojo.java?ref=c3c6352bb4c1c90c36690ed30c1ed300ff24cb84", "patch": "@@ -333,7 +333,7 @@ private String getStringMemberValue(Annotation aAnnotation, String aValue) {\n   private void enhanceConfigurationParameter(JavaSource aAST, Class<?> aClazz, CtClass aCtClazz)\n           throws MojoExecutionException {\n     // Get the parameter name constants\n-    Map<String, Field> nameFields = getParameterConstants(aClazz);\n+    Map<String, String> nameFields = getParameterConstants(aClazz);\n \n     // Fetch configuration parameters from the @ConfigurationParameter annotations in the\n     // compiled class. We only need the fields in the class itself. Superclasses should be\n@@ -349,7 +349,7 @@ private void enhanceConfigurationParameter(JavaSource aAST, Class<?> aClazz, CtC\n \n       // Extract JavaDoc for this parameter from the source file\n       String pdesc = Util.getParameterDocumentation(aAST, field.getName(),\n-              nameFields.get(p.getName()).getName());\n+              nameFields.get(p.getName()));\n       if (pdesc == null) {\n         getLog().warn(\"No description found for parameter [\" + p.getName() + \"]\");\n         continue;\n@@ -398,15 +398,15 @@ private void enhanceConfigurationParameter(JavaSource aAST, Class<?> aClazz, CtC\n    * Get a map of parameter name to parameter name constant field, e.g. (\"value\",\n    * Field(\"PARAM_VALUE\")).\n    */\n-  private Map<String, Field> getParameterConstants(Class<?> aClazz) {\n-    Map<String, Field> result = new HashMap<String, Field>();\n+  private Map<String, String> getParameterConstants(Class<?> aClazz) {\n+    Map<String, String> result = new HashMap<String, String>();\n     for (Field f : aClazz.getFields()) {\n       if (!f.getName().startsWith(\"PARAM_\")) {\n         continue;\n       }\n       try {\n         String parameterName = (String) f.get(null);\n-        result.put(parameterName, f);\n+        result.put(parameterName, f.getName());\n       } catch (IllegalAccessException e) {\n         getLog().warn(\n                 \"Unable to access parameter name constant field [\" + f.getName() + \"]: \"", "filename": "uimafit-maven-plugin/src/main/java/org/apache/uima/fit/maven/EnhanceMojo.java"}], "repo": "uima-uimafit"}]
