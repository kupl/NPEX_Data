[
    {
        "repo": "log4j",
        "message": "Bug 35743: SyslogAppender throws NullPointerException upon misconfiguration\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@427691 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/2fe8e9d92a368e64c1690ac5b49ef636f4ea30c1",
        "parent": "https://github.com/apache/log4j/commit/9ee6769fb4cbe7c1bedae7589aad920a6eff0bee",
        "bug_id": "log4j_1",
        "file": [
            {
                "sha": "11072a8ad5d28a5c97673cb6ec6066c8040420f9",
                "filename": "src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "blob_url": "https://github.com/apache/log4j/blob/2fe8e9d92a368e64c1690ac5b49ef636f4ea30c1/src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "raw_url": "https://github.com/apache/log4j/raw/2fe8e9d92a368e64c1690ac5b49ef636f4ea30c1/src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/helpers/SyslogWriter.java?ref=2fe8e9d92a368e64c1690ac5b49ef636f4ea30c1",
                "patch": "@@ -73,7 +73,7 @@ void write(String string) throws IOException {\n     DatagramPacket packet = new DatagramPacket(bytes, bytes.length,\n \t\t\t\t\t       address, SYSLOG_PORT);\n \n-    if(this.ds != null)\n+    if(this.ds != null && this.address != null)\n       ds.send(packet);\n     \n   }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 35743: SyslogAppender throws NullPointerException upon misconfiguration\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@427690 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/7e60d7f030578cc723ea218f68c158ddeedf3a89",
        "parent": "https://github.com/apache/log4j/commit/798ab03d7cdaccb61b38ea336ecd25d97e70ae8d",
        "bug_id": "log4j_2",
        "file": [
            {
                "sha": "a6dcb6f4132d915ca5ddd09a47fcb563e5747b99",
                "filename": "src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "blob_url": "https://github.com/apache/log4j/blob/7e60d7f030578cc723ea218f68c158ddeedf3a89/src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "raw_url": "https://github.com/apache/log4j/raw/7e60d7f030578cc723ea218f68c158ddeedf3a89/src/java/org/apache/log4j/helpers/SyslogWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/helpers/SyslogWriter.java?ref=7e60d7f030578cc723ea218f68c158ddeedf3a89",
                "patch": "@@ -79,7 +79,7 @@ public void flush() throws IOException {\n     DatagramPacket packet =\n       new DatagramPacket(bytes, bytes.length, address, SYSLOG_PORT);\n \n-    if (this.ds != null) {\n+    if (this.ds != null && this.address != null) {\n       ds.send(packet);\n     }\n     // clean up for next time",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Fixed silly NullPointerException bug.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@311102 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/3467325911644ba7c823d49278f7b5a6f1c0a830",
        "parent": "https://github.com/apache/log4j/commit/d4866d1389452f80a17d7fcef56e0d05a335770e",
        "bug_id": "log4j_3",
        "file": [
            {
                "sha": "81b8140b5b73d878a79dd2970f55385694a65978",
                "filename": "src/java/org/apache/log4j/pattern/DatePatternConverter.java",
                "blob_url": "https://github.com/apache/log4j/blob/3467325911644ba7c823d49278f7b5a6f1c0a830/src/java/org/apache/log4j/pattern/DatePatternConverter.java",
                "raw_url": "https://github.com/apache/log4j/raw/3467325911644ba7c823d49278f7b5a6f1c0a830/src/java/org/apache/log4j/pattern/DatePatternConverter.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/pattern/DatePatternConverter.java?ref=3467325911644ba7c823d49278f7b5a6f1c0a830",
                "patch": "@@ -59,11 +59,17 @@ public DatePatternConverter() {\n    * or any date and time pattern accepted by java.text.SimpleDateFormat.\n    */\n   public void setOptions(List optionList) {\n+    \n+    String patternOption;\n+    \n     if(optionList == null || optionList.size() == 0) {\n-      return;\n+      // the branch could be optimized, but here we are making explicit\n+      // that null values for patternOption are allowed.\n+      patternOption = null;\n+    } else {\n+      patternOption = (String) optionList.get(0);\n     }\n     \n-    String patternOption = (String) optionList.get(0);\n     String pattern;\n     if (patternOption == null) {\n       pattern = \"yyyy-MM-dd HH:mm:ss,SSS\";\n@@ -91,7 +97,7 @@ public void setOptions(List optionList) {\n     }\n \n     // if the option list contains a TZ option, then set it.\n-    if (optionList.size() > 1) {\n+    if (optionList != null && optionList.size() > 1) {\n       TimeZone tz = TimeZone.getTimeZone((String) optionList.get(1));\n       df.setTimeZone(tz);\n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Fixes to avoid NullPointerExceptions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310645 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/163ae440036ccc591f8b78a0b5a33ed91492cdd4",
        "parent": "https://github.com/apache/log4j/commit/bf70a3f39802883c174bfa71fa082f1fdb714f83",
        "bug_id": "log4j_4",
        "file": [
            {
                "sha": "a91b60d30628f982379d374bb6bd3c1ce3bc7be9",
                "filename": "src/java/org/apache/log4j/joran/JoranConfigurator.java",
                "blob_url": "https://github.com/apache/log4j/blob/163ae440036ccc591f8b78a0b5a33ed91492cdd4/src/java/org/apache/log4j/joran/JoranConfigurator.java",
                "raw_url": "https://github.com/apache/log4j/raw/163ae440036ccc591f8b78a0b5a33ed91492cdd4/src/java/org/apache/log4j/joran/JoranConfigurator.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/joran/JoranConfigurator.java?ref=163ae440036ccc591f8b78a0b5a33ed91492cdd4",
                "patch": "@@ -79,6 +79,9 @@ public JoranConfigurator() {\n   }\n \n   public void doConfigure(URL url, LoggerRepository repository) {\n+    // This line is needed here because there is logging from inside this method.\n+    this.repository = repository;\n+\n     ExecutionContext ec = joranInterpreter.getExecutionContext();\n     String errMsg;\n     try {\n@@ -96,6 +99,9 @@ public void doConfigure(URL url, LoggerRepository repository) {\n    * Configure a repository from a configuration file passed as parameter.\n    */\n   public void doConfigure(String filename, LoggerRepository repository) {\n+    // This line is needed here because there is logging from inside this method.\n+    this.repository = repository;\n+    \n     FileInputStream fis = null;\n     ExecutionContext ec = joranInterpreter.getExecutionContext();\n     getLogger().info(\"in JoranConfigurator doConfigure \"+filename);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 40159: NullPointerException in org.apache.log4j.NDC.get\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@427881 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/7d36034b59b57cc4471b28c2a82121f36dd45cfd",
        "parent": "https://github.com/apache/log4j/commit/c72fe5ece25c77d93d3ed236cddd8a98a215b5a8",
        "bug_id": "log4j_5",
        "file": [
            {
                "sha": "b061293e1366c9ed03ee6dffae25ca78948525a0",
                "filename": "src/java/org/apache/log4j/NDC.java",
                "blob_url": "https://github.com/apache/log4j/blob/7d36034b59b57cc4471b28c2a82121f36dd45cfd/src/java/org/apache/log4j/NDC.java",
                "raw_url": "https://github.com/apache/log4j/raw/7d36034b59b57cc4471b28c2a82121f36dd45cfd/src/java/org/apache/log4j/NDC.java",
                "status": "modified",
                "changes": 35,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/NDC.java?ref=7d36034b59b57cc4471b28c2a82121f36dd45cfd",
                "patch": "@@ -124,6 +124,17 @@\n   \n   // No instances allowed.\n   private NDC() {}\n+  \n+  /**\n+   *   Get NDC stack for current thread.\n+   *   @return NDC stack for current thread.\n+   */\n+  private static Stack getCurrentStack() {\n+      if (ht != null) {\n+          return (Stack) ht.get(Thread.currentThread());\n+      }\n+      return null;\n+  }\n \n \n   /**\n@@ -138,7 +149,7 @@ private NDC() {}\n   public\n   static\n   void clear() {\n-    Stack stack = (Stack) ht.get(Thread.currentThread());    \n+    Stack stack = getCurrentStack();    \n     if(stack != null) \n       stack.setSize(0);    \n   }\n@@ -161,11 +172,10 @@ given thread can supply the stack (i.e. diagnostic context) to a\n   public\n   static\n   Stack cloneStack() {\n-    Object o = ht.get(Thread.currentThread());\n-    if(o == null)\n+    Stack stack = getCurrentStack();\n+    if(stack == null)\n       return null;\n     else {\n-      Stack stack = (Stack) o;\n       return (Stack) stack.clone();\n     }\n   }\n@@ -206,7 +216,7 @@ void inherit(Stack stack) {\n   static\n   public\n   String get() {\n-    Stack s = (Stack) ht.get(Thread.currentThread());\n+    Stack s = getCurrentStack();\n     if(s != null && !s.isEmpty()) \n       return ((DiagnosticContext) s.peek()).fullMessage;\n     else\n@@ -222,7 +232,7 @@ String get() {\n   public\n   static\n   int getDepth() {\n-    Stack stack = (Stack) ht.get(Thread.currentThread());          \n+    Stack stack = getCurrentStack();          \n     if(stack == null)\n       return 0;\n     else\n@@ -232,6 +242,7 @@ int getDepth() {\n   private\n   static\n   void lazyRemove() {\n+    if (ht == null) return;\n      \n     // The synchronization on ht is necessary to prevent JDK 1.2.x from\n     // throwing ConcurrentModificationExceptions at us. This sucks BIG-TIME.\n@@ -286,8 +297,7 @@ void lazyRemove() {\n   public\n   static\n   String pop() {\n-    Thread key = Thread.currentThread();\n-    Stack stack = (Stack) ht.get(key);\n+    Stack stack = getCurrentStack();\n     if(stack != null && !stack.isEmpty()) \n       return ((DiagnosticContext) stack.pop()).message;\n     else\n@@ -307,8 +317,7 @@ String pop() {\n   public\n   static\n   String peek() {\n-    Thread key = Thread.currentThread();\n-    Stack stack = (Stack) ht.get(key);\n+    Stack stack = getCurrentStack();\n     if(stack != null && !stack.isEmpty())\n       return ((DiagnosticContext) stack.peek()).message;\n     else\n@@ -325,12 +334,12 @@ String peek() {\n   public\n   static\n   void push(String message) {\n-    Thread key = Thread.currentThread();\n-    Stack stack = (Stack) ht.get(key);\n+    Stack stack = getCurrentStack();\n       \n     if(stack == null) {\n       DiagnosticContext dc = new DiagnosticContext(message, null);      \n       stack = new Stack();\n+      Thread key = Thread.currentThread();\n       ht.put(key, stack);\n       stack.push(dc);\n     } else if (stack.isEmpty()) {\n@@ -400,7 +409,7 @@ void foo() {\n   static\n   public\n   void setMaxDepth(int maxDepth) {\n-    Stack stack = (Stack) ht.get(Thread.currentThread());    \n+    Stack stack = getCurrentStack();    \n     if(stack != null && maxDepth < stack.size()) \n       stack.setSize(maxDepth);\n   }",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bugzilla 15198: TelnetAppender: NullPointerException if SocketHandler not initialized.\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@311037 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
        "parent": "https://github.com/apache/log4j/commit/7817b8477a40ae2831fc76dc2f347c04171da803",
        "bug_id": "log4j_6",
        "file": [
            {
                "sha": "8244bb12dcc505893f41663ceca42a5f5acae23e",
                "filename": "docs/HISTORY.txt",
                "blob_url": "https://github.com/apache/log4j/blob/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/docs/HISTORY.txt",
                "raw_url": "https://github.com/apache/log4j/raw/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/docs/HISTORY.txt",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/HISTORY.txt?ref=8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
                "patch": "@@ -8,24 +8,31 @@\n    [D] Changes affect a method or property which was previously marked as \n        deprecated.\n \n+  December XX, 2004\n+ - Release of version 1.3alpha-4\n+\n+ - Fixed Bugzilla 15198: TelnetAppender: NullPointerException if\n+   SocketHandler not initialized.\n+\n+\n   November 25, 2004\n \n- - Release of version 1.3apha-3\n+ - Release of version 1.3alpha-3\n  \n  - Classes are built with the javac debug setting on.\n  - Fixed unset activeFile bug in SlidingWindowRollingPolicy.\n  \n   November 25, 2004\n \n- - Release of version 1.3apha-2\n+ - Release of version 1.3alpha-2\n  \n  - The deprecated DOMConfigrator was mistakenly left as the default\n    configrator for XML files.  This has been fixed and JoranConfigrator\n    now is the default configrator for XML files.\n  \n  November 24th, 2004\n \n- - Release of version 1.3apha-1\n+ - Release of version 1.3alpha-1\n \n  - Log4j now uses itself for its own logging. For more details refer to\n    ",
                "deletions": 3
            },
            {
                "sha": "af514c08c75996278a1788a123971b826b298fac",
                "filename": "src/java/org/apache/log4j/net/TelnetAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/src/java/org/apache/log4j/net/TelnetAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e/src/java/org/apache/log4j/net/TelnetAppender.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/TelnetAppender.java?ref=8d99ce2467199fc18ee30ec5d67d81ee3e4e1c6e",
                "patch": "@@ -73,7 +73,7 @@ public void activateOptions() {\n       sh = new SocketHandler(port);\n       sh.start();\n     } catch (Exception e) {\n-      e.printStackTrace();\n+        getLogger().error(\"Could not active TelnetAppender options: \", e);\n     }\n   }\n \n@@ -87,12 +87,19 @@ public void setPort(int port) {\n \n   /** shuts down the appender. */\n   public void close() {\n-    sh.finalize();\n+      if(sh != null) {\n+          sh.finalize();\n+      }\n   }\n \n   /** Handles a log event.  For this appender, that means writing the\n     message to each connected client.  */\n   protected void append(LoggingEvent event) {\n+      if(sh == null) {\n+          getLogger().warn(\"SocketHandler is null, not sending event.\");\n+          return;\n+      }\n+\n     sh.send(this.layout.format(event));\n \n     if (layout.ignoresThrowable()) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Big 47547: NPE in Category.removeAllAppenders\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@824000 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/269f78adefdb4294c1a999a5566a82d0f51b244e",
        "parent": "https://github.com/apache/log4j/commit/6e43ab6237576accc58e4c220403e01415829777",
        "bug_id": "log4j_7",
        "file": [
            {
                "sha": "39d7b610ed39c3fb619e206ba1ea494924b9c547",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "patch": "@@ -86,6 +86,7 @@\n        <action action=\"fix\" issue=\"46539\">The QuietWriter class does not live up to its published contract.</action>\n        <action action=\"add\" issue=\"46983\">More Debug output for log4j auto-configure requested.</action>\n        <action action=\"add\" issue=\"47107\">Add MDC.clear().</action>\n+       <action action=\"fix\" issue=\"47547\">NullPointerException when calling Category.removeAllAppenders().</action>\n     </release>\n \n   ",
                "deletions": 0
            },
            {
                "sha": "e0cb56108cf52d99eed0f58c984b3d95820d696a",
                "filename": "src/main/java/org/apache/log4j/Category.java",
                "blob_url": "https://github.com/apache/log4j/blob/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "raw_url": "https://github.com/apache/log4j/raw/269f78adefdb4294c1a999a5566a82d0f51b244e/src/main/java/org/apache/log4j/Category.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/Category.java?ref=269f78adefdb4294c1a999a5566a82d0f51b244e",
                "patch": "@@ -885,7 +885,7 @@ private void fireRemoveAppenderEvent(final Appender appender) {\n   void removeAllAppenders() {\n     if(aai != null) {\n       Vector appenders = new Vector();\n-      for (Enumeration iter = aai.getAllAppenders(); iter.hasMoreElements();) {\n+      for (Enumeration iter = aai.getAllAppenders(); iter != null && iter.hasMoreElements();) {\n           appenders.add(iter.nextElement());\n       }\n       aai.removeAllAppenders();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 43867: Update Tomcat NPE FAQ\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@734741 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/1ba4bc9aa8dec0ea2e32204870633b687700086b",
        "parent": "https://github.com/apache/log4j/commit/9e918dca1d277c8447cda14d30eb956c4c2bb4fd",
        "bug_id": "log4j_8",
        "file": [
            {
                "sha": "ba55db75fe17d9f72c2a754af1825cf2e38a6bb0",
                "filename": "src/site/fml/faq.fml",
                "blob_url": "https://github.com/apache/log4j/blob/1ba4bc9aa8dec0ea2e32204870633b687700086b/src/site/fml/faq.fml",
                "raw_url": "https://github.com/apache/log4j/raw/1ba4bc9aa8dec0ea2e32204870633b687700086b/src/site/fml/faq.fml",
                "status": "modified",
                "changes": 28,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/site/fml/faq.fml?ref=1ba4bc9aa8dec0ea2e32204870633b687700086b",
                "patch": "@@ -789,27 +789,23 @@ public class Foo {\n               when shutting down or restarting under Tomcat or during a shutdown\n               hook?</question>\n           <answer><p>Tomcat will, by default,\n-             clear all static members when unloading classes.\n-             Unfortunately, under certain circumstances\n-             another class may attempt to call log4j after log4j\n-             has had its private member variables cleared, resulting in either\n-             a NullPointerException (log4j 1.2.14 or earlier) or a console\n-             message (log4j 1.2.15 and later).  The same type of issue\n-             has been reported during various shutdown hooks (see bug\n-             <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=40212\">40212</a>)\n-             but the mechanisms are not as well understood.</p>\n-\n-             <p>The following have been recommended to avoid this problem:\n+             clear all static members when unloading classes, however\n+             this process can trigger initialization of classes which may\n+             then call a class that has been cleared resulting in a\n+             NullPointerException or some undesirable behavior.\n+             Bug <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=40212\">40212</a>)\n+             describes the problem in detail and has a patch which at this writing\n+              has not been applied to Tomcat.  Glassfish had a similar problem\n+             and accepted the patch.</p>\n+\n+             <p>The following are recommended to avoid this problem:\n                  <ol>\n                      <li>Set the org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES\n                          system property to false.</li>\n+                     <li>Apply the patch from bug <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=40212\">40212</a>\n+                         or upgrade to a version that has that patch applied.</li>\n                      <li>Upgrade to log4j 1.2.16 or later to better defend against class loader attack\n                          or provide a better diagnostic message when it does occur.</li>\n-                     <li>Use per-application copies of log4j, that is remove log4j.jar from WEB-INF/lib.</li>\n-                     <li>Avoid calls to log4j from within class initialization.</li>\n-                     <li>Upgrade to the latest version of the framework that causing the problem.</li>\n-                     <li>Use EnhancedPatternLayout from the extras companion when the NPE occurs\n-                         in a call of PatternLayout.</li>\n                  </ol>\n              </p>\n ",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 45335: NPE in NDC.remove after unload by Tomcat\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@683824 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/2ad0671488e203eaa057923b3e11ed6705fbccc4",
        "parent": "https://github.com/apache/log4j/commit/fc322eb1f39f737e40166598b3705ad0cfe4607f",
        "bug_id": "log4j_9",
        "file": [
            {
                "sha": "bb264d0b4e520f2bffd11d9d2e23bc2c12c770aa",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/2ad0671488e203eaa057923b3e11ed6705fbccc4/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/2ad0671488e203eaa057923b3e11ed6705fbccc4/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=2ad0671488e203eaa057923b3e11ed6705fbccc4",
                "patch": "@@ -45,6 +45,7 @@\n        <action action=\"fix\" issue=\"37182\">Exception in call to toString of message propagates to caller.</action>\n        <action action=\"fix\" issue=\"45299\">Javadoc class index corrupted by JDBCAppender deprecation warning.</action> \n        <action action=\"fix\" issue=\"43867\">Improve warning message when log4j is accessed after unload by Tomcat.</action>\n+       <action action=\"fix\" issue=\"45335\">NullPointerException in NDC.remove after unload by Tomcat.</action>\n     </release>\n   \n     <release version=\"1.2.15\" date=\"2007-08-24\" description=\"SyslogAppender enhancements, NTEventLogAppender and Maven build.\">",
                "deletions": 0
            },
            {
                "sha": "d374225473f68ac3f30c8f44f8a6b1d8869ff071",
                "filename": "src/main/java/org/apache/log4j/NDC.java",
                "blob_url": "https://github.com/apache/log4j/blob/2ad0671488e203eaa057923b3e11ed6705fbccc4/src/main/java/org/apache/log4j/NDC.java",
                "raw_url": "https://github.com/apache/log4j/raw/2ad0671488e203eaa057923b3e11ed6705fbccc4/src/main/java/org/apache/log4j/NDC.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/NDC.java?ref=2ad0671488e203eaa057923b3e11ed6705fbccc4",
                "patch": "@@ -374,10 +374,12 @@ void push(String message) {\n   static\n   public\n   void remove() {\n-    ht.remove(Thread.currentThread());\n+    if (ht != null) {\n+        ht.remove(Thread.currentThread());\n     \n-    // Lazily remove dead-thread references in ht.\n-    lazyRemove();    \n+        // Lazily remove dead-thread references in ht.\n+        lazyRemove();\n+    }\n   }\n \n   /**",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 43181: NPE in MDC after Tomcat reload\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@568278 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/38eb2806a1d389f026abdd4bf98dc65df0c82fdd",
        "parent": "https://github.com/apache/log4j/commit/43982501e17bd5a577227372030738b200be834b",
        "bug_id": "log4j_10",
        "file": [
            {
                "sha": "20842ed2c397f745cd57cc79b77eb35c4ad75832",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/38eb2806a1d389f026abdd4bf98dc65df0c82fdd/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/38eb2806a1d389f026abdd4bf98dc65df0c82fdd/src/changes/changes.xml",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=38eb2806a1d389f026abdd4bf98dc65df0c82fdd",
                "patch": "@@ -22,7 +22,8 @@\n   <body>\n   \n     <release version=\"1.2.15\" date=\"2007-06-27\" description=\"SyslogAppender enhancements, NTEventLogAppender and Maven build.\">\n-       <action action=\"fix\" issue=\"34874\">Notice to use UTF-8 or UTF-16 encoding added to XML and HTMLLayout javadoc.</action>\n+       <action action=\"fix\" issue=\"43181\">NullPointerException in MDC on Tomcat reload.</action>\n+        <action action=\"fix\" issue=\"34874\">Notice to use UTF-8 or UTF-16 encoding added to XML and HTMLLayout javadoc.</action>\n        <action action=\"fix\" issue=\"34875\">XML and HTMLLayout do not always escape special characters.</action>\n        <action action=\"add\" issue=\"43078\">Optionally render MDC content in XMLLayout</action>\n        <action action=\"fix\" issue=\"42694\">Typo in log4j.dtd concerning threshold.</action>\n@@ -77,7 +78,7 @@\n       <release version=\"1.2.14\" date=\"2006-09-18\" description=\"AsyncAppender rewrite, Syslog and SMTPAppender enhancements.\">\n       <action action=\"fix\" issue=\"38137\">Monitor deadlock in AsyncAppender.</action>\n       <action action=\"fix\" issue=\"28006\">AsyncAppender: Dispatcher should run at normal prio.</action>\n-      <action action=\"fix\" issue=\"40159\">AsyncAppender wait forever when buffer is full.</action>\n+      <action action=\"fix\" issue=\"37904\">AsyncAppender wait forever when buffer is full.</action>\n       <action action=\"add\" issue=\"38982\">Add non-blocking option for AsyncAppender.</action>\n       <action action=\"add\" issue=\"39687\">Add SyslogPort option to SyslogAppender.</action>\n       <action action=\"add\" issue=\"19125\">Add cc and bcc addresses to SMTPAppender.</action>",
                "deletions": 2
            },
            {
                "sha": "47a2dbf09bca57348715177076493bb2abf5a0e3",
                "filename": "src/main/java/org/apache/log4j/MDC.java",
                "blob_url": "https://github.com/apache/log4j/blob/38eb2806a1d389f026abdd4bf98dc65df0c82fdd/src/main/java/org/apache/log4j/MDC.java",
                "raw_url": "https://github.com/apache/log4j/raw/38eb2806a1d389f026abdd4bf98dc65df0c82fdd/src/main/java/org/apache/log4j/MDC.java",
                "status": "modified",
                "changes": 27,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/MDC.java?ref=38eb2806a1d389f026abdd4bf98dc65df0c82fdd",
                "patch": "@@ -70,7 +70,9 @@ Put a context value (the <code>o</code> parameter) as identified\n   static\n   public\n   void put(String key, Object o) {\n-    mdc.put0(key, o);\n+     if (mdc != null) {\n+         mdc.put0(key, o);\n+     }\n   }\n   \n   /**\n@@ -81,7 +83,10 @@ void put(String key, Object o) {\n   static \n   public\n   Object get(String key) {\n-    return mdc.get0(key);\n+    if (mdc != null) {\n+        return mdc.get0(key);\n+    }\n+    return null;\n   }\n \n   /**\n@@ -92,7 +97,9 @@ Object get(String key) {\n   static \n   public\n   void remove(String key) {\n-    mdc.remove0(key);\n+    if (mdc != null) {\n+        mdc.remove0(key);\n+    }\n   }\n \n \n@@ -101,13 +108,17 @@ void remove(String key) {\n    * intended to be used internally.  \n    * */\n   public static Hashtable getContext() {\n-    return mdc.getContext0();\n+    if (mdc != null) {\n+        return mdc.getContext0();\n+    } else {\n+        return null;\n+    }\n   }\n \n \n   private\n   void put0(String key, Object o) {\n-    if(java1) {\n+    if(java1 || tlm == null) {\n       return;\n     } else {\n       Hashtable ht = (Hashtable) ((ThreadLocalMap)tlm).get();\n@@ -121,7 +132,7 @@ void put0(String key, Object o) {\n   \n   private\n   Object get0(String key) {\n-    if(java1) {\n+    if(java1 || tlm == null) {\n       return null;\n     } else {       \n       Hashtable ht = (Hashtable) ((ThreadLocalMap)tlm).get();\n@@ -135,7 +146,7 @@ Object get0(String key) {\n \n   private\n   void remove0(String key) {\n-    if(!java1) {\n+    if(!java1 && tlm != null) {\n       Hashtable ht = (Hashtable) ((ThreadLocalMap)tlm).get();\n       if(ht != null) {\n         ht.remove(key);\n@@ -146,7 +157,7 @@ void remove0(String key) {\n \n   private\n   Hashtable getContext0() {\n-     if(java1) {\n+     if(java1 || tlm == null) {\n       return null;\n     } else {       \n       return (Hashtable) ((ThreadLocalMap)tlm).get();",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 32536 - Guard against NPE by checking passed in RepositorySelector\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@500473 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
        "parent": "https://github.com/apache/log4j/commit/bc7ace697b7097329c5f4f7ffb978b0bd7f4dda2",
        "bug_id": "log4j_11",
        "file": [
            {
                "sha": "bb273b6b7568cfd3f9d99ce687966bf145778d6b",
                "filename": "src/java/org/apache/log4j/Hierarchy.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/Hierarchy.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Hierarchy.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.log4j.spi.LoggerRepositoryEx;\n import org.apache.log4j.spi.LoggerRepositoryEventListener;\n import org.apache.log4j.spi.RendererSupport;\n+import org.apache.log4j.spi.RootLogger;\n \n import java.util.ArrayList;\n import java.util.Enumeration;\n@@ -98,7 +99,7 @@\n   boolean pristine = true;\n \n   /**\n-     Create a new logger hierarchy.\n+     Constructs a new logger hierarchy.\n \n      @param root The root of the new hierarchy.\n \n@@ -118,6 +119,13 @@ public Hierarchy(Logger root) {\n     loggerFactory = new DefaultLoggerFactory();\n   }\n \n+  /**\n+   * Constructs a new logger hierarchy with a default {@link RootLogger}.\n+   */\n+  public Hierarchy() {\n+    this(new RootLogger());\n+  }\n+\n   /**\n      Add an object renderer for a specific class.\n    */",
                "deletions": 1
            },
            {
                "sha": "0d15efd9402dcc60cb6e269472b47e1eacc5b6a7",
                "filename": "src/java/org/apache/log4j/LogManager.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/LogManager.java",
                "status": "modified",
                "changes": 22,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/LogManager.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -209,16 +209,23 @@\n        within JBoss, then JBoss will install its own repository selector\n        and Tomcat will use the repository selector set by its container,\n        JBoss.  \n+       \n+       @param selector new selector, cannot be null\n+       @param guard new guard value, or existing guard, or null\n+       @throws IllegalArgumentException if a non-null guard is not the same as the old\n+       @throws IllegalArgumentException if the selector is null\n+       @throws IllegalArgumentException if {@link RepositorySelector#getLoggerRepository()} returns null \n     */\n-    public static void setRepositorySelector(\n-                                             RepositorySelector selector, Object guard) throws IllegalArgumentException {\n+    public static void setRepositorySelector(RepositorySelector selector, Object guard) {\n         if ((LogManager.guard != null) && (LogManager.guard != guard)) {\n-            throw new IllegalArgumentException(\n-                                               \"Attempted to reset the LoggerFactory without possessing the guard.\");\n+            throw new IllegalArgumentException(\"Attempted to reset the LoggerFactory without possessing the guard.\");\n         }\n         if (selector == null) {\n-            throw new IllegalArgumentException(\n-                                               \"RepositorySelector must be non-null.\");\n+            throw new IllegalArgumentException(\"RepositorySelector must be non-null.\");\n+        }\n+        if (selector.getLoggerRepository() == null) {\n+          String s = \"RepositorySelector.getLoggerRepository() must return non-null.\";\n+          throw new IllegalArgumentException(s);\n         }\n         \n         LogManager.guard = guard;\n@@ -236,6 +243,9 @@ public static RepositorySelector getRepositorySelector() {\n         return  LogManager.repositorySelector;\n     } \n     \n+    /**\n+     * Returns the logger repository currently in use.\n+     */\n     public static LoggerRepository getLoggerRepository() {\n         return repositorySelector.getLoggerRepository();\n     }",
                "deletions": 6
            },
            {
                "sha": "157098a066e45152802784e82d428ce6f74a7daf",
                "filename": "src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java",
                "status": "modified",
                "changes": 17,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/DefaultRepositorySelector.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -16,16 +16,25 @@\n \n package org.apache.log4j.spi;\n \n-import org.apache.log4j.helpers.Constants;\n-\n+/**\n+ * Trivial implementation of RepositorySelectorEx which takes\n+ * a fixed repository.\n+ */\n public class DefaultRepositorySelector implements RepositorySelectorEx {\n-  LoggerRepository defaultRepository;\n+  \n+  private LoggerRepository defaultRepository;\n \n+  /**\n+   * Constructs a new instance.\n+   * @param repository cannot be null\n+   */\n   public DefaultRepositorySelector(final LoggerRepository repository) {\n+    if (repository == null)\n+      throw new NullPointerException();\n     this.defaultRepository = repository;\n   }\n \n-  public LoggerRepository  getLoggerRepository() {\n+  public LoggerRepository getLoggerRepository() {\n     return defaultRepository;\n   }\n   ",
                "deletions": 4
            },
            {
                "sha": "1215dcb04f1ece5a7d674559f65ddabebeece2be",
                "filename": "src/java/org/apache/log4j/spi/RootLogger.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/src/java/org/apache/log4j/spi/RootLogger.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/RootLogger.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -35,15 +35,24 @@\n \n  */\n public final class RootLogger extends Logger {\n+  \n   /**\n-     The root category names itself as \"root\". However, the root\n-     category cannot be retrieved by name.\n+   * Constructs using a level.\n+   * The root category names itself as \"root\". However, the root\n+   * category cannot be retrieved by name.\n   */\n   public RootLogger(Level level) {\n     super(\"root\");\n     setLevel(level);\n   }\n \n+  /**\n+   * Constructs using a default {@link Level#DEBUG} threshold level.\n+   */\n+  public RootLogger() {\n+    this(Level.DEBUG);\n+  }\n+\n   /**\n      Return the assigned level value without walking the category\n      hierarchy.",
                "deletions": 2
            },
            {
                "sha": "c1dfacd79e0d047a927983e41e7aa9266c6ca804",
                "filename": "tests/src/java/org/apache/log4j/LogManagerTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/0e1cc4a10b28f3f119baded6b3f00683faf2a2de/tests/src/java/org/apache/log4j/LogManagerTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/LogManagerTest.java?ref=0e1cc4a10b28f3f119baded6b3f00683faf2a2de",
                "patch": "@@ -16,15 +16,24 @@\n \n package org.apache.log4j;\n \n+import org.apache.log4j.spi.DefaultRepositorySelector;\n+import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.spi.RepositorySelector;\n+\n import junit.framework.TestCase;\n \n \n /**\n- *    Tests for LogManager\n+ * Tests for {@link LogManager}.\n  *\n  * @author Curt Arnold\n- **/\n+ */\n public class LogManagerTest extends TestCase {\n+\n+  private static final Object sharedGuard = new Object();\n+\n+  private Hierarchy h = new Hierarchy();\n+  \n   /**\n    * Create new instance of LogManagerTest.\n    * @param testName test name\n@@ -72,4 +81,33 @@ public void testConfiguratorClassKey() {\n   public void testDefaultInitOverrideKey() {\n      assertEquals(\"log4j.defaultInitOverride\", LogManager.DEFAULT_INIT_OVERRIDE_KEY);\n   }\n+  \n+  public void testValidSelector() {\n+    RepositorySelector selector = new DefaultRepositorySelector(h);\n+    LogManager.setRepositorySelector(selector, sharedGuard);\n+    Logger log = Logger.getLogger(\"TestValidSelector\");\n+    log.info(\"Logger obtained\");\n+    \n+    try {\n+      LogManager.setRepositorySelector(selector, \"joe\");\n+      fail(\"cannot cheat guard\");\n+    } catch (IllegalArgumentException e) {}\n+  }\n+\n+  public void testInvalidSelector() {\n+    try {\n+      RepositorySelector selector = new RepositorySelector() {\n+\n+        public LoggerRepository getLoggerRepository() {\n+          return null;\n+        }\n+        \n+      };\n+      LogManager.setRepositorySelector(selector, sharedGuard);\n+      Logger.getLogger(\"TestInvalidSelector\");      \n+      fail(\"Invalid repository selector should have generated IllegalArgumentException\");\n+    } catch (IllegalArgumentException iae) {\n+    }\n+  }\n+\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 41186: DiscardSummary events create NPE in layouts\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@487725 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880",
        "parent": "https://github.com/apache/log4j/commit/67e660ee8abb808ecacefaf0acb2171734ee6252",
        "bug_id": "log4j_12",
        "file": [
            {
                "sha": "d47edd45d6174fb9c6c07b83f837cfac9f0ef89b",
                "filename": "src/java/org/apache/log4j/AsyncAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880/src/java/org/apache/log4j/AsyncAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880/src/java/org/apache/log4j/AsyncAppender.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/AsyncAppender.java?ref=9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880",
                "patch": "@@ -465,7 +465,11 @@ public LoggingEvent createEvent() {\n           new Object[] { new Integer(count), maxEvent.getMessage() });\n \n       return new LoggingEvent(\n-        null, maxEvent.getLogger(), maxEvent.getLevel(), msg, null);\n+              \"org.apache.log4j.AsyncAppender.DONT_REPORT_LOCATION\",\n+               maxEvent.getLogger(),\n+               maxEvent.getLevel(),\n+               msg,\n+               null);\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "eb73c461b61133af87784e49d44b32edcb5d70f5",
                "filename": "tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "blob_url": "https://github.com/apache/log4j/blob/9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "raw_url": "https://github.com/apache/log4j/raw/9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "status": "modified",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java?ref=9eefb54ec68f0a80c95bfbf50ae7580e5e5e3880",
                "patch": "@@ -446,6 +446,73 @@ public void testDiscard() {\n         }\n     }\n \n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=true.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoTrue() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(true);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(AsyncAppenderTestCase.class.getName(),\n+                initialStr.substring(0, AsyncAppenderTestCase.class.getName().length()));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=false.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoFalse() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(false);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(\"?:? \", initialStr.substring(0, 4));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n     /**\n      * Tests behavior when wrapped appender\n      *    makes log request on dispatch thread.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 38993: NPE in FileAppender.setFile\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@386250 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/2e42a97e9fd77698cf0d302092eed429ea5be573",
        "parent": "https://github.com/apache/log4j/commit/a3ef177ea888e397dbc4ab675e7afd0e3de5b638",
        "bug_id": "log4j_13",
        "file": [
            {
                "sha": "34f47fc8c2c6d867ebd5c65c02b65ddabf23835b",
                "filename": "src/java/org/apache/log4j/FileAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/src/java/org/apache/log4j/FileAppender.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/FileAppender.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "patch": "@@ -289,7 +289,7 @@ public synchronized void setFile(\n     Writer fw = createWriter(ostream);\n \n     if (bufferedIO) {\n-      fw = new BufferedWriter(this.qw, bufferSize);\n+      fw = new BufferedWriter(fw, bufferSize);\n     }\n     setQWForFiles(fw);\n ",
                "deletions": 1
            },
            {
                "sha": "1610828b31314d7aef04f98a8715121189a0be06",
                "filename": "tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/2e42a97e9fd77698cf0d302092eed429ea5be573/tests/src/java/org/apache/log4j/FileAppenderTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/FileAppenderTest.java?ref=2e42a97e9fd77698cf0d302092eed429ea5be573",
                "patch": "@@ -101,4 +101,13 @@ public void testIsAsSevereAsThreshold() {\n     Priority debug = Level.DEBUG;\n     assertTrue(appender.isAsSevereAsThreshold(debug));\n   }\n+\n+    /**\n+     * Test for bug 38993.\n+     * @throws java.io.IOException if IOException\n+     */\n+  public void testSetFileBuffered() throws java.io.IOException {\n+      FileAppender appender = new FileAppender();\n+      appender.setFile(\"output/setFileBuffered.log\", false, true, 100);\n+  }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "for some reason this fixes a NPE on linux...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310297 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/59d0acd22fc3b0505226f16f568fdf3f79bb0ec2",
        "parent": "https://github.com/apache/log4j/commit/d85ecc429a2eb759a101ad251f9c1f0056eb63b4",
        "bug_id": "log4j_14",
        "file": [
            {
                "sha": "a58f2ab60d260173d268ac54ba99f16f83a5600e",
                "filename": "src/java/org/apache/log4j/chainsaw/ApplicationPreferenceModelPanel.java",
                "blob_url": "https://github.com/apache/log4j/blob/59d0acd22fc3b0505226f16f568fdf3f79bb0ec2/src/java/org/apache/log4j/chainsaw/ApplicationPreferenceModelPanel.java",
                "raw_url": "https://github.com/apache/log4j/raw/59d0acd22fc3b0505226f16f568fdf3f79bb0ec2/src/java/org/apache/log4j/chainsaw/ApplicationPreferenceModelPanel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ApplicationPreferenceModelPanel.java?ref=59d0acd22fc3b0505226f16f568fdf3f79bb0ec2",
                "patch": "@@ -282,7 +282,7 @@ public void propertyChange(PropertyChangeEvent evt) {\n             while (enumeration.hasMoreElements()) {\n               JRadioButton button = (JRadioButton) enumeration.nextElement();\n \n-              if (button.getName().equals(lf)) {\n+              if (button.getName()!=null && button.getName().equals(lf)) {\n                 button.setSelected(true);\n \n                 break;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Moved the Hiearchy._default variable to Category._default such that the Hiearchy class does no longer\nhave a static initiliazer. This fixes a very confusing NullPointerException occuring on rare occasions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@308898 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
        "parent": "https://github.com/apache/log4j/commit/fdcb56270f83fee9c310d2914d4aba13a60925b8",
        "bug_id": "log4j_15",
        "file": [
            {
                "sha": "4355371830b46e6be2468a13d970073f86f21baa",
                "filename": "src/java/org/apache/log4j/BasicConfigurator.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/BasicConfigurator.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/BasicConfigurator.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/BasicConfigurator.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -98,7 +98,7 @@ void addRenderer(String renderedClassName, String renderingClassName) {\n     } else {\n       try {\n \tClass renderedClass = Class.forName(renderedClassName);\n-\tHierarchy._default.rendererMap.put(renderedClass, renderer);\n+\tCategory._default.rendererMap.put(renderedClass, renderer);\n       } catch(ClassNotFoundException e) {\n \tLogLog.error(\"Could not find class [\"+renderedClassName+\"].\", e);\n       }\n@@ -268,15 +268,16 @@ void overrideAsNeeded(String override) {\n   public\n   static\n   void resetConfiguration() {\n-    Hierarchy._default.getRoot().setPriority(Priority.DEBUG);\n-    Hierarchy._default.getRoot().removeAllAppenders();\n-    Hierarchy._default.root.setResourceBundle(null);\n+\n+    Category._default.getRoot().setPriority(Priority.DEBUG);\n+    Category._default.getRoot().removeAllAppenders();\n+    Category._default.root.setResourceBundle(null);\n \n     Category.disable =  Category.DISABLE_OFF;\n     \n     // the synchronization is needed to prevent JDK 1.2.x hashtable\n     // surprises\n-    synchronized(Hierarchy._default.ht) {\n+    synchronized(Category._default.ht) {\n       Enumeration cats = Category.getCurrentCategories();\n       while(cats.hasMoreElements()) {\n \tCategory c = (Category) cats.nextElement();\n@@ -286,6 +287,6 @@ void resetConfiguration() {\n \tc.removeAllAppenders();\n       }\n     }\n-    Hierarchy._default.rendererMap.clear();\n+    Category._default.rendererMap.clear();\n   }\n }",
                "deletions": 6
            },
            {
                "sha": "4fe42f12b41307961e2b6f021101a420725f95e5",
                "filename": "src/java/org/apache/log4j/Category.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Category.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Category.java",
                "status": "modified",
                "changes": 34,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Category.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -65,6 +65,13 @@\n \n   static boolean emittedNoAppenderWarning = false;\n   static boolean emittedNoResourceBundleWarning = false;  \n+\n+  // default is a language reserved term, we exceptionally prefix with\n+  // an undescore.\n+  static \n+  public \n+  final Hierarchy _default = new Hierarchy( new RootCategory(Priority.DEBUG));\n+\n   \n   protected ResourceBundle resourceBundle;\n   \n@@ -379,7 +386,7 @@ If the named category exists (in the default hierarchy) then it\n   public\n   static\n   Category exists(String name) {    \n-    return Hierarchy._default.exists(name);\n+    return _default.exists(name);\n   }\n \n   /** \n@@ -506,9 +513,9 @@ Enumeration getCurrentCategories() {\n     // The accumlation in v is necessary because not all elements in\n     // HierarchyMaintainer.ht are Category objects as there might be some\n     // ProvisionNodes as well.       \n-    Vector v = new Vector(Hierarchy._default.ht.size());\n+    Vector v = new Vector(_default.ht.size());\n     \n-    Enumeration elems = Hierarchy._default.ht.elements();\n+    Enumeration elems = _default.ht.elements();\n     while(elems.hasMoreElements()) {\n       Object o = elems.nextElement();\n       if(o instanceof Category) {\n@@ -517,6 +524,19 @@ Enumeration getCurrentCategories() {\n     }\n     return v.elements();\n   }\n+\n+\n+  /**\n+     Return the default Hierarchy instance.\n+\n+     @since 1.0\n+   */\n+  public \n+  static \n+  Hierarchy getDefaultHierarchy() {\n+    return _default;\n+  }\n+\n   \n  /**\n      Retrieve a category with named as the <code>name</code>\n@@ -532,7 +552,7 @@ Enumeration getCurrentCategories() {\n   public\n   static\n   Category getInstance(String name) {\n-    return Hierarchy._default.getInstance(name);\n+    return _default.getInstance(name);\n   }\t\n \n  /**\n@@ -567,7 +587,7 @@ Category getInstance(Class clazz) {\n   public\n   static\n   Category getInstance(String name, CategoryFactory factory) {\n-    return Hierarchy._default.getInstance(name, factory);\n+    return _default.getInstance(name, factory);\n   }\t\n \n   \n@@ -605,7 +625,7 @@ Priority getPriority() {\n   public\n   static\n   Category getRoot() {\n-    return Hierarchy._default.getRoot();\n+    return _default.getRoot();\n   }\n \n   /**\n@@ -958,7 +978,7 @@ void setResourceBundle(ResourceBundle bundle) {\n   public\n   static\n   void shutdown() {\n-    Hierarchy._default.shutdown();\n+    _default.shutdown();\n   }\n \n   ",
                "deletions": 7
            },
            {
                "sha": "a1c2084bd41faf471fbbe1f057db1108e1f0b8c8",
                "filename": "src/java/org/apache/log4j/Hierarchy.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Hierarchy.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/Hierarchy.java",
                "status": "modified",
                "changes": 19,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/Hierarchy.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -46,12 +46,6 @@\n \n */\n public class Hierarchy {\n-\n-  // default is a language reserved term, we exceptionally prefix with\n-  // an undescore.\n-  static \n-  public \n-  final Hierarchy _default =  new Hierarchy(new RootCategory(Priority.DEBUG));\n   \n   static \n   private\n@@ -184,17 +178,6 @@ else if (o instanceof ProvisionNode) {\n   }\n \n \n-  /**\n-     Return the default Hierarchy instance.\n-\n-     @since 0.9.0\n-   */\n-  public \n-  static \n-  Hierarchy getDefaultHierarchy() {\n-    return _default;\n-  }\n-\n   /**\n      Get the root of this hierarchy.\n      \n@@ -345,7 +328,7 @@ void shutdown() {\n     // begin by closing nested appenders\n     root.closeNestedAppenders();\n \n-    synchronized(Hierarchy._default.ht) {\n+    synchronized(ht) {\n       Enumeration cats = Category.getCurrentCategories();\n       while(cats.hasMoreElements()) {\n \tCategory c = (Category) cats.nextElement();",
                "deletions": 18
            },
            {
                "sha": "21b2b640d60747307a88e371ddf4c914311f04dc",
                "filename": "src/java/org/apache/log4j/PropertyConfigurator.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/PropertyConfigurator.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/PropertyConfigurator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/PropertyConfigurator.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -471,7 +471,7 @@ void parseCatsAndRenderers(Properties props) {\n       if(key.startsWith(CATEGORY_PREFIX)) {\n \tString categoryName = key.substring(CATEGORY_PREFIX.length());\t\n \tString value =  OptionConverter.findAndSubst(key, props);\n-\tCategory cat = Hierarchy._default.getInstance(categoryName, \n+\tCategory cat = Category._default.getInstance(categoryName, \n \t\t\t\t\t\t     categoryFactory);\n \tsynchronized(cat) {\n \t  parseCategory(props, cat, key, categoryName, value);",
                "deletions": 1
            },
            {
                "sha": "fe007ff9cd970194a6ff42ee38817c35410739cf",
                "filename": "src/java/org/apache/log4j/StressCategory.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/StressCategory.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/StressCategory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/StressCategory.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -111,7 +111,7 @@ void createLoop(int n) {\n       }\n       test();\n       // Clear hash table for next round\n-      Hierarchy._default.clear();\n+      Category._default.clear();\n     }\n     else {      \n       ct[n]  = null;",
                "deletions": 1
            },
            {
                "sha": "b084d0636b2a783e339a333cbf8d6b6f3964a475",
                "filename": "src/java/org/apache/log4j/test/UnitTestCategory.java",
                "blob_url": "https://github.com/apache/log4j/blob/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/test/UnitTestCategory.java",
                "raw_url": "https://github.com/apache/log4j/raw/5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f/src/java/org/apache/log4j/test/UnitTestCategory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/test/UnitTestCategory.java?ref=5b78ffe04c143e4cfb22a5be72acc63ead4f9b4f",
                "patch": "@@ -64,7 +64,7 @@ void setUp() {\n   public\n   void tearDown() {\n     // Regular users should not use the clear method lightly!\n-    Hierarchy.getDefaultHierarchy().clear();\n+    Category.getDefaultHierarchy().clear();\n     BasicConfigurator.resetConfiguration();\n     a1 = null;\n     a2 = null;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "added version to first release as it broke the report with a npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@1332553 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/37964d7e1e4253dfd054fdb2713716294f373cb8",
        "parent": "https://github.com/apache/log4j/commit/892cadb3f9811afb10af0917a6f3592f3e139393",
        "bug_id": "log4j_16",
        "file": [
            {
                "sha": "b1943fc04ca7c0cd53eebf361c26444dc88ca6a6",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/37964d7e1e4253dfd054fdb2713716294f373cb8/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/37964d7e1e4253dfd054fdb2713716294f373cb8/src/changes/changes.xml",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=37964d7e1e4253dfd054fdb2713716294f373cb8",
                "patch": "@@ -118,7 +118,7 @@\n        <action action=\"add\" issue=\"48902\">Add %throwable{n} and {-n} pattern to EnhancedPatternLayout to print n or drop last n lines.</action>\n     </release>\n \n-  \n+\n     <release version=\"1.2.15\" date=\"2007-08-24\" description=\"SyslogAppender enhancements, NTEventLogAppender and Maven build.\">\n \t    <action issue=\"40951\">log4j 1.2.15 release preparation.</action>\n         <action action=\"add\" issue=\"40212\">Switch to NOPLoggerRepository if application reloading nulls repositorySelector.</action>\n@@ -214,7 +214,7 @@\n \t   <action action=\"fix\" issue=\"40501\"> TRACE level missing in short introduction to log4j.</action>\n \t   <action action=\"fix\" issue=\"37960\"> Update site generation to velocity 1.4 and remove dependency on logging/site project.</action>\n     </release>\n-\n+  \n     <release version=\"1.2.13\" date=\"2005-12-04\" description=\"TRACE level missing info fixed, ConsoleAppender.follow added to make redirection following an optional behavior.\">\n         <action action=\"fix\" issue=\"36800\">Location info missing for TRACE level messages.</action>\n         <action action=\"fix\" issue=\"37122\">Console appender now behaves as before to fix\n@@ -318,7 +318,6 @@\n </action>\n        </release>\n \n-\n       <release version=\"1.2.8\" date=\"2003-02-19\" description=\"Fixes to XMLAppender, DOMConfiguration, SocketAppender and JDBCAppender.\">\n  <action action=\"fix\" issue=\"11570\">XMLAppender would throw a\n    NullPointerException if the input message was null. Many thanks to\n@@ -1864,7 +1863,7 @@\n \n </release>\n \n-<release date=\"1999-10-15\">\n+<release version=\"initial\" date=\"1999-10-15\">\n <action>Initial availability on alphaWorks.  Refer to the FAQ for the lineage of the package.</action>\n </release>\n   </body>",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 44899: Extra NPE error message when using missing appender class with DOMConfigurator\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@685308 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/9f4b7a269d900d57dfcc5db112161d02486186b5",
        "parent": "https://github.com/apache/log4j/commit/dd5817f5def3605e7625547c90f130db1e302154",
        "bug_id": "log4j_17",
        "file": [
            {
                "sha": "c392c05304b3064e295a096ba36d09b403fe25a5",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/log4j/blob/9f4b7a269d900d57dfcc5db112161d02486186b5/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/log4j/raw/9f4b7a269d900d57dfcc5db112161d02486186b5/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/changes/changes.xml?ref=9f4b7a269d900d57dfcc5db112161d02486186b5",
                "patch": "@@ -50,6 +50,7 @@\n        <action action=\"fix\" issue=\"25747\">More explanations when hitting WARN No appenders could be found for logger.</action>\n        <action action=\"fix\" issue=\"45039\">Use Throwable.getStackTrace to obtain location when running on JDK 1.4 or later.</action>\n        <action action=\"fix\" issue=\"44745\">AsyncAppender fails on changing Throwable.</action>\n+       <action action=\"fix\" issue=\"44899\">Extra NPE error message when using missing appender class with DOMConfigurator.</action>\n     </release>\n   \n     <release version=\"1.2.15\" date=\"2007-08-24\" description=\"SyslogAppender enhancements, NTEventLogAppender and Maven build.\">",
                "deletions": 0
            },
            {
                "sha": "eb267048237f75254bbf7cfe9403da253d63cbae",
                "filename": "src/main/java/org/apache/log4j/xml/DOMConfigurator.java",
                "blob_url": "https://github.com/apache/log4j/blob/9f4b7a269d900d57dfcc5db112161d02486186b5/src/main/java/org/apache/log4j/xml/DOMConfigurator.java",
                "raw_url": "https://github.com/apache/log4j/raw/9f4b7a269d900d57dfcc5db112161d02486186b5/src/main/java/org/apache/log4j/xml/DOMConfigurator.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/main/java/org/apache/log4j/xml/DOMConfigurator.java?ref=9f4b7a269d900d57dfcc5db112161d02486186b5",
                "patch": "@@ -167,9 +167,11 @@ Appender findAppenderByName(Document doc, String appenderName)  {\n \tLogLog.error(\"No appender named [\"+appenderName+\"] could be found.\"); \n \treturn null;\n       } else {\n-\tappender = parseAppender(element);\n-\tappenderBag.put(appenderName, appender);\n-\treturn appender;\n+\t      appender = parseAppender(element);\n+          if (appender != null) {\n+            appenderBag.put(appenderName, appender);\n+          }\n+    return appender;\n       }\n     } \n   }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 41186: Eliminate NPE on getLocationInfo() when FQCN is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@530974 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/397e5f50c3313f8c757495beb771d6ed9db92838",
        "parent": "https://github.com/apache/log4j/commit/25d6aed165192bba00212628c572597e48e4d91c",
        "bug_id": "log4j_18",
        "file": [
            {
                "sha": "dcd03e6b7c6260cd4d1a24f944d5eb3036e36149",
                "filename": "src/java/org/apache/log4j/spi/LocationInfo.java",
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/src/java/org/apache/log4j/spi/LocationInfo.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LocationInfo.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "patch": "@@ -105,7 +105,7 @@\n \n     */\n     public LocationInfo(Throwable t, String fqnOfCallingClass) {\n-      if(t == null)\n+      if(t == null || fqnOfCallingClass == null)\n \treturn;\n \n       String s;",
                "deletions": 1
            },
            {
                "sha": "f8a78a349c2a851b131d2cb51a515ccbc7519400",
                "filename": "tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/397e5f50c3313f8c757495beb771d6ed9db92838/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/spi/LoggingEventTest.java?ref=397e5f50c3313f8c757495beb771d6ed9db92838",
                "patch": "@@ -215,5 +215,29 @@ public void testLevel() {\n       assertEquals(Level.ERROR, event.level);\n   }\n \n+    /**\n+     * Tests LoggingEvent.getLocationInfo() when no FQCN is specified.\n+     * See bug 41186.\n+     */\n+  public void testLocationInfoNoFQCN() {\n+      Category root = Logger.getRootLogger();\n+\t  Priority level = Level.INFO;\n+      LoggingEvent event =\n+        new LoggingEvent(\n+          null, root, 0L,  level, \"Hello, world.\", null);\n+      LocationInfo info = event.getLocationInformation();\n+\t  //\n+\t  //  log4j 1.2 returns an object, its layout doesn't check for nulls.\n+\t  //  log4j 1.3 returns a null.\n+\t  //\n+\t  assertNotNull(info);\n+\t  if (info != null) {\n+\t     assertEquals(\"?\", info.getLineNumber());\n+\t\t assertEquals(\"?\", info.getClassName());\n+\t\t assertEquals(\"?\", info.getFileName());\n+\t\t assertEquals(\"?\", info.getMethodName());\n+\t  }\n+  }\n+\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 41186: DiscardSummary events create NPE in layouts\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@487724 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/16d943b19781ee83ae9a276debcf1139f89a6d5c",
        "parent": "https://github.com/apache/log4j/commit/6e4da7fcdfb8504c627278ac564957555db105e2",
        "bug_id": "log4j_19",
        "file": [
            {
                "sha": "967dd135443bcebebb0bceec6097d2b29ab9a678",
                "filename": "src/java/org/apache/log4j/AsyncAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/16d943b19781ee83ae9a276debcf1139f89a6d5c/src/java/org/apache/log4j/AsyncAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/16d943b19781ee83ae9a276debcf1139f89a6d5c/src/java/org/apache/log4j/AsyncAppender.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/AsyncAppender.java?ref=16d943b19781ee83ae9a276debcf1139f89a6d5c",
                "patch": "@@ -466,7 +466,11 @@ public LoggingEvent createEvent() {\n           new Object[] { new Integer(count), maxEvent.getMessage() });\n \n       return new LoggingEvent(\n-        null, Logger.getLogger(maxEvent.getLoggerName()), maxEvent.getLevel(), msg, null);\n+              \"org.apache.log4j.AsyncAppender.DONT_REPORT_LOCATION\",\n+              Logger.getLogger(maxEvent.getLoggerName()),\n+              maxEvent.getLevel(),\n+              msg,\n+              null);\n     }\n   }\n ",
                "deletions": 1
            },
            {
                "sha": "027e6ea640538a06d981b3f348079df104fb6852",
                "filename": "tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "blob_url": "https://github.com/apache/log4j/blob/16d943b19781ee83ae9a276debcf1139f89a6d5c/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "raw_url": "https://github.com/apache/log4j/raw/16d943b19781ee83ae9a276debcf1139f89a6d5c/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java",
                "status": "modified",
                "changes": 174,
                "additions": 174,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/tests/src/java/org/apache/log4j/AsyncAppenderTestCase.java?ref=16d943b19781ee83ae9a276debcf1139f89a6d5c",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.Vector;\n \n import org.apache.log4j.*;\n+import org.apache.log4j.spi.LoggingEvent;\n import org.apache.log4j.varia.NullAppender;\n \n /**\n@@ -151,4 +152,177 @@ public void testBadAppender() throws Exception {\n \n         }\n     }\n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=true.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoTrue() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(true);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(AsyncAppenderTestCase.class.getName(),\n+                initialStr.substring(0, AsyncAppenderTestCase.class.getName().length()));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n+\n+    /**\n+     * Tests location processing when buffer is full and locationInfo=false.\n+     * See bug 41186.\n+     */\n+    public void testLocationInfoFalse() {\n+        BlockableVectorAppender blockableAppender = new BlockableVectorAppender();\n+        AsyncAppender async = new AsyncAppender();\n+        async.addAppender(blockableAppender);\n+        async.setBufferSize(5);\n+        async.setLocationInfo(false);\n+        async.setBlocking(false);\n+        async.activateOptions();\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.addAppender(async);\n+        Greeter greeter = new Greeter(rootLogger, 100);\n+        synchronized(blockableAppender.getMonitor()) {\n+            greeter.run();\n+            rootLogger.error(\"That's all folks.\");\n+        }\n+        async.close();\n+        Vector events = blockableAppender.getVector();\n+        LoggingEvent initialEvent = (LoggingEvent) events.get(0);\n+        LoggingEvent discardEvent = (LoggingEvent) events.get(events.size() - 1);\n+        PatternLayout layout = new PatternLayout();\n+        layout.setConversionPattern(\"%C:%L %m%n\");\n+        layout.activateOptions();\n+        String initialStr = layout.format(initialEvent);\n+        assertEquals(\"?:? \", initialStr.substring(0, 4));\n+        String discardStr = layout.format(discardEvent);\n+        assertEquals(\"?:? \", discardStr.substring(0, 4));\n+    }\n+\n+    /**\n+     *  Logging request runnable.\n+     */\n+    private static final class Greeter implements Runnable {\n+      /**\n+       * Logger.\n+       */\n+      private final Logger logger;\n+\n+      /**\n+       * Repetitions.\n+       */\n+      private final int repetitions;\n+\n+      /**\n+       * Create new instance.\n+       * @param logger logger, may not be null.\n+       * @param repetitions repetitions.\n+       */\n+      public Greeter(final Logger logger, final int repetitions) {\n+        if (logger == null) {\n+          throw new IllegalArgumentException(\"logger\");\n+        }\n+\n+        this.logger = logger;\n+        this.repetitions = repetitions;\n+      }\n+\n+      /**\n+       * {@inheritDoc}\n+       */\n+      public void run() {\n+        try {\n+          for (int i = 0; i < repetitions; i++) {\n+            logger.info(\"Hello, World\");\n+            Thread.sleep(1);\n+          }\n+        } catch (InterruptedException ex) {\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+    }\n+\n+\n+\n+    /**\n+     * Vector appender that can be explicitly blocked.\n+     */\n+    private static final class BlockableVectorAppender extends VectorAppender {\n+      /**\n+       * Monitor object used to block appender.\n+       */\n+      private final Object monitor = new Object();\n+\n+      /**\n+       * Thread of last call to append.\n+       */\n+      private Thread dispatcher;\n+\n+      /**\n+       * Create new instance.\n+       */\n+      public BlockableVectorAppender() {\n+        super();\n+      }\n+\n+      /**\n+       * {@inheritDoc}\n+       */\n+      public void append(final LoggingEvent event) {\n+        synchronized (monitor) {\n+          dispatcher = Thread.currentThread();\n+          super.append(event);\n+            //\n+            //   if fatal, echo messages for testLoggingInDispatcher\n+            //\n+            if (event.getLevel() == Level.FATAL) {\n+                Logger logger = Logger.getLogger(event.getLoggerName());\n+                logger.error(event.getMessage().toString());\n+                logger.warn(event.getMessage().toString());\n+                logger.info(event.getMessage().toString());\n+                logger.debug(event.getMessage().toString());\n+            }\n+        }\n+      }\n+\n+      /**\n+       * Get monitor object.\n+       * @return monitor.\n+       */\n+      public Object getMonitor() {\n+        return monitor;\n+      }\n+\n+      /**\n+       * Get thread of previous call to append.\n+       * @return thread, may be null.\n+       */\n+      public Thread getDispatcher() {\n+        synchronized (monitor) {\n+          return dispatcher;\n+        }\n+      }\n+    }\n+\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 15501: FallbackErrorHandler throws NPE if no loggers are set\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@427679 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/d3d21476e2252b94d55e46d2e1aca362edf4b556",
        "parent": "https://github.com/apache/log4j/commit/cb1cb6678944ebf08e21c73ca5655bea9db2f959",
        "bug_id": "log4j_20",
        "file": [
            {
                "sha": "24853112532d23269e61d0b8f5e010356139650b",
                "filename": "src/java/org/apache/log4j/varia/FallbackErrorHandler.java",
                "blob_url": "https://github.com/apache/log4j/blob/d3d21476e2252b94d55e46d2e1aca362edf4b556/src/java/org/apache/log4j/varia/FallbackErrorHandler.java",
                "raw_url": "https://github.com/apache/log4j/raw/d3d21476e2252b94d55e46d2e1aca362edf4b556/src/java/org/apache/log4j/varia/FallbackErrorHandler.java",
                "status": "modified",
                "changes": 23,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/varia/FallbackErrorHandler.java?ref=d3d21476e2252b94d55e46d2e1aca362edf4b556",
                "patch": "@@ -84,17 +84,18 @@ void error(String message, Exception e, int errorCode) {\n   void error(String message, Exception e, int errorCode, LoggingEvent event) {\n     LogLog.debug(\"FB: The following error reported: \" + message, e);\n     LogLog.debug(\"FB: INITIATING FALLBACK PROCEDURE.\");\n-    for(int i = 0; i < loggers.size(); i++) {\n-      Logger l = (Logger) loggers.elementAt(i);\n-      LogLog.debug(\"FB: Searching for [\"+primary.getName()+\"] in logger [\"\n-\t\t   +l.getName() + \"].\");\n-      //if(l.isAttached(primary)) {\n-      LogLog.debug(\"FB: Replacing [\"+primary.getName()+\"] by [\"\n-\t\t   + backup.getName() + \"] in logger [\"+ l.getName() +\"].\");\n-      l.removeAppender(primary);\n-      LogLog.debug(\"FB: Adding appender [\"+backup.getName()+\"] to logger \"\n-\t\t   +  l.getName());\n-      l.addAppender(backup);\n+    if (loggers != null) {\n+    \tfor(int i = 0; i < loggers.size(); i++) {\n+      \t\tLogger l = (Logger) loggers.elementAt(i);\n+      \t\tLogLog.debug(\"FB: Searching for [\"+primary.getName()+\"] in logger [\"\n+\t\t   \t\t+l.getName() + \"].\");\n+      \t\tLogLog.debug(\"FB: Replacing [\"+primary.getName()+\"] by [\"\n+\t\t   \t\t+ backup.getName() + \"] in logger [\"+ l.getName() +\"].\");\n+      \t\tl.removeAppender(primary);\n+      \t\tLogLog.debug(\"FB: Adding appender [\"+backup.getName()+\"] to logger \"\n+\t\t   \t\t+  l.getName());\n+      \t\tl.addAppender(backup);\n+        }\n     }    \n   }\n ",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug 37864: Using BCEL head fixes earlier problem with NPE in compatibility report\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@358135 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de",
        "parent": "https://github.com/apache/log4j/commit/369c22831fcc29dc2381b7852cf26a007e853b8b",
        "bug_id": "log4j_21",
        "file": [
            {
                "sha": "1936b9b59bfd03ce79efd3768ded229f7ece1273",
                "filename": "build.properties.sample",
                "blob_url": "https://github.com/apache/log4j/blob/f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de/build.properties.sample",
                "raw_url": "https://github.com/apache/log4j/raw/f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de/build.properties.sample",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.properties.sample?ref=f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de",
                "patch": "@@ -82,7 +82,9 @@ checkstyle.jar=${lib.home.dir}/checkstyle-4.0-beta2/checkstyle-all-4.0-beta2.jar\n #\n #   CLIRR binary compatibility checker\n #      http://clirr.sourceforge.net\n-clirr-core-uber.jar=${lib.home.dir}/clirr-core-0.6-uber.jar\n+clirr-core.jar=${lib.home.dir}/clirr-0.6/clirr-core-0.6.jar\n+#  bcel 5.1 will throw NullPointerExceptions\n+bcel.jar=${lib.home.dir}/bcel-5.2rc1/bcel-5.2rc1.jar\n \n #\n #   JDIFF API change documentation generator",
                "deletions": 1
            },
            {
                "sha": "fcf4f53e22a684e0d3ba970b415730272c4af155",
                "filename": "build.xml",
                "blob_url": "https://github.com/apache/log4j/blob/f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de/build.xml",
                "raw_url": "https://github.com/apache/log4j/raw/f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de/build.xml",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.xml?ref=f8dc2b9e21cf51194f88b3a6bb4dd926f4bd76de",
                "patch": "@@ -732,15 +732,14 @@ Specify files to reformat with -Djalopy.files=PATTERN.\n \t  <!-- Compare the current API with a previous release                   -->\n \t  <!-- ================================================================= -->\n \t  <target name=\"clirr\" depends=\"jar\" description=\"Check binary compatibility with arbitrary release\">\n-\t  \t   <fail unless=\"clirr-core-uber.jar\">-Dclirr-core-uber.jar=PATH must be specified.</fail>\n+\t  \t   <fail unless=\"clirr-core.jar\">-Dclirr-core.jar=PATH must be specified.</fail>\n+\t  \t   <fail unless=\"bcel.jar\">-Dbcel.jar=PATH must be specified.</fail>\n \t  \t   <fail unless=\"reference.jar\">-Dreference.jar=PATH must be specified.</fail>\n \t       <taskdef resource=\"clirrtask.properties\" \n-\t           classpath=\"${clirr-core-uber.jar}\"/>    \n-        <!--  fails with NullPointerException with stock clirr 0.6\n-                 see http://sourceforge.net/tracker/index.php?func=detail&aid=1377978&group_id=89627&atid=590799  -->\n+\t           classpath=\"${clirr-core.jar};${bcel.jar}\"/>\n \t  \t<clirr failOnBinError=\"no\" failOnSrcError=\"no\">\n \t  \t        <origfiles file=\"${reference.jar}\"/>\n-\t  \t        <newfiles dir=\"${jar.dest}\" includes=\"*.jar\"/>\n+\t  \t        <newfiles file=\"${jar.dest}/${log4j.jar}\"/>\n \t  \t  \t    <formatter type=\"xml\" outfile=\"${docs.dest}/compatibility.xml\"/>\n \t  \t  </clirr>\n \t  \t  <xslt in=\"${docs.dest}/compatibility.xml\"",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "updated release notes to include comment about xml decoder npe fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310587 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/091906d9ba31998efe44f87686ce3c82e8618caa",
        "parent": "https://github.com/apache/log4j/commit/b6400c6ea9848e02ae40852ed64dca0413447bb2",
        "bug_id": "log4j_22",
        "file": [
            {
                "sha": "7a2740891bdaa6d4cb2b382e9da18feced732f83",
                "filename": "src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "blob_url": "https://github.com/apache/log4j/blob/091906d9ba31998efe44f87686ce3c82e8618caa/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "raw_url": "https://github.com/apache/log4j/raw/091906d9ba31998efe44f87686ce3c82e8618caa/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/help/release-notes.html?ref=091906d9ba31998efe44f87686ce3c82e8618caa",
                "patch": "@@ -9,18 +9,21 @@ <h2>Release Notes</h2>\n \n \n <h3>1.99.99 (18th May 2004 10:35 GMT+10)</h3>\n+<h2>20 May 2004</h2>\n+<ul>\n+ <li>Corrected a bug in the XML decoders which prevented XML-formatted events from being processed.</li>\n+</ul>\n+\n <h2>18 May 2004</h2>\n <ul>\n  <li>Tidied up the Logger Tree Panel's hidden logger functionality.  It's now managed by a popup dialog, freeing up space for the Logger tree itself.</li>\n </ul>\n \n-<h3>v1.99.99 (pre-log4j 1.3 Alpha)</h3>\n <h2>18 May 2004</h2>\n <ul>\n  <li>Properly included some base JavaDoc into the chainsaw jar, so that it can be accessed via Java Web Start</li>\n </ul>\n \n-<h3>v1.99.99 (pre-log4j 1.3 Alpha)</h3>\n <h2>16 May 2004</h2>\n <ul>\n  <li>Added 'cyclic buffer size' as an application property</li>",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Corrected xmldecoder bug - null exceptions should be assigned a single-element empty string to prevent npes\nCorrected file-load of xml formatted events to conform to responsiveness and cyclic buffer settings - both issues discovered by Stephen Pain\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310596 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
        "parent": "https://github.com/apache/log4j/commit/130b3181d10b8f89ee785ff0a0e608b9c3001ca3",
        "bug_id": "log4j_23",
        "file": [
            {
                "sha": "dcce47633eb113511a278262c3b959e52708b56e",
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "blob_url": "https://github.com/apache/log4j/blob/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "raw_url": "https://github.com/apache/log4j/raw/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "status": "modified",
                "changes": 30,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java?ref=60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
                "patch": "@@ -16,20 +16,9 @@\n \n package org.apache.log4j.chainsaw;\n \n-import org.apache.log4j.AppenderSkeleton;\n-import org.apache.log4j.LogManager;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.net.SocketReceiver;\n-import org.apache.log4j.rule.ExpressionRule;\n-import org.apache.log4j.rule.Rule;\n-import org.apache.log4j.spi.LoggingEvent;\n-import org.apache.log4j.spi.LoggingEventFieldResolver;\n-\n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n-\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n@@ -38,6 +27,15 @@\n \n import javax.swing.event.EventListenerList;\n \n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.net.SocketReceiver;\n+import org.apache.log4j.rule.ExpressionRule;\n+import org.apache.log4j.rule.Rule;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.apache.log4j.spi.LoggingEventFieldResolver;\n+\n \n /**\n  * A handler class that either extends a particular appender hierarchy or can be bound\n@@ -100,16 +98,6 @@ public void append(LoggingEvent event) {\n     worker.enqueue(event);\n   }\n \n-  /**\n-   * Allows a Collection of events to be posted into this handler\n-   */\n-  public void appendBatch(Collection events) {\n-    for (Iterator iter = events.iterator(); iter.hasNext();) {\n-      LoggingEvent element = (LoggingEvent) iter.next();\n-      append(element);\n-    }\n-  }\n-\n   public void close() {\n   }\n ",
                "deletions": 21
            },
            {
                "sha": "4e98d1b4c6cb227ea1876a92b6d4bbfedeef286a",
                "filename": "src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "blob_url": "https://github.com/apache/log4j/blob/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "raw_url": "https://github.com/apache/log4j/raw/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/FileLoadAction.java?ref=60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.net.URL;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Vector;\n \n@@ -32,6 +33,7 @@\n import org.apache.log4j.Decoder;\n import org.apache.log4j.Logger;\n import org.apache.log4j.helpers.Constants;\n+import org.apache.log4j.spi.LoggingEvent;\n \n \n /**\n@@ -147,7 +149,10 @@ public String getDescription() {\n           public void run() {\n             try {\n               Vector events = decoder.decode(urlToUse);\n-              parent.handler.appendBatch(events);\n+              Iterator iter = events.iterator();\n+              while (iter.hasNext()) {\n+                  parent.handler.append((LoggingEvent)iter.next());\n+              }\n             } catch (IOException e1) {\n               // TODO Handle the error with a nice msg\n               LOG.error(e1);",
                "deletions": 1
            },
            {
                "sha": "9677be0a401cb8ce97efbb0b5f32950c618802c5",
                "filename": "src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "blob_url": "https://github.com/apache/log4j/blob/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "raw_url": "https://github.com/apache/log4j/raw/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/help/release-notes.html?ref=60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
                "patch": "@@ -9,9 +9,16 @@ <h2>Release Notes</h2>\n \n \n <h3>1.99.99 (18th May 2004 10:35 GMT+10)</h3>\n+\n+<h2>21 May 2004</h2>\n+<ul>\n+ <li>Corrected a bug in XML decoders which caused an exceptio when rendering the exception column - discovered by Stephen Pain.</li>\n+<li>Events loaded from an XML-formatted file are now processed like other events (throttled based on responsiveness setting and conforming to cyclic buffer limits) - discovered by Stephen Pain.</li>\n+</ul>\n+\n <h2>20 May 2004</h2>\n <ul>\n- <li>Corrected a bug in the XML decoders which prevented XML-formatted events from being processed.</li>\n+ <li>Corrected a bug in the XML decoders which prevented XML-formatted events from being processed - discovered by Stephen Pain.</li>\n </ul>\n \n <h2>18 May 2004</h2>",
                "deletions": 1
            },
            {
                "sha": "7875e42842e9de0ec5009b2b4b1506cfe5ee4af0",
                "filename": "src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java?ref=60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
                "patch": "@@ -368,8 +368,9 @@ private Vector decodeEvents(Document document) {\n       } else {\n         info = LocationInfo.NA_LOCATION_INFO;\n       }\n+\n       if (exception == null) {\n-        exception = new String[]{};\n+          exception = new String[]{\"\"};\n       }\n       \n       LoggingEvent loggingEvent = new LoggingEvent();",
                "deletions": 1
            },
            {
                "sha": "710322eb63e03ed86b9129dc47c2bb4657638985",
                "filename": "src/java/org/apache/log4j/xml/XMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/XMLDecoder.java?ref=60bd3dbdf1bc7f5cb335fddea5d1159cc626d6bf",
                "patch": "@@ -383,7 +383,7 @@ private Vector decodeEvents(Document document) {\n         info = LocationInfo.NA_LOCATION_INFO;\n       }\n       if (exception == null) {\n-          exception = new String[]{};\n+          exception = new String[]{\"\"};\n       }\n       \n       LoggingEvent loggingEvent = new LoggingEvent();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "This fixes an NPE that can occur.\n\nStephen Pain noticed that when a Receiver is restarted in Chainsaw, the GUI looks fine, but no events are displayed\nfrom that point onwards.  A real bummer.\n\nIt turns out that it is during the restart of Socket based Receivers, an LoggingEvent is sent through\ndescribing the socket close issue.  Unfortunately the event has no properties set.\n\nCurrently the LoggingEvent.getProperties() method could return null.  It might be worth changing this so that\nit return an empty Map instead, but I was not prepared to make that call right now.\n\nI might also consider checking out why the Thread that gets that NPE causes Chainsaw to become useless, it\nshould try and deal with those sort of issues in much the same way as the Swing EventDispatch thread does, it\nseems to go merrily along even after exceptions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310676 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/a0ecf019a75b847fafc2d0ce413964ef8314aac0",
        "parent": "https://github.com/apache/log4j/commit/cce479c09b250b4fad1aee778b48ec26c91e0e3a",
        "bug_id": "log4j_24",
        "file": [
            {
                "sha": "6c616e4d449f3ddadfeef192e5f80a1283dcacfb",
                "filename": "src/java/org/apache/log4j/chainsaw/filter/EventTypeEntryContainer.java",
                "blob_url": "https://github.com/apache/log4j/blob/a0ecf019a75b847fafc2d0ce413964ef8314aac0/src/java/org/apache/log4j/chainsaw/filter/EventTypeEntryContainer.java",
                "raw_url": "https://github.com/apache/log4j/raw/a0ecf019a75b847fafc2d0ce413964ef8314aac0/src/java/org/apache/log4j/chainsaw/filter/EventTypeEntryContainer.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/filter/EventTypeEntryContainer.java?ref=a0ecf019a75b847fafc2d0ce413964ef8314aac0",
                "patch": "@@ -148,6 +148,9 @@ void addClass(String className) {\n   }\n \n   void addProperties(Map properties) {\n+    if(properties == null) {\n+     return;   \n+    }\n         for (Iterator iter = properties.entrySet().iterator(); iter.hasNext();) {\n             Map.Entry entry = (Map.Entry)iter.next();\n             if (!(propListModel.contains(entry.getKey()))) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "log4j",
        "message": " - Fixed bug #11570 whereby XMLAppender would throw a\n   NullPointerException if the input message was null. Many thanks to\n   David Vandegrift for reporting the bug and to Hendrik Brummermann for\n   supplying the patch. [*]\n\n - Fixed bug #12366 whereby various versions of Xerces would not parse\n   log4j configuration scripts expressed in XML format. [*]\n\n - Fixed bug #15599. SocketAppender now honors ReconnectionDelay of 0.\n   Many thanks to Scott Schram for reporting the bug and providing the fix. [*]\n\n\nPR:\nObtained from:\nSubmitted by:\nReviewed by:\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/branches/v1_2-branch@309738 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/e87c632e10235c397fcc485cca3b94b8d9fed593",
        "parent": "https://github.com/apache/log4j/commit/680d100f2796942ce90262035bf757a9fc6421df",
        "bug_id": "log4j_25",
        "file": [
            {
                "sha": "7ddc86b541ab344874c56e6aa37242b279b2c741",
                "filename": "build.xml",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/build.xml",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/build.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -17,7 +17,7 @@\n   <!-- prefixed with \"env\". -->\n   <property environment=\"env\"/>\n \n-  <property name=\"version\" value=\"1.2.7\"/>\n+  <property name=\"version\" value=\"1.2.8\"/>\n \n   <!-- The base directory relative to which most targets are built -->\n   <property name=\"base\" value=\".\"/>",
                "deletions": 1
            },
            {
                "sha": "524ea9d394233ef6d87a00baf86b21608822dcab",
                "filename": "docs/HISTORY",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/HISTORY",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/HISTORY",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/HISTORY?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -5,6 +5,23 @@\n        client code. \n  [***] Changes requiring important modifications to existing client code.\n \n+ - February 18th, 2003\n+\n+http://nagoya.apache.org/bugzilla/show_bug.cgi?id=11570\n+\n+\n+XML Appender throws NullPointerException when logging null\n+\n+ - Fixed bug #11570 whereby XMLAppender would throw a\n+   NullPointerException if the input message was null. Many thanks to\n+   David Vandegrift for reporting the bug and to Hendrik Brummermann for\n+   supplying the patch. [*]\n+\n+ - Fixed bug #12366 whereby various versions of Xerces would not parse\n+   log4j configuration scripts expressed in XML format. [*]\n+\n+ - Fixed bug #15599. SocketAppender now honors ReconnectionDelay of 0.\n+   Many thanks to Scott Schram for reporting the bug and providing the fix. [*]\n \n  October 9th, 2002\n ",
                "deletions": 0
            },
            {
                "sha": "e946f9d9abf3d4e546dfe7c988a4aee39ad42b8b",
                "filename": "docs/manual.html",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/manual.html",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/docs/manual.html",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/docs/manual.html?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -22,11 +22,12 @@ <h1>Short introduction to log4j</h1>\n       distribution. This document is based on the article <a\n       href=\"http://www.javaworld.com/jw-11-2000/jw-1122-log4j.html\">\"Log4j\n       delivers control over logging\"</a> published in November 2000\n-      edition of <a\n-      href=\"http://www.javaworld.com\">JavaWorld</a>. However, the\n-      present article contains more detailed and up to date\n-      information. The short manual also borrows some text from the\n-      book \"log4j: the Manual\" by the same author (yours truly).\n+      edition of JavaWorld. However, the present article contains more\n+      detailed and up to date information. The present short manual\n+      also borrows some text from <a\n+      href=\"http://www.flashline.com/components/view.jsp?prodid=4702&affiliateid=657173\">\n+      \"<em>The complete log4j manual</em>\"</a> by the same author\n+      (yours truly).\n \n \n <h2>Abstract</h2>",
                "deletions": 5
            },
            {
                "sha": "d02b63ed751daf4b0dacbf2f57d7258b2a3b14a1",
                "filename": "src/java/org/apache/log4j/helpers/Transform.java",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/helpers/Transform.java",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/helpers/Transform.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/helpers/Transform.java?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -71,8 +71,12 @@ static public String escapeTags(String input) {\n   * @param str The String that is inserted into an existing CDATA Section within buf.  \n   * */\n   static public void appendEscapingCDATA(StringBuffer buf, String str) {\n-    int end = str.indexOf(CDATA_END);\n+    if(str == null) {\n+      buf.append(\"\");\n+      return;\n+    } \n     \n+    int end = str.indexOf(CDATA_END);\n     if (end < 0) {\n       buf.append(str);\n       return;",
                "deletions": 1
            },
            {
                "sha": "ddb4145e61de38205d0a162dbf70f54274c1b030",
                "filename": "src/java/org/apache/log4j/net/SocketAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/net/SocketAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/java/org/apache/log4j/net/SocketAppender.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/SocketAppender.java?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -194,9 +194,14 @@ void connect(InetAddress address, int port) {\n       cleanUp();\n       oos = new ObjectOutputStream(new Socket(address, port).getOutputStream());\n     } catch(IOException e) {\n-      LogLog.error(\"Could not connect to remote log4j server at [\"\n-\t\t   +address.getHostName()+\"]. We will try again later.\", e);\n-      fireConnector();\n+\n+      String msg = \"Could not connect to remote log4j server at [\"\n+\t+address.getHostName()+\"].\";\n+      if(reconnectionDelay > 0) {\n+        msg += \" We will try again later.\";\n+\tfireConnector(); // fire the connector thread\n+      } \n+      LogLog.error(msg, e);\n     }\n   }\n ",
                "deletions": 3
            },
            {
                "sha": "293419bd71d69be26fd1c3682cc38b754409fce4",
                "filename": "src/xdocs/documentation.xml",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/documentation.xml",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/documentation.xml",
                "status": "modified",
                "changes": 31,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/xdocs/documentation.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -10,18 +10,22 @@\n \n     <section name=\"Official log4j documentation\">\n \n-      <p>The following documentation is included with the standard log4j\n-\tdistribution and also browsable online:</p>\n+      <p>With the exception of the complete manual, the following\n+\tdocumentation is included with the standard log4j distribution\n+\tand also browsable online:\n+      </p>\n       \n       <ul>\n \t<p>\n-\t  <a href=\"http://www.flashline.com/components/view.jsp?prodid=4702&amp;affiliateid=657173\"><img align=\"right\" src=\"images/coverSmall.png\"></img></a>\n-\t  <li><a href=\"manual.html\"><b>short manual</b></a>,\n+\t  <a\n+\t  href=\"https://www.qos.ch/shop/products/clm_t.jsp\"><img\n+\t  align=\"right\" src=\"images/coverSmall.png\"></img></a> <li><a\n+\t  href=\"manual.html\"><b>short manual</b></a>,\n \t  </li>\n \t</p>\n \n \t<p>\n-\t  <li><a href=\"http://www.flashline.com/components/view.jsp?prodid=4702&amp;affiliateid=657173\"><b>complete manual</b></a> (commercial), \n+\t  <li><a href=\"https://www.qos.ch/shop/products/clm_t.jsp\"><b>complete manual</b></a> (commercial), \n \t  </li>\n \t</p>\n \t\n@@ -72,6 +76,9 @@\n \t    Build Flexible Logs With log4j</a> by Vikram Goyal\n \t</li></p>\n \n+\t<p><li><a\n+\thref=\"http://supportweb.cs.bham.ac.uk/documentation/tutorials/docsystem/build/tutorials/log4j/log4j.html\">log4j</a>\n+\tby Ashley J.S Mills, University Of Birmingham</li></p>\n \n \t<p><li><a href=\"http://www.builder.com.com/article.jhtml?id=u00820020124kev01.htm\">\n \t    Add logging to your Java Applications</a> by Kevin Brown\n@@ -94,7 +101,19 @@\n \n \t</li></p>\n \n-      </ul>\n+\t<p><li> <a href=\"http://qos.ch/logging/sc.html\">Supporting the\n+\t  log4j <code>RepositorySelector</code></a> by Ceki\n+\t  G&#252;lc&#252;\n+\t</li></p>\n+\n+         <p><li> <a href=\"http://rei1.m-plify.com/log4j/\">Log4j class\n+         diagrams</a>, courtesy of David Tonhofer\n+            </li>\n+         </p>\n+\n+\t<p><li> <a href=\"http://www.jug-l.org/log4j.html\">Advanced\n+\t  Log4j</a> Louisville JUG presentation by Jonathan Cowherd </li></p>\n+      </ul> \n \n       <p>If you would like your log4j-relateed article to be listed\n \t  here, then please send a note to the <a",
                "deletions": 6
            },
            {
                "sha": "c6e4b3c23e56457b16789e59a35431107b8965b0",
                "filename": "src/xdocs/download.xml",
                "blob_url": "https://github.com/apache/log4j/blob/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/download.xml",
                "raw_url": "https://github.com/apache/log4j/raw/e87c632e10235c397fcc485cca3b94b8d9fed593/src/xdocs/download.xml",
                "status": "modified",
                "changes": 48,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/xdocs/download.xml?ref=e87c632e10235c397fcc485cca3b94b8d9fed593",
                "patch": "@@ -9,14 +9,14 @@\n   <meta name=\"keywords\" content=\"java, logging, tracing, component, framework, API, log4j\"/>\n <body>\n \n-    <section name=\"log4j version 1.2.7\">\n-      <p>log4j 1.2.7 is available in <a\n-\thref=\"../jakarta-log4j-1.2.7.tar.gz\"><b>TAR.GZ</b></a> format\n-\tor in <a href=\"../jakarta-log4j-1.2.7.zip\"><b>ZIP</b></a>\n+    <section name=\"log4j version 1.2.8\">\n+      <p>log4j 1.2.8 is available in <a\n+\thref=\"../jakarta-log4j-1.2.8.tar.gz\"><b>TAR.GZ</b></a> format\n+\tor in <a href=\"../jakarta-log4j-1.2.8.zip\"><b>ZIP</b></a>\n \tformat.\n       </p>\n \n-      <p>As of release 1.2.7 log4j now searches for the file log4j.xml\n+      <p>As of release 1.2.8 log4j now searches for the file log4j.xml\n         as well as the file log4j.properties during\n         initialization. See the <a href=\"HISTORY\">HISTORY</a> file for\n         the firther details.\n@@ -42,14 +42,15 @@\n \trenaming of the <code>CategoryFactory</code> class to\n \t<code>LoggerFactory</code> class such that subclasses of\n \t<code>Category</code> class must be modified and\n-\trecompiled. By the way, <b>we strongly discourage casual users\n-\tfrom subclassing the <code>Category</code> or\n-\t<code>Logger</code> classes.</b>\n+\trecompiled. <em>The recommended pattern for extending the\n+\t<code>Logger</code> class is wrapping. Moreover, we strongly\n+\tdiscourage casual users from subclassing the\n+\t<code>Category</code> or <code>Logger</code> classes. </em>\n       </p>\n \n       <p>We also maintain a list of <a href=\"earlier.html\">earlier\n \t  versions</a> of log4j for download, intended for the curious\n-\t  paleontologist -- there seems to be thousands of them!\n+\t  paleontologist -- there seems to be quite a few of them!\n       </p>\n \n \n@@ -76,33 +77,26 @@\n \n \t<!-- ============================================================================== -->\n \n-\t<dt><a href=\"http://www.japhy.de/configLog4j\"><b>configLog4j</b></a></dt>\n+<!--\t<dt><a href=\"http://www.japhy.de/configLog4j\"><b>configLog4j</b></a></dt>\n \n \t<dd>A graphical log4j configuration editor by Tobias\n \tDezulian.</dd>\n-\n+-->\n \t<!-- ============================================================================== -->\n \n \t<dt>\n \t  <a\n-\thref=\"http://support.klopotek.de/log4j/jdbc/index.html\"><b>JDBCAppender</b></a>\n+\thref=\"http://www.mannhaupt.com/danko/projects/\"><b>JDBCAppender</b></a>\n+\t</dt> \n \n-\t</dt> <dd>A <code>JDBCAppender</code> by <a\n-\thref=\"mailto:t.fenner@klopotek.de\">Thomas Fenner</a>. Note\n-\tthat log4j 1.2 ships with another <code>JDBCAppender</code>\n-\twritten by Kevin Steppe.\n+        <dd>A powerful <code>JDBCAppender</code> by Danko Mannhaupt\n+\t  who continues the work of Thomas Fenner. You might find\n+\t  this JDBCAppender more suitable then the one that ships with\n+\t  log4j 1.2. \n \t</dd>\n \n \t<!-- ============================================================================== -->\t\n \t\n-\t<dt><a\n-\thref=\"http://developer.jini.org/exchange/projects/log\"><b>JINI\n-\tlogging service</b></a> (registration required)</dt>\n-\n-\t<dd>A log4j wrapper for JINI by Jerome Bernard.</dd>\n-\n-\t<!-- ============================================================================== -->\n-\n \t<dt><a href=\"http://qos.ch/\"><b>log4j<em>ME</em></b></a></dt>\n \n \t<dd>Log4j<em>ME</em>, or log4j MiniEdition, is based on the\n@@ -139,9 +133,9 @@\n \t</dt> \n \n \t<dd>Another full-featured graphical log viewer. After a merger\n-\t  with a service-orinted company and a change in\n-\t  business-orientation, the owners of LogFactor5 have decided\n-\t  to donate their product to the log4j project.\n+\t  and the subsequent change in business-orientation, the\n+\t  owners of LogFactor5 have decided to donate their product to\n+\t  the log4j project.\n \t</dd>\n \n \t<!-- ============================================================================== -->",
                "deletions": 27
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Added support in XMLDecoder for xml documents conforming to log4j.dtd which include the XML declaration and doctype declaration\nAssigning exception to an empty string array if no exception provided in the decoded event (prevents NPEs when the exception is accessed)\nRemoved system.err msgs in log4jentityresolver\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310585 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/ec94f456bf72408e8dc9353eeaabe2cafb2533fc",
        "parent": "https://github.com/apache/log4j/commit/a709e76c787f44786d718c366b2c477de8b7bc6f",
        "bug_id": "log4j_26",
        "file": [
            {
                "sha": "68ff3793abe67e3b8b3894f6c3ee55419e3cd675",
                "filename": "src/java/org/apache/log4j/xml/Log4jEntityResolver.java",
                "blob_url": "https://github.com/apache/log4j/blob/ec94f456bf72408e8dc9353eeaabe2cafb2533fc/src/java/org/apache/log4j/xml/Log4jEntityResolver.java",
                "raw_url": "https://github.com/apache/log4j/raw/ec94f456bf72408e8dc9353eeaabe2cafb2533fc/src/java/org/apache/log4j/xml/Log4jEntityResolver.java",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/Log4jEntityResolver.java?ref=ec94f456bf72408e8dc9353eeaabe2cafb2533fc",
                "patch": "@@ -23,8 +23,6 @@\n public class Log4jEntityResolver implements EntityResolver {\n \n   public InputSource resolveEntity (String publicId, String systemId) {\n-    System.err.println(\"piblicID: [\"+publicId+\"]\");\n-    System.err.println(\"systemId: [\"+systemId+\"]\");\n     if (systemId.endsWith(\"log4j.dtd\")) {\n       Class clazz = getClass();\n       InputStream in = clazz.getResourceAsStream(\"/org/apache/log4j/xml/log4j.dtd\");",
                "deletions": 2
            },
            {
                "sha": "6b17f81f6fbb3a96b2202042b5b2562a78255c37",
                "filename": "src/java/org/apache/log4j/xml/XMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/ec94f456bf72408e8dc9353eeaabe2cafb2533fc/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/ec94f456bf72408e8dc9353eeaabe2cafb2533fc/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/XMLDecoder.java?ref=ec94f456bf72408e8dc9353eeaabe2cafb2533fc",
                "patch": "@@ -47,6 +47,10 @@\n  * Decodes Logging Events in XML formated into elements that are used by\n  * Chainsaw.\n  *\n+ * This decoder can process either:\n+ *  - a collection of log4j:event nodes ONLY (no XML declaration nor eventSet node), or \n+ *  - the XML declaration, log4j:eventSet root node AND containing log4j:event nodes (all required)\n+ * \n  * NOTE:  Only a single LoggingEvent is returned from the decode method\n  * even though the DTD supports multiple events nested in an eventSet.\n  *\n@@ -114,9 +118,13 @@ private Document parse(String data) {\n        */\n       StringBuffer buf = new StringBuffer(1024);\n \n-      buf.append(BEGINPART);\n+      if (!(data.substring(0, data.indexOf(\" \")).toLowerCase().startsWith(\"<?xml\"))) {\n+        buf.append(BEGINPART);\n+      }\n       buf.append(data);\n-      buf.append(ENDPART);\n+      if (!(data.endsWith(ENDPART))) {\n+        buf.append(ENDPART);\n+      }\n \n       InputSource inputSource =\n         new InputSource(new StringReader(buf.toString()));\n@@ -379,6 +387,9 @@ private Vector decodeEvents(Document document) {\n       } else {\n         info = LocationInfo.NA_LOCATION_INFO;\n       }\n+      if (exception == null) {\n+          exception = new String[]{};\n+      }\n       \n       LoggingEvent loggingEvent = new LoggingEvent();\n       loggingEvent.setLogger(logger);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Changes for Bugs 30443 & 30444\n\n30443 - The FileLoadAction class ignored the user's cancel action and loaded the file anyway\n\n30444 - An XML file containing log4j events that were over 100 lines would not be imported correctly and generate an NPE.   Changed the logic\nto keep reading in lines until it reached the end of record, or end of file before attempting to decode the text.\n\nPR: 30443 30444\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310724 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/f39093206f57fb3b69d51d6f0690fa95ee4e068c",
        "parent": "https://github.com/apache/log4j/commit/0c10342f90783fde2e34faa145616d21784069c0",
        "bug_id": "log4j_27",
        "file": [
            {
                "sha": "4995a2374e7faee2b99f2675c40f492f663e81a4",
                "filename": "src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "blob_url": "https://github.com/apache/log4j/blob/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "raw_url": "https://github.com/apache/log4j/raw/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/FileLoadAction.java?ref=f39093206f57fb3b69d51d6f0690fa95ee4e068c",
                "patch": "@@ -99,10 +99,13 @@ public String getDescription() {\n           }\n         });\n \n-      chooser.showOpenDialog(parent);\n-\n+      int i = chooser.showOpenDialog(parent);\n+      if(i != JFileChooser.APPROVE_OPTION) {\n+       return; \n+      }\n       File selectedFile = chooser.getSelectedFile();\n \n+      \n       try {\n         url = selectedFile.toURL();\n         name = selectedFile.getName();",
                "deletions": 2
            },
            {
                "sha": "a812159e76ed57f90dbd130b046367e1863af997",
                "filename": "src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "blob_url": "https://github.com/apache/log4j/blob/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "raw_url": "https://github.com/apache/log4j/raw/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/help/release-notes.html",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/help/release-notes.html?ref=f39093206f57fb3b69d51d6f0690fa95ee4e068c",
                "patch": "@@ -8,6 +8,13 @@\n <h1>Release Notes</h2>\n \n <h1>1.99.99</h2>\n+\n+<h2>4 Aug 2004</h2>\n+<ul>\n+<li>Fixed Bug 30443 - When opening an XML file, if you hit cancel, Chainsaw opened the file anyway</li>\n+<li>Fixed Bug 30444 - NPE when trying to open an XML file where one or more events may be spread over a large (>100) number of lines.</li>\n+</ul>\n+\n <h2>31 July 2004</h2>\n <ul>\n <li>Corrected 'clear refine focus' bug.</li>",
                "deletions": 0
            },
            {
                "sha": "7fd9578e447ae558badaf812be8384b90c94ecb1",
                "filename": "src/java/org/apache/log4j/chainsaw/version/VersionManager.java",
                "blob_url": "https://github.com/apache/log4j/blob/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/version/VersionManager.java",
                "raw_url": "https://github.com/apache/log4j/raw/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/chainsaw/version/VersionManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/version/VersionManager.java?ref=f39093206f57fb3b69d51d6f0690fa95ee4e068c",
                "patch": "@@ -10,7 +10,7 @@\n \n     private static final VersionManager instance = new VersionManager();\n     \n-    private static final String VERSION_INFO = \"1.99.99 (31 July 2004)\";\n+    private static final String VERSION_INFO = \"1.99.99 (4 Aug 2004)\";\n     \n     public static final VersionManager getInstance() {\n         return instance;",
                "deletions": 1
            },
            {
                "sha": "b75e67934cd1ae3c36564a6fe1cdc50b1b7e7479",
                "filename": "src/java/org/apache/log4j/xml/XMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/f39093206f57fb3b69d51d6f0690fa95ee4e068c/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "status": "modified",
                "changes": 25,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/XMLDecoder.java?ref=f39093206f57fb3b69d51d6f0690fa95ee4e068c",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.HashMap;\n import java.util.Hashtable;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Vector;\n \n@@ -156,10 +157,20 @@ public Vector decode(URL url) throws IOException {\n \n     String line = null;\n     try {\n+        /**\n+         * Keep reading in the lines until we find the end of record line\n+         * \n+         * NOTE: this might chew a bit more memory than the previous implementation which\n+         * read in line blocks of 100, but allows a HUGE event spread over 100+ lines to be decode correctly.\n+         */\n         while ((line = reader.readLine()) != null) {\n-            StringBuffer buffer = new StringBuffer(line);\n-            for (int i = 0;i<100;i++) {\n-                buffer.append(reader.readLine());\n+            StringBuffer buffer = new StringBuffer(512);\n+            while(line!=null && line.indexOf(RECORD_END)==-1) {\n+                buffer.append(line).append(\"\\n\");\n+                line = reader.readLine();\n+            }\n+            if(line!=null) {\n+             buffer.append(line);   \n             }\n             v.addAll(decodeEvents(buffer.toString()));\n         }\n@@ -177,10 +188,16 @@ public Vector decode(URL url) throws IOException {\n   }\n \n   public Vector decodeEvents(String document) {\n+    /**\n+     * NOTE: due to the logic above, which should read in the string containing the WHOLE event text,\n+     * there should be no need to track partial events, but I have not changed the code just in case....\n+     * \n+     * Paul Smith 4th August 2004\n+     */\n     if (document != null) {\n       document = document.trim();\n       if (document.equals(\"\")) {\n-        return null;\n+        return new Vector();\n       } else {\n       \tString newDoc=null;\n       \tString newPartialEvent=null;",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Fixed NPE bug found by Ulrich.Kleeberger@witt-weiden.de when\nattempting to close the welcome panel using the right click\npopup menu on the tabs.\n\nAlso reordered the position of this popup code so the L&F changes\naffected the popup menu (was staying in the Metal L&F).\n\nNow listens for tabs being removed, and disables the hide actions if the \nWelcome panel has been selected.\n\nTutorial Frame toolbar now tracks whether there are any Tutorial Generator\nReceivers running, and if not, ensures that the Start Tutorial button\ndoes not stay activated.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310174 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/5db14ecd98cd6a3e89cbf78af81fd2b6990c6656",
        "parent": "https://github.com/apache/log4j/commit/c0e389b14ea9c87435d58d5fc7aca7b7324959ba",
        "bug_id": "log4j_28",
        "file": [
            {
                "sha": "3e38e7aa97c968fb30aaa8a0243334233db7e986",
                "filename": "src/java/org/apache/log4j/chainsaw/LogUI.java",
                "blob_url": "https://github.com/apache/log4j/blob/5db14ecd98cd6a3e89cbf78af81fd2b6990c6656/src/java/org/apache/log4j/chainsaw/LogUI.java",
                "raw_url": "https://github.com/apache/log4j/raw/5db14ecd98cd6a3e89cbf78af81fd2b6990c6656/src/java/org/apache/log4j/chainsaw/LogUI.java",
                "status": "modified",
                "changes": 171,
                "additions": 103,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/LogUI.java?ref=5db14ecd98cd6a3e89cbf78af81fd2b6990c6656",
                "patch": "@@ -78,6 +78,8 @@\n import java.awt.Toolkit;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+import java.awt.event.ContainerEvent;\n+import java.awt.event.ContainerListener;\n import java.awt.event.InputEvent;\n import java.awt.event.KeyEvent;\n import java.awt.event.MouseAdapter;\n@@ -326,73 +328,6 @@ private void initGUI() {\n     setJMenuBar(getToolBarAndMenus().getMenubar());\n     setTabbedPane(new ChainsawTabbedPane());\n \n-    //    getTabbedPane().addChangeListener(getToolBarAndMenus().getPanelListener());\n-    final JPopupMenu tabPopup = new JPopupMenu();\n-    Action hideCurrentTabAction =\n-      new AbstractAction(\"Hide\") {\n-        public void actionPerformed(ActionEvent e) {\n-          displayPanel(getCurrentLogPanel().getIdentifier(), false);\n-          tbms.stateChange();\n-        }\n-      };\n-\n-    Action hideOtherTabsAction =\n-      new AbstractAction(\"Hide Others\") {\n-        public void actionPerformed(ActionEvent e) {\n-          String currentName = getCurrentLogPanel().getIdentifier();\n-\n-          int count = getTabbedPane().getTabCount();\n-          int index = 0;\n-\n-          for (int i = 0; i < count; i++) {\n-            String name = getTabbedPane().getTitleAt(index);\n-\n-            if (\n-              getPanelMap().keySet().contains(name)\n-                && !name.equals(currentName)) {\n-              displayPanel(name, false);\n-              tbms.stateChange();\n-            } else {\n-              index++;\n-            }\n-          }\n-        }\n-      };\n-\n-    Action showHiddenTabsAction =\n-      new AbstractAction(\"Show All Hidden\") {\n-        public void actionPerformed(ActionEvent e) {\n-          for (Iterator iter = getPanels().keySet().iterator();\n-              iter.hasNext();) {\n-            String identifier = (String) iter.next();\n-            int count = getTabbedPane().getTabCount();\n-            boolean found = false;\n-\n-            for (int i = 0; i < count; i++) {\n-              String name = getTabbedPane().getTitleAt(i);\n-\n-              if (name.equals(identifier)) {\n-                found = true;\n-\n-                break;\n-              }\n-            }\n-\n-            if (!found) {\n-              displayPanel(identifier, true);\n-              tbms.stateChange();\n-            }\n-          }\n-        }\n-      };\n-\n-    tabPopup.add(hideCurrentTabAction);\n-    tabPopup.add(hideOtherTabsAction);\n-    tabPopup.addSeparator();\n-    tabPopup.add(showHiddenTabsAction);\n-\n-    final PopupListener tabPopupListener = new PopupListener(tabPopup);\n-    getTabbedPane().addMouseListener(tabPopupListener);\n   }\n \n   /**\n@@ -703,7 +638,94 @@ public void saveSettings(SaveSettingsEvent event) {\n       });\n \n     pack();\n+    \n+    final JPopupMenu tabPopup = new JPopupMenu();\n+    final Action hideCurrentTabAction =\n+      new AbstractAction(\"Hide\") {\n+        public void actionPerformed(ActionEvent e) {\n+          displayPanel(getCurrentLogPanel().getIdentifier(), false);\n+          tbms.stateChange();\n+        }\n+      };\n+\n+    final Action hideOtherTabsAction =\n+      new AbstractAction(\"Hide Others\") {\n+        public void actionPerformed(ActionEvent e) {\n+          String currentName = getCurrentLogPanel().getIdentifier();\n+\n+          int count = getTabbedPane().getTabCount();\n+          int index = 0;\n+\n+          for (int i = 0; i < count; i++) {\n+            String name = getTabbedPane().getTitleAt(index);\n+\n+            if (\n+              getPanelMap().keySet().contains(name)\n+                && !name.equals(currentName)) {\n+              displayPanel(name, false);\n+              tbms.stateChange();\n+            } else {\n+              index++;\n+            }\n+          }\n+        }\n+      };\n+\n+    Action showHiddenTabsAction =\n+      new AbstractAction(\"Show All Hidden\") {\n+        public void actionPerformed(ActionEvent e) {\n+          for (Iterator iter = getPanels().keySet().iterator();\n+              iter.hasNext();) {\n+            String identifier = (String) iter.next();\n+            int count = getTabbedPane().getTabCount();\n+            boolean found = false;\n+\n+            for (int i = 0; i < count; i++) {\n+              String name = getTabbedPane().getTitleAt(i);\n+\n+              if (name.equals(identifier)) {\n+                found = true;\n+\n+                break;\n+              }\n+            }\n+\n+            if (!found) {\n+              displayPanel(identifier, true);\n+              tbms.stateChange();\n+            }\n+          }\n+        }\n+      };\n \n+    tabPopup.add(hideCurrentTabAction);\n+    tabPopup.add(hideOtherTabsAction);\n+    tabPopup.addSeparator();\n+    tabPopup.add(showHiddenTabsAction);\n+\n+    final PopupListener tabPopupListener = new PopupListener(tabPopup);\n+    getTabbedPane().addMouseListener(tabPopupListener);\n+\n+    final ChangeListener actionEnabler = new ChangeListener(){\n+\n+    public void stateChanged(ChangeEvent arg0) {\n+      boolean enabled = getCurrentLogPanel()!=null;\n+      hideCurrentTabAction.setEnabled(enabled);\n+      hideOtherTabsAction.setEnabled(enabled);    \n+    }};\n+\n+    getTabbedPane().addChangeListener(actionEnabler);   \n+    \n+    getTabbedPane().addContainerListener(new ContainerListener(){\n+\n+      public void componentAdded(ContainerEvent arg0) {\n+        actionEnabler.stateChanged(null);        \n+      }\n+\n+      public void componentRemoved(ContainerEvent arg0) {\n+        actionEnabler.stateChanged(null);        \n+      }});\n+     \n     this.handler.addPropertyChangeListener(\n       \"dataRate\",\n       new PropertyChangeListener() {\n@@ -761,7 +783,7 @@ public void actionPerformed(ActionEvent e) {\n           }\n         }\n       };\n-\n+      \n     final Action stopTutorial =\n       new AbstractAction(\n         \"Stop Tutorial\", new ImageIcon(ChainsawIcons.ICON_STOP_RECEIVER)) {\n@@ -810,6 +832,19 @@ public void propertyChange(PropertyChangeEvent evt) {\n \n     startTutorial.addPropertyChangeListener(pcl);\n     stopTutorial.addPropertyChangeListener(pcl);\n+    \n+    PluginRegistry.addPluginListener(new PluginListener(){\n+\n+      public void pluginStarted(PluginEvent e) {\n+        \n+      }\n+\n+      public void pluginStopped(PluginEvent e) {\n+        List list = PluginRegistry.getPlugins(LogManager.getLoggerRepository(), Generator.class);\n+        if (list.size() == 0) {\n+          startTutorial.putValue(\"TutorialStarted\", Boolean.FALSE);\n+        }        \n+      }});\n \n     final SmallButton stopButton = new SmallButton(stopTutorial);\n ",
                "deletions": 68
            }
        ]
    },
    {
        "repo": "log4j",
        "message": "Bug fix commit\nChanges:\n\n* build.xml - copy logger.dtd into jar\n* locationinfo - non-log4j apps may only specify a subset of the locationinfo fields (the rest would be null), a check was added to prevent an NPE on each accessor\n* loggingevent - Added locationInformationExists method (getLocationInfo creates a location info if it does not exist), and added exist checks to code as needed to prevent location info construction\n* loggingevent - modified setProperty behavior, if value is null, the property is removed\n* receiverpanel - add xmlsocketreceiver support(built-in support for reception of xml-formatted log4j events via tcp socket)\n* utillogginglevel - modified intvalues so that the lowest value is greater than log4j's debug level intvalue (so the appender skeleton would forward the events correctly with threshold set to debug)\n* fileloadaction - when attempting to load an xml file, directories are displayed as well as xml files\n* modified thread code in chainsawappenderhandler in an attempt to improve performance\n* multicastappender/udpappender - removing internally specified properties (log4japp/log4jmachine name) so the rest of the appenders in the appender chain could specify these properties themselves or the default behavior of using the remote machine could be used\n* multicastappender/receiver, udpappender/receiver added encoding support (chartset) as a property.  If none set, the default system encoding is used.\n* xmlsocketreceiver/udpreceiver/multicastreceiver - added pausable support (useful in receiver panel)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/trunk@310152 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/log4j/commit/437a2a9f957072af18835320b886c5fa565ea8d7",
        "parent": "https://github.com/apache/log4j/commit/5f07b1b2911a4f02a75e01c3d3a2cf33787c7458",
        "bug_id": "log4j_29",
        "file": [
            {
                "sha": "77370cedf3a53375a14709cf48fc37f6b2a1fe2b",
                "filename": "build.xml",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/build.xml",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/build.xml",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/build.xml?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -260,6 +260,8 @@\n     </javac>\n     <copy file=\"${BSTEM}/xml/log4j.dtd\"\n     tofile=\"${javac.dest}/${stem}/xml/log4j.dtd\" />\n+    <copy file=\"${BSTEM}/xml/logger.dtd\"\n+    tofile=\"${javac.dest}/${stem}/xml/logger.dtd\" />\n   </target>\n \n   <target name=\"build.avalonFramework\" depends=\"init, avalonFramework\" if=\"avalonFramework-present\">\n@@ -446,7 +448,7 @@\n     </delete>\n \n     <jar jarfile=\"${jar.dest}/${log4j.jar}\" basedir=\"${javac.dest}\"\n-      includes=\"${stem}/*.class, ${stem}/xml/log4j.dtd,\n+      includes=\"${stem}/*.class, ${stem}/xml/log4j.dtd, ${stem}/xml/logger.dtd,\n                 org/apache/joran/**/*.class,\n                 ${stem}/joran/**/*.class,\n                 ${stem}/config/*.class,",
                "deletions": 1
            },
            {
                "sha": "16908c1333e01cfbbf5de52293aa3bfcaf079d62",
                "filename": "src/java/org/apache/log4j/UtilLoggingLevel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/UtilLoggingLevel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/UtilLoggingLevel.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/UtilLoggingLevel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -62,14 +62,14 @@\n \n public class UtilLoggingLevel extends Level {\n \n-  public static final int SEVERE_INT = 1000;\n-  public static final int WARNING_INT = 900;\n-  public static final int INFO_INT = 800;\n-  public static final int CONFIG_INT = 700;\n-  public static final int FINE_INT = 500;\n-  public static final int FINER_INT = 400;\n-  public static final int FINEST_INT = 300;\n-  public static final int UNKNOWN_INT = 200;\n+  public static final int SEVERE_INT = 17000;\n+  public static final int WARNING_INT = 16000;\n+  public static final int INFO_INT = 15000;\n+  public static final int CONFIG_INT = 14000;\n+  public static final int FINE_INT = 13000;\n+  public static final int FINER_INT = 12000;\n+  public static final int FINEST_INT = 11000;\n+  public static final int UNKNOWN_INT = 10000;\n   \n   public static final UtilLoggingLevel SEVERE = new UtilLoggingLevel(SEVERE_INT, \"SEVERE\", 0);\n   public static final UtilLoggingLevel WARNING = new UtilLoggingLevel(WARNING_INT, \"WARNING\", 4);",
                "deletions": 8
            },
            {
                "sha": "68fa480e41b16664cf53cb4a24b39ed06573ff8c",
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java",
                "status": "modified",
                "changes": 164,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawAppenderHandler.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -54,20 +54,15 @@\n import org.apache.log4j.helpers.LogLog;\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.plugins.PluginRegistry;\n-import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.beans.PropertyChangeListener;\n import java.beans.PropertyChangeSupport;\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n import java.util.Vector;\n \n import javax.swing.event.EventListenerList;\n@@ -135,97 +130,6 @@ public boolean requiresLayout() {\n     return false;\n   }\n \n-  /**\n-   * Converts a LoggingEvent into a Vector of element (columns really).\n-   * @param event\n-   * @return\n-   *\n-   * @deprecated\n-   */\n-  public static Vector convert(LoggingEvent event) {\n-    Vector v = new Vector();\n-    LocationInfo info = event.getLocationInformation();\n-    String className = \"\";\n-    String methodName = \"\";\n-    String fileName = \"\";\n-    String lineNum = \"\";\n-\n-    if (info != null) {\n-      try {\n-        className = info.getClassName();\n-        methodName = info.getMethodName();\n-        fileName = info.getFileName();\n-        lineNum = info.getLineNumber();\n-      } catch (NullPointerException npe) {\n-      }\n-\n-      //ignore..malformed info\n-    }\n-\n-    StringBuffer MDC = new StringBuffer();\n-    Set mdc = event.getMDCKeySet();\n-    Iterator iter = mdc.iterator();\n-\n-    while (iter.hasNext()) {\n-      if (MDC.length() != 0) {\n-        MDC.append(\",\");\n-      }\n-\n-      String propName = (String) iter.next();\n-      MDC.append(propName);\n-      MDC.append(\"=\");\n-\n-      String propValue = (String) event.getMDC(propName);\n-      MDC.append(propValue);\n-    }\n-\n-    StringBuffer prop = new StringBuffer();\n-    Set properties = event.getPropertyKeySet();\n-\n-    if (properties != null) {\n-      Iterator iter2 = properties.iterator();\n-\n-      while (iter2.hasNext()) {\n-        if (prop.length() != 0) {\n-          prop.append(\",\");\n-        }\n-\n-        String propName = (String) iter2.next();\n-        prop.append(propName);\n-        prop.append(\"=\");\n-\n-        String propValue = (String) event.getProperty(propName);\n-        prop.append(propValue);\n-      }\n-    }\n-\n-    v.add(event.getLoggerName());\n-    v.add(new Date(event.timeStamp));\n-    v.add(event.getLevel().toString());\n-    v.add(event.getThreadName());\n-    v.add(event.getRenderedMessage());\n-    v.add(event.getNDC());\n-    v.add(MDC.toString());\n-\n-    StringBuffer exc = new StringBuffer();\n-    String[] excarray = event.getThrowableStrRep();\n-\n-    if (excarray != null) {\n-      for (int i = 0; i < excarray.length; i++) {\n-        exc.append(excarray[i]);\n-      }\n-    }\n-\n-    v.add(exc.toString());\n-    v.add(className);\n-    v.add(methodName);\n-    v.add(fileName);\n-    v.add(lineNum);\n-    v.add(prop.toString());\n-\n-    return v;\n-  }\n-\n   public int getQueueInterval() {\n     return sleepInterval;\n   }\n@@ -251,9 +155,10 @@ private static String getTabIdentifier(LoggingEvent e) {\n     String appname = e.getProperty(ChainsawConstants.LOG4J_APP_KEY);\n \n     if (appname != null) {\n-      if(ident.length()>0){\n-          ident.append(\"-\");\n+      if (ident.length() > 0) {\n+        ident.append(\"-\");\n       }\n+\n       ident.append(appname);\n     }\n \n@@ -378,21 +283,23 @@ public synchronized void removePropertyChangeListener(\n    */\n   class WorkQueue {\n     private final ArrayList queue = new ArrayList();\n-    private boolean stopped = false;\n+    Thread workerThread;\n \n     protected WorkQueue() {\n-      new WorkerThread().start();\n+      workerThread = new WorkerThread();\n+      workerThread.start();\n     }\n \n     public final void enqueue(LoggingEvent event) {\n       synchronized (mutex) {\n         queue.add(event);\n+        mutex.notify();\n       }\n     }\n \n     public final void stop() {\n       synchronized (mutex) {\n-        stopped = true;\n+        workerThread.interrupt();\n       }\n     }\n \n@@ -409,59 +316,64 @@ public WorkerThread() {\n       public void run() {\n         List innerList = new ArrayList();\n \n-        while (isAlive()) {\n+        while (true) {\n           long timeStart = System.currentTimeMillis();\n \n           synchronized (mutex) {\n-            if (stopped) {\n-              return;\n-            } else {\n+            try {\n+              while (queue.size() == 0) {\n+                mutex.wait();\n+              }\n+\n               if (queue.size() > 0) {\n                 innerList.addAll(queue);\n                 queue.clear();\n               }\n+            } catch (InterruptedException ie) {\n             }\n           }\n \n           int size = innerList.size();\n \n-          if (innerList.size() > 0) {\n+          if (size > 0) {\n             Iterator iter = innerList.iterator();\n-            Map identifiersEventsMap = new HashMap();\n             ChainsawEventBatch eventBatch = new ChainsawEventBatch();\n \n             while (iter.hasNext()) {\n               LoggingEvent e = (LoggingEvent) iter.next();\n-              String eventType =\n-                e.getProperty(ChainsawConstants.EVENT_TYPE_KEY);\n-\n-              if (eventType == null) {\n-                eventType = ChainsawConstants.LOG4J_EVENT_TYPE;\n+              Vector properties = new Vector();\n+              Iterator iterx = e.getPropertyKeySet().iterator();\n+              while (iterx.hasNext()) {\n+                  String thisProp = iterx.next().toString();\n+                  properties.add(thisProp +\" \" + e.getProperty(thisProp));\n               }\n-\n-              String ident = getTabIdentifier(e);\n-              eventBatch.addEvent(ident, eventType, e);\n+              eventBatch.addEvent(\n+                getTabIdentifier(e),\n+                (e.getProperty(ChainsawConstants.EVENT_TYPE_KEY) == null)\n+                ? ChainsawConstants.LOG4J_EVENT_TYPE\n+                : e.getProperty(ChainsawConstants.EVENT_TYPE_KEY), e);\n             }\n \n             dispatchEventBatch(eventBatch);\n \n             innerList.clear();\n           }\n \n-\n-\n           try {\n-            Thread.sleep(getQueueInterval());\n+            synchronized (this) {\n+              wait(getQueueInterval());\n+            }\n           } catch (InterruptedException ie) {\n           }\n-\t\t  if (size == 0) {\n-\t\t\tsetDataRate(0.0);\n-\t\t  } else {\n-\t\t\tlong timeEnd = System.currentTimeMillis();\n-\t\t\tlong diffInSeconds = (timeEnd - timeStart)/1000;\n-\t\t\tdouble rate = (((double) size) / diffInSeconds);\n-\t\t\tsetDataRate(rate);\n-\t\t  }\n+\n+          if (size == 0) {\n+            setDataRate(0.0);\n+          } else {\n+            long timeEnd = System.currentTimeMillis();\n+            long diffInSeconds = (timeEnd - timeStart) / 1000;\n+            double rate = (((double) size) / diffInSeconds);\n+            setDataRate(rate);\n+          }\n         }\n       }\n ",
                "deletions": 126
            },
            {
                "sha": "28676159ea623d5e8b908bb89a0a2967d57b20f0",
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java",
                "status": "modified",
                "changes": 34,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawCyclicBufferTableModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -90,9 +90,11 @@\n class ChainsawCyclicBufferTableModel extends AbstractTableModel\n   implements EventContainer, PropertyChangeListener {\n   private boolean cyclic = true;\n-  private final int INITIAL_CAPACITY = 5000;\n-  List unfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n-  List filteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+  private final int DEFAULT_CAPACITY = 5000;\n+  private int capacity = DEFAULT_CAPACITY;\n+  private static final String PANEL_CAPACITY = \"CHAINSAW_CAPACITY\";\n+  List unfilteredList = new CyclicBufferList(capacity);\n+  List filteredList = new CyclicBufferList(capacity);\n   private boolean currentSortAscending;\n   private int currentSortColumn;\n   private EventListenerList eventListenerList = new EventListenerList();\n@@ -115,6 +117,11 @@\n \n   public ChainsawCyclicBufferTableModel() {\n     propertySupport.addPropertyChangeListener(\"cyclic\", new ModelChanger());\n+    if (System.getProperty(PANEL_CAPACITY) != null) {\n+        try {\n+            capacity = Integer.parseInt(System.getProperty(PANEL_CAPACITY));\n+        } catch (NumberFormatException nfe) {}\n+    }\n   }\n \n   /**\n@@ -330,7 +337,10 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return null;\n     }\n \n-    LocationInfo info = event.getLocationInformation();\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n \n     if (event == null) {\n       LogLog.error(\"Invalid rowindex=\" + rowIndex);\n@@ -376,16 +386,16 @@ public Object getValueAt(int rowIndex, int columnIndex) {\n       return event.getThrowableStrRep();\n \n     case ChainsawColumns.INDEX_CLASS_COL_NAME:\n-      return (info != null) ? info.getClassName() : \"\";\n+      return (info == null) ?  \"\" : info.getClassName();\n \n     case ChainsawColumns.INDEX_FILE_COL_NAME:\n-      return (info != null) ? info.getFileName() : \"\";\n+      return (info == null) ? \"\" : info.getFileName();\n \n     case ChainsawColumns.INDEX_LINE_COL_NAME:\n-      return (info != null) ? info.getLineNumber() : \"\";\n+      return (info == null) ? \"\" : info.getLineNumber();\n \n     case ChainsawColumns.INDEX_METHOD_COL_NAME:\n-      return (info != null) ? info.getMethodName() : \"\";\n+      return (info == null) ? \"\" : info.getMethodName();\n \n     default:\n \n@@ -594,9 +604,9 @@ public synchronized void run() {\n         List newFilteredList = null;\n \n         if (isCyclic()) {\n-          newFilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+          newFilteredList = new CyclicBufferList(capacity);\n         } else {\n-          newFilteredList = new ArrayList(INITIAL_CAPACITY);\n+          newFilteredList = new ArrayList(capacity);\n         }\n \n         synchronized (unfilteredList) {\n@@ -669,9 +679,9 @@ public void run() {\n                   List newUnfilteredList = null;\n \n                   if (isCyclic()) {\n-                    newUnfilteredList = new CyclicBufferList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new CyclicBufferList(capacity);\n                   } else {\n-                    newUnfilteredList = new ArrayList(INITIAL_CAPACITY);\n+                    newUnfilteredList = new ArrayList(capacity);\n                   }\n \n                   for (Iterator iter = unfilteredList.iterator();",
                "deletions": 12
            },
            {
                "sha": "c547e618f66acc410860bd09f83ae3c86adbf331",
                "filename": "src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java",
                "status": "modified",
                "changes": 15,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ChainsawEventBatchEntry.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -57,9 +57,6 @@\n \n import org.apache.log4j.spi.LoggingEvent;\n \n-import java.util.Vector;\n-\n-\n /**\n  * A simple container of Events, mapped to an identifier\n  * @author Paul Smith <psmith@apache.org>\n@@ -82,18 +79,6 @@ String getEventType() {\n     return eventType;\n   }\n \n-  /**\n-   * @deprecated\n-   * @return\n-   */\n-  Vector getEventVector() {\n-    return ChainsawAppenderHandler.convert(getEvent());\n-//    throw new UnsupportedOperationException(\n-//      \"Transistion to non Vector based model\");\n-\n-    //    return eventVector;\n-  }\n-\n   public LoggingEvent getEvent() {\n     return event;\n   }",
                "deletions": 15
            },
            {
                "sha": "1dbfff8e88b3596d691f351eb9f3d53e9b218495",
                "filename": "src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ColumnComparator.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ColumnComparator.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -100,8 +100,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_METHOD_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getMethodName().compareToIgnoreCase(\n               e2.getLocationInformation().getMethodName());\n@@ -112,8 +112,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_CLASS_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getClassName().compareToIgnoreCase(\n               e2.getLocationInformation().getClassName());\n@@ -124,8 +124,8 @@ public int compare(Object o1, Object o2) {\n       case ChainsawColumns.INDEX_FILE_COL_NAME:\n \n         if (\n-          (e1.getLocationInformation() != null)\n-            & (e2.getLocationInformation() != null)) {\n+          (e1.locationInformationExists())\n+            & (e2.locationInformationExists())) {\n           sort =\n             e1.getLocationInformation().getFileName().compareToIgnoreCase(\n               e2.getLocationInformation().getFileName());",
                "deletions": 6
            },
            {
                "sha": "62aafa78233aa85807eecceed4be1690bbfa0d13",
                "filename": "src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/Details_XMLSocketReceiver.html?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -0,0 +1,21 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<html>\n+<Head><link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\"></head>\n+<body>\n+<B>XML Socket Receiver</b>\n+<p>XMLSocketReceiver compliments externally provided SocketAppenders. <br>\n+XMLSocketReceiver supports Log4J's log4j.dtd and Java 1.4's logger.dtd.<br>\n+However, only Log4J's log4j.dtd is currently supported when defining the receiver \n+through this panel.\n+</p>\n+\n+<p>XMLSocketReceiver listens\n+on a specified port, accepting connections from remote sockets\n+, converts the XML into logging events received from these sockets,\n+and posts them into Chainsaw's local Log4j environment allowing you \n+to view them.</p>\n+<p>Click here to see more information about XMLSocketReceiver.</p>\n+\n+<p>Click <a href=\"http://jakarta.apache.org/log4j/docs/api/org/apache/log4j/net/XMLSocketAppender.html\">here</a> to see more information about SocketAppender.</p>\n+</body>\n+</html>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "37086c8e2e93bbb0f1e7c5a11d513ec42f7af115",
                "filename": "src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/FileLoadAction.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/FileLoadAction.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -135,7 +135,7 @@ public void actionPerformed(ActionEvent e) {\n     chooser.setFileFilter(\n       new FileFilter() {\n         public boolean accept(File f) {\n-          return f.getName().toLowerCase().endsWith(\".xml\");\n+          return (f.getName().toLowerCase().endsWith(\".xml\")|| f.isDirectory());\n         }\n \n         public String getDescription() {",
                "deletions": 1
            },
            {
                "sha": "bf33ef9572dea15f1c6368cf70e49b7cd1bdb34a",
                "filename": "src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LogPanel.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/LogPanel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -253,7 +253,7 @@ public void propertyChange(PropertyChangeEvent evt) {\n           boolean newValue = ((Boolean) evt.getNewValue()).booleanValue();\n \n           if (newValue) {\n-            lowerPanel.setDividerLocation(150);\n+            lowerPanel.setDividerLocation(400);\n           }\n \n           detailPanel.setVisible(newValue);\n@@ -904,7 +904,7 @@ public void actionPerformed(ActionEvent e) {\n       new JSplitPane(\n         JSplitPane.VERTICAL_SPLIT, eventsAndStatusPanel, detailPanel);\n     lowerPanel.setBorder(null);\n-    lowerPanel.setDividerLocation(150);\n+    lowerPanel.setDividerLocation(400);\n     lowerPanel.setLastDividerLocation(-1);\n     lowerPanel.setOneTouchExpandable(true);\n ",
                "deletions": 2
            },
            {
                "sha": "829a32ec4f3bde1aa9df25a207ff78689e0c24e3",
                "filename": "src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/LoggingEventFieldResolver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -49,6 +49,7 @@\n \n package org.apache.log4j.chainsaw;\n \n+import org.apache.log4j.spi.LocationInfo;\n import org.apache.log4j.spi.LoggingEvent;\n \n import java.util.ArrayList;\n@@ -139,19 +140,22 @@ public boolean isField(String fieldName) {\n \n   public Object getValue(String fieldName, LoggingEvent event) {\n     String upperField = fieldName.toUpperCase();\n-\n+    LocationInfo info = null;\n+    if (event.locationInformationExists()) {\n+        info = event.getLocationInformation();\n+    }\n     if (LOGGER_FIELD.equals(upperField)) {\n       return event.getLoggerName();\n     } else if (LEVEL_FIELD.equals(upperField)) {\n       return event.getLevel();\n     } else if (CLASS_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getClassName();\n+      return ((info == null) ? \"\" : info.getClassName());\n     } else if (FILE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getFileName();\n+      return ((info == null) ? \"\" : info.getFileName());\n     } else if (LINE_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getLineNumber();\n+      return ((info == null) ? \"\" : info.getLineNumber());\n     } else if (METHOD_FIELD.equals(upperField)) {\n-      return event.getLocationInformation().getMethodName();\n+      return ((info == null) ? \"\" : info.getMethodName());\n     } else if (MSG_FIELD.equals(upperField)) {\n       return event.getMessage();\n     } else if (NDC_FIELD.equals(upperField)) {",
                "deletions": 5
            },
            {
                "sha": "babebf60856bf8c7577c3e7665515fd9f94045c4",
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ReceiversPanel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -123,6 +123,7 @@\n import org.apache.log4j.net.SocketReceiver;\n import org.apache.log4j.net.UDPAppender;\n import org.apache.log4j.net.UDPReceiver;\n+import org.apache.log4j.net.XMLSocketReceiver;\n import org.apache.log4j.plugins.Pauseable;\n import org.apache.log4j.plugins.PluginRegistry;\n import org.apache.log4j.plugins.Receiver;\n@@ -664,6 +665,13 @@ private List createSortedDialogMapEntryList() throws IOException {\n           new SimplePortBasedReceiverDialogPanel(\n             UDPReceiver.class, \"UDPReceiver\", UDPAppender.DEFAULT_PORT)));\n \n+        dialogMap.put(\n+          XMLSocketReceiver.class,\n+          new CreateReceiverDialog(\n+            XMLSocketReceiver.class, \"XMLSocketReceiver\", \"XML Socket Receiver (log4j.dtd)\",\n+            new SimplePortBasedReceiverDialogPanel(\n+              XMLSocketReceiver.class, \"XMLSocketReceiver\", XMLSocketReceiver.DEFAULT_PORT)));\n+\n       List dialogMapEntryList = new ArrayList();\n \n       for (Iterator iter = dialogMap.entrySet().iterator(); iter.hasNext();) {\n@@ -715,8 +723,10 @@ public void show(Component invoker, int x, int y) {\n \n       if (userObject == getRootOfTree().getUserObject()) {\n         buildForReceiversRoot();\n-      } else {\n+      } else if (getCurrentlySelectedReceiver() != null) {\n         buildForReceiverNode();\n+      } else {\n+          return;\n       }\n \n       this.invalidate();",
                "deletions": 1
            },
            {
                "sha": "f88a2a78610e003f4cf243a63489d3f7be84b5e9",
                "filename": "src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/ReceiversTreeModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -173,16 +173,18 @@ public void pluginStopped(PluginEvent e) {\n       Receiver receiver = (Receiver) e.getPlugin();\n       DefaultMutableTreeNode node =\n         (DefaultMutableTreeNode) resolvePluginNode(receiver);\n-      int index = getRootNode().getIndex(node);\n-      getRootNode().remove(node);\n-      nodesWereRemoved(\n-        getRootNode(), new int[] { index }, new Object[] { node });\n-      pluginNodeMap.remove(receiver);\n+        if (node != null) {\n+            int index = getRootNode().getIndex(node);\n+            getRootNode().remove(node);\n+            nodesWereRemoved(\n+                getRootNode(), new int[] { index }, new Object[] { node });\n+            pluginNodeMap.remove(receiver);\n+        }\n \n       if (getRootNode().getChildCount() == 0) {\n         getRootNode().add(NoReceiversNode);\n \n-        index = getRootNode().getIndex(NoReceiversNode);\n+        int index = getRootNode().getIndex(NoReceiversNode);\n         nodesWereInserted(getRootNode(), new int[] { index });\n       }\n     }",
                "deletions": 6
            },
            {
                "sha": "997f8872d87531036d1551332a790715502dacb5",
                "filename": "src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/filter/FilterModel.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -77,7 +77,7 @@ public void processNewLoggingEvent(String eventType, LoggingEvent event) {\n     container.addNDC(event.getNDC());\n     container.addMDCKeys(event.getMDCKeySet());\n \n-    if (event.getLocationInformation() != null) {\n+    if (event.locationInformationExists()) {\n       LocationInfo info = event.getLocationInformation();\n       container.addClass(info.getClassName());\n       container.addMethod(info.getMethodName());",
                "deletions": 1
            },
            {
                "sha": "f2b0ef7a78ce45a4fa50324352a9ba574b4e274c",
                "filename": "src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/layout/EventDetailLayout.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -219,7 +219,10 @@ private static LoggingEvent copyForHTML(LoggingEvent event) {\n     String ndc = event.getNDC();\n     Hashtable mdc = formatMDC(event);\n     String[] throwableStringRep = event.getThrowableStrRep();\n-    LocationInfo li = formatLocationInfo(event);\n+    LocationInfo li = null;\n+    if (event.locationInformationExists()) {\n+        formatLocationInfo(event);\n+    }\n     Hashtable properties = formatProperties(event);\n     LoggingEvent copy =\n       new LoggingEvent(",
                "deletions": 1
            },
            {
                "sha": "d644e7a47698e727994fdb5f40e4b23ed2d5c212",
                "filename": "src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/chainsaw/rule/RuleTest.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -233,6 +233,7 @@ public static void main(String[] args) {\n     String lastField = null;\n     JPopupMenu contextMenu = new JPopupMenu();\n     JList list = new JList();\n+ \n     JScrollPane scrollPane = new JScrollPane(list);\n     final JTextField textField;\n     private DefaultListModel fieldModel = new DefaultListModel();",
                "deletions": 0
            },
            {
                "sha": "ab467d6e92352409b4c291265c185613c866fdf8",
                "filename": "src/java/org/apache/log4j/net/MulticastAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastAppender.java",
                "status": "modified",
                "changes": 30,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/MulticastAppender.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -49,17 +49,16 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.AppenderSkeleton;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.InetAddress;\n import java.net.MulticastSocket;\n import java.net.UnknownHostException;\n \n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  *  Multicast-based Appender.  Works in conjunction with the MulticastReceiver, which expects\n@@ -109,6 +108,7 @@ InetAddress so that it can be returned via getOption().\n   int reconnectionDelay = DEFAULT_RECONNECTION_DELAY;\n   boolean locationInfo = false;\n   int count = 0;\n+  private String encoding;\n   \n   public MulticastAppender() {\n   }\n@@ -232,9 +232,13 @@ public void append(LoggingEvent event) {\n         if (buf.length() < PACKET_LENGTH) {\n           buf.append(new char[PACKET_LENGTH - buf.length()]);\n         }\n+        //the implementation of string.getBytes accepts a null encoding and uses the system charset\n         DatagramPacket dp =\n-          new DatagramPacket(buf.toString().getBytes(\"ASCII\"), buf.length(), address, port);\n+          new DatagramPacket(buf.toString().getBytes(encoding), buf.length(), address, port);\n         outSocket.send(dp);\n+        //remove these properties, in case other appenders need to set them to different values \n+        event.setProperty(\"log4jmachinename\", null);\n+        event.setProperty(\"log4japp\", null);\n       } catch (IOException e) {\n         outSocket = null;\n         LogLog.warn(\"Detected problem with Multicast connection: \" + e);\n@@ -277,6 +281,20 @@ public String getRemoteHost() {\n     return remoteHost;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified, \n+      the System encoding is used.\n+    */\n+   public void setEncoding(String encoding) {\n+     this.encoding = encoding;\n+   }\n+\n+   /**\n+      Returns value of the <b>Encoding</b> option.\n+    */\n+   public String getEncoding() {\n+     return encoding;\n+   }\n   /**\n      The <b>App</b> option takes a string value which should be the name of the application getting logged.\n      If property was already set (via system property), don't set here.",
                "deletions": 6
            },
            {
                "sha": "919f214c467ee036e54133e298c5625d0d5ecb83",
                "filename": "src/java/org/apache/log4j/net/MulticastReceiver.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastReceiver.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/MulticastReceiver.java",
                "status": "modified",
                "changes": 96,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/MulticastReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -51,6 +51,7 @@\n \n import org.apache.log4j.Decoder;\n import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n import org.apache.log4j.plugins.Receiver;\n import org.apache.log4j.spi.LoggingEvent;\n \n@@ -66,6 +67,7 @@\n import java.util.Iterator;\n import java.util.List;\n \n+\n /**\n  *  Multicast-based receiver.  Accepts LoggingEvents encoded using\n  *  MulticastAppender and XMLLayout. The the XML data is converted\n@@ -74,18 +76,22 @@\n  *  @author Scott Deboy <sdeboy@apache.org>\n  *\n  */\n-public class MulticastReceiver extends Receiver implements PortBased, AddressBased {\n+public class MulticastReceiver extends Receiver implements PortBased,\n+  AddressBased, Pauseable {\n   private static final int PACKET_LENGTH = 16384;\n   private boolean isActive = false;\n   private int port;\n   private String address;\n+  private String encoding;\n   private MulticastSocket socket = null;\n \n   //default to log4j xml decoder\n   private String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private Decoder decoderImpl;\n   private MulticastHandlerThread handlerThread;\n-  \n+  private MulticastReceiverThread receiverThread;\n+  private boolean paused;\n+\n   public String getDecoder() {\n     return decoder;\n   }\n@@ -106,19 +112,44 @@ public String getAddress() {\n     return address;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified,\n+      the system encoding will be used.\n+    */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   public synchronized void shutdown() {\n     isActive = false;\n+    handlerThread.interrupt();\n+    receiverThread.interrupt();\n     socket.close();\n   }\n \n   public void setAddress(String address) {\n     this.address = address;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   /**\n-    Sets the flag to indicate if receiver is active or not. */\n-  public synchronized void setActive(boolean isActive) {\n-    this.isActive = isActive;\n+    Returns true if this receiver is active. */\n+  public synchronized boolean isActive() {\n+    return isActive;\n   }\n \n   public void activateOptions() {\n@@ -132,11 +163,11 @@ public void activateOptions() {\n         this.decoderImpl = (Decoder) o;\n       }\n     } catch (ClassNotFoundException cnfe) {\n-    \tLogLog.warn(\"Unable to find decoder\", cnfe);\n+      LogLog.warn(\"Unable to find decoder\", cnfe);\n     } catch (IllegalAccessException iae) {\n-    \tLogLog.warn(\"Could not construct decoder\", iae);\n+      LogLog.warn(\"Could not construct decoder\", iae);\n     } catch (InstantiationException ie) {\n-    \tLogLog.warn(\"Could not construct decoder\", ie);\n+      LogLog.warn(\"Could not construct decoder\", ie);\n     }\n \n     try {\n@@ -146,12 +177,13 @@ public void activateOptions() {\n     }\n \n     try {\n+      isActive = true;\n       socket = new MulticastSocket(port);\n       socket.joinGroup(addr);\n-      new MulticastReceiverThread().start();\n+      receiverThread = new MulticastReceiverThread();\n+      receiverThread.start();\n       handlerThread = new MulticastHandlerThread();\n       handlerThread.start();\n-      setActive(true);\n     } catch (IOException ioe) {\n       ioe.printStackTrace();\n     }\n@@ -167,17 +199,25 @@ public MulticastHandlerThread() {\n     public void append(String data) {\n       synchronized (list) {\n         list.add(data);\n+        list.notify();\n       }\n     }\n \n-    public synchronized void run() {\n+    public void run() {\n       ArrayList list2 = new ArrayList();\n \n       while (isAlive()) {\n         synchronized (list) {\n-          if (list.size() > 0) {\n-            list2.addAll(list);\n-            list.clear();\n+          try {\n+            while (list.size() == 0) {\n+              list.wait();\n+            }\n+\n+            if (list.size() > 0) {\n+              list2.addAll(list);\n+              list.clear();\n+            }\n+          } catch (InterruptedException ie) {\n           }\n         }\n \n@@ -186,20 +226,25 @@ public synchronized void run() {\n \n           while (iter.hasNext()) {\n             String data = (String) iter.next();\n-\t\t\tList v= decoderImpl.decodeEvents(data);\n+            List v = decoderImpl.decodeEvents(data);\n \n             if (v != null) {\n               Iterator eventIter = v.iterator();\n+\n               while (eventIter.hasNext()) {\n-\t\t\t\tdoPost((LoggingEvent)eventIter.next());\n+                if (!isPaused()) {\n+                  doPost((LoggingEvent) eventIter.next());\n+                }\n               }\n             }\n           }\n \n           list2.clear();\n         } else {\n           try {\n-            wait(1000);\n+            synchronized (this) {\n+              wait(1000);\n+            }\n           } catch (InterruptedException ie) {\n           }\n         }\n@@ -213,7 +258,7 @@ public MulticastReceiverThread() {\n     }\n \n     public void run() {\n-      setActive(true);\n+      isActive = true;\n \n       byte[] b = new byte[PACKET_LENGTH];\n       DatagramPacket p = new DatagramPacket(b, b.length);\n@@ -222,14 +267,23 @@ public void run() {\n         try {\n           socket.receive(p);\n \n-          String data = new String(p.getData(), 0, p.getLength()).trim();\n-          handlerThread.append(data);\n+          //this string constructor which accepts a charset throws an exception if it is \n+          //null\n+            if (encoding == null) {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength()).trim());\n+          } else {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength(), encoding).trim());\n+          }\n         } catch (SocketException se) {\n-\t    \t//disconnected\n+          //disconnected\n         } catch (IOException ioe) {\n           ioe.printStackTrace();\n         }\n       }\n+\n+      LogLog.debug(MulticastReceiver.this.getName() + \"'s thread is ending.\");\n     }\n   }\n }",
                "deletions": 21
            },
            {
                "sha": "2ce3c6e35fbb22e5d9be20ffead9e3cb64f97f22",
                "filename": "src/java/org/apache/log4j/net/UDPAppender.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPAppender.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPAppender.java",
                "status": "modified",
                "changes": 31,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/UDPAppender.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -49,17 +49,16 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.AppenderSkeleton;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.DatagramSocket;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  * \n@@ -102,6 +101,7 @@ InetAddress so that it can be returned via getOption().\n   String localMachine;\n   String remoteHost;\n   String log4japp;\n+  String encoding;\n   String overrideProperties = \"true\";\n   InetAddress address;\n   int port = DEFAULT_PORT;\n@@ -243,9 +243,13 @@ public void append(LoggingEvent event) {\n         if (buf.length() < PACKET_LENGTH) {        \n            buf.append(new char[PACKET_LENGTH - buf.length()]);\n         }\n+        //the implementation of string.getBytes accepts a null encoding and uses the system charset\n         DatagramPacket dp =\n-           new DatagramPacket(buf.toString().getBytes(\"ASCII\"), buf.length(), address, port);\n+           new DatagramPacket(buf.toString().getBytes(encoding), buf.length(), address, port);\n         outSocket.send(dp);\n+        //remove these properties, in case other appenders need to set them to different values \n+        event.setProperty(\"log4jmachinename\", null);\n+        event.setProperty(\"log4japp\", null);\n       } catch (IOException e) {\n         outSocket = null;\n         LogLog.warn(\"Detected problem with UDP connection: \" + e);\n@@ -316,6 +320,21 @@ public String getLog4JApp() {\n     return log4japp;\n   }\n \n+  /**\n+     The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified, \n+     the System encoding is used.\n+   */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   /**\n      The <b>OverrideProperties</b> option allows configurations where the appender does not apply\n      the machinename/appname properties - the properties will be used as provided.",
                "deletions": 6
            },
            {
                "sha": "4e6210bf1e06776f9598f50c5fa20f95000aada7",
                "filename": "src/java/org/apache/log4j/net/UDPReceiver.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPReceiver.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/UDPReceiver.java",
                "status": "modified",
                "changes": 111,
                "additions": 78,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/UDPReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -49,21 +49,20 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.Decoder;\n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.plugins.Receiver;\n-import org.apache.log4j.spi.LoggingEvent;\n-\n import java.io.IOException;\n-\n import java.net.DatagramPacket;\n import java.net.DatagramSocket;\n import java.net.SocketException;\n-\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n \n+import org.apache.log4j.Decoder;\n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n+import org.apache.log4j.plugins.Receiver;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n  *  Receive LoggingEvents encoded with an XMLLayout, convert the XML data to a\n@@ -72,14 +71,15 @@\n  *  @author Scott Deboy <sdeboy@apache.org>\n  *\n  */\n-public class UDPReceiver extends Receiver implements PortBased{\n-  private UDPReceiverThread receiverThread;\n-\n+public class UDPReceiver extends Receiver implements PortBased, Pauseable {\n   private static final int PACKET_LENGTH = 16384;\n+  private UDPReceiverThread receiverThread;\n+  private String encoding;\n \n   //default to log4j xml decoder\n   private String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private Decoder decoderImpl;\n+  protected boolean paused;\n   private boolean isActive = false;\n   private int port;\n   private DatagramSocket socket;\n@@ -93,6 +93,21 @@ public void setPort(int port) {\n     this.port = port;\n   }\n \n+  /**\n+      The <b>Encoding</b> option specifies how the bytes are encoded.  If this option is not specified,\n+      the system encoding will be used.\n+    */\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n+\n+  /**\n+     Returns value of the <b>Encoding</b> option.\n+   */\n+  public String getEncoding() {\n+    return encoding;\n+  }\n+\n   public String getDecoder() {\n     return decoder;\n   }\n@@ -101,6 +116,14 @@ public void setDecoder(String decoder) {\n     this.decoder = decoder;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   public synchronized void shutdown() {\n     isActive = false;\n     handlerThread.interrupt();\n@@ -114,7 +137,6 @@ public synchronized boolean isActive() {\n     return isActive;\n   }\n \n-\n   public void activateOptions() {\n     try {\n       Class c = Class.forName(decoder);\n@@ -124,20 +146,20 @@ public void activateOptions() {\n         this.decoderImpl = (Decoder) o;\n       }\n     } catch (ClassNotFoundException cnfe) {\n-    \tLogLog.warn(\"Unable to find decoder\", cnfe);\n+      LogLog.warn(\"Unable to find decoder\", cnfe);\n     } catch (IllegalAccessException iae) {\n-    \tLogLog.warn(\"Could not construct decoder\", iae);\n+      LogLog.warn(\"Could not construct decoder\", iae);\n     } catch (InstantiationException ie) {\n-    \tLogLog.warn(\"Could not construct decoder\", ie);\n+      LogLog.warn(\"Could not construct decoder\", ie);\n     }\n \n     try {\n-      isActive=true;\n+      isActive = true;\n       socket = new DatagramSocket(port);\n       receiverThread = new UDPReceiverThread();\n       receiverThread.start();\n-\t  handlerThread = new UDPHandlerThread();\n-\t  handlerThread.start();\n+      handlerThread = new UDPHandlerThread();\n+      handlerThread.start();\n     } catch (IOException ioe) {\n       ioe.printStackTrace();\n     }\n@@ -153,17 +175,25 @@ public UDPHandlerThread() {\n     public void append(String data) {\n       synchronized (list) {\n         list.add(data);\n+        list.notify();\n       }\n     }\n \n-    public synchronized void run() {\n+    public void run() {\n       ArrayList list2 = new ArrayList();\n \n       while (isAlive() && isActive()) {\n         synchronized (list) {\n-          if (list.size() > 0) {\n-            list2.addAll(list);\n-            list.clear();\n+          try {\n+            while (list.size() == 0) {\n+              list.wait();\n+            }\n+\n+            if (list.size() > 0) {\n+              list2.addAll(list);\n+              list.clear();\n+            }\n+          } catch (InterruptedException ie) {\n           }\n         }\n \n@@ -172,28 +202,36 @@ public synchronized void run() {\n \n           while (iter.hasNext()) {\n             String data = (String) iter.next();\n-\t\t\tList v= decoderImpl.decodeEvents(data);\n+            List v = decoderImpl.decodeEvents(data);\n \n             if (v != null) {\n               Iterator eventIter = v.iterator();\n+\n               while (eventIter.hasNext()) {\n-\t\t\t\tdoPost((LoggingEvent)eventIter.next());;\n+                if (!isPaused()) {\n+                  doPost((LoggingEvent) eventIter.next());\n+                }\n               }\n             }\n           }\n \n           list2.clear();\n         } else {\n           try {\n-            wait(1000);\n+            synchronized (this) {\n+              wait(1000);\n+            }\n           } catch (InterruptedException ie) {\n+          }\n         }\n       }\n+\n+      if (!isActive()) {\n+        LogLog.debug(\n+          UDPReceiver.this.getName()\n+          + \"'s handler thread is exiting because of shutdown\");\n+      }\n     }\n-    if(!isActive()){\n-      LogLog.debug(UDPReceiver.this.getName() + \"'s handler thread is exiting because of shutdown\");\n-    }\n-  }\n   }\n \n   class UDPReceiverThread extends Thread {\n@@ -211,15 +249,22 @@ public void run() {\n         try {\n           socket.receive(p);\n \n-          String data = new String(p.getData(), 0, p.getLength()).trim();\n-          handlerThread.append(data);\n-        }\n-        catch (SocketException se) {\n-        \t//disconnected\n+          //this string constructor which accepts a charset throws an exception if it is \n+          //null\n+          if (encoding == null) {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength()).trim());\n+          } else {\n+            handlerThread.append(\n+              new String(p.getData(), 0, p.getLength(), encoding).trim());\n+          }\n+        } catch (SocketException se) {\n+          //disconnected\n         } catch (IOException ioe) {\n           ioe.printStackTrace();\n         }\n       }\n+\n       LogLog.debug(UDPReceiver.this.getName() + \"'s thread is ending.\");\n     }\n   }",
                "deletions": 33
            },
            {
                "sha": "7c157d72f0be3fc453f31ec780d1e23c613f4ef1",
                "filename": "src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/net/XMLSocketReceiver.java",
                "status": "modified",
                "changes": 135,
                "additions": 105,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/net/XMLSocketReceiver.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -49,17 +49,18 @@\n \n package org.apache.log4j.net;\n \n-import org.apache.log4j.helpers.LogLog;\n-import org.apache.log4j.plugins.Receiver;\n-import org.apache.log4j.plugins.Plugin;\n-import org.apache.log4j.spi.LoggerRepository;\n-\n import java.net.ServerSocket;\n import java.net.Socket;\n-\n import java.util.List;\n import java.util.Vector;\n \n+import org.apache.log4j.helpers.LogLog;\n+import org.apache.log4j.plugins.Pauseable;\n+import org.apache.log4j.plugins.Plugin;\n+import org.apache.log4j.plugins.Receiver;\n+import org.apache.log4j.spi.LoggerRepository;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n \n /**\n   XMLSocketReceiver receives a remote logging event via XML on a configured\n@@ -73,14 +74,17 @@ the XMLSocketAppender class (or classes that send compatible events).\n   @author Mark Womack\n   @since 1.3\n */\n-public class XMLSocketReceiver extends Receiver implements Runnable, PortBased {\n+public class XMLSocketReceiver extends Receiver implements Runnable, PortBased, Pauseable {\n   protected int port;\n   protected boolean active = false;\n-\n+  private boolean paused;\n+  private boolean shutdown;\n   //default to log4j xml decoder\n   protected String decoder = \"org.apache.log4j.xml.XMLDecoder\";\n   private ServerSocket serverSocket;\n   private List socketList = new Vector();\n+  private Thread rThread;\n+  public static int DEFAULT_PORT = 4448;\n \n   public XMLSocketReceiver() {\n   }\n@@ -114,6 +118,14 @@ public void setDecoder(String _decoder) {\n     decoder = _decoder;\n   }\n \n+  public boolean isPaused() {\n+    return paused;\n+  }\n+\n+  public void setPaused(boolean b) {\n+    paused = b;\n+  }\n+\n   /**\n    * Returns true if the receiver is the same class and they are\n    * configured for the same properties, and super class also considers\n@@ -150,7 +162,7 @@ public synchronized boolean isActive() {\n     Starts the SocketReceiver with the current options. */\n   public void activateOptions() {\n     if (!isActive()) {\n-      Thread rThread = new Thread(this);\n+      rThread = new Thread(this);\n       rThread.setDaemon(true);\n       rThread.start();\n       active = true;\n@@ -164,32 +176,82 @@ public synchronized void shutdown() {\n     // mark this as no longer running\n     active = false;\n \n-    // close the server socket\n-    try {\n-      if (serverSocket != null) {\n-        serverSocket.close();\n-      }\n-    } catch (Exception e) {\n-    \t//ignore for now\n+    if (rThread != null) {\n+      rThread.interrupt();\n+      rThread = null;\n     }\n+    doShutdown();\n+  }\n \n-    // close all of the accepted sockets\n-    for (int x = 0; x < socketList.size(); x++) {\n-      try {\n-        ((Socket) socketList.get(x)).close();\n-      } catch (Exception e) {\n-    \t//ignore for now\n-      }\n+    /**\n+     * Does the actual shutting down by closing the server socket\n+     * and any connected sockets that have been created.\n+     */\n+    private synchronized void doShutdown() {\n+      active = false;\n+\n+      LogLog.debug(getName() + \" doShutdown called\");\n+\n+      // close the server socket\n+      closeServerSocket();\n+\n+      // close all of the accepted sockets\n+      closeAllAcceptedSockets();\n+\n+      setShutdown(true);\n     }\n \n-    // clear member variables\n-    serverSocket = null;\n-    socketList.clear();\n-  }\n+    /**\n+     * @param b\n+     */\n+    private void setShutdown(boolean b) {\n+      shutdown = b;\n+    }\n+\n+\n+    /**\n+      * Closes the server socket, if created.\n+      */\n+     private void closeServerSocket() {\n+       LogLog.debug(getName() + \" closing server socket\");\n+\n+       try {\n+         if (serverSocket != null) {\n+           serverSocket.close();\n+         }\n+       } catch (Exception e) {\n+         // ignore for now\n+       }\n+\n+       serverSocket = null;\n+     }\n+\n+    /**\n+      * Closes all the connected sockets in the List.\n+      */\n+     private synchronized void closeAllAcceptedSockets() {\n+       for (int x = 0; x < socketList.size(); x++) {\n+         try {\n+           ((Socket) socketList.get(x)).close();\n+         } catch (Exception e) {\n+           // ignore for now\n+         }\n+       }\n+\n+       // clear member variables\n+       socketList.clear();\n+     }\n \n   /**\n     Loop, accepting new socket connections. */\n   public void run() {\n+      /**\n+        * Ensure we start fresh.\n+        */\n+    LogLog.debug(\"performing socket cleanup prior to entering loop for \" + name);\n+    closeServerSocket();\n+    closeAllAcceptedSockets();\n+    LogLog.debug(\"socket cleanup complete for \" + name);       \n     active = true;\n \n     // start the server socket\n@@ -200,15 +262,19 @@ public void run() {\n         \"error starting SocketReceiver (\" + this.getName()\n         + \"), receiver did not start\", e);\n       active = false;\n+      setShutdown(true);\n \n       return;\n     }\n \n+    Socket socket = null;\n+\n     try {\n-      Socket socket = null;\n       LogLog.debug(\"in run-about to enter while isactiveloop\");\n \n-      while (isActive()) {\n+      active = true;\n+\n+      while (!rThread.isInterrupted()) {\n         // if we have a socket, start watching it\n         if (socket != null) {\n           LogLog.debug(\"socket not null - creating and starting socketnode\");\n@@ -236,7 +302,16 @@ public void run() {\n         \"exception while watching socket server in SocketReceiver (\"\n         + this.getName() + \"), stopping\", e);\n     }\n+  }\n \n-    active = false;\n+  /* (non-Javadoc)\n+   * @see org.apache.log4j.plugins.Receiver#doPost(org.apache.log4j.spi.LoggingEvent)\n+   */\n+  public void doPost(LoggingEvent event) {\n+    if(!isPaused()){\n+      super.doPost(event);\n+    }\n   }\n+\n+\n }",
                "deletions": 30
            },
            {
                "sha": "b1420d2762320cfd19565105f89c3083b92ee6bb",
                "filename": "src/java/org/apache/log4j/spi/LocationInfo.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LocationInfo.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LocationInfo.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LocationInfo.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -214,7 +214,7 @@ public LocationInfo(Throwable t, String fqnOfCallingClass) {\n      logging request.\n   */\n   public String getClassName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (className == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -259,7 +259,7 @@ public String getClassName() {\n      <p>This information is not always available.\n   */\n   public String getFileName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (fileName == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -283,7 +283,7 @@ public String getFileName() {\n      <p>This information is not always available.\n   */\n   public String getLineNumber() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (lineNumber == null && fullInfo == null)) {\n       return NA;\n     }\n \n@@ -305,7 +305,7 @@ public String getLineNumber() {\n      Returns the method name of the caller.\n   */\n   public String getMethodName() {\n-    if (!locationInfoAvailable) {\n+    if ((!locationInfoAvailable) || (methodName == null && fullInfo == null)) {\n       return NA;\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "d15a769fed85011ddf9dfb53b3d43be7c7bc67f5",
                "filename": "src/java/org/apache/log4j/spi/LoggingEvent.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LoggingEvent.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/spi/LoggingEvent.java",
                "status": "modified",
                "changes": 15,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/spi/LoggingEvent.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -294,6 +294,14 @@ public LoggingEvent(\n     this.properties = properties;\n   }\n \n+  /**\n+   * Check for the existence of location information without creating it (a byproduct of calling\n+   * getLocationInformation).\n+   */\n+  public boolean locationInformationExists() {\n+    return (locationInfo != null);\n+  }\n+  \n   /**\n    * Set the location information for this logging event. The collected\n    * information is cached for future use.\n@@ -566,8 +574,11 @@ public void setProperty(String key, String value) {\n     if (properties == null) {\n       properties = new Hashtable(5); // create a small hashtable\n     }\n-\n-    properties.put(key, value);\n+    if (value != null) { \n+        properties.put(key, value);        \n+    } else {\n+        properties.remove(key);\n+    }\n   }\n \n   private void writeObject(ObjectOutputStream oos) throws java.io.IOException {",
                "deletions": 2
            },
            {
                "sha": "ab92d338eb4df5b33d6032f22766f8077b974e8e",
                "filename": "src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/UtilLoggingXMLDecoder.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -402,15 +402,17 @@ private Vector decodeEvents(Document document) {\n           properties.putAll(additionalProperties);\n         }\n       }\n-\n+      LocationInfo info = null;\n+      if ((fileName != null) || (className != null) || (methodName != null) || (lineNumber != null)) {\n+          info = new LocationInfo(fileName, className, methodName, lineNumber);\n+      } \n       events.add(\n         new LoggingEvent(\n           logger.getName(), logger, timeStamp, level, threadName, message, ndc,\n           mdc, exception,\n-          new LocationInfo(fileName, className, methodName, lineNumber),\n+          info,\n           properties));\n     }\n-\n     return events;\n   }\n ",
                "deletions": 3
            },
            {
                "sha": "73524fb934bc833978a13a21dbe078668f69c0b9",
                "filename": "src/java/org/apache/log4j/xml/XMLDecoder.java",
                "blob_url": "https://github.com/apache/log4j/blob/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "raw_url": "https://github.com/apache/log4j/raw/437a2a9f957072af18835320b886c5fa565ea8d7/src/java/org/apache/log4j/xml/XMLDecoder.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/log4j/contents/src/java/org/apache/log4j/xml/XMLDecoder.java?ref=437a2a9f957072af18835320b886c5fa565ea8d7",
                "patch": "@@ -237,7 +237,6 @@ public Vector decodeEvents(String document) {\n \t\t\tnewDoc=partialEvent + newDoc;\n \t\t}\t      \t\t\n       \tpartialEvent=newPartialEvent;\n-      \t\n         Document doc = parse(newDoc);\n         if (doc == null) {\n           return null;\n@@ -407,12 +406,15 @@ private Vector decodeEvents(Document document) {\n       if (levelImpl==null) {\n       \tlevelImpl=Level.toLevel(level);\n       }\n-      \t\t\n+      LocationInfo info = null;\n+      if ((fileName != null) || (className != null) || (methodName != null) || (lineNumber != null)) {\n+          info = new LocationInfo(fileName, className, methodName, lineNumber);\n+      } \n       events.add(\n         new LoggingEvent(\n           logger.getName(), logger, timeStamp, levelImpl, threadName, message, ndc,\n           mdc, exception,\n-          new LocationInfo(fileName, className, methodName, lineNumber),\n+          info,\n           properties));\n     }\n ",
                "deletions": 3
            }
        ]
    }
]