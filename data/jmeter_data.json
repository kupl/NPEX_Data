[
    {
        "repo": "jmeter",
        "message": "AbstractJMeterGuiComponent: Fix NPE in Nimbus LAF and add comment as per\nVladimir comment",
        "commit": "https://github.com/apache/jmeter/commit/560b5cab8dec47f4c4b41fe3a1bd2fe7aae72d19",
        "parent": "https://github.com/apache/jmeter/commit/cd521bdb2f224052ecb7e74c3a98c9bb7c7e5f4f",
        "bug_id": "jmeter_1",
        "file": [
            {
                "sha": "4c2b95d25ed7fd7b874f8255f1754e28d73d081e",
                "filename": "src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "blob_url": "https://github.com/apache/jmeter/blob/560b5cab8dec47f4c4b41fe3a1bd2fe7aae72d19/src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "raw_url": "https://github.com/apache/jmeter/raw/560b5cab8dec47f4c4b41fe3a1bd2fe7aae72d19/src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java?ref=560b5cab8dec47f4c4b41fe3a1bd2fe7aae72d19",
                "patch": "@@ -139,7 +139,11 @@ public void setEnabled(boolean enabled) {\n      */\n     @Override\n     public String getName() {\n-        return namePanel.getName(); // $NON-NLS-1$\n+        if (getNamePanel() != null) { // Check is mandatory because some LAFs (Nimbus) call getName() from \n+                                      // super constructor (so can happen before namePanel field is initialized\n+            return getNamePanel().getName();\n+        }\n+        return \"\"; // $NON-NLS-1$\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "ErrorMetric: test for nullity of responseMessage as it may be null\n\nThis resolves Bug 63906 - NPE for InfluxDB backend listener during\nfailover testing",
        "commit": "https://github.com/apache/jmeter/commit/d763e53d5c230502b65addb96b758460c8126280",
        "parent": "https://github.com/apache/jmeter/commit/d2224af264bb8fd941dd07f5a3628f446bb05bd3",
        "bug_id": "jmeter_2",
        "file": [
            {
                "sha": "48e02e8dacbdc44dc1d0881b39799a568260e7c5",
                "filename": "src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "patch": "@@ -68,7 +68,7 @@ public String getResponseCode() {\n      * @return the response message, 'none' if the code is empty\n      */\n     public String getResponseMessage() {\n-        if (responseMessage.isEmpty()) {\n+        if (responseMessage == null || responseMessage.isEmpty()) {\n             return \"None\";\n         } else {\n             return responseMessage.trim();",
                "deletions": 1
            },
            {
                "sha": "397a7b7387665c95b1f13b4f7a6535781ffd2afd",
                "filename": "src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d763e53d5c230502b65addb96b758460c8126280/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java?ref=d763e53d5c230502b65addb96b758460c8126280",
                "patch": "@@ -1582,7 +1582,7 @@ public void setIgnore() {\n     }\n \n     /**\n-     * @return String first non null assertion failure message\n+     * @return String first non null assertion failure message if assertionResults is not null, null otherwise\n      */\n     public String getFirstAssertionFailureMessage() {\n         String message = null;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63433 - ListenerNotifier: Detected problem in Listener NullPointerException if filename is null \nBugzilla Id: 63433\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1859277 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c63d8c15c0e1c1df4799af8941fd488c19cdcf98",
        "commit": "https://github.com/apache/jmeter/commit/3374f8302f1d487bf83311115da6b419cc38b8cb",
        "parent": "https://github.com/apache/jmeter/commit/79d0bc635f1ebbf4f4d2175bac0a15d274fc0a15",
        "bug_id": "jmeter_3",
        "file": [
            {
                "sha": "02ce8be0ec508bf4bfbed63a4682ac9bdd461e5d",
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "status": "modified",
                "changes": 30,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "patch": "@@ -61,6 +61,7 @@\n     \n     private static final String OK_CODE = Integer.toString(HttpURLConnection.HTTP_OK);\n     private static final String OK_MSG = \"OK\"; // $NON-NLS-1$\n+    private static final String INVALID_CALL_SEQUENCE_MSG = \"Invalid call sequence\"; // $NON-NLS-1$\n \n \n     // Bug 33196 - encoding ISO-8859-1 is only suitable for Western countries\n@@ -137,15 +138,17 @@\n     private static final long NANOTHREAD_SLEEP = \n             JMeterUtils.getPropDefault(\"sampleresult.nanoThreadSleep\", 5000);  // $NON-NLS-1$\n \n+    private static final String NULL_FILENAME = \"NULL\";\n+\n     static {\n         if (START_TIMESTAMP) {\n             log.info(\"Note: Sample TimeStamps are START times\");\n         } else {\n             log.info(\"Note: Sample TimeStamps are END times\");\n         }\n-        log.info(\"sampleresult.default.encoding is set to \" + DEFAULT_ENCODING);\n-        log.info(\"sampleresult.useNanoTime=\"+USE_NANO_TIME);\n-        log.info(\"sampleresult.nanoThreadSleep=\"+NANOTHREAD_SLEEP);\n+        log.info(\"sampleresult.default.encoding is set to {}\", DEFAULT_ENCODING);\n+        log.info(\"sampleresult.useNanoTime={}\", USE_NANO_TIME);\n+        log.info(\"sampleresult.nanoThreadSleep={}\", NANOTHREAD_SLEEP);\n \n         if (USE_NANO_TIME && NANOTHREAD_SLEEP > 0) {\n             // Make sure we start with a reasonable value\n@@ -455,7 +458,7 @@ private static long sampleNsClockInMs() {\n     public long currentTimeInMillis() {\n         if (useNanoTime){\n             if (nanoTimeOffset == Long.MIN_VALUE){\n-                throw new RuntimeException(\"Invalid call; nanoTimeOffset has not been set\");\n+                throw new IllegalStateException(\"Invalid call; nanoTimeOffset has not been set\");\n             }\n             return sampleNsClockInMs() + nanoTimeOffset;            \n         }\n@@ -488,7 +491,7 @@ private void stampAndTime(long stamp, long elapsed) {\n      */\n     public void setStampAndTime(long stamp, long elapsed) {\n         if (startTime != 0 || endTime != 0){\n-            throw new RuntimeException(\"Calling setStampAndTime() after start/end times have been set\");\n+            throw new IllegalStateException(\"Calling setStampAndTime() after start/end times have been set\");\n         }\n         stampAndTime(stamp, elapsed);\n     }\n@@ -500,7 +503,7 @@ public void setStampAndTime(long stamp, long elapsed) {\n      * @return <code>true</code> if the result was previously marked\n      */\n     public boolean markFile(String filename) {\n-        return !files.add(filename);\n+        return !files.add(filename != null ? filename : NULL_FILENAME);\n     }\n \n     public String getResponseCode() {\n@@ -642,10 +645,10 @@ public void addSubResult(SampleResult subResult, boolean renameSubResults) {\n         }\n         String tn = getThreadName();\n         if (tn.length()==0) {\n-            tn=Thread.currentThread().getName();//TODO do this more efficiently\n+            tn=Thread.currentThread().getName();\n             this.setThreadName(tn);\n         }\n-        subResult.setThreadName(tn); // TODO is this really necessary?\n+        subResult.setThreadName(tn);\n \n         // Extend the time to the end of the added sample\n         setEndTime(Math.max(getEndTime(), subResult.getEndTime() + nanoTimeOffset - subResult.nanoTimeOffset)); // Bug 51855\n@@ -1100,8 +1103,7 @@ public void setEndTime(long end) {\n             timeStamp = endTime;\n         }\n         if (startTime == 0) {\n-            log.error(\"setEndTime must be called after setStartTime\", new Throwable(\"Invalid call sequence\"));\n-            // TODO should this throw an error?\n+            log.error(\"setEndTime must be called after setStartTime\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         } else {\n             elapsedTime = endTime - startTime - idleTime;\n         }\n@@ -1129,7 +1131,7 @@ public void sampleStart() {\n         if (startTime == 0) {\n             setStartTime(currentTimeInMillis());\n         } else {\n-            log.error(\"sampleStart called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleStart called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n     }\n \n@@ -1141,7 +1143,7 @@ public void sampleEnd() {\n         if (endTime == 0) {\n             setEndTime(currentTimeInMillis());\n         } else {\n-            log.error(\"sampleEnd called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleEnd called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n     }\n \n@@ -1151,7 +1153,7 @@ public void sampleEnd() {\n      */\n     public void samplePause() {\n         if (pauseTime != 0) {\n-            log.error(\"samplePause called twice\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"samplePause called twice\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n         pauseTime = currentTimeInMillis();\n     }\n@@ -1162,7 +1164,7 @@ public void samplePause() {\n      */\n     public void sampleResume() {\n         if (pauseTime == 0) {\n-            log.error(\"sampleResume without samplePause\", new Throwable(\"Invalid call sequence\"));\n+            log.error(\"sampleResume without samplePause\", new Throwable(INVALID_CALL_SEQUENCE_MSG));\n         }\n         idleTime += currentTimeInMillis() - pauseTime;\n         pauseTime = 0;",
                "deletions": 14
            },
            {
                "sha": "84b5a328aa1d217daf38aacc743d67afdd9912eb",
                "filename": "test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/test/src/org/apache/jmeter/samplers/TestSampleResult.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/samplers/TestSampleResult.java?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "patch": "@@ -371,5 +371,16 @@ public void testCompareSampleLabels() {\n                 plan.setFunctionalMode(prevValue);\n             }\n         }\n+        \n+        @Test\n+        public void testBug63433() {\n+            SampleResult firstResult = new SampleResult();\n+            assertFalse(\"Expected false on first call of markFile\", firstResult.markFile(\"result.csv\"));\n+            assertTrue(\"Expected true on second call of markFile\", firstResult.markFile(\"result.csv\"));\n+\n+            SampleResult secondResult = new SampleResult();\n+            assertFalse(\"Expected false on first call of markFile with null\", secondResult.markFile(null));\n+            assertTrue(\"Expected true on second call of markFile with null\", secondResult.markFile(null));\n+        }\n }\n ",
                "deletions": 0
            },
            {
                "sha": "0f655efac9a22994ffbbf9a51069c67b8edda041",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/3374f8302f1d487bf83311115da6b419cc38b8cb/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/3374f8302f1d487bf83311115da6b419cc38b8cb/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=3374f8302f1d487bf83311115da6b419cc38b8cb",
                "patch": "@@ -148,6 +148,7 @@ to view the last major behaviors with the version 5.1.1.\n     <li><bug>63319</bug><code>ArrayIndexOutOfBoundsException</code> in Aggregate Graph when selecting 90&nbsp;% or 95&nbsp;% columns</li>\n     <li><bug>63423</bug>Selection of table rows in Aggregate Graph gets lost too often</li>\n     <li><bug>63347</bug>View result tree: The search field is so small that even a single character is not visible on Windows 7</li>\n+    <li><bug>63433</bug>ListenerNotifier: Detected problem in Listener NullPointerException if filename is null. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n </ul>\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63241 - __threadGroupName causes a NullPointerException if called from non Test threads\n\nAdd a test\nBugzilla Id: 63241\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1855128 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 350f6db68e1e7439068a4d3531ae9db2d4653d10",
        "commit": "https://github.com/apache/jmeter/commit/e7111c7210f94b14b6fd3730f4440016446b6809",
        "parent": "https://github.com/apache/jmeter/commit/9a0e28e169cd9e0d3d02d2f541215ec364204463",
        "bug_id": "jmeter_4",
        "file": [
            {
                "sha": "9d6b04a48482e8192cd184c0c09b64d8a80fe7bd",
                "filename": "test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e7111c7210f94b14b6fd3730f4440016446b6809/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e7111c7210f94b14b6fd3730f4440016446b6809/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java?ref=e7111c7210f94b14b6fd3730f4440016446b6809",
                "patch": "@@ -190,6 +190,20 @@ public void testThreadGroupName() throws Exception {\n             FileServer.getFileServer().setScriptName(null);\n         }\n     }\n+    \n+    @Test\n+    public void testThreadGroupNameBug63241() throws Exception {\n+        AbstractFunctionByKey function = new ThreadGroupName();\n+        try {\n+            HTTPSamplerProxy httpRequest = new HTTPSamplerProxy();\n+            JMeterContext context = JMeterContextService.getContext();\n+            context.setCurrentSampler(httpRequest);\n+            String ret = function.execute(result, httpRequest);\n+            assertEquals(\"\", ret);\n+        } finally {\n+            FileServer.getFileServer().setScriptName(null);\n+        }\n+    }\n \n     @Test\n     public void testThreadGroupNameParameterCount() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63241 - __threadGroupName causes a NullPointerException if called from non Test threads\nBugzilla Id: 63241\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1855127 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ad2f5a824783db92b91322499046032d3d6302a9",
        "commit": "https://github.com/apache/jmeter/commit/9a0e28e169cd9e0d3d02d2f541215ec364204463",
        "parent": "https://github.com/apache/jmeter/commit/053dc645ace561d12787dd6a8c4b0794a2977e7c",
        "bug_id": "jmeter_5",
        "file": [
            {
                "sha": "c3b7861e167e450f86a0bf4bff23dde41b59c4ba",
                "filename": "src/functions/org/apache/jmeter/functions/ThreadGroupName.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9a0e28e169cd9e0d3d02d2f541215ec364204463/src/functions/org/apache/jmeter/functions/ThreadGroupName.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9a0e28e169cd9e0d3d02d2f541215ec364204463/src/functions/org/apache/jmeter/functions/ThreadGroupName.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/ThreadGroupName.java?ref=9a0e28e169cd9e0d3d02d2f541215ec364204463",
                "patch": "@@ -23,6 +23,7 @@\n \n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.AbstractThreadGroup;\n import org.apache.jmeter.threads.JMeterContext;\n import org.apache.jmeter.threads.JMeterContextService;\n \n@@ -51,7 +52,13 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw\n         } else {\n             context = JMeterContextService.getContext();\n         }\n-        return context.getThreadGroup().getName();\n+        AbstractThreadGroup threadGroup = context.getThreadGroup();\n+        if (threadGroup != null) {\n+            return threadGroup.getName();\n+        } else {\n+            // Can happen if called from GUI or from non test threads\n+            return \"\";\n+        }\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "f0ce189f88f4a76690f932a307e4e0d9f10b3a0a",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/9a0e28e169cd9e0d3d02d2f541215ec364204463/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/9a0e28e169cd9e0d3d02d2f541215ec364204463/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9a0e28e169cd9e0d3d02d2f541215ec364204463",
                "patch": "@@ -154,6 +154,7 @@ Summary\n \n <h3>Functions</h3>\n <ul>\n+    <li><bug>63241</bug><code>__threadGroupName</code> causes a NullPointerException if called from non Test threads</li>\n </ul>\n \n <h3>I18N</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63207 - java.lang.NullPointerException: null when run Jmeter 5.1 with proxy options\nBugzilla Id: 63207\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1854317 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: be3271fbce14f9bc6b901d7cb557d73919e7d208",
        "commit": "https://github.com/apache/jmeter/commit/b3d143263d6a216b43bf9c0cea702385db7af216",
        "parent": "https://github.com/apache/jmeter/commit/f6e5146c6bea249b69e13811557d39bad6481c0d",
        "bug_id": "jmeter_6",
        "file": [
            {
                "sha": "cf693b83860db3b6444e965d2e88879bd2fbafb0",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b3d143263d6a216b43bf9c0cea702385db7af216/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b3d143263d6a216b43bf9c0cea702385db7af216/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=b3d143263d6a216b43bf9c0cea702385db7af216",
                "patch": "@@ -760,11 +760,16 @@ private void setProxy(CLArgsParser parser) throws IllegalUserActionException {\n             System.setProperty(\"https.proxyHost\", h);// $NON-NLS-1$\n             System.setProperty(\"http.proxyPort\",  p);// $NON-NLS-1$\n             System.setProperty(\"https.proxyPort\", p);// $NON-NLS-1$\n-            String proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();\n-            if(!StringUtils.isBlank(proxyScheme)){\n-                System.setProperty(\"http.proxyScheme\",  proxyScheme );// $NON-NLS-1$\n+            String proxyScheme = null;\n+            if (parser.getArgumentById(PROXY_SCHEME) != null) {\n+                proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();\n+                if(!StringUtils.isBlank(proxyScheme)){\n+                    System.setProperty(\"http.proxyScheme\",  proxyScheme );// $NON-NLS-1$\n+                }\n+            }\n+            if(log.isInfoEnabled()) {\n+                log.info(\"Set proxy Host: {}, Port: {}, Scheme: {}\", h, p, proxyScheme != null ? proxyScheme : \"Not set\");\n             }\n-            log.info(\"Set scheme: {} proxyHost: {} Port: {}\", proxyScheme, h, p);\n         } else if (parser.getArgumentById(PROXY_HOST) != null || parser.getArgumentById(PROXY_PORT) != null) {\n             throw new IllegalUserActionException(JMeterUtils.getResString(\"proxy_cl_error\"));// $NON-NLS-1$\n         }",
                "deletions": 4
            },
            {
                "sha": "beffaa9651192d032216e894205de9014354e183",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b3d143263d6a216b43bf9c0cea702385db7af216/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b3d143263d6a216b43bf9c0cea702385db7af216/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b3d143263d6a216b43bf9c0cea702385db7af216",
                "patch": "@@ -163,6 +163,7 @@ Summary\n <h3>General</h3>\n <ul>\n     <li><bug>63201</bug>SearchTreeDialog disappears behind master JFrame. Contributed by Benoit Vatan (benoit.vatan at gmail.com)</li>\n+    <li><bug>63207</bug>java.lang.NullPointerException: null when run Jmeter 5.1 with proxy options</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62672 - HTTP Request send double requests when configure proxy with authentication\n\nFix NPE\nBugzilla Id: 62672\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1860065 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b0fe4cdcb2a0485abb539973fce2db1aabfd53b5",
        "commit": "https://github.com/apache/jmeter/commit/f9eff90317ab5876f6bbde9fde853584bc6875bc",
        "parent": "https://github.com/apache/jmeter/commit/18c6c45a7a28b5a8328be5699101773953b7ffe6",
        "bug_id": "jmeter_7",
        "file": [
            {
                "sha": "843c47112d585ee0c6182ac389f6356d22c515fa",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f9eff90317ab5876f6bbde9fde853584bc6875bc/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 54,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=f9eff90317ab5876f6bbde9fde853584bc6875bc",
                "patch": "@@ -180,7 +180,10 @@\n     \n     static final String CONTEXT_ATTRIBUTE_SAMPLER_RESULT = \"__jmeter.S_R__\"; //$NON-NLS-1$\n     \n-    private static final String CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN = \"__jmeter.H_T__\";\n+    /**\n+     * Holds data used by HTTP request if Embedded resource download is enabled\n+     */\n+    private static final String CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE = \"__jmeter.H_T__\";\n \n     private static final String CONTEXT_ATTRIBUTE_CLIENT_KEY = \"__jmeter.C_K__\";\n \n@@ -548,13 +551,8 @@ protected HTTPSampleResult sample(URL url, String method,\n         HttpClientKey key = createHttpClientKey(url);\n         MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple;\n         try {\n-            httpClient = setupClient(key, jMeterVariables, clientContext);\n-            // Cache triple for further use\n-            Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> \n-                mapHttpClientPerHttpClientKey =\n-                    HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n-            triple =\n-                    mapHttpClientPerHttpClientKey.get(key);\n+            triple = setupClient(key, jMeterVariables, clientContext);\n+            httpClient = triple.getLeft();\n             URI uri = url.toURI();\n             httpRequest = createHttpRequest(uri, method, areFollowingRedirect);\n             setupRequest(url, httpRequest, res); // can throw IOException\n@@ -695,7 +693,7 @@ protected HTTPSampleResult sample(URL url, String method,\n         } finally {\n             JOrphanUtils.closeQuietly(httpResponse);\n             currentRequest = null;\n-            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n         }\n         return res;\n     }\n@@ -708,21 +706,19 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        if (triple != null) {\n-            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n-        }\n+        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n     }\n \n     /**\n      * Store in localContext Proxy auth state of triple \n-     * @param triple {@link MutableTriple}\n+     * @param triple {@link MutableTriple} May be null if first request\n      * @param localContext {@link HttpContext}\n      */\n-    private void setupProxyAuth(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n+    private void setupProxyAuthState(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n                                 HttpContext localContext) {\n         if (triple != null) {\n-            AuthState proxy = triple.getMiddle();\n-            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxy);\n+            AuthState proxyAuthState = triple.getMiddle();\n+            localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxyAuthState);\n         }\n     }\n \n@@ -993,22 +989,27 @@ public String toString() {\n         }\n     }\n \n-    private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n+    private MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> setupClient(HttpClientKey key, JMeterVariables jMeterVariables,\n             HttpClientContext clientContext) throws GeneralSecurityException {\n         Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey =\n                 HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();\n         clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY, key);\n         CloseableHttpClient httpClient = null;\n+        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = null;\n         boolean concurrentDwn = this.testElement.isConcurrentDwn();\n+        Map<String, Object> samplerContext = JMeterContextService.getContext().getSamplerContext();\n         if(concurrentDwn) {\n-            httpClient = (CloseableHttpClient) JMeterContextService.getContext().getSamplerContext().get(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN);\n+            triple = (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>) \n+                    samplerContext.get(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);\n+        }\n+        if (triple == null) {\n+            triple = mapHttpClientPerHttpClientKey.get(key);\n         }\n-        MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = \n-                mapHttpClientPerHttpClientKey.get(key);\n-        if (httpClient == null) {\n-            httpClient = triple != null ? triple.getLeft() : null;\n+        \n+        if(triple != null) {\n+            httpClient = triple.getLeft();\n         }\n-        setupProxyAuth(triple, clientContext);\n+        setupProxyAuthState(triple, clientContext);\n         resetStateIfNeeded(triple, jMeterVariables, clientContext, mapHttpClientPerHttpClientKey);\n \n         if (httpClient == null) { // One-time init for this client\n@@ -1096,17 +1097,18 @@ private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMete\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Created new HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)), key);\n             }\n-            mapHttpClientPerHttpClientKey.put(key, MutableTriple.of(httpClient, null, pHCCM)); // save the agent for next time round\n+            triple = MutableTriple.of(httpClient, null, pHCCM);\n+            mapHttpClientPerHttpClientKey.put(key, triple); // save the agent for next time round\n         } else {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Reusing the HttpClient: @{} {}\", Integer.valueOf(System.identityHashCode(httpClient)),key);\n             }\n         }\n \n         if(concurrentDwn) {\n-            JMeterContextService.getContext().getSamplerContext().put(CONTEXT_ATTRIBUTE_HTTPCLIENT_TOKEN, httpClient);\n+            samplerContext.put(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE, triple);\n         }\n-        return httpClient;\n+        return triple;\n     }\n \n     protected AuthenticationStrategy getProxyAuthStrategy() {",
                "deletions": 26
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE on saving proxy auth state\n\nRelates to #397\nBugzilla Id: 62672\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1859989 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4b801c8a6c6b8ec912cdccb409757caaac7c9803",
        "commit": "https://github.com/apache/jmeter/commit/188a6f2f376582fe93900dfb19d3a7dbcf868a53",
        "parent": "https://github.com/apache/jmeter/commit/497140d7e0eb663f5d2dbfd436043279a2190592",
        "bug_id": "jmeter_8",
        "file": [
            {
                "sha": "4f732fdfdcb533cad9c8382674289d5c1f2de452",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/188a6f2f376582fe93900dfb19d3a7dbcf868a53/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=188a6f2f376582fe93900dfb19d3a7dbcf868a53",
                "patch": "@@ -708,7 +708,9 @@ protected HTTPSampleResult sample(URL url, String method,\n     private void saveProxyAuth(\n             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,\n             HttpContext localContext) {\n-        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        if (triple != null) {\n+            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));\n+        }\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63241 - __threadGroupName causes a NullPointerException if called from non Test threads\n\nMake test hypothesis clear to avoid failures when tests run in parallel\nBugzilla Id: 63241\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1855129 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: df50e3d09a97cca97279431361d1128065352516",
        "commit": "https://github.com/apache/jmeter/commit/2593ee76cedf9a79b9a607008700aa1c31145daf",
        "parent": "https://github.com/apache/jmeter/commit/e7111c7210f94b14b6fd3730f4440016446b6809",
        "bug_id": "jmeter_9",
        "file": [
            {
                "sha": "30f1e95ec24b7a0b3bc0afcfa192c15e535245b3",
                "filename": "test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2593ee76cedf9a79b9a607008700aa1c31145daf/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2593ee76cedf9a79b9a607008700aa1c31145daf/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestSimpleFunctions.java?ref=2593ee76cedf9a79b9a607008700aa1c31145daf",
                "patch": "@@ -197,6 +197,8 @@ public void testThreadGroupNameBug63241() throws Exception {\n         try {\n             HTTPSamplerProxy httpRequest = new HTTPSamplerProxy();\n             JMeterContext context = JMeterContextService.getContext();\n+            // This is the state when called from a non test thread\n+            context.setThreadGroup(null);\n             context.setCurrentSampler(httpRequest);\n             String ret = function.execute(result, httpRequest);\n             assertEquals(\"\", ret);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Little optimization : Avoid NullPointerException by testing for nullity.\nCaller catches NPE and selects NullProperty so no regression will happen\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1335251 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 69c1bb8d0f2c090ef929bdba407e76e1de372985",
        "commit": "https://github.com/apache/jmeter/commit/6e9bac2b016e6b5113e41cf8de5c19866e1a7475",
        "parent": "https://github.com/apache/jmeter/commit/b5a24ad75da7f1e4df1be0734d3a9d37106c4868",
        "bug_id": "jmeter_10",
        "file": [
            {
                "sha": "d56fcb26ba1293d4b5731b1db1dc222cdac06a3c",
                "filename": "src/core/org/apache/jmeter/testelement/property/CollectionProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/6e9bac2b016e6b5113e41cf8de5c19866e1a7475/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/6e9bac2b016e6b5113e41cf8de5c19866e1a7475/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java?ref=6e9bac2b016e6b5113e41cf8de5c19866e1a7475",
                "patch": "@@ -184,7 +184,7 @@ public void addItem(Object item) {\n      */\n     @Override\n     protected Class<? extends JMeterProperty> getPropertyType() {\n-        if (value.size() > 0) {\n+        if (value != null && value.size() > 0) {\n             return value.iterator().next().getClass();\n         }\n         return NullProperty.class;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62900 - ObjectProperty#getStringValue() can throw NullPointerException\nTake into account Felix's note\nBugzilla Id: 62900\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1846345 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ae5b292bf6fb031ab83de6d53397917f2328a1f7",
        "commit": "https://github.com/apache/jmeter/commit/333887011c9b9ece114e3bca7c6965fb9ba198dc",
        "parent": "https://github.com/apache/jmeter/commit/78bc7e854bf9b8235acb316ccd8710d6762095a2",
        "bug_id": "jmeter_11",
        "file": [
            {
                "sha": "f49841cfdae3f948ca4417a671a6dda717163fd3",
                "filename": "src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/333887011c9b9ece114e3bca7c6965fb9ba198dc/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/333887011c9b9ece114e3bca7c6965fb9ba198dc/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java?ref=333887011c9b9ece114e3bca7c6965fb9ba198dc",
                "patch": "@@ -21,6 +21,8 @@\n  */\n package org.apache.jmeter.testelement.property;\n \n+import java.util.Objects;\n+\n import org.apache.jmeter.testelement.TestElement;\n \n public class ObjectProperty extends AbstractProperty {\n@@ -101,11 +103,7 @@ public ObjectProperty(String name, Object p) {\n      */\n     @Override\n     public String getStringValue() {\n-        if(value != null) {\n-            return value.toString();\n-        } else {\n-            return null;\n-        }\n+        return Objects.toString(value, null);\n     }\n \n     /**",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62900 - ObjectProperty#getStringValue() can throw NullPointerException\nBugzilla Id: 62900\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1846297 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4f29360a588f1ead02226840f07d7a1e979f7425",
        "commit": "https://github.com/apache/jmeter/commit/4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f",
        "parent": "https://github.com/apache/jmeter/commit/7cf60aadf152b641d05fa1f674fd88ac37db61a4",
        "bug_id": "jmeter_12",
        "file": [
            {
                "sha": "7880dffe7d76a463703cbf352ee3cb85613f2930",
                "filename": "src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/ObjectProperty.java?ref=4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f",
                "patch": "@@ -101,7 +101,11 @@ public ObjectProperty(String name, Object p) {\n      */\n     @Override\n     public String getStringValue() {\n-        return value.toString();\n+        if(value != null) {\n+            return value.toString();\n+        } else {\n+            return null;\n+        }\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "0e7a89c0083be8b4c63ff6e07e518151c6f84eb2",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=4435b47ccf46d5c0b9d816cb4539baad4d4d2e7f",
                "patch": "@@ -197,6 +197,7 @@ of previous time slot as a base. Starting with this version, each time slot is i\n     <li><bug>62795</bug>JMeter master sometimes ends distributed test even though some of the slaves have not finished</li>\n     <li><bug>62336</bug><pr>396</pr>Some shortcuts are not working correctly on windows. Contributed by Michael Pavlov (michael.paulau at gmail.com)</li>\n     <li><bug>62889</bug>Format JSON Arrays when displayed with JSON Path Tester.</li>\n+    <li><bug>62900</bug>ObjectProperty#getStringValue() can throw NullPointerException</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 63185 - Add option to implicitly trust SSL/TLS connections/Disable hostname verification\n\nBased on contribution by Brian Wolfe\nChanges:\n\n- Fixed existing NPE if log level is DEBUG if attr is null \n- Fixed some SONAR warning\n- Simplified code\n- Modified TrustAllSocketFactory (renamed and fixed static attribute sf affectation from Constructor)\n\n\nThis closes #443\nBugzilla Id: 63185\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1854570 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 54eeb6d6a3733e493cba56e06639d72a882cdf50",
        "commit": "https://github.com/apache/jmeter/commit/13890bcedf3591734fd6feaed3a2865232bc0437",
        "parent": "https://github.com/apache/jmeter/commit/105188971bb2b96e5f39f0b0baeca02ac39d15d4",
        "bug_id": "jmeter_13",
        "file": [
            {
                "sha": "8f0b6e473325fff760eb1ba92404bfb3ea5d9c20",
                "filename": "src/core/org/apache/jmeter/resources/messages.properties",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages.properties",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/resources/messages.properties?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -625,6 +625,7 @@ ldap_search_baseobject=Perform baseobject search\n ldap_search_onelevel=Perform onelevel search\n ldap_search_subtree=Perform subtree search\n ldap_secure=Use Secure LDAP Protocol ?\n+ldap_trust_all=Trust All Certificates ?\n ldap_testing_title=LDAP Request\n ldapext_sample_title=LDAP Extended Request Defaults\n ldapext_testing_title=LDAP Extended Request",
                "deletions": 0
            },
            {
                "sha": "54648141dffd8b75321052c60722a93593abfed5",
                "filename": "src/core/org/apache/jmeter/resources/messages_es.properties",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_es.properties",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_es.properties",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/resources/messages_es.properties?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -406,7 +406,8 @@ ldap_sample_title=Valores por defecto Petici\u00f3n LDAP\n ldap_search_baseobject=Realizar la b\u00fasqueda 'baseobject'\n ldap_search_onelevel=Realizar la b\u00fasqueda 'onelevel'\n ldap_search_subtree=Realizar la b\u00fasqueda 'subtree'\n-ldap_secure=\u00bfUsar el Protocolo LDAP Seguro?\n+ldap_secure=Usar el Protocolo LDAP Seguro?\n+ldap_trust_all=Conf\u00ede en todos los certificados?\n ldap_testing_title=Petici\u00f3n LDAP\n ldapext_sample_title=Valores por defecto Petici\u00f3n Extendidad LDAP\n ldapext_testing_title=Petici\u00f3n Extendida LDAP",
                "deletions": 1
            },
            {
                "sha": "28283448c2bc2e7c9e61699a19b678d5ece0190d",
                "filename": "src/core/org/apache/jmeter/resources/messages_fr.properties",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_fr.properties",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_fr.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/resources/messages_fr.properties?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -614,6 +614,7 @@ ldap_search_baseobject=Effectuer une recherche 'baseobject'\n ldap_search_onelevel=Effectuer une recherche 'onelevel'\n ldap_search_subtree=Effectuer une recherche 'subtree'\n ldap_secure=Utiliser le protocole LDAP s\u00e9curis\u00e9 (ldaps) ?\n+ldap_trust_all=Faire confiance \u00e0 tous les certificats ?\n ldap_testing_title=Requ\u00eate LDAP\n ldapext_sample_title=Requ\u00eate LDAP \u00e9tendue par d\u00e9faut\n ldapext_testing_title=Requ\u00eate LDAP \u00e9tendue",
                "deletions": 0
            },
            {
                "sha": "b9cd38ce8249cd708cc49cf27030821763daf73c",
                "filename": "src/core/org/apache/jmeter/resources/messages_pt_BR.properties",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_pt_BR.properties",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_pt_BR.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/resources/messages_pt_BR.properties?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -384,6 +384,7 @@ ldap_search_baseobject=Realizar busca b\u00e1sica de objetos\n ldap_search_onelevel=Realizar busca de um n\u00edvel\n ldap_search_subtree=Realizar busca em sub-\u00e1rvore\n ldap_secure=Utilizar Protocolo LDAP Seguro?\n+ldap_trust_all=Trust Todos os Certificados ?\n ldap_testing_title=Requisi\u00e7\u00e3o LDAP\n ldapext_sample_title=Padr\u00f5es de Requisi\u00e7\u00e3o LDAP Estendidas\n ldapext_testing_title=Requisi\u00e7\u00e3o LDAP Estendida",
                "deletions": 0
            },
            {
                "sha": "32d5bf424c01ec6b5d8b0f507c463a453ee20fc9",
                "filename": "src/core/org/apache/jmeter/resources/messages_tr.properties",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_tr.properties",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/core/org/apache/jmeter/resources/messages_tr.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/resources/messages_tr.properties?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -365,6 +365,7 @@ ldap_search_baseobject=Temel-nesne aramas\u0131 ger\u00e7ekle\u015ftir\n ldap_search_onelevel=Tek-seviye aramas\u0131 ger\u00e7ekle\u015ftir\n ldap_search_subtree=Alt-a\u011fa\u00e7 aramas\u0131 ger\u00e7ekle\u015ftir\n ldap_secure=G\u00fcvenli LDAP Protokulu kullan ?\n+ldap_trust_all=T\u00fcm Sertifikalara G\u00fcven?\n ldap_testing_title=LDAP \u0130ste\u011fi\n ldapext_sample_title=LDAP Geli\u015fmi\u015f \u0130ste\u011fi \u00d6ntan\u0131ml\u0131 De\u011ferleri\n ldapext_testing_title=LDAP Geli\u015fmi\u015f \u0130ste\u011fi",
                "deletions": 0
            },
            {
                "sha": "1246c4f9e27645e9a3c3a7c0ee51b3c812bec8f0",
                "filename": "src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -132,6 +132,8 @@\n     private JCheckBox parseflag = new JCheckBox(JMeterUtils.getResString(\"ldap_parse_results\")); // $NON-NLS-1$\n \n     private JCheckBox secure = new JCheckBox(JMeterUtils.getResString(\"ldap_secure\")); // $NON-NLS-1$\n+    \n+    private JCheckBox trustAll = new JCheckBox(JMeterUtils.getResString(\"ldap_trust_all\")); // $NON-NLS-1$\n \n     private JRadioButton addTest = new JRadioButton(JMeterUtils.getResString(\"addtest\")); // $NON-NLS-1$\n \n@@ -208,6 +210,7 @@ public void configure(TestElement element) {\n         connto.setText(element.getPropertyAsString(LDAPExtSampler.CONNTO));\n         parseflag.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.PARSEFLAG));\n         secure.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.SECURE));\n+        trustAll.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.TRUSTALL));\n         userpw.setText(element.getPropertyAsString(LDAPExtSampler.USERPW));\n         userdn.setText(element.getPropertyAsString(LDAPExtSampler.USERDN));\n         comparedn.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREDN));\n@@ -274,15 +277,16 @@ public void modifyTestElement(TestElement element) {\n         element.setProperty(LDAPExtSampler.SERVERNAME, servername.getText());\n         element.setProperty(LDAPExtSampler.PORT, port.getText());\n         element.setProperty(LDAPExtSampler.ROOTDN, rootdn.getText());\n-        element.setProperty(LDAPExtSampler.SCOPE,String.valueOf(scope.getSelectedIndex()));\n+        element.setProperty(LDAPExtSampler.SCOPE, String.valueOf(scope.getSelectedIndex()));\n         element.setProperty(LDAPExtSampler.COUNTLIM, countlim.getText());\n         element.setProperty(LDAPExtSampler.TIMELIM, timelim.getText());\n         element.setProperty(LDAPExtSampler.ATTRIBS, attribs.getText());\n-        element.setProperty(LDAPExtSampler.RETOBJ,Boolean.toString(retobj.isSelected()));\n-        element.setProperty(LDAPExtSampler.DEREF,Boolean.toString(deref.isSelected()));\n+        element.setProperty(LDAPExtSampler.RETOBJ, Boolean.toString(retobj.isSelected()));\n+        element.setProperty(LDAPExtSampler.DEREF, Boolean.toString(deref.isSelected()));\n         element.setProperty(LDAPExtSampler.CONNTO, connto.getText());\n-        element.setProperty(LDAPExtSampler.PARSEFLAG,Boolean.toString(parseflag.isSelected()));\n-        element.setProperty(LDAPExtSampler.SECURE,Boolean.toString(secure.isSelected()));\n+        element.setProperty(LDAPExtSampler.PARSEFLAG, Boolean.toString(parseflag.isSelected()));\n+        element.setProperty(LDAPExtSampler.SECURE, Boolean.toString(secure.isSelected()));\n+        element.setProperty(LDAPExtSampler.TRUSTALL, Boolean.toString(trustAll.isSelected()));\n         element.setProperty(LDAPExtSampler.USERDN, userdn.getText());\n         element.setProperty(LDAPExtSampler.USERPW, userpw.getText());\n         element.setProperty(LDAPExtSampler.COMPAREDN, comparedn.getText());\n@@ -357,6 +361,7 @@ public void clearGui() {\n         deref.setSelected(false);\n         parseflag.setSelected(false);\n         secure.setSelected(false);\n+        trustAll.setSelected(false);\n         addTest.setSelected(false);\n         modifyTest.setSelected(false);\n         deleteTest.setSelected(false);\n@@ -413,6 +418,7 @@ private JPanel createBindPanel() {\n         bindPanel.add(createLabelPanel(\"ldap_connto\", connto));\n \n         bindPanel.add(secure);\n+        bindPanel.add(trustAll);\n         return bindPanel;\n     }\n ",
                "deletions": 5
            },
            {
                "sha": "4b3b5f2195cd46a354f077b303ea688413f05c42",
                "filename": "src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java",
                "status": "modified",
                "changes": 66,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -39,6 +39,7 @@\n import javax.naming.directory.ModificationItem;\n import javax.naming.directory.SearchResult;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.text.StringEscapeUtils;\n import org.apache.jmeter.config.Argument;\n import org.apache.jmeter.config.Arguments;\n@@ -85,6 +86,8 @@\n     public static final String PORT = \"port\"; // $NON-NLS-1$\n \n     public static final String SECURE = \"secure\"; // $NON-NLS-1$\n+    \n+    public static final String TRUSTALL = \"trustall\";\n \n     public static final String ROOTDN = \"rootdn\"; // $NON-NLS-1$\n \n@@ -157,10 +160,8 @@\n     private static final int MAX_SORTED_RESULTS =\n         JMeterUtils.getPropDefault(\"ldapsampler.max_sorted_results\", 1000); // $NON-NLS-1$\n \n-    /***************************************************************************\n-     * !ToDo (Constructor description)\n-     **************************************************************************/\n     public LDAPExtSampler() {\n+        super();\n     }\n \n     public void setConnTimeOut(String connto) {\n@@ -178,6 +179,14 @@ public void setSecure(String sec) {\n     public boolean isSecure() {\n         return getPropertyAsBoolean(SECURE);\n     }\n+    \n+    public void setTrustAll(String trust){\n+        setProperty(new StringProperty(TRUSTALL, trust));\n+    }\n+    \n+    public boolean isTrustAll() {\n+        return getPropertyAsBoolean(TRUSTALL);\n+    }\n \n \n     public boolean isParseFlag() {\n@@ -541,25 +550,25 @@ private Attributes getUserAttributes() {\n             } else if(\"replace\".equals(opcode)) { // $NON-NLS-1$\n                     mods[count++] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, attr);\n             } else {\n-                    log.warn(\"Invalid opCode: \"+opcode);\n+                    log.warn(\"Invalid opCode: {}\", opcode);\n             }\n         }\n         return mods;\n     }\n \n-    /***************************************************************************\n+    /**\n      * Collect all the value from the table (Arguments), using this create the\n      * Attributes This will create the Basic Attributes for the User defined\n      * TestCase for search test\n      *\n-     * @return The BasicAttributes\n-     **************************************************************************/\n+     * @return The BasicAttributes (null means all)\n+     **/\n     private String[] getRequestAttributes(String reqAttr) {\n         int index;\n         String[] mods;\n         int count = 0;\n         if (reqAttr.length() == 0) {\n-            return null;\n+            return null; // NOSONAR null means all , empty array means nothing\n         }\n         if (!reqAttr.endsWith(SEMI_COLON)) {\n             reqAttr = reqAttr + SEMI_COLON;\n@@ -660,7 +669,8 @@ private void bindOp(SampleResult res) throws NamingException {\n         }\n         try {\n             res.sampleStart();\n-            ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(),getConnTimeOut(),isSecure());\n+            ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(),\n+                    getUserPw(),getConnTimeOut(),isSecure(), isTrustAll());\n         } finally {\n             res.sampleEnd();\n         }\n@@ -674,7 +684,8 @@ private void bindOp(SampleResult res) throws NamingException {\n     private void singleBindOp(SampleResult res) throws NamingException {\n         try {\n             res.sampleStart();\n-            DirContext ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(),getConnTimeOut(),isSecure());\n+            DirContext ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), \n+                    getUserDN(), getUserPw(),getConnTimeOut(),isSecure(), isTrustAll());\n             LdapExtClient.disconnect(ctx);\n         } finally {\n             res.sampleEnd();\n@@ -727,7 +738,7 @@ public SampleResult sample(Entry e) {\n             xmlBuffer.openTag(\"operation\"); // $NON-NLS-1$\n             final String testType = getTest();\n             xmlBuffer.tag(\"opertype\", testType); // $NON-NLS-1$\n-            log.debug(\"performing test: \" + testType);\n+            log.debug(\"performing test: {}\", testType);\n             if (testType.equals(UNBIND)) {\n                 res.setSamplerData(\"Unbind\");\n                 xmlBuffer.tag(\"baseobj\",getRootdn()); // $NON-NLS-1$\n@@ -836,8 +847,11 @@ public SampleResult sample(Entry e) {\n             String returnData = ex.toString();\n             final int indexOfLDAPErrCode = returnData.indexOf(\"LDAP: error code\");\n             if (indexOfLDAPErrCode >= 0) {\n+                // FIXME What is 21 ?\n                 res.setResponseMessage(returnData.substring(indexOfLDAPErrCode + 21, returnData\n                         .indexOf(']'))); // $NON-NLS-1$\n+                // 17 is \"LDAP: error code\".length\n+                // Code is on 2 characters ?\n                 res.setResponseCode(returnData.substring(indexOfLDAPErrCode + 17, indexOfLDAPErrCode + 19));\n             } else {\n                 res.setResponseMessage(returnData);\n@@ -901,16 +915,15 @@ private void writeSearchResult(final SearchResult sr, final XMLBuffer xmlb)\n     {\n         final Attributes attrs = sr.getAttributes();\n         final int size = attrs.size();\n-        final ArrayList<Attribute> sortedAttrs = new ArrayList<>(size);\n+        final List<Attribute> sortedAttrs = new ArrayList<>(size);\n \n         xmlb.openTag(\"searchresult\"); // $NON-NLS-1$\n         xmlb.tag(\"dn\", sr.getName()); // $NON-NLS-1$\n         xmlb.tag(\"returnedattr\",Integer.toString(size)); // $NON-NLS-1$\n         xmlb.openTag(\"attributes\"); // $NON-NLS-1$\n \n         try {\n-            for (NamingEnumeration<? extends Attribute> en = attrs.getAll(); en.hasMore();)\n-            {\n+            for (NamingEnumeration<? extends Attribute> en = attrs.getAll(); en.hasMore();) {\n                 final Attribute attr = en.next();\n                 sortedAttrs.add(attr);\n             }\n@@ -921,25 +934,13 @@ private void writeSearchResult(final SearchResult sr, final XMLBuffer xmlb)\n                     sb.append(getWriteValue(attr.get()));\n                 } else {\n                     final ArrayList<String> sortedVals = new ArrayList<>(attr.size());\n-                    boolean first = true;\n \n-                    for (NamingEnumeration<?> ven = attr.getAll(); ven.hasMore();)\n-                    {\n+                    for (NamingEnumeration<?> ven = attr.getAll(); ven.hasMore();) {\n                         final Object value = getWriteValue(ven.next());\n                         sortedVals.add(value.toString());\n                     }\n-\n                     Collections.sort(sortedVals);\n-\n-                    for (final String value : sortedVals)\n-                    {\n-                        if (first) {\n-                            first = false;\n-                        } else {\n-                            sb.append(\", \"); // $NON-NLS-1$\n-                        }\n-                        sb.append(value);\n-                    }\n+                    sb.append(StringUtils.join(sortedVals, \", \"));\n                 }\n                 xmlb.tag(attr.getID(),sb);\n             }\n@@ -997,15 +998,13 @@ private String normaliseSearchDN(final SearchResult sr, final String searchBase,\n     {\n         String srName = sr.getName();\n \n-        if (!srName.endsWith(searchBase))\n-        {\n+        if (!srName.endsWith(searchBase)) {\n             if (srName.length() > 0) {\n                 srName = srName + ',';\n             }\n             srName = srName + searchBase;\n         }\n-        if ((rootDn.length() > 0) && !srName.endsWith(rootDn))\n-        {\n+        if ((rootDn.length() > 0) && !srName.endsWith(rootDn)) {\n             if (srName.length() > 0) {\n                 srName = srName + ',';\n             }\n@@ -1015,8 +1014,7 @@ private String normaliseSearchDN(final SearchResult sr, final String searchBase,\n         return srName;\n     }\n \n-    private String getWriteValue(final Object value)\n-    {\n+    private String getWriteValue(final Object value) {\n         if (value instanceof String) {\n             // assume it's sensitive data\n             return StringEscapeUtils.escapeXml10((String)value);",
                "deletions": 34
            },
            {
                "sha": "2dac59ee46c59996871468583e1aaf575008b713",
                "filename": "src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java",
                "status": "modified",
                "changes": 66,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -30,21 +30,16 @@\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n \n-import org.apache.jmeter.util.JMeterUtils;\n+import org.apache.jorphan.util.JOrphanUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/*******************************************************************************\n- *\n+/**\n  * Ldap Client class is main class to create ,modify, search and delete all the\n  * LDAP functionality available\n- *\n- * author Dolf Smits(Dolf.Smits@Siemens.com) created Aug 09 2003 11:00 AM\n- * company Siemens Netherlands N.V..\n- *\n  * Based on the work of: author T.Elanjchezhiyan(chezhiyan@siptech.co.in)\n  *\n- ******************************************************************************/\n+ */\n public class LdapExtClient {\n     private static final Logger log = LoggerFactory.getLogger(LdapExtClient.class);\n \n@@ -53,7 +48,8 @@\n     /**\n      * Constructor for the LdapClient object\n      */\n-    public LdapExtClient() {\n+    private LdapExtClient() {\n+        super();\n     }\n \n     /**\n@@ -78,14 +74,25 @@ public LdapExtClient() {\n      * @exception NamingException\n      *                when creating the {@link DirContext} fails\n      */\n-    public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, boolean secure)\n+    public static DirContext connect(String host,\n+            String port, \n+            String rootdn, \n+            String username,\n+            String password, \n+            String connTimeOut, \n+            boolean secure, \n+            boolean trustAll)\n             throws NamingException {\n         DirContext dirContext;\n-        Hashtable<String, String> env = new Hashtable<>();\n+        Hashtable<String, String> env = new Hashtable<>(); // NOSONAR : Env needs to be HashTable\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\"); // $NON-NLS-1$\n         StringBuilder sb = new StringBuilder(80);\n         if (secure) {\n             sb.append(\"ldaps://\"); // $NON-NLS-1$\n+            if (trustAll){\n+                log.debug(\"Using secure connection with trustAll\");\n+                env.put(\"java.naming.ldap.factory.socket\", TrustAllSocketFactory.class.getName());\n+            }\n         } else {\n             sb.append(\"ldap://\"); // $NON-NLS-1$\n         }\n@@ -97,7 +104,9 @@ public static DirContext connect(String host, String port, String rootdn, String\n         sb.append(\"/\"); // $NON-NLS-1$\n         sb.append(rootdn);\n         env.put(Context.PROVIDER_URL,sb.toString());\n-        log.info(\"prov_url= \" + env.get(Context.PROVIDER_URL)); // $NON-NLS-1$\n+        if(log.isInfoEnabled()) {\n+            log.info(\"prov_url= {}\", env.get(Context.PROVIDER_URL)); // $NON-NLS-1$\n+        }\n         if (connTimeOut.length()> 0) {\n             env.put(\"com.sun.jndi.ldap.connect.timeout\", connTimeOut); // $NON-NLS-1$\n         }\n@@ -128,7 +137,7 @@ public static void disconnect(DirContext dirContext) {\n         }\n     }\n \n-    /***************************************************************************\n+    /**\n      * Filter the data in the ldap directory for the given search base\n      * \n      * @param dirContext\n@@ -158,23 +167,24 @@ public static void disconnect(DirContext dirContext) {\n      * @return result of the search\n      * @throws NamingException\n      *             when searching fails\n-     **************************************************************************/\n-    public static NamingEnumeration<SearchResult> searchTest(DirContext dirContext, String searchBase, String searchFilter, int scope, long countlim,\n-            int timelim, String[] attrs, boolean retobj, boolean deref) throws NamingException {\n+     **/\n+    public static NamingEnumeration<SearchResult> searchTest(  \n+            DirContext dirContext, \n+            String searchBase, \n+            String searchFilter, \n+            int scope, \n+            long countlim,\n+            int timelim, \n+            String[] attrs, \n+            boolean retobj, \n+            boolean deref) throws NamingException {\n         if (dirContext == null) {\n             throw new NamingException(CONTEXT_IS_NULL);\n         }\n         if (log.isDebugEnabled()){\n             log.debug(\n-                    \"searchBase=\" + searchBase +\n-                    \" scope=\" + scope +\n-                    \" countlim=\" + countlim +\n-                    \" timelim=\" + timelim +\n-                    \" attrs=\" + JMeterUtils.unsplit(attrs,\",\") +\n-                    \" retobj=\" + retobj +\n-                    \" deref=\" + deref +\n-                    \" filter=\" + searchFilter\n-                      );\n+                    \"searchBase={}, scope={}, countlim={}, timelim={}, attrs={}, retobj={}, deref={}, filter={}\",\n+                    searchBase,scope, countlim,timelim, attrs != null ? JOrphanUtils.unsplit(attrs,\",\"): null,retobj,deref,searchFilter);\n         }\n         SearchControls searchcontrols = new SearchControls(scope, countlim,\n                 timelim, attrs, retobj, deref);\n@@ -216,7 +226,7 @@ public static void disconnect(DirContext dirContext) {\n      *\n      **************************************************************************/\n     public static void moddnOp(DirContext dirContext, String ddn, String newdn) throws NamingException {\n-        log.debug(\"ddn and newDn= \" + ddn + \"@@@@\" + newdn);\n+        log.debug(\"ddn and newDn= {}@@@@{}\", ddn , newdn);\n         if (dirContext == null) {\n             throw new NamingException(CONTEXT_IS_NULL);\n         }\n@@ -265,7 +275,7 @@ public static DirContext createTest(DirContext dirContext, Attributes attributes\n         return dirContext.createSubcontext(string, attributes);\n     }\n \n-    /***************************************************************************\n+    /**\n      * Delete the attribute from the ldap directory\n      *\n      * @param dirContext\n@@ -274,7 +284,7 @@ public static DirContext createTest(DirContext dirContext, Attributes attributes\n      *            distinguished name of the subcontext to destroy\n      * @throws NamingException\n      *             when destroying the subcontext fails\n-     **************************************************************************/\n+     */\n     public static void deleteTest(DirContext dirContext, String string) throws NamingException {\n         if (dirContext == null) {\n             throw new NamingException(CONTEXT_IS_NULL);",
                "deletions": 28
            },
            {
                "sha": "724e5a4446c5cfae5d4ac90859083c0a4f2e62a5",
                "filename": "src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocketFactory.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocketFactory.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocketFactory.java",
                "status": "added",
                "changes": 124,
                "additions": 124,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/TrustAllSocketFactory.java?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.jmeter.protocol.ldap.sampler;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509ExtendedTrustManager;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TrustAllSocketFactory extends SocketFactory {\n+    private static final AtomicReference<TrustAllSocketFactory> defaultFactory = new AtomicReference<>();\n+\n+    private static final Logger log = LoggerFactory.getLogger(TrustAllSocketFactory.class);\n+\n+    public TrustAllSocketFactory() throws NoSuchAlgorithmException, KeyManagementException {\n+        TrustManager[] trustAllCerts = new TrustManager[] {\n+                new X509ExtendedTrustManager() {\n+                    @Override\n+                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n+                        return new java.security.cert.X509Certificate[0];\n+                    }\n+                    @Override\n+                    public void checkClientTrusted(X509Certificate[] certs, String authType) {\n+                        // NOOP\n+                    }\n+                    @Override\n+                    public void checkServerTrusted(X509Certificate[] certs, String authType) {\n+                        // NOOP\n+                    }\n+                    @Override\n+                    public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n+                        throws CertificateException {\n+                        // NOOP\n+                    }\n+                    @Override\n+                    public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n+                        throws CertificateException {\n+                        // NOOP\n+                    }\n+                    @Override\n+                    public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n+                        throws CertificateException {\n+                        // NOOP\n+                    }\n+                    @Override\n+                    public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n+                        throws CertificateException {\n+                        // NOOP\n+                    }\n+                }\n+        };\n+\n+        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n+        ctx.init(null, trustAllCerts, new java.security.SecureRandom());\n+    }\n+\n+    public static SocketFactory getDefault() {\n+        final TrustAllSocketFactory value = defaultFactory.get();\n+        if (value == null) {\n+            try {\n+                defaultFactory.compareAndSet(null, new TrustAllSocketFactory());\n+            } catch (KeyManagementException e) {\n+                log.error(\"KeyManagementException: {}\", e.getLocalizedMessage());\n+            } catch (NoSuchAlgorithmException e) {\n+                log.error(\"NoSuchAlgorithmException: {}\", e.getLocalizedMessage());\n+            }\n+            return defaultFactory.get();\n+        }\n+        return value;\n+    }\n+    @Override\n+    public Socket createSocket() throws IOException{\n+        return getDefault().createSocket();\n+    }\n+\n+    @Override\n+    public Socket createSocket(final String host, final int port) throws IOException {\n+        return getDefault().createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(final String host, final int port, final InetAddress localHost, final int localPort) throws IOException {\n+        return getDefault().createSocket(host, port, localHost, localPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(final InetAddress localHost, final int localPort) throws IOException {\n+        return getDefault().createSocket(localHost, localPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(final InetAddress address, final int port, final InetAddress localHost, final int localPort) \n+            throws IOException {\n+        return getDefault().createSocket(address, port, localHost, localPort);\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "d5916cb435309af498aa9df1b525abd1524113cf",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -80,6 +80,7 @@ Summary\n \n <h3>Other samplers</h3>\n <ul>\n+    <li><bug>63185</bug>Add option to implicitly trust SSL/TLS connections/Disable hostname verification. Based on contribution by Brian Wolfe (wolfebrian2120 at gmail.com)</li>\n </ul>\n \n <h3>Controllers</h3>\n@@ -178,6 +179,7 @@ Summary\n     <li><a href=\"https://ubikloadpack.com\">Ubik Load Pack</a></li>\n     <li>Benoit Vatan (benoit.vatan at gmail.com)</li>\n     <li>Graham Russell (graham at ham1.co.uk)</li>\n+    <li>Brian Wolfe (wolfebrian2120 at gmail.com)</li>\n </ul>\n <p>We also thank bug reporters who helped us improve JMeter.</p>\n <ul>",
                "deletions": 0
            },
            {
                "sha": "765d7f783ca52cf6d7227d09dafcbf4b8884d079",
                "filename": "xdocs/usermanual/build-ldapext-test-plan.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/usermanual/build-ldapext-test-plan.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/usermanual/build-ldapext-test-plan.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/usermanual/build-ldapext-test-plan.xml?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -185,6 +185,9 @@ When this field is kept empty, an anonymous bind will be established.\n <li>\n <i>(Optional)</i> Check the box Use Secure LDAP Protocol if you access with LDAP over SSL (ldaps)\n </li>\n+<li>\n+<i>(Optional)</i> Check the box TrustAll if you want the client to trust all certificates\n+</li>\n </ol>\n </p>\n <p>",
                "deletions": 0
            },
            {
                "sha": "d631036523baadba893a1411b778d580016466ab",
                "filename": "xdocs/usermanual/component_reference.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/usermanual/component_reference.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/13890bcedf3591734fd6feaed3a2865232bc0437/xdocs/usermanual/component_reference.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/usermanual/component_reference.xml?ref=13890bcedf3591734fd6feaed3a2865232bc0437",
                "patch": "@@ -800,6 +800,9 @@ This will not have any impact on existing Test plans.\n           <property name=\"Username\" required=\"No\">Full distinguished name of the user as which you want to bind.</property>\n           <property name=\"Password\" required=\"No\">Password for the above user. If omitted it will result in an anonymous bind.\n             If it is incorrect, the sampler will return an error and revert to an anonymous bind. (N.B. this is stored unencrypted in the test plan)</property>\n+          <property name=\"Connection timeout (in milliseconds)\" required=\"No\">Timeout for connection, if exceeded connection will be aborted</property>\n+          <property name=\"Use Secure LDAP Protocol\" required=\"No\">Use <code>ldaps://</code> scheme instead of <code>ldap://</code></property>\n+          <property name=\"Trust All Certificates\" required=\"No\">Trust all certificates, only used if <code>Use Secure LDAP Protocol</code> is checked</property>\n         </properties>\n       </dd>\n       <dt><b>Thread unbind</b></dt>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62767 - NPE when searching under certain conditions\nContributed by UbikLoadPack\nBugzilla Id: 62767\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1842124 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d53f6da0fcfcf438b84ab402b96bfc89bdae8aa7",
        "commit": "https://github.com/apache/jmeter/commit/cc50fc5b847a394774ffc41fd1688add1c1e8abe",
        "parent": "https://github.com/apache/jmeter/commit/20321b68b4de26d1ff37627be0f7b92f7c3447fe",
        "bug_id": "jmeter_14",
        "file": [
            {
                "sha": "e47aa93c9109167a2e9508c5635ecea2e8951ca5",
                "filename": "src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cc50fc5b847a394774ffc41fd1688add1c1e8abe/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cc50fc5b847a394774ffc41fd1688add1c1e8abe/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "status": "modified",
                "changes": 20,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java?ref=cc50fc5b847a394774ffc41fd1688add1c1e8abe",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n \n import javax.swing.ImageIcon;\n@@ -47,7 +48,7 @@\n     private static final int TEST_PLAN_LEVEL = 1;\n \n     // See Bug 54648\n-    private transient JMeterTreeModel treeModel;\n+    private transient Optional<JMeterTreeModel> treeModel;\n \n     private boolean markedBySearch;\n \n@@ -61,7 +62,7 @@ public JMeterTreeNode() {// Allow serializable test to work\n \n     public JMeterTreeNode(TestElement userObj, JMeterTreeModel treeModel) {\n         super(userObj);\n-        this.treeModel = treeModel;\n+        this.treeModel = Optional.ofNullable(treeModel);\n     }\n \n     public boolean isEnabled() {\n@@ -70,19 +71,19 @@ public boolean isEnabled() {\n \n     public void setEnabled(boolean enabled) {\n         getTestElement().setEnabled(enabled);\n-        treeModel.nodeChanged(this);\n+        treeModel.ifPresent(tm -> tm.nodeChanged(this));\n     }\n     \n     /**\n      * Return nodes to level 2\n      * @return {@link List} of {@link JMeterTreeNode}s\n      */\n     public List<JMeterTreeNode> getPathToThreadGroup() {\n-        if (treeModel == null) {\n+        if (!treeModel.isPresent()) {\n             return new ArrayList<>();\n         }\n \n-        return Arrays.stream(treeModel.getPathToRoot(this))\n+        return Arrays.stream(treeModel.get().getPathToRoot(this))\n                 .map(node -> (JMeterTreeNode) node)\n                 .filter(node -> node.getLevel() >= TEST_PLAN_LEVEL)\n                 .collect(Collectors.toList());\n@@ -97,7 +98,7 @@ public void setChildrenNodesHaveMatched(boolean tagged) {\n             return;\n         }\n         this.childrenMarkedBySearch = tagged;\n-        treeModel.nodeChanged(this);\n+        treeModel.ifPresent(tm -> tm.nodeChanged(this));\n     }\n     /**\n      * Tag Node as result of a search\n@@ -116,7 +117,7 @@ public void setMarkedBySearch(boolean tagged) {\n             }\n         }\n \n-        treeModel.nodeChanged(this);\n+        treeModel.ifPresent(tm -> tm.nodeChanged(this));\n     }\n     \n     /**\n@@ -215,9 +216,6 @@ public String getName() {\n     /** {@inheritDoc} */\n     @Override\n     public void nameChanged() {\n-        if (treeModel != null) { // may be null during startup\n-            treeModel.nodeChanged(this);\n-        }\n+        treeModel.ifPresent(tm -> tm.nodeChanged(this));\n     }\n-\n }",
                "deletions": 11
            },
            {
                "sha": "462b639756a1c0477ab9813f0eb5ea0a1e01b198",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/cc50fc5b847a394774ffc41fd1688add1c1e8abe/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/cc50fc5b847a394774ffc41fd1688add1c1e8abe/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=cc50fc5b847a394774ffc41fd1688add1c1e8abe",
                "patch": "@@ -160,6 +160,7 @@ Summary\n <ul>\n     <li><bug>62745</bug>Fix undefined disabled icon. Contributed by Till Neunast (https://github.com/tilln)</li>\n     <li><bug>62743</bug>Client auth must be enabled on distributed testing</li>\n+    <li><bug>62767</bug>NPE when searching under certain conditions. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->\n@@ -170,6 +171,7 @@ Summary\n <ul>\n     <li>Till Neunast (https://github.com/tilln)</li>\n     <li>Mingun (alexander_sergey at mail.ru)</li>\n+    <li><a href=\"https://ubikloadpack.com\">Ubik Load Pack</a></li>\n </ul>\n <p>We also thank bug reporters who helped us improve JMeter.</p>\n <p>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when called from Function Helper Dialog\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1840365 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 590d6f979df56d97dbf9717ebe01710de928faff",
        "commit": "https://github.com/apache/jmeter/commit/8323d16f9f5b7f719f045a26af0881068b6e29af",
        "parent": "https://github.com/apache/jmeter/commit/7018c9a907dde054067ee5c7321b79fbb26bd762",
        "bug_id": "jmeter_15",
        "file": [
            {
                "sha": "4c440863c0f69ae5898aba65867b8371bfc86479",
                "filename": "src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "blob_url": "https://github.com/apache/jmeter/blob/8323d16f9f5b7f719f045a26af0881068b6e29af/src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "raw_url": "https://github.com/apache/jmeter/raw/8323d16f9f5b7f719f045a26af0881068b6e29af/src/functions/org/apache/jmeter/functions/IsVarDefined.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/IsVarDefined.java?ref=8323d16f9f5b7f719f045a26af0881068b6e29af",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.jmeter.engine.util.CompoundVariable;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n \n /**\n@@ -50,8 +51,13 @@\n     public String execute(SampleResult previousResult, Sampler currentSampler)\n             throws InvalidVariableException {\n         String variableName = values[0].execute();\n-        String variableValue = getVariables().get(variableName);\n-        return Boolean.toString(variableValue != null);\n+        JMeterVariables jMeterVariables = getVariables();\n+        if(jMeterVariables != null) {\n+            String variableValue = jMeterVariables.get(variableName);\n+            return Boolean.toString(variableValue != null);\n+        } else {\n+            return Boolean.FALSE.toString();\n+        }\n     }\n \n     @Override",
                "deletions": 2
            },
            {
                "sha": "08ca1f1bde7e0aea0eb2639d4eae77aad7a5d8e7",
                "filename": "test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "blob_url": "https://github.com/apache/jmeter/blob/8323d16f9f5b7f719f045a26af0881068b6e29af/test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "raw_url": "https://github.com/apache/jmeter/raw/8323d16f9f5b7f719f045a26af0881068b6e29af/test/src/org/apache/jmeter/functions/TestIsVarDefined.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestIsVarDefined.java?ref=8323d16f9f5b7f719f045a26af0881068b6e29af",
                "patch": "@@ -98,5 +98,14 @@ public void testIsVarDefinedError() throws Exception {\n         isVarDefined.setParameters(params);\n         isVarDefined.execute(result, null);\n     }\n+    \n+    @Test\n+    public void testNoVariablesDefined() throws Exception {\n+        jmctx.setVariables(null);\n+        params.add(new CompoundVariable(\"emptyProperty\"));\n+        isVarDefined.setParameters(params);\n+        String returnValue = isVarDefined.execute(result, null);\n+        assertEquals(\"false\", returnValue);\n+    }\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62860 - JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found\nBugzilla Id: 62860\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1845093 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 165d2a4ee5529731098feaf2c35873bb5f6ca8d8",
        "commit": "https://github.com/apache/jmeter/commit/8d0794f2dab66e049214a542bf1a78bd46d1fd86",
        "parent": "https://github.com/apache/jmeter/commit/9d2491710f35b896a4537e1aee1993bbb7361176",
        "bug_id": "jmeter_16",
        "file": [
            {
                "sha": "b59df8d9a275f540d03f0a054030753bf1fba713",
                "filename": "test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/8d0794f2dab66e049214a542bf1a78bd46d1fd86/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/8d0794f2dab66e049214a542bf1a78bd46d1fd86/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java",
                "status": "modified",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/extractor/TestJSONPostProcessor.java?ref=8d0794f2dab66e049214a542bf1a78bd46d1fd86",
                "patch": "@@ -111,6 +111,28 @@ public void testPR235CaseEmptyResponse() {\n         assertThat(vars.get(\"varname_1\"), CoreMatchers.is(CoreMatchers.nullValue()));\n         assertThat(vars.get(\"varname_2\"), CoreMatchers.is(CoreMatchers.nullValue()));\n     }\n+    \n+    @Test\n+    public void testCaseEmptyVarBug62860() {\n+        JMeterContext context = JMeterContextService.getContext();\n+        JSONPostProcessor processor = setupProcessor(context, \"0\", false);\n+        JMeterVariables vars = new JMeterVariables();\n+        processor.setDefaultValues(\"NONE\");\n+        processor.setJsonPathExpressions(\"$[*]\");\n+        processor.setRefNames(\"varname\");\n+        processor.setScopeVariable(\"contentvar\");\n+        context.setVariables(vars);\n+        vars.remove(\"contentvar\");\n+        processor.process();\n+        assertThat(vars.get(\"varname\"), CoreMatchers.is(\"NONE\"));\n+        assertThat(vars.get(\"varname_matchNr\"), CoreMatchers.is(CoreMatchers.nullValue()));\n+        \n+        vars.put(\"contentvar\", \"\");\n+        processor.process();\n+        assertThat(vars.get(\"varname\"), CoreMatchers.is(\"NONE\"));\n+        assertThat(vars.get(\"varname_matchNr\"), CoreMatchers.is(CoreMatchers.nullValue()));\n+\n+    }\n \n     @Test\n     public void testPR235CaseMatchOneWithZero() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62860 - JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found\nBugzilla Id: 62860\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1845092 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6d0ce8b8137118d6a857aa7d768fe7cd8fbb1f38",
        "commit": "https://github.com/apache/jmeter/commit/9d2491710f35b896a4537e1aee1993bbb7361176",
        "parent": "https://github.com/apache/jmeter/commit/9675f46bf981a1a12d75967f08e3eff295e8c3ac",
        "bug_id": "jmeter_17",
        "file": [
            {
                "sha": "c31342b3ce214b1d2c6e9fd2b3ce448d4f2587eb",
                "filename": "src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9d2491710f35b896a4537e1aee1993bbb7361176/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9d2491710f35b896a4537e1aee1993bbb7361176/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java?ref=9d2491710f35b896a4537e1aee1993bbb7361176",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Arrays;\n import java.util.List;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.processor.PostProcessor;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedTestElement;\n@@ -101,10 +102,12 @@ public void process() {\n             String currentJsonPath = jsonPathExpressions[i].trim();\n             clearOldRefVars(vars, currentRefName);\n             try {\n-                if (jsonResponse.isEmpty()) {\n+                if (StringUtils.isEmpty(jsonResponse)) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(\"Response or source variable is null or empty for {}\", getName());\n+                    }\n                     vars.put(currentRefName, defaultValues[i]);\n                 } else {\n-\n                     List<Object> extractedValues = localMatcher.get()\n                             .extractWithJsonPath(jsonResponse, currentJsonPath);\n                     // if no values extracted, default value added",
                "deletions": 2
            },
            {
                "sha": "2a588d4f8b8f17152e86ae60cf46e57d062cf12d",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/9d2491710f35b896a4537e1aee1993bbb7361176/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/9d2491710f35b896a4537e1aee1993bbb7361176/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9d2491710f35b896a4537e1aee1993bbb7361176",
                "patch": "@@ -156,6 +156,7 @@ Summary\n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n     <li><bug>62774</bug>XPath2Extractor : Scope variable is broken. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n+    <li><bug>62860</bug>JSON Extractor : Avoid NPE and noisy error message \"Error processing JSON content in\" when variable is not found</li>\n </ul>\n \n <h3>Functions</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1821947 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 84c3fcd3010c9f42a348d1011e6678d99970bab7",
        "commit": "https://github.com/apache/jmeter/commit/e1183c7b0e8bbf7f04453b1bcb04bc9ad09cd287",
        "parent": "https://github.com/apache/jmeter/commit/a25972fb04e2519f693f73533e71bab378234aca",
        "bug_id": "jmeter_18",
        "file": [
            {
                "sha": "389c12929548e4aa2cdf9d7b4fed31a0beb46412",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e1183c7b0e8bbf7f04453b1bcb04bc9ad09cd287/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e1183c7b0e8bbf7f04453b1bcb04bc9ad09cd287/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java?ref=e1183c7b0e8bbf7f04453b1bcb04bc9ad09cd287",
                "patch": "@@ -215,7 +215,9 @@ public void start() {\n             config.setCaseSensitive(false);\n             // Conditional comments only apply for IE < 10\n             config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));\n-            config.setCondCommentIEVersion(ieVersion);\n+            if(ieVersion != null) {\n+                config.setCondCommentIEVersion(ieVersion);\n+            }\n             lagartoParser.setConfig(config);\n             JMeterTagVisitor tagVisitor = new JMeterTagVisitor(new URLPointer(baseUrl), coll, ieVersion);\n             lagartoParser.parse(tagVisitor);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "[Bug 62195] Save Responses to a file : Improve component and UI\nFix NPE\nBugzilla Id: 62195\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1827350 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ce1d8f87532a874db382622fc2872f7ce2639c7f",
        "commit": "https://github.com/apache/jmeter/commit/618560069ba20d2ab31d3d1c4f807b2a0028a154",
        "parent": "https://github.com/apache/jmeter/commit/d08c03f68b9d84d61d3d24e7461cbeeea8e0a550",
        "bug_id": "jmeter_19",
        "file": [
            {
                "sha": "455348e249dbde898829cc04baa442f68eda3a2c",
                "filename": "src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "blob_url": "https://github.com/apache/jmeter/blob/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "raw_url": "https://github.com/apache/jmeter/raw/618560069ba20d2ab31d3d1c4f807b2a0028a154/src/core/org/apache/jmeter/reporters/ResultSaver.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/ResultSaver.java?ref=618560069ba20d2ab31d3d1c4f807b2a0028a154",
                "patch": "@@ -227,6 +227,9 @@ private boolean ignoreSampler(SampleResult s) {\n      * @param parentFile\n      */\n     private void createFoldersIfNeeded(File parentFile) {\n+        if(parentFile == null) {\n+            return;\n+        }\n         if (!parentFile.exists()) {\n             log.debug(\"Creating path hierarchy for folder {}\", parentFile.getAbsolutePath());\n             if(!parentFile.mkdirs()) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 62212 : Recorder : Improve UX by providing a popup above all windows to be able to change Transaction names and pauses while using Browser \n\nFix NPE if user closes the intermediate dialog that automatically disappears after 7 seconds\nBugzilla Id: 62212\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1835363 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5d5c6e84cf0324d458d48f7c53e8e5493c222e76",
        "commit": "https://github.com/apache/jmeter/commit/e83fb9ebc993723c3e7ea793922c0d5695116a1b",
        "parent": "https://github.com/apache/jmeter/commit/e2c2599e4fe293b765f095889bbb112bc68291ff",
        "bug_id": "jmeter_20",
        "file": [
            {
                "sha": "2ecb5b21991685e2801d3e091b1ef8c965af353b",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e83fb9ebc993723c3e7ea793922c0d5695116a1b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e83fb9ebc993723c3e7ea793922c0d5695116a1b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java?ref=e83fb9ebc993723c3e7ea793922c0d5695116a1b",
                "patch": "@@ -25,6 +25,7 @@\n import java.awt.GridBagConstraints;\n import java.awt.GridBagLayout;\n import java.awt.HeadlessException;\n+import java.awt.Window;\n import java.awt.datatransfer.DataFlavor;\n import java.awt.datatransfer.UnsupportedFlavorException;\n import java.awt.event.ActionEvent;\n@@ -613,7 +614,13 @@ private boolean startProxy() {\n \n                 // Make dialog disappear after 7 seconds\n                 JLabel messageLabel = new JLabel(sb.toString());\n-                Timer timer = new Timer(7000, evt -> SwingUtilities.getWindowAncestor(messageLabel).dispose());\n+                Timer timer = new Timer(7000, evt -> {\n+                    Window window = SwingUtilities.getWindowAncestor(messageLabel);\n+                    // Window may be closed by user\n+                    if(window != null) {\n+                        window.dispose();\n+                    }\n+                });\n                 timer.setRepeats(false);\n                 timer.start();\n                 JOptionPane.showMessageDialog(this,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Prevent NPE in MapProperty.\n\nInitialize the backing Map when no Map was passed into constructor.\nPatch by belugabehr (dam6923 at gmail.com)\n\nBugzilla Id: 62281\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1832768 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4bcb60d9f45a3c2993dc09ad8c127a1c736fa803",
        "commit": "https://github.com/apache/jmeter/commit/a83329221d5b574d9617a1e45f3b052ec364975d",
        "parent": "https://github.com/apache/jmeter/commit/e3d08b9e896769a7101cc6a0b1aebedf1f1d54ee",
        "bug_id": "jmeter_21",
        "file": [
            {
                "sha": "899bf020dc66ded0b346cf4a7520dd78726870d0",
                "filename": "src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/src/core/org/apache/jmeter/testelement/property/MapProperty.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/MapProperty.java?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.jmeter.testelement.property;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.jmeter.testelement.TestElement;\n@@ -39,6 +40,7 @@ public MapProperty(String name, Map<?,?> value) {\n \n     public MapProperty() {\n         super();\n+        value = new HashMap<>();\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 0
            },
            {
                "sha": "52cc597d98682c53594b8228a9c0f24def4506fa",
                "filename": "test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java",
                "status": "added",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/testelement/property/MapPropertyTest.java?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "patch": "@@ -0,0 +1,13 @@\n+package org.apache.jmeter.testelement.property;\n+\n+import org.junit.Test;\n+\n+public class MapPropertyTest {\n+\n+    @Test\n+    public void testBug62281MapProperty() {\n+        MapProperty props = new MapProperty();\n+        props.addProperty(\"Foo\", new BooleanProperty());\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "ff1fb743894ae1db5f9d417c9bc1f8b7ddef9245",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/a83329221d5b574d9617a1e45f3b052ec364975d/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/a83329221d5b574d9617a1e45f3b052ec364975d/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=a83329221d5b574d9617a1e45f3b052ec364975d",
                "patch": "@@ -229,6 +229,7 @@ this behaviour, set <code>httpclient.reset_state_on_thread_group_iteration=false\n   <li><bug>62240</bug>If SampleMonitor implementation is a TestBean if will not be initialized correctly</li>\n   <li><bug>62295</bug>Correct order of elements when duplicating a selection of multiple elements.</li>\n   <li><bug>62397</bug>Don't break lines at commata when using JSON Path Tester</li> \n+  <li><bug>62281</bug>Prevent NPE in MapProperty. Patch by belugabehr (dam6923 at gmail.com)</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->\n@@ -251,6 +252,7 @@ this behaviour, set <code>httpclient.reset_state_on_thread_group_iteration=false\n     <li>Perze Ababa (perze.ababa at gmail.com)</li>\n     <li>Martha Laks (laks.martha at gmail.com)</li>\n     <li>Logan Mauzaize (t524467 at airfrance.fr)</li>\n+    <li>belugabehr (dam6923 at gmail.com)</li>\n </ul>\n <p>We also thank bug reporters who helped us improve JMeter.</p>\n <p>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1807339 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bcd84e6d09e26039a13a0d771d86c2900f4ff6fb",
        "commit": "https://github.com/apache/jmeter/commit/6676493d8fdbea544e7030c7b0189e4760688af4",
        "parent": "https://github.com/apache/jmeter/commit/96574f079949575ea51c8763e98f91a90b560458",
        "bug_id": "jmeter_22",
        "file": [
            {
                "sha": "abac91193653308e2372c08d4bdfc40258bab248",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/6676493d8fdbea544e7030c7b0189e4760688af4/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "status": "modified",
                "changes": 110,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=6676493d8fdbea544e7030c7b0189e4760688af4",
                "patch": "@@ -985,23 +985,25 @@ private void addTimers(JMeterTreeModel model, JMeterTreeNode node, long deltaT)\n         variables.addParameter(\"T\", Long.toString(deltaT)); // $NON-NLS-1$\n         ValueReplacer replacer = new ValueReplacer(variables);\n         JMeterTreeNode mySelf = model.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> children = mySelf.children();\n-        while (children.hasMoreElements()) {\n-            JMeterTreeNode templateNode = children.nextElement();\n-            if (templateNode.isEnabled()) {\n-                TestElement template = templateNode.getTestElement();\n-                if (template instanceof Timer) {\n-                    TestElement timer = (TestElement) template.clone();\n-                    try {\n-                        timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n-                        replacer.undoReverseReplace(timer);\n-                        model.addComponent(timer, node);\n-                    } catch (InvalidVariableException\n-                            | IllegalUserActionException e) {\n-                        // Not 100% sure, but I believe this can't happen, so\n-                        // I'll log and throw an error:\n-                        log.error(\"Program error\", e);\n-                        throw new Error(e);\n+        if(mySelf != null) {\n+            Enumeration<JMeterTreeNode> children = mySelf.children();\n+            while (children.hasMoreElements()) {\n+                JMeterTreeNode templateNode = children.nextElement();\n+                if (templateNode.isEnabled()) {\n+                    TestElement template = templateNode.getTestElement();\n+                    if (template instanceof Timer) {\n+                        TestElement timer = (TestElement) template.clone();\n+                        try {\n+                            timer.setComment(\"Recorded:\"+Long.toString(deltaT)+\"ms\");\n+                            replacer.undoReverseReplace(timer);\n+                            model.addComponent(timer, node);\n+                        } catch (InvalidVariableException\n+                                | IllegalUserActionException e) {\n+                            // Not 100% sure, but I believe this can't happen, so\n+                            // I'll log and throw an error:\n+                            log.error(\"Program error adding timers\", e);\n+                            throw new Error(e);\n+                        }\n                     }\n                 }\n             }\n@@ -1088,25 +1090,27 @@ public JMeterTreeNode findTargetControllerNode() {\n         LinkedList<TestElement> elements = new LinkedList<>();\n \n         // Look for elements directly within the HTTP proxy:\n-        Enumeration<?> kids = treeModel.getNodeOf(this).children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement element = (TestElement) subNode.getUserObject();\n-                if (myClass.isInstance(element)) {\n-                    if (ascending) {\n-                        elements.addFirst(element);\n-                    } else {\n-                        elements.add(element);\n+        JMeterTreeNode node = treeModel.getNodeOf(this);\n+        if(node != null) {\n+            Enumeration<?> kids = node.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement element = (TestElement) subNode.getUserObject();\n+                    if (myClass.isInstance(element)) {\n+                        if (ascending) {\n+                            elements.addFirst(element);\n+                        } else {\n+                            elements.add(element);\n+                        }\n                     }\n                 }\n             }\n         }\n-\n         // Look for arguments elements in the target controller or higher up:\n         for (JMeterTreeNode controller = myTarget; controller != null; controller = (JMeterTreeNode) controller\n                 .getParent()) {\n-            kids = controller.children();\n+            Enumeration<?> kids = controller.children();\n             while (kids.hasMoreElements()) {\n                 JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();\n                 if (subNode.isEnabled()) {\n@@ -1360,13 +1364,15 @@ private void replaceValues(TestElement sampler, TestElement[] configs, Collectio\n     private void notifySampleListeners(SampleEvent event) {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof SampleListener) {\n-                    ((SampleListener) testElement).sampleOccurred(event);\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof SampleListener) {\n+                        ((SampleListener) testElement).sampleOccurred(event);\n+                    }\n                 }\n             }\n         }\n@@ -1379,13 +1385,15 @@ private void notifySampleListeners(SampleEvent event) {\n     private void notifyTestListenersOfStart() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) {\n-                    ((TestStateListener) testElement).testStarted();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) {\n+                        ((TestStateListener) testElement).testStarted();\n+                    }\n                 }\n             }\n         }\n@@ -1398,13 +1406,15 @@ private void notifyTestListenersOfStart() {\n     private void notifyTestListenersOfEnd() {\n         JMeterTreeModel treeModel = getJmeterTreeModel();\n         JMeterTreeNode myNode = treeModel.getNodeOf(this);\n-        Enumeration<JMeterTreeNode> kids = myNode.children();\n-        while (kids.hasMoreElements()) {\n-            JMeterTreeNode subNode = kids.nextElement();\n-            if (subNode.isEnabled()) {\n-                TestElement testElement = subNode.getTestElement();\n-                if (testElement instanceof TestStateListener) { // TL - TE\n-                    ((TestStateListener) testElement).testEnded();\n+        if(myNode != null) {\n+            Enumeration<JMeterTreeNode> kids = myNode.children();\n+            while (kids.hasMoreElements()) {\n+                JMeterTreeNode subNode = kids.nextElement();\n+                if (subNode.isEnabled()) {\n+                    TestElement testElement = subNode.getTestElement();\n+                    if (testElement instanceof TestStateListener) { // TL - TE\n+                        ((TestStateListener) testElement).testEnded();\n+                    }\n                 }\n             }\n         }",
                "deletions": 50
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 61878 - BackendListener : NPE if BackendListenerClient#getDefaultParameters returns null \nBugzilla Id: 61878\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1817575 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 79d09496ad5335f9a050fe721df20d1559a07ebe",
        "commit": "https://github.com/apache/jmeter/commit/114508d62815aa090e935094f47619be11d5cb6c",
        "parent": "https://github.com/apache/jmeter/commit/a9ab74e73a86efb708298846a5918dc76ea00dcd",
        "bug_id": "jmeter_23",
        "file": [
            {
                "sha": "a8dddfc59b887ba73c7c727d3d730a8e1875b3e7",
                "filename": "src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/114508d62815aa090e935094f47619be11d5cb6c/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/114508d62815aa090e935094f47619be11d5cb6c/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java?ref=114508d62815aa090e935094f47619be11d5cb6c",
                "patch": "@@ -182,7 +182,9 @@ public void actionPerformed(ActionEvent event) {\n                 try {\n                     defaultArgs = client.getDefaultParameters();\n                     Arguments currentUserArgs = oldClient.getDefaultParameters();\n-                    userArgMap.keySet().removeAll(currentUserArgs.getArgumentsAsMap().keySet());\n+                    if(currentUserArgs != null) {\n+                        userArgMap.keySet().removeAll(currentUserArgs.getArgumentsAsMap().keySet());\n+                    }\n                 } catch (AbstractMethodError e) {\n                     log.warn(\"BackendListenerClient doesn't implement \"\n                             + \"getDefaultParameters.  Default parameters won't \"",
                "deletions": 1
            },
            {
                "sha": "7a53cc1b8702b67a80c40e6adf88375e2bcea4fc",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/114508d62815aa090e935094f47619be11d5cb6c/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/114508d62815aa090e935094f47619be11d5cb6c/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=114508d62815aa090e935094f47619be11d5cb6c",
                "patch": "@@ -157,7 +157,6 @@ Summary\n <h3>Report / Dashboard</h3>\n <ul>\n     <li><bug>61871</bug>Reduce jmeter.reportgenerator.graph.responseTimeDistribution.property.set_granularity default value from 500ms to 100ms</li>\n-    <li><bug>61872</bug>Better labels in dynamic HTML report</li> \n </ul>\n \n <h3>General</h3>\n@@ -233,6 +232,7 @@ Summary\n <h3>Listeners</h3>\n <ul>\n     <li><bug>61742</bug>BackendListener: fix default value for <code>backend_graphite.send_interval</code></li>\n+    <li><bug>61878</bug>BackendListener : NPE if BackendListenerClient#getDefaultParameters returns null</li>\n </ul>\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 47899 -  NullPointerExceptions in ReceiveSubscriber constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@818624 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4438756cc54b8763f47a943265155210bc015b72",
        "commit": "https://github.com/apache/jmeter/commit/fb1f8ca4935fb69ee6d0469576a6d13d18a000ca",
        "parent": "https://github.com/apache/jmeter/commit/bd42e3ee97e87a0702cea736440be7441ac6ea92",
        "bug_id": "jmeter_24",
        "file": [
            {
                "sha": "ab46994d6593d24dde70a77870da41d42c15daf7",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "blob_url": "https://github.com/apache/jmeter/blob/fb1f8ca4935fb69ee6d0469576a6d13d18a000ca/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "raw_url": "https://github.com/apache/jmeter/raw/fb1f8ca4935fb69ee6d0469576a6d13d18a000ca/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java?ref=fb1f8ca4935fb69ee6d0469576a6d13d18a000ca",
                "patch": "@@ -53,8 +53,6 @@\n \n     private final TopicSession SESSION;\n \n-    private final Topic TOPIC;\n-\n     private final TopicSubscriber SUBSCRIBER;\n \n     //@GuardedBy(\"this\")\n@@ -85,7 +83,7 @@ public ReceiveSubscriber(boolean useProps, String jndi, String url, String connf\n                 _conn = ConnectionFactory.getTopicConnection();\n                 _topic = InitialContextFactory.lookupTopic(ctx, topic);\n                 _session = _conn.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);\n-                _subscriber = _session.createSubscriber(this.TOPIC);\n+                _subscriber = _session.createSubscriber(_topic);\n                 log.info(\"created the topic connection successfully\");\n             } catch (JMSException e) {\n                 log.error(\"Connection error: \" + e.getMessage());\n@@ -94,7 +92,6 @@ public ReceiveSubscriber(boolean useProps, String jndi, String url, String connf\n             log.error(\"Could not initialize JNDI Initial Context Factory\");\n         }\n         this.CONN = _conn;\n-        this.TOPIC = _topic;\n         this.SESSION = _session;\n         this.SUBSCRIBER = _subscriber;\n     }",
                "deletions": 4
            },
            {
                "sha": "db46700c996797e9ac1bc7ec73ffd1bbcd3b62a8",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/fb1f8ca4935fb69ee6d0469576a6d13d18a000ca/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/fb1f8ca4935fb69ee6d0469576a6d13d18a000ca/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=fb1f8ca4935fb69ee6d0469576a6d13d18a000ca",
                "patch": "@@ -75,6 +75,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n <ul>\n <li>Bug 47420 - LDAP extended request not closing connections during add request</li>\n <li>Bug 47870 - JMSSubscriber fails due to NPE</li>\n+<li>Bug 47899 -  NullPointerExceptions in ReceiveSubscriber constructor</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783593 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f1c69ea60bea1abe91a6d7c8aa361f79e0a32e37",
        "commit": "https://github.com/apache/jmeter/commit/c3bb466df52d628c01a6ff2ee1f7299436b191e5",
        "parent": "https://github.com/apache/jmeter/commit/0467684c88493b0c424be584723bf1a1f9cfbe6a",
        "bug_id": "jmeter_25",
        "file": [
            {
                "sha": "03203ca37e21206f4fc8e932776337fe8f7a434c",
                "filename": "src/core/org/apache/jmeter/threads/JMeterThread.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c3bb466df52d628c01a6ff2ee1f7299436b191e5/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/JMeterThread.java?ref=c3bb466df52d628c01a6ff2ee1f7299436b191e5",
                "patch": "@@ -328,7 +328,8 @@ private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext thre\n \n         Sampler realSampler = findRealSampler(sam);\n         if(realSampler == null) {\n-            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+sam.getName()+\", sam:\"+sam);\n+            throw new IllegalStateException(\"Got null subSampler calling findRealSampler for:\"+\n+                    (sam != null ? sam.getName(): \"null\")+\", sam:\"+sam);\n         }\n         // Find parent controllers of current sampler\n         FindTestElementsUpToRootTraverser pathToRootTraverser = new FindTestElementsUpToRootTraverser(realSampler);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783551 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 88d6f7121c212ff11553aef0e91982f5acfe0afa",
        "commit": "https://github.com/apache/jmeter/commit/cbb35f97a420413245600569a059e20bb0fba598",
        "parent": "https://github.com/apache/jmeter/commit/29cf4cbb358d24dcc914ae00ed47d6f51708a4fe",
        "bug_id": "jmeter_26",
        "file": [
            {
                "sha": "77ecb310b5a8748c0d9bd97ef1702d1407981c53",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cbb35f97a420413245600569a059e20bb0fba598/src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cbb35f97a420413245600569a059e20bb0fba598/src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java?ref=cbb35f97a420413245600569a059e20bb0fba598",
                "patch": "@@ -133,12 +133,12 @@ private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLPar\n             if (name.equalsIgnoreCase(TAG_INPUT)) {\n                 String src = getValue(attrs, ATT_SRC);\n                 String typ = getValue(attrs, ATT_TYPE);\n-                if ((src != null) && (typ.equalsIgnoreCase(ATT_IS_IMAGE))) {\n+                if ((src != null) && ATT_IS_IMAGE.equalsIgnoreCase(typ)) {\n                     urls.addURL(src, baseUrl);\n                 }\n                 break;\n             }\n-            if (name.equalsIgnoreCase(TAG_LINK) && getValue(attrs, ATT_REL).equalsIgnoreCase(STYLESHEET)) {\n+            if (TAG_LINK.equalsIgnoreCase(name) && STYLESHEET.equalsIgnoreCase(getValue(attrs, ATT_REL))) {\n                 urls.addURL(getValue(attrs, ATT_HREF), baseUrl);\n                 break;\n             }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE sonar\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783484 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 29c65bafda9bb5aec6d517d33a81cc46d41533b7",
        "commit": "https://github.com/apache/jmeter/commit/daca37df3212ca4d462a5826ec566225f1e98390",
        "parent": "https://github.com/apache/jmeter/commit/a43aaf43fe496f4eb31e91640a2260827323f9da",
        "bug_id": "jmeter_27",
        "file": [
            {
                "sha": "da0e2ffd60fe742375e97a47f6ae38c41156f9ed",
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/daca37df3212ca4d462a5826ec566225f1e98390/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=daca37df3212ca4d462a5826ec566225f1e98390",
                "patch": "@@ -540,7 +540,11 @@ private static String getResStringDefault(String key, String defaultValue, Local\n      */\n     public static String getParsedLabel(String key) {\n         String value = JMeterUtils.getResString(key);\n-        return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        if(value != null) {\n+            return value.replaceFirst(\"(?m)\\\\s*?:\\\\s*$\", \"\"); // $NON-NLS-1$ $NON-NLS-2$\n+        } else {\n+            return null;\n+        }\n     }\n     \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "SOAP/XML-RPC Sampler file browser generates NullPointerException\nBugzilla Id: 58293\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1698295 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 23964cfea8899ea453b33bb2f2fe8b4836484a99",
        "commit": "https://github.com/apache/jmeter/commit/b92822f789dbe04018b3a27be19cf5bd50d9282f",
        "parent": "https://github.com/apache/jmeter/commit/8294de08344c581b9d444ed0e43542eb5e50183f",
        "bug_id": "jmeter_28",
        "file": [
            {
                "sha": "186461109fd88e596a25991639026f04882dbf76",
                "filename": "src/core/org/apache/jmeter/gui/util/FilePanelEntry.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b92822f789dbe04018b3a27be19cf5bd50d9282f/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b92822f789dbe04018b3a27be19cf5bd50d9282f/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java?ref=b92822f789dbe04018b3a27be19cf5bd50d9282f",
                "patch": "@@ -68,7 +68,9 @@ public FilePanelEntry(String label, ChangeListener listener, String ... exts) {\n         if (listener != null) {\n             listeners.add(listener);\n         }\n-        if (exts != null) {\n+        if (exts != null && \n+          !(exts.length == 1 && exts[0] == null) // String null is converted to String[]{null}\n+            ) {\n             this.filetypes = new String[exts.length];\n             System.arraycopy(exts, 0, this.filetypes, 0, exts.length);\n         } else {",
                "deletions": 1
            },
            {
                "sha": "16428fbf0bbf47ec40aa697efa866e9f304bf76f",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b92822f789dbe04018b3a27be19cf5bd50d9282f/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b92822f789dbe04018b3a27be19cf5bd50d9282f/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b92822f789dbe04018b3a27be19cf5bd50d9282f",
                "patch": "@@ -184,6 +184,7 @@ Summary\n     <li><bug>57821</bug>Command-line option \"-X --remoteexit\" doesn't work since 2.13 (regression related to <bugzilla>57500</bugzilla>)</li>\n     <li><bug>57731</bug>TESTSTART.MS has always the value of the first Test started in Server mode in NON GUI Distributed testing</li>\n     <li><bug>58016</bug> Error type casting using external SSL Provider. Contributed by Kirill Yankov (myworkpostbox at gmail.com)</li>\n+    <li><bug>58293</bug>SOAP/XML-RPC Sampler file browser generates NullPointerException</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1775165 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3bae2c118b226f2dddb9ac0b8048f7177f14775a",
        "commit": "https://github.com/apache/jmeter/commit/3945d7bfa8b2a7c6bc1cde9cbc57a119823d7765",
        "parent": "https://github.com/apache/jmeter/commit/41aa229fb304cc176b86f27e765444910b1b75fe",
        "bug_id": "jmeter_29",
        "file": [
            {
                "sha": "979253685cabe3b162f061dac2ecbb5eb946ddd0",
                "filename": "src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3945d7bfa8b2a7c6bc1cde9cbc57a119823d7765/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3945d7bfa8b2a7c6bc1cde9cbc57a119823d7765/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java?ref=3945d7bfa8b2a7c6bc1cde9cbc57a119823d7765",
                "patch": "@@ -591,7 +591,7 @@ public static void close(Statement s) {\n                 s.close();\n             }\n         } catch (SQLException e) {\n-            log.warn(\"Error closing Statement \" + s.toString(), e);\n+            log.warn(\"Error closing Statement \" + (s != null ? s.toString() : \"null\"), e);\n         }\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE warnings reported by Findbugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1755001 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5810606046366ffba54b6e6b19bf3d021f982ac3",
        "commit": "https://github.com/apache/jmeter/commit/a8a7103126347f54faeaf953a72cbdfed97cf1d6",
        "parent": "https://github.com/apache/jmeter/commit/129807a91c7c0551364038fc8087fbda2e096560",
        "bug_id": "jmeter_30",
        "file": [
            {
                "sha": "5933c0976442d80842da2f92c882159145c7136c",
                "filename": "src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java?ref=a8a7103126347f54faeaf953a72cbdfed97cf1d6",
                "patch": "@@ -154,8 +154,9 @@ public boolean accept(File f, String name) {\n                             return name.endsWith(DOT_JAR);\n                         }\n                     });\n-                    // jars cannot be null\n-                    Collections.addAll(fullList, jars);\n+                    if(jars != null) {\n+                        Collections.addAll(fullList, jars);\n+                    }\n                 }\n             }\n         }",
                "deletions": 2
            },
            {
                "sha": "b4543be8776285952e985b5d2b6eed17132b21e9",
                "filename": "src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a8a7103126347f54faeaf953a72cbdfed97cf1d6/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java?ref=a8a7103126347f54faeaf953a72cbdfed97cf1d6",
                "patch": "@@ -603,7 +603,8 @@ public static void canSafelyWriteToFolder(File folder)\n                 throw new IllegalArgumentException(\"Cannot write to '\"\n                         +folder.getAbsolutePath()+\"' as it is an existing file\");\n             } else {\n-                if(folder.listFiles().length > 0) {\n+                File[] listedFiles = folder.listFiles();\n+                if(listedFiles != null && listedFiles.length > 0) {\n                     throw new IllegalArgumentException(\"Cannot write to '\"\n                             +folder.getAbsolutePath()+\"' as folder is not empty\");\n                 }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 58795 - NPE may occur in GuiPackage#getTestElementCheckSum with some 3rd party plugins\nFix NPE\nAvoid computing checksum when undoHistory is disabled\nBugzilla Id: 58795\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1722754 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 46e4afda34b6c063a33c9ff356836e26e034e8f2",
        "commit": "https://github.com/apache/jmeter/commit/422699c697927c4a053addb2ce48bc00f521dde9",
        "parent": "https://github.com/apache/jmeter/commit/89e070b8091cc19d94c7da9fb866049abff72e2f",
        "bug_id": "jmeter_31",
        "file": [
            {
                "sha": "05b60925550cb5106f3cee7a4ee5bfb1d39bd7f2",
                "filename": "src/core/org/apache/jmeter/gui/GuiPackage.java",
                "blob_url": "https://github.com/apache/jmeter/blob/422699c697927c4a053addb2ce48bc00f521dde9/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "raw_url": "https://github.com/apache/jmeter/raw/422699c697927c4a053addb2ce48bc00f521dde9/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "status": "modified",
                "changes": 24,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/GuiPackage.java?ref=422699c697927c4a053addb2ce48bc00f521dde9",
                "patch": "@@ -421,15 +421,23 @@ public void updateCurrentGui() {\n      * choosing the new node.\n      */\n     public void updateCurrentNode() {\n+        \n         try {\n             if (currentNode != null && !currentNodeUpdated) {\n                 log.debug(\"Updating current node \" + currentNode.getName());\n                 JMeterGUIComponent comp = getGui(currentNode.getTestElement());\n                 TestElement el = currentNode.getTestElement();\n-                int before = getTestElementCheckSum(el);\n+                int before = 0;\n+                int after = 0;\n+                final boolean historyEnabled = undoHistory.isEnabled();\n+                if(historyEnabled) {\n+                    before = getTestElementCheckSum(el);\n+                }\n                 comp.modifyTestElement(el);\n-                int after = getTestElementCheckSum(el);\n-                if (before != after) {\n+                if(historyEnabled) {\n+                    after = getTestElementCheckSum(el);\n+                }\n+                if (!historyEnabled || (before != after)) {\n                     currentNode.nameChanged(); // Bug 50221 - ensure label is updated\n                 }\n             }\n@@ -844,7 +852,15 @@ private int getTestElementCheckSum(TestElement el) {\n                         .getElement());\n             } else {\n                 ret ^= obj.getName().hashCode();\n-                ret ^= obj.getStringValue().hashCode();\n+                String stringValue = obj.getStringValue();\n+                if(stringValue != null) {\n+                    ret ^= stringValue.hashCode();\n+                } else {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(\"obj.getStringValue() returned null for test element:\"\n+                                +el.getName()+\" at property:\"+obj.getName());\n+                    }\n+                }\n             }\n         }\n         return ret;",
                "deletions": 4
            },
            {
                "sha": "35c0815268e92a58846271bde2c2f8f3d1c4b169",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/422699c697927c4a053addb2ce48bc00f521dde9/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/422699c697927c4a053addb2ce48bc00f521dde9/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=422699c697927c4a053addb2ce48bc00f521dde9",
                "patch": "@@ -249,6 +249,7 @@ Summary\n     <li><bug>58685</bug>JDatefield : Make the modification of the date with up/down arrow work.Contributed by Benoit Wiart (benoit dot wiart at gmail.com)</li>\n     <li><bug>58693</bug>Fix \"Cannot nest output folder 'jmeter/build/components' inside output folder 'jmeter/build' when setting up eclipse</li>\n     <li><bug>58781</bug>Command line option \"-?\" shows Unknown option</li>\n+    <li><bug>58795</bug>NPE may occur in GuiPackage#getTestElementCheckSum with some 3rd party plugins</li>\n </ul>\n \n  <!--  =================== Thanks =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Check for not-null first, instead of waiting for the npe to happen. After\nthat, there is no need to catch a npe just to throw it again.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719793 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4a799f6d91546bec4e3826e1cc4f7e4c80d8e607",
        "commit": "https://github.com/apache/jmeter/commit/fa39c74107de23696a3ac4489760ca3000870b18",
        "parent": "https://github.com/apache/jmeter/commit/e2fbe6671c0a507266efbf4bc8888d656c479a33",
        "bug_id": "jmeter_32",
        "file": [
            {
                "sha": "6497821a444e121a46591a61d2d4c61563b44f3c",
                "filename": "src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/AbstractSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "patch": "@@ -26,6 +26,7 @@\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n \n+import org.apache.commons.lang3.Validate;\n import org.apache.jorphan.util.JOrphanUtils;\n \n /**",
                "deletions": 0
            },
            {
                "sha": "855d0567d3bac714454a4694f0421e7e45e7279b",
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/fa39c74107de23696a3ac4489760ca3000870b18/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "status": "modified",
                "changes": 42,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java?ref=fa39c74107de23696a3ac4489760ca3000870b18",
                "patch": "@@ -114,29 +114,27 @@ public void writeHeader() {\n \n     @Override\n     public long write(Sample sample) {\n-        try {\n-            row.setLength(0);\n-            char[] specials = new char[] { separator,\n-                    CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n-            for (int i = 0; i < columnCount; i++) {\n-                String data = sample.getString(i);\n-                row.append(CSVSaveService.quoteDelimiters(data, specials))\n-                        .append(separator);\n-            }\n-            int rowLength = row.length() - 1;\n-            row.setLength(rowLength);\n-            writer.println(row.toString());\n-            sampleCount++;\n-        } catch (NullPointerException npe) {\n-            if (writer == null) {\n-                throw new IllegalStateException(\n-                        \"No writer set ! Call setWriter() first !\", npe);\n-            } else if (sample == null) {\n-                throw new ArgumentNullException(\"sample\");\n-            } else {\n-                throw npe;\n-            }\n+        if (sample == null) {\n+            throw new ArgumentNullException(\"sample\");\n+        }\n+        if (writer == null) {\n+            throw new IllegalStateException(\n+                    \"No writer set! Call setWriter() first!\");\n         }\n+\n+        row.setLength(0);\n+        char[] specials = new char[] { separator,\n+                CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };\n+        for (int i = 0; i < columnCount; i++) {\n+            String data = sample.getString(i);\n+            row.append(CSVSaveService.quoteDelimiters(data, specials))\n+                    .append(separator);\n+        }\n+        int rowLength = row.length() - 1;\n+        row.setLength(rowLength);\n+        writer.println(row.toString());\n+        sampleCount++;\n+\n         return sampleCount;\n     }\n ",
                "deletions": 22
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE for addThreadLock transient object in remote mode\nBugzilla Id: 60829\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1786026 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4c9ab839164dbcbea8fc3665560039f7ddf325c5",
        "commit": "https://github.com/apache/jmeter/commit/d03bfa4da016e2f028494c77b2cafd6705b2d625",
        "parent": "https://github.com/apache/jmeter/commit/fa1b99efcf9baf36059acc02a0fcb5b122e30d9c",
        "bug_id": "jmeter_33",
        "file": [
            {
                "sha": "ac2ebb5e7e43b6662a67096b613beea2e1e02e12",
                "filename": "src/core/org/apache/jmeter/threads/ThreadGroup.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d03bfa4da016e2f028494c77b2cafd6705b2d625/src/core/org/apache/jmeter/threads/ThreadGroup.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d03bfa4da016e2f028494c77b2cafd6705b2d625/src/core/org/apache/jmeter/threads/ThreadGroup.java",
                "status": "modified",
                "changes": 13,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/ThreadGroup.java?ref=d03bfa4da016e2f028494c77b2cafd6705b2d625",
                "patch": "@@ -18,6 +18,8 @@\n \n package org.apache.jmeter.threads;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Map;\n@@ -84,7 +86,7 @@\n     // List of active threads\n     private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();\n     \n-    private final transient Object addThreadLock = new Object();\n+    private transient Object addThreadLock = new Object();\n \n     /**\n      * Is test (still) running?\n@@ -323,6 +325,15 @@ private JMeterThread startNewThread(ListenerNotifier notifier, ListedHashTree th\n         newThread.start();\n         return jmThread;\n     }\n+    \n+    /*\n+     * Fix NPE for addThreadLock transient object in remote mode (BZ60829)\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        addThreadLock = new Object();\n+    }\n+    \n     /**\n      * Register Thread when it starts\n      * @param jMeterThread {@link JMeterThread}",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix sonar error on possible NPE by enforcing collection does not contain null values\nAdd Tests \n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1785447 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6dca17fa9be340e6fa8fb4c538c28a34d2587249",
        "commit": "https://github.com/apache/jmeter/commit/f62911e5f18c89aa8d27c945645ab9a5243e0b87",
        "parent": "https://github.com/apache/jmeter/commit/e8595cb202799a9f0929741ba81f9a3f68f7cc01",
        "bug_id": "jmeter_34",
        "file": [
            {
                "sha": "94603e471451b34d4f2b493184f61e6628f74be3",
                "filename": "src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f62911e5f18c89aa8d27c945645ab9a5243e0b87/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f62911e5f18c89aa8d27c945645ab9a5243e0b87/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "status": "modified",
                "changes": 21,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/RegexFunction.java?ref=f62911e5f18c89aa8d27c945645ab9a5243e0b87",
                "patch": "@@ -30,15 +30,15 @@\n import org.apache.jmeter.samplers.Sampler;\n import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.Logger;\n import org.apache.oro.text.MalformedCachePatternException;\n import org.apache.oro.text.regex.MatchResult;\n import org.apache.oro.text.regex.Pattern;\n import org.apache.oro.text.regex.PatternMatcher;\n import org.apache.oro.text.regex.PatternMatcherInput;\n import org.apache.oro.text.regex.Perl5Compiler;\n import org.apache.oro.text.regex.Util;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n /**\n  * Implements regular expression parsing of sample results and variables\n  * @since 1.X\n@@ -157,15 +157,17 @@ public String execute(SampleResult previousResult, Sampler currentSampler)\n             PatternMatcherInput input = new PatternMatcherInput(textToMatch);\n             while (matcher.contains(input, searchPattern)) {\n                 MatchResult match = matcher.getMatch();\n-                collectAllMatches.add(match);\n+                if(match != null) {\n+                    collectAllMatches.add(match);\n+                } \n             }\n         } finally {\n             if (name.length() > 0){\n                 vars.put(name + \"_matchNr\", Integer.toString(collectAllMatches.size())); //$NON-NLS-1$\n             }\n         }\n \n-        if (collectAllMatches.size() == 0) {\n+        if (collectAllMatches.isEmpty()) {\n             return defaultValue;\n         }\n \n@@ -188,25 +190,24 @@ public String execute(SampleResult previousResult, Sampler currentSampler)\n         } else {\n             try {\n                 int index = Integer.parseInt(valueIndex) - 1;\n+                if(index >= collectAllMatches.size()) {\n+                    return defaultValue;\n+                }\n                 MatchResult result = collectAllMatches.get(index);\n                 return generateResult(result, name, tmplt, vars);\n             } catch (NumberFormatException e) {\n                 float ratio = Float.parseFloat(valueIndex);\n                 MatchResult result = collectAllMatches\n                         .get((int) (collectAllMatches.size() * ratio + .5) - 1);\n                 return generateResult(result, name, tmplt, vars);\n-            } catch (IndexOutOfBoundsException e) {\n-                return defaultValue;\n             }\n         }\n \n     }\n \n     private void saveGroups(MatchResult result, String namep, JMeterVariables vars) {\n-        if (result != null) {\n-            for (int x = 0; x < result.groups(); x++) {\n-                vars.put(namep + \"_g\" + x, result.group(x)); //$NON-NLS-1$\n-            }\n+        for (int x = 0; x < result.groups(); x++) {\n+            vars.put(namep + \"_g\" + x, result.group(x)); //$NON-NLS-1$\n         }\n     }\n ",
                "deletions": 10
            },
            {
                "sha": "b1cfd9eb415ee92ab30229fbdb699aa4dd67c1f4",
                "filename": "test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f62911e5f18c89aa8d27c945645ab9a5243e0b87/test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f62911e5f18c89aa8d27c945645ab9a5243e0b87/test/src/org/apache/jmeter/functions/TestRegexFunction.java",
                "status": "modified",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/functions/TestRegexFunction.java?ref=f62911e5f18c89aa8d27c945645ab9a5243e0b87",
                "patch": "@@ -350,6 +350,52 @@ public void testVariableExtraction3() throws Exception {\n             String match = variable.execute(result, null);\n             assertEquals(\"_pinposition2\", match);\n         }\n+        \n+        @Test\n+        public void testExtractionIndexTooHigh() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<value field=\\\"(pinposition\\\\d+)\\\">(\\\\d+)</value>\"));\n+            params.add(new CompoundVariable(\"_$1$\"));\n+            params.add(new CompoundVariable(\"10\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"No Value Found\", match);\n+        }\n+        \n+        @Test\n+        public void testRandomExtraction() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<company-xmlext-query-ret>(.+?)</company-xmlext-query-ret>\"));\n+            params.add(new CompoundVariable(\"$1$\"));\n+            params.add(new CompoundVariable(\"RAND\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"<row>\" + \"<value field=\\\"RetCode\\\">\" + \"LIS_OK</value><value\"\n+                    + \" field=\\\"RetCodeExtension\\\"></value>\" + \"<value field=\\\"alias\\\"></value><value\"\n+                    + \" field=\\\"positioncount\\\"></value>\" + \"<value field=\\\"invalidpincount\\\">0</value><value\"\n+                    + \" field=\\\"pinposition1\\\">1</value><value\" + \" field=\\\"pinpositionvalue1\\\"></value><value\"\n+                    + \" field=\\\"pinposition2\\\">5</value><value\" + \" field=\\\"pinpositionvalue2\\\"></value><value\"\n+                    + \" field=\\\"pinposition3\\\">6</value><value\" + \" field=\\\"pinpositionvalue3\\\"></value>\"\n+                    + \"</row>\", match);\n+        }\n+        \n+        \n+        @Test(expected=NumberFormatException.class)\n+        public void testExtractionIndexNotNumeric() throws Exception {\n+            params = new LinkedList<>();\n+            params.add(new CompoundVariable(\"<value field=\\\"(pinposition\\\\d+)\\\">(\\\\d+)</value>\"));\n+            params.add(new CompoundVariable(\"_$1$\"));\n+            params.add(new CompoundVariable(\"0.333a\"));\n+            params.add(new CompoundVariable(\"\"));\n+            params.add(new CompoundVariable(\"No Value Found\"));\n+            variable.setParameters(params);\n+            String match = variable.execute(result, null);\n+            assertEquals(\"No Value Found\", match);\n+        }\n \n         @Test\n         public void testVariableExtraction4() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 55694 - Assertions and Extractors : Avoid NullPointerException when scope is variable and variable is missing\nBugzilla Id: 55694\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1542394 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4a087408eca851b2fb06ae58ad94c8476a1d2b6f",
        "commit": "https://github.com/apache/jmeter/commit/ce517951fb937169b10280a4d87af3c8bbcaecea",
        "parent": "https://github.com/apache/jmeter/commit/02c80f52c5235cad6f97c855f7d06c953128952b",
        "bug_id": "jmeter_35",
        "file": [
            {
                "sha": "b10524ff383390bfd75dd116763f84762b2c2363",
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -22,6 +22,7 @@\n import java.net.URL;\n import java.util.ArrayList;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedAssertion;\n import org.apache.jmeter.testelement.property.CollectionProperty;\n@@ -334,7 +335,7 @@ private AssertionResult evaluateResponse(SampleResult response) {\n             log.debug(\"Type:\" + (contains?\"Contains\":\"Match\") + (notTest? \"(not)\": \"\"));\n         }\n \n-        if (toCheck.length() == 0) {\n+        if (StringUtils.isEmpty(toCheck)) {\n             if (notTest) { // Not should always succeed against an empty result\n                 return result;\n             }",
                "deletions": 1
            },
            {
                "sha": "2ba1c9ae4bcd799bc19f3e3954f91f55a88a0b8c",
                "filename": "src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/assertions/XPathAssertion.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/XPathAssertion.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -24,6 +24,7 @@\n \n import javax.xml.parsers.ParserConfigurationException;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedAssertion;\n import org.apache.jmeter.testelement.property.BooleanProperty;\n@@ -78,12 +79,15 @@ public AssertionResult getResult(SampleResult response) {\n \n         try {\n             if (isScopeVariable()){\n-                responseData = getThreadContext().getVariables().get(getVariableName()).getBytes(\"UTF-8\");\n+                String inputString=getThreadContext().getVariables().get(getVariableName());\n+                if(!StringUtils.isEmpty(inputString)) {\n+                    responseData = inputString.getBytes(\"UTF-8\");\n+                } \n             } else {\n                 responseData = response.getResponseData();\n             }\n             \n-            if (responseData.length == 0) {\n+            if (responseData == null || responseData.length == 0) {\n                 return result.setResultForNull();\n             }\n     ",
                "deletions": 2
            },
            {
                "sha": "35e980bf9baae6d65d2b2af0b0ddf0517a034a2a",
                "filename": "src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/HtmlExtractor.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/HtmlExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -20,8 +20,10 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.jmeter.processor.PostProcessor;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.testelement.AbstractScopedTestElement;\n@@ -179,7 +181,14 @@ private String getCorrectMatch(List<String> matches, int entry) {\n         List<String> result = new ArrayList<String>();\n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n-            getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, \"-1\");\n+            if(!StringUtils.isEmpty(inputString)) {\n+                getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, \"-1\");\n+            } else {\n+                if(inputString==null) {\n+                    log.warn(\"No variable '\"+getVariableName()+\"' found to process by Css/JQuery Extractor '\"+getName()+\"', skipping processing\");\n+                }\n+                return Collections.emptyList();\n+            } \n         } else {\n             List<SampleResult> sampleList = getSampleList(previousResult);\n             int i=0;",
                "deletions": 1
            },
            {
                "sha": "e8f78a14edf0f14ca0e06c0d8e77def541a1048c",
                "filename": "src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/RegexExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -196,7 +196,7 @@ private String getInputString(SampleResult result) {\n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n             if(inputString == null) {\n-                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor \"+getName()+\", skipping processing\");\n+                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor '\"+getName()+\"', skipping processing\");\n                 return Collections.emptyList();\n             }\n             matchStrings(matchNumber, matcher, pattern, matches, found,",
                "deletions": 1
            },
            {
                "sha": "a767dcb3ccbb780c6791cd55c1016bbc7821f657",
                "filename": "src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/XPathExtractor.java?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -128,8 +128,14 @@ public void process() {\n         try{\n             if (isScopeVariable()){\n                 String inputString=vars.get(getVariableName());\n-                Document d =  parseResponse(inputString);\n-                getValuesForXPath(d,getXPathQuery(),matches);\n+                if(inputString != null) {\n+                    if(inputString.length()>0) {\n+                        Document d =  parseResponse(inputString);\n+                        getValuesForXPath(d,getXPathQuery(),matches);\n+                    }\n+                } else {\n+                    log.warn(\"No variable '\"+getVariableName()+\"' found to process by XPathExtractor '\"+getName()+\"', skipping processing\");\n+                }\n             } else {\n                 List<SampleResult> samples = getSampleList(previousResult);\n                 for (SampleResult res : samples) {",
                "deletions": 2
            },
            {
                "sha": "00d15e053da3152e5ec4e1fa86349e020eb7ef3b",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/ce517951fb937169b10280a4d87af3c8bbcaecea/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/ce517951fb937169b10280a4d87af3c8bbcaecea/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ce517951fb937169b10280a4d87af3c8bbcaecea",
                "patch": "@@ -146,7 +146,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n-<li><bugzilla>55694</bugzilla> - java.lang.NullPointerException if Apply to is set to a missing JMeter variable</li>\n+<li><bugzilla>55694</bugzilla> - Assertions and Extractors : Avoid NullPointerException when scope is variable and variable is missing</li>\n <li><bugzilla>55721</bugzilla> - HTTP Cache Manager - no-store directive is wrongly interpreted</li>\n </ul>\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 55694 - java.lang.NullPointerException if Apply to is set to a missing JMeter variable\nBugzilla Id: 55694\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1535130 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 154e4d151ed30a38f817bc1dab449b448834d9da",
        "commit": "https://github.com/apache/jmeter/commit/b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
        "parent": "https://github.com/apache/jmeter/commit/89fde367e8952ea82b650825981324742a00cb11",
        "bug_id": "jmeter_36",
        "file": [
            {
                "sha": "e74b6fcc5d5de4b10e82c3c3feff3456fbfc8658",
                "filename": "src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/src/components/org/apache/jmeter/extractor/RegexExtractor.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/RegexExtractor.java?ref=b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.commons.lang3.StringEscapeUtils;\n@@ -194,6 +195,10 @@ private String getInputString(SampleResult result) {\n \n         if (isScopeVariable()){\n             String inputString=vars.get(getVariableName());\n+            if(inputString == null) {\n+                log.warn(\"No variable '\"+getVariableName()+\"' found to process by RegexExtractor \"+getName()+\", skipping processing\");\n+                return Collections.emptyList();\n+            }\n             matchStrings(matchNumber, matcher, pattern, matches, found,\n                     inputString);\n         } else {",
                "deletions": 0
            },
            {
                "sha": "1126545b62048af886492d422416c8dbcdf030f8",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b9f9c71f146a34fd72155d0d44b948f48ebd47ca/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b9f9c71f146a34fd72155d0d44b948f48ebd47ca",
                "patch": "@@ -145,6 +145,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n+<li><bugzilla>55694</bugzilla> - java.lang.NullPointerException if Apply to is set to a missing JMeter variable</li>\n </ul>\n \n <h3>Functions</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 55655 - NullPointerException when Remote stopping /shutdown all if one engine did not start correctly\nBugzilla Id: 55655\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1532699 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bc88481eb38ac919b92eb7026e802b4d724033bd",
        "commit": "https://github.com/apache/jmeter/commit/a560b03d22f589fc66df260dd3520b830d0f0b70",
        "parent": "https://github.com/apache/jmeter/commit/3447782ea5ccca5018c7aa331098062f206b06fe",
        "bug_id": "jmeter_37",
        "file": [
            {
                "sha": "52d1de7bce56ab4f4aea5e6b81ff39c51db633de",
                "filename": "src/core/org/apache/jmeter/gui/action/RemoteStart.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a560b03d22f589fc66df260dd3520b830d0f0b70/src/core/org/apache/jmeter/gui/action/RemoteStart.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a560b03d22f589fc66df260dd3520b830d0f0b70/src/core/org/apache/jmeter/gui/action/RemoteStart.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/RemoteStart.java?ref=a560b03d22f589fc66df260dd3520b830d0f0b70",
                "patch": "@@ -127,7 +127,10 @@ private void doRemoteStopAll(boolean now) {\n     private void doRemoteStop(String name, boolean now) {\n         GuiPackage.getInstance().getMainFrame().showStoppingMessage(name);\n         JMeterEngine engine = remoteEngines.get(name);\n-        engine.stopTest(now);\n+        // Engine may be null if it has not correctly started\n+        if(engine != null) {\n+            engine.stopTest(now);\n+        }\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "0c5f060310b0c14c0a6ddba7a9a7dc095d731bd3",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/a560b03d22f589fc66df260dd3520b830d0f0b70/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/a560b03d22f589fc66df260dd3520b830d0f0b70/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=a560b03d22f589fc66df260dd3520b830d0f0b70",
                "patch": "@@ -419,6 +419,7 @@ If you use any plugin or third-party code that depends on it, you need to add it\n <li><bugzilla>55572</bugzilla> - Detail popup of parameter does not show a Scrollbar when content exceeds display</li>\n <li><bugzilla>55580</bugzilla> -  Help pane does not scroll to start for &lt;a href=\"#\"&gt; links</li>\n <li><bugzilla>55600</bugzilla> - JSyntaxTextArea : Strange behaviour on first undo</li>\n+<li><bugzilla>55655</bugzilla> - NullPointerException when Remote stopping /shutdown all if one engine did not start correctly. Contributed by UBIK Load Pack (support at ubikloadpack.com)</li>\n </ul>\n \n <!-- =================== Improvements =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Guard against NPE, as getGui can return null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1783504 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 11ad9bbbbbcb5381f5910ed7f8e7b3ff6a19232a",
        "commit": "https://github.com/apache/jmeter/commit/3f6573583c38380c41c14c966ce6c7fefdc5c7d3",
        "parent": "https://github.com/apache/jmeter/commit/96cbb8c4e027b8097996884a404072e0b13b42c3",
        "bug_id": "jmeter_38",
        "file": [
            {
                "sha": "d458ba132d4fa017560d7b82a53df2980c207015",
                "filename": "src/core/org/apache/jmeter/gui/GuiPackage.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3f6573583c38380c41c14c966ce6c7fefdc5c7d3/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3f6573583c38380c41c14c966ce6c7fefdc5c7d3/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/GuiPackage.java?ref=3f6573583c38380c41c14c966ce6c7fefdc5c7d3",
                "patch": "@@ -274,6 +274,10 @@ public JMeterGUIComponent getCurrentGui() {\n             updateCurrentNode();\n             TestElement curNode = treeListener.getCurrentNode().getTestElement();\n             JMeterGUIComponent comp = getGui(curNode);\n+            if (comp == null) {\n+                log.debug(\"No Component found for {}.\", treeListener.getCurrentNode().getName());\n+                return null;\n+            }\n             comp.clearGui();\n             log.debug(\"Updating gui to new node\");\n             comp.configure(curNode);\n@@ -419,6 +423,10 @@ public void refreshCurrentGui() {\n         currentNode = treeListener.getCurrentNode();\n         TestElement element = currentNode.getTestElement();\n         JMeterGUIComponent comp = getGui(element);\n+        if (comp == null) {\n+            log.debug(\"No component found for {}\", currentNode.getName());\n+            return;\n+        }\n         comp.configure(element);\n         currentNodeUpdated = false;\n     }\n@@ -434,6 +442,10 @@ public void updateCurrentNode() {\n             if (currentNode != null && !currentNodeUpdated) {\n                 log.debug(\"Updating current node \" + currentNode.getName());\n                 JMeterGUIComponent comp = getGui(currentNode.getTestElement());\n+                if (comp == null) {\n+                    log.debug(\"No component found for {}\", currentNode.getName());\n+                    return;\n+                }\n                 TestElement el = currentNode.getTestElement();\n                 int before = 0;\n                 int after = 0;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if init of resolver fails\nAdd Test cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1780852 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d258c32ae5264f87af956a393a908e3ba9e8e05b",
        "commit": "https://github.com/apache/jmeter/commit/c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
        "parent": "https://github.com/apache/jmeter/commit/59b162c9d2d9167113dfeabc66931b79edb70a05",
        "bug_id": "jmeter_39",
        "file": [
            {
                "sha": "5db9bd6d4578d4d07e68c4df7055c1b467f1d791",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java",
                "status": "modified",
                "changes": 135,
                "additions": 89,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java?ref=c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
                "patch": "@@ -61,34 +61,36 @@\n \n     private static final Logger log = LoggingManager.getLoggerForClass();\n \n-    private transient SystemDefaultDnsResolver systemDefaultDnsResolver = null;\n-\n-    private Map<String, InetAddress[]> cache = null;\n-\n-    private transient Resolver resolver = null;\n+    public static final boolean DEFAULT_CLEAR_CACHE_EACH_ITER = false;\n \n     //++ JMX tag values\n-    public static final String CLEAR_CACHE_EACH_ITER = \"DNSCacheManager.clearEachIteration\"; // $NON-NLS-1$\n+    private static final String CLEAR_CACHE_EACH_ITER = \"DNSCacheManager.clearEachIteration\"; // $NON-NLS-1$\n \n-    public static final String SERVERS = \"DNSCacheManager.servers\"; // $NON-NLS-1$\n+    private static final String SERVERS = \"DNSCacheManager.servers\"; // $NON-NLS-1$\n \n-    public static final String IS_CUSTOM_RESOLVER = \"DNSCacheManager.isCustomResolver\"; // $NON-NLS-1$\n+    private static final String IS_CUSTOM_RESOLVER = \"DNSCacheManager.isCustomResolver\"; // $NON-NLS-1$\n     //-- JMX tag values\n \n-    public static final boolean DEFAULT_CLEAR_CACHE_EACH_ITER = false;\n+    private static final boolean DEFAULT_IS_CUSTOM_RESOLVER = false;\n \n-    public static final String DEFAULT_SERVERS = \"\"; // $NON-NLS-1$\n+    private final transient Cache lookupCache;\n \n-    public static final boolean DEFAULT_IS_CUSTOM_RESOLVER = false;\n+    private final transient SystemDefaultDnsResolver systemDefaultDnsResolver;\n \n-    private final transient Cache lookupCache;\n+    private final Map<String, InetAddress[]> cache;\n+\n+    transient Resolver resolver;\n \n     private transient int timeoutMs;\n \n+    transient boolean initFailed;\n+\n     // ensure that the initial DNSServers are copied to the per-thread instances\n \n     public DNSCacheManager() {\n         setProperty(new CollectionProperty(SERVERS, new ArrayList<String>()));\n+        this.systemDefaultDnsResolver = new SystemDefaultDnsResolver();\n+        this.cache = new LinkedHashMap<>();\n         //disabling cache\n         lookupCache = new Cache();\n         lookupCache.setMaxCache(0);\n@@ -101,8 +103,14 @@ public DNSCacheManager() {\n     @Override\n     public Object clone() {\n         DNSCacheManager clone = (DNSCacheManager) super.clone();\n-        clone.systemDefaultDnsResolver = new SystemDefaultDnsResolver();\n-        clone.cache = new LinkedHashMap<>();\n+        clone.resolver = createResolver();\n+        return clone;\n+    }\n+\n+    /**\n+     * @return {@link Resolver}\n+     */\n+    private Resolver createResolver() {\n         CollectionProperty dnsServers = getServers();\n         try {\n             String[] serverNames = new String[dnsServers.size()];\n@@ -111,16 +119,20 @@ public Object clone() {\n                 serverNames[index] = jMeterProperty.getStringValue();\n                 index++;\n             }\n-            clone.resolver = new ExtendedResolver(serverNames);\n-            log.debug(\"Using DNS Resolvers: \"\n-                    + Arrays.asList(((ExtendedResolver) clone.resolver)\n-                            .getResolvers()));\n+            ExtendedResolver resolver = new ExtendedResolver(serverNames);\n+            if(log.isDebugEnabled()) {\n+                log.debug(\"Using DNS Resolvers: \"\n+                        + Arrays.asList(((ExtendedResolver) resolver)\n+                                .getResolvers()));\n+            }\n             // resolvers will be chosen via round-robin\n-            ((ExtendedResolver) clone.resolver).setLoadBalance(true);\n+            resolver.setLoadBalance(true);\n+            return resolver;\n         } catch (UnknownHostException uhe) {\n+            this.initFailed = true;\n             log.warn(\"Failed to create Extended resolver: \" + uhe.getMessage());\n+            return null;\n         }\n-        return clone;\n     }\n \n     /**\n@@ -129,12 +141,19 @@ public Object clone() {\n      */\n     @Override\n     public InetAddress[] resolve(String host) throws UnknownHostException {\n-        if (cache.containsKey(host)) {\n+        InetAddress[] result = cache.get(host);\n+        // cache may contain\n+        // A return value of null does not necessarily \n+        // indicate that the map contains no mapping \n+        // for the key; it's also possible that the map \n+        // explicitly maps the key to null\n+        // https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html\n+        if (result != null || cache.containsKey(host)) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Cache hit thr#\" + JMeterContextService.getContext().getThreadNum() + \": \" + host + \"=>\"\n-                        + Arrays.toString(cache.get(host)));\n+                        + Arrays.toString(result));\n             }\n-            return cache.get(host);\n+            return result;\n         } else {\n             InetAddress[] addresses = requestLookup(host);\n             if (log.isDebugEnabled()) {\n@@ -148,38 +167,59 @@ public Object clone() {\n \n     /**\n      * Sends DNS request via system or custom DNS resolver\n+     * @param host\n+     * @return array of {@link InetAddress} or null if lookup did not return result\n      */\n     private InetAddress[] requestLookup(String host) throws UnknownHostException {\n         InetAddress[] addresses = null;\n-        if (isCustomResolver() && ((ExtendedResolver) resolver).getResolvers().length > 0) {\n-            try {\n-                Lookup lookup = new Lookup(host, Type.A);\n-                lookup.setCache(lookupCache);\n-                if (timeoutMs > 0) {\n-                    resolver.setTimeout(timeoutMs / 1000, timeoutMs % 1000);\n-                }\n-                lookup.setResolver(resolver);\n-                Record[] records = lookup.run();\n-                if (records == null || records.length == 0) {\n-                    throw new UnknownHostException(\"Failed to resolve host name: \" + host);\n-                }\n-                addresses = new InetAddress[records.length];\n-                for (int i = 0; i < records.length; i++) {\n-                    addresses[i] = ((ARecord) records[i]).getAddress();\n+        if (isCustomResolver()) {\n+            if (getResolver() != null) {\n+                if(getResolver().getResolvers().length > 0) {\n+                    try {\n+                        Lookup lookup = new Lookup(host, Type.A);\n+                        lookup.setCache(lookupCache);\n+                        if (timeoutMs > 0) {\n+                            resolver.setTimeout(timeoutMs / 1000, timeoutMs % 1000);\n+                        }\n+                        lookup.setResolver(resolver);\n+                        Record[] records = lookup.run();\n+                        if (records == null || records.length == 0) {\n+                            throw new UnknownHostException(\"Failed to resolve host name: \" + host);\n+                        }\n+                        addresses = new InetAddress[records.length];\n+                        for (int i = 0; i < records.length; i++) {\n+                            addresses[i] = ((ARecord) records[i]).getAddress();\n+                        }\n+                    } catch (TextParseException tpe) {\n+                        log.debug(\"Failed to create Lookup object: \" + tpe);\n+                    }\n+                    return addresses;\n                 }\n-            } catch (TextParseException tpe) {\n-                log.debug(\"Failed to create Lookup object: \" + tpe);\n-            }\n-        } else {\n-            addresses = systemDefaultDnsResolver.resolve(host);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Cache miss: \" + host + \" Thread #\" + JMeterContextService.getContext().getThreadNum()\n-                        + \", resolved with system resolver into \" + Arrays.toString(addresses));\n+            } else {\n+                throw new UnknownHostException(\"Could not resolve host:\"+host\n+                        +\", failed to initialize resolver\"\n+                        + \" or no resolver found\");\n             }\n         }\n+        addresses = systemDefaultDnsResolver.resolve(host);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Cache miss: \" + host + \" Thread #\" + JMeterContextService.getContext().getThreadNum()\n+                    + \", resolved with system resolver into \" + Arrays.toString(addresses));\n+        }\n         return addresses;\n     }\n \n+    /**\n+     * Tries to initialize resolver , otherwise sets initFailed to true\n+     * @return ExtendedResolver if init succeeded or null otherwise\n+     */\n+    private ExtendedResolver getResolver() {\n+        if(resolver == null && !initFailed) {\n+            resolver = createResolver();\n+        }\n+        return (ExtendedResolver) resolver;\n+    }\n+\n     /**\n      * {@inheritDoc} Clean DNS cache if appropriate check-box was selected\n      */\n@@ -197,6 +237,9 @@ public void testIterationStart(LoopIterationEvent event) {\n     public void clear() {\n         super.clear();\n         clearServers(); // ensure data is set up OK initially\n+        this.cache.clear();\n+        this.initFailed = false;\n+        this.resolver = null;\n     }\n \n     /**",
                "deletions": 46
            },
            {
                "sha": "7966b3cb23fead8e1560d82d795d976d25d63122",
                "filename": "test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c51aef45986d5e0e3199ff402377dcc1a6e8b53e/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java",
                "status": "modified",
                "changes": 107,
                "additions": 104,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java?ref=c51aef45986d5e0e3199ff402377dcc1a6e8b53e",
                "patch": "@@ -20,18 +20,92 @@\n \n import static org.junit.Assert.fail;\n \n+import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import org.apache.jmeter.junit.JMeterTestCase;\n+import org.junit.Assert;\n import org.junit.Test;\n+import org.xbill.DNS.ExtendedResolver;\n \n public class TestDNSCacheManager extends JMeterTestCase {\n-\n+    private static final String INVALID_DNS_SERVER = \"8.8.8.8.9\"; //$NON-NLS-1$\n+    \n+    private static final String VALID_DNS_SERVER = \"8.8.8.8\"; //$NON-NLS-1$\n+    @Test\n+    public void testWithCustomResolverAnd1WrongServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.addServer(INVALID_DNS_SERVER);\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            fail(\"Should have failed as DNS server does not exist\");\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            Assert.assertTrue(original.initFailed);\n+        }\n+        \n+        try {\n+            original.resolve(\"www.apache.org\");\n+            fail(\"Should have failed as DNS server does not exist\");\n+            // OK\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            Assert.assertTrue(original.initFailed);\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAnd1Server() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.addServer(VALID_DNS_SERVER);\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            Assert.assertNotNull(original.resolver);\n+            Assert.assertTrue(((ExtendedResolver)original.resolver).getResolvers().length==1);\n+            // OK\n+        } catch (UnknownHostException e) {\n+            fail(\"System DNS server should have been used\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAndNoServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(true);\n+        original.setTimeoutMs(100);\n+        try {\n+            // This will use Default System DNS resolver\n+            original.resolve(\"jmeter.apache.org\");\n+            Assert.assertNotNull(original.resolver);\n+            Assert.assertTrue(((ExtendedResolver)original.resolver).getResolvers().length==0);\n+        } catch (UnknownHostException e) {\n+            fail(\"Should have failed as no DNS server provided\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testWithCustomResolverAndInvalidNameserver() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(true);\n+        original.addServer(INVALID_DNS_SERVER);\n+        original.setTimeoutMs(100);\n+        try {\n+            original.resolve(\"jmeter.apache.org\");\n+            fail();\n+        } catch (UnknownHostException e) {\n+            // OK\n+        }\n+    }\n+    \n     @Test\n     public void testCloneWithCustomResolverAndInvalidNameserver() throws UnknownHostException {\n         DNSCacheManager original = new DNSCacheManager();\n         original.setCustomResolver(true);\n-        original.addServer(\"127.0.0.99\");\n+        original.addServer(INVALID_DNS_SERVER);\n         DNSCacheManager clone = (DNSCacheManager) original.clone();\n         clone.setTimeoutMs(100);\n         try {\n@@ -41,5 +115,32 @@ public void testCloneWithCustomResolverAndInvalidNameserver() throws UnknownHost\n             // OK\n         }\n     }\n-\n+    \n+    @Test\n+    public void testResolveExistingHostWithSystemDefaultDnsServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(false);\n+        try {\n+            InetAddress[] result = original.resolve(\"www.example.org\");\n+            Assert.assertNotNull(result);\n+            Assert.assertNull(original.resolver);\n+            // IPv4 and IPv6\n+            Assert.assertTrue(result.length == 2);\n+        } catch (UnknownHostException e) {\n+            Assert.fail(\"Should not have failed\");\n+        }\n+    }\n+    \n+    @Test\n+    public void testResolveNonExistingHostWithSystemDefaultDnsServer() throws UnknownHostException {\n+        DNSCacheManager original = new DNSCacheManager();\n+        original.setCustomResolver(false);\n+        try {\n+            original.resolve(\"jmeterxxx.apache.org\");\n+            fail();\n+        } catch (UnknownHostException e) {\n+            Assert.assertNull(original.resolver);\n+            // OK\n+        }\n+    }\n }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 53511 - access log sampler SessionFilter throws NullPointerException - cookie manager not initialized properly \nBugzilla Id: 53511\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1363120 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fb5af5343ba0324c904ae2896e939f7628789d4a",
        "commit": "https://github.com/apache/jmeter/commit/468df6be21c02f51d14c248ed2c79564d208e5dd",
        "parent": "https://github.com/apache/jmeter/commit/46fbdf4fa45bb6f9e578020a75f8ca0c16502fa9",
        "bug_id": "jmeter_40",
        "file": [
            {
                "sha": "49f5de32fe4f90ec856ee0293694459e7c6c8dca",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/468df6be21c02f51d14c248ed2c79564d208e5dd/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/468df6be21c02f51d14c248ed2c79564d208e5dd/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java?ref=468df6be21c02f51d14c248ed2c79564d208e5dd",
                "patch": "@@ -174,6 +174,7 @@ protected CookieManager getCookieManager(String ipAddr)\n             if(cm == null)\n             {\n                 cm = new CookieManager();\n+                cm.testStarted();\n                 cookieManagers.put(ipAddr,cm);\n             }\n             while(managersInUse.contains(cm))",
                "deletions": 0
            },
            {
                "sha": "4b39f6c970019f3ed6e99cfeae75434c4ff5d0ce",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/468df6be21c02f51d14c248ed2c79564d208e5dd/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/468df6be21c02f51d14c248ed2c79564d208e5dd/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=468df6be21c02f51d14c248ed2c79564d208e5dd",
                "patch": "@@ -83,6 +83,7 @@ JSR223 Test Elements using Script file are now Compiled if ScriptEngine supports\n <li><bugzilla>53348</bugzilla> - JMeter JMS Point-to-Point Request-Response sampler doesn't work when Request-queue and Receive-queue are different</li>\n <li><bugzilla>53357</bugzilla> - JMS Point to Point reports too high response times in Request Response Mode</li>\n <li><bugzilla>53440</bugzilla> - SSL connection leads to ArrayStoreException on JDK 6 with some KeyManagerFactory SPI</li>\n+<li><bugzilla>53511</bugzilla> - access log sampler SessionFilter throws NullPointerException - cookie manager not initialized properly</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 50898 - IncludeController : NullPointerException loading script in non-GUI mode if Includers use same element name\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1340884 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5a08bc56bfb5f6ac639cac6ed7af0d389777c522",
        "commit": "https://github.com/apache/jmeter/commit/e85857087309112b11a7002f82b815bf9dddc469",
        "parent": "https://github.com/apache/jmeter/commit/5a1f19009723aa2f726e3b3c424c506b7a724530",
        "bug_id": "jmeter_41",
        "file": [
            {
                "sha": "a2fdac7e708d253aca081d76bfd68a81dd7d6f9f",
                "filename": "build.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/e85857087309112b11a7002f82b815bf9dddc469/build.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/e85857087309112b11a7002f82b815bf9dddc469/build.xml",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/build.xml?ref=e85857087309112b11a7002f82b815bf9dddc469",
                "patch": "@@ -2212,11 +2212,9 @@ run JMeter unless all the JMeter jars are added.\n   \t      <param name=\"batchtest.name\" value=\"Bug52968\"/>\n   \t  </antcall>\n   \t\n-  <!-- TODO fix bug so test passes\n       <antcall target=\"batchtest\">\n           <param name=\"batchtest.name\" value=\"Bug50898\"/>\n       </antcall>\n-  -->\n   </target>\n \n   <!-- Run all batch tests; used by test target -->",
                "deletions": 2
            },
            {
                "sha": "f304c0701a2410fa1bf3a40cf4ecdbc43ccacd2f",
                "filename": "src/components/org/apache/jmeter/control/IncludeController.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e85857087309112b11a7002f82b815bf9dddc469/src/components/org/apache/jmeter/control/IncludeController.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e85857087309112b11a7002f82b815bf9dddc469/src/components/org/apache/jmeter/control/IncludeController.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/IncludeController.java?ref=e85857087309112b11a7002f82b815bf9dddc469",
                "patch": "@@ -63,6 +63,13 @@ public IncludeController() {\n         super();\n     }\n \n+    // Bug 50898 - work round the problem just for Include Controllers for now.\n+    // Can be removed if the AbstractTestElement#equals(Object o) method is fixed.\n+    @Override\n+    public boolean equals(Object obj) {\n+        return this == obj;\n+    }\n+\n     @Override\n     public Object clone() {\n         // TODO - fix so that this is only called once per test, instead of at every clone",
                "deletions": 0
            },
            {
                "sha": "14be663b31a11d0bf523957e2cbfb44db1a35eb4",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/e85857087309112b11a7002f82b815bf9dddc469/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/e85857087309112b11a7002f82b815bf9dddc469/xdocs/changes.xml",
                "status": "modified",
                "changes": 7,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=e85857087309112b11a7002f82b815bf9dddc469",
                "patch": "@@ -130,12 +130,6 @@ New interface org.apache.jmeter.engine.util.ConfigMergabilityIndicator has been\n \n <h2>Known bugs</h2>\n \n-<p>\n-The Include Controller has some problems in non-GUI mode (see Bug 50898). \n-In particular, it can cause a NullPointerException if there are two include controllers with the same name.\n-The workaround is to use different names for IncludeControllers\n-</p>\n-\n <p>The Once Only controller behaves correctly under a Thread Group or Loop Controller,\n but otherwise its behaviour is not consistent (or clearly specified).</p>\n \n@@ -200,6 +194,7 @@ When calling \"Clear All\" command, if Log Viewer is displayed its content will be\n <h3>Controllers</h3>\n <ul>\n <li>Bug 52968 - Option Start Next Loop in Thread Group does not mark parent Transaction Sampler in error when an error occurs</li>\n+<li>Bug 50898 - IncludeController : NullPointerException loading script in non-GUI mode if Includers use same element name</li>\n </ul>\n \n <h3>Listeners</h3>",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 50898 - IncludeController : NullPointerException loading script in non-GUI mode \nAdded note on workaround and changed changes.xml comment\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1303690 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2863b99847b6d776ddd471357fe0bca82634b867",
        "commit": "https://github.com/apache/jmeter/commit/910d77eb5a0bdb35afcbd0c78455e3bd2886ec29",
        "parent": "https://github.com/apache/jmeter/commit/c58db58c61eace7ed018896f88f3a7d7a3361e3a",
        "bug_id": "jmeter_42",
        "file": [
            {
                "sha": "d9c6ee94ef6d47c9ccd9e41fd9d6f77646a3b3be",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/910d77eb5a0bdb35afcbd0c78455e3bd2886ec29/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/910d77eb5a0bdb35afcbd0c78455e3bd2886ec29/xdocs/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=910d77eb5a0bdb35afcbd0c78455e3bd2886ec29",
                "patch": "@@ -42,8 +42,9 @@ Earlier changes are detailed in the <a href=\"changes_history.html\">History of Pr\n <h2>Known bugs</h2>\n \n <p>\n-The Include Controller has some problems in non-GUI mode (see Bugs 40671, 41286, 44973, 50898). \n+The Include Controller has some problems in non-GUI mode (see Bug 50898). \n In particular, it can cause a NullPointerException if there are two include controllers with the same name.\n+The workaround is to use different names for IncludeControllers\n </p>\n \n <p>The Once Only controller behaves correctly under a Thread Group or Loop Controller,",
                "deletions": 1
            },
            {
                "sha": "1aa866044a7fe620e5d82cc395f867d68fbf4e56",
                "filename": "xdocs/usermanual/component_reference.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/910d77eb5a0bdb35afcbd0c78455e3bd2886ec29/xdocs/usermanual/component_reference.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/910d77eb5a0bdb35afcbd0c78455e3bd2886ec29/xdocs/usermanual/component_reference.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/usermanual/component_reference.xml?ref=910d77eb5a0bdb35afcbd0c78455e3bd2886ec29",
                "patch": "@@ -2185,6 +2185,9 @@ This element does not support variables/functions in the filename field.<br></br\n However, if the property <b>includecontroller.prefix</b> is defined, \n the contents are used to prefix the pathname.\n </note>\n+<note>\n+When using IncludeController and including the same JMX file, ensure you name the IncludeController differently to avoid facing known issue 50898.\n+</note>\n <p>\n If the file cannot be found at the location given by prefix+filename, then the controller\n attempts to open the fileName relative to the JMX launch directory (versions of JMeter after 2.3.4).",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 52897 - HTTPSampler : Using PUT method with HTTPClient4 and empty Content Encoding and sending files leads to NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1300387 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d6430e48ffc9fea9335240cac2832e8c1f9e94c9",
        "commit": "https://github.com/apache/jmeter/commit/9691d2976940067c199c7152c9980682097887a2",
        "parent": "https://github.com/apache/jmeter/commit/179d6a813cf24739218c5ad9f700b715c51df716",
        "bug_id": "jmeter_43",
        "file": [
            {
                "sha": "c170c288ec6cce938a959407a6392e01ce51415f",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9691d2976940067c199c7152c9980682097887a2/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9691d2976940067c199c7152c9980682097887a2/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 24,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=9691d2976940067c199c7152c9980682097887a2",
                "patch": "@@ -34,6 +34,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.http.Header;\n import org.apache.http.HttpConnection;\n import org.apache.http.HttpConnectionMetrics;\n@@ -1037,7 +1038,7 @@ else if(getSendParameterValuesAsPostBody()) {\n             if(haveContentEncoding) {\n                 putParams.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET,contentEncoding);\n             }\n-\n+            String charset = getCharsetWithDefault(putParams);\n             // Just append all the parameter values, and use that as the post body\n             StringBuilder putBodyContent = new StringBuilder();\n             PropertyIterator args = getArguments().iterator();\n@@ -1056,7 +1057,7 @@ else if(getSendParameterValuesAsPostBody()) {\n                 contentTypeValue = put.getFirstHeader(HEADER_CONTENT_TYPE).getValue();\n             }\n             StringEntity requestEntity = new StringEntity(putBodyContent.toString(), contentTypeValue, \n-                    (String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET));\n+                    (String) charset);\n             put.setEntity(requestEntity);\n         }\n         // Check if we have any content to send for body\n@@ -1067,9 +1068,11 @@ else if(getSendParameterValuesAsPostBody()) {\n                 ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                 put.getEntity().writeTo(bos);\n                 bos.flush();\n+                String charset = getCharsetWithDefault(putParams);\n+\n                 // We get the posted bytes using the charset that was used to create them\n-                putBody.append(new String(bos.toByteArray(),\n-                        (String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET)));\n+                // if none was set, platform encoding will be used\n+                putBody.append(new String(bos.toByteArray(), charset));\n                 bos.close();\n             }\n             else {\n@@ -1090,6 +1093,19 @@ else if(getSendParameterValuesAsPostBody()) {\n         return null;\n     }\n \n+    /**\n+     * If contentEncoding is not set by user, then Platform encoding will be used to convert to String\n+     * @param putParams {@link HttpParams}\n+     * @return String charset\n+     */\n+    protected String getCharsetWithDefault(HttpParams putParams) {\n+        String charset =(String) putParams.getParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET);\n+        if(StringUtils.isEmpty(charset)) {\n+            charset = Charset.defaultCharset().name();\n+        }\n+        return charset;\n+    }\n+\n     private void saveConnectionCookies(HttpResponse method, URL u, CookieManager cookieManager) {\n         if (cookieManager != null) {\n             Header[] hdrs = method.getHeaders(HEADER_SET_COOKIE);",
                "deletions": 4
            },
            {
                "sha": "c7b919935c5fcb5e47a9fa58aa86f8516d7b6f0e",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/9691d2976940067c199c7152c9980682097887a2/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/9691d2976940067c199c7152c9980682097887a2/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9691d2976940067c199c7152c9980682097887a2",
                "patch": "@@ -76,6 +76,7 @@ When doing replacement of User Defined Variables, Proxy will not substitute part\n <li>Bug 52871 - Multiple Certificates not working with HTTP Client 4</li>\n <li>Bug 52885 - Proxy : Recording issues with HTTPS, cookies starting with secure are partly truncated</li>\n <li>Bug 52886 - Proxy : Recording issues with HTTPS when spoofing is on, secure cookies are not always changed</li>\n+<li>Bug 52897 - HTTPSampler : Using PUT method with HTTPClient4 and empty Content Encoding and sending files leads to NullPointerException</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 52789 - Proxy with Regexp Matching can fail with NullPointerException in Value Replacement if value is null \n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294726 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 561a1617923baeb511b154b2b9120dd4f29efe6e",
        "commit": "https://github.com/apache/jmeter/commit/46601999c0d23c60d52a9a60c55585b86b855eac",
        "parent": "https://github.com/apache/jmeter/commit/bdd5f9d6dc5443c8493f96c240b8d08e74c5532e",
        "bug_id": "jmeter_44",
        "file": [
            {
                "sha": "cfe03b0dfe605d7880190f67eed260cf6de0c703",
                "filename": "src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java",
                "blob_url": "https://github.com/apache/jmeter/blob/46601999c0d23c60d52a9a60c55585b86b855eac/src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java",
                "raw_url": "https://github.com/apache/jmeter/raw/46601999c0d23c60d52a9a60c55585b86b855eac/src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java?ref=46601999c0d23c60d52a9a60c55585b86b855eac",
                "patch": "@@ -70,6 +70,9 @@ public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariable\n         Pattern pattern = null;\n         PatternCompiler compiler = new Perl5Compiler();\n         String input = prop.getStringValue();\n+        if(input == null) {\n+            return prop;\n+        }\n         for(Entry<String, String> entry : getVariables().entrySet()){\n             String key = entry.getKey();\n             String value = entry.getValue();",
                "deletions": 0
            },
            {
                "sha": "ac8a505ac71607b502c5b61c822ea05a67bf5208",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/46601999c0d23c60d52a9a60c55585b86b855eac/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/46601999c0d23c60d52a9a60c55585b86b855eac/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=46601999c0d23c60d52a9a60c55585b86b855eac",
                "patch": "@@ -111,6 +111,7 @@ When doing replacement of User Defined Variables, Proxy will not substitute part\n <li>Bug 52762 - Problem with multiples certificates: first index not used until indexes are restarted</li>\n <li>Bug 52741 - TestBeanGUI default values do not work at second time or later</li>\n <li>Bug 52783 - oro.patterncache.size property never used due to early init</li>\n+<li>Bug 52789 - Proxy with Regexp Matching can fail with NullPointerException in Value Replacement if value is null</li>\n </ul>\n \n <!-- =================== Improvements =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fixed NullPointerException when URL is null (supposed to be a file reload)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1201853 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d470573bcc8f699ad6670cc8f0db7288d363703f",
        "commit": "https://github.com/apache/jmeter/commit/71d4ebc98ab601b2bb8592a07947591f156c038c",
        "parent": "https://github.com/apache/jmeter/commit/02577b1b076577a0fca88c12a8e44e994c7b444f",
        "bug_id": "jmeter_45",
        "file": [
            {
                "sha": "68d5a3dfec4716dfea8323313d59d484fce12f83",
                "filename": "src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/71d4ebc98ab601b2bb8592a07947591f156c038c/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/71d4ebc98ab601b2bb8592a07947591f156c038c/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java?ref=71d4ebc98ab601b2bb8592a07947591f156c038c",
                "patch": "@@ -167,9 +167,13 @@ public void addSample(SampleResult sample) {\n                     MonitorModel mo = new MonitorModel(stat);\n                     this.addSample(mo);\n                     notifyListeners(mo);\n-                } else {\n-                    noResponse(surl);\n-                }\n+                } \n+                // This part of code throws NullPointerException\n+                // Don't think Monitor results can be loaded from files\n+                // see https://issues.apache.org/bugzilla/show_bug.cgi?id=51810\n+//                else {\n+//                    noResponse(surl);\n+//                }\n             } else if (((HTTPSampleResult) sample).isMonitor()) {\n                 noResponse(surl);\n             }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 47646 -  NullPointerException in the \"Random Variable\" element\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@801478 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6a6caeec207a08be9408d13646415b483cdf9118",
        "commit": "https://github.com/apache/jmeter/commit/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
        "parent": "https://github.com/apache/jmeter/commit/73903f488b9116fc281c0625c06a015da2d4693a",
        "bug_id": "jmeter_46",
        "file": [
            {
                "sha": "d6d8ac6e14cedb6c80effdd2dd0ff34ba641eb73",
                "filename": "src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/src/components/org/apache/jmeter/config/RandomVariableConfig.java",
                "status": "modified",
                "changes": 22,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/config/RandomVariableConfig.java?ref=ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
                "patch": "@@ -54,15 +54,25 @@\n     private Random globalRandom = null;\n \n     // Used for per-thread/user numbers\n-    private transient ThreadLocal perThreadRandom = new ThreadLocal() {\n-            protected Object initialValue() {\n-                init();\n-                return new Random(getRandomSeedAsLong());\n-            }};\n+    // Cannot be static, as random numbers are not to be shared between instances\n+    private transient ThreadLocal perThreadRandom = initThreadLocal();\n+\n+    private ThreadLocal initThreadLocal() {\n+        return new ThreadLocal() {\n+                protected Object initialValue() {\n+                    init();\n+                    return new Random(getRandomSeedAsLong());\n+                }};\n+    }\n         \n     private int n;\n     private long minimum;\n     \n+    private Object readResolve(){\n+        perThreadRandom = initThreadLocal();\n+        return this;\n+    }\n+    \n     /*\n      * nextInt(n) returns values in the range [0,n),\n      * so n must be set to max-min+1\n@@ -84,6 +94,8 @@ private void init(){\n         }\n         n = (int)rangeL;\n     }\n+    \n+    /** {@inheritDoc} */\n     public void iterationStart(LoopIterationEvent iterEvent) {\n         Random randGen=null;\n         if (getPerThread()){",
                "deletions": 5
            },
            {
                "sha": "d427d8679b4f0f001a968621978f7179329cd010",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ce2dd061b85c37d41c6ddb996ad89e8d7824a6b8",
                "patch": "@@ -97,6 +97,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n \n <h3>General</h3>\n <ul>\n+<li>Bug 47646 -  NullPointerException in the \"Random Variable\" element</li>\n </ul>\n \n <!-- ==================================================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE try 3\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737314 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 47c4e89d2de5e58182c0c152c678988deeb7f7a3",
        "commit": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "parent": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "bug_id": "jmeter_47",
        "file": [
            {
                "sha": "1b05ccbd56a24c1a70a636e9e28b1e9a9d873b36",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/7b1081bb077e45de9aaf04893574c945c65df0f6/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=7b1081bb077e45de9aaf04893574c945c65df0f6",
                "patch": "@@ -363,6 +363,10 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n+        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n+        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE try 2\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737313 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f82b3d3afc705a276f39d4f5cc694cbf1acc66f",
        "commit": "https://github.com/apache/jmeter/commit/c3fb27cf17025a86b9318614127431afaf0f97c0",
        "parent": "https://github.com/apache/jmeter/commit/d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
        "bug_id": "jmeter_48",
        "file": [
            {
                "sha": "417af711ccfa9f946ebe594b11cc7b86fba272a5",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c3fb27cf17025a86b9318614127431afaf0f97c0/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=c3fb27cf17025a86b9318614127431afaf0f97c0",
                "patch": "@@ -363,7 +363,7 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n-        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n+        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);\n         } catch (IOException e1) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\nRemove version from Ascii art\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737311 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0b67c02e614c463264cd3e8b9d883812bdd944f7",
        "commit": "https://github.com/apache/jmeter/commit/d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
        "parent": "https://github.com/apache/jmeter/commit/811512421014197e646596bda626350e7d6d9c08",
        "bug_id": "jmeter_49",
        "file": [
            {
                "sha": "9b37c00787d20a25c6e8f1869ca99fe864955422",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
                "patch": "@@ -363,7 +363,7 @@ private void startGui(String testFile) {\n      */\n     public void start(String[] args) {\n         \n-        try (InputStream inputStream = getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n+        try (InputStream inputStream = JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\")) {\n             String text = IOUtils.toString(inputStream);\n             System.out.println(text);\n         } catch (IOException e1) {",
                "deletions": 1
            },
            {
                "sha": "5c9e1e91e2901112f58b061497bbdb0cd82d9912",
                "filename": "src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "blob_url": "https://github.com/apache/jmeter/blob/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "raw_url": "https://github.com/apache/jmeter/raw/d2ca0b9dcf20931fca99d664748cf03f94e4d89a/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/jmeter_as_ascii_art.txt?ref=d2ca0b9dcf20931fca99d664748cf03f94e4d89a",
                "patch": "@@ -1,5 +1,5 @@\n-    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____    _____  ___  \n-   / \\  |  _ \\ / \\  / ___| | | | ____|     | |  \\/  | ____|_   _| ____|  _ \\  |___ / / _ \\ \n-  / _ \\ | |_) / _ \\| |   | |_| |  _|    _  | | |\\/| |  _|   | | |  _| | |_) |   |_ \\| | | |\n- / ___ \\|  __/ ___ \\ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ <   ___) | |_| |\n-/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\ |____(_)___/ \n+    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____     \n+   / \\  |  _ \\ / \\  / ___| | | | ____|     | |  \\/  | ____|_   _| ____|  _ \\   \n+  / _ \\ | |_) / _ \\| |   | |_| |  _|    _  | | |\\/| |  _|   | | |  _| | |_) | \n+ / ___ \\|  __/ ___ \\ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ <  \n+/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\  ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fixed nullPointerException when running on remote server\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323341 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1e85124c345f159c433f7e618ed13e3b4c1e0bb6",
        "commit": "https://github.com/apache/jmeter/commit/c0e24a2a721363c02684f70bb180ac51b60a30df",
        "parent": "https://github.com/apache/jmeter/commit/31c801383cc9c31946363aba3ef224ee21228c11",
        "bug_id": "jmeter_50",
        "file": [
            {
                "sha": "e020485111cb60c983fccb2687cb82e007d1d7e6",
                "filename": "src/components/org/apache/jmeter/modifiers/UserParameters.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c0e24a2a721363c02684f70bb180ac51b60a30df/src/components/org/apache/jmeter/modifiers/UserParameters.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c0e24a2a721363c02684f70bb180ac51b60a30df/src/components/org/apache/jmeter/modifiers/UserParameters.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/modifiers/UserParameters.java?ref=c0e24a2a721363c02684f70bb180ac51b60a30df",
                "patch": "@@ -28,7 +28,7 @@\n     public static final String THREAD_VALUES = \"UserParameters.thread_values\";\n     public static final String PER_ITERATION = \"UserParameters.per_iteration\";\n     private int counter = 0;\n-    transient private Object lock = new Object();\n+\tprivate Integer lock = new Integer(0);\n \n     public CollectionProperty getNames()\n     {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "SaveService properties no longer have to come from jmeter.properties.\nAlso, fixed potential NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323122 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3910a6d293cc88bb7f971f3263e09cc7b628c213",
        "commit": "https://github.com/apache/jmeter/commit/4f870424de13b089e2193222e259f45097eae3da",
        "parent": "https://github.com/apache/jmeter/commit/15cdec3e33347e7a347220239c3c93bb5572d411",
        "bug_id": "jmeter_51",
        "file": [
            {
                "sha": "867a701417d248c885365cdcdbef1e58db2e603c",
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveService.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=4f870424de13b089e2193222e259f45097eae3da",
                "patch": "@@ -201,11 +201,11 @@ protected static void readProperties()\n \n         try\n         {\n-            props = JMeterUtils.getProperties(PROPS_FILE);\n+            props = JMeterUtils.getJMeterProperties();\n         }\n         catch (Exception e)\n         {\n-            log.error(\"SaveService.readProperties: Problem loading properties file \" + PROPS_FILE, e);\n+            log.error(\"SaveService.readProperties: Problem loading properties file: \", e);\n         }\n \n         printFieldNames =\n@@ -696,7 +696,7 @@ else if (formatter != null)\n             String message = null;\n             AssertionResult[] results = sample.getAssertionResults();\n \n-            if (results.length > 0)\n+            if ((results != null) && (results.length > 0))\n             {\n                 message = results[0].getFailureMessage();\n             }",
                "deletions": 3
            },
            {
                "sha": "ef72c407bb078715a6e8502ff93354e6222b276d",
                "filename": "src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4f870424de13b089e2193222e259f45097eae3da/src/core/org/apache/jmeter/save/SaveServiceConstants.java",
                "status": "modified",
                "changes": 5,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveServiceConstants.java?ref=4f870424de13b089e2193222e259f45097eae3da",
                "patch": "@@ -74,11 +74,6 @@\n     // PROPERTY FILE CONSTANTS\n     // ---------------------------------------------------------------------\n \n-    /** The file containing the properties governing the information to\n-     be saved.  **/\n-    public static final String PROPS_FILE =\n-            \"jmeter.properties\";\n-\n     /** Indicates that the results file should be in XML format.  **/\n     public static final String XML = \"xml\";\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE during recording\nBugzilla Id: 57804\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1722352 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 862a4b8a1264b5d2d35b8bf5f9b3d953fa495d59",
        "commit": "https://github.com/apache/jmeter/commit/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
        "parent": "https://github.com/apache/jmeter/commit/c06a7c680bf5aec9520102503d594b4003fee3b4",
        "bug_id": "jmeter_52",
        "file": [
            {
                "sha": "42da01f8f692727e21c69ebcd49c1f2e4fc4baf5",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a0cdb57308eeeda1b7eb5c30b1ec0056125b0879/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=a0cdb57308eeeda1b7eb5c30b1ec0056125b0879",
                "patch": "@@ -122,6 +122,7 @@\n import org.apache.jmeter.testelement.property.JMeterProperty;\n import org.apache.jmeter.testelement.property.PropertyIterator;\n import org.apache.jmeter.threads.JMeterContextService;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jmeter.util.JsseSSLManager;\n import org.apache.jmeter.util.SSLManager;\n@@ -450,7 +451,11 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Extracted from HttpContext user token:\"+userToken+\", storing it as JMeter variable:\"+USER_TOKEN);\n             }\n-            JMeterContextService.getContext().getVariables().putObject(USER_TOKEN, userToken); \n+            // During recording JMeterContextService.getContext().getVariables() is null\n+            JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+            if (jMeterVariables != null) {\n+                jMeterVariables.putObject(USER_TOKEN, userToken); \n+            }\n         }\n     }\n \n@@ -460,7 +465,12 @@ private final void extractClientContextAfterSample(HttpContext localContext) {\n      * @param localContext {@link HttpContext}\n      */\n     private final void setupClientContextBeforeSample(HttpContext localContext) {\n-        Object userToken = JMeterContextService.getContext().getVariables().getObject(USER_TOKEN);\n+        Object userToken = null;\n+        // During recording JMeterContextService.getContext().getVariables() is null\n+        JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();\n+        if(jMeterVariables != null) {\n+            userToken = jMeterVariables.getObject(USER_TOKEN);            \n+        }\n         if(userToken != null) {\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Found user token:\"+userToken+\" as JMeter variable:\"+USER_TOKEN+\", storing it in HttpContext\");",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE if test fails one day\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721971 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ebed029719449f3c2ecb411ac1e8155c837dd89a",
        "commit": "https://github.com/apache/jmeter/commit/24421823f1cf5fb5b43e11728e065fba6f0b11b3",
        "parent": "https://github.com/apache/jmeter/commit/d5dda45901916796d8e11dbf0feda4a0c5197137",
        "bug_id": "jmeter_53",
        "file": [
            {
                "sha": "e93eb11641705fdc81f1b129109d6868f88d835a",
                "filename": "test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/24421823f1cf5fb5b43e11728e065fba6f0b11b3/test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/24421823f1cf5fb5b43e11728e065fba6f0b11b3/test/src/org/apache/jmeter/save/TestCSVSaveService.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/save/TestCSVSaveService.java?ref=24421823f1cf5fb5b43e11728e065fba6f0b11b3",
                "patch": "@@ -30,7 +30,7 @@ public TestCSVSaveService(String name) {\n         super(name);\n     }\n     \n-    private void checkSplitString(String input, char delim, String []expected) throws Exception {\n+    private void checkSplitString(String input, char delim, String[] expected) throws Exception {\n         String out[] = CSVSaveService.csvSplitString(input, delim);     \n         checkStrings(expected, out);\n     }\n@@ -87,7 +87,7 @@ public void testSplitQuoted() throws Exception {\n \n     public void testSplitBadQuote() throws Exception {\n         try {\n-            checkSplitString(\"a\\\"b\",',',null);\n+            checkSplitString(\"a\\\"b\",',',new String[]{});\n             fail(\"Should have generated IOException\");\n         } catch (IOException e) {\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1719589 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 112fa9adb98fd5d43b6bcf079a7b6572649cc220",
        "commit": "https://github.com/apache/jmeter/commit/319cdc8ac3146364f3451f4877619dd1453805fb",
        "parent": "https://github.com/apache/jmeter/commit/3d810b643ad06466b125d77395ac1dcfa98ddc54",
        "bug_id": "jmeter_54",
        "file": [
            {
                "sha": "8a36cf39c6d22d6edf5fa2a7c65691c36d47d4ab",
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "blob_url": "https://github.com/apache/jmeter/blob/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "raw_url": "https://github.com/apache/jmeter/raw/319cdc8ac3146364f3451f4877619dd1453805fb/src/core/org/apache/jmeter/report/core/CsvSampleReader.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleReader.java?ref=319cdc8ac3146364f3451f4877619dd1453805fb",
                "patch": "@@ -123,7 +123,9 @@ private SampleMetadata readMetadata(char separator, boolean useSaveSampleCfg) {\n             SampleMetadata metadata;\n             // Read first line\n             String line = reader.readLine();\n-\n+            if(line == null) {\n+                throw new IllegalArgumentException(\"File is empty\");\n+            }\n             // When we can use sample save config and there is no header in csv\n             // file\n             if (useSaveSampleCfg",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE later when using vars. Throw directly an IAE with informations about issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1754997 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 31cb7c1f1381d8c19d8982b7de0933244319b802",
        "commit": "https://github.com/apache/jmeter/commit/129807a91c7c0551364038fc8087fbda2e096560",
        "parent": "https://github.com/apache/jmeter/commit/8c802f134dea114ae330be47e2b7d68c8f7fac8d",
        "bug_id": "jmeter_55",
        "file": [
            {
                "sha": "334252878138d711d25d56973ad4a156543be431",
                "filename": "src/components/org/apache/jmeter/config/CSVDataSet.java",
                "blob_url": "https://github.com/apache/jmeter/blob/129807a91c7c0551364038fc8087fbda2e096560/src/components/org/apache/jmeter/config/CSVDataSet.java",
                "raw_url": "https://github.com/apache/jmeter/raw/129807a91c7c0551364038fc8087fbda2e096560/src/components/org/apache/jmeter/config/CSVDataSet.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/config/CSVDataSet.java?ref=129807a91c7c0551364038fc8087fbda2e096560",
                "patch": "@@ -180,7 +180,7 @@ public void iterationStart(LoopIterationEvent iterEvent) {\n                     vars = CSVSaveService.csvSplitString(header, delim.charAt(0));\n                     firstLineIsNames = true;\n                 } catch (IOException e) {\n-                    log.warn(\"Could not split CSV header line\",e);\n+                    throw new IllegalArgumentException(\"Could not split CSV header line from file:\" + _fileName,e);\n                 }\n             } else {\n                 server.reserveFile(_fileName, getFileEncoding(), alias);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix location of test file; add test for noFile present (causes NPE at present)\nTODO: fixe bug in CSVRead that causes the NPE...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324128 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c34d153db15ccf5e3eb2378a4fc7c4197b208211",
        "commit": "https://github.com/apache/jmeter/commit/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5",
        "parent": "https://github.com/apache/jmeter/commit/14166c073f4a4892ebce8665f5a4f1c7224b5982",
        "bug_id": "jmeter_56",
        "file": [
            {
                "sha": "b0d9c2a177d36fbd9a279dd5500442128f7c9192",
                "filename": "src/functions/org/apache/jmeter/functions/PackageTest.java",
                "blob_url": "https://github.com/apache/jmeter/blob/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5/src/functions/org/apache/jmeter/functions/PackageTest.java",
                "raw_url": "https://github.com/apache/jmeter/raw/09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5/src/functions/org/apache/jmeter/functions/PackageTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/PackageTest.java?ref=09aa3461a1cd0c82d0604bcdccdd9f60f8b5d5b5",
                "patch": "@@ -55,6 +55,7 @@ private static CSVRead setParams(String p1, String p2) throws Exception\n \tpublic static Test suite() throws Exception\n \t{\n \t\t   TestSuite suite = new TestSuite(\"SingleThreaded\");\n+\t\t   suite.addTest(new PackageTest(\"CSVNoFile\"));\n \t\t   suite.addTest(new PackageTest(\"CSV2Setup\"));\n \t\t   suite.addTest(new PackageTest(\"CSV2Run\"));\n \n@@ -208,9 +209,18 @@ public void CSV2Setup() throws Exception\n \t\t{\n \t\t}\n \t\t*/\n-    \tcr1=setParams(\"test.csv\",\"1\");\n-\t\tcr2=setParams(\"test.csv\",\"2\");\n-\t\tcr3=setParams(\"test.csv\",\"3\");\n-\t\tcr4=setParams(\"test.csv\",\"next\");\n+    \tcr1=setParams(\"testfiles/test.csv\",\"1\");\n+\t\tcr2=setParams(\"testfiles/test.csv\",\"2\");\n+\t\tcr3=setParams(\"testfiles/test.csv\",\"3\");\n+\t\tcr4=setParams(\"testfiles/test.csv\",\"next\");\n+    }\n+    public void CSVNoFile() throws Exception\n+    {\n+    \t//TODO - fix file not found error handling in CSVRead ...\n+    \tCSVRead c1,c2;\n+\t\tc1 = setParams(\"xtestfiles/test.csv\",\"1\");\n+\t\tc1.execute(null,null);\n+\t\tc2 = setParams(\"xtestfiles/test.csv\",\"next\");\n+\t\tc2.execute(null,null);\n     }\n }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "NPE in ResultCollector.testEnded\nBugzilla Id: 57088\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1631811 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fb78123db2c65f86853676c56a57a340b02d67de",
        "commit": "https://github.com/apache/jmeter/commit/449b21ba0f37a093ace7bd70265e52b36c168df9",
        "parent": "https://github.com/apache/jmeter/commit/24859b00e87db3860b1b617909e1cc6923260a42",
        "bug_id": "jmeter_57",
        "file": [
            {
                "sha": "2e48764459583b9746aec3523b6eae76ea6f5299",
                "filename": "src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "blob_url": "https://github.com/apache/jmeter/blob/449b21ba0f37a093ace7bd70265e52b36c168df9/src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "raw_url": "https://github.com/apache/jmeter/raw/449b21ba0f37a093ace7bd70265e52b36c168df9/src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/ResultCollector.java?ref=449b21ba0f37a093ace7bd70265e52b36c168df9",
                "patch": "@@ -266,7 +266,12 @@ public void testEnded(String host) {\n             instanceCount--;\n             if (instanceCount <= 0) {\n                 // No need for the hook now\n-                Runtime.getRuntime().removeShutdownHook(shutdownHook);\n+                // Bug 57088 - prevent (im?)possible NPE\n+                if (shutdownHook != null) {\n+                    Runtime.getRuntime().removeShutdownHook(shutdownHook);\n+                } else {\n+                    log.warn(\"Should not happen: shutdownHook==null, instanceCount=\" + instanceCount);\n+                }\n                 finalizeFileOutput();\n                 inTest = false;\n             }",
                "deletions": 1
            },
            {
                "sha": "c151643a379adad8b62942e904b611b8fc55de47",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/449b21ba0f37a093ace7bd70265e52b36c168df9/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/449b21ba0f37a093ace7bd70265e52b36c168df9/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=449b21ba0f37a093ace7bd70265e52b36c168df9",
                "patch": "@@ -266,6 +266,7 @@ for details on configuring this component.</li>\n <li><bugzilla>57061</bugzilla> - Save as Test Fragment fails to clone deeply selected node. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n <li><bugzilla>57075</bugzilla> - BeanInfoSupport.MULTILINE attribute is not processed</li>\n <li><bugzilla>57076</bugzilla> - BooleanPropertyEditor#getAsText() must return a value that is in getTags()</li>\n+<li><bugzilla>57088</bugzilla> - NPE in ResultCollector.testEnded</li>\n </ul>\n \n <!-- =================== Improvements =================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE if report File does not include a path\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1739018 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 866759faf5ba6246cc637cc2a72e7fd5c57073a9",
        "commit": "https://github.com/apache/jmeter/commit/9bf06b9a13a6ec3c93eeac89aecef7b89f38830d",
        "parent": "https://github.com/apache/jmeter/commit/ec7f9d2be0b50861ac4a9bd50a03875a2d1adf98",
        "bug_id": "jmeter_58",
        "file": [
            {
                "sha": "33040ef42bdebb384b1f084f5fe7435ed8977c32",
                "filename": "src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9bf06b9a13a6ec3c93eeac89aecef7b89f38830d/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9bf06b9a13a6ec3c93eeac89aecef7b89f38830d/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java?ref=9bf06b9a13a6ec3c93eeac89aecef7b89f38830d",
                "patch": "@@ -603,7 +603,7 @@ public static void canSafelyWriteToFolder(File folder)\n             }\n         } else {\n             // check we can create it\n-            if(!folder.getParentFile().canWrite()) {\n+            if(!folder.getAbsoluteFile().getParentFile().canWrite()) {\n                 throw new IllegalArgumentException(\"Cannot write to '\"\n                         +folder.getAbsolutePath()+\"' as folder does not exist and parent folder is not writable\");\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE try 4 : Avoid failing to see what Jars contain\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737316 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e4dbbd7934eabba1076652697c9c99a3d68ff696",
        "commit": "https://github.com/apache/jmeter/commit/4677bafc1674b3388715ba408bfb77d038262631",
        "parent": "https://github.com/apache/jmeter/commit/7b1081bb077e45de9aaf04893574c945c65df0f6",
        "bug_id": "jmeter_59",
        "file": [
            {
                "sha": "8f15602757f5b846ad5bf4241b3954bba9e219c1",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4677bafc1674b3388715ba408bfb77d038262631/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=4677bafc1674b3388715ba408bfb77d038262631",
                "patch": "@@ -362,14 +362,11 @@ private void startGui(String testFile) {\n      * @param args The arguments for JMeter\n      */\n     public void start(String[] args) {\n-        \n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"jmeter_as_ascii_art.txt\"));\n-        System.out.println(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(JMeter.class.getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n-        System.out.println(getClass().getResourceAsStream(\"/org/apache/jmeter/jmeter_as_ascii_art.txt\"));\n         try (InputStream inputStream = JMeter.class.getResourceAsStream(\"jmeter_as_ascii_art.txt\")) {\n-            String text = IOUtils.toString(inputStream);\n-            System.out.println(text);\n+            if(inputStream != null) {\n+                String text = IOUtils.toString(inputStream);\n+                System.out.println(text);\n+            }\n         } catch (IOException e1) {\n             // NOP\n         }",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "NPE when clipboard content is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1575074 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 249f7992da26c85487191d7292e5e0ea428558ff",
        "commit": "https://github.com/apache/jmeter/commit/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
        "parent": "https://github.com/apache/jmeter/commit/8ff0703e2ecaa915a4a7b641600dc70eacc31116",
        "bug_id": "jmeter_60",
        "file": [
            {
                "sha": "8fe3d4b65fc61ccb5fdf12db1553c202e446188c",
                "filename": "src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "patch": "@@ -478,6 +478,9 @@ protected void addFromClipboard() {\n         int rowCount = table.getRowCount();\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             String[] clipboardLines = clipboardContent.split(\"\\n\");\n             for (String clipboardLine : clipboardLines) {\n                 String[] clipboardCols = clipboardLine.split(\"\\t\");",
                "deletions": 0
            },
            {
                "sha": "dedd27168f979467e34b9e884281dff1f8eb1f41",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "patch": "@@ -241,6 +241,9 @@ protected void addFromClipboard() {\n         int rowCount = headerTable.getRowCount();\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             String[] clipboardLines = clipboardContent.split(\"\\n\"); // $NON-NLS-1$\n             for (String clipboardLine : clipboardLines) {\n                 int index = clipboardLine.indexOf(\":\"); // $NON-NLS-1$",
                "deletions": 0
            },
            {
                "sha": "30758fb057831c4322279a0e2adbd3a63be660a7",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2b3eff14bc767a5a2e20ac5629054a04a17c6fb0/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java?ref=2b3eff14bc767a5a2e20ac5629054a04a17c6fb0",
                "patch": "@@ -451,6 +451,9 @@ protected void addFromClipboard(JTable table) {\n         PowerTableModel model = null;\n         try {\n             String clipboardContent = GuiUtils.getPastedText();\n+            if(clipboardContent == null) {\n+                return;\n+            }\n             if (clipboardContent != null) {\n                 String[] clipboardLines = clipboardContent.split(NEW_LINE);\n                 for (String clipboardLine : clipboardLines) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 57579 - NullPointerException error is raised on main sample if \"RETURN_NO_SAMPLE\" is used (default) and \"Use Cache-Control / Expires header...\" is checked in HTTP Cache Manager \nBugzilla Id: 57579\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1659922 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 28c1ce1501bec1e9b6ca8dc943cc6bcac34d2bd6",
        "commit": "https://github.com/apache/jmeter/commit/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba",
        "parent": "https://github.com/apache/jmeter/commit/e71b484271a929380c9d397815fbfe64c399945c",
        "bug_id": "jmeter_61",
        "file": [
            {
                "sha": "886e845c2e418c8c5a64be5cc4c51ad77cfad257",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java?ref=df45b4331fd7dbbb6ea8826e5c11764ef111c1ba",
                "patch": "@@ -168,7 +168,9 @@ public SampleResult sampleWithParser() {\n             }\n             count = thisCount;\n             res = sample();\n-            res.setSampleLabel(toString());\n+            if(res != null) {\n+                res.setSampleLabel(toString());\n+            }\n         } catch (Exception e) {\n             log.warn(\"Sampling failure\", e);\n             return errorResult(e, new HTTPSampleResult());",
                "deletions": 1
            },
            {
                "sha": "a7aeb606e1446b640a41e6869b973609b86bf880",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "blob_url": "https://github.com/apache/jmeter/blob/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "raw_url": "https://github.com/apache/jmeter/raw/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java?ref=df45b4331fd7dbbb6ea8826e5c11764ef111c1ba",
                "patch": "@@ -1142,7 +1142,9 @@ public SampleResult sample() {\n         SampleResult res = null;\n         try {\n             res = sample(getUrl(), getMethod(), false, 0);\n-            res.setSampleLabel(getName());\n+            if(res != null) {\n+                res.setSampleLabel(getName());\n+            }\n             return res;\n         } catch (Exception e) {\n             return errorResult(e, new HTTPSampleResult());\n@@ -1166,7 +1168,7 @@ public SampleResult sample() {\n      * @param depth\n      *            Depth of this target in the frame structure. Used only to\n      *            prevent infinite recursion.\n-     * @return results of the sampling\n+     * @return results of the sampling, can be null if u is in CacheManager\n      */\n     protected abstract HTTPSampleResult sample(URL u,\n             String method, boolean areFollowingRedirect, int depth);\n@@ -1483,7 +1485,13 @@ protected HTTPSampleResult followRedirects(HTTPSampleResult res, int frameDepth)\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Location as URL: \" + url.toString());\n                 }\n-                lastRes = sample(url, method, true, frameDepth);\n+                HTTPSampleResult tempRes = sample(url, method, true, frameDepth);\n+                if(tempRes != null) {\n+                    lastRes = tempRes;\n+                } else {\n+                    // Last url was in cache so tempRes is null\n+                    break;\n+                }\n             } catch (MalformedURLException e) {\n                 errorResult(e, lastRes);\n                 // The redirect URL we got was not a valid URL",
                "deletions": 3
            },
            {
                "sha": "a8506630969732cf5663870c69f00dca5e0ba549",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/df45b4331fd7dbbb6ea8826e5c11764ef111c1ba/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=df45b4331fd7dbbb6ea8826e5c11764ef111c1ba",
                "patch": "@@ -143,6 +143,7 @@ See  <bugzilla>56357</bugzilla> for details.\n <h3>HTTP Samplers and Test Script Recorder</h3>\n <ul>\n <li><bug>57385</bug>Getting empty thread name in xml result for HTTP requests with \"Follow Redirects\" set. Contributed by Ubik Load Pack (support at ubikloadpack.com)</li>\n+<li><bug>57579</bug>NullPointerException error is raised on main sample if \"RETURN_NO_SAMPLE\" is used (default) and \"Use Cache-Control / Expires header...\" is checked in HTTP Cache Manager</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE when reporting errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1514213 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a021ca2ef60db449384cfa7351718c27f37321d9",
        "commit": "https://github.com/apache/jmeter/commit/c2866274f19eb1630e95ecfbf0e311f1d2a4246f",
        "parent": "https://github.com/apache/jmeter/commit/b5917918910e7adade0eb23179ac249ebfb39e4e",
        "bug_id": "jmeter_62",
        "file": [
            {
                "sha": "244f1747b196ba2ccc6f852994f342cc5a2f118a",
                "filename": "src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c2866274f19eb1630e95ecfbf0e311f1d2a4246f/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c2866274f19eb1630e95ecfbf0e311f1d2a4246f/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java?ref=c2866274f19eb1630e95ecfbf0e311f1d2a4246f",
                "patch": "@@ -175,8 +175,10 @@ private static String createMessage(Object invokee, Method method, Object[] para\n         sb.append(method.getName());\n         sb.append(\"(\");\n         for(Object o : params) {\n-            sb.append(o.getClass().getSimpleName());\n-            sb.append(' ');\n+            if (o != null) {\n+                sb.append(o.getClass().getSimpleName());\n+                sb.append(' ');\n+            }\n             sb.append(o);\n             sb.append(' ');\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Replace ArgumentNullException with NPE by using Validate.notNull instead of null check with throw.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721404 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8aafc2ee35c14e4319f65069563e54c21ac24e61",
        "commit": "https://github.com/apache/jmeter/commit/f79cde96aa2a18cb2bbd797448805b113fe2dc69",
        "parent": "https://github.com/apache/jmeter/commit/d243a29cbbc0e31e8a803214e522e005db522b0e",
        "bug_id": "jmeter_63",
        "file": [
            {
                "sha": "46145f6702681f10c06e370785ec07941c83b16c",
                "filename": "src/core/org/apache/jmeter/report/processor/SampleWriterConsumer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f79cde96aa2a18cb2bbd797448805b113fe2dc69/src/core/org/apache/jmeter/report/processor/SampleWriterConsumer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f79cde96aa2a18cb2bbd797448805b113fe2dc69/src/core/org/apache/jmeter/report/processor/SampleWriterConsumer.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/processor/SampleWriterConsumer.java?ref=f79cde96aa2a18cb2bbd797448805b113fe2dc69",
                "patch": "@@ -19,7 +19,7 @@\n \n import java.io.File;\n \n-import org.apache.jmeter.report.core.ArgumentNullException;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.CsvSampleWriter;\n import org.apache.jmeter.report.core.Sample;\n import org.slf4j.Logger;\n@@ -48,10 +48,7 @@ public void setOutputFile(String outputFile) {\n     }\n \n     public void setOutputFile(File outputFile) {\n-        if (outputFile == null) {\n-        throw new ArgumentNullException(\"outputFile\");\n-        }\n-\n+        Validate.notNull(outputFile, \"outputFile must not be null\");\n         this.outputFile = outputFile;\n     }\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Change ArgumentNullException to NPE and document the need for non null parameter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721383 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7e4ffc80651c2fdd3420cd9bb6b355dd26cf7368",
        "commit": "https://github.com/apache/jmeter/commit/c3760081b200c6efa170bbb87e3389b8a35b5504",
        "parent": "https://github.com/apache/jmeter/commit/a62ecf05a523100a50ff6e9488bf30d2edc3006e",
        "bug_id": "jmeter_64",
        "file": [
            {
                "sha": "2e45d7df14f13561d0ad1db6c9652754f32ae9c7",
                "filename": "src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c3760081b200c6efa170bbb87e3389b8a35b5504/src/core/org/apache/jmeter/report/core/SampleMetadata.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/SampleMetadata.java?ref=c3760081b200c6efa170bbb87e3389b8a35b5504",
                "patch": "@@ -23,6 +23,7 @@\n import java.util.TreeMap;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.samplers.SampleSaveConfiguration;\n import org.apache.jmeter.save.CSVSaveService;\n \n@@ -52,12 +53,10 @@\n      * @param separator\n      *            The character used for column separation\n      * @param columns\n-     *            The list of columns names\n+     *            The list of columns names (must not be {@code null})\n      */\n     public SampleMetadata(char separator, String... columns) {\n-        if (columns == null) {\n-            throw new ArgumentNullException(\"columns\");\n-        }\n+        Validate.notNull(columns, \"columns must not be null\");\n         initialize(separator, Arrays.asList(columns));\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Replace ArgumentNullException with NPE by using Validate.notNull.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721348 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 97689dfd0c21a1e5c571ca4ad49462940ec245ab",
        "commit": "https://github.com/apache/jmeter/commit/082729f183603808d2612ada6a9b29bd6c88c43b",
        "parent": "https://github.com/apache/jmeter/commit/241771409c271be40f89c182b5303d07ec9fed2b",
        "bug_id": "jmeter_65",
        "file": [
            {
                "sha": "fc68c2df21a8133f18e0dbdf53f4b7a0f22944ee",
                "filename": "src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/082729f183603808d2612ada6a9b29bd6c88c43b/src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/082729f183603808d2612ada6a9b29bd6c88c43b/src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java",
                "status": "modified",
                "changes": 17,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java?ref=082729f183603808d2612ada6a9b29bd6c88c43b",
                "patch": "@@ -23,11 +23,11 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.config.ConfigurationException;\n import org.apache.jmeter.report.config.ExporterConfiguration;\n import org.apache.jmeter.report.config.SubConfiguration;\n import org.apache.jmeter.report.config.ReportGeneratorConfiguration;\n-import org.apache.jmeter.report.core.ArgumentNullException;\n import org.apache.jmeter.report.core.DataContext;\n import org.apache.jmeter.report.core.TimeHelper;\n import org.apache.jmeter.report.processor.MapResultData;\n@@ -49,6 +49,9 @@\n  */\n public class HtmlTemplateExporter extends AbstractDataExporter {\n \n+    /** Format used for non null check of parameters. */\n+    private static final String MUST_NOT_BE_NULL = \"%s must not be null\";\n+\n     private static final Logger log = LoggingManager.getLoggerForClass();\n \n     public static final String DATA_CTX_TESTFILE = \"testFile\";\n@@ -136,15 +139,9 @@ private long formatTimestamp(String key, DataContext context) {\n     @Override\n     public void export(SampleContext context, File file,\n             ReportGeneratorConfiguration configuration) throws ExportException {\n-        if (context == null) {\n-            throw new ArgumentNullException(\"context\");\n-        }\n-        if (file == null) {\n-            throw new ArgumentNullException(\"file\");\n-        }\n-        if (configuration == null) {\n-            throw new ArgumentNullException(\"configuration\");\n-        }\n+        Validate.notNull(context, MUST_NOT_BE_NULL, \"context\");\n+        Validate.notNull(file, MUST_NOT_BE_NULL, \"file\");\n+        Validate.notNull(configuration, MUST_NOT_BE_NULL, \"configuration\");\n \n         log.debug(\"Start template processing\");\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Message for NPE has changed. We are not really interested in the exact wording, so ignore it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721010 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 069f2b09a1c1186bbb920ca87fda805292f3e45a",
        "commit": "https://github.com/apache/jmeter/commit/d2b295a6baea260ea004297f15f53c39a6c857c2",
        "parent": "https://github.com/apache/jmeter/commit/9f9279af60ae8b2c83b8eab0d1367bc1dec3c08a",
        "bug_id": "jmeter_66",
        "file": [
            {
                "sha": "7962bcd6bdac1a60150d965bc644b230a7c04e76",
                "filename": "test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d2b295a6baea260ea004297f15f53c39a6c857c2/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d2b295a6baea260ea004297f15f53c39a6c857c2/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java?ref=d2b295a6baea260ea004297f15f53c39a6c857c2",
                "patch": "@@ -76,7 +76,7 @@ public void testWriteWithoutSample() throws Exception {\n                 csvWriter.write(null);\n                 fail(\"NPE expected\");\n             } catch (NullPointerException e) {\n-                assertEquals(\"sample must not be null\", e.getMessage());\n+                // OK. Excpected to land here\n             }\n         }\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Use Validate methods from commons lang3 and throw NPE instead of ArgumentNullException. Add test cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1720242 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 42167715c0ea9fcf6126c3a96b17f9727e7cc77f",
        "commit": "https://github.com/apache/jmeter/commit/84f5191095bbea86e35c16f5dddbab73288cb78e",
        "parent": "https://github.com/apache/jmeter/commit/25dbb53ee6058bb301cdd1adb283526db1931842",
        "bug_id": "jmeter_67",
        "file": [
            {
                "sha": "f9257d6c5e0b64856180c17032aa102c13b1c41b",
                "filename": "src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/84f5191095bbea86e35c16f5dddbab73288cb78e/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/84f5191095bbea86e35c16f5dddbab73288cb78e/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java",
                "status": "modified",
                "changes": 27,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/core/CsvSampleWriter.java?ref=84f5191095bbea86e35c16f5dddbab73288cb78e",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.Writer;\n \n import org.apache.commons.lang3.CharUtils;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.AbstractSampleWriter;\n import org.apache.jmeter.report.core.Sample;\n import org.apache.jmeter.report.core.SampleMetadata;\n@@ -39,6 +40,7 @@\n  */\n public class CsvSampleWriter extends AbstractSampleWriter {\n \n+    private static final String MUST_NOT_BE_NULL = \"%1s must not be null\";\n     private int columnCount;\n \n     private char separator;\n@@ -48,9 +50,7 @@\n     private long sampleCount;\n \n     public CsvSampleWriter(SampleMetadata metadata) {\n-        if (metadata == null) {\n-            throw new ArgumentNullException(\"metadata\");\n-        }\n+        Validate.notNull(metadata, MUST_NOT_BE_NULL, \"metadata\");\n         this.metadata = metadata;\n         this.columnCount = metadata.getColumnCount();\n         this.separator = metadata.getSeparator();\n@@ -59,25 +59,19 @@ public CsvSampleWriter(SampleMetadata metadata) {\n \n     public CsvSampleWriter(Writer output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setWriter(output);\n     }\n \n     public CsvSampleWriter(OutputStream output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setOutputStream(output);\n     }\n \n     public CsvSampleWriter(File output, SampleMetadata metadata) {\n         this(metadata);\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, MUST_NOT_BE_NULL, \"output\");\n         setOutputFile(output);\n     }\n \n@@ -112,13 +106,8 @@ public void writeHeader() {\n \n     @Override\n     public long write(Sample sample) {\n-        if (sample == null) {\n-            throw new ArgumentNullException(\"sample\");\n-        }\n-        if (writer == null) {\n-            throw new IllegalStateException(\n-                    \"No writer set! Call setWriter() first!\");\n-        }\n+        Validate.notNull(sample, MUST_NOT_BE_NULL, \"sample\");\n+        Validate.validState(writer != null, \"No writer set! Call setWriter() first!\");\n \n         StringBuilder row = new StringBuilder();\n         char[] specials = new char[] { separator,",
                "deletions": 19
            },
            {
                "sha": "00d6ae634facc65e3b7790c5c21412b07b1f7352",
                "filename": "test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/84f5191095bbea86e35c16f5dddbab73288cb78e/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/84f5191095bbea86e35c16f5dddbab73288cb78e/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java",
                "status": "added",
                "changes": 104,
                "additions": 104,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java?ref=84f5191095bbea86e35c16f5dddbab73288cb78e",
                "patch": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.apache.jmeter.report.core;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+\n+import org.apache.jmeter.util.JMeterUtils;\n+\n+import junit.framework.TestCase;\n+\n+public class TestCsvSampleWriter extends TestCase {\n+\n+    protected void setUp() throws Exception {\n+        // We have to initialize JMeterUtils\n+        JMeterUtils.loadJMeterProperties(\"jmeter.properties\");\n+    };\n+\n+    SampleMetadata metadata = new SampleMetadata(',', \"a\", \"b\");\n+\n+    public void testCsvSampleWriterConstructorWithNull() throws Exception {\n+        try {\n+            CsvSampleWriter dummy = new CsvSampleWriter(null);\n+            dummy.close(); // We should never get here, but it would be a\n+                           // writer, so close it\n+            fail(\"NPE expected\");\n+        } catch (NullPointerException e) {\n+            // OK, we should land here\n+        }\n+    }\n+\n+    public void testCsvSampleWriterConstructorWithWriter() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            csvWriter.writeHeader();\n+            // need to replace the writer to flush the original one\n+            replaceWriter(csvWriter);\n+            assertEquals(\"a,b\\n\", writer.toString());\n+        }\n+    }\n+\n+    private void replaceWriter(CsvSampleWriter csvWriter) throws IOException {\n+        try (Writer replacement = new StringWriter()) {\n+            csvWriter.setWriter(replacement);\n+        }\n+    }\n+\n+    public void testWriteWithoutWriter() throws Exception {\n+        try (CsvSampleWriter csvWriter = new CsvSampleWriter(metadata)) {\n+            Sample sample = new SampleBuilder(metadata).add(\"a1\").add(\"b1\")\n+                    .build();\n+            try {\n+                csvWriter.write(sample);\n+                fail(\"ISE expected\");\n+            } catch (IllegalStateException e) {\n+                // OK, we should land here\n+            }\n+        }\n+    }\n+\n+    public void testWriteWithoutSample() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            try {\n+                csvWriter.write(null);\n+                fail(\"NPE expected\");\n+            } catch (NullPointerException e) {\n+                assertEquals(\"sample must not be null\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public void testWrite() throws Exception {\n+        try (Writer writer = new StringWriter();\n+                CsvSampleWriter csvWriter = new CsvSampleWriter(writer,\n+                        metadata)) {\n+            Sample sample = new SampleBuilder(metadata).add(\"a1\").add(\"b1\")\n+                    .build();\n+            csvWriter.write(sample);\n+            // need to replace the writer to flush the original one\n+            replaceWriter(csvWriter);\n+            assertEquals(\"a1,b1\\n\", writer.toString());\n+        }\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix potentiel NPE if method is unknown\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1413269 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d0356d49f4965be826a885ed66371f7e83f8cc0c",
        "commit": "https://github.com/apache/jmeter/commit/606c685e20aa9f38e4c6cad6919c0d4c832addc3",
        "parent": "https://github.com/apache/jmeter/commit/499012ed15dad0b99879018f95167016368b8036",
        "bug_id": "jmeter_68",
        "file": [
            {
                "sha": "a2987607de0bb966c166800b517585a857bc2eb5",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/606c685e20aa9f38e4c6cad6919c0d4c832addc3/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/606c685e20aa9f38e4c6cad6919c0d4c832addc3/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java?ref=606c685e20aa9f38e4c6cad6919c0d4c832addc3",
                "patch": "@@ -340,7 +340,10 @@ public String getName() { // HC3.1 does not have the method\n         } catch (IllegalArgumentException e) { // e.g. some kinds of invalid URL\n             res.sampleEnd();\n             // pick up headers if failed to execute the request\n-            res.setRequestHeaders(getConnectionHeaders(httpMethod));\n+            // httpMethod can be null if method is unexpected\n+            if(httpMethod != null) {\n+                res.setRequestHeaders(getConnectionHeaders(httpMethod));\n+            }\n             errorResult(e, res);\n             return res;\n         } catch (IOException e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid \"possible NPE\" warnings\nTrim spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1396809 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a499f022039bb161d67bdebfb7b47477cd3a8fb2",
        "commit": "https://github.com/apache/jmeter/commit/a13cebe288c6258db1d297c63b66b5028232a4a2",
        "parent": "https://github.com/apache/jmeter/commit/a04a8668723c1c76610ff03b888c5dcebaa0adc8",
        "bug_id": "jmeter_69",
        "file": [
            {
                "sha": "28eaf23757c6b70cf85407d56577611c27024cc5",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a13cebe288c6258db1d297c63b66b5028232a4a2/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a13cebe288c6258db1d297c63b66b5028232a4a2/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java?ref=a13cebe288c6258db1d297c63b66b5028232a4a2",
                "patch": "@@ -200,7 +200,7 @@ public void run() {\n             SamplerCreator samplerCreator = factory.getSamplerCreator(request, pageEncodings, formEncodings);\n             sampler = samplerCreator.createSampler(request, pageEncodings, formEncodings);\n             samplerCreator.populateSampler(sampler, request, pageEncodings, formEncodings);\n-            \n+\n             /*\n              * Create a Header Manager to ensure that the browsers headers are\n              * captured and sent to the server\n@@ -240,9 +240,8 @@ public void run() {\n             writeErrorToClient(HttpReplyHdr.formInternalError());\n             result = generateErrorResult(result, e); // Generate result (if nec.) and populate it\n         } finally {\n-            boolean samplerAvailable = sampler != null;\n             if (log.isDebugEnabled()) {\n-                if(samplerAvailable) {\n+                if(sampler != null) {\n                     log.debug(\"Will deliver sample \" + sampler.getName());\n                 }\n             }\n@@ -257,15 +256,15 @@ public void run() {\n                     headers.removeHeaderNamed(hdr);\n                 }\n             }\n-            if(samplerAvailable) {\n+            if(sampler != null) {\n                 target.deliverSampler(sampler, new TestElement[] { captureHttpHeaders ? headers : null }, result);\n             }\n             try {\n                 clientSocket.close();\n             } catch (Exception e) {\n                 log.error(\"\", e);\n             }\n-            if(samplerAvailable) {\n+            if(sampler != null) {\n                 sampler.threadFinished(); // Needed for HTTPSampler2\n             }\n         }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid throwing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1379851 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 492b39e49da28142dcd73400e527b608b2454ba2",
        "commit": "https://github.com/apache/jmeter/commit/a7fea4797dc4bc869fd55431889b23310302147f",
        "parent": "https://github.com/apache/jmeter/commit/fea3edc5351b5490764decc8cea2437cd7482e1b",
        "bug_id": "jmeter_70",
        "file": [
            {
                "sha": "96511019d30b280e9d610b31ce8e85ce424431c5",
                "filename": "src/core/org/apache/jmeter/gui/util/IconToolbarBean.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a7fea4797dc4bc869fd55431889b23310302147f/src/core/org/apache/jmeter/gui/util/IconToolbarBean.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a7fea4797dc4bc869fd55431889b23310302147f/src/core/org/apache/jmeter/gui/util/IconToolbarBean.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/util/IconToolbarBean.java?ref=a7fea4797dc4bc869fd55431889b23310302147f",
                "patch": "@@ -43,9 +43,9 @@\n      * @param strToSplit - the line value (i18n key, ActionNames ID, icon path, optional icon pressed path)\n      * @throws JMeterException if error in parsing.\n      */\n-    IconToolbarBean(final String strToSplit) throws NullPointerException, IllegalArgumentException {\n+    IconToolbarBean(final String strToSplit) throws IllegalArgumentException {\n         if (strToSplit == null) {\n-            throw new NullPointerException(\"Icon definition must not be null\"); //$NON-NLS-1$\n+            throw new IllegalArgumentException(\"Icon definition must not be null\"); //$NON-NLS-1$\n         }\n         final String tmp[] = strToSplit.split(ICON_FIELD_SEP);\n         if (tmp.length > 2) {",
                "deletions": 2
            },
            {
                "sha": "a57db1651470ef2e5bfc7bd261a28b4f34139516",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a7fea4797dc4bc869fd55431889b23310302147f/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a7fea4797dc4bc869fd55431889b23310302147f/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java?ref=a7fea4797dc4bc869fd55431889b23310302147f",
                "patch": "@@ -66,7 +66,7 @@ public FileEditor() throws IntrospectionException {\n \n     public FileEditor(PropertyDescriptor descriptor) {\n         if (descriptor == null) {\n-            throw new NullPointerException(\"Descriptor must not be null\");\n+            throw new IllegalArgumentException(\"Descriptor must not be null\");\n         }\n \n         // Create a button to trigger the file chooser:",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when password is not provided\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1352988 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 65d5b589f228508e02b147324b5c7ef3cfa67002",
        "commit": "https://github.com/apache/jmeter/commit/891d9855ac9240ab9c902a8c4af0c40f87f2df7c",
        "parent": "https://github.com/apache/jmeter/commit/56ca09fa463c35c948182145199d395750c85e36",
        "bug_id": "jmeter_71",
        "file": [
            {
                "sha": "e345f3df6425bb1abb3a386a87fa55def36036b5",
                "filename": "src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java",
                "blob_url": "https://github.com/apache/jmeter/blob/891d9855ac9240ab9c902a8c4af0c40f87f2df7c/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java",
                "raw_url": "https://github.com/apache/jmeter/raw/891d9855ac9240ab9c902a8c4af0c40f87f2df7c/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java?ref=891d9855ac9240ab9c902a8c4af0c40f87f2df7c",
                "patch": "@@ -44,7 +44,7 @@\n \n     private X509Certificate[][] certChains;\n     private PrivateKey[] keys;\n-    private String[] names;\n+    private String[] names = new String[0]; // default empty array to prevent NPEs\n \n     //@GuardedBy(\"this\")\n     private int last_user;\n@@ -62,7 +62,8 @@ private JmeterKeyStore(String type, int startIndex, int endIndex) throws Excepti\n      * Process the input stream\n      */\n     public void load(InputStream is, String pword) throws Exception {\n-        store.load(is, pword.toCharArray());\n+        char pw[] = pword==null ? null : pword.toCharArray();\n+        store.load(is, pw);\n     \n         ArrayList<String> v_names = new ArrayList<String>();\n         ArrayList<PrivateKey> v_keys = new ArrayList<PrivateKey>();\n@@ -76,7 +77,7 @@ public void load(InputStream is, String pword) throws Exception {\n                 String alias = aliases.nextElement();\n                 if (store.isKeyEntry(alias)) {\n                     if ((index >= startIndex && index <= endIndex)) {\n-                        _key = (PrivateKey) store.getKey(alias, pword.toCharArray());\n+                        _key = (PrivateKey) store.getKey(alias, pw);\n                         if (null == _key) {\n                             throw new Exception(\"No key found for alias: \" + alias); // Should not happen\n                         }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when using HEAD method\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@1095589 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 398b3b342ea04f067dabb3989af694f8fee16cbc",
        "commit": "https://github.com/apache/jmeter/commit/1989766802b0cc0bfedfd92d884cb7a82205e371",
        "parent": "https://github.com/apache/jmeter/commit/4d47567ea074e07ff36f5be86343f0364cbcff92",
        "bug_id": "jmeter_72",
        "file": [
            {
                "sha": "ec5fe2de55a3d642bb0fc5840b39bb1fcefce5a1",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1989766802b0cc0bfedfd92d884cb7a82205e371/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1989766802b0cc0bfedfd92d884cb7a82205e371/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java?ref=1989766802b0cc0bfedfd92d884cb7a82205e371",
                "patch": "@@ -249,9 +249,10 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe\n             res.setRequestHeaders(getConnectionHeaders(httpMethod));\n \n             // Request sent. Now get the response:\n-            InputStream instream = new CountingInputStream(httpMethod.getResponseBodyAsStream());\n+            InputStream instream = httpMethod.getResponseBodyAsStream();\n \n             if (instream != null) {// will be null for HEAD\n+                instream = new CountingInputStream(instream);\n                 try {\n                     Header responseHeader = httpMethod.getResponseHeader(HEADER_CONTENT_ENCODING);\n                     if (responseHeader!= null && ENCODING_GZIP.equals(responseHeader.getValue())) {\n@@ -297,7 +298,9 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe\n             }\n \n             // record some sizes to allow HTTPSampleResult.getBytes() with different options\n-            res.setBodySize(((CountingInputStream) instream).getCount());\n+            if (instream != null) {\n+                res.setBodySize(((CountingInputStream) instream).getCount());\n+            }\n             res.setHeadersSize(calculateHeadersSize(httpMethod));\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Response headersSize=\" + res.getHeadersSize() + \" bodySize=\" + res.getBodySize()",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Properly fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@961682 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d2b64fbc177a1682927bc30df6848d79c00733dd",
        "commit": "https://github.com/apache/jmeter/commit/0f8b49ed73c70bc04c47f7664058586c0391d9cf",
        "parent": "https://github.com/apache/jmeter/commit/5d2a757f27672dc26a943494e47af50e9caed5d4",
        "bug_id": "jmeter_73",
        "file": [
            {
                "sha": "1bd341583b82fa85e3a931ba25448fb9be432a5d",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0f8b49ed73c70bc04c47f7664058586c0391d9cf/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0f8b49ed73c70bc04c47f7664058586c0391d9cf/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java?ref=0f8b49ed73c70bc04c47f7664058586c0391d9cf",
                "patch": "@@ -1072,9 +1072,11 @@ protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampl\n \n         // Iterate through the URLs and download each image:\n         if (urls != null && urls.hasNext()) {\n-            if (container != null) { // prevent NPE TODO incomplete solution\n-                res = container;\n+            if (container == null) {\n+                container = new HTTPSampleResult(res);\n+                container.addRawSubResult(res);\n             }\n+            res = container;\n \n             // Get the URL matcher\n             String re=getEmbeddedUrlRE();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@959046 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6a87e361b1a4ff7fcd50a5c2daea096eba5154d9",
        "commit": "https://github.com/apache/jmeter/commit/6241b98af954bfa26d111309c90c2074c6173326",
        "parent": "https://github.com/apache/jmeter/commit/52bac985398b7cea2e586b731c0f7963e1504338",
        "bug_id": "jmeter_74",
        "file": [
            {
                "sha": "241efec4e098fae488fe29e901c8ad561eee12ba",
                "filename": "test/src/org/apache/jmeter/junit/JMeterTest.java",
                "blob_url": "https://github.com/apache/jmeter/blob/6241b98af954bfa26d111309c90c2074c6173326/test/src/org/apache/jmeter/junit/JMeterTest.java",
                "raw_url": "https://github.com/apache/jmeter/raw/6241b98af954bfa26d111309c90c2074c6173326/test/src/org/apache/jmeter/junit/JMeterTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/junit/JMeterTest.java?ref=6241b98af954bfa26d111309c90c2074c6173326",
                "patch": "@@ -419,7 +419,7 @@ public void GUIComponents1() throws Exception {\n         if (!name.endsWith(\"TestBeanGUI\")) {\n             try {\n                 String label = guiItem.getLabelResource();\n-                assertTrue(label.length() > 0);\n+                assertTrue(\"Label should not be null or empty for \"+name,label != null && label.length() > 0);\n                 assertFalse(\"'\" + label + \"' should be in resource file for \" + name, JMeterUtils.getResString(\n                         label).startsWith(JMeterUtils.RES_KEY_PFX));\n             } catch (UnsupportedOperationException uoe) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@938057 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ce73ea46cae03e0ff7b8bbd57fd3590bf4014a7f",
        "commit": "https://github.com/apache/jmeter/commit/f658c67c5302289c424581ffdcf20a190f904e95",
        "parent": "https://github.com/apache/jmeter/commit/8994fa4950ba6ca62e9fd6c235f3666a59953689",
        "bug_id": "jmeter_75",
        "file": [
            {
                "sha": "e86d0b1ea0711540e849746fc1097663b7892158",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f658c67c5302289c424581ffdcf20a190f904e95/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f658c67c5302289c424581ffdcf20a190f904e95/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java?ref=f658c67c5302289c424581ffdcf20a190f904e95",
                "patch": "@@ -81,10 +81,10 @@ public Message get(String id) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"GET_ID [\" + id + \"] for \" + holder);\n         }\n-        if (!holder.hasReply()) {\n-            log.info(\"Message with \" + id + \" not found.\");\n+        if (holder == null || !holder.hasReply()) {\n+            log.debug(\"Message with \" + id + \" not found.\");\n         }\n-        return (Message) holder.getReply();\n+        return holder==null ? null : (Message) holder.getReply();\n     }\n }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Prevent NPEs\nGeneral tidyup\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@930995 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ee7268a55279558b9610533c993aca5fec36a74d",
        "commit": "https://github.com/apache/jmeter/commit/42bc02d9f0e6f4d21f6281dcc72ba670bffbcf8c",
        "parent": "https://github.com/apache/jmeter/commit/1015ce78751638d4c7b8a145a08b4a00ba5def7b",
        "bug_id": "jmeter_76",
        "file": [
            {
                "sha": "3b2479e85beeb88571c3559df1ae390f913ef48d",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java",
                "blob_url": "https://github.com/apache/jmeter/blob/42bc02d9f0e6f4d21f6281dcc72ba670bffbcf8c/src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java",
                "raw_url": "https://github.com/apache/jmeter/raw/42bc02d9f0e6f4d21f6281dcc72ba670bffbcf8c/src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java",
                "status": "modified",
                "changes": 76,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java?ref=42bc02d9f0e6f4d21f6281dcc72ba670bffbcf8c",
                "patch": "@@ -37,33 +37,40 @@\n \n     private static final Logger log = LoggingManager.getLoggerForClass();\n \n-    private TopicConnection CONN = null;\n+    private TopicConnection connection = null;\n \n-    private TopicSession SESSION = null;\n+    private TopicSession session = null;\n \n-    private Topic TOPIC = null;\n+    private Topic topic = null;\n \n-    private TopicPublisher PUBLISHER = null;\n-\n-    //private byte[] RESULT = null;\n-\n-    //private Object OBJ_RESULT = null;\n+    private TopicPublisher publisher = null;\n \n     /**\n-     *\n+     * Create a publisher using either the jndi.properties file or the provided parameters\n+     * @param useProps true if a jndi.properties file is to be used\n+     * @param initialContextFactory the (ignored if useProps is true)\n+     * @param providerUrl (ignored if useProps is true)\n+     * @param connfactory\n+     * @param topic\n+     * @param useAuth (ignored if useProps is true)\n+     * @param securityPrincipal (ignored if useProps is true)\n+     * @param securityCredentials (ignored if useProps is true)\n      */\n-    public Publisher(boolean useProps, String jndi, String url, String connfactory, String topic, boolean useAuth,\n-            String user, String pwd) {\n+    public Publisher(boolean useProps, String initialContextFactory, String providerUrl, \n+            String connfactory, String topic, boolean useAuth,\n+            String securityPrincipal, String securityCredentials) {\n         super();\n-        Context ctx = initJNDI(useProps, jndi, url, useAuth, user, pwd);\n+        Context ctx = initJNDI(useProps, initialContextFactory, \n+                providerUrl, useAuth, securityPrincipal, securityCredentials);\n         if (ctx != null) {\n             initConnection(ctx, connfactory, topic);\n         } else {\n             log.error(\"Could not initialize JNDI Initial Context Factory\");\n         }\n     }\n \n-    private Context initJNDI(boolean useProps, String jndi, String url, boolean useAuth, String user, String pwd) {\n+    private Context initJNDI(boolean useProps, String initialContextFactory, \n+            String providerUrl, boolean useAuth, String securityPrincipal, String securityCredentials) {\n         if (useProps) {\n             try {\n                 return new InitialContext();\n@@ -72,17 +79,18 @@ private Context initJNDI(boolean useProps, String jndi, String url, boolean useA\n                 return null;\n             }\n         } else {\n-            return InitialContextFactory.lookupContext(jndi, url, useAuth, user, pwd);\n+            return InitialContextFactory.lookupContext(initialContextFactory, \n+                    providerUrl, useAuth, securityPrincipal, securityCredentials);\n         }\n     }\n \n-    private void initConnection(Context ctx, String connfactory, String topic) {\n+    private void initConnection(Context ctx, String connfactory, String topicName) {\n         try {\n             ConnectionFactory.getTopicConnectionFactory(ctx,connfactory);\n-            this.CONN = ConnectionFactory.getTopicConnection();\n-            this.TOPIC = InitialContextFactory.lookupTopic(ctx, topic);\n-            this.SESSION = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);\n-            this.PUBLISHER = this.SESSION.createPublisher(this.TOPIC);\n+            connection = ConnectionFactory.getTopicConnection();\n+            topic = InitialContextFactory.lookupTopic(ctx, topicName);\n+            session = connection.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);\n+            publisher = session.createPublisher(topic);\n             log.info(\"created the topic connection successfully\");\n         } catch (JMSException e) {\n             log.error(\"Connection error: \" + e.getMessage());\n@@ -91,34 +99,40 @@ private void initConnection(Context ctx, String connfactory, String topic) {\n \n     public void publish(String text) {\n         try {\n-            TextMessage msg = this.SESSION.createTextMessage(text);\n-            this.PUBLISHER.publish(msg);\n+            TextMessage msg = session.createTextMessage(text);\n+            publisher.publish(msg);\n         } catch (JMSException e) {\n             log.error(e.getMessage());\n         }\n     }\n \n     public void publish(Serializable contents) {\n         try {\n-            ObjectMessage msg = this.SESSION.createObjectMessage(contents);\n-            this.PUBLISHER.publish(msg);\n+            ObjectMessage msg = session.createObjectMessage(contents);\n+            publisher.publish(msg);\n         } catch (JMSException e) {\n             log.error(e.getMessage());\n         }\n     }\n \n     /**\n-     * Clise will close the session\n+     * Close will close the session\n      */\n     public void close() {\n         try {\n-            log.info(\"Publisher closed\");\n-            this.PUBLISHER.close();\n-            this.SESSION.close();\n-            this.CONN.close();\n-            this.PUBLISHER = null;\n-            this.SESSION = null;\n-            this.CONN = null;\n+            log.info(\"Publisher close()\");\n+            if (publisher != null){\n+                publisher.close();\n+            }\n+            if (session != null){\n+                session.close();\n+            }\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            publisher = null;\n+            session = null;\n+            connection = null;\n         } catch (JMSException e) {\n             log.error(e.getMessage());\n         } catch (Throwable e) {",
                "deletions": 31
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when mask == 0\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@921767 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1060990ec30920f824574e87bb278df5ce86406c",
        "commit": "https://github.com/apache/jmeter/commit/dede859efdea2bc40e41fd690117de92033bcdea",
        "parent": "https://github.com/apache/jmeter/commit/31253bab32e08a6186a95dc954ad096038a75347",
        "bug_id": "jmeter_77",
        "file": [
            {
                "sha": "b6f3f7bf40f3d53cdb5e70283064fe5cdfd8bbad",
                "filename": "src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "blob_url": "https://github.com/apache/jmeter/blob/dede859efdea2bc40e41fd690117de92033bcdea/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "raw_url": "https://github.com/apache/jmeter/raw/dede859efdea2bc40e41fd690117de92033bcdea/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java?ref=dede859efdea2bc40e41fd690117de92033bcdea",
                "patch": "@@ -126,9 +126,13 @@ public SampleResult runTest(JavaSamplerContext context) {\n             // Record sample start time.\n             results.sampleStart();\n \n-            // Generate a random value using the current time.\n-            long start = System.currentTimeMillis();\n-            long sleep = getSleepTime() + (start % getSleepMask());\n+            long sleep = sleepTime;\n+            // Only do the calculation if it is needed\n+            if (sleepTime > 0 && sleepMask > 0) {\n+                long start = System.currentTimeMillis();\n+                // Generate a random-ish offset value using the current time.\n+                sleep = sleepTime + (start % sleepMask);\n+            }\n \n             results.setSampleLabel(\"Sleep Test: time = \" + sleep);\n \n@@ -217,23 +221,4 @@ private String whoAmI() {\n         sb.append(Integer.toHexString(hashCode()));\n         return sb.toString();\n     }\n-\n-    /**\n-     * Get the value of the sleepTime field.\n-     *\n-     * @return the base number of milliseconds to sleep during each sample.\n-     */\n-    private long getSleepTime() {\n-        return sleepTime;\n-    }\n-\n-    /**\n-     * Get the value of the sleepMask field.\n-     *\n-     * @return a mask to be applied to the current time in order to add a random\n-     *         component to the sleep time.\n-     */\n-    private long getSleepMask() {\n-        return sleepMask;\n-    }\n }",
                "deletions": 22
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Prevent NPE in askThreadsToStop()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@904514 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 87a692474f49513dcd4403d1d2a4e58b47e1c58f",
        "commit": "https://github.com/apache/jmeter/commit/4025778e2f3dd709f6c1926456e8a4db3d42b531",
        "parent": "https://github.com/apache/jmeter/commit/46148e744e51932190b359d7abd27ebee6a858b8",
        "bug_id": "jmeter_78",
        "file": [
            {
                "sha": "27ed59caaaad57b3e81e49cf9ade75f6e6132dfe",
                "filename": "src/core/org/apache/jmeter/engine/StandardJMeterEngine.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4025778e2f3dd709f6c1926456e8a4db3d42b531/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4025778e2f3dd709f6c1926456e8a4db3d42b531/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java?ref=4025778e2f3dd709f6c1926456e8a4db3d42b531",
                "patch": "@@ -578,7 +578,9 @@ private void tellThreadsToStop() {\n     }\n \n     public void askThreadsToStop() {\n-        engine.stopTest(false);\n+        if (engine == null) { // Will be null if StopTest thread has started\n+            engine.stopTest(false);\n+        }\n     }\n \n     private void stopAllThreads() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 48144 - NPE in OnMessageSubscriber\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@833335 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f06e8f743693cd854ff5e209820d90ae9d7b1c65",
        "commit": "https://github.com/apache/jmeter/commit/930723edfb02e8d6fc0c9945281c40d7b6b005dd",
        "parent": "https://github.com/apache/jmeter/commit/2bd8802e7ba8c55710c8b0252fb7e316ff1a627a",
        "bug_id": "jmeter_79",
        "file": [
            {
                "sha": "a96e48383bd1782a7daace5cc92d896d69a224e5",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java",
                "blob_url": "https://github.com/apache/jmeter/blob/930723edfb02e8d6fc0c9945281c40d7b6b005dd/src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java",
                "raw_url": "https://github.com/apache/jmeter/raw/930723edfb02e8d6fc0c9945281c40d7b6b005dd/src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java?ref=930723edfb02e8d6fc0c9945281c40d7b6b005dd",
                "patch": "@@ -115,6 +115,7 @@ public Context initJNDI(boolean useProps, String jndi, String url, boolean useAu\n      */\n     public void initConnection(Context ctx, String connfactory, String topic) {\n         try {\n+            ConnectionFactory.getTopicConnectionFactory(ctx, connfactory);\n             this.CONN = ConnectionFactory.getTopicConnection();\n             this.TOPIC = InitialContextFactory.lookupTopic(ctx, topic);\n             this.SESSION = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);",
                "deletions": 0
            },
            {
                "sha": "f29e1d385c02bcf3a7d91368558b31b1e4ef87b6",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/930723edfb02e8d6fc0c9945281c40d7b6b005dd/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/930723edfb02e8d6fc0c9945281c40d7b6b005dd/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=930723edfb02e8d6fc0c9945281c40d7b6b005dd",
                "patch": "@@ -76,6 +76,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n <li>Bug 47420 - LDAP extended request not closing connections during add request</li>\n <li>Bug 47870 - JMSSubscriber fails due to NPE</li>\n <li>Bug 47899 -  NullPointerExceptions in ReceiveSubscriber constructor</li>\n+<li>Bug 48144 - NPE in OnMessageSubscriber</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE in serialisation tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@773157 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5cc76f4daf59d764509566a24fc2f6a9de2a589d",
        "commit": "https://github.com/apache/jmeter/commit/f3759ff2fe0944966eb87865e6c262519632c379",
        "parent": "https://github.com/apache/jmeter/commit/7166bc19e9ecd2def8c3de3eda2b74847896e0ee",
        "bug_id": "jmeter_80",
        "file": [
            {
                "sha": "615c21dcdc701f0b90de5cddf76fca47b151086d",
                "filename": "src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f3759ff2fe0944966eb87865e6c262519632c379/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f3759ff2fe0944966eb87865e6c262519632c379/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java?ref=f3759ff2fe0944966eb87865e6c262519632c379",
                "patch": "@@ -236,6 +236,9 @@ public void setToolTipText(String text) {\n      * @return the text of the tool tip\n      */\n    public String getToolTipText() {\n+       if (choiceList == null){ // Necessary to avoid NPE when testing serialisation\n+           return null;\n+       }\n        return choiceList.getToolTipText();\n    }\n ",
                "deletions": 0
            },
            {
                "sha": "ce9ccfa77395e7feab6d88f2e1bca84fa9434922",
                "filename": "src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f3759ff2fe0944966eb87865e6c262519632c379/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f3759ff2fe0944966eb87865e6c262519632c379/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java?ref=f3759ff2fe0944966eb87865e6c262519632c379",
                "patch": "@@ -46,7 +46,7 @@\n     private JTextField mTextField;\n \n     // Maybe move to vector if MT problems occur\n-    private ArrayList mChangeListeners = new ArrayList(3);\n+    private final ArrayList mChangeListeners = new ArrayList(3);\n \n     // A temporary cache for the focus listener\n     private String oldValue = \"\";\n@@ -190,7 +190,10 @@ public void setToolTipText(String text) {\n       * @return the text of the tool tip\n       */\n     public String getToolTipText() {\n-        return mTextField.getToolTipText();\n+        if (mTextField == null){ // Necessary to avoid NPE when testing serialisation\n+            return null;\n+        }\n+       return mTextField.getToolTipText();\n     }\n \n     /**",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@713446 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 23ff3925b99b4f6f56fb849df95bd335b7d30f4e",
        "commit": "https://github.com/apache/jmeter/commit/d92ca9b850d909471425d64e648f11cf4fa6adfd",
        "parent": "https://github.com/apache/jmeter/commit/27657fb06188a59a499ad2ac401fc74541d9203e",
        "bug_id": "jmeter_81",
        "file": [
            {
                "sha": "86b779dc5633eff5a5cbf060add0afb383474c4d",
                "filename": "src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d92ca9b850d909471425d64e648f11cf4fa6adfd/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d92ca9b850d909471425d64e648f11cf4fa6adfd/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java?ref=d92ca9b850d909471425d64e648f11cf4fa6adfd",
                "patch": "@@ -21,6 +21,7 @@\n import java.awt.BorderLayout;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n@@ -118,7 +119,7 @@ private void init() {// called from ctor, so must not be overridable\n      * @return a panel containing the relevant components\n      */\n     private JPanel createClassnamePanel() {\n-        List possibleClasses = null;\n+        List possibleClasses = new ArrayList();\n \n         try {\n             // Find all the classes which implement the JavaSamplerClient",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@711629 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4350581ccf13746f245af110d56fcfbef6a04237",
        "commit": "https://github.com/apache/jmeter/commit/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
        "parent": "https://github.com/apache/jmeter/commit/94dd949ce24d399165b462038dc041d2c9aa6a35",
        "bug_id": "jmeter_82",
        "file": [
            {
                "sha": "b3df93d03545f486295067aa0d2529e7d717e2a5",
                "filename": "src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java?ref=6dcc29a451a4d6faabbb5c4c85f7fce8086e1df8",
                "patch": "@@ -90,7 +90,7 @@ public void write(OutputStream os, InputStream is) {\n      * )\n      */\n     public String read(InputStream is) {\n-        byte[] msg = null;\n+        byte[] msg = new byte[0];\n         int msgLen = 0;\n         try {\n             byte[] lengthBuffer = new byte[lengthPrefixLen];",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Protect against possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@667698 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bbef06355d0418fed61b3e23c94c3e2c536fb4c3",
        "commit": "https://github.com/apache/jmeter/commit/c92ec08b04f15072a74fe6c96e0c42ac548e1279",
        "parent": "https://github.com/apache/jmeter/commit/ca49c4516e1d0e28bf6f340fe41d2cf544554a1a",
        "bug_id": "jmeter_83",
        "file": [
            {
                "sha": "28a35bb8164cec4aa9b703f237361a895458f8b3",
                "filename": "src/functions/org/apache/jmeter/functions/StringFromFile.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c92ec08b04f15072a74fe6c96e0c42ac548e1279/src/functions/org/apache/jmeter/functions/StringFromFile.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c92ec08b04f15072a74fe6c96e0c42ac548e1279/src/functions/org/apache/jmeter/functions/StringFromFile.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/StringFromFile.java?ref=c92ec08b04f15072a74fe6c96e0c42ac548e1279",
                "patch": "@@ -286,7 +286,9 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n \n \t\tif (myName.length() > 0) {\n             JMeterVariables vars = getVariables();\n-\t\t\tvars.put(myName, myValue);\n+\t\t\tif (vars != null) {// Can be null if called from Config item testEnded() method\n+\t\t\t    vars.put(myName, myValue);\n+\t\t\t}\n \t\t}\n \n \t\tif (log.isDebugEnabled()) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@653819 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1cc421941dd291d0408a98b4c32d21d2a6d374be",
        "commit": "https://github.com/apache/jmeter/commit/63d2a239ab999fe62dab34ce51c42f30c8118784",
        "parent": "https://github.com/apache/jmeter/commit/ee877d2dcaedf172ef9686fff949fb080e521d7a",
        "bug_id": "jmeter_84",
        "file": [
            {
                "sha": "44859bfefcd83557d1ffc05dceb70b2a04ba5ae2",
                "filename": "src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/63d2a239ab999fe62dab34ce51c42f30c8118784/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/63d2a239ab999fe62dab34ce51c42f30c8118784/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java?ref=63d2a239ab999fe62dab34ce51c42f30c8118784",
                "patch": "@@ -153,7 +153,7 @@ public void addSample(SampleResult sample) {\n     \t\tif (sample.isResponseCodeOK() && ((HTTPSampleResult) sample).isMonitor()) {\n     \t\t\tObjectFactory of = ObjectFactory.getInstance();\n     \t\t\tStatus st = of.parseBytes(sample.getResponseData());\n-    \t\t\tif (st != null) {\n+    \t\t\tif (st != null && surl != null) {// surl can be null if read from a file\n     \t\t\t\tMonitorStats stat = new MonitorStats(Stats.calculateStatus(st), Stats.calculateLoad(st), 0, Stats\n     \t\t\t\t\t\t.calculateMemoryLoad(st), Stats.calculateThreadLoad(st), surl.getHost(), String.valueOf(surl\n     \t\t\t\t\t\t.getPort()), surl.getProtocol(), System.currentTimeMillis());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@653149 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 850e97226574625f274088a44de3c36df264858d",
        "commit": "https://github.com/apache/jmeter/commit/3f5b08e594f1df100709590ab4d252f757e31c96",
        "parent": "https://github.com/apache/jmeter/commit/1d207d1c899f67d8605b368aef92ba0cc10124de",
        "bug_id": "jmeter_85",
        "file": [
            {
                "sha": "b7fc326c9b7578b7e5ae4fd8fabc5d5e709d591a",
                "filename": "src/core/org/apache/jmeter/reporters/Summariser.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3f5b08e594f1df100709590ab4d252f757e31c96/src/core/org/apache/jmeter/reporters/Summariser.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3f5b08e594f1df100709590ab4d252f757e31c96/src/core/org/apache/jmeter/reporters/Summariser.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/Summariser.java?ref=3f5b08e594f1df100709590ab4d252f757e31c96",
                "patch": "@@ -205,7 +205,7 @@ public void sampleOccurred(SampleEvent e) {\n \t\t\t}\n \n \t\t\t// Only if we have updated them\n-\t\t\tif (myTotal.getNumSamples() != myDelta.getNumSamples()) {\n+\t\t\tif (myTotal != null && myDelta != null &&myTotal.getNumSamples() != myDelta.getNumSamples()) {\n \t\t\t\tstr = format(myTotal, \"=\");\n \t\t\t\tif (TOLOG) {\n \t\t\t\t\tlog.info(str);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@653147 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: fcdb6ed4aedd63ffe15bf79b5db316af6637cfc0",
        "commit": "https://github.com/apache/jmeter/commit/1d207d1c899f67d8605b368aef92ba0cc10124de",
        "parent": "https://github.com/apache/jmeter/commit/de6eb4b4df98e0e260a45c9c03b702b056c83905",
        "bug_id": "jmeter_86",
        "file": [
            {
                "sha": "21d07154918cbdaa9df9a803ece46239d28982a7",
                "filename": "src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1d207d1c899f67d8605b368aef92ba0cc10124de/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java?ref=1d207d1c899f67d8605b368aef92ba0cc10124de",
                "patch": "@@ -308,6 +308,7 @@ protected Collection normalizeList(Collection coll) {\n \t\t\t\t\tnewColl = (Collection) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.add(convertObject(item));\n@@ -335,6 +336,7 @@ protected Map normalizeMap(Map coll) {\n \t\t\t\t\tnewColl = (Map) coll.getClass().newInstance();\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tlog.error(\"Bad collection\", e);\n+\t\t\t\t\treturn coll;\n \t\t\t\t}\n \t\t\t}\n \t\t\tnewColl.put(item, convertObject(prop));",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@593669 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 048d24a1e0189c690c6b09f631e03e3e6d68ba9e",
        "commit": "https://github.com/apache/jmeter/commit/0a1e3df3e303e619c7f4a42d31de0c58537aecb5",
        "parent": "https://github.com/apache/jmeter/commit/02a90679dbdc00b49dfb5413ded8a7c26fdf100d",
        "bug_id": "jmeter_87",
        "file": [
            {
                "sha": "8d3e781b4d7bab01e703fb21f564371c01feb2e6",
                "filename": "src/functions/org/apache/jmeter/functions/JavaScript.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a1e3df3e303e619c7f4a42d31de0c58537aecb5/src/functions/org/apache/jmeter/functions/JavaScript.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a1e3df3e303e619c7f4a42d31de0c58537aecb5/src/functions/org/apache/jmeter/functions/JavaScript.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/JavaScript.java?ref=0a1e3df3e303e619c7f4a42d31de0c58537aecb5",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.jmeter.engine.util.CompoundVariable;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.JMeterContext;\n+import org.apache.jmeter.threads.JMeterContextService;\n import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jorphan.logging.LoggingManager;\n@@ -66,7 +68,8 @@ public Object clone() throws CloneNotSupportedException {\n \tpublic synchronized String execute(SampleResult previousResult, Sampler currentSampler)\n \t\t\tthrows InvalidVariableException {\n \n-\t\tJMeterVariables vars = getVariables();\n+\t\tJMeterContext jmctx = JMeterContextService.getContext();\n+\t\tJMeterVariables vars = jmctx.getVariables();\n \n \t\tString script = ((CompoundVariable) values[0]).execute();\n \t\t// Allow variable to be omitted\n@@ -79,9 +82,9 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n \t\t\tScriptable scope = cx.initStandardObjects(null);\n \t\t\t\n \t\t\t// Set up some objects for the script to play with\n-\t\t\tscope.put(\"ctx\", scope, currentSampler.getThreadContext()); //$NON-NLS-1$\n+\t\t\tscope.put(\"ctx\", scope, jmctx); //$NON-NLS-1$\n \t\t\tscope.put(\"vars\", scope, vars); //$NON-NLS-1$\n-\t\t\tscope.put(\"theadName\", scope, currentSampler.getThreadName()); //$NON-NLS-1$\n+\t\t\tscope.put(\"theadName\", scope, Thread.currentThread().getName()); //$NON-NLS-1$\n \t\t\tscope.put(\"sampler\", scope, currentSampler); //$NON-NLS-1$\n \t\t\tscope.put(\"sampleResult\", scope, previousResult); //$NON-NLS-1$\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@585543 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 9f2c36335e12f9471e88ded8cdc62801f0f6338b",
        "commit": "https://github.com/apache/jmeter/commit/feeee7cc6c5e5ad028bb9447cbc3e5b91f029e8e",
        "parent": "https://github.com/apache/jmeter/commit/51ec2aa85818317d44c6825dbe6250c362ac2eaf",
        "bug_id": "jmeter_88",
        "file": [
            {
                "sha": "644d60f73cf3c77888f87c3c3d97b540d8d50a3d",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/feeee7cc6c5e5ad028bb9447cbc3e5b91f029e8e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/feeee7cc6c5e5ad028bb9447cbc3e5b91f029e8e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java?ref=feeee7cc6c5e5ad028bb9447cbc3e5b91f029e8e",
                "patch": "@@ -442,7 +442,7 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe\n \t\t\t\t\t\tthrow e;\n \t\t\t\t\t}\n \t\t\t\t\tlog.debug(\"Bind exception, try again\");\n-\t\t\t\t\tconn.disconnect();\n+\t\t\t\t\tif (conn!=null) conn.disconnect();\n \t\t\t\t\tthis.setUseKeepAlive(false);\n \t\t\t\t\tcontinue; // try again\n \t\t\t\t} catch (IOException e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in test case\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@577461 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d6f1b9ce18008a52b031bdf507d78747ba6c4483",
        "commit": "https://github.com/apache/jmeter/commit/bbe837f3010087eb6f0fb8b9d44c5290a13b7eb1",
        "parent": "https://github.com/apache/jmeter/commit/87ff56ae7ea7bd81c3f74d8e1bea1e6aac0cf4a3",
        "bug_id": "jmeter_89",
        "file": [
            {
                "sha": "8b2c99ee338137564d799631f47cd1088efa27a4",
                "filename": "src/core/org/apache/jmeter/util/BeanShellTestElement.java",
                "blob_url": "https://github.com/apache/jmeter/blob/bbe837f3010087eb6f0fb8b9d44c5290a13b7eb1/src/core/org/apache/jmeter/util/BeanShellTestElement.java",
                "raw_url": "https://github.com/apache/jmeter/raw/bbe837f3010087eb6f0fb8b9d44c5290a13b7eb1/src/core/org/apache/jmeter/util/BeanShellTestElement.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/BeanShellTestElement.java?ref=bbe837f3010087eb6f0fb8b9d44c5290a13b7eb1",
                "patch": "@@ -63,6 +63,9 @@ protected BeanShellInterpreter getBeanShellInterpreter() {\n     }\n \n \tprivate void init() {\n+\t\tparameters=\"\"; // ensure variables are not null\n+\t\tfilename=\"\";\n+\t\tscript=\"\";\n \t\ttry {\n             String initFileName = JMeterUtils.getProperty(getInitFileProperty());\n             hasInitFile = initFileName != null;\n@@ -80,8 +83,7 @@ private Object readResolve() {\n     public Object clone() {\n         BeanShellTestElement o = (BeanShellTestElement) super.clone();\n         o.init();\n-        o.setScript(getScript());\n-        return o;\n+       return o;\n     }\n \n     protected Object processFileOrScript(BeanShellInterpreter bsh) throws JMeterException{",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Eliminate possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@570452 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ceb834645ebdf7beaf1ea560e1c6623356585201",
        "commit": "https://github.com/apache/jmeter/commit/f24639dfcc8550c52350d85edbae4a3b271e9431",
        "parent": "https://github.com/apache/jmeter/commit/2364953f7dc82c239a8c477e6f6b6812bc3c9e17",
        "bug_id": "jmeter_90",
        "file": [
            {
                "sha": "e587f220bb7ef1182ce5e144888857b51e91ea4c",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/ConnectionFactory.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f24639dfcc8550c52350d85edbae4a3b271e9431/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ConnectionFactory.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f24639dfcc8550c52350d85edbae4a3b271e9431/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ConnectionFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ConnectionFactory.java?ref=f24639dfcc8550c52350d85edbae4a3b271e9431",
                "patch": "@@ -98,7 +98,7 @@ public static synchronized TopicConnectionFactory getTopicConnectionFactory(Cont\n \t\t\t\t\tfactory = (TopicConnectionFactory) objfac;\n \t\t\t\t}\n \t\t\t} catch (NamingException e) {\n-\t\t\t\tlog.error(e.getRootCause().toString());// JDK1.4 getCause()\n+\t\t\t\tlog.error(e.toString());\n \t\t\t}\n \t\t}\n \t\treturn factory;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@463051 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b618649f8e24f7733d8deb47efcd03e549568095",
        "commit": "https://github.com/apache/jmeter/commit/7af21a4fc4d242ad0a17378d028dd2a2e94be985",
        "parent": "https://github.com/apache/jmeter/commit/3e554df3ca1e3e4552076b37f5fd312eeff368fb",
        "bug_id": "jmeter_91",
        "file": [
            {
                "sha": "c0c7827a952504414d633b929c8f2952e58b5425",
                "filename": "src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "blob_url": "https://github.com/apache/jmeter/blob/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "raw_url": "https://github.com/apache/jmeter/raw/7af21a4fc4d242ad0a17378d028dd2a2e94be985/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java?ref=7af21a4fc4d242ad0a17378d028dd2a2e94be985",
                "patch": "@@ -318,7 +318,7 @@\n \t\t\t_formatter = null;\n \t\t}\n \n-\t\t_timestamp = !_timeStampFormat.equalsIgnoreCase(NONE);\n+\t\t_timestamp = !NONE.equalsIgnoreCase(_timeStampFormat);// reversed compare allows for null\n \n \t\t_saveAssertionResultsFailureMessage = TRUE.equalsIgnoreCase(props.getProperty(\n \t\t\t\tASSERTION_RESULTS_FAILURE_MESSAGE_PROP, FALSE));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@385854 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 9b0f8a166c55783fb8a331fbbedf801893559572",
        "commit": "https://github.com/apache/jmeter/commit/24a95581e9881bc7245f0e6e8d0e69253418ea62",
        "parent": "https://github.com/apache/jmeter/commit/0f394a6892b6fc25d219e327e57f24cf64b97e85",
        "bug_id": "jmeter_92",
        "file": [
            {
                "sha": "cb7097d831e575ae65d5db0e5d54044d9ba5f026",
                "filename": "src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/24a95581e9881bc7245f0e6e8d0e69253418ea62/src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/24a95581e9881bc7245f0e6e8d0e69253418ea62/src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/timers/BeanShellTimer.java?ref=24a95581e9881bc7245f0e6e8d0e69253418ea62",
                "patch": "@@ -53,18 +53,24 @@ public BeanShellTimer() throws ClassNotFoundException {\n \t * @see org.apache.jmeter.timers.Timer#delay()\n \t */\n \tpublic long delay() {\n-        String ret=\"\";\n+        String ret=\"0\";\n+        JMeterContext jmctx = JMeterContextService.getContext();\n+        JMeterVariables vars = jmctx.getVariables();\n         try {\n             // Add variables for access to context and variables\n-            JMeterContext jmctx = JMeterContextService.getContext();\n-            JMeterVariables vars = jmctx.getVariables();\n             bshInterpreter.set(\"ctx\", jmctx);//$NON-NLS-1$\n             bshInterpreter.set(\"vars\", vars);//$NON-NLS-1$\n-            ret = bshInterpreter.eval(script).toString();\n+            Object o = bshInterpreter.eval(script);\n+            if (o != null) ret=o.toString();\n         } catch (JMeterException e) {\n             log.warn(\"Problem in BeanShell script \"+e);\n         }\n-\t\treturn Long.decode(ret).longValue();\n+        try {\n+        \treturn Long.decode(ret).longValue();\n+        } catch (NumberFormatException e){\n+        \tlog.warn(e.getLocalizedMessage());\n+        \treturn 0;\n+        }\n \t}\n \n \tpublic Object clone() {",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@344013 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f3991386e415a51b58c86de629fc218be380a5e0",
        "commit": "https://github.com/apache/jmeter/commit/041bca4b1cee43adac62658e853d1e8fe73e9136",
        "parent": "https://github.com/apache/jmeter/commit/2a3cfd6f528636ddbb1e91716822464bb997080e",
        "bug_id": "jmeter_93",
        "file": [
            {
                "sha": "883d41cd46313c673fb8ac8c34ea12380171d8ac",
                "filename": "src/core/org/apache/jmeter/gui/action/Load.java",
                "blob_url": "https://github.com/apache/jmeter/blob/041bca4b1cee43adac62658e853d1e8fe73e9136/src/core/org/apache/jmeter/gui/action/Load.java",
                "raw_url": "https://github.com/apache/jmeter/raw/041bca4b1cee43adac62658e853d1e8fe73e9136/src/core/org/apache/jmeter/gui/action/Load.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Load.java?ref=041bca4b1cee43adac62658e853d1e8fe73e9136",
                "patch": "@@ -114,7 +114,9 @@ public void doAction(ActionEvent e) {\n \t\t\tJMeterUtils.reportErrorToUser(msg);\n \t\t} finally {\n \t\t\ttry {\n-\t\t\t\treader.close();\n+\t\t\t\tif (reader!=null) {\n+                    reader.close();\n+                }\n \t\t\t} catch (IOException e1) {\n \t\t\t\t// ignored\n \t\t\t}",
                "deletions": 1
            },
            {
                "sha": "f689a7b4657b4822b478244fc79eec3753206c29",
                "filename": "src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "blob_url": "https://github.com/apache/jmeter/blob/041bca4b1cee43adac62658e853d1e8fe73e9136/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "raw_url": "https://github.com/apache/jmeter/raw/041bca4b1cee43adac62658e853d1e8fe73e9136/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java?ref=041bca4b1cee43adac62658e853d1e8fe73e9136",
                "patch": "@@ -113,7 +113,9 @@ public void doAction(ActionEvent e) {\n \t\t\tJMeterUtils.reportErrorToUser(msg);\n \t\t} finally {\n \t\t\ttry {\n-\t\t\t\treader.close();\n+\t\t\t\tif (reader != null) {\n+                    reader.close();\n+                }\n \t\t\t} catch (IOException e1) {\n \t\t\t\t// ignored\n \t\t\t}",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE when redirecting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324771 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6cbdbebd4eedfc1cc7b079d89e54ac4aa310a5ca",
        "commit": "https://github.com/apache/jmeter/commit/0f45ea4bd0fdc37592a1d5f949645ad687e64762",
        "parent": "https://github.com/apache/jmeter/commit/963345bc28f469981cf2f6a6b44f8489be59c9e6",
        "bug_id": "jmeter_94",
        "file": [
            {
                "sha": "2c3ce6af65ce191fa8821e5353f7605921d2a3f7",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0f45ea4bd0fdc37592a1d5f949645ad687e64762/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0f45ea4bd0fdc37592a1d5f949645ad687e64762/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java?ref=0f45ea4bd0fdc37592a1d5f949645ad687e64762",
                "patch": "@@ -36,7 +36,6 @@\n import org.apache.commons.httpclient.methods.PostMethod;\n import org.apache.commons.httpclient.protocol.Protocol;\n import org.apache.jmeter.config.Argument;\n-import org.apache.jmeter.config.Arguments;\n \n import org.apache.jmeter.protocol.http.control.AuthManager;\n import org.apache.jmeter.protocol.http.control.CookieManager;\n@@ -488,8 +487,13 @@ protected HTTPSampleResult sample(\n \n             res.setResponseMessage(httpMethod.getStatusText());\n \n-            String ct= httpMethod.getResponseHeader(\"Content-Type\").getValue();\n-            res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1\n+            String ct=null;\n+            Header h = httpMethod.getResponseHeader(\"Content-Type\");\n+            if (h!=null)// Can be missing, e.g. on redirect\n+            {\n+                ct= h.getValue();\n+                res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1\n+            }\n             if (ct != null)\n             {\n             \t// Extract charset and store as DataEncoding",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE on headless systems\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324365 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 238e892ea3a262d270d9ed62ff4b154e7fa05031",
        "commit": "https://github.com/apache/jmeter/commit/007ad04ff0157681c9064e689ec69d0e2c490b30",
        "parent": "https://github.com/apache/jmeter/commit/2349cedb22692b81739b8478ce3304aa682a70ac",
        "bug_id": "jmeter_95",
        "file": [
            {
                "sha": "0fbbe5548903d6dcb93072f82a1db0e9fce23211",
                "filename": "src/core/org/apache/jmeter/gui/GuiPackage.java",
                "blob_url": "https://github.com/apache/jmeter/blob/007ad04ff0157681c9064e689ec69d0e2c490b30/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "raw_url": "https://github.com/apache/jmeter/raw/007ad04ff0157681c9064e689ec69d0e2c490b30/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/GuiPackage.java?ref=007ad04ff0157681c9064e689ec69d0e2c490b30",
                "patch": "@@ -621,9 +621,15 @@ public void localeChanged(LocaleChangeEvent event)\n         // EditCommand action -- we can't just trigger the action because that\n         // would populate the current node with the contents of the new GUI --\n         // which is empty.]\n-        getMainFrame().setMainPanel(\n-            (javax.swing.JComponent) getCurrentGui());\n-        getMainFrame().setEditMenu(getTreeListener().getCurrentNode()\n-                .createPopupMenu());\n+        MainFrame mf = getMainFrame(); // Fetch once\n+        if (mf == null) //Probably caused by unit testing on headless system\n+        {\n+        \tlog.warn(\"Mainframe is null\");\n+        }\n+        else\n+        {\n+        \tmf.setMainPanel((javax.swing.JComponent) getCurrentGui());\n+        \tmf.setEditMenu(getTreeListener().getCurrentNode().createPopupMenu());\n+        }\n     }\n }\n\\ No newline at end of file",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE introduced earlier ...\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324335 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1a9415496a81c6e52b7731e867a755a3edf2e8ed",
        "commit": "https://github.com/apache/jmeter/commit/3936eb47ce199aadf8b630d9e6198da759f9b696",
        "parent": "https://github.com/apache/jmeter/commit/7b469ff0f26e8d5c94fd98cb0bff09c7eda1e639",
        "bug_id": "jmeter_96",
        "file": [
            {
                "sha": "295229b47130714fcfd049e8f659627f88f9126a",
                "filename": "src/core/org/apache/jmeter/reporters/FileReporter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3936eb47ce199aadf8b630d9e6198da759f9b696/src/core/org/apache/jmeter/reporters/FileReporter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3936eb47ce199aadf8b630d9e6198da759f9b696/src/core/org/apache/jmeter/reporters/FileReporter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/FileReporter.java?ref=3936eb47ce199aadf8b630d9e6198da759f9b696",
                "patch": "@@ -123,7 +123,7 @@ public void init(String file) throws IOException\n         }\n         finally\n         {\n-\t\t\treader.close();\n+\t\t\tif (reader != null) reader.close();\n         }\n         showPanel();\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324320 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e248aecd1911d62cbac40f28d4aee0baba350d7f",
        "commit": "https://github.com/apache/jmeter/commit/e34b2e4f8bdf8d058f7929470ce6bea6454f6bff",
        "parent": "https://github.com/apache/jmeter/commit/132344cc91de3a45fe347be789732b5d0a1d0bf3",
        "bug_id": "jmeter_97",
        "file": [
            {
                "sha": "62d7633f840eb67a816887c0693a705cd075d7a6",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e34b2e4f8bdf8d058f7929470ce6bea6454f6bff/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e34b2e4f8bdf8d058f7929470ce6bea6454f6bff/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java?ref=e34b2e4f8bdf8d058f7929470ce6bea6454f6bff",
                "patch": "@@ -218,7 +218,7 @@ public void run()\n         {\n             try\n             {\n-                mainSocket.close();\n+                if (mainSocket != null) mainSocket.close();\n             }\n             catch (Exception exc)\n             {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323818 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a2416044ddd697d1210732fa916c424bc73b51bf",
        "commit": "https://github.com/apache/jmeter/commit/61003aeb06a3e881a92ae8299ba9a8ac31d4341d",
        "parent": "https://github.com/apache/jmeter/commit/8941290a5f806821fc7a7e584363c7d9d9101994",
        "bug_id": "jmeter_98",
        "file": [
            {
                "sha": "a2d769b3d338488c06014f69112a1e233e8297e3",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/61003aeb06a3e881a92ae8299ba9a8ac31d4341d/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/61003aeb06a3e881a92ae8299ba9a8ac31d4341d/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java?ref=61003aeb06a3e881a92ae8299ba9a8ac31d4341d",
                "patch": "@@ -152,10 +152,15 @@ public String getSamplerData()\n         StringBuffer sb= new StringBuffer();\n         // TODO Auto-generated method stub\n         sb.append(getHTTPMethod());\n-        sb.append(' ');\n-        sb.append(getURL().toString());\n+        URL u= getURL();\n+        if (u != null)\n+        {\n+            sb.append(' ');\n+            sb.append(u.toString());\n+        }\n         String s= super.getSamplerData();\n-        if (s != null) {\n+        if (s != null)\n+        {\n             sb.append('\\n');\n             sb.append(s);\n         }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 56198 - JMSSampler : NullPointerException is thrown when JNDI underlying implementation of JMS provider does not comply with Context.getEnvironment contract\nApply check on every call of Context.getEnvironment\nBugzilla Id: 56198\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1573108 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 53e1d0a1075f8ed70af54afe4b362c48b86e3008",
        "commit": "https://github.com/apache/jmeter/commit/a7daf5ce19c798fa86cbe68a01667599d0652228",
        "parent": "https://github.com/apache/jmeter/commit/cd1e70216e1603575928941aa901ac1b1b2ac308",
        "bug_id": "jmeter_99",
        "file": [
            {
                "sha": "f3b20266a4e026b60e8e8e1421ee3876a176b02e",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a7daf5ce19c798fa86cbe68a01667599d0652228/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a7daf5ce19c798fa86cbe68a01667599d0652228/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "status": "modified",
                "changes": 32,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java?ref=a7daf5ce19c798fa86cbe68a01667599d0652228",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.jmeter.protocol.jms;\n \n import java.util.Enumeration;\n+import java.util.Hashtable;\n import java.util.Map;\n \n import javax.jms.Connection;\n@@ -136,6 +137,29 @@ public static Destination lookupDestination(Context context, String name) throws\n         throw new NamingException(\"Found: \"+name+\"; expected Destination, but was: \"+(o!=null ? o.getClass().getName() : \"null\"));\n     }\n \n+    /**\n+     * Get value from Context environment taking into account non fully compliant\n+     * JNDI implementations\n+     * @param context\n+     * @param key\n+     * @return String or null if context.getEnvironment() is not compliant\n+     * @throws NamingException \n+     */\n+    public static final String getFromEnvironment(Context context, String key) throws NamingException {\n+        try {\n+            Hashtable<?,?> env = context.getEnvironment();\n+            if(env != null) {\n+                return (String) env.get(key);\n+            } else {\n+                log.warn(\"context.getEnvironment() returned null (should not happen according to javadoc but non compliant implementation can return this)\");\n+                return null;\n+            }\n+        } catch (javax.naming.OperationNotSupportedException ex) {\n+            // Some JNDI implementation can return this\n+            log.warn(\"context.getEnvironment() not supported by implementation \");\n+            return null;\n+        }        \n+    }\n     /**\n      * Obtain the queue connection from the context and factory name.\n      * \n@@ -153,11 +177,9 @@ public static Connection getConnection(Context ctx, String factoryName) throws J\n             throw new NamingException(\"Lookup failed: \"+e.toString());\n         }\n         if (objfac instanceof javax.jms.ConnectionFactory) {\n-            @SuppressWarnings(\"unchecked\") // The environment is supposed to use String keys only\n-            Map<String, Object> env = (Map<String, Object>)ctx.getEnvironment();\n-            if(env.containsKey(Context.SECURITY_PRINCIPAL)) {\n-                String username = (String)env.get(Context.SECURITY_PRINCIPAL);\n-                String password = (String)env.get(Context.SECURITY_CREDENTIALS);\n+            String username = getFromEnvironment(ctx, Context.SECURITY_PRINCIPAL);\n+            if(username != null) {\n+                String password = getFromEnvironment(ctx, Context.SECURITY_CREDENTIALS);\n                 return ((javax.jms.ConnectionFactory) objfac).createConnection(username, password);                \n             }\n             else {",
                "deletions": 5
            },
            {
                "sha": "dbe838d9671e18b40885237d178d2b790cfbab5c",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a7daf5ce19c798fa86cbe68a01667599d0652228/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a7daf5ce19c798fa86cbe68a01667599d0652228/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "status": "modified",
                "changes": 32,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java?ref=a7daf5ce19c798fa86cbe68a01667599d0652228",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.jmeter.protocol.jms.sampler;\n \n import java.util.Date;\n-import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Map;\n \n@@ -329,15 +328,16 @@ public void threadStarted() {\n \n             if (!useTemporyQueue()) {\n                 receiveQueue = (Queue) context.lookup(getReceiveQueue());\n-                receiverThread = Receiver.createReceiver(factory, receiveQueue, getPrincipal(context), getCredentials(context)\n+                receiverThread = Receiver.createReceiver(factory, receiveQueue, Utils.getFromEnvironment(context, Context.SECURITY_PRINCIPAL), \n+                        Utils.getFromEnvironment(context, Context.SECURITY_CREDENTIALS)\n                         , isUseResMsgIdAsCorrelId(), getJMSSelector());\n             }\n \n             String principal = null;\n             String credentials = null;\n             if (USE_SECURITY_PROPERTIES){\n-                principal = getPrincipal(context);\n-                credentials = getCredentials(context);\n+                principal = Utils.getFromEnvironment(context, Context.SECURITY_PRINCIPAL);\n+                credentials = Utils.getFromEnvironment(context, Context.SECURITY_CREDENTIALS);\n             }\n             if (principal != null && credentials != null) {\n                 connection = factory.createQueueConnection(principal, credentials);\n@@ -527,28 +527,4 @@ public void setContextProvider(String string) {\n         setProperty(JNDI_CONTEXT_PROVIDER_URL, string);\n \n     }\n-\n-    /**\n-     * get the principal from the context property java.naming.security.principal\n-     *\n-     * @param context\n-     * @return the principal\n-     * @throws NamingException\n-     */\n-    private String getPrincipal(Context context) throws NamingException{\n-            Hashtable<?,?> env = context.getEnvironment();\n-            return (String) env.get(\"java.naming.security.principal\"); // $NON-NLS-1$\n-    }\n-\n-    /**\n-     * get the credentials from the context property java.naming.security.credentials\n-     *\n-     * @param context\n-     * @return the credentials\n-     * @throws NamingException\n-     */\n-    private String getCredentials(Context context) throws NamingException{\n-            Hashtable<?,?> env = context.getEnvironment();\n-            return (String) env.get(\"java.naming.security.credentials\"); // $NON-NLS-1$\n-    }\n }",
                "deletions": 28
            },
            {
                "sha": "8f10d0705ac6ef2ac1b8f874ea3260d5becd0e7a",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/a7daf5ce19c798fa86cbe68a01667599d0652228/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/a7daf5ce19c798fa86cbe68a01667599d0652228/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=a7daf5ce19c798fa86cbe68a01667599d0652228",
                "patch": "@@ -130,7 +130,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n <ul>\n <li><bugzilla>55977</bugzilla> - JDBC pook keepalive flooding</li>\n <li><bugzilla>55999</bugzilla> - Scroll bar on jms point-to-point sampler does not work when content exceeds display</li>\n-<li><bugzilla>56198</bugzilla> - JMSSampler : NullPointerException is thrown when log level is DEBUG and JNDI underlying implementation of JMS provider does not comply with Context.getEnvironment contract</li>\n+<li><bugzilla>56198</bugzilla> - JMSSampler : NullPointerException is thrown when JNDI underlying implementation of JMS provider does not comply with Context.getEnvironment contract</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 56198 - JMSSampler : NullPointerException is thrown when log level is DEBUG and JNDI underlying implementation of JMS provider does not comply with Context.getEnvironment contract\nBugzilla Id: 56198\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1573105 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 17388ca94200b20ef9a27d334cb79fbc042b4b78",
        "commit": "https://github.com/apache/jmeter/commit/cd1e70216e1603575928941aa901ac1b1b2ac308",
        "parent": "https://github.com/apache/jmeter/commit/18739f71d995fb36de0ce2a3e2a79dae9cf4ac9a",
        "bug_id": "jmeter_100",
        "file": [
            {
                "sha": "7676bd2d6c196d2b4fab464329f95d0d3bb13323",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd1e70216e1603575928941aa901ac1b1b2ac308/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd1e70216e1603575928941aa901ac1b1b2ac308/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "status": "modified",
                "changes": 20,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java?ref=cd1e70216e1603575928941aa901ac1b1b2ac308",
                "patch": "@@ -429,13 +429,19 @@ private Context getInitialContext() throws NamingException {\n     }\n \n     private void printEnvironment(Context context) throws NamingException {\n-        Hashtable<?,?> env = context.getEnvironment();\n-        LOGGER.debug(\"Initial Context Properties\");\n-        @SuppressWarnings(\"unchecked\")\n-        Enumeration<String> keys = (Enumeration<String>) env.keys();\n-        while (keys.hasMoreElements()) {\n-            String key = keys.nextElement();\n-            LOGGER.debug(key + \"=\" + env.get(key));\n+        try {\n+            Hashtable<?,?> env = context.getEnvironment();\n+            if(env != null) {\n+                LOGGER.debug(\"Initial Context Properties\");\n+                for (Map.Entry<?, ?> entry : env.entrySet()) {\n+                    LOGGER.debug(entry.getKey() + \"=\" + entry.getValue());\n+                }\n+            } else {\n+                LOGGER.warn(\"context.getEnvironment() returned null (should not happen according to javadoc but non compliant implementation can return this)\");\n+            }\n+        } catch (javax.naming.OperationNotSupportedException ex) {\n+            // Some JNDI implementation can return this\n+            LOGGER.warn(\"context.getEnvironment() not supported by implementation \");\n         }\n     }\n ",
                "deletions": 7
            },
            {
                "sha": "41977007dd1ba7669e2237383aa58b3112764f13",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/cd1e70216e1603575928941aa901ac1b1b2ac308/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/cd1e70216e1603575928941aa901ac1b1b2ac308/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=cd1e70216e1603575928941aa901ac1b1b2ac308",
                "patch": "@@ -130,6 +130,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n <ul>\n <li><bugzilla>55977</bugzilla> - JDBC pook keepalive flooding</li>\n <li><bugzilla>55999</bugzilla> - Scroll bar on jms point-to-point sampler does not work when content exceeds display</li>\n+<li><bugzilla>56198</bugzilla> - JMSSampler : NullPointerException is thrown when log level is DEBUG and JNDI underlying implementation of JMS provider does not comply with Context.getEnvironment contract</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 50898 - IncludeController : NullPointerException loading script in non-GUI mode if Includers use same element name\nApply better fix that applies for all elements, not just IncludeController\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1341670 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 85934af24adf20ce1c00bf6c0802b2ec4e232809",
        "commit": "https://github.com/apache/jmeter/commit/1524b85d23f90f6394079420ec42885e110521b9",
        "parent": "https://github.com/apache/jmeter/commit/6a7838af8b06a972209e5a2ba0f06efbae245e0d",
        "bug_id": "jmeter_101",
        "file": [
            {
                "sha": "f4dbff06614ebb5a732ed8a0dcb8a0f5e1e2817d",
                "filename": "src/components/org/apache/jmeter/control/IncludeController.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1524b85d23f90f6394079420ec42885e110521b9/src/components/org/apache/jmeter/control/IncludeController.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1524b85d23f90f6394079420ec42885e110521b9/src/components/org/apache/jmeter/control/IncludeController.java",
                "status": "modified",
                "changes": 7,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/IncludeController.java?ref=1524b85d23f90f6394079420ec42885e110521b9",
                "patch": "@@ -63,13 +63,6 @@ public IncludeController() {\n         super();\n     }\n \n-    // Bug 50898 - work round the problem just for Include Controllers for now.\n-    // Can be removed if the AbstractTestElement#equals(Object o) method is fixed.\n-    @Override\n-    public boolean equals(Object obj) {\n-        return this == obj;\n-    }\n-\n     @Override\n     public Object clone() {\n         // TODO - fix so that this is only called once per test, instead of at every clone",
                "deletions": 7
            },
            {
                "sha": "e83d2662dd4202a400e9c9356e0000da81fc08c9",
                "filename": "src/jorphan/org/apache/jorphan/collections/ListedHashTree.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1524b85d23f90f6394079420ec42885e110521b9/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1524b85d23f90f6394079420ec42885e110521b9/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java",
                "status": "modified",
                "changes": 19,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java?ref=1524b85d23f90f6394079420ec42885e110521b9",
                "patch": "@@ -27,6 +27,8 @@\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.jorphan.util.JMeterError;\n+\n /**\n  * ListedHashTree is a different implementation of the {@link HashTree}\n  * collection class. In the ListedHashTree, the order in which values are added\n@@ -119,7 +121,22 @@ public void replace(Object currentKey, Object newKey) {\n         HashTree tree = getTree(currentKey);\n         data.remove(currentKey);\n         data.put(newKey, tree);\n-        order.set(order.indexOf(currentKey), newKey);\n+        // find order.indexOf(currentKey) using == rather than equals()\n+        // there may be multiple entries which compare equals (Bug 50898)\n+        // This will be slightly slower than the built-in method,\n+        // but replace() is not used frequently.\n+        int entry=-1;\n+        for (int i=0; i < order.size(); i++) {\n+            Object ent = order.get(i);\n+            if (ent == currentKey) {\n+                entry = i;\n+                break;\n+            }\n+        }\n+        if (entry == -1) {\n+            throw new JMeterError(\"Impossible state, data key not present in order: \"+currentKey.getClass());\n+        }\n+        order.set(entry, newKey);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 51268 - HTTPS request through an invalid proxy causes NullPointerException and does not show in result tree.\nRather than delegating to the JMeter thread handler for \"unexpected\" failures, ensure all Exceptions generate a sample error.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@1127881 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0c9e1f5acc89da0b6ed44a8951a4ef21cdfaca31",
        "commit": "https://github.com/apache/jmeter/commit/b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7",
        "parent": "https://github.com/apache/jmeter/commit/0a61e4e050109e0c6587c365a590e598964fd2ef",
        "bug_id": "jmeter_102",
        "file": [
            {
                "sha": "6311ece1c9b6fd7badd0f2d1489cb1c6a69295eb",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "status": "modified",
                "changes": 7,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java?ref=b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7",
                "patch": "@@ -24,7 +24,6 @@\n import java.io.UnsupportedEncodingException;\n import java.net.MalformedURLException;\n import java.net.URI;\n-import java.net.URISyntaxException;\n import java.net.URL;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n@@ -1001,11 +1000,7 @@ public SampleResult sample() {\n             }\n             res.setSampleLabel(getName());\n             return res;\n-        } catch (MalformedURLException e) {\n-            return errorResult(e, new HTTPSampleResult());\n-        } catch (IOException e) {\n-            return errorResult(e, new HTTPSampleResult());\n-        } catch (URISyntaxException e) {\n+        } catch (Exception e) {\n             return errorResult(e, new HTTPSampleResult());\n         }\n     }",
                "deletions": 6
            },
            {
                "sha": "1c5935aba49b7a6da6a67979f7702ca6b2c3bc6d",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7/xdocs/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b5ced50c3b30c4b7b5c9d625fa5bb5389cf16ea7",
                "patch": "@@ -101,6 +101,9 @@ This is internal to the workings of the JMeter Proxy &amp; its GUI, so should no\n <li>Bug 50963 - AjpSampler throws java.lang.StringIndexOutOfBoundsException</li>\n <li>Bug 50516 - \"Host\" header in HTTP Header Manager is not included in generated HTTP request</li>\n <li>Bug 50544 - In Apache Common Log the HEAD requests cause problems.</li>\n+<li>Bug 51268 - HTTPS request through an invalid proxy causes NullPointerException and does not show in result tree.\n+Rather than delegating to the JMeter thread handler for \"unexpected\" failures, ensure all Exceptions generate a sample error.\n+</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 57389: Fix potential NPE in org.apache.jmeter.save.converters\nBugzilla Id: 57389\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1647367 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2350b669dfb5f3902383b529d32354d059f1e9b1",
        "commit": "https://github.com/apache/jmeter/commit/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
        "parent": "https://github.com/apache/jmeter/commit/26efb9db0e704942bd0509cbc9b8c12920695c48",
        "bug_id": "jmeter_103",
        "file": [
            {
                "sha": "1d37963a928594bba78e57ca0d10353c5faca7ad",
                "filename": "src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) {// superclass does not use types\n-        return arg0.equals(BooleanProperty.class);\n+        return BooleanProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "801f594929e45a3d3eb8a2e17394addfd42b6e19",
                "filename": "src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(IntegerProperty.class);\n+        return IntegerProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "7fc30723f63dc451eb161ffd943176499d617735",
                "filename": "src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -41,7 +41,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(LongProperty.class);\n+        return LongProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "64f1b7b06236822aa5d487a099596b7afd74dddc",
                "filename": "src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -46,7 +46,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(CollectionProperty.class) || arg0.equals(MapProperty.class);\n+        return CollectionProperty.class.equals(arg0) || MapProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "61b438306778cf4fa37ba7bb98243e5288616bd8",
                "filename": "src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -113,7 +113,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) {\n-        return arg0.equals(SampleSaveConfiguration.class);\n+        return SampleSaveConfiguration.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "007a2097aeaa73628d874d03f78c9907e1ff1837",
                "filename": "src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -53,7 +53,7 @@ public static String getVersion() {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(TestElementProperty.class);\n+        return TestElementProperty.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "b0e9474b1752838b40ad912630026f6f2a823f80",
                "filename": "src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -60,7 +60,7 @@ public TestResultWrapperConverter(Mapper arg0) {\n     /** {@inheritDoc} */\n     @Override\n     public boolean canConvert(@SuppressWarnings(\"rawtypes\") Class arg0) { // superclass does not use types\n-        return arg0.equals(TestResultWrapper.class);\n+        return TestResultWrapper.class.equals(arg0);\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 1
            },
            {
                "sha": "f268971962056a8d367c94a9c3721bda805a4107",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/93cf5e82e98a74000742ad1ad8f0f861a0cdeca0/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=93cf5e82e98a74000742ad1ad8f0f861a0cdeca0",
                "patch": "@@ -219,6 +219,7 @@ See  <bugzilla>56357</bugzilla> for details.\n <li>Updated to jsoup-1.8.1.jar (from 1.7.3)</li>\n <li><bug>57276</bug>RMIC no longer needed since Java 5</li>\n <li><bug>57310</bug>Replace System.getProperty(\"file.separator\") with File.separator throughout (Also \"path.separator\" with File.pathSeparator)</li>\n+<li><bug>57389</bug>Fix potential NPE in converters</li>\n </ul>\n \n <ch_section>Thanks</ch_section>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 52707 - Make Open File dialog use last opened file folder as start folder\nFIx NPE\nBugzilla Id: 52707\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1635070 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2c801d20bde5c5c35a1249e2d29a164164dfced6",
        "commit": "https://github.com/apache/jmeter/commit/105ff9477dfe7aadf12c245b5a296bbee156d583",
        "parent": "https://github.com/apache/jmeter/commit/afd31a1ce4851a6f4af727d5574e55eed9b9e221",
        "bug_id": "jmeter_104",
        "file": [
            {
                "sha": "eb30c5854c880eb074010668cea57782ee391db0",
                "filename": "src/core/org/apache/jmeter/gui/util/FileDialoger.java",
                "blob_url": "https://github.com/apache/jmeter/blob/105ff9477dfe7aadf12c245b5a296bbee156d583/src/core/org/apache/jmeter/gui/util/FileDialoger.java",
                "raw_url": "https://github.com/apache/jmeter/raw/105ff9477dfe7aadf12c245b5a296bbee156d583/src/core/org/apache/jmeter/gui/util/FileDialoger.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/util/FileDialoger.java?ref=105ff9477dfe7aadf12c245b5a296bbee156d583",
                "patch": "@@ -101,6 +101,9 @@ else if (lastJFCDirectory == null) {\n             jfc.setAcceptAllFileFilterUsed(true);\n             jfc.setFileFilter(currentFilter);\n         }\n+        if(lastJFCDirectory==null) {\n+            lastJFCDirectory = System.getProperty(\"user.dir\", \"\"); //$NON-NLS-1$//$NON-NLS-2$\n+        }\n         jfc.setCurrentDirectory(new File(lastJFCDirectory));\n         int retVal = jfc.showOpenDialog(GuiPackage.getInstance().getMainFrame());\n         lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "When HTTP Request contains an empty host, we get a NPE instead of a clear message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1634990 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7a72f496684e16ffc3f5abb5dddf697519256e6b",
        "commit": "https://github.com/apache/jmeter/commit/81cd2e804898cb278c9573e8e8d8b83344bb3e19",
        "parent": "https://github.com/apache/jmeter/commit/77b8fd6a6c384338d0f4c068527a650f7c7f6691",
        "bug_id": "jmeter_105",
        "file": [
            {
                "sha": "10e7a7becb48d1d69271b42ea944477324473e1b",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/81cd2e804898cb278c9573e8e8d8b83344bb3e19/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 27,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=81cd2e804898cb278c9573e8e8d8b83344bb3e19",
                "patch": "@@ -883,20 +883,23 @@ protected void setConnectionHeaders(HttpRequestBase request, URL url, HeaderMana\n      * @return the headers as a string\n      */\n     private String getConnectionHeaders(HttpRequest method) {\n-        // Get all the request headers\n-        StringBuilder hdrs = new StringBuilder(100);\n-        Header[] requestHeaders = method.getAllHeaders();\n-        for(int i = 0; i < requestHeaders.length; i++) {\n-            // Exclude the COOKIE header, since cookie is reported separately in the sample\n-            if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n-                hdrs.append(requestHeaders[i].getName());\n-                hdrs.append(\": \"); // $NON-NLS-1$\n-                hdrs.append(requestHeaders[i].getValue());\n-                hdrs.append(\"\\n\"); // $NON-NLS-1$\n+        if(method != null) {\n+            // Get all the request headers\n+            StringBuilder hdrs = new StringBuilder(100);\n+            Header[] requestHeaders = method.getAllHeaders();\n+            for(int i = 0; i < requestHeaders.length; i++) {\n+                // Exclude the COOKIE header, since cookie is reported separately in the sample\n+                if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeaders[i].getName())) {\n+                    hdrs.append(requestHeaders[i].getName());\n+                    hdrs.append(\": \"); // $NON-NLS-1$\n+                    hdrs.append(requestHeaders[i].getValue());\n+                    hdrs.append(\"\\n\"); // $NON-NLS-1$\n+                }\n             }\n+    \n+            return hdrs.toString();\n         }\n-\n-        return hdrs.toString();\n+        return \"\"; ////$NON-NLS-1$\n     }\n \n     /**",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 56227 - AssertionGUI : NPE in assertion on mouse selection\nBugzilla Id: 56227\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1575073 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bcc4d7fc8d02c6ca7a81924ba0411337eaf08dce",
        "commit": "https://github.com/apache/jmeter/commit/8ff0703e2ecaa915a4a7b641600dc70eacc31116",
        "parent": "https://github.com/apache/jmeter/commit/5a81ad795cef4e21d52d12fbf27e98d6074f9075",
        "bug_id": "jmeter_106",
        "file": [
            {
                "sha": "f0e87367f764c4d5b2e54f879bc12cd16c7f28e6",
                "filename": "src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/8ff0703e2ecaa915a4a7b641600dc70eacc31116/src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/8ff0703e2ecaa915a4a7b641600dc70eacc31116/src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java?ref=8ff0703e2ecaa915a4a7b641600dc70eacc31116",
                "patch": "@@ -32,7 +32,11 @@\n     public Component getTableCellRendererComponent(JTable table, Object value,\n             boolean isSelected, boolean hasFocus,\n             int row, int column) {\n-        rend = new JTextArea(value.toString());\n+        if(value != null) {\n+            rend = new JTextArea(value.toString());\n+        } else {\n+            rend = new JTextArea();\n+        }\n         // Use two rows, so that we have room for horisontal scrollbar, if the text is one long line. Fix for 40371\n         // This is not an optimal solution, but makes it possible to see the line if it is long\n         rend.setRows(2);",
                "deletions": 1
            },
            {
                "sha": "d2ee670931722f78290cb84846a76b18bcb5bc50",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/8ff0703e2ecaa915a4a7b641600dc70eacc31116/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/8ff0703e2ecaa915a4a7b641600dc70eacc31116/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=8ff0703e2ecaa915a4a7b641600dc70eacc31116",
                "patch": "@@ -189,6 +189,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n \n <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>\n <ul>\n+<li><bugzilla>56227</bugzilla> - AssertionGUI : NPE in assertion on mouse selection</li>\n </ul>\n \n <h3>Functions</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "NPE if jmeter.httpclient.strict_rfc2616=true and location is not absolute\nBugzilla Id: 56222\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1574701 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 419a6ad523522f4c114b2dc4d669a3e62645653f",
        "commit": "https://github.com/apache/jmeter/commit/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
        "parent": "https://github.com/apache/jmeter/commit/fe1d3362cc9c4f4ecb1c9c3fa3b61422d8b5ca76",
        "bug_id": "jmeter_107",
        "file": [
            {
                "sha": "6902a9543ac168ab94bf745687859b77d467b32c",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "patch": "@@ -327,8 +327,9 @@ public String getName() { // HC3.1 does not have the method\n                     if(!STRICT_RFC_2616 && !(redirectLocation.startsWith(\"http://\")||redirectLocation.startsWith(\"https://\"))) {\n                         redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);\n                     }\n-\n-                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(new URL(redirectLocation)).toString());\n+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails\n+                    final URL redirectUrl = new URL(redirectLocation);\n+                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());\n                 } catch (Exception e) {\n                     log.error(\"Error sanitizing URL:\"+headerLocation.getValue()+\", message:\"+e.getMessage());\n                 }",
                "deletions": 2
            },
            {
                "sha": "df41ea0c9eb0bca2a8bee68a23fa79ea1c37d353",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "patch": "@@ -364,6 +364,7 @@ protected HTTPSampleResult sample(URL url, String method,\n                     redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);\n                 }\n                 try {\n+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails\n                     final URL redirectUrl = new URL(redirectLocation);\n                     res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());\n                 } catch (Exception e) {",
                "deletions": 0
            },
            {
                "sha": "2fde2fe997c71eab82be27cb554b92ad3fb96edf",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=ee27caa52e2a5e45dd32c4c033895a3df4ec0e2e",
                "patch": "@@ -124,6 +124,7 @@ A workaround is to use a Java 7 update 40 runtime which fixes this issue.\n <ul>\n <li><bugzilla>55998</bugzilla> - HTTP recording \u2013 Replacing port value by user defined variable does not work</li>\n <li><bugzilla>56178</bugzilla> - keytool error: Invalid escaped character in AVA: - some characters must be escaped</li>\n+<li><bugzilla>56222</bugzilla> - NPE if jmeter.httpclient.strict_rfc2616=true and location is not absolute</li>\n </ul>\n \n <h3>Other Samplers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 55721 - HTTP Cache Manager - no-store directive is wrongly interpreted\nCheck for npe\nBugzilla Id: 55721\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1536929 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d74e33a2bdf9efbc53e1097283133cc788ec1db3",
        "commit": "https://github.com/apache/jmeter/commit/13f2bf505773ba1821f1d3b2acee558e3253b26b",
        "parent": "https://github.com/apache/jmeter/commit/4378e3d52c7e917482641f9458c0f2d37a216325",
        "bug_id": "jmeter_108",
        "file": [
            {
                "sha": "55ce9b8ef0bfd773a6d145f0cb44ad3a1bff020a",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13f2bf505773ba1821f1d3b2acee558e3253b26b/src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13f2bf505773ba1821f1d3b2acee558e3253b26b/src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java?ref=13f2bf505773ba1821f1d3b2acee558e3253b26b",
                "patch": "@@ -176,7 +176,7 @@ private void setCache(String lastModified, String cacheControl, String expires,\n         if (useExpires) {// Check that we are processing Expires/CacheControl\n             final String MAX_AGE = \"max-age=\";\n             \n-            if(cacheControl.contains(\"no-store\")) {\n+            if(cacheControl != null && cacheControl.contains(\"no-store\")) {\n                 // We must not store an CacheEntry, otherwise a \n                 // conditional request may be made\n                 return;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fixed potential NPE when object not found in Context\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1402973 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 724d5485b5976425ece166c7c1038fcd4f0a6b17",
        "commit": "https://github.com/apache/jmeter/commit/0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7",
        "parent": "https://github.com/apache/jmeter/commit/d5748d0bf6662d23c4f7e54525be3b2c9d4c0ca5",
        "bug_id": "jmeter_109",
        "file": [
            {
                "sha": "ac73938db90479e6a2c16d0fff5387f2201eb65d",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java?ref=0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7",
                "patch": "@@ -131,7 +131,7 @@ public static Destination lookupDestination(Context context, String name) throws\n         if (o instanceof Destination){\n             return (Destination) o;\n         }\n-        throw new NamingException(\"Found: \"+name+\"; expected Destination, but was: \"+o.getClass().getName());\n+        throw new NamingException(\"Found: \"+name+\"; expected Destination, but was: \"+(o!=null ? o.getClass().getName() : \"null\"));\n     }\n \n     /**\n@@ -162,7 +162,7 @@ public static Connection getConnection(Context ctx, String factoryName) throws J\n                 return ((javax.jms.ConnectionFactory) objfac).createConnection();\n             }\n         }\n-        throw new NamingException(\"Expected javax.jms.ConnectionFactory, found \"+objfac.getClass().getName());\n+        throw new NamingException(\"Expected javax.jms.ConnectionFactory, found \"+(objfac != null ? objfac.getClass().getName(): \"null\"));\n     }\n     \n     /**",
                "deletions": 2
            },
            {
                "sha": "9603be3134497cb707e8599b74b320d7d56e57b8",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java?ref=0c56fa50f92931e91f1013a8d9d664d4d7fe6bf7",
                "patch": "@@ -301,7 +301,7 @@ public void threadStarted() {\n             Object obj = context.lookup(getQueueConnectionFactory());\n             if (!(obj instanceof QueueConnectionFactory)) {\n                 String msg = \"QueueConnectionFactory expected, but got \"\n-                    + obj.getClass().getName();\n+                    + (obj != null ? obj.getClass().getName() : \"null\");\n                 LOGGER.fatalError(msg);\n                 throw new IllegalStateException(msg);\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when running in non-GUI mode and password has not been provided\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1352990 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5d983100840d190b01b515de0e806a941035ff32",
        "commit": "https://github.com/apache/jmeter/commit/0bad5c8787fdcf10c1f12fb2b355d63cb3c7b66a",
        "parent": "https://github.com/apache/jmeter/commit/891d9855ac9240ab9c902a8c4af0c40f87f2df7c",
        "bug_id": "jmeter_110",
        "file": [
            {
                "sha": "7cefdbfe70a7caea3f9bac1fd10ddb71cb45c679",
                "filename": "src/core/org/apache/jmeter/util/SSLManager.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0bad5c8787fdcf10c1f12fb2b355d63cb3c7b66a/src/core/org/apache/jmeter/util/SSLManager.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0bad5c8787fdcf10c1f12fb2b355d63cb3c7b66a/src/core/org/apache/jmeter/util/SSLManager.java",
                "status": "modified",
                "changes": 23,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/SSLManager.java?ref=0bad5c8787fdcf10c1f12fb2b355d63cb3c7b66a",
                "patch": "@@ -155,18 +155,23 @@ private String getPassword() {\n             this.defaultpw = System.getProperty(KEY_STORE_PASSWORD);\n \n             if (null == defaultpw) {\n-                synchronized (this) {\n-                    this.defaultpw = JOptionPane.showInputDialog(\n-                            GuiPackage.getInstance().getMainFrame(),\n-                            JMeterUtils.getResString(\"ssl_pass_prompt\"),  // $NON-NLS-1$\n-                            JMeterUtils.getResString(\"ssl_pass_title\"),  // $NON-NLS-1$\n-                            JOptionPane.QUESTION_MESSAGE);\n-                    System.setProperty(KEY_STORE_PASSWORD, this.defaultpw);\n+                final GuiPackage guiInstance = GuiPackage.getInstance();\n+                if (guiInstance != null) {\n+                    synchronized (this) {\n+                        this.defaultpw = JOptionPane.showInputDialog(\n+                                guiInstance.getMainFrame(),\n+                                JMeterUtils.getResString(\"ssl_pass_prompt\"),  // $NON-NLS-1$\n+                                JMeterUtils.getResString(\"ssl_pass_title\"),  // $NON-NLS-1$\n+                                JOptionPane.QUESTION_MESSAGE);\n+                        System.setProperty(KEY_STORE_PASSWORD, this.defaultpw);\n+                    }\n+                    password = this.defaultpw;\n+                    System.setProperty(KEY_STORE_PASSWORD, password);\n+                } else {\n+                    log.warn(\"No password provided, and no GUI present so cannot prompt\");\n                 }\n             }\n \n-            password = this.defaultpw;\n-            System.setProperty(KEY_STORE_PASSWORD, password);\n         }\n         return password;\n     }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when defaultVal is also null (13 times at JMeter startup)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294527 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c738b79725b9860e7bdfbd0db150f6ace6eb350e",
        "commit": "https://github.com/apache/jmeter/commit/a0b7d075658b468c239544cd2a71f609e79d4d55",
        "parent": "https://github.com/apache/jmeter/commit/571ecd698ab57f32b6b31aadcfdb595f35d2908c",
        "bug_id": "jmeter_111",
        "file": [
            {
                "sha": "db4ba9f5c52625b2316c0a5a04db261ad576c7f8",
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a0b7d075658b468c239544cd2a71f609e79d4d55/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=a0b7d075658b468c239544cd2a71f609e79d4d55",
                "patch": "@@ -832,9 +832,12 @@ public static long getPropDefault(String propName, long defaultVal) {\n      * @return The PropDefault value\n      */\n     public static String getPropDefault(String propName, String defaultVal) {\n-        String ans;\n+        String ans = defaultVal;\n         try {\n-            ans = appProperties.getProperty(propName, defaultVal).trim();\n+            String value = appProperties.getProperty(propName, defaultVal);\n+            if(value != null) {\n+                ans = value.trim();\n+            }\n         } catch (Exception e) {\n             ans = defaultVal;\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if Paste is used before Copy\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@1172003 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 99bcae6aa7f4139e418afda057b4f447747d65e5",
        "commit": "https://github.com/apache/jmeter/commit/b687d2b3676cf427bb23e4fbfdcd3618de970fe9",
        "parent": "https://github.com/apache/jmeter/commit/051fbee6deeeae11740b1382c9d3e8ce209d46c1",
        "bug_id": "jmeter_112",
        "file": [
            {
                "sha": "7e1435cd1305bf4528b2421ec688d02264ddd8e5",
                "filename": "src/core/org/apache/jmeter/gui/action/Copy.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b687d2b3676cf427bb23e4fbfdcd3618de970fe9/src/core/org/apache/jmeter/gui/action/Copy.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b687d2b3676cf427bb23e4fbfdcd3618de970fe9/src/core/org/apache/jmeter/gui/action/Copy.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Copy.java?ref=b687d2b3676cf427bb23e4fbfdcd3618de970fe9",
                "patch": "@@ -63,6 +63,9 @@ public void doAction(ActionEvent e) {\n     }\n \n     public static JMeterTreeNode[] getCopiedNodes() {\n+        if (copiedNodes == null) { // can be null if Copy has yet to be used\n+            return null;\n+        }\n         for (int i = 0; i < copiedNodes.length; i++) {\n             if (copiedNodes[i] == null) {\n                 return null;",
                "deletions": 0
            },
            {
                "sha": "fc5a6862bb0030a3599fae4aff0a936084e1e0cf",
                "filename": "src/core/org/apache/jmeter/gui/action/Paste.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b687d2b3676cf427bb23e4fbfdcd3618de970fe9/src/core/org/apache/jmeter/gui/action/Paste.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b687d2b3676cf427bb23e4fbfdcd3618de970fe9/src/core/org/apache/jmeter/gui/action/Paste.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Paste.java?ref=b687d2b3676cf427bb23e4fbfdcd3618de970fe9",
                "patch": "@@ -60,6 +60,10 @@\n     @Override\n     public void doAction(ActionEvent e) {\n         JMeterTreeNode draggedNodes[] = Copy.getCopiedNodes();\n+        if (draggedNodes == null) {\n+            Toolkit.getDefaultToolkit().beep();\n+            return;\n+        }\n         JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();\n         JMeterTreeNode currentNode = treeListener.getCurrentNode();\n         if (MenuFactory.canAddTo(currentNode, draggedNodes)) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Mail on userlist reported NPE here - looks like only happens if there are network errors, but check anyway\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@1060796 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8614dc8a9703de37bdb8710a64ef646953acb6cb",
        "commit": "https://github.com/apache/jmeter/commit/5015361475ce70a13b93e035275b879d8e6fdc12",
        "parent": "https://github.com/apache/jmeter/commit/b3350527a4ded976385348ddf617e4e7b7840155",
        "bug_id": "jmeter_113",
        "file": [
            {
                "sha": "26bd9955e3f04244e7b45435c5586658797d99ba",
                "filename": "src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5015361475ce70a13b93e035275b879d8e6fdc12/src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5015361475ce70a13b93e035275b879d8e6fdc12/src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java?ref=5015361475ce70a13b93e035275b879d8e6fdc12",
                "patch": "@@ -128,8 +128,13 @@ public void runTest() throws RemoteException, JMeterEngineException {\n     }\n \n     public void reset() throws RemoteException {\n-        log.info(\"Reset\");\n-        backingEngine.reset();\n+        // Mail on userlist reported NPE here - looks like only happens if there are network errors, but check anyway\n+        if (backingEngine != null) {\n+            log.info(\"Reset\");\n+            backingEngine.reset();\n+        } else {\n+            log.warn(\"Backing engine is null, ignoring reset\");\n+        }\n     }\n \n     public void stopTest() throws RemoteException {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE\nMake version in ASCII ART an ANT filtered variable\nUpdate build so that jmeter_as_ascii_art in res/META-INF is moved to org/apache/jmeter in ApacheJMeter.jar\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1737323 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2917d67eea98f228638efe1ea475a9e710671c32",
        "commit": "https://github.com/apache/jmeter/commit/4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2",
        "parent": "https://github.com/apache/jmeter/commit/4677bafc1674b3388715ba408bfb77d038262631",
        "bug_id": "jmeter_114",
        "file": [
            {
                "sha": "5bd75606992b7e749fc87e6dcf4a85a4ed060d29",
                "filename": "build.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2/build.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2/build.xml",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/build.xml?ref=4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2",
                "patch": "@@ -511,7 +511,7 @@\n     <format property=\"year\" pattern=\"yyyy\" locale=\"en\"/>\n   </tstamp>\n \n-  <filterset id=\"version.filters\">\n+  <filterset id=\"year.filters\">\n     <filter token=\"YEAR\" value=\"${year}\"/>\n   </filterset>\n \n@@ -531,6 +531,9 @@\n     <echo level=\"info\">jmeter.version = ${jmeter.version}</echo>\n     <echo level=\"info\">display.version = ${display.version}</echo>\n     <echo level=\"info\">implementation.version = ${implementation.version}</echo>\n+    <filterset id=\"version.filters\">\n+      <filter token=\"VERSION\" value=\"${display.version}\"/>\n+    </filterset>\n   </target>\n \n     <!-- Get version from SVN status -->\n@@ -872,10 +875,12 @@\n    <mkdir dir=\"${resources.meta-inf}\" />\n     <copy todir=\"${resources.meta-inf}\" overwrite=\"yes\" filtering=\"yes\"\n         encoding=\"${encoding}\">\n-      <filterset refid=\"version.filters\"/>\n+      <filterset refid=\"year.filters\"/>\n+      <filterset refid=\"version.filters\" />\n       <fileset dir=\"${res.dir}/META-INF\" >\n         <include name=\"*.license\" />\n         <include name=\"*.notice\" />\n+      \t<include name=\"jmeter_as_ascii_art.txt\" />\n       </fileset>      \n     </copy>\n     <fixcrlf encoding=\"${encoding}\" srcdir=\"${resources.meta-inf}\" eol=\"crlf\" includes=\"*.license *.notice\"/>\n@@ -928,7 +933,7 @@ run JMeter unless all the JMeter jars are added.\n \n     <!-- JMeter launch jar -->\n     <jar jarfile=\"${dest.jar.jmeter}/ApacheJMeter.jar\"\n-        includes=\"**/NewDriver*,**/DynamicClassLoader*,**/ShutdownClient.class,**/jmeter_as_ascii_art.txt\"\n+        includes=\"**/NewDriver*,**/DynamicClassLoader*,**/ShutdownClient.class\"\n         basedir=\"${build.core}\"\n         manifest=\"${build.dir}/MANIFEST_BIN.MF\">\n         <manifest>\n@@ -938,6 +943,8 @@ run JMeter unless all the JMeter jars are added.\n           fullpath=\"META-INF/NOTICE\" />\n         <zipfileset file=\"${resources.meta-inf}/default.license\"\n           fullpath=\"META-INF/LICENSE\" />\n+        <zipfileset file=\"${resources.meta-inf}/jmeter_as_ascii_art.txt\"\n+          fullpath=\"org/apache/jmeter/jmeter_as_ascii_art.txt\" />\n     </jar>\n \n     <!-- core -->",
                "deletions": 3
            },
            {
                "sha": "6627914364081d6f88cec475e4141c14517f33e6",
                "filename": "res/META-INF/jmeter_as_ascii_art.txt",
                "blob_url": "https://github.com/apache/jmeter/blob/4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2/res/META-INF/jmeter_as_ascii_art.txt",
                "raw_url": "https://github.com/apache/jmeter/raw/4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2/res/META-INF/jmeter_as_ascii_art.txt",
                "status": "renamed",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/res/META-INF/jmeter_as_ascii_art.txt?ref=4a461d20bf8c16c29fdd4c9341dbcea8ff7154b2",
                "patch": "@@ -2,4 +2,6 @@\n    / \\  |  _ \\ / \\  / ___| | | | ____|     | |  \\/  | ____|_   _| ____|  _ \\   \n   / _ \\ | |_) / _ \\| |   | |_| |  _|    _  | | |\\/| |  _|   | | |  _| | |_) | \n  / ___ \\|  __/ ___ \\ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ <  \n-/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\  \n+/_/   \\_\\_| /_/   \\_\\____|_| |_|_____|  \\___/|_|  |_|_____| |_| |_____|_| \\_\\ @VERSION@  \n+\n+Copyright 1999-@YEAR@ The Apache Software Foundation",
                "deletions": 1,
                "previous_filename": "src/core/org/apache/jmeter/jmeter_as_ascii_art.txt"
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if script does not return a value\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@833501 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 02e2986263163d62eecc437fd4ce6a2a24d78154",
        "commit": "https://github.com/apache/jmeter/commit/28cc32ccf6b0027b6273a6d5919796dd59b2ffc5",
        "parent": "https://github.com/apache/jmeter/commit/3c443e891ba5f8d3432b06adc4c84198b1b05a97",
        "bug_id": "jmeter_115",
        "file": [
            {
                "sha": "323e5420904808be9e3a26158d6e72b82a3d82b3",
                "filename": "src/components/org/apache/jmeter/timers/BSFTimer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/28cc32ccf6b0027b6273a6d5919796dd59b2ffc5/src/components/org/apache/jmeter/timers/BSFTimer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/28cc32ccf6b0027b6273a6d5919796dd59b2ffc5/src/components/org/apache/jmeter/timers/BSFTimer.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/timers/BSFTimer.java?ref=28cc32ccf6b0027b6273a6d5919796dd59b2ffc5",
                "patch": "@@ -39,6 +39,10 @@ public long delay() {\n                 return 0; \n             }\n             Object o = evalFileOrScript(mgr);\n+            if (o == null) {\n+                log.warn(\"Script did not return a value\");\n+                return 0;\n+            }\n             delay = Long.valueOf(o.toString()).longValue();\n         } catch (NumberFormatException e) {\n             log.warn(\"Problem in BSF script \"+e);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 47870 - JMSSubscriber fails due to NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@816929 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 2dd901af26e81296186131de3522127639094a3c",
        "commit": "https://github.com/apache/jmeter/commit/499214f860699883eb87dad69b00e53cff532f6e",
        "parent": "https://github.com/apache/jmeter/commit/c0d012c166dc2c330b16d582d218525f4de57441",
        "bug_id": "jmeter_116",
        "file": [
            {
                "sha": "de73de42972eb7a5863980fcd2cc864198565f68",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "blob_url": "https://github.com/apache/jmeter/blob/499214f860699883eb87dad69b00e53cff532f6e/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "raw_url": "https://github.com/apache/jmeter/raw/499214f860699883eb87dad69b00e53cff532f6e/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java?ref=499214f860699883eb87dad69b00e53cff532f6e",
                "patch": "@@ -84,8 +84,8 @@ public ReceiveSubscriber(boolean useProps, String jndi, String url, String connf\n                 ConnectionFactory.getTopicConnectionFactory(ctx,connfactory);\n                 _conn = ConnectionFactory.getTopicConnection();\n                 _topic = InitialContextFactory.lookupTopic(ctx, topic);\n-                _session = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);\n-                _subscriber = this.SESSION.createSubscriber(this.TOPIC);\n+                _session = _conn.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);\n+                _subscriber = _session.createSubscriber(this.TOPIC);\n                 log.info(\"created the topic connection successfully\");\n             } catch (JMSException e) {\n                 log.error(\"Connection error: \" + e.getMessage());",
                "deletions": 2
            },
            {
                "sha": "dee8f71b57834847050ac6566a0923fdd0ef7957",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/499214f860699883eb87dad69b00e53cff532f6e/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/499214f860699883eb87dad69b00e53cff532f6e/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=499214f860699883eb87dad69b00e53cff532f6e",
                "patch": "@@ -74,6 +74,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n <h3>Other Samplers</h3>\n <ul>\n <li>Bug 47420 - LDAP extended request not closing connections during add request</li>\n+<li>Bug 47870 - JMSSubscriber fails due to NPE</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 47165 - Using the same module name in command line mode causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@772819 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f664eb41d347936df18b868fe5918b482f60e7ca",
        "commit": "https://github.com/apache/jmeter/commit/b3032a5dec4ac54f56bc8d49894c3fd86819d106",
        "parent": "https://github.com/apache/jmeter/commit/6401472d5633a46b352175d2f800e6e88af2d95a",
        "bug_id": "jmeter_117",
        "file": [
            {
                "sha": "1393b6fd64b0559b876e39fe25226f48ae36a891",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b3032a5dec4ac54f56bc8d49894c3fd86819d106/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b3032a5dec4ac54f56bc8d49894c3fd86819d106/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=b3032a5dec4ac54f56bc8d49894c3fd86819d106",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.commons.cli.avalon.CLOption;\n import org.apache.commons.cli.avalon.CLOptionDescriptor;\n import org.apache.commons.cli.avalon.CLUtil;\n+import org.apache.jmeter.control.ModuleController;\n import org.apache.jmeter.control.ReplaceableController;\n import org.apache.jmeter.engine.ClientJMeterEngine;\n import org.apache.jmeter.engine.JMeterEngine;\n@@ -799,8 +800,13 @@ public static void convertSubTree(HashTree tree) {\n                 TestElement item = (TestElement) o;\n                 if (item.isEnabled()) {\n                     if (item instanceof ReplaceableController) {\n-                        // HACK: force the controller to load its tree\n-                        ReplaceableController rc = (ReplaceableController) item.clone();\n+                        ReplaceableController rc;\n+                        if (item instanceof ModuleController){ // Bug 47165\n+                            rc = (ReplaceableController) item;\n+                        } else {\n+                            // HACK: force the controller to load its tree\n+                            rc = (ReplaceableController) item.clone();\n+                        }\n                         HashTree subTree = tree.getTree(item);\n                         if (subTree != null) {\n                             HashTree replacementTree = rc.getReplacementSubTree();",
                "deletions": 2
            },
            {
                "sha": "1e1243d7536ced4d555b4a75f773389888709666",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b3032a5dec4ac54f56bc8d49894c3fd86819d106/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b3032a5dec4ac54f56bc8d49894c3fd86819d106/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b3032a5dec4ac54f56bc8d49894c3fd86819d106",
                "patch": "@@ -211,6 +211,7 @@ JMeter now removes extraneous leading \"../\" segments (as do many browsers)\n <li>Bug 47137 - Labels in View Results Tree aren't I18N</li>\n <li>Bug 47150 - ThreadGroup with a loop count of zero causes infinite loop</li>\n <li>A reference to a missing function - e.g. ${__missing(a)} - is now treated the same as a missing variable. Previously the function name - and leading { - were dropped.</li>\n+<li>Bug 47165 - Using the same module name in command line mode causes NPE</li>\n </ul>\n \n <h3>Improvements</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Prevent NPE if used with variable name on Test Plan\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@768524 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 84528d45b1745f3eabc928ccaf86e07c26eeaa5c",
        "commit": "https://github.com/apache/jmeter/commit/7c3eb9d558b024b47434503cd0279f8d3507814e",
        "parent": "https://github.com/apache/jmeter/commit/f838d4b8510a428b9f3938c450fc88a06ca281b5",
        "bug_id": "jmeter_118",
        "file": [
            {
                "sha": "8cfa91293492fe7d31b48e590022e531586e1361",
                "filename": "src/functions/org/apache/jmeter/functions/IterationCounter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/7c3eb9d558b024b47434503cd0279f8d3507814e/src/functions/org/apache/jmeter/functions/IterationCounter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/7c3eb9d558b024b47434503cd0279f8d3507814e/src/functions/org/apache/jmeter/functions/IterationCounter.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/IterationCounter.java?ref=7c3eb9d558b024b47434503cd0279f8d3507814e",
                "patch": "@@ -91,7 +91,8 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n             counterString = String.valueOf(globalCounter);\n         }\n \n-        if (varName.length() > 0) {\n+        // vars will be null on Test Plan\n+        if (vars != null && varName.length() > 0) {\n             vars.put(varName, counterString);\n         }\n         return counterString;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if XPath function does not match any nodes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@768445 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f2955e7103cc2a9d192a4a856e4991d4741d7070",
        "commit": "https://github.com/apache/jmeter/commit/f838d4b8510a428b9f3938c450fc88a06ca281b5",
        "parent": "https://github.com/apache/jmeter/commit/f8bfd5af648100ef1514a746813105b84bd235c4",
        "bug_id": "jmeter_119",
        "file": [
            {
                "sha": "32006a808fb0216f629001d561c7d6181ebfa51f",
                "filename": "src/functions/org/apache/jmeter/functions/XPathWrapper.java",
                "blob_url": "https://github.com/apache/jmeter/blob/f838d4b8510a428b9f3938c450fc88a06ca281b5/src/functions/org/apache/jmeter/functions/XPathWrapper.java",
                "raw_url": "https://github.com/apache/jmeter/raw/f838d4b8510a428b9f3938c450fc88a06ca281b5/src/functions/org/apache/jmeter/functions/XPathWrapper.java",
                "status": "modified",
                "changes": 15,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/XPathWrapper.java?ref=f838d4b8510a428b9f3938c450fc88a06ca281b5",
                "patch": "@@ -44,8 +44,11 @@\n      * This Map serves two purposes:\n      * - maps names to  containers\n      * - ensures only one container per file across all threads\n+     * The key is the concatenation of the file name and the XPath string\n      */\n-    private static final Map fileContainers = new HashMap();\n+    //@GuardedBy(\"fileContainers\")\n+    private static final Map/*<String, XPathFileContainer>*/ fileContainers =\n+        new HashMap/*<String, XPathFileContainer>*/();\n \n     /* The cache of file packs - for faster local access */\n     private static final ThreadLocal filePacks = new ThreadLocal() {\n@@ -102,11 +105,15 @@ public static String getXPathString(String file, String xpathString) {\n             }\n             // TODO improve the error handling\n             if (xpfc == null) {\n-                log.error(\"XPathWrapper is null!\");\n+                log.error(\"XPathFileContainer is null!\");\n                 return \"\"; //$NON-NLS-1$\n             }\n             my.put(key,xpfc); // save our local copy\n         }\n+        if (xpfc.size()==0){\n+            log.warn(\"XPathFileContainer has no nodes: \"+file+\" \"+xpathString);\n+            return \"\"; //$NON-NLS-1$\n+        }\n         int currentRow = xpfc.nextRow();\n         log.debug(\"getting match number \" + currentRow);\n         return xpfc.getXPathString(currentRow);\n@@ -118,6 +125,8 @@ public static void clearAll() {\n         my.clear();\n         String tname = Thread.currentThread().getName();\n         log.info(tname+\": clearing container\");\n-        fileContainers.clear();\n+        synchronized (fileContainers) {\n+            fileContainers.clear();\n+        }\n     }\n }",
                "deletions": 3
            },
            {
                "sha": "8a4bd2ed3e7d682c762fa6e4ba83a32841cea2f8",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/f838d4b8510a428b9f3938c450fc88a06ca281b5/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/f838d4b8510a428b9f3938c450fc88a06ca281b5/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=f838d4b8510a428b9f3938c450fc88a06ca281b5",
                "patch": "@@ -203,6 +203,7 @@ JMeter now removes extraneous leading \"../\" segments (as do many browsers)\n <li>Bug 46993 - Saving from Header Manager generates ClassCastException</li>\n <li>Bug 47009 - Insert parent caused child controller name to be reset</li>\n <li>Bug 47064 - fixes for Mac LAF</li>\n+<li>Avoid NPE if XPath function does not match any nodes</li>\n </ul>\n \n <h3>Improvements</h3>",
                "deletions": 0
            },
            {
                "sha": "1cbef32c39649905bfdebf1fd30d36a28a5bf98e",
                "filename": "xdocs/usermanual/functions.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/f838d4b8510a428b9f3938c450fc88a06ca281b5/xdocs/usermanual/functions.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/f838d4b8510a428b9f3938c450fc88a06ca281b5/xdocs/usermanual/functions.xml",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/usermanual/functions.xml?ref=f838d4b8510a428b9f3938c450fc88a06ca281b5",
                "patch": "@@ -803,7 +803,9 @@ If omitted, <b>,</b> is used. Note that <b>,</b> would need to be specified as <\n \tThe XPath function reads an XML file and matches the XPath.\n \tEach time the function is called, the next match will be returned.\n \tAt end of file, it will wrap around to the start.\n-\t<note>Note that the entire file is held in memory, so this function should not be used for very large files.</note>\n+\tIf no nodes matched, then the function will return the empty string,\n+\tand a warning message will be written to the JMeter log file.\n+\t<note>Note that the entire NodeList is held in memory.</note>\n \t</p>\n \t<p/>\n \tExample:",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Oops - avoid NPE if os.name has no space in it.\nProps to Milamber, see Bug 47064\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@768414 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8ad560249366be04ec675c2df210a41fbf74d980",
        "commit": "https://github.com/apache/jmeter/commit/5a1666df8893b2b4b75ac19bdd351967140be02e",
        "parent": "https://github.com/apache/jmeter/commit/f1b83f276267f4af39f92ec5cabf5d27188bb1b4",
        "bug_id": "jmeter_120",
        "file": [
            {
                "sha": "d564dc77239c8f170864fc0d580ff4c929ad2cf5",
                "filename": "src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5a1666df8893b2b4b75ac19bdd351967140be02e/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5a1666df8893b2b4b75ac19bdd351967140be02e/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java?ref=5a1666df8893b2b4b75ac19bdd351967140be02e",
                "patch": "@@ -73,8 +73,8 @@ private static String getJMeterLaf(){\n         if (laf != null) {\n             return laf;\n         }\n-        String osFamily = osName.substring(0, osName.indexOf(' '));// e.g. windows xp => windows\n-        laf = JMeterUtils.getProperty(JMETER_LAF+\".\"+osFamily);\n+        String[] osFamily = osName.split(\"\\\\s\"); // e.g. windows xp => windows\n+        laf = JMeterUtils.getProperty(JMETER_LAF+\".\"+osFamily[0]);\n         if (laf != null) {\n             return laf;\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Logout from server before disconnecting\nGuard against possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@759944 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e344f997dc8834fefbb11767c4ce63e8d7e4e7bb",
        "commit": "https://github.com/apache/jmeter/commit/daea451555f24d4a86da273778be9e0142a00ae9",
        "parent": "https://github.com/apache/jmeter/commit/0711c484f8d07f9b23499e2f31a2d9bba662a2c2",
        "bug_id": "jmeter_121",
        "file": [
            {
                "sha": "45140d879a4808ec523f91d45b6c6e798431f706",
                "filename": "src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/daea451555f24d4a86da273778be9e0142a00ae9/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/daea451555f24d4a86da273778be9e0142a00ae9/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java?ref=daea451555f24d4a86da273778be9e0142a00ae9",
                "patch": "@@ -201,7 +201,7 @@ public SampleResult sample(Entry e) {\n                         } else {\n                             long bytes = IOUtils.copy(input,target);\n                             ftpOK = bytes > 0;\n-                            if (saveResponse){\n+                            if (saveResponse && baos != null){\n                                 res.setResponseData(baos.toByteArray());\n                                 if (!binaryTransfer) {\n                                     res.setDataType(SampleResult.TEXT);\n@@ -235,6 +235,10 @@ public SampleResult sample(Entry e) {\n             res.setResponseMessage(ex.toString());\n         } finally {\n             if (ftp.isConnected()) {\n+                try {\n+                    ftp.logout();\n+                } catch (IOException ignored) {\n+                }\n                 try {\n                     ftp.disconnect();\n                 } catch (IOException ignored) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Protect against possible NPE if called during shutdown\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@732427 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 45acdd06762fb1399f01d025f3898acec8e3f610",
        "commit": "https://github.com/apache/jmeter/commit/5aab820e539bbef191e397ae366b6e3636fb0743",
        "parent": "https://github.com/apache/jmeter/commit/60b6a02093665c25bb439cd0582545dcce8f9f40",
        "bug_id": "jmeter_122",
        "file": [
            {
                "sha": "22fe516b363e9084f6bd28ca279256553c243487",
                "filename": "src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5aab820e539bbef191e397ae366b6e3636fb0743/src/functions/org/apache/jmeter/functions/RegexFunction.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/RegexFunction.java?ref=5aab820e539bbef191e397ae366b6e3636fb0743",
                "patch": "@@ -127,6 +127,10 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n         // Relatively expensive operation, so do it once\n         JMeterVariables vars = getVariables();\n \n+        if (vars == null){// Can happen if called during test closedown\n+            return defaultValue;\n+        }\n+\n         if (name.length() > 0) {\n             vars.put(name, defaultValue);\n         }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 46016 - avoid possible NPE in JMSSampler\nReplace inefficient iterator usage\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@706313 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8a6897bff3752f4709e9e3811eca6d06e349471b",
        "commit": "https://github.com/apache/jmeter/commit/78910a65a8f1f32db1dff3b48e37409d23c1c1f5",
        "parent": "https://github.com/apache/jmeter/commit/bdf67d66c9283184ab24f3f4a6ed151f266b1367",
        "bug_id": "jmeter_123",
        "file": [
            {
                "sha": "64bfc93189310d62308dadc30951a2554718fdbf",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/78910a65a8f1f32db1dff3b48e37409d23c1c1f5/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/78910a65a8f1f32db1dff3b48e37409d23c1c1f5/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java?ref=78910a65a8f1f32db1dff3b48e37409d23c1c1f5",
                "patch": "@@ -298,7 +298,8 @@ public void threadStarted() {\n             context = getInitialContext();\n             Object obj = context.lookup(getQueueConnectionFactory());\n             if (!(obj instanceof QueueConnectionFactory)) {\n-                String msg = \"QueueConnectionFactory expected, but got \" + obj.getClass().getName();\n+                String msg = \"QueueConnectionFactory expected, but got \" \n+                    + obj == null ? \"null\" :  obj.getClass().getName();\n                 LOGGER.fatalError(msg);\n                 throw new IllegalStateException(msg);\n             }\n@@ -383,10 +384,10 @@ private Context getInitialContext() throws NamingException {\n                 LOGGER.debug(\"Number of JNDI properties: \" + map.size());\n             }\n         }\n-        Iterator it = map.keySet().iterator();\n+        Iterator it = map.entrySet().iterator();\n         while (it.hasNext()) {\n-            String key = (String) it.next();\n-            table.put(key, map.get(key));\n+            Map.Entry me = (Map.Entry) it.next();\n+            table.put(me.getKey(), me.getValue());\n         }\n \n         Context context = new InitialContext(table);",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE (if property used on Test Plan)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@686055 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e93716b2025d8e3dd79f5a6154d5b2020fee4e69",
        "commit": "https://github.com/apache/jmeter/commit/4a3f142a80176674025ec94b167ff037c38e106d",
        "parent": "https://github.com/apache/jmeter/commit/4050840325f3c900ab26bf81b28380fcedb51a08",
        "bug_id": "jmeter_124",
        "file": [
            {
                "sha": "3e57bca7c29ced5b32173d0d7934b637c3a2347d",
                "filename": "src/functions/org/apache/jmeter/functions/Property.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4a3f142a80176674025ec94b167ff037c38e106d/src/functions/org/apache/jmeter/functions/Property.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4a3f142a80176674025ec94b167ff037c38e106d/src/functions/org/apache/jmeter/functions/Property.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/Property.java?ref=4a3f142a80176674025ec94b167ff037c38e106d",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.jmeter.engine.util.CompoundVariable;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n \n /**\n@@ -80,7 +81,10 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n         if (values.length > 1) {\n             String variableName = ((CompoundVariable) values[1]).execute();\n             if (variableName.length() > 0) {// Allow for empty name\n-                getVariables().put(variableName, propertyValue);\n+                final JMeterVariables variables = getVariables();\n+                if (variables != null) {\n+                    variables.put(variableName, propertyValue);\n+                }\n             }\n         }\n         return propertyValue;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE when using nested Transaction Controllers with parent samples\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@674210 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e5f3ecb5c78ce85c340ff79cde8478c825c464c7",
        "commit": "https://github.com/apache/jmeter/commit/9be8566a56c574a2f77255c9c70c570824c64ded",
        "parent": "https://github.com/apache/jmeter/commit/3f920e2cb15de27b884966b3654818904cd91698",
        "bug_id": "jmeter_125",
        "file": [
            {
                "sha": "314272d33c06239d00513f81cda9b41c0eeae0cb",
                "filename": "src/core/org/apache/jmeter/threads/JMeterThread.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9be8566a56c574a2f77255c9c70c570824c64ded/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9be8566a56c574a2f77255c9c70c570824c64ded/src/core/org/apache/jmeter/threads/JMeterThread.java",
                "status": "modified",
                "changes": 221,
                "additions": 123,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/threads/JMeterThread.java?ref=9be8566a56c574a2f77255c9c70c570824c64ded",
                "patch": "@@ -237,104 +237,7 @@ public void run() {\n \t\t\twhile (running) {\n \t\t\t\tSampler sam;\n \t\t\t\twhile (running && (sam = controller.next()) != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tthreadContext.setCurrentSampler(sam);\n-                        \n-                        // Check if we are running a transaction\n-                        TransactionSampler transactionSampler = null;\n-                        if(sam instanceof TransactionSampler) {\n-                            transactionSampler = (TransactionSampler) sam;\n-                        }\n-                        // Find the package for the transaction\n-                        SamplePackage transactionPack = null;\n-                        if(transactionSampler != null) {\n-                            transactionPack = compiler.configureTransactionSampler(transactionSampler);\n-                            \n-                            // Check if the transaction is done\n-                            if(transactionSampler.isTransactionDone()) {\n-                                // Get the transaction sample result\n-                                SampleResult transactionResult = transactionSampler.getTransactionResult();\n-                                transactionResult.setThreadName(threadName);\n-                                transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());\n-                                transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());\n-\n-                                // Check assertions for the transaction sample\n-                                checkAssertions(transactionPack.getAssertions(), transactionResult);\n-                                // Notify listeners with the transaction sample result\n-                                notifyListeners(transactionPack.getSampleListeners(), transactionResult);\n-                                compiler.done(transactionPack);\n-                                // Transaction is done, we do not have a sampler to sample\n-                                sam = null;\n-                            }\n-                            else {\n-                                // It is the sub sampler of the transaction that will be sampled\n-                                sam = transactionSampler.getSubSampler();\n-                            }\n-                        }\n-                        \n-                        // Check if we have a sampler to sample\n-                        if(sam != null) {\n-                            // Get the sampler ready to sample\n-                            SamplePackage pack = compiler.configureSampler(sam);\n-\n-\t\t\t\t\t\t    // Hack: save the package for any transaction controllers\n-\t\t\t\t\t\t\tthreadVars.putObject(PACKAGE_OBJECT, pack);\n-\n-                            delay(pack.getTimers());\n-                            Sampler sampler = pack.getSampler();\n-                            sampler.setThreadContext(threadContext);\n-                            sampler.setThreadName(threadName);\n-                            TestBeanHelper.prepare(sampler);\n-                        \n-                            // Perform the actual sample\n-                            SampleResult result = sampler.sample(null); \n-                            // TODO: remove this useless Entry parameter\n-                        \n-                            // If we got any results, then perform processing on the result\n-                            if (result != null) {\n-                            \tresult.setGroupThreads(threadGroup.getNumberOfThreads());\n-                            \tresult.setAllThreads(JMeterContextService.getNumberOfThreads());\n-                                result.setThreadName(threadName);\n-                                threadContext.setPreviousResult(result);\n-                                runPostProcessors(pack.getPostProcessors());\n-                                checkAssertions(pack.getAssertions(), result);\n-                                // Do not send subsamples to listeners which receive the transaction sample\n-                                List sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);\n-                                notifyListeners(sampleListeners, result);\n-                                compiler.done(pack);\n-                                // Add the result as subsample of transaction if we are in a transaction\n-                                if(transactionSampler != null) {\n-                                    transactionSampler.addSubSamplerResult(result);\n-                                }\n-\n-                                // Check if thread or test should be stopped\n-                                if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {\n-                                    stopThread();\n-                                }\n-                                if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {\n-                                    stopTest();\n-                                }\n-                            } else {\n-                                compiler.done(pack); // Finish up\n-                            }\n-                        }\n-\t\t\t\t\t\tif (scheduler) {\n-\t\t\t\t\t\t\t// checks the scheduler to stop the iteration\n-\t\t\t\t\t\t\tstopScheduler();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (JMeterStopTestException e) {\n-\t\t\t\t\t\tlog.info(\"Stopping Test: \" + e.toString());\n-\t\t\t\t\t\tstopTest();\n-\t\t\t\t\t} catch (JMeterStopThreadException e) {\n-\t\t\t\t\t\tlog.info(\"Stopping Thread: \" + e.toString());\n-\t\t\t\t\t\tstopThread();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t    if (sam != null) {\n-\t                        log.error(\"Error while processing sampler '\"+sam.getName()+\"' :\", e);\t\t\t\t\t        \n-\t\t\t\t\t    } else {\n-\t\t\t\t\t        log.error(\"\", e);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n+\t\t\t\t\tprocess_sampler(sam, null);\n \t\t\t\t}\n \t\t\t\tif (controller.isDone()) {\n \t\t\t\t\trunning = false;\n@@ -360,6 +263,128 @@ public void run() {\n \t\t\tthreadFinished();\n \t\t}\n \t}\n+\n+\t/**\n+\t * Process the current sampler, handling transaction samplers.\n+\t * \n+\t * @param current sampler\n+\t * @param parent sampler\n+\t * @return SampleResult if a transaction was processed\n+\t */\n+    private SampleResult process_sampler(Sampler current, Sampler parent) {\n+        SampleResult transactionResult = null;\n+        try {\n+        \tthreadContext.setCurrentSampler(current);\n+            \n+            // Check if we are running a transaction\n+            TransactionSampler transactionSampler = null;\n+            if(current instanceof TransactionSampler) {\n+                transactionSampler = (TransactionSampler) current;\n+            }\n+            // Find the package for the transaction\n+            SamplePackage transactionPack = null;\n+            if(transactionSampler != null) {\n+                transactionPack = compiler.configureTransactionSampler(transactionSampler);\n+                \n+                // Check if the transaction is done\n+                if(transactionSampler.isTransactionDone()) {\n+                    // Get the transaction sample result\n+                    transactionResult = transactionSampler.getTransactionResult();\n+                    transactionResult.setThreadName(threadName);\n+                    transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());\n+                    transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());\n+\n+                    // Check assertions for the transaction sample\n+                    checkAssertions(transactionPack.getAssertions(), transactionResult);\n+                    // Notify listeners with the transaction sample result\n+                    if (!(parent instanceof TransactionSampler)){\n+                        notifyListeners(transactionPack.getSampleListeners(), transactionResult);\n+                    }\n+                    compiler.done(transactionPack);\n+                    // Transaction is done, we do not have a sampler to sample\n+                    current = null;\n+                }\n+                else {\n+                    Sampler prev = current;\n+                    // It is the sub sampler of the transaction that will be sampled\n+                    current = transactionSampler.getSubSampler();\n+                    if (current instanceof TransactionSampler){\n+                        SampleResult res = process_sampler(current, prev);// recursive call\n+                        threadContext.setCurrentSampler(prev);\n+                        current=null;\n+                        if (res!=null){\n+                            transactionSampler.addSubSamplerResult(res);\n+                        }\n+                    }\n+                }\n+            }\n+            \n+            // Check if we have a sampler to sample\n+            if(current != null) {\n+                // Get the sampler ready to sample\n+                SamplePackage pack = compiler.configureSampler(current);\n+\n+        \t    // Hack: save the package for any transaction controllers\n+        \t\tthreadVars.putObject(PACKAGE_OBJECT, pack);\n+\n+                delay(pack.getTimers());\n+                Sampler sampler = pack.getSampler();\n+                sampler.setThreadContext(threadContext);\n+                sampler.setThreadName(threadName);\n+                TestBeanHelper.prepare(sampler);\n+            \n+                // Perform the actual sample\n+                SampleResult \n+                result = sampler.sample(null); \n+                // TODO: remove this useless Entry parameter\n+            \n+                // If we got any results, then perform processing on the result\n+                if (result != null) {\n+                \tresult.setGroupThreads(threadGroup.getNumberOfThreads());\n+                \tresult.setAllThreads(JMeterContextService.getNumberOfThreads());\n+                    result.setThreadName(threadName);\n+                    threadContext.setPreviousResult(result);\n+                    runPostProcessors(pack.getPostProcessors());\n+                    checkAssertions(pack.getAssertions(), result);\n+                    // Do not send subsamples to listeners which receive the transaction sample\n+                    List sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);\n+                    notifyListeners(sampleListeners, result);\n+                    compiler.done(pack);\n+                    // Add the result as subsample of transaction if we are in a transaction\n+                    if(transactionSampler != null) {\n+                        transactionSampler.addSubSamplerResult(result);\n+                    }\n+\n+                    // Check if thread or test should be stopped\n+                    if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {\n+                        stopThread();\n+                    }\n+                    if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {\n+                        stopTest();\n+                    }\n+                } else {\n+                    compiler.done(pack); // Finish up\n+                }\n+            }\n+        \tif (scheduler) {\n+        \t\t// checks the scheduler to stop the iteration\n+        \t\tstopScheduler();\n+        \t}\n+        } catch (JMeterStopTestException e) {\n+        \tlog.info(\"Stopping Test: \" + e.toString());\n+        \tstopTest();\n+        } catch (JMeterStopThreadException e) {\n+        \tlog.info(\"Stopping Thread: \" + e.toString());\n+        \tstopThread();\n+        } catch (Exception e) {\n+            if (current != null) {\n+                log.error(\"Error while processing sampler '\"+current.getName()+\"' :\", e);\t\t\t\t\t        \n+            } else {\n+                log.error(\"\", e);\n+            }\n+        }\n+        return transactionResult;\n+    }\n     \n     /**\n      * Get the SampleListeners for the sampler. Listeners who receive transaction sample",
                "deletions": 98
            },
            {
                "sha": "3c72e846332dd970ff993044b3c2f03288b21871",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/9be8566a56c574a2f77255c9c70c570824c64ded/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/9be8566a56c574a2f77255c9c70c570824c64ded/xdocs/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9be8566a56c574a2f77255c9c70c570824c64ded",
                "patch": "@@ -63,6 +63,7 @@ but otherwise its behaviour is not consistent (or clearly specified).</p>\n The menu item Options / Choose Language does not change all the displayed text to the new language.\n To override the default local language, set the JMeter property \"language\" before starting JMeter. \n </p>\n+\n <h3>Incompatible changes</h3>\n <ul>\n The test element \"Save Results to a file\" is now shown as a Listener.\n@@ -77,7 +78,8 @@ It does not affect test plans or test behaviour.\n <li>The \"prev\" and \"sampler\" objects are now defined for BSF test elements</li>\n <li>Prompt to overwrite an existing file when first saving a new test plan</li>\n <li>The test element \"Save Results to a file\" is now shown as a Listener</li>\n-<li>Correct TestBeans to show the correct popup menu for Listeners</li>\n+<li>Amend TestBeans to show the correct popup menu for Listeners</li>\n+<li>Fix NPE when using nested Transaction Controllers with parent samples</li>\n </ul>\n \n <h3>Improvements</h3>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "evalVar cannot be used on Test Plan\nLog error rather than generating NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@640866 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: db6a0e50733581d1717a6ac7076aa58c1326bf3a",
        "commit": "https://github.com/apache/jmeter/commit/9f4d94ecb9806488f43caa135ffa579573b305a8",
        "parent": "https://github.com/apache/jmeter/commit/fad35f06d288c2bf2db4eb495c48189af7f7c6d4",
        "bug_id": "jmeter_126",
        "file": [
            {
                "sha": "bdbb50ca02dd9f4d31322f86258fca552747fe22",
                "filename": "src/functions/org/apache/jmeter/functions/EvalVarFunction.java",
                "blob_url": "https://github.com/apache/jmeter/blob/9f4d94ecb9806488f43caa135ffa579573b305a8/src/functions/org/apache/jmeter/functions/EvalVarFunction.java",
                "raw_url": "https://github.com/apache/jmeter/raw/9f4d94ecb9806488f43caa135ffa579573b305a8/src/functions/org/apache/jmeter/functions/EvalVarFunction.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/EvalVarFunction.java?ref=9f4d94ecb9806488f43caa135ffa579573b305a8",
                "patch": "@@ -28,7 +28,10 @@\n import org.apache.jmeter.engine.util.CompoundVariable;\n import org.apache.jmeter.samplers.SampleResult;\n import org.apache.jmeter.samplers.Sampler;\n+import org.apache.jmeter.threads.JMeterVariables;\n import org.apache.jmeter.util.JMeterUtils;\n+import org.apache.jorphan.logging.LoggingManager;\n+import org.apache.log.Logger;\n \n /**\n  * Function to evaluate a string which may contain variable or function references.\n@@ -42,6 +45,8 @@\n \n \tprivate static final long serialVersionUID = 232L;\n \n+    private static final Logger log = LoggingManager.getLoggerForClass();\n+\n \tprivate static final List desc = new LinkedList();\n \n \tprivate static final String KEY = \"__evalVar\"; //$NON-NLS-1$\n@@ -66,8 +71,12 @@ public Object clone() throws CloneNotSupportedException {\n \tpublic synchronized String execute(SampleResult previousResult, Sampler currentSampler)\n \t\t\tthrows InvalidVariableException {\n \t\tString variableName = ((CompoundVariable) values[0]).execute();\n-\t\tString variableValue = getVariables().get(variableName);\n-\t\t//String parameter = ((CompoundVariable) values[0]).execute();\n+\t\tfinal JMeterVariables vars = getVariables();\n+\t\tif (vars == null){\n+\t\t    log.error(\"Variables have not yet been defined\");\n+\t\t    return \"**ERROR - see log file**\";\n+\t\t}\n+        String variableValue = vars.get(variableName);\n \t\tCompoundVariable cv = new CompoundVariable(variableValue);\n \t\treturn cv.execute();\n \t}",
                "deletions": 2
            },
            {
                "sha": "74b1a9189ebf3183621df4a55caaabb0ee114da6",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/9f4d94ecb9806488f43caa135ffa579573b305a8/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/9f4d94ecb9806488f43caa135ffa579573b305a8/xdocs/changes.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=9f4d94ecb9806488f43caa135ffa579573b305a8",
                "patch": "@@ -108,7 +108,7 @@ that contain '.functions.' and don't contain '.gui.'</li>\n <li>Bug 44184 - Allow header to be saved with Aggregate Graph data</li>\n <li>Added \"Save Table Data\" buttons to Aggregate and Summary Reports - save table as CSV format with header</li>\n <li>Allow most functions to be used on the Test Plan. \n-Note __split() and __regex() cannot be used on the Test Plan.</li>\n+Note __evalVar(), __split() and __regex() cannot be used on the Test Plan.</li>\n <li>Allow Global properties to be loaded from a file, e.g. -Gglobal.properties</li>\n <li>Add \"Substring\" option to Response Assertion</li>\n <li>Bug 44378 - Turkish localisation</li>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid possible NPE; revert to original close method\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@603941 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bc999e781b37a167d263bfce7d4314119fe77863",
        "commit": "https://github.com/apache/jmeter/commit/d099f563f03c3f2da1356e5782ccbee41d90e79d",
        "parent": "https://github.com/apache/jmeter/commit/738cfcba931afb83f007c1845d6cf4ae31360919",
        "bug_id": "jmeter_127",
        "file": [
            {
                "sha": "373dd09eff32e7f99c68fce7af2172d6ef625934",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d099f563f03c3f2da1356e5782ccbee41d90e79d/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d099f563f03c3f2da1356e5782ccbee41d90e79d/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java?ref=d099f563f03c3f2da1356e5782ccbee41d90e79d",
                "patch": "@@ -1072,7 +1072,10 @@ public void threadFinished() {\n \t\t\t{\n \t\t\t\tMap.Entry entry = (Map.Entry) it.next();\n \t\t\t\tHttpClient cl = (HttpClient) entry.getValue();\n-                ((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection\n+\t\t\t\t// Can cause NPE in HttpClient 3.1\n+                //((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection\n+\t\t\t\t// Revert to original method:\n+                cl.getHttpConnectionManager().closeIdleConnections(-1000);// Closes the connection\n \t\t\t}\n \t\t\tmap.clear();\n \t\t}",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Add NON-NLS markers; avoid unlikely NPE;\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@586720 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 61954c84bcabe1dda821e7e38a6354ae77c6d95f",
        "commit": "https://github.com/apache/jmeter/commit/3c33e1cf454c30b228c6ef7b7981ad3a1a4b5724",
        "parent": "https://github.com/apache/jmeter/commit/18717004baccc3b87535501eb0861a63ea959f6c",
        "bug_id": "jmeter_128",
        "file": [
            {
                "sha": "a864da768534f4824be97b47d38ac8ab5ce6658f",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3c33e1cf454c30b228c6ef7b7981ad3a1a4b5724/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3c33e1cf454c30b228c6ef7b7981ad3a1a4b5724/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java?ref=3c33e1cf454c30b228c6ef7b7981ad3a1a4b5724",
                "patch": "@@ -172,7 +172,7 @@\n \n \t/** A number to indicate that the port has not been set. * */\n \tpublic static final int UNSPECIFIED_PORT = 0;\n-    public static final String UNSPECIFIED_PORT_AS_STRING = \"0\";\n+    public static final String UNSPECIFIED_PORT_AS_STRING = \"0\"; // $NON-NLS-1$\n \n \tprotected final static String NON_HTTP_RESPONSE_CODE = \"Non HTTP response code\";\n \n@@ -198,9 +198,10 @@\n \n     protected static final String KEEP_ALIVE = \"keep-alive\"; // $NON-NLS-1$\n \n-    protected static final String TRANSFER_ENCODING = \"transfer-encoding\";\n+    // e.g. \"Transfer-Encoding: chunked\", which is processed automatically by the underlying protocol\n+    protected static final String TRANSFER_ENCODING = \"transfer-encoding\"; // $NON-NLS-1$\n \n-    protected static final String HEADER_CONTENT_ENCODING = \"content-encoding\";\n+    protected static final String HEADER_CONTENT_ENCODING = \"content-encoding\"; // $NON-NLS-1$\n \n     protected static final String HTTP_1_1 = \"HTTP/1.1\"; // $NON-NLS-1$\n \n@@ -442,8 +443,6 @@ public void setDoMultipartPost(boolean value) {\n     }\n \n     public boolean getDoMultipartPost() {\n-    \t// TODO - Maybe provide a setting in the properties file\n-    \t// to control the default value for this property\n         return getPropertyAsBoolean(DO_MULTIPART_POST, false);\n     }\n \n@@ -1056,7 +1055,8 @@ protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampl\n \t                            continue;\n \t                        }\n \t                    }\n-\t                    if (pattern != null && !localMatcher.matches(urlStrEnc, pattern)) {\n+\t                    // I don't think localMatcher can be null here, but check just in case\n+\t                    if (pattern != null && localMatcher != null && !localMatcher.matches(urlStrEnc, pattern)) {\n \t                    \tcontinue; // we have a pattern and the URL does not match, so skip it\n \t                    }\n \t                    HTTPSampleResult binRes = sample(url, GET, false, frameDepth + 1);",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in SampleResultConverter - XStream PrettyPrinteWriter cannot handle nulls\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@573042 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 003ba8a16999a14bee6ceda075857a514eb4a121",
        "commit": "https://github.com/apache/jmeter/commit/edfa64a4952f4d9698631a82856ed0082f850195",
        "parent": "https://github.com/apache/jmeter/commit/1276c5ab57cf5e9f224beb880f153ad3154489df",
        "bug_id": "jmeter_129",
        "file": [
            {
                "sha": "d45c367890fe619b6b61bd98f2b70c110564146a",
                "filename": "src/core/org/apache/jmeter/save/converters/ConversionHelp.java",
                "blob_url": "https://github.com/apache/jmeter/blob/edfa64a4952f4d9698631a82856ed0082f850195/src/core/org/apache/jmeter/save/converters/ConversionHelp.java",
                "raw_url": "https://github.com/apache/jmeter/raw/edfa64a4952f4d9698631a82856ed0082f850195/src/core/org/apache/jmeter/save/converters/ConversionHelp.java",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/ConversionHelp.java?ref=edfa64a4952f4d9698631a82856ed0082f850195",
                "patch": "@@ -36,7 +36,7 @@\n import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n \n /**\n- * @author mstover\n+ * Utility conversion routines for use with XStream\n  * \n  */\n public class ConversionHelp {\n@@ -72,13 +72,21 @@ public static void setOutVersion(String v) {\n \t\toutVersion = v;\n \t}\n \n+\t/**\n+\t * Encode a string (if necessary) for output to a JTL file.\n+\t * Strings are only encoded if the output version is 1.0,\n+\t * but nulls are always converted to the empty string.\n+\t * \n+\t * @param p string to encode\n+\t * @return encoded string (will never be null)\n+\t */\n \tpublic static String encode(String p) {\n+\t\tif (p == null) {// Nulls cannot be written using PrettyPrintWriter - they cause an NPE\n+\t\t\treturn \"\"; // $NON-NLS-1$\n+\t\t}\n+\t\t// Only encode strings if outVersion = 1.0\n \t\tif (!\"1.0\".equals(outVersion))//$NON-NLS-1$\n \t\t\treturn p;\n-\t\t// Only encode strings if inVersion = 1.0\n-\t\tif (p == null) {\n-\t\t\treturn \"\";\n-\t\t}\n \t\ttry {\n \t\t\tString p1 = URLEncoder.encode(p, CHAR_SET);\n \t\t\treturn p1;",
                "deletions": 5
            },
            {
                "sha": "c7e42644760059496f761d549264a2a4b1e07be1",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/edfa64a4952f4d9698631a82856ed0082f850195/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/edfa64a4952f4d9698631a82856ed0082f850195/xdocs/changes.xml",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=edfa64a4952f4d9698631a82856ed0082f850195",
                "patch": "@@ -27,20 +27,21 @@\n \n <!--  ===================  -->\n \n-<h3>Version 2.31</h3>\n+<h3>Version 2.3</h3>\n+\n+<h3>Fixes since 2.3RC4</h3>\n+\n+<h4>Bug fixes</h4>\n+<ul>\n+<li>Fix NPE in SampleResultConverter - XStream PrettyPrinteWriter cannot handle nulls</li>\n+</ul>\n \n <h4>Improvements</h4>\n <ul>\n <li>Add nameSpace option to XPath extractor</li>\n <li>Add NULL parameter option to JDBC sampler</li>\n </ul>\n \n-<h4>Bug fixes</h4>\n-\n-<h4>Incompatibilities</h4>\n-\n-<h3>Version 2.3</h3>\n-\n <h4>Fixes since 2.3RC3</h4>\n <ul>\n <li>Fixed NPE in Summariser (bug introduced in 2.3RC3)</li>",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Add fix for Derby NPE when no ? markers provided\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@572719 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ef8a2f747246589f1d1379db07e07401d5923dad",
        "commit": "https://github.com/apache/jmeter/commit/1d4a14a68b897f5eca98cf2b4014db34bfd6c108",
        "parent": "https://github.com/apache/jmeter/commit/657d3a26609d61d168e3a9a8d20e81870cc3c488",
        "bug_id": "jmeter_130",
        "file": [
            {
                "sha": "6c8a47c42552e49afa81aae77482f2da6fd6cf4d",
                "filename": "src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1d4a14a68b897f5eca98cf2b4014db34bfd6c108/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1d4a14a68b897f5eca98cf2b4014db34bfd6c108/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java?ref=1d4a14a68b897f5eca98cf2b4014db34bfd6c108",
                "patch": "@@ -258,7 +258,11 @@ private void setArguments(PreparedStatement pstmt) throws SQLException {\n \t\t\tString argument = arguments[i];\n \t\t\tString argumentType = argumentsTypes[i];\n \t\t    int targetSqlType = getJdbcType(argumentType);\n-\t\t    pstmt.setObject(i+1, argument, targetSqlType);\n+\t\t    try {\n+\t\t\t\tpstmt.setObject(i+1, argument, targetSqlType);\n+\t\t\t} catch (NullPointerException e) { // thrown by Derby JDBC (at least) if there are no \"?\" markers in statement\n+\t\t\t\tthrow new SQLException(\"Could not set argument no: \"+(i+1)+\" - missing parameter marker?\");\n+\t\t\t}\n \t\t}\n \t}\n     ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in unit tests (previously unseen because null != evt.getSource())\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@571351 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 35a2cdf4455cc8d044251bea2d96560191632194",
        "commit": "https://github.com/apache/jmeter/commit/4a0eb8f6c2dfd4c908b659eb6b739b8ea0a91753",
        "parent": "https://github.com/apache/jmeter/commit/496cfe56e08f1ada8bb39328b2bb3bf658a210ca",
        "bug_id": "jmeter_131",
        "file": [
            {
                "sha": "c4edd5d7efd117e0b49a9015e3c5ccb445c917c9",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4a0eb8f6c2dfd4c908b659eb6b739b8ea0a91753/src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4a0eb8f6c2dfd4c908b659eb6b739b8ea0a91753/src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java?ref=4a0eb8f6c2dfd4c908b659eb6b739b8ea0a91753",
                "patch": "@@ -574,8 +574,9 @@ public void propertyChange(PropertyChangeEvent evt) {\n \t\t// evt will be null only when called from TestBeanGUI.modifyTestElement()\n \t\t// TODO - is the propertyChange event needed, now that modifyTestElement calls this?\n \t\tfor (int i = 0; i < editors.length; i++) {\n-\t\t\tif (evt == null || editors[i] == evt.getSource()) {\n-\t\t\t\tObject value = editors[i].getValue();\n+\t\t\tPropertyEditor propertyEditor=editors[i]; // might be null in testing\n+\t\t\tif (propertyEditor != null && (evt == null || propertyEditor == evt.getSource())) {\n+\t\t\t\tObject value = propertyEditor.getValue();\n \t\t\t\tString name = descriptors[i].getName();\n \t\t\t\tif (value == null) {\n \t\t\t\t\tpropertyMap.remove(name);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE in HTTPSampler2 if 302 does not have Location header.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@565384 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8e9b31d0c4d9fe9017c5ea5244301817d262492a",
        "commit": "https://github.com/apache/jmeter/commit/4a146dea4b33a04f4d35bfa2b1e614f35247bae8",
        "parent": "https://github.com/apache/jmeter/commit/5d9c775b5c52007d8031752b3446b4cb469267ef",
        "bug_id": "jmeter_132",
        "file": [
            {
                "sha": "c79ec71cd6544720183491eb48f00c676716f77f",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4a146dea4b33a04f4d35bfa2b1e614f35247bae8/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4a146dea4b33a04f4d35bfa2b1e614f35247bae8/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java?ref=4a146dea4b33a04f4d35bfa2b1e614f35247bae8",
                "patch": "@@ -834,7 +834,11 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe\n \n \t\t\tres.setResponseHeaders(getResponseHeaders(httpMethod));\n \t\t\tif (res.isRedirect()) {\n-\t\t\t\tres.setRedirectLocation(httpMethod.getResponseHeader(HEADER_LOCATION).getValue());\n+\t\t\t\tfinal Header headerLocation = httpMethod.getResponseHeader(HEADER_LOCATION);\n+\t\t\t\tif (headerLocation == null) { // HTTP protocol violation, but avoids NPE\n+\t\t\t\t\tthrow new IllegalArgumentException(\"Missing location header\");\n+\t\t\t\t}\n+\t\t\t\tres.setRedirectLocation(headerLocation.getValue());\n \t\t\t}\n \n             // If we redirected automatically, the URL may have changed",
                "deletions": 1
            },
            {
                "sha": "526488171d23c630298540cec0e0bd6366c5f2c2",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/4a146dea4b33a04f4d35bfa2b1e614f35247bae8/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/4a146dea4b33a04f4d35bfa2b1e614f35247bae8/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=4a146dea4b33a04f4d35bfa2b1e614f35247bae8",
                "patch": "@@ -39,6 +39,7 @@\n <li>Bug 43006 - NPE if icon.properties file not found</li>\n <li>Bug 42918 - Size Assertion now treats an empty response as having zero length</li>\n <li>Bug 43007 - Test ends before all threadgroups started</li>\n+<li>Fix possible NPE in HTTPSampler2 if 302 does not have Location header.</li>\n </ul>\n \n <h3>Version 2.3RC3</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 43006 - NPE if icon.properties file not found\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@564889 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f3fd01535cf6c6851975f64d91e112762c63cb0",
        "commit": "https://github.com/apache/jmeter/commit/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
        "parent": "https://github.com/apache/jmeter/commit/d887c2c9262ae8362a1b202f378996534fdd1809",
        "bug_id": "jmeter_133",
        "file": [
            {
                "sha": "1aa38a8f53fbee3f5efd6f6531375a61f81d10b0",
                "filename": "src/core/org/apache/jmeter/util/JMeterUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/src/core/org/apache/jmeter/util/JMeterUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JMeterUtils.java?ref=dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
                "patch": "@@ -27,6 +27,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.net.URL;\n import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.Iterator;\n@@ -188,11 +189,16 @@ public static Properties loadProperties(String file) {\n             p.load(is);\n \t\t} catch (IOException e) {\n \t\t\ttry {\n-\t\t\t\tis = JMeterUtils.class.getClassLoader().getResource(file).openStream();\n-\t\t\t\tif (is == null) {\n+\t\t\t\tfinal URL resource = JMeterUtils.class.getClassLoader().getResource(file);\n+\t\t\t\tif (resource == null) {\n \t\t\t\t\tlog.warn(\"Cannot find \" + file);\n \t\t\t\t\treturn null;\n \t\t\t\t}\n+\t\t\t\tis = resource.openStream();\n+\t\t\t\tif (is == null) {\n+\t\t\t\t\tlog.warn(\"Cannot open \" + file);\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n \t\t\t\tp.load(is);\n \t\t\t} catch (IOException ex) {\n \t\t\t\tlog.warn(\"Error reading \" + file + \" \" + ex.toString());",
                "deletions": 2
            },
            {
                "sha": "ed39475f706adcd1569e99146ffbc9f8dac340f9",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=dbb3bfe6fdf9717646b3b6e37b1ef37623449ecf",
                "patch": "@@ -36,6 +36,7 @@\n <li>Fixed errors when running non-GUI on a headless host</li>\n <li>Bug 43054 - SSLManager causes stress tests to saturate and crash</li>\n <li>Clarified HTTP Request Defaults usage of the port field</li>\n+<li>Bug 43006 - NPE if icon.properties file not found</li>\n </ul>\n \n <h3>Version 2.3RC3</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE when password is not provided\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@554102 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 973f4584ad29d79464ce02d23bca9cf0859dc956",
        "commit": "https://github.com/apache/jmeter/commit/82479dd828943588a51faefcbd0443f6fdaa301c",
        "parent": "https://github.com/apache/jmeter/commit/e6ddebfd79acc78bc84de60b9961ad12949238f0",
        "bug_id": "jmeter_134",
        "file": [
            {
                "sha": "23f77ef9c5ead26f9110bf9d6ce6519758c01acf",
                "filename": "src/core/org/apache/jmeter/util/JsseSSLManager.java",
                "blob_url": "https://github.com/apache/jmeter/blob/82479dd828943588a51faefcbd0443f6fdaa301c/src/core/org/apache/jmeter/util/JsseSSLManager.java",
                "raw_url": "https://github.com/apache/jmeter/raw/82479dd828943588a51faefcbd0443f6fdaa301c/src/core/org/apache/jmeter/util/JsseSSLManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/util/JsseSSLManager.java?ref=82479dd828943588a51faefcbd0443f6fdaa301c",
                "patch": "@@ -228,7 +228,7 @@ private SSLContext createContext() throws GeneralSecurityException {\n         KeyManagerFactory managerFactory = \n             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());             \n         JmeterKeyStore keys = this.getKeyStore();\n-        managerFactory.init(null, this.defaultpw.toCharArray());\n+        managerFactory.init(null, defaultpw == null ? new char[]{} : defaultpw.toCharArray());\n         KeyManager[] managers = managerFactory.getKeyManagers();\n         log.debug(keys.getClass().toString());\n         ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 42778 - Transaction Controller skips sample (NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@552158 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 858ce03852cb0faba751a048e6fd194c2846a312",
        "commit": "https://github.com/apache/jmeter/commit/3a624ce6df6c553e4399e7106c5c0ddff984340b",
        "parent": "https://github.com/apache/jmeter/commit/a9b4fdf43dfba740ee1feee6d77b7a21f23ffb44",
        "bug_id": "jmeter_135",
        "file": [
            {
                "sha": "30ed135a9aa25699fcdaef003d988346551c6ecd",
                "filename": "src/core/org/apache/jmeter/control/TransactionController.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionController.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionController.java",
                "status": "modified",
                "changes": 23,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/control/TransactionController.java?ref=3a624ce6df6c553e4399e7106c5c0ddff984340b",
                "patch": "@@ -39,7 +39,9 @@\n \tpublic Sampler next() {\n         // Check if transaction is done\n         if(transactionSampler != null && transactionSampler.isTransactionDone()) {\n-            log.debug(\"End of transaction\");\n+        \tif (log.isDebugEnabled()) {\n+                log.debug(\"End of transaction \" + getName());\n+        \t}\n             // This transaction is done\n             transactionSampler = null;\n             return null;\n@@ -48,7 +50,9 @@ public Sampler next() {\n         // Check if it is the start of a new transaction\n \t\tif (isFirst()) // must be the start of the subtree\n \t\t{\n-\t\t    log.debug(\"Start of transaction\");\n+        \tif (log.isDebugEnabled()) {\n+\t\t        log.debug(\"Start of transaction \" + getName());\n+        \t}\n \t\t    transactionSampler = new TransactionSampler(this, getName());\n \t\t}\n \n@@ -61,4 +65,19 @@ public Sampler next() {\n         }\n         return transactionSampler;\n \t}\n+\t\n+\tprotected Sampler nextIsAController(Controller controller) throws NextIsNullException {\n+\t\tSampler returnValue;\n+\t\tSampler sampler = controller.next();\n+\t\tif (sampler == null) {\n+\t\t\tcurrentReturnedNull(controller);\n+\t\t\t// We need to call the super.next, instead of this.next, which is done in GenericController,\n+\t\t\t// because if we call this.next(), it will return the TransactionSampler, and we do not want that.\n+\t\t\t// We need to get the next real sampler or controller\n+\t\t\treturnValue = super.next();\n+\t\t} else {\n+\t\t\treturnValue = sampler;\n+\t\t}\n+\t\treturn returnValue;\n+\t}\n }",
                "deletions": 2
            },
            {
                "sha": "1f99997daf535e1b266bfd5576f87dc8a4dbfc12",
                "filename": "src/core/org/apache/jmeter/control/TransactionSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3a624ce6df6c553e4399e7106c5c0ddff984340b/src/core/org/apache/jmeter/control/TransactionSampler.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/control/TransactionSampler.java?ref=3a624ce6df6c553e4399e7106c5c0ddff984340b",
                "patch": "@@ -51,6 +51,7 @@ public TransactionSampler(){\n \n \tpublic TransactionSampler(TransactionController controller, String name) {\n         transactionController = controller;\n+\t\tsetName(name); // ensure name is available for debugging\n \t\ttransactionSampleResult = new SampleResult();\n \t\ttransactionSampleResult.setSampleLabel(name);\n \t\t// Assume success",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if node has no childred\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@545777 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3339b2e5edda9f622ea50838d25523fef2a94c02",
        "commit": "https://github.com/apache/jmeter/commit/a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
        "parent": "https://github.com/apache/jmeter/commit/1a9a6afc1ebfc6c880b8a3c9499717ae43d5ac52",
        "bug_id": "jmeter_136",
        "file": [
            {
                "sha": "78e577b192171086e8781d288ea448242c336625",
                "filename": "src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a5c5ec98e0d766f1a6a02a932e5162878a2819e4/src/components/org/apache/jmeter/extractor/XPathExtractor.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/extractor/XPathExtractor.java?ref=a5c5ec98e0d766f1a6a02a932e5162878a2819e4",
                "patch": "@@ -195,9 +195,13 @@ private void getValuesForXPath(Document d,String query, JMeterVariables vars, St\n \t        for (int i = 0 ; i < length; i++) {\n \t            Node match = matches.item(i);\n \t\t\t\tif ( match instanceof Element){\n-\t\t\t\t   // elements have empty nodeValue, but we are usually\n-\t\t\t\t   // interested in their content\n-\t\t\t\t   val = match.getFirstChild().getNodeValue();\n+\t\t\t\t// elements have empty nodeValue, but we are usually interested in their content\n+\t\t\t\t   final Node firstChild = match.getFirstChild();\n+\t\t\t\t   if (firstChild != null) {\n+\t\t\t\t\t   val = firstChild.getNodeValue();\n+\t\t\t\t   } else {\n+\t\t\t\t\t   val = match.getNodeValue(); // TODO is this correct?\n+\t\t\t\t   }\n \t\t\t\t} else {\t\t\t\t\n \t\t\t\t   val = match.getNodeValue();\n \t\t\t\t}",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Check for beanshell not found (better than throwing NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@542959 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 52027d99519a4274215461854476a8743a666c14",
        "commit": "https://github.com/apache/jmeter/commit/e652e10e84c42b8deb8b15e1a3d0827b1077e2cf",
        "parent": "https://github.com/apache/jmeter/commit/31946b613b842b38eacc4598c3c8c8b35c08e66f",
        "bug_id": "jmeter_137",
        "file": [
            {
                "sha": "afa266671f7c62276f081a91ad13ad03dccc76ad",
                "filename": "src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e652e10e84c42b8deb8b15e1a3d0827b1077e2cf/src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e652e10e84c42b8deb8b15e1a3d0827b1077e2cf/src/components/org/apache/jmeter/timers/BeanShellTimer.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/timers/BeanShellTimer.java?ref=e652e10e84c42b8deb8b15e1a3d0827b1077e2cf",
                "patch": "@@ -68,6 +68,10 @@ private Object readResolve() {\n \t */\n \tpublic long delay() {\n         String ret=\"0\";\n+        if (bshInterpreter == null) {\n+        \tlog.error(\"BeanShell not found\");\n+        \treturn 0;\n+        }\n         JMeterContext jmctx = JMeterContextService.getContext();\n         JMeterVariables vars = jmctx.getVariables();\n         try {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 41902 - NPE in HTTPSampler when responseCode = -1\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@520511 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e0b8d4ec3567663423ebf6fb5bcc697b195836a8",
        "commit": "https://github.com/apache/jmeter/commit/22849d4aad913831869d46b847fb3205817adc72",
        "parent": "https://github.com/apache/jmeter/commit/d66391d4b8ec8beff95c118dbfdd3739f9d6ae9b",
        "bug_id": "jmeter_138",
        "file": [
            {
                "sha": "3f4fab49ce7b0cae94fdee88b5fcac8b76e8ab68",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/22849d4aad913831869d46b847fb3205817adc72/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/22849d4aad913831869d46b847fb3205817adc72/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java?ref=22849d4aad913831869d46b847fb3205817adc72",
                "patch": "@@ -460,12 +460,19 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe\n \t\t\tint errorLevel = conn.getResponseCode();\n             String respMsg = conn.getResponseMessage();\n             if (errorLevel == -1){// Bug 38902 - sometimes -1 seems to be returned unnecessarily\n-                try {\n-                    errorLevel = Integer.parseInt(respMsg.substring(0, 3));\n-                    log.warn(\"ResponseCode==-1; parsed \"+respMsg+ \" as \"+errorLevel);\n-                  } catch (NumberFormatException e) {\n-                    log.warn(\"ResponseCode==-1; could not parse \"+respMsg);\n-                  }                \n+            \tif (respMsg != null) {// Bug 41902 - NPE\n+\t                try {\n+\t                    errorLevel = Integer.parseInt(respMsg.substring(0, 3));\n+\t                    log.warn(\"ResponseCode==-1; parsed \"+respMsg+ \" as \"+errorLevel);\n+\t                  } catch (NumberFormatException e) {\n+\t                    log.warn(\"ResponseCode==-1; could not parse \"+respMsg);\n+\t                  }\n+            \t} else {\n+            \t\trespMsg=\"(null)\";\n+            \t\tString hdr=conn.getHeaderField(0);\n+            \t\tif (hdr == null) hdr=\"(null)\";\n+                    log.warn(\"ResponseCode==-1 & null ResponseMessage. Header(0)= \"+hdr);\n+            \t}\n             }\n \t\t\tres.setResponseCode(Integer.toString(errorLevel));\n \t\t\tres.setSuccessful(isSuccessCode(errorLevel));",
                "deletions": 6
            },
            {
                "sha": "63a9db250330d9ac18672802d96c09727870fb79",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/22849d4aad913831869d46b847fb3205817adc72/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/22849d4aad913831869d46b847fb3205817adc72/xdocs/changes.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=22849d4aad913831869d46b847fb3205817adc72",
                "patch": "@@ -188,7 +188,8 @@ Removed deprecated method JMeterUtils.split() - use JOrphanUtils version instead\n <li>Bug 40325 - allow specification of proxyuser and proxypassword for WebServiceSampler</li>\n <li>Change HttpClient proxy definition to use NTCredentials; added http.proxyDomain property for this</li>\n <li>Bug 40371 - response assertion \"pattern to test\" scrollbar problem</li>\n-<li>Bug 40589- Unescape XML entities in embedded URLs</li>\n+<li>Bug 40589 - Unescape XML entities in embedded URLs</li>\n+<li>Bug 41902 - NPE in HTTPSampler when responseCode = -1</li>\n </ul>\n \n <h3>Version 2.2</h3>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Protect against possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@506734 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1a8fbc3745c8b04cc0d939817c6c9046bec62f30",
        "commit": "https://github.com/apache/jmeter/commit/8a8cd9e59b15759bc3082feabcc75925c2c786d4",
        "parent": "https://github.com/apache/jmeter/commit/46c79c50f5639aa08cc811f3be9bcfbdef88bc9e",
        "bug_id": "jmeter_139",
        "file": [
            {
                "sha": "d30ca12f07bc9b51595100d0a5f1a8aa4dccd543",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/8a8cd9e59b15759bc3082feabcc75925c2c786d4/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/8a8cd9e59b15759bc3082feabcc75925c2c786d4/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java?ref=8a8cd9e59b15759bc3082feabcc75925c2c786d4",
                "patch": "@@ -526,7 +526,9 @@ public SampleResult sample() {\n \t\t\t} else {\n \t\t\t\tresult.sampleEnd();\n \t\t\t\tresult.setSuccessful(false);\n-\t\t\t\tresult.setResponseData(st.getResponseSOAPContext().getContentType().getBytes());\n+\t\t\t\tif (st != null){\n+\t\t\t\t    result.setResponseData(st.getResponseSOAPContext().getContentType().getBytes());\n+\t\t\t\t}\n \t\t\t\tresult.setResponseHeaders(\"error\");\n \t\t\t}\n \t\t\t// 1-22-04 updated the sampler so that when read",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 34261 - NPE in HtmlParser (allow for missing attributes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@498490 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 1ada125f96efa9ff044ed5d36e600d291c4cf6c6",
        "commit": "https://github.com/apache/jmeter/commit/13f0ef5813bcd4168daec80c946453a1b152f5f2",
        "parent": "https://github.com/apache/jmeter/commit/d556affcc13bfbd86ae0e7fe25acb647f861f107",
        "bug_id": "jmeter_140",
        "file": [
            {
                "sha": "24007b882e1fe73fd5eded9e6bdb06fdd41ca84c",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java",
                "blob_url": "https://github.com/apache/jmeter/blob/13f0ef5813bcd4168daec80c946453a1b152f5f2/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java",
                "raw_url": "https://github.com/apache/jmeter/raw/13f0ef5813bcd4168daec80c946453a1b152f5f2/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java?ref=13f0ef5813bcd4168daec80c946453a1b152f5f2",
                "patch": "@@ -143,7 +143,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection\n \t\t\t\t\tInputTag input = (InputTag) node;\n \t\t\t\t\t// we check the input tag type for image\n \t\t\t\t\tString strType = input.getAttribute(ATT_TYPE);\n-\t\t\t\t\tif (strType != null && strType.equalsIgnoreCase(ATT_IS_IMAGE)) {\n+\t\t\t\t\tif (ATT_IS_IMAGE.equalsIgnoreCase(strType)) {\n \t\t\t\t\t\t// then we need to download the binary\n \t\t\t\t\t\tbinUrlStr = input.getAttribute(ATT_SRC);\n \t\t\t\t\t}\n@@ -161,7 +161,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection\n \t\t\t\t\tbinUrlStr = tag.getAttribute(ATT_SRC);\n \t\t\t\t} else if (node instanceof LinkTagTag) {\n \t\t\t\t\tLinkTagTag script = (LinkTagTag) node;\n-\t\t\t\t\tif (script.getAttribute(ATT_REL).equalsIgnoreCase(STYLESHEET)) {\n+\t\t\t\t\tif (STYLESHEET.equalsIgnoreCase(script.getAttribute(ATT_REL))) {\n \t\t\t\t\t\tbinUrlStr = script.getAttribute(ATT_HREF);\n \t\t\t\t\t}\n \t\t\t\t} else if (node instanceof FrameTag) {",
                "deletions": 2
            },
            {
                "sha": "4553c905373c3faf0717895c9e62b119b42739cb",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/13f0ef5813bcd4168daec80c946453a1b152f5f2/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/13f0ef5813bcd4168daec80c946453a1b152f5f2/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=13f0ef5813bcd4168daec80c946453a1b152f5f2",
                "patch": "@@ -69,6 +69,7 @@ jmeterthread.reversePostProcessors=true\n <li>Bug 41277 - add Latency and Encoding to CSV output</li>\n <li>Bug 41414 - Mac OS X may add extra item to -jar classpath</li>\n <li>Fix NPE when saving thread counts in remote testing</li>\n+<li>Bug 34261 - NPE in HtmlParser (allow for missing attributes)</li>\n </ul>\n \n <h3>Version 2.2</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in active thread counts for remote tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@498477 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 29e99cae2037cd8b078e17825bfe5473393678b9",
        "commit": "https://github.com/apache/jmeter/commit/b71c9c12d1a3eeef312734893758b882c135d0b2",
        "parent": "https://github.com/apache/jmeter/commit/ae30024300ca9437acc40b1f60d4d6498e780dc3",
        "bug_id": "jmeter_141",
        "file": [
            {
                "sha": "4cf5778ac75b1c0b579f0b2a183392e2140a3272",
                "filename": "src/core/org/apache/jmeter/save/OldSaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b71c9c12d1a3eeef312734893758b882c135d0b2/src/core/org/apache/jmeter/save/OldSaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b71c9c12d1a3eeef312734893758b882c135d0b2/src/core/org/apache/jmeter/save/OldSaveService.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/OldSaveService.java?ref=b71c9c12d1a3eeef312734893758b882c135d0b2",
                "patch": "@@ -468,7 +468,13 @@ public static String resultToDelimitedString(SampleResult sample, String delimit\n         }\n     \n         if (saveConfig.saveThreadCounts()) {\n-            text.append(JMeterContextService.getContext().getThreadGroup().getNumberOfThreads());\n+        \torg.apache.jmeter.threads.ThreadGroup \n+        \tthreadGroup=JMeterContextService.getContext().getThreadGroup();\n+        \tint numThreads =0;\n+        \tif (threadGroup != null) { // can be null for remote testing\n+        \t    numThreads = threadGroup.getNumberOfThreads();\n+        \t}\n+            text.append(numThreads);\n             text.append(delimiter);\n             text.append(JMeterContextService.getNumberOfThreads());\n             text.append(delimiter);",
                "deletions": 1
            },
            {
                "sha": "bc2e4a8813a9d4536d2cef2ebe195d9f2b2a1c34",
                "filename": "src/core/org/apache/jmeter/save/converters/SampleResultConverter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b71c9c12d1a3eeef312734893758b882c135d0b2/src/core/org/apache/jmeter/save/converters/SampleResultConverter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b71c9c12d1a3eeef312734893758b882c135d0b2/src/core/org/apache/jmeter/save/converters/SampleResultConverter.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/converters/SampleResultConverter.java?ref=b71c9c12d1a3eeef312734893758b882c135d0b2",
                "patch": "@@ -252,8 +252,14 @@ protected void setAttributes(HierarchicalStreamWriter writer, MarshallingContext\n \t\tif (save.saveBytes())\n \t\t\twriter.addAttribute(ATT_BYTES, String.valueOf(res.getBytes()));\n         if (save.saveThreadCounts()){// These cannot be restored\n+        \torg.apache.jmeter.threads.ThreadGroup \n+        \tthreadGroup=JMeterContextService.getContext().getThreadGroup();\n+        \tint numThreads =0;\n+        \tif (threadGroup != null) { // can be null for remote testing\n+        \t    numThreads = threadGroup.getNumberOfThreads();\n+        \t}\n             writer.addAttribute(ATT_GRP_THRDS,\n-                    String.valueOf(JMeterContextService.getContext().getThreadGroup().getNumberOfThreads()));\n+                    String.valueOf(numThreads));\n             writer.addAttribute(ATT_ALL_THRDS,\n                     String.valueOf(JMeterContextService.getNumberOfThreads()));\n         }",
                "deletions": 1
            },
            {
                "sha": "903cdd013385daf3a6b26e26373e39b791600b63",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b71c9c12d1a3eeef312734893758b882c135d0b2/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b71c9c12d1a3eeef312734893758b882c135d0b2/xdocs/changes.xml",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=b71c9c12d1a3eeef312734893758b882c135d0b2",
                "patch": "@@ -29,7 +29,8 @@\n \n <h3>Version 2.2.1</h3>\n <h4>Known problems:</h4>\n-<p>As for 2.2 except as noted below.</p>\n+<p>Thread active counts are always zero in CSV and XML files when running remote tests.\n+</p>\n \n <h4>Incompatible changes:</h4>\n <p>\n@@ -67,6 +68,7 @@ jmeterthread.reversePostProcessors=true\n <li>Fix ClassCast Exception when using sampler that returns null, e..g TestAction</li>\n <li>Bug 41277 - add Latency and Encoding to CSV output</li>\n <li>Bug 41414 - Mac OS X may add extra item to -jar classpath</li>\n+<li>Fix NPE when saving thread counts in remote testing</li>\n </ul>\n \n <h3>Version 2.2</h3>",
                "deletions": 1
            },
            {
                "sha": "cc846a5199e09d44388bc82b770f292d63a2dd6f",
                "filename": "xdocs/usermanual/listeners.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/b71c9c12d1a3eeef312734893758b882c135d0b2/xdocs/usermanual/listeners.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/b71c9c12d1a3eeef312734893758b882c135d0b2/xdocs/usermanual/listeners.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/usermanual/listeners.xml?ref=b71c9c12d1a3eeef312734893758b882c135d0b2",
                "patch": "@@ -110,6 +110,8 @@ The order of appearance of columns is fixed, and is as follows:\n <li>failureMessage - if any</li>\n <li>bytes - number of bytes in the sample</li>\n <li>URL</li>\n+<li>latency - time to first response</li>\n+<li>encoding</li>\n </ul>\n <p>\n The format of the XML files is as follows:\n@@ -247,6 +249,10 @@ The sample attributes have the following meaning:\n <tr><td>ng</td><td>Number of active threads in this group</td></tr>\n <tr><td>na</td><td>Number of active threads for all thread groups</td></tr>\n </table>\n+<note>\n+The active thread counts are always zero for remote tests.\n+This is a restriction of the current implementation (2.2.1)\n+</note>\n <p>\n Versions 2.1 and 2.1.1 of JMeter saved the Response Code as \"rs\", but read it back expecting to find \"rc\".\n This has been corrected so that it is always saved as \"rc\"; either \"rc\" or \"rs\" can be read.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in Remote mode (transient field was not set up)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@453055 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 7b368e2a084fccf0aa587b75fe3e7179b79d582d",
        "commit": "https://github.com/apache/jmeter/commit/fae4f501b3731bb1c2270f4708d13b6a59deecac",
        "parent": "https://github.com/apache/jmeter/commit/88240f6f2d51d31ba531aa82e1681796de63ffc4",
        "bug_id": "jmeter_142",
        "file": [
            {
                "sha": "48f5fe8164cf91870ac9d88321169e188e686467",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/fae4f501b3731bb1c2270f4708d13b6a59deecac/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/fae4f501b3731bb1c2270f4708d13b6a59deecac/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=fae4f501b3731bb1c2270f4708d13b6a59deecac",
                "patch": "@@ -44,6 +44,7 @@\n <li>Bug 39861 - fix typo</li>\n <li>Bug 40562 - redirects no longer invoke RE post processors</li>\n <li>Bug 40451 - set label if not set by sampler</li>\n+<li>Fix NPE in CounterConfig.java in Remote mode</li>\n </ul>\n \n <h3>Version 2.2</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE in Remote mode (transient field was not set up)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@453054 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: cdcf4a4bf777d6064221fa447016a1f0028eb9e7",
        "commit": "https://github.com/apache/jmeter/commit/88240f6f2d51d31ba531aa82e1681796de63ffc4",
        "parent": "https://github.com/apache/jmeter/commit/bb9a99d66bc04f95799719b78ef36b73e38b711b",
        "bug_id": "jmeter_143",
        "file": [
            {
                "sha": "a43a7490846b5b5f748dc36b80f202d7b15309df",
                "filename": "src/components/org/apache/jmeter/modifiers/CounterConfig.java",
                "blob_url": "https://github.com/apache/jmeter/blob/88240f6f2d51d31ba531aa82e1681796de63ffc4/src/components/org/apache/jmeter/modifiers/CounterConfig.java",
                "raw_url": "https://github.com/apache/jmeter/raw/88240f6f2d51d31ba531aa82e1681796de63ffc4/src/components/org/apache/jmeter/modifiers/CounterConfig.java",
                "status": "modified",
                "changes": 25,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/modifiers/CounterConfig.java?ref=88240f6f2d51d31ba531aa82e1681796de63ffc4",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.jmeter.modifiers;\n \n+import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.text.DecimalFormat;\n \n@@ -51,12 +52,26 @@\n \tprivate long globalCounter = Long.MIN_VALUE;\n     \n     // Used for per-thread/user numbers\n-    transient private ThreadLocal perTheadNumber = new ThreadLocal() {\n-        protected synchronized Object initialValue() {\n-            return new Long(getStart());\n-        }\n-    };\n+    transient private ThreadLocal perTheadNumber;\n+\n+    private void init() {\n+        perTheadNumber = new ThreadLocal() {\n+            protected synchronized Object initialValue() {\n+                return new Long(getStart());\n+            }\n+        };\n+    }\n \n+    \n+    public CounterConfig() {\n+        super();\n+        init();\n+    }\n+\n+    private Object readResolve() throws ObjectStreamException{\n+        init();\n+        return this;\n+    }\n \t/**\n \t * @see LoopIterationListener#iterationStart(LoopIterationEvent)\n \t */",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Protect against NPE with empty filename\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@399906 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8f1772df3833c81e71300b29df2f58eba080536f",
        "commit": "https://github.com/apache/jmeter/commit/3790d83956c3786a216d3e025b907ba4b81018bb",
        "parent": "https://github.com/apache/jmeter/commit/f3132ba8df4c035df7cf977afb52ce477a29bd74",
        "bug_id": "jmeter_144",
        "file": [
            {
                "sha": "610af440fadd77f5b5a1a77547943eb937af4cbe",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3790d83956c3786a216d3e025b907ba4b81018bb/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=3790d83956c3786a216d3e025b907ba4b81018bb",
                "patch": "@@ -203,9 +203,10 @@ public void startGui(CLOption testFile) {\n \t\tComponentUtil.centerComponentInWindow(main, 80);\n \t\tmain.show();\n \t\tActionRouter.getInstance().actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));\n-\t\tif (testFile != null) {\n+        String arg; \n+\t\tif (testFile != null && (arg = testFile.getArgument()) != null) {\n \t\t\ttry {\n-\t\t\t\tFile f = new File(testFile.getArgument());\n+                File f = new File(arg);\n \t\t\t\tlog.info(\"Loading file: \" + f);\n \t\t\t\tFileInputStream reader = new FileInputStream(f);\n \t\t\t\tHashTree tree = SaveService.loadTree(reader);\n@@ -492,10 +493,14 @@ public void startNonGui(CLOption testFile, CLOption logFile, CLOption remoteStar\n \t\tif (testFile == null) {\n \t\t\tthrow new IllegalUserActionException();\n \t\t}\n-\t\tif (logFile == null) {\n-\t\t\tdriver.run(testFile.getArgument(), null, remoteStart != null);\n+\t\tString argument = testFile.getArgument();\n+        if (argument == null) {\n+            throw new IllegalUserActionException();\n+        }\n+        if (logFile == null) {\n+\t\t\tdriver.run(argument, null, remoteStart != null);\n \t\t} else {\n-\t\t\tdriver.run(testFile.getArgument(), logFile.getArgument(), remoteStart != null);\n+\t\t\tdriver.run(argument, logFile.getArgument(), remoteStart != null);\n \t\t}\n \t}\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE if no WSDL present; add NON-NLS markers\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@398205 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 529287aecff4a91e3279d7e326a40c9501c10df7",
        "commit": "https://github.com/apache/jmeter/commit/faf13536e39251be4d22312a6df3a961dc398d7a",
        "parent": "https://github.com/apache/jmeter/commit/a39f64ef5dd96e0fef521cc3f9e0e6b2362e41ab",
        "bug_id": "jmeter_145",
        "file": [
            {
                "sha": "6c68867f295ac2a2a8b929630e8f324a15324f2e",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/faf13536e39251be4d22312a6df3a961dc398d7a/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/faf13536e39251be4d22312a6df3a961dc398d7a/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java",
                "status": "modified",
                "changes": 103,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java?ref=faf13536e39251be4d22312a6df3a961dc398d7a",
                "patch": "@@ -1,6 +1,5 @@\n-// $Header$\n /*\n- * Copyright 2001-2004 The Apache Software Foundation.\n+ * Copyright 2003-2004,2006 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,107 +49,105 @@\n  * therefore the notes address those situations. <br>\n  * Created on: Jun 26, 2003\n  * \n- * @author Peter Lin\n- * @version $Id: WebServiceSamplerGui.java,v 1.18 2005/06/07 02:04:31 woolfel\n- *          Exp $\n+ * author Peter Lin\n  */\n public class WebServiceSamplerGui extends AbstractSamplerGui implements java.awt.event.ActionListener {\n \n-\tJLabeledTextField domain = new JLabeledTextField(JMeterUtils.getResString(\"web_server_domain\"));\n+\tprivate JLabeledTextField domain = new JLabeledTextField(JMeterUtils.getResString(\"web_server_domain\")); // $NON-NLS-1$\n \n-    JLabeledTextField protocol = new JLabeledTextField(JMeterUtils.getResString(\"protocol\"));\n+    private JLabeledTextField protocol = new JLabeledTextField(JMeterUtils.getResString(\"protocol\")); // $NON-NLS-1$\n \n-    JLabeledTextField port = new JLabeledTextField(JMeterUtils.getResString(\"web_server_port\"));\n+    private JLabeledTextField port = new JLabeledTextField(JMeterUtils.getResString(\"web_server_port\")); // $NON-NLS-1$\n \n-\tJLabeledTextField path = new JLabeledTextField(JMeterUtils.getResString(\"path\"));\n+    private JLabeledTextField path = new JLabeledTextField(JMeterUtils.getResString(\"path\")); // $NON-NLS-1$\n \n-\tJLabeledTextField soapAction = new JLabeledTextField(JMeterUtils.getResString(\"webservice_soap_action\"));\n+    private JLabeledTextField soapAction = new JLabeledTextField(JMeterUtils.getResString(\"webservice_soap_action\")); // $NON-NLS-1$\n \n-\tJLabeledTextArea soapXml = new JLabeledTextArea(JMeterUtils.getResString(\"soap_data_title\"), null);\n+    private JLabeledTextArea soapXml = new JLabeledTextArea(JMeterUtils.getResString(\"soap_data_title\"), null); // $NON-NLS-1$\n \n-\tJLabeledTextField wsdlField = new JLabeledTextField(JMeterUtils.getResString(\"wsdl_url\"));\n+    private JLabeledTextField wsdlField = new JLabeledTextField(JMeterUtils.getResString(\"wsdl_url\")); // $NON-NLS-1$\n \n-\tJButton wsdlButton = new JButton(JMeterUtils.getResString(\"load_wsdl\"));\n+    private JButton wsdlButton = new JButton(JMeterUtils.getResString(\"load_wsdl\")); // $NON-NLS-1$\n \n-\tJButton selectButton = new JButton(JMeterUtils.getResString(\"configure_wsdl\"));\n+    private JButton selectButton = new JButton(JMeterUtils.getResString(\"configure_wsdl\")); // $NON-NLS-1$\n \n-\tJLabeledChoice wsdlMethods = null;\n+    private JLabeledChoice wsdlMethods = null;\n \n-\tWSDLHelper HELPER = null;\n+    private WSDLHelper HELPER = null;\n \n-\tFilePanel soapXmlFile = new FilePanel(JMeterUtils.getResString(\"get_xml_from_file\"), \".xml\");\n+    private FilePanel soapXmlFile = new FilePanel(JMeterUtils.getResString(\"get_xml_from_file\"), \".xml\"); // $NON-NLS-1$\n \n-\tJLabeledTextField randomXmlFile = new JLabeledTextField(JMeterUtils.getResString(\"get_xml_from_random\"));\n+    private JLabeledTextField randomXmlFile = new JLabeledTextField(JMeterUtils.getResString(\"get_xml_from_random\")); // $NON-NLS-1$\n \n \t/**\n \t * We create several JLabel objects to display usage instructions in the\n \t * GUI. The reason there are multiple labels is to make sure it displays\n \t * correctly.\n \t */\n-\tJLabel wsdlMessage = new JLabel(JMeterUtils.getResString(\"get_xml_message\"));\n+    private JLabel wsdlMessage = new JLabel(JMeterUtils.getResString(\"get_xml_message\")); // $NON-NLS-1$\n \n-\tJLabel wsdlMessage2 = new JLabel(JMeterUtils.getResString(\"get_xml_message2\"));\n+    private JLabel wsdlMessage2 = new JLabel(JMeterUtils.getResString(\"get_xml_message2\")); // $NON-NLS-1$\n \n-\tJLabel wsdlMessage3 = new JLabel(JMeterUtils.getResString(\"get_xml_message3\"));\n+    private JLabel wsdlMessage3 = new JLabel(JMeterUtils.getResString(\"get_xml_message3\")); // $NON-NLS-1$\n \n-\tJLabel wsdlMessage4 = new JLabel(JMeterUtils.getResString(\"get_xml_message4\"));\n+    private JLabel wsdlMessage4 = new JLabel(JMeterUtils.getResString(\"get_xml_message4\")); // $NON-NLS-1$\n \n-\tJLabel wsdlMessage5 = new JLabel(JMeterUtils.getResString(\"get_xml_message5\"));\n+    private JLabel wsdlMessage5 = new JLabel(JMeterUtils.getResString(\"get_xml_message5\")); // $NON-NLS-1$\n \n \t/**\n \t * This is the font for the note.\n \t */\n-\tFont plainText = new Font(\"plain\", Font.PLAIN, 10);\n+    private Font plainText = new Font(\"plain\", Font.PLAIN, 10); // $NON-NLS-1$\n \n \t/**\n \t * checkbox for memory cache.\n \t */\n-\tJCheckBox memCache = new JCheckBox(JMeterUtils.getResString(\"memory_cache\"), true);\n+    private JCheckBox memCache = new JCheckBox(JMeterUtils.getResString(\"memory_cache\"), true); // $NON-NLS-1$\n \n \t/**\n \t * checkbox for reading the response\n \t */\n-\tJCheckBox readResponse = new JCheckBox(JMeterUtils.getResString(\"read_soap_response\"));\n+    private JCheckBox readResponse = new JCheckBox(JMeterUtils.getResString(\"read_soap_response\")); // $NON-NLS-1$\n \n \t/**\n \t * checkbox for use proxy\n \t */\n-\tJCheckBox useProxy = new JCheckBox(JMeterUtils.getResString(\"webservice_use_proxy\"));\n+    private JCheckBox useProxy = new JCheckBox(JMeterUtils.getResString(\"webservice_use_proxy\")); // $NON-NLS-1$\n \n \t/**\n \t * text field for the proxy host\n \t */\n-\tJLabeledTextField proxyHost = new JLabeledTextField(JMeterUtils.getResString(\"webservice_proxy_host\"));\n+    private JLabeledTextField proxyHost = new JLabeledTextField(JMeterUtils.getResString(\"webservice_proxy_host\")); // $NON-NLS-1$\n \n \t/**\n \t * text field for the proxy port\n \t */\n-\tJLabeledTextField proxyPort = new JLabeledTextField(JMeterUtils.getResString(\"webservice_proxy_port\"));\n+    private JLabeledTextField proxyPort = new JLabeledTextField(JMeterUtils.getResString(\"webservice_proxy_port\")); // $NON-NLS-1$\n \n \t/**\n-\t * Text note about read response and it's usage.\n+\t * Text note about read response and its usage.\n \t */\n-\tJLabel readMessage = new JLabel(JMeterUtils.getResString(\"read_response_note\"));\n+    private JLabel readMessage = new JLabel(JMeterUtils.getResString(\"read_response_note\")); // $NON-NLS-1$\n \n-\tJLabel readMessage2 = new JLabel(JMeterUtils.getResString(\"read_response_note2\"));\n+    private JLabel readMessage2 = new JLabel(JMeterUtils.getResString(\"read_response_note2\")); // $NON-NLS-1$\n \n-\tJLabel readMessage3 = new JLabel(JMeterUtils.getResString(\"read_response_note3\"));\n+    private JLabel readMessage3 = new JLabel(JMeterUtils.getResString(\"read_response_note3\")); // $NON-NLS-1$\n \n \t/**\n \t * Text note for proxy\n \t */\n-\tJLabel proxyMessage = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note\"));\n+    private JLabel proxyMessage = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note\")); // $NON-NLS-1$\n \n-\tJLabel proxyMessage2 = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note2\"));\n+    private JLabel proxyMessage2 = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note2\")); // $NON-NLS-1$\n \n-\tJLabel proxyMessage3 = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note3\"));\n+    private JLabel proxyMessage3 = new JLabel(JMeterUtils.getResString(\"webservice_proxy_note3\")); // $NON-NLS-1$\n \n \tpublic WebServiceSamplerGui() {\n \t\tinit();\n \t}\n \n \tpublic String getLabelResource() {\n-\t\treturn \"webservice_sampler_title\";\n+\t\treturn \"webservice_sampler_title\"; // $NON-NLS-1$\n \t}\n \n \t/**\n@@ -313,17 +310,19 @@ public void configure(TestElement el) {\n \t * will work, since that's how IIS works.\n \t */\n \tpublic void configureFromWSDL() {\n-\t\tif (HELPER.getBinding() != null) {\n-            this.protocol.setText(HELPER.getProtocol());\n-\t\t\tthis.domain.setText(HELPER.getBindingHost());\n-\t\t\tif (HELPER.getBindingPort() > 0) {\n-\t\t\t\tthis.port.setText(String.valueOf(HELPER.getBindingPort()));\n-\t\t\t} else {\n-\t\t\t\tthis.port.setText(\"80\");\n-\t\t\t}\n-\t\t\tthis.path.setText(HELPER.getBindingPath());\n-\t\t}\n-\t\tthis.soapAction.setText(HELPER.getSoapAction(this.wsdlMethods.getText()));\n+\t\tif (HELPER != null) {\n+            if(HELPER.getBinding() != null) {\n+                this.protocol.setText(HELPER.getProtocol());\n+    \t\t\tthis.domain.setText(HELPER.getBindingHost());\n+    \t\t\tif (HELPER.getBindingPort() > 0) {\n+    \t\t\t\tthis.port.setText(String.valueOf(HELPER.getBindingPort()));\n+    \t\t\t} else {\n+    \t\t\t\tthis.port.setText(\"80\"); // $NON-NLS-1$\n+    \t\t\t}\n+    \t\t\tthis.path.setText(HELPER.getBindingPath());\n+    \t\t}\n+    \t\tthis.soapAction.setText(HELPER.getSoapAction(this.wsdlMethods.getText()));\n+        }\n \t}\n \n \t/**\n@@ -346,7 +345,9 @@ public void configureFromWSDL() {\n \t\t\tHELPER.parse();\n \t\t\treturn HELPER.getWebMethods();\n \t\t} catch (Exception exception) {\n-\t\t\tJOptionPane.showConfirmDialog(this, JMeterUtils.getResString(\"wsdl_helper_error\"), \"Warning\",\n+\t\t\tJOptionPane.showConfirmDialog(this,\n+                    JMeterUtils.getResString(\"wsdl_helper_error\"), // $NON-NLS-1$\n+                    \"Warning\",\n \t\t\t\t\tJOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);\n \t\t\treturn null;\n \t\t}\n@@ -380,7 +381,9 @@ public void actionPerformed(ActionEvent event) {\n \t\t\t\t\twsdlMethods.repaint();\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tJOptionPane.showConfirmDialog(this, JMeterUtils.getResString(\"wsdl_url_error\"), \"Warning\",\n+\t\t\t\tJOptionPane.showConfirmDialog(this,\n+                        JMeterUtils.getResString(\"wsdl_url_error\"), // $NON-NLS-1$\n+                        \"Warning\",\n \t\t\t\t\t\tJOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);\n \t\t\t}\n \t\t}",
                "deletions": 50
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when writing JTL if threadName does not get set\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@387618 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5ff9aa620dc9f823735196e60da220fd367137bc",
        "commit": "https://github.com/apache/jmeter/commit/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
        "parent": "https://github.com/apache/jmeter/commit/dc62c0f93509335762dd6237d4da30bb78569c83",
        "bug_id": "jmeter_146",
        "file": [
            {
                "sha": "f35ec15f05698d2b08a2589e90fa4597e2036644",
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/bd4cdbe39a98e7d12bc5b7057035327f074c8bb2/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=bd4cdbe39a98e7d12bc5b7057035327f074c8bb2",
                "patch": "@@ -97,7 +97,7 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate String samplerData;\n \n-\tprivate String threadName;\n+\tprivate String threadName = \"\"; // Never return null\n \n \tprivate String responseMessage = \"\";\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE if running JavaScript on TestPlan element\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@348841 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 40fd5870da08c0972bf5193d45e69c784d9f0882",
        "commit": "https://github.com/apache/jmeter/commit/d01fcc2a2ed3e137ec785934e34114138698638c",
        "parent": "https://github.com/apache/jmeter/commit/316c38885682430dabcada5e5b974ee53caa7005",
        "bug_id": "jmeter_147",
        "file": [
            {
                "sha": "af9f917b27e279dd364fb1be526b448fc34e64d4",
                "filename": "src/functions/org/apache/jmeter/functions/JavaScript.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d01fcc2a2ed3e137ec785934e34114138698638c/src/functions/org/apache/jmeter/functions/JavaScript.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d01fcc2a2ed3e137ec785934e34114138698638c/src/functions/org/apache/jmeter/functions/JavaScript.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/JavaScript.java?ref=d01fcc2a2ed3e137ec785934e34114138698638c",
                "patch": "@@ -81,8 +81,9 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS\n \t\t\tObject result = cx.evaluateString(scope, script, \"<cmd>\", 1, null);\n \n \t\t\tresultStr = Context.toString(result);\n-\t\t\tif (varName != null)\n+\t\t\tif (varName != null && vars != null) {// vars can be null if run from TestPlan\n \t\t\t\tvars.put(varName, resultStr);\n+            }\n \n \t\t} catch (WrappedException e) {\n \t\t\tlog.error(\"Error processing Javascript\", e);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Tidy up Request Data output; fix NPE in HTTPSampler2\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@328218 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 3427593930a56237feca89a79488fc18d2a2d987",
        "commit": "https://github.com/apache/jmeter/commit/032fbe23f1fb71ca5aa6c8434877d167938051ab",
        "parent": "https://github.com/apache/jmeter/commit/2f8bfa7379e41fce984ebb6b1ea4410b023569d6",
        "bug_id": "jmeter_148",
        "file": [
            {
                "sha": "0ae8e66a4f660c698158b58342823cb0e6fb9ea5",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java",
                "status": "modified",
                "changes": 35,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java?ref=032fbe23f1fb71ca5aa6c8434877d167938051ab",
                "patch": "@@ -1,6 +1,5 @@\n-// $Header$\n /*\n- * Copyright 2003-2004 The Apache Software Foundation.\n+ * Copyright 2003-2005 The Apache Software Foundation.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,9 +49,11 @@ public HTTPSampleResult(long elapsed) {\n \t */\n \tpublic HTTPSampleResult(HTTPSampleResult res) {\n \t\tsuper(res);\n-\t\tsetHTTPMethod(res.getHTTPMethod());\n+\t\tmethod=res.method;\n \t\tsetURL(res.getURL());\n-\t\tsetCookies(res.getCookies());\n+\t\tcookies=res.cookies;\n+        queryString=res.queryString;\n+        redirectLocation=res.redirectLocation;\n \t}\n \n \tprivate String method;\n@@ -92,22 +93,26 @@ public boolean isRedirect() {\n \n \t/*\n \t * (non-Javadoc)\n+     * Overrides version in Sampler data to provide more details\n \t * \n \t * @see org.apache.jmeter.samplers.SampleResult#getSamplerData()\n \t */\n \tpublic String getSamplerData() {\n \t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(getHTTPMethod());\n+\t\tsb.append(method);\n \t\tURL u = super.getURL();\n \t\tif (u != null) {\n \t\t\tsb.append(' ');\n \t\t\tsb.append(u.toString());\n-\t\t\tif (\"POST\".equals(getHTTPMethod())) {\n-\t\t\t\tsb.append(getQueryString());\n+\t\t\tif (\"POST\".equals(method)) {\n+\t\t\t\tsb.append(queryString);\n \t\t\t}\n \t\t\tsb.append(\"\\n\");\n-\t\t\tsb.append(getRequestHeaders());\n-\t\t\tsb.append(getCookies());\n+            if (cookies.length()>0){\n+                sb.append(\"\\nCookie Data:\\n\");\n+    \t\t\tsb.append(cookies);\n+                sb.append(\"\\n\");\n+            }\n \t\t}\n \t\treturn sb.toString();\n \t}\n@@ -126,7 +131,11 @@ public String getCookies() {\n \t *            representing the cookies\n \t */\n \tpublic void setCookies(String string) {\n-\t\tcookies = string;\n+        if (string == null) {\n+            cookies=\"\";\n+        } else {\n+    \t\tcookies = string;\n+        }\n \t}\n \n \tprivate String queryString = \"\"; // never null\n@@ -147,7 +156,11 @@ public String getQueryString() {\n \t *            the query string\n \t */\n \tpublic void setQueryString(String string) {\n-\t\tqueryString = string;\n+        if (string == null ) {\n+            queryString=\"\";\n+        } else {\n+    \t\tqueryString = string;\n+        }\n \t}\n \n }",
                "deletions": 11
            },
            {
                "sha": "56d288e5965a09d5ec3be9cf1d311b4590281168",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "status": "modified",
                "changes": 32,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java?ref=032fbe23f1fb71ca5aa6c8434877d167938051ab",
                "patch": "@@ -151,29 +151,17 @@ protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResu\n \t\tconn.setRequestMethod(method);\n \t\tString hdrs = setConnectionHeaders(conn, u, getHeaderManager());\n \t\tString cookies = setConnectionCookie(conn, u, getCookieManager());\n-\t\tif (res != null) {\n-\t\t\tStringBuffer sb = new StringBuffer();\n-\t\t\tif (method.equals(POST)) {\n-\t\t\t\tString q = this.getQueryString();\n-\t\t\t\tsb.append(\"\\nQuery data:\\n\");\n-\t\t\t\tsb.append(q);\n-\t\t\t\tres.setQueryString(sb.toString());\n-\t\t\t}\n-\t\t\tif (cookies != null) {\n-\t\t\t\tStringBuffer temp = new StringBuffer(\"\\nCookie Data:\\n\");\n-\t\t\t\ttemp.append(cookies);\n-\t\t\t\ttemp.append('\\n');\n-\t\t\t\tres.setCookies(temp.toString());\n-\t\t\t\tsb.append(temp);\n-\t\t\t}\n-\t\t\tres.setSamplerData(sb.toString());\n-\t\t\t// TODO rather than stuff all the information in here,\n-\t\t\t// pick it up from the individual fields later\n \n-\t\t\tres.setURL(u);\n-\t\t\tres.setHTTPMethod(method);\n-\t\t\tres.setRequestHeaders(hdrs);\n-\t\t}\n+        if (res != null) {\n+            res.setURL(u);\n+            res.setHTTPMethod(method);\n+            res.setRequestHeaders(hdrs);\n+            res.setCookies(cookies);\n+            if (method.equals(POST)) {\n+                res.setQueryString(getQueryString());\n+            }\n+        }\n+\n \t\tsetConnectionAuthorization(conn, u, getAuthManager());\n \t\tif (method.equals(POST)) {\n \t\t\tsetPostHeaders(conn);",
                "deletions": 22
            },
            {
                "sha": "6f230e28417737c2671470853ca3705700548b2e",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "blob_url": "https://github.com/apache/jmeter/blob/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "raw_url": "https://github.com/apache/jmeter/raw/032fbe23f1fb71ca5aa6c8434877d167938051ab/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "status": "modified",
                "changes": 67,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java?ref=032fbe23f1fb71ca5aa6c8434877d167938051ab",
                "patch": "@@ -258,28 +258,13 @@ private HttpConnection setupConnection(URL u, String method, HTTPSampleResult re\n \t\t//System.out.println(\"setupConnection: cookies = \" + cookies);\n \n \t\tif (res != null) {\n-\t\t\tStringBuffer sb = new StringBuffer();\n-\t\t\tif (method.equals(POST)) {\n-\t\t\t\tString q = this.getQueryString();\n-\t\t\t\tres.setQueryString(q);\n-\t\t\t\tsb.append(\"Query data:\\n\");\n-\t\t\t\tsb.append(q);\n-\t\t\t\tsb.append('\\n');\n-\t\t\t}\n-\t\t\tif (cookies != null) {\n-\t\t\t\tres.setCookies(cookies);\n-\t\t\t\tsb.append(\"\\nCookie Data:\\n\");\n-\t\t\t\tsb.append(cookies);\n-\t\t\t\tsb.append('\\n');\n-\t\t\t}\n-\t\t\tres.setSamplerData(sb.toString());\n-\t\t\t// TODO rather than stuff all the information in here,\n-\t\t\t// pick it up from the individual fields later\n-\n-\t\t\tres.setURL(u);\n-\t\t\tres.setHTTPMethod(method);\n-\t\t\tres.setRequestHeaders(hdrs);\n-\t\t\tres.setQueryString(getQueryString());\n+            res.setURL(u);\n+            res.setHTTPMethod(method);\n+            res.setRequestHeaders(hdrs);\n+            res.setCookies(cookies);\n+            if (method.equals(POST)) {\n+                res.setQueryString(getQueryString());\n+            }\n \t\t}\n \n \t\tsetConnectionAuthorization(httpMethod, u, getAuthManager());\n@@ -355,24 +340,26 @@ private String setConnectionCookie(HttpMethod method, URL u, CookieManager cooki\n         // TODO recode to use HTTPClient matches methods or similar\n         \n \t\tString cookieHeader = \"\"; // $NON-NLS-1$\n-\t\tString host = \".\" + u.getHost(); // $NON-NLS-1$\n-\t\t\n-\t\tfor (int i = cookieManager.getCookies().size() - 1; i >= 0; i--) {\n-\t\t\tCookie cookie = (Cookie) cookieManager.getCookies().get(i).getObjectValue();\n-            long exp = cookie.getExpires();\n-            long now = System.currentTimeMillis() / 1000 ;\n-\t\t\tif (cookie == null)\n-\t\t\t\tcontinue;\n-\t\t\tif ( host.endsWith(cookie.getDomain())\n-                    && u.getFile().startsWith(cookie.getPath()) \n-                    && (exp == 0 || exp > now)) {\n-\t\t\t\torg.apache.commons.httpclient.Cookie newCookie\n-                = new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(),\n-\t\t\t\t     cookie.getValue(), cookie.getPath(), null, false);\n-\t\t\t\thttpState.addCookie(newCookie);\n-\t\t\t\tcookieHeader += cookie.getName() + \"=\" + cookie.getValue(); // $NON-NLS-1$\n-\t\t\t}\n-\t\t}\n+        if (cookieManager!=null){\n+    \t\tString host = \".\" + u.getHost(); // $NON-NLS-1$\n+    \t\t\n+    \t\tfor (int i = cookieManager.getCookies().size() - 1; i >= 0; i--) {\n+    \t\t\tCookie cookie = (Cookie) cookieManager.getCookies().get(i).getObjectValue();\n+                long exp = cookie.getExpires();\n+                long now = System.currentTimeMillis() / 1000 ;\n+    \t\t\tif (cookie == null)\n+    \t\t\t\tcontinue;\n+    \t\t\tif ( host.endsWith(cookie.getDomain())\n+                        && u.getFile().startsWith(cookie.getPath()) \n+                        && (exp == 0 || exp > now)) {\n+    \t\t\t\torg.apache.commons.httpclient.Cookie newCookie\n+                    = new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(),\n+    \t\t\t\t     cookie.getValue(), cookie.getPath(), null, false);\n+    \t\t\t\thttpState.addCookie(newCookie);\n+    \t\t\t\tcookieHeader += cookie.getName() + \"=\" + cookie.getValue(); // $NON-NLS-1$\n+    \t\t\t}\n+    \t\t}\n+        }\n \t\treturn cookieHeader;\n \t}\n ",
                "deletions": 40
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE in XStream - ensure dataType does not default to null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325825 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 0ffe310f266e52fa5a7fb8044faf391a18c1b34c",
        "commit": "https://github.com/apache/jmeter/commit/4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
        "parent": "https://github.com/apache/jmeter/commit/3bee981f62ce2378ff421de8f497500d84bca67b",
        "bug_id": "jmeter_149",
        "file": [
            {
                "sha": "6add4cf4705975675c42da85e53eba953ab68866",
                "filename": "src/core/org/apache/jmeter/samplers/SampleResult.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4582f7b46cf7877d40fe4ea9695bb5e686986cf3/src/core/org/apache/jmeter/samplers/SampleResult.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/samplers/SampleResult.java?ref=4582f7b46cf7877d40fe4ea9695bb5e686986cf3",
                "patch": "@@ -121,14 +121,15 @@ public SampleSaveConfiguration getSaveConfig() {\n \n \tprivate List subResults;\n \n-\tprivate String dataType;\n+\tprivate String dataType=\"\"; // Don't return null if not set\n \n \tprivate boolean success;\n \n \tprivate Set files;\n \n \tprivate String dataEncoding;// (is this really the character set?) e.g.\n \t\t\t\t\t\t\t\t// ISO-8895-1, UTF-8\n+\t// If null, then DEFAULT_ENCODING is returned by getDataEncoding()\n \n \tprivate long time = 0;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when no module is selected\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325815 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 914e6f4be6f80f22b1dc5b59201412389a259cad",
        "commit": "https://github.com/apache/jmeter/commit/5022b4cd73b94abad449023e01af1afedf3f5c8c",
        "parent": "https://github.com/apache/jmeter/commit/3e5e163f35f9cd5e82f548575a6f02337f9aef15",
        "bug_id": "jmeter_150",
        "file": [
            {
                "sha": "78f3cd4497827db3c4a2249678b0dfc29a2b7487",
                "filename": "src/components/org/apache/jmeter/control/ModuleController.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5022b4cd73b94abad449023e01af1afedf3f5c8c/src/components/org/apache/jmeter/control/ModuleController.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5022b4cd73b94abad449023e01af1afedf3f5c8c/src/components/org/apache/jmeter/control/ModuleController.java",
                "status": "modified",
                "changes": 16,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/ModuleController.java?ref=5022b4cd73b94abad449023e01af1afedf3f5c8c",
                "patch": "@@ -154,13 +154,15 @@ private void traverse(JMeterTreeNode node, List nodePath, int level) {\n \t *            The current tree under which the nodes will be added\n \t */\n \tpublic HashTree getReplacementSubTree() {\n-\t\tif (!selectedNode.isEnabled()) {\n-\t\t\tselectedNode = cloneTreeNode(selectedNode);\n-\t\t\tselectedNode.setEnabled(true);\n-\t\t}\n-\t\tHashTree tree = new ListedHashTree();\n-\t\ttree.add(selectedNode);\n-\t\tcreateSubTree(tree, selectedNode);\n+        HashTree tree = new ListedHashTree();\n+        if (selectedNode != null) {\n+    \t\tif (!selectedNode.isEnabled()) {\n+    \t\t\tselectedNode = cloneTreeNode(selectedNode);\n+    \t\t\tselectedNode.setEnabled(true);\n+    \t\t}\n+    \t\ttree.add(selectedNode);\n+    \t\tcreateSubTree(tree, selectedNode);\n+        }\n \t\treturn tree;\n \t}\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "now the sampler handles constructor correctly, using isAccessible was wrong and results\nin NPE.\npeter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325731 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 950b7f572c1c6b3165ab354f1288525a76d2f6cd",
        "commit": "https://github.com/apache/jmeter/commit/4005f77943ec7644b3f5669b7c369977dd20ca16",
        "parent": "https://github.com/apache/jmeter/commit/d524cc58b61955fa75aabe25ba2863caa111c5c6",
        "bug_id": "jmeter_151",
        "file": [
            {
                "sha": "f0856f1d14ffc147977e2ce10e358968cd963823",
                "filename": "src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4005f77943ec7644b3f5669b7c369977dd20ca16/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4005f77943ec7644b3f5669b7c369977dd20ca16/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java?ref=4005f77943ec7644b3f5669b7c369977dd20ca16",
                "patch": "@@ -27,6 +27,7 @@\n import javax.swing.JCheckBox;\n import javax.swing.JComboBox;\n import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n import javax.swing.JPanel;\n import javax.swing.event.ChangeEvent;\n import javax.swing.event.ChangeListener;\n@@ -289,6 +290,12 @@ public void instantiateClass(){\n         }\n     }\n \n+    public void showErrorDialog() {\n+        JOptionPane.showConfirmDialog(this, \n+                JMeterUtils.getResString(\"junit_constructor_error\"), \"Warning\",\n+                JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);\n+    }\n+    \n     public void configureMethodCombo(){\n         if (TESTCLASS != null) {\n             clearMethodCombo();",
                "deletions": 0
            },
            {
                "sha": "4a9d4ef8b775f38016481e7b00b31685bb5cd177",
                "filename": "src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4005f77943ec7644b3f5669b7c369977dd20ca16/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4005f77943ec7644b3f5669b7c369977dd20ca16/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "status": "modified",
                "changes": 17,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java?ref=4005f77943ec7644b3f5669b7c369977dd20ca16",
                "patch": "@@ -390,6 +390,7 @@ public static Object getClassInstance(String className, String label){\n         Object testclass = null;\n         if (className != null){\n             Constructor con = null;\n+            Constructor strCon = null;\n             Class theclazz = null;\n             Object[] params = null;\n             try\n@@ -407,16 +408,15 @@ public static Object getClassInstance(String className, String label){\n                 // constructor. if it is doesn't we look for\n                 // empty constructor.\n                 try {\n-                    con = theclazz.getDeclaredConstructor(\n+                    strCon = theclazz.getDeclaredConstructor(\n                             new Class[] {String.class});\n                     // we have to check and make sure the constructor is\n                     // accessible. if we didn't it would throw an exception\n                     // and cause a NPE.\n-                    if (con.isAccessible()) {\n-                        params = new Object[]{label};\n-                    } else {\n-                        con = null;\n+                    if (label == null || label.length() == 0) {\n+                        label = className;\n                     }\n+                    params = new Object[]{label};\n                 } catch (NoSuchMethodException e) {\n                     log.info(\"String constructor:: \" + e.getMessage());\n                 }\n@@ -431,7 +431,12 @@ public static Object getClassInstance(String className, String label){\n                     }\n                 }\n                 try {\n-                    if (con != null){\n+                    // if the string constructor is not null, we use it.\n+                    // if the string constructor is null, we use the empty\n+                    // constructor to get a new instance\n+                    if (strCon != null) {\n+                        testclass = (TestCase)strCon.newInstance(params);\n+                    } else if (con != null){\n                         testclass = (TestCase)con.newInstance(params);\n                     }\n                 } catch (InvocationTargetException e) {",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Set Sample label from Test Element name\nFix some NPEs when sampler data is incomplete\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@325375 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: b95578c7d9427c71dd9522244e1c4539d7d85588",
        "commit": "https://github.com/apache/jmeter/commit/b6871056f700456f9e6612b6ef4672aabeb84f64",
        "parent": "https://github.com/apache/jmeter/commit/85f3525963c4f844c12d284f721364ce878eaeee",
        "bug_id": "jmeter_152",
        "file": [
            {
                "sha": "adc630218e8950524b59791013ac855deebace21",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/b6871056f700456f9e6612b6ef4672aabeb84f64/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/b6871056f700456f9e6612b6ef4672aabeb84f64/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java?ref=b6871056f700456f9e6612b6ef4672aabeb84f64",
                "patch": "@@ -379,7 +379,9 @@ public void checkProxy(){\n         }\n         else\n         {\n-            return openDocument(null).getDocumentElement();\n+        \tDocument doc = openDocument(null);\n+        \tif (doc == null) return null;\n+            return doc.getDocumentElement();\n         }\n     }\n \n@@ -448,12 +450,13 @@ public SampleResult sample() {\n \t\tSampleResult RESULT = new SampleResult();\n         try\n         {\n+            RESULT.setURL(this.getUrl());\n+            RESULT.setSampleLabel(getName());\n \t\t\torg.w3c.dom.Element rdoc = createDocument();\n+\t\t\tif (rdoc == null) throw new SOAPException(\"Could not create document\",null);\n             Envelope msgEnv = Envelope.unmarshall(rdoc);\n             // create a new message\n             Message msg = new Message();\n-            RESULT.setURL(this.getUrl());\n-            RESULT.setSampleLabel(this.getUrl().toString());\n             RESULT.sampleStart();\n \t\t\tSOAPHTTPConnection spconn = null;\n \t\t\t// if a blank HeaderManager exists, try to\n@@ -574,7 +577,7 @@ public SampleResult sample() {\n             // response code\n         }\n         catch (SOAPException exception){\n-            log.debug(exception.getMessage());\n+            log.warn(exception.getMessage());\n             RESULT.setSuccessful(false);\n         }\n         catch (MalformedURLException exception){",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE and ensure Reader is closed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324405 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5e089db16214c7a9f1c31b85810c84a0a7fac76d",
        "commit": "https://github.com/apache/jmeter/commit/565ebacb90b426f886af0bf0840959b2f147df4e",
        "parent": "https://github.com/apache/jmeter/commit/43a9dcbc1c8980c77d5b75d9ca42b4cb4d0ba5c1",
        "bug_id": "jmeter_153",
        "file": [
            {
                "sha": "b3819f3816b3240ea4fb0e3905ea02597ca49a54",
                "filename": "src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "blob_url": "https://github.com/apache/jmeter/blob/565ebacb90b426f886af0bf0840959b2f147df4e/src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "raw_url": "https://github.com/apache/jmeter/raw/565ebacb90b426f886af0bf0840959b2f147df4e/src/core/org/apache/jmeter/reporters/ResultCollector.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/ResultCollector.java?ref=565ebacb90b426f886af0bf0840959b2f147df4e",
                "patch": "@@ -42,7 +42,6 @@\n import org.apache.avalon.framework.configuration.DefaultConfigurationSerializer;\n import org.apache.jmeter.engine.event.LoopIterationEvent;\n import org.apache.jmeter.engine.util.NoThreadClone;\n-import org.apache.jmeter.junit.JMeterTestCase;\n import org.apache.jmeter.samplers.Clearable;\n import org.apache.jmeter.samplers.Remoteable;\n import org.apache.jmeter.samplers.SampleEvent;\n@@ -57,9 +56,7 @@\n \n \n /**\n- * @author Michael Stover\n- * @author <a href=\"mailto:kcassell&#X0040;apache.org\">Keith Cassell</a>\n- * @version $Id$\n+ * @version $Revision$ on $Date$\n  */\n public class ResultCollector\n     extends AbstractListenerElement\n@@ -174,14 +171,15 @@ public void loadExistingFile()\n         if (new File(getFilename()).exists())\n         {\n             clearVisualizer();\n+            BufferedReader dataReader = null;\n             try\n             {\n                 Configuration savedSamples = getConfiguration(getFilename());\n                 readSamples(savedSamples);\n             }\n             catch(SAXException e)\n             {\n-                BufferedReader dataReader = new BufferedReader(new FileReader(getFilename()));\n+                dataReader = new BufferedReader(new FileReader(getFilename()));\n                 String line;\n                 while((line = dataReader.readLine()) != null)\n                 {\n@@ -192,6 +190,10 @@ public void loadExistingFile()\n             {\n                 log.error(\"\", e);\n             }\n+            finally\n+\t\t\t{\n+            \tif (dataReader != null) dataReader.close();\n+            }\n         }\n         //inLoading = false;\n     }\n@@ -294,7 +296,7 @@ private static boolean trimLastLine(String filename)\n         } catch (IOException e) {\n         \tlog.warn(\"Error trying to find XML terminator \"+e.toString());\n     \t\ttry {\n-\t\t\t\traf.close();\n+\t\t\t\tif (raf != null) raf.close();\n \t\t\t} catch (IOException e1) {}\n \t\t\treturn false;\n \t\t}",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix possible NPE and failure to close file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324318 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 84218b52587917a333c7402270c825928b103bae",
        "commit": "https://github.com/apache/jmeter/commit/5a11e552215dc7cc68d0b2a3682cc429df656447",
        "parent": "https://github.com/apache/jmeter/commit/2975406ff22ec824be29d9f679ede7eb62c11f6b",
        "bug_id": "jmeter_154",
        "file": [
            {
                "sha": "a5bd4077eb185e41f24c92f174bfbfbba72d68e8",
                "filename": "src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5a11e552215dc7cc68d0b2a3682cc429df656447/src/functions/org/apache/jmeter/functions/FileRowColContainer.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/functions/org/apache/jmeter/functions/FileRowColContainer.java?ref=5a11e552215dc7cc68d0b2a3682cc429df656447",
                "patch": "@@ -109,9 +109,12 @@ private void load()\n         {\n         \tfileData = null;\n \t\t\tlog.warn(e.toString());\n-\t\t\tmyBread.close();\n             throw e;\n         }\n+        finally\n+        {\n+\t\t\tif (myBread != null) myBread.close();\n+        }\n \t}\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Add hashCode() to agree with equals() fix possible NPE on exception path\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324317 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: afbe90b82b94f4ffa97936f86eabedc5da76ea39",
        "commit": "https://github.com/apache/jmeter/commit/2975406ff22ec824be29d9f679ede7eb62c11f6b",
        "parent": "https://github.com/apache/jmeter/commit/ed6e4ca39d6210774dc1b64a22cdd0c8b6abe617",
        "bug_id": "jmeter_155",
        "file": [
            {
                "sha": "df5437e7536c9af2c428adbea28a9320bcf3e987",
                "filename": "src/core/org/apache/jmeter/testelement/AbstractTestElement.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2975406ff22ec824be29d9f679ede7eb62c11f6b/src/core/org/apache/jmeter/testelement/AbstractTestElement.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2975406ff22ec824be29d9f679ede7eb62c11f6b/src/core/org/apache/jmeter/testelement/AbstractTestElement.java",
                "status": "modified",
                "changes": 20,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/AbstractTestElement.java?ref=2975406ff22ec824be29d9f679ede7eb62c11f6b",
                "patch": "@@ -59,16 +59,16 @@ public Object clone()\n         try\n         {\n             clonedElement = (TestElement) this.getClass().newInstance();\n+\n+\t\t\tPropertyIterator iter = propertyIterator();\n+\t\t\twhile (iter.hasNext())\n+\t\t\t{\n+\t\t\t\tclonedElement.setProperty((JMeterProperty) iter.next().clone());\n+\t\t\t}\n+\t\t\tclonedElement.setRunningVersion(runningVersion);\n         }\n         catch (Exception e)\n         {}\n-\n-        PropertyIterator iter = propertyIterator();\n-        while (iter.hasNext())\n-        {\n-            clonedElement.setProperty((JMeterProperty) iter.next().clone());\n-        }\n-        clonedElement.setRunningVersion(runningVersion);\n         return clonedElement;\n     }\n \n@@ -94,6 +94,12 @@ public boolean equals(Object o) //TODO: probably ought to use hashCode() from Ma\n         }\n     }\n \n+    // Ensure equals agrees with hash\n+    public int hashCode()\n+    {\n+    \treturn propMap.hashCode();\n+    \t\n+    }\n     public void addTestElement(TestElement el)\n     {\n         mergeIn(el);",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when a TestBean has no icon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324252 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: cced1c584685dcfa478e6da16224b9485520dc45",
        "commit": "https://github.com/apache/jmeter/commit/a1da2f012aee349fa6ba22c97b777733c049dc99",
        "parent": "https://github.com/apache/jmeter/commit/abc7cae03db679b530f2e2a0789f5468ed534051",
        "bug_id": "jmeter_156",
        "file": [
            {
                "sha": "e5b712be30d03c2923c4e115ef49c766cb6acef1",
                "filename": "src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a1da2f012aee349fa6ba22c97b777733c049dc99/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a1da2f012aee349fa6ba22c97b777733c049dc99/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java?ref=a1da2f012aee349fa6ba22c97b777733c049dc99",
                "patch": "@@ -54,6 +54,7 @@\n  */\n package org.apache.jmeter.gui.tree;\n \n+import java.awt.Image;\n import java.beans.BeanInfo;\n import java.beans.IntrospectionException;\n import java.beans.Introspector;\n@@ -121,9 +122,11 @@ public ImageIcon getIcon()\n             {\n                 try\n                 {\n-                    return new ImageIcon(Introspector.getBeanInfo(\n+                    Image img= Introspector.getBeanInfo(\n                         createTestElement().getClass())\n-                            .getIcon(BeanInfo.ICON_COLOR_16x16));\n+                            .getIcon(BeanInfo.ICON_COLOR_16x16);\n+                    if (img == null) return null;\n+                    return new ImageIcon(img);\n                 }\n                 catch (IntrospectionException e1)\n                 {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE in disconnect, which would hide the real source\nof any problem occured before connection establishment.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324212 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c68ee79b35015ef8e374ab05d25c7f49541edeb3",
        "commit": "https://github.com/apache/jmeter/commit/11fe66ec2c58415d37412db335a37d141d462cf5",
        "parent": "https://github.com/apache/jmeter/commit/5fca3ab63ce2a4cd7f5ef5416006a4fbd35e38a6",
        "bug_id": "jmeter_157",
        "file": [
            {
                "sha": "46505190dabada788afad7a8f0140fb6837ddaa9",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/11fe66ec2c58415d37412db335a37d141d462cf5/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/11fe66ec2c58415d37412db335a37d141d462cf5/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java?ref=11fe66ec2c58415d37412db335a37d141d462cf5",
                "patch": "@@ -1369,12 +1369,15 @@ private HTTPSampleResult downloadPageResources(\n \n     protected void disconnect(HttpURLConnection conn)\n     {\n-        String connection= conn.getHeaderField(\"Connection\");\n-        String protocol= conn.getHeaderField(0);\n-        if ((connection == null && (protocol == null || !protocol.startsWith(\"HTTP/1.1\")))\n-            || (connection != null && connection.equalsIgnoreCase(\"close\")))\n+        if (conn != null)\n         {\n-            conn.disconnect();\n+            String connection= conn.getHeaderField(\"Connection\");\n+            String protocol= conn.getHeaderField(0);\n+            if ((connection == null && (protocol == null || !protocol.startsWith(\"HTTP/1.1\")))\n+                || (connection != null && connection.equalsIgnoreCase(\"close\")))\n+            {\n+                conn.disconnect();\n+            }\n         }\n     }\n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Prevent possible NPE (from the testbeans branch, but unrelated).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324061 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: d45a4975fa6a4a90692e2079cfb4700150cf38c0",
        "commit": "https://github.com/apache/jmeter/commit/3db956dda8624c7f7e9b7993b822697063a561d0",
        "parent": "https://github.com/apache/jmeter/commit/0cfc9b7a559ba82b26ea8d22c4970fe5351ff127",
        "bug_id": "jmeter_158",
        "file": [
            {
                "sha": "c7c90d5ebce292ce8322f5bf51976cddadf3a3f0",
                "filename": "src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3db956dda8624c7f7e9b7993b822697063a561d0/src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3db956dda8624c7f7e9b7993b822697063a561d0/src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java?ref=3db956dda8624c7f7e9b7993b822697063a561d0",
                "patch": "@@ -152,7 +152,10 @@ public void setEnabled(boolean e)\n      */\n     public String getName()\n     {\n-        return getNamePanel().getName();\n+    \tif (getNamePanel() != null) {\n+\t\t\treturn getNamePanel().getName();\n+    \t}\n+    \telse return \"\";\n     }\n \n     /**",
                "deletions": 1
            },
            {
                "sha": "20ac6e0a8ef387cf19350ce421b606684a5fcbb3",
                "filename": "src/core/org/apache/jmeter/gui/NamePanel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3db956dda8624c7f7e9b7993b822697063a561d0/src/core/org/apache/jmeter/gui/NamePanel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3db956dda8624c7f7e9b7993b822697063a561d0/src/core/org/apache/jmeter/gui/NamePanel.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/NamePanel.java?ref=3db956dda8624c7f7e9b7993b822697063a561d0",
                "patch": "@@ -142,7 +142,8 @@ public void clear()\n      */\n     public String getName()\n     {\n-        return nameField.getText();\n+    \tif (nameField != null) return nameField.getText();\n+    \telse return \"\";\n     }\n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Avoid NPE when HTTP connection is rejected.\nSomewhat improve error reporting.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323834 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 368ea9bc48d36de8ae037e20ef44c92ec3c316f7",
        "commit": "https://github.com/apache/jmeter/commit/aa19bfef63b1c313e6df624840bec79c17aed1b9",
        "parent": "https://github.com/apache/jmeter/commit/d8e1d093e6a44361e2df4f16c78c6489a6223ea1",
        "bug_id": "jmeter_159",
        "file": [
            {
                "sha": "bace3d0859cebdcc4050e50ee77c3062ad3d2162",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/aa19bfef63b1c313e6df624840bec79c17aed1b9/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/aa19bfef63b1c313e6df624840bec79c17aed1b9/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java",
                "status": "modified",
                "changes": 25,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java?ref=aa19bfef63b1c313e6df624840bec79c17aed1b9",
                "patch": "@@ -507,7 +507,7 @@ public SampleResult sample()\n         }\n         catch (MalformedURLException e)\n         {\n-            return errorResult(e, 0);\n+            return errorResult(e, getName(), 0);\n         }\n     }\n \n@@ -516,12 +516,15 @@ public SampleResult sample()\n      * during sampling, and how long it took to detect the error.\n      * \n      * @param e Exception representing the error.\n+     * @param data a piece of data associated to the error (e.g. URL)\n      * @param time time spent detecting the error (0 for client-only issues)\n      * @return a sampling result useful to inform the user about the exception.\n      */\n-    private HTTPSampleResult errorResult(Throwable e, long time)\n+    private HTTPSampleResult errorResult(Throwable e, String data, long time)\n     {\n         HTTPSampleResult res= new HTTPSampleResult();\n+        res.setSampleLabel(\"Error\");\n+        res.setSamplerData(data);\n         res.setDataType(HTTPSampleResult.TEXT);\n         res.setResponseData(e.toString().getBytes());\n         res.setResponseCode(NON_HTTP_RESPONSE_CODE);\n@@ -1054,7 +1057,6 @@ private HTTPSampleResult sample(\n                 catch (IOException e)\n                 {\n                     log.debug(\"Connection failed, giving up\");\n-                    conn.disconnect();\n                     throw e;\n                 }\n             }\n@@ -1133,6 +1135,7 @@ private HTTPSampleResult sample(\n                         res.addSubResult(\n                             errorResult(\n                                 new Exception(\"Maximum frame/iframe nesting depth exceeded.\"),\n+                                null,\n                                 0));\n                     }\n                     else\n@@ -1152,13 +1155,9 @@ private HTTPSampleResult sample(\n             log.debug(\"End : sample\");\n             return res;\n         }\n-        catch (MalformedURLException e)\n-        {\n-            return errorResult(e, System.currentTimeMillis() - t0);\n-        }\n         catch (IOException e)\n         {\n-            return errorResult(e, System.currentTimeMillis() - t0);\n+            return errorResult(e, url.toString(), System.currentTimeMillis() - t0);\n         }\n         finally\n         {\n@@ -1204,7 +1203,7 @@ private HTTPSampleResult followRedirects(\n             }\n             catch (MalformedURLException e)\n             {\n-                lastRes= errorResult(e, 0);\n+                lastRes= errorResult(e, location, 0);\n             }\n             totalRes.addSubResult(lastRes);\n             totalRes.setTime(totalRes.getTime() + lastRes.getTime());\n@@ -1219,6 +1218,7 @@ private HTTPSampleResult followRedirects(\n             lastRes=\n                 errorResult(\n                     new IOException(\"Maximum number of redirects exceeded.\"),\n+                    null,\n                     0);\n             totalRes.addSubResult(lastRes);\n         }\n@@ -1280,7 +1280,7 @@ private HTTPSampleResult downloadPageResources(\n         catch (HTMLParseException e)\n         {\n             // Don't break the world just because this failed:\n-            res.addSubResult(errorResult(e, 0));\n+            res.addSubResult(errorResult(e, null, 0));\n             res.setSuccessful(false);\n         }\n \n@@ -1313,6 +1313,7 @@ private HTTPSampleResult downloadPageResources(\n                     res.addSubResult(\n                         errorResult(\n                             new Exception(binURL + \" is not a correct URI\"),\n+                            null,\n                             0));\n                     res.setSuccessful(false);\n                     continue;\n@@ -1325,8 +1326,8 @@ private HTTPSampleResult downloadPageResources(\n     protected void disconnect(HttpURLConnection conn)\n     {\n         String connection= conn.getHeaderField(\"Connection\");\n-        boolean http11= conn.getHeaderField(0).startsWith(\"HTTP/1.1\");\n-        if ((connection == null && !http11)\n+        String protocol= conn.getHeaderField(0);\n+        if ((connection == null && (protocol == null || !protocol.startsWith(\"HTTP/1.1\")))\n             || (connection != null && connection.equalsIgnoreCase(\"close\")))\n         {\n             conn.disconnect();",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Report missing or inaccessible lib and lib/ext directories instead of crashing with NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323701 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 5fa47a62330e941a8f23a095cbc386da241c3a39",
        "commit": "https://github.com/apache/jmeter/commit/3a6eb9e681b989fc4b59c481cc19d4ce7ab9bd2a",
        "parent": "https://github.com/apache/jmeter/commit/245538ac8264b95d5059015352ce7f5f4ec147eb",
        "bug_id": "jmeter_160",
        "file": [
            {
                "sha": "7731ba3de1c284640ed69817591930d12df6d86b",
                "filename": "src/core/org/apache/jmeter/NewDriver.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3a6eb9e681b989fc4b59c481cc19d4ce7ab9bd2a/src/core/org/apache/jmeter/NewDriver.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3a6eb9e681b989fc4b59c481cc19d4ce7ab9bd2a/src/core/org/apache/jmeter/NewDriver.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/NewDriver.java?ref=3a6eb9e681b989fc4b59c481cc19d4ce7ab9bd2a",
                "patch": "@@ -121,6 +121,10 @@ public boolean accept(File dir, String name)\n                     return name.endsWith(\".jar\");\n                 }\n             });\n+            if (libJars == null){\n+            \tnew Throwable(\"Could not access \"+libDirs[a]).printStackTrace();\n+            \tcontinue;\n+            }\n             for (int i = 0; i < libJars.length; i++)\n             {\n                 try",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Ensure null responseData does not cause NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323463 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: a6aaa882cd5a13c0458fb381c4e1e9210b57af5a",
        "commit": "https://github.com/apache/jmeter/commit/5838efe389c3bab0de0c2d635aac394bc4f52545",
        "parent": "https://github.com/apache/jmeter/commit/7a9cca4b0eedcf9f089c13ca8f9e9188cae7f463",
        "bug_id": "jmeter_161",
        "file": [
            {
                "sha": "c4d054a98b78172720ab231e7e79b4eaaadd95e6",
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "blob_url": "https://github.com/apache/jmeter/blob/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "raw_url": "https://github.com/apache/jmeter/raw/5838efe389c3bab0de0c2d635aac394bc4f52545/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=5838efe389c3bab0de0c2d635aac394bc4f52545",
                "patch": "@@ -201,8 +201,7 @@ public AssertionResult getResult(SampleResult response)\n       {\n          result = new AssertionResult();\n          result.setError(true);\n-         result.setFailureMessage(\n-            new String((byte[]) response.getResponseData()));\n+         result.setFailureMessage(response.responseDatatoString());\n          return result;\n       }\n       result = evaluateResponse(response);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Made PatternCache static and used READ_ONLY patterns - this fixes a NPE that occurs in remote sessions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@322961 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 91e6618d82d1004105217598cb56b40e38abdc2c",
        "commit": "https://github.com/apache/jmeter/commit/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
        "parent": "https://github.com/apache/jmeter/commit/48d04fab42006267ae4faea80ffad25c2ea550b1",
        "bug_id": "jmeter_162",
        "file": [
            {
                "sha": "1ddbddb5210fc9ae0e79821dc397fd854a40ca9c",
                "filename": "src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "blob_url": "https://github.com/apache/jmeter/blob/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "raw_url": "https://github.com/apache/jmeter/raw/89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e/src/components/org/apache/jmeter/assertions/ResponseAssertion.java",
                "status": "modified",
                "changes": 15,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/assertions/ResponseAssertion.java?ref=89e25ec7278e5a49dd9a2cb6b0c8a6e2866a7d4e",
                "patch": "@@ -57,7 +57,6 @@\n import java.util.*;\n import java.io.Serializable;\n import org.apache.jmeter.samplers.SampleResult;\n-import org.apache.jmeter.config.ConfigElement;\n import org.apache.jmeter.testelement.AbstractTestElement;\n \n import org.apache.oro.text.PatternCacheLRU;\n@@ -92,15 +91,15 @@\n \tpublic final static int CONTAINS = 1 << 1;\n \tpublic final static int NOT = 1 << 2;\n \n-\tprivate transient static ThreadLocal matcher =\n+\tprivate static ThreadLocal matcher =\n \t    new ThreadLocal()\n \t    {\n-\t\tprotected Object initialValue()\n-\t\t{\n-\t\t    return new Perl5Matcher();\n-\t\t}\n+\t\t\tprotected Object initialValue()\n+\t\t\t{\n+\t\t\t    return new Perl5Matcher();\n+\t\t\t}\n \t    };\n-\tprivate transient PatternCacheLRU patternCache =\n+\tprivate static PatternCacheLRU patternCache =\n \t\tnew PatternCacheLRU(1000, new Perl5Compiler());\n \n \t/************************************************************\n@@ -314,7 +313,7 @@ private AssertionResult evaluateResponse(SampleResult response)\n \t    while (iter.hasNext())\n \t    {\n \t\tString stringPattern= (String) iter.next();\n-\t\tPattern pattern = patternCache.getPattern(stringPattern);\n+\t\tPattern pattern = patternCache.getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);\n \t\tboolean found;\n \t\tif ((CONTAINS & getTestType()) > 0)\n \t\t{",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Replace ArgumentNullException with NPE by using Validate.notNull instead of\nchecking for null by hand. Document the need for non null parameter.\nUse Validate.validState for state checking.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721408 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 9265deecd9ae17b216b4e6cb198651665fa76aa0",
        "commit": "https://github.com/apache/jmeter/commit/e2261eb92f79e4a15c01d9a221907c18d64d8e5a",
        "parent": "https://github.com/apache/jmeter/commit/277e2755b8d186e35f63eb5582c45f23fed2263a",
        "bug_id": "jmeter_163",
        "file": [
            {
                "sha": "f38b7dc06906c7a02e76e8d4d92bd09b53fdf93a",
                "filename": "src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java",
                "blob_url": "https://github.com/apache/jmeter/blob/e2261eb92f79e4a15c01d9a221907c18d64d8e5a/src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java",
                "raw_url": "https://github.com/apache/jmeter/raw/e2261eb92f79e4a15c01d9a221907c18d64d8e5a/src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java",
                "status": "modified",
                "changes": 24,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java?ref=e2261eb92f79e4a15c01d9a221907c18d64d8e5a",
                "patch": "@@ -24,7 +24,7 @@\n import java.util.regex.Pattern;\n import java.util.regex.PatternSyntaxException;\n \n-import org.apache.jmeter.report.core.ArgumentNullException;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.CsvSampleReader;\n import org.apache.jmeter.report.core.Sample;\n import org.apache.jmeter.report.core.SampleException;\n@@ -83,16 +83,12 @@\n      * separator.\n      * \n      * @param inputFile\n-     *            The input sample file (CSV file)\n+     *            The input sample file (CSV file) (must not be {@code null})\n      * @param separator\n      *            The character separator to be used for delimiting samples\n      *            columns\n      */\n     public CsvFileSampleSource(final File inputFile, final char separator) {\n-        if (inputFile == null) {\n-            throw new ArgumentNullException(\"inputFile\");\n-        }\n-\n         final String inputRootName = getFileRootName(inputFile.getName());\n         final String inputExtension = getFileExtension(inputFile.getName());\n \n@@ -176,10 +172,7 @@ private final String time(long t) {\n      */\n     private void produce() {\n         SampleContext context = getSampleContext();\n-        if (context == null) {\n-            throw new IllegalStateException(\n-                    \"Set a sample context before produce samples.\");\n-        }\n+        Validate.validState(context != null, \"Set a sample context before producing samples.\");\n \n         for (int i = 0; i < csvReaders.length; i++) {\n             long sampleCount = 0;\n@@ -258,10 +251,15 @@ public void run() {\n \n         private List<SampleConsumer> sampleConsumers = new ArrayList<>();\n \n+        /**\n+         * Set the consumers for the samples that are to be consumed\n+         *\n+         * @param consumers\n+         *            list of consumers for the samples (must not be\n+         *            {@code null})\n+         */\n         public void setSampleConsumers(List<SampleConsumer> consumers) {\n-            if (consumers == null) {\n-                throw new ArgumentNullException(\"consumers\");\n-            }\n+            Validate.notNull(consumers, \"consumers must not be null\");\n \n             this.sampleConsumers = consumers;\n         }",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Replace ArgumentNullException with NPE by using Validate.notNull instead of checking for null by hand.\nDocument the need for non null parameter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721406 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 64c10c4d3acca3c9b9cf782e8f4d08f5d5a433a2",
        "commit": "https://github.com/apache/jmeter/commit/277e2755b8d186e35f63eb5582c45f23fed2263a",
        "parent": "https://github.com/apache/jmeter/commit/1350c8ba774b2901187229e60699de3e83574201",
        "bug_id": "jmeter_164",
        "file": [
            {
                "sha": "a78c2d2b1a47da1b16941a13ad79678efbd54811",
                "filename": "src/core/org/apache/jmeter/report/processor/AbstractSampleConsumer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/277e2755b8d186e35f63eb5582c45f23fed2263a/src/core/org/apache/jmeter/report/processor/AbstractSampleConsumer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/277e2755b8d186e35f63eb5582c45f23fed2263a/src/core/org/apache/jmeter/report/processor/AbstractSampleConsumer.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/processor/AbstractSampleConsumer.java?ref=277e2755b8d186e35f63eb5582c45f23fed2263a",
                "patch": "@@ -23,7 +23,7 @@\n import java.util.Map;\n import java.util.TreeMap;\n \n-import org.apache.jmeter.report.core.ArgumentNullException;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.Sample;\n import org.apache.jmeter.report.core.SampleException;\n import org.apache.jmeter.report.core.SampleMetadata;\n@@ -126,10 +126,14 @@ public void setSampleContext(SampleContext sampleContext) {\n         setWorkingDirectory(sampleContext.getWorkingDirectory());\n     }\n \n+    /**\n+     * Sets the consumers\n+     * \n+     * @param consumers\n+     *            for the samples (must not be {@code null})\n+     */\n     public void setSampleConsumers(List<SampleConsumer> consumers) {\n-        if (consumers == null) {\n-            throw new ArgumentNullException(\"consumers\");\n-        }\n+        Validate.notNull(consumers, \"consumers must not be null\");\n \n         this.sampleConsumers = consumers;\n     }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Replace ArgumentNullException with NPE by using Validate.notNull instead of checking for null by hand.\nDocument the need for non null parameter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721405 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 8df65941bb472f2d5a325acede9ee22a07e9af3b",
        "commit": "https://github.com/apache/jmeter/commit/1350c8ba774b2901187229e60699de3e83574201",
        "parent": "https://github.com/apache/jmeter/commit/f79cde96aa2a18cb2bbd797448805b113fe2dc69",
        "bug_id": "jmeter_165",
        "file": [
            {
                "sha": "44cbf20579a85400482cfca0998ddb36ab7a19b7",
                "filename": "src/core/org/apache/jmeter/report/processor/AggregateConsumer.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1350c8ba774b2901187229e60699de3e83574201/src/core/org/apache/jmeter/report/processor/AggregateConsumer.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1350c8ba774b2901187229e60699de3e83574201/src/core/org/apache/jmeter/report/processor/AggregateConsumer.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/processor/AggregateConsumer.java?ref=1350c8ba774b2901187229e60699de3e83574201",
                "patch": "@@ -17,7 +17,7 @@\n  */\n package org.apache.jmeter.report.processor;\n \n-import org.apache.jmeter.report.core.ArgumentNullException;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.Sample;\n import org.apache.jmeter.report.core.SampleSelector;\n \n@@ -29,6 +29,8 @@\n  */\n public class AggregateConsumer extends AbstractSampleConsumer {\n \n+    private static final String MUST_NOT_BE_NULL = \"%s must not be null\";\n+\n     /** The aggregator. */\n     private Aggregator aggregator;\n \n@@ -57,18 +59,14 @@ public final Aggregator getAggregator() {\n      * Instantiates a new abstract aggregate consumer.\n      *\n      * @param aggregator\n-     *            the aggregator\n+     *            the aggregator (must not be {@code null})\n      * @param selector\n-     *            the selector\n+     *            the selector (must not be {@code null})\n      */\n     public AggregateConsumer(Aggregator aggregator,\n             SampleSelector<Double> selector) {\n-        if (aggregator == null) {\n-            throw new ArgumentNullException(\"aggregator\");\n-        }\n-        if (selector == null) {\n-            throw new ArgumentNullException(\"selector\");\n-        }\n+        Validate.notNull(aggregator, MUST_NOT_BE_NULL, \"aggregator\");\n+        Validate.notNull(selector, MUST_NOT_BE_NULL, \"selector\");\n \n         this.aggregator = aggregator;\n         this.selector = selector;",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Remove null checks, where the usage would raise a NPE, use Validate.notNull otherwise.\nDocument the need for non null parameter.\nUse Validate.validState.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721399 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 133e6eda38d53c1ba6ac717886d02437d013d2b3",
        "commit": "https://github.com/apache/jmeter/commit/a51caa7a16f692ba148c1afda761e4a717b872d4",
        "parent": "https://github.com/apache/jmeter/commit/e5febc014768fb0d30be13d296356647aa24d66b",
        "bug_id": "jmeter_166",
        "file": [
            {
                "sha": "b8ab48952dee12c11ea0719b355e7a5202d5399d",
                "filename": "src/core/org/apache/jmeter/report/processor/ExternalSampleSorter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/a51caa7a16f692ba148c1afda761e4a717b872d4/src/core/org/apache/jmeter/report/processor/ExternalSampleSorter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/a51caa7a16f692ba148c1afda761e4a717b872d4/src/core/org/apache/jmeter/report/processor/ExternalSampleSorter.java",
                "status": "modified",
                "changes": 50,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/processor/ExternalSampleSorter.java?ref=a51caa7a16f692ba148c1afda761e4a717b872d4",
                "patch": "@@ -30,7 +30,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.jmeter.report.core.ArgumentNullException;\n+import org.apache.commons.lang3.Validate;\n import org.apache.jmeter.report.core.CsvFile;\n import org.apache.jmeter.report.core.CsvSampleReader;\n import org.apache.jmeter.report.core.CsvSampleWriter;\n@@ -80,6 +80,8 @@\n  */\n public class ExternalSampleSorter extends AbstractSampleConsumer {\n \n+    private static final String MUST_NOT_BE_NULL = \"%s must not be null\";\n+\n     private static final Logger log = LoggerFactory\n             .getLogger(ExternalSampleSorter.class);\n \n@@ -174,21 +176,13 @@ public boolean isParallelize() {\n      * </p>\n      * \n      * @param inputFile\n-     *            The CSV file to be sorted\n+     *            The CSV file to be sorted (must not be {@code null})\n      * @param outputFile\n-     *            The sorted destination CSV file\n+     *            The sorted destination CSV file (must not be {@code null})\n      * @param writeHeader\n      *            Wether the CSV header should be written in the output CSV file\n      */\n     public void sort(CsvFile inputFile, File outputFile, boolean writeHeader) {\n-        if (inputFile == null) {\n-            throw new ArgumentNullException(\"inputFile\");\n-        }\n-\n-        if (outputFile == null) {\n-            throw new ArgumentNullException(\"outputFile\");\n-        }\n-\n         if (!inputFile.isFile()) {\n             throw new SampleException(\n                     inputFile.getAbsolutePath()\n@@ -212,28 +206,18 @@ public void sort(CsvFile inputFile, File outputFile, boolean writeHeader) {\n      * provided through the sampleMetadata parameter.\n      * \n      * @param sampleMetadata\n-     *            The CSV metadata : header information + separator\n+     *            The CSV metadata : header information + separator (must not be {@code null})\n      * @param inputFile\n-     *            The input file to be sorted\n+     *            The input file to be sorted (must not be {@code null})\n      * @param outputFile\n-     *            THe ouput sorted file\n+     *            THe ouput sorted file (must not be {@code null})\n      * @param writeHeader\n      *            Whether output CSV header should be written (based on provided\n      *            sample metadata)\n      */\n     public void sort(SampleMetadata sampleMetadata, File inputFile,\n             File outputFile, boolean writeHeader) {\n-        if (sampleMetadata == null) {\n-            throw new ArgumentNullException(\"sampleMetadata\");\n-        }\n-\n-        if (inputFile == null) {\n-            throw new ArgumentNullException(\"inputFile\");\n-        }\n-\n-        if (outputFile == null) {\n-            throw new ArgumentNullException(\"outputFile\");\n-        }\n+        Validate.notNull(sampleMetadata, MUST_NOT_BE_NULL, \"sampleMetadata\");\n \n         if (!inputFile.isFile()) {\n             throw new SampleException(\n@@ -256,21 +240,15 @@ public void sort(SampleMetadata sampleMetadata, File inputFile,\n      * specified output file.\n      * \n      * @param csvReader\n-     *            The that provide samples to be sorted\n+     *            The that provide samples to be sorted (must not be {@code null})\n      * @param output\n      *            The output file that will contains sorted samples\n      * @param writeHeader\n      *            Wether to writer CSV header on the output file\n      */\n     private void sort(CsvSampleReader csvReader, File output,\n             boolean writeHeader) {\n-        if (csvReader == null) {\n-            throw new ArgumentNullException(\"csvReader\");\n-        }\n-\n-        if (output == null) {\n-            throw new ArgumentNullException(\"output\");\n-        }\n+        Validate.notNull(output, \"%s must not be null\", \"output\");\n \n         SampleMetadata sampleMetadata = csvReader.getMetadata();\n         SampleWriterConsumer writerConsumer = new SampleWriterConsumer();\n@@ -292,10 +270,8 @@ private void sort(CsvSampleReader csvReader, File output,\n \n     @Override\n     public void startConsuming() {\n-        if (sampleComparator == null) {\n-            throw new IllegalStateException(\n-                    \"sampleComparator is not set, call setSampleComparator() first.\");\n-        }\n+        Validate.validState(sampleComparator != null,\n+                \"sampleComparator is not set, call setSampleComparator() first.\");\n \n         File workDir = getWorkingDirectory();\n         workDir.mkdir();",
                "deletions": 37
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Remove check for null and document the need for a non null argument in the javadoc. The code will now throw a NPE instead of ArgumentNullException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1721339 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: f7adb6b35130f4bbcbb72733cc4fdc32740b6565",
        "commit": "https://github.com/apache/jmeter/commit/21c5f7374470b30fadc8077d24780351431bf527",
        "parent": "https://github.com/apache/jmeter/commit/c75f2f71be30be9f459405a4a1c342754e7dd408",
        "bug_id": "jmeter_167",
        "file": [
            {
                "sha": "b8b816a54f399317c7b47e4481e62c9621a80ddf",
                "filename": "src/core/org/apache/jmeter/report/config/ConfigurationUtils.java",
                "blob_url": "https://github.com/apache/jmeter/blob/21c5f7374470b30fadc8077d24780351431bf527/src/core/org/apache/jmeter/report/config/ConfigurationUtils.java",
                "raw_url": "https://github.com/apache/jmeter/raw/21c5f7374470b30fadc8077d24780351431bf527/src/core/org/apache/jmeter/report/config/ConfigurationUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/report/config/ConfigurationUtils.java?ref=21c5f7374470b30fadc8077d24780351431bf527",
                "patch": "@@ -43,17 +43,13 @@ private ConfigurationUtils() {\n      * @param value\n      *            the string value\n      * @param clazz\n-     *            the class of the property\n+     *            the class of the property (must not be {@code null})\n      * @return the converted string\n      * @throws ConfigurationException\n      *             when unable to convert the string\n      */\n     public static <TProperty> TProperty convert(String value,\n         Class<TProperty> clazz) throws ConfigurationException {\n-        if (clazz == null) {\n-            throw new ArgumentNullException(\"clazz\");\n-        }\n-\n         TProperty result;\n         if (clazz.isAssignableFrom(String.class)) {\n             @SuppressWarnings(\"unchecked\") // OK because checked above",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "[Bug 57605] When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers\nRetain backward compatibility as per sebb note\nBugzilla Id: 57605\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1661763 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 4cfdbcd88ee56564748eb0b3bebd476030bec186",
        "commit": "https://github.com/apache/jmeter/commit/6e9c33e74537075ea0ab892f319b422b624c4262",
        "parent": "https://github.com/apache/jmeter/commit/04bfc032adec91e040826804a254a3cfca6e5600",
        "bug_id": "jmeter_168",
        "file": [
            {
                "sha": "2ee41efad4a0d024beac062022c6c7bba4110d6c",
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/6e9c33e74537075ea0ab892f319b422b624c4262/src/core/org/apache/jmeter/save/SaveService.java",
                "status": "modified",
                "changes": 92,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=6e9c33e74537075ea0ab892f319b422b624c4262",
                "patch": "@@ -505,6 +505,24 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res\n         inputStreamReader.close();\n     }\n \n+    /**\n+     * Load a Test tree (JMX file)\n+     * @param file the JMX file\n+     * @return the loaded tree or null if an error occurs\n+     * @throws IOException if there is a problem reading the file or processing it\n+     * @deprecated use {@link SaveService}{@link #loadTree(File)}\n+     */\n+    public static HashTree loadTree(InputStream reader) throws IOException {\n+        try {\n+            return readTree(reader, null);\n+        } catch(IllegalArgumentException e) {\n+            log.error(\"Problem loading XML, message:\"+e.getMessage(), e);\n+            return null;\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+    \n     /**\n      * Load a Test tree (JMX file)\n      * @param file the JMX file\n@@ -516,38 +534,62 @@ public static HashTree loadTree(File file) throws IOException {\n         InputStream reader = null;\n         try {\n             reader = new FileInputStream(file);\n-            if (!reader.markSupported()) {\n-                reader = new BufferedInputStream(reader);\n+            return readTree(reader, file);\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @param reader {@link InputStream} \n+     * @param file the JMX file used only for debug, can be null\n+     * @return the loaded tree\n+     * @throws IOException if there is a problem reading the file or processing it\n+     */\n+    private static final HashTree readTree(InputStream reader, File file) throws IOException {\n+        if (!reader.markSupported()) {\n+            reader = new BufferedInputStream(reader);\n+        }\n+        reader.mark(Integer.MAX_VALUE);\n+        ScriptWrapper wrapper = null;\n+        try {\n+            // Get the InputReader to use\n+            InputStreamReader inputStreamReader = getInputStreamReader(reader);\n+            wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n+            inputStreamReader.close();\n+            if (wrapper == null){\n+                log.error(\"Problem loading XML: see above.\");\n+                return null;\n             }\n-            reader.mark(Integer.MAX_VALUE);\n-            ScriptWrapper wrapper = null;\n-            try {\n-                // Get the InputReader to use\n-                InputStreamReader inputStreamReader = getInputStreamReader(reader);\n-                wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n-                inputStreamReader.close();\n-                if (wrapper == null){\n-                    log.error(\"Problem loading XML: see above.\");\n-                    return null;\n-                }\n-                return wrapper.testPlan;\n-            } catch (CannotResolveClassException e) {\n-                if (e.getMessage().startsWith(\"node\")) {\n-                    log.info(\"Problem loading XML, trying Avalon format\");\n-                    reader.reset();\n-                    return OldSaveService.loadSubTree(reader);                \n-                }\n+            return wrapper.testPlan;\n+        } catch (CannotResolveClassException e) {\n+            // FIXME We switching to JAVA7, use Multi-Catch Exceptions\n+            if (e.getMessage().startsWith(\"node\")) {\n+                log.info(\"Problem loading XML, trying Avalon format\");\n+                reader.reset();\n+                return OldSaveService.loadSubTree(reader);                \n+            }\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', cannot determine class for element: \" + e, e);\n-            } catch (NoClassDefFoundError e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, cannot determine class for element: \" + e, e);\n+            }\n+        } catch (NoClassDefFoundError e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', missing class \"+e , e);\n-            } catch (ConversionException e) {\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, missing class \"+e , e);\n+            }\n+        } catch (ConversionException e) {\n+            if(file != null) {\n                 throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', conversion error \"+e , e);\n+            } else {\n+                throw new IllegalArgumentException(\"Problem loading XML, conversion error \"+e , e);\n             }\n-        } finally {\n-            JOrphanUtils.closeQuietly(reader);\n         }\n-    }\n \n+    }\n     private static InputStreamReader getInputStreamReader(InputStream inStream) {\n         // Check if we have a encoding to use from properties\n         Charset charset = getFileEncodingCharset();",
                "deletions": 25
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 57605 - When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers\nBugzilla Id: 57605\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1661007 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 40b3221e70799b239c8a4cc04c7c5e91fc86730b",
        "commit": "https://github.com/apache/jmeter/commit/cd14dfa7a64210298f280e53668591865025f3e7",
        "parent": "https://github.com/apache/jmeter/commit/e7c21d806bf5da880d567609e5b3ea166e43a9f2",
        "bug_id": "jmeter_169",
        "file": [
            {
                "sha": "437f6713aab1ec8fca17bdfb47847a32cacf6298",
                "filename": "src/components/org/apache/jmeter/control/IncludeController.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/components/org/apache/jmeter/control/IncludeController.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/components/org/apache/jmeter/control/IncludeController.java",
                "status": "modified",
                "changes": 10,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/IncludeController.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -19,10 +19,8 @@\n package org.apache.jmeter.control;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.util.Iterator;\n import java.util.LinkedList;\n \n@@ -34,7 +32,6 @@\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jorphan.collections.HashTree;\n import org.apache.jorphan.logging.LoggingManager;\n-import org.apache.jorphan.util.JOrphanUtils;\n import org.apache.log.Logger;\n \n public class IncludeController extends GenericController implements ReplaceableController {\n@@ -124,7 +121,6 @@ public void resolveReplacementSubTree(JMeterTreeNode context) {\n     protected HashTree loadIncludedElements() {\n         // only try to load the JMX test plan if there is one\n         final String includePath = getIncludePath();\n-        InputStream reader = null;\n         HashTree tree = null;\n         if (includePath != null && includePath.length() > 0) {\n             try {\n@@ -142,8 +138,7 @@ protected HashTree loadIncludedElements() {\n                     }\n                 }\n                 \n-                reader = new FileInputStream(file);\n-                tree = SaveService.loadTree(reader);\n+                tree = SaveService.loadTree(file);\n                 // filter the tree for a TestFragment.\n                 tree = getProperBranch(tree);\n                 removeDisabledItems(tree);\n@@ -168,9 +163,6 @@ protected HashTree loadIncludedElements() {\n                 JMeterUtils.reportErrorToUser(msg);\n                 log.warn(\"Unexpected error\", ex);\n             }\n-            finally{\n-                JOrphanUtils.closeQuietly(reader);\n-            }\n         }\n         return tree;\n     }",
                "deletions": 9
            },
            {
                "sha": "e2b56f06fbd0a2b55b32d778e9807db0e0f5ce4e",
                "filename": "src/core/org/apache/jmeter/JMeter.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/JMeter.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/JMeter.java",
                "status": "modified",
                "changes": 16,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/JMeter.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -53,10 +53,10 @@\n import org.apache.commons.cli.avalon.CLUtil;\n import org.apache.jmeter.control.ReplaceableController;\n import org.apache.jmeter.engine.ClientJMeterEngine;\n+import org.apache.jmeter.engine.DistributedRunner;\n import org.apache.jmeter.engine.JMeterEngine;\n import org.apache.jmeter.engine.RemoteJMeterEngineImpl;\n import org.apache.jmeter.engine.StandardJMeterEngine;\n-import org.apache.jmeter.engine.DistributedRunner;\n import org.apache.jmeter.exceptions.IllegalUserActionException;\n import org.apache.jmeter.gui.GuiPackage;\n import org.apache.jmeter.gui.MainFrame;\n@@ -244,14 +244,12 @@ private void startGui(String testFile) {\n         main.setVisible(true);\n         ActionRouter.getInstance().actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));\n         if (testFile != null) {\n-            FileInputStream reader = null;\n             try {\n                 File f = new File(testFile);\n                 log.info(\"Loading file: \" + f);\n                 FileServer.getFileServer().setBaseForScript(f);\n \n-                reader = new FileInputStream(f);\n-                HashTree tree = SaveService.loadTree(reader);\n+                HashTree tree = SaveService.loadTree(f);\n \n                 GuiPackage.getInstance().setTestPlanFile(f.getAbsolutePath());\n \n@@ -262,8 +260,6 @@ private void startGui(String testFile) {\n             } catch (Exception e) {\n                 log.error(\"Failure loading test file\", e);\n                 JMeterUtils.reportErrorToUser(e.toString());\n-            } finally {\n-                JOrphanUtils.closeQuietly(reader);\n             }\n         } else {\n             JTree jTree = GuiPackage.getInstance().getMainFrame().getTree();\n@@ -743,7 +739,6 @@ private void startNonGui(String testFile, String logFile, CLOption remoteStart)\n \n     // run test in batch mode\n     private void runNonGui(String testFile, String logFile, boolean remoteStart, String remote_hosts_string) {\n-        FileInputStream reader = null;\n         try {\n             File f = new File(testFile);\n             if (!f.exists() || !f.isFile()) {\n@@ -752,10 +747,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str\n             }\n             FileServer.getFileServer().setBaseForScript(f);\n \n-            reader = new FileInputStream(f);\n-            log.info(\"Loading file: \" + f);\n-\n-            HashTree tree = SaveService.loadTree(reader);\n+            HashTree tree = SaveService.loadTree(f);\n \n             @SuppressWarnings(\"deprecation\") // Deliberate use of deprecated ctor\n             JMeterTreeModel treeModel = new JMeterTreeModel(new Object());// Create non-GUI version to avoid headless problems\n@@ -826,8 +818,6 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str\n         } catch (Exception e) {\n             System.out.println(\"Error in NonGUIDriver \" + e.toString());\n             log.error(\"Error in NonGUIDriver\", e);\n-        } finally {\n-            JOrphanUtils.closeQuietly(reader);\n         }\n     }\n ",
                "deletions": 13
            },
            {
                "sha": "730bfa290fca0b493404dc638daee4e89b281f3f",
                "filename": "src/core/org/apache/jmeter/gui/action/Load.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/gui/action/Load.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/gui/action/Load.java",
                "status": "modified",
                "changes": 9,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/action/Load.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -20,9 +20,7 @@\n \n import java.awt.event.ActionEvent;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -44,7 +42,6 @@\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jorphan.collections.HashTree;\n import org.apache.jorphan.logging.LoggingManager;\n-import org.apache.jorphan.util.JOrphanUtils;\n import org.apache.log.Logger;\n \n import com.thoughtworks.xstream.converters.ConversionException;\n@@ -119,7 +116,6 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n \n         final GuiPackage guiPackage = GuiPackage.getInstance();\n         if (f != null) {\n-            InputStream reader = null;\n             try {\n                 if (merging) {\n                     log.info(\"Merging file: \" + f);\n@@ -131,8 +127,7 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n                         FileServer.getFileServer().setBaseForScript(f);\n                     }\n                 }\n-                reader = new FileInputStream(f);\n-                final HashTree tree = SaveService.loadTree(reader);\n+                final HashTree tree = SaveService.loadTree(f);\n                 final boolean isTestPlan = insertLoadedTree(e.getID(), tree, merging);\n \n                 // don't change name if merging\n@@ -150,8 +145,6 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer\n                 reportError(\"Error reading file: \", ex, false);\n             } catch (Exception ex) {\n                 reportError(\"Unexpected error\", ex, true);\n-            } finally {\n-                JOrphanUtils.closeQuietly(reader);\n             }\n             FileDialoger.setLastJFCDirectory(f.getParentFile().getAbsolutePath());\n             guiPackage.updateCurrentGui();",
                "deletions": 8
            },
            {
                "sha": "8de3846ec11e95e46d9325c5149e31bef3adf3bc",
                "filename": "src/core/org/apache/jmeter/save/SaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/save/SaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/src/core/org/apache/jmeter/save/SaveService.java",
                "status": "modified",
                "changes": 61,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/save/SaveService.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.jmeter.save;\n \n import java.io.BufferedInputStream;\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -506,40 +507,44 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res\n \n     /**\n      * Load a Test tree (JMX file)\n-     * @param reader on the JMX file\n+     * @param file the JMX file\n      * @return the loaded tree\n      * @throws IOException if there is a problem reading the file or processing it\n      */\n-    public static HashTree loadTree(InputStream reader) throws IOException {\n-        if (!reader.markSupported()) {\n-            reader = new BufferedInputStream(reader);\n-        }\n-        reader.mark(Integer.MAX_VALUE);\n-        ScriptWrapper wrapper = null;\n+    public static HashTree loadTree(File file) throws IOException {\n+        log.info(\"Loading file: \" + file);\n+        InputStream reader = null;\n         try {\n-            // Get the InputReader to use\n-            InputStreamReader inputStreamReader = getInputStreamReader(reader);\n-            wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n-            inputStreamReader.close();\n-            if (wrapper == null){\n-                log.error(\"Problem loading XML: see above.\");\n-                return null;\n+            reader = new FileInputStream(file);\n+            if (!reader.markSupported()) {\n+                reader = new BufferedInputStream(reader);\n             }\n-            return wrapper.testPlan;\n-        } catch (CannotResolveClassException e) {\n-            if (e.getMessage().startsWith(\"node\")) {\n-                log.info(\"Problem loading XML, trying Avalon format\");\n-                reader.reset();\n-                return OldSaveService.loadSubTree(reader);                \n+            reader.mark(Integer.MAX_VALUE);\n+            ScriptWrapper wrapper = null;\n+            try {\n+                // Get the InputReader to use\n+                InputStreamReader inputStreamReader = getInputStreamReader(reader);\n+                wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);\n+                inputStreamReader.close();\n+                if (wrapper == null){\n+                    log.error(\"Problem loading XML: see above.\");\n+                    return null;\n+                }\n+                return wrapper.testPlan;\n+            } catch (CannotResolveClassException e) {\n+                if (e.getMessage().startsWith(\"node\")) {\n+                    log.info(\"Problem loading XML, trying Avalon format\");\n+                    reader.reset();\n+                    return OldSaveService.loadSubTree(reader);                \n+                }\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', cannot determine class for element: \" + e, e);\n+            } catch (NoClassDefFoundError e) {\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', missing class \"+e , e);\n+            } catch (ConversionException e) {\n+                throw new IllegalArgumentException(\"Problem loading XML from:'\"+file.getAbsolutePath()+\"', conversion error \"+e , e);\n             }\n-            log.warn(\"Problem loading XML, cannot determine class for element: \" + e.getLocalizedMessage());\n-            return null;\n-        } catch (NoClassDefFoundError e) {\n-            log.error(\"Missing class \"+e);\n-            return null;\n-        } catch (ConversionException e) {\n-            log.error(\"Conversion error \"+e);\n-            return null;\n+        } finally {\n+            JOrphanUtils.closeQuietly(reader);\n         }\n     }\n ",
                "deletions": 28
            },
            {
                "sha": "cbb66134f68fef8548065f0e1c67a9fa158078e3",
                "filename": "test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/gui/action/TestLoad.java",
                "status": "modified",
                "changes": 9,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/gui/action/TestLoad.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -19,7 +19,6 @@\n package org.apache.jmeter.gui.action;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FilenameFilter;\n import java.util.HashSet;\n import java.util.Set;\n@@ -107,13 +106,7 @@ private void assertTree(HashTree tree) throws Exception {\n     }\n \n     private HashTree getTree(File f) throws Exception {\n-        FileInputStream fis = new FileInputStream(f);\n-        HashTree tree = null;\n-        try {\n-            tree = SaveService.loadTree(fis);\n-        } finally {\n-            fis.close();\n-        }\n+        HashTree tree = SaveService.loadTree(f);\n         return tree;\n     }\n }",
                "deletions": 8
            },
            {
                "sha": "155eb9e1bf55bde229819bad50ebc805d5fd30dd",
                "filename": "test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -18,7 +18,7 @@\n \n package org.apache.jmeter.protocol.http.modifier;\n \n-import java.io.FileInputStream;\n+import java.io.File;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLEncoder;\n@@ -48,12 +48,12 @@ public void setUp() {\n         }\n \n         public void testProcessingHTMLFile(String HTMLFileName) throws Exception {\n-            HTTPSamplerBase config = (HTTPSamplerBase) SaveService.loadTree(\n-                    new FileInputStream(System.getProperty(\"user.dir\") + \"/testfiles/load_bug_list.jmx\")).getArray()[0];\n+            File file = new File(System.getProperty(\"user.dir\") + \"/testfiles/load_bug_list.jmx\");\n+            HTTPSamplerBase config = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];\n             config.setRunningVersion(true);\n             HTTPSampleResult result = new HTTPSampleResult();\n-            HTTPSamplerBase context = (HTTPSamplerBase) SaveService.loadTree(\n-                    new FileInputStream(System.getProperty(\"user.dir\") + \"/testfiles/Load_JMeter_Page.jmx\")).getArray()[0];\n+            file = new File(System.getProperty(\"user.dir\") + \"/testfiles/Load_JMeter_Page.jmx\");\n+            HTTPSamplerBase context = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];\n             jmctx.setCurrentSampler(context);\n             jmctx.setCurrentSampler(config);\n             result.setResponseData(new TextFile(System.getProperty(\"user.dir\") + HTMLFileName).getText(), null);",
                "deletions": 5
            },
            {
                "sha": "f18ede41ba15bc237a0cf6be3ad5c2ccf7f36e27",
                "filename": "test/src/org/apache/jmeter/save/TestSaveService.java",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/save/TestSaveService.java",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/test/src/org/apache/jmeter/save/TestSaveService.java",
                "status": "modified",
                "changes": 25,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/test/src/org/apache/jmeter/save/TestSaveService.java?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -22,10 +22,8 @@\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.FileReader;\n-import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.util.List;\n \n@@ -110,16 +108,7 @@ private boolean loadAndSave(File testFile, String fileName, boolean checkSize) t\n \n         int [] orig = readFile(new BufferedReader(new FileReader(testFile)));\n \n-        InputStream in = null;\n-        HashTree tree = null;\n-        try {\n-            in = new FileInputStream(testFile);\n-            tree = SaveService.loadTree(in);\n-        } finally {\n-            if(in != null) {\n-                in.close();\n-            }\n-        }\n+        HashTree tree = SaveService.loadTree(testFile);\n \n         ByteArrayOutputStream out = new ByteArrayOutputStream(1000000);\n         try {\n@@ -191,16 +180,14 @@ private boolean loadAndSave(File testFile, String fileName, boolean checkSize) t\n \n     public void testLoad() throws Exception {\n         for (int i = 0; i < FILES_LOAD_ONLY.length; i++) {\n-            InputStream in = null;\n+            File file = findTestFile(\"testfiles/\" + FILES_LOAD_ONLY[i]);\n             try {\n-                in = new FileInputStream(findTestFile(\"testfiles/\" + FILES_LOAD_ONLY[i]));\n-                HashTree tree =SaveService.loadTree(in);\n+                HashTree tree =SaveService.loadTree(file);\n                 assertNotNull(tree);\n-            } finally {\n-                if(in != null) {\n-                    in.close();\n-                }\n+            } catch(IllegalArgumentException ex) {\n+                fail(\"Exception loading \"+file.getAbsolutePath());\n             }\n+            \n         }\n \n     }",
                "deletions": 19
            },
            {
                "sha": "49d186b147b6560dafbda9141f56092e46fb7c02",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/cd14dfa7a64210298f280e53668591865025f3e7/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/cd14dfa7a64210298f280e53668591865025f3e7/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=cd14dfa7a64210298f280e53668591865025f3e7",
                "patch": "@@ -235,6 +235,7 @@ See  <bugzilla>56357</bugzilla> for details.\n <h3>General</h3>\n <ul>\n <li><bug>57518</bug>Icons for toolbar with several sizes</li>\n+<li><bug>57605</bug>When there is an error loading Test Plan, SaveService.loadTree returns null leading to NPE in callers</li>\n </ul>\n <ch_section>Non-functional changes</ch_section>\n <ul>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 53782 - Enhance JavaSampler handling of JavaSamplerClient cleanup to use less memory\nFix NPE in distributed tests\nBugzilla Id: 53782\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1377499 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: def12ac8e293a55f11aa6cac13f845ce05fe5a3e",
        "commit": "https://github.com/apache/jmeter/commit/58fe52a96191e9a2e6c1bd3b2826a292ff891456",
        "parent": "https://github.com/apache/jmeter/commit/13eaf6846993d8257bc87dbc4d6976b65888960e",
        "bug_id": "jmeter_170",
        "file": [
            {
                "sha": "996440e0415aa5413de413591f0e6960e677167c",
                "filename": "src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/58fe52a96191e9a2e6c1bd3b2826a292ff891456/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/58fe52a96191e9a2e6c1bd3b2826a292ff891456/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java?ref=58fe52a96191e9a2e6c1bd3b2826a292ff891456",
                "patch": "@@ -82,7 +82,7 @@\n      * be registered for cleanup.\n      * This is done to avoid using reflection on each registration\n      */\n-    private transient Map<String, Boolean> isToBeRegisteredCache = new ConcurrentHashMap<String, Boolean>();\n+    private Map<String, Boolean> isToBeRegisteredCache = new ConcurrentHashMap<String, Boolean>();\n \n     /**\n      * Set used to register all JavaSamplerClient and JavaSamplerContext. ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Revert back invokeLater as we must wait for sample to occur before delivering otherwise a NPE will occurs in ResultCollector\n\ngit-svn-id: https://svn.apache.org/repos/asf/jmeter/trunk@1294195 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: ffed87786446f8a9710d3b80320eeb8862b23e86",
        "commit": "https://github.com/apache/jmeter/commit/d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
        "parent": "https://github.com/apache/jmeter/commit/ded56a6a606b8cd74e9dae302bc25faf7c74b5aa",
        "bug_id": "jmeter_171",
        "file": [
            {
                "sha": "d7c2d434cd11a39bf14205add3ba69f042b76a50",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "blob_url": "https://github.com/apache/jmeter/blob/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "raw_url": "https://github.com/apache/jmeter/raw/d67519025e9bfe0da3ee85cc87d76a59a230eb2e/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java",
                "status": "modified",
                "changes": 60,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java?ref=d67519025e9bfe0da3ee85cc87d76a59a230eb2e",
                "patch": "@@ -28,8 +28,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.swing.SwingUtilities;\n-\n import org.apache.jmeter.assertions.ResponseAssertion;\n import org.apache.jmeter.assertions.gui.AssertionGui;\n import org.apache.jmeter.config.Arguments;\n@@ -396,42 +394,30 @@ public void setTarget(JMeterTreeNode target) {\n      * server's response while recording. A future consideration.\n      */\n     public synchronized void deliverSampler(final HTTPSamplerBase sampler, final TestElement[] subConfigs, final SampleResult result) {\n-        try {\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    if (filterContentType(result) && filterUrl(sampler)) {\n-                        JMeterTreeNode myTarget = findTargetControllerNode();\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n-                        @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n-                        Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n-\n-                        removeValuesFromSampler(sampler, defaultConfigurations);\n-                        replaceValues(sampler, subConfigs, userDefinedVariables);\n-                        sampler.setAutoRedirects(samplerRedirectAutomatically);\n-                        sampler.setFollowRedirects(samplerFollowRedirects);\n-                        sampler.setUseKeepAlive(useKeepAlive);\n-                        sampler.setImageParser(samplerDownloadImages);\n-\n-                        placeSampler(sampler, subConfigs, myTarget);\n-                    }\n-                    else {\n-                        if(log.isDebugEnabled()) {\n-                            log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n-                        }\n-                        result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n-                    }\n-                    // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n-                    notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n-                }\n-            });\n-        } catch (InterruptedException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n-        } catch (InvocationTargetException e) {\n-            log.error(\"Program error\", e);\n-            throw new Error(e);\n+        if (filterContentType(result) && filterUrl(sampler)) {\n+            JMeterTreeNode myTarget = findTargetControllerNode();\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);\n+            @SuppressWarnings(\"unchecked\") // OK, because find only returns correct element types\n+            Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);\n+\n+            removeValuesFromSampler(sampler, defaultConfigurations);\n+            replaceValues(sampler, subConfigs, userDefinedVariables);\n+            sampler.setAutoRedirects(samplerRedirectAutomatically);\n+            sampler.setFollowRedirects(samplerFollowRedirects);\n+            sampler.setUseKeepAlive(useKeepAlive);\n+            sampler.setImageParser(samplerDownloadImages);\n+\n+            placeSampler(sampler, subConfigs, myTarget);\n+        }\n+        else {\n+            if(log.isDebugEnabled()) {\n+                log.debug(\"Sample excluded based on url or content-type: \" + result.getUrlAsString() + \" - \" + result.getContentType());\n+            }\n+            result.setSampleLabel(\"[\"+result.getSampleLabel()+\"]\");\n         }\n+        // SampleEvent is not passed JMeterVariables, because they don't make sense for Proxy Recording\n+        notifySampleListeners(new SampleEvent(result, \"WorkBench\")); // TODO - is this the correct threadgroup name?\n     }\n \n     public void stopProxy() {",
                "deletions": 37
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Bug 51691 - Authorization does not work for JMS Publisher and JMS Subscriber\n\nAdding some comments just to clarify why 51996 fix fixes this NPE issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@1180462 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 08cb0d363f424bcb521e7c7b733bd74143232944",
        "commit": "https://github.com/apache/jmeter/commit/bb76683f226ebb538068e136d19e2e63a09ad246",
        "parent": "https://github.com/apache/jmeter/commit/e294ce9eb5cf9a6d99531308bb21ba4f692153ae",
        "bug_id": "jmeter_172",
        "file": [
            {
                "sha": "5d2a1368262be54309135c25c3bbf893bd1664ee",
                "filename": "src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java",
                "blob_url": "https://github.com/apache/jmeter/blob/bb76683f226ebb538068e136d19e2e63a09ad246/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java",
                "raw_url": "https://github.com/apache/jmeter/raw/bb76683f226ebb538068e136d19e2e63a09ad246/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java?ref=bb76683f226ebb538068e136d19e2e63a09ad246",
                "patch": "@@ -71,15 +71,18 @@ public static Context lookupContext(String initialContextFactory,\n                 throw new NamingException(e.toString());\n             }\n             // we want to return the context that is actually in the map\n+            // if it's the first put we will have a null result\n             Context oldCtx = MAP.putIfAbsent(cacheKey, ctx);\n             if(oldCtx != null) {\n+                // There was an object in map, destroy the temporary and return one in map (oldCtx)\n                 try {\n                     ctx.close();\n                 } catch (Exception e) {\n                     // NOOP\n                 }\n                 ctx = oldCtx;\n             }\n+            // else No object in Map, ctx is the one\n         }\n         return ctx;\n     }",
                "deletions": 0
            },
            {
                "sha": "4b218800e10b6efc49ad1a7c86147542afb3ce24",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/bb76683f226ebb538068e136d19e2e63a09ad246/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/bb76683f226ebb538068e136d19e2e63a09ad246/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=bb76683f226ebb538068e136d19e2e63a09ad246",
                "patch": "@@ -95,6 +95,7 @@ Mirror server now uses default port 8081, was 8080 before 2.5.1.\n <h3>Other Samplers</h3>\n <ul>\n <li>Bug 51996 - JMS Initial Context leak newly created Context when Multiple Thread enter InitialContextFactory#lookupContext at the same time</li>\n+<li>Bug 51691 - Authorization does not work for JMS Publisher and JMS Subscriber</li>\n </ul>\n \n <h3>Controllers</h3>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Add support for multipart messages\nAvoid possible NPEs in To: and From: processing\nStore Response Headers if not using store as MIME\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@910812 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: bdcbd6fcd4f6642415f1c6b75d45e6e094aefa74",
        "commit": "https://github.com/apache/jmeter/commit/36d4ff61610e82ed640a73359230d1f6e449830d",
        "parent": "https://github.com/apache/jmeter/commit/d8baecd9cafc593fb5d68e32b858c105865bf6f8",
        "bug_id": "jmeter_173",
        "file": [
            {
                "sha": "47f8d17a5e3b7d8b3f5279795c219fc6d8ebc336",
                "filename": "src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/36d4ff61610e82ed640a73359230d1f6e449830d/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java",
                "status": "modified",
                "changes": 155,
                "additions": 97,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java?ref=36d4ff61610e82ed640a73359230d1f6e449830d",
                "patch": "@@ -19,19 +19,24 @@\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n+import java.util.Enumeration;\n import java.util.Properties;\n \n import javax.mail.Address;\n import javax.mail.BodyPart;\n import javax.mail.Flags;\n import javax.mail.Folder;\n+import javax.mail.Header;\n import javax.mail.Message;\n import javax.mail.MessagingException;\n import javax.mail.Session;\n import javax.mail.Store;\n import javax.mail.internet.MimeMultipart;\n+import javax.mail.internet.MimeUtility;\n \n+import org.apache.commons.io.IOUtils;\n import org.apache.jmeter.samplers.AbstractSampler;\n import org.apache.jmeter.samplers.Entry;\n import org.apache.jmeter.samplers.SampleResult;\n@@ -86,12 +91,10 @@ public SampleResult sample(Entry e) {\n         boolean deleteMessages = getDeleteMessages();\n \n         parent.setSampleLabel(getName());\n-        int port=getPortAsInt();\n-        if (port > 0){\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer()+ \":\" + port);\n-        } else {\n-            parent.setSamplerData(getServerType() + \"://\" + getUserName() + \"@\" + getServer());\n-        }\n+        \n+        String samplerString = toString();\n+        parent.setSamplerData(samplerString);\n+\n         /*\n          * Perform the sampling\n          */\n@@ -105,11 +108,7 @@ public SampleResult sample(Entry e) {\n \n             // Get the store\n             Store store = session.getStore(getServerType());\n-            if (port > 0){\n-                store.connect(getServer(), port, getUserName(), getPassword());\n-            } else {\n-                store.connect(getServer(), getUserName(), getPassword());\n-            }\n+            store.connect(getServer(), getPortAsInt(), getUserName(), getPassword());\n \n             // Get folder\n             Folder folder = store.getFolder(getFolder());\n@@ -121,47 +120,66 @@ public SampleResult sample(Entry e) {\n \n             // Get directory\n             Message messages[] = folder.getMessages();\n-            Message message;\n             StringBuilder pdata = new StringBuilder();\n             pdata.append(messages.length);\n             pdata.append(\" messages found\\n\");\n+            parent.setResponseData(pdata.toString(),null);\n+            parent.setDataType(SampleResult.TEXT);\n+            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n \n             int n = getNumMessages();\n             if (n == ALL_MESSAGES || n > messages.length) {\n                 n = messages.length;\n             }\n \n+            parent.setSampleCount(n); // TODO is this sensible?\n+            \n             for (int i = 0; i < n; i++) {\n                 StringBuilder cdata = new StringBuilder();\n                 SampleResult child = new SampleResult();\n                 child.sampleStart();\n-                message = messages[i];\n-\n-                //if (i == 0)\n-                { // Assumes all the messaged have the same type ...\n-                    child.setContentType(message.getContentType());\n-                }\n-\n+                Message message = messages[i];\n+                \n                 cdata.append(\"Message \"); // $NON-NLS-1$\n                 cdata.append(message.getMessageNumber());\n                 child.setSampleLabel(cdata.toString());\n                 child.setSamplerData(cdata.toString());\n                 cdata.setLength(0);\n \n+                final String contentType = message.getContentType();\n+                child.setContentType(contentType);// Store the content-type\n+\n                 if (isStoreMimeMessage()) {\n-                    appendMessageAsMime(cdata, message);\n+                    // Don't save headers - they are already in the raw message\n+                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+                    message.writeTo(bout);\n+                    child.setResponseData(bout.toByteArray()); // Save raw message\n+                    child.setDataType(SampleResult.TEXT);\n+                    child.setDataEncoding(\"iso-8859-1\"); // RFC 822 uses ascii\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n                 } else {\n-                    appendMessageData(cdata, message);\n+                    child.setEncodingAndType(contentType);// Parse the content-type\n+                    @SuppressWarnings(\"unchecked\") // Javadoc for the API says this is OK\n+                    Enumeration<Header> hdrs = message.getAllHeaders();\n+                    while(hdrs.hasMoreElements()){\n+                        Header hdr = hdrs.nextElement();\n+                        String value = hdr.getValue();\n+                        try {\n+                            value = MimeUtility.decodeText(value);\n+                        } catch (UnsupportedEncodingException uce) {\n+                            // ignored\n+                        }\n+                        cdata.append(hdr.getName()).append(\": \").append(value).append(\"\\n\");\n+                    }\n+                    child.setResponseHeaders(cdata.toString());\n+                    cdata.setLength(0);\n+                    appendMessageData(child, message);\n                 }\n \n                 if (deleteMessages) {\n                     message.setFlag(Flags.Flag.DELETED, true);\n                 }\n-                child.setResponseData(cdata.toString().getBytes());\n-                child.setDataType(SampleResult.TEXT);\n-                child.setResponseCodeOK();\n-                child.setResponseMessage(\"OK\"); // $NON-NLS-1$\n-                child.setSuccessful(true);\n+                child.setResponseOK();\n                 child.sampleEnd();\n                 parent.addSubResult(child);\n             }\n@@ -170,15 +188,8 @@ public SampleResult sample(Entry e) {\n             folder.close(true);\n             store.close();\n \n-            /*\n-             * Set up the sample result details\n-             */\n-            parent.setResponseData(pdata.toString().getBytes());\n-            parent.setDataType(SampleResult.TEXT);\n-            parent.setContentType(\"text/plain\"); // $NON-NLS-1$\n-\n             parent.setResponseCodeOK();\n-            parent.setResponseMessage(\"OK\"); // $NON-NLS-1$\n+            parent.setResponseMessageOK();\n             isOK = true;\n         } catch (NoClassDefFoundError ex) {\n             log.debug(\"\",ex);// No need to log normally, as we set the status\n@@ -201,15 +212,16 @@ public SampleResult sample(Entry e) {\n         return parent;\n     }\n \n-    private void appendMessageData(StringBuilder cdata, Message message)\n+    private void appendMessageData(SampleResult child, Message message)\n             throws MessagingException, IOException {\n+        StringBuilder cdata = new StringBuilder();\n         cdata.append(\"Date: \"); // $NON-NLS-1$\n         cdata.append(message.getSentDate());// TODO - use a different format here?\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"To: \"); // $NON-NLS-1$\n-        Address[] recips = message.getAllRecipients();\n-        for (int j = 0; j < recips.length; j++) {\n+        Address[] recips = message.getAllRecipients(); // may be null\n+        for (int j = 0; recips != null && j < recips.length; j++) {\n             cdata.append(recips[j].toString());\n             if (j < recips.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -218,8 +230,8 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         cdata.append(NEW_LINE);\n \n         cdata.append(\"From: \"); // $NON-NLS-1$\n-        Address[] from = message.getFrom();\n-        for (int j = 0; j < from.length; j++) {\n+        Address[] from = message.getFrom(); // may be null\n+        for (int j = 0; from != null && j < from.length; j++) {\n             cdata.append(from[j].toString());\n             if (j < from.length - 1) {\n                 cdata.append(\"; \"); // $NON-NLS-1$\n@@ -235,33 +247,40 @@ private void appendMessageData(StringBuilder cdata, Message message)\n         Object content = message.getContent();\n         if (content instanceof MimeMultipart) {\n             MimeMultipart mmp = (MimeMultipart) content;\n+            String preamble = mmp.getPreamble();\n+            if (preamble != null ){\n+                cdata.append(preamble);\n+            }\n+            child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n             int count = mmp.getCount();\n-            cdata.append(\"Multipart. Count: \");\n-            cdata.append(count);\n-            cdata.append(NEW_LINE);\n             for (int j=0; j<count;j++){\n                 BodyPart bodyPart = mmp.getBodyPart(j);\n-                cdata.append(\"Type: \");\n-                cdata.append(bodyPart.getContentType());\n-                cdata.append(NEW_LINE);\n-                try {\n-                    cdata.append(bodyPart.getContent());\n-                } catch (UnsupportedEncodingException ex){\n-                    cdata.append(ex.getLocalizedMessage());\n+                final Object bodyPartContent = bodyPart.getContent();\n+                final String contentType = bodyPart.getContentType();\n+                SampleResult sr = new SampleResult();\n+                sr.setSampleLabel(\"Part: \"+j);\n+                sr.setContentType(contentType);\n+                sr.setEncodingAndType(contentType);\n+                sr.setResponseHeaders(bodyPart.getClass().getName());// TODO\n+                if (bodyPartContent instanceof InputStream){\n+                    sr.setResponseData(IOUtils.toByteArray((InputStream) bodyPartContent));\n+                } else {\n+                    sr.setResponseData(bodyPartContent.toString(),sr.getDataEncodingNoDefault());\n                 }\n+                sr.setResponseOK();\n+                sr.sampleEnd();\n+                child.addSubResult(sr);\n             }\n         } else {\n-            cdata.append(content);\n+            if (content instanceof InputStream){\n+                child.setResponseData(IOUtils.toByteArray((InputStream) content));\n+            } else {\n+                cdata.append(content);\n+                child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());\n+            }\n         }\n     }\n \n-    private void appendMessageAsMime(StringBuilder cdata, Message message)\n-            throws MessagingException, IOException {\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        message.writeTo(bout);\n-        cdata.append(bout);\n-    }\n-\n     /**\n      * Sets the type of protocol to use when talking with the remote mail\n      * server. Either MailReaderSampler.TYPE_IMAP[S] or\n@@ -304,7 +323,7 @@ public String getPort() {\n     }\n \n     private int getPortAsInt() {\n-        return getPropertyAsInt(PORT);\n+        return getPropertyAsInt(PORT, -1);\n     }\n \n     public void setPort(String port) {\n@@ -421,4 +440,24 @@ public boolean isStoreMimeMessage() {\n     public void setStoreMimeMessage(boolean storeMimeMessage) {\n         setProperty(STORE_MIME_MESSAGE, storeMimeMessage, false);\n     }\n+    \n+    @Override\n+    public String toString(){\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(getServerType());\n+        sb.append(\"://\");\n+        sb.append(getUserName());\n+        sb.append(\"@\");\n+        sb.append(getServer());\n+        int port=getPortAsInt();\n+        if (port != -1){\n+            sb.append(\":\").append(port);\n+        }\n+        sb.append(\"/\");\n+        sb.append(getFolder());\n+        sb.append(\"[\");\n+        sb.append(getNumMessages());\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n }",
                "deletions": 58
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "BeanInfoSupport now caches getBeanDescriptor() - should avoid an NPE on non-Sun JVMs when using CSVDataSet (and some other TestBeans)\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@900611 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e6558b24ff08a1e203d6a6f82c175e28846ca9bc",
        "commit": "https://github.com/apache/jmeter/commit/3dbb0cedf7d19411879387c0993658a63079ef82",
        "parent": "https://github.com/apache/jmeter/commit/4233a4e1b317b35c9d7a6f9e07ae2201c748dafa",
        "bug_id": "jmeter_174",
        "file": [
            {
                "sha": "f30e2c907cdfcc10cf812ce7cb54cb423b7a2e49",
                "filename": "src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java",
                "blob_url": "https://github.com/apache/jmeter/blob/3dbb0cedf7d19411879387c0993658a63079ef82/src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java",
                "raw_url": "https://github.com/apache/jmeter/raw/3dbb0cedf7d19411879387c0993658a63079ef82/src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java?ref=3dbb0cedf7d19411879387c0993658a63079ef82",
                "patch": "@@ -82,7 +82,10 @@\n     // NOTREAD private Class beanClass;\n     /** The BeanInfo for our class as obtained by the introspector. */\n     private final BeanInfo rootBeanInfo;\n-\n+    \n+    /** The descriptor for our class */\n+    private final BeanDescriptor beanDescriptor;\n+    \n     /** The icons for this bean. */\n     private final Image[] icons = new Image[5];\n \n@@ -99,6 +102,10 @@ protected BeanInfoSupport(Class<?> beanClass) {\n             throw new Error(e.toString()); // Programming error: bail out.\n         }\n \n+        // N.B. JVMs other than Sun may return different instances each time\n+        // so we cache the value here (and avoid having to fetch it every time)\n+        beanDescriptor = rootBeanInfo.getBeanDescriptor();\n+        \n         try {\n             ResourceBundle resourceBundle = ResourceBundle.getBundle(\n                     beanClass.getName() + \"Resources\",  // $NON-NLS-1$\n@@ -201,7 +208,7 @@ protected void createPropertyGroup(String group, String[] names) {\n     /** {@inheritDoc} */\n     @Override\n     public BeanDescriptor getBeanDescriptor() {\n-        return rootBeanInfo.getBeanDescriptor();\n+        return beanDescriptor;\n     }\n \n     /** {@inheritDoc} */",
                "deletions": 2
            },
            {
                "sha": "92753e976b35be247d7b5f34b092151622006116",
                "filename": "xdocs/changes.xml",
                "blob_url": "https://github.com/apache/jmeter/blob/3dbb0cedf7d19411879387c0993658a63079ef82/xdocs/changes.xml",
                "raw_url": "https://github.com/apache/jmeter/raw/3dbb0cedf7d19411879387c0993658a63079ef82/xdocs/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/xdocs/changes.xml?ref=3dbb0cedf7d19411879387c0993658a63079ef82",
                "patch": "@@ -113,6 +113,7 @@ The XPath Assertion and XPath Extractor elements no longer fetch external DTDs b\n <ul>\n <li>Bug 47646 -  NullPointerException in the \"Random Variable\" element</li>\n <li>Disallow adding any child elements to JDBC Configuration</li>\n+<li>BeanInfoSupport now caches getBeanDescriptor() - should avoid an NPE on non-Sun JVMs when using CSVDataSet (and some other TestBeans)</li>\n </ul>\n \n <!-- ==================================================== -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Ensure that content type is set up (otherwise get NPE in testing)\nTODO: is it the correct default? [Or should null C-T be allowed?]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@585474 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: c06370a0f74864b4e0034d4f13b913dcddafcab1",
        "commit": "https://github.com/apache/jmeter/commit/2b127b98b0979966242d195c8ad042f4c75da1f1",
        "parent": "https://github.com/apache/jmeter/commit/43b2bb10ebaea783551b2e8ae179c4b290298fa9",
        "bug_id": "jmeter_175",
        "file": [
            {
                "sha": "c07fb95e24783173461ab072522c9905b132b23b",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "blob_url": "https://github.com/apache/jmeter/blob/2b127b98b0979966242d195c8ad042f4c75da1f1/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "raw_url": "https://github.com/apache/jmeter/raw/2b127b98b0979966242d195c8ad042f4c75da1f1/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java?ref=2b127b98b0979966242d195c8ad042f4c75da1f1",
                "patch": "@@ -376,8 +376,14 @@ private String sendPostData(PostMethod post) throws IOException {\n                     // Allow the mimetype of the file to control the content type\n                     // This is not obvious in GUI if you are not uploading any files,\n                     // but just sending the content of nameless parameters\n-                    if(!hasContentTypeHeader && getMimetype() != null && getMimetype().length() > 0) {\n-                        post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());\n+                    if(!hasContentTypeHeader) {\n+                        if(getMimetype() != null && getMimetype().length() > 0) {\n+                            post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());\n+                        }\n+                        else {\n+                        \t // TODO - is this the correct default?\n+                            post.setRequestHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);\n+                        }\n                     }\n                     \n                     // Just append all the non-empty parameter values, and use that as the post body",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix NPE caused by incorrect change of clear() to clearData()\nClarified code by using testStarted() rather than clear() to initialise accumulator.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-2@564544 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: e3847d9aa41ed0c1438a6c964f9ff83f2809e688",
        "commit": "https://github.com/apache/jmeter/commit/c08994a088cbf2ea0f236651a156c76cc881af38",
        "parent": "https://github.com/apache/jmeter/commit/17ae3c7865d4949134d6545e077df88deb912458",
        "bug_id": "jmeter_176",
        "file": [
            {
                "sha": "ed3669df3860fb129cb87016de3fbbe4dbc2add8",
                "filename": "src/core/org/apache/jmeter/reporters/Summariser.java",
                "blob_url": "https://github.com/apache/jmeter/blob/c08994a088cbf2ea0f236651a156c76cc881af38/src/core/org/apache/jmeter/reporters/Summariser.java",
                "raw_url": "https://github.com/apache/jmeter/raw/c08994a088cbf2ea0f236651a156c76cc881af38/src/core/org/apache/jmeter/reporters/Summariser.java",
                "status": "modified",
                "changes": 46,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/reporters/Summariser.java?ref=c08994a088cbf2ea0f236651a156c76cc881af38",
                "patch": "@@ -96,33 +96,10 @@ public Summariser(String name) {\n \t\tsetName(name);\n \t}\n \n-\t/*\n-\t * This is called once for each occurrence in the test plan, before the\n-\t * start of the test. The super.clear() method clears the name (and all\n-\t * other properties), so it is called last.\n-\t */\n-\tpublic void clearData() {\n-\t\t// System.out.println(\"-- \"+me+this.getName()+\"\n-\t\t// \"+Thread.currentThread().getName());\n-\n-\t\tmyName = this.getName();\n-\n-\t\t// Hashtable is synchronised, but there could be more than one Summariser\n-\t\t// with the same name, so we need to synch.\n-\t\tsynchronized (accumulators) {\n-\t\t\tTotals tots = (Totals) accumulators.get(myName);\n-\t\t\tif (tots != null) {// This can be null (before first sample)\n-\t\t\t\ttots.clear();\n-\t\t\t} else {\n-\t\t\t\t// System.out.println(\"Creating totals for \"+myName);\n-\t\t\t\ttots = new Totals();\n-\t\t\t\taccumulators.put(myName, tots);\n-\t\t\t}\n-\t\t}\n-\n-\t\tsuper.clear();\n+\tpublic void clearData(){\n+\t\t// not used\n \t}\n-\n+\t\n \t/*\n \t * Contains the items needed to collect stats for a summariser\n \t * \n@@ -312,7 +289,7 @@ public void sampleStopped(SampleEvent e) {\n \t * @see org.apache.jmeter.testelement.TestListener#testStarted()\n \t */\n \tpublic void testStarted() {\n-\t\t// not used\n+\t\ttestStarted(\"local\");\n \t}\n \n \t/*\n@@ -331,7 +308,20 @@ public void testEnded() {\n \t * @see org.apache.jmeter.testelement.TestListener#testStarted(java.lang.String)\n \t */\n \tpublic void testStarted(String host) {\n-\t\t// not used\n+\t\tmyName = this.getName();\n+\n+\t\t// Hashtable is synchronised, but there could be more than one Summariser\n+\t\t// with the same name, so we need to synchronise.\n+\t\tsynchronized (accumulators) {\n+\t\t\tTotals tots = (Totals) accumulators.get(myName);\n+\t\t\tif (tots != null) {// This can be null (before first sample)\n+\t\t\t\ttots.clear();\n+\t\t\t} else {\n+\t\t\t\t// System.out.println(\"Creating totals for \"+myName);\n+\t\t\t\ttots = new Totals();\n+\t\t\t\taccumulators.put(myName, tots);\n+\t\t\t}\n+\t\t}\n \t}\n \n \t/*",
                "deletions": 28
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "fixed a NPE with the BarChartGui and LineGraphGui. also changed the design of the reporting tool a bit.\nnow instead of having the charts linked to a table, they can be added to a page directly.\npeter\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@331678 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 6d12726ceccc4e994ea08e1cf80cf78295fe52a8",
        "commit": "https://github.com/apache/jmeter/commit/0a81fd30a03d46f7f6ece89824a16428adc08f80",
        "parent": "https://github.com/apache/jmeter/commit/ffac49d8866aaca32b768ef6823a8b8a5165eb5d",
        "bug_id": "jmeter_177",
        "file": [
            {
                "sha": "85a6fd9a36d68b66983a4331d0f8f1fb7ed30a48",
                "filename": "src/reports/org/apache/jmeter/report/ReportTable.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/ReportTable.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/ReportTable.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/ReportTable.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -25,5 +25,4 @@\n  */\n public interface ReportTable {\n     String[][] getTableData(List data);\n-    List getChartElements();\n }",
                "deletions": 1
            },
            {
                "sha": "d1ad9af7c79ba7ef3631f5d8a822f6232c400fd2",
                "filename": "src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.jmeter.gui.NamePanel;\n import org.apache.jmeter.gui.util.ReportMenuFactory;\n import org.apache.jmeter.gui.util.VerticalPanel;\n+import org.apache.jmeter.testelement.TestElement;\n import org.apache.jmeter.util.JMeterUtils;\n import org.apache.jmeter.visualizers.Printable;\n import org.apache.jorphan.logging.LoggingManager;\n@@ -65,12 +66,9 @@ public String getLabelResource() {\n \t\treturn \"report_page\";\n \t}\n \n-    /**\n     public void configureTestElement(TestElement element) {\n-        log.info(\"calling super.configureTestElement\");\n         super.configureTestElement(element);\n     }\n-    **/\n     \n     /* (non-Javadoc)\n \t * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()",
                "deletions": 3
            },
            {
                "sha": "e57d5236c842c26aab584542dd23662aa0c08fd4",
                "filename": "src/reports/org/apache/jmeter/report/gui/BarChartGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/BarChartGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/BarChartGui.java",
                "status": "modified",
                "changes": 19,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/BarChartGui.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -47,8 +47,8 @@\n         new JLabeledTextField(JMeterUtils.getResString(\"report_chart_caption\"),\n                 Color.white);\n \n-    private JLabeledChoice checkItems = null;\n-\tprivate JLabeledChoice xItems = null;\n+    private JLabeledChoice yItems = new JLabeledChoice();\n+\tprivate JLabeledChoice xItems = new JLabeledChoice();\n \n     public BarChartGui() {\n \t\tsuper();\n@@ -83,7 +83,6 @@ protected void init() {\n         JLabel xLabel = new JLabel(JMeterUtils.getResString(\"report_chart_x_axis\"));\n \t\tHorizontalPanel xpanel = new HorizontalPanel(Color.white);\n \t\txLabel.setBorder(new EmptyBorder(5,2,5,2));\n-        xItems = new JLabeledChoice();\n         xItems.setBackground(Color.white);\n         xItems.setValues(AbstractTable.xitems);\n         xpanel.add(xLabel);\n@@ -94,10 +93,10 @@ protected void init() {\n \t\tJLabel yLabel = new JLabel(JMeterUtils.getResString(\"report_chart_y_axis\"));\n \t\tHorizontalPanel ypanel = new HorizontalPanel(Color.white);\n \t\tyLabel.setBorder(new EmptyBorder(5,2,5,2));\n-        checkItems = new JLabeledChoice();\n-        checkItems.setBackground(Color.white);\n+        yItems.setBackground(Color.white);\n+        yItems.setValues(AbstractTable.items);\n         ypanel.add(yLabel);\n-        ypanel.add(checkItems);\n+        ypanel.add(yItems);\n         options.add(ypanel);\n         options.add(yAxisLabel);\n         options.add(caption);\n@@ -116,7 +115,7 @@ public void modifyTestElement(TestElement element) {\n \t\tthis.configureTestElement(element);\n \t\tBarChart bc = (BarChart)element;\n \t\tbc.setXAxis(xItems.getText());\n-\t\tbc.setYAxis(checkItems.getText());\n+\t\tbc.setYAxis(yItems.getText());\n \t\tbc.setXLabel(xAxisLabel.getText());\n \t\tbc.setYLabel(yAxisLabel.getText());\n         bc.setCaption(caption.getText());\n@@ -126,14 +125,10 @@ public void configure(TestElement element) {\n         super.configure(element);\n         BarChart bc = (BarChart)element;\n         xItems.setText(bc.getXAxis());\n-        checkItems.setText(bc.getYAxis());\n+        yItems.setText(bc.getYAxis());\n         xAxisLabel.setText(bc.getXLabel());\n         yAxisLabel.setText(bc.getYLabel());\n         caption.setText(bc.getCaption());\n-        if (bc.getCheckedItems() != null && bc.getCheckedItems().size() > 0) {\n-        \tString[] its = new String[bc.getCheckedItems().size()];\n-        \tcheckItems.setValues((String[])bc.getCheckedItems().toArray(its));\n-        }\n     }\n     \n }",
                "deletions": 12
            },
            {
                "sha": "a3e6a27f14fd5d89dd5c34aadcce7e6c7a63f495",
                "filename": "src/reports/org/apache/jmeter/report/gui/LineGraphGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/LineGraphGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/LineGraphGui.java",
                "status": "modified",
                "changes": 19,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/LineGraphGui.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -51,8 +51,8 @@\n         new JLabeledTextField(JMeterUtils.getResString(\"report_line_graph_urls\"),\n                 Color.white);\n \n-    private JLabeledChoice checkItems = null;\n-\tprivate JLabeledChoice xItems = null;\n+    private JLabeledChoice yItems = new JLabeledChoice();\n+\tprivate JLabeledChoice xItems = new JLabeledChoice();\n \n     public LineGraphGui() {\n \t\tsuper();\n@@ -87,7 +87,6 @@ protected void init() {\n         JLabel xLabel = new JLabel(JMeterUtils.getResString(\"report_chart_x_axis\"));\n \t\tHorizontalPanel xpanel = new HorizontalPanel(Color.white);\n \t\txLabel.setBorder(new EmptyBorder(5,2,5,2));\n-        xItems = new JLabeledChoice();\n         xItems.setBackground(Color.white);\n         xItems.setValues(AbstractTable.xitems);\n         xpanel.add(xLabel);\n@@ -98,10 +97,10 @@ protected void init() {\n \t\tJLabel yLabel = new JLabel(JMeterUtils.getResString(\"report_chart_y_axis\"));\n \t\tHorizontalPanel ypanel = new HorizontalPanel(Color.white);\n \t\tyLabel.setBorder(new EmptyBorder(5,2,5,2));\n-        checkItems = new JLabeledChoice();\n-        checkItems.setBackground(Color.white);\n+        yItems.setBackground(Color.white);\n+        yItems.setValues(AbstractTable.items);\n         ypanel.add(yLabel);\n-        ypanel.add(checkItems);\n+        ypanel.add(yItems);\n         options.add(ypanel);\n         options.add(yAxisLabel);\n         options.add(caption);\n@@ -121,7 +120,7 @@ public void modifyTestElement(TestElement element) {\n \t\tthis.configureTestElement(element);\n \t\tLineGraph bc = (LineGraph)element;\n \t\tbc.setXAxis(xItems.getText());\n-\t\tbc.setYAxis(checkItems.getText());\n+\t\tbc.setYAxis(yItems.getText());\n \t\tbc.setXLabel(xAxisLabel.getText());\n \t\tbc.setYLabel(yAxisLabel.getText());\n         bc.setCaption(caption.getText());\n@@ -132,14 +131,10 @@ public void configure(TestElement element) {\n         super.configure(element);\n         LineGraph bc = (LineGraph)element;\n         xItems.setText(bc.getXAxis());\n-        checkItems.setText(bc.getYAxis());\n+        yItems.setText(bc.getYAxis());\n         xAxisLabel.setText(bc.getXLabel());\n         yAxisLabel.setText(bc.getYLabel());\n         caption.setText(bc.getCaption());\n         urls.setText(bc.getURLs());\n-        if (bc.getCheckedItems() != null && bc.getCheckedItems().size() > 0) {\n-        \tString[] its = new String[bc.getCheckedItems().size()];\n-        \tcheckItems.setValues((String[])bc.getCheckedItems().toArray(its));\n-        }\n     }\n }",
                "deletions": 12
            },
            {
                "sha": "84d8acfa8f9071f847f328b6650c161a4693008c",
                "filename": "src/reports/org/apache/jmeter/report/gui/ReportPageGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/ReportPageGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/ReportPageGui.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/ReportPageGui.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -98,7 +98,12 @@ public JPopupMenu createPopupMenu() {\n \t\taddMenu.add(ReportMenuFactory.makeMenuItem(new TableGui().getStaticLabel(),\n \t\t\t\tTableGui.class.getName(),\n \t\t\t\t\"Add\"));\n-        // addMenu.add(ReportMenuFactory.makeMenu(ReportMenuFactory.TABLES, \"Add\"));\n+        addMenu.add(ReportMenuFactory.makeMenuItem(new BarChartGui().getStaticLabel(),\n+                BarChartGui.class.getName(),\n+                \"Add\"));\n+        addMenu.add(ReportMenuFactory.makeMenuItem(new LineGraphGui().getStaticLabel(),\n+                LineGraphGui.class.getName(),\n+                \"Add\"));\n         pop.add(addMenu);\n         ReportMenuFactory.addFileMenu(pop);\n         ReportMenuFactory.addEditMenu(pop,true);",
                "deletions": 1
            },
            {
                "sha": "994c0ebb89c194943d817207f996c90b4387921f",
                "filename": "src/reports/org/apache/jmeter/report/gui/TableGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/TableGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/TableGui.java",
                "status": "modified",
                "changes": 8,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/TableGui.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -100,14 +100,6 @@ protected void init() {\n     \n \tpublic JPopupMenu createPopupMenu() {\n         JPopupMenu pop = new JPopupMenu();\n-        JMenu addMenu = new JMenu(JMeterUtils.getResString(\"Add\"));\n-\t\taddMenu.add(ReportMenuFactory.makeMenuItem(new BarChartGui().getStaticLabel(),\n-\t\t\t\tBarChartGui.class.getName(),\n-\t\t\t\t\"Add\"));\n-\t\taddMenu.add(ReportMenuFactory.makeMenuItem(new LineGraphGui().getStaticLabel(),\n-\t\t\t\tLineGraphGui.class.getName(),\n-\t\t\t\t\"Add\"));\n-        pop.add(addMenu);\n         ReportMenuFactory.addFileMenu(pop);\n         ReportMenuFactory.addEditMenu(pop,true);\n         return pop;",
                "deletions": 8
            },
            {
                "sha": "724de0e3ff8571cf388ad7b0ec572971d06306bb",
                "filename": "src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -75,8 +75,12 @@ protected void addObjectToTree(TestElement el) {\n \t\tguiPackage.getTreeModel().insertNodeInto(node,\n \t\t\t\tguiPackage.getTreeListener().getCurrentNode(),\n \t\t\t\tguiPackage.getTreeListener().getCurrentNode().getChildCount());\n-\t\t((TestElement)guiPackage.getTreeListener().getCurrentNode().getUserObject()).addTestElement(el);\n-\t\tguiPackage.getMainFrame().getTree().setSelectionPath(\n-\t\t\t\tnew TreePath(node.getPath()));\n+        TestElement curNode = \n+            (TestElement)guiPackage.getTreeListener().getCurrentNode().getUserObject();\n+        if (curNode != null) {\n+            curNode.addTestElement(el);\n+            guiPackage.getMainFrame().getTree().setSelectionPath(\n+                    new TreePath(node.getPath()));\n+        }\n \t}\n }",
                "deletions": 3
            },
            {
                "sha": "9b4540c3e0b92aa327a3e2e8d3a320c836e2e378",
                "filename": "src/reports/org/apache/jmeter/report/gui/tree/ReportTreeModel.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/tree/ReportTreeModel.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/report/gui/tree/ReportTreeModel.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/report/gui/tree/ReportTreeModel.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -109,9 +109,6 @@ public ReportTreeNode addComponent(TestElement component,\n \t\tguicomp.configure(component);\n \t\tguicomp.modifyTestElement(component);\n \t\tReportGuiPackage.getInstance().getCurrentGui(); // put the gui object back\n-\t\tif (component instanceof AbstractChart) {\n-\t\t\t((AbstractChart)component).setParentTable((AbstractTable)node.getUserObject());\n-\t\t}\n \t\t// to the way it was.\n \t\tReportTreeNode newNode = new ReportTreeNode(component, this);\n ",
                "deletions": 3
            },
            {
                "sha": "273567b50d0875058007f4a93eec24eef2cab9f9",
                "filename": "src/reports/org/apache/jmeter/testelement/AbstractChart.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/AbstractChart.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/AbstractChart.java",
                "status": "modified",
                "changes": 26,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/testelement/AbstractChart.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -17,9 +17,6 @@\n  */\n package org.apache.jmeter.testelement;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n import javax.swing.JComponent;\n \n import org.apache.jmeter.report.ReportChart;\n@@ -41,8 +38,6 @@\n     public static final String REPORT_CHART_TITLE = \"ReportChart.chart.title\";\n     public static final String REPORT_CHART_CAPTION = \"ReportChart.chart.caption\";\n \n-    protected AbstractTable parent = null;\n-    \n     public AbstractChart() {\n \t\tsuper();\n \t}\n@@ -117,27 +112,6 @@ public void setCaption(String caption) {\n         setProperty(REPORT_CHART_CAPTION,caption);\n     }\n     \n-    public void setParentTable(AbstractTable table) {\n-    \tthis.parent = table;\n-    }\n-\n-    /**\n-     * Method returns the items that are checked\n-     * @return\n-     */\n-    public List getCheckedItems() {\n-    \tArrayList checked = new ArrayList();\n-    \tif ( this.parent != null) {\n-        \tfor (int idx=0; idx < AbstractTable.items.length; idx++) {\n-        \t\tif (this.parent.getPropertyAsString(\n-        \t\t\t\tAbstractTable.items[idx]).equals(String.valueOf(true))) {\n-        \t\t\tchecked.add(AbstractTable.items[idx]);\n-        \t\t}\n-        \t}\n-    \t}\n-    \treturn checked;\n-    }\n-    \n     /**\n      * Subclasses will need to implement the method by doing the following:\n      * 1. get the x and y axis",
                "deletions": 26
            },
            {
                "sha": "ddb576be9c6b6d938d44cb696250c7889b22476e",
                "filename": "src/reports/org/apache/jmeter/testelement/AbstractTable.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/AbstractTable.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/AbstractTable.java",
                "status": "modified",
                "changes": 17,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/testelement/AbstractTable.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -17,7 +17,6 @@\n  */\n package org.apache.jmeter.testelement;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.jmeter.report.ReportTable;\n@@ -55,15 +54,12 @@\n     public static final String[] xitems = { REPORT_TABLE_TOTAL,\n     \tREPORT_TABLE_URL };\n     \n-    protected ArrayList children = new ArrayList();\n-    \n     public AbstractTable() {\n \t\tsuper();\n \t}\n \n     public void clear() {\n         super.clear();\n-        children.clear();\n     }\n     \n     public boolean getMean() {\n@@ -139,12 +135,10 @@ public void setErrorRate(String set) {\n     }\n     \n \tpublic void addTestElement(TestElement el) {\n-\t\tsuper.addTestElement(el);\n-        log.info(\"TestElement: \" + el.getClass().getName());\n-\t\tif (el instanceof AbstractChart) {\n-\t\t\t((AbstractChart)el).setParentTable(this);\n-\t\t}\n-        this.children.add(el);\n+        if (el != null) {\n+            super.addTestElement(el);\n+            log.info(\"TestElement: \" + el.getClass().getName());\n+        }\n \t}\n     \n     /**\n@@ -154,7 +148,4 @@ public void addTestElement(TestElement el) {\n      */\n     public abstract String[][] getTableData(List data);\n     \n-    public List getChartElements() {\n-        return this.children;\n-    }\n }",
                "deletions": 13
            },
            {
                "sha": "4ae49bfff1a836cb6f49262bbbdda72086d66654",
                "filename": "src/reports/org/apache/jmeter/testelement/ReportPage.java",
                "blob_url": "https://github.com/apache/jmeter/blob/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/ReportPage.java",
                "raw_url": "https://github.com/apache/jmeter/raw/0a81fd30a03d46f7f6ece89824a16428adc08f80/src/reports/org/apache/jmeter/testelement/ReportPage.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/reports/org/apache/jmeter/testelement/ReportPage.java?ref=0a81fd30a03d46f7f6ece89824a16428adc08f80",
                "patch": "@@ -42,7 +42,6 @@\n      * No-arg constructor.\n      */\n     public ReportPage() {\n-        // setProperty(TestElement.GUI_CLASS,AbstractReportGui.class.getName());\n     }\n \n     public static ReportPage createReportPage(String name) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "fixed a bug with the sampleresults not getting saved. the sampler wasn't setting the response\ndata, so the resultCollector was getting a NPE.\npeter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/branches/rel-2-1@325765 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 91cece5c517c0c566576f8cb140e8aa15c011de7",
        "commit": "https://github.com/apache/jmeter/commit/4f14631fed1d9b6aa0838e4604c21b71c1fe0fdd",
        "parent": "https://github.com/apache/jmeter/commit/684006bb77b822b5e3a6a2bbd4ec0d619cc229b5",
        "bug_id": "jmeter_178",
        "file": [
            {
                "sha": "af735e35beef831fcebfefd0acc9c7faeaa50d9d",
                "filename": "src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4f14631fed1d9b6aa0838e4604c21b71c1fe0fdd/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4f14631fed1d9b6aa0838e4604c21b71c1fe0fdd/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java?ref=4f14631fed1d9b6aa0838e4604c21b71c1fe0fdd",
                "patch": "@@ -288,7 +288,7 @@ public SampleResult sample(Entry entry) {\n             rlabel = JUnitSampler.class.getName();\n         }\n         sresult.setSampleLabel(rlabel);\n-        sresult.setSamplerData(getClassname() + \".\" + getMethod());\n+        sresult.setSamplerData(getClassname() + \".\" + getMethod());   \n         // check to see if the test class is null. if it is, we create\n         // a new instance. this should only happen at the start of a\n         // test run\n@@ -371,13 +371,18 @@ public SampleResult sample(Entry entry) {\n                 sresult.setSuccessful(true);\n                 sresult.setResponseMessage(getSuccess());\n                 sresult.setResponseCode(getSuccessCode());\n+                sresult.setResponseData(\"Not Applicable\".getBytes());\n             }\n         } else {\n             // we should log a warning, but allow the test to keep running\n             sresult.setSuccessful(false);\n             // this should be externalized to the properties\n             sresult.setResponseMessage(\"failed to create an instance of the class\");\n         }\n+        sresult.setBytes(0);\n+        sresult.setContentType(\"text\");\n+        sresult.setDataType(\"Not Applicable\");\n+        sresult.setRequestHeaders(\"Not Applicable\");\n \t\treturn sresult;\n \t}\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Have the component's GUIs change (be rebuilt) when user\nswitches locale.\n\nIncidentally, this fixes an anoying (but harmless) NPE.\n\nPR: 25143\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324115 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 74c3f1d222640354a35087ad2260cead8181ae50",
        "commit": "https://github.com/apache/jmeter/commit/1d71862015dee2aed547620d667caea5fec37556",
        "parent": "https://github.com/apache/jmeter/commit/dd8057b69f00e3eb53052fe8c923ab6c9389ac07",
        "bug_id": "jmeter_179",
        "file": [
            {
                "sha": "e0eca7d39d8f7fad01a344c1e722ae647eff7f83",
                "filename": "src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1d71862015dee2aed547620d667caea5fec37556/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1d71862015dee2aed547620d667caea5fec37556/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "status": "modified",
                "changes": 17,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java?ref=1d71862015dee2aed547620d667caea5fec37556",
                "patch": "@@ -56,8 +56,6 @@\n package org.apache.jmeter.control.gui;\n \n import java.awt.FlowLayout;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n \n import javax.swing.DefaultComboBoxModel;\n import javax.swing.JComboBox;\n@@ -69,7 +67,6 @@\n import org.apache.jmeter.control.Controller;\n import org.apache.jmeter.control.ModuleController;\n import org.apache.jmeter.gui.GuiPackage;\n-import org.apache.jmeter.gui.action.ActionRouter;\n import org.apache.jmeter.gui.tree.JMeterTreeNode;\n import org.apache.jmeter.gui.util.MenuFactory;\n import org.apache.jmeter.testelement.TestElement;\n@@ -186,8 +183,16 @@ private void init()\n         nodesModel = new DefaultComboBoxModel();\n         nodes = new JComboBox(nodesModel);\n         reinitialize();\n-\n-        try\n+        \n+\t\t/* This listener subscription prevents freeing up the GUI when it's no longer in use\n+\t\t * (e.g. on locale change)...\n+\t\t * ... plus I don't think it's really necessary: configure(TestElement) already takes\n+\t\t * care of reinitializing the target combo when we come back to it. And I can't see how\n+\t\t * the tree can change in a relevant way without we leaving this GUI.\n+\t\t * I'll comment it out for the time being:\n+\t\t * TODO: remove once we're convinced it's really unnecessary.\n+\t\t */\n+        /*try\n         {\n             Class addToTree =\n                 Class.forName(\"org.apache.jmeter.gui.action.AddToTree\");\n@@ -205,7 +210,7 @@ public void actionPerformed(ActionEvent e)\n         }\n         catch (ClassNotFoundException e)\n         {\n-        }\n+        }*/\n         modulesPanel.add(nodes);\n         add(modulesPanel);\n     }",
                "deletions": 6
            },
            {
                "sha": "d4e1f7c4a8efecc9157d6a352c69d05202c88ade",
                "filename": "src/core/org/apache/jmeter/gui/GuiPackage.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1d71862015dee2aed547620d667caea5fec37556/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1d71862015dee2aed547620d667caea5fec37556/src/core/org/apache/jmeter/gui/GuiPackage.java",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/gui/GuiPackage.java?ref=1d71862015dee2aed547620d667caea5fec37556",
                "patch": "@@ -70,6 +70,9 @@\n import org.apache.jmeter.testbeans.gui.TestBeanGUI;\n import org.apache.jmeter.testelement.TestElement;\n import org.apache.jmeter.testelement.TestPlan;\n+import org.apache.jmeter.util.JMeterUtils;\n+import org.apache.jmeter.util.LocaleChangeEvent;\n+import org.apache.jmeter.util.LocaleChangeListener;\n import org.apache.jmeter.visualizers.gui.AbstractVisualizer;\n import org.apache.jorphan.collections.HashTree;\n import org.apache.jorphan.logging.LoggingManager;\n@@ -86,7 +89,7 @@\n  * @author Michael Stover\n  * @version $Revision$\n  */\n-public final class GuiPackage\n+public final class GuiPackage implements LocaleChangeListener\n {\n     /** Logging. */\n     private static transient Logger log =\n@@ -138,6 +141,7 @@\n      */\n     private GuiPackage()\n     {\n+    \tJMeterUtils.addLocaleChangeListener(this);\n     }\n     \n     /**\n@@ -611,4 +615,15 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup)\n             popup.requestFocus();\n         }\n     }\n+\n+    /* (non-Javadoc)\n+     * @see org.apache.jmeter.util.LocaleChangeListener#localeChanged(org.apache.jmeter.util.LocaleChangeEvent)\n+     */\n+    public void localeChanged(LocaleChangeEvent event)\n+    {\n+        // Forget about all GUIs we've created so far: we'll need to re-created them all!\n+        guis= new HashMap();\n+        nodesToGui= new HashMap();\n+        testBeanGUIs= new HashMap();\n+    }\n }\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "4a6d466014e0a0c3a37a7e1f4c0185b4de50b845",
                "filename": "src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/1d71862015dee2aed547620d667caea5fec37556/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/1d71862015dee2aed547620d667caea5fec37556/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java?ref=1d71862015dee2aed547620d667caea5fec37556",
                "patch": "@@ -92,7 +92,6 @@\n import org.apache.jmeter.gui.GuiPackage;\n import org.apache.jmeter.gui.JMeterGUIComponent;\n import org.apache.jmeter.gui.UnsharedComponent;\n-import org.apache.jmeter.gui.action.ActionRouter;\n import org.apache.jmeter.gui.tree.JMeterTreeNode;\n import org.apache.jmeter.gui.util.HorizontalPanel;\n import org.apache.jmeter.gui.util.MenuFactory;\n@@ -550,7 +549,18 @@ private JPanel createTargetPanel()\n         panel.add(label);\n         panel.add(targetNodes);\n \n-        try\n+\t\t/* This listener subscription prevents freeing up the GUI when it's no longer in use\n+\t\t * (e.g. on locale change)... plus causes some anoying NPEs in the GUI instance\n+\t\t * created by the menu manager just to find out our name and which menus we\n+\t\t * want to be in...\n+\t\t * ... plus I don't think it's really necessary: configure(TestElement) already takes\n+\t\t * care of reinitializing the target combo when we come back to it. And I can't see how\n+\t\t * the tree can change in a relevant way without we leaving this GUI (since it is very\n+\t\t * unlikely that we will want to record into one of the controllers created by the proxy).\n+\t\t * I'll comment it out for the time being:\n+\t\t * TODO: remove once we're convinced it's really unnecessary.\n+\t\t */\n+        /*try\n         {\n             Class addToTree =\n                 Class.forName(\"org.apache.jmeter.gui.action.AddToTree\");\n@@ -570,7 +580,7 @@ public void actionPerformed(ActionEvent e)\n         {\n             // This should never happen -- throw an Error:\n             throw new Error(e.toString());//JDK1.4: remove .toString()\n-        }\n+        }*/\n         \n         return panel;        \n     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "* Using constants for attribute names.\n* Diferentiated noEdit into not accepting expressions and not accepting\nvalues beyond de editor's tags.\n* Fixed possible NPE in TestBeanGUI.group and .groupDisplayName.\n* Improved comments.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@324090 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 70cc2ffa3fbb9d0d7c7445d30a116c574da47cfc",
        "commit": "https://github.com/apache/jmeter/commit/4d9857f391e890a9784809050ddc5648a0cb3ce9",
        "parent": "https://github.com/apache/jmeter/commit/fd897f442db89e37a87387c04e54ba3671891948",
        "bug_id": "jmeter_180",
        "file": [
            {
                "sha": "c9515efcbc3e59b1df3640d15779626efeec5e8c",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java",
                "status": "modified",
                "changes": 38,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/BeanInfoSupport.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "patch": "@@ -83,15 +83,34 @@\n  * <li>Modifies the property descriptors, bean descriptor, etc. at will.\n  * </ol>\n  * <p>\n- * Without any such modifications, the property descriptors will already\n- * have localized display names and short descriptions, and the bean\n- * descriptor will have a \"resourceBoundle\" attribute to be used for further\n- * localization.\n+ * Even before any such modifications, a resource bundle named xxxResources\n+ * (where xxx is the fully qualified bean class name) will be obtained if\n+ * available and used to localize the following:\n+ * <ul>\n+ * <li>Bean's display name -- from property <b>displayName</b>.\n+ * <li>Properties' display names -- from properties \n+ * <b><i>propertyName</i>.displayName</b>.\n+ * <li>Properties' short descriptions -- from properties\n+ * <b><i>propertyName</i>.shortDescription</b>.\n+ * </ul>\n+ * <p>\n+ * The resource bundle will be stored as the bean descriptor's \"resourceBundle\"\n+ * attribute, so that it can be used for further localization. TestBeanGUI, for\n+ * example, uses it to obtain the group's display names from properties\n+ * <b><i>groupName</i>.displayName</b>.\n  */\n public abstract class BeanInfoSupport implements BeanInfo {\n \n \tprivate static transient Logger log = LoggingManager.getLoggerForClass();\n \n+\t// Some known attribute names, just for convenience:\n+\tpublic static final String TAGS= TestBeanGUI.TAGS;\n+\tpublic static final String NOT_UNDEFINED= TestBeanGUI.NOT_UNDEFINED;\n+\tpublic static final String NOT_EXPRESSION= TestBeanGUI.NOT_EXPRESSION;\n+\tpublic static final String NOT_OTHER= TestBeanGUI.NOT_OTHER;\n+\tpublic static final String DEFAULT= TestBeanGUI.DEFAULT;\n+\tpublic static final String RESOURCE_BUNDLE= TestBeanGUI.RESOURCE_BUNDLE;\n+\n \t/**\n \t * The class for which we're providing the bean info.\n \t */\n@@ -124,7 +143,7 @@ protected BeanInfoSupport(Class beanClass) {\n \t\t\t\tJMeterUtils.getLocale()); \n \n \t\t\t// Store the resource bundle as an attribute of the BeanDescriptor:\n-\t\t\tgetBeanDescriptor().setValue(\"resourceBundle\", resourceBundle);\n+\t\t\tgetBeanDescriptor().setValue(RESOURCE_BUNDLE, resourceBundle);\n \n \t\t\t// Localize the bean name\n \t\t\ttry\n@@ -174,8 +193,7 @@ protected BeanInfoSupport(Class beanClass) {\n \t\t}\n \t\tcatch (MissingResourceException e)\n \t\t{\n-\t\t\tlog.warn(\"Localized strings not available for bean \"+beanClass\n-\t\t\t\t\t\t\t+\" on locale \"+JMeterUtils.getLocale());\n+\t\t\tlog.warn(\"Localized strings not available for bean \"+beanClass);\n \t\t}\n \t}\n \t\n@@ -215,11 +233,11 @@ protected void createPropertyGroup(String group, String[] names)\n \t\tfor (int i=0; i<names.length; i++)\n \t\t{\n \t\t\tPropertyDescriptor p= property(names[i]);\n-\t\t\tp.setValue(\"group\", group);\n-\t\t\tp.setValue(\"order\", new Integer(i));\n+\t\t\tp.setValue(TestBeanGUI.GROUP, group);\n+\t\t\tp.setValue(TestBeanGUI.ORDER, new Integer(i));\n \t\t}\n \t\tnumCreatedGroups++;\n-\t\tgetBeanDescriptor().setValue(\"group.\"+group+\".order\",\n+\t\tgetBeanDescriptor().setValue(TestBeanGUI.ORDER(group),\n \t\t\tnew Integer(numCreatedGroups));\n \t}\n ",
                "deletions": 10
            },
            {
                "sha": "c4bee039c94fa5e3c96cacc19d6e0d299e477613",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/FileEditor.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "patch": "@@ -107,7 +107,7 @@ public FileEditor()\n \t\teditor= new WrapperEditor(\n \t\t\tnew SimpleFileEditor(),\n \t\t\tnew ComboStringEditor(),\n-\t\t\ttrue, true);\n+\t\t\ttrue, true, true);\n \n \t\t// Create a panel containing the combo and the button:\n \t\tpanel= new JPanel(new BorderLayout(5,0));",
                "deletions": 1
            },
            {
                "sha": "fbbe8c093a8c2c71460a1ac7527d16db688b4b42",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java",
                "status": "modified",
                "changes": 140,
                "additions": 91,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "patch": "@@ -122,24 +122,28 @@\n  * <dl>\n  * <dt>group: String</dt>\n  * <dd>Group under which the property should be shown in the GUI. The string is\n- * also used as a group title. The default group is \"\".</dd>\n+ * also used as a group title (but see comment on resourceBundle below). The\n+ * default group is \"\".</dd>\n  * <dt>order: Integer</dt>\n  * <dd>Order in which the property will be shown in its group. A smaller\n  * integer means higher up in the GUI. The default order is 0. Properties\n  * of equal order are sorted alphabetically.</dd>\n  * <dt>tags: String[]</dt>\n  * <dd>List of values to be offered for the property in addition to those\n  * offered by its property editor.</dd>\n- * <dt>noUndefined: Boolean</dt>\n+ * <dt>notUndefined: Boolean</dt>\n  * <dd>If true, the property should not be left undefined. A <b>default</b>\n  * attribute must be provided if this is set.</dd>\n- * <dd>noEdit: Boolean</dd>\n- * <dd>If true, the property content should not be edited manually, that is: it\n- * should always be one of the tags values.</dt>\n+ * <dd>notExpression: Boolean</dd>\n+ * <dd>If true, the property content should always be constant: JMeter\n+ * 'expressions' (strings using ${var}, etc...) can't be used.</dt>\n+ * <dd>notOther: Boolean</dd>\n+ * <dd>If true, the property content must always be one of the tags values or\n+ * null.</dt>\n  * <dt>default: Object</dt>\n  * <dd>Initial value for the property's GUI. Must be provided and be non-null\n- * if <b>noUndefined</b> is set. Must be one of the provided tags (or null) if\n- * <b>noEdit</b> is set.\n+ * if <b>notUndefined</b> is set. Must be one of the provided tags (or null) if\n+ * <b>notOther</b> is set.\n  * </dl>\n  * <p>\n  * The following BeanDescriptor attributes are also understood:\n@@ -151,15 +155,29 @@\n  * in the GUI. The default order is 0. Groups of equal order are sorted\n  * alphabetically.</dd>\n  * <dt>resourceBundle: ResourceBundle</dt>\n- * <dd>A resource bundle to be used for GUI localization. Group display names,\n- * for example, will be obtained from property \"<i>group</i>.displayName\" if\n+ * <dd>A resource bundle to be used for GUI localization: group display names\n+ * will be obtained from property \"<b><i>group</i>.displayName</b>\" if\n  * available (where <b><i>group</i></b> is the group name).\n  * </dl>\n  */\n public class TestBeanGUI extends AbstractJMeterGuiComponent\n {\n     private static Logger log = LoggingManager.getLoggerForClass();\n \n+\tpublic static final String GROUP= \"group\";\n+\tpublic static final String ORDER= \"order\";\n+\tpublic static final String TAGS= \"tags\";\n+\tpublic static final String NOT_UNDEFINED= \"notUndefined\";\n+\tpublic static final String NOT_EXPRESSION= \"notExpression\";\n+\tpublic static final String NOT_OTHER= \"notOther\";\n+\tpublic static final String DEFAULT= \"default\";\n+\tpublic static final String RESOURCE_BUNDLE= \"resourceBundle\";\n+\tpublic static final String ORDER(String group) {\n+\t\treturn \"group.\"+group+\".order\";\n+\t}\n+\n+\tpublic static final String DEFAULT_GROUP= \"\";\n+\n     /**\n      * Class of the objects being edited.\n      */\n@@ -315,7 +333,7 @@ public TestBeanGUI(Class testBeanClass)\n \t\t\teditors[i]= propertyEditor;\n \n \t\t\t// Initialize the editor with the provided default value or null:\n-            setEditorValue(i, descriptors[i].getValue(\"default\"));\n+            setEditorValue(i, descriptors[i].getValue(DEFAULT));\n         }\n \n \t\t// Obtain message formats:\n@@ -340,7 +358,7 @@ private WrapperEditor createWrapperEditor(\n \t\t\tPropertyEditor typeEditor, PropertyDescriptor descriptor)\n \t{\n \t\tString[] editorTags= typeEditor.getTags();\n-\t\tString[] additionalTags= (String[])descriptor.getValue(\"tags\");\n+\t\tString[] additionalTags= (String[])descriptor.getValue(TAGS);\n \t\tString[] tags= null;\n \t\tif (editorTags == null) tags= additionalTags;\n \t\telse if (additionalTags == null) tags= editorTags;\n@@ -350,57 +368,80 @@ private WrapperEditor createWrapperEditor(\n \t\t\tfor (int i=0; i<editorTags.length; i++) tags[j++]= editorTags[i];\n \t\t\tfor (int i=0; i<additionalTags.length; i++) tags[j++]= additionalTags[i];\n \t\t}\n-\t\t\n-\t\tboolean noUndefined=\n-\t\t\tBoolean.TRUE.equals(descriptor.getValue(\"noUndefined\"));\n-\t\tboolean noEdit=\n-\t\t\tBoolean.TRUE.equals(descriptor.getValue(\"noEdit\"));\n+\n+\t\tboolean notNull=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_UNDEFINED));\n+\t\tboolean notExpression=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_EXPRESSION));\n+\t\tboolean notOther=\n+\t\t\tBoolean.TRUE.equals(descriptor.getValue(NOT_OTHER));\n \n \t\tPropertyEditor guiEditor;\n-\t\tif (noUndefined && tags==null)\n+\t\tif (notNull && tags==null)\n \t\t{\n \t\t\tguiEditor= new FieldStringEditor();\n \t\t}\n \t\telse\n \t\t{\n \t\t\tComboStringEditor e= new ComboStringEditor();\n-\t\t\te.setNoUndefined(noUndefined);\n-\t\t\te.setNoEdit(noEdit);\n+\t\t\te.setNoUndefined(notNull);\n+\t\t\te.setNoEdit(notExpression && notOther);\n \t\t\te.setTags(tags);\n \t\t\t\n \t\t\tguiEditor= e;\n \t\t}\n \n \t\tWrapperEditor wrapper= new WrapperEditor(\n \t\t\ttypeEditor, guiEditor,\n-\t\t\t!noUndefined, // acceptsNull\n-\t\t\t!noEdit // acceptsExpressions TODO: can be finer\n+\t\t\t!notNull, // acceptsNull\n+\t\t\t!notExpression, // acceptsExpressions\n+\t\t\t!notOther // acceptsOther\n \t\t\t);\n \n-\t\tObject defaultValue= descriptor.getValue(\"default\");\n+\t\tObject defaultValue= descriptor.getValue(DEFAULT);\n \t\t\n-\t\tif (guiEditor instanceof ComboStringEditor && !noEdit)\n+\t\ttry\n \t\t{\n-\t\t\t// Provide an initial edit value:\n-\t\t\tif (tags != null)\n-\t\t\t{\n-\t\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(tags[0]);\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// 'expressions' are currently always valid on\n-\t\t\t\t// editable fields: TODO: could be finer\n-\t\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(\"${}\");\n-\t\t\t}\n-\t\t\t// TODO: I don't like this solution. We could make a\n-\t\t\t// more convenient approach if we knew whether the property\n-\t\t\t// accepts expressions or not, whether it accepts any \n-\t\t\t// values beyond the provided tags or not, etc... \n-\t\t\t// ... plus we could define a \"initialEditValue\" property descriptor\n-\t\t\t// attribute to explicitly specify which value should be used. \n+\t\t\twrapper.setValue(defaultValue);\n+\t\t}\n+\t\tcatch (IllegalArgumentException e)\n+\t\t{\n+\t\t\tlog.error(\"The default value for property \" + descriptor.getName()\n+\t\t\t\t+\" is not valid. Or a default value was not provided and \"\n+\t\t\t\t+\" property attribute notUndefined is set to true.\");\n+\t\t\tthrow new Error(e.toString()); // programming error, so bail out.\n \t\t}\n \n-\t\twrapper.setValue(defaultValue);\n+\t\tif (guiEditor instanceof ComboStringEditor)\n+\t\t{\n+\t\t\t// Provide an initial edit value if necessary:\n+\t\t\n+\t\t\t/*\n+\t\t\t\tWhat follows encodes this correspondence:\n+\n+\t\t\t\t ot  ex  nl -- default or 1st tag or ${}\n+\t\t\t\t ot  ex !nl -- \"\": use \"\" or last valid value\n+\t\t\t\t ot !ex  nl -- default or 1st tag or \"\" or last valid value :-(\n+\t\t\t\t ot !ex !nl -- \"\": use \"\" or last valid value\n+\t\t\t\t!ot  ex  nl -- ${}\n+\t\t\t\t!ot  ex !nl -- ${}\n+\t\t\t\t!ot !ex  nl -- not necessary (not editable)\n+\t\t\t\t!ot !ex !nl -- not necessary (not editable)\n+\n+\t\t\t\t[ot=other, ex=expressions, nl=null]\n+\n+\t\t\t*/ \n+\n+\t\t\tString v;\n+\t\t\tif (notOther) v=\"${}\";\n+\t\t\telse if (notNull) v= \"\";\n+\t\t\telse if (defaultValue != null) v= wrapper.getAsText();\n+\t\t\telse if (tags != null) v= tags[1];\n+\t\t\telse if (notExpression) v= \"\";\n+\t\t\telse v=\"${}\";\n+\n+\t\t\t((ComboStringEditor)guiEditor).setInitialEditValue(v);\n+\t\t}\n \n \t\treturn wrapper;\n \t}\n@@ -461,7 +502,7 @@ public void configure(TestElement element)\n \t\t\t\t// so I'll bail out.\n \t\t\t\tthrow new Error(\"Bad property value.\"+e);\n \t\t\t\t// TODO: review this and possibly change to:\n-\t\t\t\t// setEditorValue(i, descriptors[i].getValue(\"default\"); \n+\t\t\t\t// setEditorValue(i, descriptors[i].getValue(DEFAULT); \n \t\t\t}\n \t\t}\n     }\n@@ -672,7 +713,7 @@ private void init()\n \t\tcp.weightx= 1.0;\n \n \t\tJPanel currentPanel= mainPanel;\n-\t\tString currentGroup= \"\";\n+\t\tString currentGroup= DEFAULT_GROUP;\n \t\tint y=0;\n \t\t\n         for (int i=0; i<editors.length; i++)\n@@ -780,8 +821,8 @@ private JLabel createLabel(PropertyDescriptor desc)\n \t */\n \tprivate String group(PropertyDescriptor d)\n \t{\n-\t\tString group= (String)d.getValue(\"group\");\n-\t\tif (group == null) group= \"\";\n+\t\tString group= (String)d.getValue(GROUP);\n+\t\tif (group == null) group= DEFAULT_GROUP;\n \t\treturn group;\n \t}\n \n@@ -792,8 +833,9 @@ private String groupDisplayName(String group)\n \t{\n \t\ttry {\n \t\t\tResourceBundle b= (ResourceBundle)\n-\t\t\t\tbeanInfo.getBeanDescriptor().getValue(\"resourceBundle\");\n-\t\t\treturn b.getString(group+\".displayName\");\n+\t\t\t\tbeanInfo.getBeanDescriptor().getValue(RESOURCE_BUNDLE);\n+\t\t\tif (b == null) return group;\n+\t\t\telse return b.getString(group+\".displayName\");\n \t\t}\n \t\tcatch (MissingResourceException e)\n \t\t{\n@@ -840,7 +882,7 @@ private int compare(PropertyDescriptor d1, PropertyDescriptor d2)\n \t\tprivate Integer groupOrder(String group)\n \t\t{\n \t\t\tInteger order= (Integer)beanInfo.getBeanDescriptor()\n-\t\t\t\t\t.getValue(\"group.\"+group+\".order\");\n+\t\t\t\t\t.getValue(ORDER(group));\n \t\t\tif (order == null) order= new Integer(0);\n \t\t\treturn order;\n \t\t}\n@@ -853,7 +895,7 @@ private Integer groupOrder(String group)\n \t\t */\n \t\tprivate Integer propertyOrder(PropertyDescriptor d)\n \t\t{\n-\t\t\tInteger order= (Integer)d.getValue(\"order\");\n+\t\t\tInteger order= (Integer)d.getValue(ORDER);\n \t\t\tif (order == null) order= new Integer(0);\n \t\t\treturn order;\n \t\t}",
                "deletions": 49
            },
            {
                "sha": "61cd2ba86c9b0af00a6b44a4a7949a2c40c7e3b5",
                "filename": "src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "blob_url": "https://github.com/apache/jmeter/blob/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "raw_url": "https://github.com/apache/jmeter/raw/4d9857f391e890a9784809050ddc5648a0cb3ce9/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java",
                "status": "modified",
                "changes": 66,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java?ref=4d9857f391e890a9784809050ddc5648a0cb3ce9",
                "patch": "@@ -111,6 +111,11 @@\n \t */\n \tboolean acceptsExpressions;\n \n+\t/**\n+\t * Whether to allow any constant values different from the provided tags. \n+\t */\n+\tboolean acceptsOther;\n+\n     /**\n    \t * Keep track of the last valid value in the editor, so that we can\n    \t * revert to it if the user enters an invalid value.\n@@ -148,13 +153,17 @@ private static Class objectType(Class type)\n     }\n */\n \tpublic WrapperEditor(\n-\t\t\tPropertyEditor typeEditor, PropertyEditor guiEditor,\n-\t\t\tboolean acceptsNull, boolean acceptsExpressions) {\n+\t\t\tPropertyEditor typeEditor, \n+\t\t\tPropertyEditor guiEditor,\n+\t\t\tboolean acceptsNull, \n+\t\t\tboolean acceptsExpressions, \n+\t\t\tboolean acceptsOther) {\n \t\tsuper();\n \t\tthis.typeEditor= typeEditor;\n \t\tthis.guiEditor= guiEditor;\n \t\tthis.acceptsNull= acceptsNull;\n \t\tthis.acceptsExpressions= acceptsExpressions;\n+\t\tthis.acceptsOther= acceptsOther;\n \t\t\n \t\tguiEditor.addPropertyChangeListener(this);\n \t}\n@@ -169,6 +178,28 @@ public Component getCustomEditor()\n \t\treturn guiEditor.getCustomEditor();\n \t}\n \n+\tpublic String[] getTags()\n+\t{\n+\t\treturn guiEditor.getTags();\n+\t}\n+\n+\t/**\n+\t * Determine wheter a string is one of the known tags.\n+\t * \n+\t * @param text\n+\t * @return true iif text equals one of the getTags()\n+\t */\n+\tprivate boolean isATag(String text)\n+\t{\n+\t\tString[] tags= getTags();\n+\t\tif (tags == null) return false;\n+\t\tfor (int i=0; i<tags.length; i++)\n+\t\t{\n+\t\t\tif (tags[i].equals(text)) return true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n     /**\n  \t * Determine whether a string is a valid value for the property.\n    \t * \n@@ -182,6 +213,14 @@ private boolean isValidValue(String text)\n     \tif (acceptsExpressions && isExpression(text)) return true;\n \n     \t// Not an expression (isn't or can't be), not null.\n+    \t\n+\t\t// The known tags are assumed to be valid:\n+\t\tif (isATag(text)) return true;\n+\t\t\n+\t\t// Was not a tag, so if we can't accept other values...\n+\t\tif (! acceptsOther) return false;\n+\t\t\n+\t\t// Delegate the final check to the typeEditor:\n     \ttry\n     \t{\n     \t\ttypeEditor.setAsText(text);\n@@ -223,7 +262,8 @@ private final void shouldNeverHappen(Exception e) throws Error\n \t * Check if a string is a valid JMeter 'expression'.\n \t * <p>\n \t * The current implementation is very basic: it just accepts any\n-\t * string containing \"${\" as a valid expression. TODO: improve.\n+\t * string containing \"${\" as a valid expression.\n+\t * TODO: improve, but keep returning true for \"${}\". \n \t */\n \tprivate final boolean isExpression(String text)\n \t{\n@@ -265,6 +305,10 @@ public Object getValue()\n     \t\telse\n     \t\t{\n     \t\t\t// not an expression (isn't or can't be), not null.\n+\t\t\t\t\n+\t\t\t\t// a check, just in case:\n+\t\t\t\tif (! acceptsOther && ! isATag(text)) shouldNeverHappen();\n+\n     \t\t\ttry\n     \t\t\t{\n     \t\t\t\ttypeEditor.setAsText(text);\n@@ -300,7 +344,7 @@ public void setValue(Object value)\n     \t\t\t\t+ \":\"\n     \t\t\t\t+ value);\n     \t}\n-    \n+\n     \tif (value == null)\n     \t{\n     \t\tif (!acceptsNull) throw new IllegalArgumentException();\n@@ -315,6 +359,8 @@ else if (acceptsExpressions && isExpression(value))\n \t\t\t// Not an expression (isn't or can't be), not null.\n     \t\ttypeEditor.setValue(value); // may throw IllegalArgumentExc.\n     \t\ttext= typeEditor.getAsText();\n+    \t\t\n+    \t\tif (! acceptsOther && ! isATag(text)) throw new IllegalArgumentException();\n     \t}\n \n     \tguiEditor.setValue(text);\n@@ -342,6 +388,9 @@ else if (!acceptsExpressions || !isExpression(text))\n \t\t\t\tshouldNeverHappen(e);\n \t\t\t}\n \t\t\ttext= typeEditor.getAsText();\n+\n+\t\t\t// a check, just in case:\n+\t\t\tif (! acceptsOther && ! isATag(text)) shouldNeverHappen();\n     \t}\n     \n     \tif (log.isDebugEnabled())\n@@ -359,10 +408,10 @@ public void setAsText(String text) throws IllegalArgumentException\n \t\t}\n     \t\t\n \t\tString value;\n-    \t\t\n+\n \t\tif (text == null)\n \t\t{\n-\t\t\tif (!acceptsNull) shouldNeverHappen();\n+\t\t\tif (! acceptsNull) throw new IllegalArgumentException();\n \t\t\tvalue= null;\n \t\t}\n \t\telse \n@@ -373,13 +422,14 @@ public void setAsText(String text) throws IllegalArgumentException\n \t\t\t}\n \t\t\telse\n \t\t\t{\n+\t\t\t\t// Some editors do tiny transformations (e.g. \"true\" to \"True\",...):\n \t\t\t\ttypeEditor.setAsText(text); // may throw IllegalArgumentException\n \t\t\t\tvalue= typeEditor.getAsText();\n+\t\t\t\t\n+\t\t\t\tif (! acceptsOther && ! isATag(text)) throw new IllegalArgumentException();\n \t\t\t}\n \t\t}\n \n-\t\t// TODO: if (NOT A TAG: && noEdit) shouldNeverHappen();\n-    \n \t\tguiEditor.setValue(value);\n \n \t\tfirePropertyChange();",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fix for bug 19499.  We were getting a NullPointerException while comparing properties.  The compareTo method now checks for null.\nWe don't think the properties should actually be null, so I'm generating a warning message so we can look into the root cause.\nIn any case, with this change I can add a MailerVisualizer to my test plan and save the plan.\nPR: 19499\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323242 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 05947f38384218cb1668364b9fc47a6831819dcb",
        "commit": "https://github.com/apache/jmeter/commit/62c14c90da89da9d63984de8e542b4e9ab1b7744",
        "parent": "https://github.com/apache/jmeter/commit/5d306c6cc402993d6776f6274683d6620ae19fe6",
        "bug_id": "jmeter_181",
        "file": [
            {
                "sha": "68d05322fdd777ef8f4206f29bfea73c7054b483",
                "filename": "src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "blob_url": "https://github.com/apache/jmeter/blob/62c14c90da89da9d63984de8e542b4e9ab1b7744/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "raw_url": "https://github.com/apache/jmeter/raw/62c14c90da89da9d63984de8e542b4e9ab1b7744/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/core/org/apache/jmeter/testelement/property/AbstractProperty.java?ref=62c14c90da89da9d63984de8e542b4e9ab1b7744",
                "patch": "@@ -272,7 +272,25 @@ public int compareTo(Object arg0)\n     {\n         if (arg0 instanceof JMeterProperty)\n         {\n-            return getStringValue().compareTo(((JMeterProperty) arg0).getStringValue());\n+            // We don't expect the string values to ever be null.  But (as in\n+            // bug 19499) sometimes they are.  So have null compare less than\n+            // any other value.  Log a warning so we can try to find the root\n+            // cause of the null value.\n+            String val = getStringValue();\n+            if (val == null) {\n+                log.warn(\n+                    \"Warning: Unexpected null value for property: \" + name);\n+                \n+                if (((JMeterProperty)arg0).getStringValue() == null) {\n+                    // Two null values -- return equal\n+                    return 0;\n+                } else {\n+                    return -1;\n+                }\n+            }\n+            \n+            return getStringValue().compareTo(\n+                ((JMeterProperty) arg0).getStringValue());\n         }\n         else\n         {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jmeter",
        "message": "Fixed a NullPointerException in the tests\nPR:\nObtained from:\nSubmitted by:\t\nReviewed by:\t\nCVS: ----------------------------------------------------------------------\nCVS: PR:\nCVS:   If this change addresses a PR in the problem report tracking\nCVS:   database, then enter the PR number(s) here.\nCVS: Obtained from:\nCVS:   If this change has been taken from another system, such as NCSA,\nCVS:   then name the system in this line, otherwise delete it.\nCVS: Submitted by:\nCVS:   If this code has been contributed to Apache by someone else; i.e.,\nCVS:   they sent us a patch or a new module, then include their name/email\nCVS:   address here. If this is your work then delete this line.\nCVS: Reviewed by:\nCVS:   If we are doing pre-commit code reviews and someone else has\nCVS:   reviewed your changes, include their name(s) here.\nCVS:   If you have not had it reviewed then delete this line.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/jmeter/trunk@323140 13f79535-47bb-0310-9956-ffa450edef68\n\nFormer-commit-id: 582cd706926122bc2fcb8d5b78bd5d6575208c03",
        "commit": "https://github.com/apache/jmeter/commit/67b3e104f114d236646931437ec94beee7c6d9fd",
        "parent": "https://github.com/apache/jmeter/commit/f31570879d16de816cff34654240a767420ee9ef",
        "bug_id": "jmeter_182",
        "file": [
            {
                "sha": "bac3695a36d5bd6720ce44830e5943aa0479dd7e",
                "filename": "src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "blob_url": "https://github.com/apache/jmeter/blob/67b3e104f114d236646931437ec94beee7c6d9fd/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "raw_url": "https://github.com/apache/jmeter/raw/67b3e104f114d236646931437ec94beee7c6d9fd/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jmeter/contents/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java?ref=67b3e104f114d236646931437ec94beee7c6d9fd",
                "patch": "@@ -165,9 +165,12 @@ public TestElement createTestElement() {\n \t */\n \tpublic void modifyTestElement(TestElement element) {\n \t\tconfigureTestElement(element);\n-\t\tselected = ((TreeNodeWrapper)nodesModel.getSelectedItem()).getTreeNode();\n-\t\tif ( selected != null ) {\n-\t\t\t((ModuleController)element).setSelectedNode( selected );\n+\t\tTreeNodeWrapper tnw = (TreeNodeWrapper)nodesModel.getSelectedItem();\n+\t\tif ( tnw != null ) {\n+\t\t\tselected = tnw.getTreeNode();\n+\t\t\tif ( selected != null ) {\n+\t\t\t\t((ModuleController)element).setSelectedNode( selected );\n+\t\t\t}\n \t\t}\n \t}\n ",
                "deletions": 3
            }
        ]
    }
]