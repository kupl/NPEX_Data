{
    "cxf-fediz_1481204": {
        "bug_id": "cxf-fediz_1481204",
        "commit": "https://github.com/apache/cxf-fediz/commit/14812049396f321702e920863d1f6a48cd18e081",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/14812049396f321702e920863d1f6a48cd18e081/examples/wsclientWebapp/README.txt",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/examples/wsclientWebapp/README.txt?ref=14812049396f321702e920863d1f6a48cd18e081",
                "deletions": 1,
                "filename": "examples/wsclientWebapp/README.txt",
                "patch": "@@ -55,7 +55,7 @@ Demo Web Service\n The main and only code lives in the class GreeterImpl. It reads the authenticated principal from the JAX-WS WebServiceContext\n and returns the principal name to the Web Service Client (Web Application).\n \n-The interesting pieces are in beans.xml and the WS-SecurityPolicy definition in the WSDL hello_world.wsdl.\n+The interesting pieces are in applicationContext.xml and the WS-SecurityPolicy definition in the WSDL hello_world.wsdl.\n \n There is no security related programming required. CXF processes the information in the Spring configuration and\n the policy document and enforces that.",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/14812049396f321702e920863d1f6a48cd18e081/examples/wsclientWebapp/README.txt",
                "sha": "a3f5e73bf296f1485e033c7bc72d3bd5fb6ce829",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/main/java/org/apache/cxf/fediz/core/saml/SAMLTokenValidator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/core/src/main/java/org/apache/cxf/fediz/core/saml/SAMLTokenValidator.java?ref=14812049396f321702e920863d1f6a48cd18e081",
                "deletions": 4,
                "filename": "plugins/core/src/main/java/org/apache/cxf/fediz/core/saml/SAMLTokenValidator.java",
                "patch": "@@ -178,9 +178,9 @@ public TokenValidatorResponse validateAndProcessToken(Element token,\n \n             List<String> roles = null;\n             FederationProtocol fp = (FederationProtocol)config.getProtocol();\n-            URI roleURI = URI.create(fp.getRoleURI());\n-            String delim = fp.getRoleDelimiter();\n-            if (roleURI != null) {\n+            if (fp.getRoleURI() != null) {\n+                URI roleURI = URI.create(fp.getRoleURI());\n+                String delim = fp.getRoleDelimiter();\n                 for (Claim c : claims) {\n                     URI claimURI = URI.create(c.getNamespace() + \"/\"\n                             + c.getClaimType());\n@@ -204,7 +204,7 @@ public TokenValidatorResponse validateAndProcessToken(Element token,\n                     }\n                 }\n             }\n-\n+            \n             SAMLTokenPrincipal p = new SAMLTokenPrincipal(assertion);\n \n             TokenValidatorResponse response = new TokenValidatorResponse(",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/main/java/org/apache/cxf/fediz/core/saml/SAMLTokenValidator.java",
                "sha": "9cc4b5f59140a5ed268efe36bf21d3ea33044d16",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/test/java/org/apache/cxf/fediz/core/AbstractSAMLCallbackHandler.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/core/src/test/java/org/apache/cxf/fediz/core/AbstractSAMLCallbackHandler.java?ref=14812049396f321702e920863d1f6a48cd18e081",
                "deletions": 1,
                "filename": "plugins/core/src/test/java/org/apache/cxf/fediz/core/AbstractSAMLCallbackHandler.java",
                "patch": "@@ -170,6 +170,21 @@ protected void createAndSetStatement(SubjectBean subjectBean, SAMLCallback callb\n         } else if (statement == Statement.ATTR) {\n             AttributeStatementBean attrStateBean = new AttributeStatementBean();\n             \n+            if (this.roles == null) {\n+                AttributeBean attributeBean = new AttributeBean();\n+                if (subjectBean != null) {\n+                    attrStateBean.setSubject(subjectBean);\n+                    attributeBean.setSimpleName(\"name\");\n+                    attributeBean.setQualifiedName(\"dummy-ns\");\n+                } else {\n+                    attributeBean.setQualifiedName(\"dummy-ns\");\n+                }\n+                attributeBean.setAttributeValues(Collections.singletonList(\"myvalue\"));\n+                attrStateBean.setSamlAttributes(Collections.singletonList(attributeBean));\n+                callback.setAttributeStatementData(Collections.singletonList(attrStateBean));\n+                return;\n+            }\n+            \n             if (this.multiValueType.equals(MultiValue.MULTI_VALUE)\n                 || this.multiValueType.equals(MultiValue.ENC_VALUE)) {\n //              <saml:Attribute xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"\n@@ -226,7 +241,6 @@ protected void createAndSetStatement(SubjectBean subjectBean, SAMLCallback callb\n                 }\n                 attrStateBean.setSamlAttributes(attrBeans);\n             }\n-            \n             callback.setAttributeStatementData(Collections.singletonList(attrStateBean));\n                        \n         } else {",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/test/java/org/apache/cxf/fediz/core/AbstractSAMLCallbackHandler.java",
                "sha": "42c839a306d505ab5fc25db87d7d7c86b4bb43a0",
                "status": "modified"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/test/java/org/apache/cxf/fediz/core/FederationProcessorTest.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/core/src/test/java/org/apache/cxf/fediz/core/FederationProcessorTest.java?ref=14812049396f321702e920863d1f6a48cd18e081",
                "deletions": 0,
                "filename": "plugins/core/src/test/java/org/apache/cxf/fediz/core/FederationProcessorTest.java",
                "patch": "@@ -180,6 +180,81 @@ public void validateSignInInvalidWResult() throws Exception {\n         }\n     }\n     \n+    /**\n+     * Validate SAML 2 token which doesn't include the role SAML attribute\n+     */\n+    @org.junit.Test\n+    public void validateSAML2TokenWithoutRoles() throws Exception {\n+        SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();\n+        callbackHandler.setStatement(SAML2CallbackHandler.Statement.ATTR);\n+        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_BEARER);\n+        callbackHandler.setIssuer(TEST_RSTR_ISSUER);\n+        callbackHandler.setSubjectName(TEST_USER);\n+        callbackHandler.setRoles(null);\n+        ConditionsBean cp = new ConditionsBean();\n+        cp.setAudienceURI(TEST_AUDIENCE);\n+        callbackHandler.setConditions(cp);\n+        \n+        SAMLParms samlParms = new SAMLParms();\n+        samlParms.setCallbackHandler(callbackHandler);\n+        AssertionWrapper assertion = new AssertionWrapper(samlParms);\n+        String rstr = createSamlToken(assertion, \"mystskey\", true);\n+        \n+        FederationRequest wfReq = new FederationRequest();\n+        wfReq.setWa(FederationConstants.ACTION_SIGNIN);\n+        wfReq.setWresult(rstr);\n+        \n+        configurator = null;\n+        FederationContext config = getFederationConfigurator().getFederationContext(\"ROOT\");\n+        \n+        FederationProcessor wfProc = new FederationProcessorImpl();\n+        FederationResponse wfRes = wfProc.processRequest(wfReq, config);\n+        \n+        Assert.assertEquals(\"Principal name wrong\", TEST_USER,\n+                            wfRes.getUsername());\n+        Assert.assertEquals(\"Issuer wrong\", TEST_RSTR_ISSUER, wfRes.getIssuer());\n+        Assert.assertEquals(\"No roles must be found\", null, wfRes.getRoles());\n+        Assert.assertEquals(\"Audience wrong\", TEST_AUDIENCE, wfRes.getAudience());\n+    }\n+    \n+    /**\n+     * Validate SAML 2 token which includes role attribute\n+     * but RoleURI is not configured\n+     */\n+    @org.junit.Test\n+    public void validateSAML2TokenRoleURINotConfigured() throws Exception {\n+        SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();\n+        callbackHandler.setStatement(SAML2CallbackHandler.Statement.ATTR);\n+        callbackHandler.setConfirmationMethod(SAML2Constants.CONF_BEARER);\n+        callbackHandler.setIssuer(TEST_RSTR_ISSUER);\n+        callbackHandler.setSubjectName(TEST_USER);\n+        ConditionsBean cp = new ConditionsBean();\n+        cp.setAudienceURI(TEST_AUDIENCE);\n+        callbackHandler.setConditions(cp);\n+        \n+        SAMLParms samlParms = new SAMLParms();\n+        samlParms.setCallbackHandler(callbackHandler);\n+        AssertionWrapper assertion = new AssertionWrapper(samlParms);\n+        String rstr = createSamlToken(assertion, \"mystskey\", true);\n+        \n+        FederationRequest wfReq = new FederationRequest();\n+        wfReq.setWa(FederationConstants.ACTION_SIGNIN);\n+        wfReq.setWresult(rstr);\n+        \n+        configurator = null;\n+        FederationContext config = getFederationConfigurator().getFederationContext(\"ROOT\");\n+        ((FederationProtocol)config.getProtocol()).setRoleURI(null);\n+        \n+        FederationProcessor wfProc = new FederationProcessorImpl();\n+        FederationResponse wfRes = wfProc.processRequest(wfReq, config);\n+        \n+        Assert.assertEquals(\"Principal name wrong\", TEST_USER,\n+                            wfRes.getUsername());\n+        Assert.assertEquals(\"Issuer wrong\", TEST_RSTR_ISSUER, wfRes.getIssuer());\n+        Assert.assertEquals(\"Two roles must be found\", null, wfRes.getRoles());\n+        Assert.assertEquals(\"Audience wrong\", TEST_AUDIENCE, wfRes.getAudience());\n+    }\n+    \n     /**\n      * Validate SAML 2 token which includes the role attribute with 2 values\n      * Roles are encoded as a multi-value saml attribute",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/14812049396f321702e920863d1f6a48cd18e081/plugins/core/src/test/java/org/apache/cxf/fediz/core/FederationProcessorTest.java",
                "sha": "49f9ff727576c07d884ec608c0280ad8a7d2bea3",
                "status": "modified"
            }
        ],
        "message": "NPE fixed when roleURI not configured\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/fediz/trunk@1347143 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf-fediz/commit/f225fdccbd2f73c46afc2d45716b4654babc2efa",
        "patched_files": [
            "README.txt",
            "AbstractSAMLCallbackHandler.java",
            "FederationProcessor.java",
            "SAMLTokenValidator.java"
        ],
        "repo": "cxf-fediz",
        "unit_tests": [
            "FederationProcessorTest.java"
        ]
    },
    "cxf-fediz_2d01528": {
        "bug_id": "cxf-fediz_2d01528",
        "commit": "https://github.com/apache/cxf-fediz/commit/2d01528cb4b37edc46bb4366b965e56b5def49da",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/2d01528cb4b37edc46bb4366b965e56b5def49da/services/idp/src/main/java/org/apache/cxf/fediz/service/idp/STSAuthenticationProvider.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/services/idp/src/main/java/org/apache/cxf/fediz/service/idp/STSAuthenticationProvider.java?ref=2d01528cb4b37edc46bb4366b965e56b5def49da",
                "deletions": 3,
                "filename": "services/idp/src/main/java/org/apache/cxf/fediz/service/idp/STSAuthenticationProvider.java",
                "patch": "@@ -150,12 +150,18 @@ public Authentication authenticate(Authentication authentication) throws Authent\n                 return null;\n             }\n             \n-            sts.getProperties().put(SecurityConstants.KERBEROS_JAAS_CONTEXT_NAME, \n+            if (kerberosTokenValidator.getContextName() != null) {\n+                sts.getProperties().put(SecurityConstants.KERBEROS_JAAS_CONTEXT_NAME, \n                                     kerberosTokenValidator.getContextName());\n-            sts.getProperties().put(SecurityConstants.KERBEROS_SPN,\n+            }\n+            if (kerberosTokenValidator.getServiceName() != null) {\n+                sts.getProperties().put(SecurityConstants.KERBEROS_SPN,\n                                     kerberosTokenValidator.getServiceName());\n-            sts.getProperties().put(SecurityConstants.CALLBACK_HANDLER, \n+            }\n+            if (kerberosCallbackHandler != null) {\n+                sts.getProperties().put(SecurityConstants.CALLBACK_HANDLER, \n                                     kerberosCallbackHandler);\n+            }\n             if (kerberosUsernameServiceNameForm) {\n                 sts.getProperties().put(SecurityConstants.KERBEROS_IS_USERNAME_IN_SERVICENAME_FORM, \n                                         \"true\");",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/2d01528cb4b37edc46bb4366b965e56b5def49da/services/idp/src/main/java/org/apache/cxf/fediz/service/idp/STSAuthenticationProvider.java",
                "sha": "bf96affa6176957fa27c2c9e5b6f25de8005d819",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/2d01528cb4b37edc46bb4366b965e56b5def49da/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java?ref=2d01528cb4b37edc46bb4366b965e56b5def49da",
                "deletions": 3,
                "filename": "systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "patch": "@@ -222,7 +222,7 @@ public String getServletContextName() {\n     public void testKerberos() throws Exception {\n         String url = \"https://localhost:\" + getRpHttpsPort() + \"/fedizhelloworld/secure/fedservlet\";\n         // Get a Kerberos Ticket +  Base64 encode it\n-        String ticket = getEncodedKerberosTicket();\n+        String ticket = getEncodedKerberosTicket(false);\n         \n         String response = sendHttpGet(url, ticket, 200, 200, Integer.parseInt(getIdpHttpsPort()));\n \n@@ -244,12 +244,43 @@ public void testKerberos() throws Exception {\n     \n     }\n     \n-    private String getEncodedKerberosTicket() throws Exception {\n+    @org.junit.Test\n+    public void testSpnego() throws Exception {\n+        String url = \"https://localhost:\" + getRpHttpsPort() + \"/fedizhelloworld/secure/fedservlet\";\n+        // Get a Kerberos Ticket +  Base64 encode it\n+        String ticket = getEncodedKerberosTicket(true);\n+        \n+        String response = sendHttpGet(url, ticket, 200, 200, Integer.parseInt(getIdpHttpsPort()));\n+\n+        String user = \"alice\";\n+        Assert.assertTrue(\"Principal not \" + user, response.indexOf(\"userPrincipal=\" + user) > 0);\n+        Assert.assertTrue(\"User \" + user + \" does not have role Admin\", response.indexOf(\"role:Admin=false\") > 0);\n+        Assert.assertTrue(\"User \" + user + \" does not have role Manager\", response.indexOf(\"role:Manager=false\") > 0);\n+        Assert.assertTrue(\"User \" + user + \" must have role User\", response.indexOf(\"role:User=true\") > 0);\n+\n+        String claim = ClaimTypes.FIRSTNAME.toString();\n+        Assert.assertTrue(\"User \" + user + \" claim \" + claim + \" is not 'Alice'\",\n+                          response.indexOf(claim + \"=Alice\") > 0);\n+        claim = ClaimTypes.LASTNAME.toString();\n+        Assert.assertTrue(\"User \" + user + \" claim \" + claim + \" is not 'Smith'\",\n+                          response.indexOf(claim + \"=Smith\") > 0);\n+        claim = ClaimTypes.EMAILADDRESS.toString();\n+        Assert.assertTrue(\"User \" + user + \" claim \" + claim + \" is not 'alice@realma.org'\",\n+                          response.indexOf(claim + \"=alice@realma.org\") > 0);\n+    \n+    }\n+    \n+    private String getEncodedKerberosTicket(boolean spnego) throws Exception {\n         \n         System.setProperty(\"java.security.auth.login.config\", \"src/test/resources/kerberos.jaas\");\n         System.setProperty(\"org.apache.xml.security.ignoreLineBreaks\", \"true\");\n         \n-        Oid kerberos5Oid = new Oid(\"1.2.840.113554.1.2.2\");\n+        Oid kerberos5Oid = null;\n+        if (spnego) {\n+            kerberos5Oid = new Oid(\"1.3.6.1.5.5.2\");\n+        } else {\n+            kerberos5Oid = new Oid(\"1.2.840.113554.1.2.2\");\n+        }\n         \n         GSSManager manager = GSSManager.getInstance();\n         GSSName serverName = manager.createName(\"bob@service.ws.apache.org\", ",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/2d01528cb4b37edc46bb4366b965e56b5def49da/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "sha": "cbd2d2b0fda3820d2adfd8ef6fab44de9f067912",
                "status": "modified"
            }
        ],
        "message": "Avoiding some potential NPEs",
        "parent": "https://github.com/apache/cxf-fediz/commit/cdfe522f2c21fc2df6f0a3ae4313af8d3df9128f",
        "patched_files": [
            "STSAuthenticationProvider.java"
        ],
        "repo": "cxf-fediz",
        "unit_tests": [
            "KerberosTest.java"
        ]
    },
    "cxf-fediz_953282b": {
        "bug_id": "cxf-fediz_953282b",
        "commit": "https://github.com/apache/cxf-fediz/commit/953282b320e5342020fe8b77e62715b617877479",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/cxf/src/test/java/org/apache/cxf/fediz/integrationtests/federation/FederationTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/cxf/src/test/java/org/apache/cxf/fediz/integrationtests/federation/FederationTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 18,
                "filename": "systests/cxf/src/test/java/org/apache/cxf/fediz/integrationtests/federation/FederationTest.java",
                "patch": "@@ -134,30 +134,22 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        \n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-        \n     }\n     \n     public String getIdpHttpsPort() {",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/cxf/src/test/java/org/apache/cxf/fediz/integrationtests/federation/FederationTest.java",
                "sha": "937d5afc82c33c0c111d5831a4d8ecf6e9ebfa2c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/federation/oidc/src/test/java/org/apache/cxf/fediz/integrationtests/OIDCTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/federation/oidc/src/test/java/org/apache/cxf/fediz/integrationtests/OIDCTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/federation/oidc/src/test/java/org/apache/cxf/fediz/integrationtests/OIDCTest.java",
                "patch": "@@ -200,25 +200,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/federation/oidc/src/test/java/org/apache/cxf/fediz/integrationtests/OIDCTest.java",
                "sha": "d1ba0129570214e83bc2537a652ea21ba72aa2fc",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOFedizTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOFedizTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOFedizTest.java",
                "patch": "@@ -195,25 +195,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOFedizTest.java",
                "sha": "bd7d7f13702e53c09ca657e28ce0b4c4fd00ad5c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOTest.java",
                "patch": "@@ -206,25 +206,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/federation/samlsso/src/test/java/org/apache/cxf/fediz/integrationtests/SAMLSSOTest.java",
                "sha": "7aeac6eee3c314da365a42b8ea8616c8a54beada",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/federation/wsfed/src/test/java/org/apache/cxf/fediz/integrationtests/WSFedTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/federation/wsfed/src/test/java/org/apache/cxf/fediz/integrationtests/WSFedTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/federation/wsfed/src/test/java/org/apache/cxf/fediz/integrationtests/WSFedTest.java",
                "patch": "@@ -198,25 +198,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/federation/wsfed/src/test/java/org/apache/cxf/fediz/integrationtests/WSFedTest.java",
                "sha": "f5cc0e66db8b600910827641e5037149eb1be889",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/idp/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/idp/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 5,
                "filename": "systests/idp/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "patch": "@@ -117,13 +117,17 @@ private static void initIdp() {\n \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                idpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/idp/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "sha": "58ed81c324647fa4033bcaa7682a25604e9567a6",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/kerberos/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/kerberos/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/kerberos/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "patch": "@@ -241,25 +241,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/kerberos/src/test/java/org/apache/cxf/fediz/integrationtests/KerberosTest.java",
                "sha": "74106e45f133c5a80041015223800ec1a98206e6",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/oidc/src/test/java/org/apache/cxf/fediz/systests/oidc/OIDCTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/oidc/src/test/java/org/apache/cxf/fediz/systests/oidc/OIDCTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 19,
                "filename": "systests/oidc/src/test/java/org/apache/cxf/fediz/systests/oidc/OIDCTest.java",
                "patch": "@@ -186,30 +186,19 @@ public static void cleanup() throws Exception {\n         try {\n             loginToClientsPageAndDeleteClient(rpHttpsPort, idpHttpsPort);\n         } finally {\n-            shutdownServers();\n+            shutdownServer(idpServer);\n+            shutdownServer(rpServer);\n         }\n     }\n     \n-    private static void shutdownServers() {\n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n-                }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/oidc/src/test/java/org/apache/cxf/fediz/systests/oidc/OIDCTest.java",
                "sha": "f57aa1a083b963d03f697957d418e20fee7954be",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/samlsso/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/samlsso/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 5,
                "filename": "systests/samlsso/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "patch": "@@ -137,13 +137,17 @@ private static void initIdp() {\n \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                idpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/samlsso/src/test/java/org/apache/cxf/fediz/systests/idp/IdpTest.java",
                "sha": "fa75b9d9fa1a855ce148f72f079c0721cc225507",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring2Test.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring2Test.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring2Test.java",
                "patch": "@@ -72,25 +72,18 @@ public static void init() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();\n@@ -259,6 +252,7 @@ public void testAliceModifiedSignature() throws Exception {\n             //                  || ex.getMessage().contains(\"403 Forbidden\"));\n         }\n \n+        webClient.close();\n     }\n     \n     @Override",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/Spring2Test.java",
                "sha": "f20a45f8a479698dbfc5173b50c535a64e79787c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
                "patch": "@@ -58,25 +58,18 @@ public static void init() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/spring/src/test/java/org/apache/cxf/fediz/integrationtests/SpringTest.java",
                "sha": "4da2edc7f2894bbc03cd2f7a68c217684b5b7505",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "patch": "@@ -139,25 +139,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "sha": "406e4b5319cfe85a4ee0cb81902090debf22d16d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 18,
                "filename": "systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "patch": "@@ -149,31 +149,24 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n     }\n-\n+    \n     public String getIdpHttpsPort() {\n         return idpHttpsPort;\n     }",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "sha": "9b996cfe22e598aeebaa7d06f3111183294b9e7f",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "patch": "@@ -138,25 +138,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "sha": "f41f03bf4968b5c2d9dbfdc00bff33f518385e56",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "patch": "@@ -152,25 +152,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat7/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "sha": "0bf76910bb227d55fdc5157dbf86e957c11556ee",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "patch": "@@ -139,25 +139,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/ClientCertificateTest.java",
                "sha": "7a1e24ea21cb5dc926480633e4ce142468c87357",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "patch": "@@ -149,25 +149,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/HolderOfKeyTest.java",
                "sha": "650b610df9314acb450a8dafe381fb6384900e31",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 17,
                "filename": "systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "patch": "@@ -138,25 +138,18 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/TomcatTest.java",
                "sha": "646c9ed71e932272c51ec97b95c3361d6b64723d",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java?ref=953282b320e5342020fe8b77e62715b617877479",
                "deletions": 18,
                "filename": "systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "patch": "@@ -152,31 +152,24 @@ private static void initRp() {\n     \n     @AfterClass\n     public static void cleanup() {\n+        shutdownServer(idpServer);\n+        shutdownServer(rpServer);\n+    }\n+    \n+    private static void shutdownServer(Tomcat server) {\n         try {\n-            if (idpServer.getServer() != null\n-                && idpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (idpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    idpServer.stop();\n-                }\n-                idpServer.destroy();\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-\n-        try {\n-            if (rpServer.getServer() != null\n-                && rpServer.getServer().getState() != LifecycleState.DESTROYED) {\n-                if (rpServer.getServer().getState() != LifecycleState.STOPPED) {\n-                    rpServer.stop();\n+            if (server != null && server.getServer() != null\n+                && server.getServer().getState() != LifecycleState.DESTROYED) {\n+                if (server.getServer().getState() != LifecycleState.STOPPED) {\n+                    server.stop();\n                 }\n-                rpServer.destroy();\n+                server.destroy();\n             }\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n     }\n-\n+    \n     public String getIdpHttpsPort() {\n         return idpHttpsPort;\n     }",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/953282b320e5342020fe8b77e62715b617877479/systests/tomcat8/src/test/java/org/apache/cxf/fediz/integrationtests/WReqTest.java",
                "sha": "48e58517397783e857e7c4be29bb47656f250646",
                "status": "modified"
            }
        ],
        "message": "Consolidate Tomcat shutdown code + avoid a NPE",
        "parent": "https://github.com/apache/cxf-fediz/commit/4c20cefb8369a79f946b13ba7c8f2d03b605c1c5",
        "patched_files": [
            "Idp.java"
        ],
        "repo": "cxf-fediz",
        "unit_tests": [
            "SAMLSSOTest.java",
            "TomcatTest.java",
            "Spring2Test.java",
            "OIDCTest.java",
            "SAMLSSOFedizTest.java",
            "SpringTest.java",
            "HolderOfKeyTest.java",
            "WReqTest.java",
            "ClientCertificateTest.java",
            "IdpTest.java",
            "KerberosTest.java",
            "WSFedTest.java",
            "FederationTest.java"
        ]
    },
    "cxf-fediz_f7cf8d8": {
        "bug_id": "cxf-fediz_f7cf8d8",
        "commit": "https://github.com/apache/cxf-fediz/commit/f7cf8d8cde0c46f3f615044754c38beee246049c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/websphere/pom.xml?ref=f7cf8d8cde0c46f3f615044754c38beee246049c",
                "deletions": 0,
                "filename": "plugins/websphere/pom.xml",
                "patch": "@@ -102,6 +102,12 @@\n             <version>${junit.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.easymock</groupId>\n+            <artifactId>easymock</artifactId>\n+            <version>${easymock.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n     <build>\n         <plugins>",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/pom.xml",
                "sha": "18e1d80eab2bf7d338d53cab31b6234645c3e053",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/mapper/FileBasedRoleToGroupMapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/mapper/FileBasedRoleToGroupMapper.java?ref=f7cf8d8cde0c46f3f615044754c38beee246049c",
                "deletions": 0,
                "filename": "plugins/websphere/src/main/java/org/apache/cxf/fediz/was/mapper/FileBasedRoleToGroupMapper.java",
                "patch": "@@ -78,6 +78,10 @@\n \n     @Override\n     public List<String> groupsFromRoles(List<String> roles) {\n+        if (roles == null) {\n+            return null;\n+        }\n+        \n         List<String> groups = new ArrayList<String>(20);\n         for (String key : roles) {\n             List<String> groupList = mappings.get(key);",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/mapper/FileBasedRoleToGroupMapper.java",
                "sha": "03a497d5763791147e8fb0945ab95e5250a2f5ee",
                "status": "modified"
            },
            {
                "additions": 49,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/tai/FedizInterceptor.java",
                "changes": 95,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/tai/FedizInterceptor.java?ref=f7cf8d8cde0c46f3f615044754c38beee246049c",
                "deletions": 46,
                "filename": "plugins/websphere/src/main/java/org/apache/cxf/fediz/was/tai/FedizInterceptor.java",
                "patch": "@@ -77,7 +77,7 @@\n     /**\n      * @see org.apache.cxf.fediz.was.Constants#PROPERTY_KEY_DIRECT_GROUP_MAPPING\n      */\n-    private boolean directGrouMapping;\n+    private boolean directGroupMapping;\n \n     public String getConfigFile() {\n         return configFile;\n@@ -180,7 +180,7 @@ public int initialize(Properties props) throws WebTrustAssociationFailedExceptio\n                                                                  + Constants.PROPERTY_KEY_CONFIG_LOCATION);\n                 }\n \n-                directGrouMapping = Boolean.valueOf(props.getProperty(Constants.PROPERTY_KEY_DIRECT_GROUP_MAPPING));\n+                directGroupMapping = Boolean.valueOf(props.getProperty(Constants.PROPERTY_KEY_DIRECT_GROUP_MAPPING));\n             } catch (Throwable t) {\n                 LOG.warn(\"Failed initializing TAI\", t);\n                 return 1;\n@@ -189,7 +189,7 @@ public int initialize(Properties props) throws WebTrustAssociationFailedExceptio\n         return 0;\n     }\n \n-    private FedizContext getFederationContext(HttpServletRequest req) {\n+    protected FedizContext getFederationContext(HttpServletRequest req) {\n         String contextPath = req.getContextPath();\n         if (contextPath == null || contextPath.isEmpty()) {\n             contextPath = \"/\";\n@@ -427,59 +427,62 @@ protected void redirectToIdp(HttpServletRequest request, HttpServletResponse res\n         }\n     }\n \n-    private boolean checkSecurityToken(FedizResponse response) {\n+    protected boolean checkSecurityToken(FedizResponse response) {\n         if (response == null) {\n             return false;\n         }\n         long currentTime = System.currentTimeMillis();\n         return response.getTokenExpires().getTime() > currentTime;\n     }\n \n-    private List<String> groupIdsFromTokenRoles(FedizResponse federationResponse) {\n+    protected List<String> groupIdsFromTokenRoles(FedizResponse federationResponse) {\n \n         List<String> localGroups = mapper.groupsFromRoles(federationResponse.getRoles());\n-        List<String> groupIds = new ArrayList<String>(localGroups.size());\n-\n-        if (directGrouMapping) {\n-            LOG.debug(\"Direct Group Mapping was set in interceptor. Thus UserRegistry will not be invoked to get \"\n-                      + \"GrouUID\");\n-            groupIds.addAll(localGroups);\n-        } else {\n-            InitialContext ctx = null;\n-            try {\n-                ctx = new InitialContext();\n-                UserRegistry userRegistry = (UserRegistry)ctx.lookup(Constants.USER_REGISTRY_JNDI_NAME);\n-\n-                if (localGroups != null) {\n-                    LOG.debug(\"Converting {} group names to uids\", localGroups.size());\n-                    for (String localGroup : localGroups) {\n-                        try {\n-                            String guid = convertGroupNameToUniqueId(userRegistry, localGroup);\n-                            LOG.debug(\"Group '{}' maps to guid: {}\", localGroup, guid);\n-                            groupIds.add(guid);\n-                        } catch (EntryNotFoundException e) {\n-                            LOG.warn(\"Group entry '{}' could not be found in UserRegistry for user '{}'\", localGroup,\n-                                     federationResponse.getUsername());\n+        int size = (localGroups == null) ? 0 : localGroups.size();\n+        List<String> groupIds = new ArrayList<String>(size);\n+\n+        if (size > 0) {\n+            if (directGroupMapping) {\n+                LOG.debug(\"Direct Group Mapping was set in interceptor. Thus UserRegistry will not be invoked to get \"\n+                          + \"GrouUID\");\n+                groupIds.addAll(localGroups);\n+            } else {\n+                InitialContext ctx = null;\n+                try {\n+                    ctx = new InitialContext();\n+                    UserRegistry userRegistry = (UserRegistry)ctx.lookup(Constants.USER_REGISTRY_JNDI_NAME);\n+\n+                    if (localGroups != null) {\n+                        LOG.debug(\"Converting {} group names to uids\", size);\n+                        for (String localGroup : localGroups) {\n+                            try {\n+                                String guid = convertGroupNameToUniqueId(userRegistry, localGroup);\n+                                LOG.debug(\"Group '{}' maps to guid: {}\", localGroup, guid);\n+                                groupIds.add(guid);\n+                            } catch (EntryNotFoundException e) {\n+                                LOG.warn(\"Group entry '{}' could not be found in UserRegistry for user '{}'\",\n+                                         localGroup, federationResponse.getUsername());\n+                            }\n                         }\n                     }\n-                }\n-            } catch (NamingException ex) {\n-                LOG.error(\"User Registry could not be loaded via JNDI context.\");\n-                LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n-                LOG.info(\"To switch to direct GroupUID Mapping without UserRegistry being involved set \"\n-                         + \"fedizDirectGroupMapping=\\\"true\\\"  in TAI Interceptor properties.\");\n-            } catch (RemoteException e) {\n-                LOG.error(\"RemoteException in UserRegistry\", e);\n-                LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n-            } catch (CustomRegistryException e) {\n-                LOG.error(\"CustomRegistryException in UserRegistry\", e);\n-                LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n-            } finally {\n-                if (ctx != null) {\n-                    try {\n-                        ctx.close();\n-                    } catch (NamingException e) {\n-                        // Ignore\n+                } catch (NamingException ex) {\n+                    LOG.error(\"User Registry could not be loaded via JNDI context.\");\n+                    LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n+                    LOG.info(\"To switch to direct GroupUID Mapping without UserRegistry being involved set \"\n+                             + \"fedizDirectGroupMapping=\\\"true\\\"  in TAI Interceptor properties.\");\n+                } catch (RemoteException e) {\n+                    LOG.error(\"RemoteException in UserRegistry\", e);\n+                    LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n+                } catch (CustomRegistryException e) {\n+                    LOG.error(\"CustomRegistryException in UserRegistry\", e);\n+                    LOG.warn(\"Group mapping failed for user '{}'\", federationResponse.getUsername());\n+                } finally {\n+                    if (ctx != null) {\n+                        try {\n+                            ctx.close();\n+                        } catch (NamingException e) {\n+                            // Ignore\n+                        }\n                     }\n                 }\n             }\n@@ -491,7 +494,7 @@ private boolean checkSecurityToken(FedizResponse response) {\n     /**\n      * Creates the JAAS Subject so that WAS Runtime will not check the local registry\n      */\n-    private Subject createSubject(FedizResponse federationResponse, List<String> groups, String cacheKey) {\n+    protected Subject createSubject(FedizResponse federationResponse, List<String> groups, String cacheKey) {\n         String uniqueId = \"user:defaultWIMFileBasedRealm/cn=\" + federationResponse.getUsername()\n                           + \",o=defaultWIMFileBasedRealm\";\n         String completeCacheKey = uniqueId + ':' + cacheKey;",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/main/java/org/apache/cxf/fediz/was/tai/FedizInterceptor.java",
                "sha": "1858369bf5298d4bd152d1fbd8455017d4085ee9",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/test/java/org/apache/cxf/fediz/was/tai/FedizInterceptorTest.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/websphere/src/test/java/org/apache/cxf/fediz/was/tai/FedizInterceptorTest.java?ref=f7cf8d8cde0c46f3f615044754c38beee246049c",
                "deletions": 0,
                "filename": "plugins/websphere/src/test/java/org/apache/cxf/fediz/was/tai/FedizInterceptorTest.java",
                "patch": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.cxf.fediz.was.tai;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import com.ibm.websphere.security.WebTrustAssociationFailedException;\n+\n+import org.apache.cxf.fediz.core.processor.FedizResponse;\n+import org.apache.cxf.fediz.was.Constants;\n+import org.easymock.EasyMock;\n+import org.junit.Test;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class FedizInterceptorTest {\n+\n+    \n+    @Test\n+    public void testGroupMappingWithNull() throws WebTrustAssociationFailedException {\n+        \n+        FedizResponse resp = EasyMock.createMock(FedizResponse.class);\n+        EasyMock.expect(resp.getRoles()).andReturn(null);\n+        EasyMock.expect(resp.getUsername()).andReturn(\"Test-User\").anyTimes();\n+        EasyMock.replay(resp);\n+        \n+        FedizInterceptor fedizInterceptor = new FedizInterceptor();\n+        Properties properties = new Properties();\n+        properties.put(Constants.PROPERTY_KEY_CONFIG_LOCATION, \"src/test/resources/fediz_config.xml\");\n+        fedizInterceptor.initialize(properties);\n+        List<String> result = fedizInterceptor.groupIdsFromTokenRoles(resp);\n+        assertNotNull(result);\n+        assertEquals(0, result.size());\n+    }\n+    \n+    @Test\n+    public void testDirectGroupMapping() throws WebTrustAssociationFailedException {\n+        \n+        FedizResponse resp = EasyMock.createMock(FedizResponse.class);\n+        EasyMock.expect(resp.getRoles()).andReturn(Arrays.asList(\"Admin\", \"Manager\"));\n+        EasyMock.expect(resp.getUsername()).andReturn(\"Test-User\").anyTimes();\n+        EasyMock.replay(resp);\n+        \n+        FedizInterceptor fedizInterceptor = new FedizInterceptor();\n+        Properties properties = new Properties();\n+        properties.put(Constants.PROPERTY_KEY_CONFIG_LOCATION, \"src/test/resources/fediz_config.xml\");\n+        properties.put(Constants.PROPERTY_KEY_DIRECT_GROUP_MAPPING, \"true\");\n+        \n+        fedizInterceptor.initialize(properties);\n+        List<String> result = fedizInterceptor.groupIdsFromTokenRoles(resp);\n+        assertNotNull(result);\n+        assertEquals(2, result.size());\n+    }\n+}",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/test/java/org/apache/cxf/fediz/was/tai/FedizInterceptorTest.java",
                "sha": "21598161cc7c2cb037ee8e062370ed9155024f8e",
                "status": "added"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/cxf-fediz/blob/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/test/resources/fediz_config.xml",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/cxf-fediz/contents/plugins/websphere/src/test/resources/fediz_config.xml?ref=f7cf8d8cde0c46f3f615044754c38beee246049c",
                "deletions": 0,
                "filename": "plugins/websphere/src/test/resources/fediz_config.xml",
                "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!-- Place in Tomcat conf folder or other location as designated in this sample's file. \n+     Keystore referenced below must have IDP STS' public cert included in it.  This example uses the\n+     ststrust Truststore (ststrust.jks) for this task.\n+     In Fediz 1.0, one keystore was used for SSL and the STS public certificate.\n+-->\n+<FedizConfig>\n+\t<contextConfig name=\"/fedizhelloworld\">\n+\t\t<audienceUris>\n+\t\t\t<audienceItem>urn:org:apache:cxf:fediz:fedizhelloworld</audienceItem>\n+\t\t\t<audienceItem>urn:org:apache:cxf:fediz:fedizhelloworld2</audienceItem>\n+\t\t</audienceUris>\n+\t\t<certificateStores>\n+\t\t\t<trustManager>\n+\t\t\t\t<keyStore file=\"ststrust.jks\" password=\"storepass\" type=\"JKS\" />\n+\t\t\t</trustManager>\n+\t\t</certificateStores>\n+\t\t<trustedIssuers>\n+\t\t\t<issuer certificateValidation=\"PeerTrust\" />\n+\t\t</trustedIssuers>\n+\t\t<tokenExpirationValidation>true</tokenExpirationValidation>\n+\t\t<maximumClockSkew>1000</maximumClockSkew>\n+\t\t<protocol xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\t\txsi:type=\"federationProtocolType\" version=\"1.0.0\">\n+\t\t\t<realm>urn:org:apache:cxf:fediz:fedizhelloworld</realm>\n+\t\t\t<issuer>https://localhost:9443/fediz-idp/federation</issuer>\n+\t\t\t<roleDelimiter>,</roleDelimiter>\n+\t\t\t<roleURI>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role</roleURI>\n+\t\t\t<claimTypesRequested>\n+\t\t\t\t<claimType type=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\" optional=\"false\" />\n+\t\t\t\t<claimType type=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\" optional=\"true\" />\n+\t\t\t\t<claimType type=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\" optional=\"true\" />\n+\t\t\t\t<claimType type=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\" optional=\"true\" />\n+\t\t\t</claimTypesRequested>\n+\t\t</protocol>\n+\t\t<logoutURL>/secure/logout</logoutURL>\n+        <logoutRedirectTo>/index.html</logoutRedirectTo>\n+\t</contextConfig>\n+</FedizConfig>\n+",
                "raw_url": "https://github.com/apache/cxf-fediz/raw/f7cf8d8cde0c46f3f615044754c38beee246049c/plugins/websphere/src/test/resources/fediz_config.xml",
                "sha": "06c4b6b30fe6a1c28ea3e8087b2af673b5eba072",
                "status": "added"
            }
        ],
        "message": "Fixing WebSphere Plugin NullpointerException + Adding Tests",
        "parent": "https://github.com/apache/cxf-fediz/commit/fe8f240fd15a0237e16a4759a5fb8776de0420a2",
        "patched_files": [
            "pom.xml",
            "fediz_config.xml",
            "FedizInterceptor.java",
            "FileBasedRoleToGroupMapper.java"
        ],
        "repo": "cxf-fediz",
        "unit_tests": [
            "FedizInterceptorTest.java"
        ]
    }
}