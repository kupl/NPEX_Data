{
    "incubator-brooklyn_0cf895d": {
        "bug_id": "incubator-brooklyn_0cf895d",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/0cf895dbbfddf824bef85de881c07a887f1eff4e",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/0cf895dbbfddf824bef85de881c07a887f1eff4e/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java?ref=0cf895dbbfddf824bef85de881c07a887f1eff4e",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "patch": "@@ -36,7 +36,9 @@ private JsonFunctions() {} // instead use static utility methods\n     public static <T> Function<JsonElement, T> cast(final Class<T> expected) {\n         return new Function<JsonElement, T>() {\n             @Override public T apply(JsonElement input) {\n-                if (input.isJsonNull()) {\n+                if (input == null) {\n+                    return (T) null;\n+                } else if (input.isJsonNull()) {\n                     return (T) null;\n                 } else if (expected == boolean.class || expected == Boolean.class) {\n                     return (T) (Boolean) input.getAsBoolean();",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/0cf895dbbfddf824bef85de881c07a887f1eff4e/core/src/main/java/brooklyn/event/feed/http/JsonFunctions.java",
                "sha": "b41e3126956f8aceeed96ebe29b3c67832b097cd",
                "status": "modified"
            }
        ],
        "message": "Sensor feed JsonFunctions: avoid NPE\n\n- In cast(Class), return null if input is null",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f2df16a130df56503c1a11f4b3667a71afb6388f",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JsonFunctionsTest.java"
        ]
    },
    "incubator-brooklyn_1bc16cf": {
        "bug_id": "incubator-brooklyn_1bc16cf",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/1bc16cf747d920adffddd354c9ce5b81cd463b7b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/1bc16cf747d920adffddd354c9ce5b81cd463b7b/core/src/main/java/brooklyn/location/basic/Locations.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/Locations.java?ref=1bc16cf747d920adffddd354c9ce5b81cd463b7b",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/location/basic/Locations.java",
                "patch": "@@ -111,6 +111,8 @@ public static void manage(Location loc, ManagementContext managementContext) {\n     }\n \n     public static Location coerce(ManagementContext mgmt, Object rawO) {\n+        if (rawO==null)\n+            return null;\n         if (rawO instanceof Location)\n             return (Location)rawO;\n         ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/1bc16cf747d920adffddd354c9ce5b81cd463b7b/core/src/main/java/brooklyn/location/basic/Locations.java",
                "sha": "09cef7cc98c74098f0eca6dc1996852c70611805",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/1bc16cf747d920adffddd354c9ce5b81cd463b7b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=1bc16cf747d920adffddd354c9ce5b81cd463b7b",
                "deletions": 0,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -888,6 +888,9 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                         if (t instanceof EC2TemplateOptions) {\n                             if (v==null) return;\n                             ((EC2TemplateOptions)t).userData(v.toString().getBytes());\n+                            // TODO avail in next jclouds thanks to @andreaturli\n+//                          } else if (t instanceof SoftLayerTemplateOptions) {\n+//                              ((SoftLayerTemplateOptions)t).userData(Strings.toString(v));\n                         } else {\n                             LOG.info(\"ignoring userDataString({}) in VM creation because not supported for cloud/type ({})\", v, t.getClass());\n                         }\n@@ -897,6 +900,9 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                         if (t instanceof EC2TemplateOptions) {\n                             byte[] bytes = toByteArray(v);\n                             ((EC2TemplateOptions)t).userData(bytes);\n+                          // TODO avail in next jclouds thanks to @andreaturli\n+//                        } else if (t instanceof SoftLayerTemplateOptions) {\n+//                            ((SoftLayerTemplateOptions)t).userData(Strings.toString(v));\n                         } else {\n                             LOG.info(\"ignoring userData({}) in VM creation because not supported for cloud/type ({})\", v, t.getClass());\n                         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/1bc16cf747d920adffddd354c9ce5b81cd463b7b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "c58d9bebed5fc9fabd560f36285b2345c863506b",
                "status": "modified"
            }
        ],
        "message": "don't cause NPE inside location list coercions (alt fix for recent fix for NPE from where this is invoked in MachineLifecycleTasks), and some notes on jclouds location for softlayer",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/9fd29505a8217863cd422d53d097fa0169cb35cd",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_2227415": {
        "bug_id": "incubator-brooklyn_2227415",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2227415b25f0b821f23c1899181f6040195fc54b",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2227415b25f0b821f23c1899181f6040195fc54b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=2227415b25f0b821f23c1899181f6040195fc54b",
                "deletions": 16,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -742,25 +742,31 @@ protected JcloudsSshMachineLocation obtainOnce(ConfigBag setup) throws NoMachine\n                 }\n \n                 if (setup.get(OPEN_IPTABLES)) {\n-                    customisationForLogging.add(\"open iptables\");\n-                    \n                     @SuppressWarnings(\"unchecked\")\n-                    List<String> iptablesRules = createIptablesRulesForNetworkInterface((Iterable<Integer>) setup.get(INBOUND_PORTS));\n-                    iptablesRules.add(IptablesCommands.saveIptablesRules());\n-                    List<String> batch = Lists.newArrayList();\n-                    // Some entities, such as Riak (erlang based) have a huge range of ports, which leads to a script that\n-                    // is too large to run (fails with a broken pipe). Batch the rules into batches of 50\n-                    for (String rule : iptablesRules) {\n-                        batch.add(rule);\n-                        if (batch.size() == 50) {\n-                            sshMachineLocation.execCommands(\"Inserting iptables rules, 50 command batch\", batch);\n-                            batch.clear();\n+                    Iterable<Integer> inboundPorts = (Iterable<Integer>) setup.get(INBOUND_PORTS);\n+                    \n+                    if (inboundPorts == null || Iterables.isEmpty(inboundPorts)) {\n+                        LOG.info(\"No ports to open in iptables (no inbound ports) for {} at {}\", sshMachineLocation, this);\n+                    } else {\n+                        customisationForLogging.add(\"open iptables\");\n+                        \n+                        List<String> iptablesRules = createIptablesRulesForNetworkInterface(inboundPorts);\n+                        iptablesRules.add(IptablesCommands.saveIptablesRules());\n+                        List<String> batch = Lists.newArrayList();\n+                        // Some entities, such as Riak (erlang based) have a huge range of ports, which leads to a script that\n+                        // is too large to run (fails with a broken pipe). Batch the rules into batches of 50\n+                        for (String rule : iptablesRules) {\n+                            batch.add(rule);\n+                            if (batch.size() == 50) {\n+                                sshMachineLocation.execCommands(\"Inserting iptables rules, 50 command batch\", batch);\n+                                batch.clear();\n+                            }\n                         }\n+                        if (batch.size() > 0) {\n+                            sshMachineLocation.execCommands(\"Inserting iptables rules\", batch);\n+                        }\n+                        sshMachineLocation.execCommands(\"List iptables rules\", ImmutableList.of(IptablesCommands.listIptablesRule()));\n                     }\n-                    if (batch.size() > 0) {\n-                        sshMachineLocation.execCommands(\"Inserting iptables rules\", batch);\n-                    }\n-                    sshMachineLocation.execCommands(\"List iptables rules\", ImmutableList.of(IptablesCommands.listIptablesRule()));\n                 }\n                 \n                 if (setup.get(STOP_IPTABLES)) {",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2227415b25f0b821f23c1899181f6040195fc54b/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "706b3eefa95df870850d375206b85bc14e5ed187",
                "status": "modified"
            }
        ],
        "message": "Jclouds openIptables: avoid NPE if no inboundPorts",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0416bd1aa04a01c0985c44d710312ebc711f798d",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_24b2c0a": {
        "bug_id": "incubator-brooklyn_24b2c0a",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/24b2c0a67d64f4cff226b5a786476816bbfe56ee",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java?ref=24b2c0a67d64f4cff226b5a786476816bbfe56ee",
                "deletions": 1,
                "filename": "policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "patch": "@@ -155,7 +155,7 @@ public Integer resize(Integer desiredSize) {\n \n     private void onContainerAdded(Entity newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "sha": "01869e0be4d2ab8bc4ddc592cf66c50a3c842762",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java?ref=24b2c0a67d64f4cff226b5a786476816bbfe56ee",
                "deletions": 1,
                "filename": "policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "patch": "@@ -168,7 +168,7 @@ public Integer resize(Integer desiredSize) {\n     \n     private void onContainerAdded(BalanceableContainer<?> newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/24b2c0a67d64f4cff226b5a786476816bbfe56ee/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "sha": "7dc3ac7b2cf11126d771256a2bbdb5ac3193c1dc",
                "status": "modified"
            }
        ],
        "message": "Fixed the NPE problems with the pools",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a0ebe0b281323ae20cd40f4e204af9c3a4d40bfd",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BalanceableWorkerPoolTest.java"
        ]
    },
    "incubator-brooklyn_2915b77": {
        "bug_id": "incubator-brooklyn_2915b77",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2915b77a66dbf438c5c28b2028113453517a2c79",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2915b77a66dbf438c5c28b2028113453517a2c79/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=2915b77a66dbf438c5c28b2028113453517a2c79",
                "deletions": 4,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -1242,10 +1242,15 @@ protected LoginCredentials createUser(ComputeService computeService, NodeMetadat\n         UserCreation userCreation = createUserStatements(image, config);\n         \n         if (!userCreation.statements.isEmpty()) {\n-            org.jclouds.compute.domain.OsFamily osFamily = node.getOperatingSystem().getFamily();\n-            org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily = (osFamily == org.jclouds.compute.domain.OsFamily.WINDOWS) \n-                    ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS\n-                    : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            // If unsure of OS family, default to unix for rendering statements.\n+            org.jclouds.scriptbuilder.domain.OsFamily scriptOsFamily;\n+            if (node.getOperatingSystem() == null) {\n+                scriptOsFamily = org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            } else {\n+                scriptOsFamily = (node.getOperatingSystem().getFamily() == org.jclouds.compute.domain.OsFamily.WINDOWS) \n+                        ? org.jclouds.scriptbuilder.domain.OsFamily.WINDOWS\n+                        : org.jclouds.scriptbuilder.domain.OsFamily.UNIX;\n+            }\n             \n             List<String> commands = Lists.newArrayList();\n             for (Statement statement : userCreation.statements) {",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2915b77a66dbf438c5c28b2028113453517a2c79/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "cafe1c7c54a9f7d12809c8d68f2864bf1fb78044",
                "status": "modified"
            }
        ],
        "message": "JcloudsLocation: avoid NPE on user-creation\n\nIf jclouds node doesn\u2019t know its operatingSystem, then was\ngetting NPE. Guard against that, and default to unix.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/ecc62b040520da141e123264a44655d1f7113d15",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_2c06340": {
        "bug_id": "incubator-brooklyn_2c06340",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/2c063409991ca647d0ff91a9361a7ebf3b5570a6",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/2c063409991ca647d0ff91a9361a7ebf3b5570a6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy?ref=2c063409991ca647d0ff91a9361a7ebf3b5570a6",
                "deletions": 2,
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "patch": "@@ -127,8 +127,21 @@ public class JmxHelper {\n \t\t\tString[] creds = [ user, password ]\n \t\t\tenv.put(JMXConnector.CREDENTIALS, creds);\n \t\t}\n-\t\tjmxc = JMXConnectorFactory.connect(url, env);\n-\t\tmbsc = jmxc.getMBeanServerConnection();\n+\t\ttry{\n+            jmxc = JMXConnectorFactory.connect(url, env);\n+        }catch(NullPointerException npe){\n+            //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException.\n+            //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is\n+            //thrown by a known offender (wso2) and if so replaces the bad exception by a new IOException.\n+            //ideally WSO2 will fix this bug and we can remove this code.\n+            boolean thrownByWso2 = npe.stackTrace[0].toString().contains(\"org.wso2.carbon.core.security.CarbonJMXAuthenticator.authenticate\")\n+            if(thrownByWso2){\n+                throw new IOException(\"Failed to connect to url ${url}. NullPointerException is thrown, but replaced by an IOException to fix a WSO2 JMX problem\",npe)\n+            }else{\n+                throw npe\n+            }\n+        }\n+        mbsc = jmxc.getMBeanServerConnection();\n \t}\n \t\n \t/** continuously attempts to connect (blocking), for at least the indicated amount of time; or indefinitely if -1 */",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/2c063409991ca647d0ff91a9361a7ebf3b5570a6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "sha": "edb06d67c1edefdd2415934daf89af7ccae05fc3",
                "status": "modified"
            }
        ],
        "message": "workaround for WSO2-specific JMX error condition (throws NPE when contract expects an IOE) (via pveentjer)",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/47c1e11922be739c146139549acc68c41be65dd4",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JmxHelperTest.java"
        ]
    },
    "incubator-brooklyn_32bb4db": {
        "bug_id": "incubator-brooklyn_32bb4db",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/32bb4db4efa3dcc738b25f3cb09a59348b70d939",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java?ref=32bb4db4efa3dcc738b25f3cb09a59348b70d939",
                "deletions": 2,
                "filename": "extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "patch": "@@ -156,8 +156,10 @@ public void onContainerAdded(ContainerType newContainer, double lowThreshold, do\n     @Override\n     public void onContainerRemoved(ContainerType oldContainer) {\n         containers.remove(oldContainer);\n-        poolLowThreshold -= containerToLowThreshold.remove(oldContainer);\n-        poolHighThreshold -= containerToHighThreshold.remove(oldContainer);\n+        Double containerLowThreshold = containerToLowThreshold.remove(oldContainer);\n+        Double containerHighThresold = containerToHighThreshold.remove(oldContainer);\n+        poolLowThreshold -= (containerLowThreshold != null ? containerLowThreshold : 0);\n+        poolHighThreshold -= (containerHighThresold != null ? containerHighThresold : 0);\n         \n         // TODO: assert no orphaned items\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/DefaultBalanceablePoolModel.java",
                "sha": "589683c81882049847bc481aeaea75e64d7359dc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy?ref=32bb4db4efa3dcc738b25f3cb09a59348b70d939",
                "deletions": 0,
                "filename": "extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "patch": "@@ -181,6 +181,7 @@ public class LoadBalancingPolicy extends AbstractPolicy {\n         return null\n     }\n     \n+    // TODO Receiving duplicates of onContainerRemoved (e.g. when running LoadBalancingInmemorySoakTest)\n     private void onContainerRemoved(Entity oldContainer, boolean rebalanceNow) {\n         if (LOG.isTraceEnabled()) LOG.trace(\"{} recording removal of container {}\", this, oldContainer)\n         model.onContainerRemoved(oldContainer)",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/32bb4db4efa3dcc738b25f3cb09a59348b70d939/extra/src/main/java/brooklyn/policy/loadbalancing/LoadBalancingPolicy.groovy",
                "sha": "78a5c6ecffd73a48d13859d66b72aa9b32659957",
                "status": "modified"
            }
        ],
        "message": "BalanceablePoolModel: avoid NPE if duplicate onContainerRemoved received",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/b70188e59983a7dac184c2322e466ba823d42eaf",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "LoadBalancingPolicyTest.java"
        ]
    },
    "incubator-brooklyn_4c9ea0f": {
        "bug_id": "incubator-brooklyn_4c9ea0f",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java?ref=4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
                "deletions": 1,
                "filename": "policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "patch": "@@ -155,7 +155,7 @@ public Integer resize(Integer desiredSize) {\n \n     private void onContainerAdded(Entity newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/followthesun/FollowTheSunPool.java",
                "sha": "01869e0be4d2ab8bc4ddc592cf66c50a3c842762",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java?ref=4c9ea0f9bd9b3e43ce052867677b9b83629863b2",
                "deletions": 1,
                "filename": "policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "patch": "@@ -168,7 +168,7 @@ public Integer resize(Integer desiredSize) {\n     \n     private void onContainerAdded(BalanceableContainer<?> newContainer) {\n         subscribe(newContainer, Startable.SERVICE_UP, eventHandler);\n-        if (!(newContainer instanceof Startable) || newContainer.getAttribute(Startable.SERVICE_UP)) {\n+        if (!(newContainer instanceof Startable) || Boolean.TRUE.equals(newContainer.getAttribute(Startable.SERVICE_UP))) {\n             onContainerUp(newContainer);\n         }\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/4c9ea0f9bd9b3e43ce052867677b9b83629863b2/policy/src/main/java/brooklyn/policy/loadbalancing/BalanceableWorkerPool.java",
                "sha": "7dc3ac7b2cf11126d771256a2bbdb5ac3193c1dc",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #208 from pveentjer/npe-followthesun\n\nFixed the NPE problems with the pools",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a0ebe0b281323ae20cd40f4e204af9c3a4d40bfd",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BalanceableWorkerPoolTest.java"
        ]
    },
    "incubator-brooklyn_52e041b": {
        "bug_id": "incubator-brooklyn_52e041b",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/52e041b49f732362d43dab9b14d6a0c86f13a508",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java?ref=52e041b49f732362d43dab9b14d6a0c86f13a508",
                "deletions": 3,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "patch": "@@ -25,10 +25,12 @@\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n+import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.location.basic.PortRanges;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.net.Cidr;\n \n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -52,12 +54,11 @@\n \n     @SetFromFlag(\"reverseLookupNetwork\")\n     ConfigKey<String> REVERSE_LOOKUP_NETWORK = new BasicConfigKey<String>(String.class,\n-            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone (defaults to server address /24)\");\n+            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone\");\n \n     @SetFromFlag(\"subnet\")\n     ConfigKey<String> MANAGEMENT_CIDR = new BasicConfigKey<String>(String.class,\n-            \"bind.access.cidr\", \"Subnet CIDR allowed to access DNS\", \"0.0.0.0/0\");\n-            // TODO should default be a /0, or 'any', or use brooklyn management CIDR?\n+            \"bind.access.cidr\", \"Subnet CIDR or ACL allowed to access DNS\", \"0.0.0.0/0\");\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @SetFromFlag(\"hostnameSensor\")\n@@ -82,6 +83,14 @@\n             \"bind.template.named-conf\", \"The BIND named configuration file (as FreeMarker template)\",\n             \"classpath://brooklyn/entity/network/bind/named.conf\");\n \n+    /* Reverse lookup attributes. */\n+\n+    AttributeSensor<Cidr> REVERSE_LOOKUP_CIDR = new BasicAttributeSensor<Cidr>(Cidr.class,\n+            \"bind.reverse-lookup.cidr\", \"The network CIDR that hosts must have for reverse lookup entriers to be added (default uses server address /24)\");\n+\n+    AttributeSensor<String> REVERSE_LOOKUP_DOMAIN = new BasicAttributeSensor<String>(String.class,\n+            \"bind.reverse-lookup.domain\", \"The in-addr.arpa reverse lookup domain name\");\n+\n     /* Configuration applicable to clients of the BIND DNS service. */\n \n     @SetFromFlag(\"replaceResolvConf\")",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "sha": "271e898bac199988041f3e2eee2b5712b633937b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java?ref=52e041b49f732362d43dab9b14d6a0c86f13a508",
                "deletions": 16,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "patch": "@@ -16,8 +16,6 @@\n package brooklyn.entity.network.bind;\n \n import java.io.ByteArrayInputStream;\n-import java.net.InetAddress;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -67,7 +65,6 @@\n     private Multimap<Location, Entity> entityLocations = HashMultimap.create();\n     private ConcurrentMap<String, String> addressMappings = Maps.newConcurrentMap();\n     private ConcurrentMap<String, String> reverseMappings = Maps.newConcurrentMap();\n-    private Cidr reverseNetwork;\n \n     public BindDnsServerImpl() {\n         super();\n@@ -89,11 +86,12 @@ public long getSerial() {\n         return serial.incrementAndGet();\n     }\n \n+    public Cidr getReverseLookupNetwork() {\n+        return getAttribute(REVERSE_LOOKUP_CIDR);\n+    }\n+\n     public String getReverseLookupDomain() {\n-        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n-        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n-        reverseNetwork = new Cidr(reverse + \"/24\");\n-        return Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \" .in-addr.arpa\";\n+        return getAttribute(REVERSE_LOOKUP_DOMAIN);\n     }\n \n     @Override\n@@ -134,6 +132,12 @@ public void disconnectSensors() {\n \n     @Override\n     protected void preStart() {\n+        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n+        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n+        setAttribute(REVERSE_LOOKUP_CIDR, new Cidr(reverse + \"/24\"));\n+        String reverseLookupDomain = Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \".in-addr.arpa\";\n+        setAttribute(REVERSE_LOOKUP_DOMAIN, reverseLookupDomain);\n+\n         Map<?, ?> flags = MutableMap.builder()\n                 .put(\"name\", \"Address tracker\")\n                 .put(\"sensorsToTrack\", ImmutableSet.of(getConfig(HOSTNAME_SENSOR)))\n@@ -142,14 +146,16 @@ protected void preStart() {\n             @Override\n             protected void onEntityChange(Entity member) { added(member); }\n             @Override\n-            protected void onEntityAdded(Entity member) { added(member); }\n+            protected void onEntityAdded(Entity member) {\n+                if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n+            }\n             @Override\n             protected void onEntityRemoved(Entity member) { removed(member); }\n         };\n \n         // For any entities that have already come up\n         for (Entity member : entities.getMembers()) {\n-            added(member);\n+            if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n         }\n \n         addPolicy(policy);\n@@ -171,7 +177,7 @@ public void added(Entity member) {\n                 if (!entityLocations.containsKey(machine)) {\n                     entityLocations.put(machine, member);\n                     addressMappings.putIfAbsent(address, hostname);\n-                    if (reverseNetwork.contains(new Cidr(address + \"/32\"))) {\n+                    if (getReverseLookupNetwork().contains(new Cidr(address + \"/32\"))) {\n                         String octet = Iterables.get(Splitter.on('.').split(address), 3);\n                         reverseMappings.putIfAbsent(hostname, octet);\n                     }\n@@ -181,8 +187,6 @@ public void added(Entity member) {\n                     configure(machine);\n                     LOG.info(\"{} added at location {} with name {}\", new Object[] { member, machine, hostname });\n                 }\n-            } else {\n-                LOG.warn(\"added({}) called but entity not ready\", member);\n             }\n         }\n     }\n@@ -208,12 +212,10 @@ private Location findLocation(Entity member) {\n                     return entry.getKey();\n                 }\n             }\n-            return null;\n-        } else {\n-            return null;\n         }\n+        return null;\n     }\n-    \n+\n     public void update() {\n         Optional<Location> location = Iterables.tryFind(getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n         SshMachineLocation machine = (SshMachineLocation) location.get();",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/52e041b49f732362d43dab9b14d6a0c86f13a508/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "sha": "6ab00b68adf0e39a92ce61eeb5260b6c4935ae91",
                "status": "modified"
            }
        ],
        "message": "Review changes for #810 including fix for NPE and adding new reverse lookup attributes",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/af3d47585927951bbb1e4bd8623b92c05e08f87d",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "TestBindDnsServerImpl.java"
        ]
    },
    "incubator-brooklyn_5868b7d": {
        "bug_id": "incubator-brooklyn_5868b7d",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/5868b7d65a247512cb14d78f0406ca7de52eb508",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5868b7d65a247512cb14d78f0406ca7de52eb508/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java?ref=5868b7d65a247512cb14d78f0406ca7de52eb508",
                "deletions": 1,
                "filename": "software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "patch": "@@ -152,12 +152,18 @@ public void attachLifecycleEffectors(Entity entity) {\n         return new EffectorBody<Void>() {\n             @Override\n             public Void call(ConfigBag parameters) {\n+                Collection<? extends Location> locations  = null;\n+\n                 Object locationsRaw = parameters.getStringKey(LOCATIONS.getName());\n-                Collection<? extends Location> locations = Locations.coerceToCollection(entity().getManagementContext(), locationsRaw);\n+                if (locationsRaw != null) {\n+                    locations = Locations.coerceToCollection(entity().getManagementContext(), locationsRaw);\n+                }\n+\n                 if (locations==null) {\n                     // null/empty will mean to inherit from parent\n                     locations = Collections.emptyList();\n                 }\n+\n                 start(locations);\n                 return null;\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5868b7d65a247512cb14d78f0406ca7de52eb508/software/base/src/main/java/brooklyn/entity/software/MachineLifecycleEffectorTasks.java",
                "sha": "8381e99ceb54bac71e9f0c64dfa563d6461f1ee9",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on creating entities with no explicit location",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/253583e8cc68c8edf8bee5c725497bd393b8be02",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "MachineLifecycleEffectorTasksTest.java"
        ]
    },
    "incubator-brooklyn_5feb638": {
        "bug_id": "incubator-brooklyn_5feb638",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/5feb638f5988f7ed94fb85c3b39b542342a5d257",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "patch": "@@ -275,15 +275,22 @@ public T call() {\n \n     protected abstract <T> Task<T> runAtEntity(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n+    @Override\n     public abstract void addEntitySetListener(CollectionChangeListener<Entity> listener);\n \n+    @Override\n     public abstract void removeEntitySetListener(CollectionChangeListener<Entity> listener);\n     \n     @Override\n     public StringConfigMap getConfig() {\n         return configMap;\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        return configMap;\n+    }\n+\n     @Override\n     public synchronized LocationRegistry getLocationRegistry() {\n         if (locationRegistry==null) locationRegistry = new BasicLocationRegistry(this);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "sha": "d5d353fba9804d284eef2177a3a8bc3d906d21dd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "patch": "@@ -4,6 +4,7 @@\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n \n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Effector;\n import brooklyn.entity.Entity;\n@@ -41,4 +42,6 @@\n     <T> Task<T> invokeEffector(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n     BrooklynStorage getStorage();\n+    \n+    BrooklynProperties getBrooklynProperties();\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "sha": "57139e3bdab9edee45c896b93b7045ed93ed61e3",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "patch": "@@ -13,6 +13,7 @@\n import java.util.concurrent.TimeoutException;\n \n import brooklyn.catalog.BrooklynCatalog;\n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.StringConfigMap;\n import brooklyn.entity.Application;\n import brooklyn.entity.Effector;\n@@ -154,6 +155,12 @@ public StringConfigMap getConfig() {\n         return initialManagementContext.getConfig();\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        checkInitialManagementContextReal();\n+        return initialManagementContext.getBrooklynProperties();\n+    }\n+\n     @Override\n     public BrooklynStorage getStorage() {\n         checkInitialManagementContextReal();",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "sha": "a4ef9b798647a2ae906645253f025f7a4ebffa57",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/5feb638f5988f7ed94fb85c3b39b542342a5d257/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java?ref=5feb638f5988f7ed94fb85c3b39b542342a5d257",
                "deletions": 0,
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "patch": "@@ -331,7 +331,10 @@ protected BrooklynLauncher doLaunch() {\n                 brooklynProperties = builder.build();\n             }\n             managementContext = new LocalManagementContext(brooklynProperties);\n+        } else if (brooklynProperties == null) {\n+            brooklynProperties = ((ManagementContextInternal)managementContext).getBrooklynProperties();\n         }\n+        \n         for (Map.Entry<String, Object> entry : brooklynAdditionalProperties.entrySet()) {\n             brooklynProperties.put(entry.getKey(), entry.getValue());\n         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/5feb638f5988f7ed94fb85c3b39b542342a5d257/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "sha": "20425ed86bae779fc9d849ff5416e9e5f4bf55a6",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #920 from aledsage/fix/BrooklynLauncher-supplying-ManagementContext\n\nFix NPE when BrooklynLauncher given ManagementContext",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/0441b3e73d6644a8b53c29925aade624bb70a6ee",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynLauncherTest.java"
        ]
    },
    "incubator-brooklyn_638809c": {
        "bug_id": "incubator-brooklyn_638809c",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/638809cb522f0524ffebc7a888e18f4423aaa6b8",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/638809cb522f0524ffebc7a888e18f4423aaa6b8/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=638809cb522f0524ffebc7a888e18f4423aaa6b8",
                "deletions": 3,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -1135,7 +1135,8 @@ protected SshMachineLocation createTemporarySshMachineLocation(HostAndPort hostA\n      * Create the user immediately - executing ssh commands as required.\n      */\n     protected LoginCredentials createUser(ComputeService computeService, NodeMetadata node, Optional<HostAndPort> hostAndPortOverride, ConfigBag config) {\n-        UserCreation userCreation = createUserStatements(computeService.getImage(node.getImageId()), config);\n+        Image image = (node.getImageId() != null) ? computeService.getImage(node.getImageId()) : null;\n+        UserCreation userCreation = createUserStatements(image, config);\n         \n         if (!userCreation.statements.isEmpty()) {\n             org.jclouds.compute.domain.OsFamily osFamily = node.getOperatingSystem().getFamily();\n@@ -1260,15 +1261,15 @@ public UserCreation(LoginCredentials creds, List<Statement> statements) {\n      * @param config Configuration for creating the VM\n      * @return       The commands required to create the user, along with the expected login credentials.\n      */\n-    protected UserCreation createUserStatements(Image image, ConfigBag config) {\n+    protected UserCreation createUserStatements(@Nullable Image image, ConfigBag config) {\n         //NB: we ignore private key here because, by default we probably should not be installing it remotely;\n         //also, it may not be valid for first login (it is created before login e.g. on amazon, so valid there;\n         //but not elsewhere, e.g. on rackspace).\n         \n         LoginCredentials loginCreds = null;\n         String user = getUser(config);\n         String explicitLoginUser = config.get(LOGIN_USER);\n-        String loginUser = groovyTruth(explicitLoginUser) ? explicitLoginUser : (image.getDefaultCredentials() != null) ? image.getDefaultCredentials().identity : null;\n+        String loginUser = groovyTruth(explicitLoginUser) ? explicitLoginUser : (image != null && image.getDefaultCredentials() != null) ? image.getDefaultCredentials().identity : null;\n         Boolean dontCreateUser = config.get(DONT_CREATE_USER);\n         Boolean grantUserSudo = config.get(GRANT_USER_SUDO);\n         String publicKeyData = LocationConfigUtils.getPublicKeyData(config);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/638809cb522f0524ffebc7a888e18f4423aaa6b8/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "da5f5dd953b27ade3950c2cce01f1fc35ce7fa13",
                "status": "modified"
            }
        ],
        "message": "JcloudsLocation: avoid NPE if node.getImageId null",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/3e7aa47db620e87026d970df6ed7933d20cb19b6",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_6b4b9e5": {
        "bug_id": "incubator-brooklyn_6b4b9e5",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/6b4b9e5d31281d76b1478926e195a556592796c8",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/6b4b9e5d31281d76b1478926e195a556592796c8/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java?ref=6b4b9e5d31281d76b1478926e195a556592796c8",
                "deletions": 6,
                "filename": "core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "patch": "@@ -28,13 +28,17 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import brooklyn.location.Location;\n import brooklyn.location.LocationSpec;\n import brooklyn.location.MachineLocation;\n import brooklyn.location.MachineProvisioningLocation;\n import brooklyn.location.NoMachinesAvailableException;\n import brooklyn.management.LocationManager;\n import brooklyn.util.collections.MutableMap;\n+import brooklyn.util.collections.MutableSet;\n import brooklyn.util.flags.SetFromFlag;\n import brooklyn.util.stream.Streams;\n import brooklyn.util.text.WildcardGlobs;\n@@ -63,6 +67,8 @@\n     // and getMachines() returns the real sets risking \n     // ConcurrentModificationException in the caller if it iterates over them etc.\n     \n+    private static final Logger log = LoggerFactory.getLogger(FixedListMachineProvisioningLocation.class);\n+    \n     private final Object lock = new Object();\n     \n     @SetFromFlag\n@@ -89,14 +95,21 @@ public FixedListMachineProvisioningLocation(Map properties) {\n     public void init() {\n         super.init();\n         \n-        for (MachineLocation location: machines) {\n-            // FIXME Bad casting\n-            Location machine = (Location) location;\n-            Location parent = machine.getParent();\n-            if (parent == null) {\n-                addChild(machine);\n+        Set<T> machinesCopy = MutableSet.of();\n+        for (T location: machines) {\n+            if (location==null) {\n+                log.warn(\"\"+this+\" initialized with null location, removing (may be due to rebind with reference to an unmanaged location)\");\n+            } else {\n+                Location parent = location.getParent();\n+                if (parent == null) {\n+                    addChild(location);\n+                }\n+                machinesCopy.add(location);\n             }\n         }\n+        if (!machinesCopy.equals(machines)) {\n+            machines = machinesCopy;\n+        }\n     }\n     \n     @Override",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/6b4b9e5d31281d76b1478926e195a556592796c8/core/src/main/java/brooklyn/location/basic/FixedListMachineProvisioningLocation.java",
                "sha": "595ab8a7285a03872d2e5ba275240ba6d11e5f75",
                "status": "modified"
            }
        ],
        "message": "avoid NPE on rebind when locations have been unmanaged",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/04a18c073cbf5a3a5911ad51ce9a76ec074e1d76",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "FixedListMachineProvisioningLocationTest.java"
        ]
    },
    "incubator-brooklyn_71561bb": {
        "bug_id": "incubator-brooklyn_71561bb",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/71561bb1ebf63cc24000ca07590a9c50491d9e82",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/71561bb1ebf63cc24000ca07590a9c50491d9e82/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy?ref=71561bb1ebf63cc24000ca07590a9c50491d9e82",
                "deletions": 2,
                "filename": "software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "patch": "@@ -1,5 +1,7 @@\n package brooklyn.entity.basic\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import groovy.time.TimeDuration\n \n import java.util.concurrent.TimeUnit\n@@ -219,9 +221,10 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \n     @Override\n \tpublic void start(Collection<? extends Location> locations) {\n+        checkNotNull(locations, \"locations\");\n \t\tsetAttribute(SERVICE_STATE, Lifecycle.STARTING)\n \t\tif (!sensorRegistry) sensorRegistry = new SensorRegistry(this)\n-\n+        \n \t\tstartInLocation locations\n \t\tpostStart()\n \t\tsensorRegistry.activateAdapters()\n@@ -234,7 +237,7 @@ public abstract class SoftwareProcessEntity extends AbstractEntity implements St\n \t\tif (locations.size() != 1) {\n             throw new IllegalArgumentException(\"Expected one location when starting \"+this+\", but given \"+locations);\n \t\t}\n-\t\tLocation location = Iterables.getOnlyElement(locations)\n+\t\tLocation location = checkNotNull(Iterables.getOnlyElement(locations), \"location\");\n \t\tstartInLocation(location)\n \t}\n ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/71561bb1ebf63cc24000ca07590a9c50491d9e82/software/base/src/main/java/brooklyn/entity/basic/SoftwareProcessEntity.groovy",
                "sha": "48c94b5b82a1746b15a27d36ca42aff171804e0f",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on SoftwareProcessEntity.start(null)",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/8285cb7e320824eed67c1a77c77182d20cb87b4a",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "SoftwareProcessEntityTest.java"
        ]
    },
    "incubator-brooklyn_79b2cac": {
        "bug_id": "incubator-brooklyn_79b2cac",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/79b2cac02edf21e3ada14f62c122dd091d797f1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/79b2cac02edf21e3ada14f62c122dd091d797f1f/core/src/main/java/brooklyn/entity/basic/Entities.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Entities.java?ref=79b2cac02edf21e3ada14f62c122dd091d797f1f",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/entity/basic/Entities.java",
                "patch": "@@ -1022,7 +1022,7 @@ public static void waitForServiceUp(final Entity entity, Duration timeout) {\n                     .rethrowException().backoffTo(Duration.ONE_SECOND)\n                     .until(new Callable<Boolean>() {\n                         public Boolean call() {\n-                            return entity.getAttribute(Startable.SERVICE_UP);\n+                            return Boolean.TRUE.equals(entity.getAttribute(Startable.SERVICE_UP));\n                         }})\n                     .run()) {\n                 throw new IllegalStateException(\"Timeout waiting for SERVICE_UP from \"+entity);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/79b2cac02edf21e3ada14f62c122dd091d797f1f/core/src/main/java/brooklyn/entity/basic/Entities.java",
                "sha": "51f86f67075c10f8489008ac25105e27364a8f67",
                "status": "modified"
            }
        ],
        "message": "Fix Entities.waitForServiceUp to avoid NPE\n\n- Never return null for repeater\u2019s `until`; always return TRUE or FALSE.\n  Otherwise it will NPE.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/de1d8bcc0b4675842d9c531bf38fe5612cdfbd82",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "EntitiesTest.java"
        ]
    },
    "incubator-brooklyn_8039a82": {
        "bug_id": "incubator-brooklyn_8039a82",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8039a827ab7b063674ceddf5f4be679e1d32ca5c",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8039a827ab7b063674ceddf5f4be679e1d32ca5c/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=8039a827ab7b063674ceddf5f4be679e1d32ca5c",
                "deletions": 3,
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "patch": "@@ -345,10 +345,12 @@ public void init() {\n     \n     @Override\n     public void close() throws IOException {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"{} invalidating all entries in ssh pool cache. Final stats: {}\", this, sshPoolCache.stats());\n+        if (sshPoolCache != null) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"{} invalidating all entries in ssh pool cache. Final stats: {}\", this, sshPoolCache.stats());\n+            }\n+            sshPoolCache.invalidateAll();\n         }\n-        sshPoolCache.invalidateAll();\n         if (cleanupTask != null) cleanupTask.cancel(false);\n     }\n \n@@ -389,6 +391,10 @@ public int getPort() {\n     }\n \n     protected <T> T execSsh(Map<String, ?> props, Function<ShellTool, T> task) {\n+        if (sshPoolCache == null) {\n+            // required for uses that instantiate SshMachineLocation directly, so init() will not have been called\n+            sshPoolCache = buildSshToolPoolCacheLoader();\n+        }\n         Pool<SshTool> pool = sshPoolCache.getUnchecked(props);\n         if (LOG.isTraceEnabled()) {\n             LOG.trace(\"{} execSsh got pool: {}\", this, pool);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8039a827ab7b063674ceddf5f4be679e1d32ca5c/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "sha": "3bcb45131aac6c1b03dca25ac21c54669dac86fb",
                "status": "modified"
            }
        ],
        "message": "Fix SshMachineLocation NPE\n\n- sshPoolCache initialisation was moved to init() previously\n  But for things that instantiate SshMachineLocation directly then\n  the framework won't have called init.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/6de4ee9e4941279f9eb8ebca2d257c93266a6837",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "SshMachineLocationTest.java"
        ]
    },
    "incubator-brooklyn_80c40c5": {
        "bug_id": "incubator-brooklyn_80c40c5",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/80c40c52e66fa25ed46c208a63e8a81131ae87a8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/80c40c52e66fa25ed46c208a63e8a81131ae87a8/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java?ref=80c40c52e66fa25ed46c208a63e8a81131ae87a8",
                "deletions": 0,
                "filename": "usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "patch": "@@ -171,6 +171,8 @@ public static Server startServer(ManagementContext mgmt, ContextHandler context,\n                 ((BrooklynProperties)mgmt.getConfig()).put(BrooklynWebConfig.SECURITY_PROVIDER_CLASSNAME, AnyoneSecurityProvider.class.getName());\n             }\n         }\n+        if (mgmt != null)\n+            mgmt.getHighAvailabilityManager().disabled();\n         InetSocketAddress bindLocation = new InetSocketAddress(\n                 secure ? Networking.ANY_NIC : Networking.LOOPBACK, \n                         Networking.nextAvailablePort(FAVOURITE_PORT));",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/80c40c52e66fa25ed46c208a63e8a81131ae87a8/usage/rest-server/src/test/java/brooklyn/rest/BrooklynRestApiLauncher.java",
                "sha": "6465799758bb9eccc8a0a72232750a93afcf4fb2",
                "status": "modified"
            }
        ],
        "message": "Disable HA when running from BrooklynRestApiLauncher\n\nOtherwise HighAvailabilityManagerImpl throws NPE when creating\nmanagement record",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/38b9031d11e27f176a817a6169c16f6452e0a262",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynRestApiLauncherTest.java"
        ]
    },
    "incubator-brooklyn_8428219": {
        "bug_id": "incubator-brooklyn_8428219",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8428219afa7f45c2541c04fc4a381e756bdf3932",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "patch": "@@ -275,15 +275,22 @@ public T call() {\n \n     protected abstract <T> Task<T> runAtEntity(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n+    @Override\n     public abstract void addEntitySetListener(CollectionChangeListener<Entity> listener);\n \n+    @Override\n     public abstract void removeEntitySetListener(CollectionChangeListener<Entity> listener);\n     \n     @Override\n     public StringConfigMap getConfig() {\n         return configMap;\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        return configMap;\n+    }\n+\n     @Override\n     public synchronized LocationRegistry getLocationRegistry() {\n         if (locationRegistry==null) locationRegistry = new BasicLocationRegistry(this);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/AbstractManagementContext.java",
                "sha": "d5d353fba9804d284eef2177a3a8bc3d906d21dd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "patch": "@@ -4,6 +4,7 @@\n import java.util.Map;\n import java.util.concurrent.ExecutionException;\n \n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Effector;\n import brooklyn.entity.Entity;\n@@ -41,4 +42,6 @@\n     <T> Task<T> invokeEffector(final Entity entity, final Effector<T> eff, @SuppressWarnings(\"rawtypes\") final Map parameters);\n \n     BrooklynStorage getStorage();\n+    \n+    BrooklynProperties getBrooklynProperties();\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/ManagementContextInternal.java",
                "sha": "57139e3bdab9edee45c896b93b7045ed93ed61e3",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "patch": "@@ -13,6 +13,7 @@\n import java.util.concurrent.TimeoutException;\n \n import brooklyn.catalog.BrooklynCatalog;\n+import brooklyn.config.BrooklynProperties;\n import brooklyn.config.StringConfigMap;\n import brooklyn.entity.Application;\n import brooklyn.entity.Effector;\n@@ -154,6 +155,12 @@ public StringConfigMap getConfig() {\n         return initialManagementContext.getConfig();\n     }\n \n+    @Override\n+    public BrooklynProperties getBrooklynProperties() {\n+        checkInitialManagementContextReal();\n+        return initialManagementContext.getBrooklynProperties();\n+    }\n+\n     @Override\n     public BrooklynStorage getStorage() {\n         checkInitialManagementContextReal();",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/core/src/main/java/brooklyn/management/internal/NonDeploymentManagementContext.java",
                "sha": "a4ef9b798647a2ae906645253f025f7a4ebffa57",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8428219afa7f45c2541c04fc4a381e756bdf3932/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java?ref=8428219afa7f45c2541c04fc4a381e756bdf3932",
                "deletions": 0,
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "patch": "@@ -331,7 +331,10 @@ protected BrooklynLauncher doLaunch() {\n                 brooklynProperties = builder.build();\n             }\n             managementContext = new LocalManagementContext(brooklynProperties);\n+        } else if (brooklynProperties == null) {\n+            brooklynProperties = ((ManagementContextInternal)managementContext).getBrooklynProperties();\n         }\n+        \n         for (Map.Entry<String, Object> entry : brooklynAdditionalProperties.entrySet()) {\n             brooklynProperties.put(entry.getKey(), entry.getValue());\n         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8428219afa7f45c2541c04fc4a381e756bdf3932/usage/launcher/src/main/java/brooklyn/launcher/BrooklynLauncher.java",
                "sha": "20425ed86bae779fc9d849ff5416e9e5f4bf55a6",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when BrooklynLauncher given ManagementContext\n\n- caused by brooklynProperties being null",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/f8c18b8cd5f687a4bf83479a4c62a15f7a012ce7",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynLauncherTest.java"
        ]
    },
    "incubator-brooklyn_892823d": {
        "bug_id": "incubator-brooklyn_892823d",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/892823d3e6b86c77e37fc89fceb8c3c198565c4a",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/892823d3e6b86c77e37fc89fceb8c3c198565c4a/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=892823d3e6b86c77e37fc89fceb8c3c198565c4a",
                "deletions": 3,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -1290,11 +1290,13 @@ public Template buildTemplate(ComputeService computeService, ConfigBag config) {\n \n         // Finally try to build the template\n         Template template;\n+        Image image;\n         try {\n             template = templateBuilder.build();\n             if (template==null) throw new NullPointerException(\"No template found (templateBuilder.build returned null)\");\n-            LOG.debug(\"jclouds found template \"+template+\" (image \"+template.getImage()+\") for provisioning in \"+this+\" for \"+config.getDescription());\n-            if (template.getImage()==null) throw new NullPointerException(\"Template does not contain an image (templateBuilder.build returned invalid template)\");\n+            image = template.getImage();\n+            LOG.debug(\"jclouds found template \"+template+\" (image \"+image+\") for provisioning in \"+this+\" for \"+config.getDescription());\n+            if (image==null) throw new NullPointerException(\"Template does not contain an image (templateBuilder.build returned invalid template)\");\n         } catch (AuthorizationException e) {\n             LOG.warn(\"Error resolving template: not authorized (rethrowing: \"+e+\")\");\n             throw new IllegalStateException(\"Not authorized to access cloud \"+this+\" to resolve \"+templateBuilder, e);\n@@ -1319,7 +1321,8 @@ public Template buildTemplate(ComputeService computeService, ConfigBag config) {\n         }\n         TemplateOptions options = template.getOptions();\n \n-        if (template.getImage().getOperatingSystem().getFamily().equals(OsFamily.WINDOWS)) {\n+        OsFamily osFamily = (image.getOperatingSystem() != null) ? image.getOperatingSystem().getFamily() : null;\n+        if (OsFamily.WINDOWS == osFamily) {\n             if (!(config.containsKey(JcloudsLocationConfig.USER_METADATA_STRING) || config.containsKey(JcloudsLocationConfig.USER_METADATA_MAP))) {\n                 config.put(JcloudsLocationConfig.USER_METADATA_STRING, WinRmMachineLocation.getDefaultUserMetadataString());\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/892823d3e6b86c77e37fc89fceb8c3c198565c4a/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "23b79eda356903266026e7d71d493c5206300616",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when jclouds image does not have OsFamily",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/5dd08aa11cd613e6b0ccad0e19d6b5880f34141f",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_8ced88b": {
        "bug_id": "incubator-brooklyn_8ced88b",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Attributes.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "patch": "@@ -28,7 +28,7 @@\n     /**\n      * Application information sensors.\n      * \n-     * @deprecated since 0.5; see {@link ConfigKeys#SUGGESTED_VERSION}\n+     * @deprecated since 0.5; see {@link BrooklynConfigKeys#SUGGESTED_VERSION}\n      */\n     @Deprecated\n     AttributeSensor<String> VERSION = Sensors.newStringSensor( \"version\", \"Version information\");",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "sha": "6af95be92773598e35274f57ae13a63d05a65c51",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 40,
                "filename": "core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "patch": "@@ -136,44 +136,4 @@\n     public static ConfigKey<Boolean> newBooleanConfigKey(String name, String description, Boolean defaultValue) {\n         return newConfigKey(Boolean.class, name, description, defaultValue);\n     }\n-\n-    /* Key definitions were deprecated here in 0.6.0 because they introduce nasty circular dependencies on the\n-     * methods in this class, causing some final fields to be null when they are accessed. \n-     */\n-\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> BROOKLYN_DATA_DIR = BrooklynConfigKeys.BROOKLYN_DATA_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_VERSION = BrooklynConfigKeys.SUGGESTED_VERSION;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_INSTALL_DIR = BrooklynConfigKeys.SUGGESTED_INSTALL_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_RUN_DIR = BrooklynConfigKeys.SUGGESTED_RUN_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> START_LATCH = BrooklynConfigKeys.START_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> INSTALL_LATCH = BrooklynConfigKeys.INSTALL_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> CUSTOMIZE_LATCH = BrooklynConfigKeys.CUSTOMIZE_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> LAUNCH_LATCH = BrooklynConfigKeys.LAUNCH_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_TOOL_CLASS = BrooklynConfigKeys.SSH_TOOL_CLASS;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_HOST = BrooklynConfigKeys.SSH_CONFIG_HOST;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> SSH_CONFIG_PORT = BrooklynConfigKeys.SSH_CONFIG_PORT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_USER = BrooklynConfigKeys.SSH_CONFIG_USER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_PASSWORD = BrooklynConfigKeys.SSH_CONFIG_PASSWORD;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_DIR = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_HEADER = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_DIRECT_HEADER = BrooklynConfigKeys.SSH_CONFIG_DIRECT_HEADER;\n-\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "sha": "f4a27a7a4921369b651e823e92de197bffa63c64",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 3,
                "filename": "core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "patch": "@@ -13,7 +13,7 @@\n \n import brooklyn.entity.Entity;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.drivers.EntityDriver;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -92,14 +92,14 @@ public static String substitute(DownloadRequirement req, String basevalue) {\n         Entity entity = driver.getEntity();\n         String type = entity.getEntityType().getName();\n         String simpleType = type.substring(type.lastIndexOf(\".\")+1);\n-        String version = entity.getConfig(ConfigKeys.SUGGESTED_VERSION);\n+        String version = entity.getConfig(BrooklynConfigKeys.SUGGESTED_VERSION);\n         \n         String v2 = entity.getAttribute(Attributes.VERSION);\n         if (v2!=null && !v2.equals(version)) {\n             // Attributes.VERSION was deprecated in 0.5.0 but was preferred here without warning in 0.6.0\n             // now warn on use of deprecated key when it is different\n             LOG.warn(\"Using deprecated key \"+Attributes.VERSION+\", value \"+v2+\", which differs from the \" +\n-            \t\t\"preferred key \"+ConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n+            \t\t\"preferred key \"+BrooklynConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n             version = v2;\n         }\n         ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "sha": "40c20b919763cabf2551d035a31e69d6d8a09424",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "patch": "@@ -13,7 +13,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -135,7 +135,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "sha": "1b8df65dae914ddd952b818d255127373af6e718",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 5,
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "patch": "@@ -12,9 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.config.ConfigKey;\n-import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.Location;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n@@ -24,7 +22,6 @@\n import brooklyn.util.text.KeyValueParser;\n \n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n /**\n@@ -96,7 +93,7 @@ protected Location newLocationFromString(String spec, brooklyn.location.Location\n             flags.put(\"name\", namePart);\n         }\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "sha": "ebd0d7636ae686baa7aec6400bba64af49bb322b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "patch": "@@ -10,7 +10,7 @@\n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.location.Location;\n@@ -89,7 +89,7 @@ public void testReturnsLocalRepoThenOverrideThenAttributeValThenCloudsoftUrlThen\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"http://fromprops/${version}.allprimary\");\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"http://fromfallback/${version}.allfallback\");\n         entity.setAttribute(Attributes.DOWNLOAD_URL, \"http://fromattrib/${version}.default\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         String expectedFilename = \"myversion.allprimary\";\n \n         String expectedLocalRepo = String.format(\"file://$HOME/.brooklyn/repository/%s/%s/%s\", \"TestEntity\", \"myversion\", expectedFilename);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "sha": "e4d13d8fe85a0da239ea512ca9d6ca3f4b460bb2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 4,
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "patch": "@@ -10,7 +10,7 @@\n \n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -79,7 +79,7 @@ public void testReturnsGlobalFallbackUrl() throws Exception {\n     @Test\n     public void testSubstitutionsAppliedToFallbackUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(ImmutableList.<String>of(), ImmutableList.of(\"version=myversion\"));\n     }\n \n@@ -93,15 +93,15 @@ public void testReturnsGlobalFallbackUrlAsLast() throws Exception {\n     @Test\n     public void testReturnsGlobalUrlWithEntitySubstituions() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"version=myversion\");\n     }\n     \n     @Test\n     public void testEntitySpecificUrlOverridesGlobalUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n         brooklynProperties.put(\"brooklyn.downloads.entity.TestEntity.url\", \"overridden,version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"overridden,version=myversion\", \"version=myversion\");\n     }\n     ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "sha": "f169bee621189aa2186d80cd49946c45e34503ce",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "patch": "@@ -12,7 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -147,7 +147,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "sha": "e9ac5b600cbd96274ed6a9a4f27a727e4874b6b4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "patch": "@@ -7,7 +7,7 @@\n import org.slf4j.LoggerFactory;\n \n import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.basic.DeprecatedKeysMappingBuilder;\n import brooklyn.location.basic.LocationPropertiesFromBrooklynProperties;\n \n@@ -74,7 +74,7 @@\n         jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi, properties)));\n         jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi, regionName, properties)));\n         if (!Strings.isNullOrEmpty(namedLocation)) jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation, properties)));\n-        String brooklynDataDir = (String) properties.get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+        String brooklynDataDir = (String) properties.get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n         if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n             jcloudsProperties.put(\"localTempDir\", new File(brooklynDataDir));\n         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "sha": "a3cef2ce3ffe8ec88bb3be62b4c8c370cbaa21ab",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 5,
                "filename": "software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "patch": "@@ -56,17 +56,17 @@ public void rebind() {\n \t@Override\n \tpublic void start() {\n \t    DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.INSTALL_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n             install();\n         }});\n         \n \t    DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.CUSTOMIZE_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n             customize();\n         }});\n         \n \t    DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.LAUNCH_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n             launch();\n         }});\n         \n@@ -113,9 +113,11 @@ public void restart() {\n         }});\n \t}\n \t\n-\tpublic EntityLocal getEntity() { return entity; } \n+\t@Override\n+    public EntityLocal getEntity() { return entity; } \n \n-\tpublic Location getLocation() { return location; } \n+\t@Override\n+    public Location getLocation() { return location; } \n     \n     public InputStream getResource(String url) {\n         return new ResourceUtils(entity).getResourceFromUrl(url);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "sha": "1adc1ee0948935095c2056ec67f77797f7c71083",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 1,
                "filename": "software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "patch": "@@ -5,6 +5,7 @@\n import java.util.Map;\n \n import brooklyn.config.ConfigKey;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.java.UsesJava;\n@@ -31,7 +32,7 @@\n             Map.class, \"brooklynnode.copytorundir\", \"URLs of resources to be copied across to the server, giving the path they are to be copied to\", MutableMap.of());\n     \n     @SetFromFlag(\"version\")\n-    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(ConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n+    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(BrooklynConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n \n     // Takes presidence over downloadUrl, if non-null\n     @SetFromFlag(\"distroUploadUrl\")",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "sha": "b41bcad9694a57a5a38b1fe0917255d6bf0684bb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 5,
                "filename": "software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "patch": "@@ -12,8 +12,7 @@ import org.testng.annotations.BeforeMethod\n import org.testng.annotations.Test\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n-import brooklyn.entity.basic.ConfigKeys\n-import brooklyn.entity.basic.Entities;\n+import brooklyn.entity.basic.BrooklynConfigKeys\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.test.entity.TestApplication\n import brooklyn.test.entity.TestApplicationImpl\n@@ -22,7 +21,7 @@ import brooklyn.test.entity.TestEntityImpl\n import brooklyn.util.internal.ssh.SshTool\n import brooklyn.util.internal.ssh.cli.SshCliTool\n import brooklyn.util.internal.ssh.sshj.SshjTool\n-import brooklyn.util.stream.StreamGobbler;\n+import brooklyn.util.stream.StreamGobbler\n \n class StartStopSshDriverTest {\n \n@@ -69,7 +68,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshScriptHeaderUsedWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n+        entity.setConfig(BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         driver.execute(out: out, Arrays.asList(\"echo goodbye\"), \"test\");\n         String s = out.toString();\n@@ -81,7 +80,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshCliPickedUpWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n+        entity.setConfig(BrooklynConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n         driver.execute(Arrays.asList(\"echo hi\"), \"test\");\n         assertTrue(sshMachineLocation.lastTool instanceof SshCliTool, \"expect CLI tool, got \"+\n                         (sshMachineLocation.lastTool!=null ? \"\"+sshMachineLocation.lastTool.getClass()+\":\" : \"\") + sshMachineLocation.lastTool);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "sha": "84fdd44175812bd176981070400146c8c0830db6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "patch": "@@ -19,6 +19,7 @@\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.group.Cluster;\n import brooklyn.entity.group.DynamicCluster;\n@@ -30,7 +31,6 @@\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n-import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.util.flags.SetFromFlag;\n \n /**\n@@ -56,7 +56,7 @@\n public interface KafkaCluster extends Entity, Startable, Resizable, Group  {\n \n     @SetFromFlag(\"startTimeout\")\n-    ConfigKey<Integer> START_TIMEOUT = ConfigKeys.START_TIMEOUT;\n+    ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n \n     @SetFromFlag(\"initialSize\")\n     ConfigKey<Integer> INITIAL_SIZE = ConfigKeys.newConfigKeyWithDefault(Cluster.INITIAL_SIZE, 1);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "sha": "1217468e22ea2ac72731d2b5cdd8fc8577f61e5a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=8ced88b6569899c3b4a60c1d6717e2f1dfb82b99",
                "deletions": 2,
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "patch": "@@ -30,7 +30,7 @@\n import brooklyn.BrooklynVersion;\n import brooklyn.config.BrooklynServiceAttributes;\n import brooklyn.config.ConfigKey;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.launcher.config.CustomResourceLocator;\n import brooklyn.location.PortRange;\n import brooklyn.location.basic.LocalhostMachineProvisioningLocation;\n@@ -147,7 +147,7 @@ public BrooklynWebServer(Map flags, ManagementContext managementContext) {\n         if (!leftovers.isEmpty())\n             log.warn(\"Ignoring unknown flags \" + leftovers);\n         \n-        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(ConfigKeys.BROOKLYN_DATA_DIR));\n+        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(BrooklynConfigKeys.BROOKLYN_DATA_DIR));\n         this.webappTempDir = new File(brooklynDataDir, \"jetty\");\n     }\n ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/8ced88b6569899c3b4a60c1d6717e2f1dfb82b99/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "sha": "12d43ef9ba9ae8b384bb3130d0319a0057c4f865",
                "status": "modified"
            }
        ],
        "message": "Deletes keys defined in ConfigKeys\n\n- Update all uses to the new BrooklynConfigKeys\n- Was previously deprecated, with fields in ConfigKeys referencing\n  those in BrooklynConfigKeys. But this led to strange NPEs where\n  ConfigKeys fields were null (presumably due to ordering of\n  initialising the two classes' fields)!\n- Breaks backwards compatibility, but better to have a compilation error\n  than a weird NPE.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/c62b647575b49c08b4dcc6dc6ce646794f4afea5",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynWebServerTest.java"
        ]
    },
    "incubator-brooklyn_92d213b": {
        "bug_id": "incubator-brooklyn_92d213b",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/92d213b4a55b2f51a35205d2ca0292d1988830d1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/92d213b4a55b2f51a35205d2ca0292d1988830d1/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=92d213b4a55b2f51a35205d2ca0292d1988830d1",
                "deletions": 1,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -1517,7 +1517,7 @@ protected JcloudsSshMachineLocation createJcloudsSshMachineLocation(ComputeServi\n     \n     protected Map<String,Object> extractSshConfig(ConfigBag setup, NodeMetadata node) {\n         ConfigBag nodeConfig = new ConfigBag();\n-        if (node!=null) {\n+        if (node!=null && node.getCredentials() != null) {\n             nodeConfig.putIfNotNull(PASSWORD, node.getCredentials().getPassword());\n             nodeConfig.putIfNotNull(PRIVATE_KEY_DATA, node.getCredentials().getPrivateKey());\n         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/92d213b4a55b2f51a35205d2ca0292d1988830d1/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "51f5aa8ceb7c816c7302559f9ba7405fd5ac02b9",
                "status": "modified"
            }
        ],
        "message": "JcloudsLocation: avoid NPE on rebindMachine",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/40fc99f5cf216afd1dfc038899448d5e2bdfeebe",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_a46bf80": {
        "bug_id": "incubator-brooklyn_a46bf80",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java?ref=a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a",
                "deletions": 1,
                "filename": "utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "patch": "@@ -213,9 +213,10 @@ protected void putInternal(Map target, Object k1, Object v1, Object ...kvOthers)\n             }\n         }\n \n-        /** as {@link #put(Object, Object, Object...)} for the kv-pairs in the given map */\n+        /** as {@link #put(Object, Object, Object...)} for the kv-pairs in the given map; ignores null for convenience */\n         public Navigator<T> put(Map map) {\n             map();\n+            if (map==null) return this;\n             ((Map)focus).putAll((Map)translate(map));\n             return this;\n         }\n@@ -388,6 +389,8 @@ protected void addFlattened(Collection target, Object item) {\n             target.add(translate(item));\n         }\n         \n+        /** Returns JSON serialized output for given focus in the given jsonya;\n+         * applies a naive toString for specialized types */\n         @Override\n         public String toString() {\n             return render(get());",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/a46bf8039da74d5f1bb3dc0d85cc8f45bd937e9a/utils/common/src/main/java/brooklyn/util/collections/Jsonya.java",
                "sha": "c4bac406647a98e9dbf5f6b66218fd31d5fc5276",
                "status": "modified"
            }
        ],
        "message": "jsonya now no-op if put(null), previously threw NPE",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a336c0df5e67f06da7cb2865d1b3da1f42351d95",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JsonyaTest.java"
        ]
    },
    "incubator-brooklyn_b11274a": {
        "bug_id": "incubator-brooklyn_b11274a",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b11274a450a09ec9b540cc9b8a9340b7c597e4c2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b11274a450a09ec9b540cc9b8a9340b7c597e4c2/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java?ref=b11274a450a09ec9b540cc9b8a9340b7c597e4c2",
                "deletions": 1,
                "filename": "usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "patch": "@@ -124,7 +124,7 @@ public void delete(String application, String entityToken, String sensorName) {\n         final EntityLocal entity = brooklyn().getEntity(application, entityToken);\n         AttributeSensor<?> sensor = findSensor(entity, sensorName);\n         if (log.isDebugEnabled())\n-            log.debug(\"REST user \"+Entitlements.getEntitlementContext().user()+\" deleting sensor \"+sensorName);\n+            log.debug(\"REST user \"+Entitlements.getEntitlementContext()+\" deleting sensor \"+sensorName);\n         ((EntityInternal)entity).removeAttribute(sensor);\n     }\n     ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b11274a450a09ec9b540cc9b8a9340b7c597e4c2/usage/rest-server/src/main/java/brooklyn/rest/resources/SensorResource.java",
                "sha": "fedd60dc9614620058012b4cbd7a61d9c43561fe",
                "status": "modified"
            }
        ],
        "message": "fix NPE in SensorResource",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/96ff6f76989697223e55abbc0a5ecf43ee6c82e3",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "SensorResourceTest.java"
        ]
    },
    "incubator-brooklyn_b2c549a": {
        "bug_id": "incubator-brooklyn_b2c549a",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476/core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/AbstractLocation.java?ref=b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "patch": "@@ -167,7 +167,7 @@ public void setManagementContext(ManagementContextInternal managementContext) {\n         Location oldParent = parent.get();\n         Set<Location> oldChildren = children;\n         Map<String, Object> oldConfig = configBag.getAllConfig();\n-        long oldCreationTimeUtc = creationTimeUtc.get();\n+        Long oldCreationTimeUtc = creationTimeUtc.get();\n         String oldDisplayName = name.get();\n         HostGeoInfo oldHostGeoInfo = hostGeoInfo.get();\n         ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/b2c549a4aa2bdbf47f37730a1fd0ba12ecc26476/core/src/main/java/brooklyn/location/basic/AbstractLocation.java",
                "sha": "808653f53ed4670023e6b36c80730ee4692696da",
                "status": "modified"
            }
        ],
        "message": "avoid NPE in AbstractLocation if creationTimeUtc null\n\n- happens if you unmanaged and then remanage an entity.\n- the old creationTimeUtc will have been deleted from storage so will\n  be null, so doing `long l = createTimeUtc.get()` NPEs",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/eacfb2667acd1715eace343a0103fddeecb8ff57",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "AbstractLocationTest.java"
        ]
    },
    "incubator-brooklyn_bb28e29": {
        "bug_id": "incubator-brooklyn_bb28e29",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33",
                "deletions": 1,
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "patch": "@@ -453,7 +453,7 @@ private String checkFileExists(String path, String name) {\n     public synchronized void stop() throws Exception {\n         if (server==null) return;\n         String root = getRootUrl();\n-        Threads.removeShutdownHook(shutdownHook);\n+        if (shutdownHook != null) Threads.removeShutdownHook(shutdownHook);\n         if (log.isDebugEnabled())\n             log.debug(\"Stopping Brooklyn web console at \"+root+ \" (\" + war + (wars != null ? \" and \" + wars.values() : \"\") + \")\");\n ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/bb28e29cc0f6b1f4eeea1a26d018375ca5a14d33/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "sha": "f4bfacb07265dfe35012c6d0388ef873e0e5315e",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in BrooklynWebServer.stop",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/5bef6866daf455e4abf2c69d02bb73b23ed36097",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynWebServerTest.java"
        ]
    },
    "incubator-brooklyn_c7e20ce": {
        "bug_id": "incubator-brooklyn_c7e20ce",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/c7e20ceb56c570f810b53e57241e5035b53b3fe1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/c7e20ceb56c570f810b53e57241e5035b53b3fe1/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/utils/common/src/main/java/brooklyn/util/text/Strings.java?ref=c7e20ceb56c570f810b53e57241e5035b53b3fe1",
                "deletions": 0,
                "filename": "utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "patch": "@@ -181,6 +181,7 @@ public static String removeAllFromStart(String string, String ...prefixes) {\n \n     /** convenience for {@link com.google.common.base.Joiner} */\n     public static String join(Iterable<? extends Object> list, String seperator) {\n+        if (list==null) return null;\n         boolean app = false;\n         StringBuilder out = new StringBuilder();\n         for (Object s: list) {",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/c7e20ceb56c570f810b53e57241e5035b53b3fe1/utils/common/src/main/java/brooklyn/util/text/Strings.java",
                "sha": "c619565c38c9dce58704e179d0a81271808c8240",
                "status": "modified"
            }
        ],
        "message": "strings.join does not throw NPE\n\nuseful when using the joiner enricher if the inputted list is null",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/3dde5f4748928a7b3c3fb01b759a7473a460adb4",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "incubator-brooklyn_cda838a": {
        "bug_id": "incubator-brooklyn_cda838a",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/cda838a41265ef45eebd1854ac688bef979a4c96",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/cda838a41265ef45eebd1854ac688bef979a4c96/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java?ref=cda838a41265ef45eebd1854ac688bef979a4c96",
                "deletions": 1,
                "filename": "software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "patch": "@@ -273,7 +273,8 @@ public String getJmxAgentJarUrl() {\n     public void applyJmxJavaSystemProperties(MutableMap.Builder<String,Object> result) {\n         if (!isJmx()) return ;\n \n-        HostAndPort jmx = BrooklynAccessUtils.getBrooklynAccessibleAddress(entity, entity.getAttribute(JMX_PORT));\n+        Integer jmxPort = Preconditions.checkNotNull(entity.getAttribute(JMX_PORT), \"jmx port must not be null for %s\", entity);\n+        HostAndPort jmx = BrooklynAccessUtils.getBrooklynAccessibleAddress(entity, jmxPort);\n         Integer jmxRemotePort = getEntity().getAttribute(JMX_PORT);\n         String hostName = jmx.getHostText();\n ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/cda838a41265ef45eebd1854ac688bef979a4c96/software/base/src/main/java/brooklyn/entity/java/JmxSupport.java",
                "sha": "f10cf8d591eb14eeb2df85f4b0c4fbfedb43dd71",
                "status": "modified"
            }
        ],
        "message": "JmxSupport: improve NPE message when jmxPort null\n\nWas previously throwing NPE converting the null attribute value to\nan `int`.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2655dca06ad871068494180b31ef01964ac7fab6",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JmxSupportTest.java"
        ]
    },
    "incubator-brooklyn_d3a19f2": {
        "bug_id": "incubator-brooklyn_d3a19f2",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/d3a19f2fe5dbc831addd8a8b111f05df5adfec83",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/d3a19f2fe5dbc831addd8a8b111f05df5adfec83/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=d3a19f2fe5dbc831addd8a8b111f05df5adfec83",
                "deletions": 11,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -580,27 +580,35 @@ public void apply(TemplateOptions t, ConfigBag props, Object v) {\n                     }})\n             .put(LOGIN_USER, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginUser(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginUser(((CharSequence)v).toString());\n+                        }\n                     }})\n             .put(LOGIN_USER_PASSWORD, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginPassword(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginPassword(((CharSequence)v).toString());\n+                        }\n                     }})\n             .put(LOGIN_USER_PRIVATE_KEY_FILE, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        String privateKeyFileName = ((CharSequence)v).toString();\n-                        String privateKey;\n-                        try {\n-                            privateKey = Files.toString(new File(ResourceUtils.tidyFilePath(privateKeyFileName)), Charsets.UTF_8);\n-                        } catch (IOException e) {\n-                            LOG.error(privateKeyFileName + \"not found\", e);\n-                            throw Exceptions.propagate(e);\n+                        if (v != null) {\n+                            String privateKeyFileName = ((CharSequence)v).toString();\n+                            String privateKey;\n+                            try {\n+                                privateKey = Files.toString(new File(ResourceUtils.tidyFilePath(privateKeyFileName)), Charsets.UTF_8);\n+                            } catch (IOException e) {\n+                                LOG.error(privateKeyFileName + \"not found\", e);\n+                                throw Exceptions.propagate(e);\n+                            }\n+                            t.overrideLoginPrivateKey(privateKey);\n                         }\n-                        t.overrideLoginPrivateKey(privateKey);\n                     }})\n             .put(LOGIN_USER_PRIVATE_KEY_DATA, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {\n-                        t.overrideLoginPrivateKey(((CharSequence)v).toString());\n+                        if (v != null) {\n+                            t.overrideLoginPrivateKey(((CharSequence)v).toString());\n+                        }\n                     }})                    \n             .put(KEY_PAIR, new CustomizeTemplateOptions() {\n                     public void apply(TemplateOptions t, ConfigBag props, Object v) {",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/d3a19f2fe5dbc831addd8a8b111f05df5adfec83/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "dc20f471bd6dc48659e17878e72b700e8b39ba9a",
                "status": "modified"
            }
        ],
        "message": "JcloudsLocation: support unsetting config\n\n- if set null loginUser, loginUserPassword, etc then don't pass it\n  through to jclouds (i.e. don't NPE)",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/aca2764da3e3001c86d302a903cd48bfab46597a",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_df5446a": {
        "bug_id": "incubator-brooklyn_df5446a",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "patch": "@@ -37,6 +37,7 @@\n import brooklyn.entity.rebind.RebindSupport;\n import brooklyn.event.AttributeSensor;\n import brooklyn.location.Location;\n+import brooklyn.management.ExecutionContext;\n import brooklyn.management.ManagementContext;\n import brooklyn.management.internal.EntityManagementSupport;\n import brooklyn.mementos.EntityMemento;\n@@ -102,5 +103,7 @@\n     Effector<?> getEffector(String effectorName);\n     FeedSupport getFeedSupport();\n     RebindSupport<EntityMemento> getRebindSupport();\n+    // for REST calls on read-only entities which want to resolve values\n+    ExecutionContext getExecutionContext();\n     \n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/entity/basic/EntityTransientCopyInternal.java",
                "sha": "3ca2d544f27be373b78031ad3754d0d51ee133ca",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 0,
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "patch": "@@ -256,6 +256,11 @@ public LocalhostMachine(Map properties) {\n             super(MutableMap.builder().putAll(properties).put(\"mutexSupport\", mutexSupport).build());\n         }\n         \n+        @Override\n+        protected WithMutexes getMutexSupport() {\n+            return mutexSupport;\n+        }\n+        \n         public boolean obtainSpecificPort(int portNumber) {\n             if (!isSudoAllowed() && portNumber <= 1024)\n                 return false;",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/LocalhostMachineProvisioningLocation.java",
                "sha": "113fb67e84bf0683ecf407367cc4a0db487630e5",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 9,
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "patch": "@@ -140,8 +140,11 @@\n     @SetFromFlag(nullable = false)\n     protected InetAddress address;\n \n+    // TODO should not allow this to be set from flag; it is not persisted so that will be lost\n+    // (mainly used for localhost currently so not a big problem)\n+    @Nullable  // lazily initialized; use getMutexSupport()\n     @SetFromFlag\n-    protected transient WithMutexes mutexSupport;\n+    private transient WithMutexes mutexSupport;\n \n     @SetFromFlag\n     private Set<Integer> usedPorts;\n@@ -336,10 +339,6 @@ public SshMachineLocation configure(Map properties) {\n         // TODO Note that check for addresss!=null is done automatically in super-constructor, in FlagUtils.checkRequiredFields\n         // Yikes, dangerous code for accessing fields of sub-class in super-class' constructor! But getting away with it so far!\n \n-        if (mutexSupport == null) {\n-            mutexSupport = new MutexSupport();\n-        }\n-\n         boolean deferConstructionChecks = (properties.containsKey(\"deferConstructionChecks\") && TypeCoercions.coerce(properties.get(\"deferConstructionChecks\"), Boolean.class));\n         if (!deferConstructionChecks) {\n             if (getDisplayName() == null) {\n@@ -349,6 +348,17 @@ public SshMachineLocation configure(Map properties) {\n         return this;\n     }\n     \n+    private transient final Object mutexSupportCreationLock = new Object();\n+    protected WithMutexes getMutexSupport() {\n+        synchronized (mutexSupportCreationLock) {\n+            // create on demand so that it is not null after serialization\n+            if (mutexSupport == null) {\n+                mutexSupport = new MutexSupport();\n+            }\n+            return mutexSupport;\n+        }\n+    }\n+    \n     protected void addSshPoolCacheCleanupTask() {\n         if (cleanupTask!=null && !cleanupTask.isDone()) {\n             return;\n@@ -895,25 +905,25 @@ protected MachineDetails inferMachineDetails() {\n     @Override\n     public void acquireMutex(String mutexId, String description) throws RuntimeInterruptedException {\n         try {\n-            mutexSupport.acquireMutex(mutexId, description);\n+            getMutexSupport().acquireMutex(mutexId, description);\n         } catch (InterruptedException ie) {\n             throw new RuntimeInterruptedException(\"Interrupted waiting for mutex: \" + mutexId, ie);\n         }\n     }\n \n     @Override\n     public boolean tryAcquireMutex(String mutexId, String description) {\n-        return mutexSupport.tryAcquireMutex(mutexId, description);\n+        return getMutexSupport().tryAcquireMutex(mutexId, description);\n     }\n \n     @Override\n     public void releaseMutex(String mutexId) {\n-        mutexSupport.releaseMutex(mutexId);\n+        getMutexSupport().releaseMutex(mutexId);\n     }\n \n     @Override\n     public boolean hasMutex(String mutexId) {\n-        return mutexSupport.hasMutex(mutexId);\n+        return getMutexSupport().hasMutex(mutexId);\n     }\n \n     //We want the SshMachineLocation to be serializable and therefore the pool needs to be dealt with correctly.",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "sha": "2bf81f967c41aca4fb9428e9b98727707f030109",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "patch": "@@ -376,7 +376,7 @@ private synchronized void unmanageNonRecursiveOnlyClearItsFields(Location loc, M\n             // if not destroying, don't change the parent's children list\n             ((AbstractLocation)loc).setParent(null, false);\n         }\n-        // clear config to help with GC\n+        // clear config to help with GC; i know you're not supposed to, but this seems to help, else config bag is littered with refs to entities etc\n         ((AbstractLocation)loc).getLocalConfigBag().clear();\n     }\n     ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/core/src/main/java/brooklyn/management/internal/LocalLocationManager.java",
                "sha": "f1da1142c0d0ac3b38b9fc5608a1d3863a4fa44c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 1,
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "patch": "@@ -70,7 +70,7 @@ public void connectSensors() {\n                     .pollAttribute(new JmxAttributePollConfig<String>(CONNECTOR_STATUS)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\"))\n-                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_UP)\n+                    .pollAttribute(new JmxAttributePollConfig<Boolean>(SERVICE_PROCESS_IS_RUNNING)\n                             .objectName(connectorMbeanName)\n                             .attributeName(\"stateName\")\n                             .onSuccess(Functions.forPredicate(Predicates.<Object>equalTo(\"STARTED\")))",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/software/webapp/src/main/java/brooklyn/entity/webapp/tomcat/TomcatServerImpl.java",
                "sha": "5bc9204bd8e0058b4b209a3398238b1172594621",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java?ref=df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2",
                "deletions": 2,
                "filename": "usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "patch": "@@ -47,6 +47,7 @@\n import brooklyn.entity.Application;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.AbstractGroup;\n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.Lifecycle;\n import brooklyn.entity.trait.Startable;\n@@ -144,8 +145,12 @@ private JsonNode fromEntity(Entity entity) {\n         if (!entity.getChildren().isEmpty())\n             aRoot.put(\"children\", entitiesIdAndNameAsArray(entity.getChildren()));\n \n-        if ((entity instanceof Group) && !((Group) entity).getMembers().isEmpty())\n-            aRoot.put(\"members\", entitiesIdAndNameAsArray(((Group) entity).getMembers()));\n+        if (entity instanceof Group) {\n+            // use attribute instead of method in case it is read-only\n+            Collection<Entity> members = entity.getAttribute(AbstractGroup.GROUP_MEMBERS);\n+            if (members!=null && !members.isEmpty())\n+                aRoot.put(\"members\", entitiesIdAndNameAsArray(members));\n+        }\n \n         return aRoot;\n     }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/df5446aa0f12ad0fe2d9f1cd3e2b1bcecea150d2/usage/rest-server/src/main/java/brooklyn/rest/resources/ApplicationResource.java",
                "sha": "6b9be050698f67898fd2cfc1afce7a72faabce22",
                "status": "modified"
            }
        ],
        "message": "fix misc errors during hot standby (access to unavailable methods, clearing more things on location unmanagement) and after rebind (NPE in SshMachineLocation), and fix sensor logic bug in tomcat",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/a4e7741f9658d1117329668cd1ff4581cb5bd32f",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "ApplicationResourceTest.java"
        ]
    },
    "incubator-brooklyn_e074119": {
        "bug_id": "incubator-brooklyn_e074119",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java?ref=e07411973fc284c0f4c3d4cdee1fc00f4d8780c3",
                "deletions": 2,
                "filename": "locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -2515,8 +2515,16 @@ protected LoginCredentials waitForSshable(final ComputeService computeService, f\n         LoginCredentials nodeCreds = node.getCredentials();\n         String nodeUser = nodeCreds.getUser();\n         String loginUserOverride = setup.get(LOGIN_USER);\n-        Set<String> users = MutableSet.<String>builder().add(nodeUser).add(loginUserOverride).build();\n-        \n+        Set<String> users = MutableSet.of();\n+\n+        if (Strings.isNonBlank(nodeUser)) {\n+            users.add(nodeUser);\n+        }\n+\n+        if (Strings.isNonBlank(loginUserOverride)) {\n+            users.add(loginUserOverride);\n+        }\n+\n         // See https://issues.apache.org/jira/browse/BROOKLYN-186\n         // Handle where jclouds gives us the wrong login user (!) and both a password + ssh key.\n         // Try all the permutations to find the one that works.",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e07411973fc284c0f4c3d4cdee1fc00f4d8780c3/locations/jclouds/src/main/java/org/apache/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "4c3297d92f9808e0f59390afd7955ff0afb81055",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if loginUser is not present and useJcloudsSshInit is false",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/e3553a1df74cdaffdfa49c662587b70d5871e9a2",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_e587dd5": {
        "bug_id": "incubator-brooklyn_e587dd5",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/e587dd5b3bea21c8dce8d1b13a46be135d6f0853",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/e587dd5b3bea21c8dce8d1b13a46be135d6f0853/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java?ref=e587dd5b3bea21c8dce8d1b13a46be135d6f0853",
                "deletions": 4,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "patch": "@@ -401,10 +401,12 @@ public JcloudsSshMachineLocation obtain(Map<?,?> flags) throws NoMachinesAvailab\n             if (!(waitForSshable!=null && \"false\".equalsIgnoreCase(waitForSshable))) {\n                String setupScript = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_URL);\n                 if(Strings.isNonBlank(setupScript)) {\n-                   String setupVarsString = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);\n-                   Map<String, String> substitutions = Splitter.on(\",\").withKeyValueSeparator(\":\").split(setupVarsString);\n-                   String script = TemplateProcessor.processTemplate(setupScript, substitutions);\n-                   sshMachineLocation.execCommands(\"Customizing node \" + this, ImmutableList.of(script));\n+                    String setupVarsString = setup.get(JcloudsLocationConfig.CUSTOM_MACHINE_SETUP_SCRIPT_VARS);\n+                    Map<String, String> substitutions = (setupVarsString != null)\n+                            ? Splitter.on(\",\").withKeyValueSeparator(\":\").split(setupVarsString)\n+                            : Maps.<String, String>newHashMap();\n+                    String script = TemplateProcessor.processTemplate(setupScript, substitutions);\n+                    sshMachineLocation.execCommands(\"Customizing node \" + this, ImmutableList.of(script));\n                 }\n                 \n                 if (setup.get(JcloudsLocationConfig.MAP_DEV_RANDOM_TO_DEV_URANDOM))",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/e587dd5b3bea21c8dce8d1b13a46be135d6f0853/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsLocation.java",
                "sha": "ff6c596759fc01bbc473d4339e7509ec337d8b7b",
                "status": "modified"
            }
        ],
        "message": "JcloudsLocation: No NPE if setup.script is given but not setup.script.vars",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/06c01537704381c99f517c68013556396c1e1e64",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JcloudsLocationTest.java"
        ]
    },
    "incubator-brooklyn_f8fc323": {
        "bug_id": "incubator-brooklyn_f8fc323",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "patch": "@@ -18,7 +18,7 @@ public abstract class AbstractPollHelper {\n \n     final Map<AttributeSensor, Closure> polledSensors = [:]\n \n-    boolean lastWasSuccessful = false;\n+    boolean lastWasSuccessful = true;\n \n     AbstractSensorAdapter adapter;\n     public AbstractPollHelper(AbstractSensorAdapter adapter) {",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/AbstractPollHelper.groovy",
                "sha": "50c3d2a57e2cb8566b30623df2dddaf53ebfc606",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "patch": "@@ -67,7 +67,9 @@ public class JmxAttributeAdapter extends AbstractSensorAdapter {\n         super.activateAdapter();\n         if (adapter.checkObjectNameExists(objectName)) {\n             if (log.isDebugEnabled()) \n-                log.debug(\"Initial value of $entity ${adapter.helper.url} JMX is: \"+adapter.helper.getAttribute(objectName, attributeName));\n+                log.debug(\"For $entity ${adapter.helper.url}, MBean ${objectName} exists\");\n+        } else {\n+            log.warn(\"For $entity ${adapter.helper.url}, MBean ${objectName} does not yet exist; continuing...\");\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxAttributeAdapter.groovy",
                "sha": "d76be3d89288544b15a8948a14dd9d0ca0c8e2ec",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy?ref=f8fc3237db92a44103e938e13d5eb4cfda8a99e6",
                "deletions": 2,
                "filename": "core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "patch": "@@ -159,14 +159,14 @@ public class JmxHelper {\n \n         triedConnecting = true\n         if (connector) connector.close()\n-        JMXServiceURL url = new JMXServiceURL(url)\n+        JMXServiceURL serviceUrl = new JMXServiceURL(url)\n         Map env = [:]\n         if (user && password) {\n             String[] creds = [user, password]\n             env.put(JMXConnector.CREDENTIALS, creds);\n         }\n         try {\n-            connector = JMXConnectorFactory.connect(url, env);\n+            connector = JMXConnectorFactory.connect(serviceUrl, env);\n         } catch (NullPointerException npe) {\n             //some software -- eg WSO2 -- will throw an NPE exception if the JMX connection can't be created, instead of an IOException.\n             //this is a break of contract with the JMXConnectorFactory.connect method, so this code verifies if the NPE is",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/f8fc3237db92a44103e938e13d5eb4cfda8a99e6/core/src/main/java/brooklyn/event/adapter/JmxHelper.groovy",
                "sha": "a3e21d3f756233c2599bf40cc0c9dda8a111c914",
                "status": "modified"
            }
        ],
        "message": "Fix JMX adapter for when ActiveMQ throwns NPE\n\nActiveMQ sometimes throws NPE in MBeanServer during startup,\nbut when retrying then the problem goes away it seems.\n\nThese changes make the JmxSensorAdapter code more robust to this\nkind of error.",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/35047dc279caa01e86f43ac0ba95b2479b553ca2",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "JmxHelperTest.java"
        ]
    },
    "incubator-brooklyn_fc24a59": {
        "bug_id": "incubator-brooklyn_fc24a59",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/fc24a59fde26ca5df4c374053e2a41ddba16b7b3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fc24a59fde26ca5df4c374053e2a41ddba16b7b3/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java?ref=fc24a59fde26ca5df4c374053e2a41ddba16b7b3",
                "deletions": 2,
                "filename": "core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "patch": "@@ -46,7 +46,6 @@\n import com.google.common.base.Preconditions;\n import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n@@ -439,7 +438,7 @@ public int installTo(ResourceUtils loader, String url, String destination) {\n     \n     @Override\n     public String toString() {\n-        return address.toString();\n+        return (address != null) ? address.toString() : \"SshMachineLocation(null)\";\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fc24a59fde26ca5df4c374053e2a41ddba16b7b3/core/src/main/java/brooklyn/location/basic/SshMachineLocation.java",
                "sha": "9275374a162b0f0c7f5b68b38998478ee0650a51",
                "status": "modified"
            }
        ],
        "message": "Avoids npe in SshMachineLocation.toString\n\n(e.g. if exception during configure(), before address has been set).",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/1e3f6b284ece7a16cf3ecfa3e8d5209f5e426816",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "SshMachineLocationTest.java"
        ]
    },
    "incubator-brooklyn_fef452b": {
        "bug_id": "incubator-brooklyn_fef452b",
        "commit": "https://github.com/apache/incubator-brooklyn/commit/fef452b9e05940b83d479866efed78427478fd0e",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/config/ConfigUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/config/ConfigUtils.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 5,
                "filename": "core/src/main/java/brooklyn/config/ConfigUtils.java",
                "patch": "@@ -92,19 +92,19 @@ public static BrooklynProperties filterForPrefixAndStrip(Map<String,?> propertie\n     @SuppressWarnings(\"rawtypes\")\n     public static Set<HasConfigKey<?>> getStaticKeysOnClass(Class<?> type) {\n         Set<HasConfigKey<?>> result = new LinkedHashSet<ConfigKey.HasConfigKey<?>>();\n-        try {\n-            for (Field f: type.getFields()) {\n+        for (Field f: type.getFields()) {\n+            try {\n                 if ((f.getModifiers() & Modifier.STATIC)==0)\n                     continue;\n                 if (ConfigKey.class.isAssignableFrom(f.getType()))\n                     result.add(new WrappedConfigKey((ConfigKey<?>) f.get(null)));\n                 else if (HasConfigKey.class.isAssignableFrom(f.getType()))\n                     result.add((HasConfigKey<?>) f.get(null));\n+            } catch (Exception e) {\n+                log.error(\"Error retrieving config key for field \"+f+\" on class \"+type+\"; rethrowing\", e);\n+                throw Exceptions.propagate(e);\n             }\n-        } catch (Exception e) {\n-            throw Exceptions.propagate(e);\n         }\n         return Collections.unmodifiableSet(result);\n     }\n-\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/config/ConfigUtils.java",
                "sha": "08a1963a6674263072102842296a80a1b35e3cdc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/Attributes.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 1,
                "filename": "core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "patch": "@@ -28,7 +28,7 @@\n     /**\n      * Application information sensors.\n      * \n-     * @deprecated since 0.5; see {@link ConfigKeys#SUGGESTED_VERSION}\n+     * @deprecated since 0.5; see {@link BrooklynConfigKeys#SUGGESTED_VERSION}\n      */\n     @Deprecated\n     AttributeSensor<String> VERSION = Sensors.newStringSensor( \"version\", \"Version information\");",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/Attributes.java",
                "sha": "6af95be92773598e35274f57ae13a63d05a65c51",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 40,
                "filename": "core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "patch": "@@ -136,44 +136,4 @@\n     public static ConfigKey<Boolean> newBooleanConfigKey(String name, String description, Boolean defaultValue) {\n         return newConfigKey(Boolean.class, name, description, defaultValue);\n     }\n-\n-    /* Key definitions were deprecated here in 0.6.0 because they introduce nasty circular dependencies on the\n-     * methods in this class, causing some final fields to be null when they are accessed. \n-     */\n-\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> BROOKLYN_DATA_DIR = BrooklynConfigKeys.BROOKLYN_DATA_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_VERSION = BrooklynConfigKeys.SUGGESTED_VERSION;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_INSTALL_DIR = BrooklynConfigKeys.SUGGESTED_INSTALL_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SUGGESTED_RUN_DIR = BrooklynConfigKeys.SUGGESTED_RUN_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> START_LATCH = BrooklynConfigKeys.START_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> INSTALL_LATCH = BrooklynConfigKeys.INSTALL_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> CUSTOMIZE_LATCH = BrooklynConfigKeys.CUSTOMIZE_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Boolean> LAUNCH_LATCH = BrooklynConfigKeys.LAUNCH_LATCH;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_TOOL_CLASS = BrooklynConfigKeys.SSH_TOOL_CLASS;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_HOST = BrooklynConfigKeys.SSH_CONFIG_HOST;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<Integer> SSH_CONFIG_PORT = BrooklynConfigKeys.SSH_CONFIG_PORT;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_USER = BrooklynConfigKeys.SSH_CONFIG_USER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_PASSWORD = BrooklynConfigKeys.SSH_CONFIG_PASSWORD;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_DIR = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_DIR;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_SCRIPT_HEADER = BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER;\n-    /** @deprecated since 0.6.0; use {@link BrooklynConfigKeys} to prevent classload ordering problems */ @Deprecated\n-    public static final ConfigKey<String> SSH_CONFIG_DIRECT_HEADER = BrooklynConfigKeys.SSH_CONFIG_DIRECT_HEADER;\n-\n }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/basic/ConfigKeys.java",
                "sha": "f4a27a7a4921369b651e823e92de197bffa63c64",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 3,
                "filename": "core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "patch": "@@ -13,7 +13,7 @@\n \n import brooklyn.entity.Entity;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.drivers.EntityDriver;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -92,14 +92,14 @@ public static String substitute(DownloadRequirement req, String basevalue) {\n         Entity entity = driver.getEntity();\n         String type = entity.getEntityType().getName();\n         String simpleType = type.substring(type.lastIndexOf(\".\")+1);\n-        String version = entity.getConfig(ConfigKeys.SUGGESTED_VERSION);\n+        String version = entity.getConfig(BrooklynConfigKeys.SUGGESTED_VERSION);\n         \n         String v2 = entity.getAttribute(Attributes.VERSION);\n         if (v2!=null && !v2.equals(version)) {\n             // Attributes.VERSION was deprecated in 0.5.0 but was preferred here without warning in 0.6.0\n             // now warn on use of deprecated key when it is different\n             LOG.warn(\"Using deprecated key \"+Attributes.VERSION+\", value \"+v2+\", which differs from the \" +\n-            \t\t\"preferred key \"+ConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n+            \t\t\"preferred key \"+BrooklynConfigKeys.SUGGESTED_VERSION+\", value \"+version+\"; old key will be retired shortly!\");\n             version = v2;\n         }\n         ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/entity/drivers/downloads/DownloadSubstituters.java",
                "sha": "40c20b919763cabf2551d035a31e69d6d8a09424",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "patch": "@@ -13,7 +13,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -135,7 +135,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/ByonLocationResolver.java",
                "sha": "1b8df65dae914ddd952b818d255127373af6e718",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 5,
                "filename": "core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "patch": "@@ -12,9 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.config.ConfigKey;\n-import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.Location;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n@@ -24,7 +22,6 @@\n import brooklyn.util.text.KeyValueParser;\n \n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n /**\n@@ -96,7 +93,7 @@ protected Location newLocationFromString(String spec, brooklyn.location.Location\n             flags.put(\"name\", namePart);\n         }\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/main/java/brooklyn/location/basic/LocalhostResolver.java",
                "sha": "ebd0d7636ae686baa7aec6400bba64af49bb322b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "patch": "@@ -10,7 +10,7 @@\n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n import brooklyn.entity.basic.Attributes;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.proxying.EntitySpec;\n import brooklyn.location.Location;\n@@ -89,7 +89,7 @@ public void testReturnsLocalRepoThenOverrideThenAttributeValThenCloudsoftUrlThen\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"http://fromprops/${version}.allprimary\");\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"http://fromfallback/${version}.allfallback\");\n         entity.setAttribute(Attributes.DOWNLOAD_URL, \"http://fromattrib/${version}.default\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         String expectedFilename = \"myversion.allprimary\";\n \n         String expectedLocalRepo = String.format(\"file://$HOME/.brooklyn/repository/%s/%s/%s\", \"TestEntity\", \"myversion\", expectedFilename);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/BasicDownloadsRegistryTest.java",
                "sha": "e4d13d8fe85a0da239ea512ca9d6ca3f4b460bb2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 4,
                "filename": "core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "patch": "@@ -10,7 +10,7 @@\n \n import brooklyn.config.BrooklynProperties;\n import brooklyn.entity.basic.ApplicationBuilder;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.Entities;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadRequirement;\n import brooklyn.entity.drivers.downloads.DownloadResolverManager.DownloadTargets;\n@@ -79,7 +79,7 @@ public void testReturnsGlobalFallbackUrl() throws Exception {\n     @Test\n     public void testSubstitutionsAppliedToFallbackUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.fallbackurl\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(ImmutableList.<String>of(), ImmutableList.of(\"version=myversion\"));\n     }\n \n@@ -93,15 +93,15 @@ public void testReturnsGlobalFallbackUrlAsLast() throws Exception {\n     @Test\n     public void testReturnsGlobalUrlWithEntitySubstituions() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"version=myversion\");\n     }\n     \n     @Test\n     public void testEntitySpecificUrlOverridesGlobalUrl() throws Exception {\n         brooklynProperties.put(\"brooklyn.downloads.all.url\", \"version=${version}\");\n         brooklynProperties.put(\"brooklyn.downloads.entity.TestEntity.url\", \"overridden,version=${version}\");\n-        entity.setConfig(ConfigKeys.SUGGESTED_VERSION, \"myversion\");\n+        entity.setConfig(BrooklynConfigKeys.SUGGESTED_VERSION, \"myversion\");\n         assertResolves(\"overridden,version=myversion\", \"version=myversion\");\n     }\n     ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/core/src/test/java/brooklyn/entity/drivers/downloads/DownloadProducerFromPropertiesTest.java",
                "sha": "f169bee621189aa2186d80cd49946c45e34503ce",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "patch": "@@ -12,7 +12,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.LocationRegistry;\n import brooklyn.location.LocationResolver;\n import brooklyn.location.LocationSpec;\n@@ -147,7 +147,7 @@ public void init(ManagementContext managementContext) {\n         if (user != null) flags.put(\"user\", user);\n         if (name != null) flags.put(\"name\", name);\n         if (registry != null) {\n-            String brooklynDataDir = (String) registry.getProperties().get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+            String brooklynDataDir = (String) registry.getProperties().get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n             if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n                 flags.put(\"localTempDir\", new File(brooklynDataDir));\n             }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsByonLocationResolver.java",
                "sha": "e9ac5b600cbd96274ed6a9a4f27a727e4874b6b4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "patch": "@@ -7,7 +7,7 @@\n import org.slf4j.LoggerFactory;\n \n import brooklyn.config.ConfigUtils;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.location.basic.DeprecatedKeysMappingBuilder;\n import brooklyn.location.basic.LocationPropertiesFromBrooklynProperties;\n \n@@ -74,7 +74,7 @@\n         jcloudsProperties.putAll(transformDeprecated(getProviderOrApiJcloudsProperties(providerOrApi, properties)));\n         jcloudsProperties.putAll(transformDeprecated(getRegionJcloudsProperties(providerOrApi, regionName, properties)));\n         if (!Strings.isNullOrEmpty(namedLocation)) jcloudsProperties.putAll(transformDeprecated(getNamedJcloudsProperties(namedLocation, properties)));\n-        String brooklynDataDir = (String) properties.get(ConfigKeys.BROOKLYN_DATA_DIR.getName());\n+        String brooklynDataDir = (String) properties.get(BrooklynConfigKeys.BROOKLYN_DATA_DIR.getName());\n         if (brooklynDataDir != null && brooklynDataDir.length() > 0) {\n             jcloudsProperties.put(\"localTempDir\", new File(brooklynDataDir));\n         }",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/locations/jclouds/src/main/java/brooklyn/location/jclouds/JcloudsPropertiesFromBrooklynProperties.java",
                "sha": "a3cef2ce3ffe8ec88bb3be62b4c8c370cbaa21ab",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 5,
                "filename": "software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "patch": "@@ -56,17 +56,17 @@ public void rebind() {\n \t@Override\n \tpublic void start() {\n \t    DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.INSTALL_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n             install();\n         }});\n         \n \t    DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.CUSTOMIZE_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n             customize();\n         }});\n         \n \t    DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n-            waitForConfigKey(ConfigKeys.LAUNCH_LATCH);\n+            waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n             launch();\n         }});\n         \n@@ -113,9 +113,11 @@ public void restart() {\n         }});\n \t}\n \t\n-\tpublic EntityLocal getEntity() { return entity; } \n+\t@Override\n+    public EntityLocal getEntity() { return entity; } \n \n-\tpublic Location getLocation() { return location; } \n+\t@Override\n+    public Location getLocation() { return location; } \n     \n     public InputStream getResource(String url) {\n         return new ResourceUtils(entity).getResourceFromUrl(url);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/basic/AbstractSoftwareProcessDriver.java",
                "sha": "1adc1ee0948935095c2056ec67f77797f7c71083",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 1,
                "filename": "software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "patch": "@@ -5,6 +5,7 @@\n import java.util.Map;\n \n import brooklyn.config.ConfigKey;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.java.UsesJava;\n@@ -31,7 +32,7 @@\n             Map.class, \"brooklynnode.copytorundir\", \"URLs of resources to be copied across to the server, giving the path they are to be copied to\", MutableMap.of());\n     \n     @SetFromFlag(\"version\")\n-    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(ConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n+    public static final ConfigKey<String> SUGGESTED_VERSION = ConfigKeys.newConfigKeyWithDefault(BrooklynConfigKeys.SUGGESTED_VERSION, \"0.6.0-SNAPSHOT\"); // BROOKLYN_VERSION\n \n     // Takes presidence over downloadUrl, if non-null\n     @SetFromFlag(\"distroUploadUrl\")",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/main/java/brooklyn/entity/brooklynnode/BrooklynNode.java",
                "sha": "b41bcad9694a57a5a38b1fe0917255d6bf0684bb",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 5,
                "filename": "software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "patch": "@@ -12,8 +12,7 @@ import org.testng.annotations.BeforeMethod\n import org.testng.annotations.Test\n \n import brooklyn.entity.basic.AbstractSoftwareProcessSshDriver\n-import brooklyn.entity.basic.ConfigKeys\n-import brooklyn.entity.basic.Entities;\n+import brooklyn.entity.basic.BrooklynConfigKeys\n import brooklyn.location.basic.SshMachineLocation\n import brooklyn.test.entity.TestApplication\n import brooklyn.test.entity.TestApplicationImpl\n@@ -22,7 +21,7 @@ import brooklyn.test.entity.TestEntityImpl\n import brooklyn.util.internal.ssh.SshTool\n import brooklyn.util.internal.ssh.cli.SshCliTool\n import brooklyn.util.internal.ssh.sshj.SshjTool\n-import brooklyn.util.stream.StreamGobbler;\n+import brooklyn.util.stream.StreamGobbler\n \n class StartStopSshDriverTest {\n \n@@ -69,7 +68,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshScriptHeaderUsedWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n+        entity.setConfig(BrooklynConfigKeys.SSH_CONFIG_SCRIPT_HEADER, \"#!/bin/bash -e\\necho hello world\");\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         driver.execute(out: out, Arrays.asList(\"echo goodbye\"), \"test\");\n         String s = out.toString();\n@@ -81,7 +80,7 @@ class StartStopSshDriverTest {\n \n     @Test(groups = [ \"Integration\" ])\n     public void testSshCliPickedUpWhenSpecified() {\n-        entity.setConfig(ConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n+        entity.setConfig(BrooklynConfigKeys.SSH_TOOL_CLASS, SshCliTool.class.getName());\n         driver.execute(Arrays.asList(\"echo hi\"), \"test\");\n         assertTrue(sshMachineLocation.lastTool instanceof SshCliTool, \"expect CLI tool, got \"+\n                         (sshMachineLocation.lastTool!=null ? \"\"+sshMachineLocation.lastTool.getClass()+\":\" : \"\") + sshMachineLocation.lastTool);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/base/src/test/java/brooklyn/entity/basic/lifecycle/StartStopSshDriverTest.groovy",
                "sha": "84fdd44175812bd176981070400146c8c0830db6",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "patch": "@@ -19,6 +19,7 @@\n import brooklyn.config.ConfigKey;\n import brooklyn.entity.Entity;\n import brooklyn.entity.Group;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.entity.basic.ConfigKeys;\n import brooklyn.entity.group.Cluster;\n import brooklyn.entity.group.DynamicCluster;\n@@ -30,7 +31,6 @@\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n-import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.util.flags.SetFromFlag;\n \n /**\n@@ -56,7 +56,7 @@\n public interface KafkaCluster extends Entity, Startable, Resizable, Group  {\n \n     @SetFromFlag(\"startTimeout\")\n-    ConfigKey<Integer> START_TIMEOUT = ConfigKeys.START_TIMEOUT;\n+    ConfigKey<Integer> START_TIMEOUT = BrooklynConfigKeys.START_TIMEOUT;\n \n     @SetFromFlag(\"initialSize\")\n     ConfigKey<Integer> INITIAL_SIZE = ConfigKeys.newConfigKeyWithDefault(Cluster.INITIAL_SIZE, 1);",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/software/messaging/src/main/java/brooklyn/entity/messaging/kafka/KafkaCluster.java",
                "sha": "1217468e22ea2ac72731d2b5cdd8fc8577f61e5a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-brooklyn/blob/fef452b9e05940b83d479866efed78427478fd0e/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-brooklyn/contents/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java?ref=fef452b9e05940b83d479866efed78427478fd0e",
                "deletions": 2,
                "filename": "usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "patch": "@@ -30,7 +30,7 @@\n import brooklyn.BrooklynVersion;\n import brooklyn.config.BrooklynServiceAttributes;\n import brooklyn.config.ConfigKey;\n-import brooklyn.entity.basic.ConfigKeys;\n+import brooklyn.entity.basic.BrooklynConfigKeys;\n import brooklyn.launcher.config.CustomResourceLocator;\n import brooklyn.location.PortRange;\n import brooklyn.location.basic.LocalhostMachineProvisioningLocation;\n@@ -147,7 +147,7 @@ public BrooklynWebServer(Map flags, ManagementContext managementContext) {\n         if (!leftovers.isEmpty())\n             log.warn(\"Ignoring unknown flags \" + leftovers);\n         \n-        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(ConfigKeys.BROOKLYN_DATA_DIR));\n+        String brooklynDataDir = checkNotNull(managementContext.getConfig().getConfig(BrooklynConfigKeys.BROOKLYN_DATA_DIR));\n         this.webappTempDir = new File(brooklynDataDir, \"jetty\");\n     }\n ",
                "raw_url": "https://github.com/apache/incubator-brooklyn/raw/fef452b9e05940b83d479866efed78427478fd0e/usage/launcher/src/main/java/brooklyn/launcher/BrooklynWebServer.java",
                "sha": "12d43ef9ba9ae8b384bb3130d0319a0057c4f865",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #930 from aledsage/fix/NPE-from-ConfigKeys-fields-strike2\n\nFix: NPE from ConfigKeys fields",
        "parent": "https://github.com/apache/incubator-brooklyn/commit/2c41e0bf3e99cfbe5bfce6f55b1d20c0795f2c6b",
        "repo": "incubator-brooklyn",
        "unit_tests": [
            "BrooklynWebServerTest.java"
        ]
    }
}