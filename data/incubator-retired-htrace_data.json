[
    {
        "repo": "incubator-retired-htrace",
        "message": "Rename currentTrace() to currentSpan(), fix up a couple potential NPEs",
        "commit": "https://github.com/apache/incubator-retired-htrace/commit/7aa663c8f456f8418f6cbcbd9f399ca69b68783d",
        "parent": "https://github.com/apache/incubator-retired-htrace/commit/233342c86aade6cfdbb60fbee5666f2caf8352d6",
        "bug_id": "incubator-retired-htrace_1",
        "file": [
            {
                "sha": "18aa8fb7ca7345f34e41c748c26f952fd3fc6f8f",
                "filename": "src/main/java/org/cloudera/htrace/Trace.java",
                "blob_url": "https://github.com/apache/incubator-retired-htrace/blob/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/Trace.java",
                "raw_url": "https://github.com/apache/incubator-retired-htrace/raw/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/Trace.java",
                "status": "modified",
                "changes": 22,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-htrace/contents/src/main/java/org/cloudera/htrace/Trace.java?ref=7aa663c8f456f8418f6cbcbd9f399ca69b68783d",
                "patch": "@@ -90,16 +90,6 @@ public static TraceScope continueSpan(Span s) {\n     return Tracer.getInstance().continueSpan(s);\n   }\n   \n-  /**\n-   * Stop any spans that are currently active, as well\n-   * as their parents. This can be used within threadpools,\n-   * etc where you should clean up after anyone who might\n-   * have accidentally leaked spans.\n-   */\n-  public static void clearTraceStack() {\n-    Tracer.getInstance().clearTraceStack();\n-  }\n-\n   /**\n    * Set the processId to be used for all Spans created by this Tracer.\n    *\n@@ -133,14 +123,20 @@ public static void addReceiver(SpanReceiver rcvr) {\n    * Adds a data annotation to the current span if tracing is currently on.\n    */\n   public static void addKVAnnotation(byte[] key, byte[] value) {\n-    currentSpan().addKVAnnotation(key, value);\n+    Span s = currentSpan();\n+    if (s != null) {\n+      s.addKVAnnotation(key, value);\n+    }\n   }\n   \n   /**\n    * Annotate the current span with the given message.\n    */\n   public static void addTimelineAnnotation(String msg) {\n-    currentSpan().addTimelineAnnotation(msg);\n+    Span s = currentSpan();\n+    if (s != null) {\n+      s.addTimelineAnnotation(msg);\n+    }\n   }\n \n   /**\n@@ -158,7 +154,7 @@ public static boolean isTracing() {\n    * @return Span representing the current trace, or null if not tracing.\n    */\n   public static Span currentSpan() {\n-    return Tracer.getInstance().currentTrace();\n+    return Tracer.getInstance().currentSpan();\n   }\n \n   /**",
                "deletions": 13
            },
            {
                "sha": "86ad130c3c5031d154bd7d611c8efffc23dcda50",
                "filename": "src/main/java/org/cloudera/htrace/TraceScope.java",
                "blob_url": "https://github.com/apache/incubator-retired-htrace/blob/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/TraceScope.java",
                "raw_url": "https://github.com/apache/incubator-retired-htrace/raw/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/TraceScope.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-htrace/contents/src/main/java/org/cloudera/htrace/TraceScope.java?ref=7aa663c8f456f8418f6cbcbd9f399ca69b68783d",
                "patch": "@@ -31,7 +31,7 @@ public Span getSpan() {\n   public Span detach() {\n     detached = true;\n \n-    Span cur = Tracer.getInstance().currentTrace();\n+    Span cur = Tracer.getInstance().currentSpan();\n     if (cur != span) {\n       Tracer.LOG.debug(\"Closing trace span \" + span + \" but \" +\n         cur + \" was top-of-stack\");",
                "deletions": 1
            },
            {
                "sha": "9efe627e0876110ae973c9bb528b60bd091677c9",
                "filename": "src/main/java/org/cloudera/htrace/Tracer.java",
                "blob_url": "https://github.com/apache/incubator-retired-htrace/blob/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/Tracer.java",
                "raw_url": "https://github.com/apache/incubator-retired-htrace/raw/7aa663c8f456f8418f6cbcbd9f399ca69b68783d/src/main/java/org/cloudera/htrace/Tracer.java",
                "status": "modified",
                "changes": 21,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-retired-htrace/contents/src/main/java/org/cloudera/htrace/Tracer.java?ref=7aa663c8f456f8418f6cbcbd9f399ca69b68783d",
                "patch": "@@ -34,7 +34,7 @@\n   public static final Log LOG = LogFactory.getLog(Tracer.class);\n   private final static Random random = new SecureRandom();\n   private final List<SpanReceiver> receivers = new CopyOnWriteArrayList<SpanReceiver>();\n-  private static final ThreadLocal<Span> currentTrace = new ThreadLocal<Span>() {\n+  private static final ThreadLocal<Span> currentSpan = new ThreadLocal<Span>() {\n     @Override\n     protected Span initialValue() {\n       return null;\n@@ -53,7 +53,7 @@ synchronized protected static Tracer getInstance() {\n   }\n \n   protected Span createNew(String description) {\n-    Span parent = currentTrace.get();\n+    Span parent = currentSpan.get();\n     if (parent == null) {\n       return new MilliSpan(description,\n           /* traceId = */ random.nextLong(),\n@@ -66,11 +66,11 @@ protected Span createNew(String description) {\n   }\n \n   protected boolean isTracing() {\n-    return currentTrace.get() != null;\n+    return currentSpan.get() != null;\n   }\n \n-  protected Span currentTrace() {\n-    return currentTrace.get();\n+  protected Span currentSpan() {\n+    return currentSpan.get();\n   }\n \n   protected void deliver(Span span) {\n@@ -88,24 +88,17 @@ protected void removeReceiver(SpanReceiver receiver) {\n   }\n \n   protected Span setCurrentSpan(Span span) {\n-    currentTrace.set(span);\n+    currentSpan.set(span);\n     return span;\n   }\n   \n \n   public TraceScope continueSpan(Span s) {\n-    Span oldCurrent = currentTrace();\n+    Span oldCurrent = currentSpan();\n     setCurrentSpan(s);\n     return new TraceScope(s, oldCurrent);\n   }\n \n-  \n-  protected void clearTraceStack() {\n-    while (isTracing()) {\n-      currentTrace().stop();\n-    }\n-  }\n-\n   protected int numReceivers() {\n     return receivers.size();\n   }",
                "deletions": 14
            }
        ]
    }
]