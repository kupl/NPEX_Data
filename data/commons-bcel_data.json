[
    {
        "repo": "commons-bcel",
        "message": "[BCEL-270] Calling toString(ConstantPool) on InvokeInstruction throws\nNullPointerException.</action>",
        "commit": "https://github.com/apache/commons-bcel/commit/2a30cec541040c0a555432608d4941e54db4b8a3",
        "parent": "https://github.com/apache/commons-bcel/commit/4bc6ddeab009b392193e771762fbaa0b297ce48d",
        "bug_id": "commons-bcel_1",
        "file": [
            {
                "sha": "c99566c294541de4bba02a32611c0cc2c231a6b6",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2a30cec541040c0a555432608d4941e54db4b8a3/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2a30cec541040c0a555432608d4941e54db4b8a3/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/changes/changes.xml?ref=2a30cec541040c0a555432608d4941e54db4b8a3",
                "patch": "@@ -71,6 +71,7 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"BCEL-320\" type=\"add\" dev=\"ggregory\" due-to=\"Tomo Suzuki, Gary Gregory\">Add LruCacheClassPathRepository that can scan many JAR files without OutOfMemoryError.</action>\r\n       <action issue=\"BCEL-299\" type=\"update\" dev=\"ggregory\" due-to=\"Gary Gregory, zhangminglei \">Fix example src/examples/ClassDumper.java ClassDumper.processID().</action>\r\n       <action issue=\"BCEL-322\" type=\"add\" dev=\"ggregory\" due-to=\"Gary Gregory\">Add constants to org.apache.bcel.Const for Java 14.</action>\r\n+      <action issue=\"BCEL-270\" type=\"fix\" dev=\"ggregory\" due-to=\"Alexandru-Constantin Bledea\">Calling toString(ConstantPool) on InvokeInstruction throws NullPointerException.</action>\r\n     </release>\r\n \r\n     <release version=\"6.3.1\" date=\"2019-03-20\" description=\"Bug fix release\">\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "[BCEL-315] NullPointerException at\norg.apache.bcel.classfile.FieldOrMethod.dump().",
        "commit": "https://github.com/apache/commons-bcel/commit/d7292a3d9f2939f785ec74057d255e5df95846bf",
        "parent": "https://github.com/apache/commons-bcel/commit/71ed89fe8dba42f45a8a02bdf7247a11e1ab6985",
        "bug_id": "commons-bcel_2",
        "file": [
            {
                "sha": "1faa3a7eafeb340899be869b96b1747dec6517aa",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-bcel/blob/d7292a3d9f2939f785ec74057d255e5df95846bf/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-bcel/raw/d7292a3d9f2939f785ec74057d255e5df95846bf/src/changes/changes.xml",
                "status": "modified",
                "changes": 893,
                "additions": 447,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/changes/changes.xml?ref=d7292a3d9f2939f785ec74057d255e5df95846bf",
                "patch": "@@ -1,446 +1,447 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n-\n--->\n-<!--\n-This file is also used by the maven-changes-plugin to generate the release notes.\n-Useful ways of finding items to add to this file are:\n-\n-1.  Add items when you fix a bug or add a feature (this makes the\n-release process easy :-).\n-\n-2.  Do a JIRA search for tickets closed since the previous release.\n-\n-3.  Use the report generated by the maven-changelog-plugin to see all\n-SVN commits. TBA how to use this with SVN.\n-\n-To generate the release notes from this file:\n-\n-mvn changes:announcement-generate -Prelease-notes [-Dchanges.version=nnn]\n-\n-then tweak the formatting if necessary\n-and commit\n-\n-The <action> type attribute can be add,update,fix,remove.\n--->\n-\n-<document>\n-  <properties>\n-    <title>Changes</title>\n-    <author email=\"dev@commons.apache.org\">Apache Commons developers</author>\n-  </properties>\n-\n-  <!-- NOTE:\n-  The description below is specially formatted so as to improve the layout of the generated release notes:\n-  The parsing process removes all line feeds, replacing them with a single space.\n-  The Velocity template in resources/templates has been enhanced to replace pairs of adjacent spaces\n-  with a new-line in the release notes. (These spaces are ignored when displaying HTML).\n-  If the output is not quite correct, check for invisible trailing spaces!\n-\n-  N.B. The release notes template groups actions by type, and only extracts data for the current release.\n-  The changes report outputs actions in the order they appear in this file.\n-\n-  To regenerate the release notes:\n-  mvn changes:announcement-generate -Prelease-notes [-Dchanges.version=nnn]\n-\n-  Defining changes.version allows one to create the RN without first removing the SNAPSHOT suffix.\n-   -->\n-\n-  <body>\n-    <release version=\"6.4\" date=\"2019-MM-DD\" description=\"TO DO\">\n-      <action issue=\"BCEL-267\" type=\"fix\" dev=\"ggregory\" due-to=\"Stephan Herrmann, Sebb, Gary Gregory, Torsten Curdt\">Race conditions on static fields in BranchHandle and InstructionHandle.</action>\n-      <action issue=\"BCEL-297\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts, mingleizhang\">Possible NPE in override implementation of Object.equals (#20)</action>\n-      <action issue=\"BCEL-298\" type=\"update\" dev=\"ggregory\" due-to=\"mingleizhang\">Add some files to .gitignore (#19)</action>\n-    </release>\n-\n-    <release version=\"6.3\" date=\"2019-01-23\" description=\"Experimental Java 9, 10, 11, 12-EA, and 13-EA Support\">\n-      <action issue=\"BCEL-304\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory, Ed Pavlak\">ClassPath.getClassFile() and friends do not work with JDK 9 and higher (PR #22.)</action>\n-      <action issue=\"BCEL-305\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory\">ClassPath.getClassFile() and friends do not work with JRE 9 and higher</action>\n-      <action                  type=\"update\" dev=\"ggregory\" due-to=\"Mark Thomas, Gary Gregory\">Initial support for Java 11</action>\n-      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added org.apache.bcel.classfile.Visitor.visitConstantDynamic(ConstantDynamic)</action>\n-      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added org.apache.bcel.classfile.ConstantDynamic</action>\n-      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added fields in org.apache.bcel.Const for Java 9, 10, and 11.</action>      \n-      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added fields in org.apache.bcel.Const for Java 12 and 13 based on Java Early Access releases.</action>      \n-      <action                  type=\"update\" dev=\"ggregory\" due-to=\"Gary Gregory\">Update Java requirement from Java 7 to Java 8.</action>      \n-    </release>\n-\n-    <release version=\"6.2\" date=\"2017-12-08\" description=\"Experimental Java 9 Support\">\n-      <action issue=\"BCEL-294\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Incorrect comment in StackMap.java</action>\n-      <action issue=\"BCEL-296\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts\">Incorrect comment in several classes.</action>\n-      <action issue=\"BCEL-295\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts\">Fix local variable live range length; add test case.</action>\n-      <action issue=\"BCEL-300\" type=\"fix\" dev=\"ggregory\">org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19.</action>\n-      <action issue=\"BCEL-301\" type=\"fix\" dev=\"ggregory\">org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 20.</action>\n-    </release>\n-\n-    <release version=\"6.1\" date=\"2017-09-14\" description=\"Experimental Java 9 Support\">\n-      <action issue=\"BCEL-293\" type=\"add\" dev=\"britter\">Add Automatic-Module-Name MANIFEST entry for Java 9 compatibility</action>\n-      <action issue=\"BCEL-292\" type=\"add\" dev=\"markt\">Add minimal Java 9 support</action>\n-      <action issue=\"BCEL-286\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Utility.signatureToString fails if a method has multiple type arguments</action>\n-      <action issue=\"BCEL-287\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">IINC does not handle -128 properly</action>\n-      <action issue=\"BCEL-283\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Support for StackMap should be different from StackMapTable</action>\n-      <action issue=\"BCEL-289\" type=\"fix\" dev=\"kinow\">Crash when parsing constructor of inner classes with parameters annotated</action>\n-      <action issue=\"BCEL-276\" type=\"fix\" dev=\"britter\" due-to=\"Sam Yoon, Mark Roberts\">LocalVariableTypeTable is not updated.</action>\n-      <action issue=\"BCEL-277\" type=\"fix\" dev=\"britter\" due-to=\"Sam Yoon\">Resolving the String representation of a constant throws NoSuchElementException in case of CONSTANT_NameAndType constant.</action>\n-    </release>\n-\n-    <release version=\"6.0\" date=\"2016-07-10\" description=\"Apache Commons BCEL 6.0 is a major release supporting the new features\n- introduced in Java 6, 7 and 8.\n-\n-\n- It requires Java 7 or higher to run.\n-\n-\n-COMPATIBILITY with 5.2\n- ======================\n-\n-\n- Binary compatible - not strictly compatible\n- - The constant interface org.apache.bcel.Constants has been deprecated. Classes\n-  which implemented this interface in 5.2 now use the constants defined in the\n-  org.apache.bcel.Const class.\n- - The constant interface org.apache.bcel.generic.InstructionConstants has been\n-  deprecated. Classes which implemented this interface in 5.2 now use the\n-  constants defined in the org.apache.bcel.generic.InstructionConsts class.\n- - Return type of method 'public java.lang.Object getElementAt(int)' in\n-  org.apache.bcel.verifier.VerifierFactoryListModel has been changed to\n-  java.lang.String.\n- - The BCEL classes do no longer implement java.io.Serializable.\n-\n-\n-\n-Source compatible - Yes, sort of;\n-  - The org.apache.bcel.classfile.Visitor interface has been enhanced with\n-  additional methods. If you implemented it directly instead of extending\n-  the EmptyVisitor class you'll have to implement the new methods.\n-  - The org.apache.bcel.generic.Visitor interface has been enhanced with an\n-  additional method. If you implemented it directly instead of extending\n-  the EmptyVisitor class you'll have to implement the new methods.\n-\n-\n- Semantic compatible - Yes, except:\n-  - BCEL 6.0 handles new attributes such as code annotations that could only\n-  be processed by implementing a custom AttributeReader in the previous\n-  versions. Code relying on this behavior will have to be adjusted since\n-  the AttributeReader will no longer be called in these cases.\n-\n-\n-\n-For full information about API changes please see the extended Clirr report:\n-\n-    http://commons.apache.org/bcel/clirr-report.html\">\n-      <action issue=\"BCEL-262\" type=\"update\" dev=\"britter\" due-to=\"Mark Roberts\">InvokeInstruction.getClassName(ConstantPoolGen)\n-                                          should not throw an exception when it detects an array.</action>\n-      <action issue=\"BCEL-237\" type=\"fix\" dev=\"sebb\">non-empty final arrays should be private as they are mutable.</action>\n-      <action issue=\"BCEL-230\" type=\"update\" dev=\"britter\">Document the Java platform requirement clearly and early.</action>\n-      <action issue=\"BCEL-243\" type=\"fix\">Type.getType() needs to understand TypeVariableSignature(s).</action>\n-      <action issue=\"BCEL-272\" type=\"add\">Add constants for Java 9 class file version 53.</action>\n-      <action issue=\"BCEL-271\" type=\"fix\">FCONST pattern does not include FCONST_2.</action>\n-      <action issue=\"BCEL-264\" type=\"fix\">Add missing Node.accept() implementations (ConstantMethodHandle,\n-                                          ConstantMethodType, ParameterAnnotationEntry).</action>\n-      <action issue=\"BCEL-221\" type=\"fix\">BCELifier is not working for Java8Example (incomplete).</action>\n-      <action issue=\"BCEL-195\" type=\"fix\">Addition of hashCode() to generic/Instruction.java breaks Targeters.\n-                                          Never make distinct BranchInstructions compare equal.</action>\n-      <action issue=\"BCEL-261\" type=\"fix\">Select constructor allows partially constructed instance to escape.\n-                                          Re-ordered code to delay the escape.</action>\n-      <action issue=\"BCEL-259\" type=\"fix\">Minor doc error in BranchInstruction.java.</action>\n-      <action issue=\"BCEL-260\" type=\"fix\">ClassDumper example duplicates field attribute types.</action>\n-      <action issue=\"BCEL-258\" type=\"fix\">No tests to check the output of dump methods.</action>\n-      <action issue=\"BCEL-257\" type=\"fix\">INVOKESPECIAL, INVOKESTATIC, INVOKEVIRTUAL need to define dump()\n-                                          methods.</action>\n-      <action issue=\"BCEL-254\" type=\"fix\">Two more methods that would be nice to be public.</action>\n-      <action issue=\"BCEL-245\" type=\"fix\">Type class includes constants that reference subclasses.</action>\n-      <action issue=\"BCEL-253\" type=\"fix\">Pass 3b verifier is too strict.</action>\n-      <action issue=\"BCEL-248\" type=\"fix\">StackMapTable[Entry] should be removed and improvements merged into\n-                                          StackMap[Entry].</action>\n-      <action issue=\"BCEL-202\" type=\"fix\">StackMap[Table]Entry.copy() needs to be deep; Improved support for\n-                                          StackMaps.</action>\n-      <action issue=\"BCEL-251\" type=\"fix\">Pass3aVerifier visitANEWARRAY() does not allow 255 array dimensions.</action>\n-      <action issue=\"BCEL-211\" type=\"update\">Some additional clone methods should be public.</action>\n-      <action issue=\"BCEL-249\" type=\"fix\">Check for max Short seems wrong.</action>\n-      <action issue=\"BCEL-127\" type=\"update\">Document that Instruction Factory returns singleton instances.</action>\n-      <action issue=\"BCEL-198\" type=\"update\">better support for clone/copy methods.</action>\n-      <action issue=\"BCEL-242\" type=\"remove\">Remove Serializable.</action>\n-      <action issue=\"BCEL-110\" type=\"remove\">Problem with JAXB if the bcel classloader is used; remove the broken\n-      ClassLoader class.</action>\n-      <action issue=\"BCEL-201\" type=\"update\">modify several toString methods to make output similar to \"javap\".</action>\n-      <action issue=\"BCEL-205\" type=\"update\">add javadoc comments to LineNumber.java and LineNumberTable.java.</action>\n-      <action issue=\"BCEL-208\" type=\"fix\">Need to check for an empty InstructionList.</action>\n-      <action issue=\"BCEL-212\" type=\"update\">Inconsistent toString() results.</action>\n-      <action issue=\"BCEL-217\" type=\"fix\">long type instructions are not searched by InstructionFinder using\n-                                          regular expression.</action>\n-      <action issue=\"BCEL-244\" type=\"update\" dev=\"ggregory\">Update Java requirement from 5 to 7.</action>\n-      <action issue=\"BCEL-239\" type=\"fix\">Interfaces should not be used to define constants.</action>\n-      <action issue=\"BCEL-234\" type=\"fix\">Code must not swallow Throwable.</action>\n-      <action issue=\"BCEL-219\" type=\"update\" due-to=\"Maxim Degtyarev\">\n-        Make org.apache.bcel.classfile.ConstantPool.ConstantPool(DataInput)\n-        public.\n-      </action>\n-      <action issue=\"BCEL-209\" type=\"fix\" due-to=\"Mark Roberts\">\n-        Bug fixes and improvements to InvokeDynamic and BootStrapMethods\n-        implementation.\n-      </action>\n-      <action issue=\"BCEL-187\" type=\"fix\" due-to=\"J\u00e9r\u00f4me Leroux\">\n-        Verification error when an invoke references a method defined in\n-        superclass.\n-      </action>\n-      <action issue=\"BCEL-218\" type=\"fix\" due-to=\"chas\">\n-        Remove ObjectType cache.\n-      </action>\n-      <action issue=\"BCEL-184\" type=\"fix\" due-to=\"J\u00e9r\u00f4me Leroux\">\n-        The verifier now checks if methods with a void return type attempt\n-        to return an object.\n-      </action>\n-      <action issue=\"BCEL-207\" type=\"fix\" due-to=\"Mark Roberts\">\n-        MethodGen.removeLocalVariable now properly unreference the removed\n-        variable from the targetters of the instruction handlers delimiting\n-        the scope of the variable.\n-      </action>\n-      <action issue=\"BCEL-197\" type=\"fix\" due-to=\"Mark Roberts\">\n-        Utility.signatureToString() no longer throws a ClassFormatException\n-        on TypeVariables found in generic signatures.\n-      </action>\n-      <action issue=\"BCEL-194\" type=\"fix\" due-to=\"Mark Roberts\">\n-        Removed the 'index' variable from the LocalVariableGen's hash code.\n-      </action>\n-      <action issue=\"BCEL-193\" type=\"fix\" dev=\"markt\" due-to=\"J\u00e9r\u00f4me Leroux\">\n-        The verifier should not check for run time compatibility of objects\n-        assigned to arrays.\n-      </action>\n-      <action issue=\"BCEL-188\" type=\"fix\" dev=\"markt\" due-to=\"J\u00e9r\u00f4me Leroux\">\n-        Correct verification of the return value of a method.\n-      </action>\n-      <action issue=\"BCEL-186\" type=\"fix\" dev=\"sebb\">\n-        Performance degradation with the UTF8 cache. getInstance no longer\n-        uses cache.\n-      </action>\n-      <action issue=\"BCEL-181\" type=\"fix\" dev=\"ggregory\">\n-        org.apache.bcel.util.ClassLoaderRepository.loadClass(String) leaks\n-        input streams.\n-      </action>\n-      <action issue=\"BCEL-76\" type=\"update\">\n-        Add parent type processing for ClassPath class.\n-      </action>\n-      <action issue=\"BCEL-83\" type=\"update\">\n-        Add support for getResource and getResourceAsStream to ClassPath.\n-      </action>\n-      <action issue=\"BCEL-92\" type=\"update\">\n-        Properly parse StackMapTable attributes in Java 6 classfiles.\n-      </action>\n-      <action issue=\"BCEL-104\" type=\"update\">\n-        Javadoc overhaul.\n-      </action>\n-      <action issue=\"BCEL-119\" type=\"update\">\n-        BCEL is unnecessarily slow.\n-      </action>\n-      <action issue=\"BCEL-157\" type=\"update\">\n-        Add support for INVOKEDYNAMIC and MethodHandles.\n-      </action>\n-      <action issue=\"BCEL-160\" type=\"update\" dev=\"sebb\">\n-        Why using unstable sort at MethodGen.getLocalVariables() ?\n-      </action>\n-      <action issue=\"BCEL-163\" type=\"update\">\n-        Incorporate patch file from Findbugs.\n-      </action>\n-      <action issue=\"BCEL-175\" type=\"update\">\n-        Implement the MethodParameters attribute.\n-      </action>\n-      <action issue=\"BCEL-28\" type=\"fix\">\n-        Mistake in \"Peephole optimizer\" example\n-        at http://commons.apache.org/bcel/manual.html\n-      </action>\n-      <action issue=\"BCEL-74\" type=\"fix\">\n-        BCEL cannot be used as java.system.class.loader.\n-      </action>\n-      <action issue=\"BCEL-77\" type=\"fix\">\n-        XSLT transforms broken in Turkish Locale.\n-      </action>\n-      <action issue=\"BCEL-79\" type=\"fix\">\n-        java.lang.ClassFormatError: LVTT entry for 'local' in class file\n-        org/shiftone/jrat/test/dummy/CrashTestDummy does not match any LVT\n-        entry\n-      </action>\n-      <action issue=\"BCEL-81\" type=\"fix\">\n-        ClassParser.parse() throws NullPointerException if class does not\n-        exist and ClassParser(String) constructor is used.\n-      </action>\n-      <action issue=\"BCEL-85\" type=\"fix\">\n-        ArrayOutOfBoundsException in InstructionFinder.\n-      </action>\n-      <action issue=\"BCEL-87\" type=\"fix\">\n-        Website: Incorrect URL for source; version 5.2 is not in the bug\n-        page\n-      </action>\n-      <action issue=\"BCEL-88\" type=\"fix\">\n-        bcelified method doesn't pass verification.\n-      </action>\n-      <action issue=\"BCEL-89\" type=\"fix\">\n-        return type not verified by JustIce.\n-      </action>\n-      <action issue=\"BCEL-94\" type=\"fix\">\n-        @since tag incorrect for Annotation classes in BCEL trunk.\n-      </action>\n-      <action issue=\"BCEL-95\" type=\"fix\">\n-        InstructionFactory missing % operator for Float, Double.\n-      </action>\n-      <action issue=\"BCEL-96\" type=\"fix\">\n-        Fields in Annotations and AnnotationEntry are inaccessible to\n-        subclasses\n-      </action>\n-      <action issue=\"BCEL-97\" type=\"fix\">\n-        Add support for getResources to ClassPath.\n-      </action>\n-      <action issue=\"BCEL-98\" type=\"fix\">\n-        Two source files in repository are empty.\n-      </action>\n-      <action issue=\"BCEL-99\" type=\"fix\">\n-        Maven POM file calls in apache regex but code does not use it.\n-      </action>\n-      <action issue=\"BCEL-100\" type=\"fix\">\n-        ClassParser throws unintelligible Exception.\n-      </action>\n-      <action issue=\"BCEL-101\" type=\"fix\">\n-        verifier raises an AssertionViolatedException when done against\n-        Java 5 files with generics/annotations.\n-      </action>\n-      <action issue=\"BCEL-102\" type=\"fix\">\n-        Verifier fails in pass 2 with \"Number of LocalVariableTable\n-        attributes of Code attribute\" on static methods.\n-      </action>\n-      <action issue=\"BCEL-107\" type=\"fix\">\n-        ParameterAnnotationEntries are read not dumped.\n-      </action>\n-      <action issue=\"BCEL-108\" type=\"fix\">\n-        RuntimeVisible Annotations duplicated.\n-      </action>\n-      <action issue=\"BCEL-112\" type=\"fix\">\n-        ARRAYLENGTH incorrectly not StackConsumer.\n-      </action>\n-      <action issue=\"BCEL-114\" type=\"fix\">\n-        Error in method search() defined in\n-        org.apache.bcel.util.InstructionFinder\n-      </action>\n-      <action issue=\"BCEL-115\" type=\"fix\">\n-        Deleting all instructions of a list shows wrong behaviour.\n-      </action>\n-      <action issue=\"BCEL-120\" type=\"fix\">\n-        Make BCEL JAR OSGi compatible.\n-      </action>\n-      <action issue=\"BCEL-122\" type=\"fix\">\n-        ArrayIndexOutOfBoundsException thrown from TABLESWITCH.initFromFile.\n-      </action>\n-      <action issue=\"BCEL-124\" type=\"fix\">\n-        tableswitch/lookupswitch invalid alignment of 4-byte operands.\n-      </action>\n-      <action issue=\"BCEL-125\" type=\"fix\">\n-        Incorrect size calculation in InstructionFinder.\n-      </action>\n-      <action issue=\"BCEL-130\" type=\"fix\">\n-        Class files containing \"ParameterAnnotations\" are dumped\n-        incorrectly.\n-      </action>\n-      <action issue=\"BCEL-131\" type=\"fix\">\n-        Class files containing \"StackMapTable\" attributes (on method code)\n-        are dumped incorrectly.\n-      </action>\n-      <action issue=\"BCEL-132\" type=\"fix\">\n-        org.apache.bcel.classfile.ClassParser: NullPointerException caused\n-        by fileopen failed.\n-      </action>\n-      <action issue=\"BCEL-133\" type=\"fix\">\n-        org.apache.bcel.classfile.ClassParser: NullPointerException caused\n-        by invalid filename.\n-      </action>\n-      <action issue=\"BCEL-134\" type=\"fix\">\n-        ExecutionVisitor doesn't support Class constant type for LDC and\n-        LDC_W.\n-      </action>\n-      <action issue=\"BCEL-135\" type=\"fix\">\n-        BCELifier issue: BCELFactory fails to handle float and long\n-        constants.\n-      </action>\n-      <action issue=\"BCEL-137\" type=\"fix\">\n-        \"Invalid method signature: TT;\" when using MethodGen for a method\n-        having a generic parameter.\n-      </action>\n-      <action issue=\"BCEL-138\" type=\"fix\">\n-        FieldInstruction.getFieldSize() doesn't decode Type.getTypeSize()\n-        output.\n-      </action>\n-      <action issue=\"BCEL-140\" type=\"fix\">\n-        org.apache.bcel.generic.Instruction.equals(Object) does not follow\n-        Object.equals(Object) rules.\n-      </action>\n-      <action issue=\"BCEL-141\" type=\"fix\">\n-        Select instructions should implement StackConsumer instead of\n-        StackProducer.\n-      </action>\n-      <action issue=\"BCEL-143\" type=\"fix\">\n-        Fix CPL License issues with EnclosingMethod.java and\n-        LocalVariableTypeTable.java.\n-      </action>\n-      <action issue=\"BCEL-145\" type=\"fix\">\n-        Type.getReturnTypeSize() doesn't decode Type.getTypeSize() output.\n-      </action>\n-      <action issue=\"BCEL-146\" type=\"fix\">\n-        SyntheticRepository.loadClass() fails to close the inputStream.\n-      </action>\n-      <action issue=\"BCEL-148\" type=\"fix\">\n-        BCELifier produces incorrect code for methods containing loads of\n-        class literals from constant pool.\n-      </action>\n-      <action issue=\"BCEL-151\" type=\"fix\">\n-        Code attribute size not updated.\n-      </action>\n-      <action issue=\"BCEL-152\" type=\"fix\">\n-        Incorrect link for Jasmin assembler language.\n-      </action>\n-      <action issue=\"BCEL-153\" type=\"fix\" dev=\"sebb\">\n-        Examples not present in source or binary downloads.\n-      </action>\n-      <action issue=\"BCEL-154\" type=\"fix\">\n-        ClassParser.parse() generates NPE if it cannot open the file.\n-      </action>\n-      <action issue=\"BCEL-155\" type=\"fix\">\n-        InstConstraintVisitor does not handle class constants.\n-      </action>\n-      <action issue=\"BCEL-156\" type=\"fix\">\n-        Pass3bVerifier crashes on empty methods.\n-      </action>\n-      <action issue=\"BCEL-159\" type=\"fix\">\n-        LocalVariableGen.getLocalVariable() computes incorrect length.\n-      </action>\n-      <action issue=\"BCEL-164\" type=\"fix\">\n-        Method does not have a method to access parameter annotations.\n-      </action>\n-      <action issue=\"BCEL-167\" type=\"fix\">\n-        ClassPath.getResource does not correctly perform URL escaping.\n-      </action>\n-      <action issue=\"BCEL-173\" type=\"fix\">\n-        ClassParser fails to parse JDK classes in Java 8:\n-        ClassFormatException: Invalid byte tag in constant pool.\n-      </action>\n-      <action issue=\"BCEL-174\" type=\"fix\">\n-        Verification of interfaces with default methods fails with Java 8.\n-      </action>\n-      <action issue=\"BCEL-177\" type=\"fix\" dev=\"markt\">\n-        When reading the number of parameters in a MethodParameters\n-        structure only read a single byte as per the JVM specification.\n-      </action>\n-    </release>\n-  </body>\n-</document>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+\r\n+   Licensed to the Apache Software Foundation (ASF) under one or more\r\n+   contributor license agreements.  See the NOTICE file distributed with\r\n+   this work for additional information regarding copyright ownership.\r\n+   The ASF licenses this file to You under the Apache License, Version 2.0\r\n+   (the \"License\"); you may not use this file except in compliance with\r\n+   the License.  You may obtain a copy of the License at\r\n+\r\n+       http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+   Unless required by applicable law or agreed to in writing, software\r\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+   See the License for the specific language governing permissions and\r\n+   limitations under the License.\r\n+\r\n+-->\r\n+<!--\r\n+This file is also used by the maven-changes-plugin to generate the release notes.\r\n+Useful ways of finding items to add to this file are:\r\n+\r\n+1.  Add items when you fix a bug or add a feature (this makes the\r\n+release process easy :-).\r\n+\r\n+2.  Do a JIRA search for tickets closed since the previous release.\r\n+\r\n+3.  Use the report generated by the maven-changelog-plugin to see all\r\n+SVN commits. TBA how to use this with SVN.\r\n+\r\n+To generate the release notes from this file:\r\n+\r\n+mvn changes:announcement-generate -Prelease-notes [-Dchanges.version=nnn]\r\n+\r\n+then tweak the formatting if necessary\r\n+and commit\r\n+\r\n+The <action> type attribute can be add,update,fix,remove.\r\n+-->\r\n+\r\n+<document>\r\n+  <properties>\r\n+    <title>Changes</title>\r\n+    <author email=\"dev@commons.apache.org\">Apache Commons developers</author>\r\n+  </properties>\r\n+\r\n+  <!-- NOTE:\r\n+  The description below is specially formatted so as to improve the layout of the generated release notes:\r\n+  The parsing process removes all line feeds, replacing them with a single space.\r\n+  The Velocity template in resources/templates has been enhanced to replace pairs of adjacent spaces\r\n+  with a new-line in the release notes. (These spaces are ignored when displaying HTML).\r\n+  If the output is not quite correct, check for invisible trailing spaces!\r\n+\r\n+  N.B. The release notes template groups actions by type, and only extracts data for the current release.\r\n+  The changes report outputs actions in the order they appear in this file.\r\n+\r\n+  To regenerate the release notes:\r\n+  mvn changes:announcement-generate -Prelease-notes [-Dchanges.version=nnn]\r\n+\r\n+  Defining changes.version allows one to create the RN without first removing the SNAPSHOT suffix.\r\n+   -->\r\n+\r\n+  <body>\r\n+    <release version=\"6.4\" date=\"2019-MM-DD\" description=\"TO DO\">\r\n+      <action issue=\"BCEL-267\" type=\"fix\" dev=\"ggregory\" due-to=\"Stephan Herrmann, Sebb, Gary Gregory, Torsten Curdt\">Race conditions on static fields in BranchHandle and InstructionHandle.</action>\r\n+      <action issue=\"BCEL-297\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts, mingleizhang\">Possible NPE in override implementation of Object.equals (#20)</action>\r\n+      <action issue=\"BCEL-298\" type=\"update\" dev=\"ggregory\" due-to=\"mingleizhang\">Add some files to .gitignore (#19)</action>\r\n+      <action issue=\"BCEL-315\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory\">NullPointerException at org.apache.bcel.classfile.FieldOrMethod.dump().</action>\r\n+    </release>\r\n+\r\n+    <release version=\"6.3\" date=\"2019-01-23\" description=\"Experimental Java 9, 10, 11, 12-EA, and 13-EA Support\">\r\n+      <action issue=\"BCEL-304\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory, Ed Pavlak\">ClassPath.getClassFile() and friends do not work with JDK 9 and higher (PR #22.)</action>\r\n+      <action issue=\"BCEL-305\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory\">ClassPath.getClassFile() and friends do not work with JRE 9 and higher</action>\r\n+      <action                  type=\"update\" dev=\"ggregory\" due-to=\"Mark Thomas, Gary Gregory\">Initial support for Java 11</action>\r\n+      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added org.apache.bcel.classfile.Visitor.visitConstantDynamic(ConstantDynamic)</action>\r\n+      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added org.apache.bcel.classfile.ConstantDynamic</action>\r\n+      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added fields in org.apache.bcel.Const for Java 9, 10, and 11.</action>      \r\n+      <action                  type=\"add\" dev=\"ggregory\" due-to=\"Mark Thomas\">Added fields in org.apache.bcel.Const for Java 12 and 13 based on Java Early Access releases.</action>      \r\n+      <action                  type=\"update\" dev=\"ggregory\" due-to=\"Gary Gregory\">Update Java requirement from Java 7 to Java 8.</action>      \r\n+    </release>\r\n+\r\n+    <release version=\"6.2\" date=\"2017-12-08\" description=\"Experimental Java 9 Support\">\r\n+      <action issue=\"BCEL-294\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Incorrect comment in StackMap.java</action>\r\n+      <action issue=\"BCEL-296\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts\">Incorrect comment in several classes.</action>\r\n+      <action issue=\"BCEL-295\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts\">Fix local variable live range length; add test case.</action>\r\n+      <action issue=\"BCEL-300\" type=\"fix\" dev=\"ggregory\">org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19.</action>\r\n+      <action issue=\"BCEL-301\" type=\"fix\" dev=\"ggregory\">org.apache.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 20.</action>\r\n+    </release>\r\n+\r\n+    <release version=\"6.1\" date=\"2017-09-14\" description=\"Experimental Java 9 Support\">\r\n+      <action issue=\"BCEL-293\" type=\"add\" dev=\"britter\">Add Automatic-Module-Name MANIFEST entry for Java 9 compatibility</action>\r\n+      <action issue=\"BCEL-292\" type=\"add\" dev=\"markt\">Add minimal Java 9 support</action>\r\n+      <action issue=\"BCEL-286\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Utility.signatureToString fails if a method has multiple type arguments</action>\r\n+      <action issue=\"BCEL-287\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">IINC does not handle -128 properly</action>\r\n+      <action issue=\"BCEL-283\" type=\"fix\" dev=\"britter\" due-to=\"Mark Roberts\">Support for StackMap should be different from StackMapTable</action>\r\n+      <action issue=\"BCEL-289\" type=\"fix\" dev=\"kinow\">Crash when parsing constructor of inner classes with parameters annotated</action>\r\n+      <action issue=\"BCEL-276\" type=\"fix\" dev=\"britter\" due-to=\"Sam Yoon, Mark Roberts\">LocalVariableTypeTable is not updated.</action>\r\n+      <action issue=\"BCEL-277\" type=\"fix\" dev=\"britter\" due-to=\"Sam Yoon\">Resolving the String representation of a constant throws NoSuchElementException in case of CONSTANT_NameAndType constant.</action>\r\n+    </release>\r\n+\r\n+    <release version=\"6.0\" date=\"2016-07-10\" description=\"Apache Commons BCEL 6.0 is a major release supporting the new features\r\n+ introduced in Java 6, 7 and 8.\r\n+\r\n+\r\n+ It requires Java 7 or higher to run.\r\n+\r\n+\r\n+COMPATIBILITY with 5.2\r\n+ ======================\r\n+\r\n+\r\n+ Binary compatible - not strictly compatible\r\n+ - The constant interface org.apache.bcel.Constants has been deprecated. Classes\r\n+  which implemented this interface in 5.2 now use the constants defined in the\r\n+  org.apache.bcel.Const class.\r\n+ - The constant interface org.apache.bcel.generic.InstructionConstants has been\r\n+  deprecated. Classes which implemented this interface in 5.2 now use the\r\n+  constants defined in the org.apache.bcel.generic.InstructionConsts class.\r\n+ - Return type of method 'public java.lang.Object getElementAt(int)' in\r\n+  org.apache.bcel.verifier.VerifierFactoryListModel has been changed to\r\n+  java.lang.String.\r\n+ - The BCEL classes do no longer implement java.io.Serializable.\r\n+\r\n+\r\n+\r\n+Source compatible - Yes, sort of;\r\n+  - The org.apache.bcel.classfile.Visitor interface has been enhanced with\r\n+  additional methods. If you implemented it directly instead of extending\r\n+  the EmptyVisitor class you'll have to implement the new methods.\r\n+  - The org.apache.bcel.generic.Visitor interface has been enhanced with an\r\n+  additional method. If you implemented it directly instead of extending\r\n+  the EmptyVisitor class you'll have to implement the new methods.\r\n+\r\n+\r\n+ Semantic compatible - Yes, except:\r\n+  - BCEL 6.0 handles new attributes such as code annotations that could only\r\n+  be processed by implementing a custom AttributeReader in the previous\r\n+  versions. Code relying on this behavior will have to be adjusted since\r\n+  the AttributeReader will no longer be called in these cases.\r\n+\r\n+\r\n+\r\n+For full information about API changes please see the extended Clirr report:\r\n+\r\n+    http://commons.apache.org/bcel/clirr-report.html\">\r\n+      <action issue=\"BCEL-262\" type=\"update\" dev=\"britter\" due-to=\"Mark Roberts\">InvokeInstruction.getClassName(ConstantPoolGen)\r\n+                                          should not throw an exception when it detects an array.</action>\r\n+      <action issue=\"BCEL-237\" type=\"fix\" dev=\"sebb\">non-empty final arrays should be private as they are mutable.</action>\r\n+      <action issue=\"BCEL-230\" type=\"update\" dev=\"britter\">Document the Java platform requirement clearly and early.</action>\r\n+      <action issue=\"BCEL-243\" type=\"fix\">Type.getType() needs to understand TypeVariableSignature(s).</action>\r\n+      <action issue=\"BCEL-272\" type=\"add\">Add constants for Java 9 class file version 53.</action>\r\n+      <action issue=\"BCEL-271\" type=\"fix\">FCONST pattern does not include FCONST_2.</action>\r\n+      <action issue=\"BCEL-264\" type=\"fix\">Add missing Node.accept() implementations (ConstantMethodHandle,\r\n+                                          ConstantMethodType, ParameterAnnotationEntry).</action>\r\n+      <action issue=\"BCEL-221\" type=\"fix\">BCELifier is not working for Java8Example (incomplete).</action>\r\n+      <action issue=\"BCEL-195\" type=\"fix\">Addition of hashCode() to generic/Instruction.java breaks Targeters.\r\n+                                          Never make distinct BranchInstructions compare equal.</action>\r\n+      <action issue=\"BCEL-261\" type=\"fix\">Select constructor allows partially constructed instance to escape.\r\n+                                          Re-ordered code to delay the escape.</action>\r\n+      <action issue=\"BCEL-259\" type=\"fix\">Minor doc error in BranchInstruction.java.</action>\r\n+      <action issue=\"BCEL-260\" type=\"fix\">ClassDumper example duplicates field attribute types.</action>\r\n+      <action issue=\"BCEL-258\" type=\"fix\">No tests to check the output of dump methods.</action>\r\n+      <action issue=\"BCEL-257\" type=\"fix\">INVOKESPECIAL, INVOKESTATIC, INVOKEVIRTUAL need to define dump()\r\n+                                          methods.</action>\r\n+      <action issue=\"BCEL-254\" type=\"fix\">Two more methods that would be nice to be public.</action>\r\n+      <action issue=\"BCEL-245\" type=\"fix\">Type class includes constants that reference subclasses.</action>\r\n+      <action issue=\"BCEL-253\" type=\"fix\">Pass 3b verifier is too strict.</action>\r\n+      <action issue=\"BCEL-248\" type=\"fix\">StackMapTable[Entry] should be removed and improvements merged into\r\n+                                          StackMap[Entry].</action>\r\n+      <action issue=\"BCEL-202\" type=\"fix\">StackMap[Table]Entry.copy() needs to be deep; Improved support for\r\n+                                          StackMaps.</action>\r\n+      <action issue=\"BCEL-251\" type=\"fix\">Pass3aVerifier visitANEWARRAY() does not allow 255 array dimensions.</action>\r\n+      <action issue=\"BCEL-211\" type=\"update\">Some additional clone methods should be public.</action>\r\n+      <action issue=\"BCEL-249\" type=\"fix\">Check for max Short seems wrong.</action>\r\n+      <action issue=\"BCEL-127\" type=\"update\">Document that Instruction Factory returns singleton instances.</action>\r\n+      <action issue=\"BCEL-198\" type=\"update\">better support for clone/copy methods.</action>\r\n+      <action issue=\"BCEL-242\" type=\"remove\">Remove Serializable.</action>\r\n+      <action issue=\"BCEL-110\" type=\"remove\">Problem with JAXB if the bcel classloader is used; remove the broken\r\n+      ClassLoader class.</action>\r\n+      <action issue=\"BCEL-201\" type=\"update\">modify several toString methods to make output similar to \"javap\".</action>\r\n+      <action issue=\"BCEL-205\" type=\"update\">add javadoc comments to LineNumber.java and LineNumberTable.java.</action>\r\n+      <action issue=\"BCEL-208\" type=\"fix\">Need to check for an empty InstructionList.</action>\r\n+      <action issue=\"BCEL-212\" type=\"update\">Inconsistent toString() results.</action>\r\n+      <action issue=\"BCEL-217\" type=\"fix\">long type instructions are not searched by InstructionFinder using\r\n+                                          regular expression.</action>\r\n+      <action issue=\"BCEL-244\" type=\"update\" dev=\"ggregory\">Update Java requirement from 5 to 7.</action>\r\n+      <action issue=\"BCEL-239\" type=\"fix\">Interfaces should not be used to define constants.</action>\r\n+      <action issue=\"BCEL-234\" type=\"fix\">Code must not swallow Throwable.</action>\r\n+      <action issue=\"BCEL-219\" type=\"update\" due-to=\"Maxim Degtyarev\">\r\n+        Make org.apache.bcel.classfile.ConstantPool.ConstantPool(DataInput)\r\n+        public.\r\n+      </action>\r\n+      <action issue=\"BCEL-209\" type=\"fix\" due-to=\"Mark Roberts\">\r\n+        Bug fixes and improvements to InvokeDynamic and BootStrapMethods\r\n+        implementation.\r\n+      </action>\r\n+      <action issue=\"BCEL-187\" type=\"fix\" due-to=\"J\u00e9r\u00f4me Leroux\">\r\n+        Verification error when an invoke references a method defined in\r\n+        superclass.\r\n+      </action>\r\n+      <action issue=\"BCEL-218\" type=\"fix\" due-to=\"chas\">\r\n+        Remove ObjectType cache.\r\n+      </action>\r\n+      <action issue=\"BCEL-184\" type=\"fix\" due-to=\"J\u00e9r\u00f4me Leroux\">\r\n+        The verifier now checks if methods with a void return type attempt\r\n+        to return an object.\r\n+      </action>\r\n+      <action issue=\"BCEL-207\" type=\"fix\" due-to=\"Mark Roberts\">\r\n+        MethodGen.removeLocalVariable now properly unreference the removed\r\n+        variable from the targetters of the instruction handlers delimiting\r\n+        the scope of the variable.\r\n+      </action>\r\n+      <action issue=\"BCEL-197\" type=\"fix\" due-to=\"Mark Roberts\">\r\n+        Utility.signatureToString() no longer throws a ClassFormatException\r\n+        on TypeVariables found in generic signatures.\r\n+      </action>\r\n+      <action issue=\"BCEL-194\" type=\"fix\" due-to=\"Mark Roberts\">\r\n+        Removed the 'index' variable from the LocalVariableGen's hash code.\r\n+      </action>\r\n+      <action issue=\"BCEL-193\" type=\"fix\" dev=\"markt\" due-to=\"J\u00e9r\u00f4me Leroux\">\r\n+        The verifier should not check for run time compatibility of objects\r\n+        assigned to arrays.\r\n+      </action>\r\n+      <action issue=\"BCEL-188\" type=\"fix\" dev=\"markt\" due-to=\"J\u00e9r\u00f4me Leroux\">\r\n+        Correct verification of the return value of a method.\r\n+      </action>\r\n+      <action issue=\"BCEL-186\" type=\"fix\" dev=\"sebb\">\r\n+        Performance degradation with the UTF8 cache. getInstance no longer\r\n+        uses cache.\r\n+      </action>\r\n+      <action issue=\"BCEL-181\" type=\"fix\" dev=\"ggregory\">\r\n+        org.apache.bcel.util.ClassLoaderRepository.loadClass(String) leaks\r\n+        input streams.\r\n+      </action>\r\n+      <action issue=\"BCEL-76\" type=\"update\">\r\n+        Add parent type processing for ClassPath class.\r\n+      </action>\r\n+      <action issue=\"BCEL-83\" type=\"update\">\r\n+        Add support for getResource and getResourceAsStream to ClassPath.\r\n+      </action>\r\n+      <action issue=\"BCEL-92\" type=\"update\">\r\n+        Properly parse StackMapTable attributes in Java 6 classfiles.\r\n+      </action>\r\n+      <action issue=\"BCEL-104\" type=\"update\">\r\n+        Javadoc overhaul.\r\n+      </action>\r\n+      <action issue=\"BCEL-119\" type=\"update\">\r\n+        BCEL is unnecessarily slow.\r\n+      </action>\r\n+      <action issue=\"BCEL-157\" type=\"update\">\r\n+        Add support for INVOKEDYNAMIC and MethodHandles.\r\n+      </action>\r\n+      <action issue=\"BCEL-160\" type=\"update\" dev=\"sebb\">\r\n+        Why using unstable sort at MethodGen.getLocalVariables() ?\r\n+      </action>\r\n+      <action issue=\"BCEL-163\" type=\"update\">\r\n+        Incorporate patch file from Findbugs.\r\n+      </action>\r\n+      <action issue=\"BCEL-175\" type=\"update\">\r\n+        Implement the MethodParameters attribute.\r\n+      </action>\r\n+      <action issue=\"BCEL-28\" type=\"fix\">\r\n+        Mistake in \"Peephole optimizer\" example\r\n+        at http://commons.apache.org/bcel/manual.html\r\n+      </action>\r\n+      <action issue=\"BCEL-74\" type=\"fix\">\r\n+        BCEL cannot be used as java.system.class.loader.\r\n+      </action>\r\n+      <action issue=\"BCEL-77\" type=\"fix\">\r\n+        XSLT transforms broken in Turkish Locale.\r\n+      </action>\r\n+      <action issue=\"BCEL-79\" type=\"fix\">\r\n+        java.lang.ClassFormatError: LVTT entry for 'local' in class file\r\n+        org/shiftone/jrat/test/dummy/CrashTestDummy does not match any LVT\r\n+        entry\r\n+      </action>\r\n+      <action issue=\"BCEL-81\" type=\"fix\">\r\n+        ClassParser.parse() throws NullPointerException if class does not\r\n+        exist and ClassParser(String) constructor is used.\r\n+      </action>\r\n+      <action issue=\"BCEL-85\" type=\"fix\">\r\n+        ArrayOutOfBoundsException in InstructionFinder.\r\n+      </action>\r\n+      <action issue=\"BCEL-87\" type=\"fix\">\r\n+        Website: Incorrect URL for source; version 5.2 is not in the bug\r\n+        page\r\n+      </action>\r\n+      <action issue=\"BCEL-88\" type=\"fix\">\r\n+        bcelified method doesn't pass verification.\r\n+      </action>\r\n+      <action issue=\"BCEL-89\" type=\"fix\">\r\n+        return type not verified by JustIce.\r\n+      </action>\r\n+      <action issue=\"BCEL-94\" type=\"fix\">\r\n+        @since tag incorrect for Annotation classes in BCEL trunk.\r\n+      </action>\r\n+      <action issue=\"BCEL-95\" type=\"fix\">\r\n+        InstructionFactory missing % operator for Float, Double.\r\n+      </action>\r\n+      <action issue=\"BCEL-96\" type=\"fix\">\r\n+        Fields in Annotations and AnnotationEntry are inaccessible to\r\n+        subclasses\r\n+      </action>\r\n+      <action issue=\"BCEL-97\" type=\"fix\">\r\n+        Add support for getResources to ClassPath.\r\n+      </action>\r\n+      <action issue=\"BCEL-98\" type=\"fix\">\r\n+        Two source files in repository are empty.\r\n+      </action>\r\n+      <action issue=\"BCEL-99\" type=\"fix\">\r\n+        Maven POM file calls in apache regex but code does not use it.\r\n+      </action>\r\n+      <action issue=\"BCEL-100\" type=\"fix\">\r\n+        ClassParser throws unintelligible Exception.\r\n+      </action>\r\n+      <action issue=\"BCEL-101\" type=\"fix\">\r\n+        verifier raises an AssertionViolatedException when done against\r\n+        Java 5 files with generics/annotations.\r\n+      </action>\r\n+      <action issue=\"BCEL-102\" type=\"fix\">\r\n+        Verifier fails in pass 2 with \"Number of LocalVariableTable\r\n+        attributes of Code attribute\" on static methods.\r\n+      </action>\r\n+      <action issue=\"BCEL-107\" type=\"fix\">\r\n+        ParameterAnnotationEntries are read not dumped.\r\n+      </action>\r\n+      <action issue=\"BCEL-108\" type=\"fix\">\r\n+        RuntimeVisible Annotations duplicated.\r\n+      </action>\r\n+      <action issue=\"BCEL-112\" type=\"fix\">\r\n+        ARRAYLENGTH incorrectly not StackConsumer.\r\n+      </action>\r\n+      <action issue=\"BCEL-114\" type=\"fix\">\r\n+        Error in method search() defined in\r\n+        org.apache.bcel.util.InstructionFinder\r\n+      </action>\r\n+      <action issue=\"BCEL-115\" type=\"fix\">\r\n+        Deleting all instructions of a list shows wrong behaviour.\r\n+      </action>\r\n+      <action issue=\"BCEL-120\" type=\"fix\">\r\n+        Make BCEL JAR OSGi compatible.\r\n+      </action>\r\n+      <action issue=\"BCEL-122\" type=\"fix\">\r\n+        ArrayIndexOutOfBoundsException thrown from TABLESWITCH.initFromFile.\r\n+      </action>\r\n+      <action issue=\"BCEL-124\" type=\"fix\">\r\n+        tableswitch/lookupswitch invalid alignment of 4-byte operands.\r\n+      </action>\r\n+      <action issue=\"BCEL-125\" type=\"fix\">\r\n+        Incorrect size calculation in InstructionFinder.\r\n+      </action>\r\n+      <action issue=\"BCEL-130\" type=\"fix\">\r\n+        Class files containing \"ParameterAnnotations\" are dumped\r\n+        incorrectly.\r\n+      </action>\r\n+      <action issue=\"BCEL-131\" type=\"fix\">\r\n+        Class files containing \"StackMapTable\" attributes (on method code)\r\n+        are dumped incorrectly.\r\n+      </action>\r\n+      <action issue=\"BCEL-132\" type=\"fix\">\r\n+        org.apache.bcel.classfile.ClassParser: NullPointerException caused\r\n+        by fileopen failed.\r\n+      </action>\r\n+      <action issue=\"BCEL-133\" type=\"fix\">\r\n+        org.apache.bcel.classfile.ClassParser: NullPointerException caused\r\n+        by invalid filename.\r\n+      </action>\r\n+      <action issue=\"BCEL-134\" type=\"fix\">\r\n+        ExecutionVisitor doesn't support Class constant type for LDC and\r\n+        LDC_W.\r\n+      </action>\r\n+      <action issue=\"BCEL-135\" type=\"fix\">\r\n+        BCELifier issue: BCELFactory fails to handle float and long\r\n+        constants.\r\n+      </action>\r\n+      <action issue=\"BCEL-137\" type=\"fix\">\r\n+        \"Invalid method signature: TT;\" when using MethodGen for a method\r\n+        having a generic parameter.\r\n+      </action>\r\n+      <action issue=\"BCEL-138\" type=\"fix\">\r\n+        FieldInstruction.getFieldSize() doesn't decode Type.getTypeSize()\r\n+        output.\r\n+      </action>\r\n+      <action issue=\"BCEL-140\" type=\"fix\">\r\n+        org.apache.bcel.generic.Instruction.equals(Object) does not follow\r\n+        Object.equals(Object) rules.\r\n+      </action>\r\n+      <action issue=\"BCEL-141\" type=\"fix\">\r\n+        Select instructions should implement StackConsumer instead of\r\n+        StackProducer.\r\n+      </action>\r\n+      <action issue=\"BCEL-143\" type=\"fix\">\r\n+        Fix CPL License issues with EnclosingMethod.java and\r\n+        LocalVariableTypeTable.java.\r\n+      </action>\r\n+      <action issue=\"BCEL-145\" type=\"fix\">\r\n+        Type.getReturnTypeSize() doesn't decode Type.getTypeSize() output.\r\n+      </action>\r\n+      <action issue=\"BCEL-146\" type=\"fix\">\r\n+        SyntheticRepository.loadClass() fails to close the inputStream.\r\n+      </action>\r\n+      <action issue=\"BCEL-148\" type=\"fix\">\r\n+        BCELifier produces incorrect code for methods containing loads of\r\n+        class literals from constant pool.\r\n+      </action>\r\n+      <action issue=\"BCEL-151\" type=\"fix\">\r\n+        Code attribute size not updated.\r\n+      </action>\r\n+      <action issue=\"BCEL-152\" type=\"fix\">\r\n+        Incorrect link for Jasmin assembler language.\r\n+      </action>\r\n+      <action issue=\"BCEL-153\" type=\"fix\" dev=\"sebb\">\r\n+        Examples not present in source or binary downloads.\r\n+      </action>\r\n+      <action issue=\"BCEL-154\" type=\"fix\">\r\n+        ClassParser.parse() generates NPE if it cannot open the file.\r\n+      </action>\r\n+      <action issue=\"BCEL-155\" type=\"fix\">\r\n+        InstConstraintVisitor does not handle class constants.\r\n+      </action>\r\n+      <action issue=\"BCEL-156\" type=\"fix\">\r\n+        Pass3bVerifier crashes on empty methods.\r\n+      </action>\r\n+      <action issue=\"BCEL-159\" type=\"fix\">\r\n+        LocalVariableGen.getLocalVariable() computes incorrect length.\r\n+      </action>\r\n+      <action issue=\"BCEL-164\" type=\"fix\">\r\n+        Method does not have a method to access parameter annotations.\r\n+      </action>\r\n+      <action issue=\"BCEL-167\" type=\"fix\">\r\n+        ClassPath.getResource does not correctly perform URL escaping.\r\n+      </action>\r\n+      <action issue=\"BCEL-173\" type=\"fix\">\r\n+        ClassParser fails to parse JDK classes in Java 8:\r\n+        ClassFormatException: Invalid byte tag in constant pool.\r\n+      </action>\r\n+      <action issue=\"BCEL-174\" type=\"fix\">\r\n+        Verification of interfaces with default methods fails with Java 8.\r\n+      </action>\r\n+      <action issue=\"BCEL-177\" type=\"fix\" dev=\"markt\">\r\n+        When reading the number of parameters in a MethodParameters\r\n+        structure only read a single byte as per the JVM specification.\r\n+      </action>\r\n+    </release>\r\n+  </body>\r\n+</document>\r",
                "deletions": 446
            },
            {
                "sha": "ddd7a9fe7a55a225e21fdeb547d024ad16e96e00",
                "filename": "src/main/java/org/apache/bcel/classfile/FieldOrMethod.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/d7292a3d9f2939f785ec74057d255e5df95846bf/src/main/java/org/apache/bcel/classfile/FieldOrMethod.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/d7292a3d9f2939f785ec74057d255e5df95846bf/src/main/java/org/apache/bcel/classfile/FieldOrMethod.java",
                "status": "modified",
                "changes": 588,
                "additions": 295,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/FieldOrMethod.java?ref=d7292a3d9f2939f785ec74057d255e5df95846bf",
                "patch": "@@ -1,293 +1,295 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *\n- */\n-package org.apache.bcel.classfile;\n-\n-import java.io.DataInput;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-\n-import org.apache.bcel.Const;\n-\n-/**\n- * Abstract super class for fields and methods.\n- *\n- * @version $Id$\n- */\n-public abstract class FieldOrMethod extends AccessFlags implements Cloneable, Node {\n-\n-    /**\n-     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\n-     */\n-    @java.lang.Deprecated\n-    protected int name_index; // Points to field name in constant pool\n-\n-    /**\n-     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\n-     */\n-    @java.lang.Deprecated\n-    protected int signature_index; // Points to encoded signature\n-\n-    /**\n-     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\n-     */\n-    @java.lang.Deprecated\n-    protected Attribute[] attributes; // Collection of attributes\n-\n-    /**\n-     * @deprecated (since 6.0) will be removed (not needed)\n-     */\n-    @java.lang.Deprecated\n-    protected int attributes_count; // No. of attributes\n-\n-    // @since 6.0\n-    private AnnotationEntry[] annotationEntries; // annotations defined on the field or method\n-\n-    /**\n-     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\n-     */\n-    @java.lang.Deprecated\n-    protected ConstantPool constant_pool;\n-\n-    private String signatureAttributeString = null;\n-    private boolean searchedForSignatureAttribute = false;\n-\n-    FieldOrMethod() {\n-    }\n-\n-\n-    /**\n-     * Initialize from another object. Note that both objects use the same\n-     * references (shallow copy). Use clone() for a physical copy.\n-     */\n-    protected FieldOrMethod(final FieldOrMethod c) {\n-        this(c.getAccessFlags(), c.getNameIndex(), c.getSignatureIndex(), c.getAttributes(), c\n-                .getConstantPool());\n-    }\n-\n-\n-    /**\n-     * Construct object from file stream.\n-     * @param file Input stream\n-     * @throws IOException\n-     * @throws ClassFormatException\n-     * @deprecated (6.0) Use {@link #FieldOrMethod(java.io.DataInput, ConstantPool)} instead.\n-     */\n-    @java.lang.Deprecated\n-    protected FieldOrMethod(final DataInputStream file, final ConstantPool constant_pool) throws IOException,\n-            ClassFormatException {\n-        this((DataInput) file, constant_pool);\n-    }\n-\n-    /**\n-     * Construct object from file stream.\n-     * @param file Input stream\n-     * @throws IOException\n-     * @throws ClassFormatException\n-     */\n-    protected FieldOrMethod(final DataInput file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), null,\n-                constant_pool);\n-        final int attributes_count = file.readUnsignedShort();\n-        attributes = new Attribute[attributes_count];\n-        for (int i = 0; i < attributes_count; i++) {\n-            attributes[i] = Attribute.readAttribute(file, constant_pool);\n-        }\n-        this.attributes_count = attributes_count; // init deprecated field\n-    }\n-\n-\n-    /**\n-     * @param access_flags Access rights of method\n-     * @param name_index Points to field name in constant pool\n-     * @param signature_index Points to encoded signature\n-     * @param attributes Collection of attributes\n-     * @param constant_pool Array of constants\n-     */\n-    protected FieldOrMethod(final int access_flags, final int name_index, final int signature_index,\n-            final Attribute[] attributes, final ConstantPool constant_pool) {\n-        super(access_flags);\n-        this.name_index = name_index;\n-        this.signature_index = signature_index;\n-        this.constant_pool = constant_pool;\n-        setAttributes(attributes);\n-    }\n-\n-\n-    /**\n-     * Dump object to file stream on binary format.\n-     *\n-     * @param file Output file stream\n-     * @throws IOException\n-     */\n-    public final void dump( final DataOutputStream file ) throws IOException {\n-        file.writeShort(super.getAccessFlags());\n-        file.writeShort(name_index);\n-        file.writeShort(signature_index);\n-        file.writeShort(attributes.length);\n-        for (final Attribute attribute : attributes) {\n-            attribute.dump(file);\n-        }\n-    }\n-\n-\n-    /**\n-     * @return Collection of object attributes.\n-     */\n-    public final Attribute[] getAttributes() {\n-        return attributes;\n-    }\n-\n-\n-    /**\n-     * @param attributes Collection of object attributes.\n-     */\n-    public final void setAttributes( final Attribute[] attributes ) {\n-        this.attributes = attributes;\n-        this.attributes_count = attributes != null ? attributes.length : 0; // init deprecated field\n-    }\n-\n-\n-    /**\n-     * @return Constant pool used by this object.\n-     */\n-    public final ConstantPool getConstantPool() {\n-        return constant_pool;\n-    }\n-\n-\n-    /**\n-     * @param constant_pool Constant pool to be used for this object.\n-     */\n-    public final void setConstantPool( final ConstantPool constant_pool ) {\n-        this.constant_pool = constant_pool;\n-    }\n-\n-\n-    /**\n-     * @return Index in constant pool of object's name.\n-     */\n-    public final int getNameIndex() {\n-        return name_index;\n-    }\n-\n-\n-    /**\n-     * @param name_index Index in constant pool of object's name.\n-     */\n-    public final void setNameIndex( final int name_index ) {\n-        this.name_index = name_index;\n-    }\n-\n-\n-    /**\n-     * @return Index in constant pool of field signature.\n-     */\n-    public final int getSignatureIndex() {\n-        return signature_index;\n-    }\n-\n-\n-    /**\n-     * @param signature_index Index in constant pool of field signature.\n-     */\n-    public final void setSignatureIndex( final int signature_index ) {\n-        this.signature_index = signature_index;\n-    }\n-\n-\n-    /**\n-     * @return Name of object, i.e., method name or field name\n-     */\n-    public final String getName() {\n-        ConstantUtf8 c;\n-        c = (ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8);\n-        return c.getBytes();\n-    }\n-\n-\n-    /**\n-     * @return String representation of object's type signature (java style)\n-     */\n-    public final String getSignature() {\n-        ConstantUtf8 c;\n-        c = (ConstantUtf8) constant_pool.getConstant(signature_index, Const.CONSTANT_Utf8);\n-        return c.getBytes();\n-    }\n-\n-\n-    /**\n-     * @return deep copy of this field\n-     */\n-    protected FieldOrMethod copy_( final ConstantPool _constant_pool ) {\n-        FieldOrMethod c = null;\n-\n-        try {\n-          c = (FieldOrMethod)clone();\n-        } catch(final CloneNotSupportedException e) {\n-            // ignored, but will cause NPE ...\n-        }\n-\n-        c.constant_pool    = constant_pool;\n-        c.attributes       = new Attribute[attributes.length];\n-        c.attributes_count = attributes_count; // init deprecated field\n-\n-        for (int i = 0; i < attributes.length; i++) {\n-            c.attributes[i] = attributes[i].copy(constant_pool);\n-        }\n-\n-        return c;\n-    }\n-\n-    /**\n-     * @return Annotations on the field or method\n-     * @since 6.0\n-     */\n-    public AnnotationEntry[] getAnnotationEntries() {\n-        if (annotationEntries == null) {\n-            annotationEntries = AnnotationEntry.createAnnotationEntries(getAttributes());\n-        }\n-\n-        return annotationEntries;\n-    }\n-\n-    /**\n-     * Hunts for a signature attribute on the member and returns its contents.  So where the 'regular' signature\n-     * may be (Ljava/util/Vector;)V the signature attribute may in fact say 'Ljava/lang/Vector&lt;Ljava/lang/String&gt;;'\n-     * Coded for performance - searches for the attribute only when requested - only searches for it once.\n-     * @since 6.0\n-     */\n-    public final String getGenericSignature()\n-    {\n-        if (!searchedForSignatureAttribute)\n-        {\n-            boolean found = false;\n-            for (int i = 0; !found && i < attributes.length; i++)\n-            {\n-                if (attributes[i] instanceof Signature)\n-                {\n-                    signatureAttributeString = ((Signature) attributes[i])\n-                            .getSignature();\n-                    found = true;\n-                }\n-            }\n-            searchedForSignatureAttribute = true;\n-        }\n-        return signatureAttributeString;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ *\r\n+ */\r\n+package org.apache.bcel.classfile;\r\n+\r\n+import java.io.DataInput;\r\n+import java.io.DataInputStream;\r\n+import java.io.DataOutputStream;\r\n+import java.io.IOException;\r\n+\r\n+import org.apache.bcel.Const;\r\n+\r\n+/**\r\n+ * Abstract super class for fields and methods.\r\n+ *\r\n+ * @version $Id$\r\n+ */\r\n+public abstract class FieldOrMethod extends AccessFlags implements Cloneable, Node {\r\n+\r\n+    /**\r\n+     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected int name_index; // Points to field name in constant pool\r\n+\r\n+    /**\r\n+     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected int signature_index; // Points to encoded signature\r\n+\r\n+    /**\r\n+     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected Attribute[] attributes; // Collection of attributes\r\n+\r\n+    /**\r\n+     * @deprecated (since 6.0) will be removed (not needed)\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected int attributes_count; // No. of attributes\r\n+\r\n+    // @since 6.0\r\n+    private AnnotationEntry[] annotationEntries; // annotations defined on the field or method\r\n+\r\n+    /**\r\n+     * @deprecated (since 6.0) will be made private; do not access directly, use getter/setter\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected ConstantPool constant_pool;\r\n+\r\n+    private String signatureAttributeString = null;\r\n+    private boolean searchedForSignatureAttribute = false;\r\n+\r\n+    FieldOrMethod() {\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Initialize from another object. Note that both objects use the same\r\n+     * references (shallow copy). Use clone() for a physical copy.\r\n+     */\r\n+    protected FieldOrMethod(final FieldOrMethod c) {\r\n+        this(c.getAccessFlags(), c.getNameIndex(), c.getSignatureIndex(), c.getAttributes(), c\r\n+                .getConstantPool());\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Construct object from file stream.\r\n+     * @param file Input stream\r\n+     * @throws IOException\r\n+     * @throws ClassFormatException\r\n+     * @deprecated (6.0) Use {@link #FieldOrMethod(java.io.DataInput, ConstantPool)} instead.\r\n+     */\r\n+    @java.lang.Deprecated\r\n+    protected FieldOrMethod(final DataInputStream file, final ConstantPool constant_pool) throws IOException,\r\n+            ClassFormatException {\r\n+        this((DataInput) file, constant_pool);\r\n+    }\r\n+\r\n+    /**\r\n+     * Construct object from file stream.\r\n+     * @param file Input stream\r\n+     * @throws IOException\r\n+     * @throws ClassFormatException\r\n+     */\r\n+    protected FieldOrMethod(final DataInput file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\r\n+        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), null,\r\n+                constant_pool);\r\n+        final int attributes_count = file.readUnsignedShort();\r\n+        attributes = new Attribute[attributes_count];\r\n+        for (int i = 0; i < attributes_count; i++) {\r\n+            attributes[i] = Attribute.readAttribute(file, constant_pool);\r\n+        }\r\n+        this.attributes_count = attributes_count; // init deprecated field\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @param access_flags Access rights of method\r\n+     * @param name_index Points to field name in constant pool\r\n+     * @param signature_index Points to encoded signature\r\n+     * @param attributes Collection of attributes\r\n+     * @param constant_pool Array of constants\r\n+     */\r\n+    protected FieldOrMethod(final int access_flags, final int name_index, final int signature_index,\r\n+            final Attribute[] attributes, final ConstantPool constant_pool) {\r\n+        super(access_flags);\r\n+        this.name_index = name_index;\r\n+        this.signature_index = signature_index;\r\n+        this.constant_pool = constant_pool;\r\n+        setAttributes(attributes);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Dump object to file stream on binary format.\r\n+     *\r\n+     * @param file Output file stream\r\n+     * @throws IOException\r\n+     */\r\n+    public final void dump(final DataOutputStream file) throws IOException {\r\n+        file.writeShort(super.getAccessFlags());\r\n+        file.writeShort(name_index);\r\n+        file.writeShort(signature_index);\r\n+        file.writeShort(attributes_count);\r\n+        if (attributes != null) {\r\n+            for (final Attribute attribute : attributes) {\r\n+                attribute.dump(file);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return Collection of object attributes.\r\n+     */\r\n+    public final Attribute[] getAttributes() {\r\n+        return attributes;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @param attributes Collection of object attributes.\r\n+     */\r\n+    public final void setAttributes( final Attribute[] attributes ) {\r\n+        this.attributes = attributes;\r\n+        this.attributes_count = attributes != null ? attributes.length : 0; // init deprecated field\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return Constant pool used by this object.\r\n+     */\r\n+    public final ConstantPool getConstantPool() {\r\n+        return constant_pool;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @param constant_pool Constant pool to be used for this object.\r\n+     */\r\n+    public final void setConstantPool( final ConstantPool constant_pool ) {\r\n+        this.constant_pool = constant_pool;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return Index in constant pool of object's name.\r\n+     */\r\n+    public final int getNameIndex() {\r\n+        return name_index;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @param name_index Index in constant pool of object's name.\r\n+     */\r\n+    public final void setNameIndex( final int name_index ) {\r\n+        this.name_index = name_index;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return Index in constant pool of field signature.\r\n+     */\r\n+    public final int getSignatureIndex() {\r\n+        return signature_index;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @param signature_index Index in constant pool of field signature.\r\n+     */\r\n+    public final void setSignatureIndex( final int signature_index ) {\r\n+        this.signature_index = signature_index;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return Name of object, i.e., method name or field name\r\n+     */\r\n+    public final String getName() {\r\n+        ConstantUtf8 c;\r\n+        c = (ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8);\r\n+        return c.getBytes();\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return String representation of object's type signature (java style)\r\n+     */\r\n+    public final String getSignature() {\r\n+        ConstantUtf8 c;\r\n+        c = (ConstantUtf8) constant_pool.getConstant(signature_index, Const.CONSTANT_Utf8);\r\n+        return c.getBytes();\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * @return deep copy of this field\r\n+     */\r\n+    protected FieldOrMethod copy_( final ConstantPool _constant_pool ) {\r\n+        FieldOrMethod c = null;\r\n+\r\n+        try {\r\n+          c = (FieldOrMethod)clone();\r\n+        } catch(final CloneNotSupportedException e) {\r\n+            // ignored, but will cause NPE ...\r\n+        }\r\n+\r\n+        c.constant_pool    = constant_pool;\r\n+        c.attributes       = new Attribute[attributes.length];\r\n+        c.attributes_count = attributes_count; // init deprecated field\r\n+\r\n+        for (int i = 0; i < attributes.length; i++) {\r\n+            c.attributes[i] = attributes[i].copy(constant_pool);\r\n+        }\r\n+\r\n+        return c;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return Annotations on the field or method\r\n+     * @since 6.0\r\n+     */\r\n+    public AnnotationEntry[] getAnnotationEntries() {\r\n+        if (annotationEntries == null) {\r\n+            annotationEntries = AnnotationEntry.createAnnotationEntries(getAttributes());\r\n+        }\r\n+\r\n+        return annotationEntries;\r\n+    }\r\n+\r\n+    /**\r\n+     * Hunts for a signature attribute on the member and returns its contents.  So where the 'regular' signature\r\n+     * may be (Ljava/util/Vector;)V the signature attribute may in fact say 'Ljava/lang/Vector&lt;Ljava/lang/String&gt;;'\r\n+     * Coded for performance - searches for the attribute only when requested - only searches for it once.\r\n+     * @since 6.0\r\n+     */\r\n+    public final String getGenericSignature()\r\n+    {\r\n+        if (!searchedForSignatureAttribute)\r\n+        {\r\n+            boolean found = false;\r\n+            for (int i = 0; !found && i < attributes.length; i++)\r\n+            {\r\n+                if (attributes[i] instanceof Signature)\r\n+                {\r\n+                    signatureAttributeString = ((Signature) attributes[i])\r\n+                            .getSignature();\r\n+                    found = true;\r\n+                }\r\n+            }\r\n+            searchedForSignatureAttribute = true;\r\n+        }\r\n+        return signatureAttributeString;\r\n+    }\r\n+}\r",
                "deletions": 293
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "[BCEL-297] Possible NPE in override implementation of Object.equals.",
        "commit": "https://github.com/apache/commons-bcel/commit/78f672a2c6bd6e21a731e982f8e495563280d7d9",
        "parent": "https://github.com/apache/commons-bcel/commit/45da20f49abafa125ff4f616e8312b89fbd1f139",
        "bug_id": "commons-bcel_3",
        "file": [
            {
                "sha": "b7bd9a1001a70bc5e2cd2f05ce6ac9c69a99c470",
                "filename": "src/changes/changes.xml",
                "blob_url": "https://github.com/apache/commons-bcel/blob/78f672a2c6bd6e21a731e982f8e495563280d7d9/src/changes/changes.xml",
                "raw_url": "https://github.com/apache/commons-bcel/raw/78f672a2c6bd6e21a731e982f8e495563280d7d9/src/changes/changes.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/changes/changes.xml?ref=78f672a2c6bd6e21a731e982f8e495563280d7d9",
                "patch": "@@ -64,6 +64,7 @@ The <action> type attribute can be add,update,fix,remove.\n   <body>\n     <release version=\"6.4\" date=\"2019-MM-DD\" description=\"TO DO\">\n       <action issue=\"BCEL-267\" type=\"fix\" dev=\"ggregory\" due-to=\"Stephan Herrmann, Sebb, Gary Gregory, Torsten Curdt\">Race conditions on static fields in BranchHandle and InstructionHandle.</action>\n+      <action issue=\"BCEL-297\" type=\"fix\" dev=\"ggregory\" due-to=\"Mark Roberts, mingleizhang\">Possible NPE in override implementation of Object.equals.</action>\n     </release>\n \n     <release version=\"6.3\" date=\"2019-01-23\" description=\"Experimental Java 9, 10, 11, 12-EA, and 13-EA Support\">",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "[BCEL-297] Fix NPE in BCELComparator concrete implementations. (#20)",
        "commit": "https://github.com/apache/commons-bcel/commit/45da20f49abafa125ff4f616e8312b89fbd1f139",
        "parent": "https://github.com/apache/commons-bcel/commit/ed403b6580ed403a814e1c821200f302ffa5805d",
        "bug_id": "commons-bcel_4",
        "file": [
            {
                "sha": "a352fe06f8f7d68e194cf78e16671063d32c4782",
                "filename": "src/main/java/org/apache/bcel/classfile/Constant.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Constant.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Constant.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/Constant.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -20,6 +20,7 @@\n import java.io.DataInput;\n import java.io.DataOutputStream;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.util.BCELComparator;\n@@ -39,7 +40,7 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final Constant THIS = (Constant) o1;\n             final Constant THAT = (Constant) o2;\n-            return THIS.toString().equals(THAT.toString());\n+            return Objects.equals(THIS.toString(), THAT.toString());\n         }\n \n ",
                "deletions": 1
            },
            {
                "sha": "ebdea958fcdd58dd1243191b6506be56092ba0c3",
                "filename": "src/main/java/org/apache/bcel/classfile/Field.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Field.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Field.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/Field.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.DataInput;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.generic.Type;\n@@ -38,8 +39,8 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final Field THIS = (Field) o1;\n             final Field THAT = (Field) o2;\n-            return THIS.getName().equals(THAT.getName())\n-                    && THIS.getSignature().equals(THAT.getSignature());\n+            return Objects.equals(THIS.getName(), THAT.getName())\n+                    && Objects.equals(THIS.getSignature(), THAT.getSignature());\n         }\n \n ",
                "deletions": 2
            },
            {
                "sha": "be18dbe7ab4ea0e079be4aaf12b17668aeb515e6",
                "filename": "src/main/java/org/apache/bcel/classfile/JavaClass.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/JavaClass.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/JavaClass.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/JavaClass.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -24,9 +24,10 @@\n import java.io.IOException;\n import java.io.OutputStream;\n import java.util.ArrayList;\n+import java.util.Objects;\n+import java.util.StringTokenizer;\n import java.util.List;\n import java.util.Set;\n-import java.util.StringTokenizer;\n import java.util.TreeSet;\n \n import org.apache.bcel.Const;\n@@ -79,7 +80,7 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final JavaClass THIS = (JavaClass) o1;\n             final JavaClass THAT = (JavaClass) o2;\n-            return THIS.getClassName().equals(THAT.getClassName());\n+            return Objects.equals(THIS.getClassName(), THAT.getClassName());\n         }\n \n ",
                "deletions": 2
            },
            {
                "sha": "e19522c0a3863b0155ed258799551b9d32c62407",
                "filename": "src/main/java/org/apache/bcel/classfile/Method.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Method.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/classfile/Method.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/Method.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.io.DataInput;\n import java.io.IOException;\n+import java.util.Objects;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.generic.Type;\n@@ -39,8 +40,8 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final Method THIS = (Method) o1;\n             final Method THAT = (Method) o2;\n-            return THIS.getName().equals(THAT.getName())\n-                    && THIS.getSignature().equals(THAT.getSignature());\n+            return Objects.equals(THIS.getName(), THAT.getName())\n+                    && Objects.equals(THIS.getSignature(), THAT.getSignature());\n         }\n \n ",
                "deletions": 2
            },
            {
                "sha": "5fad2d3d8f9f1a7a92f7973ff9536160b7524036",
                "filename": "src/main/java/org/apache/bcel/generic/ClassGen.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/ClassGen.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/ClassGen.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/generic/ClassGen.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.classfile.AccessFlags;\n@@ -66,7 +67,7 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final ClassGen THIS = (ClassGen) o1;\n             final ClassGen THAT = (ClassGen) o2;\n-            return THIS.getClassName().equals(THAT.getClassName());\n+            return Objects.equals(THIS.getClassName(), THAT.getClassName());\n         }\n \n ",
                "deletions": 1
            },
            {
                "sha": "4ddf44a47138f68562cb7051d66d246da5ac4740",
                "filename": "src/main/java/org/apache/bcel/generic/FieldGen.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/FieldGen.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/FieldGen.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/generic/FieldGen.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -19,6 +19,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.classfile.AnnotationEntry;\n@@ -49,8 +50,8 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final FieldGen THIS = (FieldGen) o1;\n             final FieldGen THAT = (FieldGen) o2;\n-            return THIS.getName().equals(THAT.getName())\n-                    && THIS.getSignature().equals(THAT.getSignature());\n+            return Objects.equals(THIS.getName(), THAT.getName())\n+                    && Objects.equals(THIS.getSignature(), THAT.getSignature());\n         }\n \n ",
                "deletions": 2
            },
            {
                "sha": "e497d347dfba59a29c0639718ca928085cc9e425",
                "filename": "src/main/java/org/apache/bcel/generic/MethodGen.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/MethodGen.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/45da20f49abafa125ff4f616e8312b89fbd1f139/src/main/java/org/apache/bcel/generic/MethodGen.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/generic/MethodGen.java?ref=45da20f49abafa125ff4f616e8312b89fbd1f139",
                "patch": "@@ -18,11 +18,12 @@\n package org.apache.bcel.generic;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import java.util.Hashtable;\n+import java.util.Objects;\n import java.util.List;\n import java.util.Stack;\n+import java.util.Hashtable;\n+import java.util.Arrays;\n+import java.util.Comparator;\n \n import org.apache.bcel.Const;\n import org.apache.bcel.classfile.AnnotationEntry;\n@@ -83,8 +84,8 @@\n         public boolean equals( final Object o1, final Object o2 ) {\n             final MethodGen THIS = (MethodGen) o1;\n             final MethodGen THAT = (MethodGen) o2;\n-            return THIS.getName().equals(THAT.getName())\n-                    && THIS.getSignature().equals(THAT.getSignature());\n+            return Objects.equals(THIS.getName(), THAT.getName())\n+                    && Objects.equals(THIS.getSignature(), THAT.getSignature());\n         }\n \n ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "Clirr Plugin 2.7 fails with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1746731 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/f8e618138c6ba4af63638df26b6308004076af82",
        "parent": "https://github.com/apache/commons-bcel/commit/28f4f17258aeaf9426cd1230b16c6445eae588ab",
        "bug_id": "commons-bcel_5",
        "file": [
            {
                "sha": "73ad79b9d8e02d8ca054c1fe09dfcf73b7b990e0",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/commons-bcel/blob/f8e618138c6ba4af63638df26b6308004076af82/pom.xml",
                "raw_url": "https://github.com/apache/commons-bcel/raw/f8e618138c6ba4af63638df26b6308004076af82/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/pom.xml?ref=f8e618138c6ba4af63638df26b6308004076af82",
                "patch": "@@ -57,6 +57,8 @@\n     <commons.jira.pid>12314220</commons.jira.pid>\n     <commons.findbugs.version>3.0.3</commons.findbugs.version>\n     <checkstyle.plugin.version>2.17</checkstyle.plugin.version>\n+    <!-- Latest Clirr Plugin version (2.7) causes NPE -->\n+    <commons.clirr.version>2.6.1</commons.clirr.version>\n   </properties>\n \n   <!-- Cannot be added to Commons Parent, see https://issues.apache.org/jira/browse/COMMONSSITE-26 -->",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1702427 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/f53ac2222d10c1f749a616919f6bcc383f599cec",
        "parent": "https://github.com/apache/commons-bcel/commit/6e08c112527e45080ff99c6bb1ae4bd2165d292a",
        "bug_id": "commons-bcel_6",
        "file": [
            {
                "sha": "6b84a3638b1dc701a3bb33597df905f2cf0bc23e",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/FieldOrMethod.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/f53ac2222d10c1f749a616919f6bcc383f599cec/src/main/java/org/apache/commons/bcel6/classfile/FieldOrMethod.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/f53ac2222d10c1f749a616919f6bcc383f599cec/src/main/java/org/apache/commons/bcel6/classfile/FieldOrMethod.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/FieldOrMethod.java?ref=f53ac2222d10c1f749a616919f6bcc383f599cec",
                "patch": "@@ -158,7 +158,7 @@ public final void dump( DataOutputStream file ) throws IOException {\n      */\n     public final void setAttributes( Attribute[] attributes ) {\n         this.attributes = attributes;\n-        this.attributes_count = attributes.length; // init deprecated field\n+        this.attributes_count = attributes != null ? attributes.length : 0; // init deprecated field\n     }\n \n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "avoid possible NPEs in toStrings, and simplify\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1697270 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
        "parent": "https://github.com/apache/commons-bcel/commit/4ad705443258be2483cde74ca49033a9a2b93924",
        "bug_id": "commons-bcel_7",
        "file": [
            {
                "sha": "1f45d664fab2c945ad1960f14f2dd01e02080fb0",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/ArrayElementValue.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/ArrayElementValue.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/ArrayElementValue.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/ArrayElementValue.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -35,7 +35,7 @@ public String toString()\n         sb.append(\"{\");\n         for (int i = 0; i < evalues.length; i++)\n         {\n-            sb.append(evalues[i].toString());\n+            sb.append(evalues[i]);\n             if ((i + 1) < evalues.length) {\n                 sb.append(\",\");\n             }",
                "deletions": 1
            },
            {
                "sha": "cfaca56e4c1ccba3c4ad9016b2b2772d2009bbd1",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/Code.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Code.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Code.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/Code.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -313,7 +313,7 @@ public final String toString( boolean verbose ) {\n         if (attributes.length > 0) {\n             buf.append(\"\\nAttribute(s) = \");\n             for (Attribute attribute : attributes) {\n-                buf.append(\"\\n\").append(attribute.toString());\n+                buf.append(\"\\n\").append(attribute);\n             }\n         }\n         return buf.toString();",
                "deletions": 1
            },
            {
                "sha": "668301d8058b7eb50151b18708d92d06478f1cf6",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/Field.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Field.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Field.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/Field.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -134,7 +134,7 @@ public final String toString() {\n         }\n         for (Attribute attribute : super.getAttributes()) {\n             if (!(attribute instanceof ConstantValue)) {\n-                buf.append(\" [\").append(attribute.toString()).append(\"]\");\n+                buf.append(\" [\").append(attribute).append(\"]\");\n             }\n         }\n         return buf.toString();",
                "deletions": 1
            },
            {
                "sha": "bb475e12365f21f1946206dab66c1fd63038aa0d",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/LineNumberTable.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/LineNumberTable.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/LineNumberTable.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/LineNumberTable.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -139,7 +139,7 @@ public final String toString() {\n             }\n             if ((line.length() > MAX_LINE_LENGTH) && (i < line_number_table.length - 1)) {\n                 line.append(newLine);\n-                buf.append(line.toString());\n+                buf.append(line);\n                 line.setLength(0);\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "35fd3e0895c63341a83c1eb61819a21e33b39e83",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/LocalVariableTable.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/LocalVariableTable.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/LocalVariableTable.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/LocalVariableTable.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -147,7 +147,7 @@ public final void setLocalVariableTable( LocalVariable[] local_variable_table )\n     public final String toString() {\n         StringBuilder buf = new StringBuilder();\n         for (int i = 0; i < local_variable_table.length; i++) {\n-            buf.append(local_variable_table[i].toString());\n+            buf.append(local_variable_table[i]);\n             if (i < local_variable_table.length - 1) {\n                 buf.append('\\n');\n             }",
                "deletions": 1
            },
            {
                "sha": "f3f214bad27c45873871840f31cf59f073179c1f",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/Method.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Method.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Method.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/Method.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -179,7 +179,7 @@ public final String toString() {\n         StringBuilder buf = new StringBuilder(signature);\n         for (Attribute attribute : super.getAttributes()) {\n             if (!((attribute instanceof Code) || (attribute instanceof ExceptionTable))) {\n-                buf.append(\" [\").append(attribute.toString()).append(\"]\");\n+                buf.append(\" [\").append(attribute).append(\"]\");\n             }\n         }\n         ExceptionTable e = getExceptionTable();",
                "deletions": 1
            },
            {
                "sha": "8164fb9f713e21ca20cbbd039eb3b896783addf8",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/StackMap.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/StackMap.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/StackMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/StackMap.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -117,7 +117,7 @@ public final void setStackMap( StackMapEntry[] map ) {\n     public final String toString() {\n         StringBuilder buf = new StringBuilder(\"StackMap(\");\n         for (int i = 0; i < map.length; i++) {\n-            buf.append(map[i].toString());\n+            buf.append(map[i]);\n             if (i < map.length - 1) {\n                 buf.append(\", \");\n             }",
                "deletions": 1
            },
            {
                "sha": "3792ddffc94d44e91a10ca3074c96b073f8fe6d9",
                "filename": "src/main/java/org/apache/commons/bcel6/classfile/Utility.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Utility.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/classfile/Utility.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/classfile/Utility.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -1223,7 +1223,7 @@ public static String printArray( Object[] obj, boolean braces, boolean quote ) {\n         }\n         for (int i = 0; i < obj.length; i++) {\n             if (obj[i] != null) {\n-                buf.append(quote ? \"\\\"\" : \"\").append(obj[i].toString()).append(quote ? \"\\\"\" : \"\");\n+                buf.append(quote ? \"\\\"\" : \"\").append(obj[i]).append(quote ? \"\\\"\" : \"\");\n             } else {\n                 buf.append(\"null\");\n             }",
                "deletions": 1
            },
            {
                "sha": "5f2a135a098a9f84acaa182e08d8a1ff690c17dd",
                "filename": "src/main/java/org/apache/commons/bcel6/generic/MethodGen.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/generic/MethodGen.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/generic/MethodGen.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/generic/MethodGen.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -1038,7 +1038,7 @@ public final String toString() {\n         for (int i = 0; i < getAttributes().length; i++) {\n             Attribute a = getAttributes()[i];\n             if (!((a instanceof Code) || (a instanceof ExceptionTable))) {\n-                buf.append(\" [\").append(a.toString()).append(\"]\");\n+                buf.append(\" [\").append(a).append(\"]\");\n             }\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "9317b77a23b8f77f1cdea50b53771f2d1f8ac789",
                "filename": "src/main/java/org/apache/commons/bcel6/generic/PUSH.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/generic/PUSH.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/generic/PUSH.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/generic/PUSH.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -187,6 +187,6 @@ public final Instruction getInstruction() {\n      */\n     @Override\n     public String toString() {\n-        return instruction.toString() + \" (PUSH)\";\n+        return instruction + \" (PUSH)\";\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "cbfc25cee46bee0fc405c6a4c526f8eeeec97924",
                "filename": "src/main/java/org/apache/commons/bcel6/util/ClassPath.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/util/ClassPath.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/2dfed781d14c801f9856fd5ad570d3d53ad3dfcb/src/main/java/org/apache/commons/bcel6/util/ClassPath.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/commons/bcel6/util/ClassPath.java?ref=2dfed781d14c801f9856fd5ad570d3d53ad3dfcb",
                "patch": "@@ -98,7 +98,7 @@ public ClassPath(String class_path) {\n     @Override\n     public String toString() {\n         if (parent != null) {\n-            return parent.toString() + File.pathSeparator + class_path;\n+            return parent + File.pathSeparator + class_path;\n         }\n         return class_path;\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "Fixed the NPE induced by r1663628\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1663742 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/670048bfa4d805a681f49a7f9b8c32b46ef8d031",
        "parent": "https://github.com/apache/commons-bcel/commit/2b145ec96042357afb3be123a4880680e7f816cf",
        "bug_id": "commons-bcel_8",
        "file": [
            {
                "sha": "d257acb5056ac16a37be95f838f197cba153d430",
                "filename": "src/main/java/org/apache/bcel/classfile/Code.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/670048bfa4d805a681f49a7f9b8c32b46ef8d031/src/main/java/org/apache/bcel/classfile/Code.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/670048bfa4d805a681f49a7f9b8c32b46ef8d031/src/main/java/org/apache/bcel/classfile/Code.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/Code.java?ref=670048bfa4d805a681f49a7f9b8c32b46ef8d031",
                "patch": "@@ -233,7 +233,7 @@ private int getInternalLength() {\n         return 2 /*max_stack*/+ 2 /*max_locals*/+ 4 /*code length*/\n                 + code.length /*byte-code*/\n                 + 2 /*exception-table length*/\n-                + 8 * exception_table.length /* exception table */\n+                + 8 * (exception_table == null ? 0 : exception_table.length) /* exception table */\n                 + 2 /* attributes count */;\n     }\n \n@@ -244,8 +244,10 @@ private int getInternalLength() {\n      */\n     private int calculateLength() {\n         int len = 0;\n-        for (Attribute attribute : attributes) {\n-            len += attribute.length + 6 /*attribute header size*/;\n+        if (attributes != null) {\n+            for (Attribute attribute : attributes) {\n+                len += attribute.length + 6 /*attribute header size*/;\n+            }\n         }\n         return len + getInternalLength();\n     }\n@@ -255,7 +257,7 @@ private int calculateLength() {\n      * @param attributes the attributes to set for this Code\n      */\n     public final void setAttributes( Attribute[] attributes ) {\n-        this.attributes = attributes;\n+        this.attributes = attributes != null ? attributes : new Attribute[0];\n         length = calculateLength(); // Adjust length\n     }\n \n@@ -264,7 +266,7 @@ public final void setAttributes( Attribute[] attributes ) {\n      * @param code byte code\n      */\n     public final void setCode( byte[] code ) {\n-        this.code = code;\n+        this.code = code != null ? code : new byte[0];\n         length = calculateLength(); // Adjust length\n     }\n \n@@ -273,7 +275,7 @@ public final void setCode( byte[] code ) {\n      * @param exception_table exception table\n      */\n     public final void setExceptionTable( CodeException[] exception_table ) {\n-        this.exception_table = exception_table;\n+        this.exception_table = exception_table != null ? exception_table : new CodeException[0];\n         length = calculateLength(); // Adjust length\n     }\n ",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "simplify and avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/bcel/trunk@1532202 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/dd045109ff40c502a157c03dbc6acef3b5400de2",
        "parent": "https://github.com/apache/commons-bcel/commit/c343ccf297a93d47fc936a639de4e0e56e47fcf4",
        "bug_id": "commons-bcel_9",
        "file": [
            {
                "sha": "06781601279e2a6bbd64c0641145f7175e2d567e",
                "filename": "src/main/java/org/apache/bcel/util/AttributeHTML.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/AttributeHTML.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/AttributeHTML.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/util/AttributeHTML.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -203,7 +203,7 @@ final void writeAttribute( Attribute attribute, String anchor, int method_number\n                 file.print(\"</UL>\\n\");\n                 break;\n             default: // Such as Unknown attribute or Deprecated\n-                file.print(\"<P>\" + attribute.toString());\n+                file.print(\"<P>\" + attribute);\n         }\n         file.println(\"</TD></TR>\");\n         file.flush();",
                "deletions": 1
            },
            {
                "sha": "ecc98b151387aac46d8a6dfe7c97a71ca4805767",
                "filename": "src/main/java/org/apache/bcel/util/ClassLoaderRepository.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/ClassLoaderRepository.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/ClassLoaderRepository.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/util/ClassLoaderRepository.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -97,7 +97,7 @@ public JavaClass loadClass( String className ) throws ClassNotFoundException {\n             storeClass(RC);\n             return RC;\n         } catch (IOException e) {\n-            throw new ClassNotFoundException(className + \" not found: \" + e.toString(), e);\n+            throw new ClassNotFoundException(className + \" not found: \" + e, e);\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "a59b6bce2f966dd8c97e6c65fb2e4efb55996448",
                "filename": "src/main/java/org/apache/bcel/util/SyntheticRepository.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/SyntheticRepository.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/util/SyntheticRepository.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/util/SyntheticRepository.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -123,7 +123,7 @@ public JavaClass loadClass( String className ) throws ClassNotFoundException {\n             return loadClass(_path.getInputStream(className), className);\n         } catch (IOException e) {\n             throw new ClassNotFoundException(\"Exception while looking for class \" + className\n-                    + \": \" + e.toString(), e);\n+                    + \": \" + e, e);\n         }\n     }\n \n@@ -178,7 +178,7 @@ private JavaClass loadClass( InputStream is, String className ) throws ClassNotF\n             }\n         } catch (IOException e) {\n             throw new ClassNotFoundException(\"Exception while looking for class \" + className\n-                    + \": \" + e.toString(), e);\n+                    + \": \" + e, e);\n         } finally {\n             if (is != null){\n                 try {",
                "deletions": 2
            },
            {
                "sha": "ec6e5a3138b885880d84f861522f5c5d8d1fab6d",
                "filename": "src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/statics/Pass2Verifier.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -172,7 +172,7 @@ public VerificationResult do_verify(){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -224,7 +224,7 @@ private void every_class_has_an_accessible_superclass(){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -279,7 +279,7 @@ private void final_methods_are_not_overridden(){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \n \t}\n@@ -296,11 +296,11 @@ private void constant_pool_entries_satisfy_static_constraints(){\n \t\t// we only have to verify if the indices of the constants point\n \t\t// to constants of the appropriate type and such.\n \t\tJavaClass jc = Repository.lookupClass(myOwner.getClassName());\n-\t\tnew CPESSC_Visitor(jc); // constructor implicitely traverses jc\n+\t\tnew CPESSC_Visitor(jc); // constructor implicitly traverses jc\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -1043,7 +1043,7 @@ public void visitCode(Code obj){//vmspec2 4.7.3\n \n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \n \t\t}// visitCode(Code) END\n@@ -1102,7 +1102,7 @@ public void visitExceptionTable(ExceptionTable obj){//vmspec2 4.7.4\n \n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \t\t// SYNTHETIC: see above\n@@ -1200,7 +1200,7 @@ private void field_and_method_refs_are_valid(){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: this might not be the best way to handle missing classes.\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n ",
                "deletions": 8
            },
            {
                "sha": "c7d780037533c425e215580b4b5807e11a59c0f1",
                "filename": "src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -212,7 +212,7 @@ public VerificationResult do_verify(){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -417,7 +417,7 @@ private void pass3StaticInstructionOperandsChecks(){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \t\n@@ -458,7 +458,7 @@ private int max_locals(){\n \t\t\treturn Repository.lookupClass(myOwner.getClassName()).getMethods()[method_no].getCode().getMaxLocals();\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \n@@ -611,7 +611,7 @@ public void visitFieldInstruction(FieldInstruction o){\n \t\t\t}\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\t\n \n@@ -1026,7 +1026,7 @@ public void visitPUTSTATIC(PUTSTATIC o){\n \t\t\t}\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \n@@ -1053,7 +1053,7 @@ public void visitGETSTATIC(GETSTATIC o){\n \t\t\t}\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \n@@ -1095,7 +1095,7 @@ public void visitINVOKEINTERFACE(INVOKEINTERFACE o){\n \t\t\t}\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \n@@ -1160,7 +1160,7 @@ public void visitINVOKESPECIAL(INVOKESPECIAL o){\n \t\t\t\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t\t\n \t\t}\n@@ -1193,7 +1193,7 @@ public void visitINVOKESTATIC(INVOKESTATIC o){\n \t\t\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n \n@@ -1227,7 +1227,7 @@ public void visitINVOKEVIRTUAL(INVOKEVIRTUAL o){\n \t\t\t\t\t\n \t\t    } catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t    }\n \t\t}\n ",
                "deletions": 10
            },
            {
                "sha": "cba0f9edaaf3809e390e8abe968260b62ac5f687",
                "filename": "src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -485,7 +485,7 @@ public void visitAASTORE(AASTORE o){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -584,7 +584,7 @@ public void visitATHROW(ATHROW o){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -1305,7 +1305,7 @@ public void visitGETFIELD(GETFIELD o){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -1933,7 +1933,7 @@ public void visitINVOKESPECIAL(INVOKESPECIAL o){\n \t\t\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -1985,7 +1985,7 @@ public void visitINVOKESTATIC(INVOKESTATIC o){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -2063,7 +2063,7 @@ public void visitINVOKEVIRTUAL(INVOKEVIRTUAL o){\n \t\t}\t\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -2715,7 +2715,7 @@ public void visitPUTFIELD(PUTFIELD o){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n \n@@ -2780,7 +2780,7 @@ public void visitPUTSTATIC(PUTSTATIC o){\n \n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n ",
                "deletions": 8
            },
            {
                "sha": "f6674576e33dddd1ab137651810aa367392efaba",
                "filename": "src/main/java/org/apache/bcel/verifier/structurals/LocalVariables.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/LocalVariables.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/LocalVariables.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/structurals/LocalVariables.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -181,7 +181,7 @@ private void merge(LocalVariables lv, int i){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n ",
                "deletions": 1
            },
            {
                "sha": "58a23ce8e0d6f759fbc976d45aea3cb58886c2c9",
                "filename": "src/main/java/org/apache/bcel/verifier/structurals/OperandStack.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/OperandStack.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/OperandStack.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/structurals/OperandStack.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -249,7 +249,7 @@ public void merge(OperandStack s){\n \t\t}\n \t    } catch (ClassNotFoundException e) {\n \t\t// FIXME: maybe not the best way to handle this\n-\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t    }\n \t}\n ",
                "deletions": 1
            },
            {
                "sha": "1d9e2c7d33fc3185d0861cd79bc883a9dd756ac3",
                "filename": "src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -328,7 +328,7 @@ public VerificationResult do_verify(){\n \t\t\tjc = Repository.lookupClass(myOwner.getClassName());\n \t\t} catch (ClassNotFoundException e) {\n \t\t\t// FIXME: maybe not the best way to handle this\n-\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e.toString(), e);\n+\t\t\tthrow new AssertionViolatedException(\"Missing class: \" + e, e);\n \t\t}\n \n \t\tConstantPoolGen constantPoolGen = new ConstantPoolGen(jc.getConstantPool());",
                "deletions": 1
            },
            {
                "sha": "40938003ef06f17e137790d1431f542518fb85da",
                "filename": "src/main/java/org/apache/bcel/verifier/structurals/Subroutines.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/Subroutines.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/dd045109ff40c502a157c03dbc6acef3b5400de2/src/main/java/org/apache/bcel/verifier/structurals/Subroutines.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/verifier/structurals/Subroutines.java?ref=dd045109ff40c502a157c03dbc6acef3b5400de2",
                "patch": "@@ -115,7 +115,7 @@ public boolean contains(InstructionHandle inst){\n \t\t */\n \t\t@Override\n         public String toString(){\n-\t\t\tString ret = \"Subroutine: Local variable is '\"+localVariable+\"', JSRs are '\"+theJSRs+\"', RET is '\"+theRET+\"', Instructions: '\"+instructions.toString()+\"'.\";\n+\t\t\tString ret = \"Subroutine: Local variable is '\"+localVariable+\"', JSRs are '\"+theJSRs+\"', RET is '\"+theRET+\"', Instructions: '\"+instructions+\"'.\";\n \t\t\t\n \t\t\tret += \" Accessed local variable slots: '\";\n \t\t\tint[] alv = getAccessedLocalsIndices();\n@@ -640,6 +640,6 @@ public Subroutine getTopLevel(){\n \t */\n \t@Override\n     public String toString(){\n-\t\treturn \"---\\n\"+subroutines.toString()+\"\\n---\\n\";\n+\t\treturn \"---\\n\"+subroutines+\"\\n---\\n\";\n \t}\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "guard against npe's\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@312569 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/b82c04ff6726b70b4f0dd0e89d66bdd62d00185f",
        "parent": "https://github.com/apache/commons-bcel/commit/13229681dee6c95eeb8dd35a4840e3d2cb1b1470",
        "bug_id": "commons-bcel_10",
        "file": [
            {
                "sha": "71d848fc3432afcf9e37556969c8508239f91e33",
                "filename": "src/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/b82c04ff6726b70b4f0dd0e89d66bdd62d00185f/src/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/b82c04ff6726b70b4f0dd0e89d66bdd62d00185f/src/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java?ref=b82c04ff6726b70b4f0dd0e89d66bdd62d00185f",
                "patch": "@@ -1146,9 +1146,7 @@ public void visitINVOKESTATIC(INVOKESTATIC o){\n \t\t\t}\n \t\t\tif (m == null){\n \t\t\t\tconstraintViolated(o, \"Referenced method '\"+o.getMethodName(cpg)+\"' with expected signature '\"+o.getSignature(cpg) +\"' not found in class '\"+jc.getClassName()+\"'. The native verifier possibly allows the method to be declared in some superclass or implemented interface, which the Java Virtual Machine Specification, Second Edition does not.\");\n-\t\t\t}\n-\t\t\t\n-\t\t\tif (! (m.isStatic())){ // implies it's not abstract, verified in pass 2.\n+\t\t\t} else if (! (m.isStatic())){ // implies it's not abstract, verified in pass 2.\n \t\t\t\tconstraintViolated(o, \"Referenced method '\"+o.getMethodName(cpg)+\"' has ACC_STATIC unset.\");\n \t\t\t}\n \t\t",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "'guard' against npe's\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@230963 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/0dbae7295aef6f772dcedf61f8f0ff1b07c96058",
        "parent": "https://github.com/apache/commons-bcel/commit/26a073e80cce004a3a6f3408333011d1f7f39816",
        "bug_id": "commons-bcel_11",
        "file": [
            {
                "sha": "f2d4be97eb319159ee72878ad0c632172c39bdbb",
                "filename": "src/java/org/apache/bcel/verifier/VerifyDialog.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/0dbae7295aef6f772dcedf61f8f0ff1b07c96058/src/java/org/apache/bcel/verifier/VerifyDialog.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/0dbae7295aef6f772dcedf61f8f0ff1b07c96058/src/java/org/apache/bcel/verifier/VerifyDialog.java",
                "status": "modified",
                "changes": 17,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/verifier/VerifyDialog.java?ref=0dbae7295aef6f772dcedf61f8f0ff1b07c96058",
                "patch": "@@ -504,18 +504,19 @@ public void pass4Button_ActionPerformed(java.awt.event.ActionEvent actionEvent)\n \t\tJavaClass jc = null;\n \t\ttry {\n \t\t\tjc = Repository.lookupClass(class_name);\n+\t\t\t\n+\t\t\tint nr = jc.getMethods().length;\n+\t\t\tfor (int i=0; i<nr; i++) {\n+\t\t\t\tvr = v.doPass3b(i);\n+\t\t\t\tif (vr.getStatus() != VerificationResult.VERIFIED_OK){\n+\t\t\t\t\tcolor = Color.red;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n \t\t} catch (ClassNotFoundException ex) {\n \t\t\t// FIXME: report the error\n \t\t\tex.printStackTrace();\n \t\t}\n-\t\tint nr = jc.getMethods().length;\n-\t\tfor (int i=0; i<nr; i++) {\n-\t\t\tvr = v.doPass3b(i);\n-\t\t\tif (vr.getStatus() != VerificationResult.VERIFIED_OK){\n-\t\t\t\tcolor = Color.red;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n \t}\n \telse{\n \t\tcolor = Color.yellow;",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "'guard' against npe's\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@230962 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/26a073e80cce004a3a6f3408333011d1f7f39816",
        "parent": "https://github.com/apache/commons-bcel/commit/0e3574bdaab211c2fbe6f200415e386ebb9681be",
        "bug_id": "commons-bcel_12",
        "file": [
            {
                "sha": "5c5dd7116469ae23906491bb88205b04c81ff6ba",
                "filename": "src/java/org/apache/bcel/verifier/VerifierAppFrame.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/26a073e80cce004a3a6f3408333011d1f7f39816/src/java/org/apache/bcel/verifier/VerifierAppFrame.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/26a073e80cce004a3a6f3408333011d1f7f39816/src/java/org/apache/bcel/verifier/VerifierAppFrame.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/verifier/VerifierAppFrame.java?ref=26a073e80cce004a3a6f3408333011d1f7f39816",
                "patch": "@@ -331,11 +331,11 @@ synchronized void pass3aJList_valueChanged(ListSelectionEvent e) {\n         JavaClass jc = null;\n \ttry {\n           jc = Repository.lookupClass(v.getClassName());\n+          all3amsg += \"Method '\"+jc.getMethods()[i]+\"': \"+vr.getMessage().replace('\\n',' ')+\"\\n\\n\";\n         } catch (ClassNotFoundException ex) {\n           // FIXME: handle the error\n           ex.printStackTrace();\n         }\n-        all3amsg += \"Method '\"+jc.getMethods()[i]+\"': \"+vr.getMessage().replace('\\n',' ')+\"\\n\\n\";\n       }\n     }\n     pass3aTextPane.setText(all3amsg);\n@@ -363,11 +363,11 @@ synchronized void pass3bJList_valueChanged(ListSelectionEvent e) {\n         JavaClass jc = null;\n \ttry {\n           jc = Repository.lookupClass(v.getClassName());\n+          all3bmsg += \"Method '\"+jc.getMethods()[i]+\"': \"+vr.getMessage().replace('\\n',' ')+\"\\n\\n\";\n         } catch (ClassNotFoundException ex) {\n           // FIXME: handle the error\n           ex.printStackTrace();\n         }\n-        all3bmsg += \"Method '\"+jc.getMethods()[i]+\"': \"+vr.getMessage().replace('\\n',' ')+\"\\n\\n\";\n       }\n     }\n     pass3bTextPane.setText(all3bmsg);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "'guard' against npe's\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@230961 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/0e3574bdaab211c2fbe6f200415e386ebb9681be",
        "parent": "https://github.com/apache/commons-bcel/commit/6b7c137291865a6d066e5f31776c358366708bd1",
        "bug_id": "commons-bcel_13",
        "file": [
            {
                "sha": "5e3bb905f3e2fdcdb6a95bcb614aa16aacb72ec4",
                "filename": "src/java/org/apache/bcel/classfile/JavaClass.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/0e3574bdaab211c2fbe6f200415e386ebb9681be/src/java/org/apache/bcel/classfile/JavaClass.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/0e3574bdaab211c2fbe6f200415e386ebb9681be/src/java/org/apache/bcel/classfile/JavaClass.java",
                "status": "modified",
                "changes": 28,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/classfile/JavaClass.java?ref=0e3574bdaab211c2fbe6f200415e386ebb9681be",
                "patch": "@@ -670,24 +670,24 @@ public JavaClass copy() {\n \n     try {\n       c = (JavaClass)clone();\n-    } catch (CloneNotSupportedException e) {\n-    }\n \n-    c.constant_pool = constant_pool.copy();\n-    c.interfaces = (int[])interfaces.clone();\n-    c.interface_names = (String[])interface_names.clone();\n+      c.constant_pool = constant_pool.copy();\n+      c.interfaces = (int[])interfaces.clone();\n+      c.interface_names = (String[])interface_names.clone();\n \n-    c.fields = new Field[fields.length];\n-    for (int i = 0; i < fields.length; i++)\n-      c.fields[i] = fields[i].copy(c.constant_pool);\n+      c.fields = new Field[fields.length];\n+      for (int i = 0; i < fields.length; i++)\n+        c.fields[i] = fields[i].copy(c.constant_pool);\n \n-    c.methods = new Method[methods.length];\n-    for (int i = 0; i < methods.length; i++)\n-      c.methods[i] = methods[i].copy(c.constant_pool);\n+      c.methods = new Method[methods.length];\n+      for (int i = 0; i < methods.length; i++)\n+        c.methods[i] = methods[i].copy(c.constant_pool);\n \n-    c.attributes = new Attribute[attributes.length];\n-    for (int i = 0; i < attributes.length; i++)\n-      c.attributes[i] = attributes[i].copy(c.constant_pool);\n+      c.attributes = new Attribute[attributes.length];\n+      for (int i = 0; i < attributes.length; i++)\n+        c.attributes[i] = attributes[i].copy(c.constant_pool);\n+    } catch (CloneNotSupportedException e) {\n+    }\n \n     return c;\n   }",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "'guard' against npe's\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@230960 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/6b7c137291865a6d066e5f31776c358366708bd1",
        "parent": "https://github.com/apache/commons-bcel/commit/5d435ae2f457b0430557273801f76a946a35ee56",
        "bug_id": "commons-bcel_14",
        "file": [
            {
                "sha": "20852b6069684db735f909d2ae4080af20d75ff6",
                "filename": "src/java/org/apache/bcel/classfile/ConstantPool.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/6b7c137291865a6d066e5f31776c358366708bd1/src/java/org/apache/bcel/classfile/ConstantPool.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/6b7c137291865a6d066e5f31776c358366708bd1/src/java/org/apache/bcel/classfile/ConstantPool.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/classfile/ConstantPool.java?ref=6b7c137291865a6d066e5f31776c358366708bd1",
                "patch": "@@ -323,14 +323,14 @@ public ConstantPool copy() {\n \n     try {\n       c = (ConstantPool)clone();\n-    } catch(CloneNotSupportedException e) {}\n+      c.constant_pool = new Constant[constant_pool_count];\n \n-    c.constant_pool = new Constant[constant_pool_count];\n+      for(int i=1; i < constant_pool_count; i++) {\n+        if(constant_pool[i] != null)\n+        \tc.constant_pool[i] = constant_pool[i].copy();\n+      }\n+    } catch(CloneNotSupportedException e) {}\n \n-    for(int i=1; i < constant_pool_count; i++) {\n-      if(constant_pool[i] != null)\n-\tc.constant_pool[i] = constant_pool[i].copy();\n-    }\n \n     return c;\n   }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "make sure instruction list iterator throws NoSuchElementException when the end of the list is done and a call to next() is made, and not NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@438640 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/4320cc5bd7107e61e9f8cfc6fbbd8ae7651f37c1",
        "parent": "https://github.com/apache/commons-bcel/commit/86234a37f52631e4ec364e7e914042d0cbc52de9",
        "bug_id": "commons-bcel_15",
        "file": [
            {
                "sha": "f9e5cc3fa3873954613da1a439f5575d91ea6c00",
                "filename": "src/main/java/org/apache/bcel/generic/InstructionList.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/4320cc5bd7107e61e9f8cfc6fbbd8ae7651f37c1/src/main/java/org/apache/bcel/generic/InstructionList.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/4320cc5bd7107e61e9f8cfc6fbbd8ae7651f37c1/src/main/java/org/apache/bcel/generic/InstructionList.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/generic/InstructionList.java?ref=4320cc5bd7107e61e9f8cfc6fbbd8ae7651f37c1",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n import org.apache.bcel.Constants;\n import org.apache.bcel.classfile.Constant;\n import org.apache.bcel.util.ByteSequence;\n@@ -991,7 +993,9 @@ public Iterator iterator() {\n             private InstructionHandle ih = start;\n \n \n-            public Object next() {\n+            public Object next() throws NoSuchElementException {\n+            \tif (ih == null)\n+            \t\tthrow new NoSuchElementException();\n                 InstructionHandle i = ih;\n                 ih = ih.next;\n                 return i;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "https://issues.apache.org/bugzilla/show_bug.cgi?id=47249\n\nfixed a possible NPE\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@897697 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/eed510642f30f119a86d27dcbb829f02823ffa2e",
        "parent": "https://github.com/apache/commons-bcel/commit/ca29e258b9d9f824ffc3fdda728303cb55b386a2",
        "bug_id": "commons-bcel_16",
        "file": [
            {
                "sha": "3fe61ed8bcbbcd31e63a595dfec31074a46da872",
                "filename": "src/main/java/org/apache/bcel/classfile/ClassParser.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/eed510642f30f119a86d27dcbb829f02823ffa2e/src/main/java/org/apache/bcel/classfile/ClassParser.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/eed510642f30f119a86d27dcbb829f02823ffa2e/src/main/java/org/apache/bcel/classfile/ClassParser.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/main/java/org/apache/bcel/classfile/ClassParser.java?ref=eed510642f30f119a86d27dcbb829f02823ffa2e",
                "patch": "@@ -120,6 +120,11 @@ public JavaClass parse() throws IOException, ClassFormatException {\n                 if (is_zip) {\n                     zip = new ZipFile(zip_file);\n                     ZipEntry entry = zip.getEntry(file_name);\n+                    \n+                    if (entry == null) {\n+                        throw new IOException(\"File \" + file_name + \" not found\");\n+                    }\n+                    \n                     file = new DataInputStream(new BufferedInputStream(zip.getInputStream(entry),\n                             BUFSIZE));\n                 } else {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "commons-bcel",
        "message": "if attributes parameter is null, would get NPE, fixed. Problem exacerbated by hidding member name with parameter name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/bcel/trunk@382273 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/commons-bcel/commit/770ceafed9ec829314b8e095e01ff39474566908",
        "parent": "https://github.com/apache/commons-bcel/commit/87ef0ad4e4760c57a6140cfbd42efaf8d628a20b",
        "bug_id": "commons-bcel_17",
        "file": [
            {
                "sha": "0e646e57a618f00bfbf4cb5d7a8255d79f091567",
                "filename": "src/java/org/apache/bcel/classfile/JavaClass.java",
                "blob_url": "https://github.com/apache/commons-bcel/blob/770ceafed9ec829314b8e095e01ff39474566908/src/java/org/apache/bcel/classfile/JavaClass.java",
                "raw_url": "https://github.com/apache/commons-bcel/raw/770ceafed9ec829314b8e095e01ff39474566908/src/java/org/apache/bcel/classfile/JavaClass.java",
                "status": "modified",
                "changes": 6,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-bcel/contents/src/java/org/apache/bcel/classfile/JavaClass.java?ref=770ceafed9ec829314b8e095e01ff39474566908",
                "patch": "@@ -127,7 +127,7 @@ public JavaClass(\n     if (interfaces == null) // Allowed for backward compatibility\n       interfaces = new int[0];\n     if (attributes == null)\n-      this.attributes = new Attribute[0];\n+      attributes = new Attribute[0];\n     if (fields == null)\n       fields = new Field[0];\n     if (methods == null)\n@@ -261,9 +261,7 @@ public void dump(File file) throws IOException {\n \n     if (parent != null) {\n       File dir = new File(parent);\n-\n-      if (dir != null)\n-        dir.mkdirs();\n+      dir.mkdirs();\n     }\n \n     DataOutputStream dos = null;",
                "deletions": 4
            }
        ]
    }
]