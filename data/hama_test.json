{
    "hama_583c69b": {
        "repo": "hama",
        "message": "HAMA-982: Vertex.read/writeState() method throws NullPointerException",
        "commit": "https://github.com/apache/hama/commit/583c69b37817f9ee76403805657d6650f2efc6d3",
        "parent": "https://github.com/apache/hama/commit/09243a3ca1565ba678ee7455a8d25288d95ddf2a",
        "bug_id": "hama_583c69b",
        "file": [
            {
                "sha": "48048c8a288f56e34b5039371baa19d60d64d31f",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/CHANGES.txt",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/CHANGES.txt",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/CHANGES.txt?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -8,6 +8,7 @@ Release 0.7.1 (unreleased changes)\n \n   BUG FIXES\n \n+    HAMA-982: Vertex.read/writeState() method throws NullPointerException (edwardyoon)\n     HAMA-965: Infinite loop because of recursive function call (JongYoon Lim via edwardyoon)\n     HAMA-966: NioServerListener doesn't throw any exceptions (JongYoon Lim via edwardyoon)\n ",
                "deletions": 0
            },
            {
                "sha": "f753ffb506bb9f32f85b3d4633529b84237549ca",
                "filename": "examples/src/test/java/org/apache/hama/examples/CustomVertexReadWriteStateTest.java",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/examples/src/test/java/org/apache/hama/examples/CustomVertexReadWriteStateTest.java",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/examples/src/test/java/org/apache/hama/examples/CustomVertexReadWriteStateTest.java",
                "status": "added",
                "changes": 70,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/examples/src/test/java/org/apache/hama/examples/CustomVertexReadWriteStateTest.java?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hama.examples;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.hadoop.io.ArrayWritable;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.Text;\n+import org.apache.hadoop.io.Writable;\n+import org.apache.hama.HamaConfiguration;\n+import org.apache.hama.graph.Vertex;\n+\n+public class CustomVertexReadWriteStateTest extends TestCase {\n+  static int initialState = 2;\n+  static int changedState = 4;\n+\n+  public static class TestVertex extends Vertex<Text, IntWritable, IntWritable> {\n+\n+    private static ArrayWritable test = new ArrayWritable(IntWritable.class);\n+\n+    @Override\n+    public void setup(HamaConfiguration conf) {\n+      // Sets the initial state\n+      test.set(new Writable[] { new IntWritable(initialState) });\n+    }\n+\n+    @Override\n+    public void compute(Iterable<IntWritable> messages) throws IOException {\n+      if (this.getSuperstepCount() == 3) {\n+        // change the state\n+        test.set(new Writable[] { new IntWritable(changedState) });\n+      }\n+\n+      if (this.getSuperstepCount() < 3) {\n+        assertEquals(initialState, ((IntWritable) test.get()[0]).get());\n+      } else {\n+        assertEquals(changedState, ((IntWritable) test.get()[0]).get());\n+      }\n+    }\n+\n+    public void readState(DataInput in) throws IOException {\n+      test.readFields(in);\n+    }\n+\n+    public void writeState(DataOutput out) throws IOException {\n+      test.write(out);\n+    }\n+  }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "116abbb727cf63b6f020e4f5918acb097c854c3e",
                "filename": "examples/src/test/java/org/apache/hama/examples/SSSPTest.java",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/examples/src/test/java/org/apache/hama/examples/SSSPTest.java",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/examples/src/test/java/org/apache/hama/examples/SSSPTest.java",
                "status": "modified",
                "changes": 54,
                "additions": 48,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/examples/src/test/java/org/apache/hama/examples/SSSPTest.java?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -31,7 +31,16 @@\n import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.IntWritable;\n+import org.apache.hadoop.io.LongWritable;\n+import org.apache.hadoop.io.Text;\n import org.apache.hama.HamaConfiguration;\n+import org.apache.hama.bsp.HashPartitioner;\n+import org.apache.hama.bsp.NullOutputFormat;\n+import org.apache.hama.bsp.TextInputFormat;\n+import org.apache.hama.examples.CustomVertexReadWriteStateTest.TestVertex;\n+import org.apache.hama.examples.SSSP.SSSPTextReader;\n+import org.apache.hama.graph.GraphJob;\n import org.junit.Test;\n \n /**\n@@ -61,18 +70,51 @@\n   protected void setUp() throws Exception {\n     super.setUp();\n     fs = FileSystem.get(conf);\n+    generateTestData();\n+  }\n+  \n+  protected void tearDown() throws Exception {\n+    deleteTempDirs();\n+    fs.close();\n   }\n \n   @Test\n   public void testShortestPaths() throws IOException, InterruptedException,\n       ClassNotFoundException, InstantiationException, IllegalAccessException {\n \n-    generateTestData();\n-    try {\n-      SSSP.main(new String[] { \"0\", INPUT, OUTPUT, \"3\" });\n-      verifyResult();\n-    } finally {\n-      deleteTempDirs();\n+    SSSP.main(new String[] { \"0\", INPUT, OUTPUT, \"3\" });\n+    verifyResult();\n+  }\n+\n+  @Test\n+  public void testCustomReadWriteState() throws IOException,\n+      InterruptedException, ClassNotFoundException, InstantiationException,\n+      IllegalAccessException {\n+\n+    HamaConfiguration conf = new HamaConfiguration();\n+    GraphJob job = new GraphJob(conf, CustomVertexReadWriteStateTest.class);\n+    // Set the job name\n+    job.setJobName(\"test custom read/write state\");\n+    job.setInputPath(new Path(INPUT));\n+    job.setNumBspTask(1);\n+    job.setVertexClass(TestVertex.class);\n+    job.setInputFormat(TextInputFormat.class);\n+    job.setInputKeyClass(LongWritable.class);\n+    job.setInputValueClass(Text.class);\n+\n+    job.setPartitioner(HashPartitioner.class);\n+    job.setOutputFormat(NullOutputFormat.class);\n+    job.setVertexInputReaderClass(SSSPTextReader.class);\n+    // Iterate until all the nodes have been reached.\n+    job.setMaxIteration(6);\n+    job.setVertexIDClass(Text.class);\n+    job.setVertexValueClass(IntWritable.class);\n+    job.setEdgeValueClass(IntWritable.class);\n+\n+    long startTime = System.currentTimeMillis();\n+    if (job.waitForCompletion(true)) {\n+      System.out.println(\"Job Finished in \"\n+          + (System.currentTimeMillis() - startTime) / 1000.0 + \" seconds\");\n     }\n   }\n ",
                "deletions": 6
            },
            {
                "sha": "cdbf6b51a999c7ae8c2058c6d443c3e8059a3434",
                "filename": "graph/src/main/java/org/apache/hama/graph/Vertex.java",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/graph/src/main/java/org/apache/hama/graph/Vertex.java",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/graph/src/main/java/org/apache/hama/graph/Vertex.java",
                "status": "modified",
                "changes": 26,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/graph/src/main/java/org/apache/hama/graph/Vertex.java?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -17,8 +17,10 @@\n  */\n package org.apache.hama.graph;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.DataInput;\n import java.io.DataOutput;\n+import java.io.DataOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -271,7 +273,11 @@ public void readFields(DataInput in) throws IOException {\n       }\n     }\n     votedToHalt = in.readBoolean();\n-    readState(in);\n+\n+    boolean hasMoreContents = in.readBoolean();\n+    if (hasMoreContents) {\n+      readState(in);\n+    }\n   }\n \n   @Override\n@@ -308,8 +314,24 @@ public void write(DataOutput out) throws IOException {\n       }\n     }\n     out.writeBoolean(votedToHalt);\n-    writeState(out);\n \n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    DataOutput customOut = new DataOutputStream(baos);\n+    boolean hasMoreContents = true;\n+    try {\n+      writeState(customOut);\n+    } catch (NullPointerException e) {\n+      // do nothing\n+    }\n+\n+    // if all states are null, set hasContents to false.\n+    if (baos.size() == 0) {\n+      hasMoreContents = false;\n+    }\n+\n+    out.writeBoolean(hasMoreContents);\n+    if (hasMoreContents)\n+      out.write(baos.toByteArray());\n   }\n \n   // compare across the vertex ID",
                "deletions": 2
            },
            {
                "sha": "16026807765f77f0b6159c5b3860ee5e15174fca",
                "filename": "src/site/xdoc/index.xml",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/src/site/xdoc/index.xml",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/src/site/xdoc/index.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/src/site/xdoc/index.xml?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -24,7 +24,7 @@ xsi:schemaLocation=\"http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd\n \n     <section name=\"\"></section>\n     <p>\n-    <div style=\"float:left;margin-right:15px;\"><img src=\"./images/hama_paint_logo.png\" style=\"width:130px\" alt=\"\" /></div>\n+    <div style=\"float:left;margin-right:15px;margin-bottom: 10px;\"><img src=\"./images/hama_paint_logo.png\" style=\"width:120px\" alt=\"\" /></div>\n      Apache Hama<sup>TM</sup> is a framework for Big Data analytics which uses the Bulk Synchronous Parallel (BSP) computing model, \n     which was established in 2012 as a Top-Level Project of The Apache Software Foundation. \n     <br/><br/>It provides not only pure BSP programming model \n@@ -49,8 +49,8 @@ xsi:schemaLocation=\"http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd\n \n     <h3 align=\"center\">Recent News</h3>\n       <ul>\n+        <li>Jan 28, 2016: Behroz Sikander was added as a committer and PMC</li>\n         <li>Jun 14, 2015: release 0.7.0 available [<a href=\"downloads.html\">downloads</a>]</li>\n-        <li>Jun 11, 2015: Minho Kim was added as a committer.</li>\n       </ul>\n     </div>\n       ",
                "deletions": 2
            },
            {
                "sha": "d4bc37882f8002d970338ce07a4c75ff1b8baa53",
                "filename": "src/site/xdoc/team-list.xml",
                "blob_url": "https://github.com/apache/hama/blob/583c69b37817f9ee76403805657d6650f2efc6d3/src/site/xdoc/team-list.xml",
                "raw_url": "https://github.com/apache/hama/raw/583c69b37817f9ee76403805657d6650f2efc6d3/src/site/xdoc/team-list.xml",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/hama/contents/src/site/xdoc/team-list.xml?ref=583c69b37817f9ee76403805657d6650f2efc6d3",
                "patch": "@@ -64,6 +64,12 @@ xsi:schemaLocation=\"http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd\n           <td align=\"center\">.</td>\n           <td align=\"center\">committer</td>\n         </tr>\n+       <tr valign=\"top\">\n+          <td align=\"center\">bsikander</td>\n+          <td align=\"center\">Behroz Sikander</td>\n+          <td align=\"center\">Technical University of Munich</td>\n+          <td align=\"center\">PMC member, committer</td>\n+        </tr>\n        <tr valign=\"top\">\n           <td align=\"center\">bsmin</td>\n           <td align=\"center\">Byungseok Min</td>",
                "deletions": 0
            }
        ],
        "patched_files": [
            "Vertex.java",
            "SSSP.java"
        ],
        "unit_tests": [
            "SSSPTest.java",
            "CustomVertexReadWriteStateTest.java"
        ]
    }
}