{
    "aurora_10ed36a": {
        "bug_id": "aurora_10ed36a",
        "commit": "https://github.com/apache/aurora/commit/10ed36a7477282b5dac35ca9ba82732eddf47a2f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aurora/blob/10ed36a7477282b5dac35ca9ba82732eddf47a2f/src/java/com/twitter/mesos/scheduler/SchedulerCoreImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/aurora/contents/src/java/com/twitter/mesos/scheduler/SchedulerCoreImpl.java?ref=10ed36a7477282b5dac35ca9ba82732eddf47a2f",
                "deletions": 0,
                "filename": "src/java/com/twitter/mesos/scheduler/SchedulerCoreImpl.java",
                "patch": "@@ -30,6 +30,7 @@\n import com.twitter.mesos.ExecutorKey;\n import com.twitter.mesos.Tasks;\n import com.twitter.mesos.gen.AssignedTask;\n+import com.twitter.mesos.gen.Constraint;\n import com.twitter.mesos.gen.Identity;\n import com.twitter.mesos.gen.JobConfiguration;\n import com.twitter.mesos.gen.Quota;\n@@ -274,6 +275,7 @@ private static TwitterTaskInfo makeBootstrapTask() {\n         .setRamMb(1)\n         .setShardId(0)\n         .setRequestedPorts(ImmutableSet.<String>of())\n+        .setConstraints(ImmutableSet.<Constraint>of())\n         .setStartCommand(\"echo \\\"Bootstrapping\\\"\");\n   }\n ",
                "raw_url": "https://github.com/apache/aurora/raw/10ed36a7477282b5dac35ca9ba82732eddf47a2f/src/java/com/twitter/mesos/scheduler/SchedulerCoreImpl.java",
                "sha": "d594050cf67c85d0123d911703dab82e993b3b8a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aurora/blob/10ed36a7477282b5dac35ca9ba82732eddf47a2f/src/java/com/twitter/mesos/scheduler/configuration/ConfigurationManager.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/aurora/contents/src/java/com/twitter/mesos/scheduler/configuration/ConfigurationManager.java?ref=10ed36a7477282b5dac35ca9ba82732eddf47a2f",
                "deletions": 3,
                "filename": "src/java/com/twitter/mesos/scheduler/configuration/ConfigurationManager.java",
                "patch": "@@ -46,7 +46,7 @@\n   private static final Logger LOG = Logger.getLogger(ConfigurationManager.class.getName());\n \n   private static final Pattern GOOD_IDENTIFIER_PATTERN = Pattern.compile(\"[\\\\w\\\\-\\\\.]+\");\n-  private static final String HOST_CONSTRAINT = \"host\";\n+  @VisibleForTesting public static final String HOST_CONSTRAINT = \"host\";\n   private static final int MAX_IDENTIFIED_LENGTH = 255;\n \n   @VisibleForTesting\n@@ -341,8 +341,7 @@ public static void resetStartCommand(TwitterTaskInfo task) {\n             LOG.info(\"Task configuration uses deprecated max_per_host.\");\n \n             // TODO(wfarner): Remove this once the mesos client is updated to supply it.\n-            task.addToConstraints(new Constraint(HOST_CONSTRAINT,\n-                TaskConstraint.limit(new LimitConstraint(value))));\n+            task.addToConstraints(hostLimitConstraint(1));\n           }\n         }\n       })\n@@ -360,6 +359,11 @@ public static void resetStartCommand(TwitterTaskInfo task) {\n       })\n       .build();\n \n+  @VisibleForTesting\n+  public static Constraint hostLimitConstraint(int limit) {\n+    return new Constraint(HOST_CONSTRAINT, TaskConstraint.limit(new LimitConstraint(limit)));\n+  }\n+\n   private static Predicate<Constraint> hasName(final String name) {\n     MorePreconditions.checkNotBlank(name);\n     return new Predicate<Constraint>() {",
                "raw_url": "https://github.com/apache/aurora/raw/10ed36a7477282b5dac35ca9ba82732eddf47a2f/src/java/com/twitter/mesos/scheduler/configuration/ConfigurationManager.java",
                "sha": "92a6e615a8c152dc747d93203a606ad19915fd02",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/aurora/blob/10ed36a7477282b5dac35ca9ba82732eddf47a2f/tests/java/com/twitter/mesos/scheduler/BaseSchedulerCoreImplTest.java",
                "changes": 140,
                "contents_url": "https://api.github.com/repos/apache/aurora/contents/tests/java/com/twitter/mesos/scheduler/BaseSchedulerCoreImplTest.java?ref=10ed36a7477282b5dac35ca9ba82732eddf47a2f",
                "deletions": 70,
                "filename": "tests/java/com/twitter/mesos/scheduler/BaseSchedulerCoreImplTest.java",
                "patch": "@@ -9,6 +9,9 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n \n import javax.annotation.Nullable;\n \n@@ -25,6 +28,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n+import org.apache.mesos.Protos.Attribute;\n import org.apache.mesos.Protos.ExecutorID;\n import org.apache.mesos.Protos.FrameworkID;\n import org.apache.mesos.Protos.Offer;\n@@ -34,6 +38,7 @@\n import org.apache.mesos.Protos.Value.Range;\n import org.apache.mesos.Protos.Value.Ranges;\n import org.apache.mesos.Protos.Value.Scalar;\n+import org.apache.mesos.Protos.Value.Text;\n import org.apache.mesos.Protos.Value.Type;\n import org.easymock.EasyMock;\n import org.easymock.IAnswer;\n@@ -48,6 +53,7 @@\n import com.twitter.common.util.testing.FakeClock;\n import com.twitter.mesos.ExecutorKey;\n import com.twitter.mesos.Tasks;\n+import com.twitter.mesos.executor.Task;\n import com.twitter.mesos.gen.AssignedTask;\n import com.twitter.mesos.gen.Constraint;\n import com.twitter.mesos.gen.CronCollisionPolicy;\n@@ -114,7 +120,9 @@\n   private static final Identity OWNER_A = new Identity(\"Test_Role_A\", \"Test_User_A\");\n   private static final String JOB_A = \"Test_Job_A\";\n   private static final String JOB_A_KEY = Tasks.jobKey(OWNER_A, JOB_A);\n-  private static final Quota DEFAULT_TASK_QUOTA = new Quota(1.0, 1024, 1024);\n+  private static final int ONE_GB = 1024;\n+  private static final int FOUR_GB = 4096;\n+  private static final Quota DEFAULT_TASK_QUOTA = new Quota(1.0, ONE_GB, ONE_GB);\n   private static final int DEFAULT_TASKS_IN_QUOTA = 10;\n \n   private static final Identity OWNER_B = new Identity(\"Test_Role_B\", \"Test_User_B\");\n@@ -129,6 +137,7 @@\n \n   private static final OfferID OFFER_ID = OfferID.newBuilder().setValue(\"OfferId\").build();\n \n+\n   private SchedulingFilter schedulingFilter;\n   private Driver driver;\n   private StateManager stateManager;\n@@ -140,7 +149,6 @@\n \n   @Before\n   public void setUp() throws Exception {\n-    schedulingFilter = createMock(SchedulingFilter.class);\n     driver = createMock(Driver.class);\n     executorPulseMonitor = createMock(new Clazz<PulseMonitor<ExecutorKey>>() {});\n     clock = new FakeClock();\n@@ -171,6 +179,7 @@ private void buildScheduler(Storage storage) throws Exception {\n     cron = new CronJobManager(storage, new TearDownRegistry(this));\n     stateManager = new StateManager(storage, clock, new MutableState(), driver);\n     quotaManager = new QuotaManagerImpl(storage);\n+    schedulingFilter = new SchedulingFilterImpl(ImmutableMap.<String, String>of(), storage);\n     scheduler = new SchedulerCoreImpl(cron, immediateManager, stateManager, schedulingFilter,\n         executorPulseMonitor, quotaManager);\n     cron.schedulerCore = scheduler;\n@@ -280,7 +289,7 @@ public void testCreateJob() throws Exception {\n   public void testLoadTasksFromStorage() throws Exception {\n     final String storedTaskId = \"task_on_disk\";\n \n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n     control.replay();\n \n@@ -292,7 +301,7 @@ public void testLoadTasksFromStorage() throws Exception {\n         .setOwner(OWNER_A)\n         .setJobName(JOB_A)\n         .setNumCpus(1.0)\n-        .setRamMb(1024)\n+        .setRamMb(ONE_GB)\n         .setDiskMb(500)\n         .setShardId(0)\n         .setStartCommand(\"ls\")\n@@ -316,7 +325,7 @@ public void testLoadTasksFromStorage() throws Exception {\n     // Check that the missing event was synthesized.\n     assertThat(Iterables.getLast(getTask(storedTaskId).getTaskEvents()).getStatus(), is(PENDING));\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB);\n     TwitterTask launchedTask = scheduler.offer(offer, EXECUTOR_ID);\n \n     // Since task fields are backfilled with defaults, the production flag and thermos config\n@@ -338,17 +347,18 @@ public void testShardUniquenessCorrection() throws Exception {\n     final AtomicInteger taskId = new AtomicInteger();\n \n     JobConfiguration job = makeJob(OWNER_A, JOB_A, 10);\n-    final Set<ScheduledTask> badTasks = ImmutableSet.copyOf(Iterables.transform(job.getTaskConfigs(),\n-        new Function<TwitterTaskInfo, ScheduledTask>() {\n-          @Override public ScheduledTask apply(TwitterTaskInfo task) {\n-            return new ScheduledTask()\n-                .setStatus(RUNNING)\n-                .setAssignedTask(\n-                    new AssignedTask()\n-                      .setTaskId(\"task-\" + taskId.incrementAndGet())\n-                      .setTask(task.setShardId(0)));\n-          }\n-        }));\n+    final Set<ScheduledTask> badTasks = ImmutableSet.copyOf(Iterables\n+        .transform(job.getTaskConfigs(),\n+            new Function<TwitterTaskInfo, ScheduledTask>() {\n+              @Override public ScheduledTask apply(TwitterTaskInfo task) {\n+                return new ScheduledTask()\n+                    .setStatus(RUNNING)\n+                    .setAssignedTask(\n+                        new AssignedTask()\n+                            .setTaskId(\"task-\" + taskId.incrementAndGet())\n+                            .setTask(task.setShardId(0)));\n+              }\n+            }));\n \n     storage.doInTransaction(new NoResult.Quiet() {\n       @Override protected void execute(Storage.StoreProvider storeProvider) {\n@@ -366,7 +376,7 @@ public void testShardUniquenessCorrection() throws Exception {\n   public void testBackfillRequestedPorts() throws Exception {\n     final String storedTaskId = \"task_on_disk\";\n \n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n     control.replay();\n \n@@ -378,7 +388,7 @@ public void testBackfillRequestedPorts() throws Exception {\n         .setOwner(OWNER_A)\n         .setJobName(JOB_A)\n         .setNumCpus(1.0)\n-        .setRamMb(1024)\n+        .setRamMb(ONE_GB)\n         .setDiskMb(500)\n         .setShardId(0)\n         .setStartCommand(\"ls %port:foo%\")\n@@ -397,7 +407,8 @@ public void testBackfillRequestedPorts() throws Exception {\n \n     buildScheduler(storage);\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096, ImmutableSet.of(Pair.of(80, 81)));\n+    Offer offer =\n+        createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB, ImmutableSet.of(Pair.of(80, 81)));\n     TwitterTask launchedTask = scheduler.offer(offer, EXECUTOR_ID);\n \n     assertEquals(ImmutableSet.of(\"foo\"), launchedTask.task.getTask().getRequestedPorts());\n@@ -416,7 +427,7 @@ public void testBackfillRequestedPortsForCronJob() throws Exception {\n         .setOwner(OWNER_A)\n         .setJobName(JOB_A)\n         .setNumCpus(1.0)\n-        .setRamMb(1024)\n+        .setRamMb(ONE_GB)\n         .setDiskMb(500)\n         .setShardId(0)\n         .setStartCommand(\"ls %port:foo%\")\n@@ -425,7 +436,8 @@ public void testBackfillRequestedPortsForCronJob() throws Exception {\n     storage.doInTransaction(new NoResult.Quiet() {\n       @Override protected void execute(Storage.StoreProvider storeProvider) {\n         storeProvider.getJobStore().saveAcceptedJob(\n-            CronJobManager.MANAGER_KEY, makeJob(OWNER_A, JOB_A, storedTask, 1).setCronSchedule(\"1 1 1 1 1\"));\n+            CronJobManager.MANAGER_KEY, makeJob(OWNER_A, JOB_A, storedTask, 1)\n+            .setCronSchedule(\"1 1 1 1 1\"));\n       }\n     });\n \n@@ -435,8 +447,8 @@ public void testBackfillRequestedPortsForCronJob() throws Exception {\n \n     scheduler.startCronJob(OWNER_A.getRole(), JOB_A);\n \n-    assertEquals(\n-        ImmutableSet.of(\"foo\"), getOnlyTask(queryJob(OWNER_A, JOB_A)).getAssignedTask().getTask().getRequestedPorts());\n+    assertEquals(ImmutableSet.of(\"foo\"),\n+        getOnlyTask(queryJob(OWNER_A, JOB_A)).getAssignedTask().getTask().getRequestedPorts());\n   }\n \n   @Test\n@@ -686,7 +698,6 @@ public void testCreateJobShardIdHole() throws Exception {\n   @Test\n   public void testHonorsScheduleFilter() throws Exception {\n     expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n-    expectFiltering(true).anyTimes();\n     expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n     expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n@@ -697,7 +708,7 @@ public void testHonorsScheduleFilter() throws Exception {\n \n     assertTaskCount(10);\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, 1);\n \n     assertNull(scheduler.offer(offer, EXECUTOR_ID));\n     assertNull(scheduler.offer(offer, EXECUTOR_ID));\n@@ -1169,23 +1180,26 @@ private void sendOffer(Offer offer, String taskId, SlaveID slave, String slaveHo\n   public void testExecutorBootstrap() throws Exception {\n     expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(false);\n     executorPulseMonitor.pulse(EasyMock.<ExecutorKey>anyObject());\n-    expectFiltering(false);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 3, 4096);\n-    final Resources offerResources = Resources.from(offer);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 3, FOUR_GB, ONE_GB);\n \n     control.replay();\n \n     buildScheduler();\n     TwitterTask scheduledTask =  scheduler.offer(offer, EXECUTOR_ID);\n     assertNotNull(scheduledTask);\n     assertEquals(scheduledTask.task.getTask().getJobName(), \"executor_bootstrap\");\n+\n+    // Force the task to be rescheduled.  This should help weed out bugs where ConfigurationManager\n+    // populates fields in normal tasks that are not present in the bootstrap task.\n+    changeStatus(scheduledTask.taskId, LOST);\n+    assertNotNull(scheduler.offer(offer, EXECUTOR_ID));\n   }\n \n   @Test\n   public void testSlaveDeletesTasks() throws Exception {\n-    expectOffer(true);\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true).times(2);\n \n     control.replay();\n     buildScheduler();\n@@ -1195,7 +1209,7 @@ public void testSlaveDeletesTasks() throws Exception {\n     String taskId1 = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 0)));\n     String taskId2 = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 1)));\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB);\n     sendOffer(offer, taskId1, SLAVE_ID, SLAVE_HOST_1);\n     sendOffer(offer, taskId2, SLAVE_ID, SLAVE_HOST_1);\n \n@@ -1218,12 +1232,7 @@ public void testSlaveDeletesTasks() throws Exception {\n \n   @Test\n   public void testSchedulingOrder() throws Exception {\n-    expectOffer(true);\n-    expectOffer(true);\n-    expectOffer(true);\n-    expectOffer(true);\n-    expectOffer(true);\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true).times(6);\n \n     control.replay();\n     buildScheduler();\n@@ -1243,7 +1252,7 @@ public void testSchedulingOrder() throws Exception {\n     String taskId3a = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_B), 0)));\n     String taskId3b = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_B), 1)));\n \n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB);\n     sendOffer(offer, taskId2a, SLAVE_ID, SLAVE_HOST_1);\n     sendOffer(offer, taskId2b, SLAVE_ID, SLAVE_HOST_1);\n     sendOffer(offer, taskId1a, SLAVE_ID, SLAVE_HOST_1);\n@@ -1705,7 +1714,7 @@ public void testDecreaseShardsRollback() throws Exception {\n \n   @Test\n   public void testTaskIdExpansion() throws Exception {\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n     control.replay();\n     buildScheduler();\n@@ -1715,7 +1724,7 @@ public void testTaskIdExpansion() throws Exception {\n     scheduler.createJob(makeJob(OWNER_A, JOB_A, config, 1));\n \n     String taskId = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 0)));\n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB);\n     sendOffer(offer, taskId, SLAVE_ID, SLAVE_HOST_1);\n \n     AssignedTask task = getTask(taskId).getAssignedTask();\n@@ -1724,7 +1733,7 @@ public void testTaskIdExpansion() throws Exception {\n \n   @Test\n   public void testShardIdExpansion() throws Exception {\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n \n     control.replay();\n     buildScheduler();\n@@ -1734,7 +1743,7 @@ public void testShardIdExpansion() throws Exception {\n     scheduler.createJob(makeJob(OWNER_A, JOB_A, config, 1));\n \n     String taskId = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 0)));\n-    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096);\n+    Offer offer = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB);\n     sendOffer(offer, taskId, SLAVE_ID, SLAVE_HOST_1);\n \n     AssignedTask task = getTask(taskId).getAssignedTask();\n@@ -1743,7 +1752,7 @@ public void testShardIdExpansion() throws Exception {\n \n   @Test\n   public void testPortResource() throws Exception {\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true);\n     control.replay();\n     buildScheduler();\n \n@@ -1755,7 +1764,7 @@ public void testPortResource() throws Exception {\n     String taskId = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 0)));\n \n     Set<Integer> assignedPorts = ImmutableSet.of(80, 81, 82);\n-    Offer threePorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096,\n+    Offer threePorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB,\n         ImmutableSet.of(Pair.of(80, 82)));\n     sendOffer(threePorts, taskId, SLAVE_ID, SLAVE_HOST_1,\n         ImmutableSet.of(\"one\", \"two\", \"three\"), assignedPorts);\n@@ -1768,8 +1777,7 @@ public void testPortResource() throws Exception {\n \n   @Test\n   public void testPortResourceResetAfterReschedule() throws Exception {\n-    expectOffer(true);\n-    expectOffer(true);\n+    expect(executorPulseMonitor.isAlive(SLAVE_HOST_1_KEY)).andReturn(true).times(2);\n \n     control.replay();\n     buildScheduler();\n@@ -1782,7 +1790,7 @@ public void testPortResourceResetAfterReschedule() throws Exception {\n     String taskId = Tasks.id(getOnlyTask(Query.liveShard(Tasks.jobKey(OWNER_A, JOB_A), 0)));\n \n     Set<Integer> assignedPorts = ImmutableSet.of(80);\n-    Offer threePorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096,\n+    Offer threePorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB,\n         ImmutableSet.of(Pair.of(80, 80)));\n     sendOffer(threePorts, taskId, SLAVE_ID, SLAVE_HOST_1, ImmutableSet.of(\"one\"), assignedPorts);\n \n@@ -1796,7 +1804,7 @@ public void testPortResourceResetAfterReschedule() throws Exception {\n     assertThat(getTask(newTaskId).getAssignedTask().getTask().getStartCommand(), is(\"%port:one%\"));\n \n     assignedPorts = ImmutableSet.of(86);\n-    Offer threeOtherPorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, 4096,\n+    Offer threeOtherPorts = createOffer(SLAVE_ID, SLAVE_HOST_1, 4, FOUR_GB, ONE_GB,\n         ImmutableSet.of(Pair.of(86, 86)));\n     sendOffer(threeOtherPorts, newTaskId, SLAVE_ID, SLAVE_HOST_1, ImmutableSet.of(\"one\"),\n         assignedPorts);\n@@ -1931,12 +1939,13 @@ private static JobConfiguration makeJob(Identity owner, String jobName,\n   }\n \n   private static Offer createOffer(SlaveID slave, String slaveHost, double cpu,\n-      double ramMb) {\n-    return createOffer(slave, slaveHost, cpu, ramMb, ImmutableSet.<Pair<Integer, Integer>>of());\n+      double ramMb, double diskMb) {\n+    return createOffer(slave, slaveHost, cpu, ramMb, diskMb,\n+        ImmutableSet.<Pair<Integer, Integer>>of());\n   }\n \n   private static Offer createOffer(SlaveID slave, String slaveHost, double cpu,\n-      double ramMb, Set<Pair<Integer, Integer>> ports) {\n+      double ramMb, double diskMb, Set<Pair<Integer, Integer>> ports) {\n \n     Ranges portRanges = Ranges.newBuilder()\n         .addAllRange(Iterables.transform(ports, new Function<Pair<Integer, Integer>, Range>() {\n@@ -1951,8 +1960,13 @@ private static Offer createOffer(SlaveID slave, String slaveHost, double cpu,\n             .setScalar(Scalar.newBuilder().setValue(cpu)))\n         .addResources(Resource.newBuilder().setType(Type.SCALAR).setName(Resources.RAM_MB)\n             .setScalar(Scalar.newBuilder().setValue(ramMb)))\n+        .addResources(Resource.newBuilder().setType(Type.SCALAR).setName(Resources.DISK_MB)\n+            .setScalar(Scalar.newBuilder().setValue(diskMb)))\n         .addResources(Resource.newBuilder().setType(Type.RANGES).setName(Resources.PORTS)\n             .setRanges(portRanges))\n+        .addAttributes(Attribute.newBuilder().setType(Type.TEXT)\n+            .setName(ConfigurationManager.HOST_CONSTRAINT)\n+            .setText(Text.newBuilder().setValue(slaveHost)))\n         .setSlaveId(slave)\n         .setHostname(slaveHost)\n         .setFrameworkId(FrameworkID.newBuilder().setValue(FRAMEWORK_ID).build())\n@@ -1977,7 +1991,11 @@ private static TwitterTaskInfo defaultTask(boolean production, String... additio\n       params.put(additionalParams[i], additionalParams[i + 1]);\n     }\n \n-    return new TwitterTaskInfo().setConfiguration(ImmutableMap.copyOf(params));\n+    TwitterTaskInfo task = new TwitterTaskInfo().setConfiguration(ImmutableMap.copyOf(params));\n+\n+    // Avoid hitting per-host scheduling constraints.\n+    task.addToConstraints(ConfigurationManager.hostLimitConstraint(100));\n+    return task;\n   }\n \n   private static TwitterTaskInfo productionTask(String... additionalParams) {\n@@ -2059,22 +2077,4 @@ public void changeStatus(String taskId, ScheduleStatus status, @Nullable String\n   private static final ImmutableSet<Veto> ALWAYS_VETO = ImmutableSet.of(new Veto(\"Fake veto\"));\n \n   private static final ImmutableSet<Veto> NO_VETO = ImmutableSet.of();\n-\n-  private void expectOffer(boolean passFilter) {\n-    expect(executorPulseMonitor.isAlive(EasyMock.<ExecutorKey>anyObject())).andReturn(true);\n-    expect(schedulingFilter.filter(EasyMock.<Resources>anyObject(), EasyMock.<Optional<String>>anyObject(), EasyMock.<TwitterTaskInfo>anyObject())).\n-        andReturn(passFilter ? NO_VETO : ALWAYS_VETO);\n-  }\n-\n-  private IExpectationSetters<Set<Veto>> expectFiltering(final boolean filter) {\n-    return expect(schedulingFilter.filter(EasyMock.<Resources>anyObject(),\n-        EasyMock.<Optional<String>>anyObject(),\n-        EasyMock.<TwitterTaskInfo>anyObject())).andAnswer(\n-        new IAnswer<Set<Veto>>() {\n-          @Override public Set<Veto> answer() {\n-            return filter? ALWAYS_VETO : NO_VETO;\n-          }\n-        }\n-    );\n-  }\n }",
                "raw_url": "https://github.com/apache/aurora/raw/10ed36a7477282b5dac35ca9ba82732eddf47a2f/tests/java/com/twitter/mesos/scheduler/BaseSchedulerCoreImplTest.java",
                "sha": "72e2bdb22b6e3d2bd222c058f1004149fd744669",
                "status": "modified"
            }
        ],
        "message": "Reproduced SchedulingFilter NPE in test and fixed.",
        "parent": "https://github.com/apache/aurora/commit/372f50c28a1dd5e8adb2d25149a04b0f995b1177",
        "repo": "aurora",
        "unit_tests": [
            "ConfigurationManagerTest.java"
        ]
    },
    "aurora_91ddb07": {
        "bug_id": "aurora_91ddb07",
        "commit": "https://github.com/apache/aurora/commit/91ddb075cf37cc15cee9c2b15cff0f71a950d551",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aurora/blob/91ddb075cf37cc15cee9c2b15cff0f71a950d551/src/main/java/org/apache/aurora/scheduler/cron/quartz/AuroraCronJob.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/aurora/contents/src/main/java/org/apache/aurora/scheduler/cron/quartz/AuroraCronJob.java?ref=91ddb075cf37cc15cee9c2b15cff0f71a950d551",
                "deletions": 2,
                "filename": "src/main/java/org/apache/aurora/scheduler/cron/quartz/AuroraCronJob.java",
                "patch": "@@ -154,9 +154,9 @@ void doExecute(JobExecutionContext context) throws JobExecutionException {\n       if (killFollowups.contains(key)) {\n         context.getJobDetail().getJobDataMap().remove(path);\n         killFollowups.remove(key);\n-        LOG.info(\"Resetting job context for cron \" + path);\n+        LOG.info(\"Resetting job context for cron {}\", path);\n       } else {\n-        LOG.info(\"Ignoring trigger as another concurrent run is active for cron \" + path);\n+        LOG.info(\"Ignoring trigger as another concurrent run is active for cron {}\", path);\n         return;\n       }\n     }",
                "raw_url": "https://github.com/apache/aurora/raw/91ddb075cf37cc15cee9c2b15cff0f71a950d551/src/main/java/org/apache/aurora/scheduler/cron/quartz/AuroraCronJob.java",
                "sha": "5873983479c39a011eb363f7fd442867f0794b17",
                "status": "modified"
            }
        ],
        "message": "Fix invalid logging that was causing pmd to NPE.\n\nReviewed at https://reviews.apache.org/r/54428/",
        "parent": "https://github.com/apache/aurora/commit/4bc5246149f296b14dc520bedd71747fdb2578fb",
        "repo": "aurora",
        "unit_tests": [
            "AuroraCronJobTest.java"
        ]
    }
}