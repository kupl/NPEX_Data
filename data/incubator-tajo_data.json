[{"commit": "https://github.com/apache/incubator-tajo/commit/128d9c8904f5b1541575320a8f7309c5e4e67192", "parent": "https://github.com/apache/incubator-tajo/commit/5b33b87c38a536949920c1955a9bb26e16c1e9c8", "message": "Fixed NPE bugs of Repartitioner.", "bug_id": "incubator-tajo_1", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java", "sha": "13d1b7ccb56811f0a4d11f4a4b5c7dc82d13bc62", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -410,7 +410,9 @@ public static String createBasicFetchUri(String hostName, int port,\n \n     List<IntermediateEntry> partitions = new ArrayList<>();\n     for (QueryUnit tasks : childSubQuery.getQueryUnits()) {\n-      partitions.addAll(tasks.getIntermediateData());\n+      if (tasks.getIntermediateData() != null) {\n+        partitions.addAll(tasks.getIntermediateData());\n+      }\n     }\n \n     Fragment frag = new Fragment(scan.getTableId(), tablePath,", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java", "sha": "704832ac9f3601b51851e5b5375f1853eb79b1a5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -271,7 +271,7 @@ public ContainerLaunchContext createContainerLaunchContext(TaskRunnerLaunchEvent\n     Vector<CharSequence> vargs = new Vector<>(30);\n \n     // Set java executable command\n-    LOG.info(\"Setting up app master command\");\n+    //LOG.info(\"Setting up app master command\");\n     vargs.add(\"${JAVA_HOME}\" + \"/bin/java\");\n     // Set Xmx based on am memory size\n     vargs.add(\"-Xmx2000m\");", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java", "sha": "4ed4e084ea276ac67d3d17ef655af36c4f889961", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -313,7 +313,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n           if (leafTasks.contains(tId)) {\n             leafTasks.remove(tId);\n             attemptId = tId;\n-            LOG.info(attemptId + \" Assigned based on host match \" + hostName);\n+            //LOG.info(attemptId + \" Assigned based on host match \" + hostName);\n             hostLocalAssigned++;\n             break;\n           }\n@@ -330,7 +330,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n             if (leafTasks.contains(tId)) {\n               leafTasks.remove(tId);\n               attemptId = tId;\n-              LOG.info(attemptId + \"Assigned based on rack match \" + rack);\n+              //LOG.info(attemptId + \"Assigned based on rack match \" + rack);\n               rackLocalAssigned++;\n               break;\n             }\n@@ -340,7 +340,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n           if (attemptId == null && leafTaskNum() > 0) {\n             attemptId = leafTasks.iterator().next();\n             leafTasks.remove(attemptId);\n-            LOG.info(attemptId + \" Assigned based on * match\");\n+            //LOG.info(attemptId + \" Assigned based on * match\");\n           }\n         }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java"}, {"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java", "sha": "16ebc4bc48dc833a40238f07f07568c6e05d2ac9", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -171,15 +171,17 @@ protected AMResponse makeRemoteRequest() throws YarnException, YarnRemoteExcepti\n     //LOG.info(\"Response Id: \" + response.getResponseId());\n     LOG.info(\"Available Resource: \" + response.getAvailableResources());\n     LOG.info(\"Num of Allocated Containers: \" + response.getAllocatedContainers().size());\n-    LOG.info(\"================================================================\");\n-    for (Container container : response.getAllocatedContainers()) {\n-      LOG.info(\"> Container Id: \" + container.getId());\n-      LOG.info(\"> Node Id: \" + container.getNodeId());\n-      LOG.info(\"> Resource (Mem): \" + container.getResource().getMemory());\n-      LOG.info(\"> State : \" + container.getState());\n-      LOG.info(\"> Priority: \" + container.getPriority());\n+    if (response.getAllocatedContainers().size() > 0) {\n+      LOG.info(\"================================================================\");\n+      for (Container container : response.getAllocatedContainers()) {\n+        LOG.info(\"> Container Id: \" + container.getId());\n+        LOG.info(\"> Node Id: \" + container.getNodeId());\n+        LOG.info(\"> Resource (Mem): \" + container.getResource().getMemory());\n+        LOG.info(\"> State : \" + container.getState());\n+        LOG.info(\"> Priority: \" + container.getPriority());\n+      }\n+      LOG.info(\"================================================================\");\n     }\n-    LOG.info(\"================================================================\");\n     /*\n     LOG.info(\"Reboot: \" + response.getReboot());\n     LOG.info(\"Num of Updated Node: \" + response.getUpdatedNodes());", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java", "sha": "1cf67dad8f2f77d652087753b81946986c9eb0ed", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -362,7 +362,6 @@ public void run() {\n         this.executor.init();\n         while(executor.next() != null && !killed) {\n           ++progress;\n-          System.out.println(\"ROW PROCEED: \" + progress);\n         }\n         this.executor.close();\n       }", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java"}, {"additions": 11, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java", "sha": "aea241c87bac02ec76129470db840bdf07632c2f", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -38,12 +38,14 @@\n import tajo.SubQueryId;\n import tajo.TajoProtos.TaskAttemptState;\n import tajo.conf.TajoConf.ConfVars;\n+import tajo.engine.MasterWorkerProtos;\n import tajo.engine.MasterWorkerProtos.QueryUnitRequestProto;\n import tajo.engine.query.QueryUnitRequestImpl;\n import tajo.ipc.MasterWorkerProtocol;\n import tajo.ipc.MasterWorkerProtocol.MasterWorkerProtocolService;\n import tajo.ipc.MasterWorkerProtocol.MasterWorkerProtocolService.Interface;\n import tajo.rpc.CallFuture2;\n+import tajo.rpc.NullCallback;\n import tajo.rpc.ProtoAsyncRpcClient;\n import tajo.util.TajoIdUtils;\n \n@@ -257,13 +259,22 @@ public void run() {\n                     LOG.info(\"Accumulated Received Task: \" + (++receivedNum));\n                     QueryUnitAttemptId taskAttemptId =\n                         new QueryUnitAttemptId(taskRequest.getId());\n+                    if (tasks.containsKey(taskAttemptId)) {\n+                      MasterWorkerProtos.TaskFatalErrorReport.Builder builder =\n+                      MasterWorkerProtos.TaskFatalErrorReport.newBuilder()\n+                          .setErrorMessage(\"Duplicate Task Attempt: \" +\n+                          taskAttemptId);\n+                      master.fatalError(null, builder.build(), NullCallback.get());\n+                      continue;\n+                    }\n                     Path taskTempDir = localFS.makeQualified(\n                         lDirAllocator.getLocalPathForWrite(baseDir +\n                             \"/\" + taskAttemptId.getQueryUnitId().getId()\n                             + \"_\" + taskAttemptId.getId(), conf));\n \n                     Task2 task = new Task2(taskAttemptId, workerContext, master,\n                         new QueryUnitRequestImpl(taskRequest), taskTempDir);\n+                    tasks.put(taskAttemptId, task);\n                     task.init();\n                     if (task.hasFetchPhase()) {\n                       task.fetch(); // The fetch is performed in an asynchronous way.", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/128d9c8904f5b1541575320a8f7309c5e4e67192/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java", "sha": "c54f631bc603103dec9c89d0e5c6bf8adfe3e352", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java?ref=128d9c8904f5b1541575320a8f7309c5e4e67192", "patch": "@@ -77,11 +77,10 @@ public Path initTableBase(TableMeta meta, String tableName)\n \tpublic Path initLocalTableBase(Path tablePath, TableMeta meta) throws IOException {\n \t  FileSystem fs = FileSystem.getLocal(conf);\n     if (fs.exists(tablePath)) {\n-      //throw new AlreadyExistsStorageException(tablePath);\n-      fs.delete(tablePath, true);\n+      throw new AlreadyExistsStorageException(tablePath);\n+    } else {\n+      fs.mkdirs(tablePath);\n     }\n-\n-    fs.mkdirs(tablePath);\n     Path dataDir = new Path(tablePath,\"data\");\n \n     if (meta != null) {", "filename": "tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/48a833f3ef349da6074994d509c4da1d32a1e767", "parent": "https://github.com/apache/incubator-tajo/commit/4f70ea468b3895a0724bb39fdc5e21c24174cfa7", "message": "#84 - DDL statements cause NPE", "bug_id": "incubator-tajo_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-common/src/main/java/tajo/util/TajoIdUtils.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-common/src/main/java/tajo/util/TajoIdUtils.java", "sha": "34f63af72bbb00c7c6caacb61b5d47826c5fa0be", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-common/src/main/java/tajo/util/TajoIdUtils.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -27,6 +27,10 @@\n  * @author Hyunsik Choi\n  */\n public class TajoIdUtils {\n+  /** It is mainly for DDL statements which don's have any query id. */\n+  public static final QueryId NullQueryId =\n+      TajoIdUtils.createQueryId(BuilderUtils.newApplicationId(0, 0), 0);\n+\n   public static QueryId createQueryId(ApplicationId appId, int attemptId) {\n     return newQueryId(appId, attemptId);\n   }", "filename": "tajo-common/src/main/java/tajo/util/TajoIdUtils.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java", "sha": "5210e35fc400b15f25c65bfd6dfac7887bd46ca2", "changes": 30, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -9,12 +9,13 @@\n import tajo.QueryId;\n import tajo.catalog.Column;\n import tajo.catalog.TableDesc;\n+import tajo.client.ClientProtocol;\n import tajo.client.TajoClient;\n import tajo.conf.TajoConf;\n import tajo.conf.TajoConf.ConfVars;\n import tajo.master.cluster.ServerName;\n-import tajo.master.cluster.ServerNodeTracker;\n import tajo.util.FileUtil;\n+import tajo.util.TajoIdUtils;\n \n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -29,12 +30,9 @@\n public class TajoCli {\n   private final TajoConf conf;\n   private static final Options options;\n-  private ServerNodeTracker masterTracker;\n   private TajoClient client;\n \n-  private String zkAddr;\n   private String entryAddr;\n-  private static final int WAIT_TIME = 3000;\n   private static final int PRINT_LIMIT = 24;\n \n   private ConsoleReader reader;\n@@ -131,11 +129,19 @@ public int executeShell() throws Exception {\n       } else if (cmd[0].equalsIgnoreCase(\"history\")) {\n \n       } else {\n-        QueryId queryId = client.executeQuery(line);\n-        if (queryId != null) {\n-          getQueryResult(queryId);\n+        ClientProtocol.SubmitQueryRespose response = client.executeQuery(line);\n+\n+        if (response.getResultCode() == ClientProtocol.ResultCode.OK) {\n+          QueryId queryId = new QueryId(response.getQueryId());\n+          if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+            sout.println(\"OK\");\n+          } else {\n+            getQueryResult(queryId);\n+          }\n         } else {\n-          sout.println(client.getErrorMessage());\n+        if (response.hasErrorMessage()) {\n+          sout.println(response.getErrorMessage());\n+        }\n         }\n       }\n     }\n@@ -145,13 +151,9 @@ public int executeShell() throws Exception {\n     return 0;\n   }\n \n-  private void executeQuery(String tql) {\n-\n-  }\n-\n   private void getQueryResult(QueryId queryId) {\n     // if query is empty string\n-    if (queryId.equals(\"\")) {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n       return;\n     }\n \n@@ -177,7 +179,7 @@ private void getQueryResult(QueryId queryId) {\n           sout.print(columnValue);\n         }\n         sout.println();\n-        sout.flush();;\n+        sout.flush();\n         numOfPrintedRows++;\n         if (numOfPrintedRows >= PRINT_LIMIT) {\n           sout.print(\"continue... ('q' is quit)\");", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java"}, {"additions": 69, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java", "sha": "1f2a93e5e184ae5a4a2a3a3ef1faae207056b837", "changes": 101, "status": "modified", "deletions": 32, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2012 Database Lab., Korea Univ.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package tajo.client;\n \n import com.google.protobuf.ServiceException;\n@@ -16,6 +32,7 @@\n import tajo.engine.query.ResultSetImpl;\n import tajo.rpc.ProtoBlockingRpcClient;\n import tajo.rpc.protocolrecords.PrimitiveProtos.StringProto;\n+import tajo.util.TajoIdUtils;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -41,13 +58,11 @@ public TajoClient(TajoConf conf) throws IOException {\n \n   public TajoClient(InetSocketAddress addr) throws IOException {\n     this.conf = new TajoConf();\n-    this.conf.setBoolVar(ConfVars.CLUSTER_DISTRIBUTED, true);\n     connect(addr);\n   }\n \n   public TajoClient(String hostname, int port) throws IOException {\n     this.conf = new TajoConf();\n-    this.conf.setBoolVar(ConfVars.CLUSTER_DISTRIBUTED, true);\n     connect(NetUtils.createSocketAddr(hostname, port));\n   }\n \n@@ -59,7 +74,7 @@ private void connect(InetSocketAddress addr) throws IOException {\n       throw new IOException(e);\n     }\n \n-    LOG.info(\"Connected to tajo cluster (\" +\n+    LOG.info(\"connected to tajo cluster (\" +\n         tajo.util.NetUtils.getIpPortString(addr) + \")\");\n   }\n \n@@ -71,30 +86,38 @@ public boolean isConnected() {\n     return client.isConnected();\n   }\n \n-  private String errorMessage;\n-\n-  public QueryId executeQuery(String tql) throws ServiceException {\n+  /**\n+   * It submits a query statement and get a response immediately.\n+   * The response only contains a query id, and submission status.\n+   * In order to get the result, you should use {@link #getQueryResult(tajo.QueryId)}\n+   * or {@link #getQueryResultAndWait(tajo.QueryId)}.\n+   */\n+  public SubmitQueryRespose executeQuery(String tql) throws ServiceException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n-    SubmitQueryRespose response = service.submitQuery(null, builder.build());\n-    if (response.hasErrorMessage()) {\n-      errorMessage = response.getErrorMessage();\n-      return null;\n-    }\n-    return new QueryId(response.getQueryId());\n-  }\n \n-  public String getErrorMessage() {\n-    return errorMessage;\n+    return service.submitQuery(null, builder.build());\n   }\n \n-  public ResultSet executeQueryAndWait(String tql)\n+  /**\n+   * It submits a query statement and get a response.\n+   * The main difference from {@link #executeQuery(String)}\n+   * is a blocking method. So, this method is wait for\n+   * the finish of the submitted query.\n+   *\n+   * @return If failed, return null.\n+   */\n+  public ResultSet executeQueryAndGetResult(String tql)\n       throws ServiceException, IOException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n     SubmitQueryRespose response = service.submitQuery(null, builder.build());\n+    QueryId queryId = new QueryId(response.getQueryId());\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n \n-    return getQueryResultAndWait(new QueryId(response.getQueryId()));\n+    return getQueryResultAndWait(queryId);\n   }\n \n   public QueryStatus getQueryStatus(QueryId queryId) throws ServiceException {\n@@ -116,18 +139,24 @@ private static boolean isQueryRunnning(QueryState state) {\n \n   public ResultSet getQueryResult(QueryId queryId)\n       throws ServiceException, IOException {\n-    TableDesc tableDesc = getQueryResultDesc(queryId);\n-    ResultSet resultSet = new ResultSetImpl(conf, tableDesc.getPath());\n-    return resultSet;\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n+\n+    TableDesc tableDesc = getResultDesc(queryId);\n+    return new ResultSetImpl(conf, tableDesc.getPath());\n   }\n \n   public ResultSet getQueryResultAndWait(QueryId queryId)\n       throws ServiceException, IOException {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n     QueryStatus status = getQueryStatus(queryId);\n \n     while(status != null && isQueryRunnning(status.getState())) {\n       try {\n-        Thread.sleep(1000);\n+        Thread.sleep(500);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n@@ -144,26 +173,26 @@ public ResultSet getQueryResultAndWait(QueryId queryId)\n     }\n   }\n \n-  public TableDesc getQueryResultDesc(QueryId queryId) throws ServiceException {\n+  public TableDesc getResultDesc(QueryId queryId) throws ServiceException {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n+\n     GetQueryResultRequest.Builder builder = GetQueryResultRequest.newBuilder();\n     builder.setQueryId(queryId.getProto());\n     GetQueryResultResponse response = service.getQueryResult(null,\n         builder.build());\n \n-    TableDesc tableDesc = TCatUtil.newTableDesc(response.getTableDesc());\n-    return tableDesc;\n+    return TCatUtil.newTableDesc(response.getTableDesc());\n   }\n \n   public boolean updateQuery(String tql) throws ServiceException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n \n-    if (service.updateQuery(null, builder.build()).getResultCode()\n-        == ResultCode.OK) {\n-      return true;\n-    } else {\n-      return false;\n-    }\n+    ResultCode resultCode =\n+        service.updateQuery(null, builder.build()).getResultCode();\n+    return resultCode == ResultCode.OK;\n   }\n \n   public boolean existTable(String name) throws ServiceException {\n@@ -177,11 +206,15 @@ public TableDesc attachTable(String name, String path)\n     AttachTableRequest.Builder builder = AttachTableRequest.newBuilder();\n     builder.setName(name);\n     builder.setPath(path);\n-    TableResponse res = null;\n-    res = service.attachTable(null, builder.build());\n+    TableResponse res = service.attachTable(null, builder.build());\n     return TCatUtil.newTableDesc(res.getTableDesc());\n   }\n \n+  public TableDesc attachTable(String name, Path path)\n+      throws ServiceException {\n+    return attachTable(name, path.toString());\n+  }\n+\n   public boolean detachTable(String name) throws ServiceException {\n     StringProto.Builder builder = StringProto.newBuilder();\n     builder.setValue(name);\n@@ -208,6 +241,10 @@ public boolean dropTable(String name) throws ServiceException {\n     return null;\n   }\n \n+  /**\n+   * Get a list of table names. All table and column names are\n+   * represented as lower-case letters.\n+   */\n   public List<String> getTableList() throws ServiceException {\n     GetTableListRequest.Builder builder = GetTableListRequest.newBuilder();\n     GetTableListResponse res = service.getTableList(null, builder.build());", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java"}, {"additions": 21, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java", "sha": "5892d03ed4b7df2b2ecdf892ac92caf3ff0ab7d7", "changes": 31, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -25,6 +25,7 @@\n import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationAttemptIdProto;\n import org.apache.hadoop.yarn.service.AbstractService;\n import tajo.QueryId;\n+import tajo.TajoProtos;\n import tajo.catalog.*;\n import tajo.catalog.exception.AlreadyExistsTableException;\n import tajo.catalog.exception.NoSuchTableException;\n@@ -42,6 +43,7 @@\n import tajo.rpc.protocolrecords.PrimitiveProtos.BoolProto;\n import tajo.rpc.protocolrecords.PrimitiveProtos.StringProto;\n import tajo.storage.StorageUtil;\n+import tajo.util.TajoIdUtils;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -160,6 +162,9 @@ public GetQueryResultResponse getQueryResult(RpcController controller,\n                                                  GetQueryResultRequest request)\n         throws ServiceException {\n       QueryId queryId = new QueryId(request.getQueryId());\n+      if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+\n+      }\n       Query query = context.getQuery(queryId).getContext().getQuery();\n \n       GetQueryResultResponse.Builder builder\n@@ -190,21 +195,27 @@ public GetQueryStatusResponse getQueryStatus(RpcController controller,\n                                                  GetQueryStatusRequest request)\n         throws ServiceException {\n \n-      QueryId queryId = new QueryId(request.getQueryId());\n-      Query query = context.getQuery(queryId).getContext().getQuery();\n-\n       GetQueryStatusResponse.Builder builder\n           = GetQueryStatusResponse.newBuilder();\n-\n+      QueryId queryId = new QueryId(request.getQueryId());\n       builder.setQueryId(request.getQueryId());\n-      if (query != null) {\n+\n+      if (queryId.equals(TajoIdUtils.NullQueryId)) {\n         builder.setResultCode(ResultCode.OK);\n-        builder.setState(query.getState());\n-        builder.setProgress(query.getProgress());\n-        builder.setExecutionTime(System.currentTimeMillis() - query.getStartTime());\n+        builder.setState(TajoProtos.QueryState.QUERY_SUCCEEDED);\n+        builder.setProgress(1.0f);\n+        builder.setExecutionTime(0);\n       } else {\n-        builder.setResultCode(ResultCode.ERROR);\n-        builder.setErrorMessage(\"No such query: \" + queryId.toString());\n+        Query query = context.getQuery(queryId).getContext().getQuery();\n+        if (query != null) {\n+          builder.setResultCode(ResultCode.OK);\n+          builder.setState(query.getState());\n+          builder.setProgress(query.getProgress());\n+          builder.setExecutionTime(System.currentTimeMillis() - query.getStartTime());\n+        } else {\n+          builder.setResultCode(ResultCode.ERROR);\n+          builder.setErrorMessage(\"No such query: \" + queryId.toString());\n+        }\n       }\n \n       return builder.build();", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java", "sha": "9a921da6e7f29d0095cbb69940b618202da64e54", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -154,7 +154,7 @@ public QueryId executeQuery(String tql)\n     if (plan.getSubNode().getType() == ExprType.CREATE_TABLE) {\n       createTable(plan);\n \n-      return null;\n+      return TajoIdUtils.NullQueryId;\n     } else {\n       ApplicationAttemptId appAttemptId = submitQuery();\n       QueryId queryId = TajoIdUtils.createQueryId(appAttemptId);", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java", "sha": "6f558e4da57768806517c4022fd8d58fb40f8000", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -51,7 +51,7 @@ public void setup(String[] names,\n   }\n \n   public ResultSet execute(String query) throws IOException, ServiceException {\n-    return client.executeQueryAndWait(query);\n+    return client.executeQueryAndGetResult(query);\n   }\n \n   public void shutdown() throws IOException {", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java", "sha": "4c8381aa8500b6371662708b823d1442a8307777", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -431,7 +431,7 @@ public static ResultSet runInLocal(String[] tableNames,\n       client.createTable(tableNames[i], new Path(tableDir.getAbsolutePath()), meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }\n@@ -463,7 +463,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }\n@@ -498,7 +498,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java", "sha": "f5b53cfdf7f77e5e028a4de3240d0523316ae282", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -472,7 +472,7 @@ public static ResultSet runInLocal(String[] tableNames,\n       client.createTable(tableNames[i], new Path(tableDir.getAbsolutePath()), meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     client.close();\n     util.shutdownMiniCluster();\n     return res;\n@@ -505,7 +505,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     client.close();\n     util.shutdownMiniCluster();\n     return res;\n@@ -541,7 +541,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     client.close();\n     return res;", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java", "sha": "03ba95485429a8d10abf48919b3ea59e67b90334", "changes": 21, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -93,18 +93,19 @@ public static Path buildTestDir(String dir) throws IOException {\n     mockupMeta = TCatUtil.newTableMeta(mockupSchema, StoreType.CSV);\n \t}\n \n-\tpublic static void writeTmpTable(TajoConf conf, String parent,\n-\t    String tbName, boolean writeMeta) throws IOException {\n-\t  StorageManager sm = StorageManager.get(conf, parent);\n+  public static void writeTmpTable(TajoConf conf, Path path,\n+                                   String tableName, boolean writeMeta)\n+      throws IOException {\n+    StorageManager sm = StorageManager.get(conf, path);\n \n     Appender appender;\n     if (writeMeta) {\n-      appender = sm.getTableAppender(mockupMeta, tbName);\n+      appender = sm.getTableAppender(mockupMeta, tableName);\n     } else {\n       FileSystem fs = sm.getFileSystem();\n-      fs.mkdirs(StorageUtil.concatPath(parent, tbName, \"data\"));\n+      fs.mkdirs(StorageUtil.concatPath(path, tableName, \"data\"));\n       appender = sm.getAppender(mockupMeta,\n-          StorageUtil.concatPath(parent, tbName, \"data\", \"tb000\"));\n+          StorageUtil.concatPath(path, tableName, \"data\", \"tb000\"));\n     }\n     int deptSize = 10000;\n     int tupleNum = 100;\n@@ -117,6 +118,11 @@ public static void writeTmpTable(TajoConf conf, String parent,\n       appender.addTuple(tuple);\n     }\n     appender.close();\n+  }\n+\n+\tpublic static void writeTmpTable(TajoConf conf, String parent,\n+\t    String tableName, boolean writeMeta) throws IOException {\n+    writeTmpTable(conf, new Path(parent), tableName, writeMeta);\n \t}\n \n   private TajoConf conf;\n@@ -151,8 +157,7 @@ public ResultSet run(String [] tableNames, File [] tables, Schema [] schemas, St\n     PhysicalPlanner phyPlanner = new PhysicalPlannerImpl(conf, sm);\n     PhysicalExec exec = phyPlanner.createPlan(ctx, plan);\n \n-    ResultSet result = new ResultSetImpl(conf, new File(workDir, \"out\").getAbsolutePath());\n-    return result;\n+    return new ResultSetImpl(conf, new File(workDir, \"out\").getAbsolutePath());\n   }\n \n   public static File createTmpTestDir() {", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java"}, {"additions": 48, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java", "previous_filename": "tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoCluster.java", "sha": "632ba0827b966314f70fd7873f91355f9c5b321c", "changes": 74, "status": "renamed", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -13,18 +13,22 @@\n import tajo.WorkerTestingUtil;\n import tajo.catalog.TableDesc;\n import tajo.conf.TajoConf;\n-import tajo.storage.StorageManager;\n+import tajo.storage.StorageUtil;\n+import tajo.util.CommonTestingUtil;\n \n import java.io.IOException;\n import java.util.Set;\n \n import static org.junit.Assert.*;\n \n @Category(IntegrationTest.class)\n-public class TestTajoCluster {\n+public class TestTajoClient {\n   private static TajoTestingCluster util;\n   private static TajoConf conf;\n   private static TajoClient tajo;\n+  private static String TEST_PATH = \"target/test-data/\"\n+      + TestTajoClient.class.getName();\n+  private static Path testDir;\n \n   @BeforeClass\n   public static void setUp() throws Exception {\n@@ -33,6 +37,8 @@ public static void setUp() throws Exception {\n     conf = util.getConfiguration();\n     Thread.sleep(3000);\n     tajo = new TajoClient(conf);\n+\n+    testDir = CommonTestingUtil.buildTestDir(TEST_PATH);\n   }\n \n   @AfterClass\n@@ -41,51 +47,66 @@ public static void tearDown() throws Exception {\n     tajo.close();\n   }\n \n+  private static Path writeTmpTable(String tableName) throws IOException {\n+    Path tablePath = StorageUtil.concatPath(testDir, tableName);\n+    WorkerTestingUtil.writeTmpTable(conf, testDir, tableName, true);\n+    return tablePath;\n+  }\n+\n   @Test\n   public final void testAttachTable() throws IOException, ServiceException {\n     final String tableName = \"attach\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName, true);\n+    Path tablePath = writeTmpTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n-    tajo.attachTable(tableName, \"/tajo/data/attach\");\n+    tajo.attachTable(tableName, tablePath);\n     assertTrue(tajo.existTable(tableName));\n     tajo.detachTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n   }\n \n   @Test\n   public final void testUpdateQuery() throws IOException, ServiceException {\n-    TajoConf conf = util.getConfiguration();\n-    final String tableName = \"updateQuery\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n-    StorageManager sm = StorageManager.get(conf, \"/tmp\");\n-    FileSystem fs = sm.getFileSystem();\n-    assertTrue(fs.exists(new Path(\"/tmp\", tableName)));\n+    final String tableName = \"testUpdateQuery\";\n+    Path tablePath = writeTmpTable(tableName);\n \n     assertFalse(tajo.existTable(tableName));\n     String tql =\n         \"create table \" + tableName + \" (deptname string, score int) \"\n-            + \"using csv location '/tmp/\" + tableName + \"'\";\n+            + \"using csv location '\" + tablePath + \"'\";\n     tajo.updateQuery(tql);\n     assertTrue(tajo.existTable(tableName));\n   }\n \n   @Test\n   public final void testCreateAndDropTable()\n       throws IOException, ServiceException {\n-    final String tableName = \"create\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n-    StorageManager sm = StorageManager.get(conf, \"/tmp\");\n-    FileSystem fs = sm.getFileSystem();\n-    assertTrue(fs.exists(new Path(\"/tmp\", tableName)));\n+    final String tableName = \"testCreateAndDropTable\";\n+    Path tablePath = writeTmpTable(tableName);\n+\n     assertFalse(tajo.existTable(tableName));\n-    tajo.createTable(tableName, new Path(\"/tmp\", tableName),\n-        WorkerTestingUtil.mockupMeta);\n+    tajo.createTable(tableName, tablePath, WorkerTestingUtil.mockupMeta);\n     assertTrue(tajo.existTable(tableName));\n     tajo.dropTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n-    assertFalse(fs.exists(new Path(\"/tmp\", tableName)));\n+    FileSystem fs = tablePath.getFileSystem(conf);\n+    assertFalse(fs.exists(tablePath));\n+  }\n+\n+  @Test\n+  public final void testDDLByExecuteQuery() throws IOException, ServiceException {\n+    TajoConf conf = util.getConfiguration();\n+    final String tableName = \"testDDLByExecuteQuery\";\n+    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n+\n+    assertFalse(tajo.existTable(tableName));\n+    String tql =\n+        \"create table \" + tableName + \" (deptname string, score int) \"\n+            + \"using csv location '/tmp/\" + tableName + \"'\";\n+    tajo.executeQueryAndGetResult(tql);\n+    assertTrue(tajo.existTable(tableName));\n   }\n \n+  // disabled\n   public final void testGetClusterInfo() throws IOException, InterruptedException {\n     assertEquals(1,tajo.getClusterInfo().size());\n   }\n@@ -94,15 +115,16 @@ public final void testGetClusterInfo() throws IOException, InterruptedException\n   public final void testGetTableList() throws IOException, ServiceException {\n     final String tableName1 = \"table1\";\n     final String tableName2 = \"table2\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName1, true);\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName2, true);\n+    Path table1Path = writeTmpTable(tableName1);\n+    Path table2Path = writeTmpTable(tableName2);\n+\n     assertFalse(tajo.existTable(tableName1));\n     assertFalse(tajo.existTable(tableName2));\n-    tajo.attachTable(tableName1, \"/tajo/data/\"+tableName1);\n+    tajo.attachTable(tableName1, table1Path);\n     assertTrue(tajo.existTable(tableName1));\n     Set<String> tables = Sets.newHashSet(tajo.getTableList());\n     assertTrue(tables.contains(tableName1));\n-    tajo.attachTable(tableName2, \"/tajo/data/\"+tableName2);\n+    tajo.attachTable(tableName2, table2Path);\n     assertTrue(tajo.existTable(tableName2));\n     tables = Sets.newHashSet(tajo.getTableList());\n     assertTrue(tables.contains(tableName1));\n@@ -111,10 +133,10 @@ public final void testGetTableList() throws IOException, ServiceException {\n \n   @Test\n   public final void testGetTableDesc() throws IOException, ServiceException {\n-    final String tableName1 = \"tabledesc\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName1, true);\n+    final String tableName1 = \"table3\";\n+    Path tablePath = writeTmpTable(tableName1);\n     assertFalse(tajo.existTable(tableName1));\n-    tajo.attachTable(tableName1, \"/tajo/data/\"+tableName1);\n+    tajo.attachTable(tableName1, tablePath);\n     assertTrue(tajo.existTable(tableName1));\n     TableDesc desc = tajo.getTableDesc(tableName1);\n     assertNotNull(desc);", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/48a833f3ef349da6074994d509c4da1d32a1e767/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java", "sha": "8447cdf2c9c03e5ccffa46041f2e0dc8bf9654c1", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java?ref=48a833f3ef349da6074994d509c4da1d32a1e767", "patch": "@@ -241,7 +241,7 @@ public void testCreateTable() throws Exception {\n   @Test\n   public void testScanQuery() throws Exception {\n \n-    ResultSet res = client.executeQueryAndWait(query[1]);\n+    ResultSet res = client.executeQueryAndGetResult(query[1]);\n \n     String deptname;\n     while (res.next()) {\n@@ -252,7 +252,7 @@ public void testScanQuery() throws Exception {\n \n   @Test\n   public void testGroupbyQuery() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[0]);\n+    ResultSet res = client.executeQueryAndGetResult(query[0]);\n \n     String deptname;\n     int year;\n@@ -267,7 +267,7 @@ public void testGroupbyQuery() throws Exception {\n \n   @Test\n   public void testJoin() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[2]);\n+    ResultSet res = client.executeQueryAndGetResult(query[2]);\n \n     String deptname;\n     Set<Integer> results;\n@@ -280,7 +280,7 @@ public void testJoin() throws Exception {\n \n   @Test\n   public void testSelectAfterJoin() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[4]);\n+    ResultSet res = client.executeQueryAndGetResult(query[4]);\n \n     String deptname;\n     Set<Integer> results;\n@@ -293,7 +293,7 @@ public void testSelectAfterJoin() throws Exception {\n \n   //@Test\n   public void testCubeby() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[5]);\n+    ResultSet res = client.executeQueryAndGetResult(query[5]);\n \n     String deptname;\n     int year;\n@@ -330,7 +330,7 @@ public void run() {\n       @Override\n       public void run() {\n         try {\n-          queryId[0] = client.executeQuery(query[0]);\n+          queryId[0] = new QueryId(client.executeQuery(query[0]).getQueryId());\n         } catch (Exception e) {\n           e.printStackTrace();\n         }", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "parent": "https://github.com/apache/incubator-tajo/commit/e47242e68e217f3d897ae897766f987a44657f7d", "message": "TAJO-641: NPE in HCatalogStore.addTable(). (jaehwa)", "bug_id": "incubator-tajo_3", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/CHANGES.txt", "sha": "ecd5eb9501e36f589adbe1ce644df028fdf7b02b", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "patch": "@@ -269,6 +269,8 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-641: NPE in HCatalogStore.addTable(). (jaehwa)\n+\n     TAJO-646: TajoClient is blocked while main thread finished.\n     (hyoungjunkim via jinho)\n ", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/Schema.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/Schema.java", "sha": "0c812f178d92b091d18404f5fb16624101d36d90", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/Schema.java?ref=e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "patch": "@@ -130,7 +130,10 @@ public Column getColumn(Column column) {\n    */\n   public Column getColumn(String name) {\n     String [] parts = name.split(\"\\\\.\");\n-    if (parts.length == 2) {\n+    // Some of the string can includes database name and table name and column name.\n+    // For example, it can be 'default.table1.id'.\n+    // Therefore, spilt string array length can be 3.\n+    if (parts.length >= 2) {\n       return getColumnByQName(name);\n     } else {\n       return getColumnByName(name);", "filename": "tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/Schema.java"}, {"additions": 60, "raw_url": "https://github.com/apache/incubator-tajo/raw/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStore.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStore.java", "sha": "d61837537b32d8a33f71c81dd007192e166af881", "changes": 80, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStore.java?ref=e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.tajo.catalog.store;\n \n+import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n@@ -39,6 +40,9 @@\n import org.apache.tajo.exception.InternalException;\n \n import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -47,17 +51,31 @@\n import static org.apache.tajo.catalog.proto.CatalogProtos.PartitionType;\n \n public class HCatalogStore extends CatalogConstants implements CatalogStore {\n-  public static final String CVSFILE_DELIMITER = \"csvfile.delimiter\";\n+  public static final String CSVFILE_DELIMITER = \"csvfile.delimiter\";\n+  public static final String CSVFILE_NULL = \"csvfile.null\";\n \n   protected final Log LOG = LogFactory.getLog(getClass());\n   protected Configuration conf;\n   private static final int CLIENT_POOL_SIZE = 2;\n   private final HCatalogStoreClientPool clientPool = new HCatalogStoreClientPool(0);\n+  private ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n \n   public HCatalogStore(final Configuration conf)\n       throws InternalException {\n     this.conf = conf;\n     try {\n+      // In unit test case, HCatalogStore has to set some hive configurations by force.\n+      // So, it checks caller class name and caller method name.\n+      long[] threadIds = threadBean.getAllThreadIds();\n+      for (long tid : threadIds) {\n+        ThreadInfo info = threadBean.getThreadInfo(tid, 5);\n+        for (StackTraceElement frame : info.getStackTrace()) {\n+          if (frame.toString().equals(\"org.apache.tajo.catalog.store.TestHCatalogStore.setUp\")) {\n+            clientPool.setParameters(this.conf);\n+          }\n+        }\n+      }\n+\n       clientPool.addClients(CLIENT_POOL_SIZE);\n     } catch (Exception e) {\n       e.printStackTrace();\n@@ -179,21 +197,28 @@ public boolean existTable(final String name) throws CatalogException {\n       Properties properties = table.getMetadata();\n       if (properties != null) {\n         // set field delimiter\n-        String fieldDelimiter = \"\", fileOutputformat = \"\";\n+        String fieldDelimiter = \"\", fileOutputformat = \"\", nullFormat = \"\";\n         if (properties.getProperty(serdeConstants.FIELD_DELIM) != null) {\n           fieldDelimiter = properties.getProperty(serdeConstants.FIELD_DELIM);\n         } else {\n           // if hive table used default row format delimiter, Properties doesn't have it.\n           // So, Tajo must set as follows:\n-          fieldDelimiter = \"\\\\001\";\n+          fieldDelimiter = \"\\u0001\";\n+        }\n+\n+        // set null format\n+        if (properties.getProperty(serdeConstants.SERIALIZATION_NULL_FORMAT) != null) {\n+          nullFormat = properties.getProperty(serdeConstants.SERIALIZATION_NULL_FORMAT);\n+        } else {\n+          nullFormat = \"\\\\N\";\n         }\n \n         // set file output format\n         fileOutputformat = properties.getProperty(\"file.outputformat\");\n         storeType = CatalogUtil.getStoreType(HCatalogUtil.getStoreType(fileOutputformat));\n-\n         if (storeType.equals(CatalogProtos.StoreType.CSV) ) {\n-          options.put(CVSFILE_DELIMITER, fieldDelimiter);\n+          options.put(CSVFILE_DELIMITER, StringEscapeUtils.escapeJava(fieldDelimiter));\n+          options.put(CSVFILE_NULL, StringEscapeUtils.escapeJava(nullFormat));\n         }\n \n         // set data size\n@@ -310,46 +335,61 @@ public final void addTable(final CatalogProtos.TableDescProto tableDesc) throws\n       //table.setOwner();\n \n       StorageDescriptor sd = new StorageDescriptor();\n+      sd.setParameters(new HashMap<String, String>());\n+      sd.setSerdeInfo(new SerDeInfo());\n+      sd.getSerdeInfo().setParameters(new HashMap<String, String>());\n+      sd.getSerdeInfo().setName(table.getTableName());\n \n       // if tajo set location method, thrift client make exception as follows:\n       // Caused by: MetaException(message:java.lang.NullPointerException)\n       // If you want to modify table path, you have to modify on Hive cli.\n-      //sd.setLocation(tableDesc.getPath().toString());\n+      // sd.setLocation(tableDesc.getPath().toString());\n \n       // set column information\n       ArrayList<FieldSchema> cols = new ArrayList<FieldSchema>(tableDesc.getSchema().getFieldsCount());\n-      for (CatalogProtos.ColumnProto col : tableDesc.getSchema().getFieldsList()) {\n-        cols.add(new FieldSchema(\n-            col.getName(),\n-            HCatalogUtil.getHiveFieldType(col.getDataType().getType().name()),\n-            \"\"));\n+\n+      for (CatalogProtos.ColumnProto eachField : tableDesc.getSchema().getFieldsList()) {\n+        cols.add(new FieldSchema( eachField.getName(), HCatalogUtil.getHiveFieldType(eachField.getDataType().getType().name()), \"\"));\n       }\n       sd.setCols(cols);\n \n+      // set partition keys\n+      if (tableDesc.getPartition() != null && tableDesc.getPartition().getPartitionType().equals(PartitionType.COLUMN)) {\n+        List<FieldSchema> partitionKeys = new ArrayList<FieldSchema>();\n+        for(CatalogProtos.ColumnProto eachPartitionKey: tableDesc.getPartition().getExpressionSchema().getFieldsList()) {\n+          partitionKeys.add(new FieldSchema( eachPartitionKey.getName(), HCatalogUtil.getHiveFieldType(eachPartitionKey.getDataType().getType().name()), \"\"));\n+        }\n+        table.setPartitionKeys(partitionKeys);\n+      }\n+\n       sd.setCompressed(false);\n+\n       if (tableDesc.getMeta().hasParams()) {\n         for (CatalogProtos.KeyValueProto entry: tableDesc.getMeta().getParams().getKeyvalList()) {\n           if (entry.getKey().equals(\"compression.codec\")) {\n             sd.setCompressed(true);\n-          } else if (entry.getKey().equals(CVSFILE_DELIMITER)) {\n-            sd.getSerdeInfo().getParameters().put(serdeConstants.FIELD_DELIM, entry.getValue());\n+          } else if (entry.getKey().equals(CSVFILE_NULL)) {\n+            sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_NULL_FORMAT, StringEscapeUtils.unescapeJava(entry.getValue()));\n+          } else if (entry.getKey().equals(CSVFILE_DELIMITER)) {\n+            String fieldDelimiter = entry.getValue();\n+\n+            // User can use an unicode for filed delimiter such as \\u0001, \\001.\n+            // In this case, java console will convert this value into \"\\\\u001\".\n+            // And hive will un-espace this value again.\n+            // As a result, user can use right field delimiter.\n+            // So, we have to un-escape this value.\n+            sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_FORMAT, StringEscapeUtils.unescapeJava(fieldDelimiter));\n+            sd.getSerdeInfo().getParameters().put(serdeConstants.FIELD_DELIM, StringEscapeUtils.unescapeJava(fieldDelimiter));\n           }\n         }\n       }\n \n-      sd.setParameters(new HashMap<String, String>());\n-      sd.setSerdeInfo(new SerDeInfo());\n-      sd.getSerdeInfo().setName(table.getTableName());\n-\n       if(tableDesc.getMeta().getStoreType().equals(CatalogProtos.StoreType.RCFILE)) {\n         sd.getSerdeInfo().setSerializationLib(org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.class.getName());\n       } else {\n         sd.getSerdeInfo().setSerializationLib(org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe.class.getName());\n       }\n \n-      sd.getSerdeInfo().setParameters(new HashMap<String, String>());\n-//      sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_FORMAT, \"1\");\n-\n       if(tableDesc.getMeta().getStoreType().equals(CatalogProtos.StoreType.RCFILE)) {\n         sd.setInputFormat(org.apache.hadoop.hive.ql.io.RCFileInputFormat.class.getName());\n       } else {", "filename": "tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStore.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStoreClientPool.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStoreClientPool.java", "sha": "0f0ea0495a9ef9030c68eccfb19af10d17af57ed", "changes": 16, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStoreClientPool.java?ref=e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "patch": "@@ -15,10 +15,14 @@\n \n \n import com.google.common.base.Preconditions;\n+import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n import org.apache.log4j.Logger;\n \n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n@@ -31,7 +35,7 @@\n   private final ConcurrentLinkedQueue<HCatalogStoreClient> clientPool =\n       new ConcurrentLinkedQueue<HCatalogStoreClient>();\n   private AtomicBoolean poolClosed = new AtomicBoolean(false);\n-  private final HiveConf hiveConf;\n+  private HiveConf hiveConf;\n \n   /**\n    * A wrapper around the HiveMetaStoreClient that manages interactions with the\n@@ -43,9 +47,7 @@\n \n     private HCatalogStoreClient(HiveConf hiveConf) {\n       try {\n-\n         LOG.info(\"Creating MetaStoreClient. Pool Size = \" + clientPool.size());\n-\n         this.hiveClient = new HiveMetaStoreClient(hiveConf);\n       } catch (Exception e) {\n         // Turn in to an unchecked exception\n@@ -99,6 +101,13 @@ public HCatalogStoreClientPool(int initialSize, HiveConf hiveConf) {\n     addClients(initialSize);\n   }\n \n+  public void setParameters(Configuration conf) {\n+    for( Iterator<Entry<String, String>> iter = conf.iterator(); iter.hasNext();) {\n+      Map.Entry<String, String> entry = iter.next();\n+      this.hiveConf.set(entry.getKey(), entry.getValue());\n+    }\n+  }\n+\n   /**\n    * Add numClients to the client pool.\n    */\n@@ -127,6 +136,7 @@ public HCatalogStoreClient getClient() {\n       client = new HCatalogStoreClient(hiveConf);\n     }\n     client.markInUse();\n+\n     return client;\n   }\n ", "filename": "tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/main/java/org/apache/tajo/catalog/store/HCatalogStoreClientPool.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/e47242e68e217f3d897ae897766f987a44657f7d/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/DummyListener.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/e47242e68e217f3d897ae897766f987a44657f7d/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/DummyListener.java", "sha": "a3c2dca5665f69c078a219911f3381db769c46f6", "changes": 97, "status": "removed", "deletions": 97, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/DummyListener.java?ref=e47242e68e217f3d897ae897766f987a44657f7d", "patch": "@@ -1,97 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.tajo.catalog.store;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.hive.metastore.MetaStoreEventListener;\n-import org.apache.hadoop.hive.metastore.api.MetaException;\n-import org.apache.hadoop.hive.metastore.events.*;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/** A dummy implementation for\n- * {@link org.apache.hadoop.hive.metastore.MetaStoreEventListener}\n- * for testing purposes.\n- */\n-public class DummyListener extends MetaStoreEventListener {\n-\n-  public static final List<ListenerEvent> notifyList = new ArrayList<ListenerEvent>();\n-\n-  /**\n-   * @return The last event received, or null if no event was received.\n-   */\n-  public static ListenerEvent getLastEvent() {\n-    if (notifyList.isEmpty()) {\n-      return null;\n-    } else {\n-      return notifyList.get(notifyList.size() - 1);\n-    }\n-  }\n-\n-  public DummyListener(Configuration config) {\n-    super(config);\n-  }\n-\n-  @Override\n-  public void onAddPartition(AddPartitionEvent partition) throws MetaException {\n-    notifyList.add(partition);\n-  }\n-\n-  @Override\n-  public void onCreateDatabase(CreateDatabaseEvent db) throws MetaException {\n-    notifyList.add(db);\n-  }\n-\n-  @Override\n-  public void onCreateTable(CreateTableEvent table) throws MetaException {\n-    notifyList.add(table);\n-  }\n-\n-  @Override\n-  public void onDropDatabase(DropDatabaseEvent db) throws MetaException {\n-    notifyList.add(db);\n-  }\n-\n-  @Override\n-  public void onDropPartition(DropPartitionEvent partition) throws MetaException {\n-    notifyList.add(partition);\n-  }\n-\n-  @Override\n-  public void onDropTable(DropTableEvent table) throws MetaException {\n-    notifyList.add(table);\n-  }\n-\n-  @Override\n-  public void onAlterTable(AlterTableEvent event) throws MetaException {\n-    notifyList.add(event);\n-  }\n-\n-  @Override\n-  public void onAlterPartition(AlterPartitionEvent event) throws MetaException {\n-    notifyList.add(event);\n-  }\n-\n-  @Override\n-  public void onLoadPartitionDone(LoadPartitionDoneEvent partEvent) throws MetaException {\n-    notifyList.add(partEvent);\n-  }\n-\n-}", "filename": "tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/DummyListener.java"}, {"additions": 218, "raw_url": "https://github.com/apache/incubator-tajo/raw/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/TestHCatalogStore.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/TestHCatalogStore.java", "sha": "3cf2302a05818ab2ee64c343103a4db372e82fc8", "changes": 363, "status": "modified", "deletions": 145, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/TestHCatalogStore.java?ref=e0b6f7ae8e2215e71500d1d0d8faa2318d3d3d1e", "patch": "@@ -19,20 +19,17 @@\n package org.apache.tajo.catalog.store;\n \n \n+import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.hive.cli.CliSessionState;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n-import org.apache.hadoop.hive.metastore.MetaStoreUtils;\n-import org.apache.hadoop.hive.metastore.api.*;\n-import org.apache.hadoop.hive.ql.session.SessionState;\n-import org.apache.hadoop.hive.serde.serdeConstants;\n-import org.apache.hadoop.hive.shims.ShimLoader;\n-import org.apache.tajo.catalog.CatalogConstants;\n-import org.apache.tajo.catalog.Column;\n-import org.apache.tajo.catalog.TableDesc;\n+import org.apache.hadoop.hive.metastore.api.Database;\n+import org.apache.hadoop.hive.metastore.api.InvalidOperationException;\n+import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;\n+import org.apache.tajo.catalog.*;\n+import org.apache.tajo.catalog.partition.PartitionMethodDesc;\n import org.apache.tajo.catalog.proto.CatalogProtos;\n import org.apache.tajo.common.TajoDataTypes;\n import org.apache.tajo.conf.TajoConf;\n@@ -42,7 +39,9 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n \n import static org.junit.Assert.*;\n \n@@ -56,9 +55,14 @@\n   private static final String DB_NAME = \"test_hive\";\n   private static final String CUSTOMER = \"customer\";\n   private static final String NATION = \"nation\";\n+  private static final String REGION = \"region\";\n+  private static final String SUPPLIER = \"supplier\";\n+\n   private static CatalogStore store;\n   private static int port;\n \n+  private static Path warehousePath;\n+\n   @BeforeClass\n   public static void setUp() throws Exception {\n     // delete metstore default path for successful unit tests\n@@ -68,46 +72,30 @@ public static void setUp() throws Exception {\n     Database db = new Database();\n     db.setName(DB_NAME);\n \n-    Path warehousePath = new Path(CommonTestingUtil.getTestDir(), DB_NAME);\n-    port = MetaStoreUtils.findFreePort();\n-    MetaStoreUtils.startMetaStore(port, ShimLoader.getHadoopThriftAuthBridge());\n+    warehousePath = new Path(CommonTestingUtil.getTestDir(), DB_NAME);\n     db.setLocationUri(warehousePath.toString());\n \n-    String metastoreUri = \"thrift://localhost:\" + port;\n-\n     HiveConf conf = new HiveConf();\n-    conf.setVar(HiveConf.ConfVars.METASTOREURIS, metastoreUri);\n-    conf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES, 3);\n-    conf.set(HiveConf.ConfVars.PREEXECHOOKS.varname, \"\");\n-    conf.set(HiveConf.ConfVars.POSTEXECHOOKS.varname, \"\");\n-    conf.set(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname, \"false\");\n-    conf.set(HiveConf.ConfVars.METASTORE_EVENT_LISTENERS.varname, DummyListener.class.getName());\n-\n-    // set property to use at HCatalogUtil\n-    System.setProperty(HiveConf.ConfVars.METASTOREURIS.varname, metastoreUri);\n-    System.setProperty(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES.varname, \"3\");\n-    System.setProperty(HiveConf.ConfVars.PREEXECHOOKS.varname, \"\");\n-    System.setProperty(HiveConf.ConfVars.POSTEXECHOOKS.varname, \"\");\n-    System.setProperty(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname, \"false\");\n-    System.setProperty(HiveConf.ConfVars.METASTORE_EVENT_LISTENERS.varname, DummyListener.class.getName());\n-\n-    SessionState.start(new CliSessionState(conf));\n+    conf.set(HiveConf.ConfVars.METASTOREWAREHOUSE.varname, warehousePath.toString());\n+\n+    // create hive configuration file for unit tests\n+    Path path = new Path(warehousePath.getParent(), \"hive-site.xml\");\n+    FileSystem fs = FileSystem.getLocal(new Configuration());\n+    conf.writeXml(fs.create(path));\n \n     // create database and tables on Hive MetaStore.\n     client = new HiveMetaStoreClient(conf);\n-\n     client.createDatabase(db);\n-    createTable(NATION);\n-    createTable(CUSTOMER);\n-\n-    DummyListener.notifyList.clear();\n \n     // create local HCatalogStore.\n     TajoConf tajoConf = new TajoConf();\n     tajoConf.set(CatalogConstants.STORE_CLASS, HCatalogStore.class.getCanonicalName());\n     tajoConf.setVar(TajoConf.ConfVars.CATALOG_ADDRESS, \"127.0.0.1:0\");\n+    tajoConf.addResource(path.toString());\n+    tajoConf.set(HiveConf.ConfVars.METASTOREWAREHOUSE.varname, warehousePath.toString());\n \n     store = new HCatalogStore(tajoConf);\n+\n   }\n \n   private static void deleteMetaStoreDirectory() throws Exception {\n@@ -119,66 +107,17 @@ private static void deleteMetaStoreDirectory() throws Exception {\n     fs.close();\n   }\n \n-  private static void createTable(String tableName) throws Exception {\n-    Map<String, String> tableParams = new HashMap<String, String>();\n-\n-    List<FieldSchema> cols = new ArrayList<FieldSchema>();\n-\n-    if (tableName.equals(CUSTOMER)) {\n-      cols.add(new FieldSchema(\"c_custkey\", \"int\", \"\"));\n-      cols.add(new FieldSchema(\"c_name\", \"string\", \"\"));\n-      cols.add(new FieldSchema(\"c_address\", \"string\", \"\"));\n-      cols.add(new FieldSchema(\"c_nationkey\", \"int\", \"\"));\n-      cols.add(new FieldSchema(\"c_phone\", \"string\", \"\"));\n-      cols.add(new FieldSchema(\"c_acctbal\", \"double\", \"\"));\n-      cols.add(new FieldSchema(\"c_mktsegment\", \"string\", \"\"));\n-      cols.add(new FieldSchema(\"c_comment\", \"string\", \"\"));\n-    } else {\n-      cols.add(new FieldSchema(\"n_nationkey\", \"int\", \"\"));\n-      cols.add(new FieldSchema(\"n_name\", \"string\", \"\"));\n-      cols.add(new FieldSchema(\"n_regionkey\", \"int\", \"\"));\n-      cols.add(new FieldSchema(\"n_comment\", \"string\", \"\"));\n-    }\n-\n-    StorageDescriptor sd = new StorageDescriptor();\n-    sd.setCols(cols);\n-    sd.setCompressed(false);\n-    sd.setParameters(tableParams);\n-    sd.setSerdeInfo(new SerDeInfo());\n-    sd.getSerdeInfo().setName(tableName);\n-    sd.getSerdeInfo().setParameters(new HashMap<String, String>());\n-    sd.getSerdeInfo().getParameters().put(serdeConstants.SERIALIZATION_FORMAT, \"1\");\n-\n-    if (tableName.equals(CUSTOMER)) {\n-      sd.getSerdeInfo().setSerializationLib(org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.class.getName());\n-      sd.setInputFormat(org.apache.hadoop.hive.ql.io.RCFileInputFormat.class.getName());\n-      sd.setOutputFormat(org.apache.hadoop.hive.ql.io.RCFileOutputFormat.class.getName());\n-    } else {\n-      sd.setInputFormat(org.apache.hadoop.mapred.TextInputFormat.class.getName());\n-      sd.setOutputFormat(org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat.class.getName());\n-    }\n-\n-\n-    Table table = new Table();\n-    table.setDbName(DB_NAME);\n-    table.setTableName(tableName);\n-    table.setParameters(tableParams);\n-    table.setSd(sd);\n-\n-    if (tableName.equals(NATION)) {\n-      table.addToPartitionKeys(new FieldSchema(\"type\", \"string\", \"\"));\n-    }\n-\n-    client.createTable(table);\n-  }\n-\n   @AfterClass\n   public static void tearDown() throws IOException {\n     try {\n       if (store.existTable(DB_NAME + \".\" + CUSTOMER))\n         store.deleteTable(DB_NAME + \".\" + CUSTOMER);\n       if (store.existTable(DB_NAME + \".\" + NATION))\n         store.deleteTable(DB_NAME + \".\" + NATION);\n+      if (store.existTable(DB_NAME + \".\" + REGION))\n+        store.deleteTable(DB_NAME + \".\" + REGION);\n+      if (store.existTable(DB_NAME + \".\" + SUPPLIER))\n+        store.deleteTable(DB_NAME + \".\" + SUPPLIER);\n       dropDatabase();\n       client.close();\n       store.close();\n@@ -198,56 +137,122 @@ private static void dropDatabase() throws Exception {\n     }\n   }\n \n-  // Current Hive MetaStoreClient doesn't support to set table location.\n-  // If Tajo update table path, ThriftHiveMetaStore make a MetaException.\n-  // So, it needs to disable until Hive support to set table location.\n-//  @Test\n-//  public void testAddTable() throws Exception {\n-//    TableDesc table = new TableDesc();\n-//\n-//    table.setName(CUSTOMER);\n-//\n-//    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n-//    schema.addColumn(\"c_custkey\", TajoDataTypes.Type.INT4);\n-//    schema.addColumn(\"c_name\", TajoDataTypes.Type.TEXT);\n-//    schema.addColumn(\"c_address\", TajoDataTypes.Type.TEXT);\n-//    schema.addColumn(\"c_nationkey\", TajoDataTypes.Type.INT4);\n-//    schema.addColumn(\"c_phone\", TajoDataTypes.Type.TEXT);\n-//    schema.addColumn(\"c_acctbal\", TajoDataTypes.Type.FLOAT8);\n-//    schema.addColumn(\"c_mktsegment\", TajoDataTypes.Type.TEXT);\n-//    schema.addColumn(\"c_comment\", TajoDataTypes.Type.TEXT);\n-//\n-//    table.setSchema(schema);\n-//    store.addTable(table);\n-//  }\n-//  @Test\n-//  public void testAddTableByPartition() throws Exception {\n-//    TableDesc table = new TableDesc();\n-//\n-//    table.setName(NATION);\n-//\n-//    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n-//    schema.addColumn(\"n_nationkey\", TajoDataTypes.Type.INT4);\n-//    schema.addColumn(\"n_name\", TajoDataTypes.Type.TEXT);\n-//    schema.addColumn(\"n_regionkey\", TajoDataTypes.Type.INT4);\n-//    schema.addColumn(\"n_comment\", TajoDataTypes.Type.TEXT);\n-//    table.setSchema(schema);\n-//\n-//    Partitions partitions = new Partitions();\n-//    partitions.addColumn(\"type\", TajoDataTypes.Type.TEXT);\n-//    table.setPartitions(partitions);\n-//\n-//    store.addTable(table);\n-//  }\n+  @Test\n+  public void testAddTable1() throws Exception {\n+    TableDesc table = new TableDesc();\n+\n+    table.setName(DB_NAME + \".\" + CUSTOMER);\n+\n+    Options options = new Options();\n+    options.put(HCatalogStore.CSVFILE_DELIMITER, \"\\u0001\");\n+    TableMeta meta = new TableMeta(CatalogProtos.StoreType.RCFILE, options);\n+    table.setMeta(meta);\n+\n+    table.setPath(new Path(warehousePath, CUSTOMER));\n+\n+    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n+    schema.addColumn(\"c_custkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"c_name\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"c_address\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"c_nationkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"c_phone\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"c_acctbal\", TajoDataTypes.Type.FLOAT8);\n+    schema.addColumn(\"c_mktsegment\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"c_comment\", TajoDataTypes.Type.TEXT);\n+\n+    table.setSchema(schema);\n+    store.addTable(table.getProto());\n+  }\n+\n+  @Test\n+  public void testAddTable2() throws Exception {\n+    TableDesc table = new TableDesc();\n+\n+    table.setName(DB_NAME + \".\" + REGION);\n+\n+    Options options = new Options();\n+    options.put(HCatalogStore.CSVFILE_DELIMITER, \"|\");\n+    options.put(HCatalogStore.CSVFILE_NULL, \"\\t\");\n+    TableMeta meta = new TableMeta(CatalogProtos.StoreType.CSV, options);\n+    table.setMeta(meta);\n+\n+    table.setPath(new Path(warehousePath, REGION));\n+\n+    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n+    schema.addColumn(\"r_regionkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"r_name\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"r_comment\", TajoDataTypes.Type.TEXT);\n+\n+    table.setSchema(schema);\n+    store.addTable(table.getProto());\n+  }\n+\n+  @Test\n+  public void testAddTable3() throws Exception {\n+    TableDesc table = new TableDesc();\n+\n+    table.setName(DB_NAME + \".\" + SUPPLIER);\n+\n+    Options options = new Options();\n+    options.put(HCatalogStore.CSVFILE_DELIMITER, \"\\t\");\n+    options.put(HCatalogStore.CSVFILE_NULL, \"\\u0002\");\n+    TableMeta meta = new TableMeta(CatalogProtos.StoreType.CSV, options);\n+    table.setMeta(meta);\n+\n+    table.setPath(new Path(warehousePath, SUPPLIER));\n+\n+    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n+    schema.addColumn(\"s_suppkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"s_name\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"s_address\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"s_nationkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"s_phone\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"s_acctbal\", TajoDataTypes.Type.FLOAT8);\n+    schema.addColumn(\"s_comment\", TajoDataTypes.Type.TEXT);\n+\n+    table.setSchema(schema);\n+    store.addTable(table.getProto());\n+  }\n+\n+  @Test\n+  public void testAddTableByPartition() throws Exception {\n+    TableDesc table = new TableDesc();\n+\n+    table.setName(DB_NAME + \".\" + NATION);\n+\n+    Options options = new Options();\n+    options.put(HCatalogStore.CSVFILE_DELIMITER, \"\\u0001\");\n+    TableMeta meta = new TableMeta(CatalogProtos.StoreType.CSV, options);\n+    table.setMeta(meta);\n+\n+    table.setPath(new Path(warehousePath, NATION));\n+\n+    org.apache.tajo.catalog.Schema schema = new org.apache.tajo.catalog.Schema();\n+    schema.addColumn(\"n_name\", TajoDataTypes.Type.TEXT);\n+    schema.addColumn(\"n_regionkey\", TajoDataTypes.Type.INT4);\n+    schema.addColumn(\"n_comment\", TajoDataTypes.Type.TEXT);\n+    table.setSchema(schema);\n+\n+    org.apache.tajo.catalog.Schema expressionSchema = new org.apache.tajo.catalog.Schema();\n+    expressionSchema.addColumn(\"n_nationkey\", TajoDataTypes.Type.INT4);\n+\n+    PartitionMethodDesc partitions = new PartitionMethodDesc(DB_NAME + \".\" + NATION,\n+        CatalogProtos.PartitionType.COLUMN, expressionSchema.getColumn(0).getQualifiedName(), expressionSchema);\n+    table.setPartitionMethod(partitions);\n+\n+    store.addTable(table.getProto());\n+  }\n \n   @Test\n   public void testExistTable() throws Exception {\n     assertTrue(store.existTable(DB_NAME + \".\" + CUSTOMER));\n     assertTrue(store.existTable(DB_NAME + \".\" + NATION));\n+    assertTrue(store.existTable(DB_NAME + \".\" + REGION));\n+    assertTrue(store.existTable(DB_NAME + \".\" + SUPPLIER));\n   }\n \n   @Test\n-  public void testGetTable() throws Exception {\n+  public void testGetTable1() throws Exception {\n     TableDesc table = new TableDesc(store.getTable(DB_NAME + \".\" + CUSTOMER));\n \n     List<Column> columns = table.getSchema().getColumns();\n@@ -269,37 +274,95 @@ public void testGetTable() throws Exception {\n     assertEquals(TajoDataTypes.Type.TEXT, columns.get(6).getDataType().getType());\n     assertEquals(\"c_comment\", columns.get(7).getSimpleName());\n     assertEquals(TajoDataTypes.Type.TEXT, columns.get(7).getDataType().getType());\n+\n     assertNull(table.getPartitionMethod());\n+\n     assertEquals(table.getMeta().getStoreType().name(), CatalogProtos.StoreType.RCFILE.name());\n+  }\n \n+  @Test\n+  public void testGetTable2() throws Exception {\n+    TableDesc table = new TableDesc(store.getTable(DB_NAME + \".\" + NATION));\n \n-    table = new TableDesc(store.getTable(DB_NAME + \".\" + NATION));\n-    columns = table.getSchema().getColumns();\n+    List<Column> columns = table.getSchema().getColumns();\n     assertEquals(DB_NAME + \".\" + NATION, table.getName());\n-    assertEquals(4, columns.size());\n-    assertEquals(\"n_nationkey\", columns.get(0).getSimpleName());\n-    assertEquals(TajoDataTypes.Type.INT4, columns.get(0).getDataType().getType());\n-    assertEquals(\"n_name\", columns.get(1).getSimpleName());\n-    assertEquals(TajoDataTypes.Type.TEXT, columns.get(1).getDataType().getType());\n-    assertEquals(\"n_regionkey\", columns.get(2).getSimpleName());\n-    assertEquals(TajoDataTypes.Type.INT4, columns.get(2).getDataType().getType());\n-    assertEquals(\"n_comment\", columns.get(3).getSimpleName());\n-    assertEquals(TajoDataTypes.Type.TEXT, columns.get(3).getDataType().getType());\n+    assertEquals(3, columns.size());\n+    assertEquals(\"n_name\", columns.get(0).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(0).getDataType().getType());\n+    assertEquals(\"n_regionkey\", columns.get(1).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.INT4, columns.get(1).getDataType().getType());\n+    assertEquals(\"n_comment\", columns.get(2).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(2).getDataType().getType());\n+\n     assertNotNull(table.getPartitionMethod());\n-    assertEquals(\"type\", table.getPartitionMethod().getExpressionSchema().getColumn(0).getSimpleName());\n+\n+    assertEquals(\"n_nationkey\", table.getPartitionMethod().getExpressionSchema().getColumn(0).getSimpleName());\n     assertEquals(CatalogProtos.PartitionType.COLUMN, table.getPartitionMethod().getPartitionType());\n \n-    assertEquals(table.getMeta().getOption(HCatalogStore.CVSFILE_DELIMITER), \"\\\\001\");\n     assertEquals(table.getMeta().getStoreType().name(), CatalogProtos.StoreType.CSV.name());\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_DELIMITER), StringEscapeUtils.escapeJava(\"\\u0001\"));\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_NULL), StringEscapeUtils.escapeJava(\"\\\\N\"));\n+  }\n+\n+  @Test\n+  public void testGetTable3() throws Exception {\n+    TableDesc table = new TableDesc(store.getTable(DB_NAME + \".\" + REGION));\n+\n+    List<Column> columns = table.getSchema().getColumns();\n+    assertEquals(DB_NAME + \".\" + REGION, table.getName());\n+    assertEquals(3, columns.size());\n+    assertEquals(\"r_regionkey\", columns.get(0).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.INT4, columns.get(0).getDataType().getType());\n+    assertEquals(\"r_name\", columns.get(1).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(1).getDataType().getType());\n+    assertEquals(\"r_comment\", columns.get(2).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(2).getDataType().getType());\n+\n+    assertNull(table.getPartitionMethod());\n \n+    assertEquals(table.getMeta().getStoreType().name(), CatalogProtos.StoreType.CSV.name());\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_DELIMITER), StringEscapeUtils.escapeJava(\"|\"));\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_NULL), StringEscapeUtils.escapeJava(\"\\t\"));\n+  }\n+\n+  @Test\n+  public void testGetTable4() throws Exception {\n+    TableDesc table = new TableDesc(store.getTable(DB_NAME + \".\" + SUPPLIER));\n+\n+    List<Column> columns = table.getSchema().getColumns();\n+    assertEquals(DB_NAME + \".\" + SUPPLIER, table.getName());\n+    assertEquals(7, columns.size());\n+    assertEquals(\"s_suppkey\", columns.get(0).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.INT4, columns.get(0).getDataType().getType());\n+    assertEquals(\"s_name\", columns.get(1).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(1).getDataType().getType());\n+    assertEquals(\"s_address\", columns.get(2).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(2).getDataType().getType());\n+    assertEquals(\"s_nationkey\", columns.get(3).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.INT4, columns.get(3).getDataType().getType());\n+    assertEquals(\"s_phone\", columns.get(4).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(4).getDataType().getType());\n+    assertEquals(\"s_acctbal\", columns.get(5).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.FLOAT8, columns.get(5).getDataType().getType());\n+    assertEquals(\"s_comment\", columns.get(6).getSimpleName());\n+    assertEquals(TajoDataTypes.Type.TEXT, columns.get(6).getDataType().getType());\n+\n+    assertNull(table.getPartitionMethod());\n+\n+    assertEquals(table.getMeta().getStoreType().name(), CatalogProtos.StoreType.CSV.name());\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_DELIMITER), StringEscapeUtils.escapeJava(\"\\t\"));\n+    assertEquals(table.getMeta().getOption(HCatalogStore.CSVFILE_NULL), StringEscapeUtils.escapeJava(\"\\u0002\"));\n   }\n \n+\n   @Test\n   public void testGetAllTableNames() throws Exception{\n     Set<String> tables = new HashSet<String>(store.getAllTableNames());\n-    assertEquals(2, tables.size());\n+    assertEquals(4, tables.size());\n     assertTrue(tables.contains(DB_NAME + \".\" + CUSTOMER));\n     assertTrue(tables.contains(DB_NAME + \".\" + NATION));\n+    assertTrue(tables.contains(DB_NAME + \".\" + REGION));\n+    assertTrue(tables.contains(DB_NAME + \".\" + SUPPLIER));\n   }\n \n   @Test\n@@ -310,12 +373,22 @@ public void testDeleteTable() throws Exception {\n     table = new TableDesc(store.getTable(DB_NAME + \".\" + NATION));\n     Path nationPath = table.getPath();\n \n+    table = new TableDesc(store.getTable(DB_NAME + \".\" + REGION));\n+    Path regionPath = table.getPath();\n+\n+    table = new TableDesc(store.getTable(DB_NAME + \".\" + SUPPLIER));\n+    Path supplierPath = table.getPath();\n+\n     store.deleteTable(DB_NAME + \".\" + CUSTOMER);\n     store.deleteTable(DB_NAME + \".\" + NATION);\n+    store.deleteTable(DB_NAME + \".\" + REGION);\n+    store.deleteTable(DB_NAME + \".\" + SUPPLIER);\n \n     FileSystem fs = FileSystem.getLocal(new Configuration());\n     assertTrue(fs.exists(customerPath));\n     assertTrue(fs.exists(nationPath));\n+    assertTrue(fs.exists(regionPath));\n+    assertTrue(fs.exists(supplierPath));\n     fs.close();\n   }\n }", "filename": "tajo-catalog/tajo-catalog-drivers/tajo-hcatalog/src/test/java/org/apache/tajo/catalog/store/TestHCatalogStore.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/f4a9fd183b5a4a61eef82e570215303ee4f10f0b", "parent": "https://github.com/apache/incubator-tajo/commit/15c4576ef680e05be877e9bb5b4370a03857c446", "message": "TAJO-645: Task.Reporter can cause NPE during reporting.", "bug_id": "incubator-tajo_4", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/f4a9fd183b5a4a61eef82e570215303ee4f10f0b/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/f4a9fd183b5a4a61eef82e570215303ee4f10f0b/CHANGES.txt", "sha": "fc76b0f0d64c43d15a58331fda007760bb1c2d8c", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=f4a9fd183b5a4a61eef82e570215303ee4f10f0b", "patch": "@@ -269,6 +269,8 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-645: Task.Reporter can cause NPE during reporting. (hyunsik)\n+\n     TAJO-630: QueryMasterTask never finished when Internal error occurs.\n     (hyunsik)\n ", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/f4a9fd183b5a4a61eef82e570215303ee4f10f0b/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/Task.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f4a9fd183b5a4a61eef82e570215303ee4f10f0b/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/Task.java", "sha": "c542afbb07734d85f127a8f61afe397eddd6856e", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/Task.java?ref=f4a9fd183b5a4a61eef82e570215303ee4f10f0b", "patch": "@@ -136,8 +136,6 @@ public Task(QueryUnitAttemptId taskId,\n               final QueryUnitRequest request) throws IOException {\n     this.request = request;\n     this.taskId = taskId;\n-    this.reporter = new Reporter(taskId, masterProxy);\n-    this.reporter.startCommunicationThread();\n \n     this.systemConf = worker.getConf();\n     this.queryContext = request.getQueryContext();\n@@ -154,6 +152,9 @@ public Task(QueryUnitAttemptId taskId,\n     this.context.setEnforcer(request.getEnforcer());\n     this.inputStats = new TableStats();\n \n+    this.reporter = new Reporter(taskId, masterProxy);\n+    this.reporter.startCommunicationThread();\n+\n     plan = CoreGsonHelper.fromJson(request.getSerializedData(), LogicalNode.class);\n     LogicalNode [] scanNode = PlannerUtil.findAllNodes(plan, NodeType.SCAN);\n     for (LogicalNode node : scanNode) {", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/Task.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/0781a3864e85da47c215e4da26d7344cecb3656f", "parent": "https://github.com/apache/incubator-tajo/commit/51919cf9eb7c2b96d9f20126c780c3c26a4e8a05", "message": "TAJO-581: Inline view on column partitioned table causes NPE.", "bug_id": "incubator-tajo_5", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/CHANGES.txt", "sha": "cd757b5c854842cf29bef7ba003b54d846c04f75", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -243,6 +243,8 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-581: Inline view on column partitioned table causes NPE. (hyunsik)\n+\n     TAJO-577: Support S3FileSystem split. (Yongjun Park via jihoon)\n \n     TAJO-568: Union query with the same alias names cause NPE. (hyunsik)", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/BasicLogicalPlanVisitor.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/BasicLogicalPlanVisitor.java", "sha": "94e24823e6edb3deb609b785ad727a7d40a648ac", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/BasicLogicalPlanVisitor.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -195,8 +195,10 @@ public RESULT visitJoin(CONTEXT context, LogicalPlan plan, LogicalPlan.QueryBloc\n   public RESULT visitUnion(CONTEXT context, LogicalPlan plan, LogicalPlan.QueryBlock block, UnionNode node,\n                            Stack<LogicalNode> stack) throws PlanningException {\n     stack.push(node);\n-    RESULT result = visit(context, plan, block, node.getLeftChild(), stack);\n-    visit(context, plan, block, node.getRightChild(), stack);\n+    LogicalPlan.QueryBlock leftBlock = plan.getBlock(node.getLeftChild());\n+    RESULT result = visit(context, plan, leftBlock, leftBlock.getRoot(), stack);\n+    LogicalPlan.QueryBlock rightBlock = plan.getBlock(node.getRightChild());\n+    visit(context, plan, rightBlock, rightBlock.getRoot(), stack);\n     stack.pop();\n     return result;\n   }\n@@ -225,7 +227,8 @@ public RESULT visitIntersect(CONTEXT context, LogicalPlan plan, LogicalPlan.Quer\n   public RESULT visitTableSubQuery(CONTEXT context, LogicalPlan plan, LogicalPlan.QueryBlock block,\n                                    TableSubQueryNode node, Stack<LogicalNode> stack) throws PlanningException {\n     stack.push(node);\n-    RESULT result = visit(context, plan, plan.getBlock(node.getSubQuery()), node.getSubQuery(), stack);\n+    LogicalPlan.QueryBlock childBlock = plan.getBlock(node.getSubQuery());\n+    RESULT result = visit(context, plan, childBlock, childBlock.getRoot(), new Stack<LogicalNode>());\n     stack.pop();\n     return result;\n   }", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/BasicLogicalPlanVisitor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalOptimizer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalOptimizer.java", "sha": "974dc60a5ae99b250d0fa8f5045637ac6cfbb200", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalOptimizer.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -89,8 +89,8 @@ private void optimizeJoinOrder(LogicalPlan plan, String blockName) throws Planni\n       FoundJoinOrder order = joinOrderAlgorithm.findBestOrder(plan, block,\n           joinGraphContext.joinGraph, joinGraphContext.relationsForProduct);\n       JoinNode newJoinNode = order.getOrderedJoin();\n+      JoinNode old = PlannerUtil.findTopNode(block.getRoot(), NodeType.JOIN);\n \n-      JoinNode old = block.getNode(NodeType.JOIN);\n       JoinTargetCollector collector = new JoinTargetCollector();\n       Set<Target> targets = new LinkedHashSet<Target>();\n       collector.visitJoin(targets, plan, block, old, new Stack<LogicalNode>());", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalOptimizer.java"}, {"additions": 11, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlan.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlan.java", "sha": "6afaaad7b067258ec0cefcca634164b8ae9afa06", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlan.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -180,6 +180,9 @@ public String getBlockNameByExpr(Expr expr) {\n   public String getNormalizedColumnName(QueryBlock block, ColumnReferenceExpr columnRef)\n       throws PlanningException {\n     Column found = resolveColumn(block, columnRef);\n+    if (found == null) {\n+      throw new NoSuchColumnException(columnRef.getCanonicalName());\n+    }\n     return found.getQualifiedName();\n   }\n \n@@ -242,6 +245,13 @@ public Column resolveColumn(QueryBlock block, ColumnReferenceExpr columnRef) thr\n \n       // Trying to find the column within the current block\n \n+      if (block.currentNode != null) {\n+        Column found = block.currentNode.getInSchema().getColumn(columnRef.getCanonicalName());\n+        if (found != null) {\n+          return found;\n+        }\n+      }\n+\n       if (block.getLatestNode() != null) {\n         Column found = block.getLatestNode().getOutSchema().getColumnByName(columnRef.getName());\n         if (found != null) {\n@@ -264,7 +274,7 @@ public Column resolveColumn(QueryBlock block, ColumnReferenceExpr columnRef) thr\n \n       // Trying to find columns from other relations in the current block\n       for (RelationNode rel : block.getRelations()) {\n-        Column found = rel.getOutSchema().getColumnByName(columnRef.getName());\n+        Column found = rel.getTableSchema().getColumnByName(columnRef.getName());\n         if (found != null) {\n           candidates.add(found);\n         }", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlan.java"}, {"additions": 41, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java", "sha": "d929218498c681b52f95e72d4435cf6ef395b9c4", "changes": 63, "status": "modified", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.tajo.engine.planner;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n import org.apache.commons.logging.Log;\n@@ -72,14 +73,18 @@ public LogicalPlanner(CatalogService catalog) {\n     // transient data for each query block\n     QueryBlock queryBlock;\n \n-    public PlanContext(LogicalPlan plan, QueryBlock block) {\n+    boolean debugOrUnitTests;\n+\n+    public PlanContext(LogicalPlan plan, QueryBlock block, boolean debugOrUnitTests) {\n       this.plan = plan;\n       this.queryBlock = block;\n+      this.debugOrUnitTests = debugOrUnitTests;\n     }\n \n     public PlanContext(PlanContext context, QueryBlock block) {\n       this.plan = context.plan;\n       this.queryBlock = block;\n+      this.debugOrUnitTests = context.debugOrUnitTests;\n     }\n \n     public String toString() {\n@@ -95,21 +100,26 @@ public String toString() {\n    * @return A logical plan\n    */\n   public LogicalPlan createPlan(Expr expr) throws PlanningException {\n+    return createPlan(expr, false);\n+  }\n+\n+  @VisibleForTesting\n+  public LogicalPlan createPlan(Expr expr, boolean debug) throws PlanningException {\n \n     LogicalPlan plan = new LogicalPlan(this);\n \n     QueryBlock rootBlock = plan.newAndGetBlock(LogicalPlan.ROOT_BLOCK);\n     PreprocessContext preProcessorCtx = new PreprocessContext(plan, rootBlock);\n     preprocessor.visit(preProcessorCtx, new Stack<Expr>(), expr);\n \n-    PlanContext context = new PlanContext(plan, plan.getRootBlock());\n+    PlanContext context = new PlanContext(plan, plan.getRootBlock(), debug);\n     LogicalNode topMostNode = this.visit(context, new Stack<Expr>(), expr);\n \n     // Add Root Node\n     LogicalRootNode root = new LogicalRootNode(plan.newPID());\n     root.setInSchema(topMostNode.getOutSchema());\n-    root.setOutSchema(topMostNode.getOutSchema());\n     root.setChild(topMostNode);\n+    root.setOutSchema(topMostNode.getOutSchema());\n     plan.getRootBlock().setRoot(root);\n \n     return plan;\n@@ -205,22 +215,23 @@ public LogicalNode visitProjection(PlanContext context, Stack<Expr> stack, Proje\n \n     // Set ProjectionNode\n     projectionNode = context.queryBlock.getNodeFromExpr(projection);\n-    projectionNode.setTargets(targets);\n-    projectionNode.setOutSchema(PlannerUtil.targetToSchema(projectionNode.getTargets()));\n     projectionNode.setInSchema(child.getOutSchema());\n+    projectionNode.setTargets(targets);\n     projectionNode.setChild(child);\n \n     if (projection.isDistinct() && block.hasNode(NodeType.GROUP_BY)) {\n       throw new VerifyException(\"Cannot support grouping and distinct at the same time yet\");\n     } else {\n       if (projection.isDistinct()) {\n-        insertDistinctOperator(context, projectionNode, child);\n+        insertDistinctOperator(context, projectionNode, child, stack);\n       }\n     }\n \n     // It's for debugging and unit tests purpose.\n     // It sets raw targets, all of them are raw expressions instead of references.\n-    setRawTargets(context, targets, referenceNames, projection);\n+    if (context.debugOrUnitTests) {\n+      setRawTargets(context, targets, referenceNames, projection);\n+    }\n \n     verifyProjectedFields(block, projectionNode);\n     return projectionNode;\n@@ -246,16 +257,21 @@ private void setRawTargets(PlanContext context, Target[] targets, String[] refer\n     }\n   }\n \n-  private void insertDistinctOperator(PlanContext context, ProjectionNode projectionNode, LogicalNode child) {\n+  private void insertDistinctOperator(PlanContext context, ProjectionNode projectionNode, LogicalNode child,\n+                                      Stack<Expr> stack) throws PlanningException {\n     LogicalPlan plan = context.plan;\n+    QueryBlock block = context.queryBlock;\n \n     Schema outSchema = projectionNode.getOutSchema();\n     GroupbyNode dupRemoval = new GroupbyNode(plan.newPID());\n-    dupRemoval.setGroupingColumns(outSchema.toArray());\n-    dupRemoval.setTargets(PlannerUtil.schemaToTargets(outSchema));\n-    dupRemoval.setInSchema(projectionNode.getInSchema());\n-    dupRemoval.setOutSchema(outSchema);\n     dupRemoval.setChild(child);\n+    dupRemoval.setInSchema(projectionNode.getInSchema());\n+    dupRemoval.setTargets(PlannerUtil.schemaToTargets(outSchema));\n+    dupRemoval.setGroupingColumns(outSchema.toArray());\n+\n+    block.registerNode(dupRemoval);\n+    postHook(context, stack, null, dupRemoval);\n+\n     projectionNode.setChild(dupRemoval);\n     projectionNode.setInSchema(dupRemoval.getOutSchema());\n   }\n@@ -345,7 +361,7 @@ private EvalExprNode buildPlanForNoneFromStatement(PlanContext context, Stack<Ex\n     return targets;\n   }\n \n-  private static void verifyProjectedFields(QueryBlock block, Projectable projectable) throws PlanningException {\n+  public static void verifyProjectedFields(QueryBlock block, Projectable projectable) throws PlanningException {\n     if (projectable instanceof ProjectionNode && block.hasNode(NodeType.GROUP_BY)) {\n       for (Target target : projectable.getTargets()) {\n         Set<Column> columns = EvalTreeUtil.findDistinctRefColumns(target.getEvalTree());\n@@ -403,6 +419,9 @@ private LogicalNode insertGroupbyNode(PlanContext context, LogicalNode child, St\n     LogicalPlan plan = context.plan;\n     QueryBlock block = context.queryBlock;\n     GroupbyNode groupbyNode = new GroupbyNode(plan.newPID());\n+    groupbyNode.setChild(child);\n+    groupbyNode.setInSchema(child.getOutSchema());\n+\n     groupbyNode.setGroupingColumns(new Column[] {});\n \n     Set<String> aggEvalNames = new LinkedHashSet<String>();\n@@ -421,12 +440,11 @@ private LogicalNode insertGroupbyNode(PlanContext context, LogicalNode child, St\n       } catch (VerifyException ve) {\n       }\n     }\n+\n     groupbyNode.setDistinct(includeDistinctFunction);\n     groupbyNode.setAggFunctions(aggEvals.toArray(new AggregationFunctionCallEval[aggEvals.size()]));\n     Target [] targets = ProjectionPushDownRule.buildGroupByTarget(groupbyNode, aggEvalNames.toArray(new String[aggEvalNames.size()]));\n     groupbyNode.setTargets(targets);\n-    groupbyNode.setChild(child);\n-    groupbyNode.setInSchema(child.getOutSchema());\n \n     // this inserted group-by node doesn't pass through preprocessor. So manually added.\n     block.registerNode(groupbyNode);\n@@ -515,9 +533,10 @@ public SortNode visitSort(PlanContext context, Stack<Expr> stack, Sort sort) thr\n     ////////////////////////////////////////////////////////\n \n     SortNode sortNode = block.getNodeFromExpr(sort);\n+    sortNode.setChild(child);\n     sortNode.setInSchema(child.getOutSchema());\n     sortNode.setOutSchema(child.getOutSchema());\n-    sortNode.setChild(child);\n+\n \n     // Building sort keys\n     Column column;\n@@ -557,9 +576,9 @@ public LogicalNode visitHaving(PlanContext context, Stack<Expr> stack, Having ex\n     ////////////////////////////////////////////////////////\n \n     HavingNode having = new HavingNode(context.plan.newPID());\n+    having.setChild(child);\n     having.setInSchema(child.getOutSchema());\n     having.setOutSchema(child.getOutSchema());\n-    having.setChild(child);\n \n     EvalNode havingCondition;\n     if (block.namedExprsMgr.isResolved(referName)) {\n@@ -861,6 +880,10 @@ private LogicalNode createCartesianProduct(PlanContext context, LogicalNode left\n     LogicalPlan plan = context.plan;\n     QueryBlock block = context.queryBlock;\n \n+    Schema merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());\n+    JoinNode join = new JoinNode(plan.newPID(), JoinType.CROSS, left, right);\n+    join.setInSchema(merged);\n+\n     EvalNode evalNode;\n     List<Expr> newlyEvaluatedExprs = TUtil.newList();\n     for (Iterator<NamedExpr> it = block.namedExprsMgr.getUnresolvedExprs(); it.hasNext();) {\n@@ -874,15 +897,11 @@ private LogicalNode createCartesianProduct(PlanContext context, LogicalNode left\n       } catch (VerifyException ve) {}\n     }\n \n-    Schema merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());\n     List<Target> targets = TUtil.newList(PlannerUtil.schemaToTargets(merged));\n     for (Expr newAddedExpr : newlyEvaluatedExprs) {\n       targets.add(block.namedExprsMgr.getTarget(newAddedExpr, true));\n     }\n-\n-    JoinNode join = new JoinNode(plan.newPID(), JoinType.CROSS, left, right);\n     join.setTargets(targets.toArray(new Target[targets.size()]));\n-    join.setInSchema(merged);\n     return join;\n   }\n \n@@ -1092,8 +1111,8 @@ private LogicalNode buildSetPlan(PlanContext context, Stack<Expr> stack, SetOper\n     Target [] leftStrippedTargets = PlannerUtil.stripTarget(\n         PlannerUtil.schemaToTargets(leftBlock.getRoot().getOutSchema()));\n \n-    Schema outSchema = PlannerUtil.targetToSchema(leftStrippedTargets);\n     setOp.setInSchema(leftChild.getOutSchema());\n+    Schema outSchema = PlannerUtil.targetToSchema(leftStrippedTargets);\n     setOp.setOutSchema(outSchema);\n \n     return setOp;", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/PlannerUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/PlannerUtil.java", "sha": "bd9001c679f7d9b0914760c83ca10891c0ce0fd4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/PlannerUtil.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -223,7 +223,7 @@ public static void replaceNode(LogicalNode plan, LogicalNode newNode, NodeType t\n     Preconditions.checkNotNull(type);\n     \n     LogicalNodeFinder finder = new LogicalNodeFinder(type);\n-    node.postOrder(finder);\n+    node.preOrder(finder);\n     \n     if (finder.getFoundNodes().size() == 0) {\n       return null;", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/PlannerUtil.java"}, {"additions": 8, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java", "sha": "cb2ac1536791626ae151dc5ac62e5d293c90813d", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -692,9 +692,9 @@ public LogicalNode visitGroupBy(GlobalPlanContext context, LogicalPlan plan, Log\n \n       ExecutionBlock childBlock = context.execBlockMap.remove(child.getPID());\n       ExecutionBlock newExecBlock = buildGroupBy(context, childBlock, node);\n-      context.execBlockMap.put(node.getPID(), newExecBlock);\n+      context.execBlockMap.put(newExecBlock.getPlan().getPID(), newExecBlock);\n \n-      return node;\n+      return newExecBlock.getPlan();\n     }\n \n     @Override\n@@ -730,8 +730,11 @@ public LogicalNode visitJoin(GlobalPlanContext context, LogicalPlan plan, Logica\n     public LogicalNode visitUnion(GlobalPlanContext context, LogicalPlan plan, LogicalPlan.QueryBlock queryBlock,\n                                   UnionNode node, Stack<LogicalNode> stack) throws PlanningException {\n       stack.push(node);\n-      LogicalNode leftChild = visit(context, plan, queryBlock, node.getLeftChild(), stack);\n-      LogicalNode rightChild = visit(context, plan, queryBlock, node.getRightChild(), stack);\n+      LogicalPlan.QueryBlock leftQueryBlock = plan.getBlock(node.getLeftChild());\n+      LogicalNode leftChild = visit(context, plan, leftQueryBlock, leftQueryBlock.getRoot(), stack);\n+\n+      LogicalPlan.QueryBlock rightQueryBlock = plan.getBlock(node.getRightChild());\n+      LogicalNode rightChild = visit(context, plan, rightQueryBlock, rightQueryBlock.getRoot(), stack);\n       stack.pop();\n \n       List<ExecutionBlock> unionBlocks = Lists.newArrayList();\n@@ -801,6 +804,7 @@ public LogicalNode visitTableSubQuery(GlobalPlanContext context, LogicalPlan pla\n                                           LogicalPlan.QueryBlock queryBlock,\n                                           TableSubQueryNode node, Stack<LogicalNode> stack) throws PlanningException {\n       LogicalNode child = super.visitTableSubQuery(context, plan, queryBlock, node, stack);\n+      node.setSubQuery(child);\n \n       ExecutionBlock currentBlock = context.execBlockMap.remove(child.getPID());\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/GroupbyNode.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/GroupbyNode.java", "sha": "58fa6e294b83f7282140a7d8b03cfe3c2a2eb178", "changes": 20, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/GroupbyNode.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -181,16 +181,20 @@ public PlanString getPlanString() {\n \n     planStr.appendTitle(sb.toString());\n \n-    sb = new StringBuilder();\n-    sb.append(\"(\");\n-    for (int j = 0; j < aggrFunctions.length; j++) {\n-      sb.append(aggrFunctions[j]);\n-      if(j < aggrFunctions.length - 1) {\n-        sb.append(\",\");\n+    // there can be no aggregation functions\n+    if (hasAggFunctions()) {\n+      sb = new StringBuilder();\n+      sb.append(\"(\");\n+\n+      for (int j = 0; j < aggrFunctions.length; j++) {\n+        sb.append(aggrFunctions[j]);\n+        if(j < aggrFunctions.length - 1) {\n+          sb.append(\",\");\n+        }\n       }\n+      sb.append(\")\");\n+      planStr.appendExplain(\"exprs: \").appendExplain(sb.toString());\n     }\n-    sb.append(\")\");\n-    planStr.appendExplain(\"exprs: \").appendExplain(sb.toString());\n \n     sb = new StringBuilder(\"target list: \");\n     for (int i = 0; i < targets.length; i++) {", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/GroupbyNode.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/TableSubQueryNode.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/TableSubQueryNode.java", "sha": "01d17de7c6a41584fdb9fe65bb4056c60fb8058a", "changes": 15, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/TableSubQueryNode.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -54,14 +54,25 @@ public String getCanonicalName() {\n \n   @Override\n   public Schema getTableSchema() {\n-    return getOutSchema();\n+    // an output schema can be determined by targets. So, an input schema of\n+    // TableSubQueryNode is only eligible for table schema.\n+    //\n+    // TODO - but, a derived table can have column alias. For that, we should improve here.\n+    //\n+    // example) select * from (select col1, col2, col3 from t1) view (c1, c2);\n+\n+    return getInSchema();\n   }\n \n   public void setSubQuery(LogicalNode node) {\n     this.subQuery = node;\n     setInSchema((Schema) this.subQuery.getOutSchema().clone());\n     getInSchema().setQualifier(this.tableName);\n-    setOutSchema((Schema) this.subQuery.getOutSchema().clone());\n+    if (hasTargets()) {\n+      setOutSchema(PlannerUtil.targetToSchema(targets));\n+    } else {\n+      setOutSchema((Schema) this.subQuery.getOutSchema().clone());\n+    }\n     getOutSchema().setQualifier(this.tableName);\n   }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/TableSubQueryNode.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java", "sha": "428152bfa935e822cdacd76898d8c361f8c4be66", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -62,9 +62,14 @@ public FoundJoinOrder findBestOrder(LogicalPlan plan, LogicalPlan.QueryBlock blo\n \n       latestJoin = createJoinNode(plan, bestPair);\n       remainRelations.add(latestJoin);\n+\n+      // all logical nodes should be registered to corresponding blocks\n+      block.registerNode(latestJoin);\n     }\n \n     JoinNode joinTree = (JoinNode) remainRelations.iterator().next();\n+    // all generated nodes should be registered to corresponding blocks\n+    block.registerNode(joinTree);\n     return new FoundJoinOrder(joinTree, getCost(joinTree));\n   }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java"}, {"additions": 7, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/PartitionedTableRewriter.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/PartitionedTableRewriter.java", "sha": "e5f7fb40414e0b2e2e40bccebe24069ee4d9301b", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/PartitionedTableRewriter.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -357,7 +357,13 @@ public Object visitScan(Object object, LogicalPlan plan, LogicalPlan.QueryBlock\n         PartitionedTableScanNode rewrittenScanNode =\n             new PartitionedTableScanNode(plan.newPID(), scanNode, filteredPaths);\n         updateTableStat(rewrittenScanNode);\n-        PlannerUtil.replaceNode(plan, stack.peek(), scanNode, rewrittenScanNode);\n+\n+        // if it is topmost node, set it as the rootnode of this block.\n+        if (stack.empty()) {\n+          block.setRoot(rewrittenScanNode);\n+        } else {\n+          PlannerUtil.replaceNode(plan, stack.peek(), scanNode, rewrittenScanNode);\n+        }\n       } catch (IOException e) {\n         throw new PlanningException(\"Partitioned Table Rewrite Failed: \\n\" + e.getMessage());\n       }", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/PartitionedTableRewriter.java"}, {"additions": 53, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java", "sha": "7512f23533cce31a4f87e5badf0296da71806124", "changes": 97, "status": "modified", "deletions": 44, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -304,45 +304,50 @@ public LogicalNode visitProjection(Context context, LogicalPlan plan, LogicalPla\n \n     // Removing ProjectionNode\n     // TODO - Consider INSERT and CTAS statement, and then remove the check of stack.empty.\n-    if (resolvingCount == 0 && !stack.empty() &&\n-        PlannerUtil.targetToSchema(finalTargets).equals(child.getOutSchema())) {\n-      LogicalNode parentNode = stack.peek();\n-      switch (parentNode.getType()) {\n-      case ROOT:\n-        LogicalRootNode rootNode = (LogicalRootNode) parentNode;\n-        rootNode.setChild(child);\n-        rootNode.setInSchema(child.getOutSchema());\n-        rootNode.setOutSchema(child.getOutSchema());\n-        break;\n-      case TABLE_SUBQUERY:\n-        TableSubQueryNode tableSubQueryNode = (TableSubQueryNode) parentNode;\n-        tableSubQueryNode.setSubQuery(child);\n-        break;\n-      case STORE:\n-        StoreTableNode storeTableNode = (StoreTableNode) parentNode;\n-        storeTableNode.setChild(child);\n-        storeTableNode.setInSchema(child.getOutSchema());\n-        break;\n-      case INSERT:\n-        InsertNode insertNode = (InsertNode) parentNode;\n-        insertNode.setSubQuery(child);\n-        break;\n-      case CREATE_TABLE:\n-        CreateTableNode createTableNode = (CreateTableNode) parentNode;\n-        createTableNode.setChild(child);\n-        createTableNode.setInSchema(child.getOutSchema());\n-        createTableNode.setInSchema(child.getOutSchema());\n-        break;\n-      default:\n-        throw new PlanningException(\"Unexpected Parent Node: \" + parentNode.getType());\n+    if (resolvingCount == 0 && PlannerUtil.targetToSchema(finalTargets).equals(child.getOutSchema())) {\n+      if (stack.empty()) {\n+        // if it is topmost, set it as the root of this block.\n+        block.setRoot(child);\n+      } else {\n+        LogicalNode parentNode = stack.peek();\n+        switch (parentNode.getType()) {\n+        case ROOT:\n+          LogicalRootNode rootNode = (LogicalRootNode) parentNode;\n+          rootNode.setChild(child);\n+          rootNode.setInSchema(child.getOutSchema());\n+          rootNode.setOutSchema(child.getOutSchema());\n+          break;\n+        case TABLE_SUBQUERY:\n+          TableSubQueryNode tableSubQueryNode = (TableSubQueryNode) parentNode;\n+          tableSubQueryNode.setSubQuery(child);\n+          break;\n+        case STORE:\n+          StoreTableNode storeTableNode = (StoreTableNode) parentNode;\n+          storeTableNode.setChild(child);\n+          storeTableNode.setInSchema(child.getOutSchema());\n+          break;\n+        case INSERT:\n+          InsertNode insertNode = (InsertNode) parentNode;\n+          insertNode.setSubQuery(child);\n+          break;\n+        case CREATE_TABLE:\n+          CreateTableNode createTableNode = (CreateTableNode) parentNode;\n+          createTableNode.setChild(child);\n+          createTableNode.setInSchema(child.getOutSchema());\n+          break;\n+        default:\n+          throw new PlanningException(\"Unexpected Parent Node: \" + parentNode.getType());\n+        }\n+        plan.addHistory(\"ProjectionNode is eliminated.\");\n       }\n-      plan.addHistory(\"ProjectionNode is eliminated.\");\n+\n+      return child;\n+\n     } else {\n       node.setInSchema(child.getOutSchema());\n       node.setTargets(finalTargets.toArray(new Target[finalTargets.size()]));\n+      return node;\n     }\n-\n-    return node;\n   }\n \n   public LogicalNode visitLimit(Context context, LogicalPlan plan, LogicalPlan.QueryBlock block, LimitNode node,\n@@ -382,6 +387,9 @@ public LogicalNode visitHaving(Context context, LogicalPlan plan, LogicalPlan.Qu\n \n     LogicalNode child = super.visitHaving(newContext, plan, block, node, stack);\n \n+    node.setInSchema(child.getOutSchema());\n+    node.setOutSchema(child.getOutSchema());\n+\n     Target target = context.targetListMgr.getTarget(referenceName);\n     if (newContext.targetListMgr.isResolved(referenceName)) {\n       node.setQual(new FieldEval(target.getNamedColumn()));\n@@ -390,8 +398,6 @@ public LogicalNode visitHaving(Context context, LogicalPlan plan, LogicalPlan.Qu\n       newContext.targetListMgr.resolve(target);\n     }\n \n-    node.setInSchema(child.getOutSchema());\n-    node.setOutSchema(child.getOutSchema());\n     return node;\n   }\n \n@@ -428,6 +434,8 @@ public LogicalNode visitGroupBy(Context context, LogicalPlan plan, LogicalPlan.Q\n     // visit a child node\n     LogicalNode child = super.visitGroupBy(newContext, plan, block, node, stack);\n \n+    node.setInSchema(child.getOutSchema());\n+\n     if (groupingKeyNum > 0) {\n       // Restoring grouping key columns\n       final Column [] groupingColumns = new Column[groupingKeyNum];\n@@ -466,7 +474,6 @@ public LogicalNode visitGroupBy(Context context, LogicalPlan plan, LogicalPlan.Q\n         node.setAggFunctions(aggEvals);\n       }\n     }\n-    node.setInSchema(child.getOutSchema());\n     Target [] targets = buildGroupByTarget(node, aggEvalNames);\n     node.setTargets(targets);\n \n@@ -501,6 +508,9 @@ public LogicalNode visitFilter(Context context, LogicalPlan plan, LogicalPlan.Qu\n \n     LogicalNode child = super.visitFilter(newContext, plan, block, node, stack);\n \n+    node.setInSchema(child.getOutSchema());\n+    node.setOutSchema(child.getOutSchema());\n+\n     Target target = context.targetListMgr.getTarget(referenceName);\n     if (newContext.targetListMgr.isResolved(referenceName)) {\n       node.setQual(new FieldEval(target.getNamedColumn()));\n@@ -509,9 +519,6 @@ public LogicalNode visitFilter(Context context, LogicalPlan plan, LogicalPlan.Qu\n       newContext.targetListMgr.resolve(target);\n     }\n \n-    node.setInSchema(child.getOutSchema());\n-    node.setOutSchema(child.getOutSchema());\n-\n     return node;\n   }\n \n@@ -540,6 +547,7 @@ public LogicalNode visitJoin(Context context, LogicalPlan plan, LogicalPlan.Quer\n     stack.pop();\n \n     Schema merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());\n+\n     node.setInSchema(merged);\n \n     if (node.hasJoinQual()) {\n@@ -676,8 +684,8 @@ public LogicalNode visitUnion(Context context, LogicalPlan plan, LogicalPlan.Que\n         rightBlock.getName()));\n \n     stack.push(node);\n-    visit(leftContext, plan, leftBlock, node.getLeftChild(), new Stack<LogicalNode>());\n-    visit(rightContext, plan, rightBlock, node.getRightChild(), new Stack<LogicalNode>());\n+    visit(leftContext, plan, leftBlock, leftBlock.getRoot(), new Stack<LogicalNode>());\n+    visit(rightContext, plan, rightBlock, rightBlock.getRoot(), new Stack<LogicalNode>());\n     stack.pop();\n     return node;\n   }\n@@ -751,7 +759,8 @@ public LogicalNode visitTableSubQuery(Context upperContext, LogicalPlan plan, Lo\n                                    TableSubQueryNode node, Stack<LogicalNode> stack) throws PlanningException {\n     Context childContext = new Context(plan, upperContext.requiredSet);\n     stack.push(node);\n-    LogicalNode child = visit(childContext, plan, plan.getBlock(node.getSubQuery()), node.getSubQuery(), stack);\n+    LogicalNode child = super.visitTableSubQuery(childContext, plan, block, node, stack);\n+    node.setSubQuery(child);\n     stack.pop();\n \n     Context newContext = new Context(upperContext);\n@@ -779,7 +788,7 @@ public LogicalNode visitTableSubQuery(Context upperContext, LogicalPlan plan, Lo\n     }\n \n     node.setTargets(projectedTargets.toArray(new Target[projectedTargets.size()]));\n-\n+    LogicalPlanner.verifyProjectedFields(block, node);\n     return node;\n   }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/QueryTestCaseBase.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/QueryTestCaseBase.java", "sha": "24a4237ed3c46c87ee480e36a40402102dfe5531", "changes": 23, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/QueryTestCaseBase.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -25,6 +25,7 @@\n import org.apache.tajo.algebra.DropTable;\n import org.apache.tajo.algebra.Expr;\n import org.apache.tajo.algebra.OpType;\n+import org.apache.tajo.catalog.CatalogService;\n import org.apache.tajo.client.TajoClient;\n import org.apache.tajo.conf.TajoConf;\n import org.apache.tajo.engine.parser.SQLAnalyzer;\n@@ -117,9 +118,11 @@\n  */\n public class QueryTestCaseBase {\n \n-  protected static final TpchTestBase testingCluster;\n+  protected static final TpchTestBase testBase;\n+  protected static final TajoTestingCluster testingCluster;\n   protected static TajoConf conf;\n   protected static TajoClient client;\n+  protected static CatalogService catalog;\n   protected static SQLAnalyzer sqlParser = new SQLAnalyzer();\n \n   /** the base path of dataset directories */\n@@ -130,8 +133,10 @@\n   protected static final Path resultBasePath;\n \n   static {\n-    testingCluster = TpchTestBase.getInstance();\n-    conf = testingCluster.getTestingCluster().getConfiguration();\n+    testBase = TpchTestBase.getInstance();\n+    testingCluster = testBase.getTestingCluster();\n+    conf = testBase.getTestingCluster().getConfiguration();\n+    catalog = testBase.getTestingCluster().getMaster().getCatalog();\n     URL datasetBaseURL = ClassLoader.getSystemResource(\"dataset\");\n     datasetBasePath = new Path(datasetBaseURL.toString());\n     URL queryBaseURL = ClassLoader.getSystemResource(\"queries\");\n@@ -152,7 +157,7 @@\n \n   @BeforeClass\n   public static void setUpClass() throws IOException {\n-    conf = testingCluster.getTestingCluster().getConfiguration();\n+    conf = testBase.getTestingCluster().getConfiguration();\n     client = new TajoClient(conf);\n   }\n \n@@ -173,6 +178,10 @@ public void setUp() {\n     currentDatasetPath = new Path(datasetBasePath, className);\n   }\n \n+  protected ResultSet execute(String sql) throws Exception {\n+    return testBase.execute(sql);\n+  }\n+\n   /**\n    * Execute a query contained in the file located in src/test/resources/results/<i>ClassName</i>/<i>MethodName</i>.\n    * <i>ClassName</i> and <i>MethodName</i> will be replaced by actual executed class and methods.\n@@ -192,9 +201,9 @@ public ResultSet executeQuery() throws Exception {\n    */\n   public ResultSet executeQuery(String queryFileName) throws Exception {\n     Path queryFilePath = getQueryFilePath(queryFileName);\n-    FileSystem fs = currentQueryPath.getFileSystem(testingCluster.getTestingCluster().getConfiguration());\n+    FileSystem fs = currentQueryPath.getFileSystem(testBase.getTestingCluster().getConfiguration());\n     assertTrue(queryFilePath.toString() + \" existence check\", fs.exists(queryFilePath));\n-    ResultSet result = testingCluster.execute(FileUtil.readTextFile(new File(queryFilePath.toUri())));\n+    ResultSet result = testBase.execute(FileUtil.readTextFile(new File(queryFilePath.toUri())));\n     assertNotNull(\"Query succeeded test\", result);\n     return result;\n   }\n@@ -228,7 +237,7 @@ public final void assertResultSet(ResultSet result, String resultFileName) throw\n    * @param result Query result to be compared.\n    */\n   public final void assertResultSet(String message, ResultSet result, String resultFileName) throws IOException {\n-    FileSystem fs = currentQueryPath.getFileSystem(testingCluster.getTestingCluster().getConfiguration());\n+    FileSystem fs = currentQueryPath.getFileSystem(testBase.getTestingCluster().getConfiguration());\n     Path resultFile = getResultFile(resultFileName);\n     assertTrue(resultFile.toString() + \" existence check\", fs.exists(resultFile));\n     try {", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/QueryTestCaseBase.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/ExprTestBase.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/ExprTestBase.java", "sha": "76bc9e87f24592923f79fe7d2135eefcf69dbabe", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/ExprTestBase.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -76,7 +76,7 @@ private static void assertJsonSerDer(EvalNode expr) {\n \n   private static Target[] getRawTargets(String query) throws PlanningException {\n     Expr expr = analyzer.parse(query);\n-    LogicalPlan plan = planner.createPlan(expr);\n+    LogicalPlan plan = planner.createPlan(expr, true);\n     Target [] targets = plan.getRootBlock().getRawTargets();\n     if (targets == null) {\n       throw new PlanningException(\"Wrong query statement or query plan: \" + query);", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/ExprTestBase.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestEvalTreeUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestEvalTreeUtil.java", "sha": "c25afc87fd2bfc1b626e41f3bf285da35f80ef34", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestEvalTreeUtil.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -189,7 +189,7 @@ public final void testGetSchemaFromTargets() throws InternalException {\n   @Test\n   public final void testGetContainExprs() throws CloneNotSupportedException, PlanningException {\n     Expr expr = analyzer.parse(QUERIES[1]);\n-    LogicalPlan plan = planner.createPlan(expr);\n+    LogicalPlan plan = planner.createPlan(expr, true);\n     Target [] targets = plan.getRootBlock().getRawTargets();\n     Column col1 = new Column(\"people.score\", TajoDataTypes.Type.INT4);\n     Collection<EvalNode> exprs =\n@@ -267,7 +267,7 @@ public final void testSimplify() throws PlanningException {\n     assertTrue(7.0d == node.eval(null, null).asFloat8());\n \n     Expr expr = analyzer.parse(QUERIES[1]);\n-    LogicalPlan plan = planner.createPlan(expr);\n+    LogicalPlan plan = planner.createPlan(expr, true);\n     targets = plan.getRootBlock().getRawTargets();\n     Column col1 = new Column(\"people.score\", TajoDataTypes.Type.INT4);\n     Collection<EvalNode> exprs =", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestEvalTreeUtil.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java", "sha": "ede0d584cfa9350d820e0ab64e3d1cf65b95b170", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -49,7 +49,7 @@ public final void testCtasWithoutTableDefinition() throws Exception {\n     ResultSet res = executeQuery();\n \n     res.close();\n-    CatalogService catalog = testingCluster.getTestingCluster().getMaster().getCatalog();\n+    CatalogService catalog = testBase.getTestingCluster().getMaster().getCatalog();\n     TableDesc desc = catalog.getTableDesc(\"testCtasWithoutTableDefinition\");\n     assertTrue(catalog.existsTable(\"testCtasWithoutTableDefinition\"));\n \n@@ -58,7 +58,7 @@ public final void testCtasWithoutTableDefinition() throws Exception {\n     assertEquals(partitionDesc.getPartitionType(), CatalogProtos.PartitionType.COLUMN);\n     assertEquals(\"key\", partitionDesc.getExpressionSchema().getColumns().get(0).getColumnName());\n \n-    FileSystem fs = FileSystem.get(testingCluster.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(testBase.getTestingCluster().getConfiguration());\n     Path path = desc.getPath();\n     assertTrue(fs.isDirectory(path));\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=17.0\")));\n@@ -89,7 +89,7 @@ public final void testCtasWithColumnedPartition() throws Exception {\n     ResultSet res = executeQuery();\n     res.close();\n \n-    TajoTestingCluster cluster = testingCluster.getTestingCluster();\n+    TajoTestingCluster cluster = testBase.getTestingCluster();\n     CatalogService catalog = cluster.getMaster().getCatalog();\n     TableDesc desc = catalog.getTableDesc(\"testCtasWithColumnedPartition\");\n     assertTrue(catalog.existsTable(\"testCtasWithColumnedPartition\"));", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestJoinQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestJoinQuery.java", "sha": "dc951cfc5923f8cf7cc91085538e3064dbdeca50", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestJoinQuery.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -65,7 +65,7 @@ public final void testWhereClauseJoin4() throws Exception {\n   @Test\n   public final void testWhereClauseJoin5() throws Exception {\n     ResultSet res = executeQuery();\n-    System.out.println(resultSetToString(res));\n+    assertResultSet(res);\n     cleanupQuery(res);\n   }\n ", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestJoinQuery.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestSelectQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestSelectQuery.java", "sha": "4d852fc2e58468abf9934a3aefb743963b2aa998", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestSelectQuery.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -190,10 +190,10 @@ public final void testNotInClause() throws Exception {\n \n   @Test\n   public final void testCreateAfterSelect() throws Exception {\n-    ResultSet res = testingCluster.execute(\n+    ResultSet res = testBase.execute(\n         \"create table orderkeys as select l_orderkey from lineitem\");\n     res.close();\n-    TajoTestingCluster cluster = testingCluster.getTestingCluster();\n+    TajoTestingCluster cluster = testBase.getTestingCluster();\n     CatalogService catalog = cluster.getMaster().getCatalog();\n     assertTrue(catalog.existsTable(\"orderkeys\"));\n     TableDesc orderKeys = catalog.getTableDesc(\"orderkeys\");", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestSelectQuery.java"}, {"additions": 86, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestTablePartitions.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestTablePartitions.java", "sha": "46c1d94ef8c3824ccefedd00fe7e074e0537ecb6", "changes": 154, "status": "modified", "deletions": 68, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestTablePartitions.java?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -25,90 +25,75 @@\n import org.apache.hadoop.io.compress.CompressionCodec;\n import org.apache.hadoop.io.compress.CompressionCodecFactory;\n import org.apache.hadoop.io.compress.DeflateCodec;\n+import org.apache.tajo.QueryTestCaseBase;\n import org.apache.tajo.TajoTestingCluster;\n-import org.apache.tajo.TpchTestBase;\n import org.apache.tajo.catalog.CatalogService;\n import org.apache.tajo.catalog.TableDesc;\n-import org.junit.BeforeClass;\n import org.junit.Test;\n \n import java.io.IOException;\n import java.sql.ResultSet;\n import java.util.Map;\n \n import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestTablePartitions extends QueryTestCaseBase {\n \n-public class TestTablePartitions {\n \n-  private static TpchTestBase tpch;\n   public TestTablePartitions() throws IOException {\n     super();\n   }\n \n-  @BeforeClass\n-  public static void setUp() throws Exception {\n-    tpch = TpchTestBase.getInstance();\n-  }\n-\n   @Test\n   public final void testCreateColumnPartitionedTable() throws Exception {\n     String tableName =\"testCreateColumnPartitionedTable\";\n-    ResultSet res = tpch.execute(\n-        \"create table \" + tableName +\" (col1 int4, col2 int4) partition by column(key float8) \");\n+    ResultSet res = execute(\n+        \"create table \" + tableName + \" (col1 int4, col2 int4) partition by column(key float8) \");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n     assertEquals(2, catalog.getTableDesc(tableName).getSchema().getColumnNum());\n     assertEquals(3, catalog.getTableDesc(tableName).getLogicalSchema().getColumnNum());\n \n-    res = tpch.execute(\"insert overwrite into \" + tableName + \" select l_orderkey, l_partkey, l_quantity from lineitem\");\n+    res = testBase.execute(\n+        \"insert overwrite into \" + tableName + \" select l_orderkey, l_partkey, l_quantity from lineitem\");\n     res.close();\n   }\n \n   @Test\n   public final void testCreateColumnPartitionedTableWithSelectedColumns() throws Exception {\n     String tableName =\"testCreateColumnPartitionedTableWithSelectedColumns\";\n-    ResultSet res = tpch.execute(\n-        \"create table \" + tableName +\" (col1 int4, col2 int4, null_col int4) partition by column(key float8) \");\n+    ResultSet res = execute(\n+        \"create table \" + tableName + \" (col1 int4, col2 int4, null_col int4) partition by column(key float8) \");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n     assertEquals(3, catalog.getTableDesc(tableName).getSchema().getColumnNum());\n     assertEquals(4, catalog.getTableDesc(tableName).getLogicalSchema().getColumnNum());\n \n-    res = tpch.execute(\"insert overwrite into \" + tableName + \" (col1, col2, key) select l_orderkey, l_partkey, l_quantity from lineitem\");\n+    res = execute(\"insert overwrite into \" + tableName + \" (col1, col2, key) select l_orderkey, \" +\n+        \"l_partkey, l_quantity from lineitem\");\n     res.close();\n   }\n \n   @Test\n   public final void testColumnPartitionedTableByOneColumn() throws Exception {\n     String tableName =\"testColumnPartitionedTableByOneColumn\";\n-    ResultSet res = tpch.execute(\n-        \"create table \" + tableName +\" (col1 int4, col2 int4, null_col int4) partition by column(key float8) \");\n+    ResultSet res = execute(\n+        \"create table \" + tableName + \" (col1 int4, col2 int4, null_col int4) partition by column(key float8) \");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\"insert overwrite into \" + tableName\n+    res = execute(\"insert overwrite into \" + tableName\n         + \" (col1, col2, key) select l_orderkey, l_partkey, l_quantity from lineitem\");\n     res.close();\n \n     TableDesc desc = catalog.getTableDesc(tableName);\n-    Path path = desc.getPath();\n+    assertPartitionDirectories(desc);\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n-    assertTrue(fs.isDirectory(path));\n-    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=17.0\")));\n-    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=36.0\")));\n-    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=38.0\")));\n-    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=45.0\")));\n-    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=49.0\")));\n-    assertEquals(5, desc.getStats().getNumRows().intValue());\n-\n-    res = tpch.execute(\n+    res = execute(\n         \"select distinct * from \" + tableName + \" where (key = 45.0 or key = 38.0) and null_col is null\");\n \n     Map<Double, int []> resultRows1 = Maps.newHashMap();\n@@ -123,24 +108,62 @@ public final void testColumnPartitionedTableByOneColumn() throws Exception {\n     res.close();\n   }\n \n+  private void assertPartitionDirectories(TableDesc desc) throws IOException {\n+    FileSystem fs = FileSystem.get(conf);\n+    Path path = desc.getPath();\n+    assertTrue(fs.isDirectory(path));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=17.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=36.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=38.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=45.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=49.0\")));\n+    assertEquals(5, desc.getStats().getNumRows().intValue());\n+  }\n+\n+  @Test\n+  public final void testQueryCasesOnColumnPartitionedTable() throws Exception {\n+    String tableName =\"testQueryCasesOnColumnPartitionedTable\";\n+    ResultSet res = execute(\n+        \"create table \" + tableName + \" (col1 int4, col2 int4, null_col int4) partition by column(key float8) \");\n+    res.close();\n+\n+    assertTrue(catalog.existsTable(tableName));\n+\n+    res = execute(\n+        \"insert overwrite into \" + tableName\n+            + \" (col1, col2, key) select l_orderkey, l_partkey, l_quantity from lineitem\");\n+    res.close();\n+\n+    TableDesc desc = catalog.getTableDesc(tableName);\n+    assertPartitionDirectories(desc);\n+\n+    res = executeQuery(\"case1.sql\");\n+    assertResultSet(res, \"case1.result\");\n+    res.close();\n+\n+    res = executeQuery(\"case2.sql\");\n+    assertResultSet(res, \"case2.result\");\n+    res.close();\n+  }\n+\n   @Test\n   public final void testColumnPartitionedTableByThreeColumns() throws Exception {\n     String tableName =\"testColumnPartitionedTableByThreeColumns\";\n-    ResultSet res = tpch.execute(\n+    ResultSet res = testBase.execute(\n         \"create table \" + tableName +\" (col4 text) partition by column(col1 int4, col2 int4, col3 float8) \");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n+    TajoTestingCluster cluster = testBase.getTestingCluster();\n     CatalogService catalog = cluster.getMaster().getCatalog();\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\"insert overwrite into \" + tableName\n+    res = execute(\"insert overwrite into \" + tableName\n         + \" select l_returnflag, l_orderkey, l_partkey, l_quantity from lineitem\");\n     res.close();\n \n     TableDesc desc = catalog.getTableDesc(tableName);\n     Path path = desc.getPath();\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(conf);\n     assertTrue(fs.isDirectory(path));\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1\")));\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1/col2=1\")));\n@@ -155,7 +178,7 @@ public final void testColumnPartitionedTableByThreeColumns() throws Exception {\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=3/col2=3/col3=49.0\")));\n     assertEquals(5, desc.getStats().getNumRows().intValue());\n \n-    res = tpch.execute(\"select * from \" + tableName + \" where col2 = 2\");\n+    res = execute(\"select * from \" + tableName + \" where col2 = 2\");\n \n     Map<Double, int []> resultRows1 = Maps.newHashMap();\n     resultRows1.put(45.0d, new int[]{3, 2});\n@@ -175,7 +198,7 @@ public final void testColumnPartitionedTableByThreeColumns() throws Exception {\n     resultRows2.put(45.0d, new int[]{3, 2});\n     resultRows2.put(38.0d, new int[]{2, 2});\n \n-    res = tpch.execute(\"select * from \" + tableName + \" where (col1 = 2 or col1 = 3) and col2 >= 2\");\n+    res = execute(\"select * from \" + tableName + \" where (col1 = 2 or col1 = 3) and col2 >= 2\");\n \n     for (int i = 0; i < 3; i++) {\n       assertTrue(res.next());\n@@ -188,24 +211,22 @@ public final void testColumnPartitionedTableByThreeColumns() throws Exception {\n   @Test\n   public final void testColumnPartitionedTableByOneColumnsWithCompression() throws Exception {\n     String tableName = \"testColumnPartitionedTableByOneColumnsWithCompression\";\n-    ResultSet res = tpch.execute(\n+    ResultSet res = execute(\n         \"create table \" + tableName + \" (col2 int4, col3 float8) USING csv \" +\n             \"WITH ('csvfile.delimiter'='|','compression.codec'='org.apache.hadoop.io.compress.DeflateCodec') \" +\n             \"PARTITION BY column(col1 int4)\");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\n+    res = execute(\n         \"insert overwrite into \" + tableName + \" select l_partkey, l_quantity, l_orderkey from lineitem\");\n     res.close();\n     TableDesc desc = catalog.getTableDesc(tableName);\n     assertEquals(5, desc.getStats().getNumRows().intValue());\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(conf);\n     assertTrue(fs.exists(desc.getPath()));\n-    CompressionCodecFactory factory = new CompressionCodecFactory(tpch.getTestingCluster().getConfiguration());\n+    CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n \n     Path path = desc.getPath();\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1\")));\n@@ -224,24 +245,23 @@ public final void testColumnPartitionedTableByOneColumnsWithCompression() throws\n   @Test\n   public final void testColumnPartitionedTableByTwoColumnsWithCompression() throws Exception {\n     String tableName = \"testColumnPartitionedTableByTwoColumnsWithCompression\";\n-    ResultSet res = tpch.execute(\"create table \" + tableName + \" (col3 float8, col4 text) USING csv \" +\n+    ResultSet res = execute(\"create table \" + tableName + \" (col3 float8, col4 text) USING csv \" +\n         \"WITH ('csvfile.delimiter'='|','compression.codec'='org.apache.hadoop.io.compress.DeflateCodec') \" +\n         \"PARTITION by column(col1 int4, col2 int4)\");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\n+    res = execute(\n         \"insert overwrite into \" + tableName +\n             \" select  l_quantity, l_returnflag, l_orderkey, l_partkey from lineitem\");\n     res.close();\n     TableDesc desc = catalog.getTableDesc(tableName);\n     assertEquals(5, desc.getStats().getNumRows().intValue());\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(conf);\n     assertTrue(fs.exists(desc.getPath()));\n-    CompressionCodecFactory factory = new CompressionCodecFactory(tpch.getTestingCluster().getConfiguration());\n+    CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n \n     Path path = desc.getPath();\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1\")));\n@@ -267,25 +287,24 @@ public final void testColumnPartitionedTableByTwoColumnsWithCompression() throws\n   @Test\n   public final void testColumnPartitionedTableByThreeColumnsWithCompression() throws Exception {\n     String tableName = \"testColumnPartitionedTableByThreeColumnsWithCompression\";\n-    ResultSet res = tpch.execute(\n+    ResultSet res = execute(\n         \"create table \" + tableName + \" (col4 text) USING csv \" +\n             \"WITH ('csvfile.delimiter'='|','compression.codec'='org.apache.hadoop.io.compress.DeflateCodec') \" +\n             \"partition by column(col1 int4, col2 int4, col3 float8)\");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\n+    res = execute(\n         \"insert overwrite into \" + tableName +\n             \" select l_returnflag, l_orderkey, l_partkey, l_quantity from lineitem\");\n     res.close();\n     TableDesc desc = catalog.getTableDesc(tableName);\n     assertEquals(5, desc.getStats().getNumRows().intValue());\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(conf);\n     assertTrue(fs.exists(desc.getPath()));\n-    CompressionCodecFactory factory = new CompressionCodecFactory(tpch.getTestingCluster().getConfiguration());\n+    CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n \n     Path path = desc.getPath();\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1\")));\n@@ -314,7 +333,7 @@ public final void testColumnPartitionedTableByThreeColumnsWithCompression() thro\n       }\n     }\n \n-    res = tpch.execute(\"select * from \" + tableName + \" where col2 = 2\");\n+    res = execute(\"select * from \" + tableName + \" where col2 = 2\");\n \n     Map<Double, int []> resultRows1 = Maps.newHashMap();\n     resultRows1.put(45.0d, new int[]{3, 2});\n@@ -334,7 +353,7 @@ public final void testColumnPartitionedTableByThreeColumnsWithCompression() thro\n     resultRows2.put(45.0d, new int[]{3, 2});\n     resultRows2.put(38.0d, new int[]{2, 2});\n \n-    res = tpch.execute(\"select * from \" + tableName + \" where (col1 = 2 or col1 = 3) and col2 >= 2\");\n+    res = execute(\"select * from \" + tableName + \" where (col1 = 2 or col1 = 3) and col2 >= 2\");\n     i = 0;\n     while(res.next()) {\n       assertEquals(resultRows2.get(res.getDouble(4))[0], res.getInt(2));\n@@ -349,25 +368,24 @@ public final void testColumnPartitionedTableByThreeColumnsWithCompression() thro\n   @Test\n   public final void testColumnPartitionedTableNoMatchedPartition() throws Exception {\n     String tableName = \"testColumnPartitionedTableNoMatchedPartition\";\n-    ResultSet res = tpch.execute(\n+    ResultSet res = execute(\n         \"create table \" + tableName + \" (col4 text) USING csv \" +\n             \"WITH ('csvfile.delimiter'='|','compression.codec'='org.apache.hadoop.io.compress.DeflateCodec') \" +\n             \"partition by column(col1 int4, col2 int4, col3 float8)\");\n     res.close();\n-    TajoTestingCluster cluster = tpch.getTestingCluster();\n-    CatalogService catalog = cluster.getMaster().getCatalog();\n+\n     assertTrue(catalog.existsTable(tableName));\n \n-    res = tpch.execute(\n+    res = execute(\n         \"insert overwrite into \" + tableName +\n             \" select l_returnflag , l_orderkey, l_partkey, l_quantity from lineitem\");\n     res.close();\n     TableDesc desc = catalog.getTableDesc(tableName);\n     assertEquals(5, desc.getStats().getNumRows().intValue());\n \n-    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    FileSystem fs = FileSystem.get(conf);\n     assertTrue(fs.exists(desc.getPath()));\n-    CompressionCodecFactory factory = new CompressionCodecFactory(tpch.getTestingCluster().getConfiguration());\n+    CompressionCodecFactory factory = new CompressionCodecFactory(conf);\n \n     Path path = desc.getPath();\n     assertTrue(fs.isDirectory(new Path(path.toUri() + \"/col1=1\")));\n@@ -396,7 +414,7 @@ public final void testColumnPartitionedTableNoMatchedPartition() throws Exceptio\n       }\n     }\n \n-    res = tpch.execute(\"select * from \" + tableName + \" where col2 = 9\");\n+    res = execute(\"select * from \" + tableName + \" where col2 = 9\");\n     assertFalse(res.next());\n     res.close();\n   }", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestTablePartitions.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case1.sql", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case1.sql", "sha": "8c1116eab49e3249f9e6b068281941b47f793ae8", "changes": 16, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case1.sql?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -0,0 +1,16 @@\n+select\n+  *\n+from (\n+  select\n+    col1,\n+    col2,\n+    null_col,\n+    key\n+  from\n+    testQueryCasesOnColumnPartitionedTable\n+  where\n+    (key = 45.0 or key = 38.0) and null_col is null\n+) test\n+order by\n+  col1, col2\n+;\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case1.sql"}, {"additions": 31, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case2.sql", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case2.sql", "sha": "c5100658468eb730a82debe79fa35d06c8e6374b", "changes": 31, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case2.sql?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -0,0 +1,31 @@\n+select\n+  *\n+from (\n+  select\n+    col1,\n+    col2,\n+    null_col,\n+    key\n+  from\n+    testQueryCasesOnColumnPartitionedTable\n+  where\n+    (key = 45.0 or key = 38.0) and null_col is null\n+\n+  union\n+\n+  select\n+    col1,\n+    col2,\n+    null_col,\n+    key\n+  from\n+    testQueryCasesOnColumnPartitionedTable\n+  where\n+    (key = 45.0 or key = 38.0) and null_col is null\n+\n+) t1\n+\n+order by\n+  col1,\n+  col2\n+;\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/resources/queries/TestTablePartitions/case2.sql"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case1.result", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case1.result", "sha": "4bfe8a269cc6c4e10222ad55550bb8adde50b9fb", "changes": 4, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case1.result?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -0,0 +1,4 @@\n+col1,col2,null_col,key\n+-------------------------------\n+2,2,0,38.0\n+3,2,0,45.0\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case1.result"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case2.result", "blob_url": "https://github.com/apache/incubator-tajo/blob/0781a3864e85da47c215e4da26d7344cecb3656f/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case2.result", "sha": "45b1a44fdbcf546ecbc05277a9e2a3835097c452", "changes": 6, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case2.result?ref=0781a3864e85da47c215e4da26d7344cecb3656f", "patch": "@@ -0,0 +1,6 @@\n+col1,col2,null_col,key\n+-------------------------------\n+2,2,0,38.0\n+2,2,0,38.0\n+3,2,0,45.0\n+3,2,0,45.0\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/resources/results/TestTablePartitions/case2.result"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/450fbcb93c02c74fd8889751bdec5ce155e3e294", "parent": "https://github.com/apache/incubator-tajo/commit/f08724f9c8bb80d93db0d5517fe6351a9a4d6e63", "message": "TAJO-442: Cast operator with nested functions causes NPE. (hyunsik)", "bug_id": "incubator-tajo_6", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/450fbcb93c02c74fd8889751bdec5ce155e3e294/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/450fbcb93c02c74fd8889751bdec5ce155e3e294/CHANGES.txt", "sha": "89b89eea8875457b004d9d71a9406dd4d98080e8", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=450fbcb93c02c74fd8889751bdec5ce155e3e294", "patch": "@@ -160,6 +160,8 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-442: Cast operator with nested functions causes NPE. (hyunsik)\n+\n     TAJO-426: HCatalogStore created partitions automatically. (jaehwa)\n \n     TAJO-418: sort operator after inline views consisting of unions can cause ", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/CastEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/CastEval.java", "sha": "411dd091cfe2d13ce992df95718c96062cb913c1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/CastEval.java?ref=450fbcb93c02c74fd8889751bdec5ce155e3e294", "patch": "@@ -111,11 +111,11 @@ public boolean equals(Object obj) {\n   @Override\n   public void preOrder(EvalNodeVisitor visitor) {\n     visitor.visit(this);\n-    visitor.visit(operand);\n+    operand.preOrder(visitor);\n   }\n \n   public void postOrder(EvalNodeVisitor visitor) {\n-    visitor.visit(operand);\n+    operand.postOrder(visitor);\n     visitor.visit(this);\n   }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/CastEval.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java", "sha": "c96f7e54f600d8a3c67e4d4d45fc36b5f3fd2bd7", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java?ref=450fbcb93c02c74fd8889751bdec5ce155e3e294", "patch": "@@ -60,6 +60,12 @@ public void testCast() throws IOException {\n     testSimpleEval(\"select '123'::double\", new String[] {\"123.0\"});\n   }\n \n+  @Test\n+  public void testCastWithNestedFunction() throws IOException {\n+    testSimpleEval(\"select to_timestamp(CAST(split_part('1386577650.123', '.', 1) as INT8));\",\n+        new String[] {\"1970-01-17 10:09:37\"});\n+  }\n+\n   @Test\n   public void testCastFromTable() throws IOException {\n     Schema schema = new Schema();", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/450fbcb93c02c74fd8889751bdec5ce155e3e294/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java", "sha": "7d3aa7d1948e8aba2266fadaeceeff3cbc15d09c", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java?ref=450fbcb93c02c74fd8889751bdec5ce155e3e294", "patch": "@@ -336,6 +336,11 @@ public void testOctetLength() throws IOException {\n         new String[]{\"6\"});\n   }\n \n+  @Test\n+  public void testSplitPart() throws IOException {\n+    testSimpleEval(\"select split_part('1386577650.123', '.', 1) as col1 \", new String[]{\"1386577650\"});\n+  }\n+\n   @Test\n   public void testSubstr() throws IOException {\n     testSimpleEval(\"select substr('abcdef', 3, 2) as col1 \", new String[]{\"cd\"});", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/b55918bd1dc32a1b034bb67a47114a92bce24b48", "parent": "https://github.com/apache/incubator-tajo/commit/5855b00c262ea291b9a0298e0d5b89074599a50f", "message": "TAJO-273: NotEval incurs NPE with boolean column. (hyunsik)", "bug_id": "incubator-tajo_7", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/CHANGES.txt", "sha": "a08858852fb73f464ead130827fa79cf7864f26b", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -4,7 +4,8 @@ Release 0.2.0 - unreleased\n \n   NEW FEATURES\n \n-    TAJO-267: Implement equals() and deepEquals() functions at LogicalNode. (jihoon)\n+    TAJO-267: Implement equals() and deepEquals() functions at LogicalNode. \n+    (jihoon)\n \n     TAJO-260: Add between predicate. (hyunsik)\n \n@@ -215,6 +216,8 @@ Release 0.2.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-273: NotEval incurs NPE with boolean column. (hyunsik)\n+\n     TAJO-272: boolean test does not work correctly. (hyunsik)\n \n     TAJO-264: Remove hard-coded 'standby' mode. (jinho)", "filename": "CHANGES.txt"}, {"additions": 79, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/LICENSE.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/LICENSE.txt", "sha": "6600131a08f05e31339f048c72f24c72728b78dc", "changes": 85, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/LICENSE.txt?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -208,9 +208,62 @@ Your use of the source code for these subcomponents is subject to the terms\n and conditions of the following licenses.\n \n ------------------------------------------------------------------------------\n-For the ANTLR 3 libraries:\n+For Jetty libraries (http://jetty.mortbay.org/) :\n \n-Copyright (c) 2010 Terence Parr\n+Copyright 1995-2009 Mort Bay Consulting Pty Ltd\n+\n+The Jetty Web Container is Copyright Mort Bay Consulting Pty Ltd\n+unless otherwise noted. It is licensed under the apache 2.0\n+license.\n+\n+The javax.servlet package used by Jetty is copyright\n+Sun Microsystems, Inc and Apache Software Foundation. It is\n+distributed under the Common Development and Distribution License.\n+You can obtain a copy of the license at\n+https://glassfish.dev.java.net/public/CDDLv1.0.html.\n+\n+The UnixCrypt.java code ~Implements the one way cryptography used by\n+Unix systems for simple password protection.  Copyright 1996 Aki Yoshida,\n+modified April 2001  by Iris Van den Broeke, Daniel Deville.\n+Permission to use, copy, modify and distribute UnixCrypt\n+for non-commercial or commercial purposes and without fee is\n+granted provided that the copyright notice appears in all copies.\n+\n+The default JSP implementation is provided by the Glassfish JSP engine\n+from project Glassfish http://glassfish.dev.java.net.  Copyright 2005\n+Sun Microsystems, Inc. and portions Copyright Apache Software Foundation.\n+\n+Some portions of the code are Copyright:\n+  2006 Tim Vernum\n+  1999 Jason Gilbert.\n+\n+The jboss integration module contains some LGPL code.\n+\n+The win32 Java Service Wrapper (v3.2.3) is Copyright (c) 1999, 2006\n+Tanuki Software, Inc.  and 2001 Silver Egg Technology.  It is\n+covered by an open license which is viewable at\n+http://svn.codehaus.org/jetty/jetty/branches/jetty-6.1/extras/win32service/LICENSE.txt\n+\n+------------------------------------------------------------------------------\n+For Netty libraries (http://netty.io) :\n+\n+Copyright 2011 The Netty Project\n+\n+The Netty Project licenses this file to you under the Apache License,\n+version 2.0 (the \"License\"); you may not use this file except in compliance\n+with the License. You may obtain a copy of the License at:\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+License for the specific language governing permissions and limitations\n+under the License.\n+------------------------------------------------------------------------------\n+For the ANTLR 4 libraries (http://antlr.org) :\n+\n+Copyright (c) 2012 Terence Parr and Sam Harwell\n All rights reserved.\n \n Redistribution and use in source and binary forms, with or without\n@@ -239,7 +292,7 @@ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n ------------------------------------------------------------------------------\n-For the Mockito library:\n+For the Mockito library (http://code.google.com/p/mockito/):\n \n The MIT License\n \n@@ -264,7 +317,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n \n ------------------------------------------------------------------------------\n-For the JLine2 libraries:\n+For the JLine2 libraries (https://github.com/jline/jline2) :\n \n Copyright (c) 2002-2012, the original author or authors.\n All rights reserved.\n@@ -302,7 +355,23 @@ IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n OF THE POSSIBILITY OF SUCH DAMAGE.\n \n ------------------------------------------------------------------------------\n-For the Protocol Buffers libraries:\n+For guava-libraries (http://code.google.com/p/guava-libraries/) :\n+\n+Copyright (C) 2010 The Guava Authors\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+------------------------------------------------------------------------------\n+For the Protocol Buffers libraries (http://code.google.com/p/protobuf/) :\n \n Copyright 2008, Google Inc.\n All rights reserved.\n@@ -339,7 +408,7 @@ standalone and requires a support library to be linked with it.  This\n support library is itself covered by the above license.\n \n ------------------------------------------------------------------------------\n-For protobuf-java-format (http://code.google.com/p/protobuf-java-format/)\n+For protobuf-java-format libraries (http://code.google.com/p/protobuf-java-format/) :\n \n Copyright 2000-2011 NeuStar, Inc. All rights reserved.\n NeuStar, the Neustar logo and related names and logos are registered\n@@ -375,6 +444,8 @@ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n ------------------------------------------------------------------------------\n+For jQuery libraries (http://jquery.com/) :\n+\n Copyright 2013 jQuery Foundation and other contributors\n http://jquery.com/\n \n@@ -398,6 +469,8 @@ OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n ------------------------------------------------------------------------------\n+For jsPlumb libraries (http://jsplumb.org/) :\n+\n Copyright (c) 2013 Simon Porritt, http://jsplumb.org/\n \n Permission is hereby granted, free of charge, to any person obtaining", "filename": "LICENSE.txt"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/NOTICE.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/NOTICE.txt", "sha": "e3c4ba81ac37409877fac39b728f95f3a3b43675", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/NOTICE.txt?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -7,12 +7,15 @@ Foundation (http://www.apache.org/).\n This product includes/uses Jetty (http://jetty.mortbay.org/),\n Copyright (c) Mort Bay Consulting Pty. Ltd. (Australia)\n \n-This product includes/uses Netty (http://www.jboss.org/netty)\n-Copyright 2009 Red Hat, Inc.\n+This product includes/uses Netty (http://netty.io)\n+Copyright 2011 The Netty Project.\n \n This product includes/uses ANTLR (http://www.antlr.org/),\n Copyright (c) 2010 Terence Parr.\n \n+This product includes/uses Mockito (http://code.google.com/p/mockito/)\n+Copyright (c) 2007 Mockito contributors.\n+\n This product includes/uses JLine2 (https://github.com/jline/jline2/),\n Copyright (c) 2002-2012, the original author or authors.\n ", "filename": "NOTICE.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/BasicEvalNodeVisitor.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/BasicEvalNodeVisitor.java", "sha": "8643ba66a21ffc5d79c656c053b74278b39ef14c", "changes": 7, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/BasicEvalNodeVisitor.java?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -197,12 +197,7 @@ public RESULT visitOr(CONTEXT context, BinaryEval evalNode, Stack<EvalNode> stac\n   public RESULT visitNot(CONTEXT context, NotEval evalNode, Stack<EvalNode> stack) {\n     RESULT result;\n     stack.push(evalNode);\n-    if (evalNode.getChild() instanceof NotEval) {\n-      result = visitChild(context, evalNode, stack);\n-    } else {\n-      result = visitChild(context, evalNode.getLeftExpr(), stack);\n-      visitChild(context, evalNode.getRightExpr(), stack);\n-    }\n+    result = visitChild(context, evalNode.getChild(), stack);\n     stack.pop();\n \n     return result;", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/BasicEvalNodeVisitor.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/NotEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/NotEval.java", "sha": "a45e96d13652dd50c748b01f6c29819ee48ad859", "changes": 38, "status": "modified", "deletions": 25, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/NotEval.java?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -18,7 +18,6 @@\n \n package org.apache.tajo.engine.eval;\n \n-import com.google.common.base.Preconditions;\n import com.google.gson.annotations.Expose;\n import org.apache.tajo.catalog.CatalogUtil;\n import org.apache.tajo.catalog.Schema;\n@@ -29,24 +28,23 @@\n import org.apache.tajo.storage.Tuple;\n \n public class NotEval extends EvalNode implements Cloneable {\n-  @Expose private EvalNode subExpr;\n+  @Expose private EvalNode childEval;\n   private static final DataType RES_TYPE = CatalogUtil.newSimpleDataType(TajoDataTypes.Type.BOOLEAN);\n \n-  public NotEval(EvalNode subExpr) {\n+  public NotEval(EvalNode childEval) {\n     super(EvalType.NOT);\n-    Preconditions.checkArgument(subExpr instanceof BinaryEval || subExpr instanceof NotEval);\n-    this.subExpr = subExpr;\n+    this.childEval = childEval;\n   }\n \n   @Override\n   public EvalContext newContext() {\n     NotEvalCtx newCtx = new NotEvalCtx();\n-    newCtx.subExprCtx = subExpr.newContext();\n+    newCtx.childExprCtx = childEval.newContext();\n     return newCtx;\n   }\n \n   public EvalNode getChild() {\n-    return subExpr;\n+    return childEval;\n   }\n \n   @Override\n@@ -61,46 +59,36 @@ public String getName() {\n \n   @Override\n   public void eval(EvalContext ctx, Schema schema, Tuple tuple) {\n-    subExpr.eval(((NotEvalCtx)ctx).subExprCtx, schema, tuple);\n+    childEval.eval(((NotEvalCtx) ctx).childExprCtx, schema, tuple);\n   }\n \n   @Override\n   public Datum terminate(EvalContext ctx) {\n-    return DatumFactory.createBool(!subExpr.terminate(((NotEvalCtx)ctx).subExprCtx).asBool());\n+    return DatumFactory.createBool(!childEval.terminate(((NotEvalCtx) ctx).childExprCtx).asBool());\n   }\n \n   @Override\n   public String toString() {\n-    return \"NOT \" + subExpr.toString();\n+    return \"NOT \" + childEval.toString();\n   }\n \n   @Override\n   public void preOrder(EvalNodeVisitor visitor) {\n     visitor.visit(this);\n-    if (subExpr instanceof NotEval) {\n-      ((NotEval)subExpr).subExpr.preOrder(visitor);\n-    } else {\n-      subExpr.leftExpr.preOrder(visitor);\n-      subExpr.rightExpr.preOrder(visitor);\n-    }\n+    childEval.preOrder(visitor);\n   }\n \n   @Override\n   public void postOrder(EvalNodeVisitor visitor) {    \n-    if (subExpr instanceof NotEval) {\n-      ((NotEval)subExpr).subExpr.preOrder(visitor);\n-    } else {\n-      subExpr.leftExpr.preOrder(visitor);\n-      subExpr.rightExpr.preOrder(visitor);\n-    }\n+    childEval.postOrder(visitor);\n     visitor.visit(this);\n   }\n \n   @Override\n   public boolean equals(Object obj) {\n     if (obj instanceof NotEval) {\n       NotEval other = (NotEval) obj;\n-      return this.subExpr.equals(other.subExpr);\n+      return this.childEval.equals(other.childEval);\n     } else {\n       return false;\n     }\n@@ -109,11 +97,11 @@ public boolean equals(Object obj) {\n   @Override\n   public Object clone() throws CloneNotSupportedException {\n     NotEval eval = (NotEval) super.clone();\n-    eval.subExpr = (EvalNode) this.subExpr.clone();\n+    eval.childEval = (EvalNode) this.childEval.clone();\n     return eval;\n   }\n \n   private class NotEvalCtx implements EvalContext {\n-    EvalContext subExprCtx;\n+    EvalContext childExprCtx;\n   }\n }", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/NotEval.java"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestPredicates.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestPredicates.java", "sha": "9005b427753cbad1beb6b39d742d84dfc60c237a", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestPredicates.java?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -23,6 +23,7 @@\n \n import java.io.IOException;\n \n+import static org.apache.tajo.common.TajoDataTypes.Type.BOOLEAN;\n import static org.apache.tajo.common.TajoDataTypes.Type.INT4;\n import static org.apache.tajo.common.TajoDataTypes.Type.TEXT;\n \n@@ -130,6 +131,17 @@ public void testBooleanTest() throws IOException {\n     testSimpleEval(\"select not (1 > 3 is not true)\", new String [] {\"f\"});\n     testSimpleEval(\"select not (1 > 3 is false)\", new String [] {\"f\"});\n     testSimpleEval(\"select not (1 > 3 is not false)\", new String [] {\"t\"});\n+  }\n \n+  @Test\n+  public void testBooleanTestOnTable() throws IOException {\n+    Schema schema = new Schema();\n+    schema.addColumn(\"col1\", BOOLEAN);\n+    schema.addColumn(\"col2\", BOOLEAN);\n+    testEval(schema, \"table1\", \"t,f\", \"select col1 is true, col2 is false from table1\", new String [] {\"t\", \"t\"});\n+    testEval(schema, \"table1\", \"t,f\", \"select col1 is not true, col2 is not false from table1\",\n+        new String [] {\"f\", \"f\"});\n+    testEval(schema, \"table1\", \"t,f\", \"select not col1 is not true, not col2 is not false from table1\",\n+        new String [] {\"t\", \"t\"});\n   }\n }", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestPredicates.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-dist/src/main/bin/tajo-daemons.sh", "blob_url": "https://github.com/apache/incubator-tajo/blob/b55918bd1dc32a1b034bb67a47114a92bce24b48/tajo-dist/src/main/bin/tajo-daemons.sh", "sha": "90c7a1f07eb0195f8c3c35ebb5ae752f1d220232", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-dist/src/main/bin/tajo-daemons.sh?ref=b55918bd1dc32a1b034bb67a47114a92bce24b48", "patch": "@@ -42,7 +42,7 @@ bin=`cd \"$bin\"; pwd`\n \n # If the workers file is specified in the command line,\n # then it takes precedence over the definition in\n-# neptune-env.sh. Save it here.\n+# tajo-env.sh. Save it here.\n HOSTLIST=$TAJO_WORKERS\n \n if [ -f \"${TAJO_CONF_DIR}/tajo-env.sh\" ]; then", "filename": "tajo-dist/src/main/bin/tajo-daemons.sh"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/b23c2b5fef3a385d19ebb23e60f3ce80f3589707", "parent": "https://github.com/apache/incubator-tajo/commit/d01e47d3feaa7581024d2ac01760e52f1df9fab1", "message": "TAJO-244: assignToNonLeafTasks causes NPE occurs occasionally . (hyunsik)", "bug_id": "incubator-tajo_8", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/b23c2b5fef3a385d19ebb23e60f3ce80f3589707/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/b23c2b5fef3a385d19ebb23e60f3ce80f3589707/CHANGES.txt", "sha": "ae4ff3527b7c4700b5273b9b5b2e9f8c25bb173c", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=b23c2b5fef3a385d19ebb23e60f3ce80f3589707", "patch": "@@ -197,6 +197,8 @@ Release 0.2.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-244: assignToNonLeafTasks causes NPE occurs occasionally. (hyunsik)\n+\n     TAJO-242: Enable omitted broadcast join feature after TAJO-184. (hyunsik)\n \n     TAJO-240: Reformat HiveConverter source code to match adopted conventions ", "filename": "CHANGES.txt"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/b23c2b5fef3a385d19ebb23e60f3ce80f3589707/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/AbstractResourceAllocator.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/b23c2b5fef3a385d19ebb23e60f3ce80f3589707/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/AbstractResourceAllocator.java", "sha": "c901e2902a899884fbc5d0fd2e666e1a4aaec4f1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/AbstractResourceAllocator.java?ref=b23c2b5fef3a385d19ebb23e60f3ce80f3589707", "patch": "@@ -18,15 +18,15 @@\n \n package org.apache.tajo.worker;\n \n+import com.google.common.collect.Maps;\n import org.apache.hadoop.yarn.api.records.ContainerId;\n import org.apache.hadoop.yarn.service.CompositeService;\n import org.apache.tajo.master.ContainerProxy;\n \n-import java.util.HashMap;\n import java.util.Map;\n \n public abstract class AbstractResourceAllocator extends CompositeService implements ResourceAllocator {\n-  private Map<ContainerId, ContainerProxy> containers = new HashMap<ContainerId, ContainerProxy>();\n+  private Map<ContainerId, ContainerProxy> containers = Maps.newConcurrentMap();\n \n   public AbstractResourceAllocator() {\n     super(AbstractResourceAllocator.class.getName());", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/worker/AbstractResourceAllocator.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/2a26edffed8a309ab53f6d253b813e07fa53c245", "parent": "https://github.com/apache/incubator-tajo/commit/74c369ee2bb7d721f09243bd84f6afa5cb0f7b28", "message": "TAJO-174: SQL error handler sometimes occurred NPE. (jinho)", "bug_id": "incubator-tajo_9", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/2a26edffed8a309ab53f6d253b813e07fa53c245/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/2a26edffed8a309ab53f6d253b813e07fa53c245/CHANGES.txt", "sha": "7186074c0976d7b5354c17d2e27b7cab196ceb09", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=2a26edffed8a309ab53f6d253b813e07fa53c245", "patch": "@@ -133,6 +133,8 @@ Release 0.2.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-174: SQL error handler sometimes occurred NPE. (jinho)\n+\n     TAJO-170: mvn compile error when building tar file. (jaehwa)\n \n     TAJO-154: Query calculates wrong progress in multiple step queries.", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/2a26edffed8a309ab53f6d253b813e07fa53c245/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/query/exception/SQLParseError.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/2a26edffed8a309ab53f6d253b813e07fa53c245/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/query/exception/SQLParseError.java", "sha": "625981be98e3495bf2ce904b9bc7f3de26bc5af2", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/query/exception/SQLParseError.java?ref=2a26edffed8a309ab53f6d253b813e07fa53c245", "patch": "@@ -91,10 +91,12 @@ private String getDetailedMessageWithLocation() {\n       } else if (errorLine.length() - (locationString.length() + padding) <= 0) {\n         startPos = errorLine.length() - displayLimit - 1;\n         sb.append(ellipsis).append(errorLine.substring(startPos)).append(\"\\n\");\n-        sb.append(prefixPadding).append(locationString.substring(startPos - ellipsis.length()));\n+        sb.append(prefixPadding).append(StringUtils.repeat(\" \", ellipsis.length()))\n+            .append(locationString.substring(startPos));\n       } else {\n         sb.append(ellipsis).append(errorLine.substring(startPos, startPos + displayLimit)).append(ellipsis).append(\"\\n\");\n-        sb.append(prefixPadding).append(locationString.substring(startPos - ellipsis.length()));\n+        sb.append(prefixPadding).append(StringUtils.repeat(\" \", ellipsis.length()))\n+            .append(locationString.substring(startPos));\n       }\n     } else {\n       sb.append(errorLine).append(\"\\n\");", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/query/exception/SQLParseError.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/db2f733a6753c78de673a339e9cba1c817201c76", "parent": "https://github.com/apache/incubator-tajo/commit/10c599f4b057308eca7ac8d5d7cc2542a69f0524", "message": "TAJO-568: Union query with the same alias names cause NPE.", "bug_id": "incubator-tajo_10", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/CHANGES.txt", "sha": "e6f34a0b3cda666c43f7ea84349c32d4a1378ed7", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -243,6 +243,8 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-568: Union query with the same alias names cause NPE. (hyunsik)\n+\n     TAJO-570: InvalidOperationException in outer join with constant values.\n     (hyunsik)\n ", "filename": "CHANGES.txt"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanPreprocessor.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanPreprocessor.java", "sha": "099e462c37e0e79b737af1dbc7a7099aed799d5d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanPreprocessor.java?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -250,7 +250,7 @@ public LogicalNode visitTableSubQuery(PreprocessContext ctx, Stack<Expr> stack,\n     PreprocessContext newContext;\n     // Note: TableSubQuery always has a table name.\n     // SELECT .... FROM (SELECT ...) TB_NAME <-\n-    newContext = new PreprocessContext(ctx, ctx.plan.newAndGetBlock(expr.getName()));\n+    newContext = new PreprocessContext(ctx, ctx.plan.newQueryBlock());\n     LogicalNode child = super.visitTableSubQuery(newContext, stack, expr);\n \n     // a table subquery should be dealt as a relation.", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanPreprocessor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/planner/TestLogicalPlan.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/planner/TestLogicalPlan.java", "sha": "bfd1f81ef821f5b5a8dd994a72225dc17b5525fe", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/planner/TestLogicalPlan.java?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -85,8 +85,8 @@ public static void tearDown() {\n   public final void testQueryBlockGraph() {\n     LogicalPlan plan = new LogicalPlan(planner);\n     LogicalPlan.QueryBlock root = plan.newAndGetBlock(LogicalPlan.ROOT_BLOCK);\n-    LogicalPlan.QueryBlock new1 = plan.newAndGetBlock(\"@new1\");\n-    LogicalPlan.QueryBlock new2 = plan.newAndGetBlock(\"@new2\");\n+    LogicalPlan.QueryBlock new1 = plan.newQueryBlock();\n+    LogicalPlan.QueryBlock new2 = plan.newQueryBlock();\n \n     plan.getQueryBlockGraph().addEdge(new1.getName(), root.getName(),\n         new LogicalPlan.BlockEdge(new1, root, BlockType.TableSubQuery));", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/planner/TestLogicalPlan.java"}, {"additions": 7, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestUnionQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestUnionQuery.java", "sha": "22830bf8131e558b018f76cf928c352ff0340957", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestUnionQuery.java?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -126,4 +126,11 @@ public final void testUnion10() throws Exception {\n     assertResultSet(res);\n     cleanupQuery(res);\n   }\n+\n+  @Test\n+  public final void testUnionWithSameAliasNames() throws Exception {\n+    ResultSet res = executeQuery();\n+    assertResultSet(res);\n+    cleanupQuery(res);\n+  }\n }\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestUnionQuery.java"}, {"additions": 25, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/resources/queries/TestUnionQuery/testUnionWithSameAliasNames.sql", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/resources/queries/TestUnionQuery/testUnionWithSameAliasNames.sql", "sha": "c39940cbcf71b97265bf673e4feef0e68fb60738", "changes": 25, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/queries/TestUnionQuery/testUnionWithSameAliasNames.sql?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -0,0 +1,25 @@\n+select\n+  *\n+from (\n+  select\n+    l_orderkey\n+  from (\n+    select\n+      l_orderkey\n+    from\n+      lineitem\n+  ) l1\n+\n+  union\n+\n+  select\n+    l_orderkey\n+  from (\n+    select\n+      l_orderkey\n+    from\n+      lineitem\n+  ) l1\n+) t1\n+order by\n+  l_orderkey;", "filename": "tajo-core/tajo-core-backend/src/test/resources/queries/TestUnionQuery/testUnionWithSameAliasNames.sql"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-tajo/raw/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/resources/results/TestUnionQuery/testUnionWithSameAliasNames.result", "blob_url": "https://github.com/apache/incubator-tajo/blob/db2f733a6753c78de673a339e9cba1c817201c76/tajo-core/tajo-core-backend/src/test/resources/results/TestUnionQuery/testUnionWithSameAliasNames.result", "sha": "d269baa51eb79f74aa37a9189f2f88eabd70f56f", "changes": 12, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/resources/results/TestUnionQuery/testUnionWithSameAliasNames.result?ref=db2f733a6753c78de673a339e9cba1c817201c76", "patch": "@@ -0,0 +1,12 @@\n+l_orderkey\n+-------------------------------\n+1\n+1\n+1\n+1\n+2\n+2\n+3\n+3\n+3\n+3\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/resources/results/TestUnionQuery/testUnionWithSameAliasNames.result"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/358dbace5b48cfbc139b46c96752a66b0f817908", "parent": "https://github.com/apache/incubator-tajo/commit/9a9d6eaf432f1903414792a0384b464753aa52a3", "message": "TAJO-360: If there is no matched function, catalog causes NPE. (hyoungjunkim via hyunsik)", "bug_id": "incubator-tajo_11", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/CHANGES.txt", "sha": "e4feb6a4ff315c2bee4ba8af7053070371a49961", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -222,6 +222,9 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-360: If there is no matched function, catalog causes NPE.\n+    (hyoungjunkim via hyunsik)\n+\n     TAJO-537: After TAJO-522, still OutOfMemoryError: unable to create new\n     native thread. (Min Zhou  via hyunsik)\n ", "filename": "CHANGES.txt"}, {"additions": 14, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-client/src/main/java/org/apache/tajo/catalog/AbstractCatalogClient.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-client/src/main/java/org/apache/tajo/catalog/AbstractCatalogClient.java", "sha": "322faed9f146726cae0dd1f9c57ced379de8d0fa", "changes": 19, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-client/src/main/java/org/apache/tajo/catalog/AbstractCatalogClient.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.tajo.catalog.CatalogProtocol.CatalogProtocolService;\n+import org.apache.tajo.catalog.exception.NoSuchFunctionException;\n import org.apache.tajo.catalog.proto.CatalogProtos.*;\n import org.apache.tajo.common.TajoDataTypes.DataType;\n import org.apache.tajo.conf.TajoConf;\n@@ -316,17 +317,25 @@ public final FunctionDesc getFunction(final String signature, FunctionType funcT\n       builder.addParameterTypes(type);\n     }\n \n-    FunctionDescProto descProto;\n+    FunctionDescProto descProto = null;\n     try {\n       descProto = new ServerCallable<FunctionDescProto>(conf, catalogServerAddr, CatalogProtocol.class, false) {\n         public FunctionDescProto call(NettyClientBase client) throws ServiceException {\n-          CatalogProtocolService.BlockingInterface stub = getStub(client);\n-          return stub.getFunctionMeta(null, builder.build());\n+          try {\n+            CatalogProtocolService.BlockingInterface stub = getStub(client);\n+            return stub.getFunctionMeta(null, builder.build());\n+          } catch (NoSuchFunctionException e) {\n+            abort();\n+            throw e;\n+          }\n         }\n       }.withRetries();\n     } catch (ServiceException e) {\n       LOG.error(e.getMessage(), e);\n-      return null;\n+    }\n+\n+    if (descProto == null) {\n+      throw new NoSuchFunctionException(signature);\n     }\n     if(descProto == null) {\n       LOG.error(\"No matched function:\" + signature + \",\" + funcType + \",\" + paramTypes);\n@@ -336,7 +345,7 @@ public FunctionDescProto call(NettyClientBase client) throws ServiceException {\n       return new FunctionDesc(descProto);\n     } catch (ClassNotFoundException e) {\n       LOG.error(e);\n-      return null;\n+      throw new NoSuchFunctionException(signature);\n     }\n   }\n ", "filename": "tajo-catalog/tajo-catalog-client/src/main/java/org/apache/tajo/catalog/AbstractCatalogClient.java"}, {"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-server/src/main/java/org/apache/tajo/catalog/CatalogServer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-server/src/main/java/org/apache/tajo/catalog/CatalogServer.java", "sha": "38686e3dfd01d942f9d21391cc0bc87c3e376f51", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-server/src/main/java/org/apache/tajo/catalog/CatalogServer.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -447,7 +447,7 @@ private FunctionDescProto findFunction(String signature, List<DataType> params)\n           }\n         }\n       }\n-      return null;\n+      throw new NoSuchFunctionException(signature);\n     }\n \n     private FunctionDescProto findFunction(String signature, FunctionType type, List<DataType> params) {\n@@ -458,7 +458,7 @@ private FunctionDescProto findFunction(String signature, FunctionType type, List\n           }\n         }\n       }\n-      return null;\n+      throw new NoSuchFunctionException(signature);\n     }\n \n     private FunctionDescProto findFunction(FunctionDescProto target) {\n@@ -471,9 +471,13 @@ public BoolProto createFunction(RpcController controller, FunctionDescProto func\n       FunctionSignature signature = FunctionSignature.create(funcDesc);\n \n       if (functions.containsKey(funcDesc.getSignature())) {\n-        FunctionDescProto found = findFunction(funcDesc);\n-        if (found != null) {\n-          throw new AlreadyExistsFunctionException(signature.toString());\n+        try {\n+          FunctionDescProto found = findFunction(funcDesc);\n+          if (found != null) {\n+            throw new AlreadyExistsFunctionException(signature.toString());\n+          }\n+        } catch (NoSuchFunctionException e) {\n+          //create function\n         }\n       }\n \n@@ -508,7 +512,7 @@ public FunctionDescProto getFunctionMeta(RpcController controller, GetFunctionMe\n               request.getParameterTypesList());\n           return desc;\n         }\n-        return null;\n+        throw new NoSuchFunctionException(request.getSignature());\n       } else {\n         FunctionDescProto function = findFunction(request.getSignature(), request.getParameterTypesList());\n         return function;", "filename": "tajo-catalog/tajo-catalog-server/src/main/java/org/apache/tajo/catalog/CatalogServer.java"}, {"additions": 8, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-server/src/test/java/org/apache/tajo/catalog/TestCatalog.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-catalog/tajo-catalog-server/src/test/java/org/apache/tajo/catalog/TestCatalog.java", "sha": "a56253150786e7bbcf1bd59d87f18b524bd429de", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-server/src/test/java/org/apache/tajo/catalog/TestCatalog.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -19,6 +19,7 @@\n package org.apache.tajo.catalog;\n \n import org.apache.hadoop.fs.Path;\n+import org.apache.tajo.catalog.exception.NoSuchFunctionException;\n import org.apache.tajo.catalog.function.Function;\n import org.apache.tajo.catalog.partition.PartitionDesc;\n import org.apache.tajo.catalog.partition.Specifier;\n@@ -88,7 +89,7 @@ public void testGetTable() throws Exception {\n     assertFalse(catalog.existsTable(\"getTable\"));\n \t}\n \t\n-\t@Test(expected = Throwable.class)\n+\t@Test\n \tpublic void testAddTableNoName() throws Exception {\n \t  schema1 = new Schema();\n     schema1.addColumn(FieldName1, Type.BLOB);\n@@ -99,7 +100,7 @@ public void testAddTableNoName() throws Exception {\n \t  TableDesc desc = new TableDesc();\n \t  desc.setMeta(info);\n \t  \n-\t  catalog.addTable(desc);\n+\t  assertFalse(catalog.addTable(desc));\n \t}\n \n   static IndexDesc desc1;\n@@ -189,6 +190,11 @@ public final void testRegisterFunc() throws Exception {\n \t\tassertEquals(retrived.getFuncType(),FunctionType.UDF);\n \t}\n \n+  @Test(expected = NoSuchFunctionException.class)\n+  public final void testSuchFunctionException() throws Exception {\n+    catalog.getFunction(\"test123\", CatalogUtil.newSimpleDataTypeArray(Type.INT4));\n+  }\n+\n   @Test\n   public final void testDropFunction() throws Exception {\n     assertFalse(catalog.containFunction(\"test3\", CatalogUtil.newSimpleDataTypeArray(Type.INT4)));", "filename": "tajo-catalog/tajo-catalog-server/src/test/java/org/apache/tajo/catalog/TestCatalog.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/9a9d6eaf432f1903414792a0384b464753aa52a3/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/exception/UndefinedFunctionException.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/9a9d6eaf432f1903414792a0384b464753aa52a3/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/exception/UndefinedFunctionException.java", "sha": "36d9c5daa6e0251911fcc29a485203cad971fc38", "changes": 34, "status": "removed", "deletions": 34, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/exception/UndefinedFunctionException.java?ref=9a9d6eaf432f1903414792a0384b464753aa52a3", "patch": "@@ -1,34 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-/**\n- * \n- */\n-package org.apache.tajo.engine.exception;\n-\n-\n-public class UndefinedFunctionException extends InvalidQueryException {\n-\tprivate static final long serialVersionUID = 113593927391549716L;\n-\n-\t/**\n-\t * @param signature\n-\t */\n-\tpublic UndefinedFunctionException(String signature) {\n-\t\tsuper(\"Error: call to undefined function \"+signature+\"()\");\t\n-\t}\n-}", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/exception/UndefinedFunctionException.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/ExprAnnotator.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/ExprAnnotator.java", "sha": "ffa8f7a88858d53a33018bafc71847be39f1ba8a", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/ExprAnnotator.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -23,11 +23,11 @@\n import org.apache.tajo.catalog.CatalogUtil;\n import org.apache.tajo.catalog.Column;\n import org.apache.tajo.catalog.FunctionDesc;\n+import org.apache.tajo.catalog.exception.NoSuchFunctionException;\n import org.apache.tajo.catalog.proto.CatalogProtos;\n import org.apache.tajo.common.TajoDataTypes;\n import org.apache.tajo.datum.*;\n import org.apache.tajo.engine.eval.*;\n-import org.apache.tajo.engine.exception.UndefinedFunctionException;\n import org.apache.tajo.engine.function.AggFunction;\n import org.apache.tajo.engine.function.GeneralFunction;\n import org.apache.tajo.engine.planner.logical.NodeType;\n@@ -390,12 +390,12 @@ public EvalNode visitFunction(Context ctx, Stack<Expr> stack, FunctionExpr expr)\n     stack.pop(); // <--- Pop\n \n     if (!catalog.containFunction(expr.getSignature(), paramTypes)) {\n-      throw new UndefinedFunctionException(CatalogUtil.getCanonicalName(expr.getSignature(), paramTypes));\n+      throw new NoSuchFunctionException(CatalogUtil.getCanonicalName(expr.getSignature(), paramTypes));\n     }\n \n     FunctionDesc funcDesc = catalog.getFunction(expr.getSignature(), paramTypes);\n     if (funcDesc == null) {\n-      throw new UndefinedFunctionException(CatalogUtil.getCanonicalName(expr.getSignature(), paramTypes));\n+      throw new NoSuchFunctionException(CatalogUtil.getCanonicalName(expr.getSignature(), paramTypes));\n     }\n     try {\n     CatalogProtos.FunctionType functionType = funcDesc.getFuncType();\n@@ -429,7 +429,7 @@ public EvalNode visitCountRowsFunction(Context ctx, Stack<Expr> stack, CountRows\n     FunctionDesc countRows = catalog.getFunction(\"count\", CatalogProtos.FunctionType.AGGREGATION,\n         new TajoDataTypes.DataType[] {});\n     if (countRows == null) {\n-      throw new UndefinedFunctionException(CatalogUtil.\n+      throw new NoSuchFunctionException(CatalogUtil.\n           getCanonicalName(countRows.getSignature(), new TajoDataTypes.DataType[]{}));\n     }\n \n@@ -439,7 +439,7 @@ public EvalNode visitCountRowsFunction(Context ctx, Stack<Expr> stack, CountRows\n       return new AggregationFunctionCallEval(countRows, (AggFunction) countRows.newInstance(),\n           new EvalNode[] {});\n     } catch (InternalException e) {\n-      throw new UndefinedFunctionException(CatalogUtil.\n+      throw new NoSuchFunctionException(CatalogUtil.\n           getCanonicalName(countRows.getSignature(), new TajoDataTypes.DataType[]{}));\n     }\n   }\n@@ -462,7 +462,7 @@ public EvalNode visitGeneralSetFunction(Context ctx, Stack<Expr> stack, GeneralS\n     }\n \n     if (!catalog.containFunction(setFunction.getSignature(), functionType, paramTypes)) {\n-      throw new UndefinedFunctionException(CatalogUtil. getCanonicalName(setFunction.getSignature(), paramTypes));\n+      throw new NoSuchFunctionException(CatalogUtil. getCanonicalName(setFunction.getSignature(), paramTypes));\n     }\n \n     FunctionDesc funcDesc = catalog.getFunction(setFunction.getSignature(), functionType, paramTypes);", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/ExprAnnotator.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java", "sha": "6520f9c0d171cf752429a7e866ab2cf3bbf52bb4", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -19,6 +19,7 @@\n package org.apache.tajo.engine.eval;\n \n import org.apache.tajo.catalog.Schema;\n+import org.apache.tajo.catalog.exception.NoSuchFunctionException;\n import org.apache.tajo.datum.TimestampDatum;\n import org.junit.Test;\n \n@@ -28,6 +29,11 @@\n \n public class TestSQLExpression extends ExprTestBase {\n \n+  @Test(expected = NoSuchFunctionException.class)\n+  public void testNoSuchFunction() throws IOException {\n+    testSimpleEval(\"select test123('abc') col1 \", new String[]{\"abc\"});\n+  }\n+\n   @Test\n   public void testCast() throws IOException {\n     testSimpleEval(\"select cast (1 as char)\", new String[] {\"1\"});", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/eval/TestSQLExpression.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java", "sha": "f1d0ce3d89d92a03df7366dc710d28551791a617", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -21,12 +21,14 @@\n \n import org.apache.commons.lang.StringEscapeUtils;\n import org.apache.tajo.catalog.Schema;\n+import org.apache.tajo.catalog.exception.NoSuchFunctionException;\n import org.apache.tajo.engine.eval.ExprTestBase;\n import org.junit.Test;\n \n import java.io.IOException;\n \n import static org.apache.tajo.common.TajoDataTypes.Type.*;\n+import static org.junit.Assert.fail;\n \n public class TestStringOperatorsAndFunctions extends ExprTestBase {\n ", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/function/TestStringOperatorsAndFunctions.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-rpc/src/main/java/org/apache/tajo/rpc/ServerCallable.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/358dbace5b48cfbc139b46c96752a66b0f817908/tajo-rpc/src/main/java/org/apache/tajo/rpc/ServerCallable.java", "sha": "143c9f7b4b25a0606efa52911ab9bd3e53832944", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-rpc/src/main/java/org/apache/tajo/rpc/ServerCallable.java?ref=358dbace5b48cfbc139b46c96752a66b0f817908", "patch": "@@ -78,8 +78,7 @@ public void abort() {\n    *\n    * @param <T> the type of the return value\n    * @return an object of type T\n-   * @throws java.io.IOException if a remote or network exception occurs\n-   * @throws RuntimeException other unspecified error\n+   * @throws com.google.protobuf.ServiceException if a remote or network exception occurs\n    */\n   public T withRetries() throws ServiceException {\n     //TODO configurable\n@@ -105,7 +104,7 @@ public T withRetries() throws ServiceException {\n           throw new ServiceException(t.getMessage(), t);\n         }\n         if (tries == numRetries - 1) {\n-          throw new RetriesExhaustedException(tries, exceptions);\n+          throw new ServiceException(\"Giving up after tries=\" + tries, t);\n         }\n       } finally {\n         afterCall();", "filename": "tajo-rpc/src/main/java/org/apache/tajo/rpc/ServerCallable.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/7aba3958e2d7f3ae5f82cc50928f778566430b1c", "parent": "https://github.com/apache/incubator-tajo/commit/bb7e6b6b3ca3f729e292df3b5905a46fe773f392", "message": "TAJO-469: CTAS with no column definition will get  a NPE. (Min Zhou via hyunsik)", "bug_id": "incubator-tajo_12", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/7aba3958e2d7f3ae5f82cc50928f778566430b1c/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/7aba3958e2d7f3ae5f82cc50928f778566430b1c/CHANGES.txt", "sha": "48bfa3db75540adfd4df232b8840ac987f5d9432", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=7aba3958e2d7f3ae5f82cc50928f778566430b1c", "patch": "@@ -192,6 +192,9 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-469: CTAS with no column definition will get  a NPE.\n+    (Min Zhou via hyunsik)\n+\n     TAJO-467: Too many open FD when master failed. (hyoungjunkim via hyunsik)\n \n     TAJO-455: Throw PlanningException when Creating table with Partition", "filename": "CHANGES.txt"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4", "blob_url": "https://github.com/apache/incubator-tajo/blob/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4", "sha": "fbae1751c3467aa71b2d7276b91dc3eb4d2c25ce", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4?ref=7aba3958e2d7f3ae5f82cc50928f778566430b1c", "patch": "@@ -66,8 +66,10 @@ index_statement\n create_table_statement\n   : CREATE EXTERNAL TABLE table_name table_elements USING file_type=Identifier\n     (param_clause)? (table_partitioning_clauses)? (LOCATION path=Character_String_Literal)\n-  | CREATE TABLE table_name (table_elements)? (USING file_type=Identifier)?\n+  | CREATE TABLE table_name table_elements (USING file_type=Identifier)?\n     (param_clause)? (table_partitioning_clauses)? (AS query_expression)?\n+  | CREATE TABLE table_name (USING file_type=Identifier)?\n+    (param_clause)? (table_partitioning_clauses)? AS query_expression\n   ;\n \n table_elements", "filename": "tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java", "sha": "7349c0dfc89498b93b8d7c3851d9c903ca6eff77", "changes": 23, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java?ref=7aba3958e2d7f3ae5f82cc50928f778566430b1c", "patch": "@@ -758,15 +758,13 @@ public LogicalNode visitCreateTable(PlanContext context, Stack<OpType> stack, Cr\n       storeNode.setCreateTable();\n       storeNode.setChild(subQuery);\n \n-      if (expr.hasTableElements()) {\n-        // CREATE TABLE tbl(col1 type, col2 type) AS SELECT ...\n-        Schema schema = convertTableElementsSchema(expr.getTableElements());\n-        storeNode.setOutSchema(schema);\n-      } else {\n+      storeNode.setInSchema(subQuery.getOutSchema());\n+      if(!expr.hasTableElements()) {\n         // CREATE TABLE tbl AS SELECT ...\n-        storeNode.setOutSchema(subQuery.getOutSchema());\n+        expr.setTableElements(convertSchemaToTableElements(subQuery.getOutSchema()));\n       }\n-      storeNode.setInSchema(subQuery.getOutSchema());\n+      // else CREATE TABLE tbl(col1 type, col2 type) AS SELECT ...\n+      storeNode.setOutSchema(convertTableElementsSchema(expr.getTableElements()));\n \n       if (expr.hasStorageType()) {\n         storeNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));\n@@ -977,6 +975,17 @@ private Schema convertTableElementsSchema(CreateTable.ColumnDefinition [] elemen\n     return schema;\n   }\n \n+  private ColumnDefinition[] convertSchemaToTableElements(Schema schema) {\n+    List<Column> columns = schema.getColumns();\n+    ColumnDefinition[] columnDefinitions = new ColumnDefinition[columns.size()];\n+    for(int i = 0; i < columns.size(); i ++) {\n+      Column col = columns.get(i);\n+      columnDefinitions[i] = new ColumnDefinition(col.getColumnName(), col.getDataType().getType().name());\n+    }\n+\n+    return columnDefinitions;\n+  }\n+\n   private Collection<Column> convertTableElementsColumns(CreateTable.ColumnDefinition [] elements,\n                                                    ColumnReferenceExpr[] references) {\n     List<Column> columnList = TUtil.newList();", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/LogicalPlanner.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java", "sha": "2b3ecea15dc940f8d7627625211fe57f431396eb", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java?ref=7aba3958e2d7f3ae5f82cc50928f778566430b1c", "patch": "@@ -340,8 +340,7 @@ private ExecutionBlock buildSortPlan(GlobalPlanContext context, ExecutionBlock c\n   private ExecutionBlock buildStorePlan(GlobalPlanContext context,\n                                         ExecutionBlock childBlock,\n                                         StoreTableNode currentNode) \n-    throws PlanningException\n-    {\n+    throws PlanningException {\n     PartitionDesc partitionDesc = currentNode.getPartitions();\n \n     // if result table is not a partitioned table, directly store it", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/global/GlobalPlanner.java"}, {"additions": 44, "raw_url": "https://github.com/apache/incubator-tajo/raw/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7aba3958e2d7f3ae5f82cc50928f778566430b1c/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java", "sha": "f879c2cc7e057c37cdb5c74b23075f57d8ef2ed4", "changes": 46, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java?ref=7aba3958e2d7f3ae5f82cc50928f778566430b1c", "patch": "@@ -39,6 +39,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n+\n /**\n  * Test CREATE TABLE AS SELECT statements\n  */\n@@ -54,13 +55,54 @@ public static void setUp() throws Exception {\n     tpch = TpchTestBase.getInstance();\n   }\n \n+  @Test\n+  public final void testCtasWithoutTableDefinition() throws Exception {\n+    String tableName =\"testCtasWithoutTableDefinition\";\n+    tpch.execute(\n+        \"create table \" + tableName\n+            + \" partition by column(key float8) \"\n+            + \" as select l_orderkey as col1, l_partkey as col2, l_quantity as key from lineitem\");\n+\n+    TajoTestingCluster cluster = tpch.getTestingCluster();\n+    CatalogService catalog = cluster.getMaster().getCatalog();\n+    TableDesc desc = catalog.getTableDesc(tableName);\n+    assertTrue(catalog.existsTable(tableName));\n+    assertTrue(desc.getSchema().contains(\"testCtasWithoutTableDefinition.col1\"));\n+    PartitionDesc partitionDesc = desc.getPartitions();\n+    assertEquals(partitionDesc.getPartitionsType(), CatalogProtos.PartitionsType.COLUMN);\n+    assertEquals(\"key\", partitionDesc.getColumns().get(0).getColumnName());\n+\n+    FileSystem fs = FileSystem.get(tpch.getTestingCluster().getConfiguration());\n+    Path path = desc.getPath();\n+    assertTrue(fs.isDirectory(path));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=17.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=36.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=38.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=45.0\")));\n+    assertTrue(fs.isDirectory(new Path(path.toUri() + \"/key=49.0\")));\n+    assertEquals(5, desc.getStats().getNumRows().intValue());\n+\n+    ResultSet res = tpch.execute(\n+        \"select distinct * from \" + tableName + \" where (key = 45.0 or key = 38.0)\");\n+\n+    Map<Double, int []> resultRows1 = Maps.newHashMap();\n+    resultRows1.put(45.0d, new int[]{3, 2});\n+    resultRows1.put(38.0d, new int[]{2, 2});\n+\n+    for (int i = 0; i < 3 && res.next(); i++) {\n+      assertEquals(resultRows1.get(res.getDouble(3))[0], res.getInt(1));\n+      assertEquals(resultRows1.get(res.getDouble(3))[1], res.getInt(2));\n+    }\n+    res.close();\n+  }\n+\n   @Test\n   public final void testCtasWithColumnedPartition() throws Exception {\n     String tableName =\"testCtasWithColumnedPartition\";\n     tpch.execute(\n         \"create table \" + tableName\n-        + \" (col1 int4, col2 int4) partition by column(key float8) \"\n-        + \" as select l_orderkey as col1, l_partkey as col2, l_quantity as key from lineitem\");\n+            + \" (col1 int4, col2 int4) partition by column(key float8) \"\n+            + \" as select l_orderkey as col1, l_partkey as col2, l_quantity as key from lineitem\");\n \n     TajoTestingCluster cluster = tpch.getTestingCluster();\n     CatalogService catalog = cluster.getMaster().getCatalog();", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCTASQuery.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/a90895a74a13c654a8d12345bbbdd8d3b08c604c", "parent": "https://github.com/apache/incubator-tajo/commit/62c49c05f522158d75d818df49100a0b1fd354bb", "message": "TAJO-415: Some complex queries causes NPE and unlimited recursions. (hyunsik)", "bug_id": "incubator-tajo_13", "file": [{"additions": 9, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/CHANGES.txt", "sha": "87bbec5a86500f8064be3ab61ea47b0fd6e000a8", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -146,11 +146,17 @@ Release 0.8.0 - unreleased\n \n   BUG FIXES\n \n-    TAJO-414: Fix bug of bit operations in decode() method of DateDatum class. (Keuntae Park via jihoon)\n+    TAJO-415: Some complex queries causes NPE and unlimited recursions.\n+    (hyunsik)\n+\n+    TAJO-414: Fix bug of bit operations in decode() method of DateDatum class.\n+    (Keuntae Park via jihoon)\n \n-    TAJO-407: PostgreSQL-style cast should be higher operator priority. (hyunsik)\n+    TAJO-407: PostgreSQL-style cast should be higher operator priority.\n+    (hyunsik)\n \n-    TAJO-411: Fix Bug: createFromInt8's DATE type should be TIMESTAMP. (DaeMyung Kang via jihoon)\n+    TAJO-411: Fix Bug: createFromInt8's DATE type should be TIMESTAMP.\n+    (DaeMyung Kang via jihoon)\n \n     TAJO-390: Queries on history are expired ealier than a given expiry time.\n     (hyoungjunkim via hyunsik)", "filename": "CHANGES.txt"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/FunctionDesc.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/FunctionDesc.java", "sha": "c64ac458b1c5ec915e3ab47d2fea8f64dfa5c50d", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/FunctionDesc.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.tajo.catalog;\n \n+import com.google.common.base.Objects;\n import com.google.gson.annotations.Expose;\n import org.apache.tajo.json.GsonObject;\n import org.apache.tajo.catalog.function.Function;\n@@ -99,8 +100,9 @@ public DataType getReturnType() {\n     return this.returnType;\n   }\n \n-  public static DataType [] newNoNameSchema(DataType ... types) {\n-    return types.clone();\n+  @Override\n+  public int hashCode() {\n+    return Objects.hashCode(signature, params);\n   }\n   \n   @Override", "filename": "tajo-catalog/tajo-catalog-common/src/main/java/org/apache/tajo/catalog/FunctionDesc.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/FieldEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/FieldEval.java", "sha": "6a840e4d82b94aa142193d15732d66d813fee10b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/FieldEval.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -84,7 +84,7 @@ public Column getColumnRef() {\n     return column;\n   }\n \t\n-\tpublic String getTableId() {\t  \n+\tpublic String getQualifier() {\n \t  return column.getQualifier();\n \t}\n \t", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/eval/FieldEval.java"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java", "sha": "bd1b8d38a1528d964cd4c21ee9da940341c03d69", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -193,6 +193,7 @@ public static double getCost(JoinEdge joinEdge) {\n     }\n   }\n \n+  // TODO - costs of other operator operators (e.g., group-by and sort) should be computed in proper manners.\n   public static double getCost(LogicalNode node) {\n     switch (node.getType()) {\n \n@@ -229,8 +230,18 @@ public static double getCost(LogicalNode node) {\n         return Long.MAX_VALUE;\n       }\n \n+    case UNION:\n+      UnionNode unionNode = (UnionNode) node;\n+      return getCost(unionNode.getLeftChild()) + getCost(unionNode.getRightChild());\n+\n+    case EXCEPT:\n+    case INTERSECT:\n+      throw new UnsupportedOperationException(\"getCost() does not support EXCEPT or INTERSECT yet\");\n+\n     default:\n-      return getCost(node);\n+      // all binary operators (join, union, except, and intersect) are handled in the above cases.\n+      // So, we need to handle only unary nodes in default.\n+      return getCost(((UnaryNode) node).getChild());\n     }\n   }\n }\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/logical/join/GreedyHeuristicJoinOrderAlgorithm.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/FilterPushDownRule.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/FilterPushDownRule.java", "sha": "767325338b76a77458469105301077b9eb595499", "changes": 26, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/FilterPushDownRule.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -105,13 +105,13 @@ public LogicalNode visitJoin(Set<EvalNode> cnf, LogicalPlan plan, JoinNode joinN\n       // if both are fields\n        if (joinQual.getLeftExpr().getType() == EvalType.FIELD && joinQual.getRightExpr().getType() == EvalType.FIELD) {\n \n-          String leftTableName = ((FieldEval) joinQual.getLeftExpr()).getTableId();\n-          String rightTableName = ((FieldEval) joinQual.getRightExpr()).getTableId();\n+          String leftTableName = ((FieldEval) joinQual.getLeftExpr()).getQualifier();\n+          String rightTableName = ((FieldEval) joinQual.getRightExpr()).getQualifier();\n           List<String> nullSuppliers = Lists.newArrayList();\n-          String [] leftLineage = PlannerUtil.getRelationLineage(joinNode.getLeftChild());\n-          String [] rightLineage = PlannerUtil.getRelationLineage(joinNode.getRightChild());\n-          Set<String> leftTableSet = Sets.newHashSet(leftLineage);\n-          Set<String> rightTableSet = Sets.newHashSet(rightLineage);\n+          Set<String> leftTableSet = Sets.newHashSet(PlannerUtil.getRelationLineageWithinQueryBlock(plan,\n+              joinNode.getLeftChild()));\n+          Set<String> rightTableSet = Sets.newHashSet(PlannerUtil.getRelationLineageWithinQueryBlock(plan,\n+              joinNode.getRightChild()));\n \n           // some verification\n           if (joinType == JoinType.FULL_OUTER) {\n@@ -127,13 +127,13 @@ public LogicalNode visitJoin(Set<EvalNode> cnf, LogicalPlan plan, JoinNode joinN\n              }\n \n           } else if (joinType == JoinType.LEFT_OUTER) {\n-             nullSuppliers.add(((ScanNode)joinNode.getRightChild()).getTableName()); \n+             nullSuppliers.add(((RelationNode)joinNode.getRightChild()).getCanonicalName());\n              //verify that this null supplier is indeed in the right sub-tree\n              if (!rightTableSet.contains(nullSuppliers.get(0))) {\n                  throw new InvalidQueryException(\"Incorrect Logical Query Plan with regard to outer join\");\n              }\n           } else if (joinType == JoinType.RIGHT_OUTER) {\n-            if (((ScanNode)joinNode.getRightChild()).getTableName().equals(rightTableName)) {\n+            if (((RelationNode)joinNode.getRightChild()).getCanonicalName().equals(rightTableName)) {\n               nullSuppliers.add(leftTableName);\n             } else {\n               nullSuppliers.add(rightTableName);\n@@ -144,12 +144,12 @@ public LogicalNode visitJoin(Set<EvalNode> cnf, LogicalPlan plan, JoinNode joinN\n               throw new InvalidQueryException(\"Incorrect Logical Query Plan with regard to outer join\");\n             }\n           }\n-         \n+\n          // retain in this outer join node's JoinQual those selection predicates\n          // related to the outer join's null supplier(s)\n          List<EvalNode> matched2 = Lists.newArrayList();\n          for (EvalNode eval : cnf) {\n-            \n+\n             Set<Column> columnRefs = EvalTreeUtil.findDistinctRefColumns(eval);\n             Set<String> tableNames = Sets.newHashSet();\n             // getting distinct table references\n@@ -158,20 +158,20 @@ public LogicalNode visitJoin(Set<EvalNode> cnf, LogicalPlan plan, JoinNode joinN\n                 tableNames.add(col.getQualifier());\n               }\n             }\n-            \n+\n             //if the predicate involves any of the null suppliers\n             boolean shouldKeep=false;\n             Iterator<String> it2 = nullSuppliers.iterator();\n             while(it2.hasNext()){\n               if(tableNames.contains(it2.next()) == true) {\n-                   shouldKeep = true; \n+                   shouldKeep = true;\n               }\n             }\n \n             if(shouldKeep == true) {\n                 matched2.add(eval);\n             }\n-            \n+\n           }\n \n           //merge the retained predicates and establish them in the current outer join node. Then remove them from the cnf", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/FilterPushDownRule.java"}, {"additions": 19, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java", "sha": "d0e9a6f8fe20aec6c1e486c2cf190e1e418c64c2", "changes": 30, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -271,26 +271,34 @@ public LogicalNode visitTableSubQuery(PushDownContext context, LogicalPlan plan,\n     Stack<LogicalNode> newStack = new Stack<LogicalNode>();\n     newStack.push(node);\n     PushDownContext newContext = new PushDownContext(subBlock);\n+\n+    newContext.upperRequired = new HashSet<Column>();\n+\n     if (subBlock.hasProjection() && subBlock.getProjection().isAllProjected()\n         && context.upperRequired.size() == 0) {\n       newContext.targetListManager = new TargetListManager(plan, subBlock.getProjectionNode().getTargets());\n     } else {\n-     List<Target> projectedTarget = new ArrayList<Target>();\n-      for (Target target : subBlock.getTargetListManager().getUnresolvedTargets()) {\n-        for (Column column : context.upperRequired) {\n-          if (column.hasQualifier() && !node.getTableName().equals(column.getQualifier())) {\n-            continue;\n-          }\n-          if (target.getColumnSchema().getColumnName().equalsIgnoreCase(column.getColumnName())) {\n-            projectedTarget.add(target);\n+      if (!subBlock.hasGrouping()) {\n+        List<Target> projectedTarget = new ArrayList<Target>();\n+        for (Target target : subBlock.getTargetListManager().getUnresolvedTargets()) {\n+          for (Column column : context.upperRequired) {\n+            if (column.hasQualifier() && !node.getTableName().equals(column.getQualifier())) {\n+              continue;\n+            }\n+            if (target.getColumnSchema().getColumnName().equalsIgnoreCase(column.getColumnName())) {\n+              projectedTarget.add(target);\n+            }\n           }\n         }\n+        newContext.targetListManager = new TargetListManager(plan,\n+            projectedTarget.toArray(new Target[projectedTarget.size()]));\n+\n+      } else {\n+        newContext.targetListManager = new TargetListManager(plan,\n+            subBlock.getTargetListManager().getUnresolvedTargets());\n       }\n-      newContext.targetListManager = new TargetListManager(plan,\n-          projectedTarget.toArray(new Target[projectedTarget.size()]));\n     }\n \n-    newContext.upperRequired = new HashSet<Column>();\n     newContext.upperRequired.addAll(PlannerUtil.targetToSchema(newContext.targetListManager.getTargets()).getColumns());\n \n     LogicalNode child = visitChild(newContext, plan, subRoot, newStack);", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/planner/rewrite/ProjectionPushDownRule.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/QueryUnit.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/QueryUnit.java", "sha": "28f93fcd64429eb485169a818d5ce091c9580d27", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/QueryUnit.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -177,7 +177,9 @@ public void setLogicalPlan(LogicalNode plan) {\n \t      s.add(s.size(), binary.getRightChild());\n \t    } else if (node instanceof ScanNode) {\n \t      scan.add((ScanNode)node);\n-\t    }\n+\t    } else if (node instanceof TableSubQueryNode) {\n+        s.add(((TableSubQueryNode) node).getSubQuery());\n+      }\n \t  }\n \t}\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/QueryUnit.java"}, {"additions": 7, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/SubQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/SubQuery.java", "sha": "7fedd4f2df9331849c8e9958e1016bf406d216a5", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/SubQuery.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -695,7 +695,8 @@ public static int getNonLeafTaskNum(SubQuery subQuery) {\n       return maxTaskNum;\n     }\n \n-    public static long getInputVolume(MasterPlan masterPlan, QueryMasterTask.QueryMasterTaskContext context, ExecutionBlock execBlock) {\n+    public static long getInputVolume(MasterPlan masterPlan, QueryMasterTask.QueryMasterTaskContext context,\n+                                      ExecutionBlock execBlock) {\n       Map<String, TableDesc> tableMap = context.getTableDescMap();\n       if (masterPlan.isLeaf(execBlock)) {\n         ScanNode outerScan = execBlock.getScanNodes()[0];\n@@ -705,7 +706,11 @@ public static long getInputVolume(MasterPlan masterPlan, QueryMasterTask.QueryMa\n         long aggregatedVolume = 0;\n         for (ExecutionBlock childBlock : masterPlan.getChilds(execBlock)) {\n           SubQuery subquery = context.getSubQuery(childBlock.getId());\n-          aggregatedVolume += subquery.getTableStat().getNumBytes();\n+          if (subquery == null || subquery.getState() != SubQueryState.SUCCEEDED) {\n+            aggregatedVolume += getInputVolume(masterPlan, context, childBlock);\n+          } else {\n+            aggregatedVolume += subquery.getTableStat().getNumBytes();\n+          }\n         }\n \n         return aggregatedVolume;", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/master/querymaster/SubQuery.java"}, {"additions": 66, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCaseByCases.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCaseByCases.java", "sha": "7f301be0ecd4a71627113fd2a8332785a3fb376e", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCaseByCases.java?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -0,0 +1,66 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.tajo.engine.query;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import org.apache.tajo.TpchTestBase;\n+import org.apache.tajo.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.ResultSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class TestCaseByCases {\n+  private static TpchTestBase tpch;\n+\n+  public TestCaseByCases() throws IOException {\n+    super();\n+  }\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    tpch = TpchTestBase.getInstance();\n+  }\n+\n+  @Test\n+  public final void testTAJO415Case() throws Exception {\n+    ResultSet res = tpch.execute(FileUtil.readTextFile(new File(\"src/test/queries/tajo415_case.sql\")));\n+    try {\n+      Map<Integer, List<Integer>> result = Maps.newHashMap();\n+      result.put(1, Lists.newArrayList(1, 1));\n+      result.put(2, Lists.newArrayList(2, 1));\n+      result.put(3, Lists.newArrayList(3, 1));\n+      result.put(4, Lists.newArrayList(0, 1));\n+      result.put(5, Lists.newArrayList(0, 1));\n+      while(res.next()) {\n+        assertTrue(result.get(res.getInt(1)).get(0) == res.getInt(2));\n+        assertTrue(result.get(res.getInt(1)).get(1) == res.getInt(3));\n+      }\n+    } finally {\n+      res.close();\n+    }\n+  }\n+}", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/query/TestCaseByCases.java"}, {"additions": 33, "raw_url": "https://github.com/apache/incubator-tajo/raw/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/test/queries/tajo415_case.sql", "blob_url": "https://github.com/apache/incubator-tajo/blob/a90895a74a13c654a8d12345bbbdd8d3b08c604c/tajo-core/tajo-core-backend/src/test/queries/tajo415_case.sql", "sha": "4a73b0442e8ff198425b020101842bef01420998", "changes": 33, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/queries/tajo415_case.sql?ref=a90895a74a13c654a8d12345bbbdd8d3b08c604c", "patch": "@@ -0,0 +1,33 @@\n+select\n+  c_custkey,\n+  o_orderkey,\n+  a.cnt\n+\n+from (\n+\n+  select\n+    c_custkey,\n+    count(*) as cnt\n+\n+  from\n+    customer\n+\n+  group by\n+    c_custkey\n+\n+) a left outer join (\n+\n+  select\n+    o_orderkey,\n+    count(*) as cnt\n+\n+  from\n+    orders\n+\n+  where\n+    o_orderkey is not null\n+\n+  group by\n+    o_orderkey\n+\n+) b on (a.c_custkey = b.o_orderkey);\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/queries/tajo415_case.sql"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "parent": "https://github.com/apache/incubator-tajo/commit/3703a7c3617584f157d485f735e374f17d9f27fd", "message": "TAJO-141: Multiple union queries within a table subquery causes NPE. (hyunsik)", "bug_id": "incubator-tajo_14", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/CHANGES.txt", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/CHANGES.txt", "sha": "3f87a232bf3706a6ad0282060eb1667b7e36639c", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/CHANGES.txt?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -124,6 +124,9 @@ Release 0.2.0 - unreleased\n \n   BUG FIXES\n \n+    TAJO-151: Multiple union queries within a table subquery causes NPE.\n+    (hyunsik)\n+\n     TAJO-137: Unreleased resources and wrong allocation requests in\n     TajoWorkerResourceManager. (hyoungjunkim via hyunsik)\n ", "filename": "CHANGES.txt"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-algebra/src/main/java/org/apache/tajo/algebra/ColumnReferenceExpr.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-algebra/src/main/java/org/apache/tajo/algebra/ColumnReferenceExpr.java", "sha": "aa942752e5910c1e282d00bac295d89f1b471390", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-algebra/src/main/java/org/apache/tajo/algebra/ColumnReferenceExpr.java?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -29,6 +29,12 @@ public ColumnReferenceExpr(String columnName) {\n     this.name = columnName;\n   }\n \n+  public ColumnReferenceExpr(String tableName, String columnName) {\n+    super(OpType.Column);\n+    this.tableName = tableName;\n+    this.name = columnName;\n+  }\n+\n   public void setTableName(String tableName) {\n     this.tableName = tableName;\n   }", "filename": "tajo-algebra/src/main/java/org/apache/tajo/algebra/ColumnReferenceExpr.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4", "sha": "5955da74a0292b3c942f5dcfe604ee2ee2da82cc", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -282,7 +282,12 @@ query_specification\n \n select_list\n   : MULTIPLY\n-  | derived_column (COMMA derived_column)*\n+  | select_sublist (COMMA select_sublist)*\n+  ;\n+\n+select_sublist\n+  : derived_column\n+  | asterisked_qualifier=Identifier DOT MULTIPLY\n   ;\n \n set_qualifier", "filename": "tajo-core/tajo-core-backend/src/main/antlr4/org/apache/tajo/engine/parser/SQLParser.g4"}, {"additions": 45, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/parser/SQLAnalyzer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/parser/SQLAnalyzer.java", "sha": "82b1295972445e6311013dbcc5fd4f91b7584feb", "changes": 55, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/parser/SQLAnalyzer.java?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -184,29 +184,64 @@ public Expr visitQuery_specification(SQLParser.Query_specificationContext ctx) {\n       }\n     }\n \n-    Projection projection = new Projection();\n+    Projection projection = visitSelect_list(ctx.select_list());\n \n     if (ctx.set_qualifier() != null && ctx.set_qualifier().DISTINCT() != null) {\n       projection.setDistinct();\n     }\n \n-    if (ctx.select_list().MULTIPLY() != null) {\n+    if (current != null) {\n+      projection.setChild(current);\n+    }\n+\n+    current = projection;\n+\n+    return current;\n+  }\n+\n+  /**\n+   * <pre>\n+   *   select_list\n+   *   : MULTIPLY\n+   *   | select_sublist (COMMA select_sublist)*\n+   *   ;\n+   * </pre>\n+   * @param ctx\n+   * @return\n+   */\n+  @Override\n+  public Projection visitSelect_list(SQLParser.Select_listContext ctx) {\n+    Projection projection = new Projection();\n+    if (ctx.MULTIPLY() != null) {\n       projection.setAll();\n     } else {\n-      Target targets [] = new Target[ctx.select_list().derived_column().size()];\n+      Target [] targets = new Target[ctx.select_sublist().size()];\n       for (int i = 0; i < targets.length; i++) {\n-        targets[i] = visitDerived_column(ctx.select_list().derived_column(i));\n+        targets[i] = visitSelect_sublist(ctx.select_sublist(i));\n       }\n       projection.setTargets(targets);\n     }\n \n-    if (current != null) {\n-      projection.setChild(current);\n-    }\n-\n-    current = projection;\n+    return projection;\n+  }\n \n-    return current;\n+  /**\n+   * <pre>\n+   *   select_sublist\n+   *   : derived_column\n+   *   | asterisked_qualifier=Identifier DOT MULTIPLY\n+   *   ;\n+   * </pre>\n+   * @param ctx\n+   * @return\n+   */\n+  @Override\n+  public Target visitSelect_sublist(SQLParser.Select_sublistContext ctx) {\n+    if (ctx.asterisked_qualifier != null) {\n+      return new Target(new ColumnReferenceExpr(ctx.asterisked_qualifier.getText(), \"*\"));\n+    } else {\n+      return visitDerived_column(ctx.derived_column());\n+    }\n   }\n \n   @Override", "filename": "tajo-core/tajo-core-backend/src/main/java/org/apache/tajo/engine/parser/SQLAnalyzer.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/parser/TestSQLAnalyzer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/parser/TestSQLAnalyzer.java", "sha": "5ba26f856e1e7cdc393166668c0c6b6edc73403e", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/parser/TestSQLAnalyzer.java?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -245,6 +245,12 @@ public void testCreateTable10() throws IOException {\n     parseQuery(sql);\n   }\n \n+  @Test\n+  public void testTableSubQuery1() throws IOException {\n+    String sql = FileUtil.readTextFile(new File(\"src/test/queries/table_subquery1.sql\"));\n+    parseQuery(sql);\n+  }\n+\n   static String[] exprs = {\n       \"1 + 2\", // 0\n       \"3 - 4\", // 1", "filename": "tajo-core/tajo-core-backend/src/test/java/org/apache/tajo/engine/parser/TestSQLAnalyzer.java"}, {"additions": 19, "raw_url": "https://github.com/apache/incubator-tajo/raw/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/test/queries/table_subquery1.sql", "blob_url": "https://github.com/apache/incubator-tajo/blob/fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a/tajo-core/tajo-core-backend/src/test/queries/table_subquery1.sql", "sha": "3181e43c57ad0d000f1ee3bb5c154c21a88f8bd1", "changes": 19, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/queries/table_subquery1.sql?ref=fb37ff33cfaac9d46d2aaa62a9ad64abfc01ee2a", "patch": "@@ -0,0 +1,19 @@\n+SELECT unioninput.*\n+FROM (\n+  select\n+    table1.key,\n+    table1.value\n+  FROM\n+    table1\n+  WHERE\n+    table1.key < 100\n+\n+  UNION ALL\n+\n+  SELECT\n+    table2.*\n+  FROM\n+    table2\n+  WHERE\n+    table2.key > 100\n+) unioninput\n\\ No newline at end of file", "filename": "tajo-core/tajo-core-backend/src/test/queries/table_subquery1.sql"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "parent": "https://github.com/apache/incubator-tajo/commit/5b33b87c38a536949920c1955a9bb26e16c1e9c8", "message": "Merge pull request #90 from hyunsik/Q6_WORKAROUND\n\nFixed NPE bugs of Repartitioner", "bug_id": "incubator-tajo_15", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java", "sha": "13d1b7ccb56811f0a4d11f4a4b5c7dc82d13bc62", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -410,7 +410,9 @@ public static String createBasicFetchUri(String hostName, int port,\n \n     List<IntermediateEntry> partitions = new ArrayList<>();\n     for (QueryUnit tasks : childSubQuery.getQueryUnits()) {\n-      partitions.addAll(tasks.getIntermediateData());\n+      if (tasks.getIntermediateData() != null) {\n+        partitions.addAll(tasks.getIntermediateData());\n+      }\n     }\n \n     Fragment frag = new Fragment(scan.getTableId(), tablePath,", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/Repartitioner.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java", "sha": "704832ac9f3601b51851e5b5375f1853eb79b1a5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -271,7 +271,7 @@ public ContainerLaunchContext createContainerLaunchContext(TaskRunnerLaunchEvent\n     Vector<CharSequence> vargs = new Vector<>(30);\n \n     // Set java executable command\n-    LOG.info(\"Setting up app master command\");\n+    //LOG.info(\"Setting up app master command\");\n     vargs.add(\"${JAVA_HOME}\" + \"/bin/java\");\n     // Set Xmx based on am memory size\n     vargs.add(\"-Xmx2000m\");", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskRunnerLauncherImpl.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java", "sha": "4ed4e084ea276ac67d3d17ef655af36c4f889961", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -313,7 +313,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n           if (leafTasks.contains(tId)) {\n             leafTasks.remove(tId);\n             attemptId = tId;\n-            LOG.info(attemptId + \" Assigned based on host match \" + hostName);\n+            //LOG.info(attemptId + \" Assigned based on host match \" + hostName);\n             hostLocalAssigned++;\n             break;\n           }\n@@ -330,7 +330,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n             if (leafTasks.contains(tId)) {\n               leafTasks.remove(tId);\n               attemptId = tId;\n-              LOG.info(attemptId + \"Assigned based on rack match \" + rack);\n+              //LOG.info(attemptId + \"Assigned based on rack match \" + rack);\n               rackLocalAssigned++;\n               break;\n             }\n@@ -340,7 +340,7 @@ public void assignToLeafTasks(List<TaskRequestEvent> taskRequests) {\n           if (attemptId == null && leafTaskNum() > 0) {\n             attemptId = leafTasks.iterator().next();\n             leafTasks.remove(attemptId);\n-            LOG.info(attemptId + \" Assigned based on * match\");\n+            //LOG.info(attemptId + \" Assigned based on * match\");\n           }\n         }\n ", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/TaskSchedulerImpl.java"}, {"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java", "sha": "16ebc4bc48dc833a40238f07f07568c6e05d2ac9", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -171,15 +171,17 @@ protected AMResponse makeRemoteRequest() throws YarnException, YarnRemoteExcepti\n     //LOG.info(\"Response Id: \" + response.getResponseId());\n     LOG.info(\"Available Resource: \" + response.getAvailableResources());\n     LOG.info(\"Num of Allocated Containers: \" + response.getAllocatedContainers().size());\n-    LOG.info(\"================================================================\");\n-    for (Container container : response.getAllocatedContainers()) {\n-      LOG.info(\"> Container Id: \" + container.getId());\n-      LOG.info(\"> Node Id: \" + container.getNodeId());\n-      LOG.info(\"> Resource (Mem): \" + container.getResource().getMemory());\n-      LOG.info(\"> State : \" + container.getState());\n-      LOG.info(\"> Priority: \" + container.getPriority());\n+    if (response.getAllocatedContainers().size() > 0) {\n+      LOG.info(\"================================================================\");\n+      for (Container container : response.getAllocatedContainers()) {\n+        LOG.info(\"> Container Id: \" + container.getId());\n+        LOG.info(\"> Node Id: \" + container.getNodeId());\n+        LOG.info(\"> Resource (Mem): \" + container.getResource().getMemory());\n+        LOG.info(\"> State : \" + container.getState());\n+        LOG.info(\"> Priority: \" + container.getPriority());\n+      }\n+      LOG.info(\"================================================================\");\n     }\n-    LOG.info(\"================================================================\");\n     /*\n     LOG.info(\"Reboot: \" + response.getReboot());\n     LOG.info(\"Num of Updated Node: \" + response.getUpdatedNodes());", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/rm/RMContainerAllocator.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java", "sha": "1cf67dad8f2f77d652087753b81946986c9eb0ed", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -362,7 +362,6 @@ public void run() {\n         this.executor.init();\n         while(executor.next() != null && !killed) {\n           ++progress;\n-          System.out.println(\"ROW PROCEED: \" + progress);\n         }\n         this.executor.close();\n       }", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/worker/Task2.java"}, {"additions": 11, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java", "sha": "aea241c87bac02ec76129470db840bdf07632c2f", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -38,12 +38,14 @@\n import tajo.SubQueryId;\n import tajo.TajoProtos.TaskAttemptState;\n import tajo.conf.TajoConf.ConfVars;\n+import tajo.engine.MasterWorkerProtos;\n import tajo.engine.MasterWorkerProtos.QueryUnitRequestProto;\n import tajo.engine.query.QueryUnitRequestImpl;\n import tajo.ipc.MasterWorkerProtocol;\n import tajo.ipc.MasterWorkerProtocol.MasterWorkerProtocolService;\n import tajo.ipc.MasterWorkerProtocol.MasterWorkerProtocolService.Interface;\n import tajo.rpc.CallFuture2;\n+import tajo.rpc.NullCallback;\n import tajo.rpc.ProtoAsyncRpcClient;\n import tajo.util.TajoIdUtils;\n \n@@ -257,13 +259,22 @@ public void run() {\n                     LOG.info(\"Accumulated Received Task: \" + (++receivedNum));\n                     QueryUnitAttemptId taskAttemptId =\n                         new QueryUnitAttemptId(taskRequest.getId());\n+                    if (tasks.containsKey(taskAttemptId)) {\n+                      MasterWorkerProtos.TaskFatalErrorReport.Builder builder =\n+                      MasterWorkerProtos.TaskFatalErrorReport.newBuilder()\n+                          .setErrorMessage(\"Duplicate Task Attempt: \" +\n+                          taskAttemptId);\n+                      master.fatalError(null, builder.build(), NullCallback.get());\n+                      continue;\n+                    }\n                     Path taskTempDir = localFS.makeQualified(\n                         lDirAllocator.getLocalPathForWrite(baseDir +\n                             \"/\" + taskAttemptId.getQueryUnitId().getId()\n                             + \"_\" + taskAttemptId.getId(), conf));\n \n                     Task2 task = new Task2(taskAttemptId, workerContext, master,\n                         new QueryUnitRequestImpl(taskRequest), taskTempDir);\n+                    tasks.put(taskAttemptId, task);\n                     task.init();\n                     if (task.hasFetchPhase()) {\n                       task.fetch(); // The fetch is performed in an asynchronous way.", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/worker/TaskRunner.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/f0eabf02aa555b9999d1215aaf4940fa8ea507a2/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java", "sha": "c54f631bc603103dec9c89d0e5c6bf8adfe3e352", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java?ref=f0eabf02aa555b9999d1215aaf4940fa8ea507a2", "patch": "@@ -77,11 +77,10 @@ public Path initTableBase(TableMeta meta, String tableName)\n \tpublic Path initLocalTableBase(Path tablePath, TableMeta meta) throws IOException {\n \t  FileSystem fs = FileSystem.getLocal(conf);\n     if (fs.exists(tablePath)) {\n-      //throw new AlreadyExistsStorageException(tablePath);\n-      fs.delete(tablePath, true);\n+      throw new AlreadyExistsStorageException(tablePath);\n+    } else {\n+      fs.mkdirs(tablePath);\n     }\n-\n-    fs.mkdirs(tablePath);\n     Path dataDir = new Path(tablePath,\"data\");\n \n     if (meta != null) {", "filename": "tajo-core/tajo-core-storage/src/main/java/tajo/storage/StorageManager.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "parent": "https://github.com/apache/incubator-tajo/commit/4f70ea468b3895a0724bb39fdc5e21c24174cfa7", "message": "Merge pull request #84 from hyunsik/issue_84\n\nDDL statements cause NPE", "bug_id": "incubator-tajo_16", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-common/src/main/java/tajo/util/TajoIdUtils.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-common/src/main/java/tajo/util/TajoIdUtils.java", "sha": "34f63af72bbb00c7c6caacb61b5d47826c5fa0be", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-common/src/main/java/tajo/util/TajoIdUtils.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -27,6 +27,10 @@\n  * @author Hyunsik Choi\n  */\n public class TajoIdUtils {\n+  /** It is mainly for DDL statements which don's have any query id. */\n+  public static final QueryId NullQueryId =\n+      TajoIdUtils.createQueryId(BuilderUtils.newApplicationId(0, 0), 0);\n+\n   public static QueryId createQueryId(ApplicationId appId, int attemptId) {\n     return newQueryId(appId, attemptId);\n   }", "filename": "tajo-common/src/main/java/tajo/util/TajoIdUtils.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java", "sha": "5210e35fc400b15f25c65bfd6dfac7887bd46ca2", "changes": 30, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -9,12 +9,13 @@\n import tajo.QueryId;\n import tajo.catalog.Column;\n import tajo.catalog.TableDesc;\n+import tajo.client.ClientProtocol;\n import tajo.client.TajoClient;\n import tajo.conf.TajoConf;\n import tajo.conf.TajoConf.ConfVars;\n import tajo.master.cluster.ServerName;\n-import tajo.master.cluster.ServerNodeTracker;\n import tajo.util.FileUtil;\n+import tajo.util.TajoIdUtils;\n \n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -29,12 +30,9 @@\n public class TajoCli {\n   private final TajoConf conf;\n   private static final Options options;\n-  private ServerNodeTracker masterTracker;\n   private TajoClient client;\n \n-  private String zkAddr;\n   private String entryAddr;\n-  private static final int WAIT_TIME = 3000;\n   private static final int PRINT_LIMIT = 24;\n \n   private ConsoleReader reader;\n@@ -131,11 +129,19 @@ public int executeShell() throws Exception {\n       } else if (cmd[0].equalsIgnoreCase(\"history\")) {\n \n       } else {\n-        QueryId queryId = client.executeQuery(line);\n-        if (queryId != null) {\n-          getQueryResult(queryId);\n+        ClientProtocol.SubmitQueryRespose response = client.executeQuery(line);\n+\n+        if (response.getResultCode() == ClientProtocol.ResultCode.OK) {\n+          QueryId queryId = new QueryId(response.getQueryId());\n+          if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+            sout.println(\"OK\");\n+          } else {\n+            getQueryResult(queryId);\n+          }\n         } else {\n-          sout.println(client.getErrorMessage());\n+        if (response.hasErrorMessage()) {\n+          sout.println(response.getErrorMessage());\n+        }\n         }\n       }\n     }\n@@ -145,13 +151,9 @@ public int executeShell() throws Exception {\n     return 0;\n   }\n \n-  private void executeQuery(String tql) {\n-\n-  }\n-\n   private void getQueryResult(QueryId queryId) {\n     // if query is empty string\n-    if (queryId.equals(\"\")) {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n       return;\n     }\n \n@@ -177,7 +179,7 @@ private void getQueryResult(QueryId queryId) {\n           sout.print(columnValue);\n         }\n         sout.println();\n-        sout.flush();;\n+        sout.flush();\n         numOfPrintedRows++;\n         if (numOfPrintedRows >= PRINT_LIMIT) {\n           sout.print(\"continue... ('q' is quit)\");", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/cli/TajoCli.java"}, {"additions": 69, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java", "sha": "1f2a93e5e184ae5a4a2a3a3ef1faae207056b837", "changes": 101, "status": "modified", "deletions": 32, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright 2012 Database Lab., Korea Univ.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package tajo.client;\n \n import com.google.protobuf.ServiceException;\n@@ -16,6 +32,7 @@\n import tajo.engine.query.ResultSetImpl;\n import tajo.rpc.ProtoBlockingRpcClient;\n import tajo.rpc.protocolrecords.PrimitiveProtos.StringProto;\n+import tajo.util.TajoIdUtils;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -41,13 +58,11 @@ public TajoClient(TajoConf conf) throws IOException {\n \n   public TajoClient(InetSocketAddress addr) throws IOException {\n     this.conf = new TajoConf();\n-    this.conf.setBoolVar(ConfVars.CLUSTER_DISTRIBUTED, true);\n     connect(addr);\n   }\n \n   public TajoClient(String hostname, int port) throws IOException {\n     this.conf = new TajoConf();\n-    this.conf.setBoolVar(ConfVars.CLUSTER_DISTRIBUTED, true);\n     connect(NetUtils.createSocketAddr(hostname, port));\n   }\n \n@@ -59,7 +74,7 @@ private void connect(InetSocketAddress addr) throws IOException {\n       throw new IOException(e);\n     }\n \n-    LOG.info(\"Connected to tajo cluster (\" +\n+    LOG.info(\"connected to tajo cluster (\" +\n         tajo.util.NetUtils.getIpPortString(addr) + \")\");\n   }\n \n@@ -71,30 +86,38 @@ public boolean isConnected() {\n     return client.isConnected();\n   }\n \n-  private String errorMessage;\n-\n-  public QueryId executeQuery(String tql) throws ServiceException {\n+  /**\n+   * It submits a query statement and get a response immediately.\n+   * The response only contains a query id, and submission status.\n+   * In order to get the result, you should use {@link #getQueryResult(tajo.QueryId)}\n+   * or {@link #getQueryResultAndWait(tajo.QueryId)}.\n+   */\n+  public SubmitQueryRespose executeQuery(String tql) throws ServiceException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n-    SubmitQueryRespose response = service.submitQuery(null, builder.build());\n-    if (response.hasErrorMessage()) {\n-      errorMessage = response.getErrorMessage();\n-      return null;\n-    }\n-    return new QueryId(response.getQueryId());\n-  }\n \n-  public String getErrorMessage() {\n-    return errorMessage;\n+    return service.submitQuery(null, builder.build());\n   }\n \n-  public ResultSet executeQueryAndWait(String tql)\n+  /**\n+   * It submits a query statement and get a response.\n+   * The main difference from {@link #executeQuery(String)}\n+   * is a blocking method. So, this method is wait for\n+   * the finish of the submitted query.\n+   *\n+   * @return If failed, return null.\n+   */\n+  public ResultSet executeQueryAndGetResult(String tql)\n       throws ServiceException, IOException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n     SubmitQueryRespose response = service.submitQuery(null, builder.build());\n+    QueryId queryId = new QueryId(response.getQueryId());\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n \n-    return getQueryResultAndWait(new QueryId(response.getQueryId()));\n+    return getQueryResultAndWait(queryId);\n   }\n \n   public QueryStatus getQueryStatus(QueryId queryId) throws ServiceException {\n@@ -116,18 +139,24 @@ private static boolean isQueryRunnning(QueryState state) {\n \n   public ResultSet getQueryResult(QueryId queryId)\n       throws ServiceException, IOException {\n-    TableDesc tableDesc = getQueryResultDesc(queryId);\n-    ResultSet resultSet = new ResultSetImpl(conf, tableDesc.getPath());\n-    return resultSet;\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n+\n+    TableDesc tableDesc = getResultDesc(queryId);\n+    return new ResultSetImpl(conf, tableDesc.getPath());\n   }\n \n   public ResultSet getQueryResultAndWait(QueryId queryId)\n       throws ServiceException, IOException {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n     QueryStatus status = getQueryStatus(queryId);\n \n     while(status != null && isQueryRunnning(status.getState())) {\n       try {\n-        Thread.sleep(1000);\n+        Thread.sleep(500);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n@@ -144,26 +173,26 @@ public ResultSet getQueryResultAndWait(QueryId queryId)\n     }\n   }\n \n-  public TableDesc getQueryResultDesc(QueryId queryId) throws ServiceException {\n+  public TableDesc getResultDesc(QueryId queryId) throws ServiceException {\n+    if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+      return null;\n+    }\n+\n     GetQueryResultRequest.Builder builder = GetQueryResultRequest.newBuilder();\n     builder.setQueryId(queryId.getProto());\n     GetQueryResultResponse response = service.getQueryResult(null,\n         builder.build());\n \n-    TableDesc tableDesc = TCatUtil.newTableDesc(response.getTableDesc());\n-    return tableDesc;\n+    return TCatUtil.newTableDesc(response.getTableDesc());\n   }\n \n   public boolean updateQuery(String tql) throws ServiceException {\n     QueryRequest.Builder builder = QueryRequest.newBuilder();\n     builder.setQuery(tql);\n \n-    if (service.updateQuery(null, builder.build()).getResultCode()\n-        == ResultCode.OK) {\n-      return true;\n-    } else {\n-      return false;\n-    }\n+    ResultCode resultCode =\n+        service.updateQuery(null, builder.build()).getResultCode();\n+    return resultCode == ResultCode.OK;\n   }\n \n   public boolean existTable(String name) throws ServiceException {\n@@ -177,11 +206,15 @@ public TableDesc attachTable(String name, String path)\n     AttachTableRequest.Builder builder = AttachTableRequest.newBuilder();\n     builder.setName(name);\n     builder.setPath(path);\n-    TableResponse res = null;\n-    res = service.attachTable(null, builder.build());\n+    TableResponse res = service.attachTable(null, builder.build());\n     return TCatUtil.newTableDesc(res.getTableDesc());\n   }\n \n+  public TableDesc attachTable(String name, Path path)\n+      throws ServiceException {\n+    return attachTable(name, path.toString());\n+  }\n+\n   public boolean detachTable(String name) throws ServiceException {\n     StringProto.Builder builder = StringProto.newBuilder();\n     builder.setValue(name);\n@@ -208,6 +241,10 @@ public boolean dropTable(String name) throws ServiceException {\n     return null;\n   }\n \n+  /**\n+   * Get a list of table names. All table and column names are\n+   * represented as lower-case letters.\n+   */\n   public List<String> getTableList() throws ServiceException {\n     GetTableListRequest.Builder builder = GetTableListRequest.newBuilder();\n     GetTableListResponse res = service.getTableList(null, builder.build());", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/client/TajoClient.java"}, {"additions": 21, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java", "sha": "5892d03ed4b7df2b2ecdf892ac92caf3ff0ab7d7", "changes": 31, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -25,6 +25,7 @@\n import org.apache.hadoop.yarn.proto.YarnProtos.ApplicationAttemptIdProto;\n import org.apache.hadoop.yarn.service.AbstractService;\n import tajo.QueryId;\n+import tajo.TajoProtos;\n import tajo.catalog.*;\n import tajo.catalog.exception.AlreadyExistsTableException;\n import tajo.catalog.exception.NoSuchTableException;\n@@ -42,6 +43,7 @@\n import tajo.rpc.protocolrecords.PrimitiveProtos.BoolProto;\n import tajo.rpc.protocolrecords.PrimitiveProtos.StringProto;\n import tajo.storage.StorageUtil;\n+import tajo.util.TajoIdUtils;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -160,6 +162,9 @@ public GetQueryResultResponse getQueryResult(RpcController controller,\n                                                  GetQueryResultRequest request)\n         throws ServiceException {\n       QueryId queryId = new QueryId(request.getQueryId());\n+      if (queryId.equals(TajoIdUtils.NullQueryId)) {\n+\n+      }\n       Query query = context.getQuery(queryId).getContext().getQuery();\n \n       GetQueryResultResponse.Builder builder\n@@ -190,21 +195,27 @@ public GetQueryStatusResponse getQueryStatus(RpcController controller,\n                                                  GetQueryStatusRequest request)\n         throws ServiceException {\n \n-      QueryId queryId = new QueryId(request.getQueryId());\n-      Query query = context.getQuery(queryId).getContext().getQuery();\n-\n       GetQueryStatusResponse.Builder builder\n           = GetQueryStatusResponse.newBuilder();\n-\n+      QueryId queryId = new QueryId(request.getQueryId());\n       builder.setQueryId(request.getQueryId());\n-      if (query != null) {\n+\n+      if (queryId.equals(TajoIdUtils.NullQueryId)) {\n         builder.setResultCode(ResultCode.OK);\n-        builder.setState(query.getState());\n-        builder.setProgress(query.getProgress());\n-        builder.setExecutionTime(System.currentTimeMillis() - query.getStartTime());\n+        builder.setState(TajoProtos.QueryState.QUERY_SUCCEEDED);\n+        builder.setProgress(1.0f);\n+        builder.setExecutionTime(0);\n       } else {\n-        builder.setResultCode(ResultCode.ERROR);\n-        builder.setErrorMessage(\"No such query: \" + queryId.toString());\n+        Query query = context.getQuery(queryId).getContext().getQuery();\n+        if (query != null) {\n+          builder.setResultCode(ResultCode.OK);\n+          builder.setState(query.getState());\n+          builder.setProgress(query.getProgress());\n+          builder.setExecutionTime(System.currentTimeMillis() - query.getStartTime());\n+        } else {\n+          builder.setResultCode(ResultCode.ERROR);\n+          builder.setErrorMessage(\"No such query: \" + queryId.toString());\n+        }\n       }\n \n       return builder.build();", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/ClientService.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java", "sha": "9a921da6e7f29d0095cbb69940b618202da64e54", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -154,7 +154,7 @@ public QueryId executeQuery(String tql)\n     if (plan.getSubNode().getType() == ExprType.CREATE_TABLE) {\n       createTable(plan);\n \n-      return null;\n+      return TajoIdUtils.NullQueryId;\n     } else {\n       ApplicationAttemptId appAttemptId = submitQuery();\n       QueryId queryId = TajoIdUtils.createQueryId(appAttemptId);", "filename": "tajo-core/tajo-core-backend/src/main/java/tajo/master/GlobalEngine.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java", "sha": "6f558e4da57768806517c4022fd8d58fb40f8000", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -51,7 +51,7 @@ public void setup(String[] names,\n   }\n \n   public ResultSet execute(String query) throws IOException, ServiceException {\n-    return client.executeQueryAndWait(query);\n+    return client.executeQueryAndGetResult(query);\n   }\n \n   public void shutdown() throws IOException {", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/LocalTajoTestingUtility.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java", "sha": "4c8381aa8500b6371662708b823d1442a8307777", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -431,7 +431,7 @@ public static ResultSet runInLocal(String[] tableNames,\n       client.createTable(tableNames[i], new Path(tableDir.getAbsolutePath()), meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }\n@@ -463,7 +463,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }\n@@ -498,7 +498,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     return res;\n   }", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingCluster.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java", "sha": "f5b53cfdf7f77e5e028a4de3240d0523316ae282", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -472,7 +472,7 @@ public static ResultSet runInLocal(String[] tableNames,\n       client.createTable(tableNames[i], new Path(tableDir.getAbsolutePath()), meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     client.close();\n     util.shutdownMiniCluster();\n     return res;\n@@ -505,7 +505,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     client.close();\n     util.shutdownMiniCluster();\n     return res;\n@@ -541,7 +541,7 @@ public static ResultSet run(String[] names,\n       client.createTable(names[i], tablePath, meta);\n     }\n     Thread.sleep(1000);\n-    ResultSet res = client.executeQueryAndWait(query);\n+    ResultSet res = client.executeQueryAndGetResult(query);\n     util.shutdownMiniCluster();\n     client.close();\n     return res;", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/TajoTestingUtility.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java", "sha": "03ba95485429a8d10abf48919b3ea59e67b90334", "changes": 21, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -93,18 +93,19 @@ public static Path buildTestDir(String dir) throws IOException {\n     mockupMeta = TCatUtil.newTableMeta(mockupSchema, StoreType.CSV);\n \t}\n \n-\tpublic static void writeTmpTable(TajoConf conf, String parent,\n-\t    String tbName, boolean writeMeta) throws IOException {\n-\t  StorageManager sm = StorageManager.get(conf, parent);\n+  public static void writeTmpTable(TajoConf conf, Path path,\n+                                   String tableName, boolean writeMeta)\n+      throws IOException {\n+    StorageManager sm = StorageManager.get(conf, path);\n \n     Appender appender;\n     if (writeMeta) {\n-      appender = sm.getTableAppender(mockupMeta, tbName);\n+      appender = sm.getTableAppender(mockupMeta, tableName);\n     } else {\n       FileSystem fs = sm.getFileSystem();\n-      fs.mkdirs(StorageUtil.concatPath(parent, tbName, \"data\"));\n+      fs.mkdirs(StorageUtil.concatPath(path, tableName, \"data\"));\n       appender = sm.getAppender(mockupMeta,\n-          StorageUtil.concatPath(parent, tbName, \"data\", \"tb000\"));\n+          StorageUtil.concatPath(path, tableName, \"data\", \"tb000\"));\n     }\n     int deptSize = 10000;\n     int tupleNum = 100;\n@@ -117,6 +118,11 @@ public static void writeTmpTable(TajoConf conf, String parent,\n       appender.addTuple(tuple);\n     }\n     appender.close();\n+  }\n+\n+\tpublic static void writeTmpTable(TajoConf conf, String parent,\n+\t    String tableName, boolean writeMeta) throws IOException {\n+    writeTmpTable(conf, new Path(parent), tableName, writeMeta);\n \t}\n \n   private TajoConf conf;\n@@ -151,8 +157,7 @@ public ResultSet run(String [] tableNames, File [] tables, Schema [] schemas, St\n     PhysicalPlanner phyPlanner = new PhysicalPlannerImpl(conf, sm);\n     PhysicalExec exec = phyPlanner.createPlan(ctx, plan);\n \n-    ResultSet result = new ResultSetImpl(conf, new File(workDir, \"out\").getAbsolutePath());\n-    return result;\n+    return new ResultSetImpl(conf, new File(workDir, \"out\").getAbsolutePath());\n   }\n \n   public static File createTmpTestDir() {", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/WorkerTestingUtil.java"}, {"additions": 48, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java", "previous_filename": "tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoCluster.java", "sha": "632ba0827b966314f70fd7873f91355f9c5b321c", "changes": 74, "status": "renamed", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -13,18 +13,22 @@\n import tajo.WorkerTestingUtil;\n import tajo.catalog.TableDesc;\n import tajo.conf.TajoConf;\n-import tajo.storage.StorageManager;\n+import tajo.storage.StorageUtil;\n+import tajo.util.CommonTestingUtil;\n \n import java.io.IOException;\n import java.util.Set;\n \n import static org.junit.Assert.*;\n \n @Category(IntegrationTest.class)\n-public class TestTajoCluster {\n+public class TestTajoClient {\n   private static TajoTestingCluster util;\n   private static TajoConf conf;\n   private static TajoClient tajo;\n+  private static String TEST_PATH = \"target/test-data/\"\n+      + TestTajoClient.class.getName();\n+  private static Path testDir;\n \n   @BeforeClass\n   public static void setUp() throws Exception {\n@@ -33,6 +37,8 @@ public static void setUp() throws Exception {\n     conf = util.getConfiguration();\n     Thread.sleep(3000);\n     tajo = new TajoClient(conf);\n+\n+    testDir = CommonTestingUtil.buildTestDir(TEST_PATH);\n   }\n \n   @AfterClass\n@@ -41,51 +47,66 @@ public static void tearDown() throws Exception {\n     tajo.close();\n   }\n \n+  private static Path writeTmpTable(String tableName) throws IOException {\n+    Path tablePath = StorageUtil.concatPath(testDir, tableName);\n+    WorkerTestingUtil.writeTmpTable(conf, testDir, tableName, true);\n+    return tablePath;\n+  }\n+\n   @Test\n   public final void testAttachTable() throws IOException, ServiceException {\n     final String tableName = \"attach\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName, true);\n+    Path tablePath = writeTmpTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n-    tajo.attachTable(tableName, \"/tajo/data/attach\");\n+    tajo.attachTable(tableName, tablePath);\n     assertTrue(tajo.existTable(tableName));\n     tajo.detachTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n   }\n \n   @Test\n   public final void testUpdateQuery() throws IOException, ServiceException {\n-    TajoConf conf = util.getConfiguration();\n-    final String tableName = \"updateQuery\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n-    StorageManager sm = StorageManager.get(conf, \"/tmp\");\n-    FileSystem fs = sm.getFileSystem();\n-    assertTrue(fs.exists(new Path(\"/tmp\", tableName)));\n+    final String tableName = \"testUpdateQuery\";\n+    Path tablePath = writeTmpTable(tableName);\n \n     assertFalse(tajo.existTable(tableName));\n     String tql =\n         \"create table \" + tableName + \" (deptname string, score int) \"\n-            + \"using csv location '/tmp/\" + tableName + \"'\";\n+            + \"using csv location '\" + tablePath + \"'\";\n     tajo.updateQuery(tql);\n     assertTrue(tajo.existTable(tableName));\n   }\n \n   @Test\n   public final void testCreateAndDropTable()\n       throws IOException, ServiceException {\n-    final String tableName = \"create\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n-    StorageManager sm = StorageManager.get(conf, \"/tmp\");\n-    FileSystem fs = sm.getFileSystem();\n-    assertTrue(fs.exists(new Path(\"/tmp\", tableName)));\n+    final String tableName = \"testCreateAndDropTable\";\n+    Path tablePath = writeTmpTable(tableName);\n+\n     assertFalse(tajo.existTable(tableName));\n-    tajo.createTable(tableName, new Path(\"/tmp\", tableName),\n-        WorkerTestingUtil.mockupMeta);\n+    tajo.createTable(tableName, tablePath, WorkerTestingUtil.mockupMeta);\n     assertTrue(tajo.existTable(tableName));\n     tajo.dropTable(tableName);\n     assertFalse(tajo.existTable(tableName));\n-    assertFalse(fs.exists(new Path(\"/tmp\", tableName)));\n+    FileSystem fs = tablePath.getFileSystem(conf);\n+    assertFalse(fs.exists(tablePath));\n+  }\n+\n+  @Test\n+  public final void testDDLByExecuteQuery() throws IOException, ServiceException {\n+    TajoConf conf = util.getConfiguration();\n+    final String tableName = \"testDDLByExecuteQuery\";\n+    WorkerTestingUtil.writeTmpTable(conf, \"/tmp\", tableName, false);\n+\n+    assertFalse(tajo.existTable(tableName));\n+    String tql =\n+        \"create table \" + tableName + \" (deptname string, score int) \"\n+            + \"using csv location '/tmp/\" + tableName + \"'\";\n+    tajo.executeQueryAndGetResult(tql);\n+    assertTrue(tajo.existTable(tableName));\n   }\n \n+  // disabled\n   public final void testGetClusterInfo() throws IOException, InterruptedException {\n     assertEquals(1,tajo.getClusterInfo().size());\n   }\n@@ -94,15 +115,16 @@ public final void testGetClusterInfo() throws IOException, InterruptedException\n   public final void testGetTableList() throws IOException, ServiceException {\n     final String tableName1 = \"table1\";\n     final String tableName2 = \"table2\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName1, true);\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName2, true);\n+    Path table1Path = writeTmpTable(tableName1);\n+    Path table2Path = writeTmpTable(tableName2);\n+\n     assertFalse(tajo.existTable(tableName1));\n     assertFalse(tajo.existTable(tableName2));\n-    tajo.attachTable(tableName1, \"/tajo/data/\"+tableName1);\n+    tajo.attachTable(tableName1, table1Path);\n     assertTrue(tajo.existTable(tableName1));\n     Set<String> tables = Sets.newHashSet(tajo.getTableList());\n     assertTrue(tables.contains(tableName1));\n-    tajo.attachTable(tableName2, \"/tajo/data/\"+tableName2);\n+    tajo.attachTable(tableName2, table2Path);\n     assertTrue(tajo.existTable(tableName2));\n     tables = Sets.newHashSet(tajo.getTableList());\n     assertTrue(tables.contains(tableName1));\n@@ -111,10 +133,10 @@ public final void testGetTableList() throws IOException, ServiceException {\n \n   @Test\n   public final void testGetTableDesc() throws IOException, ServiceException {\n-    final String tableName1 = \"tabledesc\";\n-    WorkerTestingUtil.writeTmpTable(conf, \"/tajo/data\", tableName1, true);\n+    final String tableName1 = \"table3\";\n+    Path tablePath = writeTmpTable(tableName1);\n     assertFalse(tajo.existTable(tableName1));\n-    tajo.attachTable(tableName1, \"/tajo/data/\"+tableName1);\n+    tajo.attachTable(tableName1, tablePath);\n     assertTrue(tajo.existTable(tableName1));\n     TableDesc desc = tajo.getTableDesc(tableName1);\n     assertNotNull(desc);", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/client/TestTajoClient.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/109d0c64b15f7af6a6545380c3e3d7ca50e6262e/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java", "sha": "8447cdf2c9c03e5ccffa46041f2e0dc8bf9654c1", "changes": 12, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java?ref=109d0c64b15f7af6a6545380c3e3d7ca50e6262e", "patch": "@@ -241,7 +241,7 @@ public void testCreateTable() throws Exception {\n   @Test\n   public void testScanQuery() throws Exception {\n \n-    ResultSet res = client.executeQueryAndWait(query[1]);\n+    ResultSet res = client.executeQueryAndGetResult(query[1]);\n \n     String deptname;\n     while (res.next()) {\n@@ -252,7 +252,7 @@ public void testScanQuery() throws Exception {\n \n   @Test\n   public void testGroupbyQuery() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[0]);\n+    ResultSet res = client.executeQueryAndGetResult(query[0]);\n \n     String deptname;\n     int year;\n@@ -267,7 +267,7 @@ public void testGroupbyQuery() throws Exception {\n \n   @Test\n   public void testJoin() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[2]);\n+    ResultSet res = client.executeQueryAndGetResult(query[2]);\n \n     String deptname;\n     Set<Integer> results;\n@@ -280,7 +280,7 @@ public void testJoin() throws Exception {\n \n   @Test\n   public void testSelectAfterJoin() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[4]);\n+    ResultSet res = client.executeQueryAndGetResult(query[4]);\n \n     String deptname;\n     Set<Integer> results;\n@@ -293,7 +293,7 @@ public void testSelectAfterJoin() throws Exception {\n \n   //@Test\n   public void testCubeby() throws Exception {\n-    ResultSet res = client.executeQueryAndWait(query[5]);\n+    ResultSet res = client.executeQueryAndGetResult(query[5]);\n \n     String deptname;\n     int year;\n@@ -330,7 +330,7 @@ public void run() {\n       @Override\n       public void run() {\n         try {\n-          queryId[0] = client.executeQuery(query[0]);\n+          queryId[0] = new QueryId(client.executeQuery(query[0]).getQueryId());\n         } catch (Exception e) {\n           e.printStackTrace();\n         }", "filename": "tajo-core/tajo-core-backend/src/test/java/tajo/engine/query/TestGlobalEngine.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/a3a0801bba89930a9e9de9c2fe907fcbd8bea410", "parent": "https://github.com/apache/incubator-tajo/commit/7f3a05cfe9203bc59665f23c7ee6844441fa5e5b", "message": "TAJO-960: NPE occurs when a subquery does not have any query units", "bug_id": "incubator-tajo_17", "file": [{"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/a3a0801bba89930a9e9de9c2fe907fcbd8bea410/core/src/main/java/tajo/cli/TajoCli.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a3a0801bba89930a9e9de9c2fe907fcbd8bea410/core/src/main/java/tajo/cli/TajoCli.java", "sha": "8e725fd80492f6a163afcbe7a58ecffe972f5bbb", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/core/src/main/java/tajo/cli/TajoCli.java?ref=a3a0801bba89930a9e9de9c2fe907fcbd8bea410", "patch": "@@ -193,6 +193,7 @@ private void executeQuery(String queryStr) {\n         }\n       }\n     } catch (Throwable t) {\n+      t.printStackTrace();\n       System.err.println(t.getMessage());\n     }\n   }", "filename": "core/src/main/java/tajo/cli/TajoCli.java"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/a3a0801bba89930a9e9de9c2fe907fcbd8bea410/core/src/main/java/tajo/master/SubQueryExecutor.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/a3a0801bba89930a9e9de9c2fe907fcbd8bea410/core/src/main/java/tajo/master/SubQueryExecutor.java", "sha": "b557637b9ad005004fed5b6fde0d8103a259e2cc", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/core/src/main/java/tajo/master/SubQueryExecutor.java?ref=a3a0801bba89930a9e9de9c2fe907fcbd8bea410", "patch": "@@ -336,7 +336,8 @@ public void run() {\n           }\n \n           while ((subQuery = takeSubQuery()) != null) {\n-            LOG.info(\"Schedule unit plan: \\n\" + subQuery.getLogicalPlan());\n+            LOG.info(\"Schedule unit plan: \" + subQuery.getId()\n+                + \"\\n\" + subQuery.getLogicalPlan());\n             if (subQuery.hasUnionPlan()) {\n               finishUnionUnit(subQuery);\n             } else {\n@@ -346,13 +347,13 @@ public void run() {\n                   subQuery.getOutputType());\n               int numTasks = getTaskNum(subQuery);\n               QueryUnit[] units = planner.localize(subQuery, numTasks);\n-              inprogressQueue.put(subQuery);\n-              subQuery.setStatus(QueryStatus.QUERY_INPROGRESS);\n \n               if (units.length == 0) {\n                 finishSubQueryForEmptyInput(subQuery);\n               } else {\n                 // insert query units to the pending queue\n+                inprogressQueue.put(subQuery);\n+                subQuery.setStatus(QueryStatus.QUERY_INPROGRESS);\n                 scheduleQueryUnits(units, subQuery.hasChildQuery());\n               }\n             }", "filename": "core/src/main/java/tajo/master/SubQueryExecutor.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/70b34e53039f5267607529dbdd9662450af48b66", "parent": "https://github.com/apache/incubator-tajo/commit/13f980423bbc626bfc0bb52c34960b5deaab7b03", "message": "Merge pull request #56 from jihoonson/TAJO-960_2\n\nTAJO-960: NPE occurs when a subquery does not have any query units", "bug_id": "incubator-tajo_18", "file": [{"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/70b34e53039f5267607529dbdd9662450af48b66/core/src/main/java/tajo/cli/TajoCli.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/70b34e53039f5267607529dbdd9662450af48b66/core/src/main/java/tajo/cli/TajoCli.java", "sha": "8e725fd80492f6a163afcbe7a58ecffe972f5bbb", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/core/src/main/java/tajo/cli/TajoCli.java?ref=70b34e53039f5267607529dbdd9662450af48b66", "patch": "@@ -193,6 +193,7 @@ private void executeQuery(String queryStr) {\n         }\n       }\n     } catch (Throwable t) {\n+      t.printStackTrace();\n       System.err.println(t.getMessage());\n     }\n   }", "filename": "core/src/main/java/tajo/cli/TajoCli.java"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/70b34e53039f5267607529dbdd9662450af48b66/core/src/main/java/tajo/master/SubQueryExecutor.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/70b34e53039f5267607529dbdd9662450af48b66/core/src/main/java/tajo/master/SubQueryExecutor.java", "sha": "b557637b9ad005004fed5b6fde0d8103a259e2cc", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/core/src/main/java/tajo/master/SubQueryExecutor.java?ref=70b34e53039f5267607529dbdd9662450af48b66", "patch": "@@ -336,7 +336,8 @@ public void run() {\n           }\n \n           while ((subQuery = takeSubQuery()) != null) {\n-            LOG.info(\"Schedule unit plan: \\n\" + subQuery.getLogicalPlan());\n+            LOG.info(\"Schedule unit plan: \" + subQuery.getId()\n+                + \"\\n\" + subQuery.getLogicalPlan());\n             if (subQuery.hasUnionPlan()) {\n               finishUnionUnit(subQuery);\n             } else {\n@@ -346,13 +347,13 @@ public void run() {\n                   subQuery.getOutputType());\n               int numTasks = getTaskNum(subQuery);\n               QueryUnit[] units = planner.localize(subQuery, numTasks);\n-              inprogressQueue.put(subQuery);\n-              subQuery.setStatus(QueryStatus.QUERY_INPROGRESS);\n \n               if (units.length == 0) {\n                 finishSubQueryForEmptyInput(subQuery);\n               } else {\n                 // insert query units to the pending queue\n+                inprogressQueue.put(subQuery);\n+                subQuery.setStatus(QueryStatus.QUERY_INPROGRESS);\n                 scheduleQueryUnits(units, subQuery.hasChildQuery());\n               }\n             }", "filename": "core/src/main/java/tajo/master/SubQueryExecutor.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/59fc4a59d6bfb7644edace511747e61dbd220149", "parent": "https://github.com/apache/incubator-tajo/commit/a2e574208cf24cea009d28653de1e58d1f0b1388", "message": "TAJO-877: \ud14c\uc774\ube14\uc774 \uc5ec\ub7ec \ud30c\uc77c\ub85c \uad6c\uc131\ub420 \ub54c NPE \ubc1c\uc0dd\n\nChange-Id: I6a6eac13e2a31164c98d6f530162c1bb16b2d467\nReviewed-on: https://dbserver.korea.ac.kr/reviews/296\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by:  jihoon <jihoonson@korea.ac.kr>", "bug_id": "incubator-tajo_19", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/59fc4a59d6bfb7644edace511747e61dbd220149/engine/src/main/java/nta/engine/cluster/ClusterManagerUtils.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/59fc4a59d6bfb7644edace511747e61dbd220149/engine/src/main/java/nta/engine/cluster/ClusterManagerUtils.java", "sha": "376cbeee49f66901dc2f8ab5a8671123415c32fd", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/cluster/ClusterManagerUtils.java?ref=59fc4a59d6bfb7644edace511747e61dbd220149", "patch": "@@ -2,9 +2,8 @@\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import nta.catalog.TableDesc;\n import nta.catalog.TableMetaImpl;\n-import nta.catalog.proto.CatalogProtos;\n+import nta.catalog.proto.CatalogProtos.TableDescProto;\n import nta.engine.ipc.protocolrecords.Fragment;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n@@ -56,7 +55,7 @@\n   }\n \n   public static Map<Fragment, FragmentServingInfo> assignFragments(\n-      CatalogProtos.TableDescProto td, Collection<StoredBlockInfo> storedBlockInfos)\n+      TableDescProto td, Collection<StoredBlockInfo> storedBlockInfos)\n       throws IOException {\n     StoredBlockInfo[] arrBlockInfo =\n         new StoredBlockInfo[storedBlockInfos.size()];\n@@ -105,7 +104,7 @@\n           for (String h : bl.getHosts()) {\n             if (cand.getHost().equals(h)) {\n               cand.removeBlock(currentPath, bl);\n-              cand.initIteration();\n+              cand.resetIteration();\n             }\n           }\n           if (cand.getBlockNum() == 0) {", "filename": "engine/src/main/java/nta/engine/cluster/ClusterManagerUtils.java"}, {"additions": 12, "raw_url": "https://github.com/apache/incubator-tajo/raw/59fc4a59d6bfb7644edace511747e61dbd220149/engine/src/main/java/nta/engine/cluster/StoredBlockInfo.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/59fc4a59d6bfb7644edace511747e61dbd220149/engine/src/main/java/nta/engine/cluster/StoredBlockInfo.java", "sha": "20b720e775c68209990f711fa7ff4d22779d1d87", "changes": 16, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/cluster/StoredBlockInfo.java?ref=59fc4a59d6bfb7644edace511747e61dbd220149", "patch": "@@ -52,7 +52,11 @@ public boolean removeBlock(Path filename, BlockLocation bl) {\n       List<BlockLocation> set = fileToBlocksMap.get(filename);\n       if (set.contains(bl)) {\n         numBlocks--;\n-        return set.remove(bl);\n+        boolean result = set.remove(bl);\n+        if (set.size() == 0) {\n+          fileToBlocksMap.remove(filename);\n+        }\n+        return result;\n       }\n       return false;\n     } else {\n@@ -81,10 +85,14 @@ public int compareTo(StoredBlockInfo storedBlockInfo) {\n     return this.numBlocks - storedBlockInfo.numBlocks;\n   }\n \n-  public void initIteration() {\n+  public void resetIteration() {\n     outerIt = fileToBlocksMap.entrySet().iterator();\n-    current = outerIt.next();\n-    innerIt = current.getValue().iterator();\n+    if (outerIt.hasNext()) {\n+      current = outerIt.next();\n+      innerIt = current.getValue().iterator();\n+    } else {\n+      current = null;\n+    }\n   }\n \n   public boolean hasNextBlock() {", "filename": "engine/src/main/java/nta/engine/cluster/StoredBlockInfo.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/0000793a57b4504b3454adfa8ff7e02262e047a0", "parent": "https://github.com/apache/incubator-tajo/commit/d2a7ba9467d39b23db5f5c3232c7c38a7baaa646", "message": "TAJO-843: TestClusterManager\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 NPE\n\nChange-Id: I6fd505cd5e6e2e64bcdb50541925e0914b491a0f\nReviewed-on: https://dbserver.korea.ac.kr/reviews/268\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by:  jihoon <jihoonson@korea.ac.kr>", "bug_id": "incubator-tajo_20", "file": [{"additions": 22, "raw_url": "https://github.com/apache/incubator-tajo/raw/0000793a57b4504b3454adfa8ff7e02262e047a0/engine/src/test/java/nta/cluster/TestClusterManager.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/0000793a57b4504b3454adfa8ff7e02262e047a0/engine/src/test/java/nta/cluster/TestClusterManager.java", "sha": "67a17f6f6258a4cb6db6c5749e2777b4a0f99556", "changes": 48, "status": "modified", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/cluster/TestClusterManager.java?ref=0000793a57b4504b3454adfa8ff7e02262e047a0", "patch": "@@ -1,23 +1,6 @@\n package nta.cluster;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-\n-import java.io.IOException;\n-import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.Set;\n-\n-import nta.catalog.CatalogService;\n-import nta.catalog.Schema;\n-import nta.catalog.TCatUtil;\n-import nta.catalog.TableDesc;\n-import nta.catalog.TableDescImpl;\n-import nta.catalog.TableMeta;\n+import nta.catalog.*;\n import nta.catalog.proto.CatalogProtos.DataType;\n import nta.catalog.proto.CatalogProtos.StoreType;\n import nta.engine.*;\n@@ -37,7 +20,6 @@\n import nta.engine.query.GlobalPlanner;\n import nta.storage.CSVFile2;\n import nta.util.FileUtil;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.fs.FSDataOutputStream;\n@@ -47,6 +29,12 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import java.io.IOException;\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n public class TestClusterManager {\n   static final Log LOG = LogFactory.getLog(TestClusterManager.class);\n   \n@@ -163,26 +151,34 @@ public void testGetFragAndWorker() throws Exception {\n     workersCollection = cm.getOnlineWorkers().values();\n \n     List<Set<Fragment>> frags = new ArrayList<Set<Fragment>>();\n+\n     int i = 0;\n     for (List<String> workers : workersCollection) {\n       i+= workers.size();\n       for (String w : workers) {\n-        LOG.info(\">>>>> \" + cm.getFragbyWorker(w).size());\n-        frags.add(cm.getFragbyWorker(w));\n+        if (cm.getFragbyWorker(w) != null) {\n+          frags.add(cm.getFragbyWorker(w));\n+        }\n       }\n     }\n-    assertEquals(CLUST_NUM, i);\n \n-    for (int n = 0; n < CLUST_NUM; n++) {\n-      for (Fragment frag : frags.get(n)) {\n-        String workerName = cm.getWorkerbyFrag(frag);\n+    String prevName;\n+    for (Set<Fragment> fragmentSet : frags) {\n+      prevName = \"\";\n+      for (Fragment fragment : fragmentSet) {\n+        String workerName = cm.getWorkerbyFrag(fragment);\n         assertNotNull(workerName);\n+        if (!prevName.equals(\"\")) {\n+          assertEquals(prevName, workerName);\n+        } else {\n+          prevName = workerName;\n+        }\n       }\n     }\n   }\n \n   @Test\n-  public void testGetProperHost() throws Exception, URISyntaxException {\n+  public void testGetProperHost() throws Exception {\n     QueryAnalyzer analyzer = new QueryAnalyzer(local);\n     QueryContext.Factory factory = new QueryContext.Factory(local);\n     String query = \"select id, age, name from HostsByTable0\";", "filename": "engine/src/test/java/nta/cluster/TestClusterManager.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/d2a7ba9467d39b23db5f5c3232c7c38a7baaa646", "parent": "https://github.com/apache/incubator-tajo/commit/ef8c77464319041d5fcd3eab9b1038a4ee037c31", "message": "TAJO-842: TestNtaTestingUtility\uc5d0\uc11c \ud14c\uc2a4\ud2b8 \uc2dc \ubc1c\uc0dd\ud558\ub294 NPE\n\nChange-Id: I443b49635a1a54ee0a7a58426dc0fa99aed3ed4f\nReviewed-on: https://dbserver.korea.ac.kr/reviews/267\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_21", "file": [{"additions": 34, "raw_url": "https://github.com/apache/incubator-tajo/raw/d2a7ba9467d39b23db5f5c3232c7c38a7baaa646/engine/src/test/java/nta/engine/TestNtaTestingUtility.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/d2a7ba9467d39b23db5f5c3232c7c38a7baaa646/engine/src/test/java/nta/engine/TestNtaTestingUtility.java", "sha": "8da7df12018f52617412c5ba8967c1172222ef31", "changes": 47, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/TestNtaTestingUtility.java?ref=d2a7ba9467d39b23db5f5c3232c7c38a7baaa646", "patch": "@@ -3,6 +3,7 @@\n import static org.junit.Assert.assertFalse;\n \n import java.util.Arrays;\n+import java.util.List;\n \n import nta.catalog.CatalogService;\n import nta.catalog.FunctionDesc;\n@@ -21,6 +22,8 @@\n import nta.engine.parser.QueryAnalyzer;\n import nta.engine.planner.LogicalOptimizer;\n import nta.engine.planner.LogicalPlanner;\n+import nta.engine.planner.global.QueryUnit;\n+import nta.engine.planner.global.ScheduleUnit;\n import nta.engine.planner.logical.LogicalNode;\n import nta.engine.query.QueryUnitRequestImpl;\n import nta.storage.Appender;\n@@ -89,53 +92,71 @@ public void setUp() throws Exception {\n   public void tearDown() throws Exception {\n     util.shutdownMiniCluster();\n   }\n- \n+\n   @Test\n   public final void test() throws Exception {\n     Fragment[] frags = sm.split(\"employee\", 40000);\n     int splitIdx = (int) Math.ceil(frags.length / 2.f);\n     QueryIdFactory.reset();\n-    ScheduleUnitId sid = QueryIdFactory.newScheduleUnitId(\n-        QueryIdFactory.newSubQueryId(\n-            QueryIdFactory.newQueryId()));\n+    QueryId queryId = QueryIdFactory.newQueryId();\n+    SubQueryId subQueryId = QueryIdFactory.newSubQueryId(queryId);\n+    ScheduleUnitId sid = QueryIdFactory.newScheduleUnitId(subQueryId);\n+    Query query = new Query(queryId);\n+    SubQuery subQuery = new SubQuery(subQueryId);\n+    ScheduleUnit scheduleUnit = new ScheduleUnit(sid);\n+    subQuery.addScheduleUnit(scheduleUnit);\n+    query.addSubQuery(subQuery);\n+    util.getMiniTajoCluster().getMaster().getQueryManager().addQuery(query);\n+\n     QueryUnitId qid;\n     QueryContext ctx;\n-    ParseTree query;\n+    ParseTree queryTree;\n     LogicalNode plan;\n     QueryUnitRequest req;\n     Thread.sleep(2000);\n-      \n+\n     sm.initTableBase(frags[0].getMeta(), \"testNtaTestingUtil\");\n+\n+    List<QueryUnit> queryUnits = Lists.newArrayList();\n+    List<QueryUnitRequest> queryUnitRequests = Lists.newArrayList();\n     for (int i = 0; i < 4; i++) {\n       qid = QueryIdFactory.newQueryUnitId(sid);\n       ctx = qcFactory.create();\n-      query = analyzer.parse(ctx, \n+      queryTree = analyzer.parse(ctx,\n           \"testNtaTestingUtil := select deptName, sleep(name) from employee group by deptName\");\n-      plan = LogicalPlanner.createPlan(ctx, query);\n+      plan = LogicalPlanner.createPlan(ctx, queryTree);\n       plan = LogicalOptimizer.optimize(ctx, plan);\n+      QueryUnit unit = new QueryUnit(qid);\n+      queryUnits.add(unit);\n       req = new QueryUnitRequestImpl(\n           qid, Lists.newArrayList(Arrays.copyOfRange(frags, 0, splitIdx)),\n           \"\", false, plan.toJSON());\n+      queryUnitRequests.add(req);\n+    }\n+    scheduleUnit.setQueryUnits(queryUnits.toArray(new QueryUnit[queryUnits.size()]));\n+\n+    for (int i = 0; i < 4; i++) {\n       util.getMiniTajoCluster().getLeafServerThreads().get(i)\n-        .getLeafServer().requestQueryUnit(req.getProto());\n+          .getLeafServer().requestQueryUnit(queryUnitRequests.get(i).getProto());\n     }\n-    \n+\n+\n     Thread.sleep(3000);\n     LeafServer leaf0 = util.getMiniTajoCluster().getLeafServer(0);\n     leaf0.shutdown(\"Aborted!\");\n \n     Thread.sleep(1000);\n     LeafServer leaf1 = util.getMiniTajoCluster().getLeafServer(1);\n     leaf1.shutdown(\"Aborted!\");\n-    \n+\n     Thread.sleep(1000);\n     LeafServer leaf2 = util.getMiniTajoCluster().getLeafServer(2);\n     leaf2.shutdown(\"Aborted!\");\n-    \n+\n     Thread.sleep(1000);\n     LeafServer leaf3 = util.getMiniTajoCluster().getLeafServer(3);\n     leaf3.shutdown(\"Aborted!\");\n-    \n+\n     assertFalse(leaf0.isAlive());\n     assertFalse(leaf1.isAlive());\n     assertFalse(leaf2.isAlive());", "filename": "engine/src/test/java/nta/engine/TestNtaTestingUtility.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/6346c4fa6ce0ae834cfac4b1d008837ec2845cc9", "parent": "https://github.com/apache/incubator-tajo/commit/f761968f5193baa2a67602cb2b8abf459c43f959", "message": "TAJO-825: During processing Q14, CaseWhenEval incurs NPE\n\nChange-Id: Ibc4e3a13118156af475e9f6aa79c277c32e2734e\nReviewed-on: https://dbserver.korea.ac.kr/reviews/250\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_22", "file": [{"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/6346c4fa6ce0ae834cfac4b1d008837ec2845cc9/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/6346c4fa6ce0ae834cfac4b1d008837ec2845cc9/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java", "sha": "1a8e739eff55be0ed17a94f5b2eb47cc86ab793e", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java?ref=6346c4fa6ce0ae834cfac4b1d008837ec2845cc9", "patch": "@@ -128,8 +128,8 @@ private DataType determineType(DataType left, DataType right) {\n \t@Override\n \tpublic void eval(EvalContext ctx, Schema schema, Tuple tuple) {\n     BinaryEvalCtx binCtx = (BinaryEvalCtx) ctx;\n-\t  leftExpr.eval(binCtx.left, schema, tuple);\n-    rightExpr.eval(binCtx.right, schema, tuple);\n+\t  leftExpr.eval(binCtx == null ? null : binCtx.left, schema, tuple);\n+    rightExpr.eval(binCtx == null ? null : binCtx.right, schema, tuple);\n \t}\n \n   @Override", "filename": "engine/src/main/java/nta/engine/exec/eval/BinaryEval.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/5893e74978d99d25b40af4ae465471493abbb89e", "parent": "https://github.com/apache/incubator-tajo/commit/94b25a9a983a6dedeb240d635fc2f47cf23bc6ed", "message": "TAJO-802: StatisticsUtil.aggregate incurs NPE\n\nChange-Id: I0f84a623952a21f645521dd9aa6baaeaddeff0f4\nReviewed-on: https://dbserver.korea.ac.kr/reviews/234\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_23", "file": [{"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/ColumnStat.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/ColumnStat.java", "sha": "0247071c2bd025fca7ed24e2aa41f532911f0cb1", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/catalog/statistics/ColumnStat.java?ref=5893e74978d99d25b40af4ae465471493abbb89e", "patch": "@@ -107,7 +107,7 @@ public Datum getMaxValue() {\n     if (!p.hasMaxValue()) {\n       return null;\n     }\n-    this.maxValue = TupleUtil.createFromBytes(column.getDataType(), p.getMaxValue().toByteArray());\n+    this.maxValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMaxValue().toByteArray());\n \n     return this.maxValue;\n   }\n@@ -191,10 +191,10 @@ public void initFromProto() {\n       this.numNulls = p.getNumNulls();\n     }\n     if (this.minValue == null && p.hasMinValue()) {\n-      this.minValue = TupleUtil.createFromBytes(column.getDataType(), p.getMinValue().toByteArray());\n+      this.minValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMinValue().toByteArray());\n     }\n     if (this.maxValue == null && p.hasMaxValue()) {\n-      this.maxValue = TupleUtil.createFromBytes(column.getDataType(), p.getMaxValue().toByteArray());\n+      this.maxValue = TupleUtil.createFromBytes(getColumn().getDataType(), p.getMaxValue().toByteArray());\n     }\n   }\n ", "filename": "engine/src/main/java/nta/catalog/statistics/ColumnStat.java"}, {"additions": 9, "raw_url": "https://github.com/apache/incubator-tajo/raw/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5893e74978d99d25b40af4ae465471493abbb89e/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java", "sha": "d1ed8598b4f5bc71da053e0343cba76026ff233c", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java?ref=5893e74978d99d25b40af4ae465471493abbb89e", "patch": "@@ -1,13 +1,18 @@\n package nta.catalog.statistics;\n \n+import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.logging.Log;\n \n import java.util.List;\n \n /**\n  * @author Hyunsik Choi\n  */\n public class StatisticsUtil {\n+  private static final Log LOG = LogFactory.getLog(StatisticsUtil.class);\n+\n   public static StatSet aggregate(List<StatSet> statSets) {\n     StatSet aggregated = new StatSet();\n \n@@ -38,6 +43,10 @@ public static TableStat aggregate(List<TableStat> tableStats) {\n       // aggregate column stats for each table\n       for (int i = 0; i < ts.getColumnStats().size(); i++) {\n         ColumnStat cs = ts.getColumnStats().get(i);\n+        if (cs == null) {\n+          LOG.warn(\"ERROR: One of column stats is NULL (expected column: \" + css[i].getColumn() + \")\");\n+          continue;\n+        }\n         css[i].setNumDistVals(css[i].getNumDistValues() + cs.getNumDistValues());\n         css[i].setNumNulls(css[i].getNumNulls() + cs.getNumNulls());\n         if (!cs.minIsNotSet() && (css[i].minIsNotSet() ||", "filename": "engine/src/main/java/nta/catalog/statistics/StatisticsUtil.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2", "parent": "https://github.com/apache/incubator-tajo/commit/06161b54137354a6c9c9eda0b8a8f567f96c3095", "message": "TAJO-788: the order-by clause of TPC-H Q1 incurs NPE\n\nChange-Id: I7534a8e65c4b4467c9f6ac9107ac0b9bb4986989\nReviewed-on: https://dbserver.korea.ac.kr/reviews/229\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_24", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/catalog/statistics/TableStatistics.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/catalog/statistics/TableStatistics.java", "sha": "05c04794979f19603c4f57aedc6d7d907d8b71f9", "changes": 10, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/catalog/statistics/TableStatistics.java?ref=5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2", "patch": "@@ -36,7 +36,9 @@ public TableStatistics(Schema schema) {\n     CatalogProtos.DataType type;\n     for (int i = 0; i < schema.getColumnNum(); i++) {\n       type = schema.getColumn(i).getDataType();\n-      if (type == CatalogProtos.DataType.SHORT ||\n+      if (type == CatalogProtos.DataType.CHAR ||\n+          type == CatalogProtos.DataType.BYTE ||\n+          type == CatalogProtos.DataType.SHORT ||\n           type == CatalogProtos.DataType.INT ||\n           type == CatalogProtos.DataType.LONG ||\n           type == CatalogProtos.DataType.FLOAT ||\n@@ -73,11 +75,7 @@ public void analyzeField(int idx, Datum datum) {\n       numNulls[idx]++;\n     }\n \n-    if (datum.type() == DatumType.LONG ||\n-        datum.type() == DatumType.INT ||\n-        datum.type() == DatumType.SHORT ||\n-        datum.type() == DatumType.FLOAT ||\n-        datum.type() == DatumType.DOUBLE) {\n+    if (datum.type() != DatumType.ARRAY) {\n       if (numericFields[idx]) {\n         if (maxValues[idx] < datum.asLong()) {\n           maxValues[idx] = datum.asLong();", "filename": "engine/src/main/java/nta/catalog/statistics/TableStatistics.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/engine/LocalTajoCluster.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/engine/LocalTajoCluster.java", "sha": "8927f2efbe33d5db53ce27a7e52554e0b038066f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/LocalTajoCluster.java?ref=5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2", "patch": "@@ -19,7 +19,7 @@\n \tprivate JVMClusterUtil.MasterThread masterThread;\n \tprivate final List<JVMClusterUtil.LeafServerThread> leafThreads\n \t  = new CopyOnWriteArrayList<JVMClusterUtil.LeafServerThread>();\n-\tprivate final static int DEFAULT_NO = 4;\n+\tprivate final static int DEFAULT_NO = 2;\n \tprivate final Configuration conf;\n \n \tpublic LocalTajoCluster(final Configuration conf) throws Exception {", "filename": "engine/src/main/java/nta/engine/LocalTajoCluster.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/storage/StorageUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/main/java/nta/storage/StorageUtil.java", "sha": "c6e5564d40da8d3e8fc727793846fc9fe686d41f", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/storage/StorageUtil.java?ref=5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2", "patch": "@@ -25,6 +25,7 @@ public static int getRowByteSize(Schema schema) {\n   public static int getColByteSize(Column col) {\n     switch(col.getDataType()) {\n     case BOOLEAN: return 1;\n+    case CHAR: return 1;\n     case BYTE: return 1;\n     case SHORT: return 2;\n     case INT: return 4;", "filename": "engine/src/main/java/nta/storage/StorageUtil.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/test/java/tajo/engine/TestGroupByQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2/engine/src/test/java/tajo/engine/TestGroupByQuery.java", "sha": "9cd9abdf9816c2cc22400fe7b445b29d8ceee1da", "changes": 14, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TestGroupByQuery.java?ref=5a8176de8f52ac5c2fe3f668bcbcbd4059adf9d2", "patch": "@@ -31,18 +31,4 @@ public final void testComplexParameter2() throws Exception {\n     res.next();\n     assertEquals(8, res.getLong(\"merged\"));\n   }\n-\n-  @Test\n-  public final void testTPCH14Expr() throws Exception {\n-    // The query result is computed as:\n-    // 100 * (21168.23 + 45983) / ((21168.23 * (1-0.04)) + (45983.16 * (1-0.09)) + (44694.46 * 1)\n-    // + (54058.05 * (1-0.06)) + (46796.47 * (1-0.10)))\n-\n-    String query = \"select 100 * sum(\"+\n-        \"case when p_type like 'PROMO%' then l_extendedprice else 0 end) / sum(l_extendedprice * (1 - l_discount)) \" +\n-        \"as promo_revenue from lineitem, part where l_partkey = p_partkey\";\n-    ResultSet res = execute(query);\n-    res.next();\n-    assertEquals(33, res.getInt(1));\n-  }\n }", "filename": "engine/src/test/java/tajo/engine/TestGroupByQuery.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/7bacc091f7a3939d540dcea37aca61ba2772b181", "parent": "https://github.com/apache/incubator-tajo/commit/a4dc1075913285ad84cf5b3c0ea14548db129d48", "message": "TAJO-745: an algebraic parameter of some function causes NPE\n\nChange-Id: Id6df3c65bcd05af4c66c60a3d0e93f99be42dff7\nReviewed-on: https://dbserver.korea.ac.kr/reviews/188\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_25", "file": [{"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/common/src/main/java/nta/datum/FloatDatum.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/common/src/main/java/nta/datum/FloatDatum.java", "sha": "da40de76f37da1ef7eaefaf77e67ae90079fc8c6", "changes": 13, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/common/src/main/java/nta/datum/FloatDatum.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -1,6 +1,3 @@\n-/**\n- * \n- */\n package nta.datum;\n \n import java.nio.ByteBuffer;\n@@ -196,9 +193,9 @@ public Datum plus(Datum datum) {\n     case INT:\n       return DatumFactory.createFloat(val + datum.asInt());\n     case LONG:\n-      return DatumFactory.createFloat(val + datum.asLong());\n+      return DatumFactory.createDouble(val + datum.asLong());\n     case FLOAT:\n-      return DatumFactory.createFloat(val + datum.asFloat());\n+      return DatumFactory.createDouble(val + datum.asFloat());\n     case DOUBLE:\n       return DatumFactory.createDouble(val + datum.asDouble());\n     default:\n@@ -216,7 +213,7 @@ public Datum minus(Datum datum) {\n     case LONG:\n       return DatumFactory.createDouble(val - datum.asLong());\n     case FLOAT:\n-      return DatumFactory.createFloat(val - datum.asFloat());\n+      return DatumFactory.createDouble(val - datum.asFloat());\n     case DOUBLE:\n       return DatumFactory.createDouble(val - datum.asDouble());\n     default:\n@@ -234,7 +231,7 @@ public Datum multiply(Datum datum) {\n     case LONG:\n       return DatumFactory.createDouble(val * datum.asLong());\n     case FLOAT:\n-      return DatumFactory.createFloat(val * datum.asFloat());\n+      return DatumFactory.createDouble(val * datum.asFloat());\n     case DOUBLE:\n       return DatumFactory.createDouble(val * datum.asDouble());\n     default:\n@@ -252,7 +249,7 @@ public Datum divide(Datum datum) {\n     case LONG:\n       return DatumFactory.createDouble(val / datum.asLong());\n     case FLOAT:\n-      return DatumFactory.createFloat(val / datum.asFloat());\n+      return DatumFactory.createDouble(val / datum.asFloat());\n     case DOUBLE:\n       return DatumFactory.createDouble(val / datum.asDouble());\n     default:", "filename": "common/src/main/java/nta/datum/FloatDatum.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/benchmark/tpch/q6.tql", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/benchmark/tpch/q6.tql", "sha": "5989c84a862e8de58bd3b5ae73b72b41a99e4293", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/benchmark/tpch/q6.tql?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -3,8 +3,8 @@ select\n from\n \tlineitem\n where\n-\tl_shipdate >= date '1994-01-01'\n-\tand l_shipdate < date '1994-01-01' + interval '1' year\n-\tand l_discount between 0.06 - 0.01 and 0.06 + 0.01\n+\tl_shipdate >= '1994-01-01'\n+\tand l_shipdate < '1994-01-01' + interval '1' year\n+\tand l_discount > 0.05 and l_discount < 0.07\n \tand l_quantity < 24;\n ", "filename": "engine/benchmark/tpch/q6.tql"}, {"additions": 50, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java", "sha": "23b60bf36a3e0714156f8472c783bd6e154c339e", "changes": 103, "status": "modified", "deletions": 53, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/exec/eval/BinaryEval.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -55,59 +55,56 @@ public BinaryEval(Type type, EvalNode left, EvalNode right) {\n \tpublic BinaryEval(PartialBinaryExpr expr) {\n \t  this(expr.type, expr.leftExpr, expr.rightExpr);\n \t}\n-\t\n-\tprivate DataType determineType(DataType left, DataType right) {\n-\t\tif(left == right) \n-\t\t\treturn left;\n-\t\telse {\n-\t\t\tswitch (left) {\n-\t\t\t\tcase INT: {\n-\t\t\t\t\tswitch(right) {\n-\t\t\t\t\t\tcase SHORT:\n-\t\t\t\t\t\tcase LONG:\n-\t\t\t\t\t\tcase FLOAT:\n-\t\t\t\t\t\tcase DOUBLE:\n-\t\t\t\t\t\tcase STRING: return right;\n-\t\t\t\t\t\tdefault: throw new InvalidEvalException(); \n-\t\t\t\t\t}\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tcase LONG: {\n-\t\t\t\t\tswitch(right) {\n-\t\t\t\t\t\tcase SHORT:\n-\t\t\t\t\t\tcase INT: return left;\n-\t\t\t\t\t\tcase FLOAT:\n-\t\t\t\t\t\tcase DOUBLE:\n-\t\t\t\t\t\tcase STRING: return right;\n-\t\t\t\t\t\tdefault: throw new InvalidEvalException(); \n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tcase FLOAT: {\n-\t\t\t\t\tswitch(right) {\n-\t\t\t\t\t\tcase SHORT:\n-\t\t\t\t\t\tcase INT: return left;\n-\t\t\t\t\t\tcase LONG: return DataType.DOUBLE;\n-\t\t\t\t\t\tcase DOUBLE:\n-\t\t\t\t\t\tcase STRING: return right;\n-\t\t\t\t\t\tdefault: throw new InvalidEvalException(); \n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tcase DOUBLE: {\n-\t\t\t\t\tswitch(right) {\n-\t\t\t\t\t\tcase SHORT:\n-\t\t\t\t\t\tcase INT:\n-\t\t\t\t\t\tcase LONG: return left;\n-\t\t\t\t\t\tcase STRING: return right;\n-\t\t\t\t\t\tdefault: throw new InvalidEvalException(); \n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tdefault: return left;\n-\t\t\t}\n-\t\t}\n-\t}\n+\n+  private DataType determineType(DataType left, DataType right) {\n+    switch (left) {\n+      case INT: {\n+        switch(right) {\n+          case SHORT:\n+          case INT: return DataType.INT;\n+          case LONG: return DataType.LONG;\n+          case FLOAT:\n+          case DOUBLE: return DataType.DOUBLE;\n+          default: throw new InvalidEvalException();\n+        }\n+      }\n+\n+      case LONG: {\n+        switch(right) {\n+          case SHORT:\n+          case INT:\n+          case LONG: return DataType.LONG;\n+          case FLOAT:\n+          case DOUBLE: return DataType.DOUBLE;\n+          default: throw new InvalidEvalException();\n+        }\n+      }\n+\n+      case FLOAT: {\n+        switch(right) {\n+          case SHORT:\n+          case INT:\n+          case LONG:\n+          case FLOAT:\n+          case DOUBLE: return DataType.DOUBLE;\n+          default: throw new InvalidEvalException();\n+        }\n+      }\n+\n+      case DOUBLE: {\n+        switch(right) {\n+          case SHORT:\n+          case INT:\n+          case LONG:\n+          case FLOAT:\n+          case DOUBLE: return DataType.DOUBLE;\n+          default: throw new InvalidEvalException();\n+        }\n+      }\n+\n+      default: return left;\n+    }\n+  }\n \n \t/* (non-Javadoc)\n \t * @see nta.query.executor.eval.Expr#evalBool(nta.storage.Tuple)", "filename": "engine/src/main/java/nta/engine/exec/eval/BinaryEval.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/exec/eval/FuncCallEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/exec/eval/FuncCallEval.java", "sha": "179732318a0b6b0dd63bcb1243692bfe2ade23e7", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/exec/eval/FuncCallEval.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -27,9 +27,6 @@\n \t@Expose\n \tprotected EvalNode [] givenArgs;\n \n-\t/**\n-\t * @param type\n-\t */\n \tpublic FuncCallEval(FunctionDesc desc, Function instance, \n \t    EvalNode [] givenArgs) {\n \t\tsuper(Type.FUNCTION);\n@@ -38,9 +35,13 @@ public FuncCallEval(FunctionDesc desc, Function instance,\n \t\tthis.givenArgs = givenArgs;\n \t}\n \t\n-\tpublic EvalNode [] getGivenArgs() {\n+\tpublic EvalNode [] getArgs() {\n \t  return this.givenArgs;\n \t}\n+\n+  public void setArgs(EvalNode [] args) {\n+    this.givenArgs = args;\n+  }\n \t\n \tpublic DataType getValueType() {\n \t\treturn this.desc.getReturnType();", "filename": "engine/src/main/java/nta/engine/exec/eval/FuncCallEval.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "sha": "cd7e1745f178934f3778014262d9cd255b966e84", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/PlannerUtil.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -16,7 +16,6 @@\n import org.apache.commons.logging.LogFactory;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n \n@@ -154,10 +153,11 @@ public static LogicalNode transformGroupbyTo2P(GroupbyNode gp) {\n         if (targets[i].getEvalTree().getType() == Type.FUNCTION) {\n           Column tobe = child.getOutputSchema().getColumn(i);        \n           FuncCallEval eval = (FuncCallEval) targets[i].getEvalTree();\n-          Collection<Column> tobeChanged = \n-              EvalTreeUtil.findDistinctRefColumns(eval);\n-          EvalTreeUtil.changeColumnRef(eval, tobeChanged.iterator().next(), \n-              tobe);\n+//          Collection<Column> tobeChanged =\n+//              EvalTreeUtil.findDistinctRefColumns(eval);\n+//          EvalTreeUtil.changeColumnRef(eval, tobeChanged.iterator().next(),\n+//              tobe);\n+          eval.setArgs(new EvalNode [] {new FieldEval(tobe)});\n         }\n       }\n       ", "filename": "engine/src/main/java/nta/engine/planner/PlannerUtil.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/test/java/nta/engine/exec/eval/TestEvalTreeUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/test/java/nta/engine/exec/eval/TestEvalTreeUtil.java", "sha": "f2e2d41cb641318b0d31295200091e8f7671e6ea", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/exec/eval/TestEvalTreeUtil.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -64,7 +64,7 @@ public static void setUp() throws Exception {\n     catalog.addTable(desc);\n \n     FunctionDesc funcMeta = new FunctionDesc(\"sum\", TestSum.class,\n-        FunctionType.GENERAL, DataType.INT, \n+        FunctionType.GENERAL, DataType.INT,\n         new DataType [] { DataType.INT, DataType.INT});\n     catalog.registerFunction(funcMeta);\n     \n@@ -76,7 +76,7 @@ public static void setUp() throws Exception {\n     factory = new QueryContext.Factory(catalog);\n     analyzer = new QueryAnalyzer(catalog);\n     \n-    QueryBlock block = null;    \n+    QueryBlock block;\n \n     QueryContext ctx = factory.create();\n     block = (QueryBlock) analyzer.parse(ctx, TestEvalTree.QUERIES[0]);", "filename": "engine/src/test/java/nta/engine/exec/eval/TestEvalTreeUtil.java"}, {"additions": 30, "raw_url": "https://github.com/apache/incubator-tajo/raw/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/test/java/tajo/engine/TestGroupByQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/7bacc091f7a3939d540dcea37aca61ba2772b181/engine/src/test/java/tajo/engine/TestGroupByQuery.java", "sha": "478c8bab77ccd326a3c5021960752ac7b951517b", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TestGroupByQuery.java?ref=7bacc091f7a3939d540dcea37aca61ba2772b181", "patch": "@@ -0,0 +1,30 @@\n+package tajo.engine;\n+\n+import org.apache.hadoop.thirdparty.guava.common.collect.Sets;\n+import org.junit.Test;\n+import tajo.client.ResultSetUtil;\n+\n+import java.io.IOException;\n+import java.sql.ResultSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * @author Hyunsik Choi\n+ */\n+public class TestGroupByQuery extends TpchTestBase {\n+  public TestGroupByQuery() throws IOException {\n+    super();\n+  }\n+\n+  @Test\n+  public final void testComplexParameter() throws Exception {\n+    ResultSet res = execute(\"select sum(l_extendedprice*l_discount) as revenue from lineitem\");\n+    assertTrue(res.next());\n+    assertTrue(12908 == (int)res.getDouble(\"revenue\"));\n+    assertFalse(res.next());\n+  }\n+}", "filename": "engine/src/test/java/tajo/engine/TestGroupByQuery.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/6cdf5224e7b4dd8c8359278023727acb87209e81", "parent": "https://github.com/apache/incubator-tajo/commit/d23dca9a281e0cf1f70df944cbc897391ec150a7", "message": "TAJO-731: LIKE expression causes NPE\n\nChange-Id: Ifc8d38b26c74a54452c7244eb8f4952101780d4f\nReviewed-on: https://dbserver.korea.ac.kr/reviews/173\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_26", "file": [{"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/main/java/nta/engine/exec/eval/LikeEval.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/main/java/nta/engine/exec/eval/LikeEval.java", "sha": "21e88ee208bac9cca3145c236da88aeafc6d8755", "changes": 12, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/exec/eval/LikeEval.java?ref=6cdf5224e7b4dd8c8359278023727acb87209e81", "patch": "@@ -23,6 +23,8 @@\n   @Expose private boolean not;\n   @Expose private Column column;\n   @Expose private String pattern;\n+\n+  // temporal variables\n   private int fieldId = -1;\n   private Pattern compiled;\n   private BoolDatum result;\n@@ -35,11 +37,10 @@ public LikeEval(boolean not, Column column, String pattern) {\n     this();\n     this.not = not;\n     this.column = column;\n-    this.setPattern(pattern);\n+    this.pattern = pattern;\n   }\n   \n-  public void setPattern(String pattern) {\n-    this.pattern = pattern;\n+  public void compile(String pattern) {\n     String regex = pattern.replace(\"?\", \".\");\n     regex = regex.replace(\"%\", \".*\");\n     \n@@ -57,15 +58,12 @@ public DataType getValueType() {\n   public String getName() {\n     return \"?\";\n   }\n-  \n-  public String getPattern() {\n-    return this.pattern;\n-  }\n \n   @Override\n   public Datum eval(Schema schema, Tuple tuple, Datum... args) {\n     if (fieldId == -1) {\n       fieldId = schema.getColumnId(column.getQualifiedName());\n+      compile(this.pattern);\n     }    \n     StringDatum str = tuple.getString(fieldId);\n     if (not) {", "filename": "engine/src/main/java/nta/engine/exec/eval/LikeEval.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/main/java/tajo/cli/TajoCli.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/main/java/tajo/cli/TajoCli.java", "sha": "4e22b0e4db4fa3141266067bbeb6c73e529032f1", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/tajo/cli/TajoCli.java?ref=6cdf5224e7b4dd8c8359278023727acb87209e81", "patch": "@@ -179,6 +179,7 @@ private void executeQuery(String queryStr) {\n             break;\n           }\n           numOfPrintedRows = 0;\n+          sout.println();\n         }\n       }\n     } catch (Throwable t) {", "filename": "engine/src/main/java/tajo/cli/TajoCli.java"}, {"additions": 14, "raw_url": "https://github.com/apache/incubator-tajo/raw/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/test/java/tajo/engine/TestSelectQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/6cdf5224e7b4dd8c8359278023727acb87209e81/engine/src/test/java/tajo/engine/TestSelectQuery.java", "sha": "1c8de56dff92da8126f9480a9621fef36abeacfd", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TestSelectQuery.java?ref=6cdf5224e7b4dd8c8359278023727acb87209e81", "patch": "@@ -100,4 +100,18 @@ public final void testSelectDistinct() throws Exception {\n     }\n     assertEquals(3,cnt);\n   }\n+\n+  @Test\n+  public final void testLikeClause() throws Exception {\n+    Set<String> result = Sets.newHashSet(new String[]\n+        {\"ALGERIA\", \"ETHIOPIA\", \"INDIA\", \"INDONESIA\", \"ROMANIA\", \"SAUDI ARABIA\", \"RUSSIA\"});\n+\n+    ResultSet res = execute(\"select n_name from nation where n_name like '%IA'\");\n+    int cnt = 0;\n+    while(res.next()) {\n+      assertTrue(result.contains(res.getString(1)));\n+      cnt++;\n+    }\n+    assertEquals(result.size(), cnt);\n+  }\n }", "filename": "engine/src/test/java/tajo/engine/TestSelectQuery.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "parent": "https://github.com/apache/incubator-tajo/commit/ee3ccb50ba9bbf450aefed2d9c11bef4b8db602b", "message": "TAJO-701: 'SELECT * FROM' Clause incurs NPE (Fixed TAJO-712)\n\nChange-Id: I731ce2acb82796b08e1400750520863fca840449\nReviewed-on: https://dbserver.korea.ac.kr/reviews/161\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_27", "file": [{"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/catalog/SchemaUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/catalog/SchemaUtil.java", "sha": "eef230dd00b3b68e59433a1fc0e8aaa60a2a581a", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/catalog/SchemaUtil.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -1,6 +1,7 @@\n package nta.catalog;\n \n \n+import nta.engine.parser.QueryBlock;\n \n public class SchemaUtil {\n   public static Schema merge(Schema left, Schema right) {\n@@ -14,6 +15,15 @@ public static Schema merge(Schema left, Schema right) {\n     \n     return merged;\n   }\n+\n+  public static Schema merge(QueryBlock.FromTable [] fromTables) {\n+    Schema merged = new Schema();\n+    for (QueryBlock.FromTable table : fromTables) {\n+      merged.addColumns(table.getSchema());\n+    }\n+\n+    return merged;\n+  }\n   \n   public static Schema getCommons(Schema left, Schema right) {\n     Schema common = new Schema();", "filename": "engine/src/main/java/nta/catalog/SchemaUtil.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/LeafServer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/LeafServer.java", "sha": "61529f27b6ece7079d7823264d34145bb454c48b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/LeafServer.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -547,7 +547,7 @@ public Task(QueryUnitRequest request) throws IOException {\n       LOG.info(\"* Task Initialization Info \");\n       LOG.info(\"* queryId: \" + request.getId());\n       LOG.info(\"* interQuery: \" + interQuery);\n-      LOG.info(\"* fragments (total: \" + request.getFragments().size());\n+      LOG.info(\"* fragments (total: \" + request.getFragments().size() + \")\");\n       for (Fragment f: request.getFragments()) {\n         LOG.info(\"** table id:\" + f.getId());\n         LOG.info(\"** path:\" + f.getPath());", "filename": "engine/src/main/java/nta/engine/LeafServer.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/QueryUnitScheduler.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/QueryUnitScheduler.java", "sha": "8dfe9fadffc97e23a50e8570dd0ecea96522cd86", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/QueryUnitScheduler.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -5,6 +5,7 @@\n \n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n import java.util.concurrent.BlockingQueue;\n@@ -130,7 +131,7 @@ private void requestPendingQueryUnits() throws Exception {\n       }\n       \n       for (ScanNode scan : q.getScanNodes()) {\n-        List<URI> fetches = q.getFetch(scan);\n+        Collection<URI> fetches = q.getFetch(scan);\n         if (fetches != null) {\n           for (URI fetch : fetches) {\n             request.addFetch(scan.getTableId(), fetch);\n@@ -149,6 +150,7 @@ private void requestPendingQueryUnits() throws Exception {\n         LOG.info(\"InterQuery is disabled\");\n       }\n       LOG.info(\"Fetches: \" + request.getFetches());\n+      LOG.info(\"=====================================================================\");\n     }\n   }\n   ", "filename": "engine/src/main/java/nta/engine/QueryUnitScheduler.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/cluster/QueryManager.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/cluster/QueryManager.java", "sha": "988817898eff62f2b802bc5148b61d9049785c6b", "changes": 13, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/cluster/QueryManager.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -10,14 +10,8 @@\n import java.util.Map;\n \n import nta.catalog.statistics.StatSet;\n+import nta.engine.*;\n import nta.engine.MasterInterfaceProtos.InProgressStatusProto;\n-import nta.engine.Query;\n-import nta.engine.QueryId;\n-import nta.engine.QueryUnitId;\n-import nta.engine.QueryUnitScheduler;\n-import nta.engine.ScheduleUnitId;\n-import nta.engine.SubQuery;\n-import nta.engine.SubQueryId;\n import nta.engine.exception.NoSuchQueryIdException;\n import nta.engine.planner.global.QueryUnit;\n import nta.engine.planner.global.ScheduleUnit;\n@@ -101,7 +95,10 @@ public synchronized void updateQueryAssignInfo(String servername,\n   public synchronized void updateProgress(QueryUnitId queryUnitId, \n       InProgressStatusProto progress) throws NoSuchQueryIdException {\n     QueryUnit unit = queries.get(queryUnitId.getQueryId()).getQueryUnit(queryUnitId);\n-    if (unit != null) {\n+    if (unit != null\n+        && (unit.getStatus() != MasterInterfaceProtos.QueryStatus.FINISHED\n+        || unit.getStatus() != MasterInterfaceProtos.QueryStatus.ABORTED\n+        || unit.getStatus() != MasterInterfaceProtos.QueryStatus.KILLED)) {\n       unit.setProgress(progress.getProgress());\n       unit.setStatus(progress.getStatus());\n       if (progress.getPartitionsCount() > 0) {", "filename": "engine/src/main/java/nta/engine/cluster/QueryManager.java"}, {"additions": 29, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java", "sha": "b252978c3ed1d43a1ac4315f8da9e66694c0824b", "changes": 61, "status": "modified", "deletions": 32, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -113,9 +113,9 @@ private ParseTree parseQueryTree(final Context ctx, CommonTree ast) {\n    * @param ast\n    * @return\n    */\n-  private final CreateTableStmt parseCreateStatement(final Context ctx,\n+  private CreateTableStmt parseCreateStatement(final Context ctx,\n       final CommonTree ast) {\n-    CreateTableStmt stmt = null;\n+    CreateTableStmt stmt;\n     \n     int idx = 0;\n     CommonTree node;\n@@ -147,9 +147,9 @@ private final CreateTableStmt parseCreateStatement(final Context ctx,\n     return stmt;\n   }\n   \n-  private final Schema parseCreateTableDef(final Context ctx, final CommonTree ast) {\n+  private Schema parseCreateTableDef(final Context ctx, final CommonTree ast) {\n     Schema tableDef = new Schema();\n-    DataType type = null;\n+    DataType type;\n     for (int i = 0; i < ast.getChildCount(); i++) {\n       switch(ast.getChild(i).getChild(1).getType()) {      \n       case NQLParser.BOOL: type = DataType.BOOLEAN; break;\n@@ -170,9 +170,9 @@ private final Schema parseCreateTableDef(final Context ctx, final CommonTree ast\n     return tableDef;\n   }  \n   \n-  private final SetStmt parseSetStatement(final Context ctx,\n+  private SetStmt parseSetStatement(final Context ctx,\n       final CommonTree ast) {\n-    StatementType type = null;\n+    StatementType type;\n     boolean distinct = true;\n     ParseTree left;\n     ParseTree right;\n@@ -211,7 +211,7 @@ private final SetStmt parseSetStatement(final Context ctx,\n     return set;\n   }\n \n-  private final QueryBlock parseSelectStatement(final Context ctx,\n+  private QueryBlock parseSelectStatement(final Context ctx,\n       final CommonTree ast) {\n     \n     QueryBlock block = new QueryBlock();\n@@ -264,9 +264,8 @@ private final QueryBlock parseSelectStatement(final Context ctx,\n    * \n    * @param ctx\n    * @param ast\n-   * @param block\n    */\n-  private final CreateIndexStmt parseIndexStatement(final Context ctx,\n+  private CreateIndexStmt parseIndexStatement(final Context ctx,\n       final CommonTree ast) {\n     \n     int idx = 0;\n@@ -349,8 +348,7 @@ private void parseFromClause(final Context ctx,\n       } else if (numTables > 1) {\n         // if the number of tables is greater than 1,\n         // it means the implicit join clause\n-        JoinClause joinClause = parseImplicitJoinClause(ctx, block, \n-            (CommonTree) ast);\n+        JoinClause joinClause = parseImplicitJoinClause(ctx, block, ast);\n         block.setJoinClause(joinClause);\n       }\n     }\n@@ -361,7 +359,7 @@ private JoinClause parseImplicitJoinClause(final Context ctx,\n     int numTables = ast.getChildCount();\n     Preconditions.checkArgument(numTables > 1);\n     \n-    return parseImplicitJoinClause_(ctx, block, (CommonTree) ast, 0);\n+    return parseImplicitJoinClause_(ctx, block, ast, 0);\n   }\n   \n   private JoinClause parseImplicitJoinClause_(final Context ctx,\n@@ -392,7 +390,7 @@ private JoinClause parseImplicitJoinClause_(final Context ctx,\n   \n   private JoinClause parseExplicitJoinClause(final Context ctx, final QueryBlock block, \n       final CommonTree ast) {\n-    CommonTree joinAST = (CommonTree) ast;\n+    CommonTree joinAST = ast;\n     \n     int idx = 0;\n     int parsedJoinType = joinAST.getChild(idx).getType();\n@@ -474,7 +472,7 @@ private static FromTable parseTable(final Context ctx, final QueryBlock block,\n       final CommonTree tableAST) {\n     String tableName = tableAST.getChild(0).getText();\n     TableDesc desc = checkAndGetTableByName(ctx, tableName);\n-    FromTable table = null;\n+    FromTable table;\n     if (tableAST.getChildCount() > 1) {\n       table = new FromTable(desc, \n           tableAST.getChild(1).getText());\n@@ -511,8 +509,8 @@ private void parseSelectList(final Context ctx,\n       CommonTree node = null;\n       int numTargets = ast.getChildCount();\n       Target [] targets = new Target[numTargets];\n-      EvalNode evalTree = null;\n-      String alias = null;\n+      EvalNode evalTree;\n+      String alias;\n       \n       // the final one for each target is the alias\n       // EBNF: bool_expr AS? fieldName\n@@ -553,10 +551,10 @@ private void parseGroupByClause(final Context ctx,\n       clause.setEmptyGroupSet();\n     } else {\n       // the remain ones are grouping fields.\n-      Tree group = null;\n+      Tree group;\n       List<Column> columnRefs = new ArrayList<Column>();\n-      Column [] columns = null;\n-      Column column = null;\n+      Column [] columns;\n+      Column column;\n       for (; idx < ast.getChildCount(); idx++) {\n         group = ast.getChild(idx);\n         switch (group.getType()) {\n@@ -592,7 +590,7 @@ private void parseGroupByClause(final Context ctx,\n   private void parseHavingClause(final Context ctx,\n       final QueryBlock block, final CommonTree ast) {\n     EvalNode evalTree = \n-        createEvalTree(ctx, (CommonTree) ast.getChild(0), block);      \n+        createEvalTree(ctx, ast.getChild(0), block);\n     block.setHavingCond(evalTree);\n   }\n   \n@@ -606,7 +604,7 @@ private void parseHavingClause(final Context ctx,\n    * @param ast\n    * @return\n    */\n-  private static final Options parseParams(final Context ctx, \n+  private static Options parseParams(final Context ctx,\n       final CommonTree ast) {\n     Options params = new Options();\n     \n@@ -625,15 +623,14 @@ private static final Options parseParams(final Context ctx,\n    * EBNF: sort_specifier (COMMA sort_specifier)* -> sort_specifier+\n    * \n    * @param ctx\n-   * @param block\n    * @param ast\n    */\n   private static SortSpec [] parseSortSpecifiers(final Context ctx, \n       final CommonTree ast) {\n     int numSortKeys = ast.getChildCount();\n     SortSpec[] sortKeys = new SortSpec[numSortKeys];\n-    CommonTree node = null;\n-    Column column = null;\n+    CommonTree node;\n+    Column column;\n     \n     // Each child has the following EBNF and AST:\n     // EBNF: fn=fieldName a=order_specification? o=null_ordering? \n@@ -644,7 +641,7 @@ private static final Options parseParams(final Context ctx,\n       sortKeys[i] = new SortSpec(column);\n             \n       if (node.getChildCount() > 1) {\n-        Tree child = null;\n+        Tree child;\n         for (int j = 1; j < node.getChildCount(); j++) {\n           child = node.getChild(j);\n           \n@@ -676,9 +673,9 @@ private static Column checkAndGetColumnByAST(final Context ctx,\n       tableName = fieldNode.getChild(1).getText();\n     }\n     \n-    Column column = null;\n+    Column column;\n     if(tableName != null) {\n-      TableDesc desc = null;\n+      TableDesc desc;\n       desc = checkAndGetTableByMappedName(ctx, tableName);  \n       column = checkAndGetFieldByName(desc, columnName);\n     } else {\n@@ -696,7 +693,7 @@ private static TableDesc checkAndGetTableByMappedName(final Context ctx,\n   \n   private static TableDesc checkAndGetTableByName(final Context ctx,\n       final String tableName) {\n-    TableDesc desc = null;\n+    TableDesc desc;\n \n     try {\n       desc =\n@@ -711,7 +708,7 @@ private static TableDesc checkAndGetTableByName(final Context ctx,\n   \n   private static Column checkAndGetFieldByName(final TableDesc desc,\n       final String columnName) {\n-    Column column = null;\n+    Column column;\n     \n     column = desc.getMeta().getSchema().getColumn(desc.getId()+\".\"+columnName);\n     if(column == null) {\n@@ -730,8 +727,8 @@ private static Column checkAndGetFieldByName(final TableDesc desc,\n    * @return a found column\n    */\n   private static Column expectTableByField(Context ctx, String columnName) {\n-    TableDesc desc = null;\n-    Schema schema = null;\n+    TableDesc desc;\n+    Schema schema;\n     Column column = null;    \n     int count = 0;\n     for(String table : ctx.getInputTables()) {\n@@ -764,7 +761,7 @@ private static CommonTree parseTree(final String query) {\n     CommonTokenStream tokens = new CommonTokenStream(lexer);\n     NQLParser parser = new NQLParser(tokens);\n \n-    CommonTree ast = null;\n+    CommonTree ast;\n     try {\n       ast = ((CommonTree) parser.statement().getTree());\n     } catch (RecognitionException e) {", "filename": "engine/src/main/java/nta/engine/parser/QueryAnalyzer.java"}, {"additions": 8, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java", "sha": "3299e4f7bb089be50d0ab4fd4ff6fdb2af2a6ead", "changes": 29, "status": "modified", "deletions": 21, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -276,14 +276,11 @@ public void visit(LogicalNode node) {\n         break;\n       case PROJECTION:\n         ProjectionNode projNode = (ProjectionNode) node;\n-\n-        if (!projNode.isAll()) {\n-          for (Target t : projNode.getTargetList()) {\n+        for (Target t : projNode.getTargetList()) {\n             temp = EvalTreeUtil.findDistinctRefColumns(t.getEvalTree());\n             if (!temp.isEmpty()) {\n               necessary.addAll(temp);\n             }\n-          }\n         }\n \n         break;\n@@ -458,15 +455,9 @@ public static void pushProjection(Context ctx,\n     case PROJECTION:\n       ProjectionNode projNode = ((ProjectionNode)logicalNode);\n       if(necessary != null) {\n-        if(projNode.isAll()) {\n-          for(Column column : projNode.getOutputSchema().getColumns()) {\n-            necessary.add(column);\n-          }          \n-        } else {\n-          for(Target t : projNode.getTargetList()) {\n+        for(Target t : projNode.getTargetList()) {\n             getTargetListFromEvalTree(projNode.getInputSchema(), t.getEvalTree(), \n                 necessary);\n-          }\n         }\n         \n         stack.push(projNode);\n@@ -488,17 +479,13 @@ public static void pushProjection(Context ctx,\n       if (projNode.getSubNode() != null)\n         projNode.setInputSchema(projNode.getSubNode().getOutputSchema());\n       \n-      if(projNode.isAll()) {\n-        projNode.setOutputSchema(projNode.getInputSchema());  \n-      } else {\n-        Schema prjTargets = new Schema();\n-        for(Target t : projNode.getTargetList()) {\n-          DataType type = t.getEvalTree().getValueType();\n-          String name = t.getEvalTree().getName();\n-          prjTargets.addColumn(name,type);\n-        }\n-        projNode.setOutputSchema(prjTargets);\n+      Schema prjTargets = new Schema();\n+      for(Target t : projNode.getTargetList()) {\n+        DataType type = t.getEvalTree().getValueType();\n+        String name = t.getEvalTree().getName();\n+        prjTargets.addColumn(name,type);\n       }\n+      projNode.setOutputSchema(prjTargets);\n       \n       break;\n       ", "filename": "engine/src/main/java/nta/engine/planner/LogicalOptimizer.java"}, {"additions": 20, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/LogicalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/LogicalPlanner.java", "sha": "313f5ef9d3ab3bb2974450cec2c356288868e8e1", "changes": 38, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/LogicalPlanner.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -68,7 +68,7 @@ private LogicalPlanner() {\n    * @return a initial logical plan\n    */\n   public static LogicalNode createPlan(Context ctx, ParseTree query) {\n-    LogicalNode plan = null;\n+    LogicalNode plan;\n     \n     plan = createPlanInternal(ctx, query);\n     \n@@ -81,7 +81,7 @@ public static LogicalNode createPlan(Context ctx, ParseTree query) {\n   }\n   \n   private static LogicalNode createPlanInternal(Context ctx, ParseTree query) {\n-    LogicalNode plan = null;\n+    LogicalNode plan;\n     \n     switch(query.getType()) {\n     case SELECT:\n@@ -109,8 +109,8 @@ private static LogicalNode createPlanInternal(Context ctx, ParseTree query) {\n       plan = buildCreateTablePlan(ctx, createTable);\n       break;\n \n-    default:;\n-    throw new NotSupportQueryException(query.toString());\n+    default:\n+      throw new NotSupportQueryException(query.toString());\n     }\n     \n     return plan;\n@@ -129,6 +129,8 @@ private static LogicalNode buildSetPlan(Context ctx,\n     case INTERSECT:\n       bin = new IntersectNode();\n       break;\n+    default:\n+      throw new IllegalStateException(\"the statement cannot be matched to any set operation type\");\n     }\n     \n     bin.setOuter(createPlanInternal(ctx, stmt.getLeftTree()));\n@@ -182,10 +184,10 @@ private static LogicalNode buildCreateTablePlan(Context ctx,\n    * ^(SELECT from_clause? where_clause? groupby_clause? selectList)\n    * \n    * @param query\n-   * @return\n+   * @return the planed logical plan\n    */\n   private static LogicalNode buildSelectPlan(Context ctx, QueryBlock query) {\n-    LogicalNode subroot = null;\n+    LogicalNode subroot;\n     if(query.hasFromClause()) {\n       if (query.hasJoinClause()) {\n         subroot = createExplicitJoinTree(ctx, query.getJoinClause());\n@@ -246,10 +248,14 @@ private static LogicalNode buildSelectPlan(Context ctx, QueryBlock query) {\n       subroot = sortNode;\n     }\n     \n-    ProjectionNode prjNode = null;\n+    ProjectionNode prjNode;\n     if (query.getProjectAll()) {\n-      prjNode = new ProjectionNode();\n+      Schema merged = SchemaUtil.merge(query.getFromTables());\n+      Target [] allTargets = PlannerUtil.schemaToTargets(merged);\n+      prjNode = new ProjectionNode(allTargets);\n       prjNode.setSubNode(subroot);\n+      prjNode.setInputSchema(merged);\n+      prjNode.setOutputSchema(merged);\n       subroot = prjNode;\n     } else {\n       prjNode = new ProjectionNode(query.getTargetList());\n@@ -275,7 +281,7 @@ public static LogicalNode createGroupByUnionByCube(Context ctx,\n   \n   private static UnionNode createGroupByUnion(Context ctx, LogicalNode subNode, \n       List<Column []> cuboids, int idx) {\n-    UnionNode union = null;\n+    UnionNode union;\n     try {\n     if ((cuboids.size() - idx) > 2) {\n       GroupbyNode g1 = new GroupbyNode(cuboids.get(idx));\n@@ -322,7 +328,7 @@ private static UnionNode createGroupByUnion(Context ctx, LogicalNode subNode,\n     int maxBits = columns.length;    \n     \n     List<Column []> cube = Lists.newArrayList();\n-    List<Column> cuboidCols = null;\n+    List<Column> cuboidCols;\n     \n     cube.add(ALL);\n     for (int cuboidId = 1; cuboidId < numCuboids; cuboidId++) {\n@@ -340,9 +346,7 @@ private static UnionNode createGroupByUnion(Context ctx, LogicalNode subNode,\n   \n   private static LogicalNode createExplicitJoinTree(Context ctx, \n       JoinClause joinClause) {\n-    JoinNode join = null;\n-    \n-    join = new JoinNode(joinClause.getJoinType(),\n+    JoinNode join = new JoinNode(joinClause.getJoinType(),\n         new ScanNode(joinClause.getLeft()));\n     if (joinClause.hasJoinQual()) {\n       join.setJoinQual(joinClause.getJoinQual());\n@@ -358,7 +362,7 @@ private static LogicalNode createExplicitJoinTree(Context ctx,\n     }\n     \n     // Determine Join Schemas\n-    Schema merged = null;\n+    Schema merged;\n     if (join.getJoinType() == JoinType.NATURAL) {\n       merged = getNaturalJoin(join.getOuterNode(), join.getInnerNode());\n     } else {\n@@ -388,7 +392,7 @@ private static LogicalNode createExplicitJoinTree(Context ctx,\n   \n   private static EvalNode getNJCond(Schema outer, Schema inner, Schema commons) {\n     EvalNode njQual = null;\n-    EvalNode equiQual = null;\n+    EvalNode equiQual;\n     \n     Column leftJoinKey;\n     Column rightJoinKey;\n@@ -410,9 +414,7 @@ private static EvalNode getNJCond(Schema outer, Schema inner, Schema commons) {\n   \n   private static LogicalNode createImplicitJoinTree(Context ctx, \n       FromTable [] tables) {\n-    LogicalNode subroot = null;\n-    \n-    subroot = new ScanNode(tables[0]);\n+    LogicalNode subroot = new ScanNode(tables[0]);\n     Schema joinSchema = null;\n     if(tables.length > 1) {    \n       for(int i=1; i < tables.length; i++) {", "filename": "engine/src/main/java/nta/engine/planner/LogicalPlanner.java"}, {"additions": 20, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "sha": "634a5e81fc43ba427b002fd3889ec4f041cf0ba0", "changes": 29, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/PlannerUtil.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -6,8 +6,10 @@\n import java.util.Set;\n \n import nta.catalog.Column;\n+import nta.catalog.Schema;\n import nta.engine.exec.eval.EvalNode.Type;\n import nta.engine.exec.eval.EvalTreeUtil;\n+import nta.engine.exec.eval.FieldEval;\n import nta.engine.exec.eval.FuncCallEval;\n import nta.engine.parser.QueryBlock.SortSpec;\n import nta.engine.parser.QueryBlock.Target;\n@@ -45,8 +47,8 @@\n    * This method changes the input logical plan. If you do not want that, you\n    * should copy the input logical plan before do it.\n    * \n-   * @param plan\n-   * @return\n+   * @param plan - to be refreshed\n+   * @return refreshed Schema\n    */\n   public static LogicalNode refreshSchema(LogicalNode plan) {    \n     OutSchemaRefresher outRefresher = new OutSchemaRefresher();\n@@ -81,7 +83,7 @@ public static LogicalNode insertNode(LogicalNode parent, LogicalNode newNode) {\n    * Delete the child of a given parent operator.\n    * \n    * @param parent Must be a unary logical operator.\n-   * @return\n+   * @return input parent node\n    */\n   public static LogicalNode deleteNode(LogicalNode parent) {\n     if (parent instanceof UnaryNode) {\n@@ -333,12 +335,10 @@ public void visit(LogicalNode node) {\n       case PROJECTION:\n         ProjectionNode projNode = (ProjectionNode) node;\n \n-        if (!projNode.isAll()) {\n-          for (Target t : projNode.getTargetList()) {\n-            temp = EvalTreeUtil.findDistinctRefColumns(t.getEvalTree());\n-            if (!temp.isEmpty()) {\n-              collected.addAll(temp);\n-            }\n+        for (Target t : projNode.getTargetList()) {\n+          temp = EvalTreeUtil.findDistinctRefColumns(t.getEvalTree());\n+          if (!temp.isEmpty()) {\n+            collected.addAll(temp);\n           }\n         }\n \n@@ -406,4 +406,15 @@ public void visit(LogicalNode node) {\n       }\n     }\n   }\n+\n+  public static Target [] schemaToTargets(Schema schema) {\n+    Target [] targets = new Target[schema.getColumnNum()];\n+\n+    FieldEval eval = null;\n+    for (int i = 0; i < schema.getColumnNum(); i++) {\n+      eval = new FieldEval(schema.getColumn(i));\n+      targets[i] = new Target(eval);\n+    }\n+    return targets;\n+  }\n }", "filename": "engine/src/main/java/nta/engine/planner/PlannerUtil.java"}, {"additions": 13, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/global/QueryUnit.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/global/QueryUnit.java", "sha": "7809d8962781118996dd490dfb2a84ddb6671e63", "changes": 29, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/global/QueryUnit.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -5,11 +5,7 @@\n \n import java.net.URI;\n import java.net.URISyntaxException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.Map.Entry;\n \n import nta.catalog.Schema;\n@@ -26,6 +22,7 @@\n import nta.engine.planner.logical.UnaryNode;\n \n import com.google.common.base.Preconditions;\n+import org.apache.hadoop.thirdparty.guava.common.collect.Sets;\n \n /**\n  * @author jihoon\n@@ -42,7 +39,7 @@\n \t\n \tprivate String hostName;\n \tprivate Map<String, List<Fragment>> fragMap;\n-\tprivate Map<String, List<URI>> fetchMap;\n+\tprivate Map<String, Set<URI>> fetchMap;\n \t\n \tprivate int expire;\n \tprivate List<Partition> partitions;\n@@ -51,7 +48,7 @@\n \tpublic QueryUnit(QueryUnitId id) {\n \t\tthis.id = id;\n \t\tscan = new ArrayList<ScanNode>();\n-    fetchMap = new HashMap<String, List<URI>>();\n+    fetchMap = new HashMap<String, Set<URI>>();\n     fragMap = new HashMap<String, List<Fragment>>();\n     partitions = new ArrayList<Partition>();\n     expire = QueryUnit.EXPIRE_TIME;\n@@ -112,28 +109,28 @@ public void addFetch(String key, String uri) throws URISyntaxException {\n \t}\n \t\n \tpublic void addFetch(String key, URI uri) {\n-\t  List<URI> uris = null;\n+\t  Set<URI> uris = null;\n \t  if (fetchMap.containsKey(key)) {\n \t    uris = fetchMap.get(key);\n \t  } else {\n-\t    uris = new ArrayList<URI>();\n+\t    uris = Sets.newHashSet();\n \t  }\n \t  uris.add(uri);\n     fetchMap.put(key, uris);\n \t}\n \t\n \tpublic void addFetches(String key, List<URI> urilist) {\n-\t  List<URI> uris = null;\n+\t  Set<URI> uris = null;\n     if (fetchMap.containsKey(key)) {\n       uris = fetchMap.get(key);\n     } else {\n-      uris = new ArrayList<URI>();\n+      uris = Sets.newHashSet();\n     }\n     uris.addAll(urilist);\n     fetchMap.put(key, uris);\n \t}\n \t\n-\tpublic void setFetches(Map<String, List<URI>> fetches) {\n+\tpublic void setFetches(Map<String, Set<URI>> fetches) {\n \t  this.fetchMap.clear();\n \t  this.fetchMap.putAll(fetches);\n \t}\n@@ -150,15 +147,15 @@ public QueryUnitId getId() {\n \t\treturn id;\n \t}\n \t\n-\tpublic List<URI> getFetchHosts(String tableId) {\n+\tpublic Collection<URI> getFetchHosts(String tableId) {\n \t  return fetchMap.get(tableId);\n \t}\n \t\n-\tpublic Collection<List<URI>> getFetches() {\n+\tpublic Collection<Set<URI>> getFetches() {\n \t  return fetchMap.values();\n \t}\n \t\n-\tpublic List<URI> getFetch(ScanNode scan) {\n+\tpublic Collection<URI> getFetch(ScanNode scan) {\n \t  return this.fetchMap.get(scan.getTableId());\n \t}\n \t\n@@ -191,7 +188,7 @@ public String toString() {\n \t      str += t + \" \";\n \t    }\n \t\t}\n-\t\tfor (Entry<String, List<URI>> e : fetchMap.entrySet()) {\n+\t\tfor (Entry<String, Set<URI>> e : fetchMap.entrySet()) {\n       str += e.getKey() + \" : \";\n       for (URI t : e.getValue()) {\n         str += t + \" \";", "filename": "engine/src/main/java/nta/engine/planner/global/QueryUnit.java"}, {"additions": 9, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/logical/ProjectionNode.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/java/nta/engine/planner/logical/ProjectionNode.java", "sha": "bde09489303f34856188a228f77be833fcfd7e2e", "changes": 17, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/logical/ProjectionNode.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -13,10 +13,15 @@\n  *\n  */\n public class ProjectionNode extends UnaryNode {\n-\t@Expose\n-\tprivate Target [] targets;\n-\t\n-\tpublic ProjectionNode() {\n+  /**\n+   * the targets are always filled even if the query is 'select *'\n+   */\n+  @Expose\tprivate Target [] targets;\n+\n+  /**\n+   * This method is for gson.\n+   */\n+\tprivate ProjectionNode() {\n \t\tsuper();\n \t}\n \n@@ -29,10 +34,6 @@ public ProjectionNode(Target [] targets) {\n \t  return this.targets;\n \t}\n \t\n-\tpublic boolean isAll() {\n-\t  return targets == null;\n-\t}\n-\t\n \tpublic void setSubNode(LogicalNode subNode) {\n \t  super.setSubNode(subNode);\n \t}", "filename": "engine/src/main/java/nta/engine/planner/logical/ProjectionNode.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/scala/tajo/benchmark/TPCH.scala", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/main/scala/tajo/benchmark/TPCH.scala", "sha": "c2b57cc0ece6aa908bd140d5f90701786a1eb09d", "changes": 32, "status": "modified", "deletions": 16, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/scala/tajo/benchmark/TPCH.scala?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -21,22 +21,22 @@ class TPCH (conf : Configuration, datadir : String) extends BenchmarkSet(conf) {\n \n   override def loadSchemas() {\n     schemas += (\"lineitem\" -> (new Schema)\n-      .addColumn(\"l_orderkey\", DataType.INT)\n-      .addColumn(\"l_partkey\", DataType.INT)\n-      .addColumn(\"l_suppkey\", DataType.INT)\n-      .addColumn(\"l_linenumber\", DataType.INT)\n-      .addColumn(\"l_quantity\", DataType.FLOAT)\n-      .addColumn(\"l_extendedprice\", DataType.FLOAT)\n-      .addColumn(\"l_discount\", DataType.FLOAT)\n-      .addColumn(\"l_tax\", DataType.FLOAT)\n-      .addColumn(\"l_returnflag\", DataType.CHAR)\n-      .addColumn(\"l_linestatus\", DataType.CHAR)\n-      .addColumn(\"l_shipdate\", DataType.DATE)\n-      .addColumn(\"l_commitdate\", DataType.DATE)\n-      .addColumn(\"l_receiptdate\", DataType.DATE)\n-      .addColumn(\"l_shipinstruct\", DataType.STRING)\n-      .addColumn(\"l_shipmode\", DataType.STRING)\n-      .addColumn(\"l_comment\", DataType.STRING))\n+      .addColumn(\"l_orderkey\", DataType.INT)  // 0\n+      .addColumn(\"l_partkey\", DataType.INT) // 1\n+      .addColumn(\"l_suppkey\", DataType.INT) // 2\n+      .addColumn(\"l_linenumber\", DataType.INT) // 3\n+      .addColumn(\"l_quantity\", DataType.FLOAT) // 4\n+      .addColumn(\"l_extendedprice\", DataType.FLOAT) // 5\n+      .addColumn(\"l_discount\", DataType.FLOAT) // 6\n+      .addColumn(\"l_tax\", DataType.FLOAT) // 7\n+      .addColumn(\"l_returnflag\", DataType.CHAR) // 8\n+      .addColumn(\"l_linestatus\", DataType.CHAR) // 9\n+      .addColumn(\"l_shipdate\", DataType.DATE) // 10\n+      .addColumn(\"l_commitdate\", DataType.DATE) // 11\n+      .addColumn(\"l_receiptdate\", DataType.DATE) // 12\n+      .addColumn(\"l_shipinstruct\", DataType.STRING) // 13\n+      .addColumn(\"l_shipmode\", DataType.STRING) // 14\n+      .addColumn(\"l_comment\", DataType.STRING)) // 15\n \n     schemas += (\"customer\" -> (new Schema)\n       .addColumn(\"c_custkey\", DataType.INT)", "filename": "engine/src/main/scala/tajo/benchmark/TPCH.scala"}, {"additions": 23, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/TestQueries.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/TestQueries.java", "sha": "e35a360326062da1c06441b993b4092ab8be8a5a", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/TestQueries.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -36,4 +36,27 @@ public final void testSelect() throws Exception {\n     assertEquals(\"c\", res.getString(1));\n     assertTrue(2.0f == res.getFloat(2));\n   }\n+\n+  @Test\n+  public final void testSelectAsterik() throws Exception {\n+    String [] names = {\"table1\"};\n+    String [][] tables = new String[1][];\n+    tables[0] = new String[] {\"1,b,1.0\", \"2,c,2.0\"};\n+\n+    Schema[] schemas = new Schema[1];\n+    schemas[0] = new Schema()\n+        .addColumn(\"f1\", CatalogProtos.DataType.INT)\n+        .addColumn(\"f2\", CatalogProtos.DataType.STRING)\n+        .addColumn(\"f3\", CatalogProtos.DataType.FLOAT);\n+\n+    ResultSet res = NtaTestingUtility.run(names, schemas, tables, \"select * from table1\");\n+    res.next();\n+    assertEquals(1, res.getInt(0));\n+    assertEquals(\"b\", res.getString(1));\n+    assertTrue(1.0f == res.getFloat(2));\n+    res.next();\n+    assertEquals(2, res.getInt(0));\n+    assertEquals(\"c\", res.getString(1));\n+    assertTrue(2.0f == res.getFloat(2));\n+  }\n }", "filename": "engine/src/test/java/nta/engine/TestQueries.java"}, {"additions": 7, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/WorkerTestingUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/WorkerTestingUtil.java", "sha": "fcb6e84ba269b4979370d95dba78b81f910dc463", "changes": 70, "status": "modified", "deletions": 63, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/WorkerTestingUtil.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -3,24 +3,14 @@\n  */\n package nta.engine;\n \n-import static org.junit.Assert.assertEquals;\n-\n import java.io.File;\n-import java.io.FileWriter;\n import java.io.IOException;\n-import java.io.Writer;\n import java.sql.ResultSet;\n import java.util.List;\n import java.util.UUID;\n \n-import com.google.common.base.Charsets;\n import com.google.common.collect.Lists;\n-import com.google.common.io.Closeables;\n-import com.google.common.io.Files;\n-import nta.catalog.CatalogService;\n-import nta.catalog.Schema;\n-import nta.catalog.TCatUtil;\n-import nta.catalog.TableMeta;\n+import nta.catalog.*;\n import nta.catalog.proto.CatalogProtos.DataType;\n import nta.catalog.proto.CatalogProtos.StoreType;\n import nta.conf.NtaConf;\n@@ -39,24 +29,18 @@\n import nta.storage.StorageUtil;\n import nta.storage.Tuple;\n import nta.storage.VTuple;\n-import nta.util.FileUtil;\n-import nta.util.ReflectionUtil;\n \n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.io.DataInputBuffer;\n-import org.apache.hadoop.io.DataOutputBuffer;\n-import org.apache.hadoop.io.Writable;\n-import tajo.client.TajoClient;\n \n /**\n  * @author Hyunsik Choi\n  *\n  */\n public class WorkerTestingUtil {\n \n-\tpublic static final void buildTestDir(String dir) throws IOException {\n+\tpublic static void buildTestDir(String dir) throws IOException {\n \t\tPath path = new Path(dir);\n \t\tFileSystem fs = path.getFileSystem(new Configuration());\n \t\tif(fs.exists(path))\n@@ -65,46 +49,6 @@ public static final void buildTestDir(String dir) throws IOException {\n \t\tfs.mkdirs(path);\n \t}\n \n-\tpublic static final void cleanTestDir(String dir) throws IOException {\n-\t\tPath path = new Path(dir);\n-\t\tFileSystem fs = path.getFileSystem(new Configuration());\n-\t\tif(fs.exists(path))\n-\t\t\tfs.delete(path, true);\n-\t}\n-\tpublic static final void writeCSVTable(String tablePath, TableMeta meta, String [] tuples)\n-\t\tthrows IOException {\n-\t\tFile tableRoot = new File(tablePath);\n-\t\ttableRoot.mkdir();\n-\n-\t\tFile metaFile = new File(tableRoot+\"/.meta\");\n-\t\tFileUtil.writeProto(metaFile, meta.getProto());\n-\n-\t\tFile dataDir = new File(tableRoot+\"/data\");\n-\t\tdataDir.mkdir();\n-\n-\t\tFileWriter writer = new FileWriter(\n-\t\t\tnew File(tableRoot+\"/data/table1.csv\"));\n-\t\tfor(String tuple : tuples) {\n-\t\t\twriter.write(tuple+\"\\n\");\n-\t\t}\n-\t\twriter.close();\n-\t}\n-\n-\t/** Utility method for testing writables. */\n-\tpublic static Writable testWritable(Writable before) throws Exception {\n-\t\tDataOutputBuffer dob = new DataOutputBuffer();\n-\t\tbefore.write(dob);\n-\n-\t\tDataInputBuffer dib = new DataInputBuffer();\n-\t\tdib.reset(dob.getData(), dob.getLength());\n-\n-\t\tWritable after = (Writable)ReflectionUtil.newInstance(before.getClass());\n-\t\tafter.readFields(dib);\n-\n-\t\tassertEquals(before, after);\n-\t\treturn after;\n-\t}\n-\n \tpublic final static Schema mockupSchema;\n \tpublic final static TableMeta mockupMeta;\n \n@@ -119,7 +63,7 @@ public static void writeTmpTable(Configuration conf, String parent,\n \t    String tbName, boolean writeMeta) throws IOException {\n \t  StorageManager sm = StorageManager.get(conf, parent);\n \n-    Appender appender = null;\n+    Appender appender;\n     if (writeMeta) {\n       appender = sm.getTableAppender(mockupMeta, tbName);\n     } else {\n@@ -130,7 +74,7 @@ public static void writeTmpTable(Configuration conf, String parent,\n     }\n     int deptSize = 10000;\n     int tupleNum = 100;\n-    Tuple tuple = null;\n+    Tuple tuple;\n     for (int i = 0; i < tupleNum; i++) {\n       tuple = new VTuple(2);\n       String key = \"test\" + (i % deptSize);\n@@ -145,9 +89,9 @@ public static void writeTmpTable(Configuration conf, String parent,\n   private CatalogService catalog;\n   private SubqueryContext.Factory factory;\n   private QueryAnalyzer analyzer;\n-  public WorkerTestingUtil(Configuration conf, CatalogService catalog) {\n+  public WorkerTestingUtil(Configuration conf) throws IOException {\n     this.conf = conf;\n-    this.catalog = catalog;\n+    this.catalog = new LocalCatalog(conf);\n     factory = new SubqueryContext.Factory(catalog);\n     analyzer = new QueryAnalyzer(catalog);\n   }\n@@ -168,7 +112,7 @@ public ResultSet run(String [] tableNames, File [] tables, Schema [] schemas, St\n         QueryIdFactory.newScheduleUnitId(QueryIdFactory.newSubQueryId(\n                 QueryIdFactory.newQueryId()))),\n         frags.toArray(new Fragment[frags.size()]), workDir);\n-    ParseTree tree = (ParseTree) analyzer.parse(ctx, query);\n+    ParseTree tree = analyzer.parse(ctx, query);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, tree);\n     plan = LogicalOptimizer.optimize(ctx, plan);\n     PhysicalPlanner phyPlanner = new PhysicalPlanner(sm);", "filename": "engine/src/test/java/nta/engine/WorkerTestingUtil.java"}, {"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/query/TestGlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/4ac59763d07b4dca9c7d8d18131618806f1bcaf4/engine/src/test/java/nta/engine/query/TestGlobalEngine.java", "sha": "09276c69681f7c6849c71279bdb8e5bfec15899d", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/query/TestGlobalEngine.java?ref=4ac59763d07b4dca9c7d8d18131618806f1bcaf4", "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.junit.After;\n@@ -104,7 +105,7 @@ public void setup() throws Exception {\n     sm = new StorageManager(conf);\n \n     catalog = master.getCatalog();\n-    groupbyResult = new HashMap<TestGlobalEngine.CompositeKey, Integer>();\n+    groupbyResult = new HashMap<CompositeKey, Integer>();\n     cubebyResult = new HashMap<CompositeKey, Integer>();\n     scanResult = new HashSet<String>();\n     joinResult = new HashMap<String, List<Integer>>();\n@@ -315,12 +316,20 @@ public void testCubeby() throws Exception {\n     Tuple tuple;\n     String deptname;\n     int year;\n+    FileSystem fs = util.getMiniDFSCluster().getFileSystem();\n     while ((tuple = scanner.next()) != null) {\n       deptname = tuple.get(0).asChars();\n       year = tuple.get(1).asInt();\n       CompositeKey key = new CompositeKey(deptname, year);\n       int expected = cubebyResult.get(key);\n       int value = tuple.get(2).asInt();\n+      if (expected != value) {\n+        System.out.println(\">>>>>>>>DIFF: \" + tuple);\n+        FileStatus [] fss = fs.listStatus(new Path(res.getPath(), \"data\"));\n+        for (FileStatus s : fss) {\n+          fs.copyToLocalFile(s.getPath(), new Path(\"file:/home/hyunsik/diff/\" + s.getPath().getName()));\n+        }\n+      }\n       assertEquals(expected, value);\n     }\n   }", "filename": "engine/src/test/java/nta/engine/query/TestGlobalEngine.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "parent": "https://github.com/apache/incubator-tajo/commit/fbc5e3e340e12b3cf6be264185d4315b6ac8532d", "message": "TAJO-860: TestGlobalEngine.testCubeBy \uc775\uc149\uc158, cube by operator \uc218\ud589\uc2dc GlobalPlanner.localize()\uc5d0\uc11c NPE \ubc1c\uc0dd\n\nChange-Id: I0c08d9f13a427b675d126b3110031aebbb95b72f\nReviewed-on: https://dbserver.korea.ac.kr/reviews/291\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nReviewed-by:  jihoon <jihoonson@korea.ac.kr>", "bug_id": "incubator-tajo_28", "file": [{"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/LeafServer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/LeafServer.java", "sha": "5717c0a12304c5856110c7d3286b0b4a04f7dff9", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/LeafServer.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -584,6 +584,7 @@ public Task(QueryUnitRequest request) throws IOException {\n           LogicalNode.class);      \n       interQuery = request.getProto().getInterQuery();\n       if (interQuery) {\n+        ctx.setInterQuery();\n         StoreTableNode store = (StoreTableNode) plan;\n         this.partitionType = store.getPartitionType();\n         if (store.getSubNode().getType() == ExprType.SORT) {\n@@ -699,6 +700,9 @@ public InProgressStatusProto getReport() {\n               part.setFileName(\n                   dataServerURL + \"/?qid=\" + getId().toString() + \"&fn=\" +\n                   entry.getValue());\n+            } else if (partitionType == ScheduleUnit.PARTITION_TYPE.LIST) {\n+              part.setFileName(dataServerURL + \"/?qid=\" + getId().toString() +\n+                  \"&fn=0\");\n             } else {\n               part.setFileName(dataServerURL + \"/?qid=\" + getId().toString());\n             }", "filename": "engine/src/main/java/nta/engine/LeafServer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/QueryUnitScheduler.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/QueryUnitScheduler.java", "sha": "d1c2e7a06d2ecfa0d1e12c4ce5f88a78a42cf97c", "changes": 9, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/QueryUnitScheduler.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -204,15 +204,6 @@ private void recursiveExecuteScheduleUnit(ScheduleUnit plan)\n   private QueryUnit[] prepareExecutionOfQueryUnits(QueryUnit[] units,\n                                                    boolean hasChild)\n       throws Exception {\n-    /*String hostName;\n-\n-    for (QueryUnit q : units) {\n-      hostName = getHost(q);\n-      q.setHost(hostName);\n-      pendingQueue.add(q);\n-      qm.updateQueryAssignInfo(hostName, q);\n-      this.queryUnitAttemptMap.put(q.getId(), 1);\n-    }*/\n     if (hasChild) {\n       for (QueryUnit q : units) {\n         q.setHost(cm.getRandomHost());", "filename": "engine/src/main/java/nta/engine/QueryUnitScheduler.java"}, {"additions": 9, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/SubqueryContext.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/SubqueryContext.java", "sha": "e38d46921a386858fc430950b4d8879ab25fe475", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/SubqueryContext.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -45,6 +45,7 @@\n   private Map<Integer, String> repartitions;\n   private File fetchIn;\n   private boolean stopped = false;\n+  private boolean interQuery = false;\n   \n   @VisibleForTesting\n   SubqueryContext(final QueryUnitId queryId, final Fragment [] fragments, final File workDir) {\n@@ -106,6 +107,14 @@ public TableStat getResultStats() {\n   public boolean isStopped() {\n     return this.stopped;\n   }\n+\n+  public void setInterQuery() {\n+    this.interQuery = true;\n+  }\n+\n+  public boolean isInterQuery() {\n+    return this.interQuery;\n+  }\n   \n   public void stop() {\n     this.stopped = true;", "filename": "engine/src/main/java/nta/engine/SubqueryContext.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/cluster/QueryManager.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/cluster/QueryManager.java", "sha": "94d97f860878bf572d000c2bcbc5d246938a497f", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/cluster/QueryManager.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -186,7 +186,8 @@ public synchronized void updateQueryAssignInfo(String servername,\n   \n   public void updateProgress(QueryUnitId queryUnitId,\n       InProgressStatusProto progress) throws NoSuchQueryIdException {\n-    QueryUnit unit = queries.get(queryUnitId.getQueryId()).getQueryUnit(queryUnitId);\n+    QueryUnit unit = queries.get(queryUnitId.getQueryId()).\n+        getQueryUnit(queryUnitId);\n     if (unit != null\n         && (unit.getStatus() != QueryStatus.QUERY_FINISHED\n         || unit.getStatus() != QueryStatus.QUERY_ABORTED", "filename": "engine/src/main/java/nta/engine/cluster/QueryManager.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/global/GlobalOptimizer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/global/GlobalOptimizer.java", "sha": "1a8d031a6a5b4f1a29fad9ab5696559d15c53d63", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/global/GlobalOptimizer.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -56,7 +56,8 @@ private void reduceLogicalQueryUnitStep_(ScheduleUnit cur) {\n       it = prevs.iterator();\n       while (it.hasNext()) {\n         prev = it.next();\n-        if (prev.getOutputType() == PARTITION_TYPE.LIST) {\n+        if (prev.getStoreTableNode().getSubNode().getType() != ExprType.UNION &&\n+            prev.getOutputType() == PARTITION_TYPE.LIST) {\n           mergeLogicalUnits(cur, prev);\n         }\n       }", "filename": "engine/src/main/java/nta/engine/planner/global/GlobalOptimizer.java"}, {"additions": 6, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/logical/StoreTableNode.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/logical/StoreTableNode.java", "sha": "00d60fce063cf8caecb53e1b8a92b21bed9db4ce", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/logical/StoreTableNode.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -56,6 +56,12 @@ public final void clearPartitions() {\n     this.partitionKeys = null;\n     this.numPartitions = 0;\n   }\n+\n+  public final void setListPartition() {\n+    this.partitionType = ScheduleUnit.PARTITION_TYPE.LIST;\n+    this.partitionKeys = null;\n+    this.numPartitions = 0;\n+  }\n   \n   public final void setPartitions(ScheduleUnit.PARTITION_TYPE type, Column [] keys, int numPartitions) {\n     Preconditions.checkArgument(keys.length >= 0, ", "filename": "engine/src/main/java/nta/engine/planner/logical/StoreTableNode.java"}, {"additions": 11, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/physical/StoreTableExec.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/planner/physical/StoreTableExec.java", "sha": "dbc8c788234749b7a56fdba03e9fde1ebc495985", "changes": 13, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/physical/StoreTableExec.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -13,7 +13,9 @@\n import nta.engine.planner.logical.StoreTableNode;\n import nta.storage.Appender;\n import nta.storage.StorageManager;\n+import nta.storage.StorageUtil;\n import nta.storage.Tuple;\n+import org.apache.hadoop.fs.Path;\n \n /**\n  * This physical operator stores a relation into a table.\n@@ -45,8 +47,15 @@ public StoreTableExec(SubqueryContext ctx, StorageManager sm,\n     this.outputSchema = this.annotation.getOutputSchema();\n     \n     TableMeta meta = TCatUtil.newTableMeta(this.outputSchema, StoreType.CSV);\n-    this.appender = sm.getAppender(meta,this.annotation.getTableName(),\n-        ctx.getQueryId().toString());\n+    if (ctx.isInterQuery()) {\n+      Path storeTablePath = new Path(ctx.getWorkDir().getAbsolutePath(), \"out\");\n+      sm.initLocalTableBase(storeTablePath, meta);\n+      this.appender = sm.getLocalAppender(meta,\n+          StorageUtil.concatPath(storeTablePath, \"data\", \"0\"));\n+    } else {\n+      this.appender = sm.getAppender(meta,this.annotation.getTableName(),\n+          ctx.getQueryId().toString());\n+    }\n   }\n \n   /* (non-Javadoc)", "filename": "engine/src/main/java/nta/engine/planner/physical/StoreTableExec.java"}, {"additions": 0, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/query/GlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/query/GlobalEngine.java", "sha": "93b9f9dd7baeffcc5bbca6a47a92021af1188fa0", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/query/GlobalEngine.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -18,9 +18,6 @@\n import nta.engine.exception.NoSuchQueryIdException;\n import nta.engine.parser.ParseTree;\n import nta.engine.parser.QueryAnalyzer;\n-import nta.engine.parser.QueryBlock;\n-import nta.engine.parser.QueryBlock.FromTable;\n-import nta.engine.parser.SetStmt;\n import nta.engine.planner.LogicalOptimizer;\n import nta.engine.planner.LogicalPlanner;\n import nta.engine.planner.global.GlobalOptimizer;", "filename": "engine/src/main/java/nta/engine/query/GlobalEngine.java"}, {"additions": 75, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/query/GlobalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/main/java/nta/engine/query/GlobalPlanner.java", "sha": "d6fceb5329db87e9131e7f64b96ef59c79b6a76c", "changes": 101, "status": "modified", "deletions": 26, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/query/GlobalPlanner.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -108,6 +108,7 @@ private StoreTableNode insertStore(String tableId, LogicalNode parent) {\n     @Override\n     public void visit(LogicalNode node) {\n       String tableId;\n+      StoreTableNode store;\n       if (node.getType() == ExprType.GROUP_BY) {\n         // transform group by to two-phase plan \n         GroupbyNode groupby = (GroupbyNode) node;\n@@ -142,14 +143,14 @@ public void visit(LogicalNode node) {\n         if (join.getOuterNode().getType() != ExprType.UNION &&\n             join.getOuterNode().getType() != ExprType.STORE) {\n           tableId = QueryIdFactory.newScheduleUnitId(subId).toString();\n-          StoreTableNode store = new StoreTableNode(tableId);\n+          store = new StoreTableNode(tableId);\n           store.setLocal(true);\n           PlannerUtil.insertOuterNode(node, store);\n         }\n         if (join.getInnerNode().getType() != ExprType.UNION &&\n             join.getInnerNode().getType() != ExprType.STORE) {\n           tableId = QueryIdFactory.newScheduleUnitId(subId).toString();\n-          StoreTableNode store = new StoreTableNode(tableId);\n+          store = new StoreTableNode(tableId);\n           store.setLocal(true);\n           PlannerUtil.insertInnerNode(node, store);\n         }\n@@ -160,17 +161,24 @@ public void visit(LogicalNode node) {\n         if (union.getOuterNode().getType() != ExprType.UNION &&\n             union.getOuterNode().getType() != ExprType.STORE) {\n           tableId = QueryIdFactory.newScheduleUnitId(subId).toString();\n-          StoreTableNode store = new StoreTableNode(tableId);\n+          store = new StoreTableNode(tableId);\n           store.setLocal(true);\n           PlannerUtil.insertOuterNode(node, store);\n         }\n         if (union.getInnerNode().getType() != ExprType.UNION &&\n             union.getInnerNode().getType() != ExprType.STORE) {\n           tableId = QueryIdFactory.newScheduleUnitId(subId).toString();\n-          StoreTableNode store = new StoreTableNode(tableId);\n+          store = new StoreTableNode(tableId);\n           store.setLocal(true);\n           PlannerUtil.insertInnerNode(node, store);\n         }\n+      } else if (node instanceof UnaryNode) {\n+        UnaryNode unary = (UnaryNode)node;\n+        if (unary.getType() != ExprType.STORE &&\n+            unary.getSubNode().getType() != ExprType.STORE) {\n+          tableId = QueryIdFactory.newScheduleUnitId(subId).toString();\n+          insertStore(tableId, unary);\n+        }\n       }\n     }\n   }\n@@ -220,11 +228,11 @@ private void recursiveBuildScheduleUnit(LogicalNode node)\n           break;\n         case SELECTION:\n         case PROJECTION:\n-          unit = makeUnifiableUnit(store, store.getSubNode(), unit);\n+          unit = makeUnaryUnit(store, node, unit);\n           unit.setLogicalPlan(node);\n           break;\n         case GROUP_BY:\n-          unit = makeTwoPhaseUnit(store, node, unit);\n+          unit = makeGroupbyUnit(store, node, unit);\n           unit.setLogicalPlan(node);\n           break;\n         case SORT:\n@@ -267,31 +275,51 @@ private ScheduleUnit makeScanUnit(ScheduleUnit unit) {\n    * @return\n    * @throws IOException\n    */\n-  private ScheduleUnit makeUnifiableUnit(StoreTableNode rootStore, \n-      LogicalNode plan, ScheduleUnit unit) throws IOException {\n+  private ScheduleUnit makeUnaryUnit(StoreTableNode rootStore,\n+                                     LogicalNode plan, ScheduleUnit unit) throws IOException {\n+    ScanNode newScan;\n+    ScheduleUnit prev;\n     UnaryNode unary = (UnaryNode) plan;\n-    switch (unary.getSubNode().getType()) {\n+    UnaryNode child = (UnaryNode) unary.getSubNode();\n+    StoreTableNode prevStore = (StoreTableNode)child.getSubNode();\n+\n+    // add scan\n+    TableMeta meta = TCatUtil.newTableMeta(prevStore.getOutputSchema(),\n+        StoreType.CSV);\n+    newScan = (ScanNode)insertScan(child,\n+        prevStore.getTableName(), meta);\n+    prev = convertMap.get(prevStore);\n+\n+    if (prev != null) {\n+      prev.setParentQuery(unit);\n+      unit.addChildQuery(newScan, prev);\n+      prev.setOutputType(PARTITION_TYPE.LIST);\n+    }\n+\n+    unit.setOutputType(PARTITION_TYPE.LIST);\n+\n+    /*switch (unary.getSubNode().getType()) {\n     case SCAN:\n       unit = makeScanUnit(unit);\n       break;\n     case SELECTION:\n     case PROJECTION:\n-      unit = makeUnifiableUnit(rootStore, unary.getSubNode(), unit);\n+      unit = makeUnaryUnit(rootStore, unary.getSubNode(), unit);\n       break;\n     case SORT:\n       unit = makeSortUnit(rootStore, plan, unit);\n       break;\n \n     case GROUP_BY:\n-      unit = makeTwoPhaseUnit(rootStore, plan, unit);\n+      unit = makeGroupbyUnit(rootStore, plan, unit);\n       break;\n     case JOIN:\n       unit = makeJoinUnit(rootStore, plan, unit);\n       break;\n     case UNION:\n       unit = makeUnionUnit(rootStore, plan, unit);\n       break;\n-    }\n+    }*/\n     return unit;\n   }\n   \n@@ -304,8 +332,8 @@ private ScheduleUnit makeUnifiableUnit(StoreTableNode rootStore,\n    * @return\n    * @throws IOException\n    */\n-  private ScheduleUnit makeTwoPhaseUnit(StoreTableNode rootStore, \n-      LogicalNode plan, ScheduleUnit unit) throws IOException {\n+  private ScheduleUnit makeGroupbyUnit(StoreTableNode rootStore,\n+                                       LogicalNode plan, ScheduleUnit unit) throws IOException {\n     UnaryNode unary = (UnaryNode) plan;\n     UnaryNode unaryChild;\n     StoreTableNode prevStore;\n@@ -319,24 +347,26 @@ private ScheduleUnit makeTwoPhaseUnit(StoreTableNode rootStore,\n       prevStore = (StoreTableNode) unaryChild;\n       TableMeta meta = TCatUtil.newTableMeta(prevStore.getOutputSchema(), \n           StoreType.CSV);\n-      newScan = (ScanNode)insertScan(unary.getSubNode(), \n+      newScan = (ScanNode)insertScan(unary.getSubNode(),\n           prevStore.getTableName(), meta);\n       prev = convertMap.get(prevStore);\n       if (prev != null) {\n         prev.setParentQuery(unit);\n         unit.addChildQuery(newScan, prev);\n-        if (unaryChild.getSubNode().getType() == curType) {\n-          prev.setOutputType(PARTITION_TYPE.HASH);\n-        } else {\n-          prev.setOutputType(PARTITION_TYPE.LIST);\n-        }\n       }\n+\n       if (unaryChild.getSubNode().getType() == curType) {\n         // the second phase\n         unit.setOutputType(PARTITION_TYPE.LIST);\n+        if (prev != null) {\n+          prev.setOutputType(PARTITION_TYPE.HASH);\n+        }\n       } else {\n         // the first phase\n         unit.setOutputType(PARTITION_TYPE.HASH);\n+        if (prev != null) {\n+          prev.setOutputType(PARTITION_TYPE.LIST);\n+        }\n       }\n     } else if (unaryChild.getSubNode().getType() == ExprType.SCAN) {\n       // the first phase\n@@ -623,7 +653,7 @@ private MasterPlan convertToGlobalPlan(SubQueryId subQueryId,\n   private ScheduleUnit setPartitionNumberForTwoPhase(ScheduleUnit unit, int n) {\n     // if the next query is join, \n     // set the partition number for the current logicalUnit\n-    // TODO: union handling when join has union as its child\n+    // TODO: the union handling is required when a join has unions as its child\n     ScheduleUnit parentQueryUnit = unit.getParentQuery();\n     if (parentQueryUnit != null) {\n       if (parentQueryUnit.getStoreTableNode().getSubNode().getType() == ExprType.JOIN) {\n@@ -656,7 +686,7 @@ private ScheduleUnit setPartitionNumberForTwoPhase(ScheduleUnit unit, int n) {\n         store.setPartitions(unit.getOutputType(), keys, n);\n       }\n     } else {\n-      // TODO: error\n+      store.setListPartition();\n     }\n     return unit;\n   }\n@@ -718,8 +748,11 @@ private ScheduleUnit setPartitionNumberForTwoPhase(ScheduleUnit unit, int n) {\n           LOG.info(\"The desired number of tasks is set to \" + n);\n \n           // calculate the number of maximum query ranges\n-          TupleRange mergedRange = TupleUtil.columnStatToRange(sort.getOutputSchema(), sortSchema, stat.getColumnStats());\n-          RangePartitionAlgorithm partitioner = new UniformRangePartition(sortSchema, mergedRange);\n+          TupleRange mergedRange =\n+              TupleUtil.columnStatToRange(sort.getOutputSchema(),\n+                  sortSchema, stat.getColumnStats());\n+          RangePartitionAlgorithm partitioner =\n+              new UniformRangePartition(sortSchema, mergedRange);\n           BigDecimal card = partitioner.getTotalCardinality();\n \n           // if the number of the range cardinality is less than the desired number of tasks,\n@@ -729,7 +762,8 @@ private ScheduleUnit setPartitionNumberForTwoPhase(ScheduleUnit unit, int n) {\n             n = card.intValue();\n           }\n \n-          LOG.info(\"Try to divide \" + mergedRange + \" into \" + n + \" sub ranges (total units: \" + n + \")\");\n+          LOG.info(\"Try to divide \" + mergedRange + \" into \" + n +\n+              \" sub ranges (total units: \" + n + \")\");\n           TupleRange [] ranges = partitioner.partition(n);\n           String [] queries = TupleUtil.rangesToQueries(sortSchema, ranges);\n           for (QueryUnit qu : unit.getChildQuery(scan).getQueryUnits()) {\n@@ -740,7 +774,22 @@ private ScheduleUnit setPartitionNumberForTwoPhase(ScheduleUnit unit, int n) {\n             }\n           }\n         } else {\n-          for (QueryUnit qu : unit.getChildQuery(scan).getQueryUnits()) {\n+          ScheduleUnit child = unit.getChildQuery(scan);\n+          QueryUnit[] units = null;\n+          if (child.getStoreTableNode().getSubNode().getType() ==\n+              ExprType.UNION) {\n+            List<QueryUnit> list = Lists.newArrayList();\n+            for (ScanNode s : child.getScanNodes()) {\n+              for (QueryUnit qu : child.getChildQuery(s).getQueryUnits()) {\n+                list.add(qu);\n+              }\n+            }\n+            units = new QueryUnit[list.size()];\n+            units = list.toArray(units);\n+          } else {\n+            units = child.getQueryUnits();\n+          }\n+          for (QueryUnit qu : units) {\n             for (Partition p : qu.getPartitions()) {\n               uriList.add(new URI(p.getFileName()));\n //              System.out.println(\"Partition: \" + uriList.get(uriList.size() - 1));", "filename": "engine/src/main/java/nta/engine/query/GlobalPlanner.java"}, {"additions": 30, "raw_url": "https://github.com/apache/incubator-tajo/raw/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java", "sha": "889e20656b9885ca3b6f0ccb8ba96a457b242029", "changes": 42, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java?ref=cb0b74dbbfb57c4efdfbe1e2c7ac541b196fbc7f", "patch": "@@ -143,7 +143,7 @@ public void testScan() throws IOException {\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     ScheduleUnit unit = globalPlan.getRoot();\n     assertFalse(unit.hasChildQuery());\n     assertEquals(PARTITION_TYPE.LIST, unit.getOutputType());\n@@ -201,13 +201,23 @@ public void testSort() throws IOException {\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     ScheduleUnit next, prev;\n     \n     next = globalPlan.getRoot();\n+    assertEquals(ExprType.PROJECTION,\n+        next.getStoreTableNode().getSubNode().getType());\n     assertTrue(next.hasChildQuery());\n     assertEquals(PARTITION_TYPE.LIST, next.getOutputType());\n     Iterator<ScheduleUnit> it= next.getChildIterator();\n+\n+    prev = it.next();\n+    assertEquals(ExprType.SORT,\n+        prev.getStoreTableNode().getSubNode().getType());\n+    assertTrue(prev.hasChildQuery());\n+    assertEquals(PARTITION_TYPE.LIST, prev.getOutputType());\n+    it= prev.getChildIterator();\n+    next = prev;\n     \n     prev = it.next();\n     assertFalse(prev.hasChildQuery());\n@@ -231,23 +241,27 @@ public void testJoin() throws IOException {\n     ParseTree tree = analyzer.parse(ctx,\n         \"select table0.age,table0.salary,table1.salary from table0,table1 where table0.salary = table1.salary order by table0.age\");\n     LogicalNode logicalPlan = LogicalPlanner.createPlan(ctx, tree);\n-    System.out.println(logicalPlan);\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     ScheduleUnit next, prev;\n     \n     // the second phase of the sort\n     next = globalPlan.getRoot();\n     assertTrue(next.hasChildQuery());\n     assertEquals(PARTITION_TYPE.LIST, next.getOutputType());\n     assertEquals(ExprType.PROJECTION, next.getStoreTableNode().getSubNode().getType());\n-    ProjectionNode projNode = (ProjectionNode) next.getStoreTableNode().getSubNode();\n-    assertEquals(ExprType.SORT, projNode.getSubNode().getType());\n     ScanNode []scans = next.getScanNodes();\n     assertEquals(1, scans.length);\n     Iterator<ScheduleUnit> it= next.getChildIterator();\n+\n+    prev = it.next();\n+    assertEquals(ExprType.SORT, prev.getStoreTableNode().getSubNode().getType());\n+    assertEquals(PARTITION_TYPE.LIST, prev.getOutputType());\n+    scans = prev.getScanNodes();\n+    assertEquals(1, scans.length);\n+    it= prev.getChildIterator();\n     \n     // the first phase of the sort\n     prev = it.next();\n@@ -297,7 +311,7 @@ public void testSelectAfterJoin() throws IOException {\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n     \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     ScheduleUnit unit = globalPlan.getRoot();\n     StoreTableNode store = unit.getStoreTableNode();\n     assertEquals(ExprType.JOIN, store.getSubNode().getType());\n@@ -321,13 +335,18 @@ public void testCubeby() throws IOException {\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     ScheduleUnit unit = globalPlan.getRoot();\n     StoreTableNode store = unit.getStoreTableNode();\n     assertEquals(ExprType.PROJECTION, store.getSubNode().getType());\n     ProjectionNode projNode = (ProjectionNode) store.getSubNode();\n-    assertEquals(ExprType.UNION, projNode.getSubNode().getType());\n-    UnionNode union = (UnionNode) projNode.getSubNode();\n+    ScanNode[] scans = unit.getScanNodes();\n+    assertEquals(1, scans.length);\n+\n+    unit = unit.getChildQuery(scans[0]);\n+    store = unit.getStoreTableNode();\n+    assertEquals(ExprType.UNION, store.getSubNode().getType());\n+    UnionNode union = (UnionNode) store.getSubNode();\n     assertEquals(ExprType.SCAN, union.getOuterNode().getType());\n     assertEquals(ExprType.UNION, union.getInnerNode().getType());\n     union = (UnionNode) union.getInnerNode();\n@@ -368,7 +387,7 @@ public void testLocalize() throws IOException, URISyntaxException, NoSuchQueryId\n     logicalPlan = LogicalOptimizer.optimize(ctx, logicalPlan);\n \n     MasterPlan globalPlan = planner.build(subQueryId, logicalPlan);\n-    \n+\n     recursiveTestLocalize(globalPlan.getRoot());\n   }\n   \n@@ -475,7 +494,6 @@ public void testHashFetchesForBinary() {\n     assertEquals(3, hashed.get(\"0\").get(scan2).size());\n \n     QueryStringDecoder decoder = new QueryStringDecoder(hashed.get(\"0\").get(scan1).get(0));\n-    System.out.println(hashed.get(\"0\").get(scan1).get(0));\n     Map<String, List<String>> params = decoder.getParameters();\n     String [] qids = params.get(\"qid\").get(0).split(\",\");\n     assertEquals(2, qids.length);", "filename": "engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java"}], "repo": "incubator-tajo"}, {"commit": "https://github.com/apache/incubator-tajo/commit/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "parent": "https://github.com/apache/incubator-tajo/commit/f06d63c589926eaa98702e4e20da24d19afc8186", "message": "TAJO-723: Q2 of TPC-H causes NPE\n\nChange-Id: Ie43ac03a08ec5c8202cbb4d3f66ba04d6a795f80\nReviewed-on: https://dbserver.korea.ac.kr/reviews/170\nTested-by:  Jenkins <build@dbserver.korea.ac.kr>\nTested-by: HyoSeok Ryu <ohmyhaker@gmail.com>\nReviewed-by: Hyunsik Choi <hyunsik.choi@gmail.com>", "bug_id": "incubator-tajo_29", "file": [{"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/conf/tajo-site.xml", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/conf/tajo-site.xml", "sha": "2bd0c6ad15399a5e853a5203184bb9c46c2c4e80", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/conf/tajo-site.xml?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -4,7 +4,7 @@\n <configuration>\n <property>\n   <name>engine.rootdir</name>\n-  <value>file:///tmp/tazo-${user.name}</value>\n+  <value>file:///tmp/tajo-${user.name}</value>\n   <description>A base for other temporary directories.</description>\n </property>\n ", "filename": "engine/conf/tajo-site.xml"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/findbugs/findbugs-exclude.xml", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/findbugs/findbugs-exclude.xml", "sha": "e3cf54ca4dfa94e58ddc99203ddad0cecbb98925", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/findbugs/findbugs-exclude.xml?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -1,5 +1,8 @@\n <FindBugsFilter>\n      <Match>\n-\t\t<Package name=\"~nta\\.query\\.parser\" />\n+\t\t<Package name=\"~nta\\.engine\\.parser\" />\n \t</Match>\n-</FindBugsFilter>\n\\ No newline at end of file\n+\t<Match>\n+\t\t<Class name=\"~.*\\.*Protos\" />\n+\t</Match>\n+</FindBugsFilter>", "filename": "engine/src/main/findbugs/findbugs-exclude.xml"}, {"additions": 10, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/catalog/Schema.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/catalog/Schema.java", "sha": "ee797a2de4e861557f80414be1009b7aea0ecf9c", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/catalog/Schema.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -87,6 +87,16 @@ public int getColumnId(String colName) {\n \t  initColumns();\n \t  return fieldsByName.get(colName.toLowerCase());\n \t}\n+\n+  public int getColumnIdByName(String colName) {\n+    initColumns();\n+    for (Column col : fields) {\n+      if (col.getColumnName().equals(colName.toLowerCase())) {\n+        return fieldsByName.get(col.getQualifiedName());\n+      }\n+    }\n+    return -1;\n+  }\n \t\n \tpublic Collection<Column> getColumns() {\n \t\tinitColumns();", "filename": "engine/src/main/java/nta/catalog/Schema.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java", "sha": "c03d3369972537cee49841ce087a06b378c74079", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/parser/QueryAnalyzer.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -832,6 +832,9 @@ public EvalNode createEvalTree(final Context ctx,\n     case NQLParser.REAL:\n       return new ConstEval(DatumFactory.createDouble(\n           Double.valueOf(ast.getText())));\n+\n+    case NQLParser.STRING:\n+      return new ConstEval(DatumFactory.createString(ast.getText()));\n     \n     case NQLParser.AND:\n       return new BinaryEval(Type.AND, createEvalTree(ctx, ast.getChild(0), query), ", "filename": "engine/src/main/java/nta/engine/parser/QueryAnalyzer.java"}, {"additions": 64, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java", "sha": "e77cd27df5454e6823daf49329d88dc675cc4091", "changes": 91, "status": "modified", "deletions": 27, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/LogicalOptimizer.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -70,12 +70,12 @@ public static LogicalNode optimize(Context ctx, LogicalNode plan) {\n     //case INTERSECT:\n     case CREATE_TABLE:\n       // if there are selection node \n+      pushProjection(ctx, toBeOptimized);\n+\n       if(PlannerUtil.findTopNode(plan, ExprType.SELECTION) != null) {\n         pushSelection(ctx, toBeOptimized);\n       }\n       \n-      pushProjection(ctx, toBeOptimized);\n-      \n       break;\n     default:\n     }\n@@ -130,25 +130,25 @@ private static void pushSelection(Context ctx, LogicalNode plan) {\n     Preconditions.checkNotNull(selNode);\n     \n     Stack<LogicalNode> stack = new Stack<LogicalNode>();\n-    EvalNode [] cnfs = EvalTreeUtil.getConjNormalForm(selNode.getQual());\n-    pushSelectionRecursive(ctx, plan, Lists.newArrayList(cnfs), stack);\n+    EvalNode [] cnf = EvalTreeUtil.getConjNormalForm(selNode.getQual());\n+    pushSelectionRecursive(ctx, plan, Lists.newArrayList(cnf), stack);\n   }\n   \n   private static void pushSelectionRecursive(Context ctx, LogicalNode plan,\n-      List<EvalNode> evalTrees, Stack<LogicalNode> stack) {\n+      List<EvalNode> cnf, Stack<LogicalNode> stack) {\n     \n     switch(plan.getType()) {\n     \n     case SELECTION:\n       SelectionNode selNode = (SelectionNode) plan;\n       stack.push(selNode);\n       pushSelectionRecursive(ctx, selNode.getSubNode(),\n-          evalTrees, stack);\n+          cnf, stack);\n       stack.pop();\n       \n       // remove the selection operator if there is no search condition \n       // after selection push.\n-      if(evalTrees.size() == 0) {\n+      if(cnf.size() == 0) {\n         LogicalNode node = stack.peek();\n         if (node instanceof UnaryNode) {\n           UnaryNode unary = (UnaryNode) node;\n@@ -158,26 +158,33 @@ private static void pushSelectionRecursive(Context ctx, LogicalNode plan,\n         }\n       }\n       break;\n-    case SCAN:\n-    case JOIN:      \n+    case JOIN:\n+      JoinNode join = (JoinNode) plan;\n+\n+      LogicalNode outer = join.getOuterNode();\n+      LogicalNode inner = join.getInnerNode();\n+\n+      pushSelectionRecursive(ctx, outer, cnf, stack);\n+      pushSelectionRecursive(ctx, inner, cnf, stack);\n+\n       List<EvalNode> matched = Lists.newArrayList();\n-      for (EvalNode eval : evalTrees) {\n+      for (EvalNode eval : cnf) {\n         if (selectionPushable(eval, plan)) {\n           matched.add(eval);\n         }\n       }\n-      EvalNode qual;\n+\n+      EvalNode qual = null;\n       if (matched.size() > 1) {\n+        // merged into one eval tree\n         qual = EvalTreeUtil.transformCNF2Singleton(\n             matched.toArray(new EvalNode [matched.size()]));\n-      } else {\n+      } else if (matched.size() == 1) {\n+        // if the number of matched expr is one\n         qual = matched.get(0);\n       }\n-      \n-      if (plan.getType() == ExprType.SCAN) {\n-        ScanNode scanNode = (ScanNode) plan;\n-        scanNode.setQual(qual);\n-      } else if (plan.getType() == ExprType.JOIN) {\n+\n+      if (qual != null) {\n         JoinNode joinNode = (JoinNode) plan;\n         if (joinNode.hasJoinQual()) {\n           EvalNode conjQual = EvalTreeUtil.\n@@ -186,19 +193,46 @@ private static void pushSelectionRecursive(Context ctx, LogicalNode plan,\n         } else {\n           joinNode.setJoinQual(qual);\n         }\n-      }      \n-      evalTrees.removeAll(matched);      \n+        cnf.removeAll(matched);\n+      }\n+\n       break;\n-      \n+\n+    case SCAN:\n+      matched = Lists.newArrayList();\n+      for (EvalNode eval : cnf) {\n+        if (selectionPushable(eval, plan)) {\n+          matched.add(eval);\n+        }\n+      }\n+\n+      qual = null;\n+      if (matched.size() > 1) {\n+        // merged into one eval tree\n+        qual = EvalTreeUtil.transformCNF2Singleton(\n+            matched.toArray(new EvalNode [matched.size()]));\n+      } else if (matched.size() == 1) {\n+        // if the number of matched expr is one\n+        qual = matched.get(0);\n+      }\n+\n+      if (qual != null) { // if a matched qual exists\n+        ScanNode scanNode = (ScanNode) plan;\n+        scanNode.setQual(qual);\n+      }\n+\n+      cnf.removeAll(matched);\n+      break;\n+\n     default:\n       stack.push(plan);\n       if (plan instanceof UnaryNode) {\n         UnaryNode unary = (UnaryNode) plan;\n-        pushSelectionRecursive(ctx, unary.getSubNode(), evalTrees, stack);\n+        pushSelectionRecursive(ctx, unary.getSubNode(), cnf, stack);\n       } else if (plan instanceof BinaryNode) {\n         BinaryNode binary = (BinaryNode) plan;\n-        pushSelectionRecursive(ctx, binary.getOuterNode(), evalTrees, stack);\n-        pushSelectionRecursive(ctx, binary.getInnerNode(), evalTrees, stack);\n+        pushSelectionRecursive(ctx, binary.getOuterNode(), cnf, stack);\n+        pushSelectionRecursive(ctx, binary.getInnerNode(), cnf, stack);\n       }\n       stack.pop();\n       break;\n@@ -232,18 +266,21 @@ public static boolean selectionPushable(EvalNode eval, LogicalNode node) {\n         return false;\n       }\n       \n-      String outer = PlannerUtil.getLineage(joinNode.getOuterNode());\n-      String inner = PlannerUtil.getLineage(joinNode.getInnerNode());\n+      String [] outer = PlannerUtil.getLineage(joinNode.getOuterNode());\n+      String [] inner = PlannerUtil.getLineage(joinNode.getInnerNode());\n+\n+      Set<String> o = Sets.newHashSet(outer);\n+      Set<String> i = Sets.newHashSet(inner);\n       if (outer == null || inner == null) {      \n         throw new InvalidQueryException(\"ERROR: Unexpected logical plan\");\n       }\n       Iterator<String> it = tableIds.iterator();\n-      if (it.next().equals(outer) && it.next().equals(inner)) {\n+      if (o.contains(it.next()) && i.contains(it.next())) {\n         return true;\n       }\n       \n       it = tableIds.iterator();\n-      if (it.next().equals(inner) && it.next().equals(outer)) {\n+      if (i.contains(it.next()) && o.contains(it.next())) {\n         return true;\n       }\n       ", "filename": "engine/src/main/java/nta/engine/planner/LogicalOptimizer.java"}, {"additions": 40, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/planner/PlannerUtil.java", "sha": "8101edffc80afbfea9073a80588470593fb15994", "changes": 48, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/planner/PlannerUtil.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -59,9 +59,20 @@ public static LogicalNode refreshSchema(LogicalNode plan) {\n     return plan;\n   }\n   \n-  public static String getLineage(LogicalNode node) {\n-    ScanNode scanNode = (ScanNode) PlannerUtil.findTopNode(node, ExprType.SCAN);\n-    return scanNode.getTableId();\n+  public static String [] getLineage(LogicalNode node) {\n+    LogicalNode [] scans =  PlannerUtil.findAllNodes(node, ExprType.SCAN);\n+    String [] tableNames = new String[scans.length];\n+    String name;\n+    ScanNode scan;\n+    for (int i = 0; i < scans.length; i++) {\n+      scan = (ScanNode) scans[i];\n+      /*if (scan.hasAlias()) {\n+        tableNames[i] = scan.getAlias();\n+      } else {*/\n+        tableNames[i] = scan.getTableId();\n+      //}\n+    }\n+    return tableNames;\n   }\n   \n   public static LogicalNode insertNode(LogicalNode parent, LogicalNode newNode) {\n@@ -227,24 +238,45 @@ private static LogicalNode insertStore(LogicalNode parent,\n   }\n   \n   /**\n-   * Find the top node of the given plan\n+   * Find the top logical node matched to type from the given node\n    * \n-   * @param plan\n+   * @param node\n    * @param type to find\n    * @return a found logical node\n    */\n-  public static LogicalNode findTopNode(LogicalNode plan, ExprType type) {\n-    Preconditions.checkNotNull(plan);\n+  public static LogicalNode findTopNode(LogicalNode node, ExprType type) {\n+    Preconditions.checkNotNull(node);\n     Preconditions.checkNotNull(type);\n     \n     LogicalNodeFinder finder = new LogicalNodeFinder(type);\n-    plan.postOrder(finder);\n+    node.postOrder(finder);\n     \n     if (finder.getFoundNodes().size() == 0) {\n       return null;\n     }\n     return finder.getFoundNodes().get(0);\n   }\n+\n+  /**\n+   * Find the all logical node matched to type from the given node\n+   *\n+   * @param node\n+   * @param type to find\n+   * @return a found logical node\n+   */\n+  public static LogicalNode [] findAllNodes(LogicalNode node, ExprType type) {\n+    Preconditions.checkNotNull(node);\n+    Preconditions.checkNotNull(type);\n+\n+    LogicalNodeFinder finder = new LogicalNodeFinder(type);\n+    node.postOrder(finder);\n+\n+    if (finder.getFoundNodes().size() == 0) {\n+      return new LogicalNode[] {};\n+    }\n+    List<LogicalNode> founds = finder.getFoundNodes();\n+    return founds.toArray(new LogicalNode[founds.size()]);\n+  }\n   \n   /**\n    * Find a parent node of a given-typed operator.", "filename": "engine/src/main/java/nta/engine/planner/PlannerUtil.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/query/ResultSetImpl.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/engine/query/ResultSetImpl.java", "sha": "31f73ce0fbcef2d8b5fbc7db6b9be3275d16e4de", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/engine/query/ResultSetImpl.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -204,7 +204,7 @@ public void deleteRow() throws SQLException {\n    */\n   @Override\n   public int findColumn(String colName) throws SQLException {\n-    return this.meta.getSchema().getColumnId(colName);\n+    return this.meta.getSchema().getColumnIdByName(colName);\n   }\n \n   /* (non-Javadoc)", "filename": "engine/src/main/java/nta/engine/query/ResultSetImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/storage/CSVFile2.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/nta/storage/CSVFile2.java", "sha": "bca1983023731a23a8ae86554afb0fbc25c2b305", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/nta/storage/CSVFile2.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -35,7 +35,7 @@\n  */\n public class CSVFile2 extends Storage {\n   public static final String DELIMITER = \"csvfile.delimiter\";\n-  public static final String DELIMITER_DEFAULT = \",\";\n+  public static final String DELIMITER_DEFAULT = \"|\";\n   private static final Log LOG = LogFactory.getLog(CSVFile2.class);\n \n   public CSVFile2(Configuration conf) {", "filename": "engine/src/main/java/nta/storage/CSVFile2.java"}, {"additions": 34, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/tajo/client/ResultSetUtil.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/main/java/tajo/client/ResultSetUtil.java", "sha": "a61ddcf64b9bc8545044e0bd93c81e4e960e45a4", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/main/java/tajo/client/ResultSetUtil.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -0,0 +1,34 @@\n+package tajo.client;\n+\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+/**\n+ * @author Hyunsik Choi\n+ */\n+public class ResultSetUtil {\n+  public static String prettyFormat(ResultSet res) throws SQLException {\n+    StringBuilder sb = new StringBuilder();\n+    ResultSetMetaData rsmd = res.getMetaData();\n+    int numOfColumns = rsmd.getColumnCount();\n+\n+    for (int i = 1; i <= numOfColumns; i++) {\n+      if (i > 1) sb.append(\",  \");\n+      String columnName = rsmd.getColumnName(i);\n+      sb.append(columnName);\n+    }\n+    sb.append(\"\\n-------------------------------\\n\");\n+\n+    while (res.next()) {\n+      for (int i = 1; i <= numOfColumns; i++) {\n+        if (i > 1) sb.append(\",  \");\n+        String columnValue = res.getObject(i).toString();\n+        sb.append(columnValue);\n+      }\n+      sb.append(\"\\n\");\n+    }\n+\n+    return sb.toString();\n+  }\n+}", "filename": "engine/src/main/java/tajo/client/ResultSetUtil.java"}, {"additions": 16, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/parser/TestNQLParser.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/parser/TestNQLParser.java", "sha": "5acddd3f94c5c4a09b7aff80274a8439f672e05b", "changes": 18, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/parser/TestNQLParser.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -358,7 +358,8 @@ public void testShowTable() throws RecognitionException, NQLSyntaxException {\n       \"now()\", // 22\n       \"not (90 > 100)\", // 23\n       \"type like '%top'\", // 24\n-      \"type not like 'top%'\" // 25\n+      \"type not like 'top%'\", // 25\n+      \"col = 'value'\" // 26\n   };\n \n   public static NQLParser parseExpr(String expr) {\n@@ -553,5 +554,18 @@ public void testLikeEvalTree() throws RecognitionException {\n     fieldName = new FieldName(node.getChild(1));\n     assertEquals(fieldName.getName(), \"type\");\n     assertEquals(NQLParser.STRING, node.getChild(2).getType());\n-  } \n+  }\n+\n+  @Test\n+  /**\n+   * TODO - needs more tests\n+   */\n+  public void testConstEval() throws RecognitionException {\n+    NQLParser p = parseExpr(exprs[26]);\n+    CommonTree node = (CommonTree) p.search_condition().getTree();\n+    System.out.println(node.toStringTree());\n+    assertEquals(NQLParser.EQUAL, node.getType());\n+    assertEquals(NQLParser.FIELD_NAME, node.getChild(0).getType());\n+    assertEquals(NQLParser.STRING, node.getChild(1).getType());\n+  }\n }\n\\ No newline at end of file", "filename": "engine/src/test/java/nta/engine/parser/TestNQLParser.java"}, {"additions": 1, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java", "sha": "01fd49b4fe43e7a682a9a13e402739a63ae25573", "changes": 5, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -42,7 +42,6 @@\n import nta.engine.planner.logical.GroupbyNode;\n import nta.engine.planner.logical.LogicalNode;\n import nta.engine.planner.logical.ScanNode;\n-import nta.engine.planner.logical.SelectionNode;\n import nta.engine.planner.logical.StoreTableNode;\n import nta.engine.planner.logical.UnionNode;\n import nta.engine.query.GlobalPlanner;\n@@ -305,9 +304,7 @@ public void testSelectAfterJoin() throws IOException {\n     \n     ScheduleUnit unit = globalPlan.getRoot();\n     StoreTableNode store = unit.getStoreTableNode();\n-    assertEquals(ExprType.SELECTION, store.getSubNode().getType());\n-    SelectionNode select = (SelectionNode) store.getSubNode();\n-    assertEquals(ExprType.JOIN, select.getSubNode().getType());\n+    assertEquals(ExprType.JOIN, store.getSubNode().getType());\n     assertTrue(unit.hasChildQuery());\n     ScanNode [] scans = unit.getScanNodes();\n     assertEquals(2, scans.length);", "filename": "engine/src/test/java/nta/engine/plan/global/TestGlobalQueryPlanner.java"}, {"additions": 2, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/planner/TestLogicalOptimizer.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/planner/TestLogicalOptimizer.java", "sha": "92f120244dd5f98e59b138801ac42d742e989f05", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/planner/TestLogicalOptimizer.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -208,6 +208,8 @@ public final void testPushable() throws CloneNotSupportedException {\n     assertFalse(joinNode.hasJoinQual());\n     \n     // Test for Pushable\n+    System.out.println(\"===> \" + selNode.getQual());\n+    System.out.println(\"===> \" + joinNode);\n     assertTrue(LogicalOptimizer.selectionPushable(selNode.getQual(), joinNode));\n     \n     // Optimized plan", "filename": "engine/src/test/java/nta/engine/planner/TestLogicalOptimizer.java"}, {"additions": 42, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/planner/TestLogicalPlanner.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/planner/TestLogicalPlanner.java", "sha": "2037f99066d8bfb3009f5e5db2fa6f2c50091592", "changes": 65, "status": "modified", "deletions": 23, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/planner/TestLogicalPlanner.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -54,6 +54,7 @@\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n import com.google.gson.Gson;\n+import tajo.benchmark.TPCH;\n \n /**\n  * @author Hyunsik Choi\n@@ -131,7 +132,7 @@ public static void tearDown() throws Exception {\n   @Test\n   public final void testSingleRelation() throws CloneNotSupportedException {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[0]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     assertEquals(ExprType.ROOT, plan.getType());\n     TestLogicalNode.testCloneLogicalNode(plan);\n@@ -152,7 +153,7 @@ public final void testSingleRelation() throws CloneNotSupportedException {\n   public final void testImplicityJoinPlan() throws CloneNotSupportedException {\n     // two relations\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[1]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[1]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n \n     assertEquals(ExprType.ROOT, plan.getType());\n@@ -174,7 +175,7 @@ public final void testImplicityJoinPlan() throws CloneNotSupportedException {\n \n     // three relations\n     ctx = factory.create();\n-    block = (ParseTree) analyzer.parse(ctx, QUERIES[2]);\n+    block = analyzer.parse(ctx, QUERIES[2]);\n     plan = LogicalPlanner.createPlan(ctx, block);\n     TestLogicalNode.testCloneLogicalNode(plan);\n \n@@ -213,7 +214,7 @@ public final void testImplicityJoinPlan() throws CloneNotSupportedException {\n   public final void testNaturalJoinPlan() {\n     // two relations\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, JOINS[0]);\n+    ParseTree block = analyzer.parse(ctx, JOINS[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     assertEquals(ExprType.ROOT, plan.getType());\n     LogicalRootNode root = (LogicalRootNode) plan;    \n@@ -242,7 +243,7 @@ public final void testNaturalJoinPlan() {\n   public final void testInnerJoinPlan() {\n     // two relations\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, JOINS[1]);\n+    ParseTree block = analyzer.parse(ctx, JOINS[1]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     assertEquals(ExprType.ROOT, plan.getType());\n     LogicalRootNode root = (LogicalRootNode) plan;    \n@@ -272,7 +273,7 @@ public final void testInnerJoinPlan() {\n   public final void testOuterJoinPlan() {\n     // two relations\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, JOINS[2]);\n+    ParseTree block = analyzer.parse(ctx, JOINS[2]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     assertEquals(ExprType.ROOT, plan.getType());\n     LogicalRootNode root = (LogicalRootNode) plan;    \n@@ -302,7 +303,7 @@ public final void testOuterJoinPlan() {\n   public final void testGroupby() throws CloneNotSupportedException {\n     // without 'having clause'\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[7]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[7]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n \n     assertEquals(ExprType.ROOT, plan.getType());\n@@ -311,7 +312,7 @@ public final void testGroupby() throws CloneNotSupportedException {\n     \n     // with having clause\n     ctx = factory.create();\n-    block = (ParseTree) analyzer.parse(ctx, QUERIES[3]);\n+    block = analyzer.parse(ctx, QUERIES[3]);\n     plan = LogicalPlanner.createPlan(ctx, block);\n     TestLogicalNode.testCloneLogicalNode(plan);\n \n@@ -335,6 +336,24 @@ public final void testGroupby() throws CloneNotSupportedException {\n     \n     LogicalOptimizer.optimize(ctx, plan);    \n   }\n+\n+  @Test\n+  public final void testMultipleJoin() {\n+    TPCH tpch = new TPCH();\n+    tpch.loadSchemas();\n+    tpch.loadQueries();\n+\n+    for (String name : tpch.getTableNames()) {\n+      TableMeta meta = TCatUtil.newTableMeta(tpch.getSchema(name), StoreType.CSV);\n+      TableDesc desc = TCatUtil.newTableDesc(name, meta, new Path(\"/\"));\n+      catalog.addTable(desc);\n+    }\n+\n+    QueryContext ctx = factory.create();\n+    ParseTree block = analyzer.parse(ctx, tpch.getQuery(\"q2\"));\n+    LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n+    System.out.println(plan);\n+  }\n   \n   static void testQuery7(LogicalNode plan) {\n     assertEquals(ExprType.PROJECTION, plan.getType());\n@@ -356,7 +375,7 @@ static void testQuery7(LogicalNode plan) {\n   @Test\n   public final void testStoreTable() throws CloneNotSupportedException {\n     QueryContext ctx = factory.create();\n-    ParseTree tree = (ParseTree) analyzer.parse(ctx, QUERIES[8]);\n+    ParseTree tree = analyzer.parse(ctx, QUERIES[8]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, tree);\n     TestLogicalNode.testCloneLogicalNode(plan);\n     \n@@ -372,7 +391,7 @@ public final void testStoreTable() throws CloneNotSupportedException {\n   @Test\n   public final void testOrderBy() throws CloneNotSupportedException {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[4]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[4]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     TestLogicalNode.testCloneLogicalNode(plan);\n \n@@ -401,7 +420,7 @@ public final void testOrderBy() throws CloneNotSupportedException {\n   @Test\n   public final void testSPJPush() throws CloneNotSupportedException {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[5]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[5]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     TestLogicalNode.testCloneLogicalNode(plan);\n     \n@@ -426,15 +445,15 @@ public final void testSPJPush() throws CloneNotSupportedException {\n   @Test\n   public final void testSPJ() throws CloneNotSupportedException {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[6]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[6]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     TestLogicalNode.testCloneLogicalNode(plan);\n   }\n   \n   @Test\n   public final void testJson() {\n     QueryContext ctx = factory.create();\n-\t  ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[9]);\n+\t  ParseTree block = analyzer.parse(ctx, QUERIES[9]);\n \t  LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n \t  LogicalOptimizer.optimize(ctx, plan);\n \t    \n@@ -456,7 +475,7 @@ public final void testJson() {\n   public final void testVisitor() {\n     // two relations\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[1]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[1]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     \n     TestVisitor vis = new TestVisitor();\n@@ -480,7 +499,7 @@ public void visit(LogicalNode node) {\n   @Test\n   public final void testExprNode() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[10]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[10]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     LogicalOptimizer.optimize(ctx, plan);\n     assertEquals(ExprType.ROOT, plan.getType());\n@@ -500,7 +519,7 @@ public final void testExprNode() {\n   @Test\n   public final void testCreateIndex() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, QUERIES[11]);\n+    ParseTree block = analyzer.parse(ctx, QUERIES[11]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     LogicalOptimizer.optimize(ctx, plan);\n     LogicalRootNode root = (LogicalRootNode) plan;\n@@ -529,7 +548,7 @@ public final void testCreateIndex() {\n   @Test\n   public final void testAlias() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, ALIAS[0]);\n+    ParseTree block = analyzer.parse(ctx, ALIAS[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     plan = LogicalOptimizer.optimize(ctx, plan);\n     LogicalRootNode root = (LogicalRootNode) plan;\n@@ -542,7 +561,7 @@ public final void testAlias() {\n     assertEquals(\"total\", col.getColumnName());\n     \n     ctx = factory.create();\n-    block = (ParseTree) analyzer.parse(ctx, ALIAS[1]);\n+    block = analyzer.parse(ctx, ALIAS[1]);\n     plan = LogicalPlanner.createPlan(ctx, block);\n     plan = LogicalOptimizer.optimize(ctx, plan);\n     root = (LogicalRootNode) plan;\n@@ -562,7 +581,7 @@ public final void testAlias() {\n   @Test\n   public final void testCreateTableDef() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, CREATE_TABLE[0]);\n+    ParseTree block = analyzer.parse(ctx, CREATE_TABLE[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);\n     plan = LogicalOptimizer.optimize(ctx, plan);\n     LogicalRootNode root = (LogicalRootNode) plan;\n@@ -647,7 +666,7 @@ public final void testGenerateCuboids() {\n   @Test\n   public final void testCubeBy() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, CUBE_ROLLUP[0]);\n+    ParseTree block = analyzer.parse(ctx, CUBE_ROLLUP[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);    \n     plan = LogicalOptimizer.optimize(ctx, plan);\n     \n@@ -690,7 +709,7 @@ public final void testCubeBy() {\n   @Test\n   public final void testSetPlan() {\n     QueryContext ctx = factory.create();\n-    ParseTree block = (ParseTree) analyzer.parse(ctx, setStatements[0]);\n+    ParseTree block = analyzer.parse(ctx, setStatements[0]);\n     LogicalNode plan = LogicalPlanner.createPlan(ctx, block);    \n     plan = LogicalOptimizer.optimize(ctx, plan);\n     assertEquals(ExprType.ROOT, plan.getType());\n@@ -706,7 +725,7 @@ public final void testSetPlan() {\n     \n     // for testing multiple set statements\n     ctx = factory.create();\n-    block = (ParseTree) analyzer.parse(ctx, setStatements[1]);\n+    block = analyzer.parse(ctx, setStatements[1]);\n     plan = LogicalPlanner.createPlan(ctx, block);    \n     plan = LogicalOptimizer.optimize(ctx, plan);\n     assertEquals(ExprType.ROOT, plan.getType());\n@@ -721,7 +740,7 @@ public final void testSetPlan() {\n     \n     // for testing multiple set statements\n     ctx = factory.create();\n-    block = (ParseTree) analyzer.parse(ctx, setStatements[2]);\n+    block = analyzer.parse(ctx, setStatements[2]);\n     plan = LogicalPlanner.createPlan(ctx, block);    \n     plan = LogicalOptimizer.optimize(ctx, plan);\n     assertEquals(ExprType.ROOT, plan.getType());", "filename": "engine/src/test/java/nta/engine/planner/TestLogicalPlanner.java"}, {"additions": 4, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/query/TestGlobalEngine.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/nta/engine/query/TestGlobalEngine.java", "sha": "d85d13a197241fc667040b51289db0ac2a44670f", "changes": 9, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/nta/engine/query/TestGlobalEngine.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -21,7 +21,6 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.junit.After;\n@@ -84,7 +83,7 @@ public boolean equals(Object o) {\n       \"select deptname from score\",\n       \"select dept.deptname, score.score from dept,score where score.deptname = dept.deptname\",\n       \"create table test (id int, name string) using csv location '/tmp/data' with ('csv.delimiter'='|')\",\n-      \"select dept.deptname, score.score from dept,score where score.deptname = dept.deptname and score.score > 10000\",\n+      \"select dept.deptname, score.score from dept,score where score.deptname = dept.deptname and score.score > 50\",\n       \"select deptname, year, sum(score) from score group by cube (deptname, year)\"\n   };\n   private static Map<CompositeKey, Integer> groupbyResult;\n@@ -169,7 +168,7 @@ public void setup() throws Exception {\n         joinResult.get(id).add((i+1));\n       }\n \n-      if (i+1 > 10000) {\n+      if (i+1 > 50) {\n         if (!selectAfterJoinResult.containsKey(id)) {\n           List<Integer> list = new ArrayList<Integer>();\n           list.add((i+1));\n@@ -281,7 +280,7 @@ public void testJoin() throws Exception {\n     while ((tuple = scanner.next()) != null) {\n       deptname = tuple.get(0).asChars();\n       results = new HashSet<Integer>(joinResult.get(deptname));\n-      assertTrue(results.contains(tuple.get(1).asInt()));\n+      assertTrue(results.contains(tuple.get(2).asInt()));\n     }\n   }\n \n@@ -300,7 +299,7 @@ public void testSelectAfterJoin() throws Exception {\n     while ((tuple = scanner.next()) != null) {\n       deptname = tuple.get(0).asChars();\n       results = new HashSet<Integer>(selectAfterJoinResult.get(deptname));\n-      assertTrue(results.contains(tuple.get(1).asInt()));\n+      assertTrue(results.contains(tuple.get(2).asInt()));\n     }\n   }\n ", "filename": "engine/src/test/java/nta/engine/query/TestGlobalEngine.java"}, {"additions": 66, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TestJoinQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TestJoinQuery.java", "sha": "ff983c05cabe6e126d060f8d159f122539f801c7", "changes": 66, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TestJoinQuery.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -0,0 +1,66 @@\n+package tajo.engine;\n+\n+import org.junit.Test;\n+import tajo.client.ResultSetUtil;\n+\n+import java.io.IOException;\n+import java.sql.ResultSet;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author Hyunsik Choi\n+ */\n+public class TestJoinQuery extends TpchTestBase {\n+\n+  public TestJoinQuery() throws IOException {\n+    super();\n+  }\n+\n+  @Test\n+  public final void testCrossJoin() throws Exception {\n+    ResultSet res = execute(\"select n_name, r_name, n_regionkey, r_regionkey from nation, region\");\n+    String str = ResultSetUtil.prettyFormat(res);\n+    System.out.println(str);\n+  }\n+\n+  //@Test\n+  public final void testCrossJoinWithExplicitJoinQual() throws Exception {\n+    ResultSet res = execute(\"select n_name, r_name, n_regionkey, r_regionkey from nation, region where n_regionkey = r_regionkey\");\n+    String str = ResultSetUtil.prettyFormat(res);\n+    System.out.println(str);\n+  }\n+\n+  @Test\n+  public final void testTPCHQ2Join() throws Exception {\n+    ResultSet res = execute(\n+        \"select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment \" +\n+        \"from part, supplier, partsupp, nation, region \" +\n+        \"where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey \" +\n+        \"and n_regionkey = r_regionkey\");\n+\n+    res.next();\n+    assertTrue(4032.68f == res.getFloat(\"s_acctbal\"));\n+    assertEquals(\"Supplier#000000002\", res.getString(\"s_name\"));\n+    assertEquals(\"ETHIOPIA\", res.getString(\"n_name\"));\n+\n+    res.next();\n+    assertTrue(4192.4f == res.getFloat(\"s_acctbal\"));\n+    assertEquals(\"Supplier#000000003\", res.getString(\"s_name\"));\n+    assertEquals(\"ARGENTINA\", res.getString(\"n_name\"));\n+\n+    res.next();\n+    assertTrue(4641.08f == res.getFloat(\"s_acctbal\"));\n+    assertEquals(\"Supplier#000000004\", res.getString(\"s_name\"));\n+    assertEquals(\"MOROCCO\", res.getString(\"n_name\"));\n+\n+    assertFalse(res.next());\n+  }\n+\n+  //@Test\n+  public final void testCount() throws Exception {\n+    ResultSet res = execute(\"select count(l_orderkey) as total from lineitem\");\n+    res.next();\n+    System.out.println(\"====> \" + res.getLong(1));\n+  }\n+}", "filename": "engine/src/test/java/tajo/engine/TestJoinQuery.java"}, {"additions": 8, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TestSelectQuery.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TestSelectQuery.java", "sha": "29905de13c5592c235cd86210ff517a3afebc643", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TestSelectQuery.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -71,4 +71,12 @@ public final void testSelectAsterik() throws Exception {\n     assertEquals(\"MAIL\",res.getString(15));\n     assertEquals(\"ly final dependencies: slyly bold\",res.getString(16));\n   }\n+\n+  @Test\n+  public final void testSelectWithFilter() throws Exception {\n+    ResultSet res = execute(\"select l_orderkey, l_linenumber from lineitem where l_shipdate = '1997-01-28'\");\n+    res.next();\n+    assertEquals(2, res.getInt(1));\n+    assertEquals(1, res.getInt(2));\n+  }\n }", "filename": "engine/src/test/java/tajo/engine/TestSelectQuery.java"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-tajo/raw/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TpchTestBase.java", "blob_url": "https://github.com/apache/incubator-tajo/blob/22a9fe00f3d2ef4aae804000ad22ddf2a9cef852/engine/src/test/java/tajo/engine/TpchTestBase.java", "sha": "e5dcbb10b3f8138bd1f2723294cf189bfaee470f", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/incubator-tajo/contents/engine/src/test/java/tajo/engine/TpchTestBase.java?ref=22a9fe00f3d2ef4aae804000ad22ddf2a9cef852", "patch": "@@ -21,15 +21,17 @@\n   String [][] tables;\n   Schema[] schemas;\n   Map<String, Integer> nameMap = Maps.newHashMap();\n+  protected TPCH tpch;\n \n   public TpchTestBase() throws IOException {\n     names = new String[] {\"customer\", \"lineitem\", \"nation\", \"orders\", \"part\", \"partsupp\", \"region\", \"supplier\"};\n     for (int i = 0; i < names.length; i++) {\n       nameMap.put(names[i], i);\n     }\n \n-    TPCH tpch = new TPCH();\n+    tpch = new TPCH();\n     tpch.loadSchemas();\n+    tpch.loadQueries();\n \n     schemas = new Schema[names.length];\n     for (int i = 0; i < names.length; i++) {", "filename": "engine/src/test/java/tajo/engine/TpchTestBase.java"}], "repo": "incubator-tajo"}]
