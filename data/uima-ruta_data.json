[
    {
        "repo": "uima-ruta",
        "message": "UIMA-6065: fix NPE for optional in FOREACH\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1861314 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
        "parent": "https://github.com/apache/uima-ruta/commit/6229125321681e9a444c2a7d4c2ab6cb62bae365",
        "bug_id": "uima-ruta_1",
        "file": [
            {
                "sha": "0541a035947c85a0f2e8835373bced24cbe00689",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/GetFeatureAction.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n \r\n@@ -57,7 +58,10 @@ public void execute(MatchContext context, RutaStream stream, InferenceCrowd crow\n \r\n     Type type = null;\r\n     if (element instanceof RutaRuleElement) {\r\n-      type = ((RutaRuleElement) element).getMatcher().getType(parent, stream);\r\n+      RutaMatcher matcher = ((RutaRuleElement) element).getMatcher();\r\n+      if (matcher != null) {\r\n+        type = matcher.getType(parent, stream);\r\n+      }\r\n     }\r\n     if (type == null) {\r\n       return;\r",
                "deletions": 1
            },
            {
                "sha": "a1353ef97f8ea3fab3ff9de3c268e4e80caa4204",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/ForEachBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -122,6 +122,9 @@ private void setRuleElementAnchor() {\n   private boolean setRuleElementAnchorRecursively(RuleElement ruleElement) {\n     if (ruleElement instanceof RutaRuleElement) {\n       RutaMatcher matcher = ((RutaRuleElement) ruleElement).getMatcher();\n+      if (matcher == null) {\n+        return false;\n+      }\n       IRutaExpression expression = matcher.getExpression();\n       if (expression instanceof AnnotationTypeExpression) {\n         MatchReference reference = ((AnnotationTypeExpression) expression).getReference();",
                "deletions": 0
            },
            {
                "sha": "9dc1f51ffb70420210e07659bf405dd4092ab88f",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/block/RutaScriptBlock.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.uima.ruta.rule.AbstractRuleMatch;\r\n import org.apache.uima.ruta.rule.RuleApply;\r\n import org.apache.uima.ruta.rule.RuleMatch;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRule;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -59,8 +60,12 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           continue;\r\n         }\r\n         // TODO refactor!!\r\n-        Type type = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher()\r\n-                .getType(getParent() == null ? this : getParent(), stream);\r\n+        RutaMatcher matcher = ((RutaRuleElement) rule.getRuleElements().get(0)).getMatcher();\r\n+        if (matcher == null) {\r\n+          continue;\r\n+        }\r\n+\r\n+        Type type = matcher.getType(getParent() == null ? this : getParent(), stream);\r\n         RutaStream window = stream.getWindowStream(each, type);\r\n         for (RutaStatement element : getElements()) {\r\n           if (element != null) {\r",
                "deletions": 2
            },
            {
                "sha": "577309c883c05838f164be64ada4390b7c5d7e53",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/PositionCondition.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.uima.ruta.rule.EvaluatedCondition;\r\n import org.apache.uima.ruta.rule.MatchContext;\r\n import org.apache.uima.ruta.rule.RuleElement;\r\n+import org.apache.uima.ruta.rule.RutaMatcher;\r\n import org.apache.uima.ruta.rule.RutaRuleElement;\r\n import org.apache.uima.ruta.type.RutaBasic;\r\n import org.apache.uima.ruta.visitor.InferenceCrowd;\r\n@@ -91,7 +92,10 @@ public EvaluatedCondition eval(MatchContext context, RutaStream stream, Inferenc\n     List<Type> targetTypes = new ArrayList<Type>();\r\n     if (element instanceof RutaRuleElement) {\r\n       RutaRuleElement re = (RutaRuleElement) element;\r\n-      targetTypes.add(re.getMatcher().getType(element.getParent(), stream));\r\n+      RutaMatcher matcher = re.getMatcher();\r\n+      if (matcher != null) {\r\n+        targetTypes.add(matcher.getType(element.getParent(), stream));\r\n+      }\r\n     } else {\r\n       targetTypes.add(annotation.getType());\r\n     }\r",
                "deletions": 1
            },
            {
                "sha": "658aad357646300b1965d53fdc4fa6fd2da0efee",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/WildCardRuleElement.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -473,7 +473,7 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           Type type = matcher.getType(parent, stream);\r\n           iterator = getIteratorOfType(after, type, annotation, stream);\r\n         }\r\n-      } else {\r\n+      } else if (matcher != null) {\r\n         // fallback\r\n         Type type = matcher.getType(parent, stream);\r\n         iterator = getIteratorOfType(after, type, annotation, stream);\r\n@@ -580,6 +580,9 @@ private ComposedRuleElementMatch getContainerMatchOfNextElement(\n           RutaStream stream, InferenceCrowd crowd) {\r\n     List<RuleMatch> result = new ArrayList<RuleMatch>();\r\n     RutaLiteralMatcher matcher = (RutaLiteralMatcher) nextElement.getMatcher();\r\n+    if (matcher == null) {\r\n+      return result;\r\n+    }\r\n     IStringExpression expression = matcher.getExpression();\r\n     MatchContext context = new MatchContext(this, ruleMatch, true);\r\n     String stringValue = expression.getStringValue(context, stream);\r",
                "deletions": 1
            },
            {
                "sha": "78a8e9863410e63178b7cf58730b974e9268915e",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "status": "modified",
                "changes": 21,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -156,14 +156,19 @@ public String verbalizeRuleElement(RuleElement re) {\n       RutaRuleElement tmre = (RutaRuleElement) re;\r\n       RutaMatcher matcher = tmre.getMatcher();\r\n       // action-only rule\r\n-      IRutaExpression expression = matcher.getExpression();\r\n-      boolean actionOnlyRule = expression == null;\r\n-      if (expression != null) {\r\n-        String verbalize = verbalizer.verbalize(expression);\r\n-        if (StringUtils.isBlank(verbalize)) {\r\n-          actionOnlyRule = true;\r\n-        } else {\r\n-          result.append(verbalize);\r\n+      boolean actionOnlyRule = false;\r\n+      if (matcher == null) {\r\n+        result.append(\"_\");\r\n+      } else {\r\n+        IRutaExpression expression = matcher.getExpression();\r\n+        actionOnlyRule = expression == null;\r\n+        if (expression != null) {\r\n+          String verbalize = verbalizer.verbalize(expression);\r\n+          if (StringUtils.isBlank(verbalize)) {\r\n+            actionOnlyRule = true;\r\n+          } else {\r\n+            result.append(verbalize);\r\n+          }\r\n         }\r\n       }\r\n       if (actionOnlyRule) {\r",
                "deletions": 8
            },
            {
                "sha": "9468c9de5131e90a1be269f0c35a6b3e95b0c043",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fe67e50daa78ae2fb56ebeaa98a715501fb636d3/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/block/ForEachBlockTest.java?ref=fe67e50daa78ae2fb56ebeaa98a715501fb636d3",
                "patch": "@@ -35,17 +35,12 @@\n   private String text = \"Some text 4 more text.\";\n \n   @Test\n-  public void testDefault() {\n+  public void testDefault() throws Exception {\n \n     String script = getForEachScript();\n \n-    CAS cas = null;\n-    try {\n-      cas = RutaTestUtils.getCAS(text);\n-      Ruta.apply(cas, script);\n-    } catch (Exception e) {\n-      e.printStackTrace();\n-    }\n+    CAS cas = RutaTestUtils.getCAS(text);\n+    Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4\");\n@@ -58,7 +53,6 @@ public void testDefault() {\n     RutaTestUtils.assertAnnotationsEquals(cas, 9, 1, \"Some\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 10, 1, \"4\");\n \n-    cas.release();\n   }\n \n   @Test\n@@ -90,8 +84,6 @@ public void testPerformance() throws Exception {\n     long endForEach = System.currentTimeMillis();\n     System.out.println(\"FOREACH: \" + (endForEach - startForEach) + \"ms\");\n \n-    cas.release();\n-\n   }\n \n   private String getForEachScript() {\n@@ -128,7 +120,6 @@ public void testRigthToLeft() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"2^3\", \"2\");\n-    cas.release();\n   }\n \n   @Test\n@@ -144,7 +135,6 @@ public void testEnforcedLeftToRigthInComposedWithDebbugging() throws Exception {\n     Ruta.apply(cas, script, parameters);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"4\", \"2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -161,7 +151,6 @@ public void testDirection() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"text 4x2^3\", \"text 4x2\", \"text 4\");\n     RutaTestUtils.assertAnnotationsEquals(cas, 3, 1, \"text 4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -175,7 +164,6 @@ public void testComposed() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"4x2^3\");\n-    cas.release();\n   }\n \n   @Test\n@@ -189,7 +177,6 @@ public void testConditionMacro() throws Exception {\n     Ruta.apply(cas, script);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"1\");\n-    cas.release();\n   }\n \n   @Test\n@@ -207,7 +194,19 @@ public void testWithContainingBlock() throws Exception {\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 3, \"1\", \"22\", \"333\");\n-    cas.release();\n+  }\n+\n+  @Test\n+  public void testWithOptional() throws Exception {\n+    String script = \"\";\n+    script += \"FOREACH(num) NUM{} {\\n\";\n+    script += \"_{-PARTOF(W)} num{-> T1};\\n\";\n+    script += \"}\\n\";\n+\n+    CAS cas = RutaTestUtils.getCAS(\"1 22 333\");\n+    Ruta.apply(cas, script);\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"1\", \"22\", \"333\");\n   }\n \n }",
                "deletions": 17
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-5993 - avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1860450 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/ffaf490b6d5c6c0302865142d259d57d60bb8813",
        "parent": "https://github.com/apache/uima-ruta/commit/b5fa9a55f00659a5efd8d7ffbaed1819457607bf",
        "bug_id": "uima-ruta_2",
        "file": [
            {
                "sha": "74047d7b7d424fee117eec53bec50360e625c2b1",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "patch": "@@ -99,6 +99,10 @@ public MultiTreeWordList(Resource... lists) throws IOException {\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n \r\n+    if (lists == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (Resource list : lists) {\r\n       // check if the resource is a directory\r\n       File directory = null;\r\n@@ -155,6 +159,11 @@ public MultiTreeWordList(InputStream stream, String name) throws IOException {\n   public MultiTreeWordList(String[] pathnames, File base) throws IOException {\r\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n+\r\n+    if (pathnames == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (String pathname : pathnames) {\r\n       String name = getRelativePath(new File(pathname), base);\r\n       load(new FileSystemResource(pathname), name);\r\n@@ -172,6 +181,11 @@ public MultiTreeWordList(String[] pathnames, File base) throws IOException {\n   public MultiTreeWordList(List<File> files, File base) throws IOException {\r\n     this.root = new MultiTextNode();\r\n     this.costMap = new EditDistanceCostMap();\r\n+\r\n+    if (files == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (File file : files) {\r\n       String name = getRelativePath(file, base);\r\n       load(new FileSystemResource(file), name);\r",
                "deletions": 0
            },
            {
                "sha": "079de68057d534dd1403cc6330e49ebb8e3a07c6",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/resource/TreeWordList.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "patch": "@@ -144,6 +144,11 @@ public TreeWordList(List<String> data, boolean dictRemoveWS) {\n \r\n   public void buildNewTree(List<String> data) {\r\n     this.root = new TextNode();\r\n+\r\n+    if (data == null) {\r\n+      return;\r\n+    }\r\n+\r\n     for (String s : data) {\r\n       addWord(s);\r\n     }\r\n@@ -191,6 +196,11 @@ public TextNode getRoot() {\n    */\r\n   public void addWord(String s) {\r\n     // Create Nodes from all chars of the strings besides the last one\r\n+\r\n+    if (s == null) {\r\n+      return;\r\n+    }\r\n+\r\n     TextNode pointer = root;\r\n     for (Character each : s.toCharArray()) {\r\n       if (dictRemoveWS && Character.isWhitespace(each)) {\r",
                "deletions": 0
            },
            {
                "sha": "df45ade3209ccb5942ac558ac7119327db034b78",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "patch": "@@ -41,7 +41,7 @@\n public class GatherTest {\r\n \r\n   @Test\r\n-  public void test() {\r\n+  public void test() throws Exception {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n \r\n@@ -57,15 +57,9 @@ public void test() {\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n \r\n-    CAS cas = null;\r\n-    try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n-              namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features, namespace\r\n-                      + \"/\");\r\n-    } catch (Exception e) {\r\n-      e.printStackTrace();\r\n-      assert (false);\r\n-    }\r\n+    CAS cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+            namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features,\r\n+            namespace + \"/\");\r\n     Type t = null;\r\n     AnnotationIndex<AnnotationFS> ai = null;\r\n     FSIterator<AnnotationFS> iterator = null;\r\n@@ -84,7 +78,6 @@ public void test() {\n     assertEquals(\"A\", v1.getCoveredText());\r\n     assertEquals(\"B\", v2.getCoveredText());\r\n \r\n-    cas.release();\r\n   }\r\n \r\n   @Test\r\n@@ -105,8 +98,8 @@ public void testOptionalMatch() throws Exception {\n     list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n-    CAS cas  = RutaTestUtils.getCAS(document, complexTypes, features);\r\n-      Ruta.apply(cas, script);\r\n+    CAS cas = RutaTestUtils.getCAS(document, complexTypes, features);\r\n+    Ruta.apply(cas, script);\r\n \r\n     Type t = null;\r\n     AnnotationIndex<AnnotationFS> ai = null;\r",
                "deletions": 13
            },
            {
                "sha": "e81831625fbfdb4d931c5d0b3feaae2905a21704",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java",
                "status": "modified",
                "changes": 44,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/MarkFastTest.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "patch": "@@ -19,32 +19,56 @@\n \r\n package org.apache.uima.ruta.action;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.TreeMap;\r\n+\r\n import org.apache.uima.cas.CAS;\r\n+import org.apache.uima.ruta.engine.Ruta;\r\n import org.apache.uima.ruta.engine.RutaEngine;\r\n import org.apache.uima.ruta.engine.RutaTestUtils;\r\n+import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\r\n import org.junit.Test;\r\n \r\n public class MarkFastTest {\r\n \r\n   @Test\r\n-  public void test() {\r\n+  public void test() throws Exception {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n \r\n-    CAS cas = null;\r\n-    try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION, namespace + \"/\" + name\r\n-              + \".txt\", 50, false, false, null, namespace + \"/\");\r\n-    } catch (Exception e) {\r\n-      e.printStackTrace();\r\n-      assert (false);\r\n-    }\r\n+    CAS cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+            namespace + \"/\" + name + \".txt\", 50, false, false, null, namespace + \"/\");\r\n \r\n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"1 0 0\", \"100\", \"2 0 0\");\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 2, 0);\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 3, 1, \"100\");\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 4, 2, \"1 0 0\", \"2 0 0\");\r\n \r\n-    cas.release();\r\n   }\r\n+\r\n+  @Test\r\n+  public void testWithNullStringList() throws Exception {\r\n+\r\n+    String text = \"Some text.\";\r\n+    String script = \"\";\r\n+    script += \"STRINGLIST list;\\n\";\r\n+    script += \"Document{-> ADD(list, null)};\\n\";\r\n+    script += \"MARKFAST(T1,list);\\n\";\r\n+\r\n+    Map<String, String> complexTypes = new TreeMap<String, String>();\r\n+    String typeName = \"org.apache.uima.Struct\";\r\n+    complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n+\r\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n+    features.put(typeName, list);\r\n+    String fn1 = \"s\";\r\n+    list.add(new TestFeature(fn1, \"\", \"uima.cas.String\"));\r\n+    CAS cas = RutaTestUtils.getCAS(text, complexTypes, features);\r\n+    Ruta.apply(cas, script);\r\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\r\n+  }\r\n+\r\n }\r",
                "deletions": 10
            },
            {
                "sha": "48bf2f9d58d77b0ec3a6d62b8b9f4fa812fb85b1",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/ffaf490b6d5c6c0302865142d259d57d60bb8813/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/Shift1Test.java?ref=ffaf490b6d5c6c0302865142d259d57d60bb8813",
                "patch": "@@ -45,7 +45,6 @@ public void testOverlapping() throws Exception {\n     CAS cas = RutaTestUtils.getCAS(text);\r\n     Ruta.apply(cas, script);\r\n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"2 3\", \"3 x 4\", \"4\");\r\n-    cas.release();\r\n   }\r\n \r\n }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "HD-6029: added NPE check in verbalization\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1859298 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/7bb769cdbab112f3752a1f9389c3d78b299c907d",
        "parent": "https://github.com/apache/uima-ruta/commit/7da5d3adfd1e485e5bf49a6998b4c025acc62c2d",
        "bug_id": "uima-ruta_3",
        "file": [
            {
                "sha": "86d23cacb99ade94ddb8aad2af7d18c575096826",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/7bb769cdbab112f3752a1f9389c3d78b299c907d/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java",
                "status": "modified",
                "changes": 31,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/RutaVerbalizer.java?ref=7bb769cdbab112f3752a1f9389c3d78b299c907d",
                "patch": "@@ -67,21 +67,24 @@ public void addExternalVerbalizers(IRutaExtension verbalizer) {\n   }\r\n \r\n   public String verbalize(Object element) {\r\n-    if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n-      return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n-    } else if (element instanceof AbstractRutaAction) {\r\n-      return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n-    } else if (element instanceof AbstractRutaCondition) {\r\n-      return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n-    } else if (element instanceof IRutaExpression) {\r\n-      return expressionVerbalizer.verbalize((RutaExpression) element);\r\n-    } else if (element instanceof RutaBlock) {\r\n-      return verbalize((RutaBlock) element, false);\r\n-    } else if (element instanceof RutaElement) {\r\n-      return scriptVerbalizer.verbalize((RutaElement) element);\r\n-    } else {\r\n-      return element.getClass().getSimpleName();\r\n+    if (element != null) {\r\n+      if (externalVerbalizers.keySet().contains(element.getClass()) && element instanceof RutaElement) {\r\n+        return externalVerbalizers.get(element.getClass()).verbalize((RutaElement) element, this);\r\n+      } else if (element instanceof AbstractRutaAction) {\r\n+        return actionVerbalizer.verbalize((AbstractRutaAction) element);\r\n+      } else if (element instanceof AbstractRutaCondition) {\r\n+        return conditionVerbalizer.verbalize((AbstractRutaCondition) element);\r\n+      } else if (element instanceof IRutaExpression) {\r\n+        return expressionVerbalizer.verbalize((RutaExpression) element);\r\n+      } else if (element instanceof RutaBlock) {\r\n+        return verbalize((RutaBlock) element, false);\r\n+      } else if (element instanceof RutaElement) {\r\n+        return scriptVerbalizer.verbalize((RutaElement) element);\r\n+      } else {\r\n+        return element.getClass().getSimpleName();\r\n+      }\r\n     }\r\n+    return \"\";\r\n   }\r\n \r\n   public String verbalizeName(RutaElement element) {\r",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-5467 - IAE instead of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1801047 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/79c6b323d9beeb30d8219ec9f9456365ab2fd582",
        "parent": "https://github.com/apache/uima-ruta/commit/03ec5a46ba624eee266b344901f26408e1425138",
        "bug_id": "uima-ruta_4",
        "file": [
            {
                "sha": "3e6e20158f7bd2970f2113c98109ae08b0bfbd68",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/type/TypeListVariableExpression.java?ref=79c6b323d9beeb30d8219ec9f9456365ab2fd582",
                "patch": "@@ -48,7 +48,12 @@ public TypeListVariableExpression(String var) {\n       } else if (each instanceof Type) {\r\n         result.add((Type) each);\r\n       } else if(each instanceof String) {\r\n-        result.add(parent.getEnvironment().getType((String) each));\r\n+        Type type = parent.getEnvironment().getType((String) each);\r\n+        if(type != null) {\r\n+          result.add(type);\r\n+        } else {\r\n+          throw new IllegalArgumentException(\"Not able to resolve type: \" + each);\r\n+        }\r\n       }\r\n     }\r\n     return result;\r",
                "deletions": 1
            },
            {
                "sha": "401c18e6835ad4a7a5d44484e441c22b3b00c98e",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/79c6b323d9beeb30d8219ec9f9456365ab2fd582/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java",
                "status": "modified",
                "changes": 28,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/engine/ParamVarTest.java?ref=79c6b323d9beeb30d8219ec9f9456365ab2fd582",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.uima.analysis_engine.AnalysisEngineProcessException;\n import org.apache.uima.cas.CAS;\n import org.apache.uima.ruta.type.CW;\n import org.apache.uima.ruta.type.SW;\n@@ -88,10 +89,35 @@ public void testMultiValue() throws Exception {\n         SW.class.getName() + RutaEngine.SEPARATOR_VAR_VALUES + CW.class.getName() });\n \n     CAS cas = RutaTestUtils.getCAS(document);\n-      Ruta.apply(cas, script, params);\n+    Ruta.apply(cas, script, params);\n \n     RutaTestUtils.assertAnnotationsEquals(cas, 1, 2, \"Some\", \"text\");\n     \n     cas.release();\n   }\n+  \n+  @Test(expected = AnalysisEngineProcessException.class)\n+  public void testWithStrictImport() throws Exception {\n+    String document = \"Some text.\";\n+    String script = \"\";\n+    script += \"TYPE t1;\";\n+    script += \"TYPE t2;\";\n+    script += \"TYPELIST tl;\";\n+    script += \"CW{ -> t1};\";\n+    script += \"SW{ -> t2};\";\n+    script += \"ANY{PARTOF(tl) -> T3};\";\n+    Map<String, Object> params = new HashMap<String, Object>();\n+    params.put(RutaEngine.PARAM_STRICT_IMPORTS, true);\n+    params.put(RutaEngine.PARAM_VAR_NAMES, new String[] { \"t1\", \"t2\", \"tl\" });\n+    params.put(RutaEngine.PARAM_VAR_VALUES, new String[] {\"org.apache.uima.T1\", \"org.apache.uima.T2\", \n+        \"org.apache.uima.T1,org.apache.uima.T2\"  });\n+\n+    CAS cas = RutaTestUtils.getCAS(document);\n+    Ruta.apply(cas, script, params);\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 3, 2, \"Some\", \"text\");\n+    \n+    cas.release();\n+  }\n+  \n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-5370\n- avoid NPE\n- added test\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1787078 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
        "parent": "https://github.com/apache/uima-ruta/commit/78816764bcbda395a6ddbb8e965165b53500dc26",
        "bug_id": "uima-ruta_5",
        "file": [
            {
                "sha": "ba460c28bc8a7ca1a90919cde14a4fd8dc501c08",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/AnnotationTypeExpression.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "patch": "@@ -21,6 +21,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.uima.cas.FeatureStructure;\n@@ -230,7 +231,7 @@ public String getStringValue(MatchContext context, RutaStream stream) {\n         }\n       }\n     }\n-    return null;\n+    return Collections.emptyList();\n   }\n \n   public MatchReference getReference() {",
                "deletions": 1
            },
            {
                "sha": "82271435a5c60b6d51baf37667f1adb79c65f0fe",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/05aaeba6c5d78f570a6fe32e45ec1a17640201d2/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java",
                "status": "added",
                "changes": 58,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/expression/AnnotationTypeExpressionTest.java?ref=05aaeba6c5d78f570a6fe32e45ec1a17640201d2",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.uima.ruta.expression;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.uima.cas.CAS;\n+import org.apache.uima.ruta.engine.Ruta;\n+import org.apache.uima.ruta.engine.RutaTestUtils;\n+import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\n+import org.junit.Test;\n+\n+public class AnnotationTypeExpressionTest {\n+\n+  @Test\n+  public void testEmptyAnnotationList() throws Exception {\n+    String document = \"This is a test.\";\n+    String script = \"\";\n+    script += \"Document{-> CREATE(Struct1, \\\"as\\\" = COMMA)};\\n\";\n+    script += \"Struct1.as{-> T1};\\n\";\n+    \n+    Map<String, String> complexTypes = new TreeMap<String, String>();\n+    complexTypes.put(\"Struct1\", \"uima.tcas.Annotation\");\n+    complexTypes.put(\"Struct2\", \"uima.tcas.Annotation\");\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\n+    features.put(\"Struct1\", list);\n+    features.put(\"Struct2\", list);\n+    list.add(new TestFeature(\"a\", \"\", \"uima.tcas.Annotation\"));\n+    list.add(new TestFeature(\"as\", \"\", \"uima.cas.FSArray\"));\n+    \n+    CAS cas = RutaTestUtils.getCAS(document, complexTypes, features);\n+    Ruta.apply(cas, script);    \n+    \n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 0);\n+  }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1764026 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/0a895ff1fcd5e8ed1197464818eeba4c631a3a87",
        "parent": "https://github.com/apache/uima-ruta/commit/efb4a878012d4618567031fdac47b1c0c00b5dd1",
        "bug_id": "uima-ruta_6",
        "file": [
            {
                "sha": "38514c82a7058cdd08bf8f6974ad771d01f5b56a",
                "filename": "ruta-ep-caseditor/src/main/java/org/apache/uima/ruta/caseditor/view/tree/AbstractTreeNode.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/0a895ff1fcd5e8ed1197464818eeba4c631a3a87/ruta-ep-caseditor/src/main/java/org/apache/uima/ruta/caseditor/view/tree/AbstractTreeNode.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0a895ff1fcd5e8ed1197464818eeba4c631a3a87/ruta-ep-caseditor/src/main/java/org/apache/uima/ruta/caseditor/view/tree/AbstractTreeNode.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-caseditor/src/main/java/org/apache/uima/ruta/caseditor/view/tree/AbstractTreeNode.java?ref=0a895ff1fcd5e8ed1197464818eeba4c631a3a87",
                "patch": "@@ -58,6 +58,9 @@ public void addChild(ITreeNode child) {\n \n   @Override\n   public ITreeNode[] getChildren() {\n+    if(children == null) {\n+      return emptyArray;\n+    }\n     return children.toArray(emptyArray);\n   }\n   ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1763428 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/87ed5c509991f4d09a9d826fccfdea5653d5743b",
        "parent": "https://github.com/apache/uima-ruta/commit/f4bb8369167f8145c96be0fb55b542ae4e151461",
        "bug_id": "uima-ruta_7",
        "file": [
            {
                "sha": "afc062eeaa1a6f1153813c814e03b4a16c9a86f9",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/MarkFastAction.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/87ed5c509991f4d09a9d826fccfdea5653d5743b/ruta-core/src/main/java/org/apache/uima/ruta/action/MarkFastAction.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/87ed5c509991f4d09a9d826fccfdea5653d5743b/ruta-core/src/main/java/org/apache/uima/ruta/action/MarkFastAction.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/MarkFastAction.java?ref=87ed5c509991f4d09a9d826fccfdea5653d5743b",
                "patch": "@@ -78,7 +78,6 @@ public void execute(MatchContext context, RutaStream stream, InferenceCrowd crow\n     for (AnnotationFS annotationFS : matchedAnnotationsOf) {\r\n       RutaStream windowStream = stream.getWindowStream(annotationFS, annotationFS.getType());\r\n       RutaWordList wl = null;\r\n-      element.getParent();\r\n       if (list != null) {\r\n         wl = list.getList(context, stream);\r\n       } else if (stringList != null) {\r",
                "deletions": 1
            },
            {
                "sha": "f7dabe2292a928739c734692ef1b4e4c8737016e",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/InListCondition.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/87ed5c509991f4d09a9d826fccfdea5653d5743b/ruta-core/src/main/java/org/apache/uima/ruta/condition/InListCondition.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/87ed5c509991f4d09a9d826fccfdea5653d5743b/ruta-core/src/main/java/org/apache/uima/ruta/condition/InListCondition.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/InListCondition.java?ref=87ed5c509991f4d09a9d826fccfdea5653d5743b",
                "patch": "@@ -63,7 +63,11 @@ public EvaluatedCondition eval(MatchContext context, RutaStream stream, Inferenc\n     }\r\n     if (stringList == null) {\r\n       RutaWordList wordList = listExpr.getList(context, stream);\r\n-      return new EvaluatedCondition(this, wordList.contains(text, false, 0, null, 0, true));\r\n+      boolean contains = false;\r\n+      if(wordList != null) {\r\n+        contains = wordList.contains(text, false, 0, null, 0, true);\r\n+      }\r\n+      return new EvaluatedCondition(this, contains);\r\n     }\r\n     List<String> sList = stringList.getList(context, stream);\r\n     boolean contains = sList.contains(text);\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1757609 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/1f479b7b75269abbab575f25dac8dc51f69fb5fd",
        "parent": "https://github.com/apache/uima-ruta/commit/49caf67e66cd7aa9941304e81e853491cf385151",
        "bug_id": "uima-ruta_8",
        "file": [
            {
                "sha": "a0de866b7f1d309ceb85d7b7ddde9634311f351c",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RutaTypeMatcher.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1f479b7b75269abbab575f25dac8dc51f69fb5fd/ruta-core/src/main/java/org/apache/uima/ruta/rule/RutaTypeMatcher.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1f479b7b75269abbab575f25dac8dc51f69fb5fd/ruta-core/src/main/java/org/apache/uima/ruta/rule/RutaTypeMatcher.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RutaTypeMatcher.java?ref=1f479b7b75269abbab575f25dac8dc51f69fb5fd",
                "patch": "@@ -253,7 +253,7 @@ private boolean checkFeature(AnnotationFS annotation, RutaStream stream, RutaBlo\n       if (checkFeatureValue) {\r\n         return true;\r\n       }\r\n-    } else if(feature == null || feature.getRange().isArray()) {\r\n+    } else if(feature == null || (feature.getRange() != null && feature.getRange().isArray())) {\r\n       // do not check on arrays\r\n       return true;\r\n     } else {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe for optional match\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1757473 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/89cc17b16059507463e048ef168709030d150d9f",
        "parent": "https://github.com/apache/uima-ruta/commit/ea437ae6287d8c6443074907c770dc802de4951f",
        "bug_id": "uima-ruta_9",
        "file": [
            {
                "sha": "c0f79c90f6594d88043ef9f405845cfcfa802317",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/89cc17b16059507463e048ef168709030d150d9f/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/89cc17b16059507463e048ef168709030d150d9f/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java?ref=89cc17b16059507463e048ef168709030d150d9f",
                "patch": "@@ -535,7 +535,7 @@ public JCas getJCas() {\n     return result;\r\n   }\r\n \r\n-  public List<AnnotationFS> getAnnotationsInWindow2(AnnotationFS windowAnnotation, Type type) {\r\n+  private List<AnnotationFS> getAnnotationsInWindow2(AnnotationFS windowAnnotation, Type type) {\r\n     List<AnnotationFS> result = new ArrayList<AnnotationFS>();\r\n     windowAnnotation = cas.createAnnotation(type, windowAnnotation.getBegin(),\r\n             windowAnnotation.getEnd() + 1);\r\n@@ -574,8 +574,9 @@ public JCas getJCas() {\n   }\r\n \r\n   public List<AnnotationFS> getAnnotationsInWindow(AnnotationFS windowAnnotation, Type type) {\r\n-    if (type == null)\r\n-      return null;\r\n+    if (windowAnnotation == null || type == null) {\r\n+      return Collections.emptyList();\r\n+    }\r\n     List<AnnotationFS> result = new ArrayList<AnnotationFS>();\r\n     List<AnnotationFS> inWindow = getAnnotationsInWindow2(windowAnnotation, type);\r\n     result = inWindow;\r",
                "deletions": 3
            },
            {
                "sha": "63e7b03e09b890b93638f994a1f2a9f14298aedf",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/89cc17b16059507463e048ef168709030d150d9f/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/89cc17b16059507463e048ef168709030d150d9f/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "status": "modified",
                "changes": 33,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java?ref=89cc17b16059507463e048ef168709030d150d9f",
                "patch": "@@ -75,11 +75,11 @@ public Feature getFeature(MatchContext context, RutaStream stream) {\n       IndexedReference indexedReference = ParsingUtils.parseIndexedReference(each);\r\n       if (indexedReference.index != -1) {\r\n         Feature delegate = type.getFeatureByBaseName(indexedReference.reference);\r\n-        if(delegate != null) {\r\n+        if (delegate != null) {\r\n           feature = new IndexedFeature(delegate, indexedReference.index);\r\n         } else {\r\n-          throw new IllegalArgumentException(\"Not able to access feature \" + each + \" of type \"\r\n-                  + type.getName());\r\n+          throw new IllegalArgumentException(\r\n+                  \"Not able to access feature \" + each + \" of type \" + type.getName());\r\n         }\r\n       } else if (StringUtils.equals(each, UIMAConstants.FEATURE_COVERED_TEXT)) {\r\n         // there is no explicit feature for coveredText\r\n@@ -93,8 +93,8 @@ public Feature getFeature(MatchContext context, RutaStream stream) {\n           if (StringUtils.equals(each, UIMAConstants.FEATURE_COVERED_TEXT_SHORT)) {\r\n             feature = new CoveredTextFeature();\r\n           } else {\r\n-            throw new IllegalArgumentException(\"Not able to access feature \" + each + \" of type \"\r\n-                    + type.getName());\r\n+            throw new IllegalArgumentException(\r\n+                    \"Not able to access feature \" + each + \" of type \" + type.getName());\r\n           }\r\n         }\r\n       }\r\n@@ -111,13 +111,13 @@ public Feature getFeature(MatchContext context, RutaStream stream) {\n   @Override\r\n   public Type getInitialType(MatchContext context, RutaStream stream) {\r\n     ITypeExpression typeExpression = mr.getTypeExpression(context, stream);\r\n-    if(typeExpression!= null) {\r\n+    if (typeExpression != null) {\r\n       return typeExpression.getType(context, stream);\r\n     } else {\r\n       IAnnotationExpression annotationExpression = mr.getAnnotationExpression(context, stream);\r\n-      if(annotationExpression != null) {\r\n+      if (annotationExpression != null) {\r\n         AnnotationFS annotation = annotationExpression.getAnnotation(context, stream);\r\n-        if(annotation != null) {\r\n+        if (annotation != null) {\r\n           return annotation.getType();\r\n         }\r\n       }\r\n@@ -134,9 +134,10 @@ public Type getInitialType(MatchContext context, RutaStream stream) {\n \r\n     Collection<AnnotationFS> result = new TreeSet<AnnotationFS>(comparator);\r\n     List<Feature> features = getFeatures(context, stream);\r\n-    if(features!= null &&!features.isEmpty()) {\r\n-      collectFeatureAnnotations(annotations, features, checkOnFeatureValue, result, stream, context);\r\n-    return result;\r\n+    if (features != null && !features.isEmpty()) {\r\n+      collectFeatureAnnotations(annotations, features, checkOnFeatureValue, result, stream,\r\n+              context);\r\n+      return result;\r\n     } else {\r\n       return annotations;\r\n     }\r\n@@ -213,19 +214,19 @@ private void collectFeatureAnnotations(AnnotationFS annotation, Feature currentF\n     }\r\n \r\n     int index = -1;\r\n-    if(currentFeature instanceof IndexedFeature) {\r\n+    if (currentFeature instanceof IndexedFeature) {\r\n       IndexedFeature indexedFeature = (IndexedFeature) currentFeature;\r\n       currentFeature = indexedFeature.getDelegate();\r\n       index = indexedFeature.getIndex();\r\n     }\r\n-    \r\n+\r\n     FeatureStructure value = annotation.getFeatureValue(currentFeature);\r\n     if (value instanceof AnnotationFS) {\r\n       AnnotationFS next = (AnnotationFS) value;\r\n       collectFeatureAnnotations(next, tail, checkOnFeatureValue, result, stream, context);\r\n     } else if (value instanceof FSArray && index >= 0) {\r\n       FSArray array = (FSArray) value;\r\n-      if(index < array.size()) {\r\n+      if (index < array.size()) {\r\n         FeatureStructure fs = array.get(index);\r\n         if (fs instanceof AnnotationFS) {\r\n           AnnotationFS next = (AnnotationFS) fs;\r\n@@ -245,8 +246,8 @@ private void collectFeatureAnnotations(AnnotationFS annotation, Feature currentF\n     } else if (value != null) {\r\n       result.add(annotation);\r\n       // primitive? -> return last annotation for further processing\r\n-//      throw new IllegalArgumentException(value.getType()\r\n-//              + \" is not supported in a feature match expression (\" + mr.getMatch() + \").\");\r\n+      // throw new IllegalArgumentException(value.getType()\r\n+      // + \" is not supported in a feature match expression (\" + mr.getMatch() + \").\");\r\n     }\r\n   }\r\n \r",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4976\n- extended test, avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748671 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/0e878dcf932baa09893e8677f894b4b62dc5eca7",
        "parent": "https://github.com/apache/uima-ruta/commit/4859252a71ded3dcc10378a09a6276feddc7972a",
        "bug_id": "uima-ruta_10",
        "file": [
            {
                "sha": "c8a7c9b2f5a264aba2b3f1567664843a06e73453",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java?ref=0e878dcf932baa09893e8677f894b4b62dc5eca7",
                "patch": "@@ -117,7 +117,9 @@ public Type getInitialType(MatchContext context, RutaStream stream) {\n       IAnnotationExpression annotationExpression = mr.getAnnotationExpression(context, stream);\r\n       if(annotationExpression != null) {\r\n         AnnotationFS annotation = annotationExpression.getAnnotation(context, stream);\r\n-        return annotation.getType();\r\n+        if(annotation != null) {\r\n+          return annotation.getType();\r\n+        }\r\n       }\r\n     }\r\n     return null;\r",
                "deletions": 1
            },
            {
                "sha": "70ca3e56ffdfb65e1b70fbb3cbeec684c3dbf6bf",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0e878dcf932baa09893e8677f894b4b62dc5eca7/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/verbalizer/ExpressionVerbalizerTest.java?ref=0e878dcf932baa09893e8677f894b4b62dc5eca7",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import org.apache.uima.ruta.expression.annotation.AnnotationLabelExpression;\r\n+import org.apache.uima.ruta.expression.annotation.AnnotationVariableExpression;\r\n import org.apache.uima.ruta.expression.bool.AbstractBooleanListExpression;\r\n import org.apache.uima.ruta.expression.bool.BooleanListVariableExpression;\r\n import org.apache.uima.ruta.expression.bool.BooleanNumberExpression;\r\n@@ -217,4 +219,12 @@ public void test() {\n     assertEquals(\"anyVar\", s);\r\n \r\n   }\r\n+  \r\n+  @Test\r\n+  public void testAnnotationExpression() {\r\n+    RutaVerbalizer v = new RutaVerbalizer();\r\n+    assertEquals(\"l\" , v.verbalize(new AnnotationLabelExpression(\"l\")));\r\n+    assertEquals(\"l\" , v.verbalize(new AnnotationVariableExpression(\"l\")));\r\n+  }\r\n+  \r\n }\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npes in syntax checker\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748661 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/f44f948d4611592479190033a1b1f74c939e009f",
        "parent": "https://github.com/apache/uima-ruta/commit/03487697b5448882c513f353004b4c4869f6e9a8",
        "bug_id": "uima-ruta_11",
        "file": [
            {
                "sha": "7aca1891085a9fc81d8d6ea773d3790cc7548c83",
                "filename": "ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/f44f948d4611592479190033a1b1f74c939e009f/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/f44f948d4611592479190033a1b1f74c939e009f/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "status": "modified",
                "changes": 19,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java?ref=f44f948d4611592479190033a1b1f74c939e009f",
                "patch": "@@ -585,7 +585,8 @@ public boolean visit(Expression s) throws Exception {\n         String text = fme.getFeature().getText();\n         int lastIndexOf = text.lastIndexOf('.');\n         String twf = text.substring(0, lastIndexOf);\n-        if (getVariableType(twf) == RutaTypeConstants.RUTA_TYPE_AT) {\n+        Integer variableType = getVariableType(twf);\n+        if (variableType != null && variableType == RutaTypeConstants.RUTA_TYPE_AT) {\n           matchedType = twf;\n         } else {\n           twf = expand(twf);\n@@ -634,9 +635,13 @@ public boolean visit(Expression s) throws Exception {\n         }\n         if (namespaces.keySet().contains(name) || namespaces.values().contains(name)\n                 || allLongTypeNames.contains(name)\n-                || getVariableType(name) == RutaTypeConstants.RUTA_TYPE_AT\n-                || getVariableType(name) == RutaTypeConstants.RUTA_TYPE_UA\n-                || getVariableType(name) == RutaTypeConstants.RUTA_TYPE_UAL) {\n+                 ) {\n+          return false;\n+        }\n+        Integer variableType = getVariableType(name);\n+        if(variableType != null && variableType == RutaTypeConstants.RUTA_TYPE_AT\n+                || variableType == RutaTypeConstants.RUTA_TYPE_UA\n+                || variableType == RutaTypeConstants.RUTA_TYPE_UAL) {\n           return false;\n         }\n         if (isFeatureMatch(name) != null) {\n@@ -896,8 +901,10 @@ private void checkTypeOfFeatureMatch(String featText, FeatureMatchExpression fme\n       return;\n     }\n     String match = isFeatureMatch(aref);\n-    if (match == null && (getVariableType(aref) == RutaTypeConstants.RUTA_TYPE_AT\n-            || getVariableType(bref) == RutaTypeConstants.RUTA_TYPE_AT)) {\n+    Integer variableType1 = getVariableType(aref);\n+    Integer variableType2 = getVariableType(bref);\n+    if (match == null && variableType1 != null && variableType2 != null && (variableType1 == RutaTypeConstants.RUTA_TYPE_AT\n+            || variableType2 == RutaTypeConstants.RUTA_TYPE_AT)) {\n       // do not check on variables!\n       return;\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4842 - avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1734804 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/c957c02b87120262cdc7efb576a2b91591797c89",
        "parent": "https://github.com/apache/uima-ruta/commit/c8239b54f33c7d3a1016e32929d01add2459d675",
        "bug_id": "uima-ruta_12",
        "file": [
            {
                "sha": "29b210d380c66fe6a1e15b8625f2fa80ccfc6bc2",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/ActionFactory.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "patch": "@@ -297,9 +297,13 @@ public static AbstractRutaAction createMacroAction(Token id, List<IRutaExpressio\n     if (macroActionDefinition == null) {\r\n       return null;\r\n     }\r\n+    int argSize = 0;\r\n+    if(args != null) {\r\n+      argSize = args.size();\r\n+    }\r\n     Map<String, String> definition = macroActionDefinition.getKey();\r\n     List<AbstractRutaAction> actions = macroActionDefinition.getValue();\r\n-    if (definition.size() != args.size()) {\r\n+    if (definition.size() != argSize) {\r\n       throw new RutaParseRuntimeException(\"Arguments of macro action '\" + name\r\n               + \"' do not match its definition: \" + definition.values());\r\n     }\r",
                "deletions": 1
            },
            {
                "sha": "affa4d1ae4f62a51230331f925bd8f93261675ff",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/ConditionFactory.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "patch": "@@ -112,12 +112,13 @@ public static AbstractRutaCondition createConditionContains(List<IRutaExpression\n       sb.append(\"(\");\r\n       sb.append(each.getClass().getSimpleName());\r\n       sb.append(\")\");\r\n-      if(iterator.hasNext()) {\r\n+      if (iterator.hasNext()) {\r\n         sb.append(\", \");\r\n       }\r\n     }\r\n-    \r\n-    throw new RutaParseRuntimeException(\"The condition CONTAINS does not support the following arguments: \" + sb.toString());\r\n+\r\n+    throw new RutaParseRuntimeException(\r\n+            \"The condition CONTAINS does not support the following arguments: \" + sb.toString());\r\n   }\r\n \r\n   public static AbstractRutaCondition createConditionContains(ITypeExpression typeExpr,\r\n@@ -325,16 +326,21 @@ public static AbstractRutaCondition createImplicitCondition(IRutaExpression expr\n     return new ImplicitCondition(expr);\r\n   }\r\n \r\n-  public static AbstractRutaCondition createMacroCondition(Token id, List<IRutaExpression> args, RutaBlock env) {\r\n+  public static AbstractRutaCondition createMacroCondition(Token id, List<IRutaExpression> args,\r\n+          RutaBlock env) {\r\n     String name = id.getText();\r\n     Pair<Map<String, String>, List<AbstractRutaCondition>> macroConditionDefinition = env\r\n             .getEnvironment().getMacroCondition(name);\r\n     if (macroConditionDefinition == null) {\r\n       return null;\r\n     }\r\n+    int argSize = 0;\r\n+    if(args != null) {\r\n+      argSize = args.size();\r\n+    }\r\n     Map<String, String> definition = macroConditionDefinition.getKey();\r\n     List<AbstractRutaCondition> conditions = macroConditionDefinition.getValue();\r\n-    if (definition.size() != args.size()) {\r\n+    if (definition.size() != argSize) {\r\n       throw new RutaParseRuntimeException(\"Arguments of macro action '\" + name\r\n               + \"' do not match its definition: \" + definition.values());\r\n     }\r",
                "deletions": 5
            },
            {
                "sha": "417fd398b7cc6b336355555d8e97d555acd5c323",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/MacroActionTest.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "patch": "@@ -36,6 +36,27 @@ public void test() {\n     script += \"Document{(j>0)->T2};\\n\";\n \n \n+    CAS cas = null;\n+    try {\n+      cas = RutaTestUtils.getCAS(document);\n+      Ruta.apply(cas, script);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 1, \"Test\");\n+    RutaTestUtils.assertAnnotationsEquals(cas, 2, 1, \"Test\");\n+\n+    cas.release();\n+  }\n+  \n+  @Test\n+  public void testNoArgs() {\n+    String document = \"Test.\";\n+    String script = \"INT j;\\n\";\n+    script += \"ACTION macro() = MARK(T1), MARK(T2);\\n\";\n+    script += \"W{-> macro()};\\n\";\n+\n     CAS cas = null;\n     try {\n       cas = RutaTestUtils.getCAS(document);",
                "deletions": 0
            },
            {
                "sha": "18d79ea9fd7553a8f5b552f3cd7382978edcc483",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c957c02b87120262cdc7efb576a2b91591797c89/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/condition/MacroConditionTest.java?ref=c957c02b87120262cdc7efb576a2b91591797c89",
                "patch": "@@ -51,4 +51,24 @@ public void test() {\n \n     cas.release();\n   }\n+  \n+  @Test\n+  public void testNoArgs() {\n+    String document = \"This is a Test.\";\n+    String script = \"INT j;\\n\";\n+    script += \"CONDITION macro() = OR(IS(CW),IS(PERIOD));\\n\";\n+    script += \"ANY{macro()-> T1};\\n\";\n+\n+    CAS cas = null;\n+    try {\n+      cas = RutaTestUtils.getCAS(document);\n+      Ruta.apply(cas, script);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+\n+    RutaTestUtils.assertAnnotationsEquals(cas, 1, 3, \"This\", \"Test\", \".\");\n+\n+    cas.release();\n+  }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE for null features\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1711298 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/7a9bc5d0b52b7e8d55f3d907678f5727fe5b6322",
        "parent": "https://github.com/apache/uima-ruta/commit/ac602b72a862987c228ba63da26b9a388b4cb5f7",
        "bug_id": "uima-ruta_13",
        "file": [
            {
                "sha": "fc9781b3c72aef9b03bb9331629d893a366a4984",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/RegExpCondition.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/7a9bc5d0b52b7e8d55f3d907678f5727fe5b6322/ruta-core/src/main/java/org/apache/uima/ruta/condition/RegExpCondition.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/7a9bc5d0b52b7e8d55f3d907678f5727fe5b6322/ruta-core/src/main/java/org/apache/uima/ruta/condition/RegExpCondition.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/RegExpCondition.java?ref=7a9bc5d0b52b7e8d55f3d907678f5727fe5b6322",
                "patch": "@@ -67,6 +67,9 @@ public EvaluatedCondition eval(AnnotationFS annotation, RuleElement element, Rut\n       matcher = regularExpPattern.matcher(coveredText);\r\n     } else {\r\n       String variableValue = variable.getStringValue(element.getParent(), annotation, stream);\r\n+      if(variableValue == null) {\r\n+        return new EvaluatedCondition(this, false);\r\n+      }\r\n       Pattern regularExpPattern = null;\r\n       if (ignore) {\r\n         regularExpPattern = Pattern.compile(stringValue, Pattern.MULTILINE + Pattern.DOTALL + Pattern.CASE_INSENSITIVE + Pattern.UNICODE_CASE);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4613\n- avoid NPE for template descriptor import\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1709853 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/62a3cce74eb18209fb90136a806331a589572312",
        "parent": "https://github.com/apache/uima-ruta/commit/8d666d2d4b38dd9dd57e7059cc9ebe8e9cd66bf1",
        "bug_id": "uima-ruta_14",
        "file": [
            {
                "sha": "5b27ad854595a4ae89567497f3c7266815745862",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/62a3cce74eb18209fb90136a806331a589572312/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/62a3cce74eb18209fb90136a806331a589572312/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java?ref=62a3cce74eb18209fb90136a806331a589572312",
                "patch": "@@ -71,7 +71,6 @@\n import org.apache.uima.ruta.parser.RutaLexer;\r\n import org.apache.uima.ruta.parser.RutaParser;\r\n import org.apache.uima.ruta.seed.RutaAnnotationSeeder;\r\n-import org.apache.uima.ruta.type.RutaBasic;\r\n import org.apache.uima.ruta.verbalize.RutaVerbalizer;\r\n import org.apache.uima.ruta.visitor.CreatedByVisitor;\r\n import org.apache.uima.ruta.visitor.DebugInfoCollectorVisitor;\r\n@@ -725,7 +724,7 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n       } catch (RecognitionException e) {\r\n         throw new AnalysisEngineProcessException(e);\r\n       }\r\n-    } else if(mainScript != null) {\r\n+    } else if (mainScript != null) {\r\n       String scriptLocation = locate(mainScript, scriptPaths, SCRIPT_FILE_EXTENSION);\r\n       if (scriptLocation == null) {\r\n         try {\r\n@@ -750,10 +749,10 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n         }\r\n       }\r\n     }\r\n-    if(script == null) {\r\n+    if (script == null) {\r\n       return;\r\n     }\r\n-    \r\n+\r\n     Map<String, RutaModule> additionalScriptsMap = new HashMap<String, RutaModule>();\r\n     Map<String, AnalysisEngine> additionalEnginesMap = new HashMap<String, AnalysisEngine>();\r\n \r\n@@ -1131,18 +1130,22 @@ private String collectionToString(Object[] collection) {\n   @Override\r\n   public void batchProcessComplete() throws AnalysisEngineProcessException {\r\n     super.batchProcessComplete();\r\n-    Collection<AnalysisEngine> values = script.getEngines().values();\r\n-    for (AnalysisEngine each : values) {\r\n-      each.batchProcessComplete();\r\n+    if (script != null) {\r\n+      Collection<AnalysisEngine> values = script.getEngines().values();\r\n+      for (AnalysisEngine each : values) {\r\n+        each.batchProcessComplete();\r\n+      }\r\n     }\r\n   }\r\n \r\n   @Override\r\n   public void collectionProcessComplete() throws AnalysisEngineProcessException {\r\n     super.collectionProcessComplete();\r\n-    Collection<AnalysisEngine> values = script.getEngines().values();\r\n-    for (AnalysisEngine each : values) {\r\n-      each.collectionProcessComplete();\r\n+    if (script != null) {\r\n+      Collection<AnalysisEngine> values = script.getEngines().values();\r\n+      for (AnalysisEngine each : values) {\r\n+        each.collectionProcessComplete();\r\n+      }\r\n     }\r\n   }\r\n \r",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1708995 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/15619c37de4c48314ea1bf9d9573989c13d05acd",
        "parent": "https://github.com/apache/uima-ruta/commit/7852a434d5c89fe3c605ec90bcac586b0fe2e2c7",
        "bug_id": "uima-ruta_15",
        "file": [
            {
                "sha": "3ef25f0a4f015b0bac91ea0c66b072e4ca8b48e1",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/15619c37de4c48314ea1bf9d9573989c13d05acd/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/15619c37de4c48314ea1bf9d9573989c13d05acd/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/resource/MultiTreeWordList.java?ref=15619c37de4c48314ea1bf9d9573989c13d05acd",
                "patch": "@@ -157,6 +157,9 @@ public MultiTreeWordList(List<File> files, File base) throws IOException {\n   }\r\n \r\n   private String getRelativePath(File file, File base) {\r\n+    if(base == null) {\r\n+      return file.getName();\r\n+    }\r\n     Path filePath = file.toPath();\r\n     Path basePath = base.toPath();\r\n     Path relativize = basePath.relativize(filePath);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1708990 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/49bc80e38e052b29f72f3864da280cd0d5098a05",
        "parent": "https://github.com/apache/uima-ruta/commit/a976c701186356ac716f78139aee783a0d617982",
        "bug_id": "uima-ruta_16",
        "file": [
            {
                "sha": "dc4ca18bd3988712b167596fc504d63d75208ce5",
                "filename": "ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/49bc80e38e052b29f72f3864da280cd0d5098a05/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/49bc80e38e052b29f72f3864da280cd0d5098a05/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java?ref=49bc80e38e052b29f72f3864da280cd0d5098a05",
                "patch": "@@ -281,15 +281,15 @@ public boolean visit(Statement s) throws Exception {\n             if (file != null) {\n               // script in other project? use that if the file was found in the workspace\n               referredProject = file.getProject();\n-            }\n-            IPath typeSystemDescriptorPath = RutaProjectUtils.getTypeSystemDescriptorPath(\n-                    file.getLocation(), referredProject);\n-            TypeSystemDescription tsDesc = importCompleteTypeSystem(typeSystemDescriptorPath, url);\n-\n-            List<String> checkDuplicateShortNames = checkOnAmbiguousShortNames(tsDesc);\n-            if (!checkDuplicateShortNames.isEmpty()) {\n-              pr.reportProblem(problemFactory.createDuplicateShortNameInImported(sRef, localPath,\n-                      checkDuplicateShortNames, ProblemSeverity.WARNING));\n+              IPath typeSystemDescriptorPath = RutaProjectUtils.getTypeSystemDescriptorPath(\n+                      file.getLocation(), referredProject);\n+              TypeSystemDescription tsDesc = importCompleteTypeSystem(typeSystemDescriptorPath, url);\n+              \n+              List<String> checkDuplicateShortNames = checkOnAmbiguousShortNames(tsDesc);\n+              if (!checkDuplicateShortNames.isEmpty()) {\n+                pr.reportProblem(problemFactory.createDuplicateShortNameInImported(sRef, localPath,\n+                        checkDuplicateShortNames, ProblemSeverity.WARNING));\n+              }\n             }\n           }\n         } catch (IOException e) {",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4640\n- avoid npe in TRIE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1708962 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/cc781c451e9fb0e91122673beeae6c7abb4bd94d",
        "parent": "https://github.com/apache/uima-ruta/commit/2370deda39e029c41555614b83d226683f9fcd8c",
        "bug_id": "uima-ruta_17",
        "file": [
            {
                "sha": "3a6ff9040434b82d269925dd8b7ad4c1cf326beb",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/TrieAction.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/cc781c451e9fb0e91122673beeae6c7abb4bd94d/ruta-core/src/main/java/org/apache/uima/ruta/action/TrieAction.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/cc781c451e9fb0e91122673beeae6c7abb4bd94d/ruta-core/src/main/java/org/apache/uima/ruta/action/TrieAction.java",
                "status": "modified",
                "changes": 17,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/TrieAction.java?ref=cc781c451e9fb0e91122673beeae6c7abb4bd94d",
                "patch": "@@ -92,16 +92,17 @@ public void execute(RuleMatch match, RuleElement element, RutaStream stream, Inf\n     String ignoreCharValue = ignoreChar.getStringValue(parent, match, element, stream);\r\n \r\n     RutaWordList wl = list.getList(parent);\r\n-    Collection<AnnotationFS> found = wl.find(stream, typeMap, ignoreCaseValue, ignoreLengthValue,\r\n-            editValue, distanceValue, ignoreCharValue);\r\n-\r\n-    if (found != null) {\r\n-      for (AnnotationFS annotation : found) {\r\n-        stream.addAnnotation(annotation, match);\r\n-        stream.getCas().addFsToIndexes(annotation);\r\n+    if (wl != null) {\r\n+      Collection<AnnotationFS> found = wl.find(stream, typeMap, ignoreCaseValue, ignoreLengthValue,\r\n+              editValue, distanceValue, ignoreCharValue);\r\n+\r\n+      if (found != null) {\r\n+        for (AnnotationFS annotation : found) {\r\n+          stream.addAnnotation(annotation, match);\r\n+          stream.getCas().addFsToIndexes(annotation);\r\n+        }\r\n       }\r\n     }\r\n-\r\n   }\r\n \r\n   public WordListExpression getList() {\r",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE for default package\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1701593 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/3efb3b7b6f5ecce50815eff737dcddfb47c94f6d",
        "parent": "https://github.com/apache/uima-ruta/commit/463d83e75a95652b104e5a212969e20800a475e9",
        "bug_id": "uima-ruta_18",
        "file": [
            {
                "sha": "56bcc99c014a166b2c08046d16c019d21b647155",
                "filename": "ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/3efb3b7b6f5ecce50815eff737dcddfb47c94f6d/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3efb3b7b6f5ecce50815eff737dcddfb47c94f6d/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java?ref=3efb3b7b6f5ecce50815eff737dcddfb47c94f6d",
                "patch": "@@ -217,7 +217,9 @@ public LanguageCheckerVisitor(IProblemReporter problemReporter, ISourceLineTrack\n     IPath location = sourceModule.getResource().getLocation();\n     try {\n       IPath packagePath = RutaProjectUtils.getPackagePath(location, project);\n-      packagePathString = packagePath.toPortableString().replaceAll(\"/\", \".\");\n+      if(packagePath != null) {\n+        packagePathString = packagePath.toPortableString().replaceAll(\"/\", \".\");\n+      }\n     } catch (CoreException e) {\n       RutaIdeUIPlugin.error(e);\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - fixed possible NPE in explanation\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1696531 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/dddd9d8c0fd32b656958febda4f96181970db6fe",
        "parent": "https://github.com/apache/uima-ruta/commit/ca4cee657f508f85ff6968bce7616f656aedfa90",
        "bug_id": "uima-ruta_19",
        "file": [
            {
                "sha": "d3b1c210aad0ea7cc8e64960b39eef350ddd1f63",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/dddd9d8c0fd32b656958febda4f96181970db6fe/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/dddd9d8c0fd32b656958febda4f96181970db6fe/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ScriptVerbalizer.java?ref=dddd9d8c0fd32b656958febda4f96181970db6fe",
                "patch": "@@ -188,7 +188,7 @@ public String verbalizeRuleElement(RuleElement re) {\n         }\r\n       }\r\n       List<RutaStatement> inlinedActionRules = are.getInlinedActionRules();\r\n-      if (inlinedConditionRules != null && !inlinedActionRules.isEmpty()) {\r\n+      if (inlinedActionRules != null && !inlinedActionRules.isEmpty()) {\r\n         result.append(THEN);\r\n         result.append(CBOPEN);\r\n         for (RutaStatement rutaStatement : inlinedActionRules) {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira -  avoid npe for empty annotation variables in match condition\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1757611 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/1a0dcd59e3c98656e573356f04e02505d6ac244e",
        "parent": "https://github.com/apache/uima-ruta/commit/1f479b7b75269abbab575f25dac8dc51f69fb5fd",
        "bug_id": "uima-ruta_20",
        "file": [
            {
                "sha": "f2eac860365e547ee21151e68c5bd33148fd7bef",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/RutaEnvironment.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1a0dcd59e3c98656e573356f04e02505d6ac244e/ruta-core/src/main/java/org/apache/uima/ruta/RutaEnvironment.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1a0dcd59e3c98656e573356f04e02505d6ac244e/ruta-core/src/main/java/org/apache/uima/ruta/RutaEnvironment.java",
                "status": "modified",
                "changes": 1935,
                "additions": 968,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/RutaEnvironment.java?ref=1a0dcd59e3c98656e573356f04e02505d6ac244e",
                "patch": "@@ -82,979 +82,980 @@\n \r\n public class RutaEnvironment {\r\n \r\n-  private static final String DOCUMENT = \"Document\";\r\n+\tprivate static final String DOCUMENT = \"Document\";\r\n \r\n-  private final Object annotationTypeDummy = new Object();\r\n+\tprivate final Object annotationTypeDummy = new Object();\r\n \r\n-  private Map<String, Type> types;\r\n+\tprivate Map<String, Type> types;\r\n \r\n-  private Map<String, RutaWordList> wordLists;\r\n+\tprivate Map<String, RutaWordList> wordLists;\r\n \r\n-  private Map<String, RutaTable> tables;\r\n+\tprivate Map<String, RutaTable> tables;\r\n \r\n-  private RutaBlock owner;\r\n+\tprivate RutaBlock owner;\r\n \r\n-  /**\r\n-   * Mapping from short type name (e.g. {@code W}) to their disambiguated long type names (e.g.\r\n-   * {@code org.apache.uima.ruta.type.W}).\r\n-   */\r\n-  private Map<String, String> namespaces;\r\n+\t/**\r\n+\t * Mapping from short type name (e.g. {@code W}) to their disambiguated long\r\n+\t * type names (e.g. {@code org.apache.uima.ruta.type.W}).\r\n+\t */\r\n+\tprivate Map<String, String> namespaces;\r\n \r\n-  /**\r\n-   * Mapping from ambiguous short type names to all their possible long type names.\r\n-   */\r\n-  private Map<String, Set<String>> ambiguousTypeAlias;\r\n-\r\n-  /**\r\n-   * Set of imported typesystems.\r\n-   */\r\n-  private Set<String> typesystems;\r\n-\r\n-  /**\r\n-   * Set of imported scripts.\r\n-   */\r\n-  private Set<String> scripts;\r\n-\r\n-  /**\r\n-   * An alias from a long to a short name.\r\n-   */\r\n-  private static class Alias {\r\n-    final String longName;\r\n-\r\n-    final String shortName;\r\n-\r\n-    Alias(String longName, String shortName) {\r\n-      this.longName = longName;\r\n-      this.shortName = shortName;\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Types that are imported in the environment. Keys are type system descriptors and values are\r\n-   * aliased types.\r\n-   */\r\n-  private Map<String, List<Alias>> typeImports;\r\n-\r\n-  /**\r\n-   * Packages that are imported in the environment without a typesystem specification.\r\n-   *\r\n-   * Keys are package names and values are aliases. An empty string as alias means that all types\r\n-   * from the package should be imported in the default namespace.\r\n-   */\r\n-  private Map<String, List<String>> packageImports;\r\n-\r\n-  /**\r\n-   * Set of types that are declared in the script.\r\n-   */\r\n-  private Set<String> declaredAnnotationTypes;\r\n-\r\n-  private Map<String, Object> variableValues;\r\n-\r\n-  private Map<String, Class<?>> variableTypes;\r\n-\r\n-  private Map<String, Class<?>> availableTypes;\r\n-\r\n-  private Map<String, Class<?>> variableGenericTypes;\r\n-\r\n-  private Map<String, Class<?>> availableListTypes;\r\n-\r\n-  private Map<String, Triple<Map<String, String>, List<AbstractRutaCondition>, Set<String>>> macroConditions;\r\n-\r\n-  private Map<String, Triple<Map<String, String>, List<AbstractRutaAction>, Set<String>>> macroActions;\r\n-\r\n-  private String[] resourcePaths = null;\r\n-\r\n-  private CAS cas;\r\n-\r\n-  private Map<String, Object> initializedVariables;\r\n-\r\n-  private ResourceManager resourceManager;\r\n-\r\n-  private Map<String, String> variableAliases;\r\n-\r\n-  private RutaVerbalizer verbalizer = new RutaVerbalizer();\r\n-\r\n-  public RutaEnvironment(RutaBlock owner) {\r\n-    super();\r\n-    this.owner = owner;\r\n-\r\n-    types = new HashMap<String, Type>();\r\n-    namespaces = new HashMap<String, String>();\r\n-    ambiguousTypeAlias = new HashMap<String, Set<String>>();\r\n-    typesystems = new HashSet<String>();\r\n-    scripts = new HashSet<String>();\r\n-    typeImports = new HashMap<String, List<Alias>>();\r\n-    packageImports = new HashMap<String, List<String>>();\r\n-    declaredAnnotationTypes = new HashSet<String>();\r\n-    wordLists = new HashMap<String, RutaWordList>();\r\n-    tables = new HashMap<String, RutaTable>();\r\n-    variableValues = new HashMap<String, Object>();\r\n-    variableTypes = new HashMap<String, Class<?>>();\r\n-    variableGenericTypes = new HashMap<String, Class<?>>();\r\n-    macroConditions = new HashMap<>();\r\n-    macroActions = new HashMap<>();\r\n-    availableTypes = new HashMap<String, Class<?>>();\r\n-    availableTypes.put(RutaConstants.RUTA_VARIABLE_ANNOTATION, AnnotationFS.class);\r\n-    availableTypes.put(\"INT\", Integer.class);\r\n-    availableTypes.put(\"STRING\", String.class);\r\n-    availableTypes.put(\"DOUBLE\", Double.class);\r\n-    availableTypes.put(\"FLOAT\", Float.class);\r\n-    availableTypes.put(\"BOOLEAN\", Boolean.class);\r\n-    availableTypes.put(\"TYPE\", Type.class);\r\n-    availableTypes.put(\"CONDITION\", AbstractRutaCondition.class);\r\n-    availableTypes.put(\"ACTION\", AbstractRutaAction.class);\r\n-    availableTypes.put(\"WORDLIST\", RutaWordList.class);\r\n-    availableTypes.put(\"WORDTABLE\", RutaTable.class);\r\n-    availableTypes.put(\"ANNOTATIONLIST\", List.class);\r\n-    availableTypes.put(\"BOOLEANLIST\", List.class);\r\n-    availableTypes.put(\"INTLIST\", List.class);\r\n-    availableTypes.put(\"DOUBLELIST\", List.class);\r\n-    availableTypes.put(\"FLOATLIST\", List.class);\r\n-    availableTypes.put(\"STRINGLIST\", List.class);\r\n-    availableTypes.put(\"TYPELIST\", List.class);\r\n-    availableListTypes = new HashMap<String, Class<?>>();\r\n-    availableListTypes.put(\"ANNOTATIONLIST\", AnnotationFS.class);\r\n-    availableListTypes.put(\"BOOLEANLIST\", Boolean.class);\r\n-    availableListTypes.put(\"INTLIST\", Integer.class);\r\n-    availableListTypes.put(\"DOUBLELIST\", Double.class);\r\n-    availableListTypes.put(\"FLOATLIST\", Float.class);\r\n-    availableListTypes.put(\"STRINGLIST\", String.class);\r\n-    availableListTypes.put(\"TYPELIST\", Type.class);\r\n-    resourcePaths = getResourcePaths();\r\n-    initializedVariables = new HashMap<String, Object>();\r\n-    variableAliases = new HashMap<>();\r\n-\r\n-    // Always import BasicTypeSystem\r\n-    addTypeSystem(\"org.apache.uima.ruta.engine.BasicTypeSystem\");\r\n-  }\r\n-\r\n-  /**\r\n-   * Import short type names.\r\n-   *\r\n-   * @param cas\r\n-   *          Cas to initialize the types for.\r\n-   * @param strictImport\r\n-   *          Specify whether all types should be imported (false) or only types\r\n-   */\r\n-  public void initializeTypes(CAS cas, boolean strictImport) {\r\n-    this.cas = cas;\r\n-    try {\r\n-      if (strictImport) {\r\n-        importDeclaredTypes(cas.getTypeSystem());\r\n-        importDeclaredTypesystems(cas.getTypeSystem());\r\n-        importTypeAliases(cas.getTypeSystem());\r\n-        importPackageAliases(cas.getTypeSystem());\r\n-        importDeclaredScripts(cas.getTypeSystem());\r\n-      } else {\r\n-        // import all types known to the cas\r\n-        importAllTypes(cas.getTypeSystem());\r\n-        importTypeAliases(cas.getTypeSystem());\r\n-        importPackageAliases(cas.getTypeSystem());\r\n-      }\r\n-\r\n-      // \"Document\" can be resolved to \"uima.tcas.DocumentAnnotation\" or\r\n-      // \"org.apache.uima.ruta.type.Document\",\r\n-      // we force it to the former\r\n-      ambiguousTypeAlias.remove(DOCUMENT);\r\n-      namespaces.remove(DOCUMENT);\r\n-      Type documentType = cas.getTypeSystem().getType(UIMAConstants.TYPE_DOCUMENT);\r\n-      addType(DOCUMENT, documentType);\r\n-      addType(documentType.getShortName(), documentType);\r\n-      \r\n-      Type annotationType = cas.getJCas().getCasType(org.apache.uima.jcas.tcas.Annotation.type);\r\n-      addType(\"Annotation\", annotationType);\r\n-    } catch (CASException e) {\r\n-      UIMAFramework.getLogger(getClass()).log(SEVERE, \"Cannot initialize types.\", e);\r\n-    } catch (InvalidXMLException e) {\r\n-      UIMAFramework.getLogger(getClass()).log(SEVERE, \"Cannot initialize types.\", e);\r\n-    }\r\n-\r\n-  }\r\n-\r\n-  /**\r\n-   * Imports all types that are known to a type system.\r\n-   *\r\n-   * @param ts\r\n-   *          Type system to import.\r\n-   * @throws CASException\r\n-   */\r\n-  private void importAllTypes(TypeSystem ts) throws CASException {\r\n-    Type topType = ts.getTopType();\r\n-    if (topType != null) {\r\n-      List<Type> list = ts.getProperlySubsumedTypes(topType);\r\n-      for (Type type : list) {\r\n-        addType(type);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all types that are declared by the script.\r\n-   *\r\n-   * @param casTS\r\n-   *          Type system containing all known types.\r\n-   * @throws InvalidXMLException\r\n-   *           When import cannot be resolved.\r\n-   */\r\n-  private void importDeclaredTypes(TypeSystem casTS) throws InvalidXMLException {\r\n-    for (String name : declaredAnnotationTypes) {\r\n-      Type type = casTS.getType(name);\r\n-      if (type != null) {\r\n-        addType(type);\r\n-      } else {\r\n-        throw new RuntimeException(\"Type '\" + name + \"' not found\");\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all typesystems that are imported in the script.\r\n-   *\r\n-   * @param casTS\r\n-   *          Type system containing all known types.\r\n-   * @throws InvalidXMLException\r\n-   *           When import cannot be resolved.\r\n-   */\r\n-  private void importDeclaredTypesystems(TypeSystem casTS) throws InvalidXMLException {\r\n-    String[] descriptors = typesystems.toArray(new String[typesystems.size()]);\r\n-    TypeSystemDescription ts = TypeSystemDescriptionFactory.createTypeSystemDescription(descriptors);\r\n-    ts.resolveImports(resourceManager);\r\n-    for (TypeDescription td : ts.getTypes()) {\r\n-      Type type = casTS.getType(td.getName());\r\n-      if (type != null) {\r\n-        addType(type);\r\n-      } else {\r\n-        throw new RuntimeException(\"Type '\" + td.getName() + \"' not found\");\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all already initialized types of imported scripts.\r\n-   *\r\n-   * @param casTS\r\n-   *          Type system containing all known types.\r\n-   * @throws InvalidXMLException\r\n-   *           When import cannot be resolved.\r\n-   */\r\n-  private void importDeclaredScripts(TypeSystem casTS) throws InvalidXMLException {\r\n-\r\n-    RutaModule script = owner.getScript();\r\n-    for (String eachImportedScript : scripts) {\r\n-      RutaModule importedModule = script.getScript(eachImportedScript);\r\n-      RutaEnvironment importedEnvironment = importedModule.getRootBlock().getEnvironment();\r\n-      Map<String, Type> importedTypeMap = importedEnvironment.getTypes();\r\n-      Map<String, String> importedNamespaces = importedEnvironment.getNamespaces();\r\n-      Set<Entry<String, String>> entrySet = importedNamespaces.entrySet();\r\n-      for (Entry<String, String> entry : entrySet) {\r\n-        if (!ownsType(entry.getValue()) && !StringUtils.equals(entry.getKey(), DOCUMENT)) {\r\n-          Type type = importedTypeMap.get(entry.getValue());\r\n-          addType(entry.getKey(), type);\r\n-        }\r\n-      }\r\n-      // TODO import also wordlists and variables?\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Imports all type aliases.\r\n-   *\r\n-   * @param casTS\r\n-   *          Cas type system.\r\n-   */\r\n-  private void importTypeAliases(TypeSystem casTS) {\r\n-    for (List<Alias> aliases : typeImports.values()) {\r\n-      for (Alias alias : aliases) {\r\n-        Type type = casTS.getType(alias.longName);\r\n-        if (type == null) {\r\n-          throw new RuntimeException(\"Type '\" + alias.longName + \"' not found\");\r\n-        }\r\n-        addType(alias.shortName, casTS.getType(alias.longName));\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all packages that are imported by the script.\r\n-   *\r\n-   * @param casTS\r\n-   *          Type system containing all known types.\r\n-   */\r\n-  private void importPackageAliases(TypeSystem casTS) {\r\n-    Iterator<Type> iter = casTS.getTypeIterator();\r\n-    while (iter.hasNext()) {\r\n-      Type type = iter.next();\r\n-      String name = type.getName();\r\n-      String pkg = name.substring(0, Math.max(name.lastIndexOf('.'), 0));\r\n-      List<String> aliases = packageImports.get(pkg);\r\n-      if (aliases != null) {\r\n-        for (String alias : aliases) {\r\n-          if (alias.isEmpty()) {\r\n-            addType(type);\r\n-          } else {\r\n-            addType(alias + \".\" + type.getShortName(), type);\r\n-          }\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public String[] getResourcePaths() {\r\n-    if (resourcePaths == null) {\r\n-      RutaBlock parent = owner.getParent();\r\n-      if (parent != null) {\r\n-        return parent.getEnvironment().getResourcePaths();\r\n-      }\r\n-    }\r\n-    return resourcePaths;\r\n-  }\r\n-\r\n-  public void setResourcePaths(String[] resourcePaths) {\r\n-    this.resourcePaths = resourcePaths;\r\n-  }\r\n-\r\n-  public boolean ownsType(String match) {\r\n-    match = expand(match);\r\n-    return types.keySet().contains(match);\r\n-  }\r\n-\r\n-  private String expand(String string) {\r\n-    String complete = namespaces.get(string);\r\n-    if (complete == null) {\r\n-      if (!string.contains(\".\")) {\r\n-        complete = namespaces.get(string);\r\n-        if (complete == null) {\r\n-          complete = string;\r\n-        }\r\n-      } else {\r\n-        complete = string;\r\n-      }\r\n-    }\r\n-    return complete;\r\n-  }\r\n-\r\n-  /**\r\n-   * Resolves an annotation type.\r\n-   *\r\n-   * @param match\r\n-   *          Annotation type to resolve.\r\n-   * @return Resolved annotation type or null if match is unknown.\r\n-   * @throws IllegalArgumentException\r\n-   *           When {@code match} is ambiguous.\r\n-   */\r\n-  public Type getType(String match) {\r\n-    // make sure that match is not ambiguous\r\n-    Set<String> ambiguousTargets = ambiguousTypeAlias.get(match);\r\n-    if (ambiguousTargets != null) {\r\n-      StringBuilder message = new StringBuilder(match);\r\n-      message.append(\" is ambiguous, use one of the following instead : \");\r\n-      for (String target : ambiguousTargets) {\r\n-        message.append(target).append(' ');\r\n-      }\r\n-      throw new IllegalArgumentException(message.toString());\r\n-    }\r\n-\r\n-    // try to resolve match\r\n-    String expanded = expand(match);\r\n-    Type type = types.get(expanded);\r\n-    if (type == null) {\r\n-      RutaBlock parent = owner.getParent();\r\n-      if (parent != null) {\r\n-        type = parent.getEnvironment().getType(match);\r\n-      }\r\n-    }\r\n-    return type;\r\n-  }\r\n-\r\n-  public void addType(String string, Type type) {\r\n-    importType(type.getName(), string);\r\n-    types.put(type.getName(), type);\r\n-  }\r\n-\r\n-  public void addType(Type type) {\r\n-    addType(type.getShortName(), type);\r\n-  }\r\n-\r\n-  public void declareType(String name) {\r\n-    declaredAnnotationTypes.add(name);\r\n-  }\r\n-\r\n-  /**\r\n-   * Add a typesystem to the script.\r\n-   *\r\n-   * @param descriptor\r\n-   *          Type system's descriptor path.\r\n-   */\r\n-  public void addTypeSystem(String descriptor) {\r\n-    typesystems.add(descriptor);\r\n-  }\r\n-\r\n-  /**\r\n-   * Add a script to the script.\r\n-   *\r\n-   * @param script\r\n-   *          the script's full name.\r\n-   */\r\n-  public void addScript(String script) {\r\n-    scripts.add(script);\r\n-  }\r\n-\r\n-  /**\r\n-   * Import a type in the current namespace.\r\n-   *\r\n-   * @param longName\r\n-   *          Complete type name.\r\n-   * @param shortName\r\n-   *          Short type name (without namespace).\r\n-   */\r\n-  private void importType(String longName, String shortName) {\r\n-    Set<String> targets = ambiguousTypeAlias.get(shortName);\r\n-    if (targets != null) {\r\n-      // shortName is already ambiguous, add longName to its list of possible targets\r\n-      targets.add(longName);\r\n-    } else {\r\n-      String existing = namespaces.put(shortName, longName);\r\n-\r\n-      if (existing != null && !existing.equals(longName)) {\r\n-        // shortName can now be resolved to \"existing\" or \"longName\"\r\n-        targets = new HashSet<String>(2);\r\n-        targets.add(existing);\r\n-        targets.add(longName);\r\n-\r\n-        // add existing mapping and longName to its list of possible targets\r\n-        ambiguousTypeAlias.put(shortName, targets);\r\n-\r\n-        // remove shortName from the namespace because it is ambiguous\r\n-        namespaces.remove(shortName);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Import a type from a type system.\r\n-   *\r\n-   * @param typesystem\r\n-   *          Typesystem from which to import the type or null.\r\n-   * @param longName\r\n-   *          Type to import.\r\n-   * @param shortName\r\n-   *          Short name to use for this type.\r\n-   */\r\n-  public void importTypeFromTypeSystem(String typesystem, String longName, String shortName) {\r\n-    String key = typesystem != null ? typesystem : \"\";\r\n-    List<Alias> aliases = typeImports.get(key);\r\n-\r\n-    if (aliases == null) {\r\n-      aliases = new ArrayList<Alias>();\r\n-      typeImports.put(key, aliases);\r\n-    }\r\n-\r\n-    aliases.add(new Alias(longName, shortName));\r\n-  }\r\n-\r\n-  /**\r\n-   * Import a type from a type system.\r\n-   *\r\n-   * The type is aliased by its unqualified name.\r\n-   *\r\n-   * @param typesystem\r\n-   *          Typesystem from which to import the type or null.\r\n-   * @param longName\r\n-   *          Type to import.\r\n-   */\r\n-  public void importTypeFromTypeSystem(String typesystem, String longName) {\r\n-    importTypeFromTypeSystem(typesystem, longName,\r\n-            longName.substring(longName.lastIndexOf('.') + 1));\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all the types from a package.\r\n-   *\r\n-   * @param typesystem\r\n-   *          Type system describing the package to load.\r\n-   * @param packageName\r\n-   *          Package to load or null to load all packages.\r\n-   * @param alias\r\n-   *          Alias of the package. Null or empty string to use no alias.\r\n-   */\r\n-  public void importPackageFromTypeSystem(String typesystem, String packageName, String alias) {\r\n-    TypeSystemDescription tsd = TypeSystemDescriptionFactory\r\n-            .createTypeSystemDescription(typesystem);\r\n-    try {\r\n-      tsd.resolveImports(getResourceManager());\r\n-    } catch (InvalidXMLException e) {\r\n-      throw new RuntimeException(\"Cannot resolve imports in \" + typesystem, e);\r\n-    }\r\n-\r\n-    for (TypeDescription td : tsd.getTypes()) {\r\n-      String qname = td.getName();\r\n-      if (packageName == null || (qname.startsWith(packageName)\r\n-              && qname.indexOf('.', packageName.length() + 1) == -1)) {\r\n-        // td is in packageName\r\n-        if (alias != null) {\r\n-          String shortName = alias + \".\" + qname.substring(qname.lastIndexOf('.') + 1);\r\n-          importTypeFromTypeSystem(typesystem, qname, shortName);\r\n-        } else {\r\n-          importTypeFromTypeSystem(typesystem, qname);\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Imports all the packages from the specified type system.\r\n-   *\r\n-   * @param typesystem\r\n-   *          Typesystem to load.\r\n-   * @param alias\r\n-   *          Alias for all the packages.\r\n-   */\r\n-  public void importAllPackagesFromTypeSystem(String typesystem, String alias) {\r\n-    importPackageFromTypeSystem(typesystem, null, alias);\r\n-  }\r\n-\r\n-  /**\r\n-   * Import all the types from a package that are available at runtime.\r\n-   *\r\n-   * @param packageName\r\n-   *          Package to load.\r\n-   * @param alias\r\n-   *          Alias of the package. Null or empty string to use no alias.\r\n-   */\r\n-  public void importPackage(String packageName, String alias) {\r\n-    List<String> aliases = packageImports.get(packageName);\r\n-    if (aliases == null) {\r\n-      aliases = new ArrayList<String>(1);\r\n-      packageImports.put(packageName, aliases);\r\n-    }\r\n-\r\n-    aliases.add(alias == null ? \"\" : alias);\r\n-  }\r\n-\r\n-  public RutaWordList getWordList(String list) {\r\n-    RutaWordList result = wordLists.get(list);\r\n-    UimaContext context = owner.getContext();\r\n-    Boolean dictRemoveWS = false;\r\n-    if (context != null) {\r\n-      dictRemoveWS = (Boolean) context.getConfigParameterValue(RutaEngine.PARAM_DICT_REMOVE_WS);\r\n-      if (dictRemoveWS == null) {\r\n-        dictRemoveWS = false;\r\n-      }\r\n-    }\r\n-    if (result == null) {\r\n-      if (list.endsWith(\"txt\") || list.endsWith(\"twl\") || list.endsWith(\"mtwl\")) {\r\n-        ResourceLoader resourceLoader = new RutaResourceLoader(getResourcePaths());\r\n-        Resource resource = resourceLoader.getResource(list);\r\n-        if (resource.exists()) {\r\n-          try {\r\n-            if (list.endsWith(\"mtwl\")) {\r\n-              wordLists.put(list, new MultiTreeWordList(resource));\r\n-            } else {\r\n-              wordLists.put(list, new TreeWordList(resource, dictRemoveWS));\r\n-            }\r\n-          } catch (IOException e) {\r\n-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n-                    \"Error reading word list\" + list, e);\r\n-          }\r\n-        } else {\r\n-          Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"Can't find \" + list + \"!\");\r\n-        }\r\n-      } else {\r\n-        try {\r\n-          RutaWordList rutaTable = (RutaWordList) context.getResourceObject(list);\r\n-          wordLists.put(list, rutaTable);\r\n-        } catch (ResourceAccessException e) {\r\n-          Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n-                  \"Can't find external resource table\" + list, e);\r\n-        }\r\n-      }\r\n-    }\r\n-\r\n-    return wordLists.get(list);\r\n-  }\r\n-\r\n-  public RutaTable getWordTable(String table) {\r\n-    RutaTable result = tables.get(table);\r\n-    if (result == null) {\r\n-      if (table.endsWith(\"csv\")) {\r\n-        ResourceLoader resourceLoader = new RutaResourceLoader(getResourcePaths());\r\n-        Resource resource = resourceLoader.getResource(table);\r\n-        if (resource.exists()) {\r\n-          try {\r\n-            tables.put(table, new CSVTable(resource));\r\n-          } catch (IOException e) {\r\n-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n-                    \"Error reading csv table \" + table, e);\r\n-          }\r\n-        } else {\r\n-          Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n-                  \"Can't find \" + table + \"!\");\r\n-        }\r\n-      } else {\r\n-        try {\r\n-          RutaTable rutaTable = (RutaTable) owner.getContext().getResourceObject(table);\r\n-          tables.put(table, rutaTable);\r\n-        } catch (ResourceAccessException e) {\r\n-          Logger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n-                  \"Can't find external resource table\" + table, e);\r\n-        }\r\n-      }\r\n-    }\r\n-\r\n-    return tables.get(table);\r\n-  }\r\n-\r\n-  private void addVariable(String name, Class<?> type, Class<?> generic) {\r\n-    variableTypes.put(name, type);\r\n-    if (generic != null) {\r\n-      variableGenericTypes.put(name, generic);\r\n-    }\r\n-    variableValues.put(name, getInitialValue(name, type));\r\n-  }\r\n-\r\n-  @SuppressWarnings(\"unchecked\")\r\n-  private Object getInitialValue(String name, Class<?> type) {\r\n-    Object init = initializedVariables.get(name);\r\n-    if (init != null) {\r\n-      if (init instanceof List) {\r\n-        ArrayList<Object> list = new ArrayList<Object>();\r\n-        list.addAll((Collection<? extends Object>) init);\r\n-        return list;\r\n-      }\r\n-      return init;\r\n-    }\r\n-    if (Integer.class.equals(type)) {\r\n-      return 0;\r\n-    } else if (Double.class.equals(type)) {\r\n-      return 0d;\r\n-    } else if (Float.class.equals(type)) {\r\n-      return 0f;\r\n-    } else if (String.class.equals(type)) {\r\n-      return \"\";\r\n-    } else if (Boolean.class.equals(type)) {\r\n-      return false;\r\n-    } else if (Type.class.equals(type)) {\r\n-      if (cas == null) {\r\n-        return annotationTypeDummy;\r\n-      } else {\r\n-        return cas.getAnnotationType();\r\n-      }\r\n-    } else if (List.class.equals(type)) {\r\n-      return new ArrayList<Object>();\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  public void addVariable(String name, String type) {\r\n-    addVariable(name, availableTypes.get(type), availableListTypes.get(type));\r\n-  }\r\n-\r\n-  public void removeVariable(String name) {\r\n-    variableTypes.remove(name);\r\n-    variableGenericTypes.remove(name);\r\n-    variableValues.remove(name);\r\n-  }\r\n-\r\n-  public boolean ownsVariable(String name) {\r\n-    return variableTypes.containsKey(name);\r\n-  }\r\n-\r\n-  public boolean ownsVariableOfType(String name, String type) {\r\n-    if (variableAliases.containsKey(name)) {\r\n-      name = variableAliases.get(name);\r\n-    }\r\n-    Class<?> varclass = variableTypes.get(name);\r\n-    Class<?> aclass = availableTypes.get(type);\r\n-    boolean list = true;\r\n-    if (aclass.equals(List.class)) {\r\n-      Class<?> vt = variableGenericTypes.get(name);\r\n-      Class<?> at = availableListTypes.get(type);\r\n-      list = vt != null && vt.equals(at);\r\n-    }\r\n-    return list && varclass != null && varclass.equals(aclass);\r\n-  }\r\n-\r\n-  public boolean isVariable(String name) {\r\n-    if (variableAliases.containsKey(name)) {\r\n-      name = variableAliases.get(name);\r\n-    }\r\n-    if (ownsVariable(name)) {\r\n-      return true;\r\n-    }\r\n-    if (owner != null && owner.getParent() != null) {\r\n-      return owner.getParent().getEnvironment().isVariable(name);\r\n-    }\r\n-    return false;\r\n-  }\r\n-\r\n-  public boolean isVariableOfType(String name, String type) {\r\n-    return ownsVariableOfType(name, type) || (owner.getParent() != null\r\n-            && owner.getParent().getEnvironment().isVariableOfType(name, type));\r\n-  }\r\n-\r\n-  public Class<?> getVariableType(String name) {\r\n-    if (variableAliases.containsKey(name)) {\r\n-      name = variableAliases.get(name);\r\n-    }\r\n-    Class<?> result = variableTypes.get(name);\r\n-    if (result != null) {\r\n-      return result;\r\n-    } else if (owner.getParent() != null) {\r\n-      return owner.getParent().getEnvironment().getVariableType(name);\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  public Class<?> getVariableGenericType(String name) {\r\n-    Class<?> result = variableGenericTypes.get(name);\r\n-    if (result != null) {\r\n-      return result;\r\n-    } else if (owner.getParent() != null) {\r\n-      return owner.getParent().getEnvironment().getVariableGenericType(name);\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  public <T> T getVariableValue(String name, Class<T> type) {\r\n-    if (variableAliases.containsKey(name)) {\r\n-      name = variableAliases.get(name);\r\n-    }\r\n-    boolean containsKey = variableValues.containsKey(name);\r\n-    Object result = variableValues.get(name);\r\n-\r\n-    if (result instanceof String && type.equals(Type.class)) {\r\n-      // \"cast\" string to type, because initial values were set when there was no cas/type system\r\n-      // yet\r\n-      String stringValue = (String) result;\r\n-      result = types.get(stringValue);\r\n-      if(result == null) {\r\n-        // try to resolve short names\r\n-        result = getType(stringValue);\r\n-      }\r\n-    }\r\n-\r\n-    if (containsKey && result == null) {\r\n-      // TODO find the problem with the null values!\r\n-      // this might now work for word lists in another env.\r\n-      Object initialValue = getInitialValue(name, type);\r\n-      if(initialValue instanceof Type) {\r\n-        return type.cast(initialValue);\r\n-      } else {\r\n-        throw new IllegalArgumentException(\"Variable \"+name+\" of type\" +type +\" is nto correctly initialized! It is not a Type!\");\r\n-      }\r\n-    }\r\n-    if (result == annotationTypeDummy) {\r\n-      return type.cast(cas.getAnnotationType());\r\n-    }\r\n-    if (result != null) {\r\n-      MatchContext context = new MatchContext(owner);\r\n-      if (RutaWordList.class.isAssignableFrom(type) && result instanceof WordListExpression) {\r\n-        WordListExpression wle = (WordListExpression) result;\r\n-        RutaWordList list = wle.getList(context);\r\n-        return type.cast(list);\r\n-      } else if (RutaTable.class.isAssignableFrom(type) && result instanceof WordTableExpression) {\r\n-        WordTableExpression wte = (WordTableExpression) result;\r\n-        RutaTable table = wte.getTable(context);\r\n-        return type.cast(table);\r\n-      } else {\r\n-        return type.cast(result);\r\n-      }\r\n-    } else if (owner.getParent() != null) {\r\n-      return owner.getParent().getEnvironment().getVariableValue(name, type);\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  public Object getVariableValue(String name) {\r\n-    return getVariableValue(name, Object.class);\r\n-  }\r\n-\r\n-  @SuppressWarnings(\"rawtypes\")\r\n-  public Object getLiteralValue(String var, Object value) {\r\n-    if (ownsVariable(var)) {\r\n-      MatchContext context = new MatchContext(owner);\r\n-      Class<?> clazz = variableTypes.get(var);\r\n-      if (value instanceof INumberExpression) {\r\n-        INumberExpression ne = (INumberExpression) value;\r\n-        if (clazz.equals(Integer.class)) {\r\n-          return ne.getIntegerValue(context, null);\r\n-        } else if (clazz.equals(Double.class)) {\r\n-          return ne.getDoubleValue(context, null);\r\n-        } else if (clazz.equals(Float.class)) {\r\n-          return ne.getFloatValue(context, null);\r\n-        } else if (clazz.equals(String.class)) {\r\n-          return ne.getStringValue(context, null);\r\n-        }\r\n-      } else if (clazz.equals(String.class) && value instanceof IStringExpression) {\r\n-        IStringExpression se = (IStringExpression) value;\r\n-        return se.getStringValue(context, null);\r\n-      } else if (clazz.equals(Boolean.class) && value instanceof IBooleanExpression) {\r\n-        IBooleanExpression be = (IBooleanExpression) value;\r\n-        return be.getBooleanValue(context, null);\r\n-      }\r\n-      if (clazz.equals(RutaWordList.class) && value instanceof LiteralWordListExpression) {\r\n-        return value;\r\n-      } else if (clazz.equals(RutaWordList.class) && value instanceof String) {\r\n-        return value;\r\n-      } else if (clazz.equals(RutaTable.class) && value instanceof LiteralWordTableExpression) {\r\n-        return value;\r\n-      } else if (clazz.equals(RutaTable.class) && value instanceof String) {\r\n-        return value;\r\n-      } else if (clazz.equals(List.class) && value instanceof ListExpression) {\r\n-        List list = getList((ListExpression) value);\r\n-        return list;\r\n-      } else if (clazz.equals(Type.class) && value instanceof CommonToken) {\r\n-        String typeName = ((CommonToken) value).getText();\r\n-        return typeName;\r\n-      } else if (clazz.equals(Type.class) && value instanceof SimpleTypeExpression) {\r\n-        String typeName = ((SimpleTypeExpression) value).getTypeString();\r\n-        return typeName;\r\n-      }\r\n-\r\n-      return null;\r\n-    } else {\r\n-      return owner.getParent().getEnvironment().getLiteralValue(var, value);\r\n-    }\r\n-  }\r\n-\r\n-  @SuppressWarnings(\"unchecked\")\r\n-  public void setInitialVariableValue(String var, Object value) {\r\n-    if (ownsVariable(var)) {\r\n-      if (value instanceof List) {\r\n-        List<Object> initValue = new ArrayList<Object>();\r\n-        initValue.addAll((Collection<? extends Object>) value);\r\n-        initializedVariables.put(var, initValue);\r\n-      } else {\r\n-        initializedVariables.put(var, value);\r\n-      }\r\n-      setVariableValue(var, value);\r\n-    } else if (owner.getParent() != null) {\r\n-      owner.getParent().getEnvironment().setInitialVariableValue(var, value);\r\n-    }\r\n-  }\r\n-\r\n-  public void setVariableValue(String name, Object value) {\r\n-    if (variableAliases.containsKey(name)) {\r\n-      name = variableAliases.get(name);\r\n-    }\r\n-    if (ownsVariable(name)) {\r\n-      Class<?> clazz = variableTypes.get(name);\r\n-      if (value == null) {\r\n-        value = getInitialValue(name, clazz);\r\n-      }\r\n-      variableValues.put(name, value);\r\n-    } else if (owner.getParent() != null) {\r\n-      owner.getParent().getEnvironment().setVariableValue(name, value);\r\n-    }\r\n-  }\r\n-\r\n-  @SuppressWarnings(\"rawtypes\")\r\n-  private List getList(ListExpression value) {\r\n-    if (value instanceof SimpleBooleanListExpression) {\r\n-      SimpleBooleanListExpression e = (SimpleBooleanListExpression) value;\r\n-      return e.getList();\r\n-    } else if (value instanceof SimpleNumberListExpression) {\r\n-      SimpleNumberListExpression e = (SimpleNumberListExpression) value;\r\n-      return e.getList();\r\n-    } else if (value instanceof SimpleStringListExpression) {\r\n-      SimpleStringListExpression e = (SimpleStringListExpression) value;\r\n-      return e.getList();\r\n-    } else if (value instanceof SimpleTypeListExpression) {\r\n-      SimpleTypeListExpression e = (SimpleTypeListExpression) value;\r\n-      return e.getList();\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  public void reset(CAS cas) {\r\n-    this.cas = cas;\r\n-    Set<Entry<String, Object>> entrySet = variableValues.entrySet();\r\n-    for (Entry<String, Object> entry : entrySet) {\r\n-      String key = entry.getKey();\r\n-      Object initialValue = getInitialValue(key, variableTypes.get(key));\r\n-      if (initialValue != null) {\r\n-        // not for word lists\r\n-        entry.setValue(initialValue);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public ResourceManager getResourceManager() {\r\n-    if (resourceManager != null) {\r\n-      return resourceManager;\r\n-    } else {\r\n-      RutaBlock parent = owner.getParent();\r\n-      if (parent != null) {\r\n-        return parent.getEnvironment().getResourceManager();\r\n-      }\r\n-    }\r\n-    // at least return default resource manager\r\n-    return UIMAFramework.newDefaultResourceManager();\r\n-  }\r\n-\r\n-  public void setResourceManager(ResourceManager resourceManager) {\r\n-    this.resourceManager = resourceManager;\r\n-  }\r\n-\r\n-  public void addMacroAction(String name, Map<String, String> def, Set<String> vars,\r\n-          List<AbstractRutaAction> actions) {\r\n-    macroActions.put(name,\r\n-            new ImmutableTriple<Map<String, String>, List<AbstractRutaAction>, Set<String>>(def,\r\n-                    actions, vars));\r\n-  }\r\n-\r\n-  public void addMacroCondition(String name, Map<String, String> def, Set<String> vars,\r\n-          List<AbstractRutaCondition> conditions) {\r\n-    macroConditions.put(name,\r\n-            new ImmutableTriple<Map<String, String>, List<AbstractRutaCondition>, Set<String>>(def,\r\n-                    conditions, vars));\r\n-  }\r\n-\r\n-  public boolean isMacroAction(String name) {\r\n-    return macroActions.keySet().contains(name);\r\n-  }\r\n-\r\n-  public boolean isMacroCondition(String name) {\r\n-    return macroConditions.keySet().contains(name);\r\n-  }\r\n-\r\n-  public Triple<Map<String, String>, List<AbstractRutaAction>, Set<String>> getMacroAction(\r\n-          String name) {\r\n-    return macroActions.get(name);\r\n-  }\r\n-\r\n-  public Triple<Map<String, String>, List<AbstractRutaCondition>, Set<String>> getMacroCondition(\r\n-          String name) {\r\n-    return macroConditions.get(name);\r\n-  }\r\n-\r\n-  public void addAliasVariable(String name, String var) {\r\n-    variableAliases.put(name, var);\r\n-  }\r\n-\r\n-  public void removeAliasVariable(String name) {\r\n-    variableAliases.remove(name);\r\n-  }\r\n-\r\n-  public String getVariableNameOfExpression(IRutaExpression expression) {\r\n-    String verbalize = verbalizer.verbalize(expression);\r\n-    return verbalize;\r\n-  }\r\n-\r\n-  public Map<String, Type> getTypes() {\r\n-    return types;\r\n-  }\r\n-\r\n-  public Set<String> getDeclaredAnnotationTypes() {\r\n-    return declaredAnnotationTypes;\r\n-  }\r\n-\r\n-  public Set<String> getTypesystems() {\r\n-    return typesystems;\r\n-  }\r\n-\r\n-  public Map<String, String> getNamespaces() {\r\n-    return namespaces;\r\n-  }\r\n+\t/**\r\n+\t * Mapping from ambiguous short type names to all their possible long type\r\n+\t * names.\r\n+\t */\r\n+\tprivate Map<String, Set<String>> ambiguousTypeAlias;\r\n+\r\n+\t/**\r\n+\t * Set of imported typesystems.\r\n+\t */\r\n+\tprivate Set<String> typesystems;\r\n+\r\n+\t/**\r\n+\t * Set of imported scripts.\r\n+\t */\r\n+\tprivate Set<String> scripts;\r\n+\r\n+\t/**\r\n+\t * An alias from a long to a short name.\r\n+\t */\r\n+\tprivate static class Alias {\r\n+\t\tfinal String longName;\r\n+\r\n+\t\tfinal String shortName;\r\n+\r\n+\t\tAlias(String longName, String shortName) {\r\n+\t\t\tthis.longName = longName;\r\n+\t\t\tthis.shortName = shortName;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Types that are imported in the environment. Keys are type system\r\n+\t * descriptors and values are aliased types.\r\n+\t */\r\n+\tprivate Map<String, List<Alias>> typeImports;\r\n+\r\n+\t/**\r\n+\t * Packages that are imported in the environment without a typesystem\r\n+\t * specification.\r\n+\t *\r\n+\t * Keys are package names and values are aliases. An empty string as alias\r\n+\t * means that all types from the package should be imported in the default\r\n+\t * namespace.\r\n+\t */\r\n+\tprivate Map<String, List<String>> packageImports;\r\n+\r\n+\t/**\r\n+\t * Set of types that are declared in the script.\r\n+\t */\r\n+\tprivate Set<String> declaredAnnotationTypes;\r\n+\r\n+\tprivate Map<String, Object> variableValues;\r\n+\r\n+\tprivate Map<String, Class<?>> variableTypes;\r\n+\r\n+\tprivate Map<String, Class<?>> availableTypes;\r\n+\r\n+\tprivate Map<String, Class<?>> variableGenericTypes;\r\n+\r\n+\tprivate Map<String, Class<?>> availableListTypes;\r\n+\r\n+\tprivate Map<String, Triple<Map<String, String>, List<AbstractRutaCondition>, Set<String>>> macroConditions;\r\n+\r\n+\tprivate Map<String, Triple<Map<String, String>, List<AbstractRutaAction>, Set<String>>> macroActions;\r\n+\r\n+\tprivate String[] resourcePaths = null;\r\n+\r\n+\tprivate CAS cas;\r\n+\r\n+\tprivate Map<String, Object> initializedVariables;\r\n+\r\n+\tprivate ResourceManager resourceManager;\r\n+\r\n+\tprivate Map<String, String> variableAliases;\r\n+\r\n+\tprivate RutaVerbalizer verbalizer = new RutaVerbalizer();\r\n+\r\n+\tpublic RutaEnvironment(RutaBlock owner) {\r\n+\t\tsuper();\r\n+\t\tthis.owner = owner;\r\n+\r\n+\t\ttypes = new HashMap<String, Type>();\r\n+\t\tnamespaces = new HashMap<String, String>();\r\n+\t\tambiguousTypeAlias = new HashMap<String, Set<String>>();\r\n+\t\ttypesystems = new HashSet<String>();\r\n+\t\tscripts = new HashSet<String>();\r\n+\t\ttypeImports = new HashMap<String, List<Alias>>();\r\n+\t\tpackageImports = new HashMap<String, List<String>>();\r\n+\t\tdeclaredAnnotationTypes = new HashSet<String>();\r\n+\t\twordLists = new HashMap<String, RutaWordList>();\r\n+\t\ttables = new HashMap<String, RutaTable>();\r\n+\t\tvariableValues = new HashMap<String, Object>();\r\n+\t\tvariableTypes = new HashMap<String, Class<?>>();\r\n+\t\tvariableGenericTypes = new HashMap<String, Class<?>>();\r\n+\t\tmacroConditions = new HashMap<>();\r\n+\t\tmacroActions = new HashMap<>();\r\n+\t\tavailableTypes = new HashMap<String, Class<?>>();\r\n+\t\tavailableTypes.put(RutaConstants.RUTA_VARIABLE_ANNOTATION, AnnotationFS.class);\r\n+\t\tavailableTypes.put(\"INT\", Integer.class);\r\n+\t\tavailableTypes.put(\"STRING\", String.class);\r\n+\t\tavailableTypes.put(\"DOUBLE\", Double.class);\r\n+\t\tavailableTypes.put(\"FLOAT\", Float.class);\r\n+\t\tavailableTypes.put(\"BOOLEAN\", Boolean.class);\r\n+\t\tavailableTypes.put(\"TYPE\", Type.class);\r\n+\t\tavailableTypes.put(\"CONDITION\", AbstractRutaCondition.class);\r\n+\t\tavailableTypes.put(\"ACTION\", AbstractRutaAction.class);\r\n+\t\tavailableTypes.put(\"WORDLIST\", RutaWordList.class);\r\n+\t\tavailableTypes.put(\"WORDTABLE\", RutaTable.class);\r\n+\t\tavailableTypes.put(\"ANNOTATIONLIST\", List.class);\r\n+\t\tavailableTypes.put(\"BOOLEANLIST\", List.class);\r\n+\t\tavailableTypes.put(\"INTLIST\", List.class);\r\n+\t\tavailableTypes.put(\"DOUBLELIST\", List.class);\r\n+\t\tavailableTypes.put(\"FLOATLIST\", List.class);\r\n+\t\tavailableTypes.put(\"STRINGLIST\", List.class);\r\n+\t\tavailableTypes.put(\"TYPELIST\", List.class);\r\n+\t\tavailableListTypes = new HashMap<String, Class<?>>();\r\n+\t\tavailableListTypes.put(\"ANNOTATIONLIST\", AnnotationFS.class);\r\n+\t\tavailableListTypes.put(\"BOOLEANLIST\", Boolean.class);\r\n+\t\tavailableListTypes.put(\"INTLIST\", Integer.class);\r\n+\t\tavailableListTypes.put(\"DOUBLELIST\", Double.class);\r\n+\t\tavailableListTypes.put(\"FLOATLIST\", Float.class);\r\n+\t\tavailableListTypes.put(\"STRINGLIST\", String.class);\r\n+\t\tavailableListTypes.put(\"TYPELIST\", Type.class);\r\n+\t\tresourcePaths = getResourcePaths();\r\n+\t\tinitializedVariables = new HashMap<String, Object>();\r\n+\t\tvariableAliases = new HashMap<>();\r\n+\r\n+\t\t// Always import BasicTypeSystem\r\n+\t\taddTypeSystem(\"org.apache.uima.ruta.engine.BasicTypeSystem\");\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import short type names.\r\n+\t *\r\n+\t * @param cas\r\n+\t *            Cas to initialize the types for.\r\n+\t * @param strictImport\r\n+\t *            Specify whether all types should be imported (false) or only\r\n+\t *            types\r\n+\t */\r\n+\tpublic void initializeTypes(CAS cas, boolean strictImport) {\r\n+\t\tthis.cas = cas;\r\n+\t\ttry {\r\n+\t\t\tif (strictImport) {\r\n+\t\t\t\timportDeclaredTypes(cas.getTypeSystem());\r\n+\t\t\t\timportDeclaredTypesystems(cas.getTypeSystem());\r\n+\t\t\t\timportTypeAliases(cas.getTypeSystem());\r\n+\t\t\t\timportPackageAliases(cas.getTypeSystem());\r\n+\t\t\t\timportDeclaredScripts(cas.getTypeSystem());\r\n+\t\t\t} else {\r\n+\t\t\t\t// import all types known to the cas\r\n+\t\t\t\timportAllTypes(cas.getTypeSystem());\r\n+\t\t\t\timportTypeAliases(cas.getTypeSystem());\r\n+\t\t\t\timportPackageAliases(cas.getTypeSystem());\r\n+\t\t\t}\r\n+\r\n+\t\t\t// \"Document\" can be resolved to \"uima.tcas.DocumentAnnotation\" or\r\n+\t\t\t// \"org.apache.uima.ruta.type.Document\",\r\n+\t\t\t// we force it to the former\r\n+\t\t\tambiguousTypeAlias.remove(DOCUMENT);\r\n+\t\t\tnamespaces.remove(DOCUMENT);\r\n+\t\t\tType documentType = cas.getTypeSystem().getType(UIMAConstants.TYPE_DOCUMENT);\r\n+\t\t\taddType(DOCUMENT, documentType);\r\n+\t\t\taddType(documentType.getShortName(), documentType);\r\n+\r\n+\t\t\tType annotationType = cas.getJCas().getCasType(org.apache.uima.jcas.tcas.Annotation.type);\r\n+\t\t\taddType(\"Annotation\", annotationType);\r\n+\t\t} catch (CASException e) {\r\n+\t\t\tUIMAFramework.getLogger(getClass()).log(SEVERE, \"Cannot initialize types.\", e);\r\n+\t\t} catch (InvalidXMLException e) {\r\n+\t\t\tUIMAFramework.getLogger(getClass()).log(SEVERE, \"Cannot initialize types.\", e);\r\n+\t\t}\r\n+\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Imports all types that are known to a type system.\r\n+\t *\r\n+\t * @param ts\r\n+\t *            Type system to import.\r\n+\t * @throws CASException\r\n+\t */\r\n+\tprivate void importAllTypes(TypeSystem ts) throws CASException {\r\n+\t\tType topType = ts.getTopType();\r\n+\t\tif (topType != null) {\r\n+\t\t\tList<Type> list = ts.getProperlySubsumedTypes(topType);\r\n+\t\t\tfor (Type type : list) {\r\n+\t\t\t\taddType(type);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all types that are declared by the script.\r\n+\t *\r\n+\t * @param casTS\r\n+\t *            Type system containing all known types.\r\n+\t * @throws InvalidXMLException\r\n+\t *             When import cannot be resolved.\r\n+\t */\r\n+\tprivate void importDeclaredTypes(TypeSystem casTS) throws InvalidXMLException {\r\n+\t\tfor (String name : declaredAnnotationTypes) {\r\n+\t\t\tType type = casTS.getType(name);\r\n+\t\t\tif (type != null) {\r\n+\t\t\t\taddType(type);\r\n+\t\t\t} else {\r\n+\t\t\t\tthrow new RuntimeException(\"Type '\" + name + \"' not found\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all typesystems that are imported in the script.\r\n+\t *\r\n+\t * @param casTS\r\n+\t *            Type system containing all known types.\r\n+\t * @throws InvalidXMLException\r\n+\t *             When import cannot be resolved.\r\n+\t */\r\n+\tprivate void importDeclaredTypesystems(TypeSystem casTS) throws InvalidXMLException {\r\n+\t\tString[] descriptors = typesystems.toArray(new String[typesystems.size()]);\r\n+\t\tTypeSystemDescription ts = TypeSystemDescriptionFactory.createTypeSystemDescription(descriptors);\r\n+\t\tts.resolveImports(resourceManager);\r\n+\t\tfor (TypeDescription td : ts.getTypes()) {\r\n+\t\t\tType type = casTS.getType(td.getName());\r\n+\t\t\tif (type != null) {\r\n+\t\t\t\taddType(type);\r\n+\t\t\t} else {\r\n+\t\t\t\tthrow new RuntimeException(\"Type '\" + td.getName() + \"' not found\");\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all already initialized types of imported scripts.\r\n+\t *\r\n+\t * @param casTS\r\n+\t *            Type system containing all known types.\r\n+\t * @throws InvalidXMLException\r\n+\t *             When import cannot be resolved.\r\n+\t */\r\n+\tprivate void importDeclaredScripts(TypeSystem casTS) throws InvalidXMLException {\r\n+\r\n+\t\tRutaModule script = owner.getScript();\r\n+\t\tfor (String eachImportedScript : scripts) {\r\n+\t\t\tRutaModule importedModule = script.getScript(eachImportedScript);\r\n+\t\t\tRutaEnvironment importedEnvironment = importedModule.getRootBlock().getEnvironment();\r\n+\t\t\tMap<String, Type> importedTypeMap = importedEnvironment.getTypes();\r\n+\t\t\tMap<String, String> importedNamespaces = importedEnvironment.getNamespaces();\r\n+\t\t\tSet<Entry<String, String>> entrySet = importedNamespaces.entrySet();\r\n+\t\t\tfor (Entry<String, String> entry : entrySet) {\r\n+\t\t\t\tif (!ownsType(entry.getValue()) && !StringUtils.equals(entry.getKey(), DOCUMENT)) {\r\n+\t\t\t\t\tType type = importedTypeMap.get(entry.getValue());\r\n+\t\t\t\t\taddType(entry.getKey(), type);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\t// TODO import also wordlists and variables?\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Imports all type aliases.\r\n+\t *\r\n+\t * @param casTS\r\n+\t *            Cas type system.\r\n+\t */\r\n+\tprivate void importTypeAliases(TypeSystem casTS) {\r\n+\t\tfor (List<Alias> aliases : typeImports.values()) {\r\n+\t\t\tfor (Alias alias : aliases) {\r\n+\t\t\t\tType type = casTS.getType(alias.longName);\r\n+\t\t\t\tif (type == null) {\r\n+\t\t\t\t\tthrow new RuntimeException(\"Type '\" + alias.longName + \"' not found\");\r\n+\t\t\t\t}\r\n+\t\t\t\taddType(alias.shortName, casTS.getType(alias.longName));\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all packages that are imported by the script.\r\n+\t *\r\n+\t * @param casTS\r\n+\t *            Type system containing all known types.\r\n+\t */\r\n+\tprivate void importPackageAliases(TypeSystem casTS) {\r\n+\t\tIterator<Type> iter = casTS.getTypeIterator();\r\n+\t\twhile (iter.hasNext()) {\r\n+\t\t\tType type = iter.next();\r\n+\t\t\tString name = type.getName();\r\n+\t\t\tString pkg = name.substring(0, Math.max(name.lastIndexOf('.'), 0));\r\n+\t\t\tList<String> aliases = packageImports.get(pkg);\r\n+\t\t\tif (aliases != null) {\r\n+\t\t\t\tfor (String alias : aliases) {\r\n+\t\t\t\t\tif (alias.isEmpty()) {\r\n+\t\t\t\t\t\taddType(type);\r\n+\t\t\t\t\t} else {\r\n+\t\t\t\t\t\taddType(alias + \".\" + type.getShortName(), type);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic String[] getResourcePaths() {\r\n+\t\tif (resourcePaths == null) {\r\n+\t\t\tRutaBlock parent = owner.getParent();\r\n+\t\t\tif (parent != null) {\r\n+\t\t\t\treturn parent.getEnvironment().getResourcePaths();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn resourcePaths;\r\n+\t}\r\n+\r\n+\tpublic void setResourcePaths(String[] resourcePaths) {\r\n+\t\tthis.resourcePaths = resourcePaths;\r\n+\t}\r\n+\r\n+\tpublic boolean ownsType(String match) {\r\n+\t\tmatch = expand(match);\r\n+\t\treturn types.keySet().contains(match);\r\n+\t}\r\n+\r\n+\tprivate String expand(String string) {\r\n+\t\tString complete = namespaces.get(string);\r\n+\t\tif (complete == null) {\r\n+\t\t\tif (!string.contains(\".\")) {\r\n+\t\t\t\tcomplete = namespaces.get(string);\r\n+\t\t\t\tif (complete == null) {\r\n+\t\t\t\t\tcomplete = string;\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\tcomplete = string;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn complete;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Resolves an annotation type.\r\n+\t *\r\n+\t * @param match\r\n+\t *            Annotation type to resolve.\r\n+\t * @return Resolved annotation type or null if match is unknown.\r\n+\t * @throws IllegalArgumentException\r\n+\t *             When {@code match} is ambiguous.\r\n+\t */\r\n+\tpublic Type getType(String match) {\r\n+\t\t// make sure that match is not ambiguous\r\n+\t\tSet<String> ambiguousTargets = ambiguousTypeAlias.get(match);\r\n+\t\tif (ambiguousTargets != null) {\r\n+\t\t\tStringBuilder message = new StringBuilder(match);\r\n+\t\t\tmessage.append(\" is ambiguous, use one of the following instead : \");\r\n+\t\t\tfor (String target : ambiguousTargets) {\r\n+\t\t\t\tmessage.append(target).append(' ');\r\n+\t\t\t}\r\n+\t\t\tthrow new IllegalArgumentException(message.toString());\r\n+\t\t}\r\n+\r\n+\t\t// try to resolve match\r\n+\t\tString expanded = expand(match);\r\n+\t\tType type = types.get(expanded);\r\n+\t\tif (type == null) {\r\n+\t\t\tRutaBlock parent = owner.getParent();\r\n+\t\t\tif (parent != null) {\r\n+\t\t\t\ttype = parent.getEnvironment().getType(match);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn type;\r\n+\t}\r\n+\r\n+\tpublic void addType(String string, Type type) {\r\n+\t\timportType(type.getName(), string);\r\n+\t\ttypes.put(type.getName(), type);\r\n+\t}\r\n+\r\n+\tpublic void addType(Type type) {\r\n+\t\taddType(type.getShortName(), type);\r\n+\t}\r\n+\r\n+\tpublic void declareType(String name) {\r\n+\t\tdeclaredAnnotationTypes.add(name);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Add a typesystem to the script.\r\n+\t *\r\n+\t * @param descriptor\r\n+\t *            Type system's descriptor path.\r\n+\t */\r\n+\tpublic void addTypeSystem(String descriptor) {\r\n+\t\ttypesystems.add(descriptor);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Add a script to the script.\r\n+\t *\r\n+\t * @param script\r\n+\t *            the script's full name.\r\n+\t */\r\n+\tpublic void addScript(String script) {\r\n+\t\tscripts.add(script);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import a type in the current namespace.\r\n+\t *\r\n+\t * @param longName\r\n+\t *            Complete type name.\r\n+\t * @param shortName\r\n+\t *            Short type name (without namespace).\r\n+\t */\r\n+\tprivate void importType(String longName, String shortName) {\r\n+\t\tSet<String> targets = ambiguousTypeAlias.get(shortName);\r\n+\t\tif (targets != null) {\r\n+\t\t\t// shortName is already ambiguous, add longName to its list of\r\n+\t\t\t// possible targets\r\n+\t\t\ttargets.add(longName);\r\n+\t\t} else {\r\n+\t\t\tString existing = namespaces.put(shortName, longName);\r\n+\r\n+\t\t\tif (existing != null && !existing.equals(longName)) {\r\n+\t\t\t\t// shortName can now be resolved to \"existing\" or \"longName\"\r\n+\t\t\t\ttargets = new HashSet<String>(2);\r\n+\t\t\t\ttargets.add(existing);\r\n+\t\t\t\ttargets.add(longName);\r\n+\r\n+\t\t\t\t// add existing mapping and longName to its list of possible\r\n+\t\t\t\t// targets\r\n+\t\t\t\tambiguousTypeAlias.put(shortName, targets);\r\n+\r\n+\t\t\t\t// remove shortName from the namespace because it is ambiguous\r\n+\t\t\t\tnamespaces.remove(shortName);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import a type from a type system.\r\n+\t *\r\n+\t * @param typesystem\r\n+\t *            Typesystem from which to import the type or null.\r\n+\t * @param longName\r\n+\t *            Type to import.\r\n+\t * @param shortName\r\n+\t *            Short name to use for this type.\r\n+\t */\r\n+\tpublic void importTypeFromTypeSystem(String typesystem, String longName, String shortName) {\r\n+\t\tString key = typesystem != null ? typesystem : \"\";\r\n+\t\tList<Alias> aliases = typeImports.get(key);\r\n+\r\n+\t\tif (aliases == null) {\r\n+\t\t\taliases = new ArrayList<Alias>();\r\n+\t\t\ttypeImports.put(key, aliases);\r\n+\t\t}\r\n+\r\n+\t\taliases.add(new Alias(longName, shortName));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import a type from a type system.\r\n+\t *\r\n+\t * The type is aliased by its unqualified name.\r\n+\t *\r\n+\t * @param typesystem\r\n+\t *            Typesystem from which to import the type or null.\r\n+\t * @param longName\r\n+\t *            Type to import.\r\n+\t */\r\n+\tpublic void importTypeFromTypeSystem(String typesystem, String longName) {\r\n+\t\timportTypeFromTypeSystem(typesystem, longName, longName.substring(longName.lastIndexOf('.') + 1));\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all the types from a package.\r\n+\t *\r\n+\t * @param typesystem\r\n+\t *            Type system describing the package to load.\r\n+\t * @param packageName\r\n+\t *            Package to load or null to load all packages.\r\n+\t * @param alias\r\n+\t *            Alias of the package. Null or empty string to use no alias.\r\n+\t */\r\n+\tpublic void importPackageFromTypeSystem(String typesystem, String packageName, String alias) {\r\n+\t\tTypeSystemDescription tsd = TypeSystemDescriptionFactory.createTypeSystemDescription(typesystem);\r\n+\t\ttry {\r\n+\t\t\ttsd.resolveImports(getResourceManager());\r\n+\t\t} catch (InvalidXMLException e) {\r\n+\t\t\tthrow new RuntimeException(\"Cannot resolve imports in \" + typesystem, e);\r\n+\t\t}\r\n+\r\n+\t\tfor (TypeDescription td : tsd.getTypes()) {\r\n+\t\t\tString qname = td.getName();\r\n+\t\t\tif (packageName == null\r\n+\t\t\t\t\t|| (qname.startsWith(packageName) && qname.indexOf('.', packageName.length() + 1) == -1)) {\r\n+\t\t\t\t// td is in packageName\r\n+\t\t\t\tif (alias != null) {\r\n+\t\t\t\t\tString shortName = alias + \".\" + qname.substring(qname.lastIndexOf('.') + 1);\r\n+\t\t\t\t\timportTypeFromTypeSystem(typesystem, qname, shortName);\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\timportTypeFromTypeSystem(typesystem, qname);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Imports all the packages from the specified type system.\r\n+\t *\r\n+\t * @param typesystem\r\n+\t *            Typesystem to load.\r\n+\t * @param alias\r\n+\t *            Alias for all the packages.\r\n+\t */\r\n+\tpublic void importAllPackagesFromTypeSystem(String typesystem, String alias) {\r\n+\t\timportPackageFromTypeSystem(typesystem, null, alias);\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Import all the types from a package that are available at runtime.\r\n+\t *\r\n+\t * @param packageName\r\n+\t *            Package to load.\r\n+\t * @param alias\r\n+\t *            Alias of the package. Null or empty string to use no alias.\r\n+\t */\r\n+\tpublic void importPackage(String packageName, String alias) {\r\n+\t\tList<String> aliases = packageImports.get(packageName);\r\n+\t\tif (aliases == null) {\r\n+\t\t\taliases = new ArrayList<String>(1);\r\n+\t\t\tpackageImports.put(packageName, aliases);\r\n+\t\t}\r\n+\r\n+\t\taliases.add(alias == null ? \"\" : alias);\r\n+\t}\r\n+\r\n+\tpublic RutaWordList getWordList(String list) {\r\n+\t\tRutaWordList result = wordLists.get(list);\r\n+\t\tUimaContext context = owner.getContext();\r\n+\t\tBoolean dictRemoveWS = false;\r\n+\t\tif (context != null) {\r\n+\t\t\tdictRemoveWS = (Boolean) context.getConfigParameterValue(RutaEngine.PARAM_DICT_REMOVE_WS);\r\n+\t\t\tif (dictRemoveWS == null) {\r\n+\t\t\t\tdictRemoveWS = false;\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (result == null) {\r\n+\t\t\tif (list.endsWith(\"txt\") || list.endsWith(\"twl\") || list.endsWith(\"mtwl\")) {\r\n+\t\t\t\tResourceLoader resourceLoader = new RutaResourceLoader(getResourcePaths());\r\n+\t\t\t\tResource resource = resourceLoader.getResource(list);\r\n+\t\t\t\tif (resource.exists()) {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\tif (list.endsWith(\"mtwl\")) {\r\n+\t\t\t\t\t\t\twordLists.put(list, new MultiTreeWordList(resource));\r\n+\t\t\t\t\t\t} else {\r\n+\t\t\t\t\t\t\twordLists.put(list, new TreeWordList(resource, dictRemoveWS));\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"Error reading word list\" + list,\r\n+\t\t\t\t\t\t\t\te);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"Can't find \" + list + \"!\");\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tRutaWordList rutaTable = (RutaWordList) context.getResourceObject(list);\r\n+\t\t\t\t\twordLists.put(list, rutaTable);\r\n+\t\t\t\t} catch (ResourceAccessException e) {\r\n+\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n+\t\t\t\t\t\t\t\"Can't find external resource table\" + list, e);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn wordLists.get(list);\r\n+\t}\r\n+\r\n+\tpublic RutaTable getWordTable(String table) {\r\n+\t\tRutaTable result = tables.get(table);\r\n+\t\tif (result == null) {\r\n+\t\t\tif (table.endsWith(\"csv\")) {\r\n+\t\t\t\tResourceLoader resourceLoader = new RutaResourceLoader(getResourcePaths());\r\n+\t\t\t\tResource resource = resourceLoader.getResource(table);\r\n+\t\t\t\tif (resource.exists()) {\r\n+\t\t\t\t\ttry {\r\n+\t\t\t\t\t\ttables.put(table, new CSVTable(resource));\r\n+\t\t\t\t\t} catch (IOException e) {\r\n+\t\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n+\t\t\t\t\t\t\t\t\"Error reading csv table \" + table, e);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE, \"Can't find \" + table + \"!\");\r\n+\t\t\t\t}\r\n+\t\t\t} else {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\tRutaTable rutaTable = (RutaTable) owner.getContext().getResourceObject(table);\r\n+\t\t\t\t\ttables.put(table, rutaTable);\r\n+\t\t\t\t} catch (ResourceAccessException e) {\r\n+\t\t\t\t\tLogger.getLogger(this.getClass().getName()).log(Level.SEVERE,\r\n+\t\t\t\t\t\t\t\"Can't find external resource table\" + table, e);\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\treturn tables.get(table);\r\n+\t}\r\n+\r\n+\tprivate void addVariable(String name, Class<?> type, Class<?> generic) {\r\n+\t\tvariableTypes.put(name, type);\r\n+\t\tif (generic != null) {\r\n+\t\t\tvariableGenericTypes.put(name, generic);\r\n+\t\t}\r\n+\t\tvariableValues.put(name, getInitialValue(name, type));\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tprivate Object getInitialValue(String name, Class<?> type) {\r\n+\t\tObject init = initializedVariables.get(name);\r\n+\t\tif (init != null) {\r\n+\t\t\tif (init instanceof List) {\r\n+\t\t\t\tArrayList<Object> list = new ArrayList<Object>();\r\n+\t\t\t\tlist.addAll((Collection<? extends Object>) init);\r\n+\t\t\t\treturn list;\r\n+\t\t\t}\r\n+\t\t\treturn init;\r\n+\t\t}\r\n+\t\tif (Integer.class.equals(type)) {\r\n+\t\t\treturn 0;\r\n+\t\t} else if (Double.class.equals(type)) {\r\n+\t\t\treturn 0d;\r\n+\t\t} else if (Float.class.equals(type)) {\r\n+\t\t\treturn 0f;\r\n+\t\t} else if (String.class.equals(type)) {\r\n+\t\t\treturn \"\";\r\n+\t\t} else if (Boolean.class.equals(type)) {\r\n+\t\t\treturn false;\r\n+\t\t} else if (Type.class.equals(type)) {\r\n+\t\t\tif (cas == null) {\r\n+\t\t\t\treturn annotationTypeDummy;\r\n+\t\t\t} else {\r\n+\t\t\t\treturn cas.getAnnotationType();\r\n+\t\t\t}\r\n+\t\t} else if (List.class.equals(type)) {\r\n+\t\t\treturn new ArrayList<Object>();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void addVariable(String name, String type) {\r\n+\t\taddVariable(name, availableTypes.get(type), availableListTypes.get(type));\r\n+\t}\r\n+\r\n+\tpublic void removeVariable(String name) {\r\n+\t\tvariableTypes.remove(name);\r\n+\t\tvariableGenericTypes.remove(name);\r\n+\t\tvariableValues.remove(name);\r\n+\t}\r\n+\r\n+\tpublic boolean ownsVariable(String name) {\r\n+\t\treturn variableTypes.containsKey(name);\r\n+\t}\r\n+\r\n+\tpublic boolean ownsVariableOfType(String name, String type) {\r\n+\t\tif (variableAliases.containsKey(name)) {\r\n+\t\t\tname = variableAliases.get(name);\r\n+\t\t}\r\n+\t\tClass<?> varclass = variableTypes.get(name);\r\n+\t\tClass<?> aclass = availableTypes.get(type);\r\n+\t\tboolean list = true;\r\n+\t\tif (aclass.equals(List.class)) {\r\n+\t\t\tClass<?> vt = variableGenericTypes.get(name);\r\n+\t\t\tClass<?> at = availableListTypes.get(type);\r\n+\t\t\tlist = vt != null && vt.equals(at);\r\n+\t\t}\r\n+\t\treturn list && varclass != null && varclass.equals(aclass);\r\n+\t}\r\n+\r\n+\tpublic boolean isVariable(String name) {\r\n+\t\tif (variableAliases.containsKey(name)) {\r\n+\t\t\tname = variableAliases.get(name);\r\n+\t\t}\r\n+\t\tif (ownsVariable(name)) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (owner != null && owner.getParent() != null) {\r\n+\t\t\treturn owner.getParent().getEnvironment().isVariable(name);\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\tpublic boolean isVariableOfType(String name, String type) {\r\n+\t\treturn ownsVariableOfType(name, type)\r\n+\t\t\t\t|| (owner.getParent() != null && owner.getParent().getEnvironment().isVariableOfType(name, type));\r\n+\t}\r\n+\r\n+\tpublic Class<?> getVariableType(String name) {\r\n+\t\tif (variableAliases.containsKey(name)) {\r\n+\t\t\tname = variableAliases.get(name);\r\n+\t\t}\r\n+\t\tClass<?> result = variableTypes.get(name);\r\n+\t\tif (result != null) {\r\n+\t\t\treturn result;\r\n+\t\t} else if (owner.getParent() != null) {\r\n+\t\t\treturn owner.getParent().getEnvironment().getVariableType(name);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Class<?> getVariableGenericType(String name) {\r\n+\t\tClass<?> result = variableGenericTypes.get(name);\r\n+\t\tif (result != null) {\r\n+\t\t\treturn result;\r\n+\t\t} else if (owner.getParent() != null) {\r\n+\t\t\treturn owner.getParent().getEnvironment().getVariableGenericType(name);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic <T> T getVariableValue(String name, Class<T> type) {\r\n+\t\tif (variableAliases.containsKey(name)) {\r\n+\t\t\tname = variableAliases.get(name);\r\n+\t\t}\r\n+\t\tboolean containsKey = variableValues.containsKey(name);\r\n+\t\tObject result = variableValues.get(name);\r\n+\r\n+\t\tif (result instanceof String && type.equals(Type.class)) {\r\n+\t\t\t// \"cast\" string to type, because initial values were set when there\r\n+\t\t\t// was no cas/type system\r\n+\t\t\t// yet\r\n+\t\t\tString stringValue = (String) result;\r\n+\t\t\tresult = types.get(stringValue);\r\n+\t\t\tif (result == null) {\r\n+\t\t\t\t// try to resolve short names\r\n+\t\t\t\tresult = getType(stringValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n+\t\tif (containsKey && result == null) {\r\n+\t\t\t// TODO find the problem with the null values!\r\n+\t\t\t// this might now work for word lists in another env.\r\n+\t\t\tObject initialValue = getInitialValue(name, type);\r\n+\t\t\tif (initialValue instanceof Type) {\r\n+\t\t\t\treturn type.cast(initialValue);\r\n+\t\t\t} else if (initialValue != null){\r\n+\t\t\t\tthrow new IllegalArgumentException(\"Variable \" + name + \" of type \" + type\r\n+\t\t\t\t\t\t+ \" is not correctly initialized! It is not a Type, but \" + initialValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tif (result == annotationTypeDummy) {\r\n+\t\t\treturn type.cast(cas.getAnnotationType());\r\n+\t\t}\r\n+\t\tif (result != null) {\r\n+\t\t\tMatchContext context = new MatchContext(owner);\r\n+\t\t\tif (RutaWordList.class.isAssignableFrom(type) && result instanceof WordListExpression) {\r\n+\t\t\t\tWordListExpression wle = (WordListExpression) result;\r\n+\t\t\t\tRutaWordList list = wle.getList(context);\r\n+\t\t\t\treturn type.cast(list);\r\n+\t\t\t} else if (RutaTable.class.isAssignableFrom(type) && result instanceof WordTableExpression) {\r\n+\t\t\t\tWordTableExpression wte = (WordTableExpression) result;\r\n+\t\t\t\tRutaTable table = wte.getTable(context);\r\n+\t\t\t\treturn type.cast(table);\r\n+\t\t\t} else {\r\n+\t\t\t\treturn type.cast(result);\r\n+\t\t\t}\r\n+\t\t} else if (owner.getParent() != null) {\r\n+\t\t\treturn owner.getParent().getEnvironment().getVariableValue(name, type);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic Object getVariableValue(String name) {\r\n+\t\treturn getVariableValue(name, Object.class);\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"rawtypes\")\r\n+\tpublic Object getLiteralValue(String var, Object value) {\r\n+\t\tif (ownsVariable(var)) {\r\n+\t\t\tMatchContext context = new MatchContext(owner);\r\n+\t\t\tClass<?> clazz = variableTypes.get(var);\r\n+\t\t\tif (value instanceof INumberExpression) {\r\n+\t\t\t\tINumberExpression ne = (INumberExpression) value;\r\n+\t\t\t\tif (clazz.equals(Integer.class)) {\r\n+\t\t\t\t\treturn ne.getIntegerValue(context, null);\r\n+\t\t\t\t} else if (clazz.equals(Double.class)) {\r\n+\t\t\t\t\treturn ne.getDoubleValue(context, null);\r\n+\t\t\t\t} else if (clazz.equals(Float.class)) {\r\n+\t\t\t\t\treturn ne.getFloatValue(context, null);\r\n+\t\t\t\t} else if (clazz.equals(String.class)) {\r\n+\t\t\t\t\treturn ne.getStringValue(context, null);\r\n+\t\t\t\t}\r\n+\t\t\t} else if (clazz.equals(String.class) && value instanceof IStringExpression) {\r\n+\t\t\t\tIStringExpression se = (IStringExpression) value;\r\n+\t\t\t\treturn se.getStringValue(context, null);\r\n+\t\t\t} else if (clazz.equals(Boolean.class) && value instanceof IBooleanExpression) {\r\n+\t\t\t\tIBooleanExpression be = (IBooleanExpression) value;\r\n+\t\t\t\treturn be.getBooleanValue(context, null);\r\n+\t\t\t}\r\n+\t\t\tif (clazz.equals(RutaWordList.class) && value instanceof LiteralWordListExpression) {\r\n+\t\t\t\treturn value;\r\n+\t\t\t} else if (clazz.equals(RutaWordList.class) && value instanceof String) {\r\n+\t\t\t\treturn value;\r\n+\t\t\t} else if (clazz.equals(RutaTable.class) && value instanceof LiteralWordTableExpression) {\r\n+\t\t\t\treturn value;\r\n+\t\t\t} else if (clazz.equals(RutaTable.class) && value instanceof String) {\r\n+\t\t\t\treturn value;\r\n+\t\t\t} else if (clazz.equals(List.class) && value instanceof ListExpression) {\r\n+\t\t\t\tList list = getList((ListExpression) value);\r\n+\t\t\t\treturn list;\r\n+\t\t\t} else if (clazz.equals(Type.class) && value instanceof CommonToken) {\r\n+\t\t\t\tString typeName = ((CommonToken) value).getText();\r\n+\t\t\t\treturn typeName;\r\n+\t\t\t} else if (clazz.equals(Type.class) && value instanceof SimpleTypeExpression) {\r\n+\t\t\t\tString typeName = ((SimpleTypeExpression) value).getTypeString();\r\n+\t\t\t\treturn typeName;\r\n+\t\t\t}\r\n+\r\n+\t\t\treturn null;\r\n+\t\t} else {\r\n+\t\t\treturn owner.getParent().getEnvironment().getLiteralValue(var, value);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tpublic void setInitialVariableValue(String var, Object value) {\r\n+\t\tif (ownsVariable(var)) {\r\n+\t\t\tif (value instanceof List) {\r\n+\t\t\t\tList<Object> initValue = new ArrayList<Object>();\r\n+\t\t\t\tinitValue.addAll((Collection<? extends Object>) value);\r\n+\t\t\t\tinitializedVariables.put(var, initValue);\r\n+\t\t\t} else {\r\n+\t\t\t\tinitializedVariables.put(var, value);\r\n+\t\t\t}\r\n+\t\t\tsetVariableValue(var, value);\r\n+\t\t} else if (owner.getParent() != null) {\r\n+\t\t\towner.getParent().getEnvironment().setInitialVariableValue(var, value);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic void setVariableValue(String name, Object value) {\r\n+\t\tif (variableAliases.containsKey(name)) {\r\n+\t\t\tname = variableAliases.get(name);\r\n+\t\t}\r\n+\t\tif (ownsVariable(name)) {\r\n+\t\t\tClass<?> clazz = variableTypes.get(name);\r\n+\t\t\tif (value == null) {\r\n+\t\t\t\tvalue = getInitialValue(name, clazz);\r\n+\t\t\t}\r\n+\t\t\tvariableValues.put(name, value);\r\n+\t\t} else if (owner.getParent() != null) {\r\n+\t\t\towner.getParent().getEnvironment().setVariableValue(name, value);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"rawtypes\")\r\n+\tprivate List getList(ListExpression value) {\r\n+\t\tif (value instanceof SimpleBooleanListExpression) {\r\n+\t\t\tSimpleBooleanListExpression e = (SimpleBooleanListExpression) value;\r\n+\t\t\treturn e.getList();\r\n+\t\t} else if (value instanceof SimpleNumberListExpression) {\r\n+\t\t\tSimpleNumberListExpression e = (SimpleNumberListExpression) value;\r\n+\t\t\treturn e.getList();\r\n+\t\t} else if (value instanceof SimpleStringListExpression) {\r\n+\t\t\tSimpleStringListExpression e = (SimpleStringListExpression) value;\r\n+\t\t\treturn e.getList();\r\n+\t\t} else if (value instanceof SimpleTypeListExpression) {\r\n+\t\t\tSimpleTypeListExpression e = (SimpleTypeListExpression) value;\r\n+\t\t\treturn e.getList();\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\tpublic void reset(CAS cas) {\r\n+\t\tthis.cas = cas;\r\n+\t\tSet<Entry<String, Object>> entrySet = variableValues.entrySet();\r\n+\t\tfor (Entry<String, Object> entry : entrySet) {\r\n+\t\t\tString key = entry.getKey();\r\n+\t\t\tObject initialValue = getInitialValue(key, variableTypes.get(key));\r\n+\t\t\tif (initialValue != null) {\r\n+\t\t\t\t// not for word lists\r\n+\t\t\t\tentry.setValue(initialValue);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic ResourceManager getResourceManager() {\r\n+\t\tif (resourceManager != null) {\r\n+\t\t\treturn resourceManager;\r\n+\t\t} else {\r\n+\t\t\tRutaBlock parent = owner.getParent();\r\n+\t\t\tif (parent != null) {\r\n+\t\t\t\treturn parent.getEnvironment().getResourceManager();\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t// at least return default resource manager\r\n+\t\treturn UIMAFramework.newDefaultResourceManager();\r\n+\t}\r\n+\r\n+\tpublic void setResourceManager(ResourceManager resourceManager) {\r\n+\t\tthis.resourceManager = resourceManager;\r\n+\t}\r\n+\r\n+\tpublic void addMacroAction(String name, Map<String, String> def, Set<String> vars,\r\n+\t\t\tList<AbstractRutaAction> actions) {\r\n+\t\tmacroActions.put(name,\r\n+\t\t\t\tnew ImmutableTriple<Map<String, String>, List<AbstractRutaAction>, Set<String>>(def, actions, vars));\r\n+\t}\r\n+\r\n+\tpublic void addMacroCondition(String name, Map<String, String> def, Set<String> vars,\r\n+\t\t\tList<AbstractRutaCondition> conditions) {\r\n+\t\tmacroConditions.put(name, new ImmutableTriple<Map<String, String>, List<AbstractRutaCondition>, Set<String>>(\r\n+\t\t\t\tdef, conditions, vars));\r\n+\t}\r\n+\r\n+\tpublic boolean isMacroAction(String name) {\r\n+\t\treturn macroActions.keySet().contains(name);\r\n+\t}\r\n+\r\n+\tpublic boolean isMacroCondition(String name) {\r\n+\t\treturn macroConditions.keySet().contains(name);\r\n+\t}\r\n+\r\n+\tpublic Triple<Map<String, String>, List<AbstractRutaAction>, Set<String>> getMacroAction(String name) {\r\n+\t\treturn macroActions.get(name);\r\n+\t}\r\n+\r\n+\tpublic Triple<Map<String, String>, List<AbstractRutaCondition>, Set<String>> getMacroCondition(String name) {\r\n+\t\treturn macroConditions.get(name);\r\n+\t}\r\n+\r\n+\tpublic void addAliasVariable(String name, String var) {\r\n+\t\tvariableAliases.put(name, var);\r\n+\t}\r\n+\r\n+\tpublic void removeAliasVariable(String name) {\r\n+\t\tvariableAliases.remove(name);\r\n+\t}\r\n+\r\n+\tpublic String getVariableNameOfExpression(IRutaExpression expression) {\r\n+\t\tString verbalize = verbalizer.verbalize(expression);\r\n+\t\treturn verbalize;\r\n+\t}\r\n+\r\n+\tpublic Map<String, Type> getTypes() {\r\n+\t\treturn types;\r\n+\t}\r\n+\r\n+\tpublic Set<String> getDeclaredAnnotationTypes() {\r\n+\t\treturn declaredAnnotationTypes;\r\n+\t}\r\n+\r\n+\tpublic Set<String> getTypesystems() {\r\n+\t\treturn typesystems;\r\n+\t}\r\n+\r\n+\tpublic Map<String, String> getNamespaces() {\r\n+\t\treturn namespaces;\r\n+\t}\r\n \r\n }\r",
                "deletions": 967
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "[UIMA-3254] NPE if script cannot be found\n- Generate an interna FileNotFoundException in loadScriptIS\n- This is cought by initializeScript creating its own FileNotFoundException\n- Changed collectionToString to return \"\" when passed null instead of throwing another NPE\n- Added missing @Override annotations\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1521087 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/65d892aaa73f4272d367df0239b107378e3fe5aa",
        "parent": "https://github.com/apache/uima-ruta/commit/c45d665c6cda22137e908e0458479e76520cca86",
        "bug_id": "uima-ruta_21",
        "file": [
            {
                "sha": "3a93618859b04f8efb9bbd52d814969b6f0a22c2",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/65d892aaa73f4272d367df0239b107378e3fe5aa/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/65d892aaa73f4272d367df0239b107378e3fe5aa/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/engine/RutaEngine.java?ref=65d892aaa73f4272d367df0239b107378e3fe5aa",
                "patch": "@@ -615,11 +615,11 @@ private void initializeScript(String viewName) throws AnalysisEngineProcessExcep\n       } catch (IOException e) {\r\n         throw new AnalysisEngineProcessException(new FileNotFoundException(\"Script [\" + mainScript\r\n                 + \"] cannot be found at [\" + collectionToString(scriptPaths)\r\n-                + \"] with extension .ruta\"));\r\n+                + \"] or classpath with extension .ruta\"));\r\n       } catch (RecognitionException e) {\r\n         throw new AnalysisEngineProcessException(new FileNotFoundException(\"Script [\" + mainScript\r\n                 + \"] cannot be found at [\" + collectionToString(scriptPaths)\r\n-                + \"] with extension .ruta\"));\r\n+                + \"] or classpath  with extension .ruta\"));\r\n       }\r\n     } else {\r\n       try {\r\n@@ -876,6 +876,9 @@ private RutaModule loadScript(String scriptLocation) throws IOException, Recogni\n \r\n   private RutaModule loadScriptIS(String scriptLocation) throws IOException, RecognitionException {\r\n     InputStream scriptInputStream = getClass().getClassLoader().getResourceAsStream(scriptLocation);\r\n+    if (scriptInputStream == null) {\r\n+            throw new FileNotFoundException(\"No script found in location [\" + scriptLocation + \"]\");\r\n+    }\r\n     CharStream st = new ANTLRInputStream(scriptInputStream, scriptEncoding);\r\n     RutaLexer lexer = new RutaLexer(st);\r\n     CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n@@ -914,9 +917,15 @@ private String collectionToString(Collection<?> collection) {\n   }\r\n \r\n   private String collectionToString(Object[] collection) {\r\n-    return collectionToString(Arrays.asList(collection));\r\n+    if (collection == null) {\r\n+      return \"\";\r\n+    }\r\n+    else {\r\n+      return collectionToString(Arrays.asList(collection));\r\n+    }\r\n   }\r\n \r\n+  @Override\r\n   public void batchProcessComplete() throws AnalysisEngineProcessException {\r\n     super.batchProcessComplete();\r\n     Collection<AnalysisEngine> values = script.getEngines().values();\r\n@@ -925,6 +934,7 @@ public void batchProcessComplete() throws AnalysisEngineProcessException {\n     }\r\n   }\r\n \r\n+  @Override\r\n   public void collectionProcessComplete() throws AnalysisEngineProcessException {\r\n     super.collectionProcessComplete();\r\n     Collection<AnalysisEngine> values = script.getEngines().values();\r",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4438 - avoid NPE for missing project\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1683738 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/c86a28e0042ed21275ff4e5b14a7d92a2c66b9b0",
        "parent": "https://github.com/apache/uima-ruta/commit/615657bcae81ff995e3f849a0f8e1aa2da574042",
        "bug_id": "uima-ruta_22",
        "file": [
            {
                "sha": "934856fdaf85afcc7738d679adbc4fb019313ba1",
                "filename": "ruta-ep-ide/src/main/java/org/apache/uima/ruta/ide/core/builder/RutaProjectUtils.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c86a28e0042ed21275ff4e5b14a7d92a2c66b9b0/ruta-ep-ide/src/main/java/org/apache/uima/ruta/ide/core/builder/RutaProjectUtils.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c86a28e0042ed21275ff4e5b14a7d92a2c66b9b0/ruta-ep-ide/src/main/java/org/apache/uima/ruta/ide/core/builder/RutaProjectUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide/src/main/java/org/apache/uima/ruta/ide/core/builder/RutaProjectUtils.java?ref=c86a28e0042ed21275ff4e5b14a7d92a2c66b9b0",
                "patch": "@@ -534,6 +534,9 @@ public static IProject getProject(IPath path) {\n \r\n   private static void extendClasspathWithProject(Collection<String> result, IProject project,\r\n           Collection<IProject> visited) throws CoreException, JavaModelException {\r\n+    if(project == null) {\r\n+      return;\r\n+    }\r\n     IProjectNature rutaNature = project.getNature(RutaNature.NATURE_ID);\r\n     if (rutaNature != null) {\r\n       IScriptProject sp = DLTKCore.create(project);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4317\n- avoid NPE in semantic lookahead\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1676774 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/732fe376d414b6013f7ed491e66595a3851f3f3a",
        "parent": "https://github.com/apache/uima-ruta/commit/139c7448d30bf828baed2ec921573d718bf508dc",
        "bug_id": "uima-ruta_23",
        "file": [
            {
                "sha": "d5782bab9555ef1428c8fa925b3bf9d7db521fd5",
                "filename": "ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "blob_url": "https://github.com/apache/uima-ruta/blob/732fe376d414b6013f7ed491e66595a3851f3f3a/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "raw_url": "https://github.com/apache/uima-ruta/raw/732fe376d414b6013f7ed491e66595a3851f3f3a/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g?ref=732fe376d414b6013f7ed491e66595a3851f3f3a",
                "patch": "@@ -745,7 +745,7 @@ options {\n \tSEMI\r\n \t|\r\n \t{stmt = factory.createRule(elements, $blockDeclaration::env);}\r\n-\telements = ruleElementsRoot[((RutaRule)stmt).getRoot()] SEMI \r\n+\telements = ruleElementsRoot[stmt == null? null:((RutaRule)stmt).getRoot()] SEMI \r\n \t{if(elements != null){((RutaRule)stmt).setRuleElements(elements);} else {}}\r\n \t\r\n \t\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4287\n- avoid NPE for missing input dir\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1675645 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/e49518f38856432997d980f1e5d59670fa10cac5",
        "parent": "https://github.com/apache/uima-ruta/commit/ec974cf904baf79c3e625b668971d32f6aa9970f",
        "bug_id": "uima-ruta_24",
        "file": [
            {
                "sha": "a1e3ed7b2a197841388f5f004471242994aa3e58",
                "filename": "ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/launching/RutaLauncher.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/e49518f38856432997d980f1e5d59670fa10cac5/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/launching/RutaLauncher.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/e49518f38856432997d980f1e5d59670fa10cac5/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/launching/RutaLauncher.java",
                "status": "modified",
                "changes": 26,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/launching/RutaLauncher.java?ref=e49518f38856432997d980f1e5d59670fa10cac5",
                "patch": "@@ -46,7 +46,7 @@\n public class RutaLauncher {\r\n \r\n   public static final String URL_ENCODING = \"UTF-8\";\r\n-  \r\n+\r\n   private static File descriptor;\r\n \r\n   private static File inputFolder;\r\n@@ -120,7 +120,8 @@ public static void main(String[] args) throws Exception {\n       throw new IllegalArgumentException(\"Passed arguments are invalid!\");\r\n     }\r\n \r\n-    AnalysisEngine ae = Ruta.wrapAnalysisEngine(descriptor.toURI().toURL(), view, true, inputEncoding);\r\n+    AnalysisEngine ae = Ruta.wrapAnalysisEngine(descriptor.toURI().toURL(), view, true,\r\n+            inputEncoding);\r\n     configure(ae);\r\n     CAS cas = ae.newCAS();\r\n \r\n@@ -187,15 +188,18 @@ private static void configure(AnalysisEngine ae) throws ResourceConfigurationExc\n \r\n   private static List<File> getFiles(File dir, boolean recusive) {\r\n     List<File> result = new ArrayList<File>();\r\n-    for (File each : dir.listFiles()) {\r\n-      // TODO: find a solution for this hotfix\r\n-      if (each.isHidden()) {\r\n-        continue;\r\n-      }\r\n-      if (each.isFile()) {\r\n-        result.add(each);\r\n-      } else if (each.isDirectory() && recusive) {\r\n-        result.addAll(getFiles(each, recusive));\r\n+    File[] listFiles = dir.listFiles();\r\n+    if (listFiles != null) {\r\n+      for (File each : listFiles) {\r\n+        // TODO: find a solution for this hotfix\r\n+        if (each.isHidden()) {\r\n+          continue;\r\n+        }\r\n+        if (each.isFile()) {\r\n+          result.add(each);\r\n+        } else if (each.isDirectory() && recusive) {\r\n+          result.addAll(getFiles(each, recusive));\r\n+        }\r\n       }\r\n     }\r\n     return result;\r",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4976\n- avoid npe for empty macros\n- add verbalization of add/remove filterings\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748728 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/2f9b208c335f5cadda3b9345218d3a460c809e2c",
        "parent": "https://github.com/apache/uima-ruta/commit/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
        "bug_id": "uima-ruta_25",
        "file": [
            {
                "sha": "c7727bfd3e30cbc6441f5362f8a7b6e63cf6d7de",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java",
                "status": "modified",
                "changes": 24,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/ActionVerbalizer.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "patch": "@@ -26,6 +26,8 @@\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.uima.ruta.action.AbstractRutaAction;\r\n import org.apache.uima.ruta.action.AddAction;\r\n+import org.apache.uima.ruta.action.AddFilterTypeAction;\r\n+import org.apache.uima.ruta.action.AddRetainTypeAction;\r\n import org.apache.uima.ruta.action.AssignAction;\r\n import org.apache.uima.ruta.action.CallAction;\r\n import org.apache.uima.ruta.action.ClearAction;\r\n@@ -57,6 +59,8 @@\n import org.apache.uima.ruta.action.MergeAction;\r\n import org.apache.uima.ruta.action.RemoveAction;\r\n import org.apache.uima.ruta.action.RemoveDuplicateAction;\r\n+import org.apache.uima.ruta.action.RemoveFilterTypeAction;\r\n+import org.apache.uima.ruta.action.RemoveRetainTypeAction;\r\n import org.apache.uima.ruta.action.ReplaceAction;\r\n import org.apache.uima.ruta.action.RetainTypeAction;\r\n import org.apache.uima.ruta.action.SetFeatureAction;\r\n@@ -102,6 +106,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"FILL\";\r\n     } else if (action instanceof FilterTypeAction) {\r\n       return \"FILTERTYPE\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      return \"ADDFILTERTYPE\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      return \"REMOVEFILTERTYPE\";\r\n     } else if (action instanceof LogAction) {\r\n       return \"LOG\";\r\n     } else if (action instanceof MarkOnceAction) {\r\n@@ -124,6 +132,10 @@ public String verbalizeName(AbstractRutaAction action) {\n       return \"REPLACE\";\r\n     } else if (action instanceof RetainTypeAction) {\r\n       return \"RETAINTYPE\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      return \"ADDRETAINTYPE\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      return \"REMOVERETAINTYPE\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       String name = \"SETFEATURE\";\r\n       return name;\r\n@@ -268,6 +280,12 @@ public String verbalize(AbstractRutaAction action) {\n       FilterTypeAction a = (FilterTypeAction) action;\r\n       return a.getList().isEmpty() ? \"FILTERTYPE\" : \"FILTERTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddFilterTypeAction) {\r\n+      AddFilterTypeAction a = (AddFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveFilterTypeAction) {\r\n+      RemoveFilterTypeAction a = (RemoveFilterTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof LogAction) {\r\n       LogAction a = (LogAction) action;\r\n       return name + verbalizer.verbalize(a.getText()) + \", \" + a.getLevel() + \")\";\r\n@@ -333,6 +351,12 @@ public String verbalize(AbstractRutaAction action) {\n       RetainTypeAction a = (RetainTypeAction) action;\r\n       return a.getList().isEmpty() ? \"RETAINTYPE\" : \"RETAINTYPE(\"\r\n               + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof AddRetainTypeAction) {\r\n+      AddRetainTypeAction a = (AddRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n+    } else if (action instanceof RemoveRetainTypeAction) {\r\n+      RemoveRetainTypeAction a = (RemoveRetainTypeAction) action;\r\n+      return name + verbalizer.verbalizeExpressionList(a.getList()) + \")\";\r\n     } else if (action instanceof SetFeatureAction) {\r\n       SetFeatureAction a = (SetFeatureAction) action;\r\n       String e1 = verbalizer.verbalize(a.getFeatureStringExpression());\r",
                "deletions": 0
            },
            {
                "sha": "00ff6253967fc6072f6545af8948a23bb659821f",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/2f9b208c335f5cadda3b9345218d3a460c809e2c/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/verbalize/VerbalizerUtils.java?ref=2f9b208c335f5cadda3b9345218d3a460c809e2c",
                "patch": "@@ -61,6 +61,9 @@ public String verbalizeTypeList(List<Type> list) {\n   }\r\n \r\n   public String verbalizeExpressionList(List<? extends IRutaExpression> list) {\r\n+    if(list == null) {\r\n+      return \"\";\r\n+    }\r\n     StringBuilder result = new StringBuilder();\r\n     Iterator<? extends IRutaExpression> it = list.iterator();\r\n     while (it.hasNext()) {\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4976\n- fixed foreach block parent relinking\n- improved profiling label\n- avoid npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1748711 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
        "parent": "https://github.com/apache/uima-ruta/commit/d0b75b26e9bd7974e79155760a09fa0123e141e8",
        "bug_id": "uima-ruta_26",
        "file": [
            {
                "sha": "540082f2db3536c71227557433e82cef25cd0685",
                "filename": "ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g?ref=1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
                "patch": "@@ -772,7 +772,7 @@ level--;\n \tLCURLY body = statements RCURLY\r\n \t{removeTemporaryVariables(def);}\r\n \t{block.setElements(body);\r\n-\t$blockDeclaration::env.getScript().addBlock(id.getText(),block);\r\n+\t{$blockDeclaration::env = block.getParent();}\r\n \t}\t\r\n \t;\r\n \r",
                "deletions": 1
            },
            {
                "sha": "87ba47ea8477338a4752f8a5f0088c73c30f5a6a",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/visitor/DebugInfoCollectorVisitor.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-core/src/main/java/org/apache/uima/ruta/visitor/DebugInfoCollectorVisitor.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-core/src/main/java/org/apache/uima/ruta/visitor/DebugInfoCollectorVisitor.java",
                "status": "modified",
                "changes": 10,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/visitor/DebugInfoCollectorVisitor.java?ref=1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
                "patch": "@@ -125,25 +125,17 @@ public void endVisit(RutaElement element, ScriptApply result) {\n             if (element instanceof RutaRule && parent.getRule().equals(element)\r\n                     && result instanceof RuleApply) {\r\n               blockApply.setRuleApply((RuleApply) result);\r\n-\r\n-              // } else {\r\n-              // blockApply.add(result);\r\n-              // }\r\n-\r\n             } else if (stack.size() == 1) {\r\n               if (callStack.size() > 1) {\r\n                 // TODO hotfixed\r\n                 RutaElement tme = callStack.get(callStack.size() - 2);\r\n-                if (tme.equals(parent)\r\n-                // || tme.equals(element)\r\n-                ) {\r\n+                if (tme.equals(parent)) {\r\n                   blockApply.add(result);\r\n                 } else {\r\n                   // TODO too many blocks added\r\n                 }\r\n               } else {\r\n                 blockApply.add(result);\r\n-\r\n               }\r\n             } else {\r\n               // TODO refactor !!! ... really!!!!\r",
                "deletions": 9
            },
            {
                "sha": "d460d3f9571ceba39b0300bd98da1367be07117a",
                "filename": "ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/apply/ApplyTreeLabelProvider.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/apply/ApplyTreeLabelProvider.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/apply/ApplyTreeLabelProvider.java",
                "status": "modified",
                "changes": 48,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/apply/ApplyTreeLabelProvider.java?ref=1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
                "patch": "@@ -19,6 +19,10 @@\n \r\n package org.apache.uima.ruta.explain.apply;\r\n \r\n+import java.text.DecimalFormat;\r\n+import java.text.DecimalFormatSymbols;\r\n+import java.util.Locale;\r\n+\r\n import org.apache.uima.cas.Feature;\r\n import org.apache.uima.cas.FeatureStructure;\r\n import org.apache.uima.cas.Type;\r\n@@ -32,6 +36,12 @@\n \r\n public class ApplyTreeLabelProvider extends LabelProvider implements ILabelProvider {\r\n \r\n+  private DecimalFormat dfTime = new DecimalFormat(\"###,###,##0.000\",\r\n+          DecimalFormatSymbols.getInstance(Locale.ENGLISH));;\r\n+\r\n+  private DecimalFormat dfPercentage = new DecimalFormat(\"##0.00\",\r\n+          DecimalFormatSymbols.getInstance(Locale.ENGLISH));;\r\n+\r\n   private ApplyViewPage owner;\r\n \r\n   ImageDescriptor blockApply;\r\n@@ -62,7 +72,7 @@ public Image getImage(Object element) {\n   @Override\r\n   public String getText(Object element) {\r\n \r\n-    String result = \"error\";\r\n+    StringBuilder result = new StringBuilder();\r\n     if (element instanceof IExplainTreeNode) {\r\n       IExplainTreeNode debugNode = (IExplainTreeNode) element;\r\n       TypeSystem ts = debugNode.getTypeSystem();\r\n@@ -74,38 +84,46 @@ public String getText(Object element) {\n         int v1 = fs.getIntValue(f1);\r\n         Feature f2 = ruleType.getFeatureByBaseName(ExplainConstants.TRIED);\r\n         int v2 = fs.getIntValue(f2);\r\n+        result.append(\"[\");\r\n+        result.append(v1);\r\n+        result.append(\"/\");\r\n+        result.append(v2);\r\n+        result.append(\"] \");\r\n+\r\n         Feature f3 = ruleType.getFeatureByBaseName(ExplainConstants.ELEMENT);\r\n         String v3 = fs.getStringValue(f3);\r\n         v3 = v3.replaceAll(\"[\\\\n\\\\r]\", \"\");\r\n-        if(v3.length() > 150) {\r\n+        if (v3.length() > 150) {\r\n           v3 = v3.substring(0, 148) + \"...\";\r\n         }\r\n+        result.append(v3);\r\n+\r\n         Feature f4 = ruleType.getFeatureByBaseName(ExplainConstants.TIME);\r\n         long v4 = fs.getLongValue(f4);\r\n-        String time = \"\";\r\n-        if (v4 > 0.0) {\r\n+        if (v4 > 0) {\r\n           double took = v4 / 1000.0;\r\n-          time = \" [\" + took + \"s\";\r\n+          String s = dfTime.format(took);\r\n+          result.append(\" [\");\r\n+          result.append(s);\r\n+          result.append(\"s\");\r\n+\r\n+          double percent = 100;\r\n           IExplainTreeNode parentNode = debugNode.getParent();\r\n           if (parentNode != null) {\r\n             FeatureStructure parent = parentNode.getFeatureStructure();\r\n             if (parent != null) {\r\n               long parentTime = parent.getLongValue(f4);\r\n-              double percent = (took / (parentTime / 1000.0)) * 100.0;\r\n-              percent = Math.round(percent * 100.0) / 100.0;\r\n-              time += \"|\" + percent + \"%]\";\r\n-            } else {\r\n-              time += \"]\";\r\n+              percent = (took / (parentTime / 1000.0)) * 100.0;\r\n             }\r\n-          } else {\r\n-            time += \"]\";\r\n           }\r\n-\r\n+          result.append(\"|\");\r\n+          result.append(dfPercentage.format(percent));\r\n+          result.append(\"%\");\r\n+          result.append(\"]\");\r\n         }\r\n-        result = \"[\" + v1 + \"/\" + v2 + \"] \" + v3 + time;\r\n       }\r\n     }\r\n-    return result;\r\n+    return result.toString();\r\n \r\n   }\r\n \r",
                "deletions": 15
            },
            {
                "sha": "92d1a32745b84e7ba43f263f577768cd89bfa169",
                "filename": "ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/createdBy/CreatedByViewPage.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/createdBy/CreatedByViewPage.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1db3a7e20a007e7e6f3d4b18594522aa5d6a9674/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/createdBy/CreatedByViewPage.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/createdBy/CreatedByViewPage.java?ref=1db3a7e20a007e7e6f3d4b18594522aa5d6a9674",
                "patch": "@@ -222,7 +222,7 @@ public void selectionChanged(IWorkbenchPart part, ISelection selection) {\n         while (iterator.hasNext()) {\r\n           FeatureStructure fs = (FeatureStructure) iterator.next();\r\n           AnnotationFS afs = (AnnotationFS) fs.getFeatureValue(featureAnnotation);\r\n-          if (afs.equals(featureStructure)) {\r\n+          if (afs != null && afs.equals(featureStructure)) {\r\n             viewer.setInput(fs);\r\n             return;\r\n           }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4242\n* fixed NPE for empty wildcard match\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1659664 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/f05c581214b6f85b7e5ec61a58af98b0ff064a82",
        "parent": "https://github.com/apache/uima-ruta/commit/5dd9620807db27f2ad8057a262d513ba19e8766f",
        "bug_id": "uima-ruta_27",
        "file": [
            {
                "sha": "c992bdf8497ee30dfe868dfff0b03831fb8e59bb",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/EndsWithCondition.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/f05c581214b6f85b7e5ec61a58af98b0ff064a82/ruta-core/src/main/java/org/apache/uima/ruta/condition/EndsWithCondition.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/f05c581214b6f85b7e5ec61a58af98b0ff064a82/ruta-core/src/main/java/org/apache/uima/ruta/condition/EndsWithCondition.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/EndsWithCondition.java?ref=f05c581214b6f85b7e5ec61a58af98b0ff064a82",
                "patch": "@@ -63,7 +63,11 @@ public EvaluatedCondition eval(AnnotationFS annotation, RuleElement element, Rut\n \r\n   private boolean check(RutaStream stream, AnnotationFS matched, Type givenType) {\r\n     RutaBasic endAnchor = stream.getEndAnchor(matched.getEnd());\r\n-    return endAnchor.endsWith(givenType);\r\n+    if(endAnchor != null) {\r\n+      return endAnchor.endsWith(givenType);\r\n+    } else {\r\n+      return false;\r\n+    }\r\n   }\r\n \r\n }\r",
                "deletions": 1
            },
            {
                "sha": "919f0401b3346c4c3cd3821f2e53aebde5314c23",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/condition/StartsWithCondition.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/f05c581214b6f85b7e5ec61a58af98b0ff064a82/ruta-core/src/main/java/org/apache/uima/ruta/condition/StartsWithCondition.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/f05c581214b6f85b7e5ec61a58af98b0ff064a82/ruta-core/src/main/java/org/apache/uima/ruta/condition/StartsWithCondition.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/condition/StartsWithCondition.java?ref=f05c581214b6f85b7e5ec61a58af98b0ff064a82",
                "patch": "@@ -69,7 +69,11 @@ private boolean check(AnnotationFS annotation, Type t, RutaStream stream) {\n       return false;\r\n     }\r\n     RutaBasic beginAnchor = stream.getBeginAnchor(annotation.getBegin());\r\n-    return beginAnchor.beginsWith(t);\r\n+    if(beginAnchor != null) {\r\n+      return beginAnchor.beginsWith(t);\r\n+    } else {\r\n+      return false;\r\n+    }\r\n   }\r\n \r\n }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4233\n- fixed NPE\n- added test\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1658807 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/3e65ad16fef22ad3576add8068145b51d29a5f27",
        "parent": "https://github.com/apache/uima-ruta/commit/60ee37564eb67c7b37e4e4abffe520d523832712",
        "bug_id": "uima-ruta_28",
        "file": [
            {
                "sha": "5f55a317924c267aee66b9a5914904119100f5b2",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/GatherAction.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "patch": "@@ -59,8 +59,8 @@\n \r\n   private List<INumberExpression> indexes;\r\n \r\n-  public GatherAction(TypeExpression structureType, Map<IStringExpression, IRutaExpression> features,\r\n-          List<INumberExpression> indexes) {\r\n+  public GatherAction(TypeExpression structureType,\r\n+          Map<IStringExpression, IRutaExpression> features, List<INumberExpression> indexes) {\r\n     super();\r\n     this.structureType = structureType;\r\n     this.features = features == null ? new HashMap<IStringExpression, IRutaExpression>() : features;\r\n@@ -141,7 +141,8 @@ private void gatherFeatures(TOP structure, Map<IStringExpression, IRutaExpressio\n               // search for\r\n               Collection<AnnotationFS> beginAnchors = stream.getBeginAnchor(fs.getBegin())\r\n                       .getBeginAnchors(range);\r\n-              Collection<AnnotationFS> endAnchors = stream.getEndAnchor(fs.getEnd()).getEndAnchors(range);\r\n+              Collection<AnnotationFS> endAnchors = stream.getEndAnchor(fs.getEnd()).getEndAnchors(\r\n+                      range);\r\n               @SuppressWarnings(\"unchecked\")\r\n               Collection<AnnotationFS> intersection = CollectionUtils.intersection(beginAnchors,\r\n                       endAnchors);\r\n@@ -197,7 +198,9 @@ private void gatherFeatures(TOP structure, Map<IStringExpression, IRutaExpressio\n       RuleElement ruleElement = elements.get(eachInt - 1);\r\n       List<List<RuleElementMatch>> matchInfo = match.getMatchInfo(ruleElement);\r\n       for (List<RuleElementMatch> list : matchInfo) {\r\n-        result.addAll(list);\r\n+        if (list != null) {\r\n+          result.addAll(list);\r\n+        }\r\n       }\r\n     }\r\n     return result;\r",
                "deletions": 4
            },
            {
                "sha": "2829e666751d5f94033fdd2f01fefb156a058840",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java",
                "status": "modified",
                "changes": 15,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RuleMatch.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "patch": "@@ -68,10 +68,11 @@ public boolean matchedCompletely() {\n     return getMatchedAnnotations(element.getSelfIndexList(), element.getContainer());\r\n   }\r\n \r\n-  public AnnotationFS getLastMatchedAnnotation(RuleElement element, boolean direction, AnnotationFS annotation, RutaBlock parent, RutaStream stream) {\r\n+  public AnnotationFS getLastMatchedAnnotation(RuleElement element, boolean direction,\r\n+          AnnotationFS annotation, RutaBlock parent, RutaStream stream) {\r\n     List<AnnotationFS> matchedAnnotations = getMatchedAnnotationsOf(element);\r\n     if (matchedAnnotations.isEmpty()) {\r\n-      if(element.getQuantifier().isOptional(parent, stream)) {\r\n+      if (element.getQuantifier().isOptional(parent, stream)) {\r\n         return annotation;\r\n       } else {\r\n         return null;\r\n@@ -179,16 +180,16 @@ private AnnotationFS getFirstNormal(List<AnnotationFS> textsMatched) {\n     // hotfix for invisible dummy matches\r\n     int pointer = 0;\r\n     AnnotationFS annotationFS = null;\r\n-    \r\n-    if(textsMatched.size() == 0) {\r\n+\r\n+    if (textsMatched.size() == 0) {\r\n       return null;\r\n-    } else if(textsMatched.size() ==1) {\r\n+    } else if (textsMatched.size() == 1) {\r\n       AnnotationFS fs = textsMatched.get(0);\r\n-      if(fs.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n+      if (fs.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n         return null;\r\n       }\r\n     }\r\n-    \r\n+\r\n     while (pointer < textsMatched.size() && (annotationFS = textsMatched.get(pointer)) != null\r\n             && annotationFS.getType().getName().equals(RutaEngine.OPTIONAL_TYPE)) {\r\n       pointer++;\r",
                "deletions": 7
            },
            {
                "sha": "6b55e04e50720515eca10846918ed3045d5226ea",
                "filename": "ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/3e65ad16fef22ad3576add8068145b51d29a5f27/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java",
                "status": "modified",
                "changes": 64,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/test/java/org/apache/uima/ruta/action/GatherTest.java?ref=3e65ad16fef22ad3576add8068145b51d29a5f27",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.uima.cas.Type;\r\n import org.apache.uima.cas.text.AnnotationFS;\r\n import org.apache.uima.cas.text.AnnotationIndex;\r\n+import org.apache.uima.ruta.engine.Ruta;\r\n import org.apache.uima.ruta.engine.RutaEngine;\r\n import org.apache.uima.ruta.engine.RutaTestUtils;\r\n import org.apache.uima.ruta.engine.RutaTestUtils.TestFeature;\r\n@@ -43,23 +44,24 @@\n   public void test() {\r\n     String name = this.getClass().getSimpleName();\r\n     String namespace = this.getClass().getPackage().getName().replaceAll(\"\\\\.\", \"/\");\r\n-    \r\n+\r\n     Map<String, String> complexTypes = new TreeMap<String, String>();\r\n     String typeName = \"org.apache.uima.C\";\r\n     complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n-    \r\n+\r\n     Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n     List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n     features.put(typeName, list);\r\n     String fn1 = \"a\";\r\n     list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n     String fn2 = \"b\";\r\n     list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n-    \r\n+\r\n     CAS cas = null;\r\n     try {\r\n-      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION, namespace + \"/\" + name\r\n-              + \".txt\", 50, false, false, complexTypes, features, namespace + \"/\");\r\n+      cas = RutaTestUtils.process(namespace + \"/\" + name + RutaEngine.SCRIPT_FILE_EXTENSION,\r\n+              namespace + \"/\" + name + \".txt\", 50, false, false, complexTypes, features, namespace\r\n+                      + \"/\");\r\n     } catch (Exception e) {\r\n       e.printStackTrace();\r\n       assert (false);\r\n@@ -81,7 +83,57 @@ public void test() {\n     v2 = (AnnotationFS) next.getFeatureValue(f2);\r\n     assertEquals(\"A\", v1.getCoveredText());\r\n     assertEquals(\"B\", v2.getCoveredText());\r\n-   \r\n+\r\n     cas.release();\r\n   }\r\n+\r\n+  @Test\r\n+  public void testOptionalMatch() {\r\n+    String document = \"A X C\";\r\n+    String script = \"\";\r\n+    script += \"W{REGEXP(\\\"A\\\")->MARK(T1)};\";\r\n+    script += \"W{REGEXP(\\\"B\\\")->MARK(T2)};\";\r\n+    script += \"T1 T2?{-> GATHER(C, 1, 2, \\\"a\\\" = 1, \\\"b\\\" = 2)};\";\r\n+    Map<String, String> complexTypes = new TreeMap<String, String>();\r\n+    String typeName = \"org.apache.uima.C\";\r\n+    complexTypes.put(typeName, \"uima.tcas.Annotation\");\r\n+\r\n+    Map<String, List<TestFeature>> features = new TreeMap<String, List<TestFeature>>();\r\n+    List<TestFeature> list = new ArrayList<RutaTestUtils.TestFeature>();\r\n+    features.put(typeName, list);\r\n+    String fn1 = \"a\";\r\n+    list.add(new TestFeature(fn1, \"\", \"uima.tcas.Annotation\"));\r\n+    String fn2 = \"b\";\r\n+    list.add(new TestFeature(fn2, \"\", \"uima.tcas.Annotation\"));\r\n+    CAS cas = null;\r\n+    try {\r\n+      cas = RutaTestUtils.getCAS(document, complexTypes, features);\r\n+      Ruta.apply(cas, script);\r\n+    } catch (Exception e) {\r\n+      e.printStackTrace();\r\n+    }\r\n+\r\n+    Type t = null;\r\n+    AnnotationIndex<AnnotationFS> ai = null;\r\n+    FSIterator<AnnotationFS> iterator = null;\r\n+    AnnotationFS next = null;\r\n+    AnnotationFS v1 = null;\r\n+    AnnotationFS v2 = null;\r\n+    t = cas.getTypeSystem().getType(typeName);\r\n+    Feature f1 = t.getFeatureByBaseName(fn1);\r\n+    Feature f2 = t.getFeatureByBaseName(fn2);\r\n+    ai = cas.getAnnotationIndex(t);\r\n+    assertEquals(1, ai.size());\r\n+    iterator = ai.iterator();\r\n+    next = iterator.next();\r\n+    v1 = (AnnotationFS) next.getFeatureValue(f1);\r\n+    v2 = (AnnotationFS) next.getFeatureValue(f2);\r\n+    assertEquals(\"A\", v1.getCoveredText());\r\n+    assertEquals(null, v2);\r\n+\r\n+    if (cas != null) {\r\n+      cas.release();\r\n+    }\r\n+\r\n+  }\r\n }\r",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE for failed feature match expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1611587 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/1b65f323386f8a25add12b6c75047f0ae5ece504",
        "parent": "https://github.com/apache/uima-ruta/commit/6a5f7455db5f5303153c4a94a7da92bc516c4698",
        "bug_id": "uima-ruta_29",
        "file": [
            {
                "sha": "b861d9bf54a79a2db8ad2c1a9ec743f947af5884",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/number/NumberFeatureExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1b65f323386f8a25add12b6c75047f0ae5ece504/ruta-core/src/main/java/org/apache/uima/ruta/expression/number/NumberFeatureExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1b65f323386f8a25add12b6c75047f0ae5ece504/ruta-core/src/main/java/org/apache/uima/ruta/expression/number/NumberFeatureExpression.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/number/NumberFeatureExpression.java?ref=1b65f323386f8a25add12b6c75047f0ae5ece504",
                "patch": "@@ -40,15 +40,18 @@ public NumberFeatureExpression(FeatureExpression fe) {\n   }\r\n \r\n   public int getIntegerValue(RutaBlock parent, AnnotationFS annotation, RutaStream stream) {\r\n-    return getNumberValue(parent, annotation, stream).intValue();\r\n+    Number v = getNumberValue(parent, annotation, stream);\r\n+    return v == null ? 0 : v.intValue();\r\n   }\r\n \r\n   public double getDoubleValue(RutaBlock parent, AnnotationFS annotation, RutaStream stream) {\r\n-    return getNumberValue(parent, annotation, stream).doubleValue();\r\n+    Number v = getNumberValue(parent, annotation, stream);\r\n+    return v == null ? 0 : v.doubleValue();\r\n   }\r\n \r\n   public float getFloatValue(RutaBlock parent, AnnotationFS annotation, RutaStream stream) {\r\n-    return getNumberValue(parent, annotation, stream).floatValue();\r\n+    Number v = getNumberValue(parent, annotation, stream);\r\n+    return v == null ? 0 : v.floatValue();\r\n   }\r\n \r\n   private Number getNumberValue(RutaBlock parent, AnnotationFS annotation, RutaStream stream) {\r",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-3539\n- fixed NPE for null annotation\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1566590 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/9db3e59c21f511e89e4609f943919c5e5341355f",
        "parent": "https://github.com/apache/uima-ruta/commit/0ee2d23f9ec5cc36c90b56d245492a87969d443c",
        "bug_id": "uima-ruta_30",
        "file": [
            {
                "sha": "b01f3a309771c82f48e628431d19bcd7efcd1aec",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/9db3e59c21f511e89e4609f943919c5e5341355f/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/9db3e59c21f511e89e4609f943919c5e5341355f/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java?ref=9db3e59c21f511e89e4609f943919c5e5341355f",
                "patch": "@@ -182,7 +182,7 @@ public void initalizeBasics() {\n         }\r\n       }\r\n       for (AnnotationFS a : allAnnotations) {\r\n-          addAnnotation(a, false, false, null);\r\n+        addAnnotation(a, false, false, null);\r\n       }\r\n       updateIterators(documentAnnotation);\r\n     } else {\r\n@@ -234,7 +234,7 @@ public void addAnnotation(AnnotationFS annotation,\n   public void addAnnotation(AnnotationFS annotation, boolean addToIndex, boolean updateInternal,\r\n           AbstractRuleMatch<? extends AbstractRule> creator) {\r\n     Type type = annotation.getType();\r\n-    if(type.equals(basicType)) {\r\n+    if (type.equals(basicType)) {\r\n       return;\r\n     }\r\n     boolean modified = checkSpan(annotation);\r\n@@ -753,6 +753,9 @@ public void setSimpleGreedyForComposed(boolean simpleGreedyForComposed) {\n   }\r\n \r\n   public boolean isVisible(AnnotationFS annotationFS) {\r\n+    if (annotationFS == null) {\r\n+      return false;\r\n+    }\r\n     AnnotationFS windowAnnotation = filter.getWindowAnnotation();\r\n     if (windowAnnotation != null\r\n             && (annotationFS.getBegin() < windowAnnotation.getBegin() || annotationFS.getEnd() > windowAnnotation\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-3539\n- fixed NPE for explanations with no conditions/actions\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1558086 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/0c784ce24b3906460581f5b5d179dc757d2f7dd8",
        "parent": "https://github.com/apache/uima-ruta/commit/e87f9931be2d72d4a2df5a340a9319e4811d75d4",
        "bug_id": "uima-ruta_31",
        "file": [
            {
                "sha": "f1d50b84c9ba3167788d963c0487092acfcb6a8b",
                "filename": "ruta-ep-addons/src/main/java/org/apache/uima/ruta/statistics/StatisticsEntry.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/0c784ce24b3906460581f5b5d179dc757d2f7dd8/ruta-ep-addons/src/main/java/org/apache/uima/ruta/statistics/StatisticsEntry.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/0c784ce24b3906460581f5b5d179dc757d2f7dd8/ruta-ep-addons/src/main/java/org/apache/uima/ruta/statistics/StatisticsEntry.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-addons/src/main/java/org/apache/uima/ruta/statistics/StatisticsEntry.java?ref=0c784ce24b3906460581f5b5d179dc757d2f7dd8",
                "patch": "@@ -69,7 +69,10 @@ public StatisticsEntry(String name, double total, int amount, double part) {\n     IntArrayFSImpl vamount = (IntArrayFSImpl) fs.getFeatureValue(famount);\r\n     DoubleArrayFSImpl vpart = (DoubleArrayFSImpl) fs.getFeatureValue(fparts);\r\n \r\n-    String[] narray = vname.toArray();\r\n+    String[] narray = new String[0];\r\n+    if(vname != null) {\r\n+      narray = vname.toArray();\r\n+    }\r\n     double[] tarray = vtotal.toArray();\r\n     int[] aarray = vamount.toArray();\r\n     double[] parray = vpart.toArray();\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE for pruning in explanation of empty script\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1728288 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/17ed2ae11a57a072a4827f2d9e51ff7cb08f3d5d",
        "parent": "https://github.com/apache/uima-ruta/commit/baf7884f9169801772e7540fb0bccd27746a7c3a",
        "bug_id": "uima-ruta_32",
        "file": [
            {
                "sha": "ff203a5ca0053861cd4b8484c8519ecd1525e5c2",
                "filename": "ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/tree/ExplainTree.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/17ed2ae11a57a072a4827f2d9e51ff7cb08f3d5d/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/tree/ExplainTree.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/17ed2ae11a57a072a4827f2d9e51ff7cb08f3d5d/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/tree/ExplainTree.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-addons/src/main/java/org/apache/uima/ruta/explain/tree/ExplainTree.java?ref=17ed2ae11a57a072a4827f2d9e51ff7cb08f3d5d",
                "patch": "@@ -305,6 +305,9 @@ private void processEvaluatedCondition(FeatureStructure fs, IExplainTreeNode par\n   }\r\n \r\n   private void prune(IExplainTreeNode node) {\r\n+    if(node == null) {\r\n+      return;\r\n+    }\r\n     List<IExplainTreeNode> children = node.getChildren();\r\n     IExplainTreeNode parent = node.getParent();\r\n     for (IExplainTreeNode each : new ArrayList<IExplainTreeNode>(children)) {\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-3051\n- fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1500266 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/9a24355d4df677524647f56f856f125734c9190c",
        "parent": "https://github.com/apache/uima-ruta/commit/217ac69ef38aeb8125b83b997ab70c173a85fc35",
        "bug_id": "uima-ruta_33",
        "file": [
            {
                "sha": "eed68e2406540cbcfe8ca1cfa114241cb2a1c57f",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/9a24355d4df677524647f56f856f125734c9190c/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/rule/RegExpRule.java?ref=9a24355d4df677524647f56f856f125734c9190c",
                "patch": "@@ -98,7 +98,8 @@ public ScriptApply apply(RutaStream stream, InferenceCrowd crowd) {\n           ruleMatch.addMatched(0, afs);\r\n         }\r\n       }\r\n-      if (!ruleMatch.getMatchedAnnotationsOfRoot().isEmpty()) {\r\n+      List<AnnotationFS> matchedAnnotationsOfRoot = ruleMatch.getMatchedAnnotationsOfRoot();\r\n+      if (matchedAnnotationsOfRoot != null && !matchedAnnotationsOfRoot.isEmpty()) {\r\n         ruleApply.add(ruleMatch);\r\n       }\r\n     }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid npe in feature matches\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/ruta/trunk@1488732 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/c20c22d3547499be3ff5b0c93a0f4266975b82b0",
        "parent": "https://github.com/apache/uima-ruta/commit/340c306b015ae499dbdef7427c3147cbf5b3c9c6",
        "bug_id": "uima-ruta_34",
        "file": [
            {
                "sha": "902eb705a66fbd2bde3c691aadd7b2ba044d56a2",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/FeatureMatchExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/c20c22d3547499be3ff5b0c93a0f4266975b82b0/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/FeatureMatchExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/c20c22d3547499be3ff5b0c93a0f4266975b82b0/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/FeatureMatchExpression.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/FeatureMatchExpression.java?ref=c20c22d3547499be3ff5b0c93a0f4266975b82b0",
                "patch": "@@ -103,7 +103,7 @@ public boolean checkFeatureValue(AnnotationFS afs, Feature feature, RutaStream s\n       if (arg instanceof StringExpression) {\r\n         StringExpression expr = (StringExpression) arg;\r\n         String v2 = expr.getStringValue(parent, afs, stream);\r\n-        return v1.equals(v2);\r\n+        return v1 != null && v1.equals(v2);\r\n       }\r\n     }\r\n     return false;\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "no jira - avoid NPE in syntax check if script file is not build yet\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1696543 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/fa0adf61975f38103468696226e4b96f795bde4d",
        "parent": "https://github.com/apache/uima-ruta/commit/ca530da90ff58dc46785142c8e77af415f2785f5",
        "bug_id": "uima-ruta_35",
        "file": [
            {
                "sha": "cb7b651c2abb3a6ad8925144e9c751b3ccc0e38f",
                "filename": "ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/fa0adf61975f38103468696226e4b96f795bde4d/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/fa0adf61975f38103468696226e4b96f795bde4d/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-ep-ide-ui/src/main/java/org/apache/uima/ruta/ide/validator/LanguageCheckerVisitor.java?ref=fa0adf61975f38103468696226e4b96f795bde4d",
                "patch": "@@ -1282,6 +1282,10 @@ private TypeSystemDescription getTypeSystemOfScript() throws InvalidXMLException\n           CoreException {\n     IPath descriptorPath = RutaProjectUtils.getTypeSystemDescriptorPath(sourceModule.getResource()\n             .getLocation(), sourceModule.getScriptProject().getProject());\n+    if(descriptorPath == null) {\n+      return null;\n+    }\n+    \n     TypeSystemDescription typeSysDescr = null;\n     if (descriptorPath.toFile().exists()) {\n       typeSysDescr = UIMAFramework.getXMLParser().parseTypeSystemDescription(",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4549\n-avoid NPE when removing a not up-to-date annotation concerning partitioning\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1694453 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/1438c19136fa471fbcbdf781f672fb64bb4e52ef",
        "parent": "https://github.com/apache/uima-ruta/commit/57267a613e5fc43ebe4421b4cfc7f8afffa36671",
        "bug_id": "uima-ruta_36",
        "file": [
            {
                "sha": "5c6b1ec71491a92f47b4450be1439b4e7415bba8",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/1438c19136fa471fbcbdf781f672fb64bb4e52ef/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/1438c19136fa471fbcbdf781f672fb64bb4e52ef/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java?ref=1438c19136fa471fbcbdf781f672fb64bb4e52ef",
                "patch": "@@ -340,8 +340,12 @@ public void removeAnnotation(AnnotationFS annotation, Type type) {\n     Type parent = type;\r\n     RutaBasic beginAnchor = getBeginAnchor(annotation.getBegin());\r\n     RutaBasic endAnchor = getEndAnchor(annotation.getEnd());\r\n-    beginAnchor.removeBegin(annotation, parent);\r\n-    endAnchor.removeEnd(annotation, parent);\r\n+    if(beginAnchor != null) {\r\n+    \tbeginAnchor.removeBegin(annotation, parent);\r\n+    }\r\n+    if(endAnchor != null) {\r\n+    \tendAnchor.removeEnd(annotation, parent);\r\n+    }\r\n     if (!(annotation instanceof RutaBasic)) {\r\n       cas.removeFsFromIndexes(annotation);\r\n     }\r\n@@ -530,7 +534,7 @@ public JCas getJCas() {\n       return Collections.emptySet();\r\n     }\r\n     RutaBasic beginAnchor = getBeginAnchor(windowAnnotation.getBegin());\r\n-    if (beginAnchor.getEnd() == windowAnnotation.getEnd()) {\r\n+    if (beginAnchor != null && beginAnchor.getEnd() == windowAnnotation.getEnd()) {\r\n       Collection<RutaBasic> result = new ArrayList<RutaBasic>(1);\r\n       result.add(beginAnchor);\r\n       return result;\r",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-3650\n- fixed NPE for building without package def\n- improve error message in parser\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1674756 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/b9b202cf48a0dea611235f03c87ca8f9c481f013",
        "parent": "https://github.com/apache/uima-ruta/commit/b3b7cff5fd59be4afc8cd43e690871ca2efd523d",
        "bug_id": "uima-ruta_37",
        "file": [
            {
                "sha": "3981a086dcd5dea5d705fdc8524628678b4be2b1",
                "filename": "ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "blob_url": "https://github.com/apache/uima-ruta/blob/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "raw_url": "https://github.com/apache/uima-ruta/raw/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/antlr3/org/apache/uima/ruta/parser/RutaParser.g?ref=b9b202cf48a0dea611235f03c87ca8f9c481f013",
                "patch": "@@ -142,20 +142,20 @@ public void setExternalFactory(RutaExternalFactory factory) {\n \t\r\n    \t    if (e instanceof NoViableAltException) {\r\n \t      NoViableAltException nvae = (NoViableAltException) e;\r\n-\t      String msg = \"Error in line \" + nvae.line + \", \\\"\" + text + \"\\\": found no viable alternative\";\r\n+\t      String msg = \"Error in \"+moduleName+\",  line \" + nvae.line + \", \\\"\" + text + \"\\\": found no viable alternative\";\r\n \t      emitErrorMessage(msg);\r\n \t    } else if (e instanceof MismatchedTokenException) {\r\n \t      MismatchedTokenException mte = (MismatchedTokenException) e;\r\n \t      int expectedInt = mte.expecting;\r\n \t      String stringExpected = getTokenNames()[expectedInt];\r\n-\t      String msg = \"Error in line \" + line + \", \\\"\" + text + \"\\\": expected \" + stringExpected\r\n+\t      String msg = \"Error in \"+moduleName+\", line \" + line + \", \\\"\" + text + \"\\\": expected \" + stringExpected\r\n \t              + \", but found \" + stringFound;\r\n \t      emitErrorMessage(msg);\r\n \t    } else if (e instanceof MissingTokenException) {\r\n \t      MissingTokenException mte = (MissingTokenException) e;\r\n     \t      int missingType = mte.getMissingType();\r\n     \t      String stringMissing = getTokenNames()[missingType];\r\n-    \t      String msg = \"Error in line \" + line + \", \\\"\" + text + \"\\\": missing \" + stringMissing\r\n+    \t      String msg = \"Error in \"+moduleName+\",  line \" + line + \", \\\"\" + text + \"\\\": missing \" + stringMissing\r\n                     + \", but found \" + stringFound;\r\n     \t      emitErrorMessage(msg);\r\n \t    } else {\r",
                "deletions": 3
            },
            {
                "sha": "3e3b3c2c95fe6c87114b73a656f34a40cb29a35e",
                "filename": "ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/b9b202cf48a0dea611235f03c87ca8f9c481f013/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-maven-plugin/src/main/java/org/apache/uima/ruta/maven/RutaGenerateDescriptorMojo.java?ref=b9b202cf48a0dea611235f03c87ca8f9c481f013",
                "patch": "@@ -297,11 +297,14 @@ private void createDescriptors(RutaDescriptorFactory factory, URLClassLoader cla\n           RutaBuildOptions options, RutaDescriptorInformation descriptorInformation)\n           throws IOException, RecognitionException, InvalidXMLException,\n           ResourceInitializationException, URISyntaxException, SAXException {\n-    String packageString = descriptorInformation.getPackageString().replaceAll(\"[.]\", \"/\");\n-    String engineOutput = new File(analysisEngineOutputDirectory, packageString + \"/\"\n+    String packageString = \"\";\n+    if(!StringUtils.isBlank(descriptorInformation.getPackageString())) {\n+    \tpackageString = descriptorInformation.getPackageString().replaceAll(\"[.]\", \"/\").concat(\"/\");\n+    }\n+    String engineOutput = new File(analysisEngineOutputDirectory, packageString\n             + descriptorInformation.getScriptName() + analysisEngineSuffix + \".xml\")\n             .getAbsolutePath();\n-    String typeSystemOutput = new File(typeSystemOutputDirectory, packageString + \"/\"\n+    String typeSystemOutput = new File(typeSystemOutputDirectory, packageString\n             + descriptorInformation.getScriptName() + typeSystemSuffix + \".xml\").getAbsolutePath();\n     Pair<AnalysisEngineDescription, TypeSystemDescription> descriptions = factory\n             .createDescriptions(engineOutput, typeSystemOutput, descriptorInformation, options,",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-4319\n- avoid NPE for aliased type expression interpreted as generic feature expression\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1670457 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/bfe212e0e485dcc984d7a380cb574ae8ab43e64c",
        "parent": "https://github.com/apache/uima-ruta/commit/3ff31e295d124ce177db7703492fe37f4cc408b2",
        "bug_id": "uima-ruta_38",
        "file": [
            {
                "sha": "569854279a60129316a3e9caa68127d90daf9e2e",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/action/AbstractStructureAction.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/bfe212e0e485dcc984d7a380cb574ae8ab43e64c/ruta-core/src/main/java/org/apache/uima/ruta/action/AbstractStructureAction.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/bfe212e0e485dcc984d7a380cb574ae8ab43e64c/ruta-core/src/main/java/org/apache/uima/ruta/action/AbstractStructureAction.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/action/AbstractStructureAction.java?ref=bfe212e0e485dcc984d7a380cb574ae8ab43e64c",
                "patch": "@@ -85,10 +85,13 @@ protected void fillFeatures(TOP structure, Map<IStringExpression, IRutaExpressio\n           TypeExpression type = fe.getTypeExpr(parent);\r\n           List<AnnotationFS> annotationsInWindow = stream.getAnnotationsInWindow(matchedAnnotation,\r\n                   type.getType(parent));\r\n-          List<AnnotationFS> featureAnnotations = new ArrayList<AnnotationFS>(fe.getFeatureAnnotations(annotationsInWindow, stream, parent, false));\r\n+          List<AnnotationFS> featureAnnotations = annotationsInWindow;\r\n+          if (fe.getFeatures(parent) != null) {\r\n+            featureAnnotations = new ArrayList<AnnotationFS>(fe.getFeatureAnnotations(\r\n+                    annotationsInWindow, stream, parent, false));\r\n+          }\r\n           if (typeSystem.subsumes(jcas.getCasType(FSArray.type), range)) {\r\n-            structure\r\n-                    .setFeatureValue(targetFeature, UIMAUtils.toFSArray(jcas, featureAnnotations));\r\n+            structure.setFeatureValue(targetFeature, UIMAUtils.toFSArray(jcas, featureAnnotations));\r\n           } else if (typeSystem.subsumes(range, type.getType(parent))\r\n                   && !featureAnnotations.isEmpty()) {\r\n             AnnotationFS annotation = featureAnnotations.get(0);\r",
                "deletions": 3
            },
            {
                "sha": "d89fd0cc290db85106c58b63fd2a3320c246c9fd",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/bfe212e0e485dcc984d7a380cb574ae8ab43e64c/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/bfe212e0e485dcc984d7a380cb574ae8ab43e64c/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java",
                "status": "modified",
                "changes": 29,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/expression/feature/SimpleFeatureExpression.java?ref=bfe212e0e485dcc984d7a380cb574ae8ab43e64c",
                "patch": "@@ -41,7 +41,7 @@\n public class SimpleFeatureExpression extends FeatureExpression {\r\n \r\n   private MatchReference mr;\r\n-  \r\n+\r\n   private TypeExpression typeExpr;\r\n \r\n   private List<String> features;\r\n@@ -71,9 +71,12 @@ public Feature getFeature(RutaBlock parent) {\n \r\n   @Override\r\n   public List<Feature> getFeatures(RutaBlock parent) {\r\n-    if(mr != null) {\r\n+    if (mr != null) {\r\n       typeExpr = mr.getTypeExpression(parent);\r\n       FeatureExpression featureExpression = mr.getFeatureExpression(parent);\r\n+      if (featureExpression == null) {\r\n+        return null;\r\n+      }\r\n       features = featureExpression.getFeatureStringList(parent);\r\n     }\r\n     List<Feature> result = new ArrayList<Feature>();\r\n@@ -86,21 +89,21 @@ public Feature getFeature(RutaBlock parent) {\n       } else {\r\n         feature = type.getFeatureByBaseName(each);\r\n         if (feature == null) {\r\n-          if(!StringUtils.equals(each, UIMAConstants.FEATURE_COVERED_TEXT_SHORT))\r\n-          throw new IllegalArgumentException(\"Not able to access feature \" + each + \" of type \"\r\n-                  + type.getName());\r\n+          if (!StringUtils.equals(each, UIMAConstants.FEATURE_COVERED_TEXT_SHORT))\r\n+            throw new IllegalArgumentException(\"Not able to access feature \" + each + \" of type \"\r\n+                    + type.getName());\r\n         }\r\n       }\r\n       result.add(feature);\r\n-      if(feature != null) {\r\n+      if (feature != null) {\r\n         type = feature.getRange();\r\n       }\r\n     }\r\n     return result;\r\n   }\r\n \r\n   public TypeExpression getTypeExpr(RutaBlock parent) {\r\n-    if(mr != null) {\r\n+    if (mr != null) {\r\n       return mr.getTypeExpression(parent);\r\n     }\r\n     return typeExpr;\r\n@@ -111,7 +114,7 @@ public void setTypeExpr(TypeExpression typeExpr) {\n   }\r\n \r\n   public List<String> getFeatureStringList(RutaBlock parent) {\r\n-    if(mr != null) {\r\n+    if (mr != null) {\r\n       features = mr.getFeatureExpression(parent).getFeatureStringList(parent);\r\n     }\r\n     return features;\r\n@@ -128,7 +131,7 @@ public void setFeatures(List<String> features) {\n     for (AnnotationFS eachBase : annotations) {\r\n       AnnotationFS afs = eachBase;\r\n       for (Feature feature : features) {\r\n-        if(feature == null || feature.getRange().isPrimitive()) {\r\n+        if (feature == null || feature.getRange().isPrimitive()) {\r\n           // feature == null -> this is the coveredText \"feature\"\r\n           if (this instanceof FeatureMatchExpression) {\r\n             FeatureMatchExpression fme = (FeatureMatchExpression) this;\r\n@@ -154,19 +157,17 @@ public void setFeatures(List<String> features) {\n         }\r\n       } else {\r\n         // exploit expression for null assignments\r\n-        IRutaExpression arg = ((FeatureMatchExpression)this).getArg();\r\n-        if(arg instanceof NullExpression) {\r\n+        IRutaExpression arg = ((FeatureMatchExpression) this).getArg();\r\n+        if (arg instanceof NullExpression) {\r\n           result.addAll(annotations);\r\n         }\r\n       }\r\n     }\r\n     return result;\r\n   }\r\n+\r\n   public MatchReference getMatchReference() {\r\n     return mr;\r\n   }\r\n \r\n-\r\n-\r\n-\r\n }\r",
                "deletions": 14
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-2495\n- fixed NPE for missing parent nodes\n- added error message if evaluated types are not defined\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/sandbox/trunk/TextMarker@1406513 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/04844d3aa9137ebe7e66f3f5efb93013c10714e1",
        "parent": "https://github.com/apache/uima-ruta/commit/ef6f927fb85ab669ba11205e32302a610feeacfe",
        "bug_id": "uima-ruta_39",
        "file": [
            {
                "sha": "f0c4223c40c32b63c4fb5d0c35be20689d85385c",
                "filename": "uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/searchStrategy/TestingSearchStrategy.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "patch": "@@ -49,6 +49,9 @@ public IFile findTypeSystem(IFile casFile) {\n     IPath relativeTo = location.makeRelativeTo(testFolder.getLocation());\r\n     IPath segments = relativeTo.removeLastSegments(2);\r\n     String scriptName = segments.lastSegment();\r\n+    if(scriptName == null) {\r\n+      return null;\r\n+    }\r\n     scriptName += \"TypeSystem.xml\";\r\n     segments = segments.removeLastSegments(1);\r\n     IFolder descPackageFolder = null;\r",
                "deletions": 0
            },
            {
                "sha": "c8c14344a303d480885b58bac5b691e4f46276a4",
                "filename": "uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-addons/src/main/java/org/apache/uima/textmarker/testing/ui/views/tree/TestEvaluationTree.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.uima.cas.FeatureStructure;\r\n import org.apache.uima.cas.Type;\r\n import org.apache.uima.cas.text.AnnotationFS;\r\n+import org.apache.uima.textmarker.addons.TextMarkerAddonsPlugin;\r\n import org.apache.uima.textmarker.caseditor.view.tree.AnnotationTreeNode;\r\n import org.apache.uima.textmarker.caseditor.view.tree.ITreeNode;\r\n import org.apache.uima.textmarker.caseditor.view.tree.TypeTreeNode;\r\n@@ -49,7 +50,6 @@ public void createTree(CAS cas) {\n     // Creating RootNode and children that function as root nodes\r\n     // for the FalsePositive /FalseNegative subtrees\r\n     root = new TypeTreeNode(null, cas.getAnnotationType());\r\n-    boolean containsEvalInfos = false;\r\n \r\n     TypeTreeNode fproot = new TypeTreeNode(root, falsePositiveType);\r\n     TypeTreeNode fnroot = new TypeTreeNode(root, falseNegativeType);\r\n@@ -61,11 +61,9 @@ public void createTree(CAS cas) {\n     addEvalNodes(cas, falseNegativeType, fnroot);\r\n     addEvalNodes(cas, truePositiveType, tproot);\r\n \r\n-    // if (containsEvalInfos) {\r\n     root.addChild(fproot);\r\n     root.addChild(fnroot);\r\n     root.addChild(tproot);\r\n-    // }\r\n   }\r\n \r\n   private void addEvalNodes(CAS cas, Type falsePositiveType, TypeTreeNode fproot) {\r\n@@ -82,7 +80,12 @@ private void addEvalNodes(CAS cas, Type falsePositiveType, TypeTreeNode fproot)\n           fproot.addChild(parentTypeNode);\r\n         }\r\n         AnnotationTreeNode newNode = new AnnotationTreeNode(parentTypeNode, a);\r\n-        parentTypeNode.addChild(newNode);\r\n+        if (parentTypeNode != null) {\r\n+          parentTypeNode.addChild(newNode);\r\n+        } else {\r\n+          TextMarkerAddonsPlugin.error(new IllegalArgumentException(\r\n+                  \"Trying to display unknown type for \" + a));\r\n+        }\r\n       }\r\n       iter.moveToNext();\r\n     }\r",
                "deletions": 4
            },
            {
                "sha": "6fc3c56189d11acbcba66ff9e1c256b1bafaee95",
                "filename": "uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/04844d3aa9137ebe7e66f3f5efb93013c10714e1/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/uimaj-ep-textmarker-caseditor/src/main/java/org/apache/uima/textmarker/caseditor/view/tree/FSTreeNode.java?ref=04844d3aa9137ebe7e66f3f5efb93013c10714e1",
                "patch": "@@ -19,6 +19,7 @@\n \r\n package org.apache.uima.textmarker.caseditor.view.tree;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.Collections;\r\n import java.util.List;\r\n \r\n@@ -34,7 +35,7 @@\n   protected FeatureStructure fs;\r\n \r\n   public FSTreeNode(ITreeNode parent, FeatureStructure annotation) {\r\n-    this(parent, annotation, null);\r\n+    this(parent, annotation, new ArrayList<Type>());\r\n   }\r\n \r\n   public FSTreeNode(ITreeNode parent, FeatureStructure annotation, List<Type> parentTypes) {\r\n@@ -92,19 +93,17 @@ public void addFeatures(ITreeNode parent, Feature f, FeatureStructure featureStr\n       }\r\n     } else if (f.getRange() instanceof Type) {\r\n       FeatureStructure featureValue = featureStructure.getFeatureValue(f);\r\n-      if (featureValue instanceof AnnotationFS\r\n-              && expandable(featureValue.getType(), parentTypes)) {\r\n+      if (featureValue instanceof AnnotationFS && expandable(featureValue.getType(), parentTypes)) {\r\n         parent.addChild(new AnnotationTreeNode(this, ((AnnotationFS) featureValue), parentTypes));\r\n       }\r\n     }\r\n   }\r\n \r\n-  \r\n   private boolean expandable(Type type, List<Type> parentTypes) {\r\n     int frequency = Collections.frequency(parentTypes, type);\r\n     return frequency < 5;\r\n   }\r\n-  \r\n+\r\n   public Object getAdapter(Class adapter) {\r\n \r\n     if (FSTreeNode.class.equals(adapter)) {\r",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "uima-ruta",
        "message": "UIMA-3750\n- avoid NPE, doesn't really matter anyway if it is visible or not, and if it does, let it be visible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/uima/ruta/trunk@1587833 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/uima-ruta/commit/9bc83c3f58598c558cbc0f5bae3da5edfb1fd752",
        "parent": "https://github.com/apache/uima-ruta/commit/19e68eae0d6bce901da16e183b685fa47b4362db",
        "bug_id": "uima-ruta_40",
        "file": [
            {
                "sha": "4b99ed4b8a1e3bad0b7a4681787705bb811aded8",
                "filename": "ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "blob_url": "https://github.com/apache/uima-ruta/blob/9bc83c3f58598c558cbc0f5bae3da5edfb1fd752/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "raw_url": "https://github.com/apache/uima-ruta/raw/9bc83c3f58598c558cbc0f5bae3da5edfb1fd752/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java",
                "status": "modified",
                "changes": 20,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/uima-ruta/contents/ruta-core/src/main/java/org/apache/uima/ruta/RutaStream.java?ref=9bc83c3f58598c558cbc0f5bae3da5edfb1fd752",
                "patch": "@@ -766,17 +766,21 @@ public boolean isVisible(AnnotationFS annotationFS) {\n     int end = annotationFS.getEnd();\r\n     Set<Type> currentHiddenTypes = filter.getCurrentHiddenTypes();\r\n     RutaBasic beginAnchor = getBeginAnchor(begin);\r\n-    for (Type type : currentHiddenTypes) {\r\n-      boolean partOf = beginAnchor.isPartOf(type);\r\n-      if (partOf) {\r\n-        return false;\r\n+    if (beginAnchor != null) {\r\n+      for (Type type : currentHiddenTypes) {\r\n+        boolean partOf = beginAnchor.isPartOf(type);\r\n+        if (partOf) {\r\n+          return false;\r\n+        }\r\n       }\r\n     }\r\n     RutaBasic endAnchor = getEndAnchor(end);\r\n-    for (Type type : currentHiddenTypes) {\r\n-      boolean partOf = endAnchor.isPartOf(type);\r\n-      if (partOf) {\r\n-        return false;\r\n+    if (endAnchor != null) {\r\n+      for (Type type : currentHiddenTypes) {\r\n+        boolean partOf = endAnchor.isPartOf(type);\r\n+        if (partOf) {\r\n+          return false;\r\n+        }\r\n       }\r\n     }\r\n     return true;\r",
                "deletions": 8
            }
        ]
    }
]